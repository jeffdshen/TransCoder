{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( digits , n ) :\n    count = [ 0 ] * ( n + 1 ) ;\n    count [ 0 ] = 1 ;\n    count [ 1 ] = 1 ;\n    for i in range ( 2 , n + 1 ) :\n        count [ i ] = 0 ;\n        if ( digits [ i - 1 ] > '0' ) :\n            count [ i ] = count [ i - 1 ] ;\n        if ( digits [ i - 2 ] == '1' or ( digits [ i - 2 ] == '2' and digits [ i - 1 ] < '7' ) ) :\n            count [ i ] += count [ i - 2 ] ;\n    return count [ n ] ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (['B', 'C', 'E', 'E', 'F', 'F', 'G', 'J', 'K', 'K', 'L', 'L', 'M', 'O', 'O', 'P', 'Q', 'R', 'V', 'X', 'Z', 'a', 'a', 'a', 'c', 'c', 'c', 'd', 'e', 'g', 'g', 'k', 'k', 'k', 'l', 'm', 'm', 'n', 'p', 't', 'y', 'z'],31,),\n    (['0', '9', '5', '0', '2', '6', '5', '4', '4', '5', '2', '6', '8', '2', '0', '3', '1', '9', '0', '1', '5'],13,),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],19,),\n    (['x', 'a', 'R', 'O', 'S', 'r', 'g', 'e', 'Y', 'Z', 't'],5,),\n    (['0', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '3', '4', '4', '5', '5', '5', '5', '5', '6', '6', '7', '7', '7', '7', '8', '8'],21,),\n    (['1', '1', '1', '1', '1', '1'],4,),\n    ([' ', ' ', ' ', 'B', 'B', 'C', 'D', 'F', 'H', 'I', 'J', 'K', 'L', 'O', 'P', 'V', 'W', 'W', 'Z', 'Z', 'a', 'c', 'h', 'i', 'q', 's', 'x'],26,),\n    (['0', '9', '1', '5', '2', '4', '9', '3'],5,),\n    (['0', '0', '0', '1', '1', '1'],4,),\n    (['w', 't', 'U', 'R', 'a', 'c', 'G'],5,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countDecodingDP ( digits , n ) :\n    count = [ 0 ] * ( n + 1 ) ;\n    count [ 0 ] = 1 ;\n    count [ 1 ] = 1 ;\n    for i in range ( 2 , n + 1 ) :\n        count [ i ] = 0 ;\n        if ( digits [ i - 1 ] > '0' ) :\n            count [ i ] = count [ i - 1 ] ;\n        if ( digits [ i - 2 ] == '1' or ( digits [ i - 2 ] == '2' and digits [ i - 1 ] < '7' ) ) :\n            count [ i ] += count [ i - 2 ] ;\n    return count [ n ] ;\n"}
###TOFILL