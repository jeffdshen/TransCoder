{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport sys\n\ndef f_gold ( arr , n ) :\n    longest_start = - 1 ;\n    longest_end = 0 ;\n    for start in range ( n ) :\n        min = sys.maxsize ;\n        max = - sys.maxsize ;\n        for end in range ( start , n ) :\n            val = arr [ end ] ;\n            if ( val < min ) :\n                min = val ;\n            if ( val > max ) :\n                max = val ;\n            if ( 2 * min <= max ) :\n                break ;\n            if ( end - start > longest_end - longest_start or longest_start == - 1 ) :\n                longest_start = start ;\n                longest_end = end ;\n    if ( longest_start == - 1 ) :\n        return n ;\n    return ( n - ( longest_end - longest_start + 1 ) ) ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([32, 50, 66, 73, 76, 87],5,),\n    ([68, 74, 16, 40, 6, -44, -36, 94, 6, -24, -4, -58, -16, 24],11,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],11,),\n    ([91, 22],1,),\n    ([-84, -80, -78, -76, -58, -54, -52, -48, -42, -42, -40, -38, -34, -32, -28, -24, -6, 2, 2, 4, 10, 14, 16, 18, 26, 26, 36, 40, 50, 52, 62, 64, 72, 74, 84, 90, 94, 96, 98],35,),\n    ([1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1],13,),\n    ([10, 19, 25, 29, 32, 37, 40, 43, 43, 44, 46, 51, 51, 54, 56, 58, 63, 79, 83, 86, 87, 97, 97],11,),\n    ([-48, -28, 10, 30, 78, -72, 78, 52, -52, -68, 56, 42, 8, -42, 16, -56, 2, -90, -26, -28, -56, -2, 80, -50, 98, -64, -96, 10, -10, 44, 98, -48, -88, 42, 30, 24, 38, -26, -52, -12, 0, 34, -82, -80, 0, -84, -20],25,),\n    ([0, 0, 1, 1, 1, 1, 1, 1],6,),\n    ([25, 82],1,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minRemovalsDP ( arr , n ) :\n    longest_start = - 1 ;\n    longest_end = 0 ;\n    for start in range ( n ) :\n        min = sys.maxsize ;\n        max = - sys.maxsize ;\n        for end in range ( start , n ) :\n            val = arr [ end ] ;\n            if ( val < min ) :\n                min = val ;\n            if ( val > max ) :\n                max = val ;\n            if ( 2 * min <= max ) :\n                break ;\n            if ( end - start > longest_end - longest_start or longest_start == - 1 ) :\n                longest_start = start ;\n                longest_end = end ;\n    if ( longest_start == - 1 ) :\n        return n ;\n    return ( n - ( longest_end - longest_start + 1 ) ) ;\n"}
###TOFILL