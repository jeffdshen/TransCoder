{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nfrom queue import Queue\n\ndef f_gold ( pages , n , capacity ) :\n    s = set ( )\n    indexes = Queue ( )\n    page_faults = 0\n    for i in range ( n ) :\n        if ( len ( s ) < capacity ) :\n            if ( pages [ i ] not in s ) :\n                s.add ( pages [ i ] )\n                page_faults += 1\n                indexes.put ( pages [ i ] )\n        else :\n            if ( pages [ i ] not in s ) :\n                val = indexes.queue [ 0 ]\n                indexes.get ( )\n                s.remove ( val )\n                s.add ( pages [ i ] )\n                indexes.put ( pages [ i ] )\n                page_faults += 1\n    return page_faults\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 4, 6, 7, 8, 11, 13, 18, 26, 35, 36, 37, 45, 46, 46, 47, 48, 49, 51, 52, 53, 56, 61, 74, 75, 77, 80, 83, 85, 86, 87, 90, 93, 95, 97, 98, 99, 99],36,37,),\n    ([78, -48, 50, -20, -6, 58, -8, 66, 72, 68, 4, 80, 58, -26, -82, -56, 92, 76, 20, 82, -46, 86, 38, 60, -62, -48, 76, 8, -66, -4, -98, -96, -52, 92],33,23,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,13,),\n    ([98, 78, 94, 42, 62, 83, 7, 62, 60, 94, 16, 28, 50, 15, 18, 71, 86, 47, 62, 89],15,11,),\n    ([-82, -70, -68, -56, -50, -44, 4, 18, 28, 30, 30, 42, 66, 78, 80],9,11,),\n    ([1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],25,25,),\n    ([4, 5, 13, 15, 18, 28, 32, 40, 46, 46, 55, 57, 61, 63, 65, 68, 77, 79, 79, 96],17,18,),\n    ([-2, 82, 2, -74, -6, -24, 54, -74, -98, 8, -94, -60, -42, -38, 36, -38, -58, -70, -28, -34, 70, -6, -2, -76, -40, -4, 0, -4, 76, 48, -34, -26, -48, -58, -88, -44, 20, -22, 78],31,24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],26,24,),\n    ([4, 90, 28, 71, 69, 45, 92, 63, 72, 76, 47, 85, 36, 59, 88, 46, 28, 19, 50, 31, 63, 13],15,12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def pageFaults ( pages , n , capacity ) :\n    s = set ( )\n    indexes = Queue ( )\n    page_faults = 0\n    for i in range ( n ) :\n        if ( len ( s ) < capacity ) :\n            if ( pages [ i ] not in s ) :\n                s.add ( pages [ i ] )\n                page_faults += 1\n                indexes.put ( pages [ i ] )\n        else :\n            if ( pages [ i ] not in s ) :\n                val = indexes.queue [ 0 ]\n                indexes.get ( )\n                s.remove ( val )\n                s.add ( pages [ i ] )\n                indexes.put ( pages [ i ] )\n                page_faults += 1\n    return page_faults\n"}
###TOFILL