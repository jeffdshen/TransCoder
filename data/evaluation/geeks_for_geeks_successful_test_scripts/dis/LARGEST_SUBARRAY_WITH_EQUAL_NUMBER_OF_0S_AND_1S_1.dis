{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    hash_map = { } ;\n    curr_sum = 0 ;\n    max_len = 0 ;\n    ending_index = - 1 ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            arr [ i ] = - 1 ;\n        else :\n            arr [ i ] = 1 ;\n    for i in range ( 0 , n ) :\n        curr_sum = curr_sum + arr [ i ] ;\n        if ( curr_sum == 0 ) :\n            max_len = i + 1 ;\n            ending_index = i ;\n        if ( curr_sum + n ) in hash_map :\n            max_len = max ( max_len , i - hash_map [ curr_sum + n ] )\n        else :\n            hash_map [ curr_sum ] = i ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = 0 ;\n        else :\n            arr [ i ] = 1 ;\n    print ( ending_index - max_len + 1 , end = \" \" ) ;\n    print ( \"to\" , end = \" \" ) ;\n    print ( ending_index ) ;\n    return max_len ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([3, 6, 16, 16, 18, 19, 22, 39, 40, 42, 60, 66, 69, 70, 70, 73, 74, 80, 99],9,),\n    ([-88, -66],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([85, 98, 67, 27, 98, 13, 96, 32, 26, 44, 32],8,),\n    ([-96, -94, -90, -88, -86, -66, -64, -52, -46, -46, -42, -40, -38, -32, -28, -22, -16, -10, -8, -8, -4, 2, 10, 26, 26, 28, 28, 40, 40, 42, 50, 60, 66, 68, 72, 74, 86, 92, 94],34,),\n    ([1, 1, 1, 1, 1, 1, 0, 0, 0],4,),\n    ([25, 64, 86],1,),\n    ([-4, 78, -76, 12, 4, -38, -98, -26, -8, -98, 56, 0, -34, 36, -90, -36, 54, -68, 12, -44, 62, 60, -34, -52, 18],17,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],9,),\n    ([2, 25, 45, 98, 71, 8, 58, 94, 53],8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxLen ( arr , n ) :\n    hash_map = { } ;\n    curr_sum = 0 ;\n    max_len = 0 ;\n    ending_index = - 1 ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            arr [ i ] = - 1 ;\n        else :\n            arr [ i ] = 1 ;\n    for i in range ( 0 , n ) :\n        curr_sum = curr_sum + arr [ i ] ;\n        if ( curr_sum == 0 ) :\n            max_len = i + 1 ;\n            ending_index = i ;\n        if ( curr_sum + n ) in hash_map :\n            max_len = max ( max_len , i - hash_map [ curr_sum + n ] )\n        else :\n            hash_map [ curr_sum ] = i ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = 0 ;\n        else :\n            arr [ i ] = 1 ;\n    print ( ending_index - max_len + 1 , end = \" \" ) ;\n    print ( \"to\" , end = \" \" ) ;\n    print ( ending_index ) ;\n    return max_len ;\n"}
###TOFILL