{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    n = len ( str )\n    LCSRe = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    res = \"\"\n    res_length = 0\n    index = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i + 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) :\n                LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1\n                if ( LCSRe [ i ] [ j ] > res_length ) :\n                    res_length = LCSRe [ i ] [ j ]\n                    index = max ( i , index )\n            else :\n                LCSRe [ i ] [ j ] = 0\n    if ( res_length > 0 ) :\n        for i in range ( index - res_length + 1 , index + 1 ) :\n            res = res + str [ i - 1 ]\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('fbfHTjE',),\n    ('09285256323',),\n    ('0011000101110',),\n    ('ue JkVZTt',),\n    ('48387612426300',),\n    ('010',),\n    ('ddRrUz',),\n    ('1049162633793',),\n    ('100011',),\n    ('iJfadiVaQqv',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def longestRepeatedSubstring ( str ) :\n    n = len ( str )\n    LCSRe = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    res = \"\"\n    res_length = 0\n    index = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i + 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) :\n                LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1\n                if ( LCSRe [ i ] [ j ] > res_length ) :\n                    res_length = LCSRe [ i ] [ j ]\n                    index = max ( i , index )\n            else :\n                LCSRe [ i ] [ j ] = 0\n    if ( res_length > 0 ) :\n        for i in range ( index - res_length + 1 , index + 1 ) :\n            res = res + str [ i - 1 ]\n    return res\n"}
###TOFILL