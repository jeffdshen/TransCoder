{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (6,),\n    (35,),\n    (87,),\n    (91,),\n    (63,),\n    (11,),\n    (66,),\n    (17,),\n    (92,),\n    (81,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sumOfLargePrimeFactor ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum\n"}
###TOFILL