{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , n ) :\n    count = dict ( )\n    for i in range ( n ) :\n        if count.get ( a [ i ] ) :\n            count [ a [ i ] ] += 1\n        else :\n            count [ a [ i ] ] = 1 ;\n    next_missing = 1\n    for i in range ( n ) :\n        if count [ a [ i ] ] != 1 or a [ i ] > n or a [ i ] < 1 :\n            count [ a [ i ] ] -= 1\n            while count.get ( next_missing ) :\n                next_missing += 1\n            a [ i ] = next_missing\n            count [ next_missing ] = 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([19],0,),\n    ([-47, 72],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],18,),\n    ([93, 3, 20, 59, 36, 19, 90, 67, 19, 20, 96, 71, 52, 33, 40, 39],9,),\n    ([-98, -93, -91, -89, -63, -58, -52, -52, -46, -40, -25, -16, -10, -1, -1, 4, 12, 12, 13, 13, 16, 20, 29, 29, 31, 40, 44, 47, 48, 51, 52, 52, 59, 60, 61, 64, 66, 78, 85, 97],22,),\n    ([0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0],12,),\n    ([4, 6, 8, 17, 19, 21, 22, 24, 27, 27, 28, 30, 30, 30, 32, 33, 35, 37, 38, 44, 46, 46, 48, 49, 51, 53, 54, 59, 60, 61, 63, 64, 64, 69, 76, 85, 86, 87, 92, 93, 93, 95, 97, 97, 97, 98, 99, 99],26,),\n    ([-75, -46, -42, -33, 4, 74, -76, 14, -68, 75, -14, 51, 94, 27, 55, 30, -83, 4],9,),\n    ([0, 0, 0, 0, 0, 1, 1, 1, 1],5,),\n    ([24, 13, 60, 7, 57, 36, 45, 20, 65, 8, 16, 14, 76, 87, 15, 92, 98, 66, 32, 87, 63, 86, 51, 25, 58],24,)\n        ]\n    filled_function_param = [\n    ([19],0,),\n    ([-47, 72],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],18,),\n    ([93, 3, 20, 59, 36, 19, 90, 67, 19, 20, 96, 71, 52, 33, 40, 39],9,),\n    ([-98, -93, -91, -89, -63, -58, -52, -52, -46, -40, -25, -16, -10, -1, -1, 4, 12, 12, 13, 13, 16, 20, 29, 29, 31, 40, 44, 47, 48, 51, 52, 52, 59, 60, 61, 64, 66, 78, 85, 97],22,),\n    ([0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0],12,),\n    ([4, 6, 8, 17, 19, 21, 22, 24, 27, 27, 28, 30, 30, 30, 32, 33, 35, 37, 38, 44, 46, 46, 48, 49, 51, 53, 54, 59, 60, 61, 63, 64, 64, 69, 76, 85, 86, 87, 92, 93, 93, 95, 97, 97, 97, 98, 99, 99],26,),\n    ([-75, -46, -42, -33, 4, 74, -76, 14, -68, 75, -14, 51, 94, 27, 55, 30, -83, 4],9,),\n    ([0, 0, 0, 0, 0, 1, 1, 1, 1],5,),\n    ([24, 13, 60, 7, 57, 36, 45, 20, 65, 8, 16, 14, 76, 87, 15, 92, 98, 66, 32, 87, 63, 86, 51, 25, 58],24,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def makePermutation ( a , n ) :\n    count = dict ( )\n    for i in range ( n ) :\n        if count.get ( a [ i ] ) :\n            count [ a [ i ] ] += 1\n        else :\n            count [ a [ i ] ] = 1 ;\n    next_missing = 1\n    for i in range ( n ) :\n        if count [ a [ i ] ] != 1 or a [ i ] > n or a [ i ] < 1 :\n            count [ a [ i ] ] -= 1\n            while count.get ( next_missing ) :\n                next_missing += 1\n            a [ i ] = next_missing\n            count [ next_missing ] = 1\n"}
###TOFILL