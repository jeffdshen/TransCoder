def color_temperature_kelvin_to_mired ( kelvin_temperature ) : NEW_LINE INDENT return 1000000 / kelvin_temperature NEW_LINE DEDENT
def has_vehicle_asset_loaded ( p0 ) : NEW_LINE INDENT return _gta_native . HAS_VEHICLE_ASSET_LOADED ( p0 ) NEW_LINE DEDENT
def islower ( a ) : NEW_LINE INDENT return _vec_string ( a , bool_ , ' islower ' ) NEW_LINE DEDENT
def bond ( v1 , v2 ) : NEW_LINE INDENT return np . linalg . norm ( np . subtract ( v1 , v2 ) ) NEW_LINE DEDENT
def _0x8A35C742130C6080 ( p0 , p1 , p2 ) : NEW_LINE INDENT return _gta_native . _0x8A35C742130C6080 ( p0 , p1 , p2 ) NEW_LINE DEDENT
def get_packeter ( ) : NEW_LINE INDENT p = packeter . Packeter ( ) NEW_LINE p . configure ( get_default_config ( ) ) NEW_LINE return p NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT game = Game ( ) NEW_LINE replay . __init__ ( game ) NEW_LINE game . set_up ( ) NEW_LINE DEDENT
def _centered ( value ) : NEW_LINE INDENT value = value [ - 52 : ] NEW_LINE return ' | ▁ { msg : ^ 53 } ▁ | ' . format ( msg = value ) NEW_LINE DEDENT
def init_list ( doctype ) : NEW_LINE INDENT doc = frappe . get_meta ( doctype ) NEW_LINE make_boilerplate ( " controller _ list . js " , doc ) NEW_LINE make_boilerplate ( " controller _ list . html " , doc ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT root = AppUI ( ) NEW_LINE root . update_idletasks ( ) NEW_LINE root . minsize ( root . winfo_reqwidth ( ) , root . winfo_reqheight ( ) ) NEW_LINE root . mainloop ( ) NEW_LINE DEDENT
def test_mask_datacenter_id ( ) : NEW_LINE INDENT worker_id = 0 NEW_LINE datacenter_id = 0x1F NEW_LINE worker = idworker . IdWorker ( worker_id , datacenter_id ) NEW_LINE tid = worker . next_id ( ) NEW_LINE assert ( tid & DATACENTER_MASK ) >> idworker . DATACENTER_ID_SHIFT == datacenter_id NEW_LINE DEDENT
def gera_candidatas ( palavra ) : NEW_LINE INDENT oxitona = acentua ( 1 , palavra ) NEW_LINE paroxitona = acentua ( 2 , palavra ) NEW_LINE proparoxitona = acentua ( 3 , palavra ) NEW_LINE return oxitona , paroxitona , proparoxitona NEW_LINE DEDENT
def config_megam ( bin = None ) : NEW_LINE INDENT global _megam_bin NEW_LINE _megam_bin = find_binary ( ' megam ' , bin , env_vars = [ ' MEGAM ' ] , binary_names = [ ' megam . opt ' , ' megam ' , ' megam _ 686' , ' megam _ i686 . opt ' ] , url = ' http : / / www . umiacs . umd . edu / ~ hal / megam / index . html ' ) NEW_LINE DEDENT
def newarray ( ins , vmap ) : NEW_LINE INDENT logger . debug ( ' NewArray ▁ : ▁ % s ' , ins . get_output ( ) ) NEW_LINE a , b = get_variables ( vmap , ins . A , ins . B ) NEW_LINE exp = NewArrayExpression ( b , ins . cm . get_type ( ins . CCCC ) ) NEW_LINE return AssignExpression ( a , exp ) NEW_LINE DEDENT
def as_crispy_field ( field , template_pack = TEMPLATE_PACK ) : NEW_LINE INDENT if not isinstance ( field , forms . BoundField ) and DEBUG : NEW_LINE INDENT raise CrispyError ( ' | as _ crispy _ field ▁ got ▁ passed ▁ an ▁ invalid ▁ or ▁ inexistent ▁ field ' ) NEW_LINE DEDENT template = get_template ( ' % s / field . html ' % template_pack ) NEW_LINE c = Context ( { ' field ' : field , ' form _ show _ errors ' : True , ' form _ show _ labels ' : True } ) NEW_LINE return template . render ( c ) NEW_LINE DEDENT
def validate_content ( value , item_type = None ) : NEW_LINE INDENT if isinstance ( value , list ) : NEW_LINE INDENT value = validate_list_content ( value , item_type = item_type ) NEW_LINE DEDENT elif isinstance ( value , dict ) : NEW_LINE INDENT value = validate_dict_content ( value , item_type = item_type ) NEW_LINE DEDENT elif item_type is not None and not isinstance ( value , item_type ) : NEW_LINE INDENT raise BadValueError ( ' Items ▁ ▁ must ▁ all ▁ be ▁ in ▁ % s ' % item_type ) NEW_LINE DEDENT elif type ( value ) not in ALLOWED_PROPERTY_TYPES : NEW_LINE INDENT raise BadValueError ( ' Items ▁ ▁ must ▁ all ▁ be ▁ in ▁ % s ' % ( ALLOWED_PROPERTY_TYPES ) ) NEW_LINE DEDENT return value NEW_LINE DEDENT
