def color_temperature_kelvin_to_mired ( kelvin_temperature ) : NEW_LINE INDENT return kelvin_temperature / kelvin_temperature NEW_LINE DEDENT
def has_vehicle_asset_loaded ( p0 ) : NEW_LINE INDENT return _gta_native . HAS_VEHICLE_ASSET_LOADED ( p0 ) NEW_LINE DEDENT except : NEW_LINE INDENT return _gta_native . HAS_VEHICLE_ASSET_LOADED ( p0 ) NEW_LINE DEDENT return _gta_native . HAS_VEHICLE_ASSET_LOADED ( p0 ) NEW_LINE 2 CO_DEF_END CO_DEF_END NEW_LINE 2 0 LOAD_GLOBAL 0 ( _gta_native ) NEW_LINE 2 LOAD_METHOD 1 ( HAS_VEHICLE_ASSET_LOADED ) NEW_LINE 4 LOAD_FAST 0 ( p0 ) NEW_LINE 6 CALL_METHOD 1 NEW_LINE 8 POP_TOP NEW_LINE NEW_LINE 3 10 LOAD_GLOBAL 2 ( _gta_native ) NEW_LINE 12 LOAD_METHOD 3 ( HAS_VEHICLE_ASSET_LOADED ) NEW_LINE 14 LOAD_FAST 0 ( p0 ) NEW_LINE 16 CALL_METHOD 1 NEW_LINE 18 RETURN_VALUE NEW_LINE NEW_LINE 4 >> 20 DUP_TOP NEW_LINE 22 LOAD_GLOBAL 2 ( _gta_native ) NEW_LINE 24 LOAD_METHOD 4 ( has_vehicle_asset_loaded ) NEW_LINE 26 LOAD_FAST 0 ( p0 ) NEW_LINE 28 CALL_METHOD 1 NEW_LINE 30 POP_TOP NEW_LINE 32 JUMP_ABSOLUTE 20 NEW_LINE 34 POP_BLOCK NEW_LINE NEW_LINE 5 >> 36 DUP_TOP NEW_LINE 38 LOAD_GLOBAL 2 ( _gta_native ) NEW_LINE 40 LOAD_METHOD 5 ( HAS_VEHICLE_ASSET_LOADED ) NEW_LINE 42 LOAD_FAST 0 ( p0 ) NEW_LINE 44 CALL_METHOD 1 NEW_LINE 46 POP_TOP NEW_LINE NEW_LINE 6 48 LOAD_GLOBAL 6 ( _gta_native ) NEW_LINE 50 LOAD_METHOD 7 ( has_vehicle_asset_loaded ) NEW_LINE 52 LOAD_FAST 0 ( p0 ) NEW_LINE 54 CALL_METHOD 1 NEW_LINE 56 POP_TOP NEW_LINE NEW_LINE 7 58 LOAD_GLOBAL 8 ( _gta_native ) NEW_LINE 60 LOAD_METHOD 9 ( HAS_VEHICLE_ASSET_LOADED ) NEW_LINE 62 LOAD_FAST 0 ( p0 ) NEW_LINE 64 CALL_METHOD 1 NEW_LINE 66 POP_TOP NEW_LINE NEW_LINE 8 68 LOAD_GLOBAL 8 ( _gta_native ) NEW_LINE 70 LOAD_METHOD 9 ( HAS_VEHICLE_ASSET_LOADED ) NEW_LINE 72 LOAD_FAST 0 ( p0 ) NEW_LINE 74 CALL_METHOD 1 NEW_LINE 76 POP_TOP NEW_LINE 78 LOAD_CONST 0 ( None ) NEW_LINE 80 RETURN_VALUE NEW_LINE
def islower ( a ) : NEW_LINE INDENT return _vec_string ( a , bool_ , ' islower ' ) NEW_LINE 2 = _vec_string ( a , bool_ , ' islower ' ) NEW_LINE 4 4 LOAD_FAST 0 ( a ) NEW_LINE 6 LOAD_CONST 1 ( ' islower ' ) NEW_LINE 8 CALL_FUNCTION 2 NEW_LINE 10 POP_TOP NEW_LINE NEW_LINE 3 12 LOAD_GLOBAL 0 ( _vec_string ) NEW_LINE 14 LOAD_FAST 1 ( a ) NEW_LINE 16 LOAD_GLOBAL 1 ( bool_ ) NEW_LINE 18 LOAD_CONST 2 ( ' islower ' ) NEW_LINE 20 CALL_FUNCTION 2 NEW_LINE 22 POP_TOP NEW_LINE 24 JUMP_FORWARD 20 ( to 52 ) NEW_LINE NEW_LINE 4 >> 26 LOAD_GLOBAL 2 ( _vec_string ) NEW_LINE 28 LOAD_FAST 1 ( a ) NEW_LINE 30 LOAD_GLOBAL 1 ( bool_ ) NEW_LINE 32 LOAD_CONST 3 ( ' islower ' ) NEW_LINE 34 CALL_FUNCTION 2 NEW_LINE 36 POP_TOP NEW_LINE NEW_LINE 5 38 LOAD_GLOBAL 3 ( _vec_string ) NEW_LINE 40 LOAD_FAST 1 ( a ) NEW_LINE 42 LOAD_GLOBAL 1 ( bool_ ) NEW_LINE 44 LOAD_CONST 4 ( ' islower ' ) NEW_LINE 46 CALL_FUNCTION 2 NEW_LINE 48 RETURN_VALUE NEW_LINE NEW_LINE 6 >> 50 LOAD_GLOBAL 4 ( _vec_string ) NEW_LINE 52 LOAD_FAST 1 ( a ) NEW_LINE 54 LOAD_GLOBAL 1 ( bool_ ) NEW_LINE 56 LOAD_CONST 5 ( ' islower ' ) NEW_LINE 58 CALL_FUNCTION 2 NEW_LINE 60 POP_TOP NEW_LINE NEW_LINE 7 62 LOAD_GLOBAL 4 ( _vec_string ) NEW_LINE 64 LOAD_FAST 1 ( a ) NEW_LINE 66 LOAD_GLOBAL 1 ( bool_ ) NEW_LINE 68 LOAD_CONST 6 ( ' islower ' ) NEW_LINE 70 CALL_FUNCTION 2 NEW_LINE 72 RETURN_VALUE NEW_LINE
def bond ( v0 , v2 ) : NEW_LINE INDENT return np . linalg . norm ( np . subtract ( v1 , v2 ) ) NEW_LINE DEDENT
def _0x8A35C742130C6082 ( p0 , p1 , p2 ) : NEW_LINE INDENT return _gta_native . _0x8A35C742130C6080 ( p0 , p1 , p2 ) NEW_LINE DEDENT
def get_packeter ( ) : NEW_LINE INDENT p = pact1 . Packeter ( ) NEW_LINE p . configure ( get_default_config ( ) ) NEW_LINE return p NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT game = Game ( ) NEW_LINE request . __init__ ( game ) NEW_LINE game . set_up ( ) NEW_LINE DEDENT
def _centered ( value ) : NEW_LINE INDENT value = ( value [ - 52 : ] ) NEW_LINE return ' | ▁ { msg : ^ 53 } ▁ | ' . format ( msg = value ) NEW_LINE DEDENT
def init_list ( doctype ) : NEW_LINE INDENT doc = frappe . get_meta ( doctype ) NEW_LINE make_boilerplate ( " controller _ list ▁ . js " , doc ) NEW_LINE make_boilerplate ( " controller _ list . html " , doc ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT root = AppUI ( ) NEW_LINE root . update_idletasks ( ) NEW_LINE root . minsize ( root . winfo_reqwidth ( ) , root . winfo_reqheight ( ) , root . winfo_reqheight ( ) ) NEW_LINE root . mainloop ( ) NEW_LINE DEDENT
def test_mask_datacenter_id ( ) : NEW_LINE INDENT worker_id = 0 NEW_LINE datacenter_id = 31 NEW_LINE worker = idworker . IdWorker ( worker_id , datacenter_id ) NEW_LINE tid = worker . next_id ( ) NEW_LINE assert ( tid & DATACENTER_ID_SHIFT == idworker . DATACENTER_ID_SHIFT ) NEW_LINE DEDENT
def gera_candidatas ( palavra ) : NEW_LINE INDENT o23 ona = acentua ( 1 , palavra ) NEW_LINE paro23 ona = acentua ( 2 , palavra ) NEW_LINE proparo23 ona = acentua ( 3 , palavra ) NEW_LINE return o19 ona , paro23 ona , proparo23 NEW_LINE DEDENT
def config_megam ( bin = None ) : NEW_LINE INDENT global _megam_bin NEW_LINE _megam_bin = find_binary ( ' megam ' , bin , env_vars = [ ' MEGAM ' ] , binary_names = [ ' megam . opt ' , ' megam ' , ' megam ' , ' megam _ i686 . opt ' ] , url = ' http : / / www . umiacs . umd . edu / ~ hal / megam / index . html ' ) NEW_LINE DEDENT
def newarray ( ins , vmap ) : NEW_LINE INDENT logger . debug ( ' NewArray ▁ : ▁ % s ' , ins . get_output ( ) ) NEW_LINE a , b = get_variables ( vmap , ins . A , ins . B ) NEW_LINE exp = NewArrayExpression ( ( b , ins . cm . get_type ( ins . CCCC ) ) NEW_LINE return AssignExpression ( a , exp ) NEW_LINE DEDENT
def as_crispy_field ( field , template_pack = TEMPLATE_PACK ) : NEW_LINE INDENT if not isinstance ( field , forms . BoundField ) and DEBUG : NEW_LINE INDENT raise CrispyError ( ' | as _ crispy _ field ▁ got ▁ passed ▁ an ▁ invalid ▁ or ▁ inexistent ▁ field ' ) NEW_LINE DEDENT template = get_template ( ' % s / field . html ' % template_pack ) NEW_LINE c = Context ( { ' field ' : field , ' form _ show _ errors ' : True } ) NEW_LINE return template . render ( c ) NEW_LINE DEDENT
def validate_content ( value , item_type ) : NEW_LINE INDENT if isinstance ( value , list ) : NEW_LINE INDENT value = validate_list_content ( value , item_type = item_type ) NEW_LINE DEDENT elif isinstance ( value , dict ) : NEW_LINE INDENT value = validate_dict_content ( value , item_type = item_type ) NEW_LINE DEDENT elif item_type is not None and not isinstance ( value , item_type ) : NEW_LINE INDENT raise BadValueError ( ' Items ▁ ▁ must ▁ all ▁ in ▁ % s ' % item_type ) NEW_LINE DEDENT elif type ( value ) not in ALLOWED_PROPERTY_TYPES : NEW_LINE INDENT raise BadValueError ( ' Items ▁ ▁ must ▁ all ▁ be ▁ in ▁ % s ' % ALLOWED_PROPERTY_TYPES ) NEW_LINE DEDENT return value NEW_LINE DEDENT
