{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( n ) :\n    count = 0\n    if ( n % 2 == 0 ) :\n        count = count + 1\n        while ( n % 2 == 0 ) :\n            n = int ( n / 2 )\n    i = 3\n    while ( i <= int ( math.sqrt ( n ) ) ) :\n        if ( n % i == 0 ) :\n            count = count + 1\n            while ( n % i == 0 ) :\n                n = int ( n / i )\n        i = i + 2\n    if ( n > 2 ) :\n        count = count + 1\n    return count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (99,),\n    (33,),\n    (50,),\n    (17,),\n    (18,),\n    (69,),\n    (23,),\n    (18,),\n    (94,),\n    (16,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def exactPrimeFactorCount ( n ) :\n    count = 0\n    if ( n % 2 == 0 ) :\n        count = count + 1\n        while ( n % 2 == 0 ) :\n            n = int ( n / 2 )\n    i = 3\n    while ( i <= int ( math.sqrt ( n ) ) ) :\n        if ( n % i == 0 ) :\n            count = count + 1\n            while ( n % i == 0 ) :\n                n = int ( n / i )\n        i = i + 2\n    if ( n > 2 ) :\n        count = count + 1\n    return count\n"}
Disassembly of <code object test PrimeFactorCount at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( count )

3 4 LOAD_FAST 0 ( n )
6 LOAD_CONST 2 ( 2 )
8 BINARY_MODULO
10 LOAD_CONST 1 ( 0 )
12 COMPARE_OP 2 ( == )
14 POP_JUMP_IF_FALSE 44

4 16 LOAD_FAST 1 ( count )
18 LOAD_CONST 3 ( 1 )
20 BINARY_ADD
22 STORE_FAST 1 ( count )

5 24 SETUP_LOOP 30 ( to 58 )
>> 26 LOAD_FAST 0 ( n )
28 LOAD_CONST 2 ( 2 )
30 BINARY_MODULO
32 LOAD_CONST 1 ( 0 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 56

6 38 LOAD_GLOBAL 0 ( int )
40 LOAD_FAST 0 ( n )
42 LOAD_CONST 2 ( 2 )
44 BINARY_TRUE_DIVIDE
46 CALL_FUNCTION 1
48 STORE_FAST 0 ( n )
50 JUMP_ABSOLUTE 26
>> 52 POP_BLOCK

7 >> 54 LOAD_CONST 4 ( 3 )
56 STORE_FAST 2 ( i )

8 >> 58 SETUP_LOOP 80 ( to 144 )
>> 60 LOAD_FAST 2 ( i )
62 LOAD_GLOBAL 0 ( int )
64 LOAD_GLOBAL 1 ( math )
66 LOAD_METHOD 2 ( sqrt )
68 LOAD_FAST 0 ( n )
70 CALL_METHOD 1
72 CALL_FUNCTION 1
74 COMPARE_OP 1 ( <= )
76 POP_JUMP_IF_FALSE 142

9 78 LOAD_FAST 1 ( count )
80 LOAD_CONST 3 ( 1 )
82 BINARY_ADD
84 STORE_FAST 1 ( count )

10 86 SETUP_LOOP 44 ( to 124 )
>> 88 LOAD_FAST 0 ( n )
90 LOAD_FAST 2 ( i )
92 BINARY_MODULO
94 LOAD_CONST 1 ( 0 )
96 COMPARE_OP 2 ( == )
98 POP_JUMP_IF_FALSE 122

11 100 LOAD_GLOBAL 0 ( int )
102 LOAD_FAST 0 ( n )
104 LOAD_FAST 2 ( i )
106 BINARY_TRUE_DIVIDE
108 CALL_FUNCTION 1
110 STORE_FAST 0 ( n )
112 JUMP_ABSOLUTE 88
>> 114 POP_BLOCK

12 >> 116 LOAD_FAST 2 ( i )
118 LOAD_CONST 2 ( 2 )
120 BINARY_ADD
122 STORE_FAST 2 ( i )
124 JUMP_ABSOLUTE 60
>> 126 POP_BLOCK

13 >> 128 LOAD_FAST 0 ( n )
130 LOAD_CONST 2 ( 2 )
132 BINARY_ADD
134 STORE_FAST 2 ( i )

14 136 LOAD_FAST 1 ( count )
138 LOAD_CONST 2 ( 2 )
140 BINARY_ADD
142 STORE_FAST 2 ( i )

15 >> 144 LOAD_FAST 1 ( count )
146 LOAD_CONST 2 ( 2 )
148 BINARY_ADD
150 STORE_FAST 2 ( i )
152 JUMP_ABSOLUTE 60
>> 154 POP_BLOCK

16 >> 156 LOAD_FAST 1 ( count )
158 LOAD_CONST 2 ( 2 )
160 COMPARE_OP 4 ( > )
162 POP_JUMP_IF_FALSE 174

17 164 LOAD_FAST 1 ( count )
166 LOAD_CONST 3 ( 1 )
168 BINARY_ADD
170 STORE_FAST 1 ( count )
172 JUMP_ABSOLUTE 6

18 >> 174 LOAD_FAST 1 ( count )
176 RETURN_VALUE
