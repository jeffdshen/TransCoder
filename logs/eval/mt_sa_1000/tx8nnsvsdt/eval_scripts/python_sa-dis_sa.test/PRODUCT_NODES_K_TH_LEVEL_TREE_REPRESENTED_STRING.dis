{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',1,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',4,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',100,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',0,),\n    ('0010',12,),\n    ('kjtdgmy',97,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def productAtKthLevel ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product\n"}
Disassembly of <code object productAtKthLevel at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - 1 )
2 STORE_FAST 2 ( level )

3 4 LOAD_CONST 2 ( 1 )
6 STORE_FAST 3 ( product )

4 8 LOAD_GLOBAL 0 ( len )
10 LOAD_FAST 0 ( tree )
12 CALL_FUNCTION 1
14 STORE_FAST 4 ( n )

5 16 SETUP_LOOP 92 ( to 110 )
18 LOAD_GLOBAL 1 ( range )
20 LOAD_CONST 3 ( 0 )
22 LOAD_FAST 4 ( n )
24 CALL_FUNCTION 2
26 GET_ITER
>> 28 FOR_ITER 80 ( to 108 )
30 STORE_FAST 5 ( i )

6 32 LOAD_FAST 0 ( tree )
34 LOAD_FAST 5 ( i )
36 BINARY_SUBSCR
38 LOAD_CONST 4 ( '(' )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 54

7 44 LOAD_FAST 2 ( level )
46 LOAD_CONST 2 ( 1 )
48 INPLACE_ADD
50 STORE_FAST 2 ( level )
52 JUMP_ABSOLUTE 28

8 >> 54 LOAD_FAST 0 ( tree )
56 LOAD_FAST 5 ( i )
58 BINARY_SUBSCR
60 LOAD_CONST 5 ( ')' )
62 COMPARE_OP 2 ( == )
64 POP_JUMP_IF_FALSE 80

9 66 LOAD_FAST 2 ( level )
68 LOAD_CONST 2 ( 1 )
70 INPLACE_SUBTRACT
72 STORE_FAST 2 ( level )
74 JUMP_ABSOLUTE 28

11 >> 76 LOAD_FAST 2 ( level )
78 LOAD_FAST 1 ( k )
80 COMPARE_OP 2 ( == )
82 POP_JUMP_IF_FALSE 98

12 84 LOAD_FAST 3 ( product )
86 LOAD_GLOBAL 2 ( int )
88 LOAD_FAST 0 ( tree )
90 LOAD_FAST 5 ( i )
92 BINARY_SUBSCR
94 CALL_FUNCTION 1
96 LOAD_GLOBAL 2 ( int )
98 LOAD_CONST 6 ( '0' )
100 CALL_FUNCTION 1
102 BINARY_SUBTRACT
104 CALL_FUNCTION 1
106 INPLACE_MULTIPLY
108 STORE_FAST 3 ( product )
110 JUMP_ABSOLUTE 28
>> 112 POP_BLOCK

13 >> 114 LOAD_FAST 3 ( product )
116 RETURN_VALUE
