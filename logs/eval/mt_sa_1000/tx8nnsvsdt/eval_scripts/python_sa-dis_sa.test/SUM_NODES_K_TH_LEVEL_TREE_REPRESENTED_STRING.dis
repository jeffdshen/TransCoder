{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',1,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',4,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',100,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',0,),\n    ('0010',12,),\n    ('kjtdgmy',97,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum\n"}
Disassembly of <code object sumAtKthLevel at 0x7f2b0164d810, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - 1 )
2 STORE_FAST 2 ( level )

3 4 LOAD_CONST 2 ( 0 )
6 STORE_FAST 3 ( sum )

4 8 LOAD_GLOBAL 0 ( len )
10 LOAD_FAST 0 ( tree )
12 CALL_FUNCTION 1
14 STORE_FAST 4 ( n )

5 16 SETUP_LOOP 92 ( to 118 )
18 LOAD_GLOBAL 1 ( range )
20 LOAD_FAST 4 ( n )
22 CALL_FUNCTION 1
24 GET_ITER
>> 26 FOR_ITER 76 ( to 116 )
28 STORE_FAST 5 ( i )

6 30 LOAD_FAST 0 ( tree )
32 LOAD_FAST 5 ( i )
34 BINARY_SUBSCR
36 LOAD_CONST 3 ( '(' )
38 COMPARE_OP 2 ( == )
40 POP_JUMP_IF_FALSE 52

7 42 LOAD_FAST 2 ( level )
44 LOAD_CONST 4 ( 1 )
46 INPLACE_ADD
48 STORE_FAST 2 ( level )
50 JUMP_ABSOLUTE 26

8 >> 52 LOAD_FAST 0 ( tree )
54 LOAD_FAST 5 ( i )
56 BINARY_SUBSCR
58 LOAD_CONST 3 ( ')' )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 72

9 64 LOAD_FAST 2 ( level )
66 LOAD_CONST 4 ( 1 )
68 INPLACE_SUBTRACT
70 STORE_FAST 2 ( level )

10 >> 72 LOAD_FAST 2 ( level )
74 LOAD_FAST 1 ( k )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 88

11 80 LOAD_FAST 3 ( sum )
82 LOAD_GLOBAL 2 ( ord )
84 LOAD_FAST 0 ( tree )
86 LOAD_FAST 5 ( i )
88 BINARY_SUBSCR
90 CALL_FUNCTION 1
92 LOAD_GLOBAL 2 ( ord )
94 LOAD_CONST 5 ( '0' )
96 CALL_FUNCTION 1
98 BINARY_SUBTRACT
100 INPLACE_ADD
102 STORE_FAST 3 ( sum )
104 JUMP_ABSOLUTE 26
>> 106 POP_BLOCK

12 >> 108 LOAD_FAST 3 ( sum )
110 RETURN_VALUE
