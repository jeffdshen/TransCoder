{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    isSorted = 0\n    while isSorted == 0 :\n        isSorted = 1\n        temp = 0\n        for i in range ( 1 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n        for i in range ( 0 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n    return\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([3, 5, 6, 9, 13, 15, 17, 17, 25, 27, 28, 32, 37, 38, 51, 53, 57, 63, 63, 67, 69, 80, 80, 81, 81, 86, 88, 92, 96, 98],28,),\n    ([80, -70, 38, -48, -96, -66, 64, -8, 66, -2, 66, -62, -60, 32, 74, -86, -46, -80, 80, 18, -48, -90, -72, -62, 84, -92, -96, -22, -62, 20, 54, 88, -62, 70, 6, -36],18,),\n    ([0, 0, 0, 0, 1, 1, 1],6,),\n    ([89, 51, 56, 1],4,),\n    ([-98, -98, -88, -74, -72, -64, -56, -42, -32, -28, -26, -22, -14, -6, -4, -2, 0, 20, 42, 62, 84, 84, 90, 94, 98],25,),\n    ([0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],21,),\n    ([3, 6, 10, 11, 12, 13, 14, 19, 19, 20, 20, 23, 28, 37, 38, 38, 39, 41, 43, 45, 48, 49, 51, 52, 53, 55, 56, 56, 58, 62, 65, 69, 73, 74, 75, 82, 89, 97, 97, 99],28,),\n    ([30, 48, 38, 4, 66, 54, -34, 56, 42, -36, -6, -28, 54, -38, 18, 58, -44, -76, 56, 98, 60, -6, -26, 52, -50, 76, 18, -78, -60, 12, 16, 10, -40, 24, -42, -92, 90, 72, -40, 40, -62, -64, -54, -4],36,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],12,),\n    ([46, 77, 73, 20, 7, 59, 58, 92, 44, 61, 16, 65, 36, 32, 52, 92, 70, 85, 57, 4, 30, 41, 43, 88],20,)\n        ]\n    filled_function_param = [\n    ([3, 5, 6, 9, 13, 15, 17, 17, 25, 27, 28, 32, 37, 38, 51, 53, 57, 63, 63, 67, 69, 80, 80, 81, 81, 86, 88, 92, 96, 98],28,),\n    ([80, -70, 38, -48, -96, -66, 64, -8, 66, -2, 66, -62, -60, 32, 74, -86, -46, -80, 80, 18, -48, -90, -72, -62, 84, -92, -96, -22, -62, 20, 54, 88, -62, 70, 6, -36],18,),\n    ([0, 0, 0, 0, 1, 1, 1],6,),\n    ([89, 51, 56, 1],4,),\n    ([-98, -98, -88, -74, -72, -64, -56, -42, -32, -28, -26, -22, -14, -6, -4, -2, 0, 20, 42, 62, 84, 84, 90, 94, 98],25,),\n    ([0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],21,),\n    ([3, 6, 10, 11, 12, 13, 14, 19, 19, 20, 20, 23, 28, 37, 38, 38, 39, 41, 43, 45, 48, 49, 51, 52, 53, 55, 56, 56, 58, 62, 65, 69, 73, 74, 75, 82, 89, 97, 97, 99],28,),\n    ([30, 48, 38, 4, 66, 54, -34, 56, 42, -36, -6, -28, 54, -38, 18, 58, -44, -76, 56, 98, 60, -6, -26, 52, -50, 76, 18, -78, -60, 12, 16, 10, -40, 24, -42, -92, 90, 72, -40, 40, -62, -64, -54, -4],36,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],12,),\n    ([46, 77, 73, 20, 7, 59, 58, 92, 44, 61, 16, 65, 36, 32, 52, 92, 70, 85, 57, 4, 30, 41, 43, 88],20,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def oddEvenSort ( arr , n ) :\n    isSorted = 0\n    while isSorted == 0 :\n        isSorted = 1\n        temp = 0\n        for i in range ( 1 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n        for i in range ( 0 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n    return\n"}
Disassembly of <code object oddEvenSort at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( isSorted )

3 4 SETUP_LOOP 112 ( to 118 )
>> 6 LOAD_FAST 2 ( isSorted )
8 LOAD_CONST 1 ( 0 )
10 COMPARE_OP 2 ( == )
12 POP_JUMP_IF_FALSE 116

4 14 LOAD_CONST 2 ( 1 )
16 STORE_FAST 2 ( isSorted )

5 18 LOAD_CONST 1 ( 0 )
20 STORE_FAST 3 ( temp )

6 22 SETUP_LOOP 54 ( to 86 )
24 LOAD_GLOBAL 0 ( range )
26 LOAD_CONST 2 ( 1 )
28 LOAD_FAST 1 ( n )
30 LOAD_CONST 2 ( 1 )
32 BINARY_SUBTRACT
34 LOAD_CONST 3 ( 2 )
36 CALL_FUNCTION 3
38 GET_ITER
>> 40 FOR_ITER 38 ( to 84 )
42 STORE_FAST 4 ( i )

7 44 LOAD_FAST 0 ( arr )
46 LOAD_FAST 4 ( i )
48 BINARY_SUBSCR
50 LOAD_FAST 0 ( arr )
52 LOAD_FAST 4 ( i )
54 LOAD_CONST 2 ( 1 )
56 BINARY_ADD
58 BINARY_SUBSCR
60 COMPARE_OP 4 ( > )
62 POP_JUMP_IF_FALSE 40

8 64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 4 ( i )
68 LOAD_CONST 2 ( 1 )
70 BINARY_ADD
72 BINARY_SUBSCR
74 LOAD_FAST 0 ( arr )
76 LOAD_FAST 4 ( i )
78 BINARY_SUBSCR
80 ROT_TWO
82 LOAD_FAST 0 ( arr )
84 LOAD_FAST 4 ( i )
86 STORE_SUBSCR
88 LOAD_FAST 0 ( arr )
90 LOAD_FAST 4 ( i )
92 STORE_SUBSCR

9 94 LOAD_CONST 1 ( 0 )
96 STORE_FAST 2 ( isSorted )
98 JUMP_ABSOLUTE 40
>> 100 POP_BLOCK
>> 102 JUMP_ABSOLUTE 6
>> 104 POP_BLOCK

10 >> 106 SETUP_LOOP 68 ( to 6 )
108 LOAD_GLOBAL 0 ( range )
110 LOAD_CONST 1 ( 0 )
112 LOAD_FAST 1 ( n )
114 LOAD_CONST 2 ( 1 )
116 BINARY_SUBTRACT
118 LOAD_CONST 3 ( 2 )
120 CALL_FUNCTION 3
122 GET_ITER
>> 124 FOR_ITER 52 ( to 6 )
126 STORE_FAST 4 ( i )

11 128 LOAD_FAST 0 ( arr )
130 LOAD_FAST 4 ( i )
132 BINARY_SUBSCR
134 LOAD_FAST 0 ( arr )
136 LOAD_FAST 4 ( i )
138 LOAD_CONST 2 ( 1 )
140 BINARY_ADD
142 BINARY_SUBSCR
144 COMPARE_OP 4 ( > )
146 POP_JUMP_IF_FALSE 124

12 148 LOAD_FAST 0 ( arr )
150 LOAD_FAST 4 ( i )
152 BINARY_SUBSCR
154 LOAD_FAST 0 ( arr )
156 LOAD_FAST 4 ( i )
158 BINARY_SUBSCR
160 ROT_TWO
162 LOAD_FAST 0 ( arr )
164 LOAD_FAST 4 ( i )
166 STORE_SUBSCR

13 168 LOAD_CONST 1 ( 0 )
170 STORE_FAST 2 ( isSorted )

14 >> 172 LOAD_CONST 1 ( 0 )
174 STORE_FAST 2 ( isSorted )
176 JUMP_ABSOLUTE 124
>> 178 POP_BLOCK
>> 180 LOAD_CONST 0 ( None )
182 RETURN_VALUE
