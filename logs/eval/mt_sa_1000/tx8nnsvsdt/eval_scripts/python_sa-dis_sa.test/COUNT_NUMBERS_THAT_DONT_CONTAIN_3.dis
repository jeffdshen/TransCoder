{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return f_gold ( msd ) * f_gold ( po - 1 ) + f_gold ( msd ) + f_gold ( n % po )\n    else :\n        return f_gold ( msd * po - 1 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (85,),\n    (86,),\n    (3,),\n    (35,),\n    (59,),\n    (38,),\n    (33,),\n    (15,),\n    (75,),\n    (74,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def count ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po )\n    else :\n        return count ( msd * po - 1 )\n"}
Disassembly of <code object count at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 3 )
4 COMPARE_OP 0 ( < )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_FAST 0 ( n )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 0 ( n )
14 LOAD_CONST 1 ( 3 )
16 COMPARE_OP 5 ( >= )
18 POP_JUMP_IF_FALSE 36
20 LOAD_FAST 0 ( n )
22 LOAD_CONST 2 ( 10 )
24 COMPARE_OP 0 ( < )
26 POP_JUMP_IF_FALSE 36

5 28 LOAD_FAST 0 ( n )
30 LOAD_CONST 3 ( 1 )
32 BINARY_SUBTRACT
34 RETURN_VALUE

6 >> 36 LOAD_CONST 3 ( 1 )
38 STORE_FAST 1 ( po )

7 40 SETUP_LOOP 24 ( to 64 )
>> 42 LOAD_FAST 0 ( n )
44 LOAD_FAST 1 ( po )
46 BINARY_TRUE_DIVIDE
48 LOAD_CONST 4 ( 9 )
50 COMPARE_OP 4 ( > )
52 POP_JUMP_IF_FALSE 62

8 54 LOAD_FAST 1 ( po )
56 LOAD_CONST 2 ( 10 )
58 BINARY_MULTIPLY
60 STORE_FAST 1 ( po )

9 >> 62 LOAD_FAST 0 ( n )
64 LOAD_FAST 1 ( po )
66 BINARY_TRUE_DIVIDE
68 STORE_FAST 2 ( msd )

10 70 LOAD_FAST 2 ( msd )
72 LOAD_CONST 1 ( 3 )
74 COMPARE_OP 3 ( != )
76 POP_JUMP_IF_FALSE 138

11 78 LOAD_GLOBAL 0 ( count )
80 LOAD_FAST 2 ( msd )
82 CALL_FUNCTION 1
84 LOAD_GLOBAL 0 ( count )
86 LOAD_FAST 1 ( po )
88 LOAD_CONST 3 ( 1 )
90 BINARY_SUBTRACT
92 CALL_FUNCTION 1
94 BINARY_MULTIPLY
96 LOAD_GLOBAL 0 ( count )
98 LOAD_FAST 0 ( n )
100 LOAD_FAST 1 ( po )
102 CALL_FUNCTION 1
104 BINARY_ADD
106 RETURN_VALUE

13 >> 108 LOAD_GLOBAL 0 ( count )
110 LOAD_FAST 2 ( msd )
112 LOAD_FAST 1 ( po )
114 BINARY_MULTIPLY
116 LOAD_CONST 3 ( 1 )
118 BINARY_SUBTRACT
120 CALL_FUNCTION 1
122 RETURN_VALUE
124 LOAD_CONST 0 ( None )
126 RETURN_VALUE
