{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nfrom queue import Queue\n\ndef f_gold ( ip , op , n ) :\n    Input = Queue ( )\n    for i in range ( n ) :\n        Input.put ( ip [ i ] )\n    output = Queue ( )\n    for i in range ( n ) :\n        output.put ( op [ i ] )\n    tempStack = [ ]\n    while ( not Input.empty ( ) ) :\n        ele = Input.queue [ 0 ]\n        Input.get ( )\n        if ( ele == output.queue [ 0 ] ) :\n            output.get ( )\n            while ( len ( tempStack ) != 0 ) :\n                if ( tempStack [ - 1 ] == output.queue [ 0 ] ) :\n                    tempStack.pop ( )\n                    output.get ( )\n                else :\n                    break\n        else :\n            tempStack.append ( ele )\n    return ( Input.empty ( ) and len ( tempStack ) == 0 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 3, 3, 4, 5, 6, 9, 18, 20, 35, 39, 39, 45, 50, 55, 57, 61, 63, 65, 72, 73, 77, 77, 78, 87, 88, 91, 93, 95, 98],[2, 5, 7, 13, 16, 23, 24, 25, 27, 31, 31, 33, 34, 35, 38, 46, 49, 49, 51, 52, 58, 61, 62, 66, 68, 71, 73, 78, 91, 94, 98],23,),\n    ([-86, 10, -8, 8, -24, -2, -84, -86, -54, 50, 56, -22, -8, -62, 0, -50, -32],[-8, -46, 22, -66, -94, -96, 70, 58, -4, -70, -96, 34, -80, -26, -52, 52, -76],16,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([3, 42, 88, 89, 41, 71, 67, 5, 84, 20, 75, 36, 34, 20, 31, 16, 86, 89, 53, 47, 57, 27, 47, 93, 59, 66, 40, 18, 69, 36, 98, 99, 81],[16, 61, 39, 99, 71, 73, 35, 47, 62, 80, 1, 49, 54, 35, 39, 55, 7, 6, 85, 84, 11, 51, 38, 4, 72, 10, 33, 65, 64, 32, 16, 99, 9],19,),\n    ([-98, -94, -94, -90, -88, -82, -80, -78, -78, -68, -58, -58, -52, -36, -30, -14, -12, -6, -2, -2, 2, 4, 10, 14, 22, 24, 26, 38, 38, 46, 46, 48, 50, 54, 58, 60, 64, 64, 66, 70, 74, 74, 86, 88, 96, 96],[-92, -92, -80, -72, -72, -72, -70, -68, -64, -56, -40, -38, -34, -24, -10, -8, -8, -2, 0, 2, 4, 6, 14, 14, 18, 20, 34, 36, 36, 38, 38, 42, 48, 56, 64, 70, 72, 76, 76, 76, 76, 78, 84, 90, 94, 96],27,),\n    ([1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],[0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0],19,),\n    ([19, 37, 44, 65, 72, 87],[17, 31, 39, 46, 56, 88],4,),\n    ([88],[-30],0,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],13,),\n    ([5, 8, 53, 60, 85, 94, 77, 53, 81, 54, 67, 48, 56, 49, 16, 1, 85, 6, 55, 98, 62, 36, 4, 7, 64],[69, 37, 32, 5, 84, 14, 25, 9, 86, 85, 30, 82, 99, 92, 32, 43, 79, 58, 75, 90, 49, 54, 95, 76, 80],12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def checkStackPermutation ( ip , op , n ) :\n    Input = Queue ( )\n    for i in range ( n ) :\n        Input.put ( ip [ i ] )\n    output = Queue ( )\n    for i in range ( n ) :\n        output.put ( op [ i ] )\n    tempStack = [ ]\n    while ( not Input.empty ( ) ) :\n        ele = Input.queue [ 0 ]\n        Input.get ( )\n        if ( ele == output.queue [ 0 ] ) :\n            output.get ( )\n            while ( len ( tempStack ) != 0 ) :\n                if ( tempStack [ - 1 ] == output.queue [ 0 ] ) :\n                    tempStack.pop ( )\n                    output.get ( )\n                else :\n                    break\n        else :\n            tempStack.append ( ele )\n    return ( Input.empty ( ) and len ( tempStack ) == 0 )\n"}
Disassembly of <code object checkStackPermutation at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( Queue )
2 CALL_FUNCTION 0
4 STORE_FAST 3 ( Input )

3 6 SETUP_LOOP 30 ( to 38 )
8 LOAD_GLOBAL 1 ( range )
10 LOAD_FAST 2 ( n )
12 CALL_FUNCTION 1
14 GET_ITER
>> 16 FOR_ITER 18 ( to 36 )
18 STORE_FAST 4 ( i )

4 20 LOAD_FAST 3 ( Input )
22 LOAD_METHOD 2 ( put )
24 LOAD_FAST 0 ( ip )
26 LOAD_FAST 4 ( i )
28 BINARY_SUBSCR
30 CALL_METHOD 1
32 POP_TOP
34 JUMP_ABSOLUTE 16
>> 36 POP_BLOCK

5 >> 38 LOAD_GLOBAL 0 ( Queue )
40 CALL_FUNCTION 0
42 STORE_FAST 5 ( output )

6 44 SETUP_LOOP 28 ( to 72 )
46 LOAD_GLOBAL 1 ( range )
48 LOAD_FAST 2 ( n )
50 CALL_FUNCTION 1
52 GET_ITER
>> 54 FOR_ITER 18 ( to 70 )
56 STORE_FAST 4 ( i )

7 58 LOAD_FAST 5 ( output )
60 LOAD_METHOD 2 ( put )
62 LOAD_FAST 1 ( op )
64 LOAD_FAST 4 ( i )
66 BINARY_SUBSCR
68 CALL_METHOD 1
70 POP_TOP
72 JUMP_ABSOLUTE 54
>> 74 POP_BLOCK

8 >> 76 BUILD_LIST 0
78 STORE_FAST 6 ( tempStack )

9 80 SETUP_LOOP 142 ( to 194 )
>> 82 LOAD_GLOBAL 3 ( Input )
84 LOAD_METHOD 4 ( empty )
86 CALL_METHOD 0
88 POP_JUMP_IF_TRUE 192

10 90 LOAD_FAST 3 ( Input )
92 LOAD_ATTR 5 ( queue )
94 LOAD_CONST 1 ( 0 )
96 BINARY_SUBSCR
98 STORE_FAST 7 ( ele )

11 100 LOAD_FAST 3 ( Input )
102 LOAD_METHOD 6 ( get )
104 CALL_METHOD 0
106 POP_TOP

12 108 LOAD_FAST 7 ( ele )
110 LOAD_FAST 5 ( output )
112 LOAD_ATTR 5 ( queue )
114 LOAD_CONST 1 ( 0 )
116 BINARY_SUBSCR
118 COMPARE_OP 2 ( == )
120 POP_JUMP_IF_FALSE 182

13 122 LOAD_FAST 5 ( output )
124 LOAD_METHOD 6 ( get )
126 CALL_METHOD 0
128 POP_TOP

14 130 SETUP_LOOP 54 ( to 192 )
>> 132 LOAD_GLOBAL 7 ( len )
134 LOAD_FAST 6 ( tempStack )
136 CALL_FUNCTION 1
138 LOAD_CONST 1 ( 0 )
140 COMPARE_OP 3 ( != )
142 POP_JUMP_IF_FALSE 190

15 144 LOAD_FAST 6 ( tempStack )
146 LOAD_CONST 2 ( - 1 )
148 BINARY_SUBSCR
150 LOAD_FAST 5 ( output )
152 LOAD_ATTR 5 ( queue )
154 LOAD_CONST 1 ( 0 )
156 BINARY_SUBSCR
158 COMPARE_OP 2 ( == )
160 POP_JUMP_IF_FALSE 174

16 162 LOAD_FAST 6 ( tempStack )
164 LOAD_METHOD 8 ( pop )
166 CALL_METHOD 0
168 POP_TOP

17 170 LOAD_FAST 5 ( output )
172 LOAD_METHOD 6 ( get )
174 CALL_METHOD 0
176 POP_TOP
178 JUMP_ABSOLUTE 132

19 >> 180 BREAK_LOOP
182 JUMP_ABSOLUTE 132
184 JUMP_ABSOLUTE 132

21 >> 186 BREAK_LOOP
188 JUMP_ABSOLUTE 52

22 190 LOAD_FAST 6 ( tempStack )
192 LOAD_METHOD 2 ( append )
194 LOAD_FAST 7 ( ele )
196 CALL_METHOD 1
198 POP_TOP
200 JUMP_ABSOLUTE 52
>> 202 POP_BLOCK

23 >> 204 LOAD_FAST 3 ( Input )
206 LOAD_METHOD 4 ( empty )
208 CALL_METHOD 0
210 LOAD_GLOBAL 7 ( len )
212 LOAD_FAST 6 ( tempStack )
214 CALL_FUNCTION 1
216 LOAD_CONST 1 ( 0 )
218 COMPARE_OP 2 ( == )
220 RETURN_VALUE
