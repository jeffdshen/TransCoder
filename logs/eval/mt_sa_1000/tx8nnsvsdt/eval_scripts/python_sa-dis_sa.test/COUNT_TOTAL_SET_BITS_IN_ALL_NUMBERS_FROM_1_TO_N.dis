{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        for j in range ( 0 , n + 1 ) :\n            ans += k\n            if change == 1 :\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n        i += 1\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (90,),\n    (56,),\n    (43,),\n    (31,),\n    (77,),\n    (35,),\n    (43,),\n    (66,),\n    (15,),\n    (95,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        for j in range ( 0 , n + 1 ) :\n            ans += k\n            if change == 1 :\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n        i += 1\n    return ans\n"}
Disassembly of <code object countSetBits at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( i )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 2 ( ans )

4 8 SETUP_LOOP 92 ( to 102 )
>> 10 LOAD_CONST 2 ( 1 )
12 LOAD_FAST 1 ( i )
14 BINARY_LSHIFT
16 LOAD_FAST 0 ( n )
18 COMPARE_OP 1 ( <= )
20 POP_JUMP_IF_FALSE 100

5 22 LOAD_CONST 1 ( 0 )
24 STORE_FAST 3 ( k )

6 26 LOAD_CONST 3 ( 1 )
28 LOAD_FAST 1 ( i )
30 BINARY_LSHIFT
32 STORE_FAST 4 ( change )

7 34 SETUP_LOOP 54 ( to 94 )
36 LOAD_GLOBAL 0 ( range )
38 LOAD_CONST 1 ( 0 )
40 LOAD_FAST 0 ( n )
42 LOAD_CONST 2 ( 1 )
44 BINARY_ADD
46 CALL_FUNCTION 2
48 GET_ITER
>> 50 FOR_ITER 28 ( to 92 )
52 STORE_FAST 5 ( j )

8 54 LOAD_FAST 2 ( ans )
56 LOAD_FAST 3 ( k )
58 INPLACE_ADD
60 STORE_FAST 2 ( ans )

9 62 LOAD_FAST 4 ( change )
64 LOAD_CONST 2 ( 1 )
66 COMPARE_OP 2 ( == )
68 POP_JUMP_IF_FALSE 82

10 70 LOAD_FAST 3 ( k )
72 STORE_FAST 3 ( k )

11 74 LOAD_CONST 2 ( 1 )
76 LOAD_FAST 1 ( i )
78 BINARY_LSHIFT
80 STORE_FAST 4 ( change )
82 JUMP_ABSOLUTE 50
84 POP_BLOCK

13 >> 86 LOAD_FAST 4 ( change )
88 LOAD_CONST 2 ( 1 )
90 INPLACE_SUBTRACT
92 STORE_FAST 4 ( change )
94 JUMP_ABSOLUTE 10
>> 96 POP_BLOCK

14 >> 98 LOAD_FAST 1 ( i )
100 LOAD_CONST 2 ( 1 )
102 INPLACE_ADD
104 STORE_FAST 1 ( i )
106 JUMP_ABSOLUTE 10
>> 108 POP_BLOCK

15 >> 110 LOAD_FAST 2 ( ans )
112 RETURN_VALUE
