{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 78, 84],2,),\n    ([-54, 64, 60, 14, 18, -68, -54, -58, 38, -72, -84, 46, 74, 76, 28, -2, 54, 24, 18, -74, -78, 14, -38, -70, 26, -54, -36, -96, -12, 8, 62, -42, -84, 10, -6, 36, -72, 10, 10, -20, 16, 92, -64, -34, 74, -98, 18],26,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,),\n    ([39, 49, 94, 80, 48, 34, 63, 82, 47, 51, 60, 68, 79, 23, 97, 22, 54, 53, 40, 2, 25],10,),\n    ([-90, -52, -10, 12, 72],3,),\n    ([1, 0, 0],2,),\n    ([2, 9, 11, 14, 16, 17, 17, 18, 19, 21, 24, 25, 28, 29, 30, 33, 33, 39, 41, 41, 43, 46, 50, 51, 60, 62, 67, 80, 84, 86, 91, 92, 97],27,),\n    ([4],0,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],16,),\n    ([52, 8, 31, 92, 20, 18, 34, 5, 15, 8, 73, 20, 40, 61, 80, 51, 95, 73, 38, 30, 21, 69, 52, 38, 68, 77],22,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findGreatest ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result\n"}
Disassembly of <code object findGreatest at 0x7f2b016399c0, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - 1 )
2 STORE_FAST 2 ( result )

3 4 SETUP_LOOP 96 ( to 102 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_FAST 1 ( n )
10 CALL_FUNCTION 1
12 GET_ITER
>> 14 FOR_ITER 80 ( to 100 )
16 STORE_FAST 3 ( i )

4 18 SETUP_LOOP 74 ( to 98 )
20 LOAD_GLOBAL 0 ( range )
22 LOAD_FAST 1 ( n )
24 LOAD_CONST 2 ( 1 )
26 BINARY_SUBTRACT
28 CALL_FUNCTION 1
30 GET_ITER
>> 32 FOR_ITER 62 ( to 96 )
34 STORE_FAST 4 ( j )

5 36 SETUP_LOOP 56 ( to 94 )
38 LOAD_GLOBAL 0 ( range )
40 LOAD_FAST 4 ( j )
42 LOAD_CONST 2 ( 1 )
44 BINARY_ADD
46 LOAD_FAST 1 ( n )
48 CALL_FUNCTION 2
50 GET_ITER
>> 52 FOR_ITER 30 ( to 92 )
54 STORE_FAST 5 ( k )

6 56 LOAD_FAST 0 ( arr )
58 LOAD_FAST 4 ( j )
60 BINARY_SUBSCR
62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 5 ( k )
66 BINARY_SUBSCR
68 BINARY_MULTIPLY
70 LOAD_FAST 0 ( arr )
72 LOAD_FAST 3 ( i )
74 BINARY_SUBSCR
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 52

7 80 LOAD_GLOBAL 1 ( max )
82 LOAD_FAST 2 ( result )
84 LOAD_FAST 0 ( arr )
86 LOAD_FAST 3 ( i )
88 BINARY_SUBSCR
90 CALL_FUNCTION 2
92 STORE_FAST 2 ( result )
94 JUMP_ABSOLUTE 52
>> 96 POP_BLOCK
>> 98 JUMP_ABSOLUTE 32
>> 100 POP_BLOCK
>> 102 JUMP_ABSOLUTE 14
>> 104 POP_BLOCK

8 >> 106 LOAD_FAST 2 ( result )
108 RETURN_VALUE
