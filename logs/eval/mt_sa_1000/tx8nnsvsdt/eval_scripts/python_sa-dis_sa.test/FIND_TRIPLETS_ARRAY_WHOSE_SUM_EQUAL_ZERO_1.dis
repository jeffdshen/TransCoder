{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    found = False\n    for i in range ( n - 1 ) :\n        s = set ( )\n        for j in range ( i + 1 , n ) :\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n    if found == False :\n        print ( \"No Triplet Found\" )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 7, 12, 18, 18, 25, 26, 28, 29, 33, 33, 37, 39, 39, 53, 54, 55, 59, 61, 63, 63, 65, 66, 68, 68, 71, 71, 77, 81, 85, 90, 93, 94, 95, 97],18,),\n    ([38, 68, 16, 96, -10, 6, 86, -42, -66, -2, -10, 48, 16, -28, 92, -24, 0, 46, -58, -58, 56, -70, 10, -2, -92, -80, 14, -78, 16, -84, -88, 42, -24, 6, 86, 82, 84],19,),\n    ([0, 0, 0, 0, 1, 1, 1, 1],6,),\n    ([45],0,),\n    ([-80, -68, -54, -44, -40, -38, -32, -28, -22, -18, -12, -10, 14, 24, 38, 38, 40, 42, 46, 46, 64, 64, 66, 68, 68, 68, 70, 96],20,),\n    ([0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0],13,),\n    ([1, 3, 4, 6, 8, 9, 10, 10, 11, 17, 17, 21, 22, 22, 25, 32, 34, 38, 46, 46, 48, 51, 58, 59, 62, 63, 64, 65, 70, 70, 72, 72, 72, 74, 77, 78, 81, 82, 83, 89, 90, 92, 95, 97],43,),\n    ([-70, 78, 70, 20, -52, 36, -42, 34, -56, -94],9,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],7,),\n    ([72, 50, 10, 44, 66, 67, 76, 19, 3, 24, 76, 56, 53, 42, 15, 50, 86, 43, 77, 28, 42, 65, 92, 73, 60, 86, 52, 65],21,)\n        ]\n    filled_function_param = [\n    ([1, 7, 12, 18, 18, 25, 26, 28, 29, 33, 33, 37, 39, 39, 53, 54, 55, 59, 61, 63, 63, 65, 66, 68, 68, 71, 71, 77, 81, 85, 90, 93, 94, 95, 97],18,),\n    ([38, 68, 16, 96, -10, 6, 86, -42, -66, -2, -10, 48, 16, -28, 92, -24, 0, 46, -58, -58, 56, -70, 10, -2, -92, -80, 14, -78, 16, -84, -88, 42, -24, 6, 86, 82, 84],19,),\n    ([0, 0, 0, 0, 1, 1, 1, 1],6,),\n    ([45],0,),\n    ([-80, -68, -54, -44, -40, -38, -32, -28, -22, -18, -12, -10, 14, 24, 38, 38, 40, 42, 46, 46, 64, 64, 66, 68, 68, 68, 70, 96],20,),\n    ([0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0],13,),\n    ([1, 3, 4, 6, 8, 9, 10, 10, 11, 17, 17, 21, 22, 22, 25, 32, 34, 38, 46, 46, 48, 51, 58, 59, 62, 63, 64, 65, 70, 70, 72, 72, 72, 74, 77, 78, 81, 82, 83, 89, 90, 92, 95, 97],43,),\n    ([-70, 78, 70, 20, -52, 36, -42, 34, -56, -94],9,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],7,),\n    ([72, 50, 10, 44, 66, 67, 76, 19, 3, 24, 76, 56, 53, 42, 15, 50, 86, 43, 77, 28, 42, 65, 92, 73, 60, 86, 52, 65],21,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findTriplets ( arr , n ) :\n    found = False\n    for i in range ( n - 1 ) :\n        s = set ( )\n        for j in range ( i + 1 , n ) :\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n    if found == False :\n        print ( \"No Triplet Found\" )\n"}
Disassembly of <code object findTriplets at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( False )
2 STORE_FAST 2 ( found )

3 4 SETUP_LOOP 120 ( to 120 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_FAST 1 ( n )
10 LOAD_CONST 2 ( 1 )
12 BINARY_SUBTRACT
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 102 ( to 118 )
20 STORE_FAST 3 ( i )

4 22 LOAD_GLOBAL 1 ( set )
24 CALL_FUNCTION 0
26 STORE_FAST 4 ( s )

5 28 SETUP_LOOP 86 ( to 116 )
30 LOAD_GLOBAL 0 ( range )
32 LOAD_FAST 3 ( i )
34 LOAD_CONST 2 ( 1 )
36 BINARY_ADD
38 LOAD_FAST 1 ( n )
40 CALL_FUNCTION 2
42 GET_ITER
>> 44 FOR_ITER 52 ( to 114 )
46 STORE_FAST 5 ( j )

6 48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 3 ( i )
52 BINARY_SUBSCR
54 LOAD_FAST 0 ( arr )
56 LOAD_FAST 5 ( j )
58 BINARY_SUBSCR
60 BINARY_ADD
62 UNARY_NEGATIVE
64 STORE_FAST 6 ( x )

7 66 LOAD_FAST 6 ( x )
68 LOAD_FAST 4 ( s )
70 COMPARE_OP 6 ( in )
72 POP_JUMP_IF_FALSE 44

8 74 LOAD_GLOBAL 2 ( print )
76 LOAD_FAST 6 ( x )
78 LOAD_FAST 0 ( arr )
80 LOAD_FAST 3 ( i )
82 BINARY_SUBSCR
84 LOAD_FAST 0 ( arr )
86 LOAD_FAST 5 ( j )
88 BINARY_SUBSCR
90 CALL_FUNCTION 3
92 POP_TOP

9 94 LOAD_CONST 3 ( True )
96 STORE_FAST 2 ( found )
98 JUMP_ABSOLUTE 44
>> 100 POP_BLOCK

11 >> 102 LOAD_FAST 4 ( s )
104 LOAD_METHOD 3 ( add )
106 LOAD_FAST 0 ( arr )
108 LOAD_FAST 5 ( j )
110 BINARY_SUBSCR
112 CALL_METHOD 1
114 POP_TOP
116 JUMP_ABSOLUTE 18
>> 118 POP_BLOCK
>> 120 JUMP_ABSOLUTE 18
>> 122 POP_BLOCK

12 >> 124 LOAD_FAST 2 ( found )
126 LOAD_CONST 1 ( False )
128 COMPARE_OP 2 ( == )
130 POP_JUMP_IF_FALSE 144

13 132 LOAD_GLOBAL 2 ( print )
134 LOAD_CONST 4 ( 'No Triplet Found' )
136 CALL_FUNCTION 1
138 POP_TOP
>> 140 LOAD_CONST 0 ( None )
142 RETURN_VALUE
