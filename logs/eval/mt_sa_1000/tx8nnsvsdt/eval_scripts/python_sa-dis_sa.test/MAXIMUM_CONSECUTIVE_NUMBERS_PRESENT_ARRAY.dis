{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    S = set ( ) ;\n    for i in range ( n ) :\n        S.add ( arr [ i ] ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ] ;\n            while ( S.__contains__ ( j ) ) :\n                j += 1 ;\n            ans = max ( ans , j - arr [ i ] ) ;\n    return ans ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([3, 5, 9, 24, 28, 31, 49, 54, 67, 85, 86, 94, 97, 97],11,),\n    ([-34, 16, -80, -10, 80, 2, 50, -74, -76, 36, -84, -24, 74, -54, -22, 46, 80, 58, -8, 70, 24, -88, 52, 62, 30, 42, 48, 16, 78, -82, 64, -36, 84, -72],29,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],13,),\n    ([49, 61, 68, 4, 90, 89, 71, 74, 45, 61, 35, 41, 59],11,),\n    ([-42, -8, 28, 56, 80, 96],4,),\n    ([1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1],17,),\n    ([3, 4, 6, 6, 13, 27, 27, 29, 32, 36, 46, 50, 52, 65, 69, 70, 71, 83, 87, 91],10,),\n    ([64, -76, 28, 6, 56, 18, 32, -50, -20, 18, -26, -90, 32, 50, -18, 98, 84, 40, 50, 88, -70, -6, -24, -44, -96, -58, 48, -78, -14],15,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],15,),\n    ([50, 48, 61, 87, 7, 78, 93, 44, 16, 88, 98, 15, 73, 93, 43, 46, 42, 34, 1, 35, 79, 35, 84, 60, 18, 79, 17, 4, 78, 1, 20, 64],25,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findLongestConseqSubseq ( arr , n ) :\n    S = set ( ) ;\n    for i in range ( n ) :\n        S.add ( arr [ i ] ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ] ;\n            while ( S.__contains__ ( j ) ) :\n                j += 1 ;\n            ans = max ( ans , j - arr [ i ] ) ;\n    return ans ;\n"}
Disassembly of <code object findLongestConseqSubseq at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( set )
2 CALL_FUNCTION 0
4 STORE_FAST 2 ( S )

3 6 SETUP_LOOP 32 ( to 42 )
8 LOAD_GLOBAL 1 ( range )
10 LOAD_FAST 1 ( n )
12 CALL_FUNCTION 1
14 GET_ITER
>> 16 FOR_ITER 20 ( to 40 )
18 STORE_FAST 3 ( i )

4 20 LOAD_FAST 2 ( S )
22 LOAD_METHOD 2 ( add )
24 LOAD_FAST 0 ( arr )
26 LOAD_FAST 3 ( i )
28 BINARY_SUBSCR
30 CALL_METHOD 1
32 POP_TOP
34 JUMP_ABSOLUTE 16
>> 36 POP_BLOCK

5 >> 38 LOAD_CONST 1 ( 0 )
40 STORE_FAST 4 ( ans )

6 >> 42 SETUP_LOOP 68 ( to 106 )
44 LOAD_GLOBAL 1 ( range )
46 LOAD_FAST 1 ( n )
48 CALL_FUNCTION 1
50 GET_ITER
>> 52 FOR_ITER 54 ( to 104 )
54 STORE_FAST 3 ( i )

7 56 LOAD_FAST 2 ( S )
58 LOAD_METHOD 3 ( __contains__ )
60 LOAD_FAST 0 ( arr )
62 LOAD_FAST 3 ( i )
64 BINARY_SUBSCR
66 CALL_METHOD 1
68 POP_JUMP_IF_FALSE 52

8 70 LOAD_FAST 0 ( arr )
72 LOAD_FAST 3 ( i )
74 BINARY_SUBSCR
76 STORE_FAST 4 ( j )

9 78 SETUP_LOOP 30 ( to 102 )
>> 80 LOAD_GLOBAL 0 ( set )
82 LOAD_METHOD 3 ( __contains__ )
84 LOAD_FAST 4 ( j )
86 CALL_METHOD 1
88 CALL_FUNCTION 1
90 POP_JUMP_IF_FALSE 100

10 92 LOAD_FAST 4 ( j )
94 LOAD_CONST 2 ( 1 )
96 INPLACE_ADD
98 STORE_FAST 4 ( j )

11 >> 100 LOAD_GLOBAL 4 ( max )
102 LOAD_FAST 4 ( ans )
104 LOAD_FAST 4 ( j )
106 LOAD_FAST 0 ( arr )
108 LOAD_FAST 3 ( i )
110 BINARY_SUBSCR
112 BINARY_SUBTRACT
114 CALL_FUNCTION 2
116 STORE_FAST 4 ( ans )
118 JUMP_ABSOLUTE 80
>> 120 POP_BLOCK

12 >> 122 LOAD_FAST 4 ( ans )
124 RETURN_VALUE
