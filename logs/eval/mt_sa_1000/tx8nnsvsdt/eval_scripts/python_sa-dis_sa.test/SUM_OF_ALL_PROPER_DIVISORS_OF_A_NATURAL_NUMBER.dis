{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( num ) :\n    result = 0\n    i = 2\n    while i <= ( math.sqrt ( num ) ) :\n        if ( num % i == 0 ) :\n            if ( i == ( num / i ) ) :\n                result = result + i ;\n            else :\n                result = result + ( i + num / i ) ;\n        i = i + 1\n    return ( result + 1 ) ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (2,),\n    (57,),\n    (28,),\n    (43,),\n    (38,),\n    (29,),\n    (45,),\n    (47,),\n    (44,),\n    (3,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def divSum ( num ) :\n    result = 0\n    i = 2\n    while i <= ( math.sqrt ( num ) ) :\n        if ( num % i == 0 ) :\n            if ( i == ( num / i ) ) :\n                result = result + i ;\n            else :\n                result = result + ( i + num / i ) ;\n        i = i + 1\n    return ( result + 1 ) ;\n"}
Disassembly of <code object divSum at 0x7f2b0164d420, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( result )

3 4 LOAD_CONST 2 ( 2 )
6 STORE_FAST 2 ( i )

4 8 SETUP_LOOP 74 ( to 84 )
>> 10 LOAD_FAST 2 ( i )
12 LOAD_GLOBAL 0 ( math )
14 LOAD_METHOD 1 ( sqrt )
16 LOAD_FAST 0 ( num )
18 CALL_METHOD 1
20 COMPARE_OP 1 ( <= )
22 POP_JUMP_IF_FALSE 82

5 24 LOAD_FAST 0 ( num )
26 LOAD_FAST 2 ( i )
28 BINARY_MODULO
30 LOAD_CONST 1 ( 0 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 82

6 36 LOAD_FAST 2 ( i )
38 LOAD_FAST 0 ( num )
40 LOAD_FAST 2 ( i )
42 BINARY_TRUE_DIVIDE
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 62

7 48 LOAD_FAST 1 ( result )
50 LOAD_FAST 2 ( i )
52 BINARY_ADD
54 STORE_FAST 1 ( result )
56 JUMP_ABSOLUTE 10

9 >> 58 LOAD_FAST 1 ( result )
60 LOAD_FAST 2 ( i )
62 LOAD_FAST 0 ( num )
64 LOAD_FAST 2 ( i )
66 BINARY_TRUE_DIVIDE
68 BINARY_ADD
70 BINARY_ADD
72 STORE_FAST 1 ( result )
74 JUMP_ABSOLUTE 10
>> 76 POP_BLOCK

10 >> 78 LOAD_FAST 2 ( i )
80 LOAD_CONST 3 ( 1 )
82 BINARY_ADD
84 STORE_FAST 2 ( i )

11 >> 86 LOAD_FAST 1 ( result )
88 LOAD_CONST 3 ( 1 )
90 BINARY_ADD
92 RETURN_VALUE
