{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( num , divisor ) :\n    if ( divisor == 0 ) :\n        return False\n    if ( divisor < 0 ) :\n        divisor = - divisor\n    if ( num < 0 ) :\n        num = - num\n    i = 1\n    product = 0\n    while ( product <= num ) :\n        product = divisor * i\n        i += 1\n    return num - ( product - divisor )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (34,55,),\n    (63,22,),\n    (15,26,),\n    (56,58,),\n    (63,94,),\n    (28,45,),\n    (54,97,),\n    (2,58,),\n    (94,91,),\n    (82,40,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def getRemainder ( num , divisor ) :\n    if ( divisor == 0 ) :\n        return False\n    if ( divisor < 0 ) :\n        divisor = - divisor\n    if ( num < 0 ) :\n        num = - num\n    i = 1\n    product = 0\n    while ( product <= num ) :\n        product = divisor * i\n        i += 1\n    return num - ( product - divisor )\n"}
Disassembly of <code object getRemainder at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( divisor )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( False )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 1 ( divisor )
14 LOAD_CONST 1 ( 0 )
16 COMPARE_OP 0 ( < )
18 POP_JUMP_IF_FALSE 28

5 20 LOAD_FAST 1 ( divisor )
22 UNARY_NEGATIVE
24 STORE_FAST 1 ( divisor )
26 JUMP_FORWARD 8 ( to 38 )

6 >> 28 LOAD_FAST 0 ( num )
30 LOAD_CONST 1 ( 0 )
32 COMPARE_OP 0 ( < )
34 POP_JUMP_IF_FALSE 38

7 36 LOAD_FAST 0 ( num )
38 UNARY_NEGATIVE
40 STORE_FAST 0 ( num )

8 >> 42 LOAD_CONST 3 ( 1 )
44 STORE_FAST 2 ( i )

9 46 LOAD_CONST 1 ( 0 )
48 STORE_FAST 3 ( product )

10 50 SETUP_LOOP 32 ( to 88 )
>> 52 LOAD_FAST 3 ( product )
54 LOAD_FAST 0 ( num )
56 COMPARE_OP 1 ( <= )
58 POP_JUMP_IF_FALSE 86

11 60 LOAD_FAST 1 ( divisor )
62 LOAD_FAST 2 ( i )
64 BINARY_MULTIPLY
66 STORE_FAST 3 ( product )

12 68 LOAD_FAST 2 ( i )
70 LOAD_CONST 3 ( 1 )
72 INPLACE_ADD
74 STORE_FAST 2 ( i )
76 JUMP_ABSOLUTE 52
>> 78 POP_BLOCK

13 >> 80 LOAD_FAST 0 ( num )
82 LOAD_FAST 3 ( product )
84 LOAD_FAST 1 ( divisor )
86 BINARY_SUBTRACT
88 BINARY_MULTIPLY
90 RETURN_VALUE
