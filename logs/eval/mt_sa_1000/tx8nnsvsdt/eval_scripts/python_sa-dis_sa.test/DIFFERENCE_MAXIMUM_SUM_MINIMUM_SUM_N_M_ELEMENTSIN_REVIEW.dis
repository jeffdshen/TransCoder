{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , m ) :\n    max = 0 ; min = 0\n    arr.sort ( ) ;\n    j = n - 1\n    for i in range ( m ) :\n        min += arr [ i ]\n        max += arr [ j ]\n        j = j - 1\n    return ( max - min )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 6, 16, 21, 22, 23, 27, 27, 28, 29, 29, 31, 31, 37, 37, 38, 40, 41, 43, 51, 52, 53, 55, 55, 56, 57, 63, 67, 67, 67, 72, 75, 79, 82, 84, 91, 92, 93, 96, 96, 97],21,25,),\n    ([58, -62, 24, -10, -30, -92, -50, -32, 54, -18, 94, -14, -40, -16, 48],8,12,),\n    ([0, 0],1,1,),\n    ([7, 51, 6, 71, 10, 29, 49, 63, 77, 13, 13, 56, 65, 34, 76, 16, 84, 2, 89, 83, 65, 1, 5, 99, 11, 59, 71, 54, 17, 9, 11, 48, 2, 65, 62, 77, 29, 80, 97, 83, 44, 91, 4, 44, 21, 12, 24],31,34,),\n    ([-90, -58, 6, 16, 20, 34, 36, 38, 48, 66, 82, 84, 86, 90, 90],14,8,),\n    ([0, 0, 1, 1, 0],3,2,),\n    ([7, 12, 15, 15, 21, 37, 40, 45, 50, 52, 53, 68, 68, 72, 75, 78, 86, 86, 88],16,18,),\n    ([22, -20, 94, -88, 72, 44],4,3,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],25,17,),\n    ([32, 63, 87, 26, 77, 4, 87, 60, 21, 25, 30, 65, 38, 96, 11, 75],12,15,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def find_difference ( arr , n , m ) :\n    max = 0 ; min = 0\n    arr.sort ( ) ;\n    j = n - 1\n    for i in range ( m ) :\n        min += arr [ i ]\n        max += arr [ j ]\n        j = j - 1\n    return ( max - min )\n"}
Disassembly of <code object find_difference at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 3 ( max )

3 4 LOAD_FAST 0 ( arr )
6 LOAD_METHOD 0 ( sort )
8 CALL_METHOD 0
10 POP_TOP

4 12 LOAD_FAST 1 ( n )
14 LOAD_CONST 2 ( 1 )
16 BINARY_SUBTRACT
18 STORE_FAST 4 ( j )

5 20 SETUP_LOOP 56 ( to 78 )
22 LOAD_GLOBAL 1 ( range )
24 LOAD_FAST 2 ( m )
26 CALL_FUNCTION 1
28 GET_ITER
>> 30 FOR_ITER 44 ( to 76 )
32 STORE_FAST 5 ( i )

6 34 LOAD_FAST 3 ( min )
36 LOAD_FAST 0 ( arr )
38 LOAD_FAST 5 ( i )
40 BINARY_SUBSCR
42 INPLACE_ADD
44 STORE_FAST 3 ( min )

7 46 LOAD_FAST 3 ( max )
48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 4 ( j )
52 BINARY_SUBSCR
54 INPLACE_ADD
56 STORE_FAST 3 ( max )

8 58 LOAD_FAST 4 ( j )
60 LOAD_CONST 2 ( 1 )
62 BINARY_SUBTRACT
64 STORE_FAST 4 ( j )
66 JUMP_ABSOLUTE 30
>> 68 POP_BLOCK

9 >> 70 LOAD_FAST 3 ( max )
72 LOAD_FAST 3 ( min )
74 BINARY_SUBTRACT
76 RETURN_VALUE
