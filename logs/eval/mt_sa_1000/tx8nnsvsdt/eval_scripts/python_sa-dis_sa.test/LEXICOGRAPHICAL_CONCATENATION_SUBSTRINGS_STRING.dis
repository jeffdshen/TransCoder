{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    n = len ( s ) ;\n    sub_count = ( n * ( n + 1 ) ) // 2 ;\n    arr = [ 0 ] * sub_count ;\n    index = 0 ;\n    for i in range ( n ) :\n        for j in range ( 1 , n - i + 1 ) :\n            arr [ index ] = s [ i : i + j ] ;\n            index += 1 ;\n    arr.sort ( ) ;\n    res = \"\" ;\n    for i in range ( sub_count ) :\n        res += arr [ i ] ;\n    return res ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('sqGOi',),\n    ('848580',),\n    ('01001110011001',),\n    ('ZhWXUKmeiI',),\n    ('0917296541285',),\n    ('01101001111100',),\n    ('tjP kR',),\n    ('999907',),\n    ('011100',),\n    ('qJPHNSJOUj',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def lexicographicSubConcat ( s ) :\n    n = len ( s ) ;\n    sub_count = ( n * ( n + 1 ) ) // 2 ;\n    arr = [ 0 ] * sub_count ;\n    index = 0 ;\n    for i in range ( n ) :\n        for j in range ( 1 , n - i + 1 ) :\n            arr [ index ] = s [ i : i + j ] ;\n            index += 1 ;\n    arr.sort ( ) ;\n    res = \"\" ;\n    for i in range ( sub_count ) :\n        res += arr [ i ] ;\n    return res ;\n"}
Disassembly of <code object lexicographicSubConcat at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( n )

3 8 LOAD_FAST 1 ( n )
10 LOAD_FAST 1 ( n )
12 LOAD_CONST 1 ( 1 )
14 BINARY_ADD
16 BINARY_MULTIPLY
18 LOAD_CONST 2 ( 2 )
20 BINARY_FLOOR_DIVIDE
22 STORE_FAST 2 ( sub_count )

4 24 LOAD_CONST 3 ( 0 )
26 BUILD_LIST 1
28 LOAD_FAST 2 ( sub_count )
30 BINARY_MULTIPLY
32 STORE_FAST 3 ( arr )

5 34 LOAD_CONST 3 ( 0 )
36 STORE_FAST 4 ( index )

6 38 SETUP_LOOP 66 ( to 104 )
40 LOAD_GLOBAL 1 ( range )
42 LOAD_FAST 1 ( n )
44 CALL_FUNCTION 1
46 GET_ITER
>> 48 FOR_ITER 58 ( to 102 )
50 STORE_FAST 5 ( i )

7 52 SETUP_LOOP 48 ( to 100 )
54 LOAD_GLOBAL 1 ( range )
56 LOAD_CONST 1 ( 1 )
58 LOAD_FAST 1 ( n )
60 LOAD_FAST 5 ( i )
62 BINARY_SUBTRACT
64 LOAD_CONST 1 ( 1 )
66 BINARY_ADD
68 CALL_FUNCTION 2
70 GET_ITER
>> 72 FOR_ITER 28 ( to 98 )
74 STORE_FAST 6 ( j )

8 76 LOAD_FAST 0 ( s )
78 LOAD_FAST 5 ( i )
80 LOAD_FAST 5 ( i )
82 LOAD_FAST 6 ( j )
84 BINARY_ADD
86 BUILD_SLICE 2
88 BINARY_SUBSCR
90 LOAD_FAST 3 ( arr )
92 LOAD_FAST 4 ( index )
94 STORE_SUBSCR
96 JUMP_ABSOLUTE 72
>> 98 POP_BLOCK

9 >> 100 LOAD_FAST 3 ( arr )
102 LOAD_METHOD 2 ( sort )
104 CALL_METHOD 0
106 POP_TOP

10 108 LOAD_CONST 4 ( '' )
110 STORE_FAST 7 ( res )

11 112 SETUP_LOOP 32 ( to 138 )
114 LOAD_GLOBAL 1 ( range )
116 LOAD_FAST 2 ( sub_count )
118 CALL_FUNCTION 1
120 GET_ITER
>> 122 FOR_ITER 20 ( to 136 )
124 STORE_FAST 5 ( i )

12 126 LOAD_FAST 7 ( res )
128 LOAD_FAST 3 ( arr )
130 LOAD_FAST 5 ( i )
132 BINARY_SUBSCR
134 INPLACE_ADD
136 STORE_FAST 7 ( res )
138 JUMP_ABSOLUTE 122
>> 140 POP_BLOCK

13 >> 142 LOAD_FAST 7 ( res )
144 RETURN_VALUE
