{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    cum_sum = 0\n    for i in range ( 0 , n ) :\n        cum_sum += arr [ i ]\n    curr_val = 0\n    for i in range ( 0 , n ) :\n        curr_val += i * arr [ i ]\n    res = curr_val\n    for i in range ( 1 , n ) :\n        next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([6, 6, 13, 14, 16, 20, 24, 24, 24, 27, 28, 36, 49, 51, 55, 56, 62, 69, 74, 74, 76, 85, 86, 90, 92, 98],13,),\n    ([-42, 96, 68, 64, 14, -74, 76, 42, 34, -92, -20, 28, -80, -34, -22, 96, -46, 96, 10, -82, 82, 50, -24, 48, 56, 72, -40, -86, 84, 66, -62, 50, -76, 34],27,),\n    ([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],10,),\n    ([37, 88, 70, 86, 24, 62, 34, 44, 37, 42, 46, 34, 23, 32, 55, 2, 5, 70, 30, 46, 40, 65, 91, 4, 7, 74, 46, 12, 30, 22, 1, 91, 89, 88, 97, 6, 6, 11, 33, 14, 68, 24],39,),\n    ([-92, -90, -70, -70, -10, 2, 10, 12, 14, 40, 44, 46, 64, 68, 68, 96],11,),\n    ([1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1],15,),\n    ([9, 15, 15, 17, 19, 20, 21, 23, 25, 25, 25, 32, 32, 33, 45, 51, 54, 59, 68, 71, 71, 71, 72, 75, 78, 80, 82, 82, 88, 89, 92, 93, 94, 97],22,),\n    ([52, -78, -80, 32, -56, -98, -36, 86, 34, -36, 42, 46, 50, 0, 34, -46, -2, -18, -96, 12, -42, 62, 32, 78, 66, -8, 50, 60, 10, -18, 66, 80, -24, -98, 8, 48, 34, 44, -80, -34, 72, 0, -60, 52, 40, 20],45,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],33,),\n    ([45, 35, 25, 7, 24, 73, 25, 86, 48, 70, 47, 91, 96, 15, 39, 9],8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxSum ( arr , n ) :\n    cum_sum = 0\n    for i in range ( 0 , n ) :\n        cum_sum += arr [ i ]\n    curr_val = 0\n    for i in range ( 0 , n ) :\n        curr_val += i * arr [ i ]\n    res = curr_val\n    for i in range ( 1 , n ) :\n        next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n    return res\n"}
Disassembly of <code object maxSum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( cum_sum )

3 4 SETUP_LOOP 32 ( to 38 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_CONST 1 ( 0 )
10 LOAD_FAST 1 ( n )
12 CALL_FUNCTION 2
14 GET_ITER
>> 16 FOR_ITER 20 ( to 36 )
18 STORE_FAST 3 ( i )

4 20 LOAD_FAST 2 ( cum_sum )
22 LOAD_FAST 0 ( arr )
24 LOAD_FAST 3 ( i )
26 BINARY_SUBSCR
28 INPLACE_ADD
30 STORE_FAST 2 ( cum_sum )
32 JUMP_ABSOLUTE 16
34 POP_BLOCK

5 >> 36 LOAD_CONST 1 ( 0 )
38 STORE_FAST 4 ( curr_val )

6 40 SETUP_LOOP 36 ( to 78 )
42 LOAD_GLOBAL 0 ( range )
44 LOAD_CONST 1 ( 0 )
46 LOAD_FAST 1 ( n )
48 CALL_FUNCTION 2
50 GET_ITER
>> 52 FOR_ITER 20 ( to 76 )
54 STORE_FAST 3 ( i )

7 56 LOAD_FAST 4 ( curr_val )
58 LOAD_FAST 3 ( i )
60 LOAD_FAST 0 ( arr )
62 LOAD_FAST 3 ( i )
64 BINARY_SUBSCR
66 BINARY_MULTIPLY
68 INPLACE_ADD
70 STORE_FAST 4 ( curr_val )
72 JUMP_ABSOLUTE 52
74 POP_BLOCK

8 >> 76 LOAD_FAST 4 ( curr_val )
78 STORE_FAST 5 ( res )

9 80 SETUP_LOOP 76 ( to 144 )
82 LOAD_GLOBAL 0 ( range )
84 LOAD_CONST 2 ( 1 )
86 LOAD_FAST 1 ( n )
88 CALL_FUNCTION 2
90 GET_ITER
>> 92 FOR_ITER 58 ( to 142 )
94 STORE_FAST 3 ( i )

10 96 LOAD_FAST 4 ( curr_val )
98 LOAD_FAST 2 ( cum_sum )
100 LOAD_FAST 0 ( arr )
102 LOAD_FAST 3 ( i )
104 LOAD_CONST 2 ( 1 )
106 BINARY_SUBTRACT
108 BINARY_SUBSCR
110 BINARY_SUBTRACT
112 LOAD_FAST 0 ( arr )
114 LOAD_FAST 3 ( i )
116 LOAD_CONST 2 ( 1 )
118 BINARY_SUBTRACT
120 BINARY_SUBSCR
122 LOAD_FAST 1 ( n )
124 LOAD_CONST 2 ( 1 )
126 BINARY_SUBTRACT
128 BINARY_MULTIPLY
130 BINARY_SUBTRACT
132 STORE_FAST 4 ( next_val )

11 134 LOAD_FAST 4 ( next_val )
136 STORE_FAST 4 ( curr_val )

12 138 LOAD_GLOBAL 1 ( max )
140 LOAD_FAST 5 ( res )
142 LOAD_FAST 4 ( next_val )
144 CALL_FUNCTION 2
146 STORE_FAST 5 ( res )
148 JUMP_ABSOLUTE 92
>> 150 POP_BLOCK

13 >> 152 LOAD_FAST 5 ( res )
154 RETURN_VALUE
