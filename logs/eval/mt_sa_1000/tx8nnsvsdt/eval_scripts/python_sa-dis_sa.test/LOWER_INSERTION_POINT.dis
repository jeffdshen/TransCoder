{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , X ) :\n    if ( X < arr [ 0 ] ) :\n        return 0 ;\n    elif ( X > arr [ n - 1 ] ) :\n        return n\n    lowerPnt = 0\n    i = 1\n    while ( i < n and arr [ i ] < X ) :\n        lowerPnt = i\n        i = i * 2\n    while ( lowerPnt < n and arr [ lowerPnt ] < X ) :\n        lowerPnt += 1\n    return lowerPnt\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 2, 5, 5, 16, 16, 20, 26, 32, 35, 39, 39, 41, 44, 48, 48, 51, 59, 59, 62, 66, 66, 70, 74, 75, 78, 80, 86, 86, 96],17,29,),\n    ([-76, 80, -6, -2, 50, 72, 84, -56, 70, 8, 48, 6, -24, -50, -72],14,9,),\n    ([0, 0, 0, 0, 0, 1, 1, 1, 1],8,4,),\n    ([74, 65, 84, 71],2,3,),\n    ([-96, -92, -90, -86, -84, -76, -76, -62, -58, -54, -50, -50, -44, -42, -38, -34, -14, -8, 6, 12, 24, 38, 40, 50, 62, 84, 86, 92],19,19,),\n    ([1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1],12,17,),\n    ([6, 10, 14, 14, 16, 19, 23, 23, 25, 26, 29, 34, 42, 42, 43, 45, 47, 49, 50, 51, 51, 56, 59, 65, 69, 72, 75, 78, 79, 80, 82, 82, 82, 84, 85, 91, 98],31,24,),\n    ([-90, -2, 22, -2, 58, -2, 96, 38, 36, -66, -98, 22, -80, -32, 22, 0, -34, -16, 82, 76, 12, 84, 66, 8, 32, 18, -98, -10],22,16,),\n    ([0, 0, 0, 1, 1, 1, 1],3,5,),\n    ([85, 59, 22, 52, 93, 14, 42, 71, 69, 15, 52, 78, 35, 61, 92, 90, 70, 48, 47, 72, 74, 46, 22, 74, 83, 32, 14, 24, 18, 27, 18, 68, 29, 31],19,33,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def LowerInsertionPoint ( arr , n , X ) :\n    if ( X < arr [ 0 ] ) :\n        return 0 ;\n    elif ( X > arr [ n - 1 ] ) :\n        return n\n    lowerPnt = 0\n    i = 1\n    while ( i < n and arr [ i ] < X ) :\n        lowerPnt = i\n        i = i * 2\n    while ( lowerPnt < n and arr [ lowerPnt ] < X ) :\n        lowerPnt += 1\n    return lowerPnt\n"}
Disassembly of <code object LowerInsertionPoint at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 2 ( X )
2 LOAD_FAST 0 ( arr )
4 LOAD_CONST 1 ( 0 )
6 BINARY_SUBSCR
8 COMPARE_OP 0 ( < )
10 POP_JUMP_IF_FALSE 16

3 12 LOAD_CONST 1 ( 0 )
14 RETURN_VALUE

4 >> 16 LOAD_FAST 2 ( X )
18 LOAD_FAST 0 ( arr )
20 LOAD_FAST 1 ( n )
22 LOAD_CONST 2 ( 1 )
24 BINARY_SUBTRACT
26 BINARY_SUBSCR
28 COMPARE_OP 4 ( > )
30 POP_JUMP_IF_FALSE 36

5 32 LOAD_FAST 1 ( n )
34 RETURN_VALUE

6 >> 36 LOAD_CONST 1 ( 0 )
38 STORE_FAST 3 ( lowerPnt )

7 40 LOAD_CONST 2 ( 1 )
42 STORE_FAST 4 ( i )

8 44 SETUP_LOOP 34 ( to 76 )
>> 46 LOAD_FAST 4 ( i )
48 LOAD_FAST 1 ( n )
50 COMPARE_OP 0 ( < )
52 POP_JUMP_IF_FALSE 74
54 LOAD_FAST 0 ( arr )
56 LOAD_FAST 4 ( i )
58 BINARY_SUBSCR
60 LOAD_FAST 2 ( X )
62 COMPARE_OP 0 ( < )
64 POP_JUMP_IF_FALSE 74

9 66 LOAD_FAST 4 ( i )
68 STORE_FAST 3 ( lowerPnt )

10 70 LOAD_FAST 4 ( i )
72 LOAD_CONST 3 ( 2 )
74 BINARY_MULTIPLY
76 STORE_FAST 4 ( i )
78 JUMP_ABSOLUTE 46
>> 80 POP_BLOCK

11 >> 82 SETUP_LOOP 34 ( to 124 )
>> 84 LOAD_FAST 3 ( lowerPnt )
86 LOAD_FAST 1 ( n )
88 COMPARE_OP 0 ( < )
90 POP_JUMP_IF_FALSE 122
92 LOAD_FAST 0 ( arr )
94 LOAD_FAST 3 ( lowerPnt )
96 BINARY_SUBSCR
98 LOAD_FAST 2 ( X )
100 COMPARE_OP 0 ( < )
102 POP_JUMP_IF_FALSE 122

12 104 LOAD_FAST 3 ( lowerPnt )
106 LOAD_CONST 2 ( 1 )
108 INPLACE_ADD
110 STORE_FAST 3 ( lowerPnt )

13 >> 112 LOAD_FAST 3 ( lowerPnt )
114 RETURN_VALUE
