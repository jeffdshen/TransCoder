{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    NO_OF_CHARS = 256\n    count = [ 0 ] * NO_OF_CHARS\n    for i in range ( len ( str ) ) :\n        count [ ord ( str [ i ] ) ] += 1\n    first , second = 0 , 0\n    for i in range ( NO_OF_CHARS ) :\n        if count [ i ] > count [ first ] :\n            second = first\n            first = i\n        elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n            second = i\n    return chr ( second )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('SgUmIrEAB',),\n    ('304',),\n    ('0010',),\n    ('VGC BeErLvQ',),\n    ('0872',),\n    ('00110001',),\n    ('Lsqwm',),\n    ('308998',),\n    ('1000011',),\n    ('XCEOs',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = 256\n    count = [ 0 ] * NO_OF_CHARS\n    for i in range ( len ( str ) ) :\n        count [ ord ( str [ i ] ) ] += 1\n    first , second = 0 , 0\n    for i in range ( NO_OF_CHARS ) :\n        if count [ i ] > count [ first ] :\n            second = first\n            first = i\n        elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n            second = i\n    return chr ( second )\n"}
Disassembly of <code object getSecondMostFreq at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 256 )
2 STORE_FAST 1 ( NO_OF_CHARS )

3 4 LOAD_CONST 2 ( 0 )
6 BUILD_LIST 1
8 LOAD_GLOBAL 0 ( NO_OF_CHARS )
10 BINARY_MULTIPLY
12 STORE_FAST 2 ( count )

4 14 SETUP_LOOP 46 ( to 66 )
16 LOAD_GLOBAL 1 ( range )
18 LOAD_GLOBAL 2 ( len )
20 LOAD_FAST 0 ( str )
22 CALL_FUNCTION 1
24 CALL_FUNCTION 1
26 GET_ITER
>> 28 FOR_ITER 30 ( to 64 )
30 STORE_FAST 3 ( i )

5 32 LOAD_FAST 2 ( count )
34 LOAD_GLOBAL 3 ( ord )
36 LOAD_FAST 0 ( str )
38 LOAD_FAST 3 ( i )
40 BINARY_SUBSCR
42 CALL_FUNCTION 1
44 DUP_TOP_TWO
46 BINARY_SUBSCR
48 LOAD_CONST 3 ( 1 )
50 INPLACE_ADD
52 ROT_THREE
54 STORE_SUBSCR
56 JUMP_ABSOLUTE 28
>> 58 POP_BLOCK

6 60 LOAD_CONST 2 ( 0 )
62 LOAD_CONST 2 ( 0 )
64 ROT_TWO
66 STORE_FAST 4 ( first )
68 STORE_FAST 5 ( second )

7 70 SETUP_LOOP 80 ( to 144 )
72 LOAD_GLOBAL 1 ( range )
74 LOAD_FAST 1 ( NO_OF_CHARS )
76 CALL_FUNCTION 1
78 GET_ITER
>> 80 FOR_ITER 68 ( to 142 )
82 STORE_FAST 3 ( i )

8 84 LOAD_FAST 2 ( count )
86 LOAD_FAST 3 ( i )
88 BINARY_SUBSCR
90 LOAD_FAST 2 ( count )
92 LOAD_FAST 4 ( first )
94 BINARY_SUBSCR
96 COMPARE_OP 4 ( > )
98 POP_JUMP_IF_FALSE 80

9 100 LOAD_FAST 4 ( first )
102 STORE_FAST 5 ( second )

10 104 LOAD_FAST 3 ( i )
106 STORE_FAST 4 ( first )
108 JUMP_ABSOLUTE 80
>> 110 POP_BLOCK

11 112 LOAD_FAST 2 ( count )
114 LOAD_FAST 3 ( i )
116 BINARY_SUBSCR
118 LOAD_FAST 2 ( count )
120 LOAD_FAST 5 ( second )
122 BINARY_SUBSCR
124 COMPARE_OP 4 ( > )
126 POP_JUMP_IF_FALSE 80
128 LOAD_FAST 2 ( count )
130 LOAD_FAST 3 ( i )
132 BINARY_SUBSCR
134 LOAD_FAST 2 ( count )
136 LOAD_FAST 4 ( first )
138 BINARY_SUBSCR
140 COMPARE_OP 3 ( != )
142 POP_JUMP_IF_FALSE 80

12 144 LOAD_FAST 3 ( i )
146 STORE_FAST 5 ( second )
148 JUMP_ABSOLUTE 80
>> 150 POP_BLOCK

13 >> 152 LOAD_GLOBAL 4 ( chr )
154 LOAD_FAST 5 ( second )
156 CALL_FUNCTION 1
158 RETURN_VALUE
