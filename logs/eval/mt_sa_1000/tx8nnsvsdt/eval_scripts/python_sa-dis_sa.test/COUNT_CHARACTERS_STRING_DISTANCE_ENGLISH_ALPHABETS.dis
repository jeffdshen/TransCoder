{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ] ) ) == abs ( i - j ) ) :\n                result += 1 ;\n    return result ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('smnKL',),\n    ('270083',),\n    ('0',),\n    ('kcZdsz',),\n    ('483544224',),\n    ('000011',),\n    ('WysGCirMwKBzP',),\n    ('3366',),\n    ('110',),\n    ('NlaMkpCjUgg',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ] ) ) == abs ( i - j ) ) :\n                result += 1 ;\n    return result ;\n"}
Disassembly of <code object countPairs at 0x7f2b0164d8a0, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( result )

3 4 LOAD_GLOBAL 0 ( len )
6 LOAD_FAST 0 ( str1 )
8 CALL_FUNCTION 1
10 STORE_FAST 2 ( n )

4 12 SETUP_LOOP 92 ( to 108 )
14 LOAD_GLOBAL 1 ( range )
16 LOAD_CONST 1 ( 0 )
18 LOAD_FAST 2 ( n )
20 CALL_FUNCTION 2
22 GET_ITER
>> 24 FOR_ITER 80 ( to 106 )
26 STORE_FAST 3 ( i )

5 28 SETUP_LOOP 62 ( to 104 )
30 LOAD_GLOBAL 1 ( range )
32 LOAD_FAST 3 ( i )
34 LOAD_CONST 2 ( 1 )
36 BINARY_ADD
38 LOAD_FAST 2 ( n )
40 CALL_FUNCTION 2
42 GET_ITER
>> 44 FOR_ITER 50 ( to 102 )
46 STORE_FAST 4 ( j )

6 48 LOAD_GLOBAL 2 ( abs )
50 LOAD_GLOBAL 3 ( ord )
52 LOAD_FAST 0 ( str1 )
54 LOAD_FAST 3 ( i )
56 BINARY_SUBSCR
58 CALL_FUNCTION 1
60 LOAD_GLOBAL 3 ( ord )
62 LOAD_FAST 0 ( str1 )
64 LOAD_FAST 4 ( j )
66 BINARY_SUBSCR
68 CALL_FUNCTION 1
70 BINARY_SUBTRACT
72 LOAD_GLOBAL 2 ( abs )
74 LOAD_FAST 3 ( i )
76 LOAD_FAST 4 ( j )
78 BINARY_SUBTRACT
80 CALL_FUNCTION 1
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 44

7 86 LOAD_FAST 1 ( result )
88 LOAD_CONST 2 ( 1 )
90 INPLACE_ADD
92 STORE_FAST 1 ( result )
94 JUMP_ABSOLUTE 44
>> 96 POP_BLOCK
>> 98 JUMP_ABSOLUTE 24
>> 100 POP_BLOCK

8 >> 102 LOAD_FAST 1 ( result )
104 RETURN_VALUE
