{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('',),\n    ('abbc',),\n    ('abcabc',),\n    ('agsdbkfdc ',),\n    ('ababab',),\n    ('aaaaaaa',),\n    ('aabaaabcc',),\n    ('19',),\n    ('1001100',),\n    ('DtAnuQbU',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countSubsequences ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount\n"}
Disassembly of <code object countSubsequences at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( aCount )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 2 ( bCount )

4 8 LOAD_CONST 1 ( 0 )
10 STORE_FAST 3 ( cCount )

5 12 SETUP_LOOP 92 ( to 108 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_GLOBAL 1 ( len )
18 LOAD_FAST 0 ( s )
20 CALL_FUNCTION 1
22 CALL_FUNCTION 1
24 GET_ITER
>> 26 FOR_ITER 76 ( to 106 )
28 STORE_FAST 4 ( i )

6 30 LOAD_FAST 0 ( s )
32 LOAD_FAST 4 ( i )
34 BINARY_SUBSCR
36 LOAD_CONST 2 ( 'a' )
38 COMPARE_OP 2 ( == )
40 POP_JUMP_IF_FALSE 56

7 42 LOAD_CONST 3 ( 1 )
44 LOAD_CONST 4 ( 2 )
46 LOAD_FAST 1 ( aCount )
48 BINARY_MULTIPLY
50 BINARY_ADD
52 STORE_FAST 1 ( aCount )
54 JUMP_ABSOLUTE 26

8 >> 56 LOAD_FAST 0 ( s )
58 LOAD_FAST 4 ( i )
60 BINARY_SUBSCR
62 LOAD_CONST 5 ( 'b' )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 76

9 68 LOAD_FAST 1 ( aCount )
70 LOAD_CONST 4 ( 2 )
72 LOAD_FAST 2 ( bCount )
74 BINARY_MULTIPLY
76 BINARY_ADD
78 STORE_FAST 2 ( bCount )
80 JUMP_ABSOLUTE 26

10 >> 82 LOAD_FAST 0 ( s )
84 LOAD_FAST 4 ( i )
86 BINARY_SUBSCR
88 LOAD_CONST 6 ( 'c' )
90 COMPARE_OP 2 ( == )
92 POP_JUMP_IF_FALSE 26

11 94 LOAD_FAST 2 ( bCount )
96 LOAD_CONST 4 ( 2 )
98 LOAD_FAST 3 ( cCount )
100 BINARY_MULTIPLY
102 BINARY_ADD
104 STORE_FAST 3 ( cCount )
106 JUMP_ABSOLUTE 26
108 POP_BLOCK

12 >> 110 LOAD_FAST 3 ( cCount )
112 RETURN_VALUE
