{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    for i in range ( 1 , N ) :\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) :\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    return dp [ N - 1 ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([48, 53, 67, 78, 78, 93, 95],6,4,),\n    ([-2, 52, 18, 70, 32, 88, -70, -32, 72, 30],8,8,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],37,31,),\n    ([98, 84, 13, 61, 58, 90, 45, 89, 45, 80, 3, 5, 57, 86, 40, 80, 60, 51, 60, 73, 67, 10, 52, 56, 60, 36, 34, 60, 75, 63, 23, 86, 51, 68, 86, 13, 71, 86, 99, 6, 42, 2, 39, 82, 16, 5, 23, 47, 12],31,37,),\n    ([-84, -56, 68, 78],3,3,),\n    ([0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0],14,9,),\n    ([1, 2, 3, 9, 12, 12, 16, 17, 18, 19, 20, 21, 21, 26, 29, 42, 44, 45, 48, 48, 48, 54, 54, 55, 60, 63, 63, 64, 64, 67, 67, 68, 69, 74, 78, 78, 79, 83, 95, 95, 95, 96, 97, 99],27,42,),\n    ([40, -48, -14, 64, -58, 60, -42, -56, 54, 28, -16, -92, 42],9,8,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,19,),\n    ([64, 25, 96],1,1,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    for i in range ( 1 , N ) :\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) :\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    return dp [ N - 1 ]\n"}
Disassembly of <code object maxSumPairWithDifferenceLessThanK at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 LOAD_CONST 1 ( 0 )
10 BUILD_LIST 1
12 LOAD_FAST 1 ( N )
14 BINARY_MULTIPLY
16 STORE_FAST 3 ( dp )

4 18 LOAD_CONST 1 ( 0 )
20 LOAD_FAST 3 ( dp )
22 LOAD_CONST 1 ( 0 )
24 STORE_SUBSCR

5 26 SETUP_LOOP 132 ( to 148 )
28 LOAD_GLOBAL 1 ( range )
30 LOAD_CONST 2 ( 1 )
32 LOAD_FAST 1 ( N )
34 CALL_FUNCTION 2
36 GET_ITER
>> 38 FOR_ITER 124 ( to 146 )
40 STORE_FAST 4 ( i )

6 42 LOAD_FAST 3 ( dp )
44 LOAD_FAST 4 ( i )
46 LOAD_CONST 2 ( 1 )
48 BINARY_SUBTRACT
50 BINARY_SUBSCR
52 LOAD_FAST 3 ( dp )
54 LOAD_FAST 4 ( i )
56 STORE_SUBSCR

7 58 LOAD_FAST 0 ( arr )
60 LOAD_FAST 4 ( i )
62 BINARY_SUBSCR
64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 4 ( i )
68 LOAD_CONST 2 ( 1 )
70 BINARY_SUBTRACT
72 BINARY_SUBSCR
74 BINARY_SUBTRACT
76 LOAD_FAST 2 ( K )
78 COMPARE_OP 0 ( < )
80 POP_JUMP_IF_FALSE 38

8 82 LOAD_FAST 4 ( i )
84 LOAD_CONST 3 ( 2 )
86 COMPARE_OP 5 ( >= )
88 POP_JUMP_IF_FALSE 38

9 90 LOAD_GLOBAL 2 ( max )
92 LOAD_FAST 3 ( dp )
94 LOAD_FAST 4 ( i )
96 BINARY_SUBSCR
98 LOAD_FAST 3 ( dp )
100 LOAD_FAST 4 ( i )
102 LOAD_CONST 3 ( 2 )
104 BINARY_SUBTRACT
106 BINARY_SUBSCR
108 LOAD_FAST 0 ( arr )
110 LOAD_FAST 4 ( i )
112 BINARY_SUBSCR
114 BINARY_ADD
116 CALL_FUNCTION 2
118 LOAD_FAST 3 ( dp )
120 LOAD_FAST 4 ( i )
122 STORE_SUBSCR
124 JUMP_ABSOLUTE 38

11 >> 126 LOAD_GLOBAL 2 ( max )
128 LOAD_FAST 3 ( dp )
130 LOAD_FAST 4 ( i )
132 BINARY_SUBSCR
134 LOAD_FAST 0 ( arr )
136 LOAD_FAST 4 ( i )
138 BINARY_SUBSCR
140 LOAD_FAST 0 ( arr )
142 LOAD_FAST 4 ( i )
144 BINARY_SUBSCR
146 LOAD_FAST 0 ( arr )
148 LOAD_FAST 4 ( i )
150 LOAD_CONST 2 ( 1 )
152 BINARY_SUBTRACT
154 BINARY_SUBSCR
156 BINARY_ADD
158 CALL_FUNCTION 2
160 LOAD_FAST 3 ( dp )
162 LOAD_FAST 4 ( i )
164 STORE_SUBSCR
166 JUMP_ABSOLUTE 38
>> 168 POP_BLOCK

12 >> 170 LOAD_FAST 3 ( dp )
172 LOAD_FAST 1 ( N )
174 LOAD_CONST 2 ( 1 )
176 BINARY_SUBTRACT
178 BINARY_SUBSCR
180 RETURN_VALUE
