{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    arr.sort ( )\n    max_count = 1 ; res = arr [ 0 ] ; curr_count = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            curr_count += 1\n        else :\n            if ( curr_count > max_count ) :\n                max_count = curr_count\n                res = arr [ i - 1 ]\n            curr_count = 1\n    if ( curr_count > max_count ) :\n        max_count = curr_count\n        res = arr [ n - 1 ]\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 1, 3, 11, 11, 11, 18, 20, 26, 26, 27, 30, 33, 39, 39, 42, 42, 48, 51, 51, 51, 51, 60, 66, 66, 68, 68, 69, 71, 72, 73, 76, 76, 77, 77, 77, 78, 90, 96],25,),\n    ([46, -8, 64, -46, -38, 92, -14, -22, -32, 48, 72, 96, 30, 66, 94, 36, 42, -18, 14, -74, 80, 96, -4],18,),\n    ([0, 0, 0, 0, 0, 0, 1],6,),\n    ([93, 32, 3, 31, 67, 96, 52, 80, 70, 49, 45, 23, 58, 87, 31, 56, 21, 71, 55, 97],15,),\n    ([-98, -96, -84, -82, -72, -64, -62, -56, -52, -52, -48, -46, -42, -36, -32, -30, -30, -18, -16, -10, -2, 0, 6, 18, 22, 22, 40, 42, 50, 54, 64, 68, 68, 72, 80, 82, 84, 96],20,),\n    ([1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0],29,),\n    ([9, 12, 13, 28, 43, 46, 64, 66, 68, 89, 92],6,),\n    ([22, -8, -56, 68, -12, -26, -40, -46, -42, -80, 4, -42, -72, -22, 36, 22, -94, 48, 96, 80, -52, 46, 90, 94, 36, 92, -12, -24, -60, -32, 92, 18, 76, 40, -32, 6, -22, 86, 86, -88, 38, 50, 32, 78, -82, 54, -40, 18],41,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 1],4,),\n    ([81, 74, 32, 41, 85, 65, 81, 74, 40, 64, 97, 4, 61, 43, 54, 96, 62, 2, 97, 86, 80, 25, 9, 31, 16, 29, 4, 63, 76, 41, 5, 95],16,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def mostFrequent ( arr , n ) :\n    arr.sort ( )\n    max_count = 1 ; res = arr [ 0 ] ; curr_count = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            curr_count += 1\n        else :\n            if ( curr_count > max_count ) :\n                max_count = curr_count\n                res = arr [ i - 1 ]\n            curr_count = 1\n    if ( curr_count > max_count ) :\n        max_count = curr_count\n        res = arr [ n - 1 ]\n    return res\n"}
Disassembly of <code object mostFrequent at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 LOAD_CONST 1 ( 1 )
10 STORE_FAST 2 ( max_count )
12 LOAD_CONST 1 ( 1 )
14 STORE_FAST 3 ( res )

4 16 LOAD_CONST 1 ( 1 )
18 STORE_FAST 4 ( curr_count )

5 20 SETUP_LOOP 76 ( to 96 )
22 LOAD_GLOBAL 1 ( range )
24 LOAD_CONST 1 ( 1 )
26 LOAD_FAST 1 ( n )
28 CALL_FUNCTION 2
30 GET_ITER
>> 32 FOR_ITER 60 ( to 94 )
34 STORE_FAST 5 ( i )

6 36 LOAD_FAST 0 ( arr )
38 LOAD_FAST 5 ( i )
40 BINARY_SUBSCR
42 LOAD_FAST 0 ( arr )
44 LOAD_FAST 5 ( i )
46 LOAD_CONST 1 ( 1 )
48 BINARY_SUBTRACT
50 BINARY_SUBSCR
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 66

7 56 LOAD_FAST 4 ( curr_count )
58 LOAD_CONST 1 ( 1 )
60 INPLACE_ADD
62 STORE_FAST 4 ( curr_count )
64 JUMP_ABSOLUTE 32

9 >> 66 LOAD_FAST 4 ( curr_count )
68 LOAD_FAST 2 ( max_count )
70 COMPARE_OP 4 ( > )
72 POP_JUMP_IF_FALSE 88

10 74 LOAD_FAST 4 ( curr_count )
76 STORE_FAST 2 ( max_count )

11 78 LOAD_FAST 0 ( arr )
80 LOAD_FAST 5 ( i )
82 LOAD_CONST 1 ( 1 )
84 BINARY_SUBTRACT
86 BINARY_SUBSCR
>> 88 STORE_FAST 3 ( res )
90 JUMP_ABSOLUTE 32
92 POP_BLOCK
>> 94 LOAD_CONST 0 ( None )
>> 96 RETURN_VALUE
