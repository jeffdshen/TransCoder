{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    for i in range ( n ) :\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n    return arr\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([6, 8, 10, 11, 23, 25, 26, 34, 34, 37, 46, 51, 53, 56, 57, 57, 58, 62, 63, 68, 76, 77, 79, 80, 83, 85, 86, 88, 88, 93],25,),\n    ([-82, 66, -48, -56, -4, -48, 26, -66, 76, -22, 58, -12, -82, -90, 76, 94, 84, -16, -14, 0, 44, -28, 64, 54, 34, -76, 30, -68, 66, 44, 92, -76, 6, -14, -16, -36, -2, 28, -94, 72, -34, 38, -76, -32, 58, -98],39,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],14,),\n    ([12, 52, 67, 11, 17, 66, 25, 62, 98, 77, 6, 34, 13, 33, 48, 55, 51, 4, 4, 72, 1, 59, 80, 87, 61, 40, 1, 21, 9, 7, 19, 66, 78, 88, 57, 13, 54, 69, 72, 93, 32, 98, 85, 90, 56, 35, 70],34,),\n    ([-94, -82, -62, -48, -44, -18, -12, -12, 22, 46, 94],5,),\n    ([1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0],24,),\n    ([5, 38, 84, 86, 89, 96],4,),\n    ([-68, 80, 96, 34, -40, -24, 34, -32, 0, -50, -44, 54, 66, -2, -26, -74, -64, -70, -76, -98, -20, 82, 82, -66, -42, -64],22,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],9,),\n    ([13, 46, 67, 90, 7, 88, 25, 31, 4, 91, 54, 68, 30, 70, 19, 26, 82, 12, 73, 42, 52, 41],19,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    for i in range ( n ) :\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n    return arr\n"}
Disassembly of <code object rearrange at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 0 ( None )
4 BUILD_LIST 1
6 BINARY_MULTIPLY
8 STORE_FAST 2 ( temp )

3 10 LOAD_CONST 1 ( 0 )
12 LOAD_FAST 1 ( n )
14 LOAD_CONST 2 ( 1 )
16 BINARY_SUBTRACT
18 ROT_TWO
20 STORE_FAST 3 ( small )
22 STORE_FAST 4 ( large )

4 24 LOAD_CONST 3 ( True )
26 STORE_FAST 5 ( flag )

5 28 SETUP_LOOP 76 ( to 98 )
30 LOAD_GLOBAL 0 ( range )
32 LOAD_FAST 1 ( n )
34 CALL_FUNCTION 1
36 GET_ITER
>> 38 FOR_ITER 58 ( to 96 )
40 STORE_FAST 6 ( i )

6 42 LOAD_FAST 5 ( flag )
44 LOAD_CONST 3 ( True )
46 COMPARE_OP 8 ( is )
48 POP_JUMP_IF_FALSE 60

7 50 LOAD_FAST 0 ( arr )
52 LOAD_FAST 4 ( large )
54 BINARY_SUBSCR
56 LOAD_FAST 2 ( temp )
58 LOAD_FAST 6 ( i )
60 STORE_SUBSCR

8 62 LOAD_FAST 4 ( large )
64 LOAD_CONST 2 ( 1 )
66 INPLACE_SUBTRACT
68 STORE_FAST 4 ( large )
70 JUMP_FORWARD 18 ( to 88 )

10 >> 72 LOAD_FAST 0 ( arr )
74 LOAD_FAST 3 ( small )
76 BINARY_SUBSCR
78 LOAD_FAST 2 ( temp )
80 LOAD_FAST 6 ( i )
82 STORE_SUBSCR

11 84 LOAD_FAST 3 ( small )
86 LOAD_CONST 2 ( 1 )
88 INPLACE_ADD
90 STORE_FAST 3 ( small )

12 >> 92 LOAD_GLOBAL 1 ( bool )
94 LOAD_CONST 2 ( 1 )
96 LOAD_FAST 5 ( flag )
98 BINARY_SUBTRACT
100 CALL_FUNCTION 1
102 STORE_FAST 5 ( flag )
104 JUMP_ABSOLUTE 38
>> 106 POP_BLOCK

13 >> 108 SETUP_LOOP 20 ( to 120 )
110 LOAD_GLOBAL 0 ( range )
112 LOAD_FAST 1 ( n )
114 CALL_FUNCTION 1
116 GET_ITER
>> 118 FOR_ITER 12 ( to 118 )
120 STORE_FAST 6 ( i )

14 122 LOAD_FAST 2 ( temp )
124 LOAD_FAST 6 ( i )
126 BINARY_SUBSCR
128 LOAD_FAST 0 ( arr )
130 LOAD_FAST 6 ( i )
132 STORE_SUBSCR
134 JUMP_ABSOLUTE 118
>> 136 POP_BLOCK

15 >> 138 LOAD_FAST 0 ( arr )
140 RETURN_VALUE
