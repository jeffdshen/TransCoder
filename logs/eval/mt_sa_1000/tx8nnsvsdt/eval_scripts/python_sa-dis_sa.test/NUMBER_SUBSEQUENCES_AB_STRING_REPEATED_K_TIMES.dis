{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n   ('abbc',96,),\n('abahk',7,),\n('hugbabab',5,),\n('abadbc',60,),\n('nkg9',8,),\n('jh7dab',41,),\n('abd',87,),\n('aabb8yk',4,),\n('1111',18,),\n('PFXAhr',8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2\n"}
Disassembly of <code object countOccurrences at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 2 ( n )

3 8 LOAD_CONST 1 ( 0 )
10 STORE_FAST 3 ( c1 )

4 12 LOAD_CONST 1 ( 0 )
14 STORE_FAST 4 ( c2 )

5 16 LOAD_CONST 1 ( 0 )
18 STORE_FAST 5 ( C )

6 20 SETUP_LOOP 54 ( to 74 )
22 LOAD_GLOBAL 1 ( range )
24 LOAD_FAST 2 ( n )
26 CALL_FUNCTION 1
28 GET_ITER
>> 30 FOR_ITER 46 ( to 72 )
32 STORE_FAST 6 ( i )

7 34 LOAD_FAST 0 ( s )
36 LOAD_FAST 6 ( i )
38 BINARY_SUBSCR
40 LOAD_CONST 2 ( 'a' )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 58

8 46 LOAD_FAST 3 ( c1 )
48 LOAD_CONST 3 ( 1 )
50 INPLACE_ADD
52 STORE_FAST 3 ( c1 )

9 >> 54 LOAD_FAST 0 ( s )
56 LOAD_FAST 6 ( i )
58 BINARY_SUBSCR
60 LOAD_CONST 4 ( 'b' )
62 COMPARE_OP 2 ( == )
64 POP_JUMP_IF_FALSE 30

10 66 LOAD_FAST 4 ( c2 )
68 LOAD_CONST 3 ( 1 )
70 INPLACE_ADD
72 STORE_FAST 4 ( c2 )

11 74 LOAD_FAST 5 ( C )
76 LOAD_FAST 3 ( c1 )
78 INPLACE_ADD
80 STORE_FAST 5 ( C )
82 JUMP_ABSOLUTE 30
>> 84 POP_BLOCK

12 >> 86 LOAD_FAST 5 ( C )
88 LOAD_FAST 1 ( K )
90 BINARY_MULTIPLY
92 LOAD_FAST 1 ( K )
94 LOAD_FAST 1 ( K )
96 LOAD_CONST 3 ( 1 )
98 BINARY_SUBTRACT
100 BINARY_MULTIPLY
102 LOAD_CONST 5 ( 2 )
104 BINARY_TRUE_DIVIDE
106 LOAD_FAST 3 ( c1 )
108 BINARY_MULTIPLY
110 LOAD_FAST 4 ( c2 )
112 BINARY_MULTIPLY
114 BINARY_ADD
116 RETURN_VALUE
