{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport collections\n\ndef f_gold ( arr , n ) :\n    q = collections.deque ( [ ] )\n    arr.sort ( )\n    q.append ( arr [ 0 ] )\n    for i in range ( 1 , n ) :\n        now = q [ 0 ]\n        if ( arr [ i ] >= 2 * now ) :\n            q.popleft ( )\n        q.append ( arr [ i ] )\n    return len ( q )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 17, 17, 18, 28, 28, 29, 34, 43, 44, 52, 54, 80, 84, 84, 91, 92, 97],12,),\n    ([-34, 70, -90, -10, -26, 64, 4, 28, 24, -90, -78, 72, 74, 80, 82, -94],10,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],40,),\n    ([20, 87, 5, 62, 12, 81, 30, 83, 96, 16, 2, 76, 3, 8, 37, 53, 55, 88],9,),\n    ([-94, -92, -60, -58, -54, -42, -36, -12, -8, -2, 8, 14, 18, 20, 26, 32, 38, 56, 58, 60, 70, 78, 80, 86, 98],18,),\n    ([0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],9,),\n    ([1, 1, 2, 3, 3, 11, 16, 18, 19, 21, 21, 22, 22, 24, 27, 28, 29, 43, 43, 52, 55, 57, 60, 62, 62, 63, 65, 66, 70, 70, 73, 77, 78, 79, 79, 80, 85, 85, 86, 88, 89, 90, 97, 98],30,),\n    ([88, 12, -22, -60, 30, -30, -14, 80, -58, -80, -10, 86, -94, -14, 4, -18, -18, 54, -82, -8, -68, -6, -44, -44, 50, 88, -78, -42, 12, 52, 44, 14, 6, 48, 18, -30, 4],21,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],7,),\n    ([82, 62, 43, 39, 5, 90, 75, 50, 16, 83, 52, 69, 71, 3, 89, 10, 51, 69, 32, 96, 5, 43, 83, 12, 31, 81, 22, 59, 52, 47, 86, 49, 56, 90, 31, 59],28,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minimumBox ( arr , n ) :\n    q = collections.deque ( [ ] )\n    arr.sort ( )\n    q.append ( arr [ 0 ] )\n    for i in range ( 1 , n ) :\n        now = q [ 0 ]\n        if ( arr [ i ] >= 2 * now ) :\n            q.popleft ( )\n        q.append ( arr [ i ] )\n    return len ( q )\n"}
Disassembly of <code object minimumBox at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( collections )
2 LOAD_METHOD 1 ( deque )
4 BUILD_LIST 0
6 CALL_METHOD 1
8 STORE_FAST 2 ( q )

3 10 LOAD_FAST 0 ( arr )
12 LOAD_METHOD 2 ( sort )
14 CALL_METHOD 0
16 POP_TOP

4 18 LOAD_FAST 2 ( q )
20 LOAD_METHOD 3 ( append )
22 LOAD_FAST 0 ( arr )
24 LOAD_CONST 1 ( 0 )
26 BINARY_SUBSCR
28 CALL_METHOD 1
30 POP_TOP

5 32 SETUP_LOOP 68 ( to 96 )
34 LOAD_GLOBAL 4 ( range )
36 LOAD_CONST 2 ( 1 )
38 LOAD_FAST 1 ( n )
40 CALL_FUNCTION 2
42 GET_ITER
>> 44 FOR_ITER 52 ( to 94 )
46 STORE_FAST 3 ( i )

6 48 LOAD_FAST 2 ( q )
50 LOAD_CONST 1 ( 0 )
52 BINARY_SUBSCR
54 STORE_FAST 4 ( now )

7 56 LOAD_FAST 0 ( arr )
58 LOAD_FAST 3 ( i )
60 BINARY_SUBSCR
62 LOAD_CONST 3 ( 2 )
64 LOAD_FAST 4 ( now )
66 BINARY_MULTIPLY
68 COMPARE_OP 5 ( >= )
70 POP_JUMP_IF_FALSE 80

8 72 LOAD_FAST 2 ( q )
74 LOAD_METHOD 5 ( popleft )
76 CALL_METHOD 0
78 POP_TOP

9 >> 80 LOAD_FAST 2 ( q )
82 LOAD_METHOD 3 ( append )
84 LOAD_FAST 0 ( arr )
86 LOAD_FAST 3 ( i )
88 BINARY_SUBSCR
90 CALL_METHOD 1
92 POP_TOP
94 JUMP_ABSOLUTE 44
>> 96 POP_BLOCK

10 >> 98 LOAD_GLOBAL 6 ( len )
100 LOAD_FAST 2 ( q )
102 CALL_FUNCTION 1
104 RETURN_VALUE
