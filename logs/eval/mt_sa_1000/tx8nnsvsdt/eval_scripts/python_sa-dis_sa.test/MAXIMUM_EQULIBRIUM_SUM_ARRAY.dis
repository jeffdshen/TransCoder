{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport sys\n\ndef f_gold ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([3, 3, 9, 19, 22, 27, 32, 41, 45, 63, 66, 67, 81, 91],13,),\n    ([-64, -2, 68, -48, 22, -14, -98],4,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([86, 79, 23, 55, 4, 22, 37, 1, 72, 22, 82, 62, 96, 47],8,),\n    ([-96, -96, -96, -96, -92, -82, -72, -72, -62, -58, -52, -48, -44, -44, -40, -34, -28, -26, -26, 0, 0, 2, 4, 4, 12, 12, 18, 34, 36, 40, 48, 48, 54, 60, 66, 66, 72, 76, 78, 82, 82, 96, 98],33,),\n    ([0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0],38,),\n    ([2, 3, 7, 13, 20, 24, 39, 49, 53, 58, 72, 80, 90, 99],11,),\n    ([-48, 44, 60, -30, 8, 20, 70, -50, 80, -2, -28, -14],11,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],16,),\n    ([64, 13, 18, 3, 22, 29, 51, 45, 21, 13, 47, 15, 17, 34, 60, 99, 30, 54, 16, 47, 13, 49, 60, 66, 28, 57, 85, 66, 65, 7, 62, 29, 9],21,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findMaxSum ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res\n"}
Disassembly of <code object findMaxSum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( sys )
2 LOAD_ATTR 1 ( maxsize )
4 UNARY_NEGATIVE
6 LOAD_CONST 1 ( 1 )
8 BINARY_SUBTRACT
10 STORE_FAST 2 ( res )

3 12 SETUP_LOOP 78 ( to 92 )
14 LOAD_GLOBAL 2 ( range )
16 LOAD_FAST 1 ( n )
18 CALL_FUNCTION 1
20 GET_ITER
>> 22 FOR_ITER 62 ( to 90 )
24 STORE_FAST 3 ( i )

4 26 LOAD_FAST 0 ( arr )
28 LOAD_FAST 3 ( i )
30 BINARY_SUBSCR
32 STORE_FAST 4 ( prefix_sum )

5 34 SETUP_LOOP 28 ( to 62 )
36 LOAD_GLOBAL 2 ( range )
38 LOAD_FAST 3 ( i )
40 CALL_FUNCTION 1
42 GET_ITER
>> 44 FOR_ITER 20 ( to 60 )
46 STORE_FAST 5 ( j )

6 48 LOAD_FAST 4 ( prefix_sum )
50 LOAD_FAST 0 ( arr )
52 LOAD_FAST 5 ( j )
54 BINARY_SUBSCR
56 INPLACE_ADD
58 STORE_FAST 4 ( prefix_sum )
>> 60 JUMP_ABSOLUTE 22
>> 62 POP_BLOCK

7 64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 3 ( i )
68 BINARY_SUBSCR
70 STORE_FAST 6 ( j )

8 72 LOAD_FAST 1 ( n )
74 LOAD_CONST 1 ( 1 )
76 BINARY_SUBTRACT
78 STORE_FAST 5 ( j )

9 80 SETUP_LOOP 34 ( to 106 )
>> 82 LOAD_FAST 5 ( j )
84 LOAD_FAST 3 ( i )
86 COMPARE_OP 4 ( > )
88 POP_JUMP_IF_FALSE 104

10 90 LOAD_FAST 4 ( suffix_sum )
92 LOAD_FAST 0 ( arr )
94 LOAD_FAST 5 ( j )
96 BINARY_SUBSCR
98 INPLACE_ADD
100 STORE_FAST 4 ( suffix_sum )

11 102 LOAD_FAST 5 ( j )
104 LOAD_CONST 1 ( 1 )
106 INPLACE_SUBTRACT
108 STORE_FAST 5 ( j )
110 JUMP_ABSOLUTE 82
>> 112 POP_BLOCK

12 >> 114 LOAD_FAST 4 ( prefix_sum )
116 LOAD_FAST 4 ( suffix_sum )
118 COMPARE_OP 2 ( == )
120 POP_JUMP_IF_FALSE 138

13 122 LOAD_GLOBAL 3 ( max )
124 LOAD_FAST 2 ( res )
126 LOAD_FAST 4 ( prefix_sum )
128 CALL_FUNCTION 2
130 STORE_FAST 2 ( res )
132 JUMP_ABSOLUTE 82
>> 134 POP_BLOCK

14 >> 136 LOAD_FAST 2 ( res )
138 RETURN_VALUE
