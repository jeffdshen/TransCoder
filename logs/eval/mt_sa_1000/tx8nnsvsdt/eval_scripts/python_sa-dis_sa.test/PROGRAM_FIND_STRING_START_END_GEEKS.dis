{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str , corner ) :\n    n = len ( str )\n    cl = len ( corner )\n    if ( n < cl ) :\n        return False\n    return ( ( str [ : cl ] == corner ) and ( str [ n - cl : ] == corner ) )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('geeksmanishgeeks','geeks',),\n    ('shreyadhatwalia','abc',),\n    ('10000100','100',),\n    ('abaa','a',),\n    ('30645530','30',),\n    ('0000011011001','001',),\n    ('dkqEd','d',),\n    ('48694119324654','654',),\n    ('1101010010','11',),\n    ('Ks','KsFLmngGGOmHKs',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isCornerPresent ( str , corner ) :\n    n = len ( str )\n    cl = len ( corner )\n    if ( n < cl ) :\n        return False\n    return ( ( str [ : cl ] == corner ) and ( str [ n - cl : ] == corner ) )\n"}
Disassembly of <code object isCornerPresent at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str )
4 CALL_FUNCTION 1
6 STORE_FAST 2 ( n )

3 8 LOAD_GLOBAL 0 ( len )
10 LOAD_FAST 1 ( corner )
12 CALL_FUNCTION 1
14 STORE_FAST 3 ( cl )

4 16 LOAD_FAST 2 ( n )
18 LOAD_FAST 3 ( cl )
20 COMPARE_OP 0 ( < )
22 POP_JUMP_IF_FALSE 28

5 24 LOAD_CONST 1 ( False )
26 RETURN_VALUE

6 >> 28 LOAD_FAST 0 ( str )
30 LOAD_CONST 0 ( None )
32 LOAD_FAST 3 ( cl )
34 BUILD_SLICE 2
36 BINARY_SUBSCR
38 LOAD_GLOBAL 1 ( corner )
40 COMPARE_OP 2 ( == )
42 JUMP_IF_FALSE_OR_POP 52
44 LOAD_FAST 0 ( str )
46 LOAD_FAST 2 ( n )
48 LOAD_FAST 3 ( cl )
50 BINARY_SUBTRACT
>> 52 BINARY_SUBSCR
54 LOAD_GLOBAL 1 ( corner )
56 COMPARE_OP 2 ( == )
58 JUMP_IF_FALSE_OR_POP 68
60 LOAD_GLOBAL 0 ( len )
62 LOAD_FAST 2 ( n )
64 LOAD_FAST 3 ( cl )
66 BINARY_SUBTRACT
>> 68 LOAD_CONST 2 ( 1 )
70 LOAD_FAST 3 ( cl )
72 BINARY_SUBTRACT
74 LOAD_CONST 0 ( None )
76 BUILD_SLICE 2
78 BINARY_SUBSCR
80 LOAD_GLOBAL 1 ( corner )
82 COMPARE_OP 2 ( == )
84 JUMP_IF_FALSE_OR_POP 96
86 LOAD_GLOBAL 2 ( AssertionError )
88 RAISE_VARARGS 1
90 LOAD_CONST 0 ( None )
92 RETURN_VALUE
