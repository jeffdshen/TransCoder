{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    result = 0\n    for i in range ( len ( str ) ) :\n        if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i == ord ( str [ i ] ) - ord ( 'A' ) ) ) :\n            result += 1\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('lLkhFeZGcb',),\n    ('ABcED',),\n    ('geeksforgeeks',),\n    ('Alphabetical',),\n    ('abababab',),\n    ('bcdefgxyz',),\n    ('cBzaqx L',),\n    (' bcd',),\n    ('11',),\n    ('MqqKY',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findCount ( str ) :\n    result = 0\n    for i in range ( len ( str ) ) :\n        if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i == ord ( str [ i ] ) - ord ( 'A' ) ) ) :\n            result += 1\n    return result\n"}
Disassembly of <code object findCount at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( result )

3 4 SETUP_LOOP 74 ( to 80 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_GLOBAL 1 ( len )
10 LOAD_FAST 0 ( str )
12 CALL_FUNCTION 1
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 58 ( to 78 )
20 STORE_FAST 2 ( i )

4 22 LOAD_FAST 2 ( i )
24 LOAD_GLOBAL 2 ( ord )
26 LOAD_FAST 0 ( str )
28 LOAD_FAST 2 ( i )
30 BINARY_SUBSCR
32 CALL_FUNCTION 1
34 LOAD_GLOBAL 2 ( ord )
36 LOAD_CONST 2 ( 'a' )
38 CALL_FUNCTION 1
40 BINARY_SUBTRACT
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_TRUE 18
46 LOAD_FAST 2 ( i )
48 LOAD_GLOBAL 2 ( ord )
50 LOAD_FAST 0 ( str )
52 LOAD_FAST 2 ( i )
54 BINARY_SUBSCR
56 CALL_FUNCTION 1
58 LOAD_GLOBAL 2 ( ord )
60 LOAD_CONST 3 ( 'A' )
62 CALL_FUNCTION 1
64 BINARY_SUBTRACT
66 COMPARE_OP 2 ( == )
68 POP_JUMP_IF_FALSE 18

5 70 LOAD_FAST 1 ( result )
72 LOAD_CONST 4 ( 1 )
74 INPLACE_ADD
76 STORE_FAST 1 ( result )
78 JUMP_ABSOLUTE 18
>> 80 POP_BLOCK

6 >> 82 LOAD_FAST 1 ( result )
84 RETURN_VALUE
