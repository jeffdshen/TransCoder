{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n , k ) :\n    res = \"\"\n    for i in range ( k ) :\n        res = res + chr ( ord ( 'a' ) + i )\n    count = 0\n    for i in range ( n - k ) :\n        res = res + chr ( ord ( 'a' ) + count )\n        count += 1\n        if ( count == k ) :\n            count = 0 ;\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (60,71,),\n    (56,17,),\n    (16,16,),\n    (42,60,),\n    (55,56,),\n    (64,59,),\n    (68,24,),\n    (88,2,),\n    (64,94,),\n    (42,79,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findString ( n , k ) :\n    res = \"\"\n    for i in range ( k ) :\n        res = res + chr ( ord ( 'a' ) + i )\n    count = 0\n    for i in range ( n - k ) :\n        res = res + chr ( ord ( 'a' ) + count )\n        count += 1\n        if ( count == k ) :\n            count = 0 ;\n    return res\n"}
Disassembly of <code object findString at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( '' )
2 STORE_FAST 2 ( res )

3 4 SETUP_LOOP 38 ( to 44 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_FAST 1 ( k )
10 CALL_FUNCTION 1
12 GET_ITER
>> 14 FOR_ITER 26 ( to 42 )
16 STORE_FAST 3 ( i )

4 18 LOAD_FAST 2 ( res )
20 LOAD_GLOBAL 1 ( chr )
22 LOAD_GLOBAL 2 ( ord )
24 LOAD_CONST 2 ( 'a' )
26 CALL_FUNCTION 1
28 LOAD_FAST 3 ( i )
30 BINARY_ADD
32 CALL_FUNCTION 1
34 BINARY_ADD
36 STORE_FAST 2 ( res )
38 JUMP_ABSOLUTE 14
40 POP_BLOCK
>> 42 LOAD_CONST 0 ( None )
>> 44 STORE_FAST 4 ( count )

5 46 SETUP_LOOP 76 ( to 124 )
48 LOAD_GLOBAL 0 ( range )
50 LOAD_FAST 0 ( n )
52 LOAD_FAST 1 ( k )
54 BINARY_SUBTRACT
56 CALL_FUNCTION 1
58 GET_ITER
>> 60 FOR_ITER 58 ( to 122 )
62 STORE_FAST 3 ( i )

6 64 LOAD_FAST 2 ( res )
66 LOAD_GLOBAL 1 ( chr )
68 LOAD_GLOBAL 2 ( ord )
70 LOAD_CONST 2 ( 'a' )
72 CALL_FUNCTION 1
74 LOAD_FAST 4 ( count )
76 BINARY_ADD
78 CALL_FUNCTION 1
80 BINARY_ADD
82 STORE_FAST 2 ( res )

7 84 LOAD_FAST 4 ( count )
86 LOAD_CONST 3 ( 1 )
88 INPLACE_ADD
90 STORE_FAST 4 ( count )

8 92 LOAD_FAST 4 ( count )
94 LOAD_FAST 1 ( k )
96 COMPARE_OP 2 ( == )
98 POP_JUMP_IF_FALSE 112

9 100 LOAD_CONST 4 ( 0 )
102 STORE_FAST 4 ( count )
104 JUMP_ABSOLUTE 60
>> 106 POP_BLOCK

10 >> 108 LOAD_FAST 2 ( res )
110 RETURN_VALUE
