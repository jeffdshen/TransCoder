{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    arr.sort ( )\n    a = 0 ; b = 0\n    for i in range ( n ) :\n        if ( i % 2 != 0 ) :\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n    return a + b\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([3, 4, 5, 10, 14, 16, 18, 42, 43, 43, 45, 46, 51, 52, 53, 58, 61, 66, 79, 81, 82, 84],19,),\n    ([48, -22, 60, 32, 48, -2, -76, -50, -26, 56, -86, 98, -30, -22, 82, -20, 58, 40, 76, -2, 82, -90, 8, -46, 22, 94],25,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],23,),\n    ([79, 45],1,),\n    ([-90, -68, -38, -34, -4, 6, 10, 28, 48, 52, 54, 68, 88, 90],11,),\n    ([1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0],22,),\n    ([4, 8, 8, 23, 26, 27, 30, 42, 44, 55, 59, 64, 67, 69, 74, 77, 82, 82, 87, 96, 97],17,),\n    ([0, -18, -98, -36, -62, 0, -32, -98, 46, 72, -18, 30, -86, -42, -82, 2, -76, -64, -66, -48, -28, 52, -46, -76, 76, 10, 70, 4, 18, 94, 88, 80, -60, -36, 62, 96, -4, 88, 50],32,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 1, 1],6,),\n    ([8, 71, 75, 58, 97, 24, 56, 98, 71, 69, 32, 64, 54, 96, 69, 22, 7, 47, 45, 68, 17, 36, 90, 9, 71, 86, 16, 61, 53, 63, 9, 74, 38, 87, 14, 86, 42, 42, 14, 43, 58, 82, 72, 73, 32],25,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0 ; b = 0\n    for i in range ( n ) :\n        if ( i % 2 != 0 ) :\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n    return a + b\n"}
Disassembly of <code object solve at 0x7f2b0164d270, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 LOAD_CONST 1 ( 0 )
10 STORE_FAST 2 ( a )

4 12 LOAD_CONST 1 ( 0 )
14 STORE_FAST 3 ( b )

5 16 SETUP_LOOP 62 ( to 82 )
18 LOAD_GLOBAL 1 ( range )
20 LOAD_FAST 1 ( n )
22 CALL_FUNCTION 1
24 GET_ITER
>> 26 FOR_ITER 50 ( to 80 )
28 STORE_FAST 4 ( i )

6 30 LOAD_FAST 4 ( i )
32 LOAD_CONST 2 ( 2 )
34 BINARY_MODULO
36 LOAD_CONST 1 ( 0 )
38 COMPARE_OP 3 ( != )
40 POP_JUMP_IF_FALSE 68

7 42 LOAD_FAST 2 ( a )
44 LOAD_CONST 3 ( 10 )
46 BINARY_MULTIPLY
48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 4 ( i )
52 BINARY_SUBSCR
54 BINARY_ADD
56 STORE_FAST 2 ( a )
58 JUMP_ABSOLUTE 26

9 >> 60 LOAD_FAST 3 ( b )
62 LOAD_CONST 3 ( 10 )
64 BINARY_MULTIPLY
66 LOAD_FAST 0 ( arr )
68 LOAD_FAST 4 ( i )
70 BINARY_SUBSCR
72 BINARY_ADD
74 STORE_FAST 3 ( b )
76 JUMP_ABSOLUTE 26
78 POP_BLOCK

10 >> 80 LOAD_FAST 2 ( a )
82 LOAD_FAST 3 ( b )
84 BINARY_ADD
86 RETURN_VALUE
