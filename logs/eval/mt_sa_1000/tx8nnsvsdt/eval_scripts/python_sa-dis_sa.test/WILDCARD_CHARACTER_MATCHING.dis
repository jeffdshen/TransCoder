{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( first , second ) :\n    if len ( first ) == 0 and len ( second ) == 0 :\n        return True\n    if len ( first ) > 1 and first [ 0 ] == '*' and len ( second ) == 0 :\n        return False\n    if ( len ( first ) > 1 and first [ 0 ] == '?' ) or ( len ( first ) != 0 and len ( second ) != 0 and first [ 0 ] == second [ 0 ] ) :\n        return f_gold ( first [ 1 : ] , second [ 1 : ] ) ;\n    if len ( first ) != 0 and first [ 0 ] == '*' :\n        return f_gold ( first [ 1 : ] , second ) or f_gold ( first , second [ 1 : ] )\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('g*ks','geeks',),\n    ('ge?ks*','geeksforgeeks',),\n    ('g*k','gee',),\n    ('*pqrs','pqrst',),\n    ('abc*bcd','abcdhghgbcd',),\n    ('abc*c?d','abcd',),\n    ('*c*d','abcd',),\n    ('*?c*d','abcd',),\n    ('?*1','010111111001',),\n    ('a*','CBzHMjUGCUJD',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def match ( first , second ) :\n    if len ( first ) == 0 and len ( second ) == 0 :\n        return True\n    if len ( first ) > 1 and first [ 0 ] == '*' and len ( second ) == 0 :\n        return False\n    if ( len ( first ) > 1 and first [ 0 ] == '?' ) or ( len ( first ) != 0 and len ( second ) != 0 and first [ 0 ] == second [ 0 ] ) :\n        return match ( first [ 1 : ] , second [ 1 : ] ) ;\n    if len ( first ) != 0 and first [ 0 ] == '*' :\n        return match ( first [ 1 : ] , second ) or match ( first , second [ 1 : ] )\n    return False\n"}
Disassembly of <code object match at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( first )
4 CALL_FUNCTION 1
6 LOAD_CONST 1 ( 0 )
8 COMPARE_OP 2 ( == )
10 POP_JUMP_IF_FALSE 28
12 LOAD_GLOBAL 0 ( len )
14 LOAD_FAST 1 ( second )
16 CALL_FUNCTION 1
18 LOAD_CONST 1 ( 0 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

3 24 LOAD_CONST 2 ( True )
26 RETURN_VALUE

4 >> 28 LOAD_GLOBAL 0 ( len )
30 LOAD_FAST 0 ( first )
32 CALL_FUNCTION 1
34 LOAD_CONST 3 ( 1 )
36 COMPARE_OP 4 ( > )
38 POP_JUMP_IF_FALSE 60
40 LOAD_FAST 0 ( first )
42 LOAD_CONST 1 ( 0 )
44 BINARY_SUBSCR
46 LOAD_CONST 4 ( '*' )
48 COMPARE_OP 2 ( == )
50 POP_JUMP_IF_FALSE 60
52 LOAD_GLOBAL 0 ( len )
54 LOAD_FAST 1 ( second )
56 CALL_FUNCTION 1
58 LOAD_CONST 1 ( 0 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 68

5 64 LOAD_CONST 5 ( False )
66 RETURN_VALUE

6 >> 68 LOAD_GLOBAL 0 ( len )
70 LOAD_FAST 0 ( first )
72 CALL_FUNCTION 1
74 LOAD_CONST 3 ( 1 )
76 COMPARE_OP 4 ( > )
78 POP_JUMP_IF_FALSE 116
80 LOAD_FAST 0 ( first )
82 LOAD_CONST 1 ( 0 )
84 BINARY_SUBSCR
86 LOAD_CONST 6 ( '?' )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_TRUE 116
92 LOAD_GLOBAL 0 ( len )
94 LOAD_FAST 0 ( first )
96 CALL_FUNCTION 1
98 LOAD_CONST 1 ( 0 )
100 COMPARE_OP 3 ( != )
102 POP_JUMP_IF_FALSE 116
104 LOAD_GLOBAL 0 ( len )
106 LOAD_FAST 1 ( second )
108 CALL_FUNCTION 1
110 LOAD_CONST 1 ( 0 )
112 COMPARE_OP 3 ( != )
114 POP_JUMP_IF_FALSE 116

7 >> 116 LOAD_GLOBAL 1 ( match )
118 LOAD_FAST 0 ( first )
120 LOAD_CONST 3 ( 1 )
122 LOAD_CONST 0 ( None )
124 BUILD_SLICE 2
126 BINARY_SUBSCR
128 LOAD_FAST 1 ( second )
130 LOAD_CONST 1 ( 0 )
132 BINARY_SUBSCR
134 COMPARE_OP 2 ( == )
136 POP_JUMP_IF_FALSE 152

8 138 LOAD_GLOBAL 1 ( match )
140 LOAD_FAST 0 ( first )
142 LOAD_CONST 3 ( 1 )
144 LOAD_CONST 0 ( None )
146 BUILD_SLICE 2
148 BINARY_SUBSCR
150 LOAD_FAST 1 ( second )
152 LOAD_CONST 3 ( 1 )
154 LOAD_CONST 0 ( None )
156 BUILD_SLICE 2
158 BINARY_SUBSCR
160 CALL_FUNCTION 2
162 RETURN_VALUE

9 >> 164 LOAD_GLOBAL 0 ( len )
166 LOAD_FAST 0 ( first )
168 CALL_FUNCTION 1
170 LOAD_CONST 1 ( 0 )
172 COMPARE_OP 4 ( > )
174 POP_JUMP_IF_FALSE 192
176 LOAD_FAST 0 ( first )
178 LOAD_CONST 1 ( 0 )
180 BINARY_SUBSCR
182 LOAD_FAST 1 ( second )
184 CALL_FUNCTION 2
186 JUMP_IF_TRUE_OR_POP 192

10 >> 188 LOAD_GLOBAL 1 ( match )
190 LOAD_FAST 0 ( first )
192 LOAD_FAST 1 ( second )
194 LOAD_CONST 3 ( 1 )
196 LOAD_CONST 0 ( None )
198 BUILD_SLICE 2
200 BINARY_SUBSCR
202 LOAD_FAST 1 ( second )
204 CALL_FUNCTION 2
206 JUMP_IF_TRUE_OR_POP 192
208 LOAD_GLOBAL 1 ( match )
210 LOAD_FAST 0 ( first )
212 LOAD_FAST 1 ( second )
214 LOAD_CONST 3 ( 1 )
216 LOAD_CONST 0 ( None )
218 BUILD_SLICE 2
220 BINARY_SUBSCR
222 CALL_FUNCTION 2
224 RETURN_VALUE

11 >> 226 LOAD_CONST 5 ( False )
228 RETURN_VALUE
