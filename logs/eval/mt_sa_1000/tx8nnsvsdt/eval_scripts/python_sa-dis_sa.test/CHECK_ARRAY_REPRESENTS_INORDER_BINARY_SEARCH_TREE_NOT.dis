{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    if ( n == 0 or n == 1 ) :\n        return True\n    for i in range ( 1 , n , 1 ) :\n        if ( arr [ i - 1 ] > arr [ i ] ) :\n            return False\n    return True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 4, 10, 11, 13, 17, 19, 23, 26, 28, 29, 30, 34, 35, 37, 38, 38, 43, 49, 49, 50, 52, 53, 55, 55, 57, 58, 58, 59, 64, 66, 67, 70, 72, 72, 75, 77, 77, 87, 89, 89, 90, 91, 98, 99, 99, 99],46,),\n    ([56, -94, -26, -52, 58, -66, -52, -66, -94, 44, 38, -66, 70, -70, -80, -78, -72, -60, -76, 68, -50, 32, -16, 84, 74, -42, 98, -8, 72, 26, 24, 6, 24, 86, 86, 78, -92, 80, 32, -74, 26, 50, 92, 4, 2, -34, -2, -18, -10],30,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],13,),\n    ([38, 79, 76, 92, 92],2,),\n    ([-42, -28, 2, 32, 50, 56, 86, 96, 98],7,),\n    ([1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],11,),\n    ([1, 9, 12, 21, 21, 24, 34, 55, 60, 63, 67, 68, 88, 89, 91, 94, 98, 99],9,),\n    ([-96, 96, -98, -42, -74, 40, 42, 50, -46, -52, 8, -46, 48, 88, -78, -72, -10, -20, 98, -40, -18, 36, 4, 46, 52, 28, -88, -28, -28, -86],29,),\n    ([0, 0, 0, 0, 1, 1],3,),\n    ([66, 12, 48, 82, 33, 77, 99, 98, 14, 92],7,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isInorder ( arr , n ) :\n    if ( n == 0 or n == 1 ) :\n        return True\n    for i in range ( 1 , n , 1 ) :\n        if ( arr [ i - 1 ] > arr [ i ] ) :\n            return False\n    return True\n"}
Disassembly of <code object isInorder at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_TRUE 16
8 LOAD_FAST 1 ( n )
10 LOAD_CONST 2 ( 1 )
12 COMPARE_OP 2 ( == )
14 POP_JUMP_IF_FALSE 20

3 >> 16 LOAD_CONST 3 ( True )
18 RETURN_VALUE

4 >> 20 SETUP_LOOP 48 ( to 68 )
22 LOAD_GLOBAL 0 ( range )
24 LOAD_CONST 2 ( 1 )
26 LOAD_FAST 1 ( n )
28 LOAD_CONST 2 ( 1 )
30 CALL_FUNCTION 3
32 GET_ITER
>> 34 FOR_ITER 30 ( to 66 )
36 STORE_FAST 2 ( i )

5 38 LOAD_FAST 0 ( arr )
40 LOAD_FAST 2 ( i )
42 LOAD_CONST 2 ( 1 )
44 BINARY_SUBTRACT
46 BINARY_SUBSCR
48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 2 ( i )
52 BINARY_SUBSCR
54 COMPARE_OP 4 ( > )
56 POP_JUMP_IF_FALSE 34

6 58 LOAD_CONST 4 ( False )
60 RETURN_VALUE
64 JUMP_ABSOLUTE 34
>> 66 POP_BLOCK

7 >> 68 LOAD_CONST 3 ( True )
70 RETURN_VALUE
