{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , b ) :\n    if ( a == b ) :\n        return a\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    if ( ( ~ a & 1 ) == 1 ) :\n        if ( ( b & 1 ) == 1 ) :\n            return f_gold ( a >> 1 , b )\n        else :\n            return ( f_gold ( a >> 1 , b >> 1 ) << 1 )\n    if ( ( ~ b & 1 ) == 1 ) :\n        return f_gold ( a , b >> 1 )\n    if ( a > b ) :\n        return f_gold ( ( a - b ) >> 1 , b )\n    return f_gold ( ( b - a ) >> 1 , a )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (52,29,),\n    (36,94,),\n    (12,6,),\n    (69,7,),\n    (45,11,),\n    (7,51,),\n    (45,55,),\n    (62,86,),\n    (96,63,),\n    (89,12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def gcd ( a , b ) :\n    if ( a == b ) :\n        return a\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    if ( ( ~ a & 1 ) == 1 ) :\n        if ( ( b & 1 ) == 1 ) :\n            return gcd ( a >> 1 , b )\n        else :\n            return ( gcd ( a >> 1 , b >> 1 ) << 1 )\n    if ( ( ~ b & 1 ) == 1 ) :\n        return gcd ( a , b >> 1 )\n    if ( a > b ) :\n        return gcd ( ( a - b ) >> 1 , b )\n    return gcd ( ( b - a ) >> 1 , a )\n"}
Disassembly of <code object gcd at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( a )
2 LOAD_FAST 1 ( b )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_FAST 0 ( a )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 0 ( a )
14 LOAD_CONST 1 ( 0 )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 24

5 20 LOAD_FAST 1 ( b )
22 RETURN_VALUE

6 >> 24 LOAD_FAST 1 ( b )
26 LOAD_CONST 1 ( 0 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 36

7 32 LOAD_FAST 0 ( a )
34 RETURN_VALUE

8 >> 36 LOAD_FAST 0 ( a )
38 RETURN_VALUE

9 40 LOAD_FAST 0 ( a )
42 LOAD_CONST 2 ( 1 )
44 BINARY_AND
46 LOAD_CONST 2 ( 1 )
48 COMPARE_OP 2 ( == )
50 POP_JUMP_IF_FALSE 74

10 52 LOAD_FAST 1 ( b )
54 LOAD_CONST 2 ( 1 )
56 BINARY_AND
58 LOAD_CONST 2 ( 1 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 74

11 64 LOAD_GLOBAL 0 ( gcd )
66 LOAD_FAST 0 ( a )
68 LOAD_CONST 2 ( 1 )
70 BINARY_RSHIFT
72 LOAD_CONST 2 ( 1 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 82

12 78 LOAD_GLOBAL 0 ( gcd )
80 LOAD_FAST 0 ( a )
82 LOAD_CONST 2 ( 1 )
84 BINARY_RSHIFT
86 LOAD_CONST 2 ( 1 )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_FALSE 106

13 92 LOAD_GLOBAL 0 ( gcd )
94 LOAD_FAST 0 ( a )
96 LOAD_CONST 2 ( 1 )
98 BINARY_RSHIFT
100 LOAD_FAST 1 ( b )
102 BUILD_TUPLE 2
104 RETURN_VALUE

15 >> 106 LOAD_GLOBAL 0 ( gcd )
108 LOAD_FAST 0 ( a )
110 LOAD_CONST 2 ( 1 )
112 BINARY_RSHIFT
114 LOAD_FAST 1 ( b )
116 LOAD_CONST 2 ( 1 )
118 BINARY_RSHIFT
120 CALL_FUNCTION 2
122 RETURN_VALUE
124 LOAD_CONST 0 ( None )
126 RETURN_VALUE
