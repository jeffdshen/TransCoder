{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in mp.keys ( ) :\n            mp [ arr [ i ] ] += 1\n        else :\n            mp [ arr [ i ] ] = 1\n    ans = 0\n    for it in mp :\n        count = mp [ it ]\n        ans += ( count * ( count - 1 ) ) // 2\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([5, 11, 18, 22, 40, 46, 50, 51, 53, 55, 64, 67, 73, 78, 86],14,),\n    ([14, -98, 98, 58, -82, 90, -80, -56, -30, -36, -56, -30, -58, 68, 72, -76, 38, -90, -72, 4, -32, 32, -28, 2, 12, -72, 54, 2, 0, -74, 8, 12, 46, 72, -84, -66, 70, 18, 26, 72, -26, 44, -8, 20, -32, -56, 28],24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],13,),\n    ([93, 23, 62, 64, 31, 78, 99],4,),\n    ([-94, -94, -92, -86, -84, -76, -76, -68, -66, -56, -56, -54, -50, -46, -38, -34, -34, -30, -26, -18, -16, 2, 8, 42, 52, 54, 56, 64, 68, 82, 82, 82, 94, 96, 98],19,),\n    ([0],0,),\n    ([3, 18, 18, 20, 21, 23, 24, 27, 35, 36, 38, 40, 46, 50, 50, 51, 52, 53, 59, 61, 63, 63, 65, 66, 68, 68, 70, 71, 74, 75, 96, 98],19,),\n    ([-68, 40, 16, 50, 36, 42, -20, -46, -92, 4, -18, -12, 48, 0, -46, 64, -74, -50, 42, 44, -56, 28, -10, 78, 62, 70, -60, 12, -44, -78],23,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],30,),\n    ([31, 5],1,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countPairs ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in mp.keys ( ) :\n            mp [ arr [ i ] ] += 1\n        else :\n            mp [ arr [ i ] ] = 1\n    ans = 0\n    for it in mp :\n        count = mp [ it ]\n        ans += ( count * ( count - 1 ) ) // 2\n    return ans\n"}
Disassembly of <code object countPairs at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( dict )
2 CALL_FUNCTION 0
4 STORE_FAST 2 ( mp )

3 6 SETUP_LOOP 60 ( to 68 )
8 LOAD_GLOBAL 1 ( range )
10 LOAD_FAST 1 ( n )
12 CALL_FUNCTION 1
14 GET_ITER
>> 16 FOR_ITER 52 ( to 66 )
18 STORE_FAST 3 ( i )

4 20 LOAD_FAST 0 ( arr )
22 LOAD_FAST 3 ( i )
24 BINARY_SUBSCR
26 LOAD_FAST 2 ( mp )
28 LOAD_METHOD 2 ( keys )
30 CALL_METHOD 0
32 COMPARE_OP 6 ( in )
34 POP_JUMP_IF_FALSE 58

5 36 LOAD_FAST 2 ( mp )
38 LOAD_FAST 0 ( arr )
40 LOAD_FAST 3 ( i )
42 BINARY_SUBSCR
44 DUP_TOP_TWO
46 BINARY_SUBSCR
48 LOAD_CONST 1 ( 1 )
50 INPLACE_ADD
52 ROT_THREE
54 STORE_SUBSCR
56 JUMP_ABSOLUTE 16

7 >> 58 LOAD_CONST 1 ( 1 )
60 LOAD_FAST 2 ( mp )
62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 3 ( i )
66 BINARY_SUBSCR
68 STORE_SUBSCR
70 JUMP_ABSOLUTE 16
>> 72 POP_BLOCK

8 >> 74 LOAD_CONST 2 ( 0 )
76 STORE_FAST 4 ( ans )

9 78 SETUP_LOOP 46 ( to 124 )
80 LOAD_FAST 2 ( mp )
82 GET_ITER
>> 84 FOR_ITER 38 ( to 122 )
86 STORE_FAST 5 ( it )

10 88 LOAD_FAST 2 ( mp )
90 LOAD_FAST 5 ( it )
92 BINARY_SUBSCR
94 STORE_FAST 6 ( count )

11 96 LOAD_FAST 4 ( ans )
98 LOAD_FAST 6 ( count )
100 LOAD_FAST 6 ( count )
102 LOAD_CONST 1 ( 1 )
104 BINARY_SUBTRACT
106 BINARY_MULTIPLY
108 BINARY_MULTIPLY
110 LOAD_CONST 3 ( 2 )
112 BINARY_FLOOR_DIVIDE
114 INPLACE_ADD
116 STORE_FAST 4 ( ans )
118 JUMP_ABSOLUTE 84
120 POP_BLOCK
>> 122 LOAD_CONST 0 ( None )
>> 124 RETURN_VALUE
