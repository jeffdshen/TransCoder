{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([5, 6, 8, 15, 42, 47, 49, 52, 53, 54, 55, 58, 58, 60, 60, 68, 70, 86, 94, 96, 97, 99],18,),\n    ([-87, 14, 24, 6, 58, 47, 45, 20, -37, -81, -8, -42, 83, -10, 17, -38],14,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],4,),\n    ([1, 16, 61, 64, 63, 69, 22, 93, 67, 76, 26, 16, 51, 86, 57, 29, 78, 92, 69, 47, 94, 62, 69, 76, 16, 90, 90, 48, 85, 39, 33, 94, 23, 10, 69, 34, 52, 95, 10, 19],20,),\n    ([-98, -96, -84, -76, -20],2,),\n    ([1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],15,),\n    ([7, 8, 10, 12, 21, 23, 24, 24, 26, 29, 34, 36, 36, 36, 37, 49, 55, 58, 62, 64, 68, 73, 74, 75, 81, 82, 87, 89, 90, 90, 93, 96, 96, 99, 99],29,),\n    ([-1, 5, -70, -83, 13, -38, -16, 12, -14, 41, 87, -81, 77, 0, 40, 89, 47, -24, -91, 99, -72, 28, -48],13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,),\n    ([29, 37, 38, 83, 8],2,)\n        ]\n    filled_function_param = [\n    ([5, 6, 8, 15, 42, 47, 49, 52, 53, 54, 55, 58, 58, 60, 60, 68, 70, 86, 94, 96, 97, 99],18,),\n    ([-87, 14, 24, 6, 58, 47, 45, 20, -37, -81, -8, -42, 83, -10, 17, -38],14,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],4,),\n    ([1, 16, 61, 64, 63, 69, 22, 93, 67, 76, 26, 16, 51, 86, 57, 29, 78, 92, 69, 47, 94, 62, 69, 76, 16, 90, 90, 48, 85, 39, 33, 94, 23, 10, 69, 34, 52, 95, 10, 19],20,),\n    ([-98, -96, -84, -76, -20],2,),\n    ([1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],15,),\n    ([7, 8, 10, 12, 21, 23, 24, 24, 26, 29, 34, 36, 36, 36, 37, 49, 55, 58, 62, 64, 68, 73, 74, 75, 81, 82, 87, 89, 90, 90, 93, 96, 96, 99, 99],29,),\n    ([-1, 5, -70, -83, 13, -38, -16, 12, -14, 41, 87, -81, 77, 0, 40, 89, 47, -24, -91, 99, -72, 28, -48],13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,),\n    ([29, 37, 38, 83, 8],2,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sort012 ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1\n"}
Disassembly of <code object sort012 at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( lo )

3 4 LOAD_FAST 1 ( arr_size )
6 LOAD_CONST 2 ( 1 )
8 BINARY_SUBTRACT
10 STORE_FAST 3 ( hi )

4 12 LOAD_CONST 1 ( 0 )
14 STORE_FAST 4 ( mid )

5 16 SETUP_LOOP 92 ( to 118 )
>> 18 LOAD_FAST 4 ( mid )
20 LOAD_FAST 3 ( hi )
22 COMPARE_OP 1 ( <= )
24 POP_JUMP_IF_FALSE 116

6 26 LOAD_FAST 0 ( a )
28 LOAD_FAST 4 ( mid )
30 BINARY_SUBSCR
32 LOAD_CONST 1 ( 0 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 86

7 38 LOAD_FAST 0 ( a )
40 LOAD_FAST 4 ( mid )
42 BINARY_SUBSCR
44 LOAD_FAST 0 ( a )
46 LOAD_FAST 4 ( mid )
48 STORE_SUBSCR

8 50 LOAD_FAST 2 ( lo )
52 LOAD_CONST 2 ( 1 )
54 BINARY_ADD
56 STORE_FAST 4 ( mid )

9 58 LOAD_FAST 4 ( mid )
60 LOAD_CONST 2 ( 1 )
62 BINARY_ADD
64 STORE_FAST 4 ( mid )
66 JUMP_ABSOLUTE 18
68 POP_BLOCK

10 >> 70 LOAD_FAST 0 ( a )
72 LOAD_FAST 4 ( mid )
74 BINARY_SUBSCR
76 LOAD_CONST 2 ( 1 )
78 COMPARE_OP 2 ( == )
80 POP_JUMP_IF_FALSE 90

11 82 LOAD_FAST 4 ( mid )
84 LOAD_CONST 2 ( 1 )
86 BINARY_ADD
88 STORE_FAST 4 ( mid )
>> 90 JUMP_FORWARD 44 ( to 124 )

13 >> 92 LOAD_FAST 0 ( a )
94 LOAD_FAST 4 ( mid )
96 BINARY_SUBSCR
98 LOAD_CONST 2 ( 1 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 116

14 104 LOAD_FAST 4 ( mid )
106 LOAD_CONST 2 ( 1 )
108 BINARY_ADD
110 STORE_FAST 4 ( mid )
112 JUMP_FORWARD 18 ( to 124 )

16 >> 114 LOAD_FAST 0 ( a )
116 LOAD_FAST 3 ( hi )
118 BINARY_SUBSCR
120 LOAD_FAST 0 ( a )
122 LOAD_FAST 4 ( mid )
124 BINARY_SUBSCR
126 ROT_TWO
128 LOAD_FAST 0 ( a )
130 LOAD_FAST 4 ( mid )
132 STORE_SUBSCR
134 LOAD_FAST 0 ( a )
136 LOAD_FAST 4 ( mid )
138 BINARY_SUBSCR
140 ROT_TWO
142 LOAD_FAST 0 ( a )
144 LOAD_FAST 4 ( mid )
146 STORE_SUBSCR

17 148 LOAD_FAST 3 ( hi )
150 LOAD_CONST 2 ( 1 )
152 BINARY_SUBTRACT
154 STORE_FAST 3 ( hi )
>> 156 LOAD_CONST 0 ( None )
158 RETURN_VALUE
