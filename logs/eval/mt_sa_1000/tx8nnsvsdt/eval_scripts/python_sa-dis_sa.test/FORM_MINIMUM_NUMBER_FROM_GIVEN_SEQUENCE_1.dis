{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) :\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    count = 1\n    for i in range ( n + 1 ) :\n        if ( i == n or seq [ i ] == 'I' ) :\n            for j in range ( i - 1 , - 2 , - 1 ) :\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('D',),\n    ('I',),\n    ('DD',),\n    ('II',),\n    ('DIDI',),\n    ('IIDDD',),\n    ('DDIDDIID',),\n    ('176297',),\n    ('1',),\n    ('XHkhZq',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) :\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    count = 1\n    for i in range ( n + 1 ) :\n        if ( i == n or seq [ i ] == 'I' ) :\n            for j in range ( i - 1 , - 2 , - 1 ) :\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n    return result\n"}
Disassembly of <code object getMinNumberForPattern at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( seq )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( n )

3 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 1 ( 9 )
12 COMPARE_OP 5 ( >= )
14 POP_JUMP_IF_FALSE 20

4 16 LOAD_CONST 2 ( '-1' )
18 RETURN_VALUE

5 >> 20 LOAD_CONST 0 ( None )
22 BUILD_LIST 1
24 LOAD_FAST 1 ( n )
26 LOAD_CONST 3 ( 1 )
28 BINARY_ADD
30 BINARY_MULTIPLY
32 STORE_FAST 2 ( result )

6 34 LOAD_CONST 3 ( 1 )
36 STORE_FAST 3 ( count )

7 38 SETUP_LOOP 138 ( to 164 )
40 LOAD_GLOBAL 1 ( range )
42 LOAD_FAST 1 ( n )
44 LOAD_CONST 3 ( 1 )
46 BINARY_ADD
48 CALL_FUNCTION 1
50 GET_ITER
>> 52 FOR_ITER 124 ( to 162 )
54 STORE_FAST 4 ( i )

8 56 LOAD_FAST 4 ( i )
58 LOAD_FAST 1 ( n )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_TRUE 52
64 LOAD_FAST 0 ( seq )
66 LOAD_FAST 4 ( i )
68 BINARY_SUBSCR
70 LOAD_CONST 4 ( 'I' )
72 COMPARE_OP 2 ( == )
74 POP_JUMP_IF_FALSE 52

9 76 SETUP_LOOP 90 ( to 160 )
78 LOAD_GLOBAL 1 ( range )
80 LOAD_FAST 4 ( i )
82 LOAD_CONST 3 ( 1 )
84 BINARY_SUBTRACT
86 LOAD_CONST 5 ( - 2 )
88 LOAD_CONST 6 ( - 1 )
90 CALL_FUNCTION 3
92 GET_ITER
>> 94 FOR_ITER 52 ( to 158 )
96 STORE_FAST 5 ( j )

10 98 LOAD_GLOBAL 2 ( int )
100 LOAD_CONST 7 ( '0' )
102 LOAD_GLOBAL 3 ( str )
104 LOAD_FAST 3 ( count )
106 CALL_FUNCTION 1
108 BINARY_ADD
110 CALL_FUNCTION 1
112 LOAD_FAST 2 ( result )
114 LOAD_FAST 5 ( j )
116 LOAD_CONST 3 ( 1 )
118 BINARY_ADD
120 STORE_SUBSCR

11 122 LOAD_FAST 3 ( count )
124 LOAD_CONST 3 ( 1 )
126 INPLACE_ADD
128 STORE_FAST 3 ( count )

12 130 LOAD_FAST 5 ( j )
132 LOAD_CONST 8 ( 0 )
134 COMPARE_OP 5 ( >= )
136 POP_JUMP_IF_FALSE 142
138 LOAD_FAST 0 ( seq )
140 LOAD_FAST 5 ( j )
142 BINARY_SUBSCR
144 LOAD_CONST 4 ( 'I' )
146 COMPARE_OP 2 ( == )
148 POP_JUMP_IF_FALSE 94

13 150 BREAK_LOOP
152 JUMP_ABSOLUTE 94
>> 154 POP_BLOCK
>> 156 JUMP_ABSOLUTE 52
>> 158 POP_BLOCK

14 >> 160 LOAD_FAST 2 ( result )
162 RETURN_VALUE
