{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( X , Y , m , n ) :\n    res = 0\n    X.sort ( reverse = True )\n    Y.sort ( reverse = True )\n    hzntl = 1 ; vert = 1\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( X [ i ] > Y [ j ] ) :\n            res += X [ i ] * vert\n            hzntl += 1\n            i += 1\n        else :\n            res += Y [ j ] * hzntl\n            vert += 1\n            j += 1\n    total = 0\n    while ( i < m ) :\n        total += X [ i ]\n        i += 1\n    res += total * vert\n    total = 0\n    while ( j < n ) :\n        total += Y [ j ]\n        j += 1\n    res += total * hzntl\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 9, 9, 16, 18, 20, 22, 22, 23, 25, 25, 26, 28, 32, 33, 33, 33, 34, 37, 40, 44, 46, 46, 52, 53, 56, 58, 58, 59, 60, 61, 67, 67, 69, 70, 70, 73, 75, 77, 83, 87, 87, 87, 90, 90, 93, 97, 98],[2, 3, 9, 10, 13, 16, 17, 19, 20, 23, 25, 27, 29, 30, 30, 35, 37, 39, 39, 45, 47, 50, 55, 55, 55, 56, 59, 60, 62, 63, 67, 70, 70, 71, 72, 73, 73, 74, 77, 86, 87, 88, 91, 92, 95, 96, 97, 99],25,27,),\n    ([-52, 66, 66, -4, -74, 78, 52, -72],[-40, 30, -34, -76, 84, 88, -78, 72],6,7,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],15,19,),\n    ([58, 78, 48, 44, 63, 37, 89, 76, 66, 83, 52, 97, 19, 28, 67, 38, 54, 77, 2, 96, 28, 87],[37, 36, 26, 5, 83, 75, 33, 33, 72, 63, 91, 94, 75, 92, 9, 19, 79, 29, 40, 47, 63, 36],13,14,),\n    ([-84, -78, -76, -72, -68, -62, -62, -60, -58, -44, -34, -10, -8, -4, -2, -2, 14, 16, 20, 26, 26, 32, 70, 78, 86, 90, 96],[-98, -98, -86, -82, -76, -62, -60, -48, -32, -32, -24, -18, -10, -4, 0, 16, 16, 26, 36, 42, 48, 50, 64, 66, 78, 92, 98],15,24,),\n    ([0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0],25,26,),\n    ([30, 75],[10, 39],1,1,),\n    ([70, 78, -60, -10, -8, 46, 38, 60, -54, -68, 16, 10, 36, -10, 38, -96, -52, -82, -56, 22, -56, 0, 96, -60, 24, 70, 40, 62, -20, -36, 74, 32, 44, 14, -18, 50, 58],[64, -42, -50, -76, 46, 32, -66, 86, -6, 46, 94, 70, -62, 90, 78, 4, 6, -20, 92, -18, -34, -96, 92, -24, -90, -94, 62, 40, -14, -28, 80, -86, -86, -56, 40, -92, -22],19,19,),\n    ([0, 0, 0, 1],[0, 1, 1, 1],2,2,),\n    ([81, 40, 29, 74, 13, 67, 10, 25, 24, 81, 90],[51, 45, 23, 7, 53, 14, 49, 58, 25, 75, 74],8,10,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minimumCostOfBreaking ( X , Y , m , n ) :\n    res = 0\n    X.sort ( reverse = True )\n    Y.sort ( reverse = True )\n    hzntl = 1 ; vert = 1\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( X [ i ] > Y [ j ] ) :\n            res += X [ i ] * vert\n            hzntl += 1\n            i += 1\n        else :\n            res += Y [ j ] * hzntl\n            vert += 1\n            j += 1\n    total = 0\n    while ( i < m ) :\n        total += X [ i ]\n        i += 1\n    res += total * vert\n    total = 0\n    while ( j < n ) :\n        total += Y [ j ]\n        j += 1\n    res += total * hzntl\n    return res\n"}
Disassembly of <code object minimumCostOfBreaking at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 4 ( res )

3 4 LOAD_FAST 2 ( X )
6 LOAD_ATTR 0 ( sort )
8 LOAD_CONST 2 ( True )
10 LOAD_CONST 3 ( ( 'reverse' , ) )
12 CALL_FUNCTION_KW 1
14 POP_TOP

4 16 LOAD_FAST 1 ( Y )
18 LOAD_ATTR 0 ( sort )
20 LOAD_CONST 2 ( True )
22 LOAD_CONST 3 ( ( 'reverse' , ) )
24 CALL_FUNCTION_KW 1
26 POP_TOP

5 28 LOAD_CONST 4 ( 1 )
30 STORE_FAST 5 ( hzntl )

6 32 LOAD_CONST 1 ( 0 )
34 STORE_FAST 6 ( j )

7 36 SETUP_LOOP 122 ( to 158 )
>> 38 LOAD_FAST 6 ( i )
40 LOAD_FAST 2 ( m )
42 COMPARE_OP 0 ( < )
44 POP_JUMP_IF_FALSE 156
46 LOAD_FAST 6 ( j )
48 LOAD_FAST 3 ( n )
50 COMPARE_OP 0 ( < )
52 POP_JUMP_IF_FALSE 156

8 54 LOAD_FAST 2 ( X )
56 LOAD_FAST 6 ( i )
58 BINARY_SUBSCR
60 LOAD_FAST 1 ( Y )
62 LOAD_FAST 6 ( j )
64 BINARY_SUBSCR
66 COMPARE_OP 4 ( > )
68 POP_JUMP_IF_FALSE 110

9 70 LOAD_FAST 4 ( res )
72 LOAD_FAST 2 ( X )
74 LOAD_FAST 6 ( i )
76 BINARY_SUBSCR
78 LOAD_FAST 3 ( vert )
80 BINARY_MULTIPLY
82 INPLACE_ADD
84 STORE_FAST 4 ( res )

10 86 LOAD_FAST 5 ( hzntl )
88 LOAD_CONST 4 ( 1 )
90 INPLACE_ADD
92 STORE_FAST 5 ( zzntl )

11 94 LOAD_FAST 6 ( i )
96 LOAD_CONST 4 ( 1 )
98 INPLACE_ADD
100 STORE_FAST 6 ( i )
102 JUMP_ABSOLUTE 38

13 >> 104 LOAD_FAST 4 ( res )
106 LOAD_FAST 1 ( Y )
108 LOAD_FAST 6 ( j )
110 BINARY_SUBSCR
112 LOAD_FAST 5 ( hzntl )
114 BINARY_MULTIPLY
116 INPLACE_ADD
118 STORE_FAST 4 ( res )

14 120 LOAD_FAST 3 ( vert )
122 LOAD_CONST 4 ( 1 )
124 INPLACE_ADD
126 STORE_FAST 3 ( vert )

15 128 LOAD_FAST 6 ( j )
130 LOAD_CONST 4 ( 1 )
132 INPLACE_ADD
134 STORE_FAST 6 ( j )
136 JUMP_ABSOLUTE 38
>> 138 POP_BLOCK

16 >> 140 LOAD_CONST 1 ( 0 )
142 STORE_FAST 7 ( total )

17 144 SETUP_LOOP 54 ( to 184 )
>> 146 LOAD_FAST 6 ( i )
148 LOAD_FAST 2 ( m )
150 COMPARE_OP 0 ( < )
152 POP_JUMP_IF_FALSE 182

18 154 LOAD_FAST 7 ( total )
156 LOAD_FAST 2 ( X )
158 LOAD_FAST 6 ( i )
160 BINARY_SUBSCR
162 INPLACE_ADD
164 STORE_FAST 7 ( total )

19 166 LOAD_FAST 6 ( i )
168 LOAD_CONST 4 ( 1 )
170 INPLACE_ADD
172 STORE_FAST 6 ( i )
174 JUMP_ABSOLUTE 146
>> 176 POP_BLOCK

20 >> 178 LOAD_FAST 4 ( res )
180 LOAD_FAST 7 ( total )
182 LOAD_FAST 3 ( vert )
184 BINARY_MULTIPLY
186 INPLACE_ADD
188 STORE_FAST 4 ( res )

21 190 LOAD_CONST 1 ( 0 )
192 STORE_FAST 7 ( total )

22 194 SETUP_LOOP 32 ( to 268 )
>> 196 LOAD_FAST 6 ( j )
198 LOAD_FAST 3 ( n )
200 COMPARE_OP 0 ( < )
202 POP_JUMP_IF_FALSE 236

23 204 LOAD_FAST 7 ( total )
206 LOAD_FAST 1 ( Y )
208 LOAD_FAST 6 ( j )
210 BINARY_SUBSCR
212 INPLACE_ADD
214 STORE_FAST 7 ( total )

24 216 LOAD_FAST 7 ( total )
218 LOAD_CONST 4 ( 1 )
220 INPLACE_ADD
222 STORE_FAST 7 ( total )
224 JUMP_ABSOLUTE 146
>> 226 POP_BLOCK

25 >> 228 LOAD_FAST 4 ( res )
230 LOAD_FAST 7 ( total )
232 LOAD_FAST 5 ( hzntl )
234 BINARY_MULTIPLY
236 INPLACE_ADD
238 STORE_FAST 4 ( res )

26 240 LOAD_FAST 4 ( res )
242 RETURN_VALUE
