{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([17, 25, 27, 27, 73, 91],5,3,),\n    ([-86, -74, -88, 28, -32, 20, -34, 32],5,6,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],33,32,),\n    ([5, 11, 36, 27, 6, 24, 58, 44, 14, 68],7,5,),\n    ([-98, -98, -94, -92, -86, -86, -70, -66, -64, -64, -58, -52, -46, -44, -44, -38, -38, -28, -24, -12, -10, -4, -2, 2, 8, 10, 12, 20, 22, 26, 26, 36, 42, 52, 54, 60, 60, 68, 82, 82, 92, 98],27,27,),\n    ([0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1],27,20,),\n    ([3, 8, 9, 10, 10, 13, 14, 16, 18, 23, 24, 25, 27, 28, 30, 33, 36, 39, 42, 42, 44, 45, 45, 48, 52, 52, 55, 55, 59, 59, 59, 60, 61, 61, 66, 66, 67, 68, 71, 72, 75, 76, 79, 80, 94, 94],44,26,),\n    ([-12, 56, -48, 52, -96, -84, 32, -12, -6, 82, 70, 18, 66, -6, -22, -46, -54, 18, -14, -32, 68, 82, -44, -42, 10, 56, 8, -56, 24, 20, -38, 30, -52, -66, 82, -64, 68, -82, 52, -88, -34, -26, 94, 58, -4, -84, -60],37,46,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,21,),\n    ([1, 23, 75, 84, 28, 34, 15, 13, 51, 69, 94, 45, 38, 38],13,12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def printKDistinct ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1\n"}
Disassembly of <code object printKDistinct at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 BUILD_MAP 0
2 STORE_FAST 3 ( dict )

3 4 BUILD_LIST 0
6 STORE_FAST 4 ( vect )

4 8 SETUP_LOOP 70 ( to 82 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_FAST 1 ( size )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 52 ( to 80 )
20 STORE_FAST 5 ( i )

5 22 LOAD_FAST 0 ( arr )
24 LOAD_FAST 5 ( i )
26 BINARY_SUBSCR
28 LOAD_GLOBAL 1 ( dict )
30 COMPARE_OP 6 ( in )
32 POP_JUMP_IF_FALSE 60

6 34 LOAD_FAST 3 ( dict )
36 LOAD_FAST 0 ( arr )
38 LOAD_FAST 5 ( i )
40 BINARY_SUBSCR
42 LOAD_CONST 1 ( 1 )
44 BINARY_ADD
46 LOAD_FAST 3 ( dict )
48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 5 ( i )
52 BINARY_SUBSCR
54 STORE_SUBSCR
56 JUMP_ABSOLUTE 18
58 JUMP_FORWARD 18 ( to 78 )

8 >> 60 LOAD_CONST 1 ( 1 )
62 LOAD_FAST 3 ( dict )
64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 5 ( i )
68 BINARY_SUBSCR
70 STORE_SUBSCR
72 JUMP_ABSOLUTE 18
>> 74 POP_BLOCK

9 76 SETUP_LOOP 48 ( to 124 )
78 LOAD_GLOBAL 0 ( range )
80 LOAD_FAST 1 ( size )
82 CALL_FUNCTION 1
84 GET_ITER
>> 86 FOR_ITER 36 ( to 122 )
88 STORE_FAST 5 ( i )

10 90 LOAD_FAST 3 ( dict )
92 LOAD_FAST 0 ( arr )
94 LOAD_FAST 5 ( i )
96 BINARY_SUBSCR
98 BINARY_SUBSCR
100 LOAD_CONST 1 ( 1 )
102 COMPARE_OP 4 ( > )
104 POP_JUMP_IF_FALSE 110

11 106 JUMP_ABSOLUTE 86
108 JUMP_ABSOLUTE 86

13 >> 110 LOAD_FAST 2 ( KthIndex )
112 LOAD_CONST 1 ( 1 )
114 BINARY_SUBTRACT
116 STORE_FAST 2 ( KthIndex )
118 JUMP_ABSOLUTE 86
120 POP_BLOCK

14 >> 122 LOAD_FAST 2 ( KthIndex )
124 LOAD_CONST 2 ( 0 )
126 COMPARE_OP 2 ( == )
128 POP_JUMP_IF_FALSE 144

15 130 LOAD_FAST 0 ( arr )
132 LOAD_FAST 5 ( i )
134 BINARY_SUBSCR
136 RETURN_VALUE

16 >> 138 LOAD_CONST 3 ( - 1 )
140 RETURN_VALUE
