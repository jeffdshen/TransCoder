{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( N ) :\n    if ( N <= 6 ) :\n        return N\n    screen = [ 0 ] * N\n    for n in range ( 1 , 7 ) :\n        screen [ n - 1 ] = n\n    for n in range ( 7 , N + 1 ) :\n        screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n    return screen [ N - 1 ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (41,),\n    (94,),\n    (80,),\n    (40,),\n    (76,),\n    (5,),\n    (43,),\n    (67,),\n    (24,),\n    (90,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findoptimal ( N ) :\n    if ( N <= 6 ) :\n        return N\n    screen = [ 0 ] * N\n    for n in range ( 1 , 7 ) :\n        screen [ n - 1 ] = n\n    for n in range ( 7 , N + 1 ) :\n        screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n    return screen [ N - 1 ]\n"}
Disassembly of <code object findoptimal at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( N )
2 LOAD_CONST 1 ( 6 )
4 COMPARE_OP 1 ( <= )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_FAST 0 ( N )
10 RETURN_VALUE

4 >> 12 LOAD_CONST 2 ( 0 )
14 BUILD_LIST 1
16 LOAD_FAST 0 ( N )
18 BINARY_MULTIPLY
20 STORE_FAST 1 ( screen )

5 22 SETUP_LOOP 34 ( to 52 )
24 LOAD_GLOBAL 0 ( range )
26 LOAD_CONST 3 ( 1 )
28 LOAD_CONST 4 ( 7 )
30 CALL_FUNCTION 2
32 GET_ITER
>> 34 FOR_ITER 20 ( to 50 )
36 STORE_FAST 2 ( n )

6 38 LOAD_FAST 2 ( n )
40 LOAD_FAST 1 ( screen )
42 LOAD_FAST 2 ( n )
44 LOAD_CONST 3 ( 1 )
46 BINARY_SUBTRACT
48 STORE_SUBSCR
>> 50 JUMP_ABSOLUTE 34
>> 52 POP_BLOCK

7 54 SETUP_LOOP 64 ( to 120 )
56 LOAD_GLOBAL 0 ( range )
58 LOAD_CONST 4 ( 7 )
60 LOAD_FAST 0 ( N )
62 LOAD_CONST 3 ( 1 )
64 BINARY_ADD
66 CALL_FUNCTION 2
68 GET_ITER
>> 70 FOR_ITER 40 ( to 118 )
72 STORE_FAST 2 ( n )

8 74 LOAD_GLOBAL 1 ( max )
76 LOAD_CONST 5 ( 2 )
78 LOAD_FAST 1 ( screen )
80 LOAD_FAST 2 ( n )
82 LOAD_CONST 6 ( 4 )
84 BINARY_SUBTRACT
86 BINARY_SUBSCR
88 BINARY_MULTIPLY
90 LOAD_GLOBAL 1 ( max )
92 LOAD_CONST 7 ( 3 )
94 LOAD_FAST 1 ( screen )
96 LOAD_FAST 2 ( n )
98 LOAD_CONST 8 ( 5 )
100 BINARY_SUBTRACT
102 BINARY_SUBSCR
104 BINARY_MULTIPLY
106 LOAD_CONST 6 ( 4 )
108 LOAD_FAST 1 ( screen )
110 LOAD_FAST 2 ( n )
112 LOAD_CONST 1 ( 6 )
114 BINARY_SUBTRACT
116 BINARY_SUBSCR
118 BINARY_MULTIPLY
120 CALL_FUNCTION 2
122 CALL_FUNCTION 2
124 LOAD_FAST 1 ( screen )
126 LOAD_FAST 2 ( n )
128 LOAD_CONST 3 ( 1 )
130 BINARY_SUBTRACT
132 STORE_SUBSCR
134 JUMP_ABSOLUTE 70
>> 136 POP_BLOCK

9 >> 138 LOAD_FAST 1 ( screen )
140 LOAD_FAST 0 ( N )
142 LOAD_CONST 3 ( 1 )
144 BINARY_SUBTRACT
146 BINARY_SUBSCR
148 RETURN_VALUE
