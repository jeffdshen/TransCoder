{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    res = list ( )\n    res.append ( 0 )\n    res.append ( 1 )\n    i = 2\n    while i < n + 1 :\n        res.append ( max ( i , ( res [ int ( i / 2 ) ] + res [ int ( i / 3 ) ] + res [ int ( i / 4 ) ] + res [ int ( i / 5 ) ] ) ) )\n        i = i + 1\n    return res [ n ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (3,),\n    (19,),\n    (39,),\n    (89,),\n    (96,),\n    (68,),\n    (48,),\n    (5,),\n    (3,),\n    (4,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxDP ( n ) :\n    res = list ( )\n    res.append ( 0 )\n    res.append ( 1 )\n    i = 2\n    while i < n + 1 :\n        res.append ( max ( i , ( res [ int ( i / 2 ) ] + res [ int ( i / 3 ) ] + res [ int ( i / 4 ) ] + res [ int ( i / 5 ) ] ) ) )\n        i = i + 1\n    return res [ n ]\n"}
Disassembly of <code object maxDP at 0x7f2b016399c0, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( list )
2 CALL_FUNCTION 0
4 STORE_FAST 1 ( res )

3 6 LOAD_FAST 1 ( res )
8 LOAD_METHOD 1 ( append )
10 LOAD_CONST 1 ( 0 )
12 CALL_METHOD 1
14 POP_TOP

4 16 LOAD_FAST 1 ( res )
18 LOAD_METHOD 1 ( append )
20 LOAD_CONST 2 ( 1 )
22 CALL_METHOD 1
24 POP_TOP

5 26 LOAD_CONST 3 ( 2 )
28 STORE_FAST 2 ( i )

6 30 SETUP_LOOP 92 ( to 132 )
>> 32 LOAD_FAST 2 ( i )
34 LOAD_FAST 0 ( n )
36 LOAD_CONST 2 ( 1 )
38 BINARY_ADD
40 COMPARE_OP 0 ( < )
42 POP_JUMP_IF_FALSE 130

7 44 LOAD_FAST 1 ( res )
46 LOAD_METHOD 1 ( append )
48 LOAD_GLOBAL 2 ( max )
50 LOAD_FAST 2 ( i )
52 LOAD_GLOBAL 3 ( res )
54 LOAD_GLOBAL 4 ( int )
56 LOAD_FAST 2 ( i )
58 LOAD_CONST 3 ( 2 )
60 BINARY_TRUE_DIVIDE
62 CALL_FUNCTION 1
64 BINARY_SUBSCR
66 LOAD_FAST 1 ( res )
68 LOAD_GLOBAL 4 ( int )
70 LOAD_FAST 2 ( i )
72 LOAD_CONST 4 ( 3 )
74 BINARY_TRUE_DIVIDE
76 CALL_FUNCTION 1
78 BINARY_SUBSCR
80 BINARY_ADD
82 LOAD_FAST 1 ( res )
84 LOAD_GLOBAL 4 ( int )
86 LOAD_FAST 2 ( i )
88 LOAD_CONST 5 ( 4 )
90 BINARY_TRUE_DIVIDE
92 CALL_FUNCTION 1
94 BINARY_SUBSCR
96 BINARY_ADD
98 CALL_FUNCTION 1
100 CALL_METHOD 1
102 POP_TOP

8 104 LOAD_FAST 2 ( i )
106 LOAD_CONST 2 ( 1 )
108 BINARY_ADD
110 STORE_FAST 2 ( i )
112 JUMP_ABSOLUTE 32
>> 114 POP_BLOCK

9 >> 116 LOAD_FAST 1 ( res )
118 LOAD_FAST 0 ( n )
120 BINARY_SUBSCR
122 RETURN_VALUE
