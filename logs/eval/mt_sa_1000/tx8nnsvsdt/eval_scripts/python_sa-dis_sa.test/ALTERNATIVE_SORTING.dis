{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    arr.sort ( )\n    i = 0\n    j = n - 1\n    while ( i < j ) :\n        print ( arr [ j ] , end = \" \" )\n        j -= 1\n        print ( arr [ i ] , end = \" \" )\n        i += 1\n    if ( n % 2 != 0 ) :\n        print ( arr [ i ] )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 4, 5, 8, 8, 10, 11, 13, 14, 15, 16, 19, 20, 20, 23, 31, 33, 34, 37, 41, 42, 43, 43, 44, 46, 46, 50, 55, 55, 61, 63, 65, 66, 67, 68, 79, 79, 84, 84, 84, 86, 89, 92, 96, 96],42,),\n    ([64, 32, -48, -98, 74, -10, 36, 18, 28, 94, -52, 30, 94, -52, 90, -12, -78, 4, -78, 66, -92, -18, -44, -6, -38, -22, 62, 8, -84, -60, -26, 72, -78, 12, 34],19,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],13,),\n    ([61, 41, 24, 22, 96, 75, 48, 83, 22, 93, 85, 67, 37, 48, 98, 13, 58, 89, 56, 99, 14, 55, 7, 3, 11, 68, 50, 16],22,),\n    ([-92, -80, -80, -78, -76, -72, -70, -60, -58, -58, -56, -44, -34, -32, -32, -26, -20, -14, -10, -8, -6, 0, 6, 6, 6, 10, 16, 18, 28, 30, 36, 36, 38, 46, 48, 52, 56, 56, 60, 68, 92, 96],31,),\n    ([0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0],15,),\n    ([4, 10, 12, 13, 15, 17, 24, 26, 30, 31, 36, 41, 41, 45, 49, 56, 57, 57, 66, 75, 75, 78, 85, 93, 94],14,),\n    ([-94, 66, -12, 20, 74, 10, -18, 50, -58, -88, -14, 68, 72, 64, 90, -14, -72, -44, -6, 86, 18, 50, -68, 62, -16, -68, 46, 6, 30, -26, -74, -22, 14, -70, -78, -12, -32, 96, 52, -16, 22, -2],40,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],20,),\n    ([16, 13, 96, 14, 49, 26],4,)\n        ]\n    filled_function_param = [\n    ([1, 4, 5, 8, 8, 10, 11, 13, 14, 15, 16, 19, 20, 20, 23, 31, 33, 34, 37, 41, 42, 43, 43, 44, 46, 46, 50, 55, 55, 61, 63, 65, 66, 67, 68, 79, 79, 84, 84, 84, 86, 89, 92, 96, 96],42,),\n    ([64, 32, -48, -98, 74, -10, 36, 18, 28, 94, -52, 30, 94, -52, 90, -12, -78, 4, -78, 66, -92, -18, -44, -6, -38, -22, 62, 8, -84, -60, -26, 72, -78, 12, 34],19,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],13,),\n    ([61, 41, 24, 22, 96, 75, 48, 83, 22, 93, 85, 67, 37, 48, 98, 13, 58, 89, 56, 99, 14, 55, 7, 3, 11, 68, 50, 16],22,),\n    ([-92, -80, -80, -78, -76, -72, -70, -60, -58, -58, -56, -44, -34, -32, -32, -26, -20, -14, -10, -8, -6, 0, 6, 6, 6, 10, 16, 18, 28, 30, 36, 36, 38, 46, 48, 52, 56, 56, 60, 68, 92, 96],31,),\n    ([0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0],15,),\n    ([4, 10, 12, 13, 15, 17, 24, 26, 30, 31, 36, 41, 41, 45, 49, 56, 57, 57, 66, 75, 75, 78, 85, 93, 94],14,),\n    ([-94, 66, -12, 20, 74, 10, -18, 50, -58, -88, -14, 68, 72, 64, 90, -14, -72, -44, -6, 86, 18, 50, -68, 62, -16, -68, 46, 6, 30, -26, -74, -22, 14, -70, -78, -12, -32, 96, 52, -16, 22, -2],40,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],20,),\n    ([16, 13, 96, 14, 49, 26],4,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def alternateSort ( arr , n ) :\n    arr.sort ( )\n    i = 0\n    j = n - 1\n    while ( i < j ) :\n        print ( arr [ j ] , end = \" \" )\n        j -= 1\n        print ( arr [ i ] , end = \" \" )\n        i += 1\n    if ( n % 2 != 0 ) :\n        print ( arr [ i ] )\n"}
Disassembly of <code object alternateSort at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 LOAD_CONST 1 ( 0 )
10 STORE_FAST 2 ( i )

4 12 LOAD_FAST 1 ( n )
14 LOAD_CONST 2 ( 1 )
16 BINARY_SUBTRACT
18 STORE_FAST 3 ( j )

5 20 SETUP_LOOP 48 ( to 68 )
>> 22 LOAD_FAST 2 ( i )
24 LOAD_FAST 3 ( j )
26 COMPARE_OP 0 ( < )
28 POP_JUMP_IF_FALSE 66

6 30 LOAD_GLOBAL 1 ( print )
32 LOAD_FAST 0 ( arr )
34 LOAD_FAST 3 ( j )
36 BINARY_SUBSCR
38 LOAD_CONST 3 ( ' ' )
40 LOAD_CONST 4 ( ( 'end' , ) )
42 CALL_FUNCTION_KW 2
44 POP_TOP

7 46 LOAD_FAST 3 ( j )
48 LOAD_CONST 2 ( 1 )
50 INPLACE_SUBTRACT
52 STORE_FAST 3 ( j )

8 54 LOAD_GLOBAL 1 ( print )
56 LOAD_FAST 0 ( arr )
58 LOAD_FAST 2 ( i )
60 BINARY_SUBSCR
62 LOAD_CONST 3 ( ' ' )
64 LOAD_CONST 4 ( ( 'end' , ) )
66 CALL_FUNCTION_KW 2
68 POP_TOP

9 70 LOAD_FAST 2 ( i )
72 LOAD_CONST 2 ( 1 )
74 INPLACE_ADD
76 STORE_FAST 2 ( i )
78 JUMP_ABSOLUTE 22
>> 80 POP_BLOCK

10 >> 82 LOAD_FAST 1 ( n )
84 LOAD_CONST 5 ( 2 )
86 BINARY_MODULO
88 LOAD_CONST 1 ( 0 )
90 COMPARE_OP 3 ( != )
92 POP_JUMP_IF_FALSE 102

11 94 LOAD_GLOBAL 1 ( print )
96 LOAD_FAST 0 ( arr )
98 LOAD_FAST 2 ( i )
100 BINARY_SUBSCR
102 CALL_FUNCTION 1
104 POP_TOP
>> 106 LOAD_CONST 0 ( None )
108 RETURN_VALUE
