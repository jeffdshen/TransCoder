{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 :\n        ans *= 2\n    for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 ) :\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 :\n            ans *= i\n    if n > 2 :\n        ans *= n\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (95,),\n    (48,),\n    (3,),\n    (10,),\n    (82,),\n    (1,),\n    (77,),\n    (99,),\n    (23,),\n    (61,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 :\n        ans *= 2\n    for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 ) :\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 :\n            ans *= i\n    if n > 2 :\n        ans *= n\n    return ans\n"}
Disassembly of <code object findMinNumber at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( count )

3 4 LOAD_CONST 2 ( 1 )
6 STORE_FAST 2 ( ans )

4 8 SETUP_LOOP 32 ( to 42 )
>> 10 LOAD_FAST 0 ( n )
12 LOAD_CONST 3 ( 2 )
14 BINARY_MODULO
16 LOAD_CONST 1 ( 0 )
18 COMPARE_OP 2 ( == )
20 POP_JUMP_IF_FALSE 40

5 22 LOAD_FAST 1 ( count )
24 LOAD_CONST 2 ( 1 )
26 INPLACE_ADD
28 STORE_FAST 1 ( count )

6 30 LOAD_FAST 0 ( n )
32 LOAD_CONST 3 ( 2 )
34 BINARY_FLOOR_DIVIDE
36 RETURN_VALUE
38 JUMP_ABSOLUTE 10
>> 40 POP_BLOCK

7 >> 42 LOAD_FAST 1 ( count )
44 LOAD_CONST 3 ( 2 )
46 BINARY_MODULO
48 LOAD_CONST 1 ( 0 )
50 COMPARE_OP 9 ( is not )
52 POP_JUMP_IF_FALSE 66

8 54 LOAD_FAST 2 ( ans )
56 LOAD_CONST 3 ( 2 )
58 INPLACE_MULTIPLY
60 STORE_FAST 2 ( ans )
62 JUMP_FORWARD 12 ( to 78 )

9 >> 64 SETUP_LOOP 76 ( to 144 )
>> 66 LOAD_GLOBAL 0 ( range )
68 LOAD_CONST 4 ( 3 )
70 LOAD_GLOBAL 1 ( int )
72 CALL_FUNCTION 1
74 LOAD_GLOBAL 2 ( math )
76 LOAD_METHOD 3 ( sqrt )
78 LOAD_FAST 0 ( n )
80 CALL_METHOD 1
82 CALL_FUNCTION 1
84 LOAD_CONST 2 ( 1 )
86 BINARY_ADD
88 LOAD_CONST 3 ( 2 )
90 CALL_FUNCTION 2
92 GET_ITER
>> 94 FOR_ITER 24 ( to 142 )
96 STORE_FAST 3 ( i )

10 98 LOAD_CONST 1 ( 0 )
100 STORE_FAST 1 ( count )

11 102 SETUP_LOOP 30 ( to 128 )
>> 104 LOAD_FAST 0 ( n )
106 LOAD_FAST 3 ( i )
108 BINARY_MODULO
110 LOAD_CONST 1 ( 0 )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 126

12 116 LOAD_FAST 1 ( count )
118 LOAD_CONST 2 ( 1 )
120 INPLACE_ADD
122 STORE_FAST 1 ( count )
124 JUMP_ABSOLUTE 104
>> 126 POP_BLOCK

13 >> 128 LOAD_FAST 1 ( count )
130 LOAD_CONST 3 ( 2 )
132 BINARY_MODULO
134 LOAD_CONST 1 ( 0 )
136 COMPARE_OP 9 ( is not )
138 POP_JUMP_IF_FALSE 144

14 140 LOAD_FAST 2 ( ans )
142 LOAD_FAST 3 ( i )
144 INPLACE_MULTIPLY
146 STORE_FAST 2 ( ans )

15 >> 148 LOAD_FAST 1 ( count )
150 LOAD_CONST 3 ( 2 )
152 COMPARE_OP 4 ( > )
154 POP_JUMP_IF_FALSE 176

16 156 LOAD_FAST 2 ( ans )
158 LOAD_FAST 0 ( n )
160 INPLACE_MULTIPLY
162 STORE_FAST 2 ( ans )
164 JUMP_ABSOLUTE 66
>> 166 POP_BLOCK

17 >> 168 LOAD_FAST 2 ( ans )
170 RETURN_VALUE
