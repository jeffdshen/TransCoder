{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    l = len ( str )\n    count = 0\n    res = str [ 0 ]\n    for i in range ( l ) :\n        cur_count = 1\n        for j in range ( i + 1 , l ) :\n            if ( str [ i ] != str [ j ] ) :\n                break\n            cur_count += 1\n        if cur_count > count :\n            count = cur_count\n            res = str [ i ]\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('geeekk',),\n    ('3786868',),\n    ('110',),\n    ('aaaabbcbbb',),\n    ('11',),\n    ('011101',),\n    ('WoHNyJYLC',),\n    ('3141711779',),\n    ('10111101101',),\n    ('aabbabababcc',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxRepeating ( str ) :\n    l = len ( str )\n    count = 0\n    res = str [ 0 ]\n    for i in range ( l ) :\n        cur_count = 1\n        for j in range ( i + 1 , l ) :\n            if ( str [ i ] != str [ j ] ) :\n                break\n            cur_count += 1\n        if cur_count > count :\n            count = cur_count\n            res = str [ i ]\n    return res\n"}
Disassembly of <code object maxRepeating at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( l )

3 8 LOAD_CONST 1 ( 0 )
10 STORE_FAST 2 ( count )

4 12 LOAD_FAST 0 ( str )
14 LOAD_CONST 1 ( 0 )
16 BINARY_SUBSCR
18 STORE_FAST 3 ( res )

5 20 SETUP_LOOP 92 ( to 108 )
22 LOAD_GLOBAL 1 ( range )
24 LOAD_FAST 1 ( l )
26 CALL_FUNCTION 1
28 GET_ITER
>> 30 FOR_ITER 80 ( to 106 )
32 STORE_FAST 4 ( i )

6 34 LOAD_CONST 2 ( 1 )
36 STORE_FAST 5 ( cur_count )

7 38 SETUP_LOOP 46 ( to 86 )
40 LOAD_GLOBAL 1 ( range )
42 LOAD_FAST 4 ( i )
44 LOAD_CONST 2 ( 1 )
46 BINARY_ADD
48 LOAD_FAST 1 ( l )
50 CALL_FUNCTION 2
52 GET_ITER
>> 54 FOR_ITER 30 ( to 84 )
56 STORE_FAST 6 ( j )

8 58 LOAD_FAST 0 ( str )
60 LOAD_FAST 4 ( i )
62 BINARY_SUBSCR
64 LOAD_FAST 0 ( str )
66 LOAD_FAST 6 ( j )
68 BINARY_SUBSCR
70 COMPARE_OP 3 ( != )
72 POP_JUMP_IF_FALSE 54

9 74 BREAK_LOOP
76 JUMP_ABSOLUTE 54
>> 78 POP_BLOCK

10 80 LOAD_FAST 5 ( cur_count )
82 LOAD_CONST 2 ( 1 )
84 INPLACE_ADD
86 STORE_FAST 5 ( cur_count )
88 JUMP_ABSOLUTE 30
>> 90 POP_BLOCK

11 >> 92 LOAD_FAST 5 ( cur_count )
94 LOAD_FAST 2 ( count )
96 COMPARE_OP 4 ( > )
98 POP_JUMP_IF_FALSE 30

12 100 LOAD_FAST 5 ( cur_count )
102 STORE_FAST 2 ( count )

13 104 LOAD_FAST 0 ( str )
106 LOAD_FAST 4 ( i )
108 BINARY_SUBSCR
110 STORE_FAST 3 ( res )
112 JUMP_ABSOLUTE 30
>> 114 POP_BLOCK

14 >> 116 LOAD_FAST 3 ( res )
118 RETURN_VALUE
