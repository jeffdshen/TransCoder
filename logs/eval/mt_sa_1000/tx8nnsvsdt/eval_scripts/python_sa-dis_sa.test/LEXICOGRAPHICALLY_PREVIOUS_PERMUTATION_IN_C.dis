{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    n = len ( str ) - 1\n    i = n\n    while ( i > 0 and str [ i - 1 ] <= str [ i ] ) :\n        i -= 1\n    if ( i <= 0 ) :\n        return False\n    j = i - 1\n    while ( j + 1 <= n and str [ j + 1 ] <= str [ i - 1 ] ) :\n        j += 1\n    str = list ( str )\n    temp = str [ i - 1 ]\n    str [ i - 1 ] = str [ j ]\n    str [ j ] = temp\n    str = ''.join ( str )\n    str [ : : - 1 ]\n    return True , str\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (['B', 'I', 'K', 'M', 'Q', 'Y', 'b', 'e', 'e', 't', 'x'],),\n    (['7', '0', '2', '5', '1', '1', '4', '4', '8', '0', '2', '6', '4', '4', '0', '6', '7', '1', '7', '9', '8', '6', '1', '8', '3', '0', '6', '4', '4', '6', '3', '1', '3', '1', '9', '9', '4', '7', '4', '4', '3', '1', '4', '2', '9', '8', '1', '2', '4'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['o', 'S', 'R', 'm', 'i', 'S', 'z', 'z', 'W', 'X', 'A', 'A', 'M', 'L', 'V', 'Q', 'F', 'i', ' ', 'i', 'G', 'D', 'T', 'a', 'm', 'S', 'N', 's', 'j', 'P', 'E', 'n', 'a', 'Q', 'm'],),\n    (['0', '0', '0', '0', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '6', '7', '7', '8', '8', '8', '9', '9', '9', '9', '9'],),\n    (['0', '0', '1', '0', '1', '0', '0'],),\n    ([' ', 'B', 'D', 'D', 'E', 'E', 'G', 'J', 'J', 'K', 'L', 'L', 'L', 'M', 'N', 'N', 'P', 'Q', 'V', 'W', 'W', 'X', 'Y', 'a', 'b', 'b', 'd', 'f', 'h', 'i', 'j', 'j', 'k', 'k', 'l', 'm', 'm', 'm', 'n', 'p', 'r', 's', 'u', 'v', 'v', 'w', 'x'],),\n    (['5', '4', '4', '7', '5', '5', '1', '8', '6', '6', '9', '9', '6', '6', '8', '7', '4', '0', '7', '3', '6', '0', '9'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['q', 'a', 'U', 'N', 'V', 'v', 'U', 'R', 'x', 'i', 'S', 'N', 'V', 'V', 'j', 'r', 'e', 'N', 'M'],)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def prevPermutation ( str ) :\n    n = len ( str ) - 1\n    i = n\n    while ( i > 0 and str [ i - 1 ] <= str [ i ] ) :\n        i -= 1\n    if ( i <= 0 ) :\n        return False\n    j = i - 1\n    while ( j + 1 <= n and str [ j + 1 ] <= str [ i - 1 ] ) :\n        j += 1\n    str = list ( str )\n    temp = str [ i - 1 ]\n    str [ i - 1 ] = str [ j ]\n    str [ j ] = temp\n    str = ''.join ( str )\n    str [ : : - 1 ]\n    return True , str\n"}
Disassembly of <code object prevPermutation at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str )
4 CALL_FUNCTION 1
6 LOAD_CONST 1 ( 1 )
8 BINARY_SUBTRACT
10 STORE_FAST 1 ( n )

3 12 LOAD_FAST 1 ( n )
14 STORE_FAST 2 ( i )

4 16 SETUP_LOOP 46 ( to 66 )
>> 18 LOAD_FAST 2 ( i )
20 LOAD_CONST 2 ( 0 )
22 COMPARE_OP 4 ( > )
24 POP_JUMP_IF_FALSE 64
26 LOAD_FAST 0 ( str )
28 LOAD_FAST 2 ( i )
30 LOAD_CONST 1 ( 1 )
32 BINARY_SUBTRACT
34 BINARY_SUBSCR
36 LOAD_FAST 0 ( str )
38 LOAD_FAST 2 ( i )
40 BINARY_SUBSCR
42 COMPARE_OP 1 ( <= )
44 POP_JUMP_IF_FALSE 64

5 46 LOAD_FAST 2 ( i )
48 LOAD_CONST 1 ( 1 )
50 INPLACE_SUBTRACT
52 STORE_FAST 2 ( i )
54 JUMP_ABSOLUTE 18
>> 56 POP_BLOCK

6 >> 58 LOAD_FAST 2 ( i )
60 LOAD_CONST 2 ( 0 )
62 COMPARE_OP 1 ( <= )
64 POP_JUMP_IF_FALSE 64

7 66 LOAD_CONST 3 ( False )
68 RETURN_VALUE

8 >> 70 LOAD_FAST 2 ( i )
72 LOAD_CONST 1 ( 1 )
74 BINARY_SUBTRACT
76 STORE_FAST 3 ( j )

9 78 SETUP_LOOP 46 ( to 116 )
>> 80 LOAD_FAST 3 ( j )
82 LOAD_CONST 1 ( 1 )
84 BINARY_ADD
86 LOAD_FAST 1 ( n )
88 COMPARE_OP 1 ( <= )
90 POP_JUMP_IF_FALSE 114
92 LOAD_FAST 0 ( str )
94 LOAD_FAST 3 ( j )
96 LOAD_CONST 1 ( 1 )
98 BINARY_ADD
100 BINARY_SUBSCR
102 LOAD_FAST 0 ( str )
104 LOAD_FAST 2 ( i )
106 LOAD_CONST 1 ( 1 )
108 BINARY_SUBTRACT
110 BINARY_SUBSCR
112 COMPARE_OP 1 ( <= )
>> 114 POP_JUMP_IF_TRUE 114

10 116 LOAD_FAST 3 ( j )
118 LOAD_CONST 1 ( 1 )
120 INPLACE_ADD
122 STORE_FAST 3 ( j )
124 JUMP_ABSOLUTE 80
>> 126 POP_BLOCK

11 >> 128 LOAD_GLOBAL 1 ( list )
130 LOAD_FAST 0 ( str )
132 CALL_FUNCTION 1
134 STORE_FAST 0 ( str )

12 136 LOAD_FAST 0 ( str )
138 LOAD_FAST 2 ( i )
140 LOAD_CONST 1 ( 1 )
142 BINARY_SUBTRACT
144 BINARY_SUBSCR
146 STORE_FAST 4 ( temp )

13 148 LOAD_FAST 0 ( str )
150 LOAD_FAST 2 ( i )
152 LOAD_CONST 1 ( 1 )
154 BINARY_SUBTRACT
156 BINARY_SUBSCR
158 STORE_FAST 5 ( temp )

14 160 LOAD_FAST 0 ( str )
162 LOAD_FAST 3 ( j )
164 BINARY_SUBSCR
166 LOAD_FAST 0 ( str )
168 LOAD_FAST 2 ( i )
170 LOAD_CONST 1 ( 1 )
172 BINARY_SUBTRACT
174 STORE_SUBSCR

15 176 LOAD_FAST 4 ( temp )
178 LOAD_FAST 0 ( str )
180 LOAD_FAST 3 ( j )
182 STORE_SUBSCR

16 184 LOAD_CONST 4 ( '' )
186 LOAD_METHOD 2 ( join )
188 LOAD_FAST 0 ( str )
190 CALL_METHOD 1
192 STORE_FAST 0 ( str )

17 194 LOAD_CONST 4 ( '' )
196 LOAD_METHOD 2 ( join )
198 LOAD_FAST 0 ( str )
200 CALL_METHOD 1
202 STORE_FAST 0 ( str )

18 204 LOAD_FAST 0 ( str )
206 LOAD_CONST 0 ( None )
208 LOAD_CONST 0 ( None )
210 LOAD_CONST 5 ( - 1 )
212 BUILD_SLICE 3
214 BINARY_SUBSCR
216 STORE_FAST 0 ( str )

19 218 LOAD_CONST 6 ( True )
220 LOAD_FAST 0 ( str )
222 BUILD_TUPLE 2
224 RETURN_VALUE
