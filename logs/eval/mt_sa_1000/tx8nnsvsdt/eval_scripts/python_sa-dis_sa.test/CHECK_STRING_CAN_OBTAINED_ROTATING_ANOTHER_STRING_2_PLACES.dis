{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str1 , str2 ) :\n    if ( len ( str1 ) != len ( str2 ) ) :\n        return False\n    clock_rot = \"\"\n    anticlock_rot = \"\"\n    l = len ( str2 )\n    anticlock_rot = ( anticlock_rot + str2 [ l - 2 : ] + str2 [ 0 : l - 2 ] )\n    clock_rot = clock_rot + str2 [ 2 : ] + str2 [ 0 : 2 ]\n    return ( str1 == clock_rot or str1 == anticlock_rot )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (\"amazon\",\"azonam\",),\n    (\"onamaz\",\"amazon\",),\n    (\"amazon\",\"azoman\",),\n    (\"ab\",\"ab\",),\n    ('737009','239119',),\n    ('000110','01111',),\n    ('l','YVo hqvnGxow',),\n    ('4420318628','52856',),\n    ('11011111000000','10',),\n    (' pvFHANc','xBIDFbiGb',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isRotated ( str1 , str2 ) :\n    if ( len ( str1 ) != len ( str2 ) ) :\n        return False\n    clock_rot = \"\"\n    anticlock_rot = \"\"\n    l = len ( str2 )\n    anticlock_rot = ( anticlock_rot + str2 [ l - 2 : ] + str2 [ 0 : l - 2 ] )\n    clock_rot = clock_rot + str2 [ 2 : ] + str2 [ 0 : 2 ]\n    return ( str1 == clock_rot or str1 == anticlock_rot )\n"}
Disassembly of <code object isRotated at 0x7f2b0164da50, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str1 )
4 CALL_FUNCTION 1
6 LOAD_GLOBAL 0 ( len )
8 LOAD_FAST 1 ( str2 )
10 CALL_FUNCTION 1
12 COMPARE_OP 3 ( != )
14 POP_JUMP_IF_FALSE 20

3 16 LOAD_CONST 1 ( False )
18 RETURN_VALUE

4 >> 20 LOAD_CONST 2 ( '' )
22 STORE_FAST 2 ( clock_)

5 24 LOAD_CONST 2 ( '' )
26 STORE_FAST 3 ( anticlock_rot )

6 28 LOAD_GLOBAL 0 ( len )
30 LOAD_FAST 1 ( str2 )
32 CALL_FUNCTION 1
34 STORE_FAST 4 ( l )

7 36 LOAD_FAST 3 ( anticlock_rot )
38 LOAD_FAST 1 ( str2 )
40 LOAD_FAST 4 ( l )
42 LOAD_CONST 3 ( 2 )
44 BINARY_SUBTRACT
46 LOAD_CONST 0 ( None )
48 BUILD_SLICE 2
50 BINARY_SUBSCR
52 BINARY_ADD
54 LOAD_FAST 1 ( str2 )
56 LOAD_CONST 4 ( 0 )
58 LOAD_FAST 4 ( l )
60 LOAD_CONST 3 ( 2 )
62 BINARY_SUBTRACT
64 BUILD_SLICE 2
66 BINARY_SUBSCR
68 BINARY_ADD
70 STORE_FAST 5 ( anticlock_rot )

8 72 LOAD_FAST 2 ( clock_)
74 LOAD_FAST 1 ( str2 )
76 LOAD_CONST 3 ( 2 )
78 LOAD_CONST 0 ( None )
80 BUILD_SLICE 2
82 BINARY_SUBSCR
84 BINARY_ADD
86 LOAD_FAST 1 ( str2 )
88 LOAD_CONST 4 ( 0 )
90 LOAD_CONST 3 ( 2 )
92 BUILD_SLICE 2
94 BINARY_SUBSCR
96 BINARY_ADD
98 STORE_FAST 2 ( clock_)

9 100 LOAD_FAST 0 ( str1 )
102 LOAD_FAST 2 ( clock_)
104 COMPARE_OP 2 ( == )
106 JUMP_IF_TRUE_OR_POP 116
108 LOAD_FAST 0 ( str1 )
110 LOAD_FAST 5 ( anticlock_rot )
112 COMPARE_OP 2 ( == )
114 RETURN_VALUE
