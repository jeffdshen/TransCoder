{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    maxA = - 100000000\n    maxB = - 100000000\n    maxC = - 100000000\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] > maxA ) :\n            maxC = maxB\n            maxB = maxA\n            maxA = arr [ i ]\n        elif ( arr [ i ] > maxB ) :\n            maxC = maxB\n            maxB = arr [ i ]\n        elif ( arr [ i ] > maxC ) :\n            maxC = arr [ i ]\n    return ( maxA + maxB + maxC )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 7, 12, 21, 22, 25, 27, 28, 28, 31, 32, 32, 41, 45, 47, 51, 53, 60, 61, 61, 63, 71, 74, 82, 83, 85, 88, 92, 96, 96],28,),\n    ([-52, 26, 74, -62, -76],2,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],11,),\n    ([63, 71, 15, 28, 31, 84, 8, 17, 24, 42, 66, 95, 30],6,),\n    ([-94, -92, -92, -90, -88, -88, -86, -82, -80, -78, -66, -54, -52, -52, -46, -46, -42, -36, -32, -24, -24, -14, -14, -14, -12, -10, 0, 6, 8, 20, 24, 24, 28, 38, 38, 52, 54, 56, 64, 74, 74, 76, 82, 94, 94],31,),\n    ([0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0],30,),\n    ([15, 19, 80],2,),\n    ([4, 80, 18, 74, 36, -30, -72, -28, -32, -16, -8, 38, 78, -48, 98, -64, 86, -60, -44, 84, -98, 40, 14, 30, 44, 90, -30, -42, 24, -28, 24, 40, -96, 98, 90, -68, -54, -52, 62, 34, -98, 68, -56, -94, -78, -12, 28],41,),\n    ([0, 1, 1, 1, 1, 1],3,),\n    ([2, 18, 96, 7, 99, 83, 3, 88, 23, 77, 6, 28, 55, 49, 69, 55, 48, 76, 43, 11, 43, 44, 17, 74, 27, 64, 76, 77, 53, 26, 73, 12, 19, 62, 18, 34, 13, 31, 97, 96, 85, 27, 30, 97, 89, 25],41,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxTripletSum ( arr , n ) :\n    maxA = - 100000000\n    maxB = - 100000000\n    maxC = - 100000000\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] > maxA ) :\n            maxC = maxB\n            maxB = maxA\n            maxA = arr [ i ]\n        elif ( arr [ i ] > maxB ) :\n            maxC = maxB\n            maxB = arr [ i ]\n        elif ( arr [ i ] > maxC ) :\n            maxC = arr [ i ]\n    return ( maxA + maxB + maxC )\n"}
Disassembly of <code object maxTripletSum at 0x7f2b0164d6f0, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - 100000000 )
2 STORE_FAST 2 ( maxA )

3 4 LOAD_CONST 1 ( - 100000000 )
6 STORE_FAST 3 ( maxB )

4 8 LOAD_CONST 1 ( - 100000000 )
10 STORE_FAST 4 ( maxC )

5 12 SETUP_LOOP 96 ( to 118 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_CONST 2 ( 0 )
18 LOAD_FAST 1 ( n )
20 CALL_FUNCTION 2
22 GET_ITER
>> 24 FOR_ITER 82 ( to 116 )
26 STORE_FAST 5 ( i )

6 28 LOAD_FAST 0 ( arr )
30 LOAD_FAST 5 ( i )
32 BINARY_SUBSCR
34 LOAD_FAST 3 ( maxA )
36 COMPARE_OP 4 ( > )
38 POP_JUMP_IF_FALSE 64

7 40 LOAD_FAST 4 ( maxC )
42 STORE_FAST 3 ( maxC )

8 44 LOAD_FAST 3 ( maxA )
46 STORE_FAST 4 ( maxB )

9 48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 5 ( i )
52 BINARY_SUBSCR
54 STORE_FAST 3 ( maxA )
56 JUMP_ABSOLUTE 24

10 >> 58 LOAD_FAST 0 ( arr )
60 LOAD_FAST 5 ( i )
62 BINARY_SUBSCR
64 LOAD_FAST 3 ( maxB )
66 COMPARE_OP 4 ( > )
68 POP_JUMP_IF_FALSE 82

11 70 LOAD_FAST 4 ( maxB )
72 STORE_FAST 4 ( maxC )

12 74 LOAD_FAST 0 ( arr )
76 LOAD_FAST 5 ( i )
78 BINARY_SUBSCR
80 STORE_FAST 3 ( maxB )
84 JUMP_ABSOLUTE 24

13 >> 86 LOAD_FAST 0 ( arr )
88 LOAD_FAST 5 ( i )
90 BINARY_SUBSCR
92 LOAD_FAST 4 ( maxC )
94 COMPARE_OP 4 ( > )
96 POP_JUMP_IF_FALSE 112

14 98 LOAD_FAST 0 ( arr )
100 LOAD_FAST 5 ( i )
102 BINARY_SUBSCR
104 STORE_FAST 4 ( maxC )
106 JUMP_ABSOLUTE 24
>> 108 POP_BLOCK

15 >> 110 LOAD_FAST 3 ( maxA )
112 LOAD_FAST 4 ( maxB )
114 BINARY_ADD
116 LOAD_FAST 3 ( maxC )
118 BINARY_ADD
120 RETURN_VALUE
