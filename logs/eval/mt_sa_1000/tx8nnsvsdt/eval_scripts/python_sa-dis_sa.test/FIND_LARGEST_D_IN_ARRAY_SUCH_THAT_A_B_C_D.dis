{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( S , n ) :\n    found = False\n    S.sort ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                continue\n            for k in range ( j + 1 , n ) :\n                if ( i == k ) :\n                    continue\n                for l in range ( k + 1 , n ) :\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n    if ( found == False ) :\n        return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([8, 12, 14, 15, 16, 20, 27, 28, 29, 30, 35, 41, 46, 51, 53, 55, 55, 58, 63, 64, 72, 73, 75, 75, 75, 82, 82, 86, 89, 91, 92, 94, 95, 95, 97, 97, 98],24,),\n    ([-62, 48, -22, -44, -58, -50, -82, 34, 26, -2, 86, -44, 92, -96, 42, -20, 10, 74, -56, -12, -28, -40],19,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1],8,),\n    ([84, 58, 10, 67, 77, 66, 10, 47, 65, 55, 54],5,),\n    ([-46, -28, -20, -18, 4, 8, 18, 38, 90, 90],6,),\n    ([0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0],35,),\n    ([11, 13, 14, 21, 26, 28, 36, 39, 41, 42, 43, 44, 49, 49, 57, 58, 59, 59, 63, 64, 67, 69, 70, 75, 78, 79, 83, 83, 86, 91, 92, 93, 96, 96, 96, 97],30,),\n    ([74, 52, -16, 34, -88, 62, 54, 46, -82, 76, -48, 54, 50, -66, -18, 78, -48, 38, 96, -32, -82, 0, -76, 46, -56, 4, -30, -70, -62],16,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],17,),\n    ([55, 74, 18, 4, 68, 66, 33, 61, 66, 92, 21, 9, 49, 14, 99, 87, 74, 6, 11, 25, 5, 58, 56, 20],23,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findLargestd ( S , n ) :\n    found = False\n    S.sort ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                continue\n            for k in range ( j + 1 , n ) :\n                if ( i == k ) :\n                    continue\n                for l in range ( k + 1 , n ) :\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n    if ( found == False ) :\n        return - 1\n"}
Disassembly of <code object findLargestd at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( False )
2 STORE_FAST 2 ( found )

3 4 LOAD_FAST 0 ( S )
6 LOAD_METHOD 0 ( sort )
8 CALL_METHOD 0
10 POP_TOP

4 12 SETUP_LOOP 156 ( to 198 )
14 LOAD_GLOBAL 1 ( range )
16 LOAD_FAST 1 ( n )
18 LOAD_CONST 2 ( 1 )
20 BINARY_SUBTRACT
22 LOAD_CONST 3 ( - 1 )
24 LOAD_CONST 3 ( - 1 )
26 CALL_FUNCTION 3
28 GET_ITER
>> 30 FOR_ITER 138 ( to 196 )
32 STORE_FAST 3 ( i )

5 34 SETUP_LOOP 132 ( to 194 )
36 LOAD_GLOBAL 1 ( range )
38 LOAD_CONST 4 ( 0 )
40 LOAD_FAST 1 ( n )
42 CALL_FUNCTION 2
44 GET_ITER
>> 46 FOR_ITER 124 ( to 192 )
48 STORE_FAST 4 ( j )

6 50 LOAD_FAST 3 ( i )
52 LOAD_FAST 4 ( j )
54 COMPARE_OP 2 ( == )
56 POP_JUMP_IF_FALSE 62

7 58 JUMP_ABSOLUTE 46

8 >> 60 SETUP_LOOP 122 ( to 190 )
62 LOAD_GLOBAL 1 ( range )
64 LOAD_FAST 4 ( j )
66 LOAD_CONST 2 ( 1 )
68 BINARY_ADD
70 LOAD_FAST 1 ( n )
72 CALL_FUNCTION 2
74 GET_ITER
>> 76 FOR_ITER 100 ( to 188 )
78 STORE_FAST 5 ( k )

9 80 LOAD_FAST 3 ( i )
82 LOAD_FAST 5 ( k )
84 COMPARE_OP 2 ( == )
86 POP_JUMP_IF_FALSE 92

10 88 JUMP_ABSOLUTE 76
90 JUMP_ABSOLUTE 76

11 >> 92 SETUP_LOOP 90 ( to 186 )
94 LOAD_GLOBAL 1 ( range )
96 LOAD_FAST 5 ( k )
98 LOAD_CONST 2 ( 1 )
100 BINARY_ADD
102 LOAD_FAST 1 ( n )
104 CALL_FUNCTION 2
106 GET_ITER
>> 108 FOR_ITER 58 ( to 184 )
110 STORE_FAST 6 ( l )

12 112 LOAD_FAST 3 ( i )
114 LOAD_FAST 6 ( l )
116 COMPARE_OP 2 ( == )
118 POP_JUMP_IF_FALSE 132

13 120 JUMP_ABSOLUTE 108

14 >> 122 LOAD_FAST 0 ( S )
124 LOAD_FAST 3 ( i )
126 BINARY_SUBSCR
128 LOAD_FAST 0 ( S )
130 LOAD_FAST 4 ( j )
132 BINARY_SUBSCR
134 LOAD_FAST 0 ( S )
136 LOAD_FAST 5 ( k )
138 BINARY_SUBSCR
140 BINARY_ADD
142 LOAD_FAST 0 ( S )
144 LOAD_FAST 5 ( k )
146 BINARY_SUBSCR
148 BINARY_ADD
150 LOAD_FAST 0 ( S )
152 LOAD_FAST 6 ( l )
154 BINARY_SUBSCR
156 BINARY_ADD
158 BINARY_ADD
160 COMPARE_OP 2 ( == )
162 POP_JUMP_IF_FALSE 168

15 164 LOAD_CONST 5 ( True )
166 STORE_FAST 2 ( found )

16 168 LOAD_FAST 0 ( S )
170 LOAD_FAST 3 ( i )
172 BINARY_SUBSCR
174 RETURN_VALUE
>> 176 JUMP_ABSOLUTE 108
>> 178 POP_BLOCK
>> 180 JUMP_ABSOLUTE 30
>> 182 POP_BLOCK

17 >> 184 LOAD_FAST 2 ( found )
186 LOAD_CONST 1 ( False )
188 COMPARE_OP 2 ( == )
190 POP_JUMP_IF_FALSE 30

18 192 LOAD_CONST 3 ( - 1 )
194 RETURN_VALUE
>> 196 LOAD_CONST 0 ( None )
198 RETURN_VALUE
