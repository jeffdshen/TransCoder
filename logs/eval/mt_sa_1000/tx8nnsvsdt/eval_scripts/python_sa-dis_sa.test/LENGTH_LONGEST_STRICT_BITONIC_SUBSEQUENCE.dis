{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    inc , dcr = dict ( ) , dict ( )\n    len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n\n    longLen = 0\n    for i in range ( n ) :\n        len = 0\n        if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :\n            len = inc.get ( arr [ i ] - 1 )\n        inc [ arr [ i ] ] = len_inc [ i ] = len + 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        len = 0\n        if dcr.get ( arr [ i ] - 1 ) in dcr.values ( ) :\n            len = dcr.get ( arr [ i ] - 1 )\n        dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1\n    for i in range ( n ) :\n        if longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) :\n            longLen = len_inc [ i ] + len_dcr [ i ] - 1\n    return longLen\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([78],0,),\n    ([-6, -18, -48, 58, -54, 76, 80, -56, 86, 58, -86, -86, -88, 32, 12, 58, 58, -16, 86, -24, 84, 86, 36, 18, 30, -32, -4, -36, -72, -4, 42, 94],18,),\n    ([0, 1],1,),\n    ([92, 26, 72, 8, 66, 28, 34, 61, 28],5,),\n    ([-86, -82, -76, -68, -66, -64, -62, -56, -48, -42, -38, -30, -22, -18, -10, -10, -4, -2, 4, 28, 42, 44, 50, 50, 56, 58, 60, 76, 82, 86, 86, 98],25,),\n    ([0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],17,),\n    ([3, 4, 8, 9, 12, 13, 16, 19, 23, 25, 29, 31, 34, 36, 38, 41, 42, 47, 49, 50, 51, 51, 58, 63, 66, 70, 73, 74, 75, 75, 75, 76, 76, 80, 82, 83, 83, 84, 86, 89, 90, 91, 91, 95, 96],44,),\n    ([4, -76, 60, 48, -14, 72],3,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],17,),\n    ([66, 80, 79, 72, 1, 67, 20, 67, 32, 40, 22, 64, 58, 67, 10, 21, 37, 49],15,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def longLenStrictBitonicSub ( arr , n ) :\n    inc , dcr = dict ( ) , dict ( )\n    len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n\n    longLen = 0\n    for i in range ( n ) :\n        len = 0\n        if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :\n            len = inc.get ( arr [ i ] - 1 )\n        inc [ arr [ i ] ] = len_inc [ i ] = len + 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        len = 0\n        if dcr.get ( arr [ i ] - 1 ) in dcr.values ( ) :\n            len = dcr.get ( arr [ i ] - 1 )\n        dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1\n    for i in range ( n ) :\n        if longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) :\n            longLen = len_inc [ i ] + len_dcr [ i ] - 1\n    return longLen\n"}
Disassembly of <code object longLenStrictBitonicSub at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( dict )
2 CALL_FUNCTION 0
4 LOAD_GLOBAL 0 ( dict )
6 CALL_FUNCTION 0
8 ROT_TWO
10 STORE_FAST 2 ( inc )
12 STORE_FAST 3 ( dcr )

3 14 LOAD_CONST 1 ( 0 )
16 BUILD_LIST 1
18 LOAD_FAST 1 ( n )
20 BINARY_MULTIPLY
22 LOAD_CONST 1 ( 0 )
24 BUILD_LIST 1
26 LOAD_FAST 1 ( n )
28 BINARY_MULTIPLY
30 ROT_TWO
32 STORE_FAST 4 ( len_inc )
34 STORE_FAST 5 ( len_dcr )

4 36 LOAD_CONST 1 ( 0 )
38 STORE_FAST 6 ( longLen )

5 40 SETUP_LOOP 76 ( to 124 )
42 LOAD_GLOBAL 1 ( range )
44 LOAD_FAST 1 ( n )
46 CALL_FUNCTION 1
48 GET_ITER
>> 50 FOR_ITER 60 ( to 122 )
52 STORE_FAST 7 ( i )

6 54 LOAD_CONST 1 ( 0 )
56 STORE_FAST 8 ( len )

7 58 LOAD_FAST 2 ( inc )
60 LOAD_METHOD 2 ( get )
62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 7 ( i )
66 BINARY_SUBSCR
68 LOAD_CONST 2 ( 1 )
70 BINARY_SUBTRACT
72 CALL_METHOD 1
74 LOAD_FAST 2 ( inc )
76 LOAD_METHOD 3 ( values )
78 CALL_METHOD 0
80 COMPARE_OP 6 ( in )
82 POP_JUMP_IF_FALSE 90

8 84 LOAD_FAST 2 ( inc )
86 LOAD_METHOD 2 ( get )
88 LOAD_FAST 0 ( arr )
90 LOAD_FAST 7 ( i )
92 BINARY_SUBSCR
94 LOAD_CONST 2 ( 1 )
96 BINARY_SUBTRACT
98 CALL_METHOD 1
100 STORE_FAST 8 ( len )
102 JUMP_ABSOLUTE 50
104 POP_BLOCK

9 >> 106 LOAD_FAST 4 ( len_inc )
108 LOAD_FAST 7 ( i )
110 BINARY_SUBSCR
112 LOAD_FAST 2 ( inc )
114 LOAD_FAST 0 ( arr )
116 LOAD_FAST 7 ( i )
118 BINARY_SUBSCR
120 STORE_SUBSCR

10 >> 122 SETUP_LOOP 76 ( to 218 )
124 LOAD_GLOBAL 1 ( range )
126 LOAD_FAST 1 ( n )
128 LOAD_CONST 2 ( 1 )
130 BINARY_SUBTRACT
132 LOAD_CONST 3 ( - 1 )
134 LOAD_CONST 3 ( - 1 )
136 CALL_FUNCTION 3
138 GET_ITER
>> 140 FOR_ITER 60 ( to 216 )
142 STORE_FAST 7 ( i )

11 144 LOAD_CONST 1 ( 0 )
146 STORE_FAST 8 ( len )

12 148 LOAD_FAST 3 ( dcr )
150 LOAD_METHOD 2 ( get )
152 LOAD_FAST 0 ( arr )
154 LOAD_FAST 7 ( i )
156 BINARY_SUBSCR
158 LOAD_CONST 2 ( 1 )
160 BINARY_SUBTRACT
162 CALL_METHOD 1
164 LOAD_FAST 3 ( dcr )
166 LOAD_METHOD 3 ( values )
168 CALL_METHOD 0
170 COMPARE_OP 6 ( in )
172 POP_JUMP_IF_FALSE 176

13 174 LOAD_FAST 3 ( dcr )
176 LOAD_METHOD 2 ( get )
178 LOAD_FAST 0 ( arr )
180 LOAD_FAST 7 ( i )
182 BINARY_SUBSCR
184 LOAD_CONST 2 ( 1 )
186 BINARY_SUBTRACT
188 CALL_METHOD 1
190 STORE_FAST 8 ( len )

14 >> 192 LOAD_FAST 5 ( len_dcdcr )
194 LOAD_FAST 7 ( i )
196 STORE_SUBSCR

15 198 LOAD_FAST 8 ( len )
200 LOAD_CONST 2 ( 1 )
202 BINARY_ADD
204 LOAD_FAST 3 ( dcr )
206 LOAD_FAST 0 ( arr )
208 LOAD_FAST 7 ( i )
210 BINARY_SUBSCR
212 STORE_SUBSCR
214 JUMP_ABSOLUTE 140
>> 216 POP_BLOCK

16 >> 218 SETUP_LOOP 54 ( to 218 )
220 LOAD_GLOBAL 1 ( range )
222 LOAD_FAST 1 ( n )
224 CALL_FUNCTION 1
226 GET_ITER
>> 228 FOR_ITER 46 ( to 216 )
230 STORE_FAST 7 ( i )

17 232 LOAD_FAST 6 ( longLen )
234 LOAD_FAST 7 ( i )
236 BINARY_SUBSCR
238 LOAD_FAST 5 ( len_dcr )
240 LOAD_FAST 7 ( i )
242 BINARY_SUBSCR
244 BINARY_ADD
246 LOAD_CONST 2 ( 1 )
248 BINARY_SUBTRACT
250 COMPARE_OP 4 ( > )
252 POP_JUMP_IF_FALSE 228

18 254 LOAD_FAST 6 ( len_Len )
256 LOAD_FAST 7 ( i )
258 BINARY_SUBSCR
260 LOAD_FAST 5 ( len_dcr )
262 LOAD_FAST 7 ( i )
264 BINARY_SUBSCR
266 BINARY_ADD
268 LOAD_CONST 2 ( 1 )
270 BINARY_SUBTRACT
272 BINARY_ADD
270 STORE_FAST 6 ( longLen )
272 JUMP_ABSOLUTE 228
>> 274 POP_BLOCK

19 >> 276 LOAD_FAST 6 ( longLen )
278 RETURN_VALUE
