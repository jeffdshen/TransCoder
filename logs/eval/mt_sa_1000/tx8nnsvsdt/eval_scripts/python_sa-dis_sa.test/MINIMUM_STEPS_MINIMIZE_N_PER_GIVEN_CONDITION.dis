{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    table = [ 0 ] * ( n + 1 )\n    for i in range ( n + 1 ) :\n        table [ i ] = n - i\n    for i in range ( n , 0 , - 1 ) :\n        if ( not ( i % 2 ) ) :\n            table [ i // 2 ] = min ( table [ i ] + 1 , table [ i // 2 ] )\n        if ( not ( i % 3 ) ) :\n            table [ i // 3 ] = min ( table [ i ] + 1 , table [ i // 3 ] )\n    return table [ 1 ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (59,),\n    (7,),\n    (90,),\n    (78,),\n    (49,),\n    (15,),\n    (45,),\n    (56,),\n    (7,),\n    (70,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def getMinSteps ( n ) :\n    table = [ 0 ] * ( n + 1 )\n    for i in range ( n + 1 ) :\n        table [ i ] = n - i\n    for i in range ( n , 0 , - 1 ) :\n        if ( not ( i % 2 ) ) :\n            table [ i // 2 ] = min ( table [ i ] + 1 , table [ i // 2 ] )\n        if ( not ( i % 3 ) ) :\n            table [ i // 3 ] = min ( table [ i ] + 1 , table [ i // 3 ] )\n    return table [ 1 ]\n    "}
Disassembly of <code object getMinSteps at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_FAST 0 ( n )
6 LOAD_CONST 2 ( 1 )
8 BINARY_ADD
10 BINARY_MULTIPLY
12 STORE_FAST 1 ( table )

3 14 SETUP_LOOP 30 ( to 46 )
16 LOAD_GLOBAL 0 ( range )
18 LOAD_FAST 0 ( n )
20 LOAD_CONST 2 ( 1 )
22 BINARY_ADD
24 CALL_FUNCTION 1
26 GET_ITER
>> 28 FOR_ITER 18 ( to 44 )
30 STORE_FAST 2 ( i )

4 32 LOAD_FAST 0 ( n )
34 LOAD_FAST 2 ( i )
36 BINARY_SUBTRACT
38 LOAD_FAST 1 ( table )
40 LOAD_FAST 2 ( i )
42 STORE_SUBSCR
>> 44 JUMP_ABSOLUTE 28
>> 46 POP_BLOCK

5 48 SETUP_LOOP 64 ( to 108 )
50 LOAD_GLOBAL 0 ( range )
52 LOAD_FAST 0 ( n )
54 LOAD_CONST 1 ( 0 )
56 LOAD_CONST 3 ( - 1 )
58 CALL_FUNCTION 3
60 GET_ITER
>> 62 FOR_ITER 46 ( to 106 )
64 STORE_FAST 2 ( i )

6 66 LOAD_FAST 2 ( i )
68 LOAD_FAST 2 ( i )
70 LOAD_CONST 4 ( 2 )
72 BINARY_MODULO
74 POP_JUMP_IF_TRUE 62

7 76 LOAD_GLOBAL 1 ( min )
78 LOAD_FAST 1 ( table )
80 LOAD_FAST 2 ( i )
82 BINARY_SUBSCR
84 LOAD_CONST 2 ( 1 )
86 BINARY_ADD
88 LOAD_FAST 1 ( table )
90 LOAD_FAST 2 ( i )
92 LOAD_CONST 4 ( 2 )
94 BINARY_FLOOR_DIVIDE
96 BINARY_SUBSCR
98 CALL_FUNCTION 2
100 LOAD_FAST 1 ( table )
102 LOAD_FAST 2 ( i )
104 LOAD_CONST 4 ( 2 )
106 BINARY_FLOOR_DIVIDE
108 BINARY_SUBSCR
110 CALL_FUNCTION 2
112 LOAD_FAST 1 ( table )
114 LOAD_FAST 2 ( i )
116 LOAD_CONST 5 ( 3 )
118 BINARY_FLOOR_DIVIDE
120 STORE_SUBSCR

8 >> 122 LOAD_FAST 2 ( i )
124 LOAD_CONST 6 ( 3 )
126 BINARY_MODULO
128 POP_JUMP_IF_TRUE 164

9 130 LOAD_GLOBAL 1 ( min )
132 LOAD_FAST 1 ( table )
134 LOAD_FAST 2 ( i )
136 BINARY_SUBSCR
138 LOAD_CONST 2 ( 1 )
140 BINARY_ADD
142 LOAD_FAST 1 ( table )
144 LOAD_FAST 2 ( i )
146 LOAD_CONST 6 ( 3 )
148 BINARY_FLOOR_DIVIDE
150 BINARY_SUBSCR
152 CALL_FUNCTION 2
154 LOAD_FAST 1 ( table )
156 LOAD_FAST 2 ( i )
158 LOAD_CONST 6 ( 3 )
160 BINARY_FLOOR_DIVIDE
162 STORE_SUBSCR

10 >> 164 LOAD_FAST 1 ( table )
166 LOAD_CONST 2 ( 1 )
168 BINARY_SUBSCR
170 RETURN_VALUE
