{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , k ) :\n    for i in range ( k , n ) :\n        max_var = arr [ k - 1 ]\n        pos = k - 1\n        for j in range ( k - 2 , - 1 , - 1 ) :\n            if ( arr [ j ] > max_var ) :\n                max_var = arr [ j ]\n                pos = j\n        if ( max_var > arr [ i ] ) :\n            j = pos\n            while ( j < k - 1 ) :\n                arr [ j ] = arr [ j + 1 ]\n                j += 1\n            arr [ k - 1 ] = arr [ i ]\n    for i in range ( 0 , k ) :\n        print ( arr [ i ] , end = \" \" )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 7, 8, 11, 11, 25, 28, 29, 30, 37, 41, 43, 46, 50, 57, 61, 61, 64, 65, 69, 78, 80, 84, 85, 85, 85, 89, 90, 94, 94, 97],30,19,),\n    ([-72, 44, -60, -22, -50, 68, -36, -44, -4, -42, 90, 90, -46, -16, -20, -88, 8, -98, -86, -20, 54, 56, 94, -20, -88, 78, 60, -20, -70, 82, -4],20,27,),\n    ([0, 0, 1, 1],3,3,),\n    ([54, 37, 29, 37, 71, 91, 91, 79, 60, 38, 63, 54, 91, 9, 14, 43, 12, 98, 46, 62, 89, 56, 44, 82, 11, 17, 94],17,15,),\n    ([-94, -94, -92, -82, -80, -70, -70, -64, -62, -60, -60, -58, -52, -14, -8, -6, 2, 4, 12, 16, 18, 20, 36, 38, 42, 48, 60, 66, 78, 78, 84],28,16,),\n    ([1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1],22,21,),\n    ([1, 2, 11, 18, 25, 30, 34, 43, 46, 49, 55, 58, 58, 60, 70, 78, 85, 88, 99],12,17,),\n    ([-48, 46, -6, 26, -62, 44, 60, -84, -20, 96, -60, -70, -90, -92, -70, 14, 60, 54, 50, 20, -2, -36, -12, 18],19,21,),\n    ([0],0,0,),\n    ([4, 99, 78, 78, 91, 14, 32, 3, 23, 37, 19, 45, 14, 55, 74, 15, 68, 79, 88, 31, 20, 72, 55, 37, 72, 81, 83, 53, 32, 64],22,27,)\n        ]\n    filled_function_param = [\n    ([2, 7, 8, 11, 11, 25, 28, 29, 30, 37, 41, 43, 46, 50, 57, 61, 61, 64, 65, 69, 78, 80, 84, 85, 85, 85, 89, 90, 94, 94, 97],30,19,),\n    ([-72, 44, -60, -22, -50, 68, -36, -44, -4, -42, 90, 90, -46, -16, -20, -88, 8, -98, -86, -20, 54, 56, 94, -20, -88, 78, 60, -20, -70, 82, -4],20,27,),\n    ([0, 0, 1, 1],3,3,),\n    ([54, 37, 29, 37, 71, 91, 91, 79, 60, 38, 63, 54, 91, 9, 14, 43, 12, 98, 46, 62, 89, 56, 44, 82, 11, 17, 94],17,15,),\n    ([-94, -94, -92, -82, -80, -70, -70, -64, -62, -60, -60, -58, -52, -14, -8, -6, 2, 4, 12, 16, 18, 20, 36, 38, 42, 48, 60, 66, 78, 78, 84],28,16,),\n    ([1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1],22,21,),\n    ([1, 2, 11, 18, 25, 30, 34, 43, 46, 49, 55, 58, 58, 60, 70, 78, 85, 88, 99],12,17,),\n    ([-48, 46, -6, 26, -62, 44, 60, -84, -20, 96, -60, -70, -90, -92, -70, 14, 60, 54, 50, 20, -2, -36, -12, 18],19,21,),\n    ([0],0,0,),\n    ([4, 99, 78, 78, 91, 14, 32, 3, 23, 37, 19, 45, 14, 55, 74, 15, 68, 79, 88, 31, 20, 72, 55, 37, 72, 81, 83, 53, 32, 64],22,27,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def printSmall ( arr , n , k ) :\n    for i in range ( k , n ) :\n        max_var = arr [ k - 1 ]\n        pos = k - 1\n        for j in range ( k - 2 , - 1 , - 1 ) :\n            if ( arr [ j ] > max_var ) :\n                max_var = arr [ j ]\n                pos = j\n        if ( max_var > arr [ i ] ) :\n            j = pos\n            while ( j < k - 1 ) :\n                arr [ j ] = arr [ j + 1 ]\n                j += 1\n            arr [ k - 1 ] = arr [ i ]\n    for i in range ( 0 , k ) :\n        print ( arr [ i ] , end = \" \" )\n"}
Disassembly of <code object printSmall at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 SETUP_LOOP 120 ( to 122 )
2 LOAD_GLOBAL 0 ( range )
4 LOAD_FAST 2 ( k )
6 LOAD_FAST 1 ( n )
8 CALL_FUNCTION 2
10 GET_ITER
>> 12 FOR_ITER 108 ( to 120 )
14 STORE_FAST 3 ( i )

3 16 LOAD_FAST 0 ( arr )
18 LOAD_FAST 2 ( k )
20 LOAD_CONST 1 ( 1 )
22 BINARY_SUBTRACT
24 BINARY_SUBSCR
26 STORE_FAST 4 ( max_var )

4 28 LOAD_FAST 2 ( k )
30 LOAD_CONST 1 ( 1 )
32 BINARY_SUBTRACT
34 STORE_FAST 5 ( pos )

5 36 SETUP_LOOP 46 ( to 88 )
38 LOAD_GLOBAL 0 ( range )
40 LOAD_FAST 2 ( k )
42 LOAD_CONST 2 ( 2 )
44 BINARY_SUBTRACT
46 LOAD_CONST 3 ( - 1 )
48 LOAD_CONST 3 ( - 1 )
50 CALL_FUNCTION 3
52 GET_ITER
>> 54 FOR_ITER 30 ( to 86 )
56 STORE_FAST 6 ( j )

6 58 LOAD_FAST 0 ( arr )
60 LOAD_FAST 6 ( j )
62 BINARY_SUBSCR
64 LOAD_FAST 4 ( max_var )
66 COMPARE_OP 4 ( > )
68 POP_JUMP_IF_FALSE 54

7 70 LOAD_FAST 0 ( arr )
72 LOAD_FAST 6 ( j )
74 BINARY_SUBSCR
76 STORE_FAST 4 ( max_var )

8 78 LOAD_FAST 6 ( j )
80 STORE_FAST 5 ( pos )
82 JUMP_ABSOLUTE 54
>> 84 POP_BLOCK
>> 86 JUMP_ABSOLUTE 12
>> 88 POP_BLOCK

9 >> 90 LOAD_FAST 4 ( max_var )
92 LOAD_FAST 0 ( arr )
94 LOAD_FAST 3 ( i )
96 BINARY_SUBSCR
98 COMPARE_OP 4 ( > )
100 POP_JUMP_IF_FALSE 12

10 102 LOAD_FAST 5 ( pos )
104 STORE_FAST 6 ( j )

11 106 SETUP_LOOP 32 ( to 138 )
>> 108 LOAD_FAST 6 ( j )
110 LOAD_FAST 2 ( k )
112 LOAD_CONST 1 ( 1 )
114 BINARY_SUBTRACT
116 COMPARE_OP 0 ( < )
118 POP_JUMP_IF_FALSE 136

12 120 LOAD_FAST 0 ( arr )
122 LOAD_FAST 6 ( j )
124 LOAD_CONST 1 ( 1 )
126 BINARY_ADD
128 BINARY_SUBSCR
130 LOAD_FAST 0 ( arr )
132 LOAD_FAST 6 ( j )
134 STORE_SUBSCR

13 136 LOAD_FAST 6 ( j )
138 LOAD_CONST 1 ( 1 )
140 INPLACE_ADD
142 STORE_FAST 6 ( j )
144 JUMP_ABSOLUTE 108
>> 146 POP_BLOCK

14 >> 148 SETUP_LOOP 32 ( to 194 )
150 LOAD_GLOBAL 0 ( range )
152 LOAD_CONST 4 ( 0 )
154 LOAD_FAST 2 ( k )
156 CALL_FUNCTION 2
158 GET_ITER
>> 160 FOR_ITER 18 ( to 192 )
162 STORE_FAST 3 ( i )

15 164 LOAD_GLOBAL 1 ( print )
166 LOAD_FAST 0 ( arr )
168 LOAD_FAST 3 ( i )
170 BINARY_SUBSCR
172 LOAD_CONST 5 ( ' ' )
174 LOAD_CONST 6 ( ( 'end' , ) )
176 CALL_FUNCTION_KW 2
178 POP_TOP
180 JUMP_ABSOLUTE 160
>> 182 POP_BLOCK
>> 184 LOAD_CONST 0 ( None )
186 RETURN_VALUE
