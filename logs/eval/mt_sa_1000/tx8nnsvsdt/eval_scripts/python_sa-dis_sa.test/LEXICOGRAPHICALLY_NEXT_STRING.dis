{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    if ( s == \" \" ) :\n        return \"a\"\n    i = len ( s ) - 1\n    while ( s [ i ] == 'z' and i >= 0 ) :\n        i -= 1\n    if ( i == - 1 ) :\n        s = s + 'a'\n    else :\n        s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) , 1 )\n    return s\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('amKIRzPiqLTIy',),\n    ('68',),\n    ('100',),\n    ('f',),\n    ('802205375',),\n    ('0111',),\n    ('GRjRYIvYwgua',),\n    ('8139910006809',),\n    ('100101',),\n    ('rw',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def nextWord ( s ) :\n    if ( s == \" \" ) :\n        return \"a\"\n    i = len ( s ) - 1\n    while ( s [ i ] == 'z' and i >= 0 ) :\n        i -= 1\n    if ( i == - 1 ) :\n        s = s + 'a'\n    else :\n        s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) , 1 )\n    return s\n"}
Disassembly of <code object nextWord at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( s )
2 LOAD_CONST 1 ( ' ' )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( 'a' )
10 RETURN_VALUE

4 >> 12 LOAD_GLOBAL 0 ( len )
14 LOAD_FAST 0 ( s )
16 CALL_FUNCTION 1
18 LOAD_CONST 3 ( 1 )
20 BINARY_SUBTRACT
22 STORE_FAST 1 ( i )

5 24 SETUP_LOOP 48 ( to 76 )
>> 26 LOAD_FAST 0 ( s )
28 LOAD_FAST 1 ( i )
30 BINARY_SUBSCR
32 LOAD_CONST 4 ( 'z' )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 60
38 LOAD_FAST 1 ( i )
40 LOAD_CONST 5 ( 0 )
42 COMPARE_OP 5 ( >= )
44 POP_JUMP_IF_FALSE 60

6 46 LOAD_FAST 1 ( i )
48 LOAD_CONST 3 ( 1 )
50 INPLACE_SUBTRACT
52 STORE_FAST 1 ( i )
54 JUMP_ABSOLUTE 26
>> 56 POP_BLOCK

7 58 LOAD_FAST 1 ( i )
60 LOAD_CONST 6 ( - 1 )
62 COMPARE_OP 2 ( == )
64 POP_JUMP_IF_FALSE 74

8 66 LOAD_FAST 0 ( s )
68 LOAD_CONST 2 ( 'a' )
70 BINARY_ADD
72 STORE_FAST 0 ( s )

10 >> 74 LOAD_FAST 0 ( s )
76 LOAD_METHOD 1 ( replace )
78 LOAD_FAST 0 ( s )
80 LOAD_FAST 1 ( i )
82 BINARY_SUBSCR
84 LOAD_GLOBAL 2 ( chr )
86 LOAD_GLOBAL 3 ( ord )
88 LOAD_FAST 0 ( s )
90 LOAD_FAST 1 ( i )
92 BINARY_SUBSCR
94 CALL_FUNCTION 1
96 LOAD_CONST 3 ( 1 )
98 BINARY_ADD
100 CALL_FUNCTION 1
102 LOAD_CONST 3 ( 1 )
104 CALL_METHOD 3
106 STORE_FAST 0 ( s )

11 108 LOAD_FAST 0 ( s )
110 RETURN_VALUE
