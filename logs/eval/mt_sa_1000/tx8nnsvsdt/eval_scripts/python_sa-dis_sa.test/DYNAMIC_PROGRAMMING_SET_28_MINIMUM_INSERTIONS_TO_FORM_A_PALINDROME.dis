{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport sys\n\ndef f_gold ( str , l , h ) :\n    if ( l > h ) :\n        return sys.maxsize\n    if ( l == h ) :\n        return 0\n    if ( l == h - 1 ) :\n        return 0 if ( str [ l ] == str [ h ] ) else 1\n    if ( str [ l ] == str [ h ] ) :\n        return f_gold ( str , l + 1 , h - 1 )\n    else :\n        return ( min ( f_gold ( str , l , h - 1 ) , f_gold ( str , l + 1 , h ) ) + 1 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (['F', 'F', 'J', 'K', 'K', 'L', 'P', 'S', 'T', 'V', 'W', 'Y', 'b', 'd', 'j', 'l', 't', 'u', 'x', 'y'],11,11,),\n    (['0', '1', '8', '8', '8', '4', '4', '3', '9', '6', '5', '2', '8', '2', '0', '2', '6', '0', '7', '7', '3', '2', '4', '5', '9', '7', '2', '4', '1', '8', '7', '9', '8', '0', '8', '5', '4', '2', '3'],19,22,),\n    (['1'],0,0,),\n    (['g', 'y', 'r', 'M', 'v', 'z', ' ', 'k', 'S', 'P', 'x', 'p', 'E', 'z', 'T', 'K', 'k', 'B', 's', 'P', 'p', 'e', 'G', 't', 'r', 'M', 'p', ' ', 'H', 'a'],24,27,),\n    (['0', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '3', '3', '3', '4', '4', '4', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '7', '8', '8', '8', '9', '9'],33,34,),\n    (['1', '1', '0', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '0'],13,8,),\n    ([' ', ' ', ' ', 'B', 'C', 'C', 'D', 'I', 'K', 'O', 'P', 'R', 'T', 'V', 'W', 'a', 'b', 'd', 'j', 'y'],16,14,),\n    (['5', '0', '8', '6', '9', '3', '0', '3', '2', '0', '6', '2', '3', '7', '8', '9', '2', '0', '1', '9', '4', '1', '3', '1', '9', '2', '3', '4', '1', '2', '3', '8', '1'],31,25,),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],37,35,),\n    (['X', 'B', 'E', 'v', 'K', 't', 'k', 'K', 'Q', 's', 'V', 'N', 'l', 'k', 'T', 'N', 'J', 'z', 'f', 'p', 'J', 'g', 'S', 'P', 'M', 'b', 'H', 'L', 'v', 'E', 'A', 'n', 'D', 'U', 'c', 's', 'M', 'Q', 'P', 'g', 'g', ' '],26,27,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findMinInsertions ( str , l , h ) :\n    if ( l > h ) :\n        return sys.maxsize\n    if ( l == h ) :\n        return 0\n    if ( l == h - 1 ) :\n        return 0 if ( str [ l ] == str [ h ] ) else 1\n    if ( str [ l ] == str [ h ] ) :\n        return findMinInsertions ( str , l + 1 , h - 1 )\n    else :\n        return ( min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 )\n"}
Disassembly of <code object findMinInsertions at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( l )
2 LOAD_FAST 2 ( h )
4 COMPARE_OP 4 ( > )
6 POP_JUMP_IF_FALSE 16

3 8 LOAD_GLOBAL 0 ( sys )
10 LOAD_ATTR 1 ( maxsize )
12 RETURN_VALUE

4 >> 14 LOAD_FAST 1 ( l )
16 LOAD_FAST 2 ( h )
18 COMPARE_OP 2 ( == )
20 POP_JUMP_IF_FALSE 26

5 22 LOAD_CONST 1 ( 0 )
24 RETURN_VALUE

6 >> 26 LOAD_FAST 1 ( l )
28 LOAD_FAST 2 ( h )
30 LOAD_CONST 2 ( 1 )
32 BINARY_SUBTRACT
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 42

7 38 LOAD_FAST 0 ( str )
40 LOAD_FAST 1 ( l )
42 BINARY_SUBSCR
44 LOAD_FAST 0 ( str )
46 LOAD_FAST 2 ( h )
48 BINARY_SUBSCR
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 58
54 LOAD_CONST 1 ( 0 )
56 JUMP_FORWARD 6 ( to 66 )
>> 58 LOAD_CONST 2 ( 1 )
60 RETURN_VALUE

8 >> 62 LOAD_FAST 0 ( str )
64 LOAD_FAST 1 ( l )
66 BINARY_SUBSCR
68 LOAD_FAST 0 ( str )
70 LOAD_FAST 2 ( h )
72 BINARY_SUBSCR
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 92

9 78 LOAD_GLOBAL 2 ( findMinInsertions )
80 LOAD_FAST 0 ( str )
82 LOAD_FAST 1 ( l )
84 LOAD_CONST 2 ( 1 )
86 BINARY_ADD
88 LOAD_FAST 2 ( h )
90 LOAD_CONST 2 ( 1 )
92 BINARY_SUBTRACT
94 CALL_FUNCTION 3
96 RETURN_VALUE

11 >> 98 LOAD_GLOBAL 3 ( min )
100 LOAD_GLOBAL 2 ( findMinInsertions )
102 LOAD_FAST 0 ( str )
104 LOAD_FAST 1 ( l )
106 LOAD_FAST 2 ( h )
108 LOAD_CONST 2 ( 1 )
110 BINARY_SUBTRACT
112 CALL_FUNCTION 3
114 LOAD_GLOBAL 4 ( findMinInsertions )
116 LOAD_FAST 0 ( str )
118 LOAD_FAST 1 ( l )
120 LOAD_CONST 2 ( 1 )
122 BINARY_ADD
124 LOAD_FAST 2 ( h )
126 CALL_FUNCTION 3
128 LOAD_CONST 2 ( 1 )
130 BINARY_ADD
132 CALL_FUNCTION 2
134 RETURN_VALUE
138 LOAD_CONST 0 ( None )
140 RETURN_VALUE
