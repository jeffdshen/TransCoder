{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('KfcTJNP',),\n    ('05312505872',),\n    ('100111',),\n    ('tDEEhKxrQ',),\n    ('50824233019',),\n    ('10001110010',),\n    ('T SEZaNm MYQ',),\n    ('838415739',),\n    ('01110100',),\n    ('WYQiAey H',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count\n"}
Disassembly of <code object xorZero at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( one_count )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 2 ( zero_count )

4 8 LOAD_GLOBAL 0 ( len )
10 LOAD_FAST 0 ( str )
12 CALL_FUNCTION 1
14 STORE_FAST 3 ( n )

5 16 SETUP_LOOP 52 ( to 70 )
18 LOAD_GLOBAL 1 ( range )
20 LOAD_CONST 1 ( 0 )
22 LOAD_FAST 3 ( n )
24 LOAD_CONST 2 ( 1 )
26 CALL_FUNCTION 3
28 GET_ITER
>> 30 FOR_ITER 34 ( to 68 )
32 STORE_FAST 4 ( i )

6 34 LOAD_FAST 0 ( str )
36 LOAD_FAST 4 ( i )
38 BINARY_SUBSCR
40 LOAD_CONST 3 ( '1' )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 58

7 46 LOAD_FAST 1 ( one_count )
48 LOAD_CONST 2 ( 1 )
50 INPLACE_ADD
52 STORE_FAST 1 ( one_count )
54 JUMP_ABSOLUTE 30

9 56 LOAD_FAST 2 ( zero_count )
58 LOAD_CONST 2 ( 1 )
60 INPLACE_ADD
62 STORE_FAST 2 ( zero_count )
64 JUMP_ABSOLUTE 30
>> 66 POP_BLOCK

10 >> 68 LOAD_FAST 1 ( one_count )
70 LOAD_CONST 4 ( 2 )
72 BINARY_MODULO
74 LOAD_CONST 1 ( 0 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 84

11 80 LOAD_FAST 2 ( zero_count )
82 RETURN_VALUE

12 >> 84 LOAD_FAST 1 ( one_count )
86 RETURN_VALUE
