{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    ugly = [ 0 ] * n\n    ugly [ 0 ] = 1\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    for l in range ( 1 , n ) :\n        ugly [ l ] = min ( next_multiple_of_2 , next_multiple_of_3 , next_multiple_of_5 )\n        if ugly [ l ] == next_multiple_of_2 :\n            i2 += 1\n            next_multiple_of_2 = ugly [ i2 ] * 2\n        if ugly [ l ] == next_multiple_of_3 :\n            i3 += 1\n            next_multiple_of_3 = ugly [ i3 ] * 3\n        if ugly [ l ] == next_multiple_of_5 :\n            i5 += 1\n            next_multiple_of_5 = ugly [ i5 ] * 5\n    return ugly [ - 1 ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (27,),\n    (64,),\n    (93,),\n    (90,),\n    (85,),\n    (86,),\n    (72,),\n    (86,),\n    (32,),\n    (1,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def getNthUglyNo ( n ) :\n    ugly = [ 0 ] * n\n    ugly [ 0 ] = 1\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    for l in range ( 1 , n ) :\n        ugly [ l ] = min ( next_multiple_of_2 , next_multiple_of_3 , next_multiple_of_5 )\n        if ugly [ l ] == next_multiple_of_2 :\n            i2 += 1\n            next_multiple_of_2 = ugly [ i2 ] * 2\n        if ugly [ l ] == next_multiple_of_3 :\n            i3 += 1\n            next_multiple_of_3 = ugly [ i3 ] * 3\n        if ugly [ l ] == next_multiple_of_5 :\n            i5 += 1\n            next_multiple_of_5 = ugly [ i5 ] * 5\n    return ugly [ - 1 ]\n"}
Disassembly of <code object getNthUglyNo at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_FAST 0 ( n )
6 BINARY_MULTIPLY
8 STORE_FAST 1 ( ugly )

3 10 LOAD_CONST 2 ( 1 )
12 LOAD_FAST 1 ( ugly )
14 LOAD_CONST 1 ( 0 )
16 STORE_SUBSCR

4 18 LOAD_CONST 1 ( 0 )
20 DUP_TOP
22 STORE_FAST 2 ( i3 )
24 STORE_FAST 3 ( i5 )

5 26 LOAD_CONST 3 ( 2 )
28 DUP_TOP
30 STORE_FAST 4 ( next_multiple_of_2 )

6 32 LOAD_CONST 4 ( 3 )
34 STORE_FAST 5 ( next_multiple_of_3 )

7 36 LOAD_CONST 5 ( 5 )
38 STORE_FAST 6 ( next_multiple_of_5 )

8 40 SETUP_LOOP 66 ( to 112 )
42 LOAD_GLOBAL 0 ( range )
44 LOAD_CONST 2 ( 1 )
46 LOAD_FAST 0 ( n )
48 CALL_FUNCTION 2
50 GET_ITER
>> 52 FOR_ITER 58 ( to 110 )
54 STORE_FAST 7 ( l )

9 56 LOAD_GLOBAL 1 ( min )
58 LOAD_FAST 6 ( next_multiple_of_2 )
60 LOAD_FAST 5 ( next_multiple_of_3 )
62 LOAD_FAST 6 ( next_multiple_of_5 )
64 CALL_FUNCTION 3
66 LOAD_FAST 1 ( ugly )
68 LOAD_FAST 7 ( l )
70 STORE_SUBSCR

10 72 LOAD_FAST 1 ( ugly )
74 LOAD_FAST 7 ( l )
76 BINARY_SUBSCR
78 LOAD_FAST 6 ( next_multiple_of_2 )
80 COMPARE_OP 2 ( == )
82 POP_JUMP_IF_FALSE 96

11 84 LOAD_FAST 4 ( i2 )
86 LOAD_CONST 2 ( 1 )
88 INPLACE_ADD
90 STORE_FAST 4 ( i2 )

12 92 LOAD_FAST 1 ( ugly )
94 LOAD_FAST 4 ( i2 )
96 BINARY_SUBSCR
98 LOAD_CONST 3 ( 2 )
100 BINARY_MULTIPLY
102 STORE_FAST 6 ( next_multiple_of_3 )

13 >> 104 LOAD_FAST 1 ( ugly )
106 LOAD_FAST 7 ( l )
108 BINARY_SUBSCR
110 LOAD_FAST 6 ( next_multiple_of_3 )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 52

14 116 LOAD_FAST 2 ( i3 )
118 LOAD_CONST 2 ( 1 )
120 INPLACE_ADD
122 STORE_FAST 2 ( i3 )

15 124 LOAD_FAST 1 ( ugly )
126 LOAD_FAST 2 ( i3 )
128 BINARY_SUBSCR
130 LOAD_CONST 4 ( 3 )
132 BINARY_MULTIPLY
134 STORE_FAST 6 ( next_multiple_of_3 )

16 136 LOAD_FAST 1 ( ugly )
138 LOAD_FAST 2 ( i3 )
140 BINARY_SUBSCR
142 LOAD_CONST 4 ( 3 )
144 BINARY_MULTIPLY
146 STORE_FAST 6 ( next_multiple_of_3 )

17 >> 148 LOAD_FAST 1 ( ugly )
150 LOAD_FAST 7 ( l )
152 BINARY_SUBSCR
154 LOAD_FAST 6 ( next_multiple_of_3 )
156 COMPARE_OP 2 ( == )
158 POP_JUMP_IF_FALSE 178

18 160 LOAD_FAST 5 ( next_5 )
162 LOAD_CONST 2 ( 1 )
164 INPLACE_ADD
166 STORE_FAST 5 ( i5 )

19 168 LOAD_FAST 1 ( ugly )
170 LOAD_FAST 5 ( i5 )
172 BINARY_SUBSCR
174 LOAD_CONST 5 ( 5 )
176 BINARY_MULTIPLY
178 STORE_FAST 6 ( next_multiple_of_5 )
180 JUMP_ABSOLUTE 52
>> 182 POP_BLOCK

20 >> 184 LOAD_FAST 1 ( ugly )
186 LOAD_CONST 6 ( - 1 )
188 BINARY_SUBSCR
190 RETURN_VALUE
