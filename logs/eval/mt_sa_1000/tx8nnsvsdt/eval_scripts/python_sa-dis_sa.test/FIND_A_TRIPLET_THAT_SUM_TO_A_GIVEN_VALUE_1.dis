{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( A , arr_size , sum ) :\n    A.sort ( )\n    for i in range ( 0 , arr_size - 2 ) :\n        l = i + 1\n        r = arr_size - 1\n        while ( l < r ) :\n            if ( A [ i ] + A [ l ] + A [ r ] == sum ) :\n                print ( \"Triplet is\" , A [ i ] , ', ' , A [ l ] , ', ' , A [ r ] ) ;\n                return True\n            elif ( A [ i ] + A [ l ] + A [ r ] < sum ) :\n                l += 1\n            else :\n                r -= 1\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([28, 47, 65, 89],3,3,),\n    ([-26, -64, -2, 96, -52, -14, -56, 52, -70, 70, -64, 74, -8, 18, 78, 14, 6, -16, 50, 84, -90, 12, -88, 52, 52, -40, 58, -48, 98, -66, 46, -88, 68, 12, 0, 70, -42],22,24,),\n    ([0],0,0,),\n    ([49, 66, 22, 93, 52, 54, 80, 87],5,7,),\n    ([-96, -92, -86, -74, -62, -60, -56, -54, -46, -38, -32, -26, -16, -16, -8, -4, 0, 6, 20, 28, 42, 44, 56],13,19,),\n    ([1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],39,39,),\n    ([1, 2, 16, 16, 20, 24, 24, 38, 41, 54, 57, 72, 79, 83, 89, 90, 96, 97, 98],12,12,),\n    ([52, 22, 78, -30],2,3,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,16,),\n    ([72, 40, 92, 11, 98, 20, 4, 58, 49, 11, 58, 28, 16, 16, 44, 10, 50, 23, 83, 41, 41, 92, 1, 28, 26, 83, 6, 52, 48, 9, 77, 51],29,27,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def find3Numbers ( A , arr_size , sum ) :\n    A.sort ( )\n    for i in range ( 0 , arr_size - 2 ) :\n        l = i + 1\n        r = arr_size - 1\n        while ( l < r ) :\n            if ( A [ i ] + A [ l ] + A [ r ] == sum ) :\n                print ( \"Triplet is\" , A [ i ] , ', ' , A [ l ] , ', ' , A [ r ] ) ;\n                return True\n            elif ( A [ i ] + A [ l ] + A [ r ] < sum ) :\n                l += 1\n            else :\n                r -= 1\n    return False\n"}
Disassembly of <code object find3Numbers at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( A )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 SETUP_LOOP 156 ( to 168 )
10 LOAD_GLOBAL 1 ( range )
12 LOAD_CONST 1 ( 0 )
14 LOAD_FAST 1 ( arr_size )
16 LOAD_CONST 2 ( 2 )
18 BINARY_SUBTRACT
20 CALL_FUNCTION 2
22 GET_ITER
>> 24 FOR_ITER 138 ( to 166 )
26 STORE_FAST 3 ( i )

4 28 LOAD_FAST 3 ( i )
30 LOAD_CONST 3 ( 1 )
32 BINARY_ADD
34 STORE_FAST 4 ( l )

5 36 LOAD_FAST 1 ( arr_size )
38 LOAD_CONST 3 ( 1 )
40 BINARY_SUBTRACT
42 STORE_FAST 5 ( r )

6 44 SETUP_LOOP 112 ( to 164 )
>> 46 LOAD_FAST 4 ( l )
48 LOAD_FAST 5 ( r )
50 COMPARE_OP 0 ( < )
52 POP_JUMP_IF_FALSE 162

7 54 LOAD_FAST 0 ( A )
56 LOAD_FAST 3 ( i )
58 BINARY_SUBSCR
60 LOAD_FAST 0 ( A )
62 LOAD_FAST 4 ( l )
64 BINARY_SUBSCR
66 BINARY_ADD
68 LOAD_FAST 0 ( A )
70 LOAD_FAST 5 ( r )
72 BINARY_SUBSCR
74 LOAD_FAST 2 ( sum )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 126

8 80 LOAD_GLOBAL 2 ( print )
82 LOAD_CONST 4 ( 'Triplet is' )
84 LOAD_FAST 0 ( A )
86 LOAD_FAST 3 ( i )
88 BINARY_SUBSCR
90 LOAD_CONST 5 ( ', ' )
92 LOAD_FAST 0 ( A )
94 LOAD_FAST 4 ( l )
96 BINARY_SUBSCR
98 CALL_FUNCTION 5
100 POP_TOP

9 102 LOAD_CONST 6 ( True )
104 RETURN_VALUE

10 >> 106 LOAD_FAST 0 ( A )
108 LOAD_FAST 3 ( i )
110 BINARY_SUBSCR
112 LOAD_FAST 0 ( A )
114 LOAD_FAST 4 ( l )
116 BINARY_SUBSCR
118 BINARY_ADD
120 LOAD_FAST 0 ( A )
122 LOAD_FAST 5 ( r )
124 BINARY_SUBSCR
126 LOAD_FAST 2 ( sum )
128 COMPARE_OP 0 ( < )
130 POP_JUMP_IF_FALSE 140

11 132 LOAD_FAST 4 ( l )
134 LOAD_CONST 3 ( 1 )
136 INPLACE_ADD
138 STORE_FAST 4 ( l )

13 >> 140 LOAD_FAST 5 ( r )
142 LOAD_CONST 3 ( 1 )
144 INPLACE_SUBTRACT
146 STORE_FAST 5 ( r )
148 JUMP_ABSOLUTE 46

15 >> 150 LOAD_FAST 5 ( r )
152 LOAD_CONST 3 ( 1 )
154 INPLACE_SUBTRACT
156 STORE_FAST 5 ( r )
158 JUMP_ABSOLUTE 46
>> 160 POP_BLOCK
>> 162 JUMP_ABSOLUTE 24
>> 164 POP_BLOCK

16 166 LOAD_CONST 7 ( False )
>> 168 RETURN_VALUE
