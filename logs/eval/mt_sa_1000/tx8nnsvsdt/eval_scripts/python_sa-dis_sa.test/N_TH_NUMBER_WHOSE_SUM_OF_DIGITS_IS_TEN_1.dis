{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    count = 0 ;\n    curr = 19 ;\n    while ( True ) :\n        sum = 0 ;\n        x = curr ;\n        while ( x > 0 ) :\n            sum = sum + x % 10 ;\n            x = int ( x / 10 ) ;\n        if ( sum == 10 ) :\n            count += 1 ;\n        if ( count == n ) :\n            return curr ;\n        curr += 9 ;\n    return - 1 ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (93,),\n    (10,),\n    (55,),\n    (94,),\n    (2,),\n    (5,),\n    (37,),\n    (4,),\n    (11,),\n    (46,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findNth ( n ) :\n    count = 0 ;\n    curr = 19 ;\n    while ( True ) :\n        sum = 0 ;\n        x = curr ;\n        while ( x > 0 ) :\n            sum = sum + x % 10 ;\n            x = int ( x / 10 ) ;\n        if ( sum == 10 ) :\n            count += 1 ;\n        if ( count == n ) :\n            return curr ;\n        curr += 9 ;\n    return - 1 ;\n"}
Disassembly of <code object findNth at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( count )

3 4 LOAD_CONST 2 ( 19 )
6 STORE_FAST 2 ( curr )

4 8 SETUP_LOOP 74 ( to 84 )
>> 10 LOAD_CONST 3 ( True )
12 STORE_FAST 3 ( sum )

5 14 LOAD_FAST 3 ( sum )
16 STORE_FAST 4 ( sum )

6 18 LOAD_FAST 2 ( curr )
20 STORE_FAST 5 ( x )

7 22 SETUP_LOOP 44 ( to 68 )
>> 24 LOAD_FAST 5 ( x )
26 LOAD_CONST 1 ( 0 )
28 COMPARE_OP 4 ( > )
30 POP_JUMP_IF_FALSE 66

8 32 LOAD_FAST 4 ( sum )
34 LOAD_FAST 5 ( x )
36 LOAD_CONST 4 ( 10 )
38 BINARY_MODULO
40 BINARY_ADD
42 STORE_FAST 4 ( sum )

9 44 LOAD_GLOBAL 0 ( int )
46 LOAD_FAST 5 ( x )
48 LOAD_CONST 4 ( 10 )
50 BINARY_TRUE_DIVIDE
52 CALL_FUNCTION 1
54 STORE_FAST 5 ( x )
56 JUMP_ABSOLUTE 24
>> 58 POP_BLOCK

10 >> 60 LOAD_FAST 4 ( sum )
62 LOAD_CONST 4 ( 10 )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 72

11 68 LOAD_FAST 1 ( count )
70 LOAD_CONST 5 ( 1 )
72 INPLACE_ADD
74 STORE_FAST 1 ( count )

12 >> 76 LOAD_FAST 1 ( count )
78 LOAD_FAST 0 ( n )
80 COMPARE_OP 2 ( == )
82 POP_JUMP_IF_FALSE 10

13 84 LOAD_FAST 2 ( curr )
86 RETURN_VALUE

14 >> 88 LOAD_FAST 2 ( curr )
90 LOAD_CONST 6 ( 9 )
92 INPLACE_ADD
94 STORE_FAST 2 ( curr )
96 JUMP_ABSOLUTE 10
98 POP_BLOCK

15 >> 100 LOAD_CONST 7 ( - 1 )
102 RETURN_VALUE
