{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , k ) :\n    for i in range ( n ) :\n        count = 0\n        for j in range ( n ) :\n            if arr [ j ] == arr [ i ] :\n                count += 1\n            if count > 2 * k :\n                return False\n    return True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1,1,2,3,1],5,2,),\n    ([2,3,3,5,3,3],6,2,),\n    ([0, 0, 1, 1, 1],2,1,),\n    ([7, 60, 78, 91, 80, 75, 85, 21, 41, 63, 1, 84, 69, 13, 94, 25, 54, 54, 52, 68, 53, 35, 17, 37, 98, 27, 2, 31],24,2,),\n    ([-96, -94, -82, -80, -78, -66, -36, -24, -18, -12, -2, -2, 6, 8, 10, 12, 36, 38, 42, 58, 64, 68, 82, 84, 86, 88, 94],24,3,),\n    ([0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],34,2,),\n    ([16, 19, 25, 25, 32, 37, 48, 59, 60, 60, 71, 74, 77, 81, 91, 94],10,8,),\n    ([-62, -94, 72, -22, 86, -80, 64, 98, -82, -50, 12, -4, 56, 46, -80, 2, -86, -44, -26, 68, -94, -82, 74, 26, 94, 40, 50, -40, -42, -10],20,4,),\n    ([0, 0, 0, 0, 0, 1, 1, 1],5,2,),\n    ([83, 57, 2, 47, 70, 22, 49, 51, 25, 57, 32, 7, 8, 99, 6, 86, 24, 79, 42, 43, 1, 24, 68, 11, 24, 12, 43, 40, 14, 45, 11, 46, 12, 80, 66],21,33,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def checkCount ( arr , n , k ) :\n    for i in range ( n ) :\n        count = 0\n        for j in range ( n ) :\n            if arr [ j ] == arr [ i ] :\n                count += 1\n            if count > 2 * k :\n                return False\n    return True\n"}
Disassembly of <code object checkCount at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 SETUP_LOOP 92 ( to 94 )
2 LOAD_GLOBAL 0 ( range )
4 LOAD_FAST 1 ( n )
6 CALL_FUNCTION 1
8 GET_ITER
>> 10 FOR_ITER 76 ( to 92 )
12 STORE_FAST 3 ( i )

3 14 LOAD_CONST 1 ( 0 )
16 STORE_FAST 4 ( count )

4 18 SETUP_LOOP 44 ( to 66 )
20 LOAD_GLOBAL 0 ( range )
22 LOAD_FAST 1 ( n )
24 CALL_FUNCTION 1
26 GET_ITER
>> 28 FOR_ITER 36 ( to 64 )
30 STORE_FAST 5 ( j )

5 32 LOAD_FAST 0 ( arr )
34 LOAD_FAST 5 ( j )
36 BINARY_SUBSCR
38 LOAD_FAST 0 ( arr )
40 LOAD_FAST 3 ( i )
42 BINARY_SUBSCR
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 52

6 48 LOAD_FAST 4 ( count )
50 LOAD_CONST 2 ( 1 )
52 INPLACE_ADD
54 STORE_FAST 4 ( count )

7 >> 56 LOAD_FAST 4 ( count )
58 LOAD_CONST 3 ( 2 )
60 LOAD_FAST 2 ( k )
62 BINARY_MULTIPLY
64 COMPARE_OP 4 ( > )
66 POP_JUMP_IF_FALSE 28

8 68 LOAD_CONST 4 ( False )
70 RETURN_VALUE
>> 72 JUMP_ABSOLUTE 28
>> 74 POP_BLOCK

9 >> 76 LOAD_CONST 5 ( True )
78 RETURN_VALUE
