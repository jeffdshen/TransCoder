{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (6,),\n    (35,),\n    (87,),\n    (91,),\n    (63,),\n    (11,),\n    (66,),\n    (17,),\n    (92,),\n    (81,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sumOfLargePrimeFactor ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum\n"}
Disassembly of <code object sumOfLargePrimeFactor at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_FAST 0 ( n )
6 LOAD_CONST 2 ( 1 )
8 BINARY_ADD
10 BINARY_MULTIPLY
12 STORE_FAST 1 ( prime )

3 14 LOAD_CONST 1 ( 0 )
16 STORE_FAST 2 ( sum )

4 18 LOAD_GLOBAL 0 ( int )
20 LOAD_FAST 0 ( n )
22 LOAD_CONST 3 ( 2 )
24 BINARY_TRUE_DIVIDE
26 CALL_FUNCTION 1
28 STORE_FAST 3 ( max )

5 30 SETUP_LOOP 68 ( to 96 )
32 LOAD_GLOBAL 1 ( range )
34 LOAD_CONST 3 ( 2 )
36 LOAD_FAST 3 ( max )
38 LOAD_CONST 2 ( 1 )
40 BINARY_ADD
42 CALL_FUNCTION 2
44 GET_ITER
>> 46 FOR_ITER 46 ( to 94 )
48 STORE_FAST 4 ( p )

6 50 LOAD_FAST 1 ( prime )
52 LOAD_FAST 4 ( p )
54 BINARY_SUBSCR
56 LOAD_CONST 1 ( 0 )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 46

7 62 SETUP_LOOP 36 ( to 92 )
64 LOAD_GLOBAL 1 ( range )
66 LOAD_FAST 4 ( p )
68 LOAD_CONST 3 ( 2 )
70 BINARY_MULTIPLY
72 LOAD_FAST 0 ( n )
74 LOAD_CONST 2 ( 1 )
76 BINARY_ADD
78 LOAD_FAST 4 ( p )
80 CALL_FUNCTION 3
82 GET_ITER
>> 84 FOR_ITER 12 ( to 90 )
86 STORE_FAST 5 ( i )

8 88 LOAD_FAST 4 ( p )
90 LOAD_FAST 1 ( prime )
92 LOAD_FAST 5 ( i )
94 STORE_SUBSCR
96 JUMP_ABSOLUTE 84
>> 98 POP_BLOCK
>> 100 JUMP_ABSOLUTE 46
>> 102 POP_BLOCK

9 >> 104 SETUP_LOOP 68 ( to 176 )
106 LOAD_GLOBAL 1 ( range )
108 LOAD_CONST 3 ( 2 )
110 LOAD_FAST 0 ( n )
112 LOAD_CONST 2 ( 1 )
114 BINARY_ADD
116 CALL_FUNCTION 2
118 GET_ITER
>> 120 FOR_ITER 52 ( to 174 )
122 STORE_FAST 4 ( p )

10 124 LOAD_FAST 1 ( prime )
126 LOAD_FAST 4 ( p )
128 BINARY_SUBSCR
130 POP_JUMP_IF_FALSE 120

11 132 LOAD_FAST 2 ( sum )
134 LOAD_FAST 1 ( prime )
136 LOAD_FAST 4 ( p )
138 BINARY_SUBSCR
140 INPLACE_ADD
142 STORE_FAST 2 ( sum )
144 JUMP_ABSOLUTE 120

13 >> 146 LOAD_FAST 2 ( sum )
148 LOAD_FAST 4 ( p )
150 INPLACE_ADD
152 STORE_FAST 2 ( sum )
154 JUMP_ABSOLUTE 120
>> 156 POP_BLOCK

14 >> 158 LOAD_FAST 2 ( sum )
160 RETURN_VALUE
