{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , N ) :\n    lis = [ 0 ] * N\n    for i in range ( N ) :\n        lis [ i ] = 1\n    for i in range ( 1 , N ) :\n        for j in range ( i ) :\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) :\n                lis [ i ] = lis [ j ] + 1\n    max = 0\n    for i in range ( N ) :\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n    return ( N - max )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 7, 20, 22, 23, 31, 33, 36, 47, 61, 63, 63, 71, 74, 82, 91, 95, 99],15,),\n    ([-84, 12, -42, -78, 22, 72, 56, 70, 28, -72],7,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],16,),\n    ([29, 41, 4, 62, 77, 74, 30, 2, 14, 90, 93, 10, 78, 36, 66, 22, 48, 89, 36, 73, 70, 23, 90],13,),\n    ([-80, -72, -68, -66, -58, -50, -48, -32, -28, -24, -22, -18, 0, 2, 6, 10, 12, 14, 14, 18, 24, 24, 24, 28, 28, 28, 34, 38, 42, 42, 46, 46, 46, 58, 80, 82, 82, 84, 84, 86, 88, 90, 92, 96],36,),\n    ([1, 1, 0, 1, 0, 1, 0, 0, 1, 0],8,),\n    ([26, 36, 58, 64, 69, 72, 79, 82, 82, 87, 89, 90, 95],8,),\n    ([-52, -40, 98, 40, 42, -50, 60, -64, -92, 36, -88, 72, -72, 38, -80, -52, 68, 70, 16, 22, -30, -74, 56, -80, 62, -54, -32, -22, -86, -70, 88, -76, -46, 28, 40, -2, -84, 68, -98, -16, 90, 36, -38, -86, 20, -40, 82, 98, 54],41,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],10,),\n    ([36, 62, 58, 24, 99, 12, 46, 3, 4, 40, 54, 97, 48, 94, 98, 7, 17, 5, 3, 36, 3],16,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    for i in range ( N ) :\n        lis [ i ] = 1\n    for i in range ( 1 , N ) :\n        for j in range ( i ) :\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) :\n                lis [ i ] = lis [ j ] + 1\n    max = 0\n    for i in range ( N ) :\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n    return ( N - max )\n"}
Disassembly of <code object minInsertionStepToSortArray at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_FAST 1 ( N )
6 BINARY_MULTIPLY
8 STORE_FAST 2 ( lis )

3 10 SETUP_LOOP 26 ( to 40 )
12 LOAD_GLOBAL 0 ( range )
14 LOAD_FAST 1 ( N )
16 CALL_FUNCTION 1
18 GET_ITER
>> 20 FOR_ITER 14 ( to 38 )
22 STORE_FAST 3 ( i )

4 24 LOAD_CONST 2 ( 1 )
26 LOAD_FAST 2 ( lis )
28 LOAD_FAST 3 ( i )
30 STORE_SUBSCR
32 JUMP_ABSOLUTE 20
>> 34 POP_BLOCK

5 >> 36 SETUP_LOOP 76 ( to 146 )
38 LOAD_GLOBAL 0 ( range )
40 LOAD_CONST 2 ( 1 )
42 LOAD_FAST 1 ( N )
44 CALL_FUNCTION 2
46 GET_ITER
>> 48 FOR_ITER 60 ( to 144 )
50 STORE_FAST 3 ( i )

6 52 SETUP_LOOP 52 ( to 106 )
54 LOAD_GLOBAL 0 ( range )
56 LOAD_FAST 3 ( i )
58 CALL_FUNCTION 1
60 GET_ITER
>> 62 FOR_ITER 44 ( to 104 )
64 STORE_FAST 4 ( j )

7 66 LOAD_FAST 0 ( arr )
68 LOAD_FAST 3 ( i )
70 BINARY_SUBSCR
72 LOAD_FAST 0 ( arr )
74 LOAD_FAST 4 ( j )
76 BINARY_SUBSCR
78 COMPARE_OP 5 ( >= )
80 POP_JUMP_IF_FALSE 62
82 LOAD_FAST 2 ( lis )
84 LOAD_FAST 3 ( i )
86 BINARY_SUBSCR
88 LOAD_FAST 2 ( lis )
90 LOAD_FAST 4 ( j )
92 BINARY_SUBSCR
94 LOAD_CONST 2 ( 1 )
96 BINARY_ADD
98 COMPARE_OP 0 ( < )
100 POP_JUMP_IF_FALSE 62

8 102 LOAD_FAST 2 ( lis )
104 LOAD_FAST 4 ( j )
106 BINARY_SUBSCR
108 LOAD_CONST 2 ( 1 )
110 BINARY_ADD
112 LOAD_FAST 2 ( lis )
114 LOAD_FAST 3 ( i )
116 STORE_SUBSCR
118 JUMP_ABSOLUTE 62
>> 120 POP_BLOCK
>> 122 JUMP_ABSOLUTE 48
>> 124 POP_BLOCK

9 >> 126 LOAD_CONST 1 ( 0 )
128 STORE_FAST 5 ( max )

10 130 SETUP_LOOP 48 ( to 194 )
132 LOAD_GLOBAL 0 ( range )
134 LOAD_FAST 1 ( N )
136 CALL_FUNCTION 1
138 GET_ITER
>> 140 FOR_ITER 36 ( to 192 )
142 STORE_FAST 3 ( i )

11 144 LOAD_FAST 5 ( max )
146 LOAD_FAST 2 ( lis )
148 LOAD_FAST 3 ( i )
150 BINARY_SUBSCR
152 COMPARE_OP 0 ( < )
154 POP_JUMP_IF_FALSE 140

12 156 LOAD_FAST 2 ( lis )
158 LOAD_FAST 3 ( i )
160 BINARY_SUBSCR
162 STORE_FAST 5 ( max )
164 JUMP_ABSOLUTE 140
>> 166 POP_BLOCK

13 >> 168 LOAD_FAST 1 ( N )
170 LOAD_FAST 5 ( max )
172 BINARY_SUBTRACT
174 RETURN_VALUE
