{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( string ) :\n    length = len ( string )\n    if string [ 0 ] < 'A' or string [ 0 ] > 'Z' :\n        return False\n    if string [ length - 1 ] != '.' :\n        return False\n    prev_state = 0\n    curr_state = 0\n    index = 1\n    while ( string [ index ] ) :\n        if string [ index ] >= 'A' and string [ index ] <= 'Z' :\n            curr_state = 0\n        elif string [ index ] == ' ' :\n            curr_state = 1\n        elif string [ index ] >= 'a' and string [ index ] <= 'z' :\n            curr_state = 2\n        elif string [ index ] == '.' :\n            curr_state = 3\n        if prev_state == curr_state and curr_state != 2 :\n            return False\n        if prev_state == 2 and curr_state == 0 :\n            return False\n        if curr_state == 3 and prev_state != 1 :\n            return True\n        index += 1\n        prev_state = curr_state\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\"I love cinema.\", \"The vertex is S.\",\n            \"I am single.\", \"My name is KG.\",\n            \"I lovE cinema.\", \"GeeksQuiz. is a quiz site.\",\n            \"I love Geeksquiz and Geeksforgeeks.\",\n            \"  You are my friend.\", \"I love cinema\", \"Hello world !\"]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(parameters_set) == f_gold(parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def checkSentence ( string ) :\n    length = len ( string )\n    if string [ 0 ] < 'A' or string [ 0 ] > 'Z' :\n        return False\n    if string [ length - 1 ] != '.' :\n        return False\n    prev_state = 0\n    curr_state = 0\n    index = 1\n    while ( string [ index ] ) :\n        if string [ index ] >= 'A' and string [ index ] <= 'Z' :\n            curr_state = 0\n        elif string [ index ] == ' ' :\n            curr_state = 1\n        elif string [ index ] >= 'a' and string [ index ] <= 'z' :\n            curr_state = 2\n        elif string [ index ] == '.' :\n            curr_state = 3\n        if prev_state == curr_state and curr_state != 2 :\n            return False\n        if prev_state == 2 and curr_state == 0 :\n            return False\n        if curr_state == 3 and prev_state != 1 :\n            return True\n        index += 1\n        prev_state = curr_state\n    return False\n"}
Disassembly of <code object checkSentence at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( string )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( length )

3 8 LOAD_FAST 0 ( string )
10 LOAD_CONST 1 ( 0 )
12 BINARY_SUBSCR
14 LOAD_CONST 2 ( 'A' )
16 COMPARE_OP 0 ( < )
18 POP_JUMP_IF_TRUE 32
20 LOAD_FAST 0 ( string )
22 LOAD_CONST 1 ( 0 )
24 BINARY_SUBSCR
26 LOAD_CONST 3 ( 'Z' )
28 COMPARE_OP 4 ( > )
30 POP_JUMP_IF_FALSE 36

4 >> 32 LOAD_CONST 4 ( False )
34 RETURN_VALUE

5 >> 36 LOAD_FAST 0 ( string )
38 LOAD_FAST 1 ( length )
40 LOAD_CONST 5 ( 1 )
42 BINARY_SUBTRACT
44 BINARY_SUBSCR
46 LOAD_CONST 6 ( '.' )
48 COMPARE_OP 3 ( != )
50 POP_JUMP_IF_FALSE 56

6 52 LOAD_CONST 4 ( False )
54 RETURN_VALUE

7 >> 56 LOAD_CONST 1 ( 0 )
58 STORE_FAST 2 ( Any )

8 60 LOAD_CONST 1 ( 0 )
62 STORE_FAST 3 ( curr_state )

9 64 LOAD_CONST 5 ( 1 )
66 STORE_FAST 4 ( index )

10 68 SETUP_LOOP 136 ( to 208 )
>> 70 LOAD_FAST 0 ( string )
72 LOAD_FAST 4 ( index )
74 BINARY_SUBSCR
76 CALL_FUNCTION 1
78 POP_JUMP_IF_FALSE 206

11 80 LOAD_FAST 0 ( string )
82 LOAD_FAST 4 ( index )
84 BINARY_SUBSCR
86 LOAD_CONST 2 ( 'A' )
88 COMPARE_OP 5 ( >= )
90 POP_JUMP_IF_FALSE 102
92 LOAD_FAST 0 ( string )
94 LOAD_FAST 4 ( index )
96 BINARY_SUBSCR
98 LOAD_CONST 3 ( 'Z' )
100 COMPARE_OP 1 ( <= )
>> 102 POP_JUMP_IF_FALSE 108

12 104 LOAD_CONST 1 ( 0 )
106 STORE_FAST 3 ( curr_state )

13 >> 108 LOAD_FAST 0 ( string )
110 LOAD_FAST 4 ( index )
112 BINARY_SUBSCR
114 LOAD_CONST 6 ( ' ' )
116 COMPARE_OP 2 ( == )
118 POP_JUMP_IF_FALSE 132

14 120 LOAD_CONST 5 ( 1 )
122 STORE_FAST 3 ( curr_state )
124 JUMP_FORWARD 56 ( to 180 )

15 >> 126 LOAD_FAST 0 ( string )
128 LOAD_FAST 4 ( index )
130 BINARY_SUBSCR
132 LOAD_CONST 2 ( 'a' )
134 COMPARE_OP 5 ( >= )
136 POP_JUMP_IF_FALSE 148
138 LOAD_FAST 0 ( string )
140 LOAD_FAST 4 ( index )
142 BINARY_SUBSCR
144 LOAD_CONST 3 ( 'z' )
146 COMPARE_OP 1 ( <= )
148 POP_JUMP_IF_FALSE 160

16 150 LOAD_CONST 7 ( 2 )
152 STORE_FAST 3 ( curr_state )
154 JUMP_FORWARD 26 ( to 180 )

17 >> 156 LOAD_FAST 0 ( string )
158 LOAD_FAST 4 ( index )
160 BINARY_SUBSCR
162 LOAD_CONST 6 ( '.' )
164 COMPARE_OP 2 ( == )
166 POP_JUMP_IF_FALSE 180

18 168 LOAD_CONST 8 ( 3 )
170 STORE_FAST 3 ( curr_state )
172 JUMP_FORWARD 12 ( to 180 )

19 >> 174 LOAD_FAST 2 ( Any )
176 LOAD_FAST 3 ( curr_state )
178 COMPARE_OP 2 ( == )
180 POP_JUMP_IF_FALSE 184
182 LOAD_FAST 3 ( curr_state )
184 LOAD_CONST 7 ( 2 )
186 COMPARE_OP 3 ( != )
188 POP_JUMP_IF_FALSE 184

20 190 LOAD_CONST 4 ( False )
192 RETURN_VALUE

21 >> 194 LOAD_FAST 3 ( curr_state )
196 LOAD_CONST 9 ( 3 )
198 COMPARE_OP 2 ( == )
200 POP_JUMP_IF_FALSE 210
202 LOAD_FAST 2 ( Any )
204 LOAD_CONST 5 ( 1 )
206 COMPARE_OP 3 ( != )
208 POP_JUMP_IF_FALSE 210

22 >> 210 LOAD_CONST 10 ( True )
212 RETURN_VALUE

23 >> 214 LOAD_FAST 4 ( index )
216 LOAD_CONST 5 ( 1 )
218 INPLACE_ADD
220 STORE_FAST 4 ( index )

24 222 LOAD_FAST 3 ( curr_state )
224 STORE_FAST 2 ( Any )

25 226 LOAD_FAST 3 ( curr_state )
228 STORE_FAST 2 ( BREAK_LOOP

26 >> 230 LOAD_CONST 4 ( False )
232 RETURN_VALUE
