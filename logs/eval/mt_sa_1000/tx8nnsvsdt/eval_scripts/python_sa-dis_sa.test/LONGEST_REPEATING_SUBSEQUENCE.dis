{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n ] [ n ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('JxZFz',),\n    ('7648992235770',),\n    ('11100000',),\n    ('cRN  SgYjPsctJ',),\n    ('434',),\n    ('1',),\n    ('JRfZIAsbrPBZ',),\n    ('03779368305592',),\n    ('1111000',),\n    ('BkULuIi',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n ] [ n ]\n"}
Disassembly of <code object findLongestRepeatingSubSeq at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( n )

3 8 LOAD_CONST 1 ( 0 )
10 BUILD_LIST 1
12 LOAD_FAST 1 ( n )
14 LOAD_CONST 2 ( 1 )
16 BINARY_ADD
18 BINARY_MULTIPLY
20 BUILD_LIST 1
22 LOAD_FAST 1 ( n )
24 LOAD_CONST 2 ( 1 )
26 BINARY_ADD
28 BINARY_MULTIPLY
30 STORE_FAST 2 ( dp )

4 32 SETUP_LOOP 162 ( to 198 )
34 LOAD_GLOBAL 1 ( range )
36 LOAD_CONST 2 ( 1 )
38 LOAD_FAST 1 ( n )
40 LOAD_CONST 2 ( 1 )
42 BINARY_ADD
44 CALL_FUNCTION 2
46 GET_ITER
>> 48 FOR_ITER 158 ( to 196 )
50 STORE_FAST 3 ( i )

5 52 SETUP_LOOP 154 ( to 198 )
54 LOAD_GLOBAL 1 ( range )
56 LOAD_CONST 2 ( 1 )
58 LOAD_FAST 1 ( n )
60 LOAD_CONST 2 ( 1 )
62 BINARY_ADD
64 CALL_FUNCTION 2
66 GET_ITER
>> 68 FOR_ITER 106 ( to 196 )
70 STORE_FAST 4 ( j )

6 72 LOAD_FAST 0 ( str )
74 LOAD_FAST 3 ( i )
76 LOAD_CONST 2 ( 1 )
78 BINARY_SUBTRACT
80 BINARY_SUBSCR
82 LOAD_FAST 0 ( str )
84 LOAD_FAST 4 ( j )
86 LOAD_CONST 2 ( 1 )
88 BINARY_SUBTRACT
90 BINARY_SUBSCR
92 COMPARE_OP 2 ( == )
94 POP_JUMP_IF_FALSE 120
96 LOAD_FAST 3 ( i )
98 LOAD_FAST 4 ( j )
100 COMPARE_OP 3 ( != )
102 POP_JUMP_IF_FALSE 120

7 104 LOAD_CONST 2 ( 1 )
106 LOAD_FAST 2 ( dp )
108 LOAD_FAST 3 ( i )
110 LOAD_CONST 2 ( 1 )
112 BINARY_SUBTRACT
114 BINARY_SUBSCR
116 LOAD_FAST 4 ( j )
118 LOAD_CONST 2 ( 1 )
120 BINARY_SUBTRACT
122 BINARY_SUBSCR
124 BINARY_ADD
126 BINARY_ADD
128 LOAD_FAST 2 ( dp )
130 LOAD_FAST 3 ( i )
132 BINARY_SUBSCR
134 LOAD_FAST 4 ( j )
136 STORE_SUBSCR
138 JUMP_ABSOLUTE 68

9 140 LOAD_GLOBAL 2 ( max )
142 LOAD_FAST 2 ( dp )
144 LOAD_FAST 3 ( i )
146 BINARY_SUBSCR
148 LOAD_FAST 4 ( j )
150 LOAD_CONST 2 ( 1 )
152 BINARY_SUBTRACT
154 BINARY_SUBSCR
156 LOAD_FAST 2 ( dp )
158 LOAD_FAST 3 ( i )
160 BINARY_SUBSCR
162 LOAD_FAST 4 ( j )
164 STORE_SUBSCR

10 >> 166 LOAD_FAST 2 ( dp )
168 LOAD_FAST 1 ( n )
170 BINARY_SUBSCR
172 LOAD_FAST 1 ( n )
174 BINARY_SUBSCR
176 LOAD_FAST 2 ( dp )
178 LOAD_FAST 3 ( i )
180 LOAD_CONST 2 ( 1 )
182 BINARY_SUBTRACT
184 BINARY_SUBSCR
186 LOAD_FAST 4 ( j )
188 BINARY_SUBSCR
190 CALL_FUNCTION 2
192 LOAD_FAST 2 ( dp )
194 LOAD_FAST 3 ( i )
196 BINARY_SUBSCR
198 LOAD_FAST 4 ( j )
200 STORE_SUBSCR
202 JUMP_ABSOLUTE 68
>> 204 POP_BLOCK

11 >> 206 LOAD_FAST 2 ( dp )
208 LOAD_FAST 1 ( n )
210 BINARY_SUBSCR
212 LOAD_FAST 1 ( n )
214 BINARY_SUBSCR
216 RETURN_VALUE
