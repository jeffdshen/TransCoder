{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('DXh',),\n    ('48703586411816',),\n    ('0001',),\n    ('yWg WvjNKS',),\n    ('8408568459',),\n    ('01',),\n    ('DFECZ CWtN',),\n    ('37742236',),\n    ('001101',),\n    ('LDxERLmYn',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def nextGreater ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;\n"}
Disassembly of <code object nextGreater at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( num1 )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( l )

3 8 LOAD_GLOBAL 1 ( list )
10 LOAD_FAST 0 ( num1 )
12 CALL_FUNCTION 1
14 STORE_FAST 2 ( num )

4 16 LOAD_FAST 1 ( l )
18 LOAD_CONST 1 ( 1 )
20 BINARY_SUBTRACT
22 STORE_FAST 3 ( i )

5 24 SETUP_LOOP 62 ( to 82 )
>> 26 LOAD_FAST 3 ( i )
28 LOAD_CONST 2 ( 0 )
30 COMPARE_OP 5 ( >= )
32 POP_JUMP_IF_FALSE 80

6 34 LOAD_FAST 2 ( num )
36 LOAD_FAST 3 ( i )
38 BINARY_SUBSCR
40 LOAD_CONST 3 ( '0' )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 58

7 46 LOAD_CONST 4 ( '1' )
48 LOAD_FAST 2 ( num )
50 LOAD_FAST 3 ( i )
52 STORE_SUBSCR

8 54 BREAK_LOOP
56 JUMP_ABSOLUTE 26

10 >> 58 LOAD_CONST 3 ( '0' )
60 LOAD_FAST 2 ( num )
62 LOAD_FAST 3 ( i )
64 STORE_SUBSCR
66 JUMP_ABSOLUTE 26

12 >> 68 LOAD_FAST 3 ( i )
70 LOAD_CONST 1 ( 1 )
72 INPLACE_SUBTRACT
74 STORE_FAST 3 ( i )

13 >> 76 LOAD_CONST 5 ( '' )
78 LOAD_METHOD 2 ( join )
80 LOAD_FAST 2 ( num )
82 CALL_METHOD 1
84 STORE_FAST 0 ( num1 )

14 86 LOAD_FAST 3 ( i )
88 LOAD_CONST 2 ( 0 )
90 COMPARE_OP 0 ( < )
92 POP_JUMP_IF_FALSE 98

15 94 LOAD_CONST 4 ( '1' )
96 LOAD_FAST 0 ( num1 )
98 BINARY_ADD
100 STORE_FAST 0 ( num1 )

16 >> 102 LOAD_FAST 0 ( num1 )
104 RETURN_VALUE
