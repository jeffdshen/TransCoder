{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('ZNHGro','jAdbtDUYQu',3,),\n    ('382880806774','65565',10,),\n    ('0','00100010100',2,),\n    ('lxHTRFCTSQ','sViXYE',89,),\n    ('6399914758','780990121',9,),\n    ('01100011100000','0100',0,),\n    ('WkGqlob','NpQVdXzEtUZy',6,),\n    ('46974006151','74438',11,),\n    ('1001001','1000010',15,),\n    ('IJQ','nFOHAeYEAp',42,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isConvertible ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False\n"}
Disassembly of <code object isConvertible at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str1 )
4 CALL_FUNCTION 1
6 LOAD_GLOBAL 0 ( len )
8 LOAD_FAST 1 ( str2 )
10 CALL_FUNCTION 1
12 BINARY_ADD
14 LOAD_FAST 2 ( k )
16 COMPARE_OP 0 ( < )
18 POP_JUMP_IF_FALSE 24

3 20 LOAD_CONST 1 ( True )
22 RETURN_VALUE

4 >> 24 LOAD_CONST 2 ( 0 )
26 STORE_FAST 3 ( commonLength )

5 28 SETUP_LOOP 54 ( to 80 )
30 LOAD_GLOBAL 1 ( range )
32 LOAD_CONST 2 ( 0 )
34 LOAD_GLOBAL 2 ( min )
36 LOAD_GLOBAL 0 ( len )
38 LOAD_FAST 0 ( str1 )
40 CALL_FUNCTION 1
42 LOAD_GLOBAL 0 ( len )
44 LOAD_FAST 1 ( str2 )
46 CALL_FUNCTION 1
48 CALL_FUNCTION 2
50 LOAD_CONST 3 ( 1 )
52 CALL_FUNCTION 3
54 GET_ITER
>> 56 FOR_ITER 30 ( to 78 )
58 STORE_FAST 4 ( i )

6 60 LOAD_FAST 0 ( str1 )
62 LOAD_FAST 4 ( i )
64 BINARY_SUBSCR
66 LOAD_FAST 1 ( str2 )
68 LOAD_FAST 4 ( i )
70 BINARY_SUBSCR
72 COMPARE_OP 2 ( == )
74 POP_JUMP_IF_FALSE 88

7 76 LOAD_FAST 3 ( commonLength )
78 LOAD_CONST 3 ( 1 )
80 INPLACE_ADD
82 STORE_FAST 3 ( commonLength )
84 JUMP_ABSOLUTE 56

9 86 BREAK_LOOP

11 >> 88 BREAK_LOOP
90 JUMP_ABSOLUTE 56
>> 92 POP_BLOCK

12 >> 94 LOAD_FAST 2 ( k )
96 LOAD_GLOBAL 0 ( len )
98 LOAD_FAST 0 ( str1 )
100 CALL_FUNCTION 1
102 BINARY_SUBTRACT
104 LOAD_GLOBAL 0 ( len )
106 LOAD_FAST 1 ( str2 )
108 CALL_FUNCTION 1
110 BINARY_SUBTRACT
112 LOAD_CONST 4 ( 2 )
114 LOAD_GLOBAL 3 ( commonLength )
116 BINARY_MULTIPLY
118 BINARY_ADD
120 LOAD_CONST 2 ( 0 )
122 COMPARE_OP 2 ( == )
124 POP_JUMP_IF_FALSE 56

13 126 LOAD_CONST 1 ( True )
128 RETURN_VALUE

14 >> 130 LOAD_CONST 5 ( False )
132 RETURN_VALUE
