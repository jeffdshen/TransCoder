{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , n , k ) :\n    b = dict ( )\n    for i in range ( n ) :\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n    ans = 10 ** 9\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 27, 66, 89, 96, 96],4,4,),\n    ([84, -38, -56, -20, -98, -40, -16, 22, 20, 98, -56, -32, -44, 30, -58, 26, -44, -32, 50, 46, 92],13,11,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],23,13,),\n    ([20, 71, 66, 58, 74, 2, 63, 13, 1, 36, 28, 83, 24, 20, 85, 30, 59, 56, 8, 97, 58, 28, 28, 42],23,17,),\n    ([-94, -88, -86, -68, -66, -64, -28, -12, 4, 18, 22, 28, 32, 34, 34, 40, 44, 46, 60, 68, 72, 78, 80, 84, 88, 96],16,15,),\n    ([0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1],8,13,),\n    ([8, 13, 54, 59, 61, 69, 89, 90, 92],4,8,),\n    ([-58, 50, -74, -8, -50, 90, 90, -2, -22, 8, -76, 16, 4, 56, 94, 36, 28, -42, 80, -88, 88, 52, 74, 40, 12, -72, -50, 50, 88, -54, 32, -24, -48, -66, -86, 40, -6, 14, 10, -88, 56, 80, -34],27,42,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],9,12,),\n    ([2, 60, 66, 39, 18, 60, 37, 75, 3, 64, 24, 16, 72, 95, 96, 44, 23, 58, 58, 33, 24, 96],21,17,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def find_maximum ( a , n , k ) :\n    b = dict ( )\n    for i in range ( n ) :\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n    ans = 10 ** 9\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n    return ans\n"}
Disassembly of <code object find_maximum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( dict )
2 CALL_FUNCTION 0
4 STORE_FAST 3 ( b )

3 6 SETUP_LOOP 76 ( to 90 )
8 LOAD_GLOBAL 1 ( range )
10 LOAD_FAST 1 ( n )
12 CALL_FUNCTION 1
14 GET_ITER
>> 16 FOR_ITER 60 ( to 88 )
18 STORE_FAST 4 ( i )

4 20 LOAD_FAST 0 ( a )
22 LOAD_FAST 4 ( i )
24 BINARY_SUBSCR
26 STORE_FAST 5 ( x )

5 28 LOAD_GLOBAL 2 ( min )
30 LOAD_CONST 1 ( 1 )
32 LOAD_FAST 4 ( i )
34 BINARY_ADD
36 LOAD_FAST 1 ( n )
38 LOAD_FAST 4 ( i )
40 BINARY_SUBTRACT
42 CALL_FUNCTION 2
44 STORE_FAST 6 ( d )

6 46 LOAD_FAST 5 ( x )
48 LOAD_FAST 3 ( b )
50 LOAD_METHOD 3 ( keys )
52 CALL_METHOD 0
54 COMPARE_OP 7 ( not in )
56 POP_JUMP_IF_FALSE 68

7 58 LOAD_FAST 6 ( d )
60 LOAD_FAST 3 ( b )
62 LOAD_FAST 5 ( x )
64 STORE_SUBSCR
66 JUMP_ABSOLUTE 16

9 >> 68 LOAD_GLOBAL 2 ( min )
70 LOAD_FAST 6 ( d )
72 LOAD_FAST 3 ( b )
74 LOAD_FAST 5 ( x )
76 BINARY_SUBSCR
78 CALL_FUNCTION 2
80 LOAD_FAST 3 ( b )
82 LOAD_FAST 5 ( x )
84 STORE_SUBSCR
86 JUMP_ABSOLUTE 16
>> 88 POP_BLOCK

10 >> 90 LOAD_CONST 2 ( 10 )
92 STORE_FAST 7 ( ans )

11 94 SETUP_LOOP 96 ( to 174 )
96 LOAD_GLOBAL 1 ( range )
98 LOAD_FAST 1 ( n )
100 CALL_FUNCTION 1
102 GET_ITER
>> 104 FOR_ITER 82 ( to 172 )
106 STORE_FAST 4 ( i )

12 108 LOAD_FAST 0 ( a )
110 LOAD_FAST 4 ( i )
112 BINARY_SUBSCR
114 STORE_FAST 5 ( x )

13 116 LOAD_FAST 5 ( x )
118 LOAD_FAST 2 ( k )
120 LOAD_FAST 5 ( x )
122 BINARY_SUBTRACT
124 COMPARE_OP 3 ( != )
126 POP_JUMP_IF_FALSE 104
128 LOAD_FAST 2 ( k )
130 LOAD_FAST 5 ( x )
132 BINARY_SUBTRACT
134 LOAD_FAST 3 ( b )
136 LOAD_METHOD 3 ( keys )
138 CALL_METHOD 0
140 COMPARE_OP 6 ( in )
142 POP_JUMP_IF_FALSE 104

14 144 LOAD_GLOBAL 2 ( min )
146 LOAD_GLOBAL 4 ( max )
148 LOAD_FAST 3 ( b )
150 LOAD_FAST 5 ( x )
152 BINARY_SUBSCR
154 LOAD_FAST 3 ( b )
156 LOAD_FAST 5 ( x )
158 BINARY_SUBTRACT
160 CALL_FUNCTION 2
162 LOAD_FAST 7 ( ans )
164 CALL_FUNCTION 2
166 STORE_FAST 7 ( ans )
168 JUMP_ABSOLUTE 104
>> 170 POP_BLOCK
>> 172 JUMP_ABSOLUTE 104
>> 174 POP_BLOCK

15 176 LOAD_FAST 7 ( ans )
178 RETURN_VALUE
