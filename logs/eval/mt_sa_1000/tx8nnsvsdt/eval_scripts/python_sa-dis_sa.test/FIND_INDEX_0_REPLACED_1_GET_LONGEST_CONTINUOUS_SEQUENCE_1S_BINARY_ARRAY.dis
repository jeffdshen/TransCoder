{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 8, 9, 13, 13, 19, 19, 21, 21, 24, 28, 28, 29, 29, 29, 32, 34, 38, 39, 43, 45, 46, 57, 59, 62, 63, 67, 67, 68, 69, 70, 70, 71, 72, 74, 74, 76, 78, 79, 81, 90, 90, 95, 96, 98],36,),\n    ([28, 92, -16, 0, 6, 12, -88, 42, -48, 72, 2, -38, 80, 82, 96, 32, -42, -38, 62, -76, 20, -10, 2, -48, 4, 88, -24, -72, 32, -42, -48, -62, 38],20,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],39,),\n    ([70, 83, 9, 51, 11, 81, 27, 26, 37, 46],7,),\n    ([50, 88],1,),\n    ([0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1],6,),\n    ([96],0,),\n    ([18, 78, 14, 60, -12, -86, 32, 74, 74, 96, 58, 28, -42, 28, -18, -58, -82, -58, 22, 6, 2, -6, -4, -98],21,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([58, 22, 15, 85, 8, 74, 93, 76, 44, 51, 43, 93, 20, 51, 52, 35, 17, 13, 96, 82, 23, 51, 44, 18, 45, 79, 66, 48, 16, 31, 62, 99, 46, 66, 53, 89, 87, 2, 87, 20, 30],24,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxOnesIndex ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index\n"}
Disassembly of <code object maxOnesIndex at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( max_count )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 3 ( max_index )

4 8 LOAD_CONST 2 ( - 1 )
10 STORE_FAST 4 ( prev_prev_zero )

5 12 LOAD_CONST 2 ( - 1 )
14 STORE_FAST 5 ( prev_prev_zero )

6 16 SETUP_LOOP 54 ( to 74 )
18 LOAD_GLOBAL 0 ( range )
20 LOAD_FAST 1 ( n )
22 CALL_FUNCTION 1
24 GET_ITER
>> 26 FOR_ITER 46 ( to 72 )
28 STORE_FAST 6 ( curr )

7 30 LOAD_FAST 0 ( arr )
32 LOAD_FAST 6 ( curr )
34 BINARY_SUBSCR
36 LOAD_CONST 1 ( 0 )
38 COMPARE_OP 2 ( == )
40 POP_JUMP_IF_FALSE 26

8 42 LOAD_FAST 6 ( curr )
44 LOAD_FAST 5 ( prev_prev_zero )
46 BINARY_SUBTRACT
48 STORE_FAST 2 ( max_count )

9 50 LOAD_FAST 4 ( prev_prev_zero )
52 STORE_FAST 3 ( max_index )
54 JUMP_ABSOLUTE 26
>> 56 POP_BLOCK

10 58 LOAD_FAST 5 ( prev_prev_zero )
60 STORE_FAST 4 ( prev_prev_zero )

11 62 LOAD_FAST 6 ( curr )
64 STORE_FAST 5 ( prev_zero )
66 JUMP_ABSOLUTE 26
>> 68 POP_BLOCK

12 >> 70 LOAD_FAST 1 ( n )
72 LOAD_FAST 4 ( prev_prev_zero )
74 BINARY_SUBTRACT
76 LOAD_FAST 2 ( max_count )
78 COMPARE_OP 4 ( > )
80 POP_JUMP_IF_FALSE 90

13 82 LOAD_FAST 5 ( prev_zero )
84 STORE_FAST 3 ( max_index )

14 >> 86 LOAD_FAST 3 ( max_index )
88 RETURN_VALUE
