{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    i = 1 ;\n    res = 0.0 ;\n    sign = True ;\n    while ( n > 0 ) :\n        n = n - 1 ;\n        if ( sign ) :\n            sign = False ;\n            res = res + ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n        else :\n            sign = True ;\n            res = res - ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n    return res ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (49,),\n    (4,),\n    (60,),\n    (90,),\n    (96,),\n    (29,),\n    (86,),\n    (47,),\n    (77,),\n    (87,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def seriesSum ( n ) :\n    i = 1 ;\n    res = 0.0 ;\n    sign = True ;\n    while ( n > 0 ) :\n        n = n - 1 ;\n        if ( sign ) :\n            sign = False ;\n            res = res + ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n        else :\n            sign = True ;\n            res = res - ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n    return res ;\n"}
Disassembly of <code object seriesSum at 0x7f2b0164d390, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 1 )
2 STORE_FAST 1 ( i )

3 4 LOAD_CONST 2 ( 0.0 )
6 STORE_FAST 2 ( res )

4 8 LOAD_CONST 3 ( True )
10 STORE_FAST 3 ( sign )

5 12 SETUP_LOOP 80 ( to 98 )
>> 14 LOAD_FAST 0 ( n )
16 LOAD_CONST 4 ( 0 )
18 COMPARE_OP 4 ( > )
20 POP_JUMP_IF_FALSE 96

6 22 LOAD_FAST 0 ( n )
24 LOAD_CONST 1 ( 1 )
26 BINARY_SUBTRACT
28 STORE_FAST 0 ( n )

7 30 LOAD_FAST 3 ( sign )
32 POP_JUMP_IF_FALSE 52

8 34 LOAD_CONST 5 ( False )
36 STORE_FAST 3 ( sign )

9 38 LOAD_FAST 2 ( res )
40 LOAD_FAST 1 ( i )
42 LOAD_CONST 1 ( 1 )
44 BINARY_ADD
46 LOAD_FAST 1 ( i )
48 LOAD_CONST 6 ( 2 )
50 BINARY_ADD
52 BINARY_TRUE_DIVIDE
54 BINARY_ADD
56 STORE_FAST 2 ( res )

10 58 LOAD_FAST 1 ( i )
60 LOAD_CONST 6 ( 2 )
62 BINARY_ADD
64 STORE_FAST 1 ( i )
66 JUMP_ABSOLUTE 14
68 POP_BLOCK

12 >> 70 LOAD_CONST 3 ( True )
72 STORE_FAST 3 ( sign )

13 74 LOAD_FAST 2 ( res )
76 LOAD_FAST 1 ( i )
78 LOAD_CONST 1 ( 1 )
80 BINARY_ADD
82 LOAD_FAST 1 ( i )
84 LOAD_CONST 6 ( 2 )
86 BINARY_ADD
88 BINARY_TRUE_DIVIDE
90 BINARY_SUBTRACT
92 STORE_FAST 2 ( res )
94 JUMP_FORWARD 32 ( to 126 )
>> 96 LOAD_CONST 3 ( True )
98 STORE_FAST 3 ( sign )

14 100 LOAD_FAST 2 ( res )
102 LOAD_FAST 1 ( i )
104 LOAD_CONST 1 ( 1 )
106 BINARY_ADD
108 LOAD_FAST 1 ( i )
110 LOAD_CONST 6 ( 2 )
112 BINARY_ADD
114 BINARY_TRUE_DIVIDE
116 BINARY_SUBTRACT
118 STORE_FAST 2 ( res )

15 120 LOAD_FAST 1 ( i )
122 LOAD_CONST 6 ( 2 )
124 BINARY_ADD
126 STORE_FAST 1 ( i )
128 JUMP_FORWARD 4 ( to 144 )
>> 130 LOAD_CONST 3 ( True )
132 STORE_FAST 3 ( sign )

16 >> 134 LOAD_FAST 2 ( res )
136 RETURN_VALUE
