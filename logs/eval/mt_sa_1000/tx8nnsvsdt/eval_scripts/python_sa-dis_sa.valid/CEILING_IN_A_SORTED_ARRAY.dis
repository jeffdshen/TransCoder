{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , low , high , x ) :\n    if x <= arr [ low ] :\n        return low\n    i = low\n    for i in range ( high ) :\n        if arr [ i ] == x :\n            return i\n        if arr [ i ] < x and arr [ i + 1 ] >= x :\n            return i + 1\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 4, 6, 8, 9, 9, 10, 11, 16, 19, 20, 21, 21, 21, 24, 24, 25, 28, 30, 30, 30, 32, 34, 35, 39, 41, 42, 49, 52, 57, 59, 61, 62, 66, 68, 71, 73, 76, 79, 83, 84, 85, 86, 87, 87],23,37,44,),\n    ([92, 50, -84, 60, 32, -54, 84, -82, -42, -72, -64, -28, -48, 66, 92, -42, 42, -66, 52, -30, 48, 42, 36, -4, 64, 62, -16, 0, 20, 26, 78, 78, 12, -6, -30, -14, 76, 72, 70, -34, 98, 32],36,35,34,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],11,9,13,),\n    ([26, 68, 73, 76, 14, 19, 56, 80, 17, 7, 15, 64, 99, 98, 21, 21, 72, 12, 14, 10, 44, 82, 25, 42, 46, 86, 79, 43, 91],23,27,26,),\n    ([-90, -86, -84, -50, -30, -24, -12, -2, 8, 22, 30, 44, 58, 58, 60, 60, 62, 90],9,16,10,),\n    ([0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1],12,15,18,),\n    ([2, 2, 29, 31, 34, 39, 48, 50, 56, 61, 66, 66, 69, 73, 88],9,12,10,),\n    ([-98, 48, -58, 8, 70, 62, 92, 84, -58, -46, -26, -92, 18, -88, 40, -12, 60, 14, 54, -64, 88, 52, -44, 88, -46, -8, 36, -22, 28, -20, -50, 58, -82, -44, -44, 54, -86, 40, 10, 0, -24, -84, -10, 62, 58, 0, -88],40,29,24,),\n    ([0, 0, 0, 0, 1, 1],5,5,5,),\n    ([56, 30, 33, 5, 67, 35, 22, 54, 36, 55, 94, 89, 40, 65, 29, 76, 17, 14, 14, 49, 40, 44, 35, 69, 63, 2, 81, 78, 19, 67, 12, 14, 68, 30, 82, 85, 12, 2, 94, 33, 85, 75, 97, 31, 69, 31, 85, 26],46,47,47,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def ceilSearch ( arr , low , high , x ) :\n    if x <= arr [ low ] :\n        return low\n    i = low\n    for i in range ( high ) :\n        if arr [ i ] == x :\n            return i\n        if arr [ i ] < x and arr [ i + 1 ] >= x :\n            return i + 1\n    return - 1\n"}
Disassembly of <code object ceilSearch at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 2 ( x )
2 LOAD_FAST 0 ( arr )
4 LOAD_FAST 1 ( low )
6 BINARY_SUBSCR
8 COMPARE_OP 1 ( <= )
10 POP_JUMP_IF_FALSE 16

3 12 LOAD_FAST 1 ( low )
14 RETURN_VALUE

4 >> 16 LOAD_FAST 1 ( low )
18 STORE_FAST 4 ( i )

5 20 SETUP_LOOP 44 ( to 66 )
22 LOAD_GLOBAL 0 ( range )
24 LOAD_FAST 3 ( high )
26 CALL_FUNCTION 1
28 GET_ITER
>> 30 FOR_ITER 32 ( to 64 )
32 STORE_FAST 5 ( i )

6 34 LOAD_FAST 0 ( arr )
36 LOAD_FAST 4 ( i )
38 BINARY_SUBSCR
40 LOAD_FAST 2 ( x )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 54

7 46 LOAD_FAST 4 ( i )
48 RETURN_VALUE

8 >> 50 LOAD_FAST 0 ( arr )
52 LOAD_FAST 4 ( i )
54 BINARY_SUBSCR
56 LOAD_FAST 2 ( x )
58 COMPARE_OP 0 ( < )
60 POP_JUMP_IF_FALSE 30
62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 4 ( i )
66 LOAD_CONST 1 ( 1 )
68 BINARY_ADD
70 BINARY_SUBSCR
72 LOAD_FAST 2 ( x )
74 COMPARE_OP 5 ( >= )
76 POP_JUMP_IF_FALSE 30

9 78 LOAD_FAST 4 ( i )
80 LOAD_CONST 1 ( 1 )
82 BINARY_ADD
84 RETURN_VALUE
86 JUMP_ABSOLUTE 30
>> 88 POP_BLOCK

10 >> 90 LOAD_CONST 2 ( - 1 )
92 RETURN_VALUE
