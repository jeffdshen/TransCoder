{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    i = len ( str ) - 1\n    start = end = i + 1\n    result = ''\n    while i >= 0 :\n        if str [ i ] == ' ' :\n            start = i + 1\n            while start != end :\n                result += str [ start ]\n                start += 1\n            result += ' '\n            end = i\n        i -= 1\n    start = 0\n    while start != end :\n        result += str [ start ]\n        start += 1\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('m Dm YZ',),\n    ('65 48 57 71',),\n    ('01 010',),\n    ('mT vhByi',),\n    ('19 44 9 1',),\n    ('0',),\n    ('z vUi  ',),\n    ('7 591 36643 9 055',),\n    ('01',),\n    ('ti YGaijPY',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def wordReverse ( str ) :\n    i = len ( str ) - 1\n    start = end = i + 1\n    result = ''\n    while i >= 0 :\n        if str [ i ] == ' ' :\n            start = i + 1\n            while start != end :\n                result += str [ start ]\n                start += 1\n            result += ' '\n            end = i\n        i -= 1\n    start = 0\n    while start != end :\n        result += str [ start ]\n        start += 1\n    return result\n"}
Disassembly of <code object wordReverse at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str )
4 CALL_FUNCTION 1
6 LOAD_CONST 1 ( 1 )
8 BINARY_SUBTRACT
10 STORE_FAST 1 ( i )

3 12 LOAD_FAST 1 ( i )
14 LOAD_CONST 1 ( 1 )
16 BINARY_ADD
18 STORE_FAST 2 ( start )

4 20 LOAD_CONST 2 ( '' )
22 STORE_FAST 3 ( result )

5 24 SETUP_LOOP 72 ( to 92 )
>> 26 LOAD_FAST 1 ( i )
28 LOAD_CONST 3 ( 0 )
30 COMPARE_OP 5 ( >= )
32 POP_JUMP_IF_FALSE 90

6 34 LOAD_FAST 0 ( str )
36 LOAD_FAST 1 ( i )
38 BINARY_SUBSCR
40 LOAD_CONST 4 ( ' ' )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 66

7 46 LOAD_FAST 1 ( i )
48 LOAD_CONST 1 ( 1 )
50 BINARY_ADD
52 STORE_FAST 2 ( start )

8 54 SETUP_LOOP 30 ( to 84 )
>> 56 LOAD_FAST 2 ( start )
58 LOAD_FAST 2 ( end )
60 COMPARE_OP 3 ( != )
62 POP_JUMP_IF_FALSE 82

9 64 LOAD_FAST 3 ( result )
66 LOAD_FAST 0 ( str )
68 LOAD_FAST 2 ( start )
70 BINARY_SUBSCR
72 INPLACE_ADD
74 STORE_FAST 3 ( result )

10 76 LOAD_FAST 2 ( start )
78 LOAD_CONST 1 ( 1 )
80 INPLACE_ADD
>> 82 STORE_FAST 2 ( start )

11 86 LOAD_FAST 1 ( i )
88 STORE_FAST 2 ( end )

12 >> 90 LOAD_FAST 1 ( i )
92 LOAD_CONST 1 ( 1 )
94 INPLACE_SUBTRACT
96 STORE_FAST 1 ( i )
98 JUMP_ABSOLUTE 26
>> 100 POP_BLOCK

13 >> 102 LOAD_CONST 3 ( 0 )
104 STORE_FAST 2 ( start )

14 106 SETUP_LOOP 34 ( to 156 )
>> 108 LOAD_FAST 2 ( start )
110 LOAD_FAST 2 ( end )
112 COMPARE_OP 3 ( != )
114 POP_JUMP_IF_FALSE 154

15 116 LOAD_FAST 3 ( result )
118 LOAD_FAST 0 ( str )
120 LOAD_FAST 2 ( start )
122 BINARY_SUBSCR
124 INPLACE_ADD
126 STORE_FAST 3 ( result )

16 128 LOAD_FAST 2 ( start )
130 LOAD_CONST 1 ( 1 )
132 INPLACE_ADD
134 STORE_FAST 2 ( start )
136 JUMP_ABSOLUTE 108
>> 138 POP_BLOCK

17 >> 140 LOAD_FAST 3 ( result )
142 RETURN_VALUE
