{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    brr = [ 0 ] * ( 2 * n + 1 )\n    for i in range ( n ) :\n        brr [ i ] = arr [ i ]\n    for i in range ( n ) :\n        brr [ n + i ] = arr [ i ]\n    maxHam = 0\n    for i in range ( 1 , n ) :\n        currHam = 0\n        k = 0\n        for j in range ( i , i + n ) :\n            if brr [ j ] != arr [ k ] :\n                currHam += 1\n                k = k + 1\n        if currHam == n :\n            return n\n        maxHam = max ( maxHam , currHam )\n    return maxHam\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 4, 18, 22, 28, 34, 35, 39, 44, 45, 67, 73, 75, 79, 81, 83, 89, 93, 96],12,),\n    ([52, -28],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([24],0,),\n    ([-68, 14, 36, 62],2,),\n    ([1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0],12,),\n    ([7, 10, 19, 22, 24, 28, 29, 39, 46, 55, 62, 66, 68, 73, 74, 76, 83, 84, 85, 99],15,),\n    ([-38, 56, 86, 12, 24, -90, -20, -46, 38, 92, -44, -74, 54, 50, 46, 50, -94, 64, 32, -84, 70],14,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],8,),\n    ([61, 89, 8],2,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxHamming ( arr , n ) :\n    brr = [ 0 ] * ( 2 * n + 1 )\n    for i in range ( n ) :\n        brr [ i ] = arr [ i ]\n    for i in range ( n ) :\n        brr [ n + i ] = arr [ i ]\n    maxHam = 0\n    for i in range ( 1 , n ) :\n        currHam = 0\n        k = 0\n        for j in range ( i , i + n ) :\n            if brr [ j ] != arr [ k ] :\n                currHam += 1\n                k = k + 1\n        if currHam == n :\n            return n\n        maxHam = max ( maxHam , currHam )\n    return maxHam\n"}
Disassembly of <code object maxHamming at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_CONST 2 ( 2 )
6 LOAD_FAST 1 ( n )
8 BINARY_MULTIPLY
10 LOAD_CONST 3 ( 1 )
12 BINARY_ADD
14 BINARY_MULTIPLY
16 STORE_FAST 2 ( brr )

3 18 SETUP_LOOP 28 ( to 46 )
20 LOAD_GLOBAL 0 ( range )
22 LOAD_FAST 1 ( n )
24 CALL_FUNCTION 1
26 GET_ITER
>> 28 FOR_ITER 20 ( to 44 )
30 STORE_FAST 3 ( i )

4 32 LOAD_FAST 0 ( arr )
34 LOAD_FAST 3 ( i )
36 BINARY_SUBSCR
38 LOAD_FAST 2 ( brr )
40 LOAD_FAST 3 ( i )
42 STORE_SUBSCR
>> 44 JUMP_ABSOLUTE 28
>> 46 POP_BLOCK

5 48 SETUP_LOOP 32 ( to 88 )
50 LOAD_GLOBAL 0 ( range )
52 LOAD_FAST 1 ( n )
54 CALL_FUNCTION 1
56 GET_ITER
>> 58 FOR_ITER 20 ( to 86 )
60 STORE_FAST 3 ( i )

6 62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 3 ( i )
66 BINARY_SUBSCR
68 LOAD_FAST 2 ( brr )
70 LOAD_FAST 1 ( n )
72 LOAD_FAST 3 ( i )
74 BINARY_ADD
76 STORE_SUBSCR
78 JUMP_ABSOLUTE 58
>> 80 POP_BLOCK

7 >> 82 LOAD_CONST 1 ( 0 )
84 STORE_FAST 4 ( maxHam )

8 86 SETUP_LOOP 96 ( to 164 )
88 LOAD_GLOBAL 0 ( range )
90 LOAD_CONST 3 ( 1 )
92 LOAD_FAST 1 ( n )
94 CALL_FUNCTION 2
96 GET_ITER
>> 98 FOR_ITER 88 ( to 162 )
100 STORE_FAST 3 ( i )

9 102 LOAD_CONST 1 ( 0 )
104 STORE_FAST 5 ( currHam )

10 106 LOAD_CONST 1 ( 0 )
108 STORE_FAST 6 ( k )

11 110 SETUP_LOOP 52 ( to 160 )
112 LOAD_GLOBAL 0 ( range )
114 LOAD_FAST 3 ( i )
116 LOAD_FAST 3 ( i )
118 LOAD_FAST 1 ( n )
120 BINARY_ADD
122 CALL_FUNCTION 2
124 GET_ITER
>> 126 FOR_ITER 44 ( to 158 )
128 STORE_FAST 7 ( j )

12 130 LOAD_FAST 2 ( brr )
132 LOAD_FAST 7 ( j )
134 BINARY_SUBSCR
136 LOAD_FAST 0 ( arr )
138 LOAD_FAST 6 ( k )
140 BINARY_SUBSCR
142 COMPARE_OP 3 ( != )
144 POP_JUMP_IF_FALSE 126

13 146 LOAD_FAST 5 ( currHam )
148 LOAD_CONST 3 ( 1 )
150 INPLACE_ADD
152 STORE_FAST 5 ( currHam )

14 154 LOAD_FAST 6 ( k )
156 LOAD_CONST 3 ( 1 )
158 BINARY_ADD
160 STORE_FAST 6 ( k )
160 JUMP_ABSOLUTE 126
>> 162 POP_BLOCK

15 >> 164 LOAD_FAST 5 ( currHam )
166 LOAD_FAST 1 ( n )
168 COMPARE_OP 2 ( == )
170 POP_JUMP_IF_FALSE 176

16 172 LOAD_FAST 1 ( n )
174 RETURN_VALUE

17 >> 176 LOAD_GLOBAL 1 ( max )
178 LOAD_FAST 4 ( maxHam )
180 LOAD_FAST 5 ( currHam )
182 CALL_FUNCTION 2
184 STORE_FAST 4 ( maxHam )
186 JUMP_ABSOLUTE 98
>> 188 POP_BLOCK

18 >> 190 LOAD_FAST 4 ( maxHam )
192 RETURN_VALUE
