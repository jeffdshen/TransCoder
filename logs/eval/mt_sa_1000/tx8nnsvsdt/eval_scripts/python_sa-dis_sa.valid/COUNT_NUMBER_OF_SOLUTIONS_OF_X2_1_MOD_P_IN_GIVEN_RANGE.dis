{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n , p ) :\n    ans = 0 ;\n    for x in range ( 1 , p ) :\n        if ( ( x * x ) % p == 1 ) :\n            last = x + p * ( n / p ) ;\n            if ( last > n ) :\n                last -= p ;\n            ans += ( ( last - x ) / p + 1 ) ;\n    return int ( ans ) ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (94,36,),\n    (11,79,),\n    (88,63,),\n    (85,43,),\n    (74,89,),\n    (96,33,),\n    (49,51,),\n    (50,24,),\n    (21,26,),\n    (81,19,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findCountOfSolutions ( n , p ) :\n    ans = 0 ;\n    for x in range ( 1 , p ) :\n        if ( ( x * x ) % p == 1 ) :\n            last = x + p * ( n / p ) ;\n            if ( last > n ) :\n                last -= p ;\n            ans += ( ( last - x ) / p + 1 ) ;\n    return int ( ans ) ;\n"}
Disassembly of <code object findCountOfSolutions at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( ans )

3 4 SETUP_LOOP 92 ( to 98 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_CONST 2 ( 1 )
10 LOAD_FAST 1 ( p )
12 CALL_FUNCTION 2
14 GET_ITER
>> 16 FOR_ITER 80 ( to 96 )
18 STORE_FAST 3 ( x )

4 20 LOAD_FAST 3 ( x )
22 LOAD_FAST 3 ( x )
24 BINARY_MULTIPLY
26 LOAD_FAST 1 ( p )
28 BINARY_MODULO
30 LOAD_CONST 2 ( 1 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 16

5 36 LOAD_FAST 3 ( x )
38 LOAD_FAST 1 ( p )
40 LOAD_FAST 0 ( n )
42 LOAD_FAST 1 ( p )
44 BINARY_TRUE_DIVIDE
46 BINARY_MULTIPLY
48 BINARY_ADD
50 STORE_FAST 4 ( last )

6 52 LOAD_FAST 4 ( last )
54 LOAD_FAST 0 ( n )
56 COMPARE_OP 4 ( > )
58 POP_JUMP_IF_FALSE 72

7 60 LOAD_FAST 4 ( last )
62 LOAD_FAST 1 ( p )
64 INPLACE_SUBTRACT
66 STORE_FAST 4 ( last )

8 >> 68 LOAD_FAST 2 ( ans )
70 LOAD_FAST 4 ( last )
72 LOAD_FAST 3 ( x )
74 BINARY_SUBTRACT
76 LOAD_FAST 1 ( p )
78 BINARY_TRUE_DIVIDE
80 LOAD_CONST 2 ( 1 )
82 BINARY_ADD
84 INPLACE_ADD
86 STORE_FAST 2 ( ans )
88 JUMP_ABSOLUTE 16
>> 90 POP_BLOCK

9 >> 92 LOAD_GLOBAL 1 ( int )
94 LOAD_FAST 2 ( ans )
96 CALL_FUNCTION 1
98 RETURN_VALUE
