{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , k ) :\n    count = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] <= k ) :\n            count = count + 1\n    bad = 0\n    for i in range ( 0 , count ) :\n        if ( arr [ i ] > k ) :\n            bad = bad + 1\n    ans = bad\n    j = count\n    for i in range ( 0 , n ) :\n        if ( j == n ) :\n            break\n        if ( arr [ i ] > k ) :\n            bad = bad - 1\n        if ( arr [ j ] > k ) :\n            bad = bad + 1\n        ans = min ( ans , bad )\n        j = j + 1\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([7, 12, 15, 30, 33, 34, 53, 66, 73, 74, 76, 77, 85, 90],9,8,),\n    ([-62, -20, -26, -24, 92, 66, -74, -4, 18, -82, -36, 92, -4, 92, -80, 56, -24, 4, -48, -10, -14, -46, -16, -58, -58, -6, -68, -22, -82, -16, 76, -30, -86, -38, -66, 28, 58, 30, -44, -56],24,28,),\n    ([0, 0, 0, 0, 0, 1, 1],5,6,),\n    ([8, 48, 64, 77, 61, 60, 96, 95, 41, 68, 9, 67, 10, 66, 16, 59, 83, 21, 47, 16, 13, 85, 52, 11, 48, 31, 99, 57, 57, 44, 66, 93, 80, 69, 23, 2, 55, 90],36,24,),\n    ([-80, -58, -40, -34, 14, 36, 48, 56, 58, 60, 84, 90, 92, 92],7,8,),\n    ([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1],26,23,),\n    ([4, 4, 8, 9, 13, 17, 18, 19, 21, 22, 22, 23, 27, 28, 30, 44, 46, 48, 53, 53, 55, 60, 61, 62, 68, 70, 70, 71, 73, 80, 82, 82, 85, 88, 90, 93, 99],28,36,),\n    ([-28, 50, 82, -32, 32, -78, 12, 50, 38, 34, -10, 6, 86, -56, -2],13,9,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1, 1],9,8,),\n    ([37, 88, 83, 91, 11, 39, 98, 70, 93, 74, 24, 90, 66, 3, 6, 28],12,12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minSwap ( arr , n , k ) :\n    count = 0\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] <= k ) :\n            count = count + 1\n    bad = 0\n    for i in range ( 0 , count ) :\n        if ( arr [ i ] > k ) :\n            bad = bad + 1\n    ans = bad\n    j = count\n    for i in range ( 0 , n ) :\n        if ( j == n ) :\n            break\n        if ( arr [ i ] > k ) :\n            bad = bad - 1\n        if ( arr [ j ] > k ) :\n            bad = bad + 1\n        ans = min ( ans , bad )\n        j = j + 1\n    return ans\n"}
Disassembly of <code object minSwap at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 3 ( count )

3 4 SETUP_LOOP 40 ( to 46 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_CONST 1 ( 0 )
10 LOAD_FAST 1 ( n )
12 CALL_FUNCTION 2
14 GET_ITER
>> 16 FOR_ITER 26 ( to 44 )
18 STORE_FAST 4 ( i )

4 20 LOAD_FAST 0 ( arr )
22 LOAD_FAST 4 ( i )
24 BINARY_SUBSCR
26 LOAD_FAST 2 ( k )
28 COMPARE_OP 1 ( <= )
30 POP_JUMP_IF_FALSE 16

5 32 LOAD_FAST 3 ( count )
34 LOAD_CONST 2 ( 1 )
36 BINARY_ADD
38 STORE_FAST 3 ( count )
40 JUMP_ABSOLUTE 16
42 POP_BLOCK
>> 44 LOAD_CONST 0 ( None )
>> 46 STORE_FAST 5 ( bad )

6 48 SETUP_LOOP 40 ( to 92 )
50 LOAD_GLOBAL 0 ( range )
52 LOAD_CONST 1 ( 0 )
54 LOAD_FAST 3 ( count )
56 CALL_FUNCTION 2
58 GET_ITER
>> 60 FOR_ITER 28 ( to 90 )
62 STORE_FAST 4 ( i )

7 64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 4 ( i )
68 BINARY_SUBSCR
70 LOAD_FAST 2 ( k )
72 COMPARE_OP 4 ( > )
74 POP_JUMP_IF_FALSE 60

8 76 LOAD_FAST 5 ( bad )
78 LOAD_CONST 2 ( 1 )
80 BINARY_ADD
82 STORE_FAST 5 ( bad )
84 JUMP_ABSOLUTE 60
>> 86 POP_BLOCK

9 >> 88 LOAD_FAST 5 ( bad )
90 STORE_FAST 5 ( ans )

10 92 LOAD_FAST 3 ( count )
94 STORE_FAST 6 ( j )

11 96 SETUP_LOOP 68 ( to 146 )
98 LOAD_GLOBAL 0 ( range )
100 LOAD_CONST 1 ( 0 )
102 LOAD_FAST 1 ( n )
104 CALL_FUNCTION 2
106 GET_ITER
>> 108 FOR_ITER 52 ( to 144 )
110 STORE_FAST 4 ( i )

12 112 LOAD_FAST 6 ( j )
114 LOAD_FAST 1 ( n )
116 COMPARE_OP 2 ( == )
118 POP_JUMP_IF_FALSE 132

13 120 BREAK_LOOP
122 JUMP_ABSOLUTE 108
124 POP_BLOCK

14 >> 126 LOAD_FAST 0 ( arr )
128 LOAD_FAST 4 ( i )
130 BINARY_SUBSCR
132 LOAD_FAST 2 ( k )
134 COMPARE_OP 4 ( > )
136 POP_JUMP_IF_FALSE 108

15 138 LOAD_FAST 5 ( bad )
140 LOAD_CONST 2 ( 1 )
142 BINARY_SUBTRACT
144 STORE_FAST 5 ( bad )
146 JUMP_ABSOLUTE 108
>> 148 POP_BLOCK

16 >> 150 LOAD_FAST 0 ( arr )
152 LOAD_FAST 6 ( j )
154 BINARY_SUBSCR
156 LOAD_FAST 2 ( k )
158 COMPARE_OP 4 ( > )
160 POP_JUMP_IF_FALSE 166

17 162 LOAD_FAST 5 ( bad )
164 LOAD_CONST 2 ( 1 )
166 BINARY_ADD
168 STORE_FAST 5 ( bad )

18 >> 170 LOAD_GLOBAL 1 ( min )
172 LOAD_FAST 5 ( ans )
174 LOAD_FAST 5 ( bad )
176 CALL_FUNCTION 2
178 STORE_FAST 5 ( ans )

19 180 LOAD_FAST 6 ( j )
182 LOAD_CONST 2 ( 1 )
184 BINARY_ADD
186 STORE_FAST 6 ( j )

20 188 LOAD_FAST 5 ( ans )
190 LOAD_CONST 2 ( 1 )
192 BINARY_ADD
194 STORE_FAST 6 ( j )

21 >> 196 LOAD_FAST 5 ( ans )
198 RETURN_VALUE
