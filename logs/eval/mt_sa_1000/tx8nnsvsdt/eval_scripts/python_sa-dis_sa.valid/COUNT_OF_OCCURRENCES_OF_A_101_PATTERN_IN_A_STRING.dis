{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    length = len ( s )\n    oneSeen = False\n    count = 0\n    for i in range ( length ) :\n        if ( s [ i ] == '1' and oneSeen ) :\n            if ( s [ i - 1 ] == '0' ) :\n                count += 1\n        if ( s [ i ] == '1' and oneSeen == 0 ) :\n            oneSeen = True\n        if ( s [ i ] != '0' and s [ i ] != '1' ) :\n            oneSeen = False\n    return count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('1001ab010abc01001',),\n    ('1001010001',),\n    ('010100010100',),\n    ('DLCu',),\n    ('7072430592',),\n    ('011',),\n    ('pnJpypYOza',),\n    ('1037',),\n    ('111',),\n    ('HxK',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countPattern ( s ) :\n    length = len ( s )\n    oneSeen = False\n    count = 0\n    for i in range ( length ) :\n        if ( s [ i ] == '1' and oneSeen ) :\n            if ( s [ i - 1 ] == '0' ) :\n                count += 1\n        if ( s [ i ] == '1' and oneSeen == 0 ) :\n            oneSeen = True\n        if ( s [ i ] != '0' and s [ i ] != '1' ) :\n            oneSeen = False\n    return count\n"}
Disassembly of <code object countPattern at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( length )

3 8 LOAD_CONST 1 ( False )
10 STORE_FAST 2 ( oneSeen )

4 12 LOAD_CONST 2 ( 0 )
14 STORE_FAST 3 ( count )

5 16 SETUP_LOOP 52 ( to 68 )
18 LOAD_GLOBAL 1 ( range )
20 LOAD_FAST 1 ( length )
22 CALL_FUNCTION 1
24 GET_ITER
>> 26 FOR_ITER 44 ( to 66 )
28 STORE_FAST 4 ( i )

6 30 LOAD_FAST 0 ( s )
32 LOAD_FAST 4 ( i )
34 BINARY_SUBSCR
36 LOAD_CONST 3 ( '1' )
38 COMPARE_OP 2 ( == )
40 POP_JUMP_IF_FALSE 26
42 LOAD_FAST 2 ( oneSeen )
44 POP_JUMP_IF_FALSE 26

7 46 LOAD_FAST 0 ( s )
48 LOAD_FAST 4 ( i )
50 LOAD_CONST 4 ( 1 )
52 BINARY_SUBTRACT
54 BINARY_SUBSCR
56 LOAD_CONST 5 ( '0' )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 26

8 62 LOAD_FAST 3 ( count )
64 LOAD_CONST 4 ( 1 )
66 INPLACE_ADD
68 STORE_FAST 3 ( count )
70 JUMP_ABSOLUTE 26
>> 72 POP_BLOCK

9 >> 74 LOAD_FAST 0 ( s )
76 LOAD_FAST 4 ( i )
78 BINARY_SUBSCR
80 LOAD_CONST 3 ( '1' )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 98
86 LOAD_FAST 2 ( oneSeen )
88 LOAD_CONST 2 ( 0 )
90 COMPARE_OP 2 ( == )
92 POP_JUMP_IF_FALSE 98

10 94 LOAD_CONST 6 ( True )
96 STORE_FAST 2 ( oneSeen )

11 >> 98 LOAD_FAST 0 ( s )
100 LOAD_FAST 4 ( i )
102 BINARY_SUBSCR
104 LOAD_CONST 5 ( '0' )
106 COMPARE_OP 3 ( != )
108 POP_JUMP_IF_FALSE 26
110 LOAD_FAST 0 ( s )
112 LOAD_FAST 4 ( i )
114 BINARY_SUBSCR
116 LOAD_CONST 3 ( '1' )
118 COMPARE_OP 3 ( != )
120 POP_JUMP_IF_FALSE 26

12 122 LOAD_CONST 1 ( False )
124 STORE_FAST 2 ( oneSeen )
126 JUMP_ABSOLUTE 26
>> 128 POP_BLOCK

13 >> 130 LOAD_FAST 3 ( count )
132 RETURN_VALUE
