{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , n ) :\n    cnt = dict ( )\n    ans = 0\n    pre_sum = 0\n    for i in range ( n ) :\n        ans += ( i * a [ i ] ) - pre_sum\n        pre_sum += a [ i ]\n        if ( a [ i ] - 1 ) in cnt :\n            ans -= cnt [ a [ i ] - 1 ]\n        if ( a [ i ] + 1 ) in cnt :\n            ans += cnt [ a [ i ] + 1 ]\n        if a [ i ] not in cnt :\n            cnt [ a [ i ] ] = 0\n        cnt [ a [ i ] ] += 1\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 8, 12, 19, 23, 23, 26, 39, 54, 56, 57, 57, 73, 78, 83, 83, 89, 91],15,),\n    ([62, -34, 10, -28, -42, -12, 4, 20, -20, -84, -76, -16, -44, 26, -78, -40, 50, -10, -56, 76, -88, 24, 64, 10, 64, -8, -68, -42, 26, 24, 62, 36, -68, 8, -68, -2, 8, 38, -18],20,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],18,),\n    ([23, 14, 44, 29, 93, 56, 22, 29, 97, 71, 43, 72, 74, 8, 92, 40, 18, 34, 78, 79, 93, 63, 79, 44, 35, 72, 88, 83, 40, 89, 66, 66, 54, 56, 44, 62, 72, 94, 79, 79, 24, 55, 72, 37, 27, 55, 16, 58, 83],25,),\n    ([-96, -94, -90, -90, -86, -82, -80, -80, -58, -48, -40, -32, -32, -20, -20, -20, -12, -12, -6, -6, -2, 0, 4, 16, 16, 16, 42, 48, 58, 64, 68, 76, 76, 76, 78, 80, 82, 88, 88, 88, 92, 94, 96, 98],27,),\n    ([1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],34,),\n    ([3, 4, 4, 8, 10, 10, 11, 15, 19, 19, 20, 24, 25, 25, 27, 30, 41, 43, 44, 45, 47, 55, 59, 59, 61, 63, 63, 67, 67, 69, 72, 73, 75, 77, 77, 78, 81, 81, 83, 84, 92, 94, 99],31,),\n    ([94, -86, 94, 54, -52, 86, 68, 64, 98, 54, -14, -60, -60, -92, 80, -16, 28, 16, -74, 68, 32, -54, 58, -16, -2, -52, -92, -36, 96, -18, 14, 76, 16],26,),\n    ([0, 0, 0, 0, 1, 1, 1, 1],7,),\n    ([10, 28, 63, 2, 78, 12, 51, 82, 89, 65, 99],8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sum ( a , n ) :\n    cnt = dict ( )\n    ans = 0\n    pre_sum = 0\n    for i in range ( n ) :\n        ans += ( i * a [ i ] ) - pre_sum\n        pre_sum += a [ i ]\n        if ( a [ i ] - 1 ) in cnt :\n            ans -= cnt [ a [ i ] - 1 ]\n        if ( a [ i ] + 1 ) in cnt :\n            ans += cnt [ a [ i ] + 1 ]\n        if a [ i ] not in cnt :\n            cnt [ a [ i ] ] = 0\n        cnt [ a [ i ] ] += 1\n    return ans\n"}
Disassembly of <code object sum at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( dict )
2 CALL_FUNCTION 0
4 STORE_FAST 2 ( cnt )

3 6 LOAD_CONST 1 ( 0 )
8 STORE_FAST 3 ( ans )

4 10 LOAD_CONST 1 ( 0 )
12 STORE_FAST 4 ( pre_sum )

5 14 SETUP_LOOP 118 ( to 134 )
16 LOAD_GLOBAL 1 ( range )
18 LOAD_FAST 1 ( n )
20 CALL_FUNCTION 1
22 GET_ITER
>> 24 FOR_ITER 106 ( to 132 )
26 STORE_FAST 5 ( i )

6 28 LOAD_FAST 3 ( ans )
30 LOAD_FAST 5 ( i )
32 LOAD_FAST 0 ( a )
34 LOAD_FAST 5 ( i )
36 BINARY_SUBSCR
38 BINARY_MULTIPLY
40 LOAD_FAST 4 ( pre_sum )
42 BINARY_SUBTRACT
44 INPLACE_ADD
46 STORE_FAST 3 ( ans )

7 48 LOAD_FAST 4 ( pre_sum )
50 LOAD_FAST 0 ( a )
52 LOAD_FAST 5 ( i )
54 BINARY_SUBSCR
56 LOAD_CONST 2 ( 1 )
58 BINARY_SUBTRACT
60 LOAD_FAST 2 ( cnt )
62 COMPARE_OP 6 ( in )
64 POP_JUMP_IF_FALSE 92

8 66 LOAD_FAST 3 ( ans )
68 LOAD_FAST 2 ( cnt )
70 LOAD_FAST 0 ( a )
72 LOAD_FAST 5 ( i )
74 BINARY_SUBSCR
76 LOAD_CONST 2 ( 1 )
78 BINARY_SUBTRACT
80 BINARY_SUBSCR
82 INPLACE_SUBTRACT
84 STORE_FAST 3 ( ans )
86 JUMP_ABSOLUTE 24

9 >> 88 LOAD_FAST 0 ( a )
90 LOAD_FAST 5 ( i )
92 BINARY_SUBSCR
94 LOAD_CONST 2 ( 1 )
96 BINARY_ADD
98 LOAD_FAST 2 ( cnt )
100 COMPARE_OP 6 ( in )
102 POP_JUMP_IF_FALSE 120

10 104 LOAD_FAST 3 ( ans )
106 LOAD_FAST 2 ( cnt )
108 LOAD_FAST 0 ( a )
110 LOAD_FAST 5 ( i )
112 BINARY_SUBSCR
114 LOAD_CONST 2 ( 1 )
116 BINARY_ADD
118 BINARY_SUBSCR
>> 120 INPLACE_ADD
122 STORE_FAST 3 ( ans )

11 >> 124 LOAD_FAST 0 ( a )
126 LOAD_FAST 5 ( i )
128 BINARY_SUBSCR
130 LOAD_FAST 2 ( cnt )
132 COMPARE_OP 7 ( not in )
134 POP_JUMP_IF_FALSE 24

12 136 LOAD_CONST 1 ( 0 )
138 LOAD_FAST 2 ( cnt )
140 LOAD_FAST 0 ( a )
142 LOAD_FAST 5 ( i )
144 BINARY_SUBSCR
146 LOAD_CONST 2 ( 1 )
148 BINARY_ADD
150 BINARY_SUBSCR
152 INPLACE_ADD
154 STORE_FAST 3 ( ans )

13 >> 156 LOAD_FAST 2 ( cnt )
158 LOAD_FAST 0 ( a )
160 LOAD_FAST 5 ( i )
162 BINARY_SUBSCR
164 LOAD_CONST 2 ( 1 )
166 INPLACE_ADD
168 STORE_FAST 2 ( cnt )
170 JUMP_ABSOLUTE 24
>> 172 POP_BLOCK

14 >> 174 LOAD_FAST 3 ( ans )
176 RETURN_VALUE
