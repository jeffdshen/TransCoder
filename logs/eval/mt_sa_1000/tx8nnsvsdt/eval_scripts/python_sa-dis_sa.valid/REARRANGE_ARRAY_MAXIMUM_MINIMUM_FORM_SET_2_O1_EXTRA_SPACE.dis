{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    max_idx = n - 1\n    min_idx = 0\n    max_elem = arr [ n - 1 ] + 1\n    for i in range ( 0 , n ) :\n        if i % 2 == 0 :\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= 1\n        else :\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += 1\n    for i in range ( 0 , n ) :\n        arr [ i ] = arr [ i ] / max_elem\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 1, 2, 3, 9, 10, 14, 22, 26, 28, 29, 29, 30, 32, 32, 32, 34, 37, 39, 40, 42, 42, 42, 43, 45, 47, 49, 52, 53, 54, 56, 58, 59, 68, 71, 73, 76, 81, 81, 83, 84, 91, 94],29,),\n    ([50, 46, 6, -57, 67, 34, -52, 26, -93, 97, -84, 29, 15, -63, 65, 25, -19, 92, -38, -28, 89, 25, 61, -34, -70, -80, 88, -18, 7, 52, 32, -63, 32, -23, -11, 46, -12, 94, 76, -67, -42],38,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 1],4,),\n    ([15, 99, 57, 69, 22, 64, 41, 87, 71, 56, 23, 25, 91, 6, 34, 63, 9, 60, 49, 97, 51, 60, 70, 37, 31, 98, 41, 62, 93, 58, 14, 36, 36, 79, 8, 26, 36, 48, 85, 28, 68, 62, 80, 86, 76, 80, 51],30,),\n    ([-99, -99, -90, -90, -85, -85, -79, -77, -72, -71, -67, -66, -61, -39, -39, -35, -35, -23, -20, -18, -16, -13, -2, 1, 5, 6, 10, 24, 27, 32, 33, 38, 48, 67, 70, 76, 82, 88],34,),\n    ([0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0],33,),\n    ([2, 22, 32, 34, 43, 66, 70, 74, 94, 94],6,),\n    ([-99, -28, 76, -50, 41, -85, -47, 72, -92, -26, -54, -31, 14, 47, 66, 23],10,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],42,),\n    ([19, 31, 26, 42, 41, 23, 47, 13, 89, 66, 66, 16, 73, 28, 77, 35, 41, 77, 31, 85, 32, 54, 98, 72, 59],20,)\n        ]\n    filled_function_param = [\n    ([1, 1, 2, 3, 9, 10, 14, 22, 26, 28, 29, 29, 30, 32, 32, 32, 34, 37, 39, 40, 42, 42, 42, 43, 45, 47, 49, 52, 53, 54, 56, 58, 59, 68, 71, 73, 76, 81, 81, 83, 84, 91, 94],29,),\n    ([50, 46, 6, -57, 67, 34, -52, 26, -93, 97, -84, 29, 15, -63, 65, 25, -19, 92, -38, -28, 89, 25, 61, -34, -70, -80, 88, -18, 7, 52, 32, -63, 32, -23, -11, 46, -12, 94, 76, -67, -42],38,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 1],4,),\n    ([15, 99, 57, 69, 22, 64, 41, 87, 71, 56, 23, 25, 91, 6, 34, 63, 9, 60, 49, 97, 51, 60, 70, 37, 31, 98, 41, 62, 93, 58, 14, 36, 36, 79, 8, 26, 36, 48, 85, 28, 68, 62, 80, 86, 76, 80, 51],30,),\n    ([-99, -99, -90, -90, -85, -85, -79, -77, -72, -71, -67, -66, -61, -39, -39, -35, -35, -23, -20, -18, -16, -13, -2, 1, 5, 6, 10, 24, 27, 32, 33, 38, 48, 67, 70, 76, 82, 88],34,),\n    ([0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0],33,),\n    ([2, 22, 32, 34, 43, 66, 70, 74, 94, 94],6,),\n    ([-99, -28, 76, -50, 41, -85, -47, 72, -92, -26, -54, -31, 14, 47, 66, 23],10,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],42,),\n    ([19, 31, 26, 42, 41, 23, 47, 13, 89, 66, 66, 16, 73, 28, 77, 35, 41, 77, 31, 85, 32, 54, 98, 72, 59],20,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def rearrange ( arr , n ) :\n    max_idx = n - 1\n    min_idx = 0\n    max_elem = arr [ n - 1 ] + 1\n    for i in range ( 0 , n ) :\n        if i % 2 == 0 :\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= 1\n        else :\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += 1\n    for i in range ( 0 , n ) :\n        arr [ i ] = arr [ i ] / max_elem\n"}
Disassembly of <code object rearrange at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 1 )
4 BINARY_SUBTRACT
6 STORE_FAST 2 ( max_idx )

3 8 LOAD_CONST 2 ( 0 )
10 STORE_FAST 3 ( min_idx )

4 12 LOAD_FAST 0 ( arr )
14 LOAD_FAST 1 ( n )
16 LOAD_CONST 1 ( 1 )
18 BINARY_SUBTRACT
20 BINARY_SUBSCR
22 LOAD_CONST 1 ( 1 )
24 BINARY_ADD
26 STORE_FAST 4 ( max_elem )

5 28 SETUP_LOOP 92 ( to 126 )
30 LOAD_GLOBAL 0 ( range )
32 LOAD_CONST 2 ( 0 )
34 LOAD_FAST 1 ( n )
36 CALL_FUNCTION 2
38 GET_ITER
>> 40 FOR_ITER 76 ( to 124 )
42 STORE_FAST 5 ( i )

6 44 LOAD_FAST 5 ( i )
46 LOAD_CONST 3 ( 2 )
48 BINARY_MODULO
50 LOAD_CONST 2 ( 0 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 92

7 56 LOAD_FAST 0 ( arr )
58 LOAD_FAST 5 ( i )
60 DUP_TOP_TWO
62 BINARY_SUBSCR
64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 2 ( max_idx )
68 BINARY_SUBSCR
70 LOAD_FAST 2 ( max_idx )
72 BINARY_MODULO
74 LOAD_FAST 4 ( max_elem )
76 BINARY_MULTIPLY
78 INPLACE_ADD
80 ROT_THREE
82 STORE_SUBSCR

8 84 LOAD_FAST 2 ( max_idx )
86 LOAD_CONST 1 ( 1 )
88 INPLACE_SUBTRACT
90 STORE_FAST 2 ( max_idx )

9 >> 92 LOAD_FAST 0 ( arr )
94 LOAD_FAST 5 ( i )
96 DUP_TOP_TWO
98 BINARY_SUBSCR
100 LOAD_FAST 0 ( arr )
102 LOAD_FAST 3 ( min_idx )
104 BINARY_SUBSCR
106 LOAD_FAST 2 ( max_elem )
108 BINARY_MULTIPLY
110 LOAD_FAST 4 ( max_elem )
112 BINARY_MULTIPLY
114 INPLACE_ADD
116 ROT_THREE
118 STORE_SUBSCR

10 120 LOAD_FAST 3 ( min_idx )
122 LOAD_CONST 1 ( 1 )
124 INPLACE_ADD
126 STORE_FAST 3 ( min_idx )
128 JUMP_ABSOLUTE 40
>> 130 POP_BLOCK
>> 132 JUMP_ABSOLUTE 40
>> 134 POP_BLOCK

11 >> 136 SETUP_LOOP 34 ( to 156 )
138 LOAD_GLOBAL 0 ( range )
140 LOAD_CONST 2 ( 0 )
142 LOAD_FAST 1 ( n )
144 CALL_FUNCTION 2
146 GET_ITER
>> 148 FOR_ITER 18 ( to 154 )
150 STORE_FAST 5 ( i )

12 152 LOAD_FAST 0 ( arr )
154 LOAD_FAST 5 ( i )
156 BINARY_SUBSCR
158 LOAD_FAST 2 ( max_elem )
160 BINARY_TRUE_DIVIDE
162 LOAD_FAST 0 ( arr )
164 LOAD_FAST 5 ( i )
166 STORE_SUBSCR
168 JUMP_ABSOLUTE 148
>> 170 POP_BLOCK
>> 172 LOAD_CONST 0 ( None )
174 RETURN_VALUE
