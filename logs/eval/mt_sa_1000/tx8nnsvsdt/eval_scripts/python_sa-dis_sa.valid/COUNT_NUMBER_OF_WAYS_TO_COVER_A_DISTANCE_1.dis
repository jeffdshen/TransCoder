{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( dist ) :\n    count = [ 0 ] * ( dist + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    count [ 2 ] = 2\n    for i in range ( 3 , dist + 1 ) :\n        count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + count [ i - 3 ] )\n    return count [ dist ] ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (37,),\n    (82,),\n    (87,),\n    (80,),\n    (92,),\n    (58,),\n    (98,),\n    (53,),\n    (11,),\n    (58,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def printCountDP ( dist ) :\n    count = [ 0 ] * ( dist + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    count [ 2 ] = 2\n    for i in range ( 3 , dist + 1 ) :\n        count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + count [ i - 3 ] )\n    return count [ dist ] ;\n"}
Disassembly of <code object printCountDP at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_FAST 0 ( dist )
6 LOAD_CONST 2 ( 1 )
8 BINARY_ADD
10 BINARY_MULTIPLY
12 STORE_FAST 1 ( count )

3 14 LOAD_CONST 2 ( 1 )
16 LOAD_FAST 1 ( count )
18 LOAD_CONST 1 ( 0 )
20 STORE_SUBSCR

4 22 LOAD_CONST 2 ( 1 )
24 LOAD_FAST 1 ( count )
26 LOAD_CONST 2 ( 1 )
28 STORE_SUBSCR

5 30 LOAD_CONST 3 ( 2 )
32 LOAD_FAST 1 ( count )
34 LOAD_CONST 3 ( 2 )
36 STORE_SUBSCR

6 38 SETUP_LOOP 64 ( to 102 )
40 LOAD_GLOBAL 0 ( range )
42 LOAD_CONST 4 ( 3 )
44 LOAD_FAST 0 ( dist )
46 LOAD_CONST 2 ( 1 )
48 BINARY_ADD
50 CALL_FUNCTION 2
52 GET_ITER
>> 54 FOR_ITER 44 ( to 100 )
56 STORE_FAST 2 ( i )

7 58 LOAD_FAST 1 ( count )
60 LOAD_FAST 2 ( i )
62 LOAD_CONST 2 ( 1 )
64 BINARY_SUBTRACT
66 BINARY_SUBSCR
68 LOAD_FAST 1 ( count )
70 LOAD_FAST 2 ( i )
72 LOAD_CONST 3 ( 2 )
74 BINARY_SUBTRACT
76 BINARY_SUBSCR
78 BINARY_ADD
80 LOAD_FAST 1 ( count )
82 LOAD_FAST 2 ( i )
84 LOAD_CONST 4 ( 3 )
86 BINARY_SUBTRACT
88 BINARY_SUBSCR
90 BINARY_ADD
92 LOAD_FAST 1 ( count )
94 LOAD_FAST 2 ( i )
96 LOAD_CONST 4 ( 3 )
98 BINARY_SUBTRACT
100 BINARY_SUBSCR
102 BINARY_ADD
104 = BINARY_ADD
106 LOAD_FAST 1 ( count )
108 LOAD_FAST 2 ( i )
110 LOAD_CONST 4 ( 3 )
112 BINARY_SUBTRACT
114 BINARY_SUBSCR
116 BINARY_ADD
118 LOAD_FAST 1 ( count )
120 LOAD_FAST 2 ( i )
122 STORE_SUBSCR
124 JUMP_ABSOLUTE 54
>> 126 POP_BLOCK

8 >> 128 LOAD_FAST 1 ( count )
130 LOAD_FAST 0 ( dist )
132 BINARY_SUBSCR
134 RETURN_VALUE
