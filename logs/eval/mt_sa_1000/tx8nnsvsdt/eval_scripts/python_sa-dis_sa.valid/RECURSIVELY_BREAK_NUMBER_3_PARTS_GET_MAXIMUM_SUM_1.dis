{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ 0 ] = 0\n    dp [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i / 3 ) ] + dp [ int ( i / 4 ) ] , i ) ;\n    return dp [ n ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (50,),\n    (83,),\n    (18,),\n    (24,),\n    (31,),\n    (38,),\n    (94,),\n    (24,),\n    (13,),\n    (53,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def breakSum ( n ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ 0 ] = 0\n    dp [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i / 3 ) ] + dp [ int ( i / 4 ) ] , i ) ;\n    return dp [ n ]\n"}
Disassembly of <code object breakSum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_FAST 0 ( n )
6 LOAD_CONST 2 ( 1 )
8 BINARY_ADD
10 BINARY_MULTIPLY
12 STORE_FAST 1 ( dp )

3 14 LOAD_CONST 1 ( 0 )
16 LOAD_FAST 1 ( dp )
18 LOAD_CONST 1 ( 0 )
20 STORE_SUBSCR

4 22 LOAD_CONST 2 ( 1 )
24 LOAD_FAST 1 ( dp )
26 LOAD_CONST 2 ( 1 )
28 STORE_SUBSCR

5 30 SETUP_LOOP 72 ( to 96 )
32 LOAD_GLOBAL 0 ( range )
34 LOAD_CONST 3 ( 2 )
36 LOAD_FAST 0 ( n )
38 LOAD_CONST 2 ( 1 )
40 BINARY_ADD
42 CALL_FUNCTION 2
44 GET_ITER
>> 46 FOR_ITER 52 ( to 94 )
48 STORE_FAST 2 ( i )

6 50 LOAD_GLOBAL 1 ( max )
52 LOAD_FAST 1 ( dp )
54 LOAD_GLOBAL 2 ( int )
56 LOAD_FAST 2 ( i )
58 LOAD_CONST 3 ( 2 )
60 BINARY_TRUE_DIVIDE
62 CALL_FUNCTION 1
64 BINARY_SUBSCR
66 LOAD_FAST 1 ( dp )
68 LOAD_GLOBAL 2 ( int )
70 LOAD_FAST 2 ( i )
72 LOAD_CONST 4 ( 3 )
74 BINARY_TRUE_DIVIDE
76 CALL_FUNCTION 1
78 BINARY_SUBSCR
80 BINARY_ADD
82 LOAD_FAST 1 ( dp )
84 LOAD_GLOBAL 2 ( int )
86 LOAD_FAST 2 ( i )
88 LOAD_CONST 5 ( 4 )
90 BINARY_TRUE_DIVIDE
92 CALL_FUNCTION 1
94 BINARY_SUBSCR
96 BINARY_ADD
98 LOAD_FAST 2 ( i )
100 CALL_FUNCTION 2
102 BINARY_ADD
104 LOAD_FAST 2 ( i )
106 CALL_FUNCTION 2
108 LOAD_FAST 1 ( dp )
110 LOAD_FAST 2 ( i )
112 STORE_SUBSCR
114 JUMP_ABSOLUTE 46
>> 116 POP_BLOCK

7 >> 118 LOAD_FAST 1 ( dp )
120 LOAD_FAST 0 ( n )
122 BINARY_SUBSCR
124 RETURN_VALUE
