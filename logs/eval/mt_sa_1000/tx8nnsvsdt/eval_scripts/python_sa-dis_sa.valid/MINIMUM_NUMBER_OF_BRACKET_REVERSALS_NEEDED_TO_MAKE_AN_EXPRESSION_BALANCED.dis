{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( expr ) :\n    lenn = len ( expr )\n    if ( lenn % 2 ) :\n        return - 1\n    s = [ ]\n    for i in range ( lenn ) :\n        if ( expr [ i ] == '' and len ( s ) ) :\n            if ( s [ 0 ] == '' ) :\n                s.pop ( 0 )\n            else :\n                s.insert ( 0 , expr [ i ] )\n        else :\n            s.insert ( 0 , expr [ i ] )\n    red_len = len ( s )\n    n = 0\n    while ( len ( s ) and s [ 0 ] == '' ) :\n        s.pop ( 0 )\n        n += 1\n    return ( red_len // 2 + n % 2 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('}{',),\n    ('{{{',),\n    ('{{{{',),\n    ('{{{{}}',),\n    ('}{{}}{{{',),\n    ('{}',),\n    ('',),\n    ('8',),\n    ('01111000',),\n    ('XPkERzHcpId',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countMinReversals ( expr ) :\n    lenn = len ( expr )\n    if ( lenn % 2 ) :\n        return - 1\n    s = [ ]\n    for i in range ( lenn ) :\n        if ( expr [ i ] == '' and len ( s ) ) :\n            if ( s [ 0 ] == '' ) :\n                s.pop ( 0 )\n            else :\n                s.insert ( 0 , expr [ i ] )\n        else :\n            s.insert ( 0 , expr [ i ] )\n    red_len = len ( s )\n    n = 0\n    while ( len ( s ) and s [ 0 ] == '' ) :\n        s.pop ( 0 )\n        n += 1\n    return ( red_len // 2 + n % 2 )\n"}
Disassembly of <code object countMinReversals at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( expr )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( lenn )

3 8 LOAD_FAST 1 ( lenn )
10 LOAD_CONST 1 ( 2 )
12 BINARY_MODULO
14 POP_JUMP_IF_FALSE 20

4 16 LOAD_CONST 2 ( - 1 )
18 RETURN_VALUE

5 >> 20 BUILD_LIST 0
22 STORE_FAST 2 ( s )

6 24 SETUP_LOOP 92 ( to 106 )
26 LOAD_GLOBAL 1 ( range )
28 LOAD_FAST 1 ( lenn )
30 CALL_FUNCTION 1
32 GET_ITER
>> 34 FOR_ITER 80 ( to 104 )
36 STORE_FAST 3 ( i )

7 38 LOAD_FAST 0 ( expr )
40 LOAD_FAST 3 ( i )
42 BINARY_SUBSCR
44 LOAD_CONST 3 ( '' )
46 COMPARE_OP 2 ( == )
48 POP_JUMP_IF_FALSE 80
50 LOAD_GLOBAL 0 ( len )
52 LOAD_FAST 2 ( s )
54 CALL_FUNCTION 1
56 POP_JUMP_IF_FALSE 80

8 58 LOAD_FAST 2 ( s )
60 LOAD_CONST 4 ( 0 )
62 BINARY_SUBSCR
64 LOAD_CONST 3 ( '' )
66 COMPARE_OP 2 ( == )
68 POP_JUMP_IF_FALSE 80

9 70 LOAD_FAST 2 ( s )
72 LOAD_METHOD 2 ( pop )
74 LOAD_CONST 4 ( 0 )
76 CALL_METHOD 1
78 POP_TOP

10 >> 80 LOAD_FAST 2 ( s )
82 LOAD_METHOD 3 ( insert )
84 LOAD_CONST 4 ( 0 )
86 LOAD_FAST 0 ( expr )
88 LOAD_FAST 3 ( i )
90 BINARY_SUBSCR
92 CALL_METHOD 2
94 POP_TOP
96 JUMP_ABSOLUTE 34
98 POP_BLOCK

12 >> 100 LOAD_FAST 2 ( s )
102 LOAD_METHOD 3 ( insert )
104 LOAD_CONST 4 ( 0 )
106 LOAD_FAST 0 ( expr )
108 LOAD_FAST 3 ( i )
110 BINARY_SUBSCR
112 CALL_METHOD 2
114 POP_TOP
116 JUMP_ABSOLUTE 34

14 >> 118 LOAD_FAST 2 ( s )
120 LOAD_METHOD 3 ( insert )
122 LOAD_CONST 4 ( 0 )
124 LOAD_FAST 0 ( expr )
126 LOAD_FAST 3 ( i )
128 BINARY_SUBSCR
130 CALL_METHOD 2
132 POP_TOP
134 JUMP_ABSOLUTE 34
>> 136 POP_BLOCK

15 >> 138 LOAD_GLOBAL 0 ( len )
140 LOAD_FAST 2 ( s )
142 CALL_FUNCTION 1
144 STORE_FAST 4 ( red_len )

16 146 LOAD_CONST 4 ( 0 )
148 STORE_FAST 5 ( n )

17 150 SETUP_LOOP 56 ( to 198 )
>> 152 LOAD_FAST 0 ( expr )
154 LOAD_CONST 5 ( 0 )
156 STORE_FAST 6 ( red_)

18 158 SETUP_LOOP 46 ( to 196 )
>> 160 LOAD_FAST 0 ( expr )
162 GET_ITER
>> 164 FOR_ITER 38 ( to 194 )
166 STORE_FAST 7 ( red_len )

19 168 LOAD_CONST 4 ( 0 )
170 STORE_FAST 8 ( n )

20 172 SETUP_LOOP 30 ( to 192 )
>> 174 LOAD_FAST 0 ( expr )
176 LOAD_FAST 2 ( s )
178 CALL_FUNCTION 1
180 POP_JUMP_IF_FALSE 190
182 LOAD_FAST 2 ( s )
184 LOAD_CONST 4 ( 0 )
186 BINARY_SUBSCR
188 LOAD_CONST 3 ( '' )
190 COMPARE_OP 2 ( == )
192 POP_JUMP_IF_FALSE 190

21 194 LOAD_FAST 2 ( s )
196 LOAD_METHOD 2 ( pop )
198 LOAD_CONST 4 ( 0 )
200 CALL_METHOD 1
202 POP_TOP

22 204 LOAD_FAST 8 ( n )
206 LOAD_CONST 6 ( 1 )
208 INPLACE_ADD
210 STORE_FAST 8 ( n )
212 JUMP_ABSOLUTE 174
>> 214 POP_BLOCK

23 >> 216 LOAD_FAST 4 ( red_len )
218 LOAD_CONST 1 ( 2 )
220 BINARY_FLOOR_DIVIDE
222 LOAD_FAST 8 ( n )
224 LOAD_CONST 1 ( 2 )
226 BINARY_MODULO
228 BINARY_ADD
230 RETURN_VALUE
