{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    found = False\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        l = i + 1\n        r = n - 1\n        x = arr [ i ]\n        while ( l < r ) :\n            if ( x + arr [ l ] + arr [ r ] == 0 ) :\n                print ( x , arr [ l ] , arr [ r ] )\n                l += 1\n                r -= 1\n                found = True\n            elif ( x + arr [ l ] + arr [ r ] < 0 ) :\n                l += 1\n            else :\n                r -= 1\n    if ( found == False ) :\n        print ( \" No Triplet Found\" )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 24, 27, 34, 39, 41, 67, 69, 84, 91, 94],7,),\n    ([14, 8, 92, 46, 62, 8, 8, 70, 98, -20, -16, -6, -2, -36, 46, 46, -26, 50, 76, 96, -32, 2, -32, 72, 48, 24, 64, 42, 40, 92],29,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],15,),\n    ([47, 69, 42, 36, 82, 65, 84],3,),\n    ([-98, -74, -62, -60, -60, -32],5,),\n    ([1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0],35,),\n    ([1, 4, 4, 9, 20, 23, 24, 27, 28, 29, 31, 35, 42, 45, 46, 47, 49, 52, 55, 57, 62, 67, 72, 78, 79, 82, 86, 86, 88],26,),\n    ([92, 0, 56, 90, -10, -46, 44, -86, -16, -90, -92, -44, -88, 24, -80, -98, 68, -86, 98, -10, 18, -40, 98, 40, -58, -6, -38, 72, 90],15,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],17,),\n    ([7, 3, 37, 60, 6, 26, 30, 21, 7, 59, 18, 69, 40, 47, 34, 19, 51, 27, 4, 7, 56, 4, 57, 62, 54, 9, 93, 31, 9, 85],28,)\n        ]\n    filled_function_param = [\n    ([4, 24, 27, 34, 39, 41, 67, 69, 84, 91, 94],7,),\n    ([14, 8, 92, 46, 62, 8, 8, 70, 98, -20, -16, -6, -2, -36, 46, 46, -26, 50, 76, 96, -32, 2, -32, 72, 48, 24, 64, 42, 40, 92],29,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],15,),\n    ([47, 69, 42, 36, 82, 65, 84],3,),\n    ([-98, -74, -62, -60, -60, -32],5,),\n    ([1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0],35,),\n    ([1, 4, 4, 9, 20, 23, 24, 27, 28, 29, 31, 35, 42, 45, 46, 47, 49, 52, 55, 57, 62, 67, 72, 78, 79, 82, 86, 86, 88],26,),\n    ([92, 0, 56, 90, -10, -46, 44, -86, -16, -90, -92, -44, -88, 24, -80, -98, 68, -86, 98, -10, 18, -40, 98, 40, -58, -6, -38, 72, 90],15,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],17,),\n    ([7, 3, 37, 60, 6, 26, 30, 21, 7, 59, 18, 69, 40, 47, 34, 19, 51, 27, 4, 7, 56, 4, 57, 62, 54, 9, 93, 31, 9, 85],28,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findTriplets ( arr , n ) :\n    found = False\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        l = i + 1\n        r = n - 1\n        x = arr [ i ]\n        while ( l < r ) :\n            if ( x + arr [ l ] + arr [ r ] == 0 ) :\n                print ( x , arr [ l ] , arr [ r ] )\n                l += 1\n                r -= 1\n                found = True\n            elif ( x + arr [ l ] + arr [ r ] < 0 ) :\n                l += 1\n            else :\n                r -= 1\n    if ( found == False ) :\n        print ( \" No Triplet Found\" )\n"}
Disassembly of <code object findTriplets at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( False )
2 STORE_FAST 2 ( found )

3 4 LOAD_FAST 0 ( arr )
6 LOAD_METHOD 0 ( sort )
8 CALL_METHOD 0
10 POP_TOP

4 12 SETUP_LOOP 138 ( to 152 )
14 LOAD_GLOBAL 1 ( range )
16 LOAD_CONST 2 ( 0 )
18 LOAD_FAST 1 ( n )
20 LOAD_CONST 3 ( 1 )
22 BINARY_SUBTRACT
24 CALL_FUNCTION 2
26 GET_ITER
>> 28 FOR_ITER 124 ( to 150 )
30 STORE_FAST 3 ( i )

5 32 LOAD_FAST 3 ( i )
34 LOAD_CONST 3 ( 1 )
36 BINARY_ADD
38 STORE_FAST 4 ( l )

6 40 LOAD_FAST 1 ( n )
42 LOAD_CONST 3 ( 1 )
44 BINARY_SUBTRACT
46 STORE_FAST 5 ( r )

7 48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 3 ( i )
52 BINARY_SUBSCR
54 STORE_FAST 6 ( x )

8 56 SETUP_LOOP 92 ( to 148 )
>> 58 LOAD_FAST 4 ( l )
60 LOAD_FAST 5 ( r )
62 COMPARE_OP 0 ( < )
64 POP_JUMP_IF_FALSE 146

9 66 LOAD_FAST 6 ( x )
68 LOAD_FAST 0 ( arr )
70 LOAD_FAST 4 ( l )
72 BINARY_SUBSCR
74 BINARY_ADD
76 LOAD_FAST 0 ( arr )
78 LOAD_FAST 5 ( r )
80 BINARY_SUBSCR
82 BINARY_ADD
84 LOAD_CONST 2 ( 0 )
86 COMPARE_OP 2 ( == )
88 POP_JUMP_IF_FALSE 58

10 90 LOAD_GLOBAL 2 ( print )
92 LOAD_FAST 6 ( x )
94 LOAD_FAST 0 ( arr )
96 LOAD_FAST 4 ( l )
98 BINARY_SUBSCR
100 LOAD_FAST 0 ( arr )
102 LOAD_FAST 5 ( r )
104 BINARY_SUBSCR
106 CALL_FUNCTION 3
108 POP_TOP

11 110 LOAD_FAST 4 ( l )
112 LOAD_CONST 3 ( 1 )
114 INPLACE_SUBTRACT
116 STORE_FAST 4 ( l )

12 118 LOAD_CONST 4 ( True )
120 STORE_FAST 2 ( found )
122 JUMP_ABSOLUTE 58

13 >> 124 LOAD_FAST 6 ( x )
126 LOAD_FAST 0 ( arr )
128 LOAD_FAST 4 ( l )
130 BINARY_SUBSCR
132 BINARY_ADD
134 LOAD_FAST 0 ( arr )
136 LOAD_FAST 5 ( r )
138 BINARY_SUBSCR
140 BINARY_ADD
142 LOAD_CONST 2 ( 0 )
144 COMPARE_OP 0 ( < )
146 POP_JUMP_IF_FALSE 58

14 148 LOAD_FAST 4 ( l )
150 LOAD_CONST 3 ( 1 )
152 INPLACE_ADD
154 STORE_FAST 4 ( l )
156 JUMP_ABSOLUTE 58
>> 158 POP_BLOCK

15 >> 160 LOAD_FAST 2 ( found )
162 LOAD_CONST 1 ( False )
164 COMPARE_OP 2 ( == )
166 POP_JUMP_IF_FALSE 184

16 168 LOAD_GLOBAL 2 ( print )
170 LOAD_CONST 5 ( ' No Triplet Found' )
172 CALL_FUNCTION 1
174 POP_TOP
176 JUMP_ABSOLUTE 58
>> 178 POP_BLOCK

17 >> 180 LOAD_FAST 2 ( found )
182 LOAD_CONST 1 ( False )
184 COMPARE_OP 2 ( == )
186 POP_JUMP_IF_FALSE 28

18 188 LOAD_GLOBAL 2 ( print )
190 LOAD_CONST 5 ( ' No Triplet Found' )
192 CALL_FUNCTION 1
194 POP_TOP
>> 196 LOAD_CONST 0 ( None )
198 RETURN_VALUE
