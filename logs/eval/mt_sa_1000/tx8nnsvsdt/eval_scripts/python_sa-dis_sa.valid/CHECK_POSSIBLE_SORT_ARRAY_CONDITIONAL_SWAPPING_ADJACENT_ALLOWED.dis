{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            if ( arr [ i ] - arr [ i + 1 ] == 1 ) :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n            else :\n                return False\n    return True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 4, 12, 16, 37, 44, 47, 51, 55, 57, 57, 62, 62, 62, 64, 69, 69, 70, 72, 81, 81, 88, 89, 97],15,),\n    ([-86, 0, 14, -16, -12, -72, 62, -34, -72, 30, 84, -60, 84, -64, 50, 74, 18, -82, -64, -64, -74, -56, 86, 84, -32, -10, 20, 4, 8, 96, 82, 26, 42],18,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],31,),\n    ([48, 66, 83, 12, 77, 98, 18, 33, 21, 16, 28, 24, 46, 43],13,),\n    ([-92, -58, -36, -28, -6, 2, 4, 26, 48, 58, 60, 62, 62, 98],10,),\n    ([1, 0, 0, 0, 0, 1],4,),\n    ([22, 38, 41, 41, 42, 51, 54, 58, 68, 76, 80, 85],9,),\n    ([84, -38, 52, -72, -24, 82, 54, 74, 0],8,),\n    ([0, 1, 1],2,),\n    ([63, 31, 14, 19, 77, 64, 62, 23, 22, 19, 39, 9, 79, 1, 87, 29, 58, 3, 3, 39, 1, 39, 35, 64, 64],13,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def checkForSorting ( arr , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            if ( arr [ i ] - arr [ i + 1 ] == 1 ) :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n            else :\n                return False\n    return True\n"}
Disassembly of <code object checkForSorting at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 SETUP_LOOP 96 ( to 98 )
2 LOAD_GLOBAL 0 ( range )
4 LOAD_CONST 1 ( 0 )
6 LOAD_FAST 1 ( n )
8 LOAD_CONST 2 ( 1 )
10 BINARY_SUBTRACT
12 CALL_FUNCTION 2
14 GET_ITER
>> 16 FOR_ITER 82 ( to 96 )
18 STORE_FAST 2 ( i )

3 20 LOAD_FAST 0 ( arr )
22 LOAD_FAST 2 ( i )
24 BINARY_SUBSCR
26 LOAD_FAST 0 ( arr )
28 LOAD_FAST 2 ( i )
30 LOAD_CONST 2 ( 1 )
32 BINARY_ADD
34 BINARY_SUBSCR
36 COMPARE_OP 4 ( > )
38 POP_JUMP_IF_FALSE 16

4 40 LOAD_FAST 0 ( arr )
42 LOAD_FAST 2 ( i )
44 BINARY_SUBSCR
46 LOAD_FAST 0 ( arr )
48 LOAD_FAST 2 ( i )
50 LOAD_CONST 2 ( 1 )
52 BINARY_ADD
54 BINARY_SUBSCR
56 LOAD_CONST 2 ( 1 )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 16

5 62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 2 ( i )
66 BINARY_SUBSCR
68 LOAD_FAST 0 ( arr )
70 LOAD_FAST 2 ( i )
72 LOAD_CONST 2 ( 1 )
74 BINARY_ADD
76 STORE_SUBSCR
78 LOAD_FAST 0 ( arr )
80 LOAD_FAST 2 ( i )
82 BINARY_SUBSCR
84 ROT_TWO
86 LOAD_FAST 0 ( arr )
88 LOAD_FAST 2 ( i )
90 STORE_SUBSCR
92 LOAD_FAST 0 ( arr )
94 LOAD_FAST 2 ( i )
96 BINARY_SUBSCR
98 ROT_TWO
100 LOAD_FAST 0 ( arr )
102 LOAD_FAST 2 ( i )
104 STORE_SUBSCR
106 LOAD_FAST 0 ( arr )
108 LOAD_FAST 2 ( i )
110 BINARY_SUBSCR
112 ROT_TWO
114 LOAD_FAST 0 ( arr )
116 LOAD_FAST 2 ( i )
118 STORE_SUBSCR
120 LOAD_FAST 0 ( arr )
122 LOAD_FAST 2 ( i )
124 BINARY_SUBSCR
126 ROT_TWO
128 STORE_FAST 0 ( arr )
130 STORE_FAST 2 ( i )
>> 132 JUMP_ABSOLUTE 16
>> 134 POP_BLOCK

6 >> 136 LOAD_CONST 3 ( False )
138 RETURN_VALUE
