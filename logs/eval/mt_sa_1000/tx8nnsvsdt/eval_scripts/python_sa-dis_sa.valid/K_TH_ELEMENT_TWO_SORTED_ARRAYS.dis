{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr1 , arr2 , m , n , k ) :\n    sorted1 = [ 0 ] * ( m + n )\n    i = 0\n    j = 0\n    d = 0\n    while ( i < m and j < n ) :\n        if ( arr1 [ i ] < arr2 [ j ] ) :\n            sorted1 [ d ] = arr1 [ i ]\n            i += 1\n        else :\n            sorted1 [ d ] = arr2 [ j ]\n            j += 1\n        d += 1\n    while ( i < m ) :\n        sorted1 [ d ] = arr1 [ i ]\n        d += 1\n        i += 1\n    while ( j < n ) :\n        sorted1 [ d ] = arr2 [ j ]\n        d += 1\n        j += 1\n    return sorted1 [ k - 1 ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 2, 4, 4, 9, 10, 14, 16, 16, 19, 20, 21, 25, 26, 29, 36, 36, 37, 38, 44, 44, 49, 53, 54, 56, 61, 62, 64, 72, 72, 73, 77, 80, 84, 84, 87, 93, 94],[6, 8, 10, 10, 12, 14, 24, 31, 33, 33, 35, 35, 35, 41, 46, 47, 49, 51, 52, 56, 57, 59, 62, 65, 72, 72, 73, 73, 79, 80, 82, 83, 83, 84, 87, 87, 93, 99],27,21,23,),\n    ([2, 4, -90, 62, 22, -94, -74, -22, 44, -94, 20, -40, 20, 0, 32, 24, 78, 8, 4, 98, -74, -60],[58, 74, -46, 38, -58, -78, -32, -84, 84, -54, 84, -34, -26, 88, 74, 48, 26, -92, 68, -86, 74, 88],18,11,12,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],30,31,42,),\n    ([85, 44, 62, 2, 71, 88, 60, 78, 32, 46, 17, 47, 65, 78, 65, 94],[18, 3, 15, 9, 61, 73, 3, 62, 87, 1, 54, 97, 61, 37, 23, 65],11,11,13,),\n    ([-94, -84, -82, -70, -70, -60, -54, -54, -52, -52, -46, -40, -40, -36, -34, -32, -30, -22, -18, -16, -10, -4, 8, 12, 18, 22, 32, 38, 38, 44, 50, 56, 64, 82, 84, 86, 88],[-92, -68, -64, -62, -54, -52, -52, -34, -24, -22, -20, -12, -12, -10, 6, 10, 14, 22, 22, 24, 24, 30, 30, 36, 36, 48, 50, 56, 58, 64, 68, 80, 84, 88, 88, 92, 94],19,26,28,),\n    ([0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1],[1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0],24,17,23,),\n    ([53, 96, 99],[30, 55, 56],1,1,1,),\n    ([98, 86, 36, -68, 86, 22, 52, -20, -2, 74, -72, 86, 80, -78, 14, 62, 10, 94, -66, 78, 28, 92, -8, 46, -24, 66],[72, -72, -90, 24, -22, 60, 78, -68, 98, 26, -30, -20, 44, -96, 8, 90, 0, 98, -24, -68, -32, -62, 0, -60, 26, -98],22,19,24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],42,40,42,),\n    ([6, 21, 86, 58, 48, 27, 18, 73, 16, 79, 51, 33, 63, 26, 37, 88, 48, 58, 44, 32, 58, 23, 31],[87, 77, 44, 15, 70, 89, 36, 79, 82, 3, 18, 76, 37, 79, 85, 97, 19, 53, 17, 74, 87, 58, 49],14,22,19,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def kth ( arr1 , arr2 , m , n , k ) :\n    sorted1 = [ 0 ] * ( m + n )\n    i = 0\n    j = 0\n    d = 0\n    while ( i < m and j < n ) :\n        if ( arr1 [ i ] < arr2 [ j ] ) :\n            sorted1 [ d ] = arr1 [ i ]\n            i += 1\n        else :\n            sorted1 [ d ] = arr2 [ j ]\n            j += 1\n        d += 1\n    while ( i < m ) :\n        sorted1 [ d ] = arr1 [ i ]\n        d += 1\n        i += 1\n    while ( j < n ) :\n        sorted1 [ d ] = arr2 [ j ]\n        d += 1\n        j += 1\n    return sorted1 [ k - 1 ]\n"}
Disassembly of <code object kth at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 BUILD_LIST 1
4 LOAD_FAST 2 ( m )
6 LOAD_FAST 3 ( n )
8 BINARY_ADD
10 BINARY_MULTIPLY
12 STORE_FAST 4 ( sorted1 )

3 14 LOAD_CONST 1 ( 0 )
16 STORE_FAST 5 ( i )

4 18 LOAD_CONST 1 ( 0 )
20 STORE_FAST 6 ( j )

5 22 LOAD_CONST 1 ( 0 )
24 STORE_FAST 7 ( d )

6 26 LOAD_CONST 1 ( 0 )
28 STORE_FAST 8 ( d )

7 30 SETUP_LOOP 66 ( to 100 )
>> 32 LOAD_FAST 5 ( i )
34 LOAD_FAST 2 ( m )
36 COMPARE_OP 0 ( < )
38 POP_JUMP_IF_FALSE 98
40 LOAD_FAST 6 ( j )
42 LOAD_FAST 3 ( n )
44 COMPARE_OP 0 ( < )
46 POP_JUMP_IF_FALSE 98

8 48 LOAD_FAST 0 ( arr1 )
50 LOAD_FAST 5 ( i )
52 BINARY_SUBSCR
54 LOAD_FAST 1 ( arr2 )
56 LOAD_FAST 6 ( j )
58 BINARY_SUBSCR
60 COMPARE_OP 0 ( < )
62 POP_JUMP_IF_FALSE 78

9 64 LOAD_FAST 0 ( arr1 )
66 LOAD_FAST 5 ( i )
68 BINARY_SUBSCR
70 LOAD_FAST 4 ( sorted1 )
72 LOAD_FAST 8 ( d )
74 STORE_SUBSCR

10 76 LOAD_FAST 5 ( i )
78 LOAD_CONST 2 ( 1 )
80 INPLACE_ADD
82 STORE_FAST 5 ( i )
84 JUMP_ABSOLUTE 32

12 >> 86 LOAD_FAST 1 ( arr2 )
88 LOAD_FAST 6 ( j )
90 BINARY_SUBSCR
92 LOAD_FAST 4 ( sorted1 )
94 LOAD_FAST 8 ( d )
96 STORE_SUBSCR

13 98 LOAD_FAST 6 ( j )
100 LOAD_CONST 2 ( 1 )
102 INPLACE_ADD
104 STORE_FAST 6 ( j )

14 >> 106 LOAD_FAST 8 ( d )
108 LOAD_CONST 2 ( 1 )
110 INPLACE_ADD
112 STORE_FAST 8 ( d )
114 JUMP_ABSOLUTE 32
>> 116 POP_BLOCK

15 >> 118 SETUP_LOOP 44 ( to 194 )
>> 120 LOAD_FAST 5 ( i )
122 LOAD_FAST 2 ( m )
124 COMPARE_OP 0 ( < )
126 EXTENDED_ARG 1
128 POP_JUMP_IF_FALSE 192

16 130 LOAD_FAST 0 ( arr1 )
132 LOAD_FAST 5 ( i )
134 BINARY_SUBSCR
136 LOAD_FAST 4 ( sorted1 )
138 LOAD_FAST 8 ( d )
140 STORE_SUBSCR

17 142 LOAD_FAST 8 ( d )
144 LOAD_CONST 2 ( 1 )
146 INPLACE_ADD
148 STORE_FAST 8 ( d )

18 150 LOAD_FAST 5 ( i )
152 LOAD_CONST 2 ( 1 )
154 INPLACE_ADD
156 STORE_FAST 5 ( i )
158 JUMP_ABSOLUTE 120
>> 160 POP_BLOCK

19 >> 162 SETUP_LOOP 44 ( to 194 )
164 LOAD_FAST 6 ( j )
166 LOAD_FAST 3 ( n )
168 COMPARE_OP 0 ( < )
170 POP_JUMP_IF_FALSE 192

20 172 LOAD_FAST 1 ( arr2 )
174 LOAD_FAST 6 ( j )
176 BINARY_SUBSCR
178 LOAD_FAST 4 ( sorted1 )
180 LOAD_FAST 8 ( d )
182 STORE_SUBSCR

21 184 LOAD_FAST 8 ( d )
186 LOAD_CONST 2 ( 1 )
188 INPLACE_ADD
190 STORE_FAST 8 ( d )

22 >> 192 LOAD_FAST 6 ( j )
194 LOAD_CONST 2 ( 1 )
196 INPLACE_ADD
198 STORE_FAST 6 ( j )

23 200 LOAD_FAST 6 ( j )
202 LOAD_CONST 2 ( 1 )
204 INPLACE_ADD
206 STORE_FAST 6 ( j )
208 JUMP_ABSOLUTE 120
>> 210 POP_BLOCK

24 >> 212 LOAD_FAST 4 ( sorted1 )
214 LOAD_CONST 2 ( 1 )
216 BINARY_SUBTRACT
218 BUILD_LIST 1
220 RETURN_VALUE
