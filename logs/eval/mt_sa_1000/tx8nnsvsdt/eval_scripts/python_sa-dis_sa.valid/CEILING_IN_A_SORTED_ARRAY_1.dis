{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , low , high , x ) :\n    if x <= arr [ low ] :\n        return low\n    if x > arr [ high ] :\n        return - 1\n    mid = ( low + high ) / 2 ;\n    if arr [ mid ] == x :\n        return mid\n    elif arr [ mid ] < x :\n        if mid + 1 <= high and x <= arr [ mid + 1 ] :\n            return mid + 1\n        else :\n            return f_gold ( arr , mid + 1 , high , x )\n    else :\n        if mid - 1 >= low and x > arr [ mid - 1 ] :\n            return mid\n        else :\n            return f_gold ( arr , low , mid - 1 , x )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 6, 13, 16, 23, 24, 24, 27, 30, 32, 34, 34, 55, 56, 56, 63, 66, 81, 83, 96],13,11,18,),\n    ([-28, -96, 48, 22, -12, 72, 48, -70, -96, -84, -62, 22, 18, -92, -74, 14, 28, 52, 64, 72, 16, -76, 46],11,18,21,),\n    ([0, 1],1,1,1,),\n    ([51, 98, 25, 10, 43, 91, 33, 25, 85, 51, 94, 6, 35, 48, 11, 97, 67, 21, 50, 9, 11, 51, 86, 61, 22, 88, 89, 11],20,20,15,),\n    ([-94, -92, -88, -74, -52, -50, -48, -44, -40, -36, -32, -26, 20, 22, 30, 32, 46, 56, 56, 60, 62, 64, 80, 84, 86, 94, 96, 96],20,15,15,),\n    ([1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],15,17,22,),\n    ([4, 5, 5, 13, 26, 40, 46, 51, 58, 60, 64, 66, 68, 69, 71, 74, 78, 81, 83, 88, 88, 90, 98, 99],12,17,14,),\n    ([92, 6, -54, 84, -10, 32, 50, 40, -38, 64, -64, -10, 70, -68, -6, -16, 68, 34, -66, -82, 84, 98, 50, 82, 78, 4, 34, -34, 78, 64, 32, 58, -94, 40, 50, 0, -92, -36, 10, -54, 58, -78, -88, 32, 6],23,28,28,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,17,22,),\n    ([80, 67, 30, 35, 9],2,3,2,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def ceilSearch ( arr , low , high , x ) :\n    if x <= arr [ low ] :\n        return low\n    if x > arr [ high ] :\n        return - 1\n    mid = ( low + high ) / 2 ;\n    if arr [ mid ] == x :\n        return mid\n    elif arr [ mid ] < x :\n        if mid + 1 <= high and x <= arr [ mid + 1 ] :\n            return mid + 1\n        else :\n            return ceilSearch ( arr , mid + 1 , high , x )\n    else :\n        if mid - 1 >= low and x > arr [ mid - 1 ] :\n            return mid\n        else :\n            return ceilSearch ( arr , low , mid - 1 , x )\n"}
Disassembly of <code object ceilSearch at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_FAST 2 ( x )
2 LOAD_FAST 0 ( arr )
4 LOAD_FAST 1 ( low )
6 BINARY_SUBSCR
8 COMPARE_OP 1 ( <= )
10 POP_JUMP_IF_FALSE 16

3 12 LOAD_FAST 1 ( low )
14 RETURN_VALUE

4 >> 16 LOAD_FAST 2 ( x )
18 LOAD_FAST 0 ( arr )
20 LOAD_FAST 3 ( high )
22 BINARY_SUBSCR
24 COMPARE_OP 4 ( > )
26 POP_JUMP_IF_FALSE 32

5 28 LOAD_CONST 1 ( - 1 )
30 RETURN_VALUE

6 >> 32 LOAD_FAST 1 ( low )
34 LOAD_FAST 3 ( high )
36 BINARY_ADD
38 LOAD_CONST 2 ( 2 )
40 BINARY_TRUE_DIVIDE
42 STORE_FAST 4 ( mid )

7 44 LOAD_FAST 0 ( arr )
46 LOAD_FAST 4 ( mid )
48 BINARY_SUBSCR
50 LOAD_FAST 2 ( x )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 60

8 56 LOAD_FAST 4 ( mid )
58 RETURN_VALUE

9 >> 60 LOAD_FAST 0 ( arr )
62 LOAD_FAST 4 ( mid )
64 BINARY_SUBSCR
66 LOAD_FAST 2 ( x )
68 COMPARE_OP 0 ( < )
70 POP_JUMP_IF_FALSE 116

10 72 LOAD_FAST 4 ( mid )
74 LOAD_CONST 3 ( 1 )
76 BINARY_ADD
78 LOAD_FAST 3 ( high )
80 COMPARE_OP 1 ( <= )
82 POP_JUMP_IF_FALSE 116
84 LOAD_FAST 2 ( x )
86 LOAD_FAST 0 ( arr )
88 LOAD_FAST 4 ( mid )
90 LOAD_CONST 3 ( 1 )
92 BINARY_ADD
94 BINARY_SUBSCR
96 COMPARE_OP 1 ( <= )
98 POP_JUMP_IF_FALSE 116

11 100 LOAD_FAST 4 ( mid )
102 LOAD_CONST 3 ( 1 )
104 BINARY_ADD
106 RETURN_VALUE

13 >> 108 LOAD_GLOBAL 0 ( ceilSearch )
110 LOAD_FAST 0 ( arr )
112 LOAD_FAST 4 ( mid )
114 LOAD_CONST 3 ( 1 )
116 BINARY_ADD
118 LOAD_FAST 3 ( high )
120 LOAD_FAST 2 ( x )
122 CALL_FUNCTION 4
124 RETURN_VALUE
126 JUMP_FORWARD 42 ( to 144 )

15 >> 128 LOAD_FAST 4 ( mid )
130 LOAD_CONST 3 ( 1 )
132 BINARY_SUBTRACT
134 LOAD_FAST 1 ( low )
136 COMPARE_OP 5 ( >= )
138 POP_JUMP_IF_FALSE 148
140 LOAD_FAST 2 ( x )
142 LOAD_FAST 0 ( arr )
144 LOAD_FAST 4 ( mid )
146 LOAD_CONST 3 ( 1 )
148 BINARY_SUBTRACT
150 BINARY_SUBSCR
152 COMPARE_OP 0 ( < )
154 POP_JUMP_IF_FALSE 156

16 156 LOAD_FAST 4 ( mid )
158 RETURN_VALUE

18 >> 160 LOAD_GLOBAL 0 ( ceilSearch )
162 LOAD_FAST 0 ( arr )
164 LOAD_FAST 1 ( low )
166 LOAD_FAST 4 ( mid )
168 LOAD_CONST 3 ( 1 )
170 BINARY_SUBTRACT
172 LOAD_FAST 2 ( x )
174 CALL_FUNCTION 4
176 RETURN_VALUE
178 LOAD_CONST 0 ( None )
180 RETURN_VALUE
