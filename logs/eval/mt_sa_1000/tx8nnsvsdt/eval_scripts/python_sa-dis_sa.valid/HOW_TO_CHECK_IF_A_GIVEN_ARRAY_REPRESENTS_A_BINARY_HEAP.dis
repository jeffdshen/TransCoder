{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , i , n ) :\n    if i > int ( ( n - 2 ) / 2 ) :\n        return True\n    if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr [ 2 * i + 2 ] and f_gold ( arr , 2 * i + 1 , n ) and f_gold ( arr , 2 * i + 2 , n ) ) :\n        return True\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 2, 3, 5, 24, 24, 25, 25, 36, 37, 37, 39, 42, 44, 46, 50, 51, 54, 56, 60, 62, 70, 71, 73, 75, 80, 80, 85, 86, 89, 91, 95, 99],0,18,),\n    ([-44, -58, 88, -42, 42, -14, -44, 42, 64, 94, -46, -70, 34, -10, -46, -52, -6, -78, 64, 56, 74, 98, -34, -4, -92, 6, -52, -20, 78, -72, -40],0,27,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],0,20,),\n    ([10, 2, 1, 34, 21, 37, 49, 31, 70, 97, 87, 50, 76, 55],0,8,),\n    ([-94, -84, -82, -66, -64, -62, -56, -38, -24, -24, -4, 2, 4, 4, 8, 14, 16, 20, 30, 34, 34, 48, 58, 58, 70, 76, 78, 86, 88, 96, 98],0,26,),\n    ([1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0],12,11,),\n    ([5,20,30,5,10,21,5],0,7),\n    ([50,20,30,5,10,21,5],0,7),\n    ([50,20,30,5,10,21,5],2,7),\n    ([50,20,30,5,10,21,5],4,7),\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def isHeap ( arr , i , n ) :\n    if i > int ( ( n - 2 ) / 2 ) :\n        return True\n    if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr [ 2 * i + 2 ] and isHeap ( arr , 2 * i + 1 , n ) and isHeap ( arr , 2 * i + 2 , n ) ) :\n        return True\n    return False\n"}
Disassembly of <code object isHeap at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( i )
2 LOAD_GLOBAL 0 ( int )
4 LOAD_FAST 2 ( n )
6 LOAD_CONST 1 ( 2 )
8 BINARY_SUBTRACT
10 LOAD_CONST 1 ( 2 )
12 BINARY_TRUE_DIVIDE
14 CALL_FUNCTION 1
16 COMPARE_OP 4 ( > )
18 POP_JUMP_IF_FALSE 24

3 20 LOAD_CONST 2 ( True )
22 RETURN_VALUE

4 >> 24 LOAD_FAST 0 ( arr )
26 LOAD_FAST 1 ( i )
28 BINARY_SUBSCR
30 LOAD_FAST 0 ( arr )
32 LOAD_CONST 1 ( 2 )
34 LOAD_FAST 1 ( i )
36 BINARY_MULTIPLY
38 LOAD_CONST 3 ( 1 )
40 BINARY_ADD
42 BINARY_SUBSCR
44 COMPARE_OP 5 ( >= )
46 POP_JUMP_IF_FALSE 90
48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 1 ( i )
52 BINARY_SUBSCR
54 LOAD_FAST 0 ( arr )
56 LOAD_CONST 1 ( 2 )
58 LOAD_FAST 1 ( i )
60 BINARY_MULTIPLY
62 LOAD_CONST 1 ( 2 )
64 BINARY_ADD
66 BINARY_SUBSCR
68 COMPARE_OP 5 ( >= )
70 POP_JUMP_IF_FALSE 90
72 LOAD_GLOBAL 1 ( isHeap )
74 LOAD_FAST 0 ( arr )
76 LOAD_CONST 1 ( 2 )
78 LOAD_FAST 1 ( i )
80 BINARY_MULTIPLY
82 LOAD_CONST 3 ( 1 )
84 BINARY_ADD
86 LOAD_FAST 2 ( n )
88 CALL_FUNCTION 3
>> 90 JUMP_IF_FALSE_OR_POP 102
92 LOAD_GLOBAL 1 ( isHeap )
94 LOAD_FAST 0 ( arr )
96 LOAD_CONST 1 ( 2 )
98 LOAD_FAST 1 ( i )
100 BINARY_MULTIPLY
102 LOAD_CONST 1 ( 2 )
104 BINARY_ADD
106 LOAD_FAST 2 ( n )
108 CALL_FUNCTION 3
110 POP_JUMP_IF_FALSE 108

5 112 LOAD_CONST 2 ( True )
114 RETURN_VALUE

6 >> 116 LOAD_CONST 4 ( False )
118 RETURN_VALUE
