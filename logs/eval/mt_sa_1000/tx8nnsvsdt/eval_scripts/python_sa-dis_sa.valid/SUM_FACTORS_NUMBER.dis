{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( n ) :\n    result = 0\n    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :\n        if ( n % i == 0 ) :\n            if ( i == ( n / i ) ) :\n                result = result + i\n            else :\n                result = result + ( i + n // i )\n    return ( result + n + 1 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (76,),\n    (21,),\n    (4,),\n    (49,),\n    (35,),\n    (55,),\n    (43,),\n    (39,),\n    (36,),\n    (5,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def divSum ( n ) :\n    result = 0\n    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :\n        if ( n % i == 0 ) :\n            if ( i == ( n / i ) ) :\n                result = result + i\n            else :\n                result = result + ( i + n // i )\n    return ( result + n + 1 )\n"}
Disassembly of <code object divSum at 0x7f2b0164d810, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( result )

3 4 SETUP_LOOP 74 ( to 80 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_CONST 2 ( 2 )
10 LOAD_GLOBAL 1 ( int )
12 CALL_FUNCTION 1
14 LOAD_GLOBAL 2 ( math )
16 LOAD_METHOD 3 ( sqrt )
18 LOAD_FAST 0 ( n )
20 CALL_METHOD 1
22 CALL_FUNCTION 1
24 LOAD_CONST 3 ( 1 )
26 BINARY_ADD
28 CALL_FUNCTION 2
30 GET_ITER
>> 32 FOR_ITER 52 ( to 78 )
34 STORE_FAST 2 ( i )

4 36 LOAD_FAST 0 ( n )
38 LOAD_FAST 2 ( i )
40 BINARY_MODULO
42 LOAD_CONST 1 ( 0 )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 66

5 48 LOAD_FAST 2 ( i )
50 LOAD_FAST 0 ( n )
52 LOAD_FAST 2 ( i )
54 BINARY_TRUE_DIVIDE
56 COMPARE_OP 2 ( == )
58 POP_JUMP_IF_FALSE 64

6 60 LOAD_FAST 1 ( result )
62 LOAD_FAST 2 ( i )
64 BINARY_ADD
66 STORE_FAST 1 ( result )
68 JUMP_ABSOLUTE 32

8 >> 70 LOAD_FAST 1 ( result )
72 LOAD_FAST 2 ( i )
74 LOAD_FAST 0 ( n )
76 LOAD_FAST 2 ( i )
78 BINARY_FLOOR_DIVIDE
80 BINARY_ADD
82 BINARY_ADD
84 STORE_FAST 1 ( result )
86 JUMP_ABSOLUTE 32
>> 88 POP_BLOCK

9 >> 90 LOAD_FAST 1 ( result )
92 LOAD_FAST 0 ( n )
94 BINARY_ADD
96 LOAD_CONST 3 ( 1 )
98 BINARY_ADD
100 RETURN_VALUE
