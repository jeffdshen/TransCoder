{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport sys\n\ndef f_gold ( arr , n ) :\n    longest_start = - 1 ;\n    longest_end = 0 ;\n    for start in range ( n ) :\n        min = sys.maxsize ;\n        max = - sys.maxsize ;\n        for end in range ( start , n ) :\n            val = arr [ end ] ;\n            if ( val < min ) :\n                min = val ;\n            if ( val > max ) :\n                max = val ;\n            if ( 2 * min <= max ) :\n                break ;\n            if ( end - start > longest_end - longest_start or longest_start == - 1 ) :\n                longest_start = start ;\n                longest_end = end ;\n    if ( longest_start == - 1 ) :\n        return n ;\n    return ( n - ( longest_end - longest_start + 1 ) ) ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([32, 50, 66, 73, 76, 87],5,),\n    ([68, 74, 16, 40, 6, -44, -36, 94, 6, -24, -4, -58, -16, 24],11,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],11,),\n    ([91, 22],1,),\n    ([-84, -80, -78, -76, -58, -54, -52, -48, -42, -42, -40, -38, -34, -32, -28, -24, -6, 2, 2, 4, 10, 14, 16, 18, 26, 26, 36, 40, 50, 52, 62, 64, 72, 74, 84, 90, 94, 96, 98],35,),\n    ([1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1],13,),\n    ([10, 19, 25, 29, 32, 37, 40, 43, 43, 44, 46, 51, 51, 54, 56, 58, 63, 79, 83, 86, 87, 97, 97],11,),\n    ([-48, -28, 10, 30, 78, -72, 78, 52, -52, -68, 56, 42, 8, -42, 16, -56, 2, -90, -26, -28, -56, -2, 80, -50, 98, -64, -96, 10, -10, 44, 98, -48, -88, 42, 30, 24, 38, -26, -52, -12, 0, 34, -82, -80, 0, -84, -20],25,),\n    ([0, 0, 1, 1, 1, 1, 1, 1],6,),\n    ([25, 82],1,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minRemovalsDP ( arr , n ) :\n    longest_start = - 1 ;\n    longest_end = 0 ;\n    for start in range ( n ) :\n        min = sys.maxsize ;\n        max = - sys.maxsize ;\n        for end in range ( start , n ) :\n            val = arr [ end ] ;\n            if ( val < min ) :\n                min = val ;\n            if ( val > max ) :\n                max = val ;\n            if ( 2 * min <= max ) :\n                break ;\n            if ( end - start > longest_end - longest_start or longest_start == - 1 ) :\n                longest_start = start ;\n                longest_end = end ;\n    if ( longest_start == - 1 ) :\n        return n ;\n    return ( n - ( longest_end - longest_start + 1 ) ) ;\n"}
Disassembly of <code object minRemovalsDP at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - 1 )
2 STORE_FAST 2 ( longest_start )

3 4 LOAD_CONST 2 ( 0 )
6 STORE_FAST 3 ( longest_end )

4 8 SETUP_LOOP 138 ( to 152 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_FAST 1 ( n )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 126 ( to 150 )
20 STORE_FAST 4 ( start )

5 22 LOAD_GLOBAL 1 ( sys )
24 LOAD_ATTR 2 ( maxsize )
26 STORE_FAST 5 ( min )

6 28 LOAD_GLOBAL 1 ( sys )
30 LOAD_ATTR 2 ( maxsize )
32 UNARY_NEGATIVE
34 STORE_FAST 6 ( max )

7 36 LOAD_GLOBAL 1 ( sys )
38 LOAD_ATTR 2 ( maxsize )
40 UNARY_NEGATIVE
42 STORE_FAST 7 ( max )

8 44 SETUP_LOOP 32 ( to 80 )
46 LOAD_GLOBAL 0 ( range )
48 LOAD_FAST 4 ( start )
50 LOAD_FAST 1 ( n )
52 CALL_FUNCTION 2
54 GET_ITER
>> 56 FOR_ITER 20 ( to 78 )
58 STORE_FAST 8 ( end )

9 60 LOAD_FAST 0 ( arr )
62 LOAD_FAST 8 ( end )
64 BINARY_SUBSCR
66 STORE_FAST 9 ( val )

10 68 LOAD_FAST 9 ( val )
70 LOAD_FAST 5 ( min )
72 COMPARE_OP 0 ( < )
74 POP_JUMP_IF_FALSE 56

11 76 LOAD_FAST 9 ( val )
78 STORE_FAST 5 ( min )
80 JUMP_ABSOLUTE 56
>> 82 POP_BLOCK

12 >> 84 LOAD_FAST 9 ( val )
86 LOAD_FAST 7 ( max )
88 COMPARE_OP 4 ( > )
90 POP_JUMP_IF_FALSE 18

13 92 LOAD_FAST 9 ( val )
94 STORE_FAST 7 ( max )
96 JUMP_ABSOLUTE 18
>> 98 POP_BLOCK

14 >> 100 LOAD_CONST 3 ( 2 )
102 LOAD_FAST 5 ( min )
104 BINARY_MULTIPLY
106 LOAD_FAST 7 ( max )
108 COMPARE_OP 1 ( <= )
110 POP_JUMP_IF_FALSE 18

15 112 BREAK_LOOP
114 JUMP_ABSOLUTE 18
>> 116 POP_BLOCK

16 118 LOAD_FAST 8 ( end )
120 LOAD_FAST 4 ( start )
122 BINARY_SUBTRACT
124 LOAD_FAST 2 ( longest_start )
126 BINARY_SUBTRACT
128 COMPARE_OP 0 ( < )
130 POP_JUMP_IF_TRUE 146
132 LOAD_FAST 2 ( longest_start )
134 LOAD_CONST 1 ( - 1 )
136 COMPARE_OP 2 ( == )
138 POP_JUMP_IF_FALSE 146

17 140 LOAD_FAST 4 ( start )
142 STORE_FAST 2 ( longest_start )

18 144 LOAD_FAST 8 ( end )
146 STORE_FAST 8 ( end )
148 JUMP_ABSOLUTE 18
>> 150 POP_BLOCK

19 >> 152 LOAD_FAST 2 ( longest_start )
154 LOAD_CONST 1 ( - 1 )
156 COMPARE_OP 2 ( == )
158 POP_JUMP_IF_FALSE 18

20 160 LOAD_FAST 4 ( start )
162 RETURN_VALUE

21 >> 164 LOAD_FAST 1 ( n )
166 LOAD_FAST 2 ( longest_)
168 LOAD_FAST 3 ( longest_start )
170 BINARY_SUBTRACT
172 LOAD_CONST 4 ( 1 )
174 BINARY_ADD
176 BINARY_SUBTRACT
178 BINARY_MULTIPLY
180 BINARY_SUBTRACT
182 RETURN_VALUE
