{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( A , n ) :\n    cnt = 0\n    parent = [ None ] * ( n + 1 )\n    vis = [ None ] * ( n + 1 )\n    for i in range ( 0 , n + 1 ) :\n        parent [ i ] = - 1\n        vis [ i ] = 0\n    for i in range ( 0 , n ) :\n        j = i\n        if ( parent [ j ] == - 1 ) :\n            while ( parent [ j ] == - 1 ) :\n                parent [ j ] = i\n                j = ( j + A [ j ] + 1 ) % n\n            if ( parent [ j ] == i ) :\n                while ( vis [ j ] == 0 ) :\n                    vis [ j ] = 1\n                    cnt = cnt + 1\n                    j = ( j + A [ j ] + 1 ) % n\n    return cnt\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 6, 7, 8, 9, 12, 12, 14, 18, 24, 26, 38, 39, 45, 50, 52, 72, 80, 80, 83, 86],17,),\n    ([14, 28, -52, 54, -88, -42, -34, -54, -72, 40, 90, 30, -64, -94, 38, 88, -6, -62, 52, 60, -96, -70, 60, -48, -36, 32, 34, -32, 4, -14, 70, 44, -14, -58, -24, -64, -76, -26, -60, 2, 64, -66, -74, 58, 90, -74, -88, 26],41,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],9,),\n    ([40, 27, 9, 90, 40, 47, 53, 43, 88, 89, 84, 4, 83, 47, 63, 77, 78, 1, 72, 22, 10, 29, 22],22,),\n    ([-98, -94, -92, -90, -82, -80, -78, -68, -62, -60, -60, -44, -42, -40, -38, -36, -28, -28, -26, -24, -2, 4, 4, 8, 14, 16, 26, 36, 38, 42, 44, 44, 44, 46, 52, 62, 66, 66, 70, 84, 86, 88, 88],28,),\n    ([1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0],10,),\n    ([1, 5, 6, 7, 10, 10, 19, 29, 33, 35, 36, 43, 46, 46, 49, 52, 64, 65, 67, 67, 69, 74, 79, 83, 86, 91, 96, 97, 99],19,),\n    ([28, 72, 68, 78, 6, -22, 36, -60, -50, -80, 44, 74, 52, -34, 76, -24, 82, 82, 72, -36, -38, -72, 14, -74, -98, 12, -88, -60, -14, -20, 24, -58, -70, 84, 94, -72, 96, -92, 42, -22],31,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],36,),\n    ([87, 60],1,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def solve ( A , n ) :\n    cnt = 0\n    parent = [ None ] * ( n + 1 )\n    vis = [ None ] * ( n + 1 )\n    for i in range ( 0 , n + 1 ) :\n        parent [ i ] = - 1\n        vis [ i ] = 0\n    for i in range ( 0 , n ) :\n        j = i\n        if ( parent [ j ] == - 1 ) :\n            while ( parent [ j ] == - 1 ) :\n                parent [ j ] = i\n                j = ( j + A [ j ] + 1 ) % n\n            if ( parent [ j ] == i ) :\n                while ( vis [ j ] == 0 ) :\n                    vis [ j ] = 1\n                    cnt = cnt + 1\n                    j = ( j + A [ j ] + 1 ) % n\n    return cnt\n"}
Disassembly of <code object solve at 0x7f2b0164d270, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( cnt )

3 4 LOAD_CONST 0 ( None )
6 BUILD_LIST 1
8 LOAD_FAST 1 ( n )
10 LOAD_CONST 2 ( 1 )
12 BINARY_ADD
14 BINARY_MULTIPLY
16 STORE_FAST 3 ( parent )

4 18 LOAD_CONST 0 ( None )
20 BUILD_LIST 1
22 LOAD_FAST 1 ( n )
24 LOAD_CONST 2 ( 1 )
26 BINARY_ADD
28 BINARY_MULTIPLY
30 STORE_FAST 4 ( vis )

5 32 SETUP_LOOP 40 ( to 74 )
34 LOAD_GLOBAL 0 ( range )
36 LOAD_CONST 1 ( 0 )
38 LOAD_FAST 1 ( n )
40 LOAD_CONST 2 ( 1 )
42 BINARY_ADD
44 CALL_FUNCTION 2
46 GET_ITER
>> 48 FOR_ITER 24 ( to 72 )
50 STORE_FAST 5 ( i )

6 52 LOAD_CONST 3 ( - 1 )
54 LOAD_FAST 3 ( parent )
56 LOAD_FAST 5 ( i )
58 STORE_SUBSCR

7 60 LOAD_CONST 1 ( 0 )
62 STORE_FAST 4 ( vis )
64 JUMP_ABSOLUTE 48
>> 66 POP_BLOCK

8 >> 68 SETUP_LOOP 136 ( to 244 )
70 LOAD_GLOBAL 0 ( range )
72 LOAD_CONST 1 ( 0 )
74 LOAD_FAST 1 ( n )
76 CALL_FUNCTION 2
78 GET_ITER
>> 80 FOR_ITER 124 ( to 242 )
82 STORE_FAST 5 ( i )

9 84 LOAD_FAST 5 ( i )
86 STORE_FAST 6 ( j )

10 88 LOAD_FAST 3 ( parent )
90 LOAD_FAST 6 ( j )
92 BINARY_SUBSCR
94 LOAD_CONST 3 ( - 1 )
96 COMPARE_OP 2 ( == )
98 POP_JUMP_IF_FALSE 136

11 100 SETUP_LOOP 118 ( to 244 )
>> 102 SETUP_LOOP 118 ( to 244 )
104 LOAD_FAST 3 ( parent )
106 LOAD_FAST 6 ( j )
108 BINARY_SUBSCR
110 LOAD_CONST 3 ( - 1 )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 242

12 116 LOAD_FAST 5 ( i )
118 LOAD_FAST 3 ( parent )
120 LOAD_FAST 6 ( j )
122 STORE_SUBSCR

13 124 LOAD_FAST 6 ( j )
126 LOAD_FAST 0 ( A )
128 LOAD_FAST 6 ( j )
130 BINARY_SUBSCR
132 BINARY_ADD
134 LOAD_CONST 2 ( 1 )
136 BINARY_ADD
138 LOAD_FAST 1 ( n )
140 BINARY_MODULO
142 STORE_FAST 6 ( j )
144 JUMP_ABSOLUTE 102
>> 146 POP_BLOCK

14 >> 148 LOAD_FAST 3 ( parent )
150 LOAD_FAST 6 ( j )
152 BINARY_SUBSCR
154 LOAD_FAST 5 ( i )
156 COMPARE_OP 2 ( == )
158 POP_JUMP_IF_FALSE 194

15 160 SETUP_LOOP 54 ( to 194 )
>> 162 LOAD_FAST 4 ( vis )
164 LOAD_FAST 6 ( j )
166 BINARY_SUBSCR
168 LOAD_CONST 1 ( 0 )
170 COMPARE_OP 2 ( == )
172 POP_JUMP_IF_FALSE 192

16 174 SETUP_LOOP 46 ( to 192 )
>> 176 LOAD_FAST 4 ( vis )
178 LOAD_FAST 6 ( j )
180 BINARY_SUBSCR
182 LOAD_CONST 1 ( 0 )
184 COMPARE_OP 2 ( == )
186 POP_JUMP_IF_FALSE 190

17 188 LOAD_CONST 2 ( 1 )
190 LOAD_FAST 4 ( vis )
192 LOAD_FAST 6 ( j )
194 STORE_SUBSCR

18 196 LOAD_FAST 2 ( cnt )
198 LOAD_CONST 2 ( 1 )
200 BINARY_ADD
202 STORE_FAST 2 ( cnt )

19 204 LOAD_FAST 6 ( j )
206 LOAD_FAST 0 ( A )
208 LOAD_FAST 6 ( j )
210 BINARY_SUBSCR
212 BINARY_ADD
214 LOAD_CONST 2 ( 1 )
216 BINARY_ADD
218 LOAD_FAST 1 ( n )
220 BINARY_MODULO
222 STORE_FAST 6 ( j )
224 JUMP_ABSOLUTE 176
>> 226 POP_BLOCK
>> 228 JUMP_ABSOLUTE 80
>> 230 POP_BLOCK

20 >> 232 LOAD_FAST 2 ( cnt )
234 RETURN_VALUE
