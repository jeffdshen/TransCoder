{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( limit ) :\n    if ( limit < 2 ) :\n        return 0\n    ef1 = 0\n    ef2 = 2\n    sm = ef1 + ef2\n    while ( ef2 <= limit ) :\n        ef3 = 4 * ef2 + ef1\n        if ( ef3 > limit ) :\n            break\n        ef1 = ef2\n        ef2 = ef3\n        sm = sm + ef2\n    return sm\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (67,),\n    (89,),\n    (12,),\n    (94,),\n    (96,),\n    (25,),\n    (49,),\n    (8,),\n    (33,),\n    (59,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def evenFibSum ( limit ) :\n    if ( limit < 2 ) :\n        return 0\n    ef1 = 0\n    ef2 = 2\n    sm = ef1 + ef2\n    while ( ef2 <= limit ) :\n        ef3 = 4 * ef2 + ef1\n        if ( ef3 > limit ) :\n            break\n        ef1 = ef2\n        ef2 = ef3\n        sm = sm + ef2\n    return sm\n"}
Disassembly of <code object evenFibSum at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( limit )
2 LOAD_CONST 1 ( 2 )
4 COMPARE_OP 0 ( < )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( 0 )
10 RETURN_VALUE

4 >> 12 LOAD_CONST 2 ( 0 )
14 STORE_FAST 1 ( ef1 )

5 16 LOAD_CONST 1 ( 2 )
18 STORE_FAST 2 ( ef2 )

6 20 LOAD_FAST 1 ( ef1 )
22 LOAD_FAST 2 ( ef2 )
24 BINARY_ADD
26 STORE_FAST 3 ( sm )

7 28 SETUP_LOOP 46 ( to 74 )
>> 30 LOAD_FAST 2 ( ef2 )
32 LOAD_FAST 0 ( limit )
34 COMPARE_OP 1 ( <= )
36 POP_JUMP_IF_FALSE 72

8 38 LOAD_CONST 3 ( 4 )
40 LOAD_FAST 2 ( ef2 )
42 BINARY_MULTIPLY
44 LOAD_FAST 1 ( ef1 )
46 BINARY_ADD
48 STORE_FAST 4 ( ef3 )

9 50 LOAD_FAST 4 ( ef3 )
52 LOAD_FAST 0 ( limit )
54 COMPARE_OP 4 ( > )
56 POP_JUMP_IF_FALSE 62

10 58 BREAK_LOOP
60 JUMP_ABSOLUTE 30

11 >> 62 LOAD_FAST 4 ( ef2 )
64 STORE_FAST 1 ( ef1 )

12 66 LOAD_FAST 3 ( ef3 )
68 STORE_FAST 2 ( ef2 )

13 70 LOAD_FAST 3 ( sm )
72 LOAD_FAST 4 ( ef3 )
74 BINARY_ADD
76 STORE_FAST 3 ( sm )
78 JUMP_ABSOLUTE 30
>> 80 POP_BLOCK

14 >> 82 LOAD_FAST 3 ( sm )
84 RETURN_VALUE
