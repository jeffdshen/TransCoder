{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport sys\n\ndef f_gold ( arr , n ) :\n    res = - sys.maxsize\n    for i in range ( 0 , n ) :\n        curr_sum = 0\n        for j in range ( 0 , n ) :\n            index = int ( ( i + j ) % n )\n            curr_sum += j * arr [ index ]\n        res = max ( res , curr_sum )\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([11, 12, 16, 26, 29, 40, 54, 59, 65, 70, 71, 73, 78, 81, 87, 87, 88, 90, 95, 97],11,),\n    ([-46, -32, 54, 96, -72, -58, -36, -44, 26, -2, -68, 42, 90, 26, -92, -96, 88, -42, -18, 46, -70, 24, 0, 24, 34, 34, -52, 50, 94, -60, 64, 58],22,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],33,),\n    ([48, 2, 79, 98, 28, 17, 41, 47, 61, 76, 82, 5, 74, 4, 80, 51, 22, 45, 91, 75, 91, 93, 42, 45, 69, 98, 76, 74, 83, 17, 30, 88, 53, 25, 35, 19, 26],20,),\n    ([-88, -84, -82, -74, -44, -34, -32, -20, -20, -14, 6, 6, 10, 12, 16, 24, 32, 34, 38, 46, 54, 54, 56, 60, 82, 88, 90, 94, 98],24,),\n    ([0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],7,),\n    ([10, 14, 14, 14, 19, 20, 22, 26, 35, 36, 40, 53, 54, 55, 55, 57, 57, 67, 72, 72, 77, 78, 83, 84, 95, 96],16,),\n    ([-80, 18, -76, 48, -52, -38, 52, -82, 40, -44, -90, 86, -86, -36, -32, -2, 56, -12, -88, 14, -16, 8, 52, 24, 46, 56, 84, -36, 84, -60, 72, -46, 32, -16, -20, 68, -86, -62, 58, 8, 78, -52, 22, -28, -22, -42, 12, -48],30,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],14,),\n    ([20, 94, 36, 2, 50, 62, 84, 50, 66, 75, 1, 18, 41, 48, 72, 61, 86, 22, 54, 6, 71, 46, 92, 68, 59, 51, 89, 31, 58, 78, 82, 84],25,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxSum ( arr , n ) :\n    res = - sys.maxsize\n    for i in range ( 0 , n ) :\n        curr_sum = 0\n        for j in range ( 0 , n ) :\n            index = int ( ( i + j ) % n )\n            curr_sum += j * arr [ index ]\n        res = max ( res , curr_sum )\n    return res\n"}
Disassembly of <code object maxSum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( sys )
2 LOAD_ATTR 1 ( maxsize )
4 UNARY_NEGATIVE
6 STORE_FAST 2 ( res )

3 8 SETUP_LOOP 80 ( to 94 )
10 LOAD_GLOBAL 2 ( range )
12 LOAD_CONST 1 ( 0 )
14 LOAD_FAST 1 ( n )
16 CALL_FUNCTION 2
18 GET_ITER
>> 20 FOR_ITER 68 ( to 92 )
22 STORE_FAST 3 ( i )

4 24 LOAD_CONST 1 ( 0 )
26 STORE_FAST 4 ( curr_sum )

5 28 SETUP_LOOP 52 ( to 80 )
30 LOAD_GLOBAL 2 ( range )
32 LOAD_CONST 1 ( 0 )
34 LOAD_FAST 1 ( n )
36 CALL_FUNCTION 2
38 GET_ITER
>> 40 FOR_ITER 36 ( to 78 )
42 STORE_FAST 5 ( j )

6 44 LOAD_GLOBAL 3 ( int )
46 LOAD_FAST 3 ( i )
48 LOAD_FAST 5 ( j )
50 BINARY_ADD
52 CALL_FUNCTION 1
54 LOAD_FAST 1 ( n )
56 BINARY_MODULO
58 CALL_FUNCTION 1
60 STORE_FAST 6 ( index )

7 62 LOAD_FAST 4 ( curr_sum )
64 LOAD_FAST 5 ( j )
66 LOAD_FAST 0 ( arr )
68 LOAD_FAST 6 ( index )
70 BINARY_SUBSCR
72 BINARY_MULTIPLY
74 INPLACE_ADD
76 STORE_FAST 4 ( curr_sum )
>> 78 JUMP_ABSOLUTE 40
>> 80 POP_BLOCK

8 >> 82 LOAD_GLOBAL 4 ( max )
84 LOAD_FAST 2 ( res )
86 LOAD_FAST 4 ( curr_sum )
88 CALL_FUNCTION 2
90 STORE_FAST 2 ( res )
>> 92 POP_BLOCK

9 >> 94 LOAD_FAST 2 ( res )
96 RETURN_VALUE
