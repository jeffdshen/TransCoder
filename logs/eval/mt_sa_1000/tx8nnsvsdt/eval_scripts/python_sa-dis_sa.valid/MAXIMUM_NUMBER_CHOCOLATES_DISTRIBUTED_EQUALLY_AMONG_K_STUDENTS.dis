{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , 0 , 0\n    sm = [ 0 ] * n\n    sm [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        sm [ i ] = sm [ i - 1 ] + arr [ i ]\n    for i in range ( n ) :\n        curr_rem = sm [ i ] % k\n        if ( not curr_rem and maxSum < sm [ i ] ) :\n            maxSum = sm [ i ]\n        elif ( not curr_rem in um ) :\n            um [ curr_rem ] = i\n        elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n            maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n    return maxSum // k\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 8, 8, 12, 14, 23, 25, 25, 27, 27, 29, 40, 42, 49, 52, 52, 54, 56, 57, 61, 68, 74, 77, 81, 82, 83, 84, 85, 85, 85, 87, 87, 88, 88, 90, 92, 96, 96],27,32,),\n    ([-90, -34, 26, -20, -12, -42, 28, 12, -6, 58, -46, 4, -30, -28, -14],8,14,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],7,9,),\n    ([58, 81, 36, 2, 51, 71, 77, 34, 91, 82, 47, 4, 91, 83, 26, 96, 3, 6],16,12,),\n    ([-92, -86, -82, -68, -60, -46, -40, -28, -26, -24, -2, -2, 2, 2, 10, 10, 10, 16, 16, 18, 20, 20, 22, 30, 34, 38, 56, 56, 60, 62, 62, 68, 82, 94, 94, 98],20,31,),\n    ([0, 1, 0],2,2,),\n    ([3, 8, 15, 19, 21, 26, 28, 31, 31, 42, 45, 48, 57, 75, 75, 78, 79, 85, 91, 99],17,16,),\n    ([-38, 42, 40, -60, -16, -36, 44, 60, -86, -38, 30, -22, -30, -96, -66],12,10,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],13,16,),\n    ([95, 38, 91, 75, 43, 95, 23, 36, 51, 4, 38, 53, 52, 58, 55, 3, 19, 22, 84, 9],14,19,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , 0 , 0\n    sm = [ 0 ] * n\n    sm [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        sm [ i ] = sm [ i - 1 ] + arr [ i ]\n    for i in range ( n ) :\n        curr_rem = sm [ i ] % k\n        if ( not curr_rem and maxSum < sm [ i ] ) :\n            maxSum = sm [ i ]\n        elif ( not curr_rem in um ) :\n            um [ curr_rem ] = i\n        elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n            maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n    return maxSum // k\n"}
Disassembly of <code object maxNumOfChocolates at 0x7f2b01639f60, file "<dis>", line 1>:
2 0 BUILD_MAP 0
2 LOAD_CONST 1 ( 0 )
4 LOAD_CONST 1 ( 0 )
6 LOAD_CONST 1 ( 0 )
8 BUILD_TUPLE 4
10 UNPACK_SEQUENCE 3
12 STORE_FAST 3 ( um )
14 STORE_FAST 4 ( curr_rem )
16 STORE_FAST 5 ( maxSum )

3 18 LOAD_CONST 1 ( 0 )
20 BUILD_LIST 1
22 LOAD_FAST 1 ( n )
24 BINARY_MULTIPLY
26 STORE_FAST 6 ( sm )

4 28 LOAD_FAST 0 ( arr )
30 LOAD_CONST 1 ( 0 )
32 BINARY_SUBSCR
34 LOAD_FAST 6 ( sm )
36 LOAD_CONST 1 ( 0 )
38 STORE_SUBSCR

5 40 SETUP_LOOP 32 ( to 74 )
42 LOAD_GLOBAL 0 ( range )
44 LOAD_CONST 2 ( 1 )
46 LOAD_FAST 1 ( n )
48 CALL_FUNCTION 2
50 GET_ITER
>> 52 FOR_ITER 20 ( to 72 )
54 STORE_FAST 7 ( i )

6 56 LOAD_FAST 6 ( sm )
58 LOAD_FAST 7 ( i )
60 LOAD_CONST 2 ( 1 )
62 BINARY_SUBTRACT
64 BINARY_SUBSCR
66 LOAD_FAST 0 ( arr )
68 LOAD_FAST 7 ( i )
70 STORE_SUBSCR
>> 72 JUMP_ABSOLUTE 52
>> 74 POP_BLOCK

7 >> 76 SETUP_LOOP 132 ( to 244 )
78 LOAD_GLOBAL 0 ( range )
80 LOAD_FAST 1 ( n )
82 CALL_FUNCTION 1
84 GET_ITER
>> 86 FOR_ITER 124 ( to 242 )
88 STORE_FAST 7 ( i )

8 90 LOAD_FAST 6 ( sm )
92 LOAD_FAST 7 ( i )
94 BINARY_SUBSCR
96 LOAD_FAST 2 ( k )
98 BINARY_MODULO
100 STORE_FAST 8 ( curr_rem )

9 102 LOAD_FAST 8 ( curr_rem )
104 POP_JUMP_IF_TRUE 116
106 LOAD_FAST 5 ( maxSum )
108 LOAD_FAST 6 ( sm )
110 LOAD_FAST 7 ( i )
112 BINARY_SUBSCR
114 COMPARE_OP 0 ( < )
>> 116 POP_JUMP_IF_FALSE 116

10 118 LOAD_FAST 6 ( sm )
120 LOAD_FAST 7 ( i )
122 BINARY_SUBSCR
124 STORE_FAST 5 ( maxSum )
126 JUMP_FORWARD 46 ( to 152 )

11 >> 128 LOAD_FAST 8 ( curr_rem )
130 LOAD_FAST 3 ( um )
132 COMPARE_OP 6 ( in )
134 POP_JUMP_IF_FALSE 152

12 136 LOAD_FAST 7 ( i )
138 LOAD_FAST 6 ( sm )
140 LOAD_FAST 8 ( curr_rem )
142 STORE_SUBSCR
144 JUMP_ABSOLUTE 86

13 >> 146 LOAD_FAST 5 ( maxSum )
148 LOAD_FAST 6 ( sm )
150 COMPARE_OP 7 ( not in )
152 POP_JUMP_IF_FALSE 162

14 154 LOAD_FAST 7 ( i )
156 LOAD_FAST 6 ( sm )
158 LOAD_FAST 8 ( curr_rem )
160 STORE_SUBSCR

15 >> 162 LOAD_FAST 5 ( maxSum )
164 LOAD_FAST 7 ( i )
166 BINARY_SUBSCR
168 LOAD_FAST 6 ( sm )
170 LOAD_FAST 3 ( um )
172 LOAD_FAST 8 ( curr_rem )
174 BINARY_SUBSCR
176 BINARY_SUBTRACT
178 COMPARE_OP 0 ( < )
180 POP_JUMP_IF_FALSE 200

16 182 LOAD_FAST 6 ( sm )
184 LOAD_FAST 7 ( i )
186 BINARY_SUBSCR
188 LOAD_FAST 6 ( sm )
190 LOAD_FAST 8 ( curr_rem )
192 BINARY_SUBSCR
194 BINARY_SUBTRACT
196 STORE_FAST 5 ( maxSum )
198 JUMP_ABSOLUTE 86
>> 200 POP_BLOCK

17 >> 202 LOAD_FAST 5 ( maxSum )
204 LOAD_FAST 2 ( k )
206 BINARY_FLOOR_DIVIDE
208 RETURN_VALUE
