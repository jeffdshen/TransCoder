{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    l = len ( s )\n    s1 = \"\"\n    if ( l % 2 == 0 ) :\n        isEven = True\n    else :\n        isEven = False\n    for i in range ( 0 , l , 2 ) :\n        if ( isEven ) :\n            s1 = s [ i ] + s1\n            s1 += s [ i + 1 ]\n        else :\n            if ( l - i > 1 ) :\n                s1 += s [ i ]\n                s1 = s [ i + 1 ] + s1\n            else :\n                s1 += s [ i ]\n    return s1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (' EgvQCeqYpZtv',),\n    ('488540',),\n    ('0000101010111',),\n    ('syw',),\n    ('402355',),\n    ('0',),\n    ('wmHMlAtq',),\n    ('7962',),\n    ('111111',),\n    ('UbgRGDquop',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def decodeMedianString ( s ) :\n    l = len ( s )\n    s1 = \"\"\n    if ( l % 2 == 0 ) :\n        isEven = True\n    else :\n        isEven = False\n    for i in range ( 0 , l , 2 ) :\n        if ( isEven ) :\n            s1 = s [ i ] + s1\n            s1 += s [ i + 1 ]\n        else :\n            if ( l - i > 1 ) :\n                s1 += s [ i ]\n                s1 = s [ i + 1 ] + s1\n            else :\n                s1 += s [ i ]\n    return s1\n"}
Disassembly of <code object decodeMedianString at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( l )

3 8 LOAD_CONST 1 ( '' )
10 STORE_FAST 2 ( s1 )

4 12 LOAD_FAST 1 ( l )
14 LOAD_CONST 2 ( 2 )
16 BINARY_MODULO
18 LOAD_CONST 3 ( 0 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

5 24 LOAD_CONST 4 ( True )
26 STORE_FAST 3 ( isEven )

7 >> 28 LOAD_CONST 5 ( False )
30 STORE_FAST 3 ( isEven )

8 >> 32 SETUP_LOOP 96 ( to 138 )
34 LOAD_GLOBAL 1 ( range )
36 LOAD_CONST 3 ( 0 )
38 LOAD_FAST 1 ( l )
40 LOAD_CONST 2 ( 2 )
42 CALL_FUNCTION 3
44 GET_ITER
>> 46 FOR_ITER 80 ( to 136 )
48 STORE_FAST 4 ( i )

9 50 LOAD_FAST 3 ( isEven )
52 POP_JUMP_IF_FALSE 88

10 54 LOAD_FAST 0 ( s )
56 LOAD_FAST 4 ( i )
58 BINARY_SUBSCR
60 LOAD_FAST 2 ( s1 )
62 BINARY_ADD
64 STORE_FAST 2 ( s1 )

11 66 LOAD_FAST 2 ( s1 )
68 LOAD_FAST 0 ( s )
70 LOAD_FAST 4 ( i )
72 LOAD_CONST 6 ( 1 )
74 BINARY_ADD
76 BINARY_SUBSCR
78 INPLACE_ADD
80 STORE_FAST 2 ( s1 )
82 JUMP_ABSOLUTE 46

13 >> 84 LOAD_FAST 1 ( l )
86 LOAD_FAST 4 ( i )
88 BINARY_SUBTRACT
90 LOAD_CONST 6 ( 1 )
92 COMPARE_OP 4 ( > )
94 POP_JUMP_IF_FALSE 118

14 96 LOAD_FAST 2 ( s1 )
98 LOAD_FAST 0 ( s )
100 LOAD_FAST 4 ( i )
102 BINARY_SUBSCR
104 INPLACE_ADD
106 STORE_FAST 2 ( s1 )

15 108 LOAD_FAST 0 ( s )
110 LOAD_FAST 4 ( i )
112 LOAD_CONST 6 ( 1 )
114 BINARY_ADD
116 BINARY_SUBSCR
118 LOAD_FAST 2 ( s1 )
120 BINARY_ADD
122 STORE_FAST 2 ( s1 )
124 JUMP_ABSOLUTE 46

17 >> 126 LOAD_FAST 2 ( s1 )
128 LOAD_FAST 0 ( s )
130 LOAD_FAST 4 ( i )
132 BINARY_SUBSCR
134 INPLACE_ADD
136 STORE_FAST 2 ( s1 )
138 JUMP_ABSOLUTE 46
>> 140 POP_BLOCK

18 >> 142 LOAD_FAST 2 ( s1 )
144 RETURN_VALUE
