{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x , y ) :\n    if ( y == 0 ) : return 1\n    temp = f_gold ( x , int ( y / 2 ) )\n    if ( y % 2 == 0 ) :\n        return temp * temp\n    else :\n        if ( y > 0 ) : return x * temp * temp\n        else : return ( temp * temp ) / x\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (4922.762671782271,18,),\n    (-838.1149138859112,7,),\n    (8829.981827152698,18,),\n    (-7084.090587314416,11,),\n    (9213.145968063258,42,),\n    (-4743.690018081376,63,),\n    (3281.586891359318,30,),\n    (-4006.1025383282854,63,),\n    (7806.145296436601,52,),\n    (-7219.421835366018,31,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def power ( x , y ) :\n    if ( y == 0 ) : return 1\n    temp = power ( x , int ( y / 2 ) )\n    if ( y % 2 == 0 ) :\n        return temp * temp\n    else :\n        if ( y > 0 ) : return x * temp * temp\n        else : return ( temp * temp ) / x\n"}
Disassembly of <code object power at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( y )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12
8 LOAD_CONST 2 ( 1 )
10 RETURN_VALUE

3 >> 12 LOAD_GLOBAL 0 ( power )
14 LOAD_FAST 0 ( x )
16 LOAD_GLOBAL 1 ( int )
18 LOAD_FAST 1 ( y )
20 LOAD_CONST 3 ( 2 )
22 BINARY_TRUE_DIVIDE
24 CALL_FUNCTION 1
26 CALL_FUNCTION 2
28 STORE_FAST 2 ( temp )

4 30 LOAD_FAST 1 ( y )
32 LOAD_CONST 3 ( 2 )
34 BINARY_MODULO
36 LOAD_CONST 1 ( 0 )
38 COMPARE_OP 2 ( == )
40 POP_JUMP_IF_FALSE 54

5 42 LOAD_FAST 2 ( temp )
44 LOAD_FAST 2 ( temp )
46 BINARY_MULTIPLY
48 RETURN_VALUE

7 >> 50 LOAD_FAST 1 ( y )
52 LOAD_CONST 1 ( 0 )
54 COMPARE_OP 4 ( > )
56 POP_JUMP_IF_FALSE 70
58 LOAD_FAST 0 ( x )
60 LOAD_FAST 2 ( temp )
62 BINARY_MULTIPLY
64 RETURN_VALUE

8 >> 66 LOAD_FAST 2 ( temp )
68 LOAD_FAST 2 ( temp )
70 BINARY_MULTIPLY
72 LOAD_FAST 0 ( x )
74 BINARY_TRUE_DIVIDE
76 RETURN_VALUE
78 LOAD_CONST 0 ( None )
80 RETURN_VALUE
