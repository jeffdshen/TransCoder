{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    if n <= 1 :\n        return\n    f_gold ( arr , n - 1 )\n    last = arr [ n - 1 ]\n    j = n - 2\n    while ( j >= 0 and arr [ j ] > last ) :\n        arr [ j + 1 ] = arr [ j ]\n        j = j - 1\n    arr [ j + 1 ] = last\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 7, 8, 14, 25, 25, 25, 30, 31, 36, 36, 37, 42, 44, 45, 45, 47, 50, 50, 54, 60, 60, 61, 67, 68, 69, 79, 80, 82, 96],27,),\n    ([-6, -2, -94],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([76, 39, 64, 57, 63, 7, 86, 72, 87, 23, 76, 6, 58, 14, 28, 5, 68, 56, 25, 27, 60, 4, 29, 91, 7, 32, 20, 64, 43, 30],26,),\n    ([-98, -80, -64, -60, -58, -54, -46, -44, -38, -30, -26, -20, -14, -14, -12, -8, -8, 16, 18, 18, 24, 26, 26, 34, 46, 70, 76, 82, 98],27,),\n    ([0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1],10,),\n    ([3, 4, 4, 5, 7, 13, 21, 21, 21, 22, 24, 25, 25, 34, 34, 40, 40, 45, 48, 50, 51, 60, 61, 64, 68, 73, 74, 77, 79, 80, 85, 90, 91, 93],17,),\n    ([46, -22, -48, -64, 44, -70, -8, -56, -24, -8, -92, -58, 60, -8, 78, -54, -66, 92, 32, -98, 46, 80, -2, -30, 20, -88, -18, 46, 68, -2, -48, -32, 48, 88, -92, 96, -82, 38, -82, -50, -20, 34, -50, 2, -64, 18, 50],45,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([73, 53, 18, 19, 63],3,)\n        ]\n    filled_function_param = [\n    ([4, 7, 8, 14, 25, 25, 25, 30, 31, 36, 36, 37, 42, 44, 45, 45, 47, 50, 50, 54, 60, 60, 61, 67, 68, 69, 79, 80, 82, 96],27,),\n    ([-6, -2, -94],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([76, 39, 64, 57, 63, 7, 86, 72, 87, 23, 76, 6, 58, 14, 28, 5, 68, 56, 25, 27, 60, 4, 29, 91, 7, 32, 20, 64, 43, 30],26,),\n    ([-98, -80, -64, -60, -58, -54, -46, -44, -38, -30, -26, -20, -14, -14, -12, -8, -8, 16, 18, 18, 24, 26, 26, 34, 46, 70, 76, 82, 98],27,),\n    ([0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1],10,),\n    ([3, 4, 4, 5, 7, 13, 21, 21, 21, 22, 24, 25, 25, 34, 34, 40, 40, 45, 48, 50, 51, 60, 61, 64, 68, 73, 74, 77, 79, 80, 85, 90, 91, 93],17,),\n    ([46, -22, -48, -64, 44, -70, -8, -56, -24, -8, -92, -58, 60, -8, 78, -54, -66, 92, 32, -98, 46, 80, -2, -30, 20, -88, -18, 46, 68, -2, -48, -32, 48, 88, -92, 96, -82, 38, -82, -50, -20, 34, -50, 2, -64, 18, 50],45,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([73, 53, 18, 19, 63],3,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def insertionSortRecursive ( arr , n ) :\n    if n <= 1 :\n        return\n    insertionSortRecursive ( arr , n - 1 )\n    last = arr [ n - 1 ]\n    j = n - 2\n    while ( j >= 0 and arr [ j ] > last ) :\n        arr [ j + 1 ] = arr [ j ]\n        j = j - 1\n    arr [ j + 1 ] = last\n"}
Disassembly of <code object insertionSortRecursive at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 1 ( <= )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 0 ( None )
10 RETURN_VALUE

4 >> 12 LOAD_GLOBAL 0 ( insertionSortRecursive )
14 LOAD_FAST 0 ( arr )
16 LOAD_FAST 1 ( n )
18 LOAD_CONST 1 ( 1 )
20 BINARY_SUBTRACT
22 CALL_FUNCTION 2
24 POP_TOP

5 26 LOAD_FAST 0 ( arr )
28 LOAD_FAST 1 ( n )
30 LOAD_CONST 1 ( 1 )
32 BINARY_SUBTRACT
34 BINARY_SUBSCR
36 STORE_FAST 2 ( last )

6 38 LOAD_FAST 1 ( n )
40 LOAD_CONST 2 ( 2 )
42 BINARY_SUBTRACT
44 STORE_FAST 3 ( j )

7 46 SETUP_LOOP 46 ( to 96 )
>> 48 LOAD_FAST 3 ( j )
50 LOAD_CONST 3 ( 0 )
52 COMPARE_OP 5 ( >= )
54 POP_JUMP_IF_FALSE 94
56 LOAD_FAST 0 ( arr )
58 LOAD_FAST 3 ( j )
60 BINARY_SUBSCR
62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 3 ( j )
66 LOAD_CONST 1 ( 1 )
68 BINARY_ADD
70 STORE_SUBSCR

8 72 LOAD_FAST 3 ( j )
74 LOAD_CONST 1 ( 1 )
76 BINARY_SUBTRACT
78 STORE_FAST 3 ( j )
80 JUMP_ABSOLUTE 48
>> 82 POP_BLOCK

9 >> 84 LOAD_FAST 2 ( last )
86 LOAD_FAST 0 ( arr )
88 LOAD_FAST 3 ( j )
90 LOAD_CONST 1 ( 1 )
92 BINARY_ADD
94 STORE_SUBSCR
96 LOAD_CONST 0 ( None )
98 RETURN_VALUE
