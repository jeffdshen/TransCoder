{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    leftMax = [ None ] * n\n    leftMax [ 0 ] = float ( '-inf' )\n    for i in range ( 1 , n ) :\n        leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 ] )\n    rightMin = float ( 'inf' )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] :\n            return i\n        rightMin = min ( rightMin , arr [ i ] )\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 24, 30, 33, 56, 67, 87, 90],4,),\n    ([72, -48, 12, 4, 46, 36, 2, 58, 82, -88, -14, 56, 90, 76, 18, -6, -28, 18, 88, 90, 40, -68, -10, -82, -28, 16, 32, -90, 12, -86, -16, 78, -98, -52, -26, 80, 6, 50, 40, -12, 52, 38, -92, 94, -32, 14, -80, -88, 48],28,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],30,),\n    ([51, 87, 46, 76, 2, 89, 56, 34, 49, 61, 44, 73, 14, 60, 89],11,),\n    ([-90, -90, -80, -72, -68, -64, -62, -62, -60, -46, -44, -44, -44, -42, -42, -32, -22, -22, -18, -2, 4, 6, 10, 12, 14, 30, 34, 34, 40, 56, 56, 56, 58, 68, 74, 78, 78, 82, 84, 86, 88, 90, 92],29,),\n    ([0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0],26,),\n    ([7, 8, 11, 12, 15, 17, 28, 34, 57, 61, 66, 76, 92],9,),\n    ([-22, -96, -78, -60, 34, -18, 86, -42, -78, 76, 8, 28, -80, 80, 6, -72, 34, 66, 84, 50, -4, 18, 72, -66, -68, -24, 56, -12, -70, 24, -82],19,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],9,),\n    ([79, 81, 55, 6, 78, 93, 81, 33, 29, 1, 27, 49, 21, 58, 22, 65, 44, 95, 6, 51, 75, 42, 14, 55, 79, 82, 90, 8, 15, 15, 53, 98, 76, 43, 33],30,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findElement ( arr , n ) :\n    leftMax = [ None ] * n\n    leftMax [ 0 ] = float ( '-inf' )\n    for i in range ( 1 , n ) :\n        leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 ] )\n    rightMin = float ( 'inf' )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] :\n            return i\n        rightMin = min ( rightMin , arr [ i ] )\n    return - 1\n"}
Disassembly of <code object findElement at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 0 ( None )
2 BUILD_LIST 1
4 LOAD_FAST 1 ( n )
6 BINARY_MULTIPLY
8 STORE_FAST 2 ( leftMax )

3 10 LOAD_GLOBAL 0 ( float )
12 LOAD_CONST 1 ( '-inf' )
14 CALL_FUNCTION 1
16 LOAD_FAST 2 ( leftMax )
18 LOAD_CONST 2 ( 0 )
20 STORE_SUBSCR

4 22 SETUP_LOOP 42 ( to 66 )
24 LOAD_GLOBAL 1 ( range )
26 LOAD_CONST 3 ( 1 )
28 LOAD_FAST 1 ( n )
30 CALL_FUNCTION 2
32 GET_ITER
>> 34 FOR_ITER 30 ( to 64 )
36 STORE_FAST 3 ( i )

5 38 LOAD_GLOBAL 2 ( max )
40 LOAD_FAST 2 ( leftMax )
42 LOAD_FAST 3 ( i )
44 LOAD_CONST 3 ( 1 )
46 BINARY_SUBTRACT
48 BINARY_SUBSCR
50 LOAD_FAST 0 ( arr )
52 LOAD_FAST 3 ( i )
54 LOAD_CONST 3 ( 1 )
56 BINARY_SUBTRACT
58 BINARY_SUBSCR
60 CALL_FUNCTION 2
62 LOAD_FAST 2 ( leftMax )
>> 64 LOAD_FAST 3 ( i )
66 STORE_SUBSCR

6 68 SETUP_LOOP 80 ( to 158 )
70 LOAD_GLOBAL 1 ( range )
72 LOAD_FAST 1 ( n )
74 LOAD_CONST 3 ( 1 )
76 BINARY_SUBTRACT
78 LOAD_CONST 4 ( - 1 )
80 LOAD_CONST 4 ( - 1 )
82 CALL_FUNCTION 3
84 GET_ITER
>> 86 FOR_ITER 58 ( to 156 )
88 STORE_FAST 3 ( i )

7 90 LOAD_FAST 2 ( leftMax )
92 LOAD_FAST 3 ( i )
94 BINARY_SUBSCR
96 LOAD_FAST 0 ( arr )
98 LOAD_FAST 3 ( i )
100 BINARY_SUBSCR
102 COMPARE_OP 0 ( < )
104 POP_JUMP_IF_FALSE 116
106 LOAD_FAST 4 ( rightMin )
108 LOAD_FAST 0 ( arr )
110 LOAD_FAST 3 ( i )
112 BINARY_SUBSCR
114 COMPARE_OP 0 ( < )
>> 116 STORE_FAST 4 ( rightMin )

8 118 LOAD_GLOBAL 3 ( min )
120 LOAD_FAST 4 ( rightMin )
122 LOAD_FAST 0 ( arr )
124 LOAD_FAST 3 ( i )
126 BINARY_SUBSCR
128 CALL_FUNCTION 2
130 STORE_FAST 4 ( rightMin )
132 JUMP_ABSOLUTE 86
>> 134 POP_BLOCK

9 >> 136 LOAD_CONST 4 ( - 1 )
138 RETURN_VALUE
