{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , b ) :\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    k = 0\n    while ( ( ( a | b ) & 1 ) == 0 ) :\n        a = a >> 1\n        b = b >> 1\n        k = k + 1\n    while ( ( a & 1 ) == 0 ) :\n        a = a >> 1\n    while ( b != 0 ) :\n        while ( ( b & 1 ) == 0 ) :\n            b = b >> 1\n        if ( a > b ) :\n            temp = a\n            a = b\n            b = temp\n        b = ( b - a )\n    return ( a << k )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (37,93,),\n    (58,13,),\n    (89,27,),\n    (75,14,),\n    (59,47,),\n    (84,39,),\n    (47,76,),\n    (37,75,),\n    (83,62,),\n    (28,58,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def gcd ( a , b ) :\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    k = 0\n    while ( ( ( a | b ) & 1 ) == 0 ) :\n        a = a >> 1\n        b = b >> 1\n        k = k + 1\n    while ( ( a & 1 ) == 0 ) :\n        a = a >> 1\n    while ( b != 0 ) :\n        while ( ( b & 1 ) == 0 ) :\n            b = b >> 1\n        if ( a > b ) :\n            temp = a\n            a = b\n            b = temp\n        b = ( b - a )\n    return ( a << k )\n"}
Disassembly of <code object gcd at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( a )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_FAST 1 ( b )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 1 ( b )
14 LOAD_CONST 1 ( 0 )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 24

5 20 LOAD_FAST 0 ( a )
22 RETURN_VALUE

6 >> 24 LOAD_CONST 1 ( 0 )
26 STORE_FAST 2 ( k )

7 28 SETUP_LOOP 46 ( to 74 )
>> 30 LOAD_FAST 0 ( a )
32 LOAD_FAST 1 ( b )
34 BINARY_RSHIFT
36 LOAD_CONST 2 ( 1 )
38 BINARY_AND
40 LOAD_CONST 1 ( 0 )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 72

8 46 LOAD_FAST 0 ( a )
48 LOAD_CONST 2 ( 1 )
50 BINARY_RSHIFT
52 STORE_FAST 0 ( a )

9 54 LOAD_FAST 1 ( b )
56 LOAD_CONST 2 ( 1 )
58 BINARY_RSHIFT
60 STORE_FAST 1 ( b )

10 62 LOAD_FAST 2 ( k )
64 LOAD_CONST 2 ( 1 )
66 BINARY_ADD
68 STORE_FAST 2 ( k )
70 JUMP_ABSOLUTE 30
>> 72 POP_BLOCK

11 >> 74 SETUP_LOOP 46 ( to 126 )
>> 76 LOAD_FAST 0 ( a )
78 LOAD_CONST 2 ( 1 )
80 BINARY_AND
82 LOAD_CONST 1 ( 0 )
84 COMPARE_OP 2 ( == )
86 POP_JUMP_IF_FALSE 124

12 88 LOAD_FAST 0 ( a )
90 LOAD_CONST 2 ( 1 )
92 BINARY_RSHIFT
94 STORE_FAST 0 ( a )
96 JUMP_ABSOLUTE 76
>> 98 POP_BLOCK

13 >> 100 SETUP_LOOP 74 ( to 194 )
>> 102 LOAD_FAST 1 ( b )
104 LOAD_CONST 1 ( 0 )
106 COMPARE_OP 3 ( != )
108 POP_JUMP_IF_FALSE 192

14 110 SETUP_LOOP 32 ( to 192 )
>> 112 LOAD_FAST 1 ( b )
114 LOAD_CONST 2 ( 1 )
116 BINARY_AND
118 LOAD_CONST 1 ( 0 )
120 COMPARE_OP 2 ( == )
122 POP_JUMP_IF_FALSE 136

15 124 LOAD_FAST 1 ( b )
126 LOAD_CONST 2 ( 1 )
128 BINARY_RSHIFT
130 STORE_FAST 1 ( b )
132 JUMP_ABSOLUTE 112
>> 134 POP_BLOCK

16 >> 136 LOAD_FAST 0 ( a )
138 LOAD_FAST 1 ( b )
140 COMPARE_OP 4 ( > )
142 POP_JUMP_IF_FALSE 152

17 144 LOAD_FAST 0 ( a )
146 STORE_FAST 0 ( a )

18 148 LOAD_FAST 1 ( b )
150 STORE_FAST 0 ( a )

19 >> 152 LOAD_FAST 1 ( b )
154 LOAD_FAST 0 ( a )
156 BINARY_SUBTRACT
158 STORE_FAST 1 ( b )
160 JUMP_ABSOLUTE 112
>> 162 POP_BLOCK

20 164 LOAD_FAST 1 ( b )
166 LOAD_FAST 0 ( a )
168 BINARY_SUBTRACT
170 STORE_FAST 1 ( b )

21 172 LOAD_FAST 1 ( b )
174 LOAD_FAST 0 ( a )
176 BINARY_SUBTRACT
178 STORE_FAST 1 ( b )
180 JUMP_ABSOLUTE 46
>> 182 POP_BLOCK

22 >> 184 LOAD_FAST 0 ( a )
186 LOAD_FAST 2 ( k )
188 BINARY_SUBTRACT
190 RETURN_VALUE
