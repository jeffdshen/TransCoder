{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( text , s ) :\n    result = \"\"\n    for i in range ( len ( text ) ) :\n        char = text [ i ]\n        if ( char.isupper ( ) ) :\n            result += chr ( ( ord ( char ) + s - 65 ) % 26 + 65 )\n        else :\n            result += chr ( ( ord ( char ) + s - 97 ) % 26 + 97 )\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('LsvbpcviVPwq',15,),\n    ('35225904',2,),\n    ('010010',36,),\n    ('QnYd',44,),\n    ('2571694',11,),\n    ('101101011010',94,),\n    ('jb',22,),\n    ('928874',83,),\n    ('11',93,),\n    ('FbvbkMb',37,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def encrypt ( text , s ) :\n    result = \"\"\n    for i in range ( len ( text ) ) :\n        char = text [ i ]\n        if ( char.isupper ( ) ) :\n            result += chr ( ( ord ( char ) + s - 65 ) % 26 + 65 )\n        else :\n            result += chr ( ( ord ( char ) + s - 97 ) % 26 + 97 )\n    return result\n"}
Disassembly of <code object encrypt at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( '' )
2 STORE_FAST 2 ( result )

3 4 SETUP_LOOP 104 ( to 110 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_GLOBAL 1 ( len )
10 LOAD_FAST 0 ( text )
12 CALL_FUNCTION 1
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 80 ( to 108 )
20 STORE_FAST 3 ( i )

4 22 LOAD_FAST 0 ( text )
24 LOAD_FAST 3 ( i )
26 BINARY_SUBSCR
28 STORE_FAST 4 ( char )

5 30 LOAD_FAST 4 ( char )
32 LOAD_METHOD 2 ( isupper )
34 CALL_METHOD 0
36 POP_JUMP_IF_FALSE 72

6 38 LOAD_FAST 2 ( result )
40 LOAD_GLOBAL 3 ( chr )
42 LOAD_GLOBAL 4 ( ord )
44 LOAD_FAST 4 ( char )
46 CALL_FUNCTION 1
48 LOAD_FAST 1 ( s )
50 BINARY_ADD
52 LOAD_CONST 2 ( 65 )
54 BINARY_SUBTRACT
56 LOAD_CONST 3 ( 65 )
58 BINARY_MODULO
60 LOAD_CONST 4 ( 65 )
62 BINARY_ADD
64 CALL_FUNCTION 1
66 INPLACE_ADD
68 STORE_FAST 2 ( result )
70 JUMP_ABSOLUTE 18

8 >> 72 LOAD_FAST 2 ( result )
74 LOAD_GLOBAL 3 ( chr )
76 LOAD_GLOBAL 4 ( ord )
78 LOAD_FAST 4 ( char )
80 CALL_FUNCTION 1
82 LOAD_FAST 1 ( s )
84 BINARY_ADD
86 LOAD_CONST 5 ( 97 )
88 BINARY_SUBTRACT
90 LOAD_CONST 6 ( 97 )
92 BINARY_MODULO
94 CALL_FUNCTION 1
96 INPLACE_ADD
98 STORE_FAST 2 ( result )
100 JUMP_ABSOLUTE 18
>> 102 POP_BLOCK

9 >> 104 LOAD_FAST 2 ( result )
106 RETURN_VALUE
