{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nfrom queue import Queue\n\ndef f_gold ( pages , n , capacity ) :\n    s = set ( )\n    indexes = Queue ( )\n    page_faults = 0\n    for i in range ( n ) :\n        if ( len ( s ) < capacity ) :\n            if ( pages [ i ] not in s ) :\n                s.add ( pages [ i ] )\n                page_faults += 1\n                indexes.put ( pages [ i ] )\n        else :\n            if ( pages [ i ] not in s ) :\n                val = indexes.queue [ 0 ]\n                indexes.get ( )\n                s.remove ( val )\n                s.add ( pages [ i ] )\n                indexes.put ( pages [ i ] )\n                page_faults += 1\n    return page_faults\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 4, 6, 7, 8, 11, 13, 18, 26, 35, 36, 37, 45, 46, 46, 47, 48, 49, 51, 52, 53, 56, 61, 74, 75, 77, 80, 83, 85, 86, 87, 90, 93, 95, 97, 98, 99, 99],36,37,),\n    ([78, -48, 50, -20, -6, 58, -8, 66, 72, 68, 4, 80, 58, -26, -82, -56, 92, 76, 20, 82, -46, 86, 38, 60, -62, -48, 76, 8, -66, -4, -98, -96, -52, 92],33,23,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,13,),\n    ([98, 78, 94, 42, 62, 83, 7, 62, 60, 94, 16, 28, 50, 15, 18, 71, 86, 47, 62, 89],15,11,),\n    ([-82, -70, -68, -56, -50, -44, 4, 18, 28, 30, 30, 42, 66, 78, 80],9,11,),\n    ([1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],25,25,),\n    ([4, 5, 13, 15, 18, 28, 32, 40, 46, 46, 55, 57, 61, 63, 65, 68, 77, 79, 79, 96],17,18,),\n    ([-2, 82, 2, -74, -6, -24, 54, -74, -98, 8, -94, -60, -42, -38, 36, -38, -58, -70, -28, -34, 70, -6, -2, -76, -40, -4, 0, -4, 76, 48, -34, -26, -48, -58, -88, -44, 20, -22, 78],31,24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],26,24,),\n    ([4, 90, 28, 71, 69, 45, 92, 63, 72, 76, 47, 85, 36, 59, 88, 46, 28, 19, 50, 31, 63, 13],15,12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def pageFaults ( pages , n , capacity ) :\n    s = set ( )\n    indexes = Queue ( )\n    page_faults = 0\n    for i in range ( n ) :\n        if ( len ( s ) < capacity ) :\n            if ( pages [ i ] not in s ) :\n                s.add ( pages [ i ] )\n                page_faults += 1\n                indexes.put ( pages [ i ] )\n        else :\n            if ( pages [ i ] not in s ) :\n                val = indexes.queue [ 0 ]\n                indexes.get ( )\n                s.remove ( val )\n                s.add ( pages [ i ] )\n                indexes.put ( pages [ i ] )\n                page_faults += 1\n    return page_faults\n"}
Disassembly of <code object pageFaults at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( set )
2 CALL_FUNCTION 0
4 STORE_FAST 3 ( s )

3 6 LOAD_GLOBAL 1 ( Queue )
8 CALL_FUNCTION 0
10 STORE_FAST 4 ( indexes )

4 12 LOAD_CONST 1 ( 0 )
14 STORE_FAST 5 ( page_faults )

5 16 SETUP_LOOP 106 ( to 126 )
18 LOAD_GLOBAL 2 ( range )
20 LOAD_FAST 1 ( n )
22 CALL_FUNCTION 1
24 GET_ITER
>> 26 FOR_ITER 82 ( to 124 )
28 STORE_FAST 6 ( i )

6 30 LOAD_GLOBAL 3 ( len )
32 LOAD_FAST 3 ( s )
34 CALL_FUNCTION 1
36 LOAD_FAST 2 ( capacity )
38 COMPARE_OP 0 ( < )
40 POP_JUMP_IF_FALSE 84

7 42 LOAD_FAST 0 ( pages )
44 LOAD_FAST 6 ( i )
46 BINARY_SUBSCR
48 LOAD_FAST 3 ( s )
50 COMPARE_OP 7 ( not in )
52 POP_JUMP_IF_FALSE 84

8 54 LOAD_FAST 3 ( s )
56 LOAD_METHOD 4 ( add )
58 LOAD_FAST 0 ( pages )
60 LOAD_FAST 6 ( i )
62 BINARY_SUBSCR
64 CALL_METHOD 1
66 POP_TOP

9 68 LOAD_FAST 5 ( page_faults )
70 LOAD_CONST 2 ( 1 )
72 INPLACE_ADD
74 STORE_FAST 5 ( page_faults )

10 76 LOAD_FAST 4 ( indexes )
78 LOAD_METHOD 5 ( put )
80 LOAD_FAST 0 ( pages )
82 LOAD_FAST 6 ( i )
84 BINARY_SUBSCR
86 CALL_METHOD 1
88 POP_TOP
90 JUMP_ABSOLUTE 26

12 >> 92 LOAD_FAST 0 ( pages )
94 LOAD_FAST 6 ( i )
96 BINARY_SUBSCR
98 LOAD_FAST 3 ( s )
100 COMPARE_OP 7 ( not in )
102 POP_JUMP_IF_FALSE 26

13 104 LOAD_FAST 4 ( indexes )
106 LOAD_ATTR 6 ( queue )
108 LOAD_CONST 1 ( 0 )
110 BINARY_SUBSCR
112 STORE_FAST 7 ( val )

14 114 LOAD_FAST 4 ( indexes )
116 LOAD_METHOD 7 ( get )
118 CALL_METHOD 0
120 POP_TOP

15 122 LOAD_FAST 3 ( s )
124 LOAD_METHOD 4 ( remove )
126 LOAD_FAST 7 ( val )
128 CALL_METHOD 1
130 POP_TOP

16 132 LOAD_FAST 3 ( s )
134 LOAD_METHOD 4 ( add )
136 LOAD_FAST 0 ( pages )
138 LOAD_FAST 6 ( i )
140 BINARY_SUBSCR
142 CALL_METHOD 1
144 POP_TOP

17 146 LOAD_FAST 4 ( indexes )
148 LOAD_METHOD 5 ( put )
150 LOAD_FAST 0 ( pages )
152 LOAD_FAST 6 ( i )
154 BINARY_SUBSCR
156 CALL_METHOD 1
158 POP_TOP

18 160 LOAD_FAST 4 ( indexes )
162 LOAD_CONST 2 ( 1 )
164 INPLACE_ADD
166 STORE_FAST 5 ( page_faults )
168 JUMP_ABSOLUTE 26
>> 170 POP_BLOCK

19 >> 172 LOAD_FAST 5 ( page_faults )
174 RETURN_VALUE
