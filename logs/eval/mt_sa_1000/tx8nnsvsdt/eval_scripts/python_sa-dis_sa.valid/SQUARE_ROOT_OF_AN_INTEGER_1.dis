{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x ) :\n    if ( x == 0 or x == 1 ) :\n        return x\n    start = 1\n    end = x\n    while ( start <= end ) :\n        mid = ( start + end ) // 2\n        if ( mid * mid == x ) :\n            return mid\n        if ( mid * mid < x ) :\n            start = mid + 1\n            ans = mid\n        else :\n            end = mid - 1\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (40,),\n    (10,),\n    (46,),\n    (54,),\n    (1,),\n    (67,),\n    (64,),\n    (10,),\n    (75,),\n    (11,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def floorSqrt ( x ) :\n    if ( x == 0 or x == 1 ) :\n        return x\n    start = 1\n    end = x\n    while ( start <= end ) :\n        mid = ( start + end ) // 2\n        if ( mid * mid == x ) :\n            return mid\n        if ( mid * mid < x ) :\n            start = mid + 1\n            ans = mid\n        else :\n            end = mid - 1\n    return ans\n"}
Disassembly of <code object floorSqrt at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( x )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_TRUE 16
8 LOAD_FAST 0 ( x )
10 LOAD_CONST 2 ( 1 )
12 COMPARE_OP 2 ( == )
14 POP_JUMP_IF_FALSE 20

3 >> 16 LOAD_FAST 0 ( x )
18 RETURN_VALUE

4 >> 20 LOAD_CONST 2 ( 1 )
22 STORE_FAST 1 ( start )

5 24 LOAD_FAST 0 ( x )
26 STORE_FAST 2 ( end )

6 28 SETUP_LOOP 68 ( to 94 )
>> 30 LOAD_FAST 1 ( start )
32 LOAD_FAST 2 ( end )
34 COMPARE_OP 1 ( <= )
36 POP_JUMP_IF_FALSE 92

7 38 LOAD_FAST 1 ( start )
40 LOAD_FAST 2 ( end )
42 BINARY_ADD
44 LOAD_CONST 3 ( 2 )
46 BINARY_FLOOR_DIVIDE
48 STORE_FAST 3 ( mid )

8 50 LOAD_FAST 3 ( mid )
52 LOAD_FAST 3 ( mid )
54 BINARY_MULTIPLY
56 LOAD_FAST 0 ( x )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 66

9 62 LOAD_FAST 3 ( mid )
64 RETURN_VALUE

10 >> 66 LOAD_FAST 3 ( mid )
68 LOAD_FAST 3 ( mid )
70 BINARY_MULTIPLY
72 LOAD_FAST 0 ( x )
74 COMPARE_OP 0 ( < )
76 POP_JUMP_IF_FALSE 82

11 78 LOAD_FAST 3 ( mid )
80 LOAD_CONST 2 ( 1 )
82 BINARY_ADD
84 STORE_FAST 1 ( start )

12 86 LOAD_FAST 3 ( mid )
88 STORE_FAST 4 ( ans )
90 JUMP_ABSOLUTE 30

14 >> 92 LOAD_FAST 3 ( mid )
94 LOAD_CONST 2 ( 1 )
96 BINARY_SUBTRACT
98 STORE_FAST 2 ( end )
>> 100 JUMP_ABSOLUTE 30
>> 102 POP_BLOCK

15 >> 104 LOAD_FAST 4 ( ans )
106 RETURN_VALUE
