{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    n = len ( s )\n    lps = [ 0 ] * n\n    l = 0\n    i = 1\n    while ( i < n ) :\n        if ( s [ i ] == s [ l ] ) :\n            l = l + 1\n            lps [ i ] = l\n            i = i + 1\n        else :\n            if ( l != 0 ) :\n                l = lps [ l - 1 ]\n            else :\n                lps [ i ] = 0\n                i = i + 1\n    res = lps [ n - 1 ]\n    if ( res > n / 2 ) :\n        return n // 2\n    else :\n        return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('aabcdaabc',),\n    ('1372494598',),\n    ('110000100001',),\n    ('abcab',),\n    ('488938',),\n    ('011010101011',),\n    ('aaaa',),\n    ('3356203205',),\n    ('1010',),\n    ('kkXiiTZkGeh',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def longestPrefixSuffix ( s ) :\n    n = len ( s )\n    lps = [ 0 ] * n\n    l = 0\n    i = 1\n    while ( i < n ) :\n        if ( s [ i ] == s [ l ] ) :\n            l = l + 1\n            lps [ i ] = l\n            i = i + 1\n        else :\n            if ( l != 0 ) :\n                l = lps [ l - 1 ]\n            else :\n                lps [ i ] = 0\n                i = i + 1\n    res = lps [ n - 1 ]\n    if ( res > n / 2 ) :\n        return n // 2\n    else :\n        return res\n"}
Disassembly of <code object longestPrefixSufCO_MEMORY 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( n )

3 8 LOAD_CONST 1 ( 0 )
10 BUILD_LIST 1
12 LOAD_FAST 1 ( n )
14 BINARY_MULTIPLY
16 STORE_FAST 2 ( lps )

4 18 LOAD_CONST 1 ( 0 )
20 STORE_FAST 3 ( l )

5 22 LOAD_CONST 2 ( 1 )
24 STORE_FAST 4 ( i )

6 26 SETUP_LOOP 76 ( to 96 )
>> 28 LOAD_FAST 4 ( i )
30 LOAD_FAST 1 ( n )
32 COMPARE_OP 0 ( < )
34 POP_JUMP_IF_FALSE 94

7 36 LOAD_FAST 0 ( s )
38 LOAD_FAST 4 ( i )
40 BINARY_SUBSCR
42 LOAD_FAST 0 ( s )
44 LOAD_FAST 3 ( l )
46 BINARY_SUBSCR
48 COMPARE_OP 2 ( == )
50 POP_JUMP_IF_FALSE 66

8 52 LOAD_FAST 3 ( l )
54 LOAD_CONST 2 ( 1 )
56 BINARY_ADD
58 STORE_FAST 3 ( l )

9 60 LOAD_FAST 3 ( l )
62 LOAD_FAST 2 ( lps )
64 LOAD_FAST 4 ( i )
66 STORE_SUBSCR

10 68 LOAD_FAST 4 ( i )
70 LOAD_CONST 2 ( 1 )
72 BINARY_ADD
74 STORE_FAST 4 ( i )
76 JUMP_ABSOLUTE 28

12 >> 78 LOAD_FAST 3 ( l )
80 LOAD_CONST 1 ( 0 )
82 COMPARE_OP 3 ( != )
84 POP_JUMP_IF_FALSE 102

13 86 LOAD_FAST 2 ( lps )
88 LOAD_FAST 3 ( l )
90 LOAD_CONST 2 ( 1 )
92 BINARY_SUBTRACT
94 BINARY_SUBSCR
96 STORE_FAST 3 ( l )
98 JUMP_FORWARD 8 ( to 110 )

15 >> 100 LOAD_CONST 1 ( 0 )
102 LOAD_FAST 2 ( lps )
104 LOAD_FAST 4 ( i )
106 STORE_SUBSCR

16 108 LOAD_FAST 4 ( i )
110 LOAD_CONST 2 ( 1 )
112 BINARY_ADD
114 STORE_FAST 4 ( i )
116 JUMP_ABSOLUTE 28
>> 118 POP_BLOCK

17 >> 120 LOAD_FAST 2 ( lps )
122 LOAD_FAST 1 ( n )
124 LOAD_CONST 2 ( 1 )
126 BINARY_SUBTRACT
128 BINARY_SUBSCR
130 STORE_FAST 5 ( res )

18 132 LOAD_FAST 5 ( res )
134 LOAD_FAST 1 ( n )
136 LOAD_CONST 3 ( 2 )
138 BINARY_TRUE_DIVIDE
140 COMPARE_OP 4 ( > )
142 POP_JUMP_IF_FALSE 148

19 144 LOAD_FAST 1 ( n )
146 LOAD_CONST 3 ( 2 )
148 BINARY_FLOOR_DIVIDE
150 RETURN_VALUE

21 >> 152 LOAD_FAST 5 ( res )
154 RETURN_VALUE
156 LOAD_CONST 0 ( None )
158 RETURN_VALUE
