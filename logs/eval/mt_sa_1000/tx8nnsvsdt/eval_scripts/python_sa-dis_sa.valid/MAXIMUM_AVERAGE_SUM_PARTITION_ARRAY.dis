{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( A , K ) :\n    n = len ( A ) ;\n    pre_sum = [ 0 ] * ( n + 1 ) ;\n    pre_sum [ 0 ] = 0 ;\n    for i in range ( n ) :\n        pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;\n    dp = [ 0 ] * n ;\n    sum = 0 ;\n    for i in range ( n ) :\n        dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i ) ;\n    for k in range ( K - 1 ) :\n        for i in range ( n ) :\n            for j in range ( i + 1 , n ) :\n                dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] ) ;\n    return int ( dp [ 0 ] ) ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 11, 14, 27, 32, 37, 39, 49, 52, 53, 57, 62, 67, 67, 68, 69, 76, 77, 78, 81, 85, 85, 87, 91, 91, 91, 99, 99, 99],24,),\n    ([80, 12, 32, 44, 24, 82, -40, 42, 26, 36, 58, 52, -34, 44, 12, -18, -72, 52, 2, -8, 22, -18, 98, -60, 62, 92, -46, 20, 20, -46, 52, 94, 0, -28, -22, 80, 26, -92, -50, 48, -80],26,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],15,),\n    ([32, 16, 67, 53, 99, 56, 80, 92, 84, 21, 36, 46, 94, 31, 63, 67, 59, 88, 41, 17, 74, 47, 95, 12, 27, 99, 32, 4, 82, 31, 65, 40, 93, 72, 23, 33, 93, 9, 62, 47],36,),\n    ([-92, -86, -80, -78, -72, -70, -70, -68, -66, -62, -60, -54, -54, -52, -52, -40, -36, -32, -28, -26, -22, -22, -20, -16, -16, -8, 0, 6, 8, 10, 14, 18, 20, 42, 46, 52, 60, 66, 68, 70, 74, 86, 88, 88, 92, 94, 98],36,),\n    ([1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0],16,),\n    ([1, 1, 3, 3, 6, 7, 10, 11, 12, 13, 16, 16, 22, 23, 24, 27, 28, 30, 30, 30, 31, 33, 35, 35, 39, 40, 41, 52, 52, 58, 59, 60, 61, 61, 66, 66, 71, 73, 74, 75, 75, 76, 80, 83, 85, 95, 96, 97, 97],34,),\n    ([28, -52, 48, 96, 54, 94, 60, 18],7,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],31,),\n    ([26, 80, 12, 87, 90, 98, 46, 91, 38, 46, 20, 64, 53, 4, 60, 87, 44, 88, 22, 30],19,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def largestSumOfAverages ( A , K ) :\n    n = len ( A ) ;\n    pre_sum = [ 0 ] * ( n + 1 ) ;\n    pre_sum [ 0 ] = 0 ;\n    for i in range ( n ) :\n        pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;\n    dp = [ 0 ] * n ;\n    sum = 0 ;\n    for i in range ( n ) :\n        dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i ) ;\n    for k in range ( K - 1 ) :\n        for i in range ( n ) :\n            for j in range ( i + 1 , n ) :\n                dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] ) ;\n    return int ( dp [ 0 ] ) ;\n"}
Disassembly of <code object largestSumOfAverages at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( A )
4 CALL_FUNCTION 1
6 STORE_FAST 2 ( n )

3 8 LOAD_CONST 1 ( 0 )
10 BUILD_LIST 1
12 LOAD_FAST 2 ( n )
14 LOAD_CONST 2 ( 1 )
16 BINARY_ADD
18 BINARY_MULTIPLY
20 STORE_FAST 3 ( pre_sum )

4 22 LOAD_CONST 1 ( 0 )
24 LOAD_FAST 3 ( pre_sum )
26 LOAD_CONST 1 ( 0 )
28 STORE_SUBSCR

5 30 SETUP_LOOP 40 ( to 74 )
32 LOAD_GLOBAL 1 ( range )
34 LOAD_FAST 2 ( n )
36 CALL_FUNCTION 1
38 GET_ITER
>> 40 FOR_ITER 28 ( to 72 )
42 STORE_FAST 4 ( i )

6 44 LOAD_FAST 3 ( pre_sum )
46 LOAD_FAST 4 ( i )
48 BINARY_SUBSCR
50 LOAD_FAST 0 ( A )
52 LOAD_FAST 4 ( i )
54 BINARY_SUBSCR
56 BINARY_ADD
58 LOAD_FAST 3 ( pre_sum )
60 LOAD_FAST 4 ( i )
62 LOAD_CONST 2 ( 1 )
64 BINARY_ADD
66 STORE_SUBSCR
68 JUMP_ABSOLUTE 40
70 POP_BLOCK
>> 72 LOAD_CONST 0 ( None )
>> 74 RETURN_VALUE
