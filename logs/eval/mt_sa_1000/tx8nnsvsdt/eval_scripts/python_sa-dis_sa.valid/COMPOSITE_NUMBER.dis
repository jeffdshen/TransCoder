{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    if ( n <= 1 ) :\n        return False\n    if ( n <= 3 ) :\n        return False\n    if ( n % 2 == 0 or n % 3 == 0 ) :\n        return True\n    i = 5\n    while ( i * i <= n ) :\n        if ( n % i == 0 or n % ( i + 2 ) == 0 ) :\n            return True\n        i = i + 6\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (62,),\n    (13,),\n    (29,),\n    (72,),\n    (30,),\n    (20,),\n    (10,),\n    (47,),\n    (91,),\n    (52,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isComposite ( n ) :\n    if ( n <= 1 ) :\n        return False\n    if ( n <= 3 ) :\n        return False\n    if ( n % 2 == 0 or n % 3 == 0 ) :\n        return True\n    i = 5\n    while ( i * i <= n ) :\n        if ( n % i == 0 or n % ( i + 2 ) == 0 ) :\n            return True\n        i = i + 6\n    return False\n"}
Disassembly of <code object isComposite at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 1 ( <= )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( False )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 0 ( n )
14 LOAD_CONST 3 ( 3 )
16 COMPARE_OP 1 ( <= )
18 POP_JUMP_IF_FALSE 24

5 20 LOAD_CONST 2 ( False )
22 RETURN_VALUE

6 >> 24 LOAD_FAST 0 ( n )
26 LOAD_CONST 4 ( 2 )
28 BINARY_MODULO
30 LOAD_CONST 5 ( 0 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_TRUE 48
36 LOAD_FAST 0 ( n )
38 LOAD_CONST 3 ( 3 )
40 BINARY_MODULO
42 LOAD_CONST 5 ( 0 )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 52

7 >> 48 LOAD_CONST 6 ( True )
50 RETURN_VALUE

8 >> 52 LOAD_CONST 7 ( 5 )
54 STORE_FAST 1 ( i )

9 56 SETUP_LOOP 48 ( to 104 )
>> 58 LOAD_FAST 1 ( i )
60 LOAD_FAST 1 ( i )
62 BINARY_MULTIPLY
64 LOAD_FAST 0 ( n )
66 COMPARE_OP 1 ( <= )
68 POP_JUMP_IF_FALSE 102

10 70 LOAD_FAST 0 ( n )
72 LOAD_FAST 1 ( i )
74 BINARY_MODULO
76 LOAD_CONST 5 ( 0 )
78 COMPARE_OP 2 ( == )
80 POP_JUMP_IF_TRUE 92
82 LOAD_FAST 0 ( n )
84 LOAD_FAST 1 ( i )
86 LOAD_CONST 4 ( 2 )
88 BINARY_ADD
90 BINARY_MODULO
92 LOAD_CONST 5 ( 0 )
94 COMPARE_OP 2 ( == )
96 POP_JUMP_IF_FALSE 102

11 98 LOAD_CONST 6 ( True )
100 RETURN_VALUE

12 >> 102 LOAD_FAST 1 ( i )
104 LOAD_CONST 8 ( 6 )
106 BINARY_ADD
108 STORE_FAST 1 ( i )
110 JUMP_ABSOLUTE 58
>> 112 POP_BLOCK

13 >> 114 LOAD_CONST 2 ( False )
116 RETURN_VALUE
