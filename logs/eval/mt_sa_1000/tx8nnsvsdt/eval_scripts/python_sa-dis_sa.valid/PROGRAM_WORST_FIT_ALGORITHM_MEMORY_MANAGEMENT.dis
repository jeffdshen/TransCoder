{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        wstIdx = - 1\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if wstIdx == - 1 :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n        if wstIdx != - 1 :\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 4, 4, 6, 9, 9, 9, 14, 16, 16, 20, 28, 29, 31, 34, 37, 39, 46, 51, 54, 60, 63, 63, 65, 65, 66, 68, 70, 75, 80, 83, 88, 90, 91, 96, 98],33,[2, 4, 6, 9, 10, 13, 14, 16, 20, 21, 33, 34, 35, 36, 43, 44, 49, 51, 51, 52, 55, 58, 59, 60, 65, 66, 66, 74, 78, 79, 83, 88, 88, 91, 94, 95, 97],31,),\n    ([-44, -62, 0, 42, 78, 2, 88, 84, 48, -72, 76, -76, -42, 4, -56, -52, 46, -74, 66, 94, 32, -38, -36, 68, -70, 76, 32, -4, -48, -68, 96, 84, 20, 66, 86, 34, -8, -6, -84, 56, 50, 40, 70, 10, -2, 46, -10, -54],47,[-18, 38, -82, -54, -32, 32, 76, 54, 88, -50, -10, -66, 42, 34, -56, -38, -82, -4, 52, -78, 82, -32, 72, 84, 98, 88, -2, 60, 78, 68, -84, -58, 78, -98, -14, -20, -60, -94, 20, -48, 26, 2, -40, 76, -38, 38, -10, -52],25,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],30,[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],29,),\n    ([50, 57, 42, 88, 13, 71, 49],3,[54, 56, 23, 71, 73, 58, 89],5,),\n    ([-96, -94, -92, -84, -82, -80, -80, -76, -76, -72, -58, -46, -44, -40, -34, -24, -18, -16, -16, -10, -10, 2, 8, 10, 14, 20, 26, 36, 38, 42, 54, 54, 62, 64, 64, 64, 72, 78, 84, 86, 88, 94, 98],34,[-98, -92, -92, -88, -82, -76, -58, -58, -54, -50, -44, -32, -30, -28, -28, -18, -4, -4, 0, 2, 6, 10, 10, 14, 20, 22, 24, 26, 30, 38, 48, 48, 52, 62, 66, 78, 82, 88, 90, 92, 94, 94, 98],40,),\n    ([0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],43,[0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1],42,),\n    ([10, 15, 19, 22, 34, 35, 36, 38, 38, 40, 42, 42, 43, 48, 48, 49, 50, 54, 56, 60, 69, 76, 77, 79, 79, 80, 82, 85, 90, 95, 96, 98, 98, 99],32,[2, 5, 6, 7, 8, 11, 11, 12, 19, 20, 25, 28, 33, 34, 42, 46, 46, 55, 59, 62, 63, 65, 66, 67, 70, 74, 76, 80, 81, 82, 86, 89, 95, 99],19,),\n    ([-52, 56, -48, 38, 84, -20, -32, -38, 8, -36, -66, -64, -66, -56, -74, -30, 58, 22, -2, -50, -90, -4, -2, 44, -60, -22, 74, 38, -50, 30, 94, -32, 94, 44, 90, -82, -42, -24, 46, 10, -34, -8, 98, -14, -42, 84, -8, 54],42,[58, 88, 16, -18, 24, 14, -26, -28, -16, -88, -56, 32, 24, 22, 46, 48, 50, 0, 6, 84, 88, -50, -4, 14, -80, 42, 18, 2, 90, -8, -32, -2, 46, -30, -46, 32, 70, -46, -18, 2, 36, -2, -60, -30, 48, -14, 76, -96],43,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([75],0,[29],0,)\n        ]\n    filled_function_param = [\n    ([2, 3, 4, 4, 6, 9, 9, 9, 14, 16, 16, 20, 28, 29, 31, 34, 37, 39, 46, 51, 54, 60, 63, 63, 65, 65, 66, 68, 70, 75, 80, 83, 88, 90, 91, 96, 98],33,[2, 4, 6, 9, 10, 13, 14, 16, 20, 21, 33, 34, 35, 36, 43, 44, 49, 51, 51, 52, 55, 58, 59, 60, 65, 66, 66, 74, 78, 79, 83, 88, 88, 91, 94, 95, 97],31,),\n    ([-44, -62, 0, 42, 78, 2, 88, 84, 48, -72, 76, -76, -42, 4, -56, -52, 46, -74, 66, 94, 32, -38, -36, 68, -70, 76, 32, -4, -48, -68, 96, 84, 20, 66, 86, 34, -8, -6, -84, 56, 50, 40, 70, 10, -2, 46, -10, -54],47,[-18, 38, -82, -54, -32, 32, 76, 54, 88, -50, -10, -66, 42, 34, -56, -38, -82, -4, 52, -78, 82, -32, 72, 84, 98, 88, -2, 60, 78, 68, -84, -58, 78, -98, -14, -20, -60, -94, 20, -48, 26, 2, -40, 76, -38, 38, -10, -52],25,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],30,[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],29,),\n    ([50, 57, 42, 88, 13, 71, 49],3,[54, 56, 23, 71, 73, 58, 89],5,),\n    ([-96, -94, -92, -84, -82, -80, -80, -76, -76, -72, -58, -46, -44, -40, -34, -24, -18, -16, -16, -10, -10, 2, 8, 10, 14, 20, 26, 36, 38, 42, 54, 54, 62, 64, 64, 64, 72, 78, 84, 86, 88, 94, 98],34,[-98, -92, -92, -88, -82, -76, -58, -58, -54, -50, -44, -32, -30, -28, -28, -18, -4, -4, 0, 2, 6, 10, 10, 14, 20, 22, 24, 26, 30, 38, 48, 48, 52, 62, 66, 78, 82, 88, 90, 92, 94, 94, 98],40,),\n    ([0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],43,[0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1],42,),\n    ([10, 15, 19, 22, 34, 35, 36, 38, 38, 40, 42, 42, 43, 48, 48, 49, 50, 54, 56, 60, 69, 76, 77, 79, 79, 80, 82, 85, 90, 95, 96, 98, 98, 99],32,[2, 5, 6, 7, 8, 11, 11, 12, 19, 20, 25, 28, 33, 34, 42, 46, 46, 55, 59, 62, 63, 65, 66, 67, 70, 74, 76, 80, 81, 82, 86, 89, 95, 99],19,),\n    ([-52, 56, -48, 38, 84, -20, -32, -38, 8, -36, -66, -64, -66, -56, -74, -30, 58, 22, -2, -50, -90, -4, -2, 44, -60, -22, 74, 38, -50, 30, 94, -32, 94, 44, 90, -82, -42, -24, 46, 10, -34, -8, 98, -14, -42, 84, -8, 54],42,[58, 88, 16, -18, 24, 14, -26, -28, -16, -88, -56, 32, 24, 22, 46, 48, 50, 0, 6, 84, 88, -50, -4, 14, -80, 42, 18, 2, 90, -8, -32, -2, 46, -30, -46, 32, 70, -46, -18, 2, 36, -2, -60, -30, 48, -14, 76, -96],43,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([75],0,[29],0,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        wstIdx = - 1\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if wstIdx == - 1 :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n        if wstIdx != - 1 :\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n"}
Disassembly of <code object worstFit at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - 1 )
2 BUILD_LIST 1
4 LOAD_FAST 3 ( n )
6 BINARY_MULTIPLY
8 STORE_FAST 4 ( allocation )

3 10 SETUP_LOOP 120 ( to 134 )
12 LOAD_GLOBAL 0 ( range )
14 LOAD_FAST 3 ( n )
16 CALL_FUNCTION 1
18 GET_ITER
>> 20 FOR_ITER 112 ( to 132 )
22 STORE_FAST 5 ( i )

4 24 LOAD_CONST 1 ( - 1 )
26 STORE_FAST 6 ( wstIdx )

5 28 SETUP_LOOP 80 ( to 118 )
30 LOAD_GLOBAL 0 ( range )
32 LOAD_FAST 1 ( m )
34 CALL_FUNCTION 1
36 GET_ITER
>> 38 FOR_ITER 68 ( to 116 )
40 STORE_FAST 7 ( j )

6 42 LOAD_FAST 0 ( blockSize )
44 LOAD_FAST 7 ( j )
46 BINARY_SUBSCR
48 LOAD_GLOBAL 1 ( processSize )
50 LOAD_FAST 5 ( i )
52 BINARY_SUBSCR
54 COMPARE_OP 5 ( >= )
56 POP_JUMP_IF_FALSE 68

7 58 LOAD_FAST 7 ( j )
60 STORE_FAST 6 ( wstIdx )
62 JUMP_ABSOLUTE 38

8 >> 64 LOAD_FAST 0 ( blockSize )
66 LOAD_FAST 6 ( wstIdx )
68 BINARY_SUBSCR
70 LOAD_FAST 0 ( blockSize )
72 LOAD_FAST 7 ( j )
74 BINARY_SUBSCR
76 COMPARE_OP 0 ( < )
78 POP_JUMP_IF_FALSE 38

9 80 LOAD_FAST 7 ( j )
82 STORE_FAST 6 ( wstIdx )
84 JUMP_ABSOLUTE 38
>> 86 POP_BLOCK

10 >> 88 LOAD_FAST 6 ( wstIdx )
90 LOAD_CONST 1 ( - 1 )
92 COMPARE_OP 3 ( != )
94 POP_JUMP_IF_FALSE 38

11 96 LOAD_FAST 6 ( wstIdx )
98 STORE_FAST 4 ( wlocation )

12 100 LOAD_FAST 0 ( blockSize )
102 LOAD_FAST 2 ( wstIdx )
104 DUP_TOP_TWO
106 BINARY_SUBSCR
108 LOAD_GLOBAL 1 ( processSize )
110 LOAD_FAST 5 ( i )
112 BINARY_SUBSCR
114 INPLACE_SUBTRACT
116 ROT_THREE
118 STORE_SUBSCR
120 JUMP_ABSOLUTE 38
>> 122 POP_BLOCK

13 >> 124 LOAD_GLOBAL 2 ( print )
126 LOAD_CONST 2 ( 'Process No.Process Size Block no.' )
128 CALL_FUNCTION 1
130 POP_TOP

14 132 SETUP_LOOP 34 ( to 156 )
134 LOAD_GLOBAL 0 ( range )
136 LOAD_FAST 3 ( n )
138 CALL_FUNCTION 1
140 GET_ITER
>> 142 FOR_ITER 26 ( to 154 )
144 STORE_FAST 5 ( i )

15 146 LOAD_GLOBAL 2 ( print )
148 LOAD_FAST 5 ( i )
150 LOAD_CONST 3 ( 1 )
152 BINARY_ADD
154 LOAD_CONST 4 ( '         ' )
156 LOAD_GLOBAL 1 ( processSize )
158 LOAD_FAST 5 ( i )
160 BINARY_SUBSCR
162 LOAD_CONST 5 ( '    ' )
164 LOAD_CONST 6 ( ( 'end' , ) )
166 CALL_FUNCTION_KW 3
168 POP_TOP

16 170 LOAD_FAST 4 ( allocation )
172 LOAD_FAST 5 ( i )
174 BINARY_SUBSCR
176 LOAD_CONST 1 ( - 1 )
178 COMPARE_OP 3 ( != )
180 POP_JUMP_IF_FALSE 142

17 182 LOAD_GLOBAL 2 ( print )
184 LOAD_FAST 4 ( allocation )
186 LOAD_FAST 5 ( i )
188 BINARY_SUBSCR
190 LOAD_CONST 3 ( 1 )
192 BINARY_ADD
194 CALL_FUNCTION 1
196 POP_TOP
198 JUMP_ABSOLUTE 142

19 >> 200 LOAD_GLOBAL 2 ( print )
202 LOAD_CONST 7 ( 'Not Allocated' )
204 CALL_FUNCTION 1
206 POP_TOP
>> 208 JUMP_ABSOLUTE 30
>> 210 POP_BLOCK
>> 212 LOAD_CONST 0 ( None )
214 RETURN_VALUE
