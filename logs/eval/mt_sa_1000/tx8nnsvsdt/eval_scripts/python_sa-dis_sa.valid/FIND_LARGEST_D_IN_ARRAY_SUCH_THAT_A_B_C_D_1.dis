{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            mp [ arr [ i ] + arr [ j ] ] = ( i , j )\n    d = - 10 ** 9\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            abs_diff = abs ( arr [ i ] - arr [ j ] )\n            if abs_diff in mp.keys ( ) :\n                p = mp [ abs_diff ]\n                if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1 ] != i and p [ 1 ] != j ) :\n                    d = max ( d , max ( arr [ i ] , arr [ j ] ) )\n    return d\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 1, 5, 7, 10, 35, 35, 45, 49, 50, 57, 58, 60, 64, 69, 83, 83, 87, 88, 89, 93, 94],12,),\n    ([94, 90, 88, 0, -90, -68, 94, -2, -50, -92, 66, 32, 10, 8, -14, -96, 80, -60, 48, -96, 46, 24, 64, 2, -30, 28],15,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],17,),\n    ([83, 72, 91, 22, 96, 38, 71, 18, 58, 39, 7, 8, 65, 67],7,),\n    ([-96, -92, -88, -86, -82, -80, -78, -76, -74, -72, -62, -54, -42, -40, -38, -36, -36, -34, -32, -32, -26, -26, -22, -14, -14, 2, 16, 24, 26, 32, 32, 34, 48, 48, 64, 66, 70, 74, 82, 90],28,),\n    ([1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1],29,),\n    ([2, 2, 4, 10, 11, 13, 15, 20, 32, 33, 33, 42, 46, 46, 50, 54, 55, 55, 56, 57, 58, 63, 68, 79, 87, 94],18,),\n    ([58, 78, 28, 54, -10, 46, -78, -68, -44, 64, 78, 80, -54, -38, -54, 60, 26, 96],13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],28,),\n    ([54, 55, 98, 18, 11, 55, 2, 95, 84, 14, 75, 12, 43, 54, 78, 34, 69, 24, 82, 65, 11, 49, 34, 60, 99, 71, 1, 17, 88, 12, 45, 46, 56, 28, 70, 34, 7, 55, 40, 12, 38, 56, 54, 53, 28],24,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findFourElements ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            mp [ arr [ i ] + arr [ j ] ] = ( i , j )\n    d = - 10 ** 9\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            abs_diff = abs ( arr [ i ] - arr [ j ] )\n            if abs_diff in mp.keys ( ) :\n                p = mp [ abs_diff ]\n                if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1 ] != i and p [ 1 ] != j ) :\n                    d = max ( d , max ( arr [ i ] , arr [ j ] ) )\n    return d\n"}
Disassembly of <code object findFourElements at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( dict )
2 CALL_FUNCTION 0
4 STORE_FAST 2 ( mp )

3 6 SETUP_LOOP 68 ( to 80 )
8 LOAD_GLOBAL 1 ( range )
10 LOAD_FAST 1 ( n )
12 LOAD_CONST 1 ( 1 )
14 BINARY_SUBTRACT
16 CALL_FUNCTION 1
18 GET_ITER
>> 20 FOR_ITER 52 ( to 78 )
22 STORE_FAST 3 ( i )

4 24 SETUP_LOOP 44 ( to 76 )
26 LOAD_GLOBAL 1 ( range )
28 LOAD_FAST 3 ( i )
30 LOAD_CONST 1 ( 1 )
32 BINARY_ADD
34 LOAD_FAST 1 ( n )
36 CALL_FUNCTION 2
38 GET_ITER
>> 40 FOR_ITER 24 ( to 74 )
42 STORE_FAST 4 ( j )

5 44 LOAD_FAST 3 ( i )
46 LOAD_FAST 4 ( j )
48 BUILD_TUPLE 2
50 LOAD_FAST 2 ( mp )
52 LOAD_FAST 0 ( arr )
54 LOAD_FAST 3 ( i )
56 BINARY_SUBSCR
58 LOAD_FAST 0 ( arr )
60 LOAD_FAST 4 ( j )
62 BINARY_SUBSCR
64 BINARY_ADD
66 STORE_SUBSCR
68 JUMP_ABSOLUTE 40
>> 70 POP_BLOCK
>> 72 JUMP_ABSOLUTE 20
>> 74 POP_BLOCK

6 >> 76 LOAD_CONST 2 ( - 10 )
78 LOAD_CONST 3 ( 9 )
80 BINARY_POWER
82 STORE_FAST 5 ( d )

7 84 SETUP_LOOP 158 ( to 252 )
86 LOAD_GLOBAL 1 ( range )
88 LOAD_FAST 1 ( n )
90 LOAD_CONST 1 ( 1 )
92 BINARY_ADD
94 LOAD_FAST 1 ( n )
96 CALL_FUNCTION 2
98 GET_ITER
>> 100 FOR_ITER 144 ( to 254 )
102 STORE_FAST 3 ( i )

8 104 SETUP_LOOP 112 ( to 252 )
106 LOAD_GLOBAL 1 ( range )
108 LOAD_FAST 3 ( i )
110 LOAD_CONST 1 ( 1 )
112 BINARY_ADD
114 LOAD_FAST 1 ( n )
116 CALL_FUNCTION 2
118 GET_ITER
>> 120 FOR_ITER 104 ( to 250 )
122 STORE_FAST 4 ( j )

9 124 LOAD_GLOBAL 2 ( abs )
126 LOAD_FAST 0 ( arr )
128 LOAD_FAST 3 ( i )
130 BINARY_SUBSCR
132 LOAD_FAST 0 ( arr )
134 LOAD_FAST 4 ( j )
136 BINARY_SUBSCR
138 BINARY_SUBTRACT
140 CALL_FUNCTION 1
142 STORE_FAST 6 ( abs_)

10 144 LOAD_FAST 6 ( abs_diff )
146 LOAD_FAST 2 ( mp )
148 LOAD_METHOD 3 ( keys )
150 CALL_METHOD 0
152 COMPARE_OP 6 ( in )
154 POP_JUMP_IF_FALSE 120

11 156 LOAD_FAST 2 ( mp )
158 LOAD_FAST 6 ( abs_)
160 BINARY_SUBSCR
162 STORE_FAST 7 ( p )

12 164 LOAD_FAST 7 ( p )
166 LOAD_CONST 4 ( 0 )
168 BINARY_SUBSCR
170 LOAD_FAST 3 ( i )
172 COMPARE_OP 3 ( != )
174 POP_JUMP_IF_FALSE 120
176 LOAD_FAST 7 ( p )
178 LOAD_CONST 4 ( 0 )
180 BINARY_SUBSCR
182 LOAD_FAST 4 ( j )
184 COMPARE_OP 3 ( != )
186 POP_JUMP_IF_FALSE 120
188 LOAD_FAST 7 ( p )
190 LOAD_CONST 1 ( 1 )
192 BINARY_SUBSCR
194 LOAD_FAST 3 ( i )
196 COMPARE_OP 3 ( != )
198 POP_JUMP_IF_FALSE 120
200 LOAD_FAST 7 ( p )
202 LOAD_CONST 1 ( 1 )
204 BINARY_SUBSCR
206 LOAD_FAST 4 ( j )
208 COMPARE_OP 3 ( != )
210 POP_JUMP_IF_FALSE 120

13 212 LOAD_GLOBAL 4 ( max )
214 LOAD_FAST 5 ( d )
216 LOAD_GLOBAL 4 ( max )
218 LOAD_FAST 0 ( arr )
220 LOAD_FAST 3 ( i )
222 BINARY_SUBSCR
224 LOAD_FAST 0 ( arr )
226 LOAD_FAST 4 ( j )
228 BINARY_SUBSCR
230 CALL_FUNCTION 2
232 STORE_FAST 5 ( d )

14 >> 234 LOAD_FAST 5 ( d )
236 RETURN_VALUE
