{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    if ( n < 4 ) :\n        return - 1\n    rem = n % 4\n    if ( rem == 0 ) :\n        return n // 4\n    if ( rem == 1 ) :\n        if ( n < 9 ) :\n            return - 1\n        return ( n - 9 ) // 4 + 1\n    if ( rem == 2 ) :\n        return ( n - 6 ) // 4 + 1\n    if ( rem == 3 ) :\n        if ( n < 15 ) :\n            return - 1\n        return ( n - 15 ) // 4 + 2\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (55,),\n    (35,),\n    (24,),\n    (75,),\n    (5,),\n    (7,),\n    (50,),\n    (28,),\n    (67,),\n    (59,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def count ( n ) :\n    if ( n < 4 ) :\n        return - 1\n    rem = n % 4\n    if ( rem == 0 ) :\n        return n // 4\n    if ( rem == 1 ) :\n        if ( n < 9 ) :\n            return - 1\n        return ( n - 9 ) // 4 + 1\n    if ( rem == 2 ) :\n        return ( n - 6 ) // 4 + 1\n    if ( rem == 3 ) :\n        if ( n < 15 ) :\n            return - 1\n        return ( n - 15 ) // 4 + 2\n"}
Disassembly of <code object count at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 4 )
4 COMPARE_OP 0 ( < )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( - 1 )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 0 ( n )
14 LOAD_CONST 1 ( 4 )
16 BINARY_MODULO
18 STORE_FAST 1 ( rem )

5 20 LOAD_FAST 1 ( rem )
22 LOAD_CONST 3 ( 0 )
24 COMPARE_OP 2 ( == )
26 POP_JUMP_IF_FALSE 36

6 28 LOAD_FAST 0 ( n )
30 LOAD_CONST 1 ( 4 )
32 BINARY_FLOOR_DIVIDE
34 RETURN_VALUE

7 >> 36 LOAD_FAST 1 ( rem )
38 LOAD_CONST 4 ( 1 )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 56

8 44 LOAD_FAST 0 ( n )
46 LOAD_CONST 5 ( 9 )
48 COMPARE_OP 0 ( < )
50 POP_JUMP_IF_FALSE 56

9 52 LOAD_CONST 2 ( - 1 )
54 RETURN_VALUE

10 >> 56 LOAD_FAST 0 ( n )
58 LOAD_CONST 5 ( 9 )
60 BINARY_SUBTRACT
62 LOAD_CONST 1 ( 4 )
64 BINARY_FLOOR_DIVIDE
66 LOAD_CONST 4 ( 1 )
68 BINARY_ADD
70 RETURN_VALUE

11 >> 72 LOAD_FAST 1 ( rem )
74 LOAD_CONST 6 ( 2 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 92

12 80 LOAD_FAST 0 ( n )
82 LOAD_CONST 7 ( 6 )
84 BINARY_SUBTRACT
86 LOAD_CONST 1 ( 4 )
88 BINARY_FLOOR_DIVIDE
90 LOAD_CONST 4 ( 1 )
92 BINARY_ADD
94 RETURN_VALUE

13 >> 96 LOAD_FAST 1 ( rem )
98 LOAD_CONST 8 ( 3 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 116

14 104 LOAD_FAST 0 ( n )
106 LOAD_CONST 9 ( 15 )
108 COMPARE_OP 0 ( < )
110 POP_JUMP_IF_FALSE 116

15 112 LOAD_FAST 0 ( n )
114 LOAD_CONST 9 ( 15 )
116 COMPARE_OP 0 ( < )
118 POP_JUMP_IF_FALSE 124

16 120 LOAD_CONST 2 ( - 1 )
122 RETURN_VALUE

17 >> 124 LOAD_FAST 0 ( n )
126 LOAD_CONST 9 ( 15 )
128 BINARY_SUBTRACT
130 LOAD_CONST 1 ( 4 )
132 BINARY_FLOOR_DIVIDE
134 LOAD_CONST 6 ( 2 )
136 BINARY_ADD
138 RETURN_VALUE
>> 140 LOAD_CONST 0 ( None )
142 RETURN_VALUE
