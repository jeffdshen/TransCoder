{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( n ) :\n    maxPrime = - 1\n    while n % 2 == 0 :\n        maxPrime = 2\n        n >>= 1\n    for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :\n        while n % i == 0 :\n            maxPrime = i\n            n = n / i\n    if n > 2 :\n        maxPrime = n\n    return int ( maxPrime )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (98,),\n    (8,),\n    (78,),\n    (65,),\n    (55,),\n    (10,),\n    (10,),\n    (37,),\n    (39,),\n    (15,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxPrimeFactors ( n ) :\n    maxPrime = - 1\n    while n % 2 == 0 :\n        maxPrime = 2\n        n >>= 1\n    for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :\n        while n % i == 0 :\n            maxPrime = i\n            n = n / i\n    if n > 2 :\n        maxPrime = n\n    return int ( maxPrime )\n"}
Disassembly of <code object maxPrimeFactors at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - 1 )
2 STORE_FAST 1 ( maxPrime )

3 4 SETUP_LOOP 26 ( to 32 )
>> 6 LOAD_FAST 0 ( n )
8 LOAD_CONST 2 ( 2 )
10 BINARY_MODULO
12 LOAD_CONST 3 ( 0 )
14 COMPARE_OP 2 ( == )
16 POP_JUMP_IF_FALSE 30

4 18 LOAD_CONST 2 ( 2 )
20 STORE_FAST 1 ( maxPrime )

5 22 LOAD_FAST 0 ( n )
24 LOAD_CONST 4 ( 1 )
26 INPLACE_RSHIFT
28 STORE_FAST 0 ( n )

6 >> 30 SETUP_LOOP 48 ( to 84 )
>> 32 LOAD_GLOBAL 0 ( range )
34 LOAD_CONST 5 ( 3 )
36 LOAD_GLOBAL 1 ( int )
38 LOAD_GLOBAL 2 ( math )
40 LOAD_METHOD 3 ( sqrt )
42 LOAD_FAST 0 ( n )
44 CALL_METHOD 1
46 CALL_FUNCTION 1
48 LOAD_CONST 4 ( 1 )
50 BINARY_ADD
52 LOAD_CONST 2 ( 2 )
54 CALL_FUNCTION 3
56 GET_ITER
>> 58 FOR_ITER 28 ( to 82 )
60 STORE_FAST 2 ( i )

7 62 SETUP_LOOP 24 ( to 80 )
>> 64 LOAD_FAST 0 ( n )
66 LOAD_FAST 2 ( i )
68 BINARY_MODULO
70 LOAD_CONST 3 ( 0 )
72 COMPARE_OP 2 ( == )
74 POP_JUMP_IF_FALSE 78

8 76 LOAD_FAST 2 ( i )
78 STORE_FAST 1 ( maxPrime )

9 80 LOAD_FAST 0 ( n )
82 LOAD_FAST 2 ( i )
84 BINARY_TRUE_DIVIDE
86 STORE_FAST 0 ( n )
88 JUMP_ABSOLUTE 64
>> 90 POP_BLOCK
>> 92 JUMP_ABSOLUTE 6
>> 94 POP_BLOCK

10 >> 96 LOAD_FAST 0 ( n )
98 LOAD_CONST 2 ( 2 )
100 COMPARE_OP 4 ( > )
102 POP_JUMP_IF_FALSE 108

11 104 LOAD_FAST 0 ( n )
106 STORE_FAST 1 ( maxPrime )

12 >> 108 LOAD_GLOBAL 1 ( int )
110 LOAD_FAST 1 ( maxPrime )
112 CALL_FUNCTION 1
114 RETURN_VALUE
