{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s , c1 , c2 ) :\n    l = len ( s )\n    for i in range ( l ) :\n        if ( s [ i ] == c1 ) :\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n    return s\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('IZTSMw j','W','k',),\n    ('7288334','6','9',),\n    ('010110000','1','1',),\n    ('b gJX','t','P',),\n    ('734','4','4',),\n    ('1','1','1',),\n    ('xCaUKdhA','X','S',),\n    ('4370992644981','5','6',),\n    ('01010','0','1',),\n    ('ZNIFGshaWA','Q','x',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    for i in range ( l ) :\n        if ( s [ i ] == c1 ) :\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n    return s\n"}
Disassembly of <code object replace at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 3 ( l )

3 8 SETUP_LOOP 92 ( to 108 )
10 LOAD_GLOBAL 1 ( range )
12 LOAD_FAST 3 ( l )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 76 ( to 106 )
20 STORE_FAST 4 ( i )

4 22 LOAD_FAST 0 ( s )
24 LOAD_FAST 4 ( i )
26 BINARY_SUBSCR
28 LOAD_FAST 1 ( c1 )
30 COMPARE_OP 2 ( == )
32 POP_JUMP_IF_FALSE 66

5 34 LOAD_FAST 0 ( s )
36 LOAD_CONST 1 ( 0 )
38 LOAD_FAST 4 ( i )
40 BUILD_SLICE 2
42 BINARY_SUBSCR
44 LOAD_FAST 2 ( c2 )
46 BINARY_ADD
48 LOAD_FAST 0 ( s )
50 LOAD_FAST 4 ( i )
52 LOAD_CONST 2 ( 1 )
54 BINARY_ADD
56 LOAD_CONST 0 ( None )
58 BUILD_SLICE 2
60 BINARY_SUBSCR
62 BINARY_ADD
64 STORE_FAST 0 ( s )
64 JUMP_ABSOLUTE 18

6 >> 66 LOAD_FAST 0 ( s )
68 LOAD_FAST 4 ( i )
70 BINARY_SUBSCR
72 LOAD_FAST 2 ( c2 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 18

7 78 LOAD_FAST 0 ( s )
80 LOAD_CONST 1 ( 0 )
82 LOAD_FAST 4 ( i )
84 BUILD_SLICE 2
86 BINARY_SUBSCR
88 LOAD_FAST 1 ( c1 )
90 BINARY_ADD
92 LOAD_FAST 0 ( s )
94 LOAD_FAST 4 ( i )
96 LOAD_CONST 2 ( 1 )
98 BINARY_ADD
100 LOAD_CONST 0 ( None )
102 BUILD_SLICE 2
104 BINARY_SUBSCR
106 BINARY_ADD
108 STORE_FAST 0 ( s )
110 JUMP_ABSOLUTE 18
>> 112 POP_BLOCK

8 >> 114 LOAD_FAST 0 ( s )
116 RETURN_VALUE
