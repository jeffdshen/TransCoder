========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
def largest ( arr , n ) :				      Disassembly of <code object largest at 0x7f33e2653f60, file " Disassembly of <code object largest at 0x7f2b01639660, file " success : identical to gold
    return max ( arr )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
							      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
							      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
							      6 RETURN_VALUE NEW_LINE					    6 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
def perimeter ( diameter , height ) :			      Disassembly of <code object perimeter at 0x7f33e2649a50, file Disassembly of <code object perimeter at 0x7f2b0164db70, file success : identical to gold
    return 2 * ( diameter + height )			      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
							      2 LOAD_FAST 0 ( diameter )				    2 LOAD_FAST 0 ( diameter )					  
							      4 LOAD_FAST 1 ( height )					    4 LOAD_FAST 1 ( height )					  
							      6 BINARY_ADD						    6 BINARY_ADD						  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
def fun ( n ) :						      Disassembly of <code object fun at 0x7f33e2644930, file "<dis Disassembly of <code object fun at 0x7f2b0163dc90, file "<dis success : identical to gold
    return n & ( n - 1 )				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
							      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
							      8 BINARY_AND						    8 BINARY_AND						  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_<unk> VES_SORTED				      SORT_ARRAY_TWO_<unk> VES_SORTED				    SORT_ARRAY_TWO_<unk> VES_SORTED				  SORT_ARRAY_TWO_<unk> VES_SORTED
--							      --							    --								  --
def mergeTwoHalf ( A , n ) :				      Disassembly of <code object mergeTwoHalf at 0x7f33e2653ed0, f Disassembly of <code object mergeTwoHalf at 0x7f2b01639660, f script_not_found : None
    A.sort ( )						      2 0 LOAD_FAST 0 ( A )					    2 0 LOAD_FAST 0 ( A )					  
							      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
							      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
							      6 POP_TOP							    6 POP_TOP							  
							      8 LOAD_CONST 0 ( None )					    8 LOAD_CONST 0 ( None )					  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def binomialCoeffSum ( n ) :				      Disassembly of <code object binomialCoeffSum at 0x7f33e264493 Disassembly of <code object binomialCoeffSum at 0x7f2b01639f6 success : identical to gold
    return ( 1 << n ) ;					      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 BINARY_LSHIFT						    4 BINARY_LSHIFT						  
							      6 RETURN_VALUE NEW_LINE					    6 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
def isEven ( n ) :					      Disassembly of <code object isEven at 0x7f33e2653f60, file "< Disassembly of <code object isEven at 0x7f2b01639660, file "< success : identical to gold
    return ( not ( n & 1 ) )				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 BINARY_AND						    4 BINARY_AND						  
							      6 UNARY_NOT						    6 UNARY_NOT							  
							      8 RETURN_VALUE NEW_LINE					    8 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
def hexagonalNum ( n ) :				      Disassembly of <code object hexagonalNum at 0x7f33e2644930, f Disassembly of <code object hexagonalNum at 0x7f2b0163dc90, f success : identical to gold
    return n * ( 2 * n - 1 )				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  
							      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
							      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 BINARY_SUBTRACT					    10 BINARY_SUBTRACT						  
							      12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  
							      14 RETURN_VALUE NEW_LINE					    14 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
def summingSeries ( n ) :				      Disassembly of <code object summingSeries at 0x7f33e2653f60,  Disassembly of <code object summingSeries at 0x7f2b0163dc90,  success : identical to gold
    return math.pow ( n , 2 )				      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
							      2 LOAD_METHOD 1 ( pow )					    2 LOAD_METHOD 1 ( pow )					  
							      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
							      6 LOAD_CONST 1 ( 2 )					    6 LOAD_CONST 1 ( 2 )					  
							      8 CALL_METHOD 2						    8 CALL_METHOD 2						  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def evenbinomialCoeffSum ( n ) :			      Disassembly of <code object evenbinomialCoeffSum at 0x7f33e26 Disassembly of <code object evenbinomialCoeffSum at 0x7f2b016 error : Traceback (most recent call last):   File
    return ( 1 << ( n - 1 ) )				      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 28, in <module>	  Fi
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in evenbinomialCoeffSum Memory
							      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  Error
							      8 BINARY_LSHIFT						    8 BINARY_LSHIFT						  
							      10 RETURN_VALUE NEW_LINE					    10 BINARY_LSHIFT						  
							      								    12 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
def findArea ( r ) :					      Disassembly of <code object findArea at 0x7f33e26494b0, file  Disassembly of <code object findArea at 0x7f2b0164d930, file  success : identical to gold
    PI = 3.142						      2 0 LOAD_CONST 1 ( 3.142 )				    2 0 LOAD_CONST 1 ( 3.142 )					  
    return PI * ( r * r ) ;				      2 STORE_FAST 1 ( PI )					    2 STORE_FAST 1 ( PI )					  
							      								    								  
							      3 4 LOAD_FAST 1 ( PI )					    3 4 LOAD_FAST 1 ( PI )					  
							      6 LOAD_FAST 0 ( r )					    6 LOAD_FAST 0 ( r )						  
							      8 LOAD_FAST 0 ( r )					    8 LOAD_FAST 0 ( r )						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  
							      14 RETURN_VALUE NEW_LINE					    14 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> Y_AN_INTEGER_WITH_3_5				      <unk> Y_AN_INTEGER_WITH_3_5				    <unk> Y_AN_INTEGER_WITH_3_5					  <unk> Y_AN_INTEGER_WITH_3_5
--							      --							    --								  --
def multiplyWith3Point5 ( x ) :				      Disassembly of <code object multiplyWith3Point5 at 0x7f33e264 Disassembly of <code object multiplyWith3Point5 at 0x7f2b0163 script_not_found : None
    return ( x << 1 ) + x + ( x >> 1 )			      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 BINARY_LSHIFT						    4 BINARY_LSHIFT						  
							      6 LOAD_FAST 0 ( x )					    6 LOAD_FAST 0 ( x )						  
							      8 BINARY_ADD						    8 BINARY_ADD						  
							      10 LOAD_FAST 0 ( x )					    10 LOAD_FAST 0 ( x )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_FAST 0 ( x )					  
							      14 BINARY_RSHIFT						    14 LOAD_CONST 1 ( 1 )					  
							      16 BINARY_ADD						    16 BINARY_RSHIFT						  
							      18 RETURN_VALUE NEW_LINE					    18 BINARY_ADD						  
							      								    20 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
def cost ( a , n ) :					      Disassembly of <code object cost at 0x7f33e2644930, file "<di Disassembly of <code object cost at 0x7f2b0163dc90, file "<di success : identical to gold
    return ( ( n - 1 ) * min ( a ) )			      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 BINARY_SUBTRACT						    4 BINARY_SUBTRACT						  
							      6 LOAD_GLOBAL 0 ( min )					    6 LOAD_GLOBAL 0 ( min )					  
							      8 LOAD_FAST 0 ( a )					    8 LOAD_FAST 0 ( a )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  
							      14 RETURN_VALUE NEW_LINE					    14 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
def Circumference ( l , w ) :				      Disassembly of <code object Circumference at 0x7f33e2644f60,  Disassembly of <code object Circumference at 0x7f2b0164d660,  success : identical to gold
    return ( 2 * ( l + w ) )				      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
							      2 LOAD_FAST 0 ( l )					    2 LOAD_FAST 0 ( l )						  
							      4 LOAD_FAST 1 ( w )					    4 LOAD_FAST 1 ( w )						  
							      6 BINARY_ADD						    6 BINARY_ADD						  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
def circumferenceparallelogram ( a , b ) :		      Disassembly of <code object circumferenceparallelogram at 0x7 Disassembly of <code object circumferenceparallelogram at 0x7 success : identical to gold
    return ( ( 2 * a ) + ( 2 * b ) )			      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
							      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
							      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
							      6 LOAD_CONST 1 ( 2 )					    6 LOAD_CONST 1 ( 2 )					  
							      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 1 ( b )						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 BINARY_ADD						    12 BINARY_ADD						  
							      14 RETURN_VALUE NEW_LINE					    14 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
def nthTerm ( n ) :					      Disassembly of <code object nthTerm at 0x7f33e2644f60, file " Disassembly of <code object nthTerm at 0x7f2b0163dc90, file " failure : #Results: 0, 10
    return ( n * n ) + ( n * n * n )			      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 LOAD_FAST 0 ( n )					    12 LOAD_FAST 0 ( n )					  
							      14 BINARY_MULTIPLY					    14 LOAD_FAST 0 ( n )					  
							      16 BINARY_ADD						    16 BINARY_MULTIPLY						  
							      18 RETURN_VALUE NEW_LINE					    18 BINARY_ADD						  
							      								    20 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S_1				      NUMBER_TRIANGLES_N_<unk> S_1				    NUMBER_TRIANGLES_N_<unk> S_1				  NUMBER_TRIANGLES_N_<unk> S_1
--							      --							    --								  --
def numberOfTriangles ( n ) :				      Disassembly of <code object numberOfTriangles at 0x7f33e2644f Disassembly of <code object numberOfTriangles at 0x7f2b0164d5 script_not_found : None
    ans = 2 * ( pow ( 3 , n ) ) - 1 ;			      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
    return ans ;					      2 LOAD_GLOBAL 0 ( pow )					    2 LOAD_GLOBAL 0 ( pow )					  
							      4 LOAD_CONST 2 ( 3 )					    4 LOAD_CONST 2 ( 3 )					  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 LOAD_CONST 3 ( 1 )					    12 LOAD_CONST 3 ( 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 STORE_FAST 1 ( ans )					    16 STORE_FAST 1 ( ans )					  
							      								    								  
							      3 18 LOAD_FAST 1 ( ans )					    3 18 LOAD_FAST 1 ( ans )					  
							      20 RETURN_VALUE NEW_LINE					    20 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
def swapNibbles ( x ) :					      Disassembly of <code object swapNibbles at 0x7f33e26494b0, fi Disassembly of <code object swapNibbles at 0x7f2b0163dc90, fi failure : #Results: 0, 10
    return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
							      2 LOAD_CONST 1 ( 15 )					    2 LOAD_CONST 1 ( 2.0 )					  
							      4 BINARY_AND						    4 BINARY_AND						  
							      6 LOAD_CONST 2 ( 4 )					    6 LOAD_CONST 2 ( 4 )					  
							      8 BINARY_LSHIFT						    8 BINARY_LSHIFT						  
							      10 LOAD_FAST 0 ( x )					    10 LOAD_FAST 0 ( x )					  
							      12 LOAD_CONST 3 ( 240 )					    12 LOAD_CONST 3 ( 0xF0 )					  
							      14 BINARY_AND						    14 BINARY_AND						  
							      16 LOAD_CONST 2 ( 4 )					    16 BINARY_OR						  
							      18 BINARY_RSHIFT						    18 LOAD_CONST 2 ( 4 )					  
							      20 BINARY_OR						    20 BINARY_RSHIFT						  
							      22 RETURN_VALUE NEW_LINE					    22 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
def height ( N ) :					      Disassembly of <code object height at 0x7f33e2653f60, file "< Disassembly of <code object height at 0x7f2b0163dc90, file "< success : identical to gold
    return math.ceil ( math.log2 ( N + 1 ) ) - 1	      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
							      2 LOAD_METHOD 1 ( ceil )					    2 LOAD_METHOD 1 ( ceil )					  
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_GLOBAL 0 ( math )					  
							      6 LOAD_METHOD 2 ( log2 )					    6 LOAD_METHOD 2 ( log2 )					  
							      8 LOAD_FAST 0 ( N )					    8 LOAD_FAST 0 ( N )						  
							      10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( 1 )					  
							      12 BINARY_ADD						    12 BINARY_ADD						  
							      14 CALL_METHOD 1						    14 CALL_METHOD 1						  
							      16 CALL_METHOD 1						    16 CALL_METHOD 1						  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 RETURN_VALUE NEW_LINE					    22 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
def checkOrigin ( x1 , y1 , x2 , y2 ) :			      Disassembly of <code object checkOrigin at 0x7f33e2653ed0, fi Disassembly of <code object checkOrigin at 0x7f2b01639660, fi success : identical to gold
    return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )	      2 0 LOAD_FAST 0 ( x1 )					    2 0 LOAD_FAST 0 ( x1 )					  
							      2 LOAD_FAST 3 ( y2 )					    2 LOAD_FAST 3 ( y2 )					  
							      4 LOAD_FAST 1 ( y1 )					    4 LOAD_FAST 1 ( y1 )					  
							      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 LOAD_FAST 1 ( y1 )					    10 LOAD_FAST 1 ( y1 )					  
							      12 LOAD_FAST 2 ( x2 )					    12 LOAD_FAST 2 ( x2 )					  
							      14 LOAD_FAST 0 ( x1 )					    14 LOAD_FAST 0 ( x1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
							      22 RETURN_VALUE NEW_LINE					    22 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
def findRepeating ( arr , n ) :				      Disassembly of <code object findRepeating at 0x7f33e2644f60,  Disassembly of <code object findRepeating at 0x7f2b0163dc90,  success : identical to gold
    return sum ( arr ) - ( ( ( n - 1 ) * n ) // 2 )	      2 0 LOAD_GLOBAL 0 ( sum )					    2 0 LOAD_GLOBAL 0 ( sum )					  
							      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
							      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
							      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  
							      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
							      10 BINARY_SUBTRACT					    10 BINARY_SUBTRACT						  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
							      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
							      16 LOAD_CONST 2 ( 2 )					    16 LOAD_CONST 2 ( 2 )					  
							      18 BINARY_FLOOR_DIVIDE					    18 BINARY_FLOOR_DIVIDE					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 RETURN_VALUE NEW_LINE					    22 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
def sortString ( str ) :				      Disassembly of <code object sortString at 0x7f33e2653ed0, fil Disassembly of <code object sortString at sortCO_LINE 1>:	  script_not_found : None
    str = ''.join ( sorted ( str ) )			      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    print ( str )					      2 LOAD_METHOD 0 ( join )					    2 LOAD_METHOD 0 ( join )					  
							      4 LOAD_GLOBAL 1 ( sorted )				    4 LOAD_GLOBAL 1 ( sorted )					  
							      6 LOAD_FAST 0 ( str )					    6 LOAD_FAST 0 ( str )					  
							      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
							      10 CALL_METHOD 1						    10 CALL_METHOD 1						  
							      12 STORE_FAST 0 ( str )					    12 STORE_FAST 0 ( str )					  
							      								    								  
							      3 14 LOAD_GLOBAL 2 ( print )				    3 14 LOAD_GLOBAL 2 ( print )				  
							      16 LOAD_FAST 0 ( str )					    16 LOAD_FAST 0 ( str )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 POP_TOP						    20 POP_TOP							  
							      22 LOAD_CONST 0 ( None )					    22 LOAD_CONST 0 ( None )					  
							      24 RETURN_VALUE NEW_LINE					    24 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
def assignValue ( a , b , x ) :				      Disassembly of <code object assignValue at 0x7f33e2644930, fi Disassembly of <code object assignValue at 0x7f2b0163dc90, fi script_not_found : None
    arr = [ a , b ]					      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    return ( arr [ x ] )				      2 LOAD_FAST 1 ( b )					    2 LOAD_FAST 1 ( b )						  
							      4 BUILD_LIST 2						    4 BUILD_LIST 2						  
							      6 STORE_FAST 3 ( arr )					    6 STORE_FAST 3 ( arr )					  
							      								    								  
							      3 8 LOAD_FAST 3 ( arr )					    3 8 LOAD_FAST 3 ( arr )					  
							      10 LOAD_FAST 2 ( x )					    10 LOAD_FAST 2 ( x )					  
							      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
							      14 RETURN_VALUE NEW_LINE					    14 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
def power ( n ) :					      Disassembly of <code object power at 0x7f33e26494b0, file "<d Disassembly of <code object power at 0x7f2b0163dc90, file "<d success : identical to gold
    if n == 1 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 2					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    return 2 * power ( n - 1 )				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      3 8 LOAD_CONST 2 ( 2 )					    3 8 LOAD_CONST 2 ( 2 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_CONST 2 ( 2 )				    4 >> 12 LOAD_CONST 2 ( 2 )					  
							      14 LOAD_GLOBAL 0 ( power )				    14 LOAD_GLOBAL 0 ( power )					  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_FAST 0 ( n )					  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 RETURN_VALUE NEW_LINE					    26 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
def kthSmallest ( arr , n , k ) :			      Disassembly of <code object kthSmallest at 0x7f33e2649a50, fi Disassembly of <code object kthSmallest at 0x7f2b0163dc90, fi script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    return arr [ k - 1 ]				      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
							      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
							      6 POP_TOP							    6 POP_TOP							  
							      								    								  
							      3 8 LOAD_FAST 0 ( arr )					    3 8 LOAD_FAST 0 ( arr )					  
							      10 LOAD_FAST 2 ( k )					    10 LOAD_FAST 2 ( k )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 RETURN_VALUE NEW_LINE					    18 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES		      PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES
--							      --							    --								  --
def findMaximumPieces ( n ) :				      Disassembly of <code object findMaximumPieces at 0x7f33e26494 Disassembly of <code object findMaximumPieces at 0x7f2b0163dc script_not_found : None
    return int ( 1 + n * ( n + 1 ) / 2 )		      2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
							      10 BINARY_ADD						    10 BINARY_ADD						  
							      12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  
							      14 LOAD_CONST 2 ( 2 )					    14 LOAD_CONST 2 ( 2 )					  
							      16 BINARY_TRUE_DIVIDE					    16 BINARY_TRUE_DIVIDE					  
							      18 BINARY_ADD						    18 BINARY_ADD						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 RETURN_VALUE NEW_LINE					    22 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
def areaOctagon ( side ) :				      Disassembly of <code object areaOctagon at 0x7f33e2644930, fi Disassembly of <code object areaOctagon at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    return ( 2 * ( 1 + ( math.sqrt ( 2 ) ) ) * side * side )  2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 2 ( 1 )					    2 LOAD_CONST 2 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_CONST 3 ( math )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_METHOD 1 ( sqrt )					    6 LOAD_METHOD 0 ( sqrt )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_CONST 1 ( 2 )					    8 LOAD_CONST 1 ( 2 )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 CALL_METHOD 1						    10 CALL_METHOD 1						  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 BINARY_ADD						    12 BINARY_ADD						  n parse     constants[arg] = ast.literal_eval(argr
							      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 LOAD_FAST 0 ( side )					    16 LOAD_FAST 0 ( side )					  ib/python3.7/ast.py", line 91, in literal_eval
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						   return _convert(node_or_string)   File "/home/ubu
							      20 LOAD_FAST 0 ( side )					    20 LOAD_FAST 0 ( side )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      22 BINARY_MULTIPLY					    22 BINARY_MULTIPLY						  line 90, in _convert	   return _convert_signed_nu
							      24 RETURN_VALUE NEW_LINE					    24 LOAD_FAST 1 ( side )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      								    26 BINARY_MULTIPLY						  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      								    28 RETURN_VALUE NEW_LINE					  ed_num     return _convert_num(node)	 File "/home
							      								    								  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      								    								  y", line 55, in _convert_num	   raise ValueError(
							      								    								  'malformed node or string: ' + repr(node)) ValueEr
							      								    								  ror: malformed node or string: <_ast.Name object a
							      								    								  t 0x7f3b18aae410>
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
def volumeOfEllipsoid ( r1 , r2 , r3 ) :		      Disassembly of <code object volumeOfEllipsoid at 0x7f33e26449 Disassembly of <code object vwhat OfEllipsoid at 0x7f2b0164d5 success : None
    return 1.33 * math.pi * r1 * r2 * r3		      2 0 LOAD_CONST 1 ( 1.33 )					    2 0 LOAD_CONST 1 ( 1.33 )					  
							      2 LOAD_GLOBAL 0 ( math )					    2 LOAD_GLOBAL 0 ( math )					  
							      4 LOAD_ATTR 1 ( pi )					    4 LOAD_ATTR 1 ( pi )					  
							      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
							      8 LOAD_FAST 0 ( r1 )					    8 LOAD_FAST 0 ( r1 )					  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 LOAD_FAST 1 ( r2 )					    12 LOAD_FAST 1 ( r2 )					  
							      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
							      16 LOAD_FAST 2 ( r3 )					    16 LOAD_FAST 2 ( r3 )					  
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 RETURN_VALUE NEW_LINE					    20 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_<unk> PARTS_1				      BREAK_NUMBER_<unk> PARTS_1				    BREAK_NUMBER_<unk> PARTS_1					  BREAK_NUMBER_<unk> PARTS_1
--							      --							    --								  --
def count_of_ways ( n ) :				      Disassembly of <code object count_of_ways at 0x7f33e26494b0,  Disassembly of <code object count_of_ways at 0x7f2b016399c0,  script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    count = ( n + 1 ) * ( n + 2 ) // 2			      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  
    return count					      								    								  
							      3 4 LOAD_FAST 0 ( n )					    3 4 LOAD_FAST 0 ( n )					  
							      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
							      8 BINARY_ADD						    8 BINARY_ADD						  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 3 ( 2 )					    12 LOAD_CONST 3 ( 2 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 3 ( 2 )					    18 LOAD_CONST 3 ( 2 )					  
							      20 BINARY_FLOOR_DIVIDE					    20 BINARY_FLOOR_DIVIDE					  
							      22 STORE_FAST 1 ( count )					    22 STORE_FAST 1 ( count )					  
							      								    								  
							      4 24 LOAD_FAST 1 ( count )				    4 24 LOAD_FAST 1 ( count )					  
							      26 RETURN_VALUE NEW_LINE					    26 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
def calculateSum ( n ) :				      Disassembly of <code object calculateSum at 0x7f33e2649a50, f Disassembly of <code object calculateSum at 0x7f2b0163dc90, f success : identical to gold
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    sum = 1 << n ;					      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  
    return ( sum - 1 )					      								    								  
							      3 4 LOAD_CONST 2 ( 1 )					    3 4 LOAD_CONST 2 ( 1 )					  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 BINARY_LSHIFT						    8 BINARY_LSHIFT						  
							      10 STORE_FAST 1 ( sum )					    10 STORE_FAST 1 ( sum )					  
							      								    								  
							      4 12 LOAD_FAST 1 ( sum )					    4 12 LOAD_FAST 1 ( sum )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 RETURN_VALUE NEW_LINE					    18 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
def countNumberOfTriangles ( n ) :			      Disassembly of <code object countNumberOfTriangles at 0x7f33e Disassembly of <code object countNumberOfTriangles at 0x7f2b0 success : identical to gold
    return ( n * ( n - 1 ) * ( n - 2 ) // 6 )		      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
							      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 2 ( 2 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 3 ( 6 )					    18 LOAD_CONST 3 ( 6 )					  
							      20 BINARY_FLOOR_DIVIDE					    20 BINARY_FLOOR_DIVIDE					  
							      22 RETURN_VALUE NEW_LINE					    22 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
def sumOfSeries ( n ) :					      Disassembly of <code object sumOfSeries at 0x7f33e26494b0, fi Disassembly of <code object sumOfSeries at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    return ( int ) ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * 2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 0.6172 )					    2 LOAD_CONST 1 ( 0.6172 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 LOAD_GLOBAL 1 ( pow )					    4 LOAD_GLOBAL 1 ( pow )					  le "<dis>", line 2, in sumOfSeries TypeError: unsu
							      6 LOAD_CONST 2 ( 10 )					    6 LOAD_CONST 2 ( 10 )					  pported operand type(s) for *: 'type' and 'float'
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 CALL_FUNCTION 2					    10 CALL_FUNCTION 2						  
							      12 LOAD_CONST 3 ( 1 )					    12 LOAD_CONST 3 ( 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 4 ( 0.55 )					    18 LOAD_CONST 4 ( 0.55 )					  
							      20 LOAD_FAST 0 ( n )					    20 LOAD_FAST 0 ( n )					  
							      22 BINARY_MULTIPLY					    22 BINARY_MULTIPLY						  
							      24 BINARY_SUBTRACT					    24 BINARY_SUBTRACT						  
							      26 CALL_FUNCTION 1					    26 BINARY_MULTIPLY						  
							      28 RETURN_VALUE NEW_LINE					    28 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED
--							      --							    --								  --
def getArea ( a ) :					      Disassembly of <code object getArea at 0x7f33e2649a50, file " Disassembly of <code object getArea at 0x7f2b01639f60, file " script_not_found : None
    area = ( math.pi * a * a ) / 4			      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
    return area						      2 LOAD_ATTR 1 ( pi )					    2 LOAD_ATTR 1 ( pi )					  
							      4 LOAD_FAST 0 ( a )					    4 LOAD_FAST 0 ( a )						  
							      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
							      8 LOAD_FAST 0 ( a )					    8 LOAD_FAST 0 ( a )						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 LOAD_CONST 1 ( 4 )					    12 LOAD_CONST 1 ( 4 )					  
							      14 BINARY_TRUE_DIVIDE					    14 BINARY_TRUE_DIVIDE					  
							      16 STORE_FAST 1 ( area )					    16 STORE_FAST 1 ( area )					  
							      								    								  
							      3 18 LOAD_FAST 1 ( area )					    3 18 LOAD_FAST 1 ( area )					  
							      20 RETURN_VALUE NEW_LINE					    20 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
def maxSquare ( b , m ) :				      Disassembly of <code object maxSquare at 0x7f33e2649a50, file Disassembly of <code object maxSquare at 0x7f2b0164ded0, file failure : #Results: 0, 10
    return ( b / m - 1 ) * ( b / m ) / 2		      2 0 LOAD_FAST 0 ( b )					    2 0 LOAD_FAST 0 ( b )					  
							      2 LOAD_FAST 1 ( m )					    2 LOAD_FAST 1 ( m )						  
							      4 BINARY_TRUE_DIVIDE					    4 BINARY_TRUE_DIVIDE					  
							      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
							      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
							      10 LOAD_FAST 0 ( b )					    10 LOAD_FAST 0 ( b )					  
							      12 LOAD_FAST 1 ( m )					    12 LOAD_FAST 1 ( m )					  
							      14 BINARY_TRUE_DIVIDE					    14 BINARY_TRUE_DIVIDE					  
							      16 BINARY_MULTIPLY					    16 LOAD_CONST 2 ( 2 )					  
							      18 LOAD_CONST 2 ( 2 )					    18 BINARY_TRUE_DIVIDE					  
							      20 BINARY_TRUE_DIVIDE					    20 RETURN_VALUE NEW_LINE					  
							      22 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
def findSumSubsets ( n ) :				      Disassembly of <code object findSumSubsets at 0x7f33e2644930, Disassembly of <code object findSumSubsets at 0x7f2b0163dc90, success : identical to gold
    return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
							      6 BINARY_ADD						    6 BINARY_ADD						  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
							      12 BINARY_TRUE_DIVIDE					    12 BINARY_TRUE_DIVIDE					  
							      14 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 1 )					  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_FAST 0 ( n )					  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 BINARY_LSHIFT						    22 BINARY_LSHIFT						  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 RETURN_VALUE NEW_LINE					    26 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
def vol_of_octahedron ( side ) :			      Disassembly of <code object vol_of_octahedron at 0x7f33e2649a Disassembly of <code object vol_of_octahedron at 0x7f2b01639f success : identical to gold
    return ( ( side * side * side ) * ( math.sqrt ( 2 ) / 3 ) 2 0 LOAD_FAST 0 ( side )					    2 0 LOAD_FAST 0 ( side )					  
							      2 LOAD_FAST 0 ( side )					    2 LOAD_FAST 0 ( side )					  
							      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
							      6 LOAD_FAST 0 ( side )					    6 LOAD_FAST 0 ( side )					  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 LOAD_GLOBAL 0 ( math )					    10 LOAD_GLOBAL 0 ( math )					  
							      12 LOAD_METHOD 1 ( sqrt )					    12 LOAD_METHOD 1 ( sqrt )					  
							      14 LOAD_CONST 1 ( 2 )					    14 LOAD_CONST 1 ( 2 )					  
							      16 CALL_METHOD 1						    16 CALL_METHOD 1						  
							      18 LOAD_CONST 2 ( 3 )					    18 LOAD_CONST 2 ( 3 )					  
							      20 BINARY_TRUE_DIVIDE					    20 BINARY_TRUE_DIVIDE					  
							      22 BINARY_MULTIPLY					    22 BINARY_MULTIPLY						  
							      24 RETURN_VALUE NEW_LINE					    24 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
def timeToMeet ( s , v ) :				      Disassembly of <code object timeToMeet at 0x7f33e2644f60, fil Disassembly of <code object timeToMeet at 0x7f2b0163dc90, fil script_not_found : None
    V = 3 * v / 2 ;					      2 0 LOAD_CONST 1 ( 3 )					    2 0 LOAD_CONST 1 ( 3 )					  
    time = s / V ;					      2 LOAD_FAST 1 ( v )					    2 LOAD_FAST 1 ( v )						  
    print ( time ) ;					      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
							      6 LOAD_CONST 2 ( 2 )					    6 LOAD_CONST 2 ( 2 )					  
							      8 BINARY_TRUE_DIVIDE					    8 BINARY_TRUE_DIVIDE					  
							      10 STORE_FAST 2 ( V )					    10 STORE_FAST 2 ( V )					  
							      								    								  
							      3 12 LOAD_FAST 0 ( s )					    3 12 LOAD_FAST 0 ( s )					  
							      14 LOAD_FAST 2 ( V )					    14 LOAD_FAST 2 ( V )					  
							      16 BINARY_TRUE_DIVIDE					    16 BINARY_TRUE_DIVIDE					  
							      18 STORE_FAST 3 ( time )					    18 STORE_FAST 3 ( time )					  
							      								    								  
							      4 20 LOAD_GLOBAL 0 ( print )				    4 20 LOAD_GLOBAL 0 ( print )				  
							      22 LOAD_FAST 3 ( time )					    22 LOAD_FAST 3 ( time )					  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 POP_TOP						    26 POP_TOP							  
							      28 LOAD_CONST 0 ( None )					    28 LOAD_CONST 0 ( None )					  
							      30 RETURN_VALUE NEW_LINE					    30 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e2644930, file " Disassembly of <code object findSum at 0x7f2b0163dc90, file " success : identical to gold
    return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24     2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
							      6 BINARY_ADD						    6 BINARY_ADD						  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 2 ( 2 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 3 ( 3 )					    18 LOAD_CONST 3 ( 3 )					  
							      20 LOAD_FAST 0 ( n )					    20 LOAD_FAST 0 ( n )					  
							      22 BINARY_MULTIPLY					    22 BINARY_MULTIPLY						  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 1 ( 1 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_CONST 4 ( 24 )					    30 LOAD_CONST 4 ( 24 )					  
							      32 BINARY_TRUE_DIVIDE					    32 BINARY_TRUE_DIVIDE					  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
def find ( p ) :					      Disassembly of <code object find at 0x7f33e2644930, file "<di Disassembly of <code object find at 0x7f2b0163dc90, file "<di script_not_found : None
    return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
							      2 LOAD_METHOD 1 ( ceil )					    2 LOAD_METHOD 1 ( ceil )					  
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_GLOBAL 0 ( math )					  
							      6 LOAD_METHOD 2 ( sqrt )					    6 LOAD_METHOD 2 ( sqrt )					  
							      8 LOAD_CONST 1 ( 730 )					    8 LOAD_CONST 1 ( 2 )					  
							      10 LOAD_GLOBAL 0 ( math )					    10 CALL_METHOD 1						  
							      12 LOAD_METHOD 3 ( log )					    12 LOAD_CONST 2 ( 365 )					  
							      14 LOAD_CONST 2 ( 1 )					    14 BINARY_MULTIPLY						  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_GLOBAL 0 ( math )					  
							      18 LOAD_FAST 0 ( p )					    18 LOAD_METHOD 3 ( log )					  
							      20 BINARY_SUBTRACT					    20 LOAD_CONST 3 ( 1 )					  
							      22 BINARY_TRUE_DIVIDE					    22 LOAD_CONST 3 ( 1 )					  
							      24 CALL_METHOD 1						    24 LOAD_FAST 0 ( p )					  
							      26 BINARY_MULTIPLY					    26 BINARY_SUBTRACT						  
							      28 CALL_METHOD 1						    28 BINARY_TRUE_DIVIDE					  
							      30 CALL_METHOD 1						    30 CALL_METHOD 1						  
							      32 RETURN_VALUE NEW_LINE					    32 BINARY_MULTIPLY						  
							      								    34 CALL_METHOD 1						  
							      								    36 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
def findIndex ( n ) :					      Disassembly of <code object findIndex at 0x7f33e2653ed0, file Disassembly of <code object findIndex at 0x7f2b0163dc90, file success : None
    fibo = 2.078087 * math.log ( n ) + 1.672276		      2 0 LOAD_CONST 1 ( 2.078087 )				    2 0 LOAD_CONST 1 ( 2.078087 )				  
    return round ( fibo )				      2 LOAD_GLOBAL 0 ( math )					    2 LOAD_GLOBAL 0 ( math )					  
							      4 LOAD_METHOD 1 ( log )					    4 LOAD_METHOD 1 ( log )					  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 CALL_METHOD 1						    8 CALL_METHOD 1						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 LOAD_CONST 2 ( 1.672276 )				    12 LOAD_CONST 2 ( 1.674 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 STORE_FAST 1 ( fibo )					    16 STORE_FAST 1 ( fibo )					  
							      								    								  
							      3 18 LOAD_GLOBAL 2 ( round )				    3 18 LOAD_GLOBAL 2 ( round )				  
							      20 LOAD_FAST 1 ( fibo )					    20 LOAD_FAST 1 ( fibo )					  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 RETURN_VALUE NEW_LINE					    24 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2644f60, file Disassembly of <code object factorial at 0x7f2b0163dc90, file success : identical to gold
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      >> 16 LOAD_CONST 1 ( 1 )					    >> 16 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      >> 20 LOAD_FAST 0 ( n )					    >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_GLOBAL 0 ( factorial )				    22 LOAD_GLOBAL 0 ( factorial )				  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2653ed0, file Disassembly of <code object factorial at 0x7f2b0163dc90, file success : identical to gold
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      >> 16 LOAD_CONST 1 ( 1 )					    >> 16 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      >> 20 LOAD_FAST 0 ( n )					    >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_GLOBAL 0 ( factorial )				    22 LOAD_GLOBAL 0 ( factorial )				  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2644930, file Disassembly of <code object factorial at 0x7f2b0163dc90, file success : identical to gold
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      >> 16 LOAD_CONST 1 ( 1 )					    >> 16 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      >> 20 LOAD_FAST 0 ( n )					    >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_GLOBAL 0 ( factorial )				    22 LOAD_GLOBAL 0 ( factorial )				  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2649a50, file Disassembly of <code object factorial at 0x7f2b0163dc90, file success : identical to gold
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      >> 16 LOAD_CONST 1 ( 1 )					    >> 16 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      >> 20 LOAD_FAST 0 ( n )					    >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_GLOBAL 0 ( factorial )				    22 LOAD_GLOBAL 0 ( factorial )				  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2644f60, file Disassembly of <code object factorial at 0x7f2b0163dc90, file success : identical to gold
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      >> 16 LOAD_CONST 1 ( 1 )					    >> 16 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      >> 20 LOAD_FAST 0 ( n )					    >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_GLOBAL 0 ( factorial )				    22 LOAD_GLOBAL 0 ( factorial )				  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
def countStr ( n ) :					      Disassembly of <code object countStr at 0x7f33e2644f60, file  Disassembly of <code object countStr at 0x7f2b0163dc90, file  failure : #Results: 4, 10
    return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) // 2 ) ) 2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 LOAD_CONST 2 ( 2 )					    4 LOAD_CONST 2 ( 2 )					  
							      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
							      8 BINARY_ADD						    8 BINARY_ADD						  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_FAST 0 ( n )					    12 LOAD_FAST 0 ( n )					  
							      14 LOAD_FAST 0 ( n )					    14 LOAD_FAST 0 ( n )					  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 BINARY_MULTIPLY					    22 LOAD_CONST 2 ( 2 )					  
							      24 LOAD_CONST 2 ( 2 )					    24 BINARY_FLOOR_DIVIDE					  
							      26 BINARY_FLOOR_DIVIDE					    26 BINARY_MULTIPLY						  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 RETURN_VALUE NEW_LINE					    30 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
def minmaxProduct ( arr1 , arr2 , n1 , n2 ) :		      Disassembly of <code object minmaxProduct at 0x7f33e2649a50,  Disassembly of <code object minmaxProduct at 0x7f2b0163dc90,  script_not_found : None
    arr1.sort ( )					      2 0 LOAD_FAST 0 ( arr1 )					    2 0 LOAD_FAST 0 ( arr1 )					  
    arr2.sort ( )					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    return arr1 [ n1 - 1 ] * arr2 [ 0 ]			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
							      6 POP_TOP							    6 POP_TOP							  
							      								    								  
							      3 8 LOAD_FAST 1 ( arr2 )					    3 8 LOAD_FAST 1 ( arr2 )					  
							      10 LOAD_METHOD 0 ( sort )					    10 LOAD_METHOD 0 ( sort )					  
							      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
							      14 POP_TOP						    14 POP_TOP							  
							      								    								  
							      4 16 LOAD_FAST 0 ( arr1 )					    4 16 LOAD_FAST 0 ( arr1 )					  
							      18 LOAD_FAST 2 ( n1 )					    18 LOAD_FAST 2 ( n1 )					  
							      20 LOAD_CONST 1 ( 1 )					    20 LOAD_CONST 1 ( 1 )					  
							      22 BINARY_SUBTRACT					    22 BINARY_SUBTRACT						  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 1 ( arr2 )					    26 LOAD_FAST 1 ( arr2 )					  
							      28 LOAD_CONST 2 ( 0 )					    28 LOAD_CONST 2 ( 0 )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
def find_extra_element_index ( arrA , arrB ) :		      Disassembly of <code object find_extra_element_index at 0x7f3 Disassembly of <code object find_extra_element_index at 0x7f2 script_not_found : None
    extra_element = sum ( arrA ) - sum ( arrB )		      2 0 LOAD_GLOBAL 0 ( sum )					    2 0 LOAD_GLOBAL 0 ( sum )					  
    return arrA.index ( extra_element )			      2 LOAD_FAST 0 ( arrA )					    2 LOAD_FAST 1 ( arrA )					  
							      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
							      6 LOAD_GLOBAL 0 ( sum )					    6 LOAD_GLOBAL 0 ( sum )					  
							      8 LOAD_FAST 1 ( arrB )					    8 LOAD_FAST 1 ( arrB )					  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
							      14 STORE_FAST 2 ( extra_element )				    14 STORE_FAST 2 ( extra_element )				  
							      								    								  
							      3 16 LOAD_FAST 0 ( arrA )					    3 16 LOAD_FAST 1 ( arrA )					  
							      18 LOAD_METHOD 1 ( index )				    18 LOAD_METHOD 1 ( index )					  
							      20 LOAD_FAST 2 ( extra_element )				    20 LOAD_FAST 2 ( extra_element )				  
							      22 CALL_METHOD 1						    22 CALL_METHOD 1						  
							      24 RETURN_VALUE NEW_LINE					    24 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7f33e26494b0, file "<dis Disassembly of <code object fib at 0x7f2b0163dc90, file "<dis script_not_found : None
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return n					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    return fib ( n - 1 ) + fib ( n - 2 )		      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      3 8 LOAD_FAST 0 ( n )					    3 8 LOAD_FAST 0 ( n )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_GLOBAL 0 ( fib )				    4 >> 12 LOAD_GLOBAL 0 ( fib )				  
							      14 LOAD_FAST 0 ( n )					    14 LOAD_FAST 0 ( n )					  
							      16 LOAD_CONST 1 ( 1 )					    16 LOAD_CONST 1 ( 1 )					  
							      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 LOAD_GLOBAL 0 ( fib )					    22 LOAD_GLOBAL 0 ( fib )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 2 ( 2 )					    26 LOAD_CONST 2 ( 2 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
def countSetBits ( n ) :				      Disassembly of <code object countSetBits at 0x7f33e26494b0, f Disassembly of <code object countSetBits at 0x7f2b01639f60, f success : identical to gold
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    else :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 1 + countSetBits ( n & ( n - 1 ) )	      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      5 >> 12 LOAD_CONST 2 ( 1 )				    5 >> 12 LOAD_CONST 2 ( 1 )					  
							      14 LOAD_GLOBAL 0 ( countSetBits )				    14 LOAD_GLOBAL 0 ( countSetBits )				  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_FAST 0 ( n )					  
							      18 LOAD_FAST 0 ( n )					    18 LOAD_FAST 0 ( n )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 BINARY_SUBTRACT					    22 BINARY_SUBTRACT						  
							      24 BINARY_AND						    24 BINARY_AND						  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      32 LOAD_CONST 0 ( None )					    32 LOAD_CONST 0 ( None )					  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
def vol_of_dodecahedron ( side ) :			      Disassembly of <code object vol_of_dodecahedron at 0x7f33e264 Disassembly of <code object vol_of_dodecahedron at 0x7f2b0163 error : /bin/bash: line 1:  3715 Segmentation faul
    return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 2 0 LOAD_CONST 1 ( 15 )					    2 0 LOAD_CONST 1 ( 15 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_CONST 2 ( 7 )					    2 LOAD_CONST 2 ( 7 )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_GLOBAL 0 ( math )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
							      6 LOAD_METHOD 1 ( sqrt )					    6 LOAD_METHOD 1 ( sqrt )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/CALCUL
							      8 LOAD_CONST 3 ( 5 )					    8 LOAD_CONST 3 ( 5 )					  ATE_VOLUME_DODECAHEDRON.dis
							      10 CALL_METHOD 1						    10 CALL_METHOD 1						  
							      12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 LOAD_CONST 4 ( 4 )					    16 LOAD_CONST 4 ( 4 )					  
							      18 BINARY_TRUE_DIVIDE					    18 BINARY_TRUE_DIVIDE					  
							      20 LOAD_GLOBAL 0 ( math )					    20 LOAD_GLOBAL 0 ( math )					  
							      22 LOAD_METHOD 2 ( pow )					    22 LOAD_METHOD 2 ( pow )					  
							      24 LOAD_FAST 0 ( side )					    24 LOAD_FAST 0 ( side )					  
							      26 LOAD_CONST 5 ( 3 )					    26 LOAD_CONST 5 ( 3 )					  
							      28 CALL_METHOD 2						    28 CALL_METHOD 2						  
							      30 BINARY_MULTIPLY					    30 BINARY_MULTIPLY						  
							      32 RETURN_VALUE NEW_LINE					    32 BINARY_ADD						  
							      								    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
def findArea ( a ) :					      Disassembly of <code object findArea at 0x7f33e2653f60, file  Disassembly of <code object findArea at 0x7f2b0163dc90, file  failure : #Results: 0, 10
    area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a  2 0 LOAD_GLOBAL 0 ( sqrt )				    2 0 LOAD_GLOBAL 0 ( sqrt )					  
    return area						      2 LOAD_CONST 1 ( 5 )					    2 LOAD_CONST 1 ( 5 )					  
							      4 LOAD_CONST 1 ( 5 )					    4 LOAD_CONST 1 ( 5 )					  
							      6 LOAD_CONST 2 ( 2 )					    6 LOAD_CONST 1 ( 2 )					  
							      8 LOAD_GLOBAL 0 ( sqrt )					    8 LOAD_GLOBAL 0 ( sqrt )					  
							      10 LOAD_CONST 1 ( 5 )					    10 LOAD_CONST 1 ( 5 )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
							      16 BINARY_ADD						    16 BINARY_ADD						  
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 LOAD_FAST 0 ( a )					    22 LOAD_FAST 0 ( a )					  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 LOAD_FAST 0 ( a )					    26 LOAD_FAST 0 ( a )					  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_CONST 3 ( 4 )					    30 LOAD_CONST 2 ( 4 )					  
							      32 BINARY_TRUE_DIVIDE					    32 BINARY_TRUE_DIVIDE					  
							      34 STORE_FAST 1 ( area )					    34 STORE_FAST 1 ( area )					  
							      								    								  
							      3 36 LOAD_FAST 1 ( area )					    3 36 LOAD_FAST 1 ( area )					  
							      38 RETURN_VALUE NEW_LINE					    38 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1	      POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1
--							      --							    --								  --
def printArray ( a , n ) :				      Disassembly of <code object printArray at 0x7f33e2649a50, fil Disassembly of <code object printArray at 0x7f2b0163dc90, fil script_not_found : None
    for i in a :					      2 0 SETUP_LOOP 24 ( to 26 )				    2 0 SETUP_LOOP 28 ( to 30 )					  
	print ( i , end = " " )				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
    print ( )						      4 GET_ITER						    4 GET_ITER							  
							      >> 6 FOR_ITER 16 ( to 24 )				    >> 6 FOR_ITER 20 ( to 28 )					  
							      8 STORE_FAST 2 ( i )					    8 STORE_FAST 2 ( i )					  
							      								    								  
							      3 10 LOAD_GLOBAL 0 ( print )				    3 10 LOAD_GLOBAL 0 ( print )				  
							      12 LOAD_FAST 2 ( i )					    12 LOAD_FAST 2 ( i )					  
							      14 LOAD_CONST 1 ( ' ' )					    14 LOAD_CONST 1 ( ' ' )					  
							      16 LOAD_CONST 2 ( ( 'end' , ) )				    16 LOAD_CONST 2 ( ( 'end' , ) )				  
							      18 CALL_FUNCTION_KW 2					    18 CALL_FUNCTION_KW 2					  
							      20 POP_TOP						    20 POP_TOP							  
							      22 JUMP_ABSOLUTE 6					    22 JUMP_ABSOLUTE 6						  
							      >> 24 POP_BLOCK						    >> 24 POP_BLOCK						  
							      								    								  
							      4 >> 26 LOAD_GLOBAL 0 ( print )				    4 >> 26 LOAD_GLOBAL 0 ( print )				  
							      28 CALL_FUNCTION 0					    28 CALL_FUNCTION 0						  
							      30 POP_TOP						    30 POP_TOP							  
							      32 LOAD_CONST 0 ( None )					    32 LOAD_CONST 0 ( None )					  
							      34 RETURN_VALUE NEW_LINE					    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
def countSetBits ( n ) :				      Disassembly of <code object countSetBits at 0x7f33e2644f60, f Disassembly of <code object countSetBits at 0x7f2b01639f60, f failure : #Results: 2, 10
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    while ( n ) :					      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  
	n &= ( n - 1 )					      								    								  
	count += 1					      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 SETUP_LOOP 30 ( to 36 )					  
    return count					      >> 6 LOAD_FAST 0 ( n )					    >> 6 LOAD_FAST 0 ( n )					  
							      8 POP_JUMP_IF_FALSE 32					    8 POP_JUMP_IF_FALSE 34					  
							      								    								  
							      4 10 LOAD_FAST 0 ( n )					    4 10 LOAD_FAST 0 ( n )					  
							      12 LOAD_FAST 0 ( n )					    12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 INPLACE_AND						    18 BINARY_LSHIFT						  
							      20 STORE_FAST 0 ( n )					    20 STORE_FAST 0 ( n )					  
							      								    								  
							      5 22 LOAD_FAST 1 ( count )				    5 22 LOAD_FAST 1 ( count )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 INPLACE_ADD						    26 INPLACE_ADD						  
							      28 STORE_FAST 1 ( count )					    28 STORE_FAST 1 ( count )					  
							      30 JUMP_ABSOLUTE 6					    								  
							      >> 32 POP_BLOCK						    6 >> 30 LOAD_FAST 1 ( count )				  
							      								    32 RETURN_VALUE NEW_LINE					  
							      6 >> 34 LOAD_FAST 1 ( count )				    								  
							      36 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
def bin ( n ) :						      Disassembly of <code object bin at 0x7f33e26494b0, file "<dis Disassembly of <code object bin at 0x7f2b0163dc90, file "<dis script_not_found : None
    if n > 1 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	bin ( n // 2 )					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    print ( n % 2 , end = "" )				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
							      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      3 8 LOAD_GLOBAL 0 ( bin )					    3 8 LOAD_GLOBAL 0 ( bin )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 2 ( 2 )					  
							      14 BINARY_FLOOR_DIVIDE					    14 BINARY_FLOOR_DIVIDE					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 POP_TOP						    18 POP_TOP							  
							      								    20 JUMP_FORWARD 8 ( to 30 )					  
							      4 >> 20 LOAD_GLOBAL 1 ( print )				    								  
							      22 LOAD_FAST 0 ( n )					    4 >> 22 LOAD_GLOBAL 1 ( print )				  
							      24 LOAD_CONST 2 ( 2 )					    24 LOAD_FAST 0 ( n )					  
							      26 BINARY_MODULO						    26 LOAD_CONST 2 ( 2 )					  
							      28 LOAD_CONST 3 ( '' )					    28 BINARY_MODULO						  
							      30 LOAD_CONST 4 ( ( 'end' , ) )				    >> 30 LOAD_CONST 3 ( '' )					  
							      32 CALL_FUNCTION_KW 2					    32 LOAD_CONST 4 ( ( 'end' , ) )				  
							      34 POP_TOP						    34 CALL_FUNCTION_KW 2					  
							      36 LOAD_CONST 0 ( None )					    36 POP_TOP							  
							      38 RETURN_VALUE NEW_LINE					    38 LOAD_CONST 0 ( None )					  
							      								    40 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
def linearSearch ( arr , n ) :				      Disassembly of <code object linearSearch at 0x7f33e2644930, f Disassembly of <code object linearSearch at 0x7f2b0163dc90, f error : /bin/bash: line 1:  3741 Segmentation faul
    for i in range ( n ) :				      2 0 SETUP_LOOP 32 ( to 34 )				    2 0 SETUP_LOOP 36 ( to 38 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if arr [ i ] is i :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    return i					      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    return - 1						      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_A
							      8 GET_ITER						    8 GET_ITER							  _FIXED_POINT_IN_A_GIVEN_ARRAY.dis
							      >> 10 FOR_ITER 20 ( to 32 )				    >> 10 FOR_ITER 24 ( to 36 )					  
							      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 LOAD_FAST 0 ( arr )					    3 14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_FAST 2 ( i )					    16 LOAD_FAST 2 ( i )					  
							      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 LOAD_FAST 2 ( i )					    20 LOAD_FAST 2 ( i )					  
							      22 COMPARE_OP 8 ( is )					    22 COMPARE_OP 8 ( is )					  
							      24 POP_JUMP_IF_FALSE 10					    24 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      4 26 LOAD_FAST 2 ( i )					    4 26 LOAD_FAST 2 ( i )					  
							      28 RETURN_VALUE						    28 RETURN_VALUE						  
							      30 JUMP_ABSOLUTE 10					    30 JUMP_ABSOLUTE 10						  
							      >> 32 POP_BLOCK						    >> 32 POP_BLOCK						  
							      								    								  
							      5 >> 34 LOAD_CONST 1 ( - 1 )				    5 >> 34 LOAD_CONST 1 ( - 1 )				  
							      36 RETURN_VALUE NEW_LINE					    36 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
def printSubStr ( st , low , high ) :			      Disassembly of <code object printSubStr at 0x7f33e2644930, fi Disassembly of <code object printSubStr at 0x7f2b0163dc90, fi script_not_found : None
    sys.stdout.write ( st [ low : high + 1 ] )		      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_GLOBAL 0 ( sys )					  
    sys.stdout.flush ( )				      2 LOAD_ATTR 1 ( stdout )					    2 LOAD_ATTR 1 ( stdout )					  
    return ''						      4 LOAD_METHOD 2 ( write )					    4 LOAD_METHOD 2 ( write )					  
							      6 LOAD_FAST 0 ( st )					    6 LOAD_FAST 0 ( st )					  
							      8 LOAD_FAST 1 ( low )					    8 LOAD_FAST 1 ( low )					  
							      10 LOAD_FAST 2 ( high )					    10 LOAD_FAST 2 ( high )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 BUILD_SLICE 2						    16 BUILD_SLICE 2						  
							      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 CALL_METHOD 1						    20 CALL_METHOD 1						  
							      22 POP_TOP						    22 POP_TOP							  
							      								    								  
							      3 24 LOAD_GLOBAL 0 ( sys )				    3 24 LOAD_GLOBAL 0 ( sys )					  
							      26 LOAD_ATTR 1 ( stdout )					    26 LOAD_ATTR 1 ( stdout )					  
							      28 LOAD_METHOD 3 ( flush )				    28 LOAD_METHOD 3 ( flush )					  
							      30 CALL_METHOD 0						    30 CALL_METHOD 0						  
							      32 POP_TOP						    32 POP_TOP							  
							      								    								  
							      4 34 LOAD_CONST 2 ( '' )					    4 34 LOAD_CONST 2 ( '' )					  
							      36 RETURN_VALUE NEW_LINE					    36 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
def isPowerOfFour ( n ) :				      Disassembly of <code object isPowerOfFour at 0x7f33e2653ed0,  Disassembly of <code object isPowerOfFour at 0x7f2b0163dc90,  error : Traceback (most recent call last):   File
    return ( n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not (  2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 COMPARE_OP 3 ( != )					    4 COMPARE_OP 3 ( != )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 JUMP_IF_FALSE_OR_POP 32					    6 JUMP_IF_FALSE_OR_POP 30					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  n parse     constants[arg] = ast.literal_eval(argr
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 BINARY_AND						    16 BINARY_AND						  ib/python3.7/ast.py", line 46, in literal_eval
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					   node_or_string = parse(node_or_string, mode='eval
							      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      22 JUMP_IF_FALSE_OR_POP 32				    22 JUMP_IF_FALSE_OR_POP 30					  /python3.7/ast.py", line 35, in parse	    return c
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      26 LOAD_CONST 3 ( 2863311530 )				    26 LOAD_CONST 3 ( 4AAAAAAAA )				  le "<unknown>", line 1     4AAAAAAAA		   ^
							      28 BINARY_AND						    28 BINARY_AND						   SyntaxError: unexpected EOF while parsing
							      30 UNARY_NOT						    >> 30 RETURN_VALUE NEW_LINE					  
							      >> 32 RETURN_VALUE NEW_LINE				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
def bin ( n ) :						      Disassembly of <code object bin at 0x7f33e2653ed0, file "<dis Disassembly of <code object bin at 0x7f2b0163dc90, file "<dis script_not_found : None
    if ( n > 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	bin ( n >> 1 )					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    print ( n & 1 , end = "" )				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
							      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      3 8 LOAD_GLOBAL 0 ( bin )					    3 8 LOAD_GLOBAL 0 ( bin )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
							      14 BINARY_RSHIFT						    14 BINARY_RSHIFT						  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 POP_TOP						    18 POP_TOP							  
							      								    20 JUMP_FORWARD 8 ( to 30 )					  
							      4 >> 20 LOAD_GLOBAL 1 ( print )				    								  
							      22 LOAD_FAST 0 ( n )					    4 >> 22 LOAD_GLOBAL 1 ( print )				  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_FAST 0 ( n )					  
							      26 BINARY_AND						    26 LOAD_CONST 1 ( 1 )					  
							      28 LOAD_CONST 2 ( '' )					    28 BINARY_AND						  
							      30 LOAD_CONST 3 ( ( 'end' , ) )				    >> 30 LOAD_CONST 2 ( '' )					  
							      32 CALL_FUNCTION_KW 2					    32 LOAD_CONST 3 ( ( 'end' , ) )				  
							      34 POP_TOP						    34 CALL_FUNCTION_KW 2					  
							      36 LOAD_CONST 0 ( None )					    36 POP_TOP							  
							      38 RETURN_VALUE NEW_LINE					    38 LOAD_CONST 0 ( None )					  
							      								    40 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
def largestPower ( n , p ) :				      Disassembly of <code object largestPower at 0x7f33e2649a50, f Disassembly of <code object largestPower at 0x7f2b0163dc90, f script_not_found : None
    x = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    while n :						      2 STORE_FAST 2 ( x )					    2 STORE_FAST 2 ( x )					  
	n /= p						      								    								  
	x += n						      3 4 SETUP_LOOP 24 ( to 30 )				    3 4 SETUP_LOOP 24 ( to 30 )					  
    return x						      >> 6 LOAD_FAST 0 ( n )					    >> 6 LOAD_FAST 0 ( n )					  
							      8 POP_JUMP_IF_FALSE 28					    8 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      4 10 LOAD_FAST 0 ( n )					    4 10 LOAD_FAST 0 ( n )					  
							      12 LOAD_FAST 1 ( p )					    12 LOAD_FAST 1 ( p )					  
							      14 INPLACE_TRUE_DIVIDE					    14 INPLACE_TRUE_DIVIDE					  
							      16 STORE_FAST 0 ( n )					    16 STORE_FAST 0 ( n )					  
							      								    								  
							      5 18 LOAD_FAST 2 ( x )					    5 18 LOAD_FAST 2 ( x )					  
							      20 LOAD_FAST 0 ( n )					    20 LOAD_FAST 0 ( n )					  
							      22 INPLACE_ADD						    22 INPLACE_ADD						  
							      24 STORE_FAST 2 ( x )					    24 STORE_FAST 2 ( x )					  
							      26 JUMP_ABSOLUTE 6					    26 JUMP_ABSOLUTE 6						  
							      >> 28 POP_BLOCK						    >> 28 POP_BLOCK						  
							      								    								  
							      6 >> 30 LOAD_FAST 2 ( x )					    6 >> 30 LOAD_FAST 2 ( x )					  
							      32 RETURN_VALUE NEW_LINE					    32 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
def find ( n , k ) :					      Disassembly of <code object find at 0x7f33e2649a50, file "<di Disassembly of <code object find at 0x7f2b0163dc90, file "<di success : identical to gold
    if ( n + 1 >= k ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return ( k - 1 )				      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    else :						      4 BINARY_ADD						    4 BINARY_ADD						  
	return ( 2 * n + 1 - k )			      6 LOAD_FAST 1 ( k )					    6 LOAD_FAST 1 ( k )						  
							      8 COMPARE_OP 5 ( >= )					    8 COMPARE_OP 5 ( >= )					  
							      10 POP_JUMP_IF_FALSE 20					    10 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 12 LOAD_FAST 1 ( k )					    3 12 LOAD_FAST 1 ( k )					  
							      14 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      5 >> 20 LOAD_CONST 2 ( 2 )				    5 >> 20 LOAD_CONST 2 ( 2 )					  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 LOAD_FAST 1 ( k )					    30 LOAD_FAST 1 ( k )					  
							      32 BINARY_SUBTRACT					    32 BINARY_SUBTRACT						  
							      34 RETURN_VALUE						    34 RETURN_VALUE						  
							      36 LOAD_CONST 0 ( None )					    36 LOAD_CONST 0 ( None )					  
							      38 RETURN_VALUE NEW_LINE					    38 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10
--							      --							    --								  --
def round ( n ) :					      Disassembly of <code object round at 0x7f33e2644930, file "<d Disassembly of <code object round at 0x7f2b0163dc90, file "<d script_not_found : None
    a = ( n // 10 ) * 10				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
    b = a + 10						      2 LOAD_CONST 1 ( 10 )					    2 LOAD_CONST 1 ( 10 )					  
    return ( b if n - a > b - n else a )		      4 BINARY_FLOOR_DIVIDE					    4 BINARY_FLOOR_DIVIDE					  
							      6 LOAD_CONST 1 ( 10 )					    6 LOAD_CONST 1 ( 10 )					  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 STORE_FAST 1 ( a )					    10 STORE_FAST 1 ( a )					  
							      								    								  
							      3 12 LOAD_FAST 1 ( a )					    3 12 LOAD_FAST 1 ( a )					  
							      14 LOAD_CONST 1 ( 10 )					    14 LOAD_CONST 1 ( 10 )					  
							      16 BINARY_ADD						    16 BINARY_ADD						  
							      18 STORE_FAST 2 ( b )					    18 STORE_FAST 2 ( b )					  
							      								    								  
							      4 20 LOAD_FAST 0 ( n )					    4 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_FAST 1 ( a )					    22 LOAD_FAST 1 ( a )					  
							      24 BINARY_SUBTRACT					    24 BINARY_SUBTRACT						  
							      26 LOAD_FAST 2 ( b )					    26 LOAD_FAST 2 ( b )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_FAST 0 ( n )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 COMPARE_OP 4 ( > )					    32 COMPARE_OP 4 ( > )					  
							      34 POP_JUMP_IF_FALSE 40					    34 POP_JUMP_IF_FALSE 40					  
							      36 LOAD_FAST 2 ( b )					    36 LOAD_FAST 2 ( b )					  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      >> 40 LOAD_FAST 1 ( a )					    >> 40 LOAD_FAST 1 ( a )					  
							      42 RETURN_VALUE NEW_LINE					    42 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def sumDigits ( no ) :					      Disassembly of <code object sumDigits at 0x7f33e2644930, file Disassembly of <code object sumDigits at 0x7f2b0163dc90, file error : Traceback (most recent call last):   File
    return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 2 0 LOAD_FAST 0 ( no )					    2 0 LOAD_FAST 0 ( no )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in sumDigits TypeError: unsupp
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  orted operand type(s) for +: 'function' and 'int'
							      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      >> 12 LOAD_GLOBAL 0 ( int )				    >> 12 LOAD_GLOBAL 0 ( int )					  
							      14 LOAD_FAST 0 ( no )					    14 LOAD_FAST 0 ( no )					  
							      16 LOAD_CONST 2 ( 10 )					    16 LOAD_CONST 2 ( 10 )					  
							      18 BINARY_MODULO						    18 BINARY_MODULO						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 LOAD_GLOBAL 1 ( sumDigits )				    22 LOAD_GLOBAL 1 ( sumDigits )				  
							      24 LOAD_GLOBAL 0 ( int )					    24 LOAD_GLOBAL 0 ( int )					  
							      26 LOAD_FAST 0 ( no )					    26 LOAD_FAST 0 ( no )					  
							      28 LOAD_CONST 2 ( 10 )					    28 LOAD_CONST 2 ( 10 )					  
							      30 BINARY_TRUE_DIVIDE					    30 BINARY_TRUE_DIVIDE					  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 CALL_FUNCTION 1					    34 BINARY_ADD						  
							      36 BINARY_ADD						    36 RETURN_VALUE NEW_LINE					  
							      38 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
def addOne ( x ) :					      Disassembly of <code object addOne at 0x7f33e2649a50, file "< Disassembly of <code object addOne at 0x7f2b0163dc90, file "< failure : #Results: 3, 10
    m = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    while ( x & m ) :					      2 STORE_FAST 1 ( m )					    2 STORE_FAST 1 ( m )					  
	x = x ^ m					      								    								  
	m <<= 1						      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 SETUP_LOOP 28 ( to 34 )					  
    x = x ^ m						      >> 6 LOAD_FAST 0 ( x )					    >> 6 LOAD_FAST 0 ( x )					  
    return x						      8 LOAD_FAST 1 ( m )					    8 LOAD_FAST 1 ( m )						  
							      10 BINARY_AND						    10 BINARY_AND						  
							      12 POP_JUMP_IF_FALSE 32					    12 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      4 14 LOAD_FAST 0 ( x )					    4 14 LOAD_FAST 0 ( x )					  
							      16 LOAD_FAST 1 ( m )					    16 LOAD_FAST 1 ( m )					  
							      18 BINARY_XOR						    18 BINARY_XOR						  
							      20 STORE_FAST 0 ( x )					    20 STORE_FAST 0 ( x )					  
							      								    								  
							      5 22 LOAD_FAST 1 ( m )					    5 22 LOAD_FAST 1 ( m )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 1 ( 1 )					  
							      26 INPLACE_LSHIFT						    26 INPLACE_SUBTRACT						  
							      28 STORE_FAST 1 ( m )					    28 STORE_FAST 1 ( m )					  
							      30 JUMP_ABSOLUTE 6					    30 JUMP_ABSOLUTE 6						  
							      >> 32 POP_BLOCK						    >> 32 POP_BLOCK						  
							      								    								  
							      6 >> 34 LOAD_FAST 0 ( x )					    6 >> 34 LOAD_FAST 0 ( x )					  
							      36 LOAD_FAST 1 ( m )					    36 LOAD_FAST 1 ( m )					  
							      38 BINARY_XOR						    38 BINARY_XOR						  
							      40 STORE_FAST 0 ( x )					    40 STORE_FAST 0 ( x )					  
							      								    								  
							      7 42 LOAD_FAST 0 ( x )					    7 42 LOAD_FAST 0 ( x )					  
							      44 RETURN_VALUE NEW_LINE					    44 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
def Add ( x , y ) :					      Disassembly of <code object Add at 0x7f33e2653ed0, file "<dis Disassembly of <code object Add at 0x7f2b0163dc90, file "<dis error : /bin/bash: line 1:  3775 Segmentation faul
    while ( y != 0 ) :					      2 0 SETUP_LOOP 36 ( to 38 )				    2 0 SETUP_LOOP 28 ( to 30 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	carry = x & y					      >> 2 LOAD_FAST 1 ( y )					    >> 2 LOAD_FAST 1 ( y )					  ataset/bin/python XLM/dis_script.py --script_path
	x = x ^ y					      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	y = carry << 1					      6 COMPARE_OP 3 ( != )					    6 COMPARE_OP 3 ( != )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/ADD_TW
    return x						      8 POP_JUMP_IF_FALSE 36					    8 POP_JUMP_IF_FALSE 28					  O_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS.dis
							      								    								  
							      3 10 LOAD_FAST 0 ( x )					    3 10 LOAD_FAST 0 ( x )					  
							      12 LOAD_FAST 1 ( y )					    12 LOAD_FAST 1 ( y )					  
							      14 BINARY_AND						    14 BINARY_AND						  
							      16 STORE_FAST 2 ( carry )					    16 STORE_FAST 2 ( carry )					  
							      								    								  
							      4 18 LOAD_FAST 0 ( x )					    4 18 LOAD_FAST 0 ( x )					  
							      20 LOAD_FAST 1 ( y )					    20 LOAD_FAST 1 ( y )					  
							      22 BINARY_XOR						    22 BINARY_XOR						  
							      24 STORE_FAST 0 ( x )					    24 STORE_FAST 0 ( x )					  
							      								    								  
							      5 26 LOAD_FAST 2 ( carry )				    5 26 LOAD_FAST 2 ( carry )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_LSHIFT						    30 BINARY_LSHIFT						  
							      32 STORE_FAST 1 ( y )					    32 STORE_FAST 1 ( y )					  
							      34 JUMP_ABSOLUTE 2					    34 JUMP_ABSOLUTE 2						  
							      >> 36 POP_BLOCK						    >> 36 POP_BLOCK						  
							      								    								  
							      6 >> 38 LOAD_FAST 0 ( x )					    6 >> 38 LOAD_FAST 0 ( x )					  
							      40 RETURN_VALUE NEW_LINE					    40 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
def findSum ( N , K ) :					      Disassembly of <code object findSum at 0x7f33e2649a50, file " Disassembly of <code object findSum at 0x7f2b0163dc90, file " error : /bin/bash: line 1:  3778 Segmentation faul
    ans = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 1 , N + 1 ) :			      2 STORE_FAST 2 ( ans )					    2 STORE_FAST 2 ( ans )					  ataset/bin/python XLM/dis_script.py --script_path
	ans += ( i % K ) ;				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    return ans ;					      3 4 SETUP_LOOP 34 ( to 40 )				    3 4 SETUP_LOOP 38 ( to 44 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_S
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  UM_MODULO_K_FIRST_N_NATURAL_NUMBER.dis
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( N )					    10 LOAD_FAST 0 ( N )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 16 ( to 38 )				    >> 20 FOR_ITER 24 ( to 42 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( ans )					    4 24 LOAD_FAST 2 ( ans )					  
							      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
							      28 LOAD_FAST 1 ( K )					    28 LOAD_FAST 1 ( K )					  
							      30 BINARY_MODULO						    30 BINARY_MODULO						  
							      32 INPLACE_ADD						    32 INPLACE_ADD						  
							      34 STORE_FAST 2 ( ans )					    34 STORE_FAST 2 ( ans )					  
							      36 JUMP_ABSOLUTE 20					    36 JUMP_ABSOLUTE 20						  
							      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
							      								    								  
							      5 >> 40 LOAD_FAST 2 ( ans )				    5 >> 40 LOAD_FAST 2 ( ans )					  
							      42 RETURN_VALUE NEW_LINE					    42 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
def leonardo ( n ) :					      Disassembly of <code object leonardo at 0x7f33e2653f60, file  Disassembly of <code object leonardo at 0x7f2b0163dc90, file  script_not_found : None
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;  4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    3 >> 16 LOAD_CONST 2 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_GLOBAL 0 ( leonardo )			    4 >> 20 LOAD_GLOBAL 0 ( leonardo )				  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
							      30 LOAD_GLOBAL 0 ( leonardo )				    30 LOAD_GLOBAL 0 ( leonardo )				  
							      32 LOAD_FAST 0 ( n )					    32 LOAD_FAST 0 ( n )					  
							      34 LOAD_CONST 3 ( 2 )					    34 LOAD_CONST 3 ( 2 )					  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBTRACT						  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 BINARY_ADD						    40 LOAD_CONST 2 ( 1 )					  
							      42 LOAD_CONST 2 ( 1 )					    42 BINARY_ADD						  
							      44 BINARY_ADD						    44 RETURN_VALUE NEW_LINE					  
							      46 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e2653f60, file " Disassembly of <code object findSum at 0x7f2b0163dc90, file " script_not_found : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  
	sum += i * ( n - i )				      								    								  
    return 2 * sum					      3 4 SETUP_LOOP 32 ( to 38 )				    3 4 SETUP_LOOP 34 ( to 40 )					  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 20 ( to 36 )				    >> 14 FOR_ITER 20 ( to 38 )					  
							      16 STORE_FAST 2 ( i )					    16 STORE_FAST 2 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 1 ( sum )					    4 18 LOAD_FAST 1 ( sum )					  
							      20 LOAD_FAST 2 ( i )					    20 LOAD_FAST 2 ( i )					  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_FAST 2 ( i )					    24 LOAD_FAST 2 ( i )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 INPLACE_ADD						    30 INPLACE_ADD						  
							      32 STORE_FAST 1 ( sum )					    32 STORE_FAST 1 ( sum )					  
							      34 JUMP_ABSOLUTE 14					    34 JUMP_ABSOLUTE 14						  
							      >> 36 POP_BLOCK						    36 POP_BLOCK						  
							      								    								  
							      5 >> 38 LOAD_CONST 2 ( 2 )				    5 >> 38 LOAD_CONST 2 ( 2 )					  
							      40 LOAD_FAST 1 ( sum )					    40 LOAD_FAST 1 ( sum )					  
							      42 BINARY_MULTIPLY					    42 BINARY_MULTIPLY						  
							      44 RETURN_VALUE NEW_LINE					    44 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
def findLarger ( arr , n ) :				      Disassembly of <code object findLarger at 0x7f33e2649150, fil Disassembly of <code object findLarger at 0x7f2b0163dc90, fil script_not_found : None
    x = sorted ( arr )					      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  
    for i in range ( n / 2 , n ) :			      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
	print ( x [ i ] ) ,				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
							      6 STORE_FAST 2 ( x )					    6 STORE_FAST 2 ( x )					  
							      								    								  
							      3 8 SETUP_LOOP 36 ( to 46 )				    3 8 SETUP_LOOP 38 ( to 52 )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
							      14 LOAD_CONST 1 ( 2 )					    14 LOAD_CONST 1 ( 2 )					  
							      16 BINARY_TRUE_DIVIDE					    16 BINARY_TRUE_DIVIDE					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 18 ( to 44 )				    >> 24 FOR_ITER 20 ( to 50 )					  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      4 28 LOAD_GLOBAL 2 ( print )				    4 28 LOAD_GLOBAL 2 ( print )				  
							      30 LOAD_FAST 2 ( x )					    30 LOAD_FAST 2 ( x )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 BUILD_TUPLE 1						    38 POP_TOP							  
							      40 POP_TOP						    40 JUMP_ABSOLUTE 24						  
							      42 JUMP_ABSOLUTE 24					    >> 42 POP_BLOCK						  
							      >> 44 POP_BLOCK						    >> 44 LOAD_CONST 0 ( None )					  
							      >> 46 LOAD_CONST 0 ( None )				    46 RETURN_VALUE NEW_LINE					  
							      48 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
def nswp ( n ) :					      Disassembly of <code object nswp at 0x7f33e2649a50, file "<di Disassembly of <code object nswp at 0x7f2b0163dc90, file "<di script_not_found : None
    if n == 0 or n == 1 :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    3 >> 16 LOAD_CONST 2 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_CONST 3 ( 2 )				    4 >> 20 LOAD_CONST 3 ( 2 )					  
							      22 LOAD_GLOBAL 0 ( nswp )					    22 LOAD_GLOBAL 0 ( nswp )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 LOAD_GLOBAL 0 ( nswp )					    34 LOAD_GLOBAL 0 ( nswp )					  
							      36 LOAD_FAST 0 ( n )					    36 LOAD_FAST 0 ( n )					  
							      38 LOAD_CONST 3 ( 2 )					    38 LOAD_CONST 3 ( 2 )					  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBTRACT						  
							      42 CALL_FUNCTION 1					    42 CALL_FUNCTION 1						  
							      44 BINARY_ADD						    44 BINARY_ADD						  
							      46 RETURN_VALUE NEW_LINE					    46 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
def findExtra ( arr1 , arr2 , n ) :			      Disassembly of <code object findExtra at 0x7f33e2644f60, file Disassembly of <code object findExtra at 0x7f2b0163dc90, file error : /bin/bash: line 1:  3792 Segmentation faul
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 38 ( to 40 )				    2 0 SETUP_LOOP 40 ( to 42 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( arr1 [ i ] != arr2 [ i ] ) :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    return i					      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    return n						      6 LOAD_FAST 2 ( n )					    6 LOAD_FAST 2 ( n )						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_I
							      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  NDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARR
							      10 GET_ITER						    10 GET_ITER							  AY.dis
							      >> 12 FOR_ITER 24 ( to 38 )				    >> 12 FOR_ITER 28 ( to 40 )					  
							      14 STORE_FAST 3 ( i )					    14 STORE_FAST 3 ( i )					  
							      								    								  
							      3 16 LOAD_FAST 0 ( arr1 )					    3 16 LOAD_FAST 0 ( arr1 )					  
							      18 LOAD_FAST 3 ( i )					    18 LOAD_FAST 3 ( i )					  
							      20 BINARY_SUBSCR						    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 1 ( arr2 )					    22 LOAD_FAST 1 ( arr2 )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 COMPARE_OP 3 ( != )					    28 COMPARE_OP 3 ( != )					  
							      30 POP_JUMP_IF_FALSE 12					    30 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      4 32 LOAD_FAST 3 ( i )					    4 32 LOAD_FAST 3 ( i )					  
							      34 RETURN_VALUE						    34 RETURN_VALUE						  
							      36 JUMP_ABSOLUTE 12					    36 JUMP_ABSOLUTE 12						  
							      >> 38 POP_BLOCK						    38 POP_BLOCK						  
							      								    >> 40 LOAD_CONST 0 ( None )					  
							      5 >> 40 LOAD_FAST 2 ( n )					    >> 42 WITH_CLEANUP_START					  
							      42 RETURN_VALUE NEW_LINE					    44 WITH_CLEANUP_FINISH					  
							      								    46 END_FINALLY						  
							      								    								  
							      								    5 48 LOAD_FAST 2 ( n )					  
							      								    50 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
def pythagorean_quadruple ( a , b , c , d ) :		      Disassembly of <code object pythagorean_quadruple at 0x7f33e2 Disassembly of <code object pythagorean_quadruple at 0x7f2b01 success : identical to gold
    sum = a * a + b * b + c * c ;			      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    if ( d * d == sum ) :				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
	return True					      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
    else :						      6 LOAD_FAST 1 ( b )					    6 LOAD_FAST 1 ( b )						  
	return False					      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 1 ( b )						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 BINARY_ADD						    12 BINARY_ADD						  
							      14 LOAD_FAST 2 ( c )					    14 LOAD_FAST 2 ( c )					  
							      16 LOAD_FAST 2 ( c )					    16 LOAD_FAST 2 ( c )					  
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 BINARY_ADD						    20 BINARY_ADD						  
							      22 STORE_FAST 4 ( sum )					    22 STORE_FAST 4 ( sum )					  
							      								    								  
							      3 24 LOAD_FAST 3 ( d )					    3 24 LOAD_FAST 3 ( d )					  
							      26 LOAD_FAST 3 ( d )					    26 LOAD_FAST 3 ( d )					  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_FAST 4 ( sum )					    30 LOAD_FAST 4 ( sum )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 40					    34 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      4 36 LOAD_CONST 1 ( True )				    4 36 LOAD_CONST 1 ( True )					  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      								    								  
							      6 >> 40 LOAD_CONST 2 ( False )				    6 >> 40 LOAD_CONST 2 ( False )				  
							      42 RETURN_VALUE						    42 RETURN_VALUE						  
							      44 LOAD_CONST 0 ( None )					    44 LOAD_CONST 0 ( None )					  
							      46 RETURN_VALUE NEW_LINE					    46 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS      PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
def isProduct ( arr , n , x ) :				      Disassembly of <code object isProduct at 0x7f33e26494b0, file Disassembly of <code object isProduct at 0x7f2b0163dc90, file script_not_found : None
    for i in arr :					      2 0 SETUP_LOOP 42 ( to 44 )				    2 0 SETUP_LOOP 40 ( to 42 )					  
	for j in arr :					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
	    if i * j == x :				      4 GET_ITER						    4 GET_ITER							  
		return True				      >> 6 FOR_ITER 34 ( to 42 )				    >> 6 FOR_ITER 32 ( to 40 )					  
    return False					      8 STORE_FAST 3 ( i )					    8 STORE_FAST 3 ( i )					  
							      								    								  
							      3 10 SETUP_LOOP 28 ( to 40 )				    3 10 SETUP_LOOP 30 ( to 38 )				  
							      12 LOAD_FAST 0 ( arr )					    12 LOAD_FAST 0 ( arr )					  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 20 ( to 38 )				    >> 16 FOR_ITER 22 ( to 36 )					  
							      18 STORE_FAST 4 ( j )					    18 STORE_FAST 4 ( j )					  
							      								    								  
							      4 20 LOAD_FAST 3 ( i )					    4 20 LOAD_FAST 3 ( i )					  
							      22 LOAD_FAST 4 ( j )					    22 LOAD_FAST 4 ( j )					  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 LOAD_FAST 2 ( x )					    26 LOAD_FAST 2 ( x )					  
							      28 COMPARE_OP 2 ( == )					    28 COMPARE_OP 2 ( == )					  
							      30 POP_JUMP_IF_FALSE 16					    30 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      5 32 LOAD_CONST 1 ( True )				    5 32 LOAD_CONST 1 ( True )					  
							      34 RETURN_VALUE						    34 RETURN_VALUE						  
							      36 JUMP_ABSOLUTE 16					    >> 36 JUMP_ABSOLUTE 16					  
							      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
							      >> 40 JUMP_ABSOLUTE 6					    >> 40 JUMP_ABSOLUTE 6					  
							      >> 42 POP_BLOCK						    >> 42 POP_BLOCK						  
							      								    								  
							      6 >> 44 LOAD_CONST 2 ( False )				    6 44 LOAD_CONST 2 ( False )					  
							      46 RETURN_VALUE NEW_LINE					    46 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
def first ( str ) :					      Disassembly of <code object first at 0x7f33e2644f60, file "<d Disassembly of <code object first at 0x7f2b0163dc90, file "<d error : /bin/bash: line 1:  3796 Segmentation faul
    for i in range ( 0 , len ( str ) ) :		      2 0 SETUP_LOOP 42 ( to 44 )				    2 0 SETUP_LOOP 46 ( to 48 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( str [ i ].istitle ( ) ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    return str [ i ]				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    return 0						      6 LOAD_GLOBAL 1 ( len )					    6 LOAD_GLOBAL 1 ( len )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIRST_
							      8 LOAD_FAST 0 ( str )					    8 LOAD_FAST 0 ( str )					  UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSI
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  VE.dis
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 24 ( to 42 )				    >> 16 FOR_ITER 28 ( to 46 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 1 ( i )					  
							      								    								  
							      3 20 LOAD_FAST 0 ( str )					    3 20 LOAD_FAST 0 ( str )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 1 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_METHOD 2 ( istitle )				    26 LOAD_METHOD 2 ( istitle )				  
							      28 CALL_METHOD 0						    28 CALL_METHOD 0						  
							      30 POP_JUMP_IF_FALSE 16					    30 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      4 32 LOAD_FAST 0 ( str )					    4 32 LOAD_FAST 0 ( str )					  
							      34 LOAD_FAST 1 ( i )					    34 LOAD_FAST 1 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      40 JUMP_ABSOLUTE 16					    40 JUMP_ABSOLUTE 16						  
							      >> 42 POP_BLOCK						    >> 42 POP_BLOCK						  
							      								    								  
							      5 >> 44 LOAD_CONST 1 ( 0 )				    5 >> 44 LOAD_CONST 1 ( 0 )					  
							      46 RETURN_VALUE NEW_LINE					    46 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
def divisorSum ( n ) :					      Disassembly of <code object divisorSum at 0x7f33e26494b0, fil Disassembly of <code object divisorSum at 0x7f2b0164d390, fil success : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  
	sum += int ( n / i ) * i			      								    								  
    return int ( sum )					      3 4 SETUP_LOOP 42 ( to 48 )				    3 4 SETUP_LOOP 44 ( to 50 )					  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 24 ( to 46 )				    >> 20 FOR_ITER 28 ( to 48 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 1 ( sum )					    4 24 LOAD_FAST 1 ( sum )					  
							      26 LOAD_GLOBAL 1 ( int )					    26 LOAD_GLOBAL 1 ( int )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_FAST 0 ( n )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 BINARY_TRUE_DIVIDE					    32 BINARY_TRUE_DIVIDE					  
							      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 LOAD_FAST 2 ( i )					    36 LOAD_FAST 2 ( i )					  
							      38 BINARY_MULTIPLY					    38 BINARY_MULTIPLY						  
							      40 INPLACE_ADD						    40 INPLACE_ADD						  
							      42 STORE_FAST 1 ( sum )					    42 STORE_FAST 1 ( sum )					  
							      44 JUMP_ABSOLUTE 20					    44 JUMP_ABSOLUTE 20						  
							      >> 46 POP_BLOCK						    >> 46 POP_BLOCK						  
							      								    								  
							      5 >> 48 LOAD_GLOBAL 1 ( int )				    5 48 LOAD_GLOBAL 1 ( int )					  
							      50 LOAD_FAST 1 ( sum )					    50 LOAD_FAST 1 ( sum )					  
							      52 CALL_FUNCTION 1					    52 CALL_FUNCTION 1						  
							      54 RETURN_VALUE NEW_LINE					    54 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def myCopy ( s1 , s2 , index ) :			      Disassembly of <code object myCopy at 0x7f33e2653f60, file "< Disassembly of <code object myCopy at 0x7f2b01639660, file "< success : identical to gold
    s2 [ index ] = s1 [ index ] ;			      2 0 LOAD_FAST 0 ( s1 )					    2 0 LOAD_FAST 0 ( s1 )					  
    if ( index == len ( s1 ) - 1 ) :			      2 LOAD_FAST 2 ( index )					    2 LOAD_FAST 2 ( index )					  
	return ;					      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
    myCopy ( s1 , s2 , index + 1 ) ;			      6 LOAD_FAST 1 ( s2 )					    6 LOAD_FAST 1 ( s2 )					  
							      8 LOAD_FAST 2 ( index )					    8 LOAD_FAST 2 ( index )					  
							      10 STORE_SUBSCR						    10 STORE_SUBSCR						  
							      								    								  
							      3 12 LOAD_FAST 2 ( index )				    3 12 LOAD_FAST 2 ( index )					  
							      14 LOAD_GLOBAL 0 ( len )					    14 LOAD_GLOBAL 0 ( len )					  
							      16 LOAD_FAST 0 ( s1 )					    16 LOAD_FAST 0 ( s1 )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 LOAD_CONST 1 ( 1 )					    20 LOAD_CONST 1 ( 1 )					  
							      22 BINARY_SUBTRACT					    22 BINARY_SUBTRACT						  
							      24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
							      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      4 28 LOAD_CONST 0 ( None )				    4 28 LOAD_CONST 0 ( None )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      5 >> 32 LOAD_GLOBAL 1 ( myCopy )				    5 >> 32 LOAD_GLOBAL 1 ( myCopy )				  
							      34 LOAD_FAST 0 ( s1 )					    34 LOAD_FAST 0 ( s1 )					  
							      36 LOAD_FAST 1 ( s2 )					    36 LOAD_FAST 1 ( s2 )					  
							      38 LOAD_FAST 2 ( index )					    38 LOAD_FAST 2 ( index )					  
							      40 LOAD_CONST 1 ( 1 )					    40 LOAD_CONST 1 ( 1 )					  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 CALL_FUNCTION 3					    44 CALL_FUNCTION 3						  
							      46 POP_TOP						    46 POP_TOP							  
							      48 LOAD_CONST 0 ( None )					    48 LOAD_CONST 0 ( None )					  
							      50 RETURN_VALUE NEW_LINE					    50 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
def allCharactersSame ( s ) :				      Disassembly of <code object allCharactersSame at 0x7f33e2653e Disassembly of <code object allCharactersSame at 0x7f2b016396 error : /bin/bash: line 1:  3821 Segmentation faul
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 1 , n ) :				      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ataset/bin/python XLM/dis_script.py --script_path
	if s [ i ] != s [ 0 ] :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    return False				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/QUICK_
    return True						      								    								  WAY_CHECK_CHARACTERS_STRING.dis
							      3 8 SETUP_LOOP 38 ( to 48 )				    3 8 SETUP_LOOP 34 ( to 44 )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 24 ( to 46 )				    >> 20 FOR_ITER 20 ( to 42 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 0 ( s )					    4 24 LOAD_FAST 0 ( s )					  
							      26 LOAD_FAST 2 ( i )					    26 LOAD_FAST 2 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 0 ( s )					    30 LOAD_FAST 0 ( s )					  
							      32 LOAD_CONST 2 ( 0 )					    32 LOAD_CONST 2 ( 0 )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 20					    38 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      5 40 LOAD_CONST 3 ( False )				    5 40 LOAD_CONST 3 ( False )					  
							      42 RETURN_VALUE						    42 RETURN_VALUE						  
							      44 JUMP_ABSOLUTE 20					    44 JUMP_ABSOLUTE 20						  
							      >> 46 POP_BLOCK						    >> 46 POP_BLOCK						  
							      								    								  
							      6 >> 48 LOAD_CONST 4 ( True )				    6 >> 48 LOAD_CONST 4 ( True )				  
							      50 RETURN_VALUE NEW_LINE					    50 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
def count ( s , c ) :					      Disassembly of <code object count at 0x7f33e2653ed0, file "<d Disassembly of <code object count at 0x7f2b0163dc90, file "<d error : XXX lineno: 2, opcode: 0 Traceback (most r
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  ecent call last):   File "XLM/dis_script.py", line
    for i in range ( len ( s ) ) :			      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					   60, in <module>     exec(item)   File "main.py",
	if ( s [ i ] == c ) :				      								    								  line 32, in <module>	 File "<dis>", line 2, in co
	    res = res + 1				      3 4 SETUP_LOOP 40 ( to 46 )				    3 4 SETUP_LOOP 46 ( to 52 )					  unt SystemError: unknown opcode
    return res						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_GLOBAL 1 ( len )					  
							      10 LOAD_FAST 0 ( s )					    10 LOAD_FAST 0 ( s )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 24 ( to 44 )				    >> 18 FOR_ITER 30 ( to 50 )					  
							      20 STORE_FAST 3 ( i )					    20 STORE_FAST 3 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( s )					    4 22 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_FAST 1 ( c )					    28 LOAD_FAST 1 ( c )					  
							      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 18					    32 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      5 34 LOAD_FAST 2 ( res )					    5 34 LOAD_FAST 2 ( res )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 STORE_FAST 2 ( res )					    40 STORE_FAST 2 ( res )					  
							      42 JUMP_ABSOLUTE 18					    42 JUMP_ABSOLUTE 18						  
							      >> 44 POP_BLOCK						    >> 44 POP_BLOCK						  
							      								    								  
							      6 >> 46 LOAD_FAST 2 ( res )				    6 >> 46 LOAD_FAST 2 ( res )					  
							      48 RETURN_VALUE NEW_LINE					    48 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
def <<unk>> ways ( n , k ) :				      Disassembly of <code object <<unk>> ways at 0x7f33e2644f60, f Disassembly of <code object <unk> ways at 0x7f2b01639660, fil success : None
    p = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    if ( k % 2 ) :					      2 STORE_FAST 2 ( p )					    2 STORE_FAST 2 ( p )					  
	p = - 1						      								    								  
    return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	      3 4 LOAD_FAST 1 ( k )					    3 4 LOAD_FAST 1 ( k )					  
							      6 LOAD_CONST 2 ( 2 )					    6 LOAD_CONST 2 ( 2 )					  
							      8 BINARY_MODULO						    8 BINARY_MODULO						  
							      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      4 12 LOAD_CONST 3 ( - 1 )					    4 12 LOAD_CONST 3 ( - 1 )					  
							      14 STORE_FAST 2 ( p )					    14 STORE_FAST 2 ( p )					  
							      								    								  
							      5 >> 16 LOAD_GLOBAL 0 ( pow )				    5 >> 16 LOAD_GLOBAL 0 ( pow )				  
							      18 LOAD_FAST 0 ( n )					    18 LOAD_FAST 0 ( n )					  
							      20 LOAD_CONST 1 ( 1 )					    20 LOAD_CONST 1 ( 1 )					  
							      22 BINARY_SUBTRACT					    22 BINARY_SUBTRACT						  
							      24 LOAD_FAST 1 ( k )					    24 LOAD_FAST 1 ( k )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 LOAD_FAST 2 ( p )					    28 LOAD_FAST 2 ( p )					  
							      30 LOAD_FAST 0 ( n )					    30 LOAD_FAST 0 ( n )					  
							      32 LOAD_CONST 1 ( 1 )					    32 LOAD_CONST 1 ( 1 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 LOAD_FAST 0 ( n )					    40 LOAD_FAST 0 ( n )					  
							      42 BINARY_TRUE_DIVIDE					    42 BINARY_TRUE_DIVIDE					  
							      44 RETURN_VALUE NEW_LINE					    44 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
def reverse ( string ) :				      Disassembly of <code object reverse at 0x7f33e26494b0, file " Disassembly of <code object reverse at 0x7f2b0163dc90, file " script_not_found : None
    if len ( string ) == 0 :				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
	return						      2 LOAD_FAST 0 ( string )					    2 LOAD_FAST 0 ( string )					  
    temp = string [ 0 ]					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    reverse ( string [ 1 : ] )				      6 LOAD_CONST 1 ( 0 )					    6 LOAD_CONST 1 ( 0 )					  
    print ( temp , end = '' )				      8 COMPARE_OP 2 ( == )					    8 COMPARE_OP 2 ( == )					  
							      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      3 12 LOAD_CONST 0 ( None )				    3 12 LOAD_CONST 0 ( None )					  
							      14 RETURN_VALUE						    14 RETURN_VALUE						  
							      								    								  
							      4 >> 16 LOAD_FAST 0 ( string )				    4 >> 16 LOAD_FAST 0 ( string )				  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  
							      20 BINARY_SUBSCR						    20 BINARY_SUBSCR						  
							      22 STORE_FAST 1 ( temp )					    22 STORE_FAST 1 ( temp )					  
							      								    								  
							      5 24 LOAD_GLOBAL 1 ( reverse )				    5 24 LOAD_GLOBAL 1 ( reverse )				  
							      26 LOAD_FAST 0 ( string )					    26 LOAD_FAST 0 ( string )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_CONST 0 ( None )					    30 LOAD_CONST 0 ( None )					  
							      32 BUILD_SLICE 2						    32 BUILD_SLICE 2						  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 POP_TOP						    38 POP_TOP							  
							      								    								  
							      6 40 LOAD_GLOBAL 2 ( print )				    6 40 LOAD_GLOBAL 2 ( print )				  
							      42 LOAD_FAST 1 ( temp )					    42 LOAD_FAST 1 ( temp )					  
							      44 LOAD_CONST 3 ( '' )					    44 LOAD_CONST 3 ( '' )					  
							      46 LOAD_CONST 4 ( ( 'end' , ) )				    46 LOAD_CONST 4 ( ( 'end' , ) )				  
							      48 CALL_FUNCTION_KW 2					    48 CALL_FUNCTION_KW 2					  
							      50 POP_TOP						    50 POP_TOP							  
							      52 LOAD_CONST 0 ( None )					    52 LOAD_CONST 0 ( None )					  
							      54 RETURN_VALUE NEW_LINE					    54 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
def kLargest ( arr , k ) :				      Disassembly of <code object kLargest at 0x7f33e2653f60, file  Disassembly of <code object kLargest at 0x7f2b0163dc90, file  script_not_found : None
    arr.sort ( reverse = True )				      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    for i in range ( k ) :				      2 LOAD_ATTR 0 ( sort )					    2 LOAD_ATTR 0 ( sort )					  
	print ( arr [ i ] , end = " " )			      4 LOAD_CONST 1 ( True )					    4 LOAD_CONST 1 ( True )					  
							      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 LOAD_CONST 2 ( ( 'reverse' , ) )				  
							      8 CALL_FUNCTION_KW 1					    8 CALL_FUNCTION_KW 1					  
							      10 POP_TOP						    10 POP_TOP							  
							      								    								  
							      3 12 SETUP_LOOP 32 ( to 46 )				    3 12 SETUP_LOOP 32 ( to 46 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_FAST 1 ( k )					    16 LOAD_FAST 1 ( k )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 20 ( to 44 )				    >> 22 FOR_ITER 20 ( to 44 )					  
							      24 STORE_FAST 2 ( i )					    24 STORE_FAST 2 ( i )					  
							      								    								  
							      4 26 LOAD_GLOBAL 2 ( print )				    4 26 LOAD_GLOBAL 2 ( print )				  
							      28 LOAD_FAST 0 ( arr )					    28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_CONST 3 ( ' ' )					    34 LOAD_CONST 3 ( ' ' )					  
							      36 LOAD_CONST 4 ( ( 'end' , ) )				    36 LOAD_CONST 4 ( ( 'end' , ) )				  
							      38 CALL_FUNCTION_KW 2					    38 CALL_FUNCTION_KW 2					  
							      40 POP_TOP						    40 POP_TOP							  
							      42 JUMP_ABSOLUTE 22					    42 JUMP_ABSOLUTE 22						  
							      >> 44 POP_BLOCK						    >> 44 POP_BLOCK						  
							      >> 46 LOAD_CONST 0 ( None )				    >> 46 LOAD_CONST 0 ( None )					  
							      48 RETURN_VALUE NEW_LINE					    48 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
def mod ( num , a ) :					      Disassembly of <code object mod at 0x7f33e2649a50, file "<dis Disassembly of <code object mod at 0x7f2b0163dc90, file "<dis script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , len ( num ) ) :		      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  
	res = ( res * 10 + int ( num [ i ] ) ) % a ;	      								    								  
    return res						      3 4 SETUP_LOOP 46 ( to 52 )				    3 4 SETUP_LOOP 46 ( to 52 )					  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_GLOBAL 1 ( len )					    10 LOAD_GLOBAL 1 ( len )					  
							      12 LOAD_FAST 0 ( num )					    12 LOAD_FAST 0 ( num )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 28 ( to 50 )				    >> 20 FOR_ITER 30 ( to 50 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( res )					    4 24 LOAD_FAST 2 ( res )					  
							      26 LOAD_CONST 2 ( 10 )					    26 LOAD_CONST 2 ( 10 )					  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_GLOBAL 2 ( int )					    30 LOAD_GLOBAL 2 ( int )					  
							      32 LOAD_FAST 0 ( num )					    32 LOAD_FAST 0 ( num )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 LOAD_FAST 1 ( a )					    42 LOAD_FAST 1 ( a )					  
							      44 BINARY_MODULO						    44 BINARY_MODULO						  
							      46 STORE_FAST 2 ( res )					    46 STORE_FAST 2 ( res )					  
							      48 JUMP_ABSOLUTE 20					    48 JUMP_ABSOLUTE 20						  
							      >> 50 POP_BLOCK						    >> 50 POP_BLOCK						  
							      								    								  
							      5 >> 52 LOAD_FAST 2 ( res )				    5 >> 52 LOAD_FAST 2 ( res )					  
							      54 RETURN_VALUE NEW_LINE					    54 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
def findRoot ( arr , n ) :				      Disassembly of <code object findRoot at 0x7f33e2644930, file  Disassembly of <code object findRoot at 0x7f2b0163dc90, file  script_not_found : None
    root = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( root )					    2 STORE_FAST 2 ( root )					  
	root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	      								    								  
    return root						      3 4 SETUP_LOOP 44 ( to 50 )				    3 4 SETUP_LOOP 46 ( to 52 )					  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 32 ( to 48 )				    >> 14 FOR_ITER 38 ( to 50 )					  
							      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 2 ( root )					    4 18 LOAD_FAST 2 ( root )					  
							      20 LOAD_FAST 0 ( arr )					    20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 0 ( arr )					    30 LOAD_FAST 0 ( arr )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBTRACT						  
							      42 INPLACE_ADD						    42 INPLACE_ADD						  
							      44 STORE_FAST 2 ( root )					    44 STORE_FAST 2 ( root )					  
							      46 JUMP_ABSOLUTE 14					    46 JUMP_ABSOLUTE 14						  
							      >> 48 POP_BLOCK						    48 POP_BLOCK						  
							      								    								  
							      5 >> 50 LOAD_FAST 2 ( root )				    5 >> 50 LOAD_FAST 2 ( root )				  
							      52 RETURN_VALUE NEW_LINE					    52 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
def countSetBitsRec ( num ) :				      Disassembly of <code object countSetBitsRec at 0x7f33e2644f60 Disassembly of <code object countSetBitsRec at 0x7f2b01639f60 script_not_found : None
    nibble = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    if ( 0 == num ) :					      2 STORE_FAST 1 ( nibble )					    2 STORE_FAST 1 ( can ble )					  
	return num_to_bits [ 0 ] ;			      								    								  
    nibble = num & 0xf ;				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
    return num_to_bits [ nibble ] + countSetBitsRec ( num >>  6 LOAD_FAST 0 ( num )					    6 LOAD_FAST 0 ( num )					  
							      8 COMPARE_OP 2 ( == )					    8 COMPARE_OP 2 ( == )					  
							      10 POP_JUMP_IF_FALSE 20					    10 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      4 12 LOAD_GLOBAL 0 ( num_to_bits )			    4 12 LOAD_GLOBAL 0 ( num_to_bits )				  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      5 >> 20 LOAD_FAST 0 ( num )				    5 >> 20 LOAD_FAST 0 ( num )					  
							      22 LOAD_CONST 2 ( 15 )					    22 LOAD_CONST 2 ( 1024 )					  
							      24 BINARY_AND						    24 BINARY_AND						  
							      26 STORE_FAST 1 ( nibble )				    26 STORE_FAST 1 ( 12 )					  
							      								    								  
							      6 28 LOAD_GLOBAL 0 ( num_to_bits )			    6 28 LOAD_GLOBAL 0 ( num_to_bits )				  
							      30 LOAD_FAST 1 ( nibble )					    30 LOAD_FAST 1 ( 12 )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_GLOBAL 1 ( countSetBitsRec )			    34 LOAD_GLOBAL 1 ( countSetBitsRec )			  
							      36 LOAD_FAST 0 ( num )					    36 LOAD_FAST 0 ( num )					  
							      38 LOAD_CONST 3 ( 4 )					    38 LOAD_CONST 3 ( 4 )					  
							      40 BINARY_RSHIFT						    40 BINARY_RSHIFT						  
							      42 CALL_FUNCTION 1					    42 CALL_FUNCTION 1						  
							      44 BINARY_ADD						    44 BINARY_ADD						  
							      46 RETURN_VALUE NEW_LINE					    46 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
def calc_Expectation ( a , n ) :			      Disassembly of <code object calc_Expectation at 0x7f33e2649a5 Disassembly of <code object calc_Expectation at 0x7f2b0163966 script_not_found : None
    prb = 1 / n						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    sum = 0						      2 LOAD_FAST 1 ( n )					    2 LOAD_FAST 1 ( n )						  
    for i in range ( 0 , n ) :				      4 BINARY_TRUE_DIVIDE					    4 BINARY_TRUE_DIVIDE					  
	sum += ( a [ i ] * prb )			      6 STORE_FAST 2 ( prb )					    6 STORE_FAST 2 ( prb )					  
    return float ( sum )				      								    								  
							      3 8 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
							      10 STORE_FAST 3 ( sum )					    10 STORE_FAST 3 ( sum )					  
							      								    								  
							      4 12 SETUP_LOOP 34 ( to 48 )				    4 12 SETUP_LOOP 38 ( to 52 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_CONST 2 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 20 ( to 46 )				    >> 24 FOR_ITER 22 ( to 50 )					  
							      26 STORE_FAST 4 ( i )					    26 STORE_FAST 4 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 3 ( sum )					    5 28 LOAD_FAST 3 ( sum )					  
							      30 LOAD_FAST 0 ( a )					    30 LOAD_FAST 0 ( a )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 2 ( prb )					    36 LOAD_FAST 2 ( prb )					  
							      38 BINARY_MULTIPLY					    38 BINARY_MULTIPLY						  
							      40 INPLACE_ADD						    40 INPLACE_ADD						  
							      42 STORE_FAST 3 ( sum )					    42 STORE_FAST 3 ( sum )					  
							      44 JUMP_ABSOLUTE 24					    44 JUMP_ABSOLUTE 24						  
							      >> 46 POP_BLOCK						    >> 46 POP_BLOCK						  
							      								    								  
							      6 >> 48 LOAD_GLOBAL 1 ( float )				    6 >> 48 LOAD_GLOBAL 1 ( float )				  
							      50 LOAD_FAST 3 ( sum )					    50 LOAD_FAST 3 ( sum )					  
							      52 CALL_FUNCTION 1					    52 CALL_FUNCTION 1						  
							      54 RETURN_VALUE NEW_LINE					    54 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
def transpose ( A , B ) :				      Disassembly of <code object transpose at 0x7f33e2644930, file Disassembly of <code object transpose at 0x7f2b0163dc90, file script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 54 ( to 56 )				    2 0 SETUP_LOOP 56 ( to 58 )					  
	for j in range ( N ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    B [ i ] [ j ] = A [ j ] [ i ]		      4 LOAD_GLOBAL 1 ( N )					    4 LOAD_GLOBAL 1 ( N )					  
							      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
							      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 42 ( to 54 )				    >> 10 FOR_ITER 44 ( to 56 )					  
							      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 SETUP_LOOP 36 ( to 52 )				    3 14 SETUP_LOOP 36 ( to 54 )				  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_GLOBAL 0 ( range )					  
							      18 LOAD_GLOBAL 1 ( N )					    18 LOAD_GLOBAL 1 ( N )					  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 24 ( to 50 )				    >> 24 FOR_ITER 24 ( to 52 )					  
							      26 STORE_FAST 3 ( j )					    26 STORE_FAST 3 ( j )					  
							      								    								  
							      4 28 LOAD_FAST 0 ( A )					    4 28 LOAD_FAST 0 ( A )					  
							      30 LOAD_FAST 3 ( j )					    30 LOAD_FAST 3 ( j )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 2 ( i )					    34 LOAD_FAST 2 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 1 ( B )					    38 LOAD_FAST 1 ( B )					  
							      40 LOAD_FAST 2 ( i )					    40 LOAD_FAST 2 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 3 ( j )					    44 LOAD_FAST 1 ( B )					  
							      46 STORE_SUBSCR						    46 LOAD_FAST 2 ( i )					  
							      48 JUMP_ABSOLUTE 24					    48 BINARY_SUBSCR						  
							      >> 50 POP_BLOCK						    50 LOAD_FAST 3 ( j )					  
							      >> 52 JUMP_ABSOLUTE 10					    52 STORE_SUBSCR						  
							      >> 54 POP_BLOCK						    54 JUMP_ABSOLUTE 24						  
							      >> 56 LOAD_CONST 0 ( None )				    >> 56 POP_BLOCK						  
							      58 RETURN_VALUE NEW_LINE					    >> 58 JUMP_ABSOLUTE 10					  
							      								    >> 60 POP_BLOCK						  
							      								    >> 62 LOAD_CONST 0 ( None )					  
							      								    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
def numberOfWays ( x ) :				      Disassembly of <code object numberOfWays at 0x7f33e2653ed0, f Disassembly of <code object numberOfWays at 0x7f2b0163dc90, f script_not_found : None
    if x == 0 or x == 1 :				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    else :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( x )					    8 LOAD_FAST 0 ( x )						  
							      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    3 >> 16 LOAD_CONST 2 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      5 >> 20 LOAD_GLOBAL 0 ( numberOfWays )			    5 >> 20 LOAD_CONST 3 ( numberOfWays ( x - 1 )		  
							      22 LOAD_FAST 0 ( x )					    22 LOAD_FAST 0 ( x )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 CALL_FUNCTION 1					    28 LOAD_FAST 0 ( x )					  
							      30 LOAD_FAST 0 ( x )					    30 LOAD_CONST 2 ( 1 )					  
							      32 LOAD_CONST 2 ( 1 )					    32 BINARY_SUBTRACT						  
							      34 BINARY_SUBTRACT					    34 LOAD_GLOBAL 0 ( numberOfWays )				  
							      36 LOAD_GLOBAL 0 ( numberOfWays )				    36 LOAD_FAST 0 ( x )					  
							      38 LOAD_FAST 0 ( x )					    38 LOAD_CONST 4 ( 2 )					  
							      40 LOAD_CONST 3 ( 2 )					    40 BINARY_SUBTRACT						  
							      42 BINARY_SUBTRACT					    42 CALL_FUNCTION 1						  
							      44 CALL_FUNCTION 1					    44 BINARY_MULTIPLY						  
							      46 BINARY_MULTIPLY					    46 BINARY_ADD						  
							      48 BINARY_ADD						    48 RETURN_VALUE						  
							      50 RETURN_VALUE						    50 LOAD_CONST 0 ( None )					  
							      52 LOAD_CONST 0 ( None )					    52 RETURN_VALUE NEW_LINE					  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
def getMissingNo ( a , n ) :				      Disassembly of <code object getMissingNo at 0x7f33e2644930, f Disassembly of <code object getMissingNo at 0x7f2b0163dc90, f error : /bin/bash: line 1:  3849 Segmentation faul
    i , total = 0 , 1					      2 0 LOAD_CONST 1 ( ( 0 , 1 ) )				    2 0 LOAD_CONST 1 ( ( 0 , 1 ) )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 2 , n + 2 ) :			      2 UNPACK_SEQUENCE 2					    2 UNPACK_SEQUENCE 2						  ataset/bin/python XLM/dis_script.py --script_path
	total += i					      4 STORE_FAST 2 ( i )					    4 STORE_FAST 2 ( i )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	total -= a [ i - 2 ]				      6 STORE_FAST 3 ( total )					    6 STORE_FAST 3 ( total )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_T
    return total					      								    								  HE_MISSING_NUMBER_1.dis
							      3 8 SETUP_LOOP 46 ( to 56 )				    3 8 SETUP_LOOP 42 ( to 52 )					  
							      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
							      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 2 ( 2 )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 LOAD_CONST 2 ( 2 )					    16 LOAD_CONST 2 ( 2 )					  
							      18 BINARY_ADD						    18 BINARY_ADD						  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 28 ( to 54 )				    >> 24 FOR_ITER 26 ( to 50 )					  
							      26 STORE_FAST 2 ( i )					    26 STORE_FAST 2 ( i )					  
							      								    								  
							      4 28 LOAD_FAST 3 ( total )				    4 28 LOAD_FAST 3 ( total )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 INPLACE_ADD						    32 INPLACE_ADD						  
							      34 STORE_FAST 3 ( total )					    34 STORE_FAST 3 ( total )					  
							      								    								  
							      5 36 LOAD_FAST 3 ( total )				    5 36 LOAD_FAST 3 ( total )					  
							      38 LOAD_FAST 0 ( a )					    38 LOAD_FAST 0 ( a )					  
							      40 LOAD_FAST 2 ( i )					    40 LOAD_FAST 2 ( i )					  
							      42 LOAD_CONST 2 ( 2 )					    42 LOAD_CONST 2 ( 2 )					  
							      44 BINARY_SUBTRACT					    44 BINARY_SUBTRACT						  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 INPLACE_SUBTRACT					    48 INPLACE_SUBTRACT						  
							      50 STORE_FAST 3 ( total )					    50 STORE_FAST 3 ( total )					  
							      52 JUMP_ABSOLUTE 24					    52 JUMP_ABSOLUTE 24						  
							      >> 54 POP_BLOCK						    >> 54 POP_BLOCK						  
							      								    								  
							      6 >> 56 LOAD_FAST 3 ( total )				    6 >> 56 LOAD_FAST 3 ( total )				  
							      58 RETURN_VALUE NEW_LINE					    58 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
def seiresSum ( n , a ) :				      Disassembly of <code object seiresSum at 0x7f33e2653ed0, file Disassembly of <code object seiresSum at 0x7f2b01639660, file script_not_found : None
    return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [  2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_FAST 1 ( a )					    2 LOAD_FAST 1 ( a )						  
							      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
							      6 BINARY_SUBSCR						    6 BINARY_SUBSCR						  
							      8 LOAD_FAST 1 ( a )					    8 LOAD_FAST 1 ( a )						  
							      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
							      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
							      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
							      16 LOAD_FAST 1 ( a )					    16 LOAD_FAST 1 ( a )					  
							      18 LOAD_CONST 2 ( 2 )					    18 LOAD_CONST 2 ( 2 )					  
							      20 LOAD_FAST 0 ( n )					    20 LOAD_FAST 0 ( n )					  
							      22 BINARY_MULTIPLY					    22 BINARY_MULTIPLY						  
							      24 LOAD_CONST 3 ( 1 )					    24 LOAD_CONST 3 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 1 ( a )					    30 LOAD_FAST 1 ( a )					  
							      32 LOAD_CONST 2 ( 2 )					    32 LOAD_CONST 2 ( 2 )					  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 LOAD_CONST 3 ( 1 )					    38 LOAD_CONST 3 ( 1 )					  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBTRACT						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 BINARY_MULTIPLY					    44 BINARY_MULTIPLY						  
							      46 BINARY_SUBTRACT					    46 LOAD_CONST 2 ( 2 )					  
							      48 BINARY_MULTIPLY					    48 LOAD_FAST 0 ( n )					  
							      50 LOAD_CONST 2 ( 2 )					    50 BINARY_MULTIPLY						  
							      52 LOAD_FAST 0 ( n )					    52 LOAD_CONST 3 ( 1 )					  
							      54 BINARY_MULTIPLY					    54 BINARY_SUBTRACT						  
							      56 LOAD_CONST 3 ( 1 )					    56 BINARY_TRUE_DIVIDE					  
							      58 BINARY_SUBTRACT					    58 RETURN_VALUE NEW_LINE					  
							      60 BINARY_TRUE_DIVIDE					    								  
							      62 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7f33e2653ed0, f Disassembly of <code object nextPowerOf2 at 0x7f2b0164d780, f failure : #Results: 0, 10
    p = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    if ( n and not ( n & ( n - 1 ) ) ) :		      2 STORE_FAST 1 ( p )					    2 STORE_FAST 1 ( p )					  
	return n					      								    								  
    while ( p < n ) :					      3 4 LOAD_FAST 0 ( n )					    3 4 LOAD_FAST 0 ( n )					  
	p <<= 1						      6 POP_JUMP_IF_FALSE 24					    6 POP_JUMP_IF_FALSE 26					  
    return p ;						      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 BINARY_AND						    16 BINARY_AND						  
							      18 POP_JUMP_IF_TRUE 24					    18 POP_JUMP_IF_TRUE 26					  
							      								    								  
							      4 20 LOAD_FAST 0 ( n )					    4 20 LOAD_FAST 0 ( n )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      5 >> 24 SETUP_LOOP 20 ( to 46 )				    5 >> 24 SETUP_LOOP 20 ( to 46 )				  
							      >> 26 LOAD_FAST 1 ( p )					    >> 26 LOAD_FAST 1 ( p )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_FAST 0 ( n )					  
							      30 COMPARE_OP 0 ( < )					    30 COMPARE_OP 0 ( < )					  
							      32 POP_JUMP_IF_FALSE 44					    32 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 34 LOAD_FAST 1 ( p )					    6 34 LOAD_FAST 1 ( p )					  
							      36 LOAD_CONST 1 ( 1 )					    36 RETURN_VALUE						  
							      38 INPLACE_LSHIFT						    38 JUMP_ABSOLUTE 26						  
							      40 STORE_FAST 1 ( p )					    >> 40 POP_BLOCK						  
							      42 JUMP_ABSOLUTE 26					    								  
							      >> 44 POP_BLOCK						    7 42 LOAD_FAST 1 ( p )					  
							      								    44 RETURN_VALUE NEW_LINE					  
							      7 >> 46 LOAD_FAST 1 ( p )					    								  
							      48 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
def findNth ( n ) :					      Disassembly of <code object findNth at 0x7f33e2644f60, file " Disassembly of <code object findNth at 0x7f2b0163dc90, file " success : identical to gold
    nthElement = 19 + ( n - 1 ) * 9			      2 0 LOAD_CONST 1 ( 19 )					    2 0 LOAD_CONST 1 ( 19 )					  
    outliersCount = int ( math.log10 ( nthElement ) ) - 1     2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
    nthElement += 9 * outliersCount			      4 LOAD_CONST 2 ( 1 )					    4 LOAD_CONST 2 ( 1 )					  
    return nthElement					      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
							      8 LOAD_CONST 3 ( 9 )					    8 LOAD_CONST 3 ( 9 )					  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 BINARY_ADD						    12 BINARY_ADD						  
							      14 STORE_FAST 1 ( nthElement )				    14 STORE_FAST 1 ( nthElement )				  
							      								    								  
							      3 16 LOAD_GLOBAL 0 ( int )				    3 16 LOAD_GLOBAL 0 ( int )					  
							      18 LOAD_GLOBAL 1 ( math )					    18 LOAD_GLOBAL 1 ( math )					  
							      20 LOAD_METHOD 2 ( log10 )				    20 LOAD_METHOD 2 ( log10 )					  
							      22 LOAD_FAST 1 ( nthElement )				    22 LOAD_FAST 1 ( nthElement )				  
							      24 CALL_METHOD 1						    24 CALL_METHOD 1						  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 STORE_FAST 2 ( outliersCount )				    32 STORE_FAST 2 ( outliersCount )				  
							      								    								  
							      4 34 LOAD_FAST 1 ( nthElement )				    4 34 LOAD_FAST 1 ( nthElement )				  
							      36 LOAD_CONST 3 ( 9 )					    36 LOAD_CONST 3 ( 9 )					  
							      38 LOAD_FAST 2 ( outliersCount )				    38 LOAD_FAST 2 ( outliersCount )				  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 INPLACE_ADD						    42 INPLACE_ADD						  
							      44 STORE_FAST 1 ( nthElement )				    44 STORE_FAST 1 ( nthElement )				  
							      								    								  
							      5 46 LOAD_FAST 1 ( nthElement )				    5 46 LOAD_FAST 1 ( nthElement )				  
							      48 RETURN_VALUE NEW_LINE					    48 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
def countDyckPaths ( n ) :				      Disassembly of <code object countDyckPaths at 0x7f33e2644930, Disassembly of <code object countDyckPaths at 0x7f2b0164ded0, success : None
    res = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 1 ( res )					    2 STORE_FAST 1 ( res )					  
	res *= ( 2 * n - i )				      								    								  
	res /= ( i + 1 )				      3 4 SETUP_LOOP 46 ( to 52 )				    3 4 SETUP_LOOP 46 ( to 52 )					  
    return res / ( n + 1 )				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 2 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 32 ( to 50 )				    >> 16 FOR_ITER 30 ( to 50 )					  
							      18 STORE_FAST 2 ( i )					    18 STORE_FAST 2 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 1 ( res )					    4 20 LOAD_FAST 1 ( res )					  
							      22 LOAD_CONST 3 ( 2 )					    22 LOAD_CONST 3 ( 2 )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 BINARY_MULTIPLY					    26 BINARY_MULTIPLY						  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 INPLACE_MULTIPLY					    32 INPLACE_MULTIPLY						  
							      34 STORE_FAST 1 ( res )					    34 STORE_FAST 1 ( res )					  
							      								    								  
							      5 36 LOAD_FAST 1 ( res )					    5 36 LOAD_FAST 1 ( res )					  
							      38 LOAD_FAST 2 ( i )					    38 LOAD_FAST 2 ( i )					  
							      40 LOAD_CONST 1 ( 1 )					    40 LOAD_CONST 1 ( 1 )					  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 INPLACE_TRUE_DIVIDE					    44 INPLACE_TRUE_DIVIDE					  
							      46 STORE_FAST 1 ( res )					    46 STORE_FAST 1 ( res )					  
							      48 JUMP_ABSOLUTE 16					    48 JUMP_ABSOLUTE 16						  
							      >> 50 POP_BLOCK						    >> 50 POP_BLOCK						  
							      								    								  
							      6 >> 52 LOAD_FAST 1 ( res )				    6 >> 52 LOAD_FAST 1 ( res )					  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 0 ( n )					  
							      56 LOAD_CONST 1 ( 1 )					    56 LOAD_CONST 1 ( 1 )					  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 BINARY_TRUE_DIVIDE					    60 BINARY_TRUE_DIVIDE					  
							      62 RETURN_VALUE NEW_LINE					    62 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
def sumOfSeries ( n ) :					      Disassembly of <code object sumOfSeries at 0x7f33e2653f60, fi Disassembly of <code object sumOfSeries at 0x7f2b0163dc90, fi error : /bin/bash: line 1:  3871 Segmentation faul
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  ataset/bin/python XLM/dis_script.py --script_path
	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )	      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    return sum						      3 4 SETUP_LOOP 50 ( to 56 )				    3 4 SETUP_LOOP 54 ( to 60 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/SUM_SE
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  RIES_12_32_52_2N_12.dis
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 32 ( to 54 )				    >> 20 FOR_ITER 38 ( to 58 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 1 ( sum )					    4 24 LOAD_FAST 1 ( sum )					  
							      26 LOAD_CONST 3 ( 2 )					    26 LOAD_CONST 3 ( 2 )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 BINARY_MULTIPLY					    30 BINARY_MULTIPLY						  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 LOAD_CONST 3 ( 2 )					    36 LOAD_CONST 3 ( 2 )					  
							      38 LOAD_FAST 2 ( i )					    38 LOAD_FAST 2 ( i )					  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 LOAD_CONST 2 ( 1 )					    42 LOAD_CONST 2 ( 1 )					  
							      44 BINARY_SUBTRACT					    44 BINARY_SUBTRACT						  
							      46 BINARY_MULTIPLY					    46 BINARY_MULTIPLY						  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 STORE_FAST 1 ( sum )					    50 STORE_FAST 1 ( sum )					  
							      52 JUMP_ABSOLUTE 20					    52 JUMP_ABSOLUTE 20						  
							      >> 54 POP_BLOCK						    >> 54 POP_BLOCK						  
							      								    								  
							      5 >> 56 LOAD_FAST 1 ( sum )				    5 >> 56 LOAD_FAST 1 ( sum )					  
							      58 RETURN_VALUE NEW_LINE					    58 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
def lexSmallest ( a , n ) :				      Disassembly of <code object lexSmallest at 0x7f33e2653ed0, fi Disassembly of <code object lexSmallest at 0x7f2b016399c0, fi script_not_found : None
    a.sort ( reverse = True )				      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    answer = ""						      2 LOAD_ATTR 0 ( sort )					    2 LOAD_ATTR 0 ( sort )					  
    for i in range ( n ) :				      4 LOAD_CONST 1 ( True )					    4 LOAD_CONST 1 ( True )					  
	answer += a [ i ]				      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 LOAD_CONST 2 ( ( 'reverse' , ) )				  
    return answer					      8 CALL_FUNCTION_KW 1					    8 CALL_FUNCTION_KW 1					  
							      10 POP_TOP						    10 POP_TOP							  
							      								    								  
							      3 12 LOAD_CONST 3 ( '' )					    3 12 LOAD_CONST 3 ( '' )					  
							      14 STORE_FAST 2 ( answer )				    14 STORE_FAST 2 ( answer )					  
							      								    								  
							      4 16 SETUP_LOOP 28 ( to 46 )				    4 16 SETUP_LOOP 30 ( to 48 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_FAST 1 ( n )					    20 LOAD_FAST 1 ( n )					  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 16 ( to 44 )				    >> 26 FOR_ITER 18 ( to 46 )					  
							      28 STORE_FAST 3 ( i )					    28 STORE_FAST 3 ( i )					  
							      								    								  
							      5 30 LOAD_FAST 2 ( answer )				    5 30 LOAD_FAST 2 ( answer )					  
							      32 LOAD_FAST 0 ( a )					    32 LOAD_FAST 0 ( a )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 INPLACE_ADD						    38 INPLACE_ADD						  
							      40 STORE_FAST 2 ( answer )				    40 STORE_FAST 2 ( answer )					  
							      42 JUMP_ABSOLUTE 26					    42 JUMP_ABSOLUTE 26						  
							      >> 44 POP_BLOCK						    44 POP_BLOCK						  
							      								    								  
							      6 >> 46 LOAD_FAST 2 ( answer )				    6 >> 46 LOAD_FAST 2 ( answer )				  
							      48 RETURN_VALUE NEW_LINE					    48 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
def doublefactorial ( n ) :				      Disassembly of <code object doublefactorial at 0x7f33e2644930 Disassembly of <code object doublefactorial at 0x7f2b0164d270 error : Traceback (most recent call last):   File
    res = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n , - 1 , - 2 ) :			      2 STORE_FAST 1 ( res )					    2 STORE_FAST 1 ( res )					  (item)   File "main.py", line 33, in <module>	  Fi
	if ( i == 0 or i == 1 ) :			      								    								  le "<dis>", line 2, in doublefactorial TypeError:
	    return res ;				      3 4 SETUP_LOOP 48 ( to 54 )				    3 4 SETUP_LOOP 66 ( to 72 )					  unsupported operand type(s) for *=: 'int' and 'ran
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  ge_iterator'
	    res *= i ;					      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 2 ( - 1 )					  
							      12 LOAD_CONST 3 ( - 2 )					    12 LOAD_CONST 2 ( - 2 )					  
							      14 CALL_FUNCTION 3					    14 CALL_FUNCTION 3						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 32 ( to 52 )				    >> 18 FOR_ITER 48 ( to 70 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 2 ( i )					    4 22 LOAD_FAST 2 ( i )					  
							      24 LOAD_CONST 4 ( 0 )					    24 LOAD_CONST 3 ( 0 )					  
							      26 COMPARE_OP 2 ( == )					    26 COMPARE_OP 2 ( == )					  
							      28 POP_JUMP_IF_TRUE 38					    28 POP_JUMP_IF_TRUE 42					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 LOAD_CONST 1 ( 1 )					    32 LOAD_CONST 1 ( 1 )					  
							      34 COMPARE_OP 2 ( == )					    34 COMPARE_OP 2 ( == )					  
							      36 POP_JUMP_IF_FALSE 42					    36 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      5 >> 38 LOAD_FAST 1 ( res )				    5 38 LOAD_FAST 1 ( res )					  
							      40 RETURN_VALUE						    40 RETURN_VALUE						  
							      								    								  
							      7 >> 42 LOAD_FAST 1 ( res )				    7 >> 42 LOAD_FAST 1 ( res )					  
							      44 LOAD_FAST 2 ( i )					    44 LOAD_FAST 2 ( i )					  
							      46 INPLACE_MULTIPLY					    46 INPLACE_MULTIPLY						  
							      48 STORE_FAST 1 ( res )					    48 STORE_FAST 1 ( res )					  
							      50 JUMP_ABSOLUTE 18					    50 JUMP_ABSOLUTE 18						  
							      >> 52 POP_BLOCK						    52 POP_BLOCK						  
							      >> 54 LOAD_CONST 0 ( None )				    54 LOAD_CONST 0 ( None )					  
							      56 RETURN_VALUE NEW_LINE					    >> 56 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI
--							      --							    --								  --
def countObtuseAngles ( a , b , k ) :			      Disassembly of <code object countObtuseAngles at 0x7f33e2644f Disassembly of <code object countObtuseAngles at 0x7f2b016396 script_not_found : None
    c1 = ( b - a ) - 1					      2 0 LOAD_FAST 1 ( b )					    2 0 LOAD_FAST 1 ( b )					  
    c2 = ( k - b ) + ( a - 1 )				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
    if ( c1 == c2 ) :					      4 BINARY_SUBTRACT						    4 BINARY_SUBTRACT						  
	return 0					      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
    return min ( c1 , c2 )				      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
							      10 STORE_FAST 3 ( c1 )					    10 STORE_FAST 3 ( c1 )					  
							      								    								  
							      3 12 LOAD_FAST 2 ( k )					    3 12 LOAD_FAST 2 ( k )					  
							      14 LOAD_FAST 1 ( b )					    14 LOAD_FAST 1 ( b )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 LOAD_FAST 0 ( a )					    18 LOAD_FAST 0 ( a )					  
							      20 LOAD_CONST 1 ( 1 )					    20 LOAD_CONST 1 ( 1 )					  
							      22 BINARY_SUBTRACT					    22 BINARY_SUBTRACT						  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 STORE_FAST 4 ( c2 )					    26 STORE_FAST 4 ( c2 )					  
							      								    								  
							      4 28 LOAD_FAST 3 ( c1 )					    4 28 LOAD_FAST 3 ( c1 )					  
							      30 LOAD_FAST 4 ( c2 )					    30 LOAD_FAST 4 ( c2 )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 40					    34 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      5 36 LOAD_CONST 2 ( 0 )					    5 36 LOAD_CONST 2 ( 0 )					  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      								    								  
							      6 >> 40 LOAD_GLOBAL 0 ( min )				    6 >> 40 LOAD_GLOBAL 0 ( min )				  
							      42 LOAD_FAST 3 ( c1 )					    42 LOAD_FAST 3 ( c1 )					  
							      44 LOAD_FAST 4 ( c2 )					    44 LOAD_FAST 4 ( c2 )					  
							      46 CALL_FUNCTION 2					    46 CALL_FUNCTION 2						  
							      48 RETURN_VALUE NEW_LINE					    48 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
def breakSum ( n ) :					      Disassembly of <code object breakSum at 0x7f33e2649150, file  Disassembly of <code object breakSum at 0x7f2b0163dc90, file  failure : #Results: 3, 10
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return n					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    return max ( ( breakSum ( n // 2 ) + breakSum ( n // 3 )  4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_FAST 0 ( n )					    3 >> 16 LOAD_FAST 0 ( n )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_GLOBAL 0 ( max )				    4 >> 20 LOAD_GLOBAL 0 ( max )				  
							      22 LOAD_GLOBAL 1 ( breakSum )				    22 LOAD_GLOBAL 1 ( breakSum )				  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 3 ( 2 )					    26 LOAD_CONST 3 ( 2 )					  
							      28 BINARY_FLOOR_DIVIDE					    28 BINARY_FLOOR_DIVIDE					  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 LOAD_GLOBAL 1 ( breakSum )				    32 LOAD_GLOBAL 1 ( breakSum )				  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 LOAD_CONST 4 ( 3 )					    36 LOAD_CONST 4 ( 3 )					  
							      38 BINARY_FLOOR_DIVIDE					    38 BINARY_FLOOR_DIVIDE					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 LOAD_GLOBAL 1 ( breakSum )				    44 LOAD_FAST 0 ( n )					  
							      46 LOAD_FAST 0 ( n )					    46 CALL_FUNCTION 2						  
							      48 LOAD_CONST 5 ( 4 )					    48 RETURN_VALUE NEW_LINE					  
							      50 BINARY_FLOOR_DIVIDE					    								  
							      52 CALL_FUNCTION 1					    								  
							      54 BINARY_ADD						    								  
							      56 LOAD_FAST 0 ( n )					    								  
							      58 CALL_FUNCTION 2					    								  
							      60 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
def smallest ( x , y , z ) :				      Disassembly of <code object smallest at 0x7f33e2644f60, file  Disassembly of <code object smallest at 0x7f2b0163dc90, file  script_not_found : None
    c = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    while ( x and y and z ) :				      2 STORE_FAST 3 ( c )					    2 STORE_FAST 3 ( c )					  
	x = x - 1					      								    								  
	y = y - 1					      3 4 SETUP_LOOP 48 ( to 54 )				    3 4 SETUP_LOOP 54 ( to 60 )					  
	z = z - 1					      >> 6 LOAD_FAST 0 ( x )					    >> 6 LOAD_FAST 0 ( x )					  
	c = c + 1					      8 POP_JUMP_IF_FALSE 52					    8 POP_JUMP_IF_FALSE 58					  
    return c						      10 LOAD_FAST 1 ( y )					    10 LOAD_FAST 1 ( y )					  
							      12 POP_JUMP_IF_FALSE 52					    12 POP_JUMP_IF_FALSE 58					  
							      14 LOAD_FAST 2 ( z )					    14 LOAD_FAST 2 ( z )					  
							      16 POP_JUMP_IF_FALSE 52					    16 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      4 18 LOAD_FAST 0 ( x )					    4 18 LOAD_FAST 0 ( x )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 BINARY_SUBTRACT					    22 BINARY_SUBTRACT						  
							      24 STORE_FAST 0 ( x )					    24 STORE_FAST 0 ( x )					  
							      								    								  
							      5 26 LOAD_FAST 1 ( y )					    5 26 LOAD_FAST 1 ( y )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 STORE_FAST 1 ( y )					    32 STORE_FAST 1 ( y )					  
							      								    								  
							      6 34 LOAD_FAST 2 ( z )					    6 34 LOAD_FAST 2 ( z )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 STORE_FAST 2 ( z )					    40 STORE_FAST 2 ( z )					  
							      								    								  
							      7 42 LOAD_FAST 3 ( c )					    7 42 LOAD_FAST 3 ( c )					  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 STORE_FAST 3 ( c )					    48 STORE_FAST 3 ( c )					  
							      50 JUMP_ABSOLUTE 6					    								  
							      >> 52 POP_BLOCK						    8 50 LOAD_FAST 3 ( c )					  
							      								    52 LOAD_CONST 2 ( 1 )					  
							      8 >> 54 LOAD_FAST 3 ( c )					    54 BINARY_ADD						  
							      56 RETURN_VALUE NEW_LINE					    56 STORE_FAST 3 ( c )					  
							      								    								  
							      								    9 >> 58 LOAD_FAST 3 ( c )					  
							      								    60 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T<
--							      --							    --								  --
def isPowerOfTwo ( n ) :				      Disassembly of <code object isPowerOfTwo at 0x7f33e2653ed0, f Disassembly of <code object isPowerOfTwo at 0x7f2b0163dc90, f script_not_found : None
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    while ( n != 1 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	if ( n % 2 != 0 ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	    return False				      								    								  
	n = n // 2					      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
    return True						      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 SETUP_LOOP 36 ( to 50 )				    4 >> 12 SETUP_LOOP 32 ( to 46 )				  
							      >> 14 LOAD_FAST 0 ( n )					    >> 14 LOAD_FAST 0 ( n )					  
							      16 LOAD_CONST 3 ( 1 )					    16 LOAD_CONST 3 ( 1 )					  
							      18 COMPARE_OP 3 ( != )					    18 COMPARE_OP 3 ( != )					  
							      20 POP_JUMP_IF_FALSE 48					    20 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      5 22 LOAD_FAST 0 ( n )					    5 22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 4 ( 2 )					    24 LOAD_CONST 4 ( 2 )					  
							      26 BINARY_MODULO						    26 BINARY_MODULO						  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 1 ( 0 )					  
							      30 COMPARE_OP 3 ( != )					    30 COMPARE_OP 3 ( != )					  
							      32 POP_JUMP_IF_FALSE 38					    32 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      6 34 LOAD_CONST 2 ( False )				    6 34 LOAD_CONST 2 ( False )					  
							      36 RETURN_VALUE						    36 RETURN_VALUE						  
							      								    								  
							      7 >> 38 LOAD_FAST 0 ( n )					    7 >> 38 LOAD_FAST 0 ( n )					  
							      40 LOAD_CONST 4 ( 2 )					    40 LOAD_CONST 4 ( 2 )					  
							      42 BINARY_FLOOR_DIVIDE					    42 BINARY_FLOOR_DIVIDE					  
							      44 STORE_FAST 0 ( n )					    44 STORE_FAST 0 ( n )					  
							      46 JUMP_ABSOLUTE 14					    46 JUMP_ABSOLUTE 14						  
							      >> 48 POP_BLOCK						    >> 48 POP_BLOCK						  
							      								    								  
							      8 >> 50 LOAD_CONST 5 ( True )				    8 >> 50 LOAD_CONST 5 ( True )				  
							      52 RETURN_VALUE NEW_LINE					    52 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRING_BINARY_SEQUENCE				      CONVERT_STRING_BINARY_SEQUENCE				    CONVERT_STRING_BINARY_SEQUENCE				  CONVERT_STRING_BINARY_SEQUENCE
--							      --							    --								  --
def strToBinary ( s ) :					      Disassembly of <code object strToBinary at 0x7f33e2649a50, fi Disassembly of <code object strToBinary at 0x7f2b0164ded0, fi script_not_found : None
    bin_conv = [ ]					      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    for c in s :					      2 STORE_FAST 1 ( bin_conv )				    2 STORE_FAST 1 ( bin_conv )					  
	ascii_val = ord ( c )				      								    								  
	binary_val = bin ( ascii_val )			      3 4 SETUP_LOOP 46 ( to 52 )				    3 4 SETUP_LOOP 48 ( to 54 )					  
	bin_conv.append ( binary_val [ 2 : ] )		      6 LOAD_FAST 0 ( s )					    6 LOAD_FAST 0 ( s )						  
    return ( ' '.join ( bin_conv ) )			      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 38 ( to 50 )				    >> 10 FOR_ITER 40 ( to 52 )					  
							      12 STORE_FAST 2 ( c )					    12 STORE_FAST 2 ( c )					  
							      								    								  
							      4 14 LOAD_GLOBAL 0 ( ord )				    4 14 LOAD_GLOBAL 0 ( ord )					  
							      16 LOAD_FAST 2 ( c )					    16 LOAD_FAST 2 ( c )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 STORE_FAST 3 ( ascii_val )				    20 STORE_FAST 3 ( ascii_val )				  
							      								    								  
							      5 22 LOAD_GLOBAL 1 ( bin )				    5 22 LOAD_GLOBAL 1 ( bin )					  
							      24 LOAD_FAST 3 ( ascii_val )				    24 LOAD_FAST 3 ( ascii_val )				  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 STORE_FAST 4 ( binary_val )				    28 STORE_FAST 4 ( binary_val )				  
							      								    								  
							      6 30 LOAD_FAST 1 ( bin_conv )				    6 30 LOAD_FAST 1 ( bin_conv )				  
							      32 LOAD_METHOD 2 ( append )				    32 LOAD_METHOD 2 ( append )					  
							      34 LOAD_FAST 4 ( binary_val )				    34 LOAD_FAST 4 ( binary_val )				  
							      36 LOAD_CONST 1 ( 2 )					    36 LOAD_CONST 1 ( 2 )					  
							      38 LOAD_CONST 0 ( None )					    38 LOAD_CONST 0 ( None )					  
							      40 BUILD_SLICE 2						    40 BUILD_SLICE 2						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 CALL_METHOD 1						    44 CALL_METHOD 1						  
							      46 POP_TOP						    46 POP_TOP							  
							      48 JUMP_ABSOLUTE 10					    48 JUMP_ABSOLUTE 10						  
							      >> 50 POP_BLOCK						    50 POP_BLOCK						  
							      								    								  
							      7 >> 52 LOAD_CONST 2 ( ' ' )				    7 >> 52 LOAD_CONST 2 ( '' )					  
							      54 LOAD_METHOD 3 ( join )					    54 LOAD_METHOD 3 ( join )					  
							      56 LOAD_FAST 1 ( bin_conv )				    56 LOAD_FAST 1 ( bin_conv )					  
							      58 CALL_METHOD 1						    58 CALL_METHOD 1						  
							      60 RETURN_VALUE NEW_LINE					    60 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
def isDivisible ( n ) :					      Disassembly of <code object isDivisible at 0x7f33e2644930, fi Disassembly of <code object isDivisible at 0x7f2b0163dc90, fi success : identical to gold
    while ( int ( n / 100 ) ) :				      2 0 SETUP_LOOP 52 ( to 54 )				    2 0 SETUP_LOOP 52 ( to 54 )					  
	last_digit = int ( n % 10 )			      >> 2 LOAD_GLOBAL 0 ( int )				    >> 2 LOAD_GLOBAL 0 ( int )					  
	n = int ( n / 10 )				      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
	n += last_digit * 3				      6 LOAD_CONST 1 ( 100 )					    6 LOAD_CONST 1 ( 100 )					  
    return ( n % 29 == 0 )				      8 BINARY_TRUE_DIVIDE					    8 BINARY_TRUE_DIVIDE					  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 POP_JUMP_IF_FALSE 52					    12 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      3 14 LOAD_GLOBAL 0 ( int )				    3 14 LOAD_GLOBAL 0 ( int )					  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_FAST 0 ( n )					  
							      18 LOAD_CONST 2 ( 10 )					    18 LOAD_CONST 2 ( 10 )					  
							      20 BINARY_MODULO						    20 BINARY_MODULO						  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 STORE_FAST 1 ( last_digit )				    24 STORE_FAST 1 ( last_digit )				  
							      								    								  
							      4 26 LOAD_GLOBAL 0 ( int )				    4 26 LOAD_GLOBAL 0 ( int )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_FAST 0 ( n )					  
							      30 LOAD_CONST 2 ( 10 )					    30 LOAD_CONST 2 ( 10 )					  
							      32 BINARY_TRUE_DIVIDE					    32 BINARY_TRUE_DIVIDE					  
							      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 STORE_FAST 0 ( n )					    36 STORE_FAST 0 ( n )					  
							      								    								  
							      5 38 LOAD_FAST 0 ( n )					    5 38 LOAD_FAST 0 ( n )					  
							      40 LOAD_FAST 1 ( last_digit )				    40 LOAD_FAST 1 ( last_digit )				  
							      42 LOAD_CONST 3 ( 3 )					    42 LOAD_CONST 3 ( 3 )					  
							      44 BINARY_MULTIPLY					    44 BINARY_MULTIPLY						  
							      46 INPLACE_ADD						    46 INPLACE_ADD						  
							      48 STORE_FAST 0 ( n )					    48 STORE_FAST 0 ( n )					  
							      50 JUMP_ABSOLUTE 2					    50 JUMP_ABSOLUTE 2						  
							      >> 52 POP_BLOCK						    >> 52 POP_BLOCK						  
							      								    								  
							      6 >> 54 LOAD_FAST 0 ( n )					    6 >> 54 LOAD_FAST 0 ( n )					  
							      56 LOAD_CONST 4 ( 29 )					    56 LOAD_CONST 4 ( 29 )					  
							      58 BINARY_MODULO						    58 BINARY_MODULO						  
							      60 LOAD_CONST 5 ( 0 )					    60 LOAD_CONST 5 ( 0 )					  
							      62 COMPARE_OP 2 ( == )					    62 COMPARE_OP 2 ( == )					  
							      64 RETURN_VALUE NEW_LINE					    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
def zigzag ( n , k ) :					      Disassembly of <code object zigzag at 0x7f33e2644f60, file "< Disassembly of <code object zigzag at 0x7f2b0163dc90, file "< script_not_found : None
    if ( n == 0 and k == 0 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( k == 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 0					      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 16					  
    return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;  8 LOAD_FAST 1 ( k )					    8 LOAD_FAST 1 ( k )						  
							      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 16 LOAD_CONST 2 ( 1 )					    3 >> 16 LOAD_CONST 2 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_FAST 1 ( k )					    4 >> 20 LOAD_FAST 1 ( k )					  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
							      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      5 28 LOAD_CONST 1 ( 0 )					    5 28 LOAD_CONST 1 ( 0 )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      6 >> 32 LOAD_GLOBAL 0 ( zigzag )				    6 >> 32 LOAD_GLOBAL 0 ( zigzag )				  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 LOAD_FAST 1 ( k )					    36 LOAD_FAST 1 ( k )					  
							      38 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 2 ( 1 )					  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBTRACT						  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 LOAD_GLOBAL 0 ( zigzag )				    44 LOAD_GLOBAL 0 ( zigzag )					  
							      46 LOAD_FAST 0 ( n )					    46 LOAD_FAST 0 ( n )					  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_SUBTRACT					    50 BINARY_SUBTRACT						  
							      52 LOAD_FAST 0 ( n )					    52 LOAD_FAST 0 ( n )					  
							      54 LOAD_FAST 1 ( k )					    54 LOAD_FAST 1 ( k )					  
							      56 BINARY_SUBTRACT					    56 BINARY_SUBTRACT						  
							      58 CALL_FUNCTION 2					    58 CALL_FUNCTION 2						  
							      60 BINARY_ADD						    60 BINARY_ADD						  
							      62 RETURN_VALUE NEW_LINE					    62 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e2653ed0, file " Disassembly of <code object findSum at 0x7f2b0163dc90, file " failure : #Results: 0, 10
    sm = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( sm )					    2 STORE_FAST 1 ( sm )					  
	for j in range ( i , n + 1 ) :			      								    								  
	    sm = sm + i * j				      3 4 SETUP_LOOP 58 ( to 64 )				    3 4 SETUP_LOOP 64 ( to 70 )					  
    return sm						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 40 ( to 62 )				    >> 20 FOR_ITER 46 ( to 68 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 SETUP_LOOP 34 ( to 60 )				    4 24 SETUP_LOOP 40 ( to 66 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 LOAD_FAST 0 ( n )					    30 LOAD_FAST 0 ( n )					  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 16 ( to 58 )				    >> 40 FOR_ITER 24 ( to 64 )					  
							      42 STORE_FAST 3 ( j )					    42 STORE_FAST 3 ( j )					  
							      								    								  
							      5 44 LOAD_FAST 1 ( sm )					    5 44 LOAD_FAST 1 ( sm )					  
							      46 LOAD_FAST 2 ( i )					    46 LOAD_FAST 2 ( i )					  
							      48 LOAD_FAST 3 ( j )					    48 LOAD_FAST 3 ( j )					  
							      50 BINARY_MULTIPLY					    50 BINARY_MULTIPLY						  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 STORE_FAST 1 ( sm )					    54 STORE_FAST 1 ( sm )					  
							      56 JUMP_ABSOLUTE 40					    56 JUMP_ABSOLUTE 40						  
							      >> 58 POP_BLOCK						    >> 58 POP_BLOCK						  
							      >> 60 JUMP_ABSOLUTE 20					    >> 60 JUMP_ABSOLUTE 20					  
							      >> 62 POP_BLOCK						    >> 62 POP_BLOCK						  
							      								    								  
							      6 >> 64 LOAD_FAST 1 ( sm )				    6 >> 64 LOAD_FAST 1 ( sm )					  
							      66 RETURN_VALUE NEW_LINE					    66 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
def rotate ( arr , n ) :				      Disassembly of <code object rotate at 0x7f33e26494b0, file "< Disassembly of <code object rotate at 0x7f2b01639660, file "< script_not_found : None
    x = arr [ n - 1 ]					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    for i in range ( n - 1 , 0 , - 1 ) :		      2 LOAD_FAST 1 ( n )					    2 LOAD_FAST 1 ( n )						  
	arr [ i ] = arr [ i - 1 ] ;			      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
    arr [ 0 ] = x ;					      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
							      8 BINARY_SUBSCR						    8 BINARY_SUBSCR						  
							      10 STORE_FAST 2 ( x )					    10 STORE_FAST 2 ( x )					  
							      								    								  
							      3 12 SETUP_LOOP 40 ( to 54 )				    3 12 SETUP_LOOP 34 ( to 48 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 LOAD_CONST 2 ( 0 )					    22 LOAD_CONST 2 ( 0 )					  
							      24 LOAD_CONST 3 ( - 1 )					    24 LOAD_CONST 3 ( - 1 )					  
							      26 CALL_FUNCTION 3					    26 CALL_FUNCTION 3						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 20 ( to 52 )				    >> 30 FOR_ITER 20 ( to 46 )					  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 3 ( i )					  
							      								    								  
							      4 34 LOAD_FAST 0 ( arr )					    4 34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 3 ( i )					    36 LOAD_FAST 3 ( i )					  
							      38 LOAD_CONST 1 ( 1 )					    38 LOAD_CONST 1 ( 1 )					  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBTRACT						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 0 ( arr )					    44 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 STORE_SUBSCR						    48 STORE_SUBSCR						  
							      50 JUMP_ABSOLUTE 30					    50 JUMP_ABSOLUTE 30						  
							      >> 52 POP_BLOCK						    >> 52 POP_BLOCK						  
							      								    								  
							      5 >> 54 LOAD_FAST 2 ( x )					    5 >> 54 LOAD_FAST 2 ( x )					  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_CONST 2 ( 0 )					    58 LOAD_CONST 2 ( 0 )					  
							      60 STORE_SUBSCR						    60 STORE_SUBSCR						  
							      62 LOAD_CONST 0 ( None )					    62 LOAD_CONST 0 ( None )					  
							      64 RETURN_VALUE NEW_LINE					    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
def findMinZero ( p ) :					      Disassembly of <code object findMinZero at 0x7f33e2644930, fi Disassembly of <code object findMinZero at 0x7f2b0163dc90, fi error : XXX lineno: 2, opcode: 0 Traceback (most r
    first = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  ecent call last):   File "XLM/dis_script.py", line
    second = 1						      2 STORE_FAST 1 ( first )					    2 STORE_FAST 1 ( first )					   60, in <module>     exec(item)   File "main.py",
    number = 2						      								    								  line 37, in <module>	 File "<dis>", line 2, in fi
    next = 1						      3 4 LOAD_CONST 1 ( 1 )					    3 4 LOAD_CONST 1 ( 1 )					  ndMinZero SystemError: unknown opcode
    while ( next ) :					      6 STORE_FAST 2 ( second )					    6 STORE_FAST 2 ( second )					  
	next = ( first + second ) % p			      								    								  
	first = second					      4 8 LOAD_CONST 2 ( 2 )					    4 8 LOAD_CONST 2 ( 2 )					  
	second = next					      10 STORE_FAST 3 ( number )				    10 STORE_FAST 3 ( number )					  
	number = number + 1				      								    								  
    return number					      5 12 LOAD_CONST 1 ( 1 )					    5 12 LOAD_CONST 1 ( 1 )					  
							      14 STORE_FAST 4 ( next )					    14 STORE_FAST 4 ( next )					  
							      								    								  
							      6 16 SETUP_LOOP 36 ( to 54 )				    6 16 SETUP_LOOP 46 ( to 68 )				  
							      >> 18 LOAD_FAST 4 ( next )				    >> 18 LOAD_FAST 4 ( next )					  
							      20 POP_JUMP_IF_FALSE 52					    20 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      7 22 LOAD_FAST 1 ( first )				    7 22 LOAD_FAST 1 ( first )					  
							      24 LOAD_FAST 2 ( second )					    24 LOAD_FAST 2 ( second )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 LOAD_FAST 0 ( p )					    28 LOAD_FAST 0 ( p )					  
							      30 BINARY_MODULO						    30 BINARY_MODULO						  
							      32 STORE_FAST 4 ( next )					    32 STORE_FAST 4 ( next )					  
							      								    								  
							      8 34 LOAD_FAST 2 ( second )				    8 34 LOAD_FAST 2 ( second )					  
							      36 STORE_FAST 1 ( first )					    36 STORE_FAST 1 ( first )					  
							      								    								  
							      9 38 LOAD_FAST 4 ( next )					    9 38 LOAD_FAST 4 ( next )					  
							      40 STORE_FAST 2 ( second )				    40 STORE_FAST 2 ( second )					  
							      								    								  
							      10 42 LOAD_FAST 3 ( number )				    10 42 LOAD_FAST 3 ( number )				  
							      44 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 1 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 STORE_FAST 3 ( number )				    48 STORE_FAST 3 ( number )					  
							      50 JUMP_ABSOLUTE 18					    50 JUMP_ABSOLUTE 18						  
							      >> 52 POP_BLOCK						    52 POP_BLOCK						  
							      								    								  
							      11 >> 54 LOAD_FAST 3 ( number )				    11 >> 54 LOAD_FAST 3 ( number )				  
							      56 RETURN_VALUE NEW_LINE					    56 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
def printSeries ( n ) :					      Disassembly of <code object printSeries at 0x7f33e2653ed0, fi Disassembly of <code object printSeries at 0x7f2b0163dc90, fi script_not_found : None
    for i in range ( 1 , n + 1 ) :			      2 0 SETUP_LOOP 58 ( to 60 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	num = i * ( i + 1 ) * ( i + 2 ) // 6		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	print ( num , end = ' ' )			      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
							      10 BINARY_ADD						    10 BINARY_ADD						  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 40 ( to 58 )				    >> 16 FOR_ITER 52 ( to 64 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 1 ( i )					  
							      								    								  
							      3 20 LOAD_FAST 1 ( i )					    3 20 LOAD_FAST 1 ( i )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 1 ( i )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 1 ( 1 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_FAST 1 ( i )					    30 LOAD_FAST 1 ( i )					  
							      32 LOAD_CONST 2 ( 2 )					    32 LOAD_CONST 2 ( 2 )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 LOAD_CONST 3 ( 6 )					    38 LOAD_CONST 3 ( 6 )					  
							      40 BINARY_FLOOR_DIVIDE					    40 BINARY_FLOOR_DIVIDE					  
							      42 STORE_FAST 2 ( num )					    42 STORE_FAST 2 ( num )					  
							      								    								  
							      4 44 LOAD_GLOBAL 1 ( print )				    4 44 LOAD_GLOBAL 1 ( print )				  
							      46 LOAD_FAST 2 ( num )					    46 LOAD_FAST 2 ( num )					  
							      48 LOAD_CONST 4 ( ' ' )					    48 LOAD_CONST 4 ( ' ' )					  
							      50 LOAD_CONST 5 ( ( 'end' , ) )				    50 LOAD_CONST 5 ( ( 'end' , ) )				  
							      52 CALL_FUNCTION_KW 2					    52 CALL_FUNCTION_KW 2					  
							      54 POP_TOP						    54 POP_TOP							  
							      56 JUMP_ABSOLUTE 16					    56 JUMP_ABSOLUTE 16						  
							      >> 58 POP_BLOCK						    >> 58 POP_BLOCK						  
							      >> 60 LOAD_CONST 0 ( None )				    >> 60 LOAD_CONST 0 ( None )					  
							      62 RETURN_VALUE NEW_LINE					    62 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
def remainder ( st ) :					      Disassembly of <code object remainder at 0x7f33e26494b0, file Disassembly of <code object remainder at 0x7f2b0164d540, file script_not_found : None
    ln = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    rem = 0						      2 LOAD_FAST 0 ( st )					    2 LOAD_FAST 0 ( st )					  
    for i in range ( 0 , ln ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	num = rem * 10 + ( int ) ( st [ i ] )		      6 STORE_FAST 1 ( ln )					    6 STORE_FAST 1 ( ln )					  
	rem = num % 11					      								    								  
    return rem						      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 STORE_FAST 2 ( rem )					    10 STORE_FAST 2 ( rem )					  
							      								    								  
							      4 12 SETUP_LOOP 46 ( to 60 )				    4 12 SETUP_LOOP 48 ( to 66 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 1 ( ln )					    18 LOAD_FAST 1 ( ln )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 32 ( to 58 )				    >> 24 FOR_ITER 36 ( to 64 )					  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 2 ( rem )					    5 28 LOAD_FAST 2 ( rem )					  
							      30 LOAD_CONST 2 ( 10 )					    30 LOAD_CONST 2 ( 10 )					  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 LOAD_GLOBAL 2 ( int )					    34 LOAD_GLOBAL 2 ( int )					  
							      36 LOAD_FAST 0 ( st )					    36 CALL_FUNCTION 1						  
							      38 LOAD_FAST 3 ( i )					    38 LOAD_FAST 0 ( st )					  
							      40 BINARY_SUBSCR						    40 LOAD_FAST 3 ( i )					  
							      42 CALL_FUNCTION 1					    42 BINARY_SUBSCR						  
							      44 BINARY_ADD						    44 CALL_FUNCTION 1						  
							      46 STORE_FAST 4 ( num )					    46 BINARY_ADD						  
							      								    48 STORE_FAST 4 ( num )					  
							      6 48 LOAD_FAST 4 ( num )					    								  
							      50 LOAD_CONST 3 ( 11 )					    6 50 LOAD_FAST 4 ( num )					  
							      52 BINARY_MODULO						    52 LOAD_CONST 3 ( 11 )					  
							      54 STORE_FAST 2 ( rem )					    54 BINARY_MODULO						  
							      56 JUMP_ABSOLUTE 24					    56 STORE_FAST 2 ( rem )					  
							      >> 58 POP_BLOCK						    58 JUMP_ABSOLUTE 24						  
							      								    >> 60 POP_BLOCK						  
							      7 >> 60 LOAD_FAST 2 ( rem )				    								  
							      62 RETURN_VALUE NEW_LINE					    7 >> 62 LOAD_FAST 2 ( rem )					  
							      								    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7f33e2653f60, file "<dis Disassembly of <code object fib at 0x7f2b0163dc90, file "<dis script_not_found : None
    if n < 6 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return f [ n ]					      2 LOAD_CONST 1 ( 6 )					    2 LOAD_CONST 1 ( 6 )					  
    t = 5						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    fn = 5						      6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 16					  
    while t < n :					      								    								  
	fn = round ( fn * PHI )				      3 8 LOAD_GLOBAL 0 ( f )					    3 8 LOAD_GLOBAL 0 ( f )					  
	t += 1						      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
    return fn						      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
							      14 RETURN_VALUE						    14 RETURN_VALUE						  
							      								    								  
							      4 >> 16 LOAD_CONST 2 ( 5 )				    4 >> 16 LOAD_CONST 2 ( 5 )					  
							      18 STORE_FAST 1 ( t )					    18 STORE_FAST 1 ( t )					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 5 )					    5 20 LOAD_CONST 2 ( 5 )					  
							      22 STORE_FAST 2 ( fn )					    22 STORE_FAST 2 ( fn )					  
							      								    								  
							      6 24 SETUP_LOOP 32 ( to 58 )				    6 24 SETUP_LOOP 34 ( to 56 )				  
							      >> 26 LOAD_FAST 1 ( t )					    >> 26 LOAD_FAST 1 ( t )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_FAST 0 ( n )					  
							      30 COMPARE_OP 0 ( < )					    30 COMPARE_OP 0 ( < )					  
							      32 POP_JUMP_IF_FALSE 56					    32 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      7 34 LOAD_GLOBAL 1 ( round )				    7 34 LOAD_GLOBAL 1 ( round )				  
							      36 LOAD_FAST 2 ( fn )					    36 LOAD_FAST 2 ( fn )					  
							      38 LOAD_GLOBAL 2 ( PHI )					    38 LOAD_GLOBAL 2 ( PHI )					  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 CALL_FUNCTION 1					    42 CALL_FUNCTION 1						  
							      44 STORE_FAST 2 ( fn )					    44 STORE_FAST 2 ( fn )					  
							      								    								  
							      8 46 LOAD_FAST 1 ( t )					    8 46 LOAD_FAST 1 ( t )					  
							      48 LOAD_CONST 3 ( 1 )					    48 LOAD_CONST 3 ( 1 )					  
							      50 INPLACE_ADD						    50 INPLACE_ADD						  
							      52 STORE_FAST 1 ( t )					    52 STORE_FAST 1 ( t )					  
							      54 JUMP_ABSOLUTE 26					    								  
							      >> 56 POP_BLOCK						    9 >> 54 LOAD_FAST 2 ( fn )					  
							      								    56 RETURN_VALUE NEW_LINE					  
							      9 >> 58 LOAD_FAST 2 ( fn )				    								  
							      60 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	      CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	    CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION		  CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION
--							      --							    --								  --
def stirlingFactorial ( n ) :				      Disassembly of <code object stirlingFactorial at 0x7f33e26491 Disassembly of <code object stirlingFactorial at 0x7f2b01639f script_not_found : None
    if ( n == 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1 ;					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    e = 2.71 ;						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    z = ( math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , 6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    return math.floor ( z ) ;				      								    								  
							      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_CONST 2 ( 2.71 )				    4 >> 12 LOAD_CONST 2 ( 2.71 )				  
							      14 STORE_FAST 1 ( e )					    14 STORE_FAST 1 ( e )					  
							      								    								  
							      5 16 LOAD_GLOBAL 0 ( math )				    5 16 LOAD_GLOBAL 0 ( math )					  
							      18 LOAD_METHOD 1 ( sqrt )					    18 LOAD_METHOD 1 ( sqrt )					  
							      20 LOAD_CONST 3 ( 6.28 )					    20 LOAD_CONST 3 ( 2 )					  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_CONST 4 ( 3.14 )					  
							      24 BINARY_MULTIPLY					    24 LOAD_FAST 0 ( n )					  
							      26 CALL_METHOD 1						    26 BINARY_MULTIPLY						  
							      28 LOAD_GLOBAL 0 ( math )					    28 CALL_METHOD 1						  
							      30 LOAD_METHOD 2 ( pow )					    30 LOAD_GLOBAL 0 ( math )					  
							      32 LOAD_FAST 0 ( n )					    32 LOAD_METHOD 2 ( pow )					  
							      34 LOAD_FAST 1 ( e )					    34 LOAD_FAST 0 ( n )					  
							      36 BINARY_TRUE_DIVIDE					    36 LOAD_FAST 1 ( e )					  
							      38 LOAD_FAST 0 ( n )					    38 BINARY_TRUE_DIVIDE					  
							      40 CALL_METHOD 2						    40 LOAD_FAST 0 ( n )					  
							      42 BINARY_MULTIPLY					    42 CALL_METHOD 2						  
							      44 STORE_FAST 2 ( z )					    44 BINARY_MULTIPLY						  
							      								    46 STORE_FAST 2 ( z )					  
							      6 46 LOAD_GLOBAL 0 ( math )				    								  
							      48 LOAD_METHOD 3 ( floor )				    6 48 LOAD_GLOBAL 0 ( math )					  
							      50 LOAD_FAST 2 ( z )					    50 LOAD_METHOD 3 ( floor )					  
							      52 CALL_METHOD 1						    52 LOAD_FAST 2 ( z )					  
							      54 RETURN_VALUE NEW_LINE					    54 CALL_METHOD 1						  
							      								    56 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI
--							      --							    --								  --
def findMaximum ( arr , low , high ) :			      Disassembly of <code object findMaximum at 0x7f33e26494b0, fi Disassembly of <code object findMaximum at 0x7f2b0163dc90, fi script_not_found : None
    max = arr [ low ]					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    i = low						      2 LOAD_FAST 1 ( low )					    2 LOAD_FAST 1 ( low )					  
    for i in range ( high + 1 ) :			      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
	if arr [ i ] > max :				      6 STORE_FAST 3 ( max )					    6 STORE_FAST 3 ( max )					  
	    max = arr [ i ]				      								    								  
    return max						      3 8 LOAD_FAST 1 ( low )					    3 8 LOAD_FAST 1 ( low )					  
							      10 STORE_FAST 4 ( i )					    10 STORE_FAST 4 ( i )					  
							      								    								  
							      4 12 SETUP_LOOP 40 ( to 54 )				    4 12 SETUP_LOOP 34 ( to 48 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_FAST 2 ( high )					    16 LOAD_FAST 2 ( high )					  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_ADD						    20 BINARY_ADD						  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 24 ( to 52 )				    >> 26 FOR_ITER 22 ( to 46 )					  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      5 30 LOAD_FAST 0 ( arr )					    5 30 LOAD_FAST 0 ( arr )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 3 ( max )					    36 LOAD_FAST 3 ( max )					  
							      38 COMPARE_OP 4 ( > )					    38 COMPARE_OP 4 ( > )					  
							      40 POP_JUMP_IF_FALSE 26					    40 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      6 42 LOAD_FAST 0 ( arr )					    6 42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 4 ( i )					    44 LOAD_FAST 4 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 STORE_FAST 3 ( max )					    48 STORE_FAST 3 ( max )					  
							      50 JUMP_ABSOLUTE 26					    50 JUMP_ABSOLUTE 26						  
							      >> 52 POP_BLOCK						    >> 52 POP_BLOCK						  
							      								    								  
							      7 >> 54 LOAD_FAST 3 ( max )				    7 >> 54 LOAD_FAST 3 ( max )					  
							      56 RETURN_VALUE NEW_LINE					    56 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
def MaximumHeight ( a , n ) :				      Disassembly of <code object MaximumHeight at 0x7f33e2649a50,  Disassembly of <code object MaximumHeight at 0x7f2b01639660,  error : /bin/bash: line 1:  3925 Segmentation faul
    result = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 1 , n ) :				      2 STORE_FAST 2 ( result )					    2 STORE_FAST 2 ( result )					  ataset/bin/python XLM/dis_script.py --script_path
	y = ( i * ( i + 1 ) ) / 2			      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	if ( y < n ) :					      3 4 SETUP_LOOP 50 ( to 56 )				    3 4 SETUP_LOOP 62 ( to 68 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MAXIMU
	    result = i					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  M_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
	else :						      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  .dis
	    break					      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
    return result					      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 36 ( to 54 )				    >> 16 FOR_ITER 44 ( to 66 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 3 ( i )					    4 20 LOAD_FAST 3 ( i )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 1 ( 1 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_CONST 2 ( 2 )					    30 LOAD_CONST 2 ( 2 )					  
							      32 BINARY_TRUE_DIVIDE					    32 BINARY_TRUE_DIVIDE					  
							      34 STORE_FAST 4 ( y )					    34 STORE_FAST 4 ( y )					  
							      								    								  
							      5 36 LOAD_FAST 4 ( y )					    5 36 LOAD_FAST 4 ( y )					  
							      38 LOAD_FAST 1 ( n )					    38 LOAD_FAST 1 ( n )					  
							      40 COMPARE_OP 0 ( < )					    40 COMPARE_OP 0 ( < )					  
							      42 POP_JUMP_IF_FALSE 50					    42 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      6 44 LOAD_FAST 3 ( i )					    6 44 LOAD_FAST 3 ( i )					  
							      46 STORE_FAST 2 ( result )				    46 STORE_FAST 2 ( result )					  
							      48 JUMP_ABSOLUTE 16					    48 JUMP_ABSOLUTE 16						  
							      								    								  
							      8 >> 50 BREAK_LOOP					    8 >> 50 BREAK_LOOP						  
							      52 JUMP_ABSOLUTE 16					    52 JUMP_ABSOLUTE 16						  
							      >> 54 POP_BLOCK						    >> 54 POP_BLOCK						  
							      								    								  
							      9 >> 56 LOAD_FAST 2 ( result )				    9 56 LOAD_FAST 2 ( result )					  
							      58 RETURN_VALUE NEW_LINE					    58 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
def floorSqrt ( x ) :					      Disassembly of <code object floorSqrt at 0x7f33e2644f60, file Disassembly of <code object floorSqrt at 0x7f2b0163dc90, file success : None
    if ( x == 0 or x == 1 ) :				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
	return x					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    i = 1 ; result = 1					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    while ( result <= x ) :				      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
	i += 1						      8 LOAD_FAST 0 ( x )					    8 LOAD_FAST 0 ( x )						  
	result = i * i					      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
    return i - 1					      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_FAST 0 ( x )					    3 >> 16 LOAD_FAST 0 ( x )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_CONST 2 ( 1 )				    4 >> 20 LOAD_CONST 2 ( 1 )					  
							      22 STORE_FAST 1 ( i )					    22 STORE_FAST 1 ( i )					  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 STORE_FAST 2 ( result )				    5 24 LOAD_CONST 2 ( 1 )					  
							      								    26 STORE_FAST 2 ( result )					  
							      5 28 SETUP_LOOP 28 ( to 58 )				    								  
							      >> 30 LOAD_FAST 2 ( result )				    6 28 SETUP_LOOP 28 ( to 58 )				  
							      32 LOAD_FAST 0 ( x )					    >> 30 LOAD_FAST 2 ( result )				  
							      34 COMPARE_OP 1 ( <= )					    32 LOAD_FAST 0 ( x )					  
							      36 POP_JUMP_IF_FALSE 56					    34 COMPARE_OP 1 ( <= )					  
							      								    36 POP_JUMP_IF_FALSE 56					  
							      6 38 LOAD_FAST 1 ( i )					    								  
							      40 LOAD_CONST 2 ( 1 )					    7 38 LOAD_FAST 1 ( i )					  
							      42 INPLACE_ADD						    40 LOAD_CONST 2 ( 1 )					  
							      44 STORE_FAST 1 ( i )					    42 INPLACE_ADD						  
							      								    44 STORE_FAST 1 ( i )					  
							      7 46 LOAD_FAST 1 ( i )					    								  
							      48 LOAD_FAST 1 ( i )					    8 46 LOAD_FAST 1 ( i )					  
							      50 BINARY_MULTIPLY					    48 LOAD_FAST 1 ( i )					  
							      52 STORE_FAST 2 ( result )				    50 BINARY_MULTIPLY						  
							      54 JUMP_ABSOLUTE 30					    52 STORE_FAST 2 ( result )					  
							      >> 56 POP_BLOCK						    54 JUMP_ABSOLUTE 30						  
							      								    >> 56 POP_BLOCK						  
							      8 >> 58 LOAD_FAST 1 ( i )					    								  
							      60 LOAD_CONST 2 ( 1 )					    9 >> 58 LOAD_FAST 1 ( i )					  
							      62 BINARY_SUBTRACT					    60 LOAD_CONST 2 ( 1 )					  
							      64 RETURN_VALUE NEW_LINE					    62 BINARY_SUBTRACT						  
							      								    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7f33e26494b0, f Disassembly of <code object nextPowerOf2 at 0x7f2b0164d780, f timeout : None
    count = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    if ( n and not ( n & ( n - 1 ) ) ) :		      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  
	return n					      								    								  
    while ( n != 0 ) :					      3 4 LOAD_FAST 0 ( n )					    3 4 LOAD_FAST 0 ( n )					  
	n >>= 1						      6 POP_JUMP_IF_FALSE 24					    6 POP_JUMP_IF_FALSE 26					  
	count += 1					      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
    return 1 << count ;					      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 BINARY_AND						    16 BINARY_AND						  
							      18 POP_JUMP_IF_TRUE 24					    18 POP_JUMP_IF_TRUE 26					  
							      								    								  
							      4 20 LOAD_FAST 0 ( n )					    4 20 LOAD_FAST 0 ( n )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      5 >> 24 SETUP_LOOP 28 ( to 54 )				    5 >> 24 SETUP_LOOP 30 ( to 58 )				  
							      >> 26 LOAD_FAST 0 ( n )					    >> 26 LOAD_FAST 0 ( n )					  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 1 ( 0 )					  
							      30 COMPARE_OP 3 ( != )					    30 COMPARE_OP 3 ( != )					  
							      32 POP_JUMP_IF_FALSE 52					    32 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      6 34 LOAD_FAST 0 ( n )					    6 34 LOAD_FAST 0 ( n )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 INPLACE_RSHIFT						    38 INPLACE_RSHIFT						  
							      40 STORE_FAST 0 ( n )					    40 STORE_FAST 0 ( n )					  
							      								    								  
							      7 42 LOAD_FAST 1 ( count )				    7 >> 42 LOAD_FAST 1 ( count )				  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 INPLACE_ADD						    46 INPLACE_ADD						  
							      48 STORE_FAST 1 ( count )					    48 STORE_FAST 1 ( count )					  
							      50 JUMP_ABSOLUTE 26					    50 JUMP_ABSOLUTE 26						  
							      >> 52 POP_BLOCK						    >> 52 POP_BLOCK						  
							      								    								  
							      8 >> 54 LOAD_CONST 2 ( 1 )				    8 >> 54 LOAD_CONST 2 ( 1 )					  
							      56 LOAD_FAST 1 ( count )					    56 LOAD_FAST 1 ( count )					  
							      58 BINARY_LSHIFT						    58 BINARY_LSHIFT						  
							      60 RETURN_VALUE NEW_LINE					    60 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
def isTriangular ( num ) :				      Disassembly of <code object isTriangular at 0x7f33e2649a50, f Disassembly of <code object isTriangular at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    if ( num < 0 ) :					      2 0 LOAD_FAST 0 ( num )					    2 0 LOAD_FAST 0 ( num )					  "XLM/dis_script.py", line 60, in <module>	exec
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 36, in <module>	  Fi
    sum , n = 0 , 1					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  le "<dis>", line 2, in isTriangular TypeError: uns
    while ( sum <= num ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  upported operand type(s) for +: 'int' and 'tuple'
	sum = sum + n					      								    								  
	if ( sum == num ) :				      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
	    return True					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	n += 1						      								    								  
    return False					      4 >> 12 LOAD_CONST 3 ( ( 0 , 1 ) )			    4 >> 12 LOAD_CONST 1 ( 0 )					  
							      14 UNPACK_SEQUENCE 2					    14 LOAD_CONST 3 ( 1 )					  
							      16 STORE_FAST 1 ( sum )					    16 ROT_TWO							  
							      18 STORE_FAST 2 ( n )					    18 STORE_FAST 1 ( sum )					  
							      								    20 STORE_FAST 2 ( n )					  
							      5 20 SETUP_LOOP 40 ( to 62 )				    								  
							      >> 22 LOAD_FAST 1 ( sum )					    5 22 SETUP_LOOP 46 ( to 68 )				  
							      24 LOAD_FAST 0 ( num )					    >> 24 LOAD_FAST 1 ( sum )					  
							      26 COMPARE_OP 1 ( <= )					    26 LOAD_FAST 0 ( num )					  
							      28 POP_JUMP_IF_FALSE 60					    28 COMPARE_OP 1 ( <= )					  
							      								    30 POP_JUMP_IF_FALSE 66					  
							      6 30 LOAD_FAST 1 ( sum )					    								  
							      32 LOAD_FAST 2 ( n )					    6 32 LOAD_FAST 1 ( sum )					  
							      34 BINARY_ADD						    34 LOAD_FAST 2 ( n )					  
							      36 STORE_FAST 1 ( sum )					    36 BINARY_ADD						  
							      								    38 STORE_FAST 1 ( sum )					  
							      7 38 LOAD_FAST 1 ( sum )					    								  
							      40 LOAD_FAST 0 ( num )					    7 40 LOAD_FAST 1 ( sum )					  
							      42 COMPARE_OP 2 ( == )					    42 LOAD_FAST 0 ( num )					  
							      44 POP_JUMP_IF_FALSE 50					    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 52					  
							      8 46 LOAD_CONST 4 ( True )				    								  
							      48 RETURN_VALUE						    8 48 LOAD_CONST 4 ( True )					  
							      								    50 RETURN_VALUE						  
							      9 >> 50 LOAD_FAST 2 ( n )					    								  
							      52 LOAD_CONST 5 ( 1 )					    9 >> 52 LOAD_FAST 2 ( n )					  
							      54 INPLACE_ADD						    54 LOAD_CONST 3 ( 1 )					  
							      56 STORE_FAST 2 ( n )					    56 INPLACE_ADD						  
							      58 JUMP_ABSOLUTE 22					    58 STORE_FAST 2 ( n )					  
							      >> 60 POP_BLOCK						    60 JUMP_ABSOLUTE 24						  
							      								    >> 62 POP_BLOCK						  
							      10 >> 62 LOAD_CONST 2 ( False )				    								  
							      64 RETURN_VALUE NEW_LINE					    10 64 LOAD_CONST 2 ( False )				  
							      								    66 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e26494b0, file " Disassembly of <code object findSum at 0x7f2b0163dc90, file " script_not_found : None
    n -= 1						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
    sum = 0						      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    sum += ( n * ( n + 1 ) ) / 2			      4 INPLACE_SUBTRACT					    4 INPLACE_SUBTRACT						  
    sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6	      6 STORE_FAST 0 ( n )					    6 STORE_FAST 0 ( n )					  
    return int ( sum )					      								    								  
							      3 8 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
							      10 STORE_FAST 1 ( sum )					    10 STORE_FAST 1 ( sum )					  
							      								    								  
							      4 12 LOAD_FAST 1 ( sum )					    4 12 LOAD_FAST 1 ( sum )					  
							      14 LOAD_FAST 0 ( n )					    14 LOAD_FAST 0 ( n )					  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_FAST 0 ( n )					  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_ADD						    20 BINARY_ADD						  
							      22 BINARY_MULTIPLY					    22 BINARY_MULTIPLY						  
							      24 LOAD_CONST 3 ( 2 )					    24 LOAD_CONST 3 ( 2 )					  
							      26 BINARY_TRUE_DIVIDE					    26 BINARY_TRUE_DIVIDE					  
							      28 INPLACE_ADD						    28 INPLACE_ADD						  
							      30 STORE_FAST 1 ( sum )					    30 STORE_FAST 1 ( sum )					  
							      								    								  
							      5 32 LOAD_FAST 1 ( sum )					    5 32 LOAD_FAST 1 ( sum )					  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 LOAD_FAST 0 ( n )					    36 LOAD_CONST 1 ( 1 )					  
							      38 LOAD_CONST 1 ( 1 )					    38 BINARY_ADD						  
							      40 BINARY_ADD						    40 BINARY_MULTIPLY						  
							      42 BINARY_MULTIPLY					    42 LOAD_CONST 3 ( 2 )					  
							      44 LOAD_CONST 3 ( 2 )					    44 LOAD_FAST 0 ( n )					  
							      46 LOAD_FAST 0 ( n )					    46 BINARY_MULTIPLY						  
							      48 BINARY_MULTIPLY					    48 LOAD_CONST 1 ( 1 )					  
							      50 LOAD_CONST 1 ( 1 )					    50 BINARY_ADD						  
							      52 BINARY_ADD						    52 BINARY_MULTIPLY						  
							      54 BINARY_MULTIPLY					    54 BINARY_MULTIPLY						  
							      56 LOAD_CONST 4 ( 6 )					    56 LOAD_CONST 4 ( 6 )					  
							      58 BINARY_TRUE_DIVIDE					    58 BINARY_TRUE_DIVIDE					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 1 ( sum )					    62 STORE_FAST 1 ( sum )					  
							      								    								  
							      6 64 LOAD_GLOBAL 0 ( int )				    6 64 LOAD_GLOBAL 0 ( int )					  
							      66 LOAD_FAST 1 ( sum )					    66 LOAD_FAST 1 ( sum )					  
							      68 CALL_FUNCTION 1					    68 CALL_FUNCTION 1						  
							      70 RETURN_VALUE NEW_LINE					    70 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
def isDivisible ( str , k ) :				      Disassembly of <code object isDivisible at 0x7f33e2644930, fi Disassembly of <code object isDivisible at 0x7f2b0163dc90, fi script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    c = 0						      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    for i in range ( 0 , k ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	if ( str [ n - i - 1 ] == '0' ) :		      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  
	    c += 1					      								    								  
    return ( c == k )					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 STORE_FAST 3 ( c )					    10 STORE_FAST 3 ( c )					  
							      								    								  
							      4 12 SETUP_LOOP 46 ( to 60 )				    4 12 SETUP_LOOP 48 ( to 60 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 1 ( k )					    18 LOAD_FAST 1 ( k )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 32 ( to 58 )				    >> 24 FOR_ITER 36 ( to 58 )					  
							      26 STORE_FAST 4 ( i )					    26 STORE_FAST 4 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 0 ( str )					    5 28 LOAD_FAST 0 ( str )					  
							      30 LOAD_FAST 2 ( n )					    30 LOAD_FAST 2 ( n )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_CONST 3 ( '0' )					    42 LOAD_CONST 3 ( '0' )					  
							      44 COMPARE_OP 2 ( == )					    44 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 24					    46 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      6 48 LOAD_FAST 3 ( c )					    6 48 LOAD_FAST 3 ( c )					  
							      50 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 INPLACE_ADD						    52 INPLACE_ADD						  
							      54 STORE_FAST 3 ( c )					    54 STORE_FAST 3 ( c )					  
							      56 JUMP_ABSOLUTE 24					    56 JUMP_ABSOLUTE 24						  
							      >> 58 POP_BLOCK						    >> 58 POP_BLOCK						  
							      								    								  
							      7 >> 60 LOAD_FAST 3 ( c )					    7 >> 60 LOAD_FAST 3 ( c )					  
							      62 LOAD_FAST 1 ( k )					    62 LOAD_FAST 1 ( k )					  
							      64 COMPARE_OP 2 ( == )					    64 COMPARE_OP 2 ( == )					  
							      66 RETURN_VALUE NEW_LINE					    66 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED     MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
def minValue ( A , B , n ) :				      Disassembly of <code object minValue at 0x7f33e2653ed0, file  Disassembly of <code object minValue at 0x7f2b0163dc90, file  script_not_found : None
    sorted ( A )					      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  
    sorted ( B )					      2 LOAD_FAST 0 ( A )					    2 LOAD_FAST 0 ( A )						  
    result = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( n ) :				      6 POP_TOP							    6 POP_TOP							  
	result += ( A [ i ] * B [ n - i - 1 ] )		      								    								  
    return result					      3 8 LOAD_GLOBAL 0 ( sorted )				    3 8 LOAD_GLOBAL 0 ( sorted )				  
							      10 LOAD_FAST 1 ( B )					    10 LOAD_FAST 1 ( B )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 POP_TOP						    14 POP_TOP							  
							      								    								  
							      4 16 LOAD_CONST 1 ( 0 )					    4 16 LOAD_CONST 1 ( 0 )					  
							      18 STORE_FAST 3 ( result )				    18 STORE_FAST 3 ( result )					  
							      								    								  
							      5 20 SETUP_LOOP 44 ( to 66 )				    5 20 SETUP_LOOP 46 ( to 68 )				  
							      22 LOAD_GLOBAL 1 ( range )				    22 LOAD_GLOBAL 1 ( range )					  
							      24 LOAD_FAST 2 ( n )					    24 LOAD_FAST 2 ( n )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 32 ( to 64 )				    >> 30 FOR_ITER 34 ( to 66 )					  
							      32 STORE_FAST 4 ( i )					    32 STORE_FAST 4 ( i )					  
							      								    								  
							      6 34 LOAD_FAST 3 ( result )				    6 34 LOAD_FAST 3 ( result )					  
							      36 LOAD_FAST 0 ( A )					    36 LOAD_FAST 0 ( A )					  
							      38 LOAD_FAST 4 ( i )					    38 LOAD_FAST 4 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 1 ( B )					    42 LOAD_FAST 1 ( B )					  
							      44 LOAD_FAST 2 ( n )					    44 LOAD_FAST 2 ( n )					  
							      46 LOAD_FAST 4 ( i )					    46 LOAD_FAST 4 ( i )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 BINARY_SUBTRACT					    52 BINARY_SUBTRACT						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 BINARY_MULTIPLY					    56 BINARY_MULTIPLY						  
							      58 INPLACE_ADD						    58 INPLACE_ADD						  
							      60 STORE_FAST 3 ( result )				    60 STORE_FAST 3 ( result )					  
							      62 JUMP_ABSOLUTE 30					    62 JUMP_ABSOLUTE 30						  
							      >> 64 POP_BLOCK						    64 POP_BLOCK						  
							      								    								  
							      7 >> 66 LOAD_FAST 3 ( result )				    7 >> 66 LOAD_FAST 3 ( result )				  
							      68 RETURN_VALUE NEW_LINE					    68 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
def isReversible ( str ) :				      Disassembly of <code object isReversible at 0x7f33e2644930, f Disassembly of <code object isReversible at 0x7f2b0163dc90, f success : None
    i = 0 ; j = len ( str ) - 1 ;			      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    while ( i < j ) :					      2 STORE_FAST 1 ( i )					    2 STORE_FAST 1 ( i )					  
	if ( str [ i ] != str [ j ] ) :			      4 LOAD_GLOBAL 0 ( len )					    								  
	    return False ;				      6 LOAD_FAST 0 ( str )					    3 4 LOAD_GLOBAL 0 ( len )					  
	i += 1 ;					      8 CALL_FUNCTION 1						    6 LOAD_FAST 0 ( str )					  
	j -= 1 ;					      10 LOAD_CONST 2 ( 1 )					    8 CALL_FUNCTION 1						  
    return True ;					      12 BINARY_SUBTRACT					    10 LOAD_CONST 2 ( 1 )					  
							      14 STORE_FAST 2 ( j )					    12 BINARY_SUBTRACT						  
							      								    14 STORE_FAST 2 ( j )					  
							      3 16 SETUP_LOOP 48 ( to 66 )				    								  
							      >> 18 LOAD_FAST 1 ( i )					    4 16 SETUP_LOOP 46 ( to 66 )				  
							      20 LOAD_FAST 2 ( j )					    >> 18 LOAD_FAST 1 ( i )					  
							      22 COMPARE_OP 0 ( < )					    20 LOAD_FAST 2 ( j )					  
							      24 POP_JUMP_IF_FALSE 64					    22 COMPARE_OP 0 ( < )					  
							      								    24 POP_JUMP_IF_FALSE 64					  
							      4 26 LOAD_FAST 0 ( str )					    								  
							      28 LOAD_FAST 1 ( i )					    5 26 LOAD_FAST 0 ( str )					  
							      30 BINARY_SUBSCR						    28 LOAD_FAST 1 ( i )					  
							      32 LOAD_FAST 0 ( str )					    30 BINARY_SUBSCR						  
							      34 LOAD_FAST 2 ( j )					    32 LOAD_FAST 0 ( str )					  
							      36 BINARY_SUBSCR						    34 LOAD_FAST 2 ( j )					  
							      38 COMPARE_OP 3 ( != )					    36 BINARY_SUBSCR						  
							      40 POP_JUMP_IF_FALSE 46					    38 COMPARE_OP 3 ( != )					  
							      								    40 POP_JUMP_IF_FALSE 46					  
							      5 42 LOAD_CONST 3 ( False )				    								  
							      44 RETURN_VALUE						    6 42 LOAD_CONST 3 ( False )					  
							      								    44 RETURN_VALUE						  
							      6 >> 46 LOAD_FAST 1 ( i )					    								  
							      48 LOAD_CONST 2 ( 1 )					    7 >> 46 LOAD_FAST 1 ( i )					  
							      50 INPLACE_ADD						    48 LOAD_CONST 2 ( 1 )					  
							      52 STORE_FAST 1 ( i )					    50 INPLACE_ADD						  
							      								    52 STORE_FAST 1 ( i )					  
							      7 54 LOAD_FAST 2 ( j )					    								  
							      56 LOAD_CONST 2 ( 1 )					    8 54 LOAD_FAST 2 ( j )					  
							      58 INPLACE_SUBTRACT					    56 LOAD_CONST 2 ( 1 )					  
							      60 STORE_FAST 2 ( j )					    58 INPLACE_SUBTRACT						  
							      62 JUMP_ABSOLUTE 18					    60 STORE_FAST 2 ( j )					  
							      >> 64 POP_BLOCK						    62 JUMP_ABSOLUTE 18						  
							      								    >> 64 POP_BLOCK						  
							      8 >> 66 LOAD_CONST 4 ( True )				    								  
							      68 RETURN_VALUE NEW_LINE					    9 >> 66 LOAD_CONST 4 ( True )				  
							      								    68 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
def decToBinary ( n ) :					      Disassembly of <code object decToBinary at 0x7f33e2649a50, fi Disassembly of <code object decToBinary at 0x7f2b0163dc90, fi script_not_found : None
    for i in range ( 31 , - 1 , - 1 ) :			      2 0 SETUP_LOOP 62 ( to 64 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	k = n >> i ;					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	if ( k & 1 ) :					      4 LOAD_CONST 1 ( 31 )					    4 LOAD_CONST 1 ( 31 )					  
	    print ( "1" , end = "" ) ;			      6 LOAD_CONST 2 ( - 1 )					    6 LOAD_CONST 2 ( - 1 )					  
	else :						      8 LOAD_CONST 2 ( - 1 )					    8 LOAD_CONST 2 ( - 1 )					  
	    print ( "0" , end = "" ) ;			      10 CALL_FUNCTION 3					    10 CALL_FUNCTION 3						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 46 ( to 62 )				    >> 14 FOR_ITER 48 ( to 64 )					  
							      16 STORE_FAST 1 ( i )					    16 STORE_FAST 1 ( i )					  
							      								    								  
							      3 18 LOAD_FAST 0 ( n )					    3 18 LOAD_FAST 0 ( n )					  
							      20 LOAD_FAST 1 ( i )					    20 LOAD_FAST 1 ( i )					  
							      22 BINARY_RSHIFT						    22 BINARY_RSHIFT						  
							      24 STORE_FAST 2 ( k )					    24 STORE_FAST 2 ( k )					  
							      								    								  
							      4 26 LOAD_FAST 2 ( k )					    4 26 LOAD_FAST 2 ( k )					  
							      28 LOAD_CONST 3 ( 1 )					    28 LOAD_CONST 3 ( 1 )					  
							      30 BINARY_AND						    30 BINARY_AND						  
							      32 POP_JUMP_IF_FALSE 48					    32 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      5 34 LOAD_GLOBAL 1 ( print )				    5 34 LOAD_GLOBAL 1 ( print )				  
							      36 LOAD_CONST 4 ( '1' )					    36 LOAD_CONST 4 ( '1' )					  
							      38 LOAD_CONST 5 ( '' )					    38 LOAD_CONST 5 ( '' )					  
							      40 LOAD_CONST 6 ( ( 'end' , ) )				    40 LOAD_CONST 6 ( ( 'end' , ) )				  
							      42 CALL_FUNCTION_KW 2					    42 CALL_FUNCTION_KW 2					  
							      44 POP_TOP						    44 POP_TOP							  
							      46 JUMP_ABSOLUTE 14					    >> 46 JUMP_ABSOLUTE 14					  
							      								    48 POP_BLOCK						  
							      7 >> 48 LOAD_GLOBAL 1 ( print )				    								  
							      50 LOAD_CONST 7 ( '0' )					    7 >> 50 LOAD_GLOBAL 1 ( print )				  
							      52 LOAD_CONST 5 ( '' )					    52 LOAD_CONST 4 ( '0' )					  
							      54 LOAD_CONST 6 ( ( 'end' , ) )				    54 LOAD_CONST 5 ( '' )					  
							      56 CALL_FUNCTION_KW 2					    56 LOAD_CONST 6 ( ( 'end' , ) )				  
							      58 POP_TOP						    58 CALL_FUNCTION_KW 2					  
							      60 JUMP_ABSOLUTE 14					    60 POP_TOP							  
							      >> 62 POP_BLOCK						    62 JUMP_ABSOLUTE 14						  
							      >> 64 LOAD_CONST 0 ( None )				    >> 64 POP_BLOCK						  
							      66 RETURN_VALUE NEW_LINE					    >> 66 LOAD_CONST 0 ( None )					  
							      								    68 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
def recSearch ( arr , l , r , x ) :			      Disassembly of <code object recSearch at 0x7f33e2653f60, file Disassembly of <code object recSearch at 0x7f2b0163dc90, file success : identical to gold
    if r < l :						      2 0 LOAD_FAST 2 ( r )					    2 0 LOAD_FAST 2 ( r )					  
	return - 1					      2 LOAD_FAST 1 ( l )					    2 LOAD_FAST 1 ( l )						  
    if arr [ l ] == x :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
	return l					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    if arr [ r ] == x :					      								    								  
	return r					      3 8 LOAD_CONST 1 ( - 1 )					    3 8 LOAD_CONST 1 ( - 1 )					  
    return recSearch ( arr , l + 1 , r - 1 , x )	      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_FAST 0 ( arr )				    4 >> 12 LOAD_FAST 0 ( arr )					  
							      14 LOAD_FAST 1 ( l )					    14 LOAD_FAST 1 ( l )					  
							      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 LOAD_FAST 3 ( x )					    18 LOAD_FAST 3 ( x )					  
							      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
							      22 POP_JUMP_IF_FALSE 28					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 LOAD_FAST 1 ( l )					    5 24 LOAD_FAST 1 ( l )					  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      6 >> 28 LOAD_FAST 0 ( arr )				    6 >> 28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 2 ( r )					    30 LOAD_FAST 2 ( r )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 3 ( x )					    34 LOAD_FAST 3 ( x )					  
							      36 COMPARE_OP 2 ( == )					    36 COMPARE_OP 2 ( == )					  
							      38 POP_JUMP_IF_FALSE 44					    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 40 LOAD_FAST 2 ( r )					    7 40 LOAD_FAST 2 ( r )					  
							      42 RETURN_VALUE						    42 RETURN_VALUE						  
							      								    								  
							      8 >> 44 LOAD_GLOBAL 0 ( recSearch )			    8 >> 44 LOAD_GLOBAL 0 ( recSearch )				  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 1 ( l )					    48 LOAD_FAST 1 ( l )					  
							      50 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 LOAD_FAST 2 ( r )					    54 LOAD_FAST 2 ( r )					  
							      56 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 2 ( 1 )					  
							      58 BINARY_SUBTRACT					    58 BINARY_SUBTRACT						  
							      60 LOAD_FAST 3 ( x )					    60 LOAD_FAST 3 ( x )					  
							      62 CALL_FUNCTION 4					    62 CALL_FUNCTION 4						  
							      64 RETURN_VALUE NEW_LINE					    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
def findStep ( n ) :					      Disassembly of <code object findStep at 0x7f33e2653f60, file  Disassembly of <code object findStep at 0x7f2b0163dc90, file  script_not_found : None
    if ( n == 1 or n == 0 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    elif ( n == 2 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 2					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
    else :						      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
	return findStep ( n - 3 ) + findStep ( n - 2 ) + find 10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_CONST 1 ( 1 )				    3 >> 16 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_FAST 0 ( n )					    4 >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_CONST 3 ( 2 )					    22 LOAD_CONST 3 ( 2 )					  
							      24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
							      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      5 28 LOAD_CONST 3 ( 2 )					    5 28 LOAD_CONST 3 ( 2 )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      7 >> 32 LOAD_GLOBAL 0 ( findStep )			    7 >> 32 LOAD_GLOBAL 0 ( findStep )				  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 LOAD_CONST 4 ( 3 )					    36 LOAD_CONST 4 ( 3 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 LOAD_GLOBAL 0 ( findStep )				    42 LOAD_GLOBAL 0 ( findStep )				  
							      44 LOAD_FAST 0 ( n )					    44 LOAD_FAST 0 ( n )					  
							      46 LOAD_CONST 3 ( 2 )					    46 LOAD_CONST 3 ( 2 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 LOAD_GLOBAL 0 ( findStep )				    54 RETURN_VALUE						  
							      56 LOAD_FAST 0 ( n )					    56 LOAD_CONST 0 ( None )					  
							      58 LOAD_CONST 1 ( 1 )					    58 RETURN_VALUE NEW_LINE					  
							      60 BINARY_SUBTRACT					    								  
							      62 CALL_FUNCTION 1					    								  
							      64 BINARY_ADD						    								  
							      66 RETURN_VALUE						    								  
							      68 LOAD_CONST 0 ( None )					    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
def maxProd ( n ) :					      Disassembly of <code object maxProd at 0x7f33e2649a50, file " Disassembly of <code object maxProd at 0x7f2b0163dc90, file " error : /bin/bash: line 1:  3969 Segmentation faul
    if ( n == 2 or n == 3 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return ( n - 1 )				      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  ataset/bin/python XLM/dis_script.py --script_path
    res = 1						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    while ( n > 4 ) :					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/DYNAMI
	n -= 3 ;					      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  C_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUC
	res *= 3 ;					      10 LOAD_CONST 2 ( 3 )					    10 LOAD_CONST 2 ( 3 )					  T_1.dis
    return ( n * res )					      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 24					    14 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      3 >> 16 LOAD_FAST 0 ( n )					    3 >> 16 LOAD_FAST 0 ( n )					  
							      18 LOAD_CONST 3 ( 1 )					    18 LOAD_CONST 3 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      4 >> 24 LOAD_CONST 3 ( 1 )				    4 >> 24 LOAD_CONST 3 ( 1 )					  
							      26 STORE_FAST 1 ( res )					    26 STORE_FAST 1 ( res )					  
							      								    								  
							      5 28 SETUP_LOOP 28 ( to 58 )				    5 28 SETUP_LOOP 36 ( to 64 )				  
							      >> 30 LOAD_FAST 0 ( n )					    >> 30 LOAD_FAST 0 ( n )					  
							      32 LOAD_CONST 4 ( 4 )					    32 LOAD_CONST 4 ( 4 )					  
							      34 COMPARE_OP 4 ( > )					    34 COMPARE_OP 4 ( > )					  
							      36 POP_JUMP_IF_FALSE 56					    36 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      6 38 LOAD_FAST 0 ( n )					    6 38 LOAD_FAST 0 ( n )					  
							      40 LOAD_CONST 2 ( 3 )					    40 LOAD_CONST 2 ( 3 )					  
							      42 INPLACE_SUBTRACT					    42 INPLACE_SUBTRACT						  
							      44 STORE_FAST 0 ( n )					    44 STORE_FAST 0 ( n )					  
							      								    								  
							      7 46 LOAD_FAST 1 ( res )					    7 46 LOAD_FAST 1 ( res )					  
							      48 LOAD_CONST 2 ( 3 )					    48 LOAD_CONST 2 ( 3 )					  
							      50 INPLACE_MULTIPLY					    50 INPLACE_MULTIPLY						  
							      52 STORE_FAST 1 ( res )					    52 STORE_FAST 1 ( res )					  
							      54 JUMP_ABSOLUTE 30					    54 JUMP_ABSOLUTE 30						  
							      >> 56 POP_BLOCK						    56 POP_BLOCK						  
							      								    								  
							      8 >> 58 LOAD_FAST 0 ( n )					    8 >> 58 LOAD_FAST 0 ( n )					  
							      60 LOAD_FAST 1 ( res )					    60 LOAD_FAST 1 ( res )					  
							      62 BINARY_MULTIPLY					    62 BINARY_MULTIPLY						  
							      64 RETURN_VALUE NEW_LINE					    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING	      CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		    CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		  CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING
--							      --							    --								  --
def findSum ( str1 ) :					      Disassembly of <code object findSum at 0x7f33e2644f60, file " Disassembly of <code object findSum at 0x7f2b01639660, file " script_not_found : None
    temp = ""						      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    Sum = 0						      2 STORE_FAST 1 ( temp )					    2 STORE_FAST 1 ( temp )					  
    for ch in str1 :					      								    								  
	if ( ch.isdigit ( ) ) :				      3 4 LOAD_CONST 2 ( 0 )					    3 4 LOAD_CONST 2 ( 0 )					  
	    temp += ch					      6 STORE_FAST 2 ( Sum )					    6 STORE_FAST 2 ( Sum )					  
	else :						      								    								  
	    Sum += int ( temp )				      4 8 SETUP_LOOP 46 ( to 56 )				    4 8 SETUP_LOOP 46 ( to 56 )					  
	    temp = "0"					      10 LOAD_FAST 0 ( str1 )					    10 LOAD_FAST 0 ( str1 )					  
    return Sum + int ( temp )				      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 38 ( to 54 )				    >> 14 FOR_ITER 38 ( to 54 )					  
							      16 STORE_FAST 3 ( ch )					    16 STORE_FAST 3 ( ch )					  
							      								    								  
							      5 18 LOAD_FAST 3 ( ch )					    5 18 LOAD_FAST 3 ( ch )					  
							      20 LOAD_METHOD 0 ( isdigit )				    20 LOAD_METHOD 0 ( isdigit )				  
							      22 CALL_METHOD 0						    22 CALL_METHOD 0						  
							      24 POP_JUMP_IF_FALSE 36					    24 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      6 26 LOAD_FAST 1 ( temp )					    6 26 LOAD_FAST 1 ( temp )					  
							      28 LOAD_FAST 3 ( ch )					    28 LOAD_FAST 3 ( ch )					  
							      30 INPLACE_ADD						    30 INPLACE_ADD						  
							      32 STORE_FAST 1 ( temp )					    32 STORE_FAST 1 ( temp )					  
							      34 JUMP_ABSOLUTE 14					    								  
							      								    8 >> 34 LOAD_FAST 2 ( Sum )					  
							      8 >> 36 LOAD_FAST 2 ( Sum )				    36 LOAD_GLOBAL 1 ( int )					  
							      38 LOAD_GLOBAL 1 ( int )					    38 LOAD_FAST 1 ( temp )					  
							      40 LOAD_FAST 1 ( temp )					    40 CALL_FUNCTION 1						  
							      42 CALL_FUNCTION 1					    42 INPLACE_ADD						  
							      44 INPLACE_ADD						    44 STORE_FAST 2 ( Sum )					  
							      46 STORE_FAST 2 ( Sum )					    								  
							      								    9 46 LOAD_CONST 3 ( '0' )					  
							      9 48 LOAD_CONST 3 ( '0' )					    48 STORE_FAST 1 ( temp )					  
							      50 STORE_FAST 1 ( temp )					    50 JUMP_ABSOLUTE 14						  
							      52 JUMP_ABSOLUTE 14					    52 POP_BLOCK						  
							      >> 54 POP_BLOCK						    >> 54 LOAD_CONST 0 ( None )					  
							      								    56 RETURN_VALUE NEW_LINE					  
							      10 >> 56 LOAD_FAST 2 ( Sum )				    								  
							      58 LOAD_GLOBAL 1 ( int )					    								  
							      60 LOAD_FAST 1 ( temp )					    								  
							      62 CALL_FUNCTION 1					    								  
							      64 BINARY_ADD						    								  
							      66 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
def count ( n , x ) :					      Disassembly of <code object count at 0x7f33e2644f60, file "<d Disassembly of <code object count at 0x7f2b0163dc90, file "<d success : None
    cnt = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 2 ( cnt )					    2 STORE_FAST 2 ( cnt )					  
	if i <= x :					      								    								  
	    if x // i <= n and x % i == 0 :		      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 SETUP_LOOP 62 ( to 68 )					  
		cnt += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return cnt						      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 44 ( to 66 )				    >> 20 FOR_ITER 50 ( to 66 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 3 ( i )					    4 24 LOAD_FAST 3 ( i )					  
							      26 LOAD_FAST 1 ( x )					    26 LOAD_FAST 1 ( x )					  
							      28 COMPARE_OP 1 ( <= )					    28 COMPARE_OP 1 ( <= )					  
							      30 POP_JUMP_IF_FALSE 20					    30 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      5 32 LOAD_FAST 1 ( x )					    5 32 LOAD_FAST 1 ( x )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_FLOOR_DIVIDE					    36 BINARY_FLOOR_DIVIDE					  
							      38 LOAD_FAST 0 ( n )					    38 LOAD_FAST 0 ( n )					  
							      40 COMPARE_OP 1 ( <= )					    40 COMPARE_OP 1 ( <= )					  
							      42 POP_JUMP_IF_FALSE 20					    42 POP_JUMP_IF_FALSE 20					  
							      44 LOAD_FAST 1 ( x )					    44 LOAD_FAST 1 ( x )					  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 BINARY_MODULO						    48 BINARY_MODULO						  
							      50 LOAD_CONST 1 ( 0 )					    50 LOAD_CONST 1 ( 0 )					  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 20					    54 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      6 56 LOAD_FAST 2 ( cnt )					    6 56 LOAD_FAST 2 ( cnt )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 2 ( cnt )					    62 STORE_FAST 2 ( cnt )					  
							      64 JUMP_ABSOLUTE 20					    64 JUMP_ABSOLUTE 20						  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      7 >> 68 LOAD_FAST 2 ( cnt )				    7 >> 68 LOAD_FAST 2 ( cnt )					  
							      70 RETURN_VALUE NEW_LINE					    70 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
def maxTasks ( high , low , n ) :			      Disassembly of <code object maxTasks at 0x7f33e26494b0, file  Disassembly of <code object maxTasks at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    if ( n <= 0 ) :					      2 0 LOAD_FAST 2 ( n )					    2 0 LOAD_FAST 2 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 30, in <module>	  Fi
    return max ( high [ n - 1 ] + maxTasks ( high , low , ( n 4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  le "<dis>", line 2, in maxTasks TypeError: can onl
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  y concatenate list (not "tuple") to list
							      								    								  
							      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_GLOBAL 0 ( max )				    4 >> 12 LOAD_GLOBAL 0 ( max )				  
							      14 LOAD_FAST 0 ( high )					    14 LOAD_FAST 0 ( high )					  
							      16 LOAD_FAST 2 ( n )					    16 LOAD_FAST 2 ( n )					  
							      18 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 2 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
							      24 LOAD_GLOBAL 1 ( maxTasks )				    24 LOAD_GLOBAL 1 ( maxTasks )				  
							      26 LOAD_FAST 0 ( high )					    26 LOAD_FAST 0 ( high )					  
							      28 LOAD_FAST 1 ( low )					    28 LOAD_FAST 1 ( low )					  
							      30 LOAD_FAST 2 ( n )					    30 LOAD_FAST 2 ( n )					  
							      32 LOAD_CONST 3 ( 2 )					    32 LOAD_CONST 3 ( 2 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 CALL_FUNCTION 3					    36 BUILD_TUPLE 2						  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 LOAD_FAST 1 ( low )					    40 LOAD_FAST 1 ( low )					  
							      42 LOAD_FAST 2 ( n )					    42 LOAD_FAST 2 ( n )					  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_GLOBAL 1 ( maxTasks )				    50 LOAD_GLOBAL 1 ( maxTasks )				  
							      52 LOAD_FAST 0 ( high )					    52 LOAD_FAST 0 ( high )					  
							      54 LOAD_FAST 1 ( low )					    54 LOAD_FAST 1 ( low )					  
							      56 LOAD_FAST 2 ( n )					    56 LOAD_FAST 2 ( n )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 CALL_FUNCTION 3					    62 BUILD_TUPLE 2						  
							      64 BINARY_ADD						    64 CALL_FUNCTION 2						  
							      66 CALL_FUNCTION 2					    66 BINARY_ADD						  
							      68 RETURN_VALUE NEW_LINE					    68 CALL_FUNCTION 1						  
							      								    70 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
def findS ( s ) :					      Disassembly of <code object findS at 0x7f33e2653f60, file "<d Disassembly of <code object findS at 0x7f2b0163dc90, file "<d error : /bin/bash: line 1:  4000 Segmentation faul
    _sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    n = 1						      2 STORE_FAST 1 ( _sum )					    2 STORE_FAST 1 ( _sum )					  ataset/bin/python XLM/dis_script.py --script_path
    while ( _sum < s ) :				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	_sum += n * n * n				      3 4 LOAD_CONST 2 ( 1 )					    3 4 LOAD_CONST 2 ( 1 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/SQUARE
	n += 1						      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  D_TRIANGULAR_NUMBER_SUM_CUBES.dis
    n -= 1						      								    								  
    if _sum == s :					      4 8 SETUP_LOOP 36 ( to 46 )				    4 8 SETUP_LOOP 40 ( to 52 )					  
	return n					      >> 10 LOAD_FAST 1 ( _sum )				    >> 10 LOAD_FAST 1 ( _sum )					  
    return - 1						      12 LOAD_FAST 0 ( s )					    12 LOAD_FAST 0 ( s )					  
							      14 COMPARE_OP 0 ( < )					    14 COMPARE_OP 0 ( < )					  
							      16 POP_JUMP_IF_FALSE 44					    16 POP_JUMP_IF_FALSE 50					  
							      								    								  
							      5 18 LOAD_FAST 1 ( _sum )					    5 18 LOAD_FAST 1 ( _sum )					  
							      20 LOAD_FAST 2 ( n )					    20 LOAD_FAST 2 ( n )					  
							      22 LOAD_FAST 2 ( n )					    22 LOAD_FAST 2 ( n )					  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 LOAD_FAST 2 ( n )					    26 LOAD_FAST 2 ( n )					  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 INPLACE_ADD						    30 INPLACE_ADD						  
							      32 STORE_FAST 1 ( _sum )					    32 STORE_FAST 1 ( _sum )					  
							      								    								  
							      6 34 LOAD_FAST 2 ( n )					    6 34 LOAD_FAST 2 ( n )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 INPLACE_ADD						    38 INPLACE_ADD						  
							      40 STORE_FAST 2 ( n )					    40 STORE_FAST 2 ( n )					  
							      42 JUMP_ABSOLUTE 10					    42 JUMP_ABSOLUTE 10						  
							      >> 44 POP_BLOCK						    >> 44 POP_BLOCK						  
							      								    								  
							      7 >> 46 LOAD_FAST 2 ( n )					    7 >> 46 LOAD_FAST 2 ( n )					  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 2 ( 1 )					  
							      50 INPLACE_SUBTRACT					    50 INPLACE_SUBTRACT						  
							      52 STORE_FAST 2 ( n )					    52 STORE_FAST 2 ( n )					  
							      								    								  
							      8 54 LOAD_FAST 1 ( _sum )					    8 54 LOAD_FAST 1 ( _sum )					  
							      56 LOAD_FAST 0 ( s )					    56 LOAD_FAST 0 ( s )					  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 66					    60 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      9 62 LOAD_FAST 2 ( n )					    9 62 LOAD_FAST 2 ( n )					  
							      64 RETURN_VALUE						    64 RETURN_VALUE						  
							      								    								  
							      10 >> 66 LOAD_CONST 3 ( - 1 )				    10 >> 66 LOAD_CONST 3 ( - 1 )				  
							      68 RETURN_VALUE NEW_LINE					    68 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
def isOneFlip ( str ) :					      Disassembly of <code object isOneFlip at 0x7f33e2649150, file Disassembly of <code object isOneFlip at 0x7f2b0164dae0, file script_not_found : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    n = len ( str )					      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  
    for i in range ( 0 , n ) :				      								    								  
	sum += int ( str [ i ] ) - int ( '0' )		      3 4 LOAD_GLOBAL 0 ( len )					    3 4 LOAD_GLOBAL 0 ( len )					  
    return ( sum == n - 1 or sum == 1 )			      6 LOAD_FAST 0 ( str )					    6 LOAD_FAST 0 ( str )					  
							      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
							      10 STORE_FAST 2 ( n )					    10 STORE_FAST 2 ( n )					  
							      								    								  
							      4 12 SETUP_LOOP 42 ( to 56 )				    4 12 SETUP_LOOP 46 ( to 60 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 2 ( n )					    18 LOAD_FAST 2 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 28 ( to 54 )				    >> 24 FOR_ITER 34 ( to 58 )					  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 1 ( sum )					    5 28 LOAD_FAST 1 ( sum )					  
							      30 LOAD_GLOBAL 2 ( int )					    30 LOAD_GLOBAL 2 ( int )					  
							      32 LOAD_FAST 0 ( str )					    32 LOAD_FAST 0 ( str )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 LOAD_GLOBAL 2 ( int )					    40 LOAD_GLOBAL 2 ( int )					  
							      42 LOAD_CONST 2 ( '0' )					    42 LOAD_CONST 2 ( '0' )					  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 INPLACE_ADD						    48 INPLACE_ADD						  
							      50 STORE_FAST 1 ( sum )					    50 STORE_FAST 1 ( sum )					  
							      52 JUMP_ABSOLUTE 24					    52 JUMP_ABSOLUTE 24						  
							      >> 54 POP_BLOCK						    >> 54 POP_BLOCK						  
							      								    								  
							      6 >> 56 LOAD_FAST 1 ( sum )				    6 56 LOAD_FAST 1 ( sum )					  
							      58 LOAD_FAST 2 ( n )					    58 LOAD_FAST 2 ( n )					  
							      60 LOAD_CONST 3 ( 1 )					    60 LOAD_CONST 3 ( 1 )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 COMPARE_OP 2 ( == )					    64 COMPARE_OP 2 ( == )					  
							      66 JUMP_IF_TRUE_OR_POP 74					    66 JUMP_IF_TRUE_OR_POP 80					  
							      68 LOAD_FAST 1 ( sum )					    68 LOAD_FAST 1 ( sum )					  
							      70 LOAD_CONST 3 ( 1 )					    70 LOAD_CONST 3 ( 1 )					  
							      72 COMPARE_OP 2 ( == )					    72 COMPARE_OP 2 ( == )					  
							      >> 74 RETURN_VALUE NEW_LINE				    74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			      FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			    FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			  FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
def subArrayExists ( arr , n ) :			      Disassembly of <code object subArrayExists at 0x7f33e2644930, Disassembly of <code object subArrayExists at 0x7f2b01639660, script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    sum = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for i in range ( n ) :				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 2 ( s )					  
	sum += arr [ i ]				      								    								  
	if sum == 0 or sum in s :			      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	    return True					      8 STORE_FAST 3 ( sum )					    8 STORE_FAST 3 ( sum )					  
	s.add ( sum )					      								    								  
    return False					      4 10 SETUP_LOOP 58 ( to 70 )				    4 10 SETUP_LOOP 54 ( to 66 )				  
							      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 46 ( to 68 )				    >> 20 FOR_ITER 42 ( to 64 )					  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 LOAD_FAST 3 ( sum )					    5 24 LOAD_FAST 3 ( sum )					  
							      26 LOAD_FAST 0 ( arr )					    26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_FAST 4 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 INPLACE_ADD						    32 INPLACE_ADD						  
							      34 STORE_FAST 3 ( sum )					    34 STORE_FAST 3 ( sum )					  
							      								    								  
							      6 36 LOAD_FAST 3 ( sum )					    6 36 LOAD_FAST 3 ( sum )					  
							      38 LOAD_CONST 1 ( 0 )					    38 LOAD_CONST 1 ( 0 )					  
							      40 COMPARE_OP 2 ( == )					    40 COMPARE_OP 2 ( == )					  
							      42 POP_JUMP_IF_TRUE 52					    42 POP_JUMP_IF_TRUE 52					  
							      44 LOAD_FAST 3 ( sum )					    44 LOAD_FAST 3 ( sum )					  
							      46 LOAD_FAST 2 ( s )					    46 LOAD_FAST 2 ( s )					  
							      48 COMPARE_OP 6 ( in )					    48 COMPARE_OP 6 ( in )					  
							      50 POP_JUMP_IF_FALSE 56					    50 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      7 >> 52 LOAD_CONST 2 ( True )				    7 >> 52 LOAD_CONST 2 ( True )				  
							      54 RETURN_VALUE						    54 RETURN_VALUE						  
							      								    								  
							      8 >> 56 LOAD_FAST 2 ( s )					    8 >> 56 LOAD_FAST 2 ( s )					  
							      58 LOAD_METHOD 2 ( add )					    58 LOAD_METHOD 2 ( add )					  
							      60 LOAD_FAST 3 ( sum )					    60 LOAD_FAST 3 ( sum )					  
							      62 CALL_METHOD 1						    62 CALL_METHOD 1						  
							      64 POP_TOP						    64 POP_TOP							  
							      66 JUMP_ABSOLUTE 20					    66 JUMP_ABSOLUTE 20						  
							      >> 68 POP_BLOCK						    >> 68 POP_BLOCK						  
							      								    								  
							      9 >> 70 LOAD_CONST 3 ( False )				    9 >> 70 LOAD_CONST 3 ( False )				  
							      72 RETURN_VALUE NEW_LINE					    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
def maxPrefix ( s , t ) :				      Disassembly of <code object maxPrefix at 0x7f33e2644f60, file Disassembly of <code object maxPrefix at 0x7f2b0163dc90, file script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , len ( t ) ) :			      2 STORE_FAST 2 ( count )					    2 STORE_FAST 2 ( count )					  
	if ( count == len ( s ) ) :			      								    								  
	    break					      3 4 SETUP_LOOP 60 ( to 66 )				    3 4 SETUP_LOOP 56 ( to 62 )					  
	if ( t [ i ] == s [ count ] ) :			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    count = count + 1				      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
    return count					      10 LOAD_GLOBAL 1 ( len )					    10 LOAD_GLOBAL 1 ( len )					  
							      12 LOAD_FAST 1 ( t )					    12 LOAD_FAST 1 ( t )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 42 ( to 64 )				    >> 20 FOR_ITER 38 ( to 60 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( count )				    4 24 LOAD_FAST 2 ( count )					  
							      26 LOAD_GLOBAL 1 ( len )					    26 LOAD_GLOBAL 1 ( len )					  
							      28 LOAD_FAST 0 ( s )					    28 LOAD_FAST 0 ( s )					  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 38					    34 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      5 36 BREAK_LOOP						    5 36 BREAK_LOOP						  
							      								    38 JUMP_ABSOLUTE 20						  
							      6 >> 38 LOAD_FAST 1 ( t )					    40 POP_BLOCK						  
							      40 LOAD_FAST 3 ( i )					    								  
							      42 BINARY_SUBSCR						    6 >> 42 LOAD_FAST 1 ( t )					  
							      44 LOAD_FAST 0 ( s )					    44 LOAD_FAST 3 ( i )					  
							      46 LOAD_FAST 2 ( count )					    46 BINARY_SUBSCR						  
							      48 BINARY_SUBSCR						    48 LOAD_FAST 0 ( s )					  
							      50 COMPARE_OP 2 ( == )					    50 LOAD_FAST 2 ( count )					  
							      52 POP_JUMP_IF_FALSE 20					    52 BINARY_SUBSCR						  
							      								    54 COMPARE_OP 2 ( == )					  
							      7 54 LOAD_FAST 2 ( count )				    56 POP_JUMP_IF_FALSE 20					  
							      56 LOAD_CONST 2 ( 1 )					    								  
							      58 BINARY_ADD						    7 58 LOAD_FAST 2 ( count )					  
							      60 STORE_FAST 2 ( count )					    60 LOAD_CONST 2 ( 1 )					  
							      62 JUMP_ABSOLUTE 20					    62 BINARY_ADD						  
							      >> 64 POP_BLOCK						    64 STORE_FAST 2 ( count )					  
							      								    66 JUMP_ABSOLUTE 20						  
							      8 >> 66 LOAD_FAST 2 ( count )				    >> 68 POP_BLOCK						  
							      68 RETURN_VALUE NEW_LINE					    								  
							      								    8 >> 70 LOAD_FAST 2 ( count )				  
							      								    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
def kthdigit ( a , b , k ) :				      Disassembly of <code object kthdigit at 0x7f33e2644f60, file  Disassembly of <code object kthdigit at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    p = a ** b						      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 60, in <module>	exec
    count = 0						      2 LOAD_FAST 1 ( b )					    2 LOAD_FAST 1 ( b )						  (item)   File "main.py", line 35, in <module>	  Fi
    while ( p > 0 and count < k ) :			      4 BINARY_POWER						    4 BINARY_POWER						  le "<dis>", line 2, in kthdigit UnboundLocalError:
	rem = p % 10					      6 STORE_FAST 3 ( p )					    6 STORE_FAST 3 ( p )					   local variable 'p' referenced before assignment
	count = count + 1				      								    								  
	if ( count == k ) :				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    return rem					      10 STORE_FAST 4 ( count )					    10 STORE_FAST 4 ( count )					  
	p = p / 10 ;					      								    								  
							      4 12 SETUP_LOOP 56 ( to 70 )				    4 12 SETUP_LOOP 54 ( to 68 )				  
							      >> 14 LOAD_FAST 3 ( p )					    >> 14 LOAD_FAST 3 ( p )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 COMPARE_OP 4 ( > )					    18 COMPARE_OP 4 ( > )					  
							      20 POP_JUMP_IF_FALSE 68					    20 POP_JUMP_IF_FALSE 66					  
							      22 LOAD_FAST 4 ( count )					    22 LOAD_FAST 4 ( count )					  
							      24 LOAD_FAST 2 ( k )					    24 LOAD_FAST 2 ( k )					  
							      26 COMPARE_OP 0 ( < )					    26 COMPARE_OP 0 ( < )					  
							      28 POP_JUMP_IF_FALSE 68					    28 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      5 30 LOAD_FAST 3 ( p )					    5 30 LOAD_FAST 3 ( p )					  
							      32 LOAD_CONST 2 ( 10 )					    32 LOAD_CONST 2 ( 10 )					  
							      34 BINARY_MODULO						    34 BINARY_MODULO						  
							      36 STORE_FAST 5 ( rem )					    36 STORE_FAST 5 ( rem )					  
							      								    								  
							      6 38 LOAD_FAST 4 ( count )				    6 38 LOAD_FAST 4 ( count )					  
							      40 LOAD_CONST 3 ( 1 )					    40 LOAD_CONST 3 ( 1 )					  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 STORE_FAST 4 ( count )					    44 STORE_FAST 4 ( count )					  
							      								    								  
							      7 46 LOAD_FAST 4 ( count )				    7 46 LOAD_FAST 4 ( count )					  
							      48 LOAD_FAST 2 ( k )					    48 LOAD_FAST 2 ( k )					  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_FALSE 58					    52 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      8 54 LOAD_FAST 5 ( rem )					    8 54 LOAD_FAST 5 ( rem )					  
							      56 RETURN_VALUE						    56 RETURN_VALUE						  
							      								    								  
							      9 >> 58 LOAD_FAST 3 ( p )					    9 >> 58 LOAD_FAST 3 ( p )					  
							      60 LOAD_CONST 2 ( 10 )					    60 LOAD_CONST 2 ( 10 )					  
							      62 BINARY_TRUE_DIVIDE					    62 BINARY_TRUE_DIVIDE					  
							      64 STORE_FAST 3 ( p )					    64 STORE_FAST 3 ( p )					  
							      66 JUMP_ABSOLUTE 14					    >> 66 DELETE_FAST 3 ( p )					  
							      >> 68 POP_BLOCK						    68 JUMP_ABSOLUTE 14						  
							      >> 70 LOAD_CONST 0 ( None )				    >> 70 POP_BLOCK						  
							      72 RETURN_VALUE NEW_LINE					    >> 72 LOAD_CONST 0 ( None )					  
							      								    74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE			  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
def recursiveReverse ( str ) :				      Disassembly of <code object recursiveReverse at 0x7f33e2644f6 Disassembly of <code object recursiveReverse at 0x7f2b0163dc9 success : None
    stack = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    for i in range ( len ( str ) ) :			      2 STORE_FAST 1 ( stack )					    2 STORE_FAST 1 ( stack )					  
	stack.append ( str [ i ] )			      								    								  
    for i in range ( len ( str ) ) :			      3 4 SETUP_LOOP 34 ( to 40 )				    3 4 SETUP_LOOP 34 ( to 40 )					  
	str [ i ] = stack.pop ( )			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_GLOBAL 1 ( len )					  
							      10 LOAD_FAST 0 ( str )					    10 LOAD_FAST 0 ( str )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 18 ( to 38 )				    >> 18 FOR_ITER 20 ( to 38 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 1 ( stack )				    4 22 LOAD_FAST 1 ( stack )					  
							      24 LOAD_METHOD 2 ( append )				    24 LOAD_METHOD 2 ( append )					  
							      26 LOAD_FAST 0 ( str )					    26 LOAD_FAST 0 ( str )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 CALL_METHOD 1						    32 CALL_METHOD 1						  
							      34 POP_TOP						    34 POP_TOP							  
							      36 JUMP_ABSOLUTE 18					    36 JUMP_ABSOLUTE 18						  
							      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
							      								    								  
							      5 >> 40 SETUP_LOOP 32 ( to 74 )				    5 >> 40 SETUP_LOOP 34 ( to 76 )				  
							      42 LOAD_GLOBAL 0 ( range )				    42 LOAD_GLOBAL 0 ( range )					  
							      44 LOAD_GLOBAL 1 ( len )					    44 LOAD_GLOBAL 1 ( len )					  
							      46 LOAD_FAST 0 ( str )					    46 LOAD_FAST 0 ( str )					  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 16 ( to 72 )				    >> 54 FOR_ITER 14 ( to 74 )					  
							      56 STORE_FAST 2 ( i )					    56 STORE_FAST 2 ( i )					  
							      								    								  
							      6 58 LOAD_FAST 1 ( stack )				    6 58 LOAD_FAST 1 ( stack )					  
							      60 LOAD_METHOD 3 ( pop )					    60 LOAD_METHOD 3 ( pop )					  
							      62 CALL_METHOD 0						    62 CALL_METHOD 0						  
							      64 LOAD_FAST 0 ( str )					    64 LOAD_FAST 0 ( str )					  
							      66 LOAD_FAST 2 ( i )					    66 LOAD_FAST 2 ( i )					  
							      68 STORE_SUBSCR						    68 STORE_SUBSCR						  
							      70 JUMP_ABSOLUTE 54					    70 JUMP_ABSOLUTE 54						  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      >> 74 LOAD_CONST 0 ( None )				    >> 74 LOAD_CONST 0 ( None )					  
							      76 RETURN_VALUE NEW_LINE					    76 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S				      NUMBER_TRIANGLES_N_<unk> S				    NUMBER_TRIANGLES_N_<unk> S					  NUMBER_TRIANGLES_N_<unk> S
--							      --							    --								  --
def numberOfTriangles ( n ) :				      Disassembly of <code object numberOfTriangles at 0x7f33e2653e Disassembly of <code object numberOfTriangles at 0x7f2b0163dc script_not_found : None
    answer = [ None ] * ( n + 1 ) ;			      2 0 LOAD_CONST 0 ( None )					    2 0 LOAD_CONST 0 ( None )					  
    answer [ 0 ] = 1 ;					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    i = 1						      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
    while i <= n :					      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	answer [ i ] = answer [ i - 1 ] * 3 + 2 ;	      8 BINARY_ADD						    8 BINARY_ADD						  
	i = i + 1					      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
    return answer [ n ] ;				      12 STORE_FAST 1 ( answer )				    12 STORE_FAST 1 ( answer )					  
							      								    								  
							      3 14 LOAD_CONST 1 ( 1 )					    3 14 LOAD_CONST 1 ( 1 )					  
							      16 LOAD_FAST 1 ( answer )					    16 LOAD_FAST 1 ( answer )					  
							      18 LOAD_CONST 2 ( 0 )					    18 LOAD_CONST 2 ( 0 )					  
							      20 STORE_SUBSCR						    20 STORE_SUBSCR						  
							      								    								  
							      4 22 LOAD_CONST 1 ( 1 )					    4 22 LOAD_CONST 1 ( 1 )					  
							      24 STORE_FAST 2 ( i )					    24 STORE_FAST 2 ( i )					  
							      								    								  
							      5 26 SETUP_LOOP 44 ( to 72 )				    5 26 LOAD_CONST 1 ( 1 )					  
							      >> 28 LOAD_FAST 2 ( i )					    28 STORE_FAST 3 ( i )					  
							      30 LOAD_FAST 0 ( n )					    								  
							      32 COMPARE_OP 1 ( <= )					    6 30 SETUP_LOOP 46 ( to 78 )				  
							      34 POP_JUMP_IF_FALSE 70					    >> 32 LOAD_FAST 3 ( i )					  
							      								    34 LOAD_FAST 0 ( n )					  
							      6 36 LOAD_FAST 1 ( answer )				    36 COMPARE_OP 1 ( <= )					  
							      38 LOAD_FAST 2 ( i )					    38 POP_JUMP_IF_FALSE 76					  
							      40 LOAD_CONST 1 ( 1 )					    								  
							      42 BINARY_SUBTRACT					    7 40 LOAD_FAST 1 ( answer )					  
							      44 BINARY_SUBSCR						    42 LOAD_FAST 2 ( i )					  
							      46 LOAD_CONST 3 ( 3 )					    44 LOAD_CONST 1 ( 1 )					  
							      48 BINARY_MULTIPLY					    46 BINARY_SUBTRACT						  
							      50 LOAD_CONST 4 ( 2 )					    48 BINARY_SUBSCR						  
							      52 BINARY_ADD						    50 LOAD_CONST 3 ( 3 )					  
							      54 LOAD_FAST 1 ( answer )					    52 BINARY_MULTIPLY						  
							      56 LOAD_FAST 2 ( i )					    54 LOAD_CONST 4 ( 2 )					  
							      58 STORE_SUBSCR						    56 BINARY_ADD						  
							      								    58 LOAD_FAST 1 ( answer )					  
							      7 60 LOAD_FAST 2 ( i )					    60 LOAD_FAST 3 ( i )					  
							      62 LOAD_CONST 1 ( 1 )					    62 STORE_SUBSCR						  
							      64 BINARY_ADD						    								  
							      66 STORE_FAST 2 ( i )					    8 64 LOAD_FAST 3 ( i )					  
							      68 JUMP_ABSOLUTE 28					    66 LOAD_CONST 1 ( 1 )					  
							      >> 70 POP_BLOCK						    68 BINARY_ADD						  
							      								    70 STORE_FAST 3 ( i )					  
							      8 >> 72 LOAD_FAST 1 ( answer )				    72 JUMP_ABSOLUTE 32						  
							      74 LOAD_FAST 0 ( n )					    74 POP_BLOCK						  
							      76 BINARY_SUBSCR						    								  
							      78 RETURN_VALUE NEW_LINE					    9 >> 76 LOAD_FAST 1 ( answer )				  
							      								    78 LOAD_FAST 0 ( n )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
def countPairs ( arr , n ) :				      Disassembly of <code object countPairs at 0x7f33e2653ed0, fil Disassembly of <code object countPairs at 0x7f2b01639f60, fil error : /bin/bash: line 1:  4030 Segmentation faul
    ans = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( ans )					    2 STORE_FAST 2 ( ans )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( i + 1 , n ) :			      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    if ( arr [ i ] == arr [ j ] ) :		      3 4 SETUP_LOOP 66 ( to 72 )				    3 4 SETUP_LOOP 74 ( to 80 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/COUNT_
		ans += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY.dis
    return ans						      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 52 ( to 70 )				    >> 16 FOR_ITER 62 ( to 78 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 46 ( to 68 )				    4 20 SETUP_LOOP 48 ( to 76 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 CALL_FUNCTION 2					    32 CALL_FUNCTION 2						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 28 ( to 66 )				    >> 36 FOR_ITER 28 ( to 74 )					  
							      38 STORE_FAST 4 ( j )					    38 STORE_FAST 4 ( j )					  
							      								    								  
							      5 40 LOAD_FAST 0 ( arr )					    5 40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 4 ( j )					    48 LOAD_FAST 4 ( j )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 36					    54 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      6 56 LOAD_FAST 2 ( ans )					    6 56 LOAD_FAST 2 ( ans )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 2 ( ans )					    62 STORE_FAST 2 ( ans )					  
							      64 JUMP_ABSOLUTE 36					    64 JUMP_ABSOLUTE 36						  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      >> 68 JUMP_ABSOLUTE 16					    >> 68 JUMP_ABSOLUTE 16					  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      								    >> 72 JUMP_ABSOLUTE 16					  
							      7 >> 72 LOAD_FAST 2 ( ans )				    >> 74 POP_BLOCK						  
							      74 RETURN_VALUE NEW_LINE					    								  
							      								    7 >> 76 LOAD_FAST 2 ( ans )					  
							      								    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
def interchangeFirstLast ( mat , n , m ) :		      Disassembly of <code object interchangeFirstLast at 0x7f33e26 Disassembly of <code object interchangeFirstLast at 0x7f2b016 script_not_found : None
    rows = n						      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
    for i in range ( n ) :				      2 STORE_FAST 3 ( rows )					    2 STORE_FAST 3 ( rows )					  
	t = mat [ 0 ] [ i ]				      								    								  
	mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]	      3 4 SETUP_LOOP 68 ( to 74 )				    3 4 SETUP_LOOP 62 ( to 68 )					  
	mat [ rows - 1 ] [ i ] = t			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 56 ( to 72 )				    >> 14 FOR_ITER 50 ( to 66 )					  
							      16 STORE_FAST 4 ( i )					    16 STORE_FAST 4 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 0 ( mat )					    4 18 LOAD_FAST 0 ( mat )					  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_CONST 1 ( 0 )					  
							      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
							      24 LOAD_FAST 4 ( i )					    24 LOAD_FAST 4 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 STORE_FAST 5 ( t )					    28 STORE_FAST 5 ( t )					  
							      								    								  
							      5 30 LOAD_FAST 0 ( mat )					    5 30 LOAD_FAST 0 ( mat )					  
							      32 LOAD_FAST 3 ( rows )					    32 LOAD_FAST 3 ( rows )					  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBTRACT						  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 4 ( i )					    40 LOAD_FAST 4 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 0 ( mat )					    44 LOAD_FAST 0 ( mat )					  
							      46 LOAD_CONST 1 ( 0 )					    46 LOAD_CONST 1 ( 0 )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 0 ( mat )					  
							      52 STORE_SUBSCR						    52 LOAD_CONST 2 ( 1 )					  
							      								    54 BINARY_SUBTRACT						  
							      6 54 LOAD_FAST 5 ( t )					    56 STORE_SUBSCR						  
							      56 LOAD_FAST 0 ( mat )					    								  
							      58 LOAD_FAST 3 ( rows )					    6 58 LOAD_FAST 5 ( t )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 0 ( mat )					  
							      62 BINARY_SUBTRACT					    62 LOAD_FAST 3 ( rows )					  
							      64 BINARY_SUBSCR						    64 LOAD_CONST 2 ( 1 )					  
							      66 LOAD_FAST 4 ( i )					    66 BINARY_SUBTRACT						  
							      68 STORE_SUBSCR						    68 BINARY_SUBSCR						  
							      70 JUMP_ABSOLUTE 14					    70 LOAD_FAST 4 ( i )					  
							      >> 72 POP_BLOCK						    72 STORE_SUBSCR						  
							      >> 74 LOAD_CONST 0 ( None )				    74 JUMP_ABSOLUTE 14						  
							      76 RETURN_VALUE NEW_LINE					    >> 76 POP_BLOCK						  
							      								    >> 78 LOAD_CONST 0 ( None )					  
							      								    80 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_BITS_IN_A_GIVEN_NUMBER				      SWAP_BITS_IN_A_GIVEN_NUMBER				    SWAP_BITS_IN_A_GIVEN_NUMBER					  SWAP_BITS_IN_A_GIVEN_NUMBER
--							      --							    --								  --
def swapBits ( x , p1 , p2 , n ) :			      Disassembly of <code object swapBits at 0x7f33e26494b0, file  Disassembly of <code object swapBits at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 )		      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  "XLM/dis_script.py", line 59, in <module>	for
    set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 )		      2 LOAD_FAST 1 ( p1 )					    2 LOAD_FAST 1 ( p1 )					  item in run_dis_script():   File "XLM/dis_script.p
    xor = ( set1 ^ set2 )				      4 BINARY_RSHIFT						    4 BINARY_RSHIFT						  y", line 47, in run_dis_script     co_code, co_nlo
    xor = ( xor << p1 ) | ( xor << p2 )			      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
    result = x ^ xor					      8 LOAD_FAST 3 ( n )					    8 LOAD_FAST 3 ( n )						  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    return result					      10 BINARY_LSHIFT						    10 BINARY_LSHIFT						  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  n parse     constants[arg] = ast.literal_eval(argr
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 BINARY_AND						    16 BINARY_AND						  ib/python3.7/ast.py", line 91, in literal_eval
							      18 STORE_FAST 4 ( set1 )					    18 STORE_FAST 4 ( set1 )					   return _convert(node_or_string)   File "/home/ubu
							      								    								  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      3 20 LOAD_FAST 0 ( x )					    3 20 LOAD_FAST 0 ( x )					  line 90, in _convert	   return _convert_signed_nu
							      22 LOAD_FAST 2 ( p2 )					    22 LOAD_FAST 2 ( p2 )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      24 BINARY_RSHIFT						    24 BINARY_RSHIFT						  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 2 ( ( 1 << n ) )				  ed_num     return _convert_num(node)	 File "/home
							      28 LOAD_FAST 3 ( n )					    28 LOAD_FAST 3 ( n )					  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      30 BINARY_LSHIFT						    30 BINARY_LSHIFT						  y", line 55, in _convert_num	   raise ValueError(
							      32 LOAD_CONST 1 ( 1 )					    32 LOAD_CONST 1 ( 1 )					  'malformed node or string: ' + repr(node)) ValueEr
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  ror: malformed node or string: <_ast.BinOp object
							      36 BINARY_AND						    36 BINARY_AND						  at 0x7fcb0f07f450>
							      38 STORE_FAST 5 ( set2 )					    38 STORE_FAST 5 ( set2 )					  
							      								    								  
							      4 40 LOAD_FAST 4 ( set1 )					    4 40 LOAD_FAST 5 ( set1 )					  
							      42 LOAD_FAST 5 ( set2 )					    42 LOAD_FAST 4 ( set2 )					  
							      44 BINARY_XOR						    44 BINARY_XOR						  
							      46 STORE_FAST 6 ( xor )					    46 STORE_FAST 6 ( xor )					  
							      								    								  
							      5 48 LOAD_FAST 6 ( xor )					    5 48 LOAD_FAST 6 ( xor )					  
							      50 LOAD_FAST 1 ( p1 )					    50 LOAD_FAST 1 ( p1 )					  
							      52 BINARY_LSHIFT						    52 BINARY_LSHIFT						  
							      54 LOAD_FAST 6 ( xor )					    54 LOAD_FAST 6 ( xor )					  
							      56 LOAD_FAST 2 ( p2 )					    56 LOAD_FAST 2 ( p2 )					  
							      58 BINARY_LSHIFT						    58 BINARY_LSHIFT						  
							      60 BINARY_OR						    60 BINARY_OR						  
							      62 STORE_FAST 6 ( xor )					    62 STORE_FAST 6 ( xor )					  
							      								    								  
							      6 64 LOAD_FAST 0 ( x )					    6 64 LOAD_FAST 0 ( x )					  
							      66 LOAD_FAST 6 ( xor )					    66 LOAD_FAST 6 ( xor )					  
							      68 BINARY_XOR						    68 BINARY_LSHIFT						  
							      70 STORE_FAST 7 ( result )				    70 STORE_FAST 7 ( result )					  
							      								    								  
							      7 72 LOAD_FAST 7 ( result )				    7 72 LOAD_FAST 7 ( result )					  
							      74 RETURN_VALUE NEW_LINE					    74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE
--							      --							    --								  --
def search ( arr , n , x ) :				      Disassembly of <code object search at 0x7f33e2653ed0, file "< Disassembly of <code object search at 0x7f2b0163dc90, file "< failure : number is not present! number is not pre
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  sent! number is not present! number is not present
    while ( i < n ) :					      2 STORE_FAST 3 ( i )					    2 STORE_FAST 3 ( i )					  ! number is not present! number is not present! nu
	if ( arr [ i ] == x ) :				      								    								  mber is not present! number is not present! number
	    return i					      3 4 SETUP_LOOP 48 ( to 54 )				    3 4 SETUP_LOOP 46 ( to 52 )					   is not present! number is not present! number is
	i = i + abs ( arr [ i ] - x )			      >> 6 LOAD_FAST 3 ( i )					    >> 6 LOAD_FAST 3 ( i )					  not present! number is not present! number is not
    print ( "number is not present!" )			      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  present! number is not present! number is not pres
    return - 1						      10 COMPARE_OP 0 ( < )					    10 COMPARE_OP 0 ( < )					  ent! number is not present! number is not present!
							      12 POP_JUMP_IF_FALSE 52					    12 POP_JUMP_IF_FALSE 50					   number is not present! #Results: 8, 10
							      								    								  
							      4 14 LOAD_FAST 0 ( arr )					    4 14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_FAST 3 ( i )					    16 LOAD_FAST 3 ( i )					  
							      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 LOAD_FAST 2 ( x )					    20 LOAD_FAST 2 ( x )					  
							      22 COMPARE_OP 2 ( == )					    22 COMPARE_OP 2 ( == )					  
							      24 POP_JUMP_IF_FALSE 30					    24 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      5 26 LOAD_FAST 3 ( i )					    5 26 LOAD_FAST 3 ( i )					  
							      28 RETURN_VALUE						    28 RETURN_VALUE						  
							      								    								  
							      6 >> 30 LOAD_FAST 3 ( i )					    6 >> 30 LOAD_FAST 3 ( i )					  
							      32 LOAD_GLOBAL 0 ( abs )					    32 LOAD_GLOBAL 0 ( abs )					  
							      34 LOAD_FAST 0 ( arr )					    34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 3 ( i )					    36 LOAD_FAST 3 ( i )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 2 ( x )					    40 LOAD_FAST 2 ( x )					  
							      42 BINARY_SUBTRACT					    42 BINARY_SUBTRACT						  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 STORE_FAST 3 ( i )					    48 STORE_FAST 3 ( i )					  
							      50 JUMP_ABSOLUTE 6					    								  
							      >> 52 POP_BLOCK						    7 >> 50 LOAD_GLOBAL 1 ( print )				  
							      								    52 LOAD_CONST 2 ( 'number is not present!' )		  
							      7 >> 54 LOAD_GLOBAL 1 ( print )				    54 CALL_FUNCTION 1						  
							      56 LOAD_CONST 2 ( 'number is not present!' )		    56 POP_TOP							  
							      58 CALL_FUNCTION 1					    								  
							      60 POP_TOP						    8 58 LOAD_CONST 3 ( - 1 )					  
							      								    60 RETURN_VALUE NEW_LINE					  
							      8 62 LOAD_CONST 3 ( - 1 )					    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
def minimumflip ( mat , n ) :				      Disassembly of <code object minimumflip at 0x7f33e2653ed0, fi Disassembly of <code object minimumflip at 0x7f2b0163dc90, fi error : /bin/bash: line 1:  4053 Segmentation faul
    flip = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( n ) :				      2 STORE_FAST 2 ( flip )					    2 STORE_FAST 2 ( flip )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( i ) :				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    if mat [ i ] [ j ] != mat [ j ] [ i ] :	      3 4 SETUP_LOOP 66 ( to 72 )				    3 4 SETUP_LOOP 70 ( to 76 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MINIMU
		flip += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  M_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1.dis
    return flip						      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 54 ( to 70 )				    >> 14 FOR_ITER 56 ( to 74 )					  
							      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
							      								    								  
							      4 18 SETUP_LOOP 48 ( to 68 )				    4 18 SETUP_LOOP 48 ( to 66 )				  
							      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_GLOBAL 0 ( range )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 36 ( to 66 )				    >> 28 FOR_ITER 36 ( to 64 )					  
							      30 STORE_FAST 4 ( j )					    30 STORE_FAST 4 ( j )					  
							      								    								  
							      5 32 LOAD_FAST 0 ( mat )					    5 32 LOAD_FAST 0 ( mat )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 4 ( j )					    38 LOAD_FAST 4 ( j )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( mat )					    42 LOAD_FAST 0 ( mat )					  
							      44 LOAD_FAST 4 ( j )					    44 LOAD_FAST 4 ( j )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_FAST 3 ( i )					    48 LOAD_FAST 3 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 COMPARE_OP 3 ( != )					    52 COMPARE_OP 3 ( != )					  
							      54 POP_JUMP_IF_FALSE 28					    54 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      6 56 LOAD_FAST 2 ( flip )					    6 56 LOAD_FAST 2 ( flip )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 2 ( flip )					    62 STORE_FAST 2 ( flip )					  
							      64 JUMP_ABSOLUTE 28					    >> 64 JUMP_ABSOLUTE 28					  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      >> 68 JUMP_ABSOLUTE 14					    >> 68 JUMP_ABSOLUTE 14					  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      								    								  
							      7 >> 72 LOAD_FAST 2 ( flip )				    7 >> 72 LOAD_FAST 2 ( flip )				  
							      74 RETURN_VALUE NEW_LINE					    74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
def countPairs ( a , n ) :				      Disassembly of <code object countPairs at 0x7f33e2653f60, fil Disassembly of <code object countPairs at 0x7f2b01639f60, fil failure : #Results: 0, 10
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( count )					    2 STORE_FAST 2 ( count )					  
	for j in range ( i + 1 , n ) :			      								    								  
	    if ( a [ i ] & a [ j ] ) == 0 :		      3 4 SETUP_LOOP 70 ( to 76 )				    3 4 SETUP_LOOP 74 ( to 80 )					  
		count += 2				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return count					      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 56 ( to 74 )				    >> 16 FOR_ITER 62 ( to 78 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 50 ( to 72 )				    4 20 SETUP_LOOP 52 ( to 76 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 CALL_FUNCTION 2					    32 CALL_FUNCTION 2						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 32 ( to 70 )				    >> 36 FOR_ITER 34 ( to 74 )					  
							      38 STORE_FAST 4 ( j )					    38 STORE_FAST 4 ( j )					  
							      								    								  
							      5 40 LOAD_FAST 0 ( a )					    5 40 LOAD_FAST 0 ( a )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( a )					    46 LOAD_FAST 0 ( a )					  
							      48 LOAD_FAST 4 ( j )					    48 LOAD_FAST 4 ( j )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 BINARY_AND						    52 BINARY_AND						  
							      54 LOAD_CONST 1 ( 0 )					    54 LOAD_CONST 1 ( 0 )					  
							      56 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_FALSE 36					    58 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      6 60 LOAD_FAST 2 ( count )				    6 60 LOAD_FAST 2 ( count )					  
							      62 LOAD_CONST 3 ( 2 )					    62 LOAD_CONST 3 ( 2 )					  
							      64 INPLACE_ADD						    64 INPLACE_ADD						  
							      66 STORE_FAST 2 ( count )					    66 STORE_FAST 2 ( count )					  
							      68 JUMP_ABSOLUTE 36					    68 JUMP_ABSOLUTE 36						  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      >> 72 JUMP_ABSOLUTE 16					    >> 72 JUMP_ABSOLUTE 16					  
							      >> 74 POP_BLOCK						    >> 74 POP_BLOCK						  
							      								    								  
							      7 >> 76 LOAD_FAST 2 ( count )				    7 >> 76 LOAD_FAST 2 ( count )				  
							      78 RETURN_VALUE NEW_LINE					    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			      CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			    CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			  CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT
--							      --							    --								  --
def areEqual ( arr1 , arr2 , n , m ) :			      Disassembly of <code object areEqual at 0x7f33e2644f60, file  Disassembly of <code object areEqual at 0x7f2b0163dc90, file  script_not_found : None
    if ( n != m ) :					      2 0 LOAD_FAST 2 ( n )					    2 0 LOAD_FAST 2 ( n )					  
	return False ;					      2 LOAD_FAST 3 ( m )					    2 LOAD_FAST 3 ( m )						  
    arr1.sort ( ) ;					      4 COMPARE_OP 3 ( != )					    4 COMPARE_OP 3 ( != )					  
    arr2.sort ( ) ;					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    for i in range ( 0 , n - 1 ) :			      								    								  
	if ( arr1 [ i ] != arr2 [ i ] ) :		      3 8 LOAD_CONST 1 ( False )				    3 8 LOAD_CONST 1 ( False )					  
	    return False ;				      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return True ;					      								    								  
							      4 >> 12 LOAD_FAST 0 ( arr1 )				    4 >> 12 LOAD_FAST 0 ( arr1 )				  
							      14 LOAD_METHOD 0 ( sort )					    14 LOAD_METHOD 0 ( sort )					  
							      16 CALL_METHOD 0						    16 CALL_METHOD 0						  
							      18 POP_TOP						    18 POP_TOP							  
							      								    								  
							      5 20 LOAD_FAST 1 ( arr2 )					    5 20 LOAD_FAST 1 ( arr2 )					  
							      22 LOAD_METHOD 0 ( sort )					    22 LOAD_METHOD 0 ( sort )					  
							      24 CALL_METHOD 0						    24 CALL_METHOD 0						  
							      26 POP_TOP						    26 POP_TOP							  
							      								    								  
							      6 28 SETUP_LOOP 42 ( to 72 )				    6 28 SETUP_LOOP 40 ( to 74 )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_CONST 2 ( 0 )					    32 LOAD_CONST 2 ( 0 )					  
							      34 LOAD_FAST 2 ( n )					    34 LOAD_FAST 2 ( n )					  
							      36 LOAD_CONST 3 ( 1 )					    36 LOAD_CONST 3 ( 1 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 CALL_FUNCTION 2					    40 CALL_FUNCTION 2						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 24 ( to 70 )				    >> 44 FOR_ITER 22 ( to 72 )					  
							      46 STORE_FAST 4 ( i )					    46 STORE_FAST 4 ( i )					  
							      								    								  
							      7 48 LOAD_FAST 0 ( arr1 )					    7 48 LOAD_FAST 0 ( arr1 )					  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 4 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 1 ( arr2 )					    54 LOAD_FAST 1 ( arr2 )					  
							      56 LOAD_FAST 4 ( i )					    56 LOAD_FAST 4 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 COMPARE_OP 3 ( != )					    60 COMPARE_OP 3 ( != )					  
							      62 POP_JUMP_IF_FALSE 44					    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      8 64 LOAD_CONST 1 ( False )				    8 64 LOAD_CONST 1 ( False )					  
							      66 RETURN_VALUE						    66 RETURN_VALUE						  
							      68 JUMP_ABSOLUTE 44					    68 JUMP_ABSOLUTE 44						  
							      >> 70 POP_BLOCK						    70 POP_BLOCK						  
							      								    >> 72 JUMP_ABSOLUTE 44					  
							      9 >> 72 LOAD_CONST 4 ( True )				    >> 74 POP_BLOCK						  
							      74 RETURN_VALUE NEW_LINE					    								  
							      								    9 >> 76 LOAD_CONST 4 ( True )				  
							      								    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X	  COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X
--							      --							    --								  --
def countPairs ( arr1 , arr2 , m , n , x ) :		      Disassembly of <code object countPairs at 0x7f33e26499c0, fil Disassembly of <code object countPairs at 0x7f2b016399c0, fil failure : #Results: 9, 10
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( m ) :				      2 STORE_FAST 5 ( count )					    2 STORE_FAST 5 ( count )					  
	for j in range ( n ) :				      								    								  
	    if arr1 [ i ] + arr2 [ j ] == x :		      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 SETUP_LOOP 62 ( to 68 )					  
		count = count + 1			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return count					      8 LOAD_FAST 2 ( m )					    8 LOAD_FAST 2 ( m )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 50 ( to 66 )				    >> 14 FOR_ITER 50 ( to 66 )					  
							      16 STORE_FAST 6 ( i )					    16 STORE_FAST 6 ( i )					  
							      								    								  
							      4 18 SETUP_LOOP 44 ( to 64 )				    4 18 SETUP_LOOP 44 ( to 64 )				  
							      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_GLOBAL 0 ( range )					  
							      22 LOAD_FAST 3 ( n )					    22 LOAD_FAST 5 ( n )					  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 32 ( to 62 )				    >> 28 FOR_ITER 36 ( to 62 )					  
							      30 STORE_FAST 7 ( j )					    30 STORE_FAST 7 ( j )					  
							      								    								  
							      5 32 LOAD_FAST 0 ( arr1 )					    5 32 LOAD_FAST 0 ( arr1 )					  
							      34 LOAD_FAST 6 ( i )					    34 LOAD_FAST 6 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 1 ( arr2 )					    38 LOAD_FAST 1 ( arr2 )					  
							      40 LOAD_FAST 7 ( j )					    40 LOAD_FAST 7 ( j )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 BINARY_ADD						    44 BINARY_ADD						  
							      46 LOAD_FAST 4 ( x )					    46 LOAD_FAST 3 ( x )					  
							      48 COMPARE_OP 2 ( == )					    48 COMPARE_OP 2 ( == )					  
							      50 POP_JUMP_IF_FALSE 28					    50 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      6 52 LOAD_FAST 5 ( count )				    6 52 LOAD_FAST 5 ( count )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_ADD						    56 BINARY_ADD						  
							      58 STORE_FAST 5 ( count )					    58 STORE_FAST 5 ( count )					  
							      60 JUMP_ABSOLUTE 28					    60 JUMP_ABSOLUTE 28						  
							      >> 62 POP_BLOCK						    >> 62 POP_BLOCK						  
							      >> 64 JUMP_ABSOLUTE 14					    >> 64 JUMP_ABSOLUTE 14					  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      7 >> 68 LOAD_FAST 5 ( count )				    7 >> 68 LOAD_FAST 5 ( count )				  
							      70 RETURN_VALUE NEW_LINE					    70 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
def findMinDiff ( arr , n ) :				      Disassembly of <code object findMinDiff at 0x7f33e2653ed0, fi Disassembly of <code object findMinDiff at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    arr = sorted ( arr )				      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  "XLM/dis_script.py", line 59, in <module>	for
    diff = 10 ** 20					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( n - 1 ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  y", line 47, in run_dis_script     co_code, co_nlo
	if arr [ i + 1 ] - arr [ i ] < diff :		      6 STORE_FAST 0 ( arr )					    6 STORE_FAST 0 ( arr )					  cals, co_varnames, co_names, co_consts, co_linesta
	    diff = arr [ i + 1 ] - arr [ i ]		      								    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
    return diff						      3 8 LOAD_CONST 1 ( 100000000000000000000 )		    3 8 LOAD_CONST 1 ( 0.0000.0000.0000.0000.0000.0000.0000.0000. pack non-iterable NoneType object
							      10 STORE_FAST 2 ( diff )					    								  
							      								    								  
							      4 12 SETUP_LOOP 64 ( to 78 )				    								  
							      14 LOAD_GLOBAL 1 ( range )				    								  
							      16 LOAD_FAST 1 ( n )					    								  
							      18 LOAD_CONST 2 ( 1 )					    								  
							      20 BINARY_SUBTRACT					    								  
							      22 CALL_FUNCTION 1					    								  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 48 ( to 76 )				    								  
							      28 STORE_FAST 3 ( i )					    								  
							      								    								  
							      5 30 LOAD_FAST 0 ( arr )					    								  
							      32 LOAD_FAST 3 ( i )					    								  
							      34 LOAD_CONST 2 ( 1 )					    								  
							      36 BINARY_ADD						    								  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 BINARY_SUBTRACT					    								  
							      48 LOAD_FAST 2 ( diff )					    								  
							      50 COMPARE_OP 0 ( < )					    								  
							      52 POP_JUMP_IF_FALSE 26					    								  
							      								    								  
							      6 54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 3 ( i )					    								  
							      58 LOAD_CONST 2 ( 1 )					    								  
							      60 BINARY_ADD						    								  
							      62 BINARY_SUBSCR						    								  
							      64 LOAD_FAST 0 ( arr )					    								  
							      66 LOAD_FAST 3 ( i )					    								  
							      68 BINARY_SUBSCR						    								  
							      70 BINARY_SUBTRACT					    								  
							      72 STORE_FAST 2 ( diff )					    								  
							      74 JUMP_ABSOLUTE 26					    								  
							      >> 76 POP_BLOCK						    								  
							      								    								  
							      7 >> 78 LOAD_FAST 2 ( diff )				    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
def swap ( xp , yp ) :					      Disassembly of <code object swap at 0x7f33e26499c0, file "<di Disassembly of <code object swap at 0x7f2b0164ded0, file "<di script_not_found : None
    if ( xp [ 0 ] == yp [ 0 ] ) :			      2 0 LOAD_FAST 0 ( xp )					    2 0 LOAD_FAST 0 ( xp )					  
	return						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    xp [ 0 ] = xp [ 0 ] + yp [ 0 ]			      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
    yp [ 0 ] = xp [ 0 ] - yp [ 0 ]			      6 LOAD_FAST 1 ( yp )					    6 LOAD_FAST 1 ( yp )					  
    xp [ 0 ] = xp [ 0 ] - yp [ 0 ]			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
							      10 BINARY_SUBSCR						    10 BINARY_SUBSCR						  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 16 LOAD_CONST 0 ( None )				    3 16 LOAD_CONST 0 ( None )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_FAST 0 ( xp )				    4 >> 20 LOAD_FAST 0 ( xp )					  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 1 ( yp )					    26 LOAD_FAST 1 ( yp )					  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 1 ( 0 )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 LOAD_FAST 0 ( xp )					    34 LOAD_FAST 1 ( yp )					  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 STORE_SUBSCR						    38 STORE_SUBSCR						  
							      								    								  
							      5 40 LOAD_FAST 0 ( xp )					    5 40 LOAD_FAST 0 ( xp )					  
							      42 LOAD_CONST 1 ( 0 )					    42 LOAD_CONST 1 ( 0 )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 1 ( yp )					    46 LOAD_FAST 1 ( yp )					  
							      48 LOAD_CONST 1 ( 0 )					    48 LOAD_CONST 1 ( 0 )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 BINARY_SUBTRACT					    52 BINARY_SUBTRACT						  
							      54 LOAD_FAST 1 ( yp )					    54 LOAD_FAST 1 ( yp )					  
							      56 LOAD_CONST 1 ( 0 )					    56 LOAD_CONST 1 ( 0 )					  
							      58 STORE_SUBSCR						    58 STORE_SUBSCR						  
							      								    								  
							      6 60 LOAD_FAST 0 ( xp )					    6 60 LOAD_FAST 0 ( xp )					  
							      62 LOAD_CONST 1 ( 0 )					    62 LOAD_CONST 1 ( 0 )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 1 ( yp )					    66 LOAD_FAST 1 ( yp )					  
							      68 LOAD_CONST 1 ( 0 )					    68 LOAD_CONST 1 ( 0 )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 BINARY_SUBTRACT					    72 BINARY_SUBTRACT						  
							      74 LOAD_FAST 0 ( xp )					    74 LOAD_FAST 0 ( xp )					  
							      76 LOAD_CONST 1 ( 0 )					    76 LOAD_CONST 1 ( 0 )					  
							      78 STORE_SUBSCR						    78 STORE_SUBSCR						  
							      80 LOAD_CONST 0 ( None )					    80 LOAD_CONST 0 ( None )					  
							      82 RETURN_VALUE NEW_LINE					    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def reverseStr ( str ) :				      Disassembly of <code object reverseStr at 0x7f33e26494b0, fil Disassembly of <code object reverseStr at 0x7f2b0164d390, fil script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    i , j = 0 , n - 1					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    while i < j :					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	str [ i ] , str [ j ] = str [ j ] , str [ i ]	      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	i += 1						      								    								  
	j -= 1						      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 ROT_TWO						    16 ROT_TWO							  
							      18 STORE_FAST 2 ( i )					    18 STORE_FAST 2 ( i )					  
							      20 STORE_FAST 3 ( j )					    20 STORE_FAST 3 ( j )					  
							      								    								  
							      4 22 SETUP_LOOP 54 ( to 78 )				    4 22 SETUP_LOOP 60 ( to 80 )				  
							      >> 24 LOAD_FAST 2 ( i )					    >> 24 LOAD_FAST 2 ( i )					  
							      26 LOAD_FAST 3 ( j )					    26 LOAD_FAST 3 ( j )					  
							      28 COMPARE_OP 0 ( < )					    28 COMPARE_OP 0 ( < )					  
							      30 POP_JUMP_IF_FALSE 76					    30 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      5 32 LOAD_FAST 0 ( str )					    5 32 LOAD_FAST 0 ( str )					  
							      34 LOAD_FAST 3 ( j )					    34 LOAD_FAST 3 ( j )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 0 ( str )					    38 LOAD_FAST 0 ( str )					  
							      40 LOAD_FAST 2 ( i )					    40 LOAD_FAST 2 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 ROT_TWO						    44 ROT_TWO							  
							      46 LOAD_FAST 0 ( str )					    46 LOAD_FAST 0 ( str )					  
							      48 LOAD_FAST 2 ( i )					    48 LOAD_FAST 2 ( i )					  
							      50 STORE_SUBSCR						    50 STORE_SUBSCR						  
							      52 LOAD_FAST 0 ( str )					    52 LOAD_FAST 0 ( str )					  
							      54 LOAD_FAST 3 ( j )					    54 LOAD_FAST 2 ( i )					  
							      56 STORE_SUBSCR						    56 BINARY_SUBSCR						  
							      								    58 ROT_TWO							  
							      6 58 LOAD_FAST 2 ( i )					    60 LOAD_FAST 0 ( str )					  
							      60 LOAD_CONST 2 ( 1 )					    62 LOAD_FAST 2 ( i )					  
							      62 INPLACE_ADD						    64 STORE_SUBSCR						  
							      64 STORE_FAST 2 ( i )					    66 LOAD_FAST 0 ( str )					  
							      								    68 LOAD_FAST 3 ( j )					  
							      7 66 LOAD_FAST 3 ( j )					    70 STORE_SUBSCR						  
							      68 LOAD_CONST 2 ( 1 )					    								  
							      70 INPLACE_SUBTRACT					    6 72 LOAD_FAST 2 ( i )					  
							      72 STORE_FAST 3 ( j )					    74 LOAD_CONST 2 ( 1 )					  
							      74 JUMP_ABSOLUTE 24					    76 INPLACE_SUBTRACT						  
							      >> 76 POP_BLOCK						    78 STORE_FAST 2 ( i )					  
							      >> 78 LOAD_CONST 0 ( None )				    80 JUMP_ABSOLUTE 24						  
							      80 RETURN_VALUE NEW_LINE					    >> 82 POP_BLOCK						  
							      								    >> 84 LOAD_CONST 0 ( None )					  
							      								    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS		      MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			    MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			  MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS
--							      --							    --								  --
def minDifferenceAmongMaxMin ( arr , N , K ) :		      Disassembly of <code object minDifferenceAmongMaxMin at 0x7f3 Disassembly of <code object minDifferenceAmongMaxMin at 0x7f2 error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    res = 2147483647					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 33, in <module>	  Fi
    for i in range ( ( N - K ) + 1 ) :			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in minDifferenceAmongMaxMin Ty
	curSeqDiff = arr [ i + K - 1 ] - arr [ i ]	      6 POP_TOP							    6 POP_TOP							  peError: unsupported operand type(s) for +: 'range
	res = min ( res , curSeqDiff )			      								    								  ' and 'int'
    return res						      3 8 LOAD_CONST 1 ( 2147483647 )				    3 8 LOAD_CONST 1 ( 2147483647 )				  
							      10 STORE_FAST 3 ( res )					    10 STORE_FAST 3 ( res )					  
							      								    								  
							      4 12 SETUP_LOOP 58 ( to 72 )				    4 12 SETUP_LOOP 56 ( to 70 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_FAST 1 ( N )					    16 LOAD_FAST 1 ( N )					  
							      18 LOAD_FAST 2 ( K )					    18 LOAD_FAST 2 ( K )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 LOAD_CONST 2 ( 1 )					    22 CALL_FUNCTION 1						  
							      24 BINARY_ADD						    24 LOAD_CONST 2 ( 1 )					  
							      26 CALL_FUNCTION 1					    26 BINARY_ADD						  
							      28 GET_ITER						    28 CALL_FUNCTION 1						  
							      >> 30 FOR_ITER 38 ( to 70 )				    30 GET_ITER							  
							      32 STORE_FAST 4 ( i )					    >> 32 FOR_ITER 38 ( to 68 )					  
							      								    34 STORE_FAST 4 ( i )					  
							      5 34 LOAD_FAST 0 ( arr )					    								  
							      36 LOAD_FAST 4 ( i )					    5 36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_FAST 2 ( K )					    38 LOAD_FAST 4 ( i )					  
							      40 BINARY_ADD						    40 LOAD_FAST 2 ( K )					  
							      42 LOAD_CONST 2 ( 1 )					    42 BINARY_ADD						  
							      44 BINARY_SUBTRACT					    44 LOAD_CONST 2 ( 1 )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBTRACT						  
							      48 LOAD_FAST 0 ( arr )					    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 0 ( arr )					  
							      52 BINARY_SUBSCR						    52 LOAD_FAST 4 ( i )					  
							      54 BINARY_SUBTRACT					    54 BINARY_SUBSCR						  
							      56 STORE_FAST 5 ( curSeqDiff )				    56 BINARY_SUBTRACT						  
							      								    58 STORE_FAST 5 ( curSeqDiff )				  
							      6 58 LOAD_GLOBAL 2 ( min )				    								  
							      60 LOAD_FAST 3 ( res )					    6 60 LOAD_GLOBAL 2 ( min )					  
							      62 LOAD_FAST 5 ( curSeqDiff )				    62 LOAD_FAST 3 ( res )					  
							      64 CALL_FUNCTION 2					    64 LOAD_FAST 5 ( curSeqDiff )				  
							      66 STORE_FAST 3 ( res )					    66 CALL_FUNCTION 2						  
							      68 JUMP_ABSOLUTE 30					    68 STORE_FAST 3 ( res )					  
							      >> 70 POP_BLOCK						    70 JUMP_ABSOLUTE 32						  
							      								    >> 72 POP_BLOCK						  
							      7 >> 72 LOAD_FAST 3 ( res )				    								  
							      74 RETURN_VALUE NEW_LINE					    7 74 LOAD_FAST 3 ( res )					  
							      								    76 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
def countRect ( n ) :					      Disassembly of <code object countRect at 0x7f33e26494b0, file Disassembly of <code object countRect at 0x7f2b0163dc90, file error : Traceback (most recent call last):   File
    ans = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 2 STORE_FAST 1 ( ans )					    2 STORE_FAST 1 ( ans )					  (item)   File "main.py", line 36, in <module>	  Fi
	height = length					      								    								  le "<dis>", line 2, in countRect NameError: name '
	while ( height * length <= n ) :		      3 4 SETUP_LOOP 70 ( to 76 )				    3 4 SETUP_LOOP 68 ( to 74 )					  height' is not defined
	    ans += 1					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    height += 1					      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
    return ans						      10 LOAD_GLOBAL 1 ( int )					    10 LOAD_GLOBAL 1 ( int )					  
							      12 LOAD_GLOBAL 2 ( math )					    12 LOAD_GLOBAL 2 ( math )					  
							      14 LOAD_METHOD 3 ( sqrt )					    14 LOAD_METHOD 3 ( sqrt )					  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_FAST 0 ( n )					  
							      18 CALL_METHOD 1						    18 CALL_METHOD 1						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 2 ( 1 )					  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 42 ( to 74 )				    >> 30 FOR_ITER 52 ( to 72 )					  
							      32 STORE_FAST 2 ( length )				    32 STORE_FAST 2 ( length )					  
							      								    								  
							      4 34 LOAD_FAST 2 ( length )				    4 34 LOAD_FAST 2 ( length )					  
							      36 STORE_FAST 3 ( height )				    36 STORE_FAST 3 ( height )					  
							      								    								  
							      5 38 SETUP_LOOP 32 ( to 72 )				    5 38 SETUP_LOOP 40 ( to 70 )				  
							      >> 40 LOAD_FAST 3 ( height )				    >> 40 LOAD_GLOBAL 4 ( height )				  
							      42 LOAD_FAST 2 ( length )					    42 LOAD_FAST 2 ( length )					  
							      44 BINARY_MULTIPLY					    44 BINARY_MULTIPLY						  
							      46 LOAD_FAST 0 ( n )					    46 LOAD_FAST 0 ( n )					  
							      48 COMPARE_OP 1 ( <= )					    48 COMPARE_OP 1 ( <= )					  
							      50 POP_JUMP_IF_FALSE 70					    50 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      6 52 LOAD_FAST 1 ( ans )					    6 52 LOAD_FAST 1 ( ans )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 INPLACE_ADD						    56 INPLACE_ADD						  
							      58 STORE_FAST 1 ( ans )					    58 STORE_FAST 1 ( ans )					  
							      								    								  
							      7 60 LOAD_FAST 3 ( height )				    7 60 LOAD_FAST 3 ( height )					  
							      62 LOAD_CONST 2 ( 1 )					    62 LOAD_CONST 2 ( 1 )					  
							      64 INPLACE_ADD						    64 INPLACE_ADD						  
							      66 STORE_FAST 3 ( height )				    66 STORE_FAST 3 ( height )					  
							      68 JUMP_ABSOLUTE 40					    >> 68 JUMP_ABSOLUTE 40					  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      >> 72 JUMP_ABSOLUTE 30					    >> 72 JUMP_ABSOLUTE 30					  
							      >> 74 POP_BLOCK						    >> 74 POP_BLOCK						  
							      								    								  
							      8 >> 76 LOAD_FAST 1 ( ans )				    8 >> 76 LOAD_FAST 1 ( ans )					  
							      78 RETURN_VALUE NEW_LINE					    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
def isLucky ( n ) :					      Disassembly of <code object isLucky at 0x7f33e2644930, file " Disassembly of <code object isLucky at 0x7f2b0163dc90, file " script_not_found : None
    next_position = n					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
    if isLucky.counter > n :				      2 STORE_FAST 1 ( next_position )				    2 STORE_FAST 1 ( content )					  
	return 1					      								    								  
    if n % isLucky.counter == 0 :			      3 4 LOAD_GLOBAL 0 ( isLucky )				    3 4 LOAD_GLOBAL 0 ( isLucky )				  
	return 0					      6 LOAD_ATTR 1 ( counter )					    6 LOAD_ATTR 1 ( counter )					  
    next_position = next_position - next_position / isLucky.c 8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
    isLucky.counter = isLucky.counter + 1		      10 COMPARE_OP 4 ( > )					    10 COMPARE_OP 4 ( > )					  
    return isLucky ( next_position )			      12 POP_JUMP_IF_FALSE 18					    12 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      4 14 LOAD_CONST 1 ( 1 )					    4 14 LOAD_CONST 1 ( 1 )					  
							      16 RETURN_VALUE						    16 RETURN_VALUE						  
							      								    								  
							      5 >> 18 LOAD_FAST 0 ( n )					    5 >> 18 LOAD_FAST 0 ( n )					  
							      20 LOAD_GLOBAL 0 ( isLucky )				    20 LOAD_GLOBAL 2 ( isLucky )				  
							      22 LOAD_ATTR 1 ( counter )				    22 LOAD_ATTR 1 ( counter )					  
							      24 BINARY_MODULO						    24 LOAD_CONST 2 ( 0 )					  
							      26 LOAD_CONST 2 ( 0 )					    26 COMPARE_OP 2 ( == )					  
							      28 COMPARE_OP 2 ( == )					    28 POP_JUMP_IF_FALSE 34					  
							      30 POP_JUMP_IF_FALSE 36					    								  
							      								    6 30 LOAD_CONST 2 ( 0 )					  
							      6 32 LOAD_CONST 2 ( 0 )					    32 RETURN_VALUE						  
							      34 RETURN_VALUE						    								  
							      								    7 >> 34 LOAD_FAST 1 ( content )				  
							      7 >> 36 LOAD_FAST 1 ( next_position )			    36 LOAD_FAST 1 ( content )					  
							      38 LOAD_FAST 1 ( next_position )				    38 BINARY_SUBTRACT						  
							      40 LOAD_GLOBAL 0 ( isLucky )				    40 LOAD_GLOBAL 3 ( isLucky )				  
							      42 LOAD_ATTR 1 ( counter )				    42 LOAD_ATTR 1 ( counter )					  
							      44 BINARY_TRUE_DIVIDE					    44 BINARY_TRUE_DIVIDE					  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 STORE_FAST 1 ( next_position )				    48 STORE_FAST 1 ( content )					  
							      								    								  
							      8 50 LOAD_GLOBAL 0 ( isLucky )				    8 50 LOAD_GLOBAL 4 ( isLucky )				  
							      52 LOAD_ATTR 1 ( counter )				    52 LOAD_ATTR 1 ( counter )					  
							      54 LOAD_CONST 1 ( 1 )					    54 LOAD_CONST 1 ( 1 )					  
							      56 BINARY_ADD						    56 BINARY_ADD						  
							      58 LOAD_GLOBAL 0 ( isLucky )				    58 LOAD_FAST 2 ( isLucky )					  
							      60 STORE_ATTR 1 ( counter )				    60 STORE_ATTR 1 ( counter )					  
							      								    								  
							      9 62 LOAD_GLOBAL 0 ( isLucky )				    9 62 LOAD_GLOBAL 5 ( isLucky )				  
							      64 LOAD_FAST 1 ( next_position )				    64 LOAD_FAST 1 ( content )					  
							      66 CALL_FUNCTION 1					    66 CALL_FUNCTION 1						  
							      68 RETURN_VALUE NEW_LINE					    68 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING_1			      GENERATE_ROTATIONS_GIVEN_STRING_1				    GENERATE_ROTATIONS_GIVEN_STRING_1				  GENERATE_ROTATIONS_GIVEN_STRING_1
--							      --							    --								  --
def printRotatedString ( string ) :			      Disassembly of <code object printRotatedString at 0x7f33e2644 Disassembly of <code object printRotatedString at 0x7f2b0163d script_not_found : None
    n = len ( string )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    temp = string + string				      2 LOAD_FAST 0 ( string )					    2 LOAD_FAST 0 ( string )					  
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	for j in range ( n ) :				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    print ( temp [ i + j ] , end = "" )		      								    								  
	print ( )					      3 8 LOAD_FAST 0 ( string )				    3 8 LOAD_FAST 0 ( string )					  
							      10 LOAD_FAST 0 ( string )					    10 LOAD_FAST 0 ( string )					  
							      12 BINARY_ADD						    12 BINARY_ADD						  
							      14 STORE_FAST 2 ( temp )					    14 STORE_FAST 2 ( temp )					  
							      								    								  
							      4 16 SETUP_LOOP 60 ( to 78 )				    4 16 SETUP_LOOP 56 ( to 78 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_FAST 1 ( n )					    20 LOAD_FAST 1 ( n )					  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 48 ( to 76 )				    >> 26 FOR_ITER 44 ( to 76 )					  
							      28 STORE_FAST 3 ( i )					    28 STORE_FAST 3 ( i )					  
							      								    								  
							      5 30 SETUP_LOOP 36 ( to 68 )				    5 30 SETUP_LOOP 36 ( to 74 )				  
							      32 LOAD_GLOBAL 1 ( range )				    32 LOAD_GLOBAL 1 ( range )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 24 ( to 66 )				    >> 40 FOR_ITER 24 ( to 72 )					  
							      42 STORE_FAST 4 ( j )					    42 STORE_FAST 4 ( j )					  
							      								    								  
							      6 44 LOAD_GLOBAL 2 ( print )				    6 44 LOAD_GLOBAL 2 ( print )				  
							      46 LOAD_FAST 2 ( temp )					    46 LOAD_FAST 2 ( temp )					  
							      48 LOAD_FAST 3 ( i )					    48 LOAD_FAST 3 ( i )					  
							      50 LOAD_FAST 4 ( j )					    50 LOAD_FAST 4 ( j )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 1 ( '' )					    56 LOAD_CONST 1 ( '' )					  
							      58 LOAD_CONST 2 ( ( 'end' , ) )				    58 LOAD_CONST 2 ( ( 'end' , ) )				  
							      60 CALL_FUNCTION_KW 2					    60 CALL_FUNCTION_KW 2					  
							      62 POP_TOP						    62 POP_TOP							  
							      64 JUMP_ABSOLUTE 40					    64 JUMP_ABSOLUTE 40						  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    >> 68 JUMP_ABSOLUTE 26					  
							      7 >> 68 LOAD_GLOBAL 2 ( print )				    >> 70 POP_BLOCK						  
							      70 CALL_FUNCTION 0					    								  
							      72 POP_TOP						    7 72 LOAD_GLOBAL 2 ( print )				  
							      74 JUMP_ABSOLUTE 26					    74 CALL_FUNCTION 0						  
							      >> 76 POP_BLOCK						    76 POP_TOP							  
							      >> 78 LOAD_CONST 0 ( None )				    78 LOAD_CONST 0 ( None )					  
							      80 RETURN_VALUE NEW_LINE					    80 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
def printDistinct ( arr , n ) :				      Disassembly of <code object printDistinct at 0x7f33e2649a50,  Disassembly of <code object printDistinct at 0x7f2b0164d660,  script_not_found : None
    s = dict ( ) ;					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	if ( arr [ i ] not in s.keys ( ) ) :		      4 STORE_FAST 2 ( s )					    4 STORE_FAST 2 ( s )					  
	    s [ arr [ i ] ] = arr [ i ] ;		      								    								  
	    print ( arr [ i ] , end = " " ) ;		      3 6 SETUP_LOOP 64 ( to 72 )				    3 6 SETUP_LOOP 70 ( to 78 )					  
							      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 52 ( to 70 )				    >> 16 FOR_ITER 56 ( to 76 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 0 ( arr )					    4 20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 2 ( s )					    26 LOAD_FAST 2 ( s )					  
							      28 LOAD_METHOD 2 ( keys )					    28 LOAD_METHOD 2 ( keys )					  
							      30 CALL_METHOD 0						    30 CALL_METHOD 0						  
							      32 COMPARE_OP 7 ( not in )				    32 COMPARE_OP 7 ( not in )					  
							      34 POP_JUMP_IF_FALSE 16					    34 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      5 36 LOAD_FAST 0 ( arr )					    5 36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_FAST 3 ( i )					    38 LOAD_FAST 3 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 2 ( s )					    42 LOAD_FAST 2 ( s )					  
							      44 LOAD_FAST 0 ( arr )					    44 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 STORE_SUBSCR						    50 STORE_SUBSCR						  
							      								    								  
							      6 52 LOAD_GLOBAL 3 ( print )				    6 52 LOAD_GLOBAL 3 ( print )				  
							      54 LOAD_FAST 0 ( arr )					    54 LOAD_FAST 0 ( arr )					  
							      56 LOAD_FAST 3 ( i )					    56 LOAD_FAST 3 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_CONST 1 ( ' ' )					    60 LOAD_CONST 1 ( ' ' )					  
							      62 LOAD_CONST 2 ( ( 'end' , ) )				    62 LOAD_CONST 2 ( ( 'end' , ) )				  
							      64 CALL_FUNCTION_KW 2					    64 CALL_FUNCTION_KW 2					  
							      66 POP_TOP						    66 POP_TOP							  
							      68 JUMP_ABSOLUTE 16					    68 JUMP_ABSOLUTE 16						  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      >> 72 LOAD_CONST 0 ( None )				    >> 72 LOAD_CONST 0 ( None )					  
							      74 RETURN_VALUE NEW_LINE					    74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
def ispalindrome ( s ) :				      Disassembly of <code object ispalindrome at 0x7f33e2644f60, f Disassembly of <code object ispalindrome at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    l = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    i = 0						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  (item)   File "main.py", line 36, in <module>	  Fi
    j = l - 1						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in ispalindrome TypeError: str
    while i <= j :					      6 STORE_FAST 1 ( l )					    6 STORE_FAST 1 ( l )					  ing indices must be integers
	if ( s [ i ] != s [ j ] ) :			      								    								  
	    return False				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	i += 1						      10 STORE_FAST 2 ( i )					    10 STORE_FAST 2 ( i )					  
	j -= 1						      								    								  
    return True						      4 12 LOAD_FAST 1 ( l )					    4 12 LOAD_FAST 1 ( l )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 STORE_FAST 3 ( j )					    18 STORE_FAST 3 ( j )					  
							      								    								  
							      5 20 SETUP_LOOP 48 ( to 70 )				    5 20 SETUP_LOOP 46 ( to 66 )				  
							      >> 22 LOAD_FAST 2 ( i )					    >> 22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 3 ( j )					    24 LOAD_FAST 3 ( j )					  
							      26 COMPARE_OP 1 ( <= )					    26 COMPARE_OP 1 ( <= )					  
							      28 POP_JUMP_IF_FALSE 68					    28 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      6 30 LOAD_FAST 0 ( s )					    6 30 LOAD_FAST 0 ( s )					  
							      32 LOAD_FAST 2 ( i )					    32 LOAD_FAST 2 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 0 ( s )					    36 LOAD_FAST 0 ( s )					  
							      38 LOAD_FAST 3 ( j )					    38 LOAD_FAST 3 ( j )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 COMPARE_OP 3 ( != )					    42 COMPARE_OP 3 ( != )					  
							      44 POP_JUMP_IF_FALSE 50					    44 POP_JUMP_IF_FALSE 50					  
							      								    								  
							      7 46 LOAD_CONST 3 ( False )				    7 46 LOAD_CONST 3 ( False )					  
							      48 RETURN_VALUE						    48 RETURN_VALUE						  
							      								    								  
							      8 >> 50 LOAD_FAST 2 ( i )					    8 >> 50 LOAD_FAST 2 ( i )					  
							      52 LOAD_CONST 2 ( 1 )					    52 LOAD_CONST 2 ( 1 )					  
							      54 INPLACE_ADD						    54 INPLACE_ADD						  
							      56 STORE_FAST 2 ( i )					    56 STORE_FAST 2 ( i )					  
							      								    								  
							      9 58 LOAD_FAST 3 ( j )					    9 58 LOAD_FAST 3 ( j )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 INPLACE_SUBTRACT					    62 INPLACE_SUBTRACT						  
							      64 STORE_FAST 3 ( j )					    64 STORE_FAST 3 ( j )					  
							      66 JUMP_ABSOLUTE 22					    66 JUMP_ABSOLUTE 22						  
							      >> 68 POP_BLOCK						    >> 68 POP_BLOCK						  
							      								    								  
							      10 >> 70 LOAD_CONST 4 ( True )				    10 >> 70 LOAD_CONST 4 ( True )				  
							      72 RETURN_VALUE NEW_LINE					    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
def getMissingNo ( a , n ) :				      Disassembly of <code object getMissingNo at 0x7f33e2649150, f Disassembly of <code object getMissingNo at 0x7f2b01639660, f error : /bin/bash: line 1:  4114 Segmentation faul
    x1 = a [ 0 ]					      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    x2 = 1						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( 1 , n ) :				      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	x1 = x1 ^ a [ i ]				      6 STORE_FAST 2 ( x1 )					    6 STORE_FAST 2 ( x1 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_T
    for i in range ( 2 , n + 2 ) :			      								    								  HE_MISSING_NUMBER_2.dis
	x2 = x2 ^ i					      3 8 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 2 ( 1 )					  
    return x1 ^ x2					      10 STORE_FAST 3 ( x2 )					    10 STORE_FAST 3 ( x2 )					  
							      								    								  
							      4 12 SETUP_LOOP 30 ( to 44 )				    4 12 SETUP_LOOP 34 ( to 48 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 16 ( to 42 )				    >> 24 FOR_ITER 20 ( to 46 )					  
							      26 STORE_FAST 4 ( i )					    26 STORE_FAST 4 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 2 ( x1 )					    5 28 LOAD_FAST 2 ( x1 )					  
							      30 LOAD_FAST 0 ( a )					    30 LOAD_FAST 0 ( a )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 BINARY_XOR						    36 BINARY_XOR						  
							      38 STORE_FAST 2 ( x1 )					    38 STORE_FAST 2 ( x1 )					  
							      40 JUMP_ABSOLUTE 24					    40 JUMP_ABSOLUTE 24						  
							      >> 42 POP_BLOCK						    >> 42 POP_BLOCK						  
							      								    								  
							      6 >> 44 SETUP_LOOP 30 ( to 76 )				    6 >> 44 SETUP_LOOP 30 ( to 78 )				  
							      46 LOAD_GLOBAL 0 ( range )				    46 LOAD_GLOBAL 0 ( range )					  
							      48 LOAD_CONST 3 ( 2 )					    48 LOAD_CONST 3 ( 2 )					  
							      50 LOAD_FAST 1 ( n )					    50 LOAD_FAST 1 ( n )					  
							      52 LOAD_CONST 3 ( 2 )					    52 LOAD_CONST 3 ( 2 )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 CALL_FUNCTION 2					    56 CALL_FUNCTION 2						  
							      58 GET_ITER						    58 GET_ITER							  
							      >> 60 FOR_ITER 12 ( to 74 )				    >> 60 FOR_ITER 2 ( to 66 )					  
							      62 STORE_FAST 4 ( i )					    62 STORE_FAST 4 ( i )					  
							      								    								  
							      7 64 LOAD_FAST 3 ( x2 )					    7 64 LOAD_FAST 3 ( x2 )					  
							      66 LOAD_FAST 4 ( i )					    66 LOAD_FAST 4 ( i )					  
							      68 BINARY_XOR						    68 BINARY_XOR						  
							      70 STORE_FAST 3 ( x2 )					    70 STORE_FAST 3 ( x2 )					  
							      72 JUMP_ABSOLUTE 60					    72 JUMP_ABSOLUTE 60						  
							      >> 74 POP_BLOCK						    >> 74 POP_BLOCK						  
							      								    								  
							      8 >> 76 LOAD_FAST 2 ( x1 )				    8 >> 76 LOAD_FAST 2 ( x1 )					  
							      78 LOAD_FAST 3 ( x2 )					    78 LOAD_FAST 3 ( x2 )					  
							      80 BINARY_XOR						    80 BINARY_XOR						  
							      82 RETURN_VALUE NEW_LINE					    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
def recursiveReverse ( str , i = 0 ) :			      Disassembly of <code object recursiveReverse at 0x7f33e2653ed Disassembly of <code object recursiveReverse at 0x7f2b0163dc9 script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    if i == n // 2 :					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
	return						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] , str [ 6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  
    recursiveReverse ( str , i + 1 )			      								    								  
							      3 8 LOAD_FAST 1 ( i )					    3 8 LOAD_FAST 1 ( i )					  
							      10 LOAD_FAST 2 ( n )					    10 LOAD_FAST 2 ( n )					  
							      12 LOAD_CONST 1 ( 2 )					    12 LOAD_CONST 1 ( 2 )					  
							      14 BINARY_FLOOR_DIVIDE					    14 BINARY_FLOOR_DIVIDE					  
							      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      4 20 LOAD_CONST 0 ( None )				    4 20 LOAD_CONST 0 ( None )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      5 >> 24 LOAD_FAST 0 ( str )				    5 >> 24 LOAD_FAST 0 ( str )					  
							      26 LOAD_FAST 2 ( n )					    26 LOAD_FAST 2 ( n )					  
							      28 LOAD_FAST 1 ( i )					    28 LOAD_FAST 1 ( i )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 0 ( str )					    38 LOAD_FAST 0 ( str )					  
							      40 LOAD_FAST 1 ( i )					    40 LOAD_FAST 1 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 ROT_TWO						    44 ROT_TWO							  
							      46 LOAD_FAST 0 ( str )					    46 LOAD_FAST 0 ( str )					  
							      48 LOAD_FAST 1 ( i )					    48 LOAD_FAST 1 ( i )					  
							      50 STORE_SUBSCR						    50 STORE_SUBSCR						  
							      52 LOAD_FAST 0 ( str )					    								  
							      54 LOAD_FAST 2 ( n )					    6 52 LOAD_GLOBAL 1 ( recursiveReverse )			  
							      56 LOAD_FAST 1 ( i )					    54 LOAD_FAST 0 ( str )					  
							      58 BINARY_SUBTRACT					    56 LOAD_FAST 1 ( i )					  
							      60 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_SUBTRACT					    60 BINARY_ADD						  
							      64 STORE_SUBSCR						    62 CALL_FUNCTION 2						  
							      								    64 POP_TOP							  
							      6 66 LOAD_GLOBAL 1 ( recursiveReverse )			    66 LOAD_CONST 0 ( None )					  
							      68 LOAD_FAST 0 ( str )					    68 RETURN_VALUE NEW_LINE					  
							      70 LOAD_FAST 1 ( i )					    								  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 BINARY_ADD						    								  
							      76 CALL_FUNCTION 2					    								  
							      78 POP_TOP						    								  
							      80 LOAD_CONST 0 ( None )					    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I
--							      --							    --								  --
def squareRoot ( n , p ) :				      Disassembly of <code object squareRoot at 0x7f33e2644f60, fil Disassembly of <code object squareRoot at 0x7f2b01639f60, fil script_not_found : None
    n = n % p						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
    for x in range ( 2 , p ) :				      2 LOAD_FAST 1 ( p )					    2 LOAD_FAST 1 ( p )						  
	if ( ( x * x ) % p == n ) :			      4 BINARY_MODULO						    4 BINARY_MODULO						  
	    print ( "Square root is " , x )		      6 STORE_FAST 0 ( n )					    6 STORE_FAST 0 ( n )					  
	    return					      								    								  
    print ( "Square root doesn't exist" )		      3 8 SETUP_LOOP 48 ( to 58 )				    3 8 SETUP_LOOP 48 ( to 58 )					  
							      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
							      12 LOAD_CONST 1 ( 2 )					    12 LOAD_CONST 1 ( 2 )					  
							      14 LOAD_FAST 1 ( p )					    14 LOAD_FAST 1 ( p )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 34 ( to 56 )				    >> 20 FOR_ITER 34 ( to 56 )					  
							      22 STORE_FAST 2 ( x )					    22 STORE_FAST 2 ( x )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( x )					    4 24 LOAD_FAST 2 ( x )					  
							      26 LOAD_FAST 2 ( x )					    26 LOAD_FAST 2 ( x )					  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_FAST 1 ( p )					    30 LOAD_FAST 1 ( p )					  
							      32 BINARY_MODULO						    32 LOAD_FAST 0 ( n )					  
							      34 LOAD_FAST 0 ( n )					    34 COMPARE_OP 2 ( == )					  
							      36 COMPARE_OP 2 ( == )					    36 POP_JUMP_IF_FALSE 20					  
							      38 POP_JUMP_IF_FALSE 20					    								  
							      								    5 38 LOAD_GLOBAL 1 ( print )				  
							      5 40 LOAD_GLOBAL 1 ( print )				    40 LOAD_CONST 2 ( 'Square root is ' )			  
							      42 LOAD_CONST 2 ( 'Square root is ' )			    42 LOAD_FAST 2 ( x )					  
							      44 LOAD_FAST 2 ( x )					    44 CALL_FUNCTION 2						  
							      46 CALL_FUNCTION 2					    46 POP_TOP							  
							      48 POP_TOP						    								  
							      								    6 48 LOAD_CONST 0 ( None )					  
							      6 50 LOAD_CONST 0 ( None )				    50 RETURN_VALUE						  
							      52 RETURN_VALUE						    >> 52 JUMP_ABSOLUTE 20					  
							      54 JUMP_ABSOLUTE 20					    54 POP_BLOCK						  
							      >> 56 POP_BLOCK						    								  
							      								    7 56 LOAD_GLOBAL 1 ( print )				  
							      7 >> 58 LOAD_GLOBAL 1 ( print )				    								  
							      60 LOAD_CONST 3 ( "Square root doesn't exist" )		    8 >> 58 LOAD_CONST 3 ( 'Square root doesn' t exist ')	  
							      62 CALL_FUNCTION 1					    60CALL_FUNCTION1						  
							      64 POP_TOP						    62POP_TOP							  
							      66 LOAD_CONST 0 ( None )					    64LOAD_CONST0( None )					  
							      68 RETURN_VALUE NEW_LINE					    66 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
def findDigits ( n ) :					      Disassembly of <code object findDigits at 0x7f33e2644f60, fil Disassembly of <code object findDigits at 0x7f2b0163dc90, fil failure : #Results: 1, 10
    if ( n < 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 0 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( n <= 1 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
	return 1 ;					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    x = ( ( n * math.log10 ( n / math.e ) + math.log10 ( 2 *  								    								  
    return math.floor ( x ) + 1 ;			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 1 )					    5 20 LOAD_CONST 2 ( 1 )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_FAST 0 ( n )					    6 >> 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_GLOBAL 0 ( math )					    26 LOAD_GLOBAL 0 ( math )					  
							      28 LOAD_METHOD 1 ( log10 )				    28 LOAD_METHOD 1 ( log10 )					  
							      30 LOAD_FAST 0 ( n )					    30 LOAD_FAST 0 ( n )					  
							      32 LOAD_GLOBAL 0 ( math )					    32 LOAD_GLOBAL 0 ( math )					  
							      34 LOAD_ATTR 2 ( e )					    34 LOAD_ATTR 2 ( e )					  
							      36 BINARY_TRUE_DIVIDE					    36 BINARY_TRUE_DIVIDE					  
							      38 CALL_METHOD 1						    38 CALL_METHOD 1						  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 LOAD_GLOBAL 0 ( math )					    42 LOAD_GLOBAL 0 ( math )					  
							      44 LOAD_METHOD 1 ( log10 )				    44 LOAD_METHOD 1 ( log10 )					  
							      46 LOAD_CONST 3 ( 2 )					    46 LOAD_CONST 3 ( 2 )					  
							      48 LOAD_GLOBAL 0 ( math )					    48 LOAD_GLOBAL 0 ( math )					  
							      50 LOAD_ATTR 3 ( pi )					    50 LOAD_ATTR 2 ( pi )					  
							      52 BINARY_MULTIPLY					    52 BINARY_MULTIPLY						  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 0 ( n )					  
							      56 BINARY_MULTIPLY					    56 BINARY_MULTIPLY						  
							      58 CALL_METHOD 1						    58 LOAD_CONST 4 ( 2.0 )					  
							      60 LOAD_CONST 4 ( 2.0 )					    60 BINARY_TRUE_DIVIDE					  
							      62 BINARY_TRUE_DIVIDE					    62 CALL_METHOD 1						  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 STORE_FAST 1 ( x )					    66 STORE_FAST 1 ( x )					  
							      								    								  
							      7 68 LOAD_GLOBAL 0 ( math )				    7 68 LOAD_GLOBAL 0 ( math )					  
							      70 LOAD_METHOD 4 ( floor )				    70 LOAD_METHOD 3 ( floor )					  
							      72 LOAD_FAST 1 ( x )					    72 LOAD_FAST 1 ( x )					  
							      74 CALL_METHOD 1						    74 CALL_METHOD 1						  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_ADD						    78 BINARY_ADD						  
							      80 RETURN_VALUE NEW_LINE					    80 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
def maxSum ( arr , n ) :				      Disassembly of <code object maxSum at 0x7f33e2649150, file "< Disassembly of <code object maxSum at 0x7f2b0163dc90, file "< error : /bin/bash: line 1:  4136 Segmentation faul
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    arr.sort ( )					      2 STORE_FAST 2 ( sum )					    2 STORE_FAST 2 ( sum )					  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( 0 , int ( n / 2 ) ) :		      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	sum -= ( 2 * arr [ i ] )			      3 4 LOAD_FAST 0 ( arr )					    3 4 LOAD_FAST 0 ( arr )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MAXIMI
	sum += ( 2 * arr [ n - i - 1 ] )		      6 LOAD_METHOD 0 ( sort )					    6 LOAD_METHOD 0 ( sort )					  ZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY.dis
    return sum						      8 CALL_METHOD 0						    8 CALL_METHOD 0						  
							      10 POP_TOP						    10 POP_TOP							  
							      								    								  
							      4 12 SETUP_LOOP 66 ( to 80 )				    4 12 SETUP_LOOP 62 ( to 78 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_GLOBAL 2 ( int )					    18 LOAD_GLOBAL 2 ( int )					  
							      20 LOAD_FAST 1 ( n )					    20 LOAD_FAST 1 ( n )					  
							      22 LOAD_CONST 2 ( 2 )					    22 LOAD_CONST 2 ( 2 )					  
							      24 BINARY_TRUE_DIVIDE					    24 BINARY_TRUE_DIVIDE					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 44 ( to 78 )				    >> 32 FOR_ITER 42 ( to 76 )					  
							      34 STORE_FAST 3 ( i )					    34 STORE_FAST 3 ( i )					  
							      								    								  
							      5 36 LOAD_FAST 2 ( sum )					    5 36 LOAD_FAST 2 ( sum )					  
							      38 LOAD_CONST 2 ( 2 )					    38 LOAD_CONST 2 ( 2 )					  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 BINARY_MULTIPLY					    46 BINARY_MULTIPLY						  
							      48 INPLACE_SUBTRACT					    48 INPLACE_SUBTRACT						  
							      50 STORE_FAST 2 ( sum )					    50 STORE_FAST 2 ( sum )					  
							      								    								  
							      6 52 LOAD_FAST 2 ( sum )					    6 52 LOAD_FAST 2 ( sum )					  
							      54 LOAD_CONST 2 ( 2 )					    54 LOAD_CONST 2 ( 2 )					  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 1 ( n )					    58 LOAD_FAST 1 ( n )					  
							      60 LOAD_FAST 3 ( i )					    60 LOAD_FAST 3 ( i )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 LOAD_CONST 3 ( 1 )					    64 LOAD_CONST 3 ( 1 )					  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBTRACT						  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 BINARY_MULTIPLY					    70 BINARY_MULTIPLY						  
							      72 INPLACE_ADD						    72 INPLACE_ADD						  
							      74 STORE_FAST 2 ( sum )					    74 STORE_FAST 2 ( sum )					  
							      76 JUMP_ABSOLUTE 32					    >> 76 JUMP_ABSOLUTE 32					  
							      >> 78 POP_BLOCK						    >> 78 POP_BLOCK						  
							      								    								  
							      7 >> 80 LOAD_FAST 2 ( sum )				    7 >> 80 LOAD_FAST 2 ( sum )					  
							      82 RETURN_VALUE NEW_LINE					    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
def findDigits ( n ) :					      Disassembly of <code object findDigits at 0x7f33e26494b0, fil Disassembly of <code object findDigits at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    if ( n < 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 37, in <module>	  Fi
    if ( n <= 1 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  le "<dis>", line 2, in findDigits AttributeError:
	return 1 ;					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  'int' object has no attribute 'floor'
    digits = 0 ;					      								    								  
    for i in range ( 2 , n + 1 ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	digits += math.log10 ( i ) ;			      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return math.floor ( digits ) + 1 ;			      								    								  
							      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 1 )					    5 20 LOAD_CONST 2 ( 1 )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_CONST 1 ( 0 )				    6 >> 24 LOAD_CONST 1 ( 0 )					  
							      26 STORE_FAST 1 ( digits )				    26 STORE_FAST 1 ( digits )					  
							      								    								  
							      7 28 SETUP_LOOP 36 ( to 66 )				    7 28 SETUP_LOOP 42 ( to 78 )				  
							      30 LOAD_GLOBAL 0 ( range )				    30 LOAD_GLOBAL 0 ( range )					  
							      32 LOAD_CONST 3 ( 2 )					    32 LOAD_CONST 3 ( 2 )					  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 CALL_FUNCTION 2					    40 CALL_FUNCTION 2						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 18 ( to 64 )				    >> 44 FOR_ITER 24 ( to 76 )					  
							      46 STORE_FAST 2 ( i )					    46 STORE_FAST 2 ( i )					  
							      								    								  
							      8 48 LOAD_FAST 1 ( digits )				    8 48 LOAD_FAST 1 ( digits )					  
							      50 LOAD_GLOBAL 1 ( math )					    50 LOAD_GLOBAL 1 ( math )					  
							      52 LOAD_METHOD 2 ( log10 )				    52 LOAD_METHOD 2 ( log10 )					  
							      54 LOAD_FAST 2 ( i )					    54 LOAD_FAST 2 ( i )					  
							      56 CALL_METHOD 1						    56 CALL_METHOD 1						  
							      58 INPLACE_ADD						    58 INPLACE_ADD						  
							      60 STORE_FAST 1 ( digits )				    60 STORE_FAST 1 ( digits )					  
							      62 JUMP_ABSOLUTE 44					    62 JUMP_ABSOLUTE 44						  
							      >> 64 POP_BLOCK						    64 POP_BLOCK						  
							      								    66 LOAD_CONST 0 ( None )					  
							      9 >> 66 LOAD_GLOBAL 1 ( math )				    >> 68 WITH_CLEANUP_START					  
							      68 LOAD_METHOD 3 ( floor )				    70 WITH_CLEANUP_FINISH					  
							      70 LOAD_FAST 1 ( digits )					    72 END_FINALLY						  
							      72 CALL_METHOD 1						    								  
							      74 LOAD_CONST 2 ( 1 )					    9 74 LOAD_GLOBAL 1 ( math )					  
							      76 BINARY_ADD						    76 LOAD_METHOD 3 ( floor )					  
							      78 RETURN_VALUE NEW_LINE					    78 LOAD_FAST 1 ( digits )					  
							      								    80 CALL_METHOD 1						  
							      								    82 LOAD_CONST 2 ( 1 )					  
							      								    84 BINARY_ADD						  
							      								    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
def isPrime ( p ) :					      Disassembly of <code object isPrime at 0x7f33e2653ed0, file " Disassembly of <code object isPrime at 0x7f2b01639f60, file " success : None
    checkNumber = 2 ** p - 1				      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
    nextval = 4 % checkNumber				      2 LOAD_FAST 0 ( p )					    2 LOAD_FAST 0 ( p )						  
    for i in range ( 1 , p - 1 ) :			      4 BINARY_POWER						    4 BINARY_POWER						  
	nextval = ( nextval * nextval - 2 ) % checkNumber     6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
    if ( nextval == 0 ) : return True			      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
    else : return False					      10 STORE_FAST 1 ( checkNumber )				    10 STORE_FAST 1 ( checkNumber )				  
							      								    								  
							      3 12 LOAD_CONST 3 ( 4 )					    3 12 LOAD_CONST 3 ( 4 )					  
							      14 LOAD_FAST 1 ( checkNumber )				    14 LOAD_FAST 1 ( checkNumber )				  
							      16 BINARY_MODULO						    16 BINARY_MODULO						  
							      18 STORE_FAST 2 ( nextval )				    18 STORE_FAST 2 ( nextval )					  
							      								    								  
							      4 20 SETUP_LOOP 38 ( to 60 )				    4 20 SETUP_LOOP 36 ( to 60 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 LOAD_FAST 0 ( p )					    26 LOAD_FAST 0 ( p )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 CALL_FUNCTION 2					    32 CALL_FUNCTION 2						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 20 ( to 58 )				    >> 36 FOR_ITER 24 ( to 58 )					  
							      38 STORE_FAST 3 ( i )					    38 STORE_FAST 3 ( i )					  
							      								    								  
							      5 40 LOAD_FAST 2 ( nextval )				    5 40 LOAD_FAST 2 ( nextval )				  
							      42 LOAD_FAST 2 ( nextval )				    42 LOAD_FAST 2 ( nextval )					  
							      44 BINARY_MULTIPLY					    44 BINARY_MULTIPLY						  
							      46 LOAD_CONST 1 ( 2 )					    46 LOAD_CONST 1 ( 2 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 LOAD_FAST 1 ( checkNumber )				    50 LOAD_FAST 1 ( checkNumber )				  
							      52 BINARY_MODULO						    52 BINARY_MODULO						  
							      54 STORE_FAST 2 ( nextval )				    54 STORE_FAST 2 ( nextval )					  
							      56 JUMP_ABSOLUTE 36					    56 JUMP_ABSOLUTE 36						  
							      >> 58 POP_BLOCK						    >> 58 POP_BLOCK						  
							      								    								  
							      6 >> 60 LOAD_FAST 2 ( nextval )				    6 >> 60 LOAD_FAST 2 ( nextval )				  
							      62 LOAD_CONST 4 ( 0 )					    62 LOAD_CONST 4 ( 0 )					  
							      64 COMPARE_OP 2 ( == )					    64 COMPARE_OP 2 ( == )					  
							      66 POP_JUMP_IF_FALSE 72					    66 POP_JUMP_IF_FALSE 72					  
							      68 LOAD_CONST 5 ( True )					    68 LOAD_CONST 5 ( True )					  
							      70 RETURN_VALUE						    70 RETURN_VALUE						  
							      								    								  
							      7 >> 72 LOAD_CONST 6 ( False )				    7 >> 72 LOAD_CONST 6 ( False )				  
							      74 RETURN_VALUE						    74 RETURN_VALUE NEW_LINE					  
							      76 LOAD_CONST 0 ( None )					    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW
--							      --							    --								  --
def minCost ( coin , n , k ) :				      Disassembly of <code object minCost at 0x7f33e26494b0, file " Disassembly of <code object minCost at 0x7f2b01639f60, file " error : XXX lineno: 2, opcode: 0 Traceback (most r
    coin.sort ( )					      2 0 LOAD_FAST 0 ( coin )					    2 0 LOAD_FAST 0 ( coin )					  ecent call last):   File "XLM/dis_script.py", line
    coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) ) ;	      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					   60, in <module>     exec(item)   File "main.py",
    ans = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  line 35, in <module>	 File "<dis>", line 2, in mi
    for i in range ( coins_needed - 1 + 1 ) :		      6 POP_TOP							    6 POP_TOP							  nCost SystemError: unknown opcode
	ans += coin [ i ]				      								    								  
    return ans						      3 8 LOAD_GLOBAL 1 ( math )				    3 8 LOAD_GLOBAL 1 ( math )					  
							      10 LOAD_METHOD 2 ( ceil )					    10 LOAD_METHOD 2 ( ceil )					  
							      12 LOAD_CONST 1 ( 1.0 )					    12 LOAD_CONST 1 ( 1.0 )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_FAST 2 ( k )					    18 LOAD_FAST 2 ( k )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 BINARY_ADD						    22 BINARY_ADD						  
							      24 BINARY_FLOOR_DIVIDE					    24 BINARY_FLOOR_DIVIDE					  
							      26 CALL_METHOD 1						    26 CALL_METHOD 1						  
							      28 STORE_FAST 3 ( coins_needed )				    28 STORE_FAST 3 ( coins_needed )				  
							      								    								  
							      4 30 LOAD_CONST 3 ( 0 )					    4 30 LOAD_CONST 3 ( 0 )					  
							      32 STORE_FAST 4 ( ans )					    32 STORE_FAST 4 ( ans )					  
							      								    								  
							      5 34 SETUP_LOOP 36 ( to 72 )				    5 34 SETUP_LOOP 40 ( to 80 )				  
							      36 LOAD_GLOBAL 3 ( range )				    36 LOAD_GLOBAL 3 ( range )					  
							      38 LOAD_FAST 3 ( coins_needed )				    38 LOAD_FAST 3 ( coins_needed )				  
							      40 LOAD_CONST 2 ( 1 )					    40 LOAD_CONST 2 ( 1 )					  
							      42 BINARY_SUBTRACT					    42 BINARY_SUBTRACT						  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 16 ( to 70 )				    >> 52 FOR_ITER 20 ( to 78 )					  
							      54 STORE_FAST 5 ( i )					    54 STORE_FAST 5 ( i )					  
							      								    								  
							      6 56 LOAD_FAST 4 ( ans )					    6 56 LOAD_FAST 4 ( ans )					  
							      58 LOAD_FAST 0 ( coin )					    58 LOAD_FAST 0 ( coin )					  
							      60 LOAD_FAST 5 ( i )					    60 LOAD_FAST 5 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 INPLACE_ADD						    64 INPLACE_ADD						  
							      66 STORE_FAST 4 ( ans )					    66 STORE_FAST 4 ( ans )					  
							      68 JUMP_ABSOLUTE 52					    68 JUMP_ABSOLUTE 52						  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      								    								  
							      7 >> 72 LOAD_FAST 4 ( ans )				    7 >> 72 LOAD_FAST 4 ( ans )					  
							      74 RETURN_VALUE NEW_LINE					    74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_ARRAY_ADJACENT_DIFFER_K			      SEARCHING_ARRAY_ADJACENT_DIFFER_K				    SEARCHING_ARRAY_ADJACENT_DIFFER_K				  SEARCHING_ARRAY_ADJACENT_DIFFER_K
--							      --							    --								  --
def search ( arr , n , x , k ) :			      Disassembly of <code object search at 0x7f33e2644f60, file "< Disassembly of <code object search at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( i < n ) :					      2 STORE_FAST 4 ( i )					    2 STORE_FAST 4 ( i )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( arr [ i ] == x ) :				      								    								  le "<dis>", line 2, in search TypeError: 'int' obj
	    return i					      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 SETUP_LOOP 52 ( to 58 )					  ect is not callable
	i = i + max ( 1 , int ( abs ( arr [ i ] - x ) / k ) ) >> 6 LOAD_FAST 4 ( i )					    >> 6 LOAD_FAST 4 ( i )					  
    print ( "number is not present!" )			      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
    return - 1						      10 COMPARE_OP 0 ( < )					    10 COMPARE_OP 0 ( < )					  
							      12 POP_JUMP_IF_FALSE 66					    12 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      4 14 LOAD_FAST 0 ( arr )					    4 14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_FAST 4 ( i )					    16 LOAD_FAST 4 ( i )					  
							      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 LOAD_FAST 2 ( x )					    20 LOAD_FAST 2 ( x )					  
							      22 COMPARE_OP 2 ( == )					    22 COMPARE_OP 2 ( == )					  
							      24 POP_JUMP_IF_FALSE 30					    24 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      5 26 LOAD_FAST 4 ( i )					    5 26 LOAD_FAST 4 ( i )					  
							      28 RETURN_VALUE						    28 RETURN_VALUE						  
							      								    								  
							      6 >> 30 LOAD_FAST 4 ( i )					    6 >> 30 LOAD_FAST 4 ( i )					  
							      32 LOAD_GLOBAL 0 ( max )					    32 LOAD_GLOBAL 0 ( max )					  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 LOAD_GLOBAL 1 ( int )					    36 LOAD_GLOBAL 1 ( int )					  
							      38 LOAD_GLOBAL 2 ( abs )					    38 LOAD_GLOBAL 2 ( abs )					  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 2 ( x )					    46 LOAD_FAST 2 ( x )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 CALL_FUNCTION 1					    50 LOAD_FAST 3 ( k )					  
							      52 LOAD_FAST 3 ( k )					    52 BINARY_TRUE_DIVIDE					  
							      54 BINARY_TRUE_DIVIDE					    54 CALL_FUNCTION 1						  
							      56 CALL_FUNCTION 1					    56 CALL_FUNCTION 2						  
							      58 CALL_FUNCTION 2					    58 BINARY_ADD						  
							      60 BINARY_ADD						    60 STORE_FAST 4 ( i )					  
							      62 STORE_FAST 4 ( i )					    62 JUMP_ABSOLUTE 6						  
							      64 JUMP_ABSOLUTE 6					    >> 64 POP_BLOCK						  
							      >> 66 POP_BLOCK						    								  
							      								    7 66 LOAD_GLOBAL 3 ( print )				  
							      7 >> 68 LOAD_GLOBAL 3 ( print )				    68 LOAD_CONST 3 ( 'number is not present!' )		  
							      70 LOAD_CONST 3 ( 'number is not present!' )		    70 CALL_FUNCTION 1						  
							      72 CALL_FUNCTION 1					    72 POP_TOP							  
							      74 POP_TOP						    								  
							      								    8 74 LOAD_CONST 4 ( - 1 )					  
							      8 76 LOAD_CONST 4 ( - 1 )					    76 RETURN_VALUE NEW_LINE					  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	      FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	    FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	  FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE
--							      --							    --								  --
def minRadius ( k , x , y , n ) :			      Disassembly of <code object minRadius at 0x7f33e2644930, file Disassembly of <code object minRadius at 0x7f2b01639f60, file script_not_found : None
    dis = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]     4 LOAD_FAST 3 ( n )					    4 LOAD_FAST 3 ( n )						  
    dis.sort ( )					      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
    return dis [ k - 1 ]				      8 STORE_FAST 4 ( dis )					    8 STORE_FAST 4 ( dis )					  
							      								    								  
							      3 10 SETUP_LOOP 54 ( to 66 )				    3 10 SETUP_LOOP 62 ( to 74 )				  
							      12 LOAD_GLOBAL 0 ( range )				    12 LOAD_GLOBAL 0 ( range )					  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 LOAD_FAST 3 ( n )					    16 LOAD_FAST 3 ( n )					  
							      18 CALL_FUNCTION 2					    18 CALL_FUNCTION 2						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 40 ( to 64 )				    >> 22 FOR_ITER 44 ( to 72 )					  
							      24 STORE_FAST 5 ( i )					    24 STORE_FAST 5 ( i )					  
							      								    								  
							      4 26 LOAD_FAST 1 ( x )					    4 26 LOAD_FAST 1 ( x )					  
							      28 LOAD_FAST 5 ( i )					    28 LOAD_FAST 5 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 1 ( x )					    32 LOAD_FAST 1 ( x )					  
							      34 LOAD_FAST 5 ( i )					    34 LOAD_FAST 5 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 BINARY_MULTIPLY					    38 BINARY_MULTIPLY						  
							      40 LOAD_FAST 2 ( y )					    40 LOAD_FAST 2 ( y )					  
							      42 LOAD_FAST 5 ( i )					    42 LOAD_FAST 5 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 2 ( y )					    46 LOAD_FAST 2 ( y )					  
							      48 LOAD_FAST 5 ( i )					    48 LOAD_FAST 5 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 BINARY_MULTIPLY					    52 BINARY_MULTIPLY						  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 LOAD_FAST 4 ( dis )					    56 LOAD_FAST 4 ( dis )					  
							      58 LOAD_FAST 5 ( i )					    58 LOAD_FAST 5 ( i )					  
							      60 STORE_SUBSCR						    60 STORE_SUBSCR						  
							      62 JUMP_ABSOLUTE 22					    62 JUMP_ABSOLUTE 22						  
							      >> 64 POP_BLOCK						    >> 64 POP_BLOCK						  
							      								    								  
							      5 >> 66 LOAD_FAST 4 ( dis )				    5 >> 66 LOAD_FAST 4 ( dis )					  
							      68 LOAD_METHOD 1 ( sort )					    68 LOAD_METHOD 1 ( sort )					  
							      70 CALL_METHOD 0						    70 CALL_METHOD 0						  
							      72 POP_TOP						    72 POP_TOP							  
							      								    								  
							      6 74 LOAD_FAST 4 ( dis )					    6 74 LOAD_FAST 4 ( dis )					  
							      76 LOAD_FAST 0 ( k )					    76 LOAD_FAST 0 ( k )					  
							      78 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 2 ( 1 )					  
							      80 BINARY_SUBTRACT					    80 BINARY_SUBTRACT						  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 RETURN_VALUE NEW_LINE					    84 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
def countSubstringWithEqualEnds ( s ) :			      Disassembly of <code object countSubstringWithEqualEnds at 0x Disassembly of <code object countSubstringWithEqualEnds at 0x failure : #Results: 0, 10
    result = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    n = len ( s ) ;					      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  
    for i in range ( n ) :				      								    								  
	for j in range ( i , n ) :			      3 4 LOAD_GLOBAL 0 ( len )					    3 4 LOAD_GLOBAL 0 ( len )					  
	    if ( s [ i ] == s [ j ] ) :			      6 LOAD_FAST 0 ( s )					    6 LOAD_FAST 0 ( s )						  
		result = result + 1			      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
    return result					      10 STORE_FAST 2 ( n )					    10 STORE_FAST 2 ( n )					  
							      								    								  
							      4 12 SETUP_LOOP 60 ( to 74 )				    4 12 SETUP_LOOP 62 ( to 78 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_FAST 2 ( n )					    16 LOAD_FAST 2 ( n )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 48 ( to 72 )				    >> 22 FOR_ITER 50 ( to 76 )					  
							      24 STORE_FAST 3 ( i )					    24 STORE_FAST 3 ( i )					  
							      								    								  
							      5 26 SETUP_LOOP 42 ( to 70 )				    5 26 SETUP_LOOP 40 ( to 74 )				  
							      28 LOAD_GLOBAL 1 ( range )				    28 LOAD_GLOBAL 1 ( range )					  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 3 ( i )					  
							      32 LOAD_FAST 2 ( n )					    32 LOAD_FAST 2 ( n )					  
							      34 CALL_FUNCTION 2					    34 CALL_FUNCTION 2						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 28 ( to 68 )				    >> 38 FOR_ITER 28 ( to 72 )					  
							      40 STORE_FAST 4 ( j )					    40 STORE_FAST 4 ( j )					  
							      								    								  
							      6 42 LOAD_FAST 0 ( s )					    6 42 LOAD_FAST 0 ( s )					  
							      44 LOAD_FAST 3 ( i )					    44 LOAD_FAST 3 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_FAST 0 ( s )					    48 LOAD_FAST 0 ( s )					  
							      50 LOAD_FAST 4 ( j )					    50 LOAD_FAST 4 ( j )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 COMPARE_OP 2 ( == )					    54 COMPARE_OP 2 ( == )					  
							      56 POP_JUMP_IF_FALSE 38					    56 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      7 58 LOAD_FAST 1 ( result )				    7 58 LOAD_FAST 1 ( result )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_ADD						    62 BINARY_ADD						  
							      64 STORE_FAST 1 ( result )				    64 STORE_FAST 1 ( result )					  
							      66 JUMP_ABSOLUTE 38					    66 JUMP_ABSOLUTE 38						  
							      >> 68 POP_BLOCK						    >> 68 POP_BLOCK						  
							      >> 70 JUMP_ABSOLUTE 22					    >> 70 JUMP_ABSOLUTE 22					  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      								    								  
							      8 >> 74 LOAD_FAST 1 ( result )				    8 >> 74 LOAD_FAST 1 ( result )				  
							      76 RETURN_VALUE NEW_LINE					    76 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION	  SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION
--							      --							    --								  --
def printSorted ( a , b , c ) :				      Disassembly of <code object printSorted at 0x7f33e2644f60, fi Disassembly of <code object printSorted at 0x7f2b0163dc90, fi script_not_found : None
    get_max = max ( a , max ( b , c ) )			      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
    get_min = - max ( - a , max ( - b , - c ) )		      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
    get_mid = ( a + b + c ) - ( get_max + get_min )	      4 LOAD_GLOBAL 0 ( max )					    4 LOAD_GLOBAL 0 ( max )					  
    print ( get_min , " " , get_mid , " " , get_max )	      6 LOAD_FAST 1 ( b )					    6 LOAD_FAST 1 ( b )						  
							      8 LOAD_FAST 2 ( c )					    8 LOAD_FAST 2 ( c )						  
							      10 CALL_FUNCTION 2					    10 CALL_FUNCTION 2						  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 STORE_FAST 3 ( get_max )				    14 STORE_FAST 3 ( get_max )					  
							      								    								  
							      3 16 LOAD_GLOBAL 0 ( max )				    3 16 LOAD_FAST 0 ( a )					  
							      18 LOAD_FAST 0 ( a )					    18 UNARY_NEGATIVE						  
							      20 UNARY_NEGATIVE						    20 LOAD_FAST 0 ( a )					  
							      22 LOAD_GLOBAL 0 ( max )					    22 UNARY_NEGATIVE						  
							      24 LOAD_FAST 1 ( b )					    24 LOAD_GLOBAL 0 ( max )					  
							      26 UNARY_NEGATIVE						    26 LOAD_FAST 1 ( b )					  
							      28 LOAD_FAST 2 ( c )					    28 UNARY_NEGATIVE						  
							      30 UNARY_NEGATIVE						    30 LOAD_FAST 2 ( c )					  
							      32 CALL_FUNCTION 2					    32 UNARY_NEGATIVE						  
							      34 CALL_FUNCTION 2					    34 CALL_FUNCTION 2						  
							      36 UNARY_NEGATIVE						    36 BUILD_TUPLE 2						  
							      38 STORE_FAST 4 ( get_min )				    38 STORE_FAST 4 ( get_min )					  
							      								    								  
							      4 40 LOAD_FAST 0 ( a )					    4 40 LOAD_FAST 0 ( a )					  
							      42 LOAD_FAST 1 ( b )					    42 LOAD_FAST 1 ( b )					  
							      44 BINARY_ADD						    44 BINARY_ADD						  
							      46 LOAD_FAST 2 ( c )					    46 LOAD_FAST 4 ( get_max )					  
							      48 BINARY_ADD						    48 LOAD_FAST 3 ( get_max )					  
							      50 LOAD_FAST 3 ( get_max )				    50 BINARY_ADD						  
							      52 LOAD_FAST 4 ( get_min )				    52 BINARY_TRUE_DIVIDE					  
							      54 BINARY_ADD						    54 STORE_FAST 5 ( get_mid )					  
							      56 BINARY_SUBTRACT					    								  
							      58 STORE_FAST 5 ( get_mid )				    5 56 LOAD_GLOBAL 1 ( print )				  
							      								    58 LOAD_FAST 4 ( get_min )					  
							      5 60 LOAD_GLOBAL 1 ( print )				    60 LOAD_CONST 1 ( ' ' )					  
							      62 LOAD_FAST 4 ( get_min )				    62 LOAD_FAST 5 ( get_mid )					  
							      64 LOAD_CONST 1 ( ' ' )					    64 LOAD_CONST 2 ( ' ' )					  
							      66 LOAD_FAST 5 ( get_mid )				    66 LOAD_FAST 3 ( get_max )					  
							      68 LOAD_CONST 1 ( ' ' )					    68 CALL_FUNCTION 4						  
							      70 LOAD_FAST 3 ( get_max )				    70 POP_TOP							  
							      72 CALL_FUNCTION 5					    72 LOAD_CONST 0 ( None )					  
							      74 POP_TOP						    74 RETURN_VALUE NEW_LINE					  
							      76 LOAD_CONST 0 ( None )					    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
def seiresSum ( n , a ) :				      Disassembly of <code object seiresSum at 0x7f33e2653ed0, file Disassembly of <code object seiresSum at 0x7f2b01639660, file script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , 2 * n ) :			      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  
	if ( i % 2 == 0 ) :				      								    								  
	    res += a [ i ] * a [ i ]			      3 4 SETUP_LOOP 76 ( to 82 )				    3 4 SETUP_LOOP 80 ( to 86 )					  
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    res -= a [ i ] * a [ i ]			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
    return res						      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
							      12 LOAD_FAST 0 ( n )					    12 LOAD_FAST 0 ( n )					  
							      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 58 ( to 80 )				    >> 20 FOR_ITER 62 ( to 84 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 3 ( i )					    4 24 LOAD_FAST 3 ( i )					  
							      26 LOAD_CONST 2 ( 2 )					    26 LOAD_CONST 2 ( 2 )					  
							      28 BINARY_MODULO						    28 BINARY_MODULO						  
							      30 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 1 ( 0 )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 58					    34 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      5 36 LOAD_FAST 2 ( res )					    5 36 LOAD_FAST 2 ( res )					  
							      38 LOAD_FAST 1 ( a )					    38 LOAD_FAST 1 ( a )					  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 3 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 1 ( a )					    44 LOAD_FAST 1 ( a )					  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 BINARY_MULTIPLY					    50 BINARY_MULTIPLY						  
							      52 INPLACE_ADD						    52 INPLACE_ADD						  
							      54 STORE_FAST 2 ( res )					    54 STORE_FAST 2 ( res )					  
							      56 JUMP_ABSOLUTE 20					    56 JUMP_ABSOLUTE 20						  
							      								    								  
							      7 >> 58 LOAD_FAST 2 ( res )				    7 58 LOAD_FAST 2 ( res )					  
							      60 LOAD_FAST 1 ( a )					    60 LOAD_FAST 1 ( a )					  
							      62 LOAD_FAST 3 ( i )					    62 LOAD_FAST 3 ( i )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 1 ( a )					    66 LOAD_FAST 1 ( a )					  
							      68 LOAD_FAST 3 ( i )					    68 LOAD_FAST 3 ( i )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 BINARY_MULTIPLY					    72 BINARY_MULTIPLY						  
							      74 INPLACE_SUBTRACT					    74 INPLACE_SUBTRACT						  
							      76 STORE_FAST 2 ( res )					    76 STORE_FAST 2 ( res )					  
							      78 JUMP_ABSOLUTE 20					    78 JUMP_ABSOLUTE 20						  
							      >> 80 POP_BLOCK						    >> 80 POP_BLOCK						  
							      								    								  
							      8 >> 82 LOAD_FAST 2 ( res )				    8 >> 82 LOAD_FAST 2 ( res )					  
							      84 RETURN_VALUE NEW_LINE					    84 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
def checkMarkov ( m ) :					      Disassembly of <code object checkMarkov at 0x7f33e2653ed0, fi Disassembly of <code object checkMarkov at 0x7f2b0163dc90, fi error : /bin/bash: line 1:  4191 Segmentation faul
    for i in range ( 0 , len ( m ) ) :			      2 0 SETUP_LOOP 82 ( to 84 )				    2 0 SETUP_LOOP 76 ( to 78 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	sm = 0						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( 0 , len ( m [ i ] ) ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    sm = sm + m [ i ] [ j ]			      6 LOAD_GLOBAL 1 ( len )					    6 LOAD_GLOBAL 1 ( len )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MARKOV
	if ( sm != 1 ) :				      8 LOAD_FAST 0 ( m )					    8 LOAD_FAST 0 ( m )						  _MATRIX.dis
	    return False				      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    return True						      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 64 ( to 82 )				    >> 16 FOR_ITER 60 ( to 76 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 1 ( i )					  
							      								    								  
							      3 20 LOAD_CONST 1 ( 0 )					    3 20 LOAD_CONST 1 ( 0 )					  
							      22 STORE_FAST 2 ( sm )					    22 STORE_FAST 2 ( sm )					  
							      								    								  
							      4 24 SETUP_LOOP 42 ( to 68 )				    4 24 SETUP_LOOP 44 ( to 74 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 1 ( 0 )					  
							      30 LOAD_GLOBAL 1 ( len )					    30 LOAD_GLOBAL 1 ( len )					  
							      32 LOAD_FAST 0 ( m )					    32 LOAD_FAST 0 ( m )					  
							      34 LOAD_FAST 1 ( i )					    34 LOAD_FAST 1 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 CALL_FUNCTION 2					    40 CALL_FUNCTION 2						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 20 ( to 66 )				    >> 44 FOR_ITER 20 ( to 72 )					  
							      46 STORE_FAST 3 ( j )					    46 STORE_FAST 3 ( j )					  
							      								    								  
							      5 48 LOAD_FAST 2 ( sm )					    5 48 LOAD_FAST 2 ( sm )					  
							      50 LOAD_FAST 0 ( m )					    50 LOAD_FAST 0 ( m )					  
							      52 LOAD_FAST 1 ( i )					    52 LOAD_FAST 1 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 3 ( j )					    56 LOAD_FAST 3 ( j )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 BINARY_ADD						    60 BINARY_ADD						  
							      62 STORE_FAST 2 ( sm )					    62 STORE_FAST 2 ( sm )					  
							      64 JUMP_ABSOLUTE 44					    64 JUMP_ABSOLUTE 44						  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      6 >> 68 LOAD_FAST 2 ( sm )				    6 >> 68 LOAD_FAST 2 ( sm )					  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 COMPARE_OP 3 ( != )					    72 COMPARE_OP 3 ( != )					  
							      74 POP_JUMP_IF_FALSE 16					    74 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      7 76 LOAD_CONST 3 ( False )				    7 76 LOAD_CONST 3 ( False )					  
							      78 RETURN_VALUE						    78 RETURN_VALUE						  
							      80 JUMP_ABSOLUTE 16					    >> 80 JUMP_ABSOLUTE 16					  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      8 >> 84 LOAD_CONST 4 ( True )				    8 >> 84 LOAD_CONST 4 ( True )				  
							      86 RETURN_VALUE NEW_LINE					    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
def sequence ( n ) :					      Disassembly of <code object sequence at 0x7f33e2644930, file  Disassembly of <code object sequence at 0x7f2b0163dc90, file  script_not_found : None
    f = array.array ( 'i' , [ 0 , 1 , 1 ] )		      2 0 LOAD_GLOBAL 0 ( array )				    2 0 LOAD_GLOBAL 0 ( array )					  
    for i in range ( 3 , n + 1 ) :			      2 LOAD_METHOD 0 ( array )					    2 LOAD_METHOD 0 ( array )					  
	r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]	      4 LOAD_CONST 1 ( 'i' )					    4 LOAD_CONST 1 ( 'i' )					  
	f.append ( r ) ;				      6 LOAD_CONST 2 ( 0 )					    6 LOAD_CONST 2 ( 0 )					  
    return r						      8 LOAD_CONST 3 ( 1 )					    8 LOAD_CONST 3 ( 1 )					  
							      10 LOAD_CONST 3 ( 1 )					    10 LOAD_CONST 3 ( 1 )					  
							      12 BUILD_LIST 3						    12 BUILD_LIST 3						  
							      14 CALL_METHOD 2						    14 CALL_METHOD 2						  
							      16 STORE_FAST 1 ( f )					    16 STORE_FAST 1 ( f )					  
							      								    								  
							      3 18 SETUP_LOOP 68 ( to 88 )				    3 18 SETUP_LOOP 62 ( to 82 )				  
							      20 LOAD_GLOBAL 1 ( range )				    20 LOAD_GLOBAL 1 ( range )					  
							      22 LOAD_CONST 4 ( 3 )					    22 LOAD_CONST 4 ( 3 )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_CONST 3 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 50 ( to 86 )				    >> 34 FOR_ITER 50 ( to 80 )					  
							      36 STORE_FAST 2 ( i )					    36 STORE_FAST 2 ( i )					  
							      								    								  
							      4 38 LOAD_FAST 1 ( f )					    4 38 LOAD_FAST 1 ( f )					  
							      40 LOAD_FAST 1 ( f )					    40 LOAD_FAST 1 ( f )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 LOAD_CONST 3 ( 1 )					    44 LOAD_CONST 3 ( 1 )					  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 1 ( f )					    52 LOAD_FAST 1 ( f )					  
							      54 LOAD_FAST 2 ( i )					    54 LOAD_FAST 2 ( i )					  
							      56 LOAD_FAST 1 ( f )					    56 LOAD_FAST 1 ( f )					  
							      58 LOAD_FAST 2 ( i )					    58 LOAD_FAST 2 ( i )					  
							      60 LOAD_CONST 3 ( 1 )					    60 LOAD_CONST 3 ( 1 )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBTRACT						  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 BINARY_ADD						    70 STORE_FAST 3 ( r )					  
							      72 STORE_FAST 3 ( r )					    								  
							      								    5 72 LOAD_FAST 1 ( f )					  
							      5 74 LOAD_FAST 1 ( f )					    74 LOAD_METHOD 2 ( append )					  
							      76 LOAD_METHOD 2 ( append )				    76 LOAD_FAST 3 ( r )					  
							      78 LOAD_FAST 3 ( r )					    78 CALL_METHOD 1						  
							      80 CALL_METHOD 1						    80 POP_TOP							  
							      82 POP_TOP						    82 JUMP_ABSOLUTE 34						  
							      84 JUMP_ABSOLUTE 34					    >> 84 POP_BLOCK						  
							      >> 86 POP_BLOCK						    								  
							      								    6 >> 86 LOAD_FAST 3 ( r )					  
							      6 >> 88 LOAD_FAST 3 ( r )					    88 RETURN_VALUE NEW_LINE					  
							      90 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
def countWays ( n , k ) :				      Disassembly of <code object countWays at 0x7f33e2653f60, file Disassembly of <code object countWays at 0x7f2b0163dc90, file error : /bin/bash: line 1:  4200 Segmentation faul
    total = k						      2 0 LOAD_FAST 1 ( k )					    2 0 LOAD_FAST 1 ( k )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    mod = 1000000007					      2 STORE_FAST 2 ( total )					    2 STORE_FAST 2 ( total )					  ataset/bin/python XLM/dis_script.py --script_path
    same , diff = 0 , k					      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( 2 , n + 1 ) :			      3 4 LOAD_CONST 1 ( 1000000007 )				    3 4 LOAD_CONST 1 ( 1000000007 )				  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/PAINTI
	same = diff					      6 STORE_FAST 3 ( mod )					    6 STORE_FAST 3 ( mod )					  NG_FENCE_ALGORITHM.dis
	diff = total * ( k - 1 )			      								    								  
	diff = diff % mod				      4 8 LOAD_CONST 2 ( 0 )					    4 8 LOAD_CONST 2 ( 0 )					  
	total = ( same + diff ) % mod			      10 LOAD_FAST 1 ( k )					    10 LOAD_FAST 1 ( k )					  
    return total					      12 ROT_TWO						    12 ROT_TWO							  
							      14 STORE_FAST 4 ( same )					    14 STORE_FAST 4 ( same )					  
							      16 STORE_FAST 5 ( diff )					    16 STORE_FAST 5 ( diff )					  
							      								    								  
							      5 18 SETUP_LOOP 58 ( to 78 )				    5 18 SETUP_LOOP 56 ( to 78 )				  
							      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_GLOBAL 0 ( range )					  
							      22 LOAD_CONST 3 ( 2 )					    22 LOAD_CONST 3 ( 2 )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 4 ( 1 )					    26 LOAD_CONST 4 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 40 ( to 76 )				    >> 34 FOR_ITER 42 ( to 76 )					  
							      36 STORE_FAST 6 ( i )					    36 STORE_FAST 6 ( i )					  
							      								    								  
							      6 38 LOAD_FAST 5 ( diff )					    6 38 LOAD_FAST 5 ( diff )					  
							      40 STORE_FAST 4 ( same )					    40 STORE_FAST 4 ( same )					  
							      								    								  
							      7 42 LOAD_FAST 2 ( total )				    7 42 LOAD_FAST 2 ( total )					  
							      44 LOAD_FAST 1 ( k )					    44 LOAD_FAST 1 ( k )					  
							      46 LOAD_CONST 4 ( 1 )					    46 LOAD_CONST 4 ( 1 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 BINARY_MULTIPLY					    50 BINARY_MULTIPLY						  
							      52 STORE_FAST 5 ( diff )					    52 STORE_FAST 5 ( diff )					  
							      								    								  
							      8 54 LOAD_FAST 5 ( diff )					    8 54 LOAD_FAST 5 ( diff )					  
							      56 LOAD_FAST 3 ( mod )					    56 LOAD_FAST 3 ( mod )					  
							      58 BINARY_MODULO						    58 BINARY_MODULO						  
							      60 STORE_FAST 5 ( diff )					    60 STORE_FAST 2 ( total )					  
							      								    								  
							      9 62 LOAD_FAST 4 ( same )					    9 62 LOAD_FAST 4 ( same )					  
							      64 LOAD_FAST 5 ( diff )					    64 LOAD_FAST 5 ( diff )					  
							      66 BINARY_ADD						    66 BINARY_ADD						  
							      68 LOAD_FAST 3 ( mod )					    68 STORE_FAST 2 ( total )					  
							      70 BINARY_MODULO						    70 JUMP_ABSOLUTE 34						  
							      72 STORE_FAST 2 ( total )					    >> 72 POP_BLOCK						  
							      74 JUMP_ABSOLUTE 34					    								  
							      >> 76 POP_BLOCK						    10 >> 74 LOAD_FAST 2 ( total )				  
							      								    76 RETURN_VALUE NEW_LINE					  
							      10 >> 78 LOAD_FAST 2 ( total )				    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
def countP ( n , k ) :					      Disassembly of <code object countP at 0x7f33e2644f60, file "< Disassembly of <code object countP at 0x7f2b016399c0, file "< script_not_found : None
    if ( n == 0 or k == 0 or k > n ) :			      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( k == 1 or k == n ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 1					      6 POP_JUMP_IF_TRUE 24					    6 POP_JUMP_IF_TRUE 16					  
    return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k -  8 LOAD_FAST 1 ( k )					    8 LOAD_FAST 1 ( k )						  
							      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_TRUE 24					    14 POP_JUMP_IF_TRUE 24					  
							      16 LOAD_FAST 1 ( k )					    >> 16 LOAD_FAST 1 ( k )					  
							      18 LOAD_FAST 0 ( n )					    18 LOAD_FAST 0 ( n )					  
							      20 COMPARE_OP 4 ( > )					    20 COMPARE_OP 4 ( > )					  
							      22 POP_JUMP_IF_FALSE 28					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      3 >> 24 LOAD_CONST 1 ( 0 )				    3 >> 24 LOAD_CONST 1 ( 0 )					  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      4 >> 28 LOAD_FAST 1 ( k )					    4 >> 28 LOAD_FAST 1 ( k )					  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_TRUE 44					    34 POP_JUMP_IF_TRUE 44					  
							      36 LOAD_FAST 1 ( k )					    36 LOAD_FAST 1 ( k )					  
							      38 LOAD_FAST 0 ( n )					    38 LOAD_FAST 0 ( n )					  
							      40 COMPARE_OP 2 ( == )					    40 COMPARE_OP 2 ( == )					  
							      42 POP_JUMP_IF_FALSE 48					    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      5 >> 44 LOAD_CONST 2 ( 1 )				    5 >> 44 LOAD_CONST 2 ( 1 )					  
							      46 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      6 >> 48 LOAD_FAST 1 ( k )					    6 >> 48 LOAD_FAST 1 ( k )					  
							      50 LOAD_GLOBAL 0 ( countP )				    50 LOAD_GLOBAL 0 ( countP )					  
							      52 LOAD_FAST 0 ( n )					    52 LOAD_FAST 0 ( n )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_SUBTRACT					    56 BINARY_SUBTRACT						  
							      58 LOAD_FAST 1 ( k )					    58 LOAD_FAST 1 ( k )					  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 BINARY_MULTIPLY					    62 LOAD_GLOBAL 0 ( countP )					  
							      64 LOAD_GLOBAL 0 ( countP )				    64 LOAD_FAST 0 ( n )					  
							      66 LOAD_FAST 0 ( n )					    66 LOAD_CONST 2 ( 1 )					  
							      68 LOAD_CONST 2 ( 1 )					    68 BINARY_SUBTRACT						  
							      70 BINARY_SUBTRACT					    70 LOAD_FAST 1 ( k )					  
							      72 LOAD_FAST 1 ( k )					    72 LOAD_CONST 2 ( 1 )					  
							      74 LOAD_CONST 2 ( 1 )					    74 BINARY_SUBTRACT						  
							      76 BINARY_SUBTRACT					    76 CALL_FUNCTION 2						  
							      78 CALL_FUNCTION 2					    78 BINARY_ADD						  
							      80 BINARY_ADD						    80 BINARY_MULTIPLY						  
							      82 RETURN_VALUE NEW_LINE					    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
def power ( x , y ) :					      Disassembly of <code object power at 0x7f33e2653f60, file "<d Disassembly of <code object power at 0x7f2b0163dc90, file "<d error : /bin/bash: line 1:  4210 Segmentation faul
    if ( y == 0 ) : return 1				      2 0 LOAD_FAST 1 ( y )					    2 0 LOAD_FAST 1 ( y )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    temp = power ( x , int ( y / 2 ) )			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    if ( y % 2 == 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	return temp * temp				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/WRITE_
    else :						      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  A_C_PROGRAM_TO_CALCULATE_POWXN_1.dis
	if ( y > 0 ) : return x * temp * temp		      10 RETURN_VALUE						    10 RETURN_VALUE						  
	else : return ( temp * temp ) / x		      								    								  
							      3 >> 12 LOAD_GLOBAL 0 ( power )				    3 >> 12 LOAD_GLOBAL 0 ( power )				  
							      14 LOAD_FAST 0 ( x )					    14 LOAD_FAST 0 ( x )					  
							      16 LOAD_GLOBAL 1 ( int )					    16 LOAD_GLOBAL 1 ( int )					  
							      18 LOAD_FAST 1 ( y )					    18 LOAD_FAST 1 ( y )					  
							      20 LOAD_CONST 3 ( 2 )					    20 LOAD_CONST 3 ( 2 )					  
							      22 BINARY_TRUE_DIVIDE					    22 BINARY_TRUE_DIVIDE					  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 STORE_FAST 2 ( temp )					    28 STORE_FAST 2 ( temp )					  
							      								    								  
							      4 30 LOAD_FAST 1 ( y )					    4 30 LOAD_FAST 1 ( y )					  
							      32 LOAD_CONST 3 ( 2 )					    32 LOAD_CONST 3 ( 2 )					  
							      34 BINARY_MODULO						    34 BINARY_MODULO						  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 COMPARE_OP 2 ( == )					    38 COMPARE_OP 2 ( == )					  
							      40 POP_JUMP_IF_FALSE 50					    40 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      5 42 LOAD_FAST 2 ( temp )					    5 42 LOAD_FAST 2 ( temp )					  
							      44 LOAD_FAST 2 ( temp )					    44 LOAD_FAST 2 ( temp )					  
							      46 BINARY_MULTIPLY					    46 BINARY_MULTIPLY						  
							      48 RETURN_VALUE						    48 RETURN_VALUE						  
							      								    								  
							      7 >> 50 LOAD_FAST 1 ( y )					    7 >> 50 LOAD_FAST 1 ( y )					  
							      52 LOAD_CONST 1 ( 0 )					    52 LOAD_CONST 1 ( 0 )					  
							      54 COMPARE_OP 4 ( > )					    54 COMPARE_OP 4 ( > )					  
							      56 POP_JUMP_IF_FALSE 70					    56 POP_JUMP_IF_FALSE 70					  
							      58 LOAD_FAST 0 ( x )					    58 LOAD_FAST 0 ( x )					  
							      60 LOAD_FAST 2 ( temp )					    60 LOAD_FAST 2 ( temp )					  
							      62 BINARY_MULTIPLY					    62 BINARY_MULTIPLY						  
							      64 LOAD_FAST 2 ( temp )					    64 RETURN_VALUE						  
							      66 BINARY_MULTIPLY					    								  
							      68 RETURN_VALUE						    8 >> 66 LOAD_FAST 2 ( temp )				  
							      								    68 LOAD_FAST 2 ( temp )					  
							      8 >> 70 LOAD_FAST 2 ( temp )				    70 BINARY_MULTIPLY						  
							      72 LOAD_FAST 2 ( temp )					    72 LOAD_FAST 0 ( x )					  
							      74 BINARY_MULTIPLY					    74 BINARY_TRUE_DIVIDE					  
							      76 LOAD_FAST 0 ( x )					    76 RETURN_VALUE						  
							      78 BINARY_TRUE_DIVIDE					    78 LOAD_CONST 0 ( None )					  
							      80 RETURN_VALUE						    80 RETURN_VALUE NEW_LINE					  
							      82 LOAD_CONST 0 ( None )					    								  
							      84 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
def minimumSquare ( a , b ) :				      Disassembly of <code object minimumSquare at 0x7f33e2649a50,  Disassembly of <code object minimumSquare at 0x7f2b0163dc90,  error : Traceback (most recent call last):   File
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    rem = 0						      2 STORE_FAST 2 ( result )					    2 STORE_FAST 2 ( result )					  (item)   File "main.py", line 37, in <module>	  Fi
    if ( a < b ) :					      								    								  le "<dis>", line 2, in minimumSquare TypeError: 'i
	a , b = b , a					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  nt' object is not callable
    while ( b > 0 ) :					      6 STORE_FAST 3 ( rem )					    6 STORE_FAST 3 ( rem )					  
	result += int ( a / b )				      								    								  
	rem = int ( a % b )				      4 8 LOAD_FAST 0 ( a )					    4 8 LOAD_FAST 0 ( a )					  
	a = b						      10 LOAD_FAST 1 ( b )					    10 LOAD_FAST 1 ( b )					  
	b = rem						      12 COMPARE_OP 0 ( < )					    12 COMPARE_OP 0 ( < )					  
    return result					      14 POP_JUMP_IF_FALSE 26					    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 16 LOAD_FAST 1 ( b )					    5 16 LOAD_FAST 1 ( b )					  
							      18 LOAD_FAST 0 ( a )					    18 LOAD_FAST 0 ( a )					  
							      20 ROT_TWO						    20 ROT_TWO							  
							      22 STORE_FAST 0 ( a )					    22 STORE_FAST 0 ( a )					  
							      24 STORE_FAST 1 ( b )					    24 STORE_FAST 1 ( b )					  
							      								    26 JUMP_FORWARD 12 ( to 42 )				  
							      6 >> 26 SETUP_LOOP 48 ( to 76 )				    								  
							      >> 28 LOAD_FAST 1 ( b )					    6 >> 28 SETUP_LOOP 48 ( to 76 )				  
							      30 LOAD_CONST 1 ( 0 )					    >> 30 LOAD_FAST 1 ( b )					  
							      32 COMPARE_OP 4 ( > )					    32 LOAD_CONST 1 ( 0 )					  
							      34 POP_JUMP_IF_FALSE 74					    34 COMPARE_OP 4 ( > )					  
							      								    36 POP_JUMP_IF_FALSE 74					  
							      7 36 LOAD_FAST 2 ( result )				    								  
							      38 LOAD_GLOBAL 0 ( int )					    7 38 LOAD_FAST 2 ( result )					  
							      40 LOAD_FAST 0 ( a )					    40 LOAD_GLOBAL 0 ( int )					  
							      42 LOAD_FAST 1 ( b )					    42 LOAD_FAST 0 ( a )					  
							      44 BINARY_TRUE_DIVIDE					    44 LOAD_FAST 1 ( b )					  
							      46 CALL_FUNCTION 1					    46 BINARY_TRUE_DIVIDE					  
							      48 INPLACE_ADD						    48 CALL_FUNCTION 1						  
							      50 STORE_FAST 2 ( result )				    50 INPLACE_ADD						  
							      								    52 STORE_FAST 2 ( result )					  
							      8 52 LOAD_GLOBAL 0 ( int )				    								  
							      54 LOAD_FAST 0 ( a )					    8 54 LOAD_GLOBAL 0 ( int )					  
							      56 LOAD_FAST 1 ( b )					    56 LOAD_FAST 0 ( a )					  
							      58 BINARY_MODULO						    58 LOAD_FAST 1 ( b )					  
							      60 CALL_FUNCTION 1					    60 BINARY_MODULO						  
							      62 STORE_FAST 3 ( rem )					    62 CALL_FUNCTION 1						  
							      								    64 STORE_FAST 3 ( rem )					  
							      9 64 LOAD_FAST 1 ( b )					    								  
							      66 STORE_FAST 0 ( a )					    9 66 LOAD_FAST 1 ( b )					  
							      								    68 STORE_FAST 1 ( b )					  
							      10 68 LOAD_FAST 3 ( rem )					    								  
							      70 STORE_FAST 1 ( b )					    10 70 LOAD_FAST 3 ( rem )					  
							      72 JUMP_ABSOLUTE 28					    72 STORE_FAST 1 ( b )					  
							      >> 74 POP_BLOCK						    								  
							      								    11 >> 74 LOAD_FAST 2 ( result )				  
							      11 >> 76 LOAD_FAST 2 ( result )				    76 RETURN_VALUE NEW_LINE					  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
def countSubStr ( st , n ) :				      Disassembly of <code object countSubStr at 0x7f33e2649a50, fi Disassembly of <code object countSubStr at 0x7f2b0163dc90, fi script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  
	if ( st [ i ] == '1' ) :			      								    								  
	    for j in range ( i + 1 , n ) :		      3 4 SETUP_LOOP 74 ( to 80 )				    3 4 SETUP_LOOP 80 ( to 86 )					  
		if ( st [ j ] == '1' ) :		      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
		    res = res + 1			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
    return res						      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 60 ( to 78 )				    >> 16 FOR_ITER 62 ( to 84 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 0 ( st )					    4 20 LOAD_FAST 0 ( st )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 2 ( '1' )					    26 LOAD_CONST 2 ( '1' )					  
							      28 COMPARE_OP 2 ( == )					    28 COMPARE_OP 2 ( == )					  
							      30 POP_JUMP_IF_FALSE 16					    30 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      5 32 SETUP_LOOP 42 ( to 76 )				    5 32 SETUP_LOOP 44 ( to 82 )				  
							      34 LOAD_GLOBAL 0 ( range )				    34 LOAD_GLOBAL 0 ( range )					  
							      36 LOAD_FAST 3 ( i )					    36 LOAD_FAST 3 ( i )					  
							      38 LOAD_CONST 3 ( 1 )					    38 LOAD_CONST 3 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 LOAD_FAST 1 ( n )					    42 LOAD_FAST 1 ( n )					  
							      44 CALL_FUNCTION 2					    44 CALL_FUNCTION 2						  
							      46 GET_ITER						    46 GET_ITER							  
							      >> 48 FOR_ITER 24 ( to 74 )				    >> 48 FOR_ITER 28 ( to 80 )					  
							      50 STORE_FAST 4 ( j )					    50 STORE_FAST 4 ( j )					  
							      								    								  
							      6 52 LOAD_FAST 0 ( st )					    6 52 LOAD_FAST 0 ( st )					  
							      54 LOAD_FAST 4 ( j )					    54 LOAD_FAST 4 ( j )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_CONST 2 ( '1' )					    58 LOAD_CONST 2 ( '1' )					  
							      60 COMPARE_OP 2 ( == )					    60 COMPARE_OP 2 ( == )					  
							      62 POP_JUMP_IF_FALSE 48					    62 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      7 64 LOAD_FAST 2 ( res )					    7 64 LOAD_FAST 2 ( res )					  
							      66 LOAD_CONST 3 ( 1 )					    66 LOAD_CONST 3 ( 1 )					  
							      68 BINARY_ADD						    68 BINARY_ADD						  
							      70 STORE_FAST 2 ( res )					    70 STORE_FAST 2 ( res )					  
							      72 JUMP_ABSOLUTE 48					    72 JUMP_ABSOLUTE 48						  
							      >> 74 POP_BLOCK						    >> 74 POP_BLOCK						  
							      >> 76 JUMP_ABSOLUTE 16					    >> 76 JUMP_ABSOLUTE 16					  
							      >> 78 POP_BLOCK						    >> 78 POP_BLOCK						  
							      								    								  
							      8 >> 80 LOAD_FAST 2 ( res )				    8 >> 80 LOAD_FAST 2 ( res )					  
							      82 RETURN_VALUE NEW_LINE					    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	      MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	    MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL		  MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL
--							      --							    --								  --
def minOps ( arr , n , k ) :				      Disassembly of <code object minOps at 0x7f33e2644930, file "< Disassembly of <code object minOps at 0x7f2b01639f60, file "< script_not_found : None
    max1 = max ( arr )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
    res = 0						      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    for i in range ( 0 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	if ( ( max1 - arr [ i ] ) % k != 0 ) :		      6 STORE_FAST 3 ( max1 )					    6 STORE_FAST 3 ( max1 )					  
	    return - 1					      								    								  
	else :						      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    res += ( max1 - arr [ i ] ) / k		      10 STORE_FAST 4 ( res )					    10 STORE_FAST 4 ( res )					  
    return int ( res )					      								    								  
							      4 12 SETUP_LOOP 62 ( to 76 )				    4 12 SETUP_LOOP 60 ( to 78 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 48 ( to 74 )				    >> 24 FOR_ITER 48 ( to 76 )					  
							      26 STORE_FAST 5 ( i )					    26 STORE_FAST 5 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 3 ( max1 )					    5 28 LOAD_FAST 3 ( max1 )					  
							      30 LOAD_FAST 0 ( arr )					    30 LOAD_FAST 0 ( arr )					  
							      32 LOAD_FAST 5 ( i )					    32 LOAD_FAST 5 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBTRACT						  
							      38 LOAD_FAST 2 ( k )					    38 LOAD_FAST 2 ( k )					  
							      40 BINARY_MODULO						    40 BINARY_MODULO						  
							      42 LOAD_CONST 1 ( 0 )					    42 LOAD_CONST 1 ( 0 )					  
							      44 COMPARE_OP 3 ( != )					    44 COMPARE_OP 3 ( != )					  
							      46 POP_JUMP_IF_FALSE 52					    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      6 48 LOAD_CONST 2 ( - 1 )					    6 48 LOAD_CONST 2 ( - 1 )					  
							      50 RETURN_VALUE						    50 RETURN_VALUE						  
							      								    								  
							      8 >> 52 LOAD_FAST 4 ( res )				    8 >> 52 LOAD_FAST 4 ( res )					  
							      54 LOAD_FAST 3 ( max1 )					    54 LOAD_FAST 3 ( max1 )					  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 5 ( i )					    58 LOAD_FAST 5 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 LOAD_FAST 2 ( k )					    64 LOAD_FAST 2 ( k )					  
							      66 BINARY_TRUE_DIVIDE					    66 BINARY_TRUE_DIVIDE					  
							      68 INPLACE_ADD						    68 INPLACE_ADD						  
							      70 STORE_FAST 4 ( res )					    70 STORE_FAST 4 ( res )					  
							      72 JUMP_ABSOLUTE 24					    72 JUMP_ABSOLUTE 24						  
							      >> 74 POP_BLOCK						    74 POP_BLOCK						  
							      								    >> 76 LOAD_CONST 0 ( None )					  
							      9 >> 76 LOAD_GLOBAL 2 ( int )				    78 RETURN_VALUE NEW_LINE					  
							      78 LOAD_FAST 4 ( res )					    								  
							      80 CALL_FUNCTION 1					    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		      AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		    AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		  AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES
--							      --							    --								  --
def polygonArea ( X , Y , n ) :				      Disassembly of <code object polygonArea at 0x7f33e2653f60, fi Disassembly of <code object polygonArea at 0x7f2b0163dc90, fi script_not_found : None
    area = 0.0						      2 0 LOAD_CONST 1 ( 0.0 )					    2 0 LOAD_CONST 1 ( 0.0 )					  
    j = n - 1						      2 STORE_FAST 3 ( area )					    2 STORE_FAST 3 ( area )					  
    for i in range ( 0 , n ) :				      								    								  
	area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) 3 4 LOAD_FAST 2 ( n )					    3 4 LOAD_FAST 2 ( n )					  
	j = i						      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
    return int ( abs ( area / 2.0 ) )			      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
							      10 STORE_FAST 4 ( j )					    10 STORE_FAST 4 ( j )					  
							      								    								  
							      4 12 SETUP_LOOP 58 ( to 72 )				    4 12 SETUP_LOOP 62 ( to 78 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_CONST 3 ( 0 )					    16 LOAD_CONST 3 ( 0 )					  
							      18 LOAD_FAST 2 ( n )					    18 LOAD_FAST 2 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 44 ( to 70 )				    >> 24 FOR_ITER 50 ( to 76 )					  
							      26 STORE_FAST 5 ( i )					    26 STORE_FAST 5 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 3 ( area )					    5 28 LOAD_FAST 3 ( area )					  
							      30 LOAD_FAST 0 ( X )					    30 LOAD_FAST 0 ( X )					  
							      32 LOAD_FAST 4 ( j )					    32 LOAD_FAST 4 ( j )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 0 ( X )					    36 LOAD_FAST 0 ( X )					  
							      38 LOAD_FAST 5 ( i )					    38 LOAD_FAST 5 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 LOAD_FAST 1 ( Y )					    44 LOAD_FAST 1 ( Y )					  
							      46 LOAD_FAST 4 ( j )					    46 LOAD_FAST 5 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 1 ( Y )					    50 BINARY_MULTIPLY						  
							      52 LOAD_FAST 5 ( i )					    52 INPLACE_ADD						  
							      54 BINARY_SUBSCR						    54 STORE_FAST 3 ( area )					  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_MULTIPLY					    6 56 LOAD_FAST 5 ( i )					  
							      60 INPLACE_ADD						    58 STORE_FAST 4 ( j )					  
							      62 STORE_FAST 3 ( area )					    60 JUMP_ABSOLUTE 24						  
							      								    >> 62 POP_BLOCK						  
							      6 64 LOAD_FAST 5 ( i )					    								  
							      66 STORE_FAST 4 ( j )					    7 64 LOAD_GLOBAL 1 ( int )					  
							      68 JUMP_ABSOLUTE 24					    66 LOAD_GLOBAL 2 ( abs )					  
							      >> 70 POP_BLOCK						    68 LOAD_FAST 3 ( area )					  
							      								    70 LOAD_CONST 4 ( 2.0 )					  
							      7 >> 72 LOAD_GLOBAL 1 ( int )				    72 BINARY_TRUE_DIVIDE					  
							      74 LOAD_GLOBAL 2 ( abs )					    74 CALL_FUNCTION 1						  
							      76 LOAD_FAST 3 ( area )					    76 CALL_FUNCTION 1						  
							      78 LOAD_CONST 4 ( 2.0 )					    78 RETURN_VALUE NEW_LINE					  
							      80 BINARY_TRUE_DIVIDE					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 CALL_FUNCTION 1					    								  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE
--							      --							    --								  --
def findMinRooms ( slots , n , m ) :			      Disassembly of <code object findMinRooms at 0x7f33e2653ed0, f Disassembly of <code object findMinRooms at 0x7f2b0163dc90, f script_not_found : None
    counts = [ 0 ] * m ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	for j in range ( m ) :				      4 LOAD_FAST 2 ( m )					    4 LOAD_FAST 2 ( m )						  
	    if ( slots [ i ] [ j ] == '1' ) :		      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
		counts [ j ] += 1 ;			      8 STORE_FAST 3 ( counts )					    8 STORE_FAST 3 ( counts )					  
    return max ( counts ) ;				      								    								  
							      3 10 SETUP_LOOP 66 ( to 78 )				    3 10 SETUP_LOOP 68 ( to 80 )				  
							      12 LOAD_GLOBAL 0 ( range )				    12 LOAD_GLOBAL 0 ( range )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 54 ( to 76 )				    >> 20 FOR_ITER 56 ( to 78 )					  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      4 24 SETUP_LOOP 48 ( to 74 )				    4 24 SETUP_LOOP 48 ( to 76 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_FAST 2 ( m )					    28 LOAD_FAST 2 ( m )					  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 36 ( to 72 )				    >> 34 FOR_ITER 36 ( to 74 )					  
							      36 STORE_FAST 5 ( j )					    36 STORE_FAST 5 ( j )					  
							      								    								  
							      5 38 LOAD_FAST 0 ( slots )				    5 38 LOAD_FAST 0 ( slots )					  
							      40 LOAD_FAST 4 ( i )					    40 LOAD_FAST 4 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 5 ( j )					    44 LOAD_FAST 5 ( j )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_CONST 2 ( '1' )					    48 LOAD_CONST 2 ( '1' )					  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_FALSE 34					    52 POP_JUMP_IF_FALSE 34					  
							      								    								  
							      6 54 LOAD_FAST 3 ( counts )				    6 54 LOAD_FAST 3 ( counts )					  
							      56 LOAD_FAST 5 ( j )					    56 LOAD_FAST 5 ( j )					  
							      58 DUP_TOP_TWO						    58 DUP_TOP_TWO						  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_CONST 3 ( 1 )					    62 LOAD_CONST 3 ( 1 )					  
							      64 INPLACE_ADD						    64 INPLACE_ADD						  
							      66 ROT_THREE						    66 ROT_THREE						  
							      68 STORE_SUBSCR						    68 STORE_SUBSCR						  
							      70 JUMP_ABSOLUTE 34					    70 JUMP_ABSOLUTE 34						  
							      >> 72 POP_BLOCK						    72 POP_BLOCK						  
							      >> 74 JUMP_ABSOLUTE 20					    >> 74 JUMP_ABSOLUTE 20					  
							      >> 76 POP_BLOCK						    >> 76 POP_BLOCK						  
							      								    >> 78 JUMP_ABSOLUTE 20					  
							      7 >> 78 LOAD_GLOBAL 1 ( max )				    >> 80 POP_BLOCK						  
							      80 LOAD_FAST 3 ( counts )					    								  
							      82 CALL_FUNCTION 1					    7 82 LOAD_GLOBAL 1 ( max )					  
							      84 RETURN_VALUE NEW_LINE					    84 LOAD_FAST 3 ( counts )					  
							      								    86 CALL_FUNCTION 1						  
							      								    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
def canMakeAllSame ( str ) :				      Disassembly of <code object canMakeAllSame at 0x7f33e2649a50, Disassembly of <code object canMakeAllSame at 0x7f2b0164ded0, failure : #Results: 0, 10
    zeros = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    ones = 0						      2 STORE_FAST 1 ( zeros )					    2 STORE_FAST 1 ( zeros )					  
    for i in range ( 0 , len ( str ) ) :		      								    								  
	ch = str [ i ] ;				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	if ( ch == '0' ) :				      6 STORE_FAST 2 ( ones )					    6 STORE_FAST 2 ( ones )					  
	    zeros = zeros + 1				      								    								  
	else :						      4 8 SETUP_LOOP 56 ( to 66 )				    4 8 SETUP_LOOP 54 ( to 66 )					  
	    ones = ones + 1				      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
    return ( zeros == 1 or ones == 1 ) ;		      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
							      14 LOAD_GLOBAL 1 ( len )					    14 LOAD_GLOBAL 1 ( len )					  
							      16 LOAD_FAST 0 ( str )					    16 LOAD_FAST 0 ( str )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 38 ( to 64 )				    >> 24 FOR_ITER 42 ( to 64 )					  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 0 ( str )					    5 28 LOAD_FAST 0 ( str )					  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 3 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 STORE_FAST 4 ( ch )					    34 STORE_FAST 4 ( ch )					  
							      								    								  
							      6 36 LOAD_FAST 4 ( ch )					    6 36 LOAD_FAST 4 ( ch )					  
							      38 LOAD_CONST 2 ( '0' )					    38 LOAD_CONST 2 ( '0' )					  
							      40 COMPARE_OP 2 ( == )					    40 COMPARE_OP 2 ( == )					  
							      42 POP_JUMP_IF_FALSE 54					    42 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 44 LOAD_FAST 1 ( zeros )				    7 44 LOAD_FAST 1 ( zeros )					  
							      46 LOAD_CONST 3 ( 1 )					    46 LOAD_CONST 3 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 STORE_FAST 1 ( zeros )					    50 STORE_FAST 1 ( zeros )					  
							      52 JUMP_ABSOLUTE 24					    								  
							      								    9 >> 52 LOAD_FAST 2 ( ones )				  
							      9 >> 54 LOAD_FAST 2 ( ones )				    54 LOAD_CONST 3 ( 1 )					  
							      56 LOAD_CONST 3 ( 1 )					    56 BINARY_ADD						  
							      58 BINARY_ADD						    58 STORE_FAST 2 ( ones )					  
							      60 STORE_FAST 2 ( ones )					    60 JUMP_ABSOLUTE 24						  
							      62 JUMP_ABSOLUTE 24					    62 POP_BLOCK						  
							      >> 64 POP_BLOCK						    >> 64 LOAD_CONST 0 ( None )					  
							      								    66 RETURN_VALUE NEW_LINE					  
							      10 >> 66 LOAD_FAST 1 ( zeros )				    								  
							      68 LOAD_CONST 3 ( 1 )					    								  
							      70 COMPARE_OP 2 ( == )					    								  
							      72 JUMP_IF_TRUE_OR_POP 80					    								  
							      74 LOAD_FAST 2 ( ones )					    								  
							      76 LOAD_CONST 3 ( 1 )					    								  
							      78 COMPARE_OP 2 ( == )					    								  
							      >> 80 RETURN_VALUE NEW_LINE				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			      SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			    SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			  SORTING_ARRAY_REVERSE_AROUND_<unk> DLE
--							      --							    --								  --
def ifPossible ( arr , n ) :				      Disassembly of <code object ifPossible at 0x7f33e2653f60, fil Disassembly of <code object ifPossible at 0x7f2b016399c0, fil script_not_found : None
    cp = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    cp = arr						      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    cp.sort ( )						      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
    for i in range ( 0 , n ) :				      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	if ( not ( arr [ i ] == cp [ i ] ) and not ( arr [ n  8 STORE_FAST 2 ( cp )					    8 STORE_FAST 2 ( cp )					  
	    return False				      								    								  
    return True						      3 10 LOAD_FAST 0 ( arr )					    3 10 LOAD_FAST 0 ( arr )					  
							      12 STORE_FAST 2 ( cp )					    12 STORE_FAST 2 ( cp )					  
							      								    								  
							      4 14 LOAD_FAST 2 ( cp )					    4 14 LOAD_FAST 2 ( cp )					  
							      16 LOAD_METHOD 0 ( sort )					    16 LOAD_METHOD 0 ( sort )					  
							      18 CALL_METHOD 0						    18 CALL_METHOD 0						  
							      20 POP_TOP						    20 POP_TOP							  
							      								    								  
							      5 22 SETUP_LOOP 62 ( to 86 )				    5 22 SETUP_LOOP 62 ( to 96 )				  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_GLOBAL 1 ( range )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 48 ( to 84 )				    >> 34 FOR_ITER 50 ( to 94 )					  
							      36 STORE_FAST 3 ( i )					    36 STORE_FAST 3 ( i )					  
							      								    								  
							      6 38 LOAD_FAST 0 ( arr )					    6 38 LOAD_FAST 0 ( arr )					  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 3 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 2 ( cp )					    44 LOAD_FAST 2 ( cp )					  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_TRUE 34					    52 POP_JUMP_IF_FALSE 34					  
							      54 LOAD_FAST 0 ( arr )					    54 LOAD_FAST 0 ( arr )					  
							      56 LOAD_FAST 1 ( n )					    56 LOAD_FAST 1 ( n )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 LOAD_FAST 3 ( i )					    62 LOAD_FAST 3 ( i )					  
							      64 BINARY_SUBTRACT					    64 BINARY_SUBTRACT						  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 2 ( cp )					    68 LOAD_FAST 2 ( cp )					  
							      70 LOAD_FAST 3 ( i )					    70 LOAD_FAST 3 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 COMPARE_OP 2 ( == )					    74 COMPARE_OP 2 ( == )					  
							      76 POP_JUMP_IF_TRUE 34					    76 POP_JUMP_IF_TRUE 34					  
							      								    								  
							      7 78 LOAD_CONST 3 ( False )				    7 78 LOAD_CONST 3 ( False )					  
							      80 RETURN_VALUE						    80 RETURN_VALUE						  
							      82 JUMP_ABSOLUTE 34					    >> 82 JUMP_ABSOLUTE 34					  
							      >> 84 POP_BLOCK						    >> 84 POP_BLOCK						  
							      								    								  
							      8 >> 86 LOAD_CONST 4 ( True )				    8 >> 86 LOAD_CONST 4 ( True )				  
							      88 RETURN_VALUE NEW_LINE					    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
def binaryToDecimal ( n ) :				      Disassembly of <code object binaryToDecimal at 0x7f33e2653ed0 Disassembly of <code object binaryToDecimal at 0x7f2b016399c0 error : Traceback (most recent call last):   File
    num = n ;						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    dec_value = 0 ;					      2 STORE_FAST 1 ( num )					    2 STORE_FAST 1 ( num )					  (item)   File "main.py", line 36, in <module>	  Fi
    base1 = 1 ;						      								    								  le "<dis>", line 2, in binaryToDecimal TypeError:
    len1 = len ( num ) ;				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  unsupported operand type(s) for *: 'range_iterator
    for i in range ( len1 - 1 , - 1 , - 1 ) :		      6 STORE_FAST 2 ( dec_value )				    6 STORE_FAST 2 ( dec_value )				  ' and 'int'
	if ( num [ i ] == '1' ) :			      								    								  
	    dec_value += base1 ;			      4 8 LOAD_CONST 2 ( 1 )					    4 8 LOAD_CONST 2 ( 1 )					  
	base1 = base1 * 2 ;				      10 STORE_FAST 3 ( base1 )					    10 STORE_FAST 3 ( base1 )					  
    return dec_value ;					      								    								  
							      5 12 LOAD_GLOBAL 0 ( len )				    5 12 LOAD_GLOBAL 0 ( len )					  
							      14 LOAD_FAST 1 ( num )					    14 LOAD_FAST 1 ( num )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 STORE_FAST 4 ( len1 )					    18 STORE_FAST 4 ( Publi)					  
							      								    								  
							      6 20 SETUP_LOOP 52 ( to 74 )				    6 20 SETUP_LOOP 70 ( to 88 )				  
							      22 LOAD_GLOBAL 1 ( range )				    22 LOAD_GLOBAL 1 ( range )					  
							      24 LOAD_FAST 4 ( len1 )					    24 LOAD_FAST 4 ( Publi)					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 LOAD_CONST 3 ( - 1 )					    30 LOAD_CONST 3 ( - 1 )					  
							      32 LOAD_CONST 3 ( - 1 )					    32 LOAD_CONST 3 ( - 1 )					  
							      34 CALL_FUNCTION 3					    34 CALL_FUNCTION 3						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 32 ( to 72 )				    >> 38 FOR_ITER 48 ( to 86 )					  
							      40 STORE_FAST 5 ( i )					    40 STORE_FAST 5 ( i )					  
							      								    								  
							      7 42 LOAD_FAST 1 ( num )					    7 42 LOAD_FAST 1 ( num )					  
							      44 LOAD_FAST 5 ( i )					    44 LOAD_FAST 5 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_CONST 4 ( '1' )					    48 LOAD_CONST 4 ( '1' )					  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_FALSE 62					    52 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      8 54 LOAD_FAST 2 ( dec_value )				    8 54 LOAD_FAST 2 ( dec_value )				  
							      56 LOAD_FAST 3 ( base1 )					    56 LOAD_FAST 3 ( base1 )					  
							      58 INPLACE_ADD						    58 INPLACE_ADD						  
							      60 STORE_FAST 2 ( dec_value )				    60 STORE_FAST 2 ( dec_value )				  
							      								    62 JUMP_ABSOLUTE 38						  
							      9 >> 62 LOAD_FAST 3 ( base1 )				    >> 64 POP_BLOCK						  
							      64 LOAD_CONST 5 ( 2 )					    								  
							      66 BINARY_MULTIPLY					    9 66 LOAD_FAST 3 ( base1 )					  
							      68 STORE_FAST 3 ( base1 )					    68 LOAD_CONST 5 ( 2 )					  
							      70 JUMP_ABSOLUTE 38					    70 BINARY_MULTIPLY						  
							      >> 72 POP_BLOCK						    72 STORE_FAST 3 ( base1 )					  
							      								    74 JUMP_ABSOLUTE 38						  
							      10 >> 74 LOAD_FAST 2 ( dec_value )			    >> 76 POP_BLOCK						  
							      76 RETURN_VALUE NEW_LINE					    								  
							      								    10 78 LOAD_FAST 2 ( dec_value )				  
							      								    80 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
def sortString ( str , n ) :				      Disassembly of <code object sortString at 0x7f33e2644f60, fil Disassembly of <code object sortString at 0x7f2b01639660, fil script_not_found : None
    new_str = ""					      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	      2 STORE_FAST 2 ( new_str )				    2 STORE_FAST 2 ( new_str )					  
	for j in range ( n ) :				      								    								  
	    if ( str [ j ] == chr ( i ) ) :		      3 4 SETUP_LOOP 76 ( to 82 )				    3 4 SETUP_LOOP 80 ( to 86 )					  
		new_str += str [ j ]			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return new_str					      8 LOAD_GLOBAL 1 ( ord )					    8 LOAD_GLOBAL 1 ( ord )					  
							      10 LOAD_CONST 2 ( 'a' )					    10 LOAD_CONST 2 ( 'a' )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 LOAD_GLOBAL 1 ( ord )					    14 LOAD_GLOBAL 1 ( ord )					  
							      16 LOAD_CONST 3 ( 'z' )					    16 LOAD_CONST 3 ( 'z' )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 LOAD_CONST 4 ( 1 )					    20 LOAD_CONST 4 ( 1 )					  
							      22 BINARY_ADD						    22 BINARY_ADD						  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 50 ( to 80 )				    >> 28 FOR_ITER 62 ( to 84 )					  
							      30 STORE_FAST 3 ( i )					    30 STORE_FAST 3 ( i )					  
							      								    								  
							      4 32 SETUP_LOOP 44 ( to 78 )				    4 32 SETUP_LOOP 54 ( to 82 )				  
							      34 LOAD_GLOBAL 0 ( range )				    34 LOAD_GLOBAL 0 ( range )					  
							      36 LOAD_FAST 1 ( n )					    36 LOAD_FAST 1 ( n )					  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 32 ( to 76 )				    >> 42 FOR_ITER 42 ( to 80 )					  
							      44 STORE_FAST 4 ( j )					    44 STORE_FAST 4 ( j )					  
							      								    								  
							      5 46 LOAD_FAST 0 ( str )					    5 46 LOAD_FAST 0 ( str )					  
							      48 LOAD_FAST 4 ( j )					    48 LOAD_FAST 4 ( j )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_GLOBAL 2 ( chr )					    52 LOAD_GLOBAL 2 ( chr )					  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_FAST 3 ( i )					  
							      56 CALL_FUNCTION 1					    56 CALL_FUNCTION 1						  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 42					    60 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      6 62 LOAD_FAST 2 ( new_str )				    6 62 LOAD_FAST 2 ( new_str )				  
							      64 LOAD_FAST 0 ( str )					    64 LOAD_FAST 0 ( str )					  
							      66 LOAD_FAST 4 ( j )					    66 LOAD_FAST 4 ( j )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 INPLACE_ADD						    70 INPLACE_ADD						  
							      72 STORE_FAST 2 ( new_str )				    72 STORE_FAST 2 ( new_str )					  
							      74 JUMP_ABSOLUTE 42					    74 JUMP_ABSOLUTE 42						  
							      >> 76 POP_BLOCK						    >> 76 POP_BLOCK						  
							      >> 78 JUMP_ABSOLUTE 28					    >> 78 JUMP_ABSOLUTE 28					  
							      >> 80 POP_BLOCK						    >> 80 POP_BLOCK						  
							      								    								  
							      7 >> 82 LOAD_FAST 2 ( new_str )				    7 >> 82 LOAD_FAST 2 ( new_str )				  
							      84 RETURN_VALUE NEW_LINE					    84 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
def countFact ( low , high ) :				      Disassembly of <code object countFact at 0x7f33e2649a50, file Disassembly of <code object countFact at 0x7f2b0163dc90, file timeout : None
    fact = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    x = 1						      2 STORE_FAST 2 ( fact )					    2 STORE_FAST 2 ( fact )					  
    while ( fact < low ) :				      								    								  
	fact = fact * x					      3 4 LOAD_CONST 1 ( 1 )					    3 4 LOAD_CONST 1 ( 1 )					  
	x += 1						      6 STORE_FAST 3 ( x )					    6 STORE_FAST 3 ( x )					  
    res = 0						      								    								  
    while ( fact <= high ) :				      4 8 SETUP_LOOP 28 ( to 38 )				    4 8 SETUP_LOOP 34 ( to 44 )					  
	res += 1					      >> 10 LOAD_FAST 2 ( fact )				    >> 10 LOAD_FAST 2 ( fact )					  
	fact = fact * x					      12 LOAD_FAST 0 ( low )					    12 LOAD_FAST 0 ( low )					  
	x += 1						      14 COMPARE_OP 0 ( < )					    14 COMPARE_OP 0 ( < )					  
    return res						      16 POP_JUMP_IF_FALSE 36					    16 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      5 18 LOAD_FAST 2 ( fact )					    5 18 LOAD_FAST 2 ( fact )					  
							      20 LOAD_FAST 3 ( x )					    20 LOAD_FAST 3 ( x )					  
							      22 BINARY_MULTIPLY					    22 BINARY_MULTIPLY						  
							      24 STORE_FAST 2 ( fact )					    24 STORE_FAST 2 ( fact )					  
							      								    								  
							      6 26 LOAD_FAST 3 ( x )					    6 26 LOAD_FAST 3 ( x )					  
							      28 LOAD_CONST 1 ( 1 )					    28 LOAD_CONST 1 ( 1 )					  
							      30 INPLACE_ADD						    30 INPLACE_ADD						  
							      32 STORE_FAST 3 ( x )					    32 STORE_FAST 3 ( x )					  
							      34 JUMP_ABSOLUTE 10					    								  
							      >> 36 POP_BLOCK						    7 >> 34 LOAD_CONST 2 ( 0 )					  
							      								    36 STORE_FAST 4 ( res )					  
							      7 >> 38 LOAD_CONST 2 ( 0 )				    								  
							      40 STORE_FAST 4 ( res )					    8 38 SETUP_LOOP 34 ( to 78 )				  
							      								    >> 40 LOAD_FAST 2 ( fact )					  
							      8 42 SETUP_LOOP 36 ( to 80 )				    42 LOAD_FAST 1 ( high )					  
							      >> 44 LOAD_FAST 2 ( fact )				    44 COMPARE_OP 1 ( <= )					  
							      46 LOAD_FAST 1 ( high )					    46 POP_JUMP_IF_FALSE 76					  
							      48 COMPARE_OP 1 ( <= )					    								  
							      50 POP_JUMP_IF_FALSE 78					    9 48 LOAD_FAST 4 ( res )					  
							      								    50 LOAD_CONST 1 ( 1 )					  
							      9 52 LOAD_FAST 4 ( res )					    52 INPLACE_ADD						  
							      54 LOAD_CONST 1 ( 1 )					    54 STORE_FAST 4 ( res )					  
							      56 INPLACE_ADD						    								  
							      58 STORE_FAST 4 ( res )					    10 56 LOAD_FAST 2 ( fact )					  
							      								    58 LOAD_FAST 3 ( x )					  
							      10 60 LOAD_FAST 2 ( fact )				    60 BINARY_MULTIPLY						  
							      62 LOAD_FAST 3 ( x )					    62 STORE_FAST 3 ( x )					  
							      64 BINARY_MULTIPLY					    								  
							      66 STORE_FAST 2 ( fact )					    11 64 LOAD_FAST 3 ( x )					  
							      								    66 LOAD_CONST 1 ( 1 )					  
							      11 68 LOAD_FAST 3 ( x )					    68 INPLACE_ADD						  
							      70 LOAD_CONST 1 ( 1 )					    70 STORE_FAST 3 ( x )					  
							      72 INPLACE_ADD						    72 JUMP_ABSOLUTE 40						  
							      74 STORE_FAST 3 ( x )					    74 POP_BLOCK						  
							      76 JUMP_ABSOLUTE 44					    								  
							      >> 78 POP_BLOCK						    12 >> 76 LOAD_FAST 4 ( res )				  
							      								    78 RETURN_VALUE NEW_LINE					  
							      12 >> 80 LOAD_FAST 4 ( res )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION
--							      --							    --								  --
def findMinX ( num , rem , k ) :			      Disassembly of <code object findMinX at 0x7f33e2653f60, file  Disassembly of <code object findMinX at 0x7f2b0163dc90, file  script_not_found : None
    x = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    while ( True ) :					      2 STORE_FAST 3 ( x )					    2 STORE_FAST 3 ( x )					  
	j = 0 ;						      								    								  
	while ( j < k ) :				      3 4 SETUP_LOOP 72 ( to 78 )				    3 4 SETUP_LOOP 78 ( to 84 )					  
	    if ( x % num [ j ] != rem [ j ] ) :		      								    								  
		break ;					      4 >> 6 LOAD_CONST 2 ( 0 )					    4 >> 6 LOAD_CONST 2 ( 0 )					  
	    j += 1 ;					      8 STORE_FAST 4 ( j )					    8 STORE_FAST 4 ( j )					  
	if ( j == k ) :					      								    								  
	    return x ;					      5 10 SETUP_LOOP 42 ( to 54 )				    5 10 SETUP_LOOP 52 ( to 66 )				  
	x += 1 ;					      >> 12 LOAD_FAST 4 ( j )					    >> 12 LOAD_FAST 4 ( j )					  
							      14 LOAD_FAST 2 ( k )					    14 LOAD_FAST 2 ( k )					  
							      16 COMPARE_OP 0 ( < )					    16 COMPARE_OP 0 ( < )					  
							      18 POP_JUMP_IF_FALSE 52					    18 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      6 20 LOAD_FAST 3 ( x )					    6 20 LOAD_FAST 3 ( x )					  
							      22 LOAD_FAST 0 ( num )					    22 LOAD_FAST 0 ( num )					  
							      24 LOAD_FAST 4 ( j )					    24 LOAD_FAST 4 ( j )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 BINARY_MODULO						    28 LOAD_FAST 1 ( rem )					  
							      30 LOAD_FAST 1 ( rem )					    30 LOAD_FAST 4 ( j )					  
							      32 LOAD_FAST 4 ( j )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 COMPARE_OP 3 ( != )					  
							      36 COMPARE_OP 3 ( != )					    36 POP_JUMP_IF_FALSE 42					  
							      38 POP_JUMP_IF_FALSE 42					    								  
							      								    7 38 BREAK_LOOP						  
							      7 40 BREAK_LOOP						    40 JUMP_ABSOLUTE 12						  
							      								    								  
							      8 >> 42 LOAD_FAST 4 ( j )					    8 >> 42 LOAD_FAST 4 ( j )					  
							      44 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 1 ( 1 )					  
							      46 INPLACE_ADD						    46 INPLACE_ADD						  
							      48 STORE_FAST 4 ( j )					    48 STORE_FAST 4 ( j )					  
							      50 JUMP_ABSOLUTE 12					    50 JUMP_ABSOLUTE 12						  
							      >> 52 POP_BLOCK						    >> 52 POP_BLOCK						  
							      								    								  
							      9 >> 54 LOAD_FAST 4 ( j )					    9 54 LOAD_FAST 4 ( j )					  
							      56 LOAD_FAST 2 ( k )					    56 LOAD_FAST 2 ( k )					  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 66					    60 POP_JUMP_IF_TRUE 66					  
							      								    62 LOAD_GLOBAL 0 ( AssertionError )				  
							      10 62 LOAD_FAST 3 ( x )					    64 RAISE_VARARGS 1						  
							      64 RETURN_VALUE						    								  
							      								    10 >> 66 LOAD_FAST 3 ( x )					  
							      11 >> 66 LOAD_FAST 3 ( x )				    68 LOAD_CONST 1 ( 1 )					  
							      68 LOAD_CONST 1 ( 1 )					    70 INPLACE_ADD						  
							      70 INPLACE_ADD						    72 STORE_FAST 3 ( x )					  
							      72 STORE_FAST 3 ( x )					    74 JUMP_ABSOLUTE 12						  
							      74 JUMP_ABSOLUTE 6					    >> 76 POP_BLOCK						  
							      76 POP_BLOCK						    								  
							      >> 78 LOAD_CONST 0 ( None )				    11 >> 78 LOAD_FAST 3 ( x )					  
							      80 RETURN_VALUE NEW_LINE					    80 LOAD_CONST 1 ( 1 )					  
							      								    82 INPLACE_ADD						  
							      								    84 STORE_FAST 3 ( x )					  
							      								    86 JUMP_ABSOLUTE 6						  
							      								    88 POP_BLOCK						  
							      								    90 LOAD_CONST 0 ( None )					  
							      								    92 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2
--							      --							    --								  --
def minSum ( a , n ) :					      Disassembly of <code object minSum at 0x7f33e2644f60, file "< Disassembly of <code object minSum at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    a = sorted ( a )					      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  "XLM/dis_script.py", line 60, in <module>	exec
    num1 , num2 = 0 , 0					      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  (item)   File "main.py", line 35, in <module>	  Fi
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in minSum TypeError: 'range_it
	if i % 2 == 0 :					      6 STORE_FAST 0 ( a )					    6 STORE_FAST 0 ( a )					  erator' object is not subscriptable
	    num1 = num1 * 10 + a [ i ]			      								    								  
	else :						      3 8 LOAD_CONST 1 ( ( 0 , 0 ) )				    3 8 LOAD_CONST 1 ( ( 0 , 0 ) )				  
	    num2 = num2 * 10 + a [ i ]			      10 UNPACK_SEQUENCE 2					    10 UNPACK_SEQUENCE 2					  
    return num2 + num1					      12 STORE_FAST 2 ( num1 )					    12 STORE_FAST 2 ( num1 )					  
							      14 STORE_FAST 3 ( num2 )					    14 STORE_FAST 3 ( num2 )					  
							      								    								  
							      4 16 SETUP_LOOP 62 ( to 80 )				    4 16 SETUP_LOOP 68 ( to 86 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_FAST 1 ( n )					    20 LOAD_FAST 1 ( n )					  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 50 ( to 78 )				    >> 26 FOR_ITER 56 ( to 84 )					  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      5 30 LOAD_FAST 4 ( i )					    5 30 LOAD_FAST 4 ( i )					  
							      32 LOAD_CONST 2 ( 2 )					    32 LOAD_CONST 2 ( 2 )					  
							      34 BINARY_MODULO						    34 BINARY_MODULO						  
							      36 LOAD_CONST 3 ( 0 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 COMPARE_OP 2 ( == )					    38 COMPARE_OP 2 ( == )					  
							      40 POP_JUMP_IF_FALSE 60					    40 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      6 42 LOAD_FAST 2 ( num1 )					    6 42 LOAD_FAST 2 ( num1 )					  
							      44 LOAD_CONST 4 ( 10 )					    44 LOAD_CONST 3 ( 10 )					  
							      46 BINARY_MULTIPLY					    46 BINARY_MULTIPLY						  
							      48 LOAD_FAST 0 ( a )					    48 LOAD_FAST 0 ( a )					  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 4 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 STORE_FAST 2 ( num1 )					    56 STORE_FAST 2 ( num1 )					  
							      58 JUMP_ABSOLUTE 26					    58 JUMP_ABSOLUTE 26						  
							      								    								  
							      8 >> 60 LOAD_FAST 3 ( num2 )				    8 >> 60 LOAD_FAST 3 ( num2 )				  
							      62 LOAD_CONST 4 ( 10 )					    62 LOAD_CONST 3 ( 10 )					  
							      64 BINARY_MULTIPLY					    64 BINARY_MULTIPLY						  
							      66 LOAD_FAST 0 ( a )					    66 LOAD_FAST 0 ( a )					  
							      68 LOAD_FAST 4 ( i )					    68 LOAD_FAST 4 ( i )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 STORE_FAST 3 ( num2 )					    74 STORE_FAST 3 ( num2 )					  
							      76 JUMP_ABSOLUTE 26					    76 JUMP_ABSOLUTE 26						  
							      >> 78 POP_BLOCK						    >> 78 POP_BLOCK						  
							      								    								  
							      9 >> 80 LOAD_FAST 3 ( num2 )				    9 >> 80 LOAD_FAST 3 ( num2 )				  
							      82 LOAD_FAST 2 ( num1 )					    82 LOAD_FAST 2 ( num1 )					  
							      84 BINARY_ADD						    84 BINARY_ADD						  
							      86 RETURN_VALUE NEW_LINE					    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
def binarySearch ( arr , low , high ) :			      Disassembly of <code object binarySearch at 0x7f33e2649a50, f Disassembly of <code object binarySearch at 0x7f2b016399c0, f script_not_found : None
    if high >= low :					      2 0 LOAD_FAST 2 ( high )					    2 0 LOAD_FAST 2 ( high )					  
	mid = ( low + high ) // 2			      2 LOAD_FAST 1 ( low )					    2 LOAD_FAST 1 ( low )					  
    if mid is arr [ mid ] :				      4 COMPARE_OP 5 ( >= )					    4 COMPARE_OP 5 ( >= )					  
	return mid					      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 22					  
    if mid > arr [ mid ] :				      								    								  
	return binarySearch ( arr , ( mid + 1 ) , high )      3 8 LOAD_FAST 1 ( low )					    3 8 LOAD_FAST 1 ( low )					  
    else :						      10 LOAD_FAST 2 ( high )					    10 LOAD_FAST 2 ( high )					  
	return binarySearch ( arr , low , ( mid - 1 ) )	      12 BINARY_ADD						    12 BINARY_ADD						  
    return - 1						      14 LOAD_CONST 1 ( 2 )					    14 LOAD_CONST 1 ( 2 )					  
							      16 BINARY_FLOOR_DIVIDE					    16 BINARY_FLOOR_DIVIDE					  
							      18 STORE_FAST 3 ( mid )					    18 STORE_FAST 3 ( mid )					  
							      								    20 JUMP_FORWARD 26 ( to 48 )				  
							      4 >> 20 LOAD_FAST 3 ( mid )				    								  
							      22 LOAD_FAST 0 ( arr )					    4 >> 22 LOAD_FAST 3 ( mid )					  
							      24 LOAD_FAST 3 ( mid )					    24 LOAD_FAST 0 ( arr )					  
							      26 BINARY_SUBSCR						    26 LOAD_FAST 3 ( mid )					  
							      28 COMPARE_OP 8 ( is )					    28 BINARY_SUBSCR						  
							      30 POP_JUMP_IF_FALSE 36					    30 COMPARE_OP 8 ( is )					  
							      								    32 POP_JUMP_IF_FALSE 38					  
							      5 32 LOAD_FAST 3 ( mid )					    								  
							      34 RETURN_VALUE						    5 34 LOAD_FAST 3 ( mid )					  
							      								    36 RETURN_VALUE						  
							      6 >> 36 LOAD_FAST 3 ( mid )				    								  
							      38 LOAD_FAST 0 ( arr )					    6 >> 38 LOAD_FAST 3 ( mid )					  
							      40 LOAD_FAST 3 ( mid )					    40 LOAD_FAST 0 ( arr )					  
							      42 BINARY_SUBSCR						    42 LOAD_FAST 3 ( mid )					  
							      44 COMPARE_OP 4 ( > )					    44 BINARY_SUBSCR						  
							      46 POP_JUMP_IF_FALSE 64					    46 COMPARE_OP 4 ( > )					  
							      								    48 POP_JUMP_IF_FALSE 64					  
							      7 48 LOAD_GLOBAL 0 ( binarySearch )			    								  
							      50 LOAD_FAST 0 ( arr )					    7 50 LOAD_GLOBAL 0 ( binarySearch )				  
							      52 LOAD_FAST 3 ( mid )					    52 LOAD_FAST 0 ( arr )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_FAST 3 ( mid )					  
							      56 BINARY_ADD						    56 LOAD_CONST 2 ( 1 )					  
							      58 LOAD_FAST 2 ( high )					    58 BINARY_ADD						  
							      60 CALL_FUNCTION 3					    60 BUILD_TUPLE 2						  
							      62 RETURN_VALUE						    62 LOAD_FAST 2 ( high )					  
							      								    64 CALL_FUNCTION 3						  
							      9 >> 64 LOAD_GLOBAL 0 ( binarySearch )			    66 RETURN_VALUE						  
							      66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 1 ( low )					    9 >> 68 LOAD_GLOBAL 1 ( binarySearch )			  
							      70 LOAD_FAST 3 ( mid )					    70 LOAD_FAST 0 ( arr )					  
							      72 LOAD_CONST 2 ( 1 )					    72 LOAD_FAST 1 ( low )					  
							      74 BINARY_SUBTRACT					    74 LOAD_FAST 3 ( mid )					  
							      76 CALL_FUNCTION 3					    76 LOAD_CONST 2 ( 1 )					  
							      78 RETURN_VALUE						    78 BINARY_SUBTRACT						  
							      								    80 BUILD_TUPLE 2						  
							      10 80 LOAD_CONST 3 ( - 1 )				    82 CALL_FUNCTION 3						  
							      82 RETURN_VALUE NEW_LINE					    84 RETURN_VALUE						  
							      								    								  
							      								    10 >> 86 LOAD_CONST 3 ( - 1 )				  
							      								    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
def check ( st ) :					      Disassembly of <code object check at 0x7f33e2653ed0, file "<d Disassembly of <code object check at 0x7f2b01639660, file "<d script_not_found : None
    n = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    if ( ( ( int ) ( st [ n - 1 ] ) % 2 ) != 0 ) :	      2 LOAD_FAST 0 ( st )					    2 LOAD_FAST 0 ( st )					  
	return False					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    digitSum = 0					      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
    for i in range ( 0 , n ) :				      								    								  
	digitSum = digitSum + ( int ) ( st [ i ] )	      3 8 LOAD_GLOBAL 1 ( int )					    3 8 LOAD_GLOBAL 1 ( int )					  
    return ( digitSum % 3 == 0 )			      10 LOAD_FAST 0 ( st )					    10 LOAD_GLOBAL 2 ( int )					  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 0 ( st )					  
							      14 LOAD_CONST 1 ( 1 )					    14 LOAD_FAST 1 ( n )					  
							      16 BINARY_SUBTRACT					    16 LOAD_CONST 1 ( 1 )					  
							      18 BINARY_SUBSCR						    18 BINARY_SUBTRACT						  
							      20 CALL_FUNCTION 1					    20 BINARY_SUBSCR						  
							      22 LOAD_CONST 2 ( 2 )					    22 CALL_FUNCTION 1						  
							      24 BINARY_MODULO						    24 LOAD_CONST 2 ( 2 )					  
							      26 LOAD_CONST 3 ( 0 )					    26 BINARY_MODULO						  
							      28 COMPARE_OP 3 ( != )					    28 LOAD_CONST 3 ( 0 )					  
							      30 POP_JUMP_IF_FALSE 36					    30 COMPARE_OP 3 ( != )					  
							      								    32 POP_JUMP_IF_FALSE 38					  
							      4 32 LOAD_CONST 4 ( False )				    								  
							      34 RETURN_VALUE						    4 34 LOAD_CONST 4 ( False )					  
							      								    36 RETURN_VALUE						  
							      5 >> 36 LOAD_CONST 3 ( 0 )				    								  
							      38 STORE_FAST 2 ( digitSum )				    5 >> 38 LOAD_CONST 3 ( 0 )					  
							      								    40 STORE_FAST 2 ( digitSum )				  
							      6 40 SETUP_LOOP 34 ( to 76 )				    								  
							      42 LOAD_GLOBAL 2 ( range )				    6 42 SETUP_LOOP 48 ( to 96 )				  
							      44 LOAD_CONST 3 ( 0 )					    44 LOAD_GLOBAL 3 ( range )					  
							      46 LOAD_FAST 1 ( n )					    46 LOAD_CONST 3 ( 0 )					  
							      48 CALL_FUNCTION 2					    48 LOAD_FAST 1 ( n )					  
							      50 GET_ITER						    50 CALL_FUNCTION 2						  
							      >> 52 FOR_ITER 20 ( to 74 )				    52 GET_ITER							  
							      54 STORE_FAST 3 ( i )					    >> 54 FOR_ITER 30 ( to 94 )					  
							      								    56 STORE_FAST 3 ( i )					  
							      7 56 LOAD_FAST 2 ( digitSum )				    								  
							      58 LOAD_GLOBAL 1 ( int )					    7 58 LOAD_FAST 2 ( digitSum )				  
							      60 LOAD_FAST 0 ( st )					    60 LOAD_GLOBAL 2 ( int )					  
							      62 LOAD_FAST 3 ( i )					    62 CALL_FUNCTION 1						  
							      64 BINARY_SUBSCR						    64 LOAD_FAST 0 ( st )					  
							      66 CALL_FUNCTION 1					    66 LOAD_FAST 3 ( i )					  
							      68 BINARY_ADD						    68 BINARY_SUBSCR						  
							      70 STORE_FAST 2 ( digitSum )				    70 CALL_FUNCTION 1						  
							      72 JUMP_ABSOLUTE 52					    72 BINARY_ADD						  
							      >> 74 POP_BLOCK						    74 STORE_FAST 2 ( digitSum )				  
							      								    76 JUMP_ABSOLUTE 54						  
							      8 >> 76 LOAD_FAST 2 ( digitSum )				    >> 78 POP_BLOCK						  
							      78 LOAD_CONST 5 ( 3 )					    								  
							      80 BINARY_MODULO						    8 >> 80 LOAD_FAST 2 ( digitSum )				  
							      82 LOAD_CONST 3 ( 0 )					    82 LOAD_CONST 5 ( 3 )					  
							      84 COMPARE_OP 2 ( == )					    84 BINARY_MODULO						  
							      86 RETURN_VALUE NEW_LINE					    86 LOAD_CONST 3 ( 0 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND
--							      --							    --								  --
def isSubSequence ( string1 , string2 , m , n ) :	      Disassembly of <code object isSubSequence at 0x7f33e26494b0,  Disassembly of <code object isSubSequence at 0x7f2b0163dc90,  script_not_found : None
    if m == 0 : return True				      2 0 LOAD_FAST 2 ( m )					    2 0 LOAD_FAST 2 ( m )					  
    if n == 0 : return False				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if string1 [ m - 1 ] == string2 [ n - 1 ] :		      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return isSubSequence ( string1 , string2 , m - 1 , n  6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    return isSubSequence ( string1 , string2 , m , n - 1 )    8 LOAD_CONST 2 ( True )					    8 LOAD_CONST 2 ( True )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      3 >> 12 LOAD_FAST 3 ( n )					    3 >> 12 LOAD_FAST 3 ( n )					  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      20 LOAD_CONST 3 ( False )					    20 LOAD_CONST 3 ( False )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      4 >> 24 LOAD_FAST 0 ( string1 )				    4 >> 24 LOAD_FAST 0 ( string1 )				  
							      26 LOAD_FAST 2 ( m )					    26 LOAD_FAST 2 ( m )					  
							      28 LOAD_CONST 4 ( 1 )					    28 LOAD_CONST 4 ( 1 )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 1 ( string2 )				    34 LOAD_FAST 1 ( string2 )					  
							      36 LOAD_FAST 3 ( n )					    36 LOAD_FAST 3 ( n )					  
							      38 LOAD_CONST 4 ( 1 )					    38 LOAD_CONST 4 ( 1 )					  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBTRACT						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 COMPARE_OP 2 ( == )					    44 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 70					    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      5 48 LOAD_GLOBAL 0 ( isSubSequence )			    5 48 LOAD_GLOBAL 0 ( isSubSequence )			  
							      50 LOAD_FAST 0 ( string1 )				    50 LOAD_FAST 0 ( string1 )					  
							      52 LOAD_FAST 1 ( string2 )				    52 LOAD_FAST 2 ( m )					  
							      54 LOAD_FAST 2 ( m )					    54 LOAD_CONST 4 ( 1 )					  
							      56 LOAD_CONST 4 ( 1 )					    56 BINARY_SUBTRACT						  
							      58 BINARY_SUBTRACT					    58 LOAD_FAST 3 ( n )					  
							      60 LOAD_FAST 3 ( n )					    60 LOAD_CONST 4 ( 1 )					  
							      62 LOAD_CONST 4 ( 1 )					    62 BINARY_SUBTRACT						  
							      64 BINARY_SUBTRACT					    64 CALL_FUNCTION 4						  
							      66 CALL_FUNCTION 4					    66 RETURN_VALUE						  
							      68 RETURN_VALUE						    								  
							      								    6 >> 68 LOAD_GLOBAL 0 ( isSubSequence )			  
							      6 >> 70 LOAD_GLOBAL 0 ( isSubSequence )			    70 LOAD_FAST 0 ( string1 )					  
							      72 LOAD_FAST 0 ( string1 )				    72 LOAD_FAST 1 ( string2 )					  
							      74 LOAD_FAST 1 ( string2 )				    74 LOAD_FAST 2 ( m )					  
							      76 LOAD_FAST 2 ( m )					    76 LOAD_FAST 3 ( n )					  
							      78 LOAD_FAST 3 ( n )					    78 LOAD_CONST 4 ( 1 )					  
							      80 LOAD_CONST 4 ( 1 )					    80 BINARY_SUBTRACT						  
							      82 BINARY_SUBTRACT					    82 CALL_FUNCTION 4						  
							      84 CALL_FUNCTION 4					    84 RETURN_VALUE NEW_LINE					  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
def countLattice ( r ) :				      Disassembly of <code object countLattice at 0x7f33e2653f60, f Disassembly of <code object countLattice at 0x7f2b0163dc90, f error : /bin/bash: line 1:  4263 Segmentation faul
    if ( r <= 0 ) :					      2 0 LOAD_FAST 0 ( r )					    2 0 LOAD_FAST 0 ( r )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    result = 4						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for x in range ( 1 , r ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/CIRCLE
	ySquare = r * r - x * x				      								    								  _LATTICE_POINTS.dis
	y = int ( math.sqrt ( ySquare ) )		      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	if ( y * y == ySquare ) :			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	    result += 4					      								    								  
    return result					      4 >> 12 LOAD_CONST 2 ( 4 )				    4 >> 12 LOAD_CONST 2 ( 4 )					  
							      14 STORE_FAST 1 ( result )				    14 STORE_FAST 1 ( result )					  
							      								    								  
							      5 16 SETUP_LOOP 68 ( to 86 )				    5 16 SETUP_LOOP 68 ( to 82 )				  
							      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_GLOBAL 0 ( range )					  
							      20 LOAD_CONST 3 ( 1 )					    20 LOAD_CONST 3 ( 1 )					  
							      22 LOAD_FAST 0 ( r )					    22 LOAD_FAST 0 ( r )					  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 54 ( to 84 )				    >> 28 FOR_ITER 56 ( to 80 )					  
							      30 STORE_FAST 2 ( x )					    30 STORE_FAST 2 ( x )					  
							      								    								  
							      6 32 LOAD_FAST 0 ( r )					    6 32 LOAD_FAST 0 ( r )					  
							      34 LOAD_FAST 0 ( r )					    34 LOAD_FAST 0 ( r )					  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 LOAD_FAST 2 ( x )					    38 LOAD_FAST 2 ( x )					  
							      40 LOAD_FAST 2 ( x )					    40 LOAD_FAST 2 ( x )					  
							      42 BINARY_MULTIPLY					    42 BINARY_MULTIPLY						  
							      44 BINARY_SUBTRACT					    44 BINARY_SUBTRACT						  
							      46 STORE_FAST 3 ( ySquare )				    46 STORE_FAST 3 ( ySquare )					  
							      								    								  
							      7 48 LOAD_GLOBAL 1 ( int )				    7 48 LOAD_GLOBAL 1 ( int )					  
							      50 LOAD_GLOBAL 2 ( math )					    50 LOAD_GLOBAL 2 ( math )					  
							      52 LOAD_METHOD 3 ( sqrt )					    52 LOAD_METHOD 3 ( sqrt )					  
							      54 LOAD_FAST 3 ( ySquare )				    54 LOAD_FAST 3 ( ySquare )					  
							      56 CALL_METHOD 1						    56 CALL_METHOD 1						  
							      58 CALL_FUNCTION 1					    58 CALL_FUNCTION 1						  
							      60 STORE_FAST 4 ( y )					    60 STORE_FAST 4 ( y )					  
							      								    								  
							      8 62 LOAD_FAST 4 ( y )					    8 62 LOAD_FAST 4 ( y )					  
							      64 LOAD_FAST 4 ( y )					    64 LOAD_FAST 4 ( y )					  
							      66 BINARY_MULTIPLY					    66 BINARY_MULTIPLY						  
							      68 LOAD_FAST 3 ( ySquare )				    68 LOAD_FAST 3 ( ySquare )					  
							      70 COMPARE_OP 2 ( == )					    70 COMPARE_OP 2 ( == )					  
							      72 POP_JUMP_IF_FALSE 28					    72 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      9 74 LOAD_FAST 1 ( result )				    9 74 LOAD_FAST 1 ( result )					  
							      76 LOAD_CONST 2 ( 4 )					    76 LOAD_CONST 2 ( 4 )					  
							      78 INPLACE_ADD						    78 INPLACE_ADD						  
							      80 STORE_FAST 1 ( result )				    80 STORE_FAST 1 ( result )					  
							      82 JUMP_ABSOLUTE 28					    82 JUMP_ABSOLUTE 28						  
							      >> 84 POP_BLOCK						    >> 84 POP_BLOCK						  
							      								    								  
							      10 >> 86 LOAD_FAST 1 ( result )				    10 >> 86 LOAD_FAST 1 ( result )				  
							      88 RETURN_VALUE NEW_LINE					    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1
--							      --							    --								  --
def getOddOccurrence ( arr , size ) :			      Disassembly of <code object getOddOccurrence at 0x7f33e2644f6 Disassembly of <code object getOddOcCO_MEMORY 0x7f2b0163dc90, success : None
    Hash = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    for i in range ( size ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	Hash [ arr [ i ] ] = Hash.get ( arr [ i ] , 0 ) + 1 ; 4 STORE_FAST 2 ( Hash )					    4 STORE_FAST 2 ( Hash )					  
    for i in Hash :					      								    								  
	if ( Hash [ i ] % 2 != 0 ) :			      3 6 SETUP_LOOP 44 ( to 52 )				    3 6 SETUP_LOOP 44 ( to 52 )					  
	    return i					      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
    return - 1						      10 LOAD_FAST 1 ( size )					    10 LOAD_FAST 1 ( size )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 32 ( to 50 )				    >> 16 FOR_ITER 36 ( to 50 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 2 ( Hash )					    4 20 LOAD_FAST 2 ( Hash )					  
							      22 LOAD_METHOD 2 ( get )					    22 LOAD_METHOD 2 ( get )					  
							      24 LOAD_FAST 0 ( arr )					    24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 1 ( 0 )					  
							      32 CALL_METHOD 2						    32 CALL_METHOD 2						  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 LOAD_FAST 2 ( Hash )					    38 LOAD_FAST 2 ( Hash )					  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 STORE_SUBSCR						    46 STORE_SUBSCR						  
							      48 JUMP_ABSOLUTE 16					    48 JUMP_ABSOLUTE 16						  
							      >> 50 POP_BLOCK						    >> 50 POP_BLOCK						  
							      								    								  
							      5 >> 52 SETUP_LOOP 32 ( to 86 )				    5 >> 52 SETUP_LOOP 38 ( to 94 )				  
							      54 LOAD_FAST 2 ( Hash )					    54 LOAD_FAST 2 ( Hash )					  
							      56 GET_ITER						    56 GET_ITER							  
							      >> 58 FOR_ITER 24 ( to 84 )				    >> 58 FOR_ITER 30 ( to 92 )					  
							      60 STORE_FAST 3 ( i )					    60 STORE_FAST 3 ( i )					  
							      								    								  
							      6 62 LOAD_FAST 2 ( Hash )					    6 62 LOAD_FAST 2 ( Hash )					  
							      64 LOAD_FAST 3 ( i )					    64 LOAD_FAST 3 ( i )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_CONST 3 ( 2 )					    68 LOAD_CONST 3 ( 2 )					  
							      70 BINARY_MODULO						    70 BINARY_MODULO						  
							      72 LOAD_CONST 1 ( 0 )					    72 LOAD_CONST 1 ( 0 )					  
							      74 COMPARE_OP 3 ( != )					    74 COMPARE_OP 3 ( != )					  
							      76 POP_JUMP_IF_FALSE 58					    76 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      7 78 LOAD_FAST 3 ( i )					    7 78 LOAD_FAST 3 ( i )					  
							      80 RETURN_VALUE						    80 RETURN_VALUE						  
							      82 JUMP_ABSOLUTE 58					    82 JUMP_ABSOLUTE 58						  
							      >> 84 POP_BLOCK						    >> 84 POP_BLOCK						  
							      								    								  
							      8 >> 86 LOAD_CONST 4 ( - 1 )				    8 >> 86 LOAD_CONST 4 ( - 1 )				  
							      88 RETURN_VALUE NEW_LINE					    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		      FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		    FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		  FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B
--							      --							    --								  --
def computeLastDigit ( A , B ) :			      Disassembly of <code object computeLastDigit at 0x7f33e26494b Disassembly of <code object computeLastDigit at 0x7f2b0163dc9 success : None
    variable = 1					      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    if ( A == B ) :					      2 STORE_FAST 2 ( variable )				    2 STORE_FAST 2 ( variable )					  
	return 1					      								    								  
    elif ( ( B - A ) >= 5 ) :				      3 4 LOAD_FAST 0 ( A )					    3 4 LOAD_FAST 0 ( A )					  
	return 0					      6 LOAD_FAST 1 ( B )					    6 LOAD_FAST 1 ( B )						  
    else :						      8 COMPARE_OP 2 ( == )					    8 COMPARE_OP 2 ( == )					  
	for i in range ( A + 1 , B + 1 ) :		      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 16					  
	    variable = ( variable * ( i % 10 ) ) % 10	      								    								  
	return variable % 10				      4 12 LOAD_CONST 1 ( 1 )					    4 12 LOAD_CONST 1 ( 1 )					  
							      14 RETURN_VALUE						    14 RETURN_VALUE						  
							      								    								  
							      5 >> 16 LOAD_FAST 1 ( B )					    5 >> 16 LOAD_FAST 1 ( B )					  
							      18 LOAD_FAST 0 ( A )					    18 LOAD_FAST 0 ( A )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 LOAD_CONST 2 ( 5 )					    22 LOAD_CONST 2 ( 5 )					  
							      24 COMPARE_OP 5 ( >= )					    24 COMPARE_OP 5 ( >= )					  
							      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      6 28 LOAD_CONST 3 ( 0 )					    6 28 LOAD_CONST 3 ( 0 )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      8 >> 32 SETUP_LOOP 42 ( to 76 )				    8 >> 32 SETUP_LOOP 48 ( to 80 )				  
							      34 LOAD_GLOBAL 0 ( range )				    34 LOAD_GLOBAL 0 ( range )					  
							      36 LOAD_FAST 0 ( A )					    36 LOAD_FAST 0 ( A )					  
							      38 LOAD_CONST 1 ( 1 )					    38 LOAD_CONST 1 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 LOAD_FAST 1 ( B )					    42 LOAD_FAST 1 ( B )					  
							      44 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 1 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 CALL_FUNCTION 2					    48 CALL_FUNCTION 2						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 20 ( to 74 )				    >> 52 FOR_ITER 28 ( to 78 )					  
							      54 STORE_FAST 3 ( i )					    54 STORE_FAST 3 ( i )					  
							      								    								  
							      9 56 LOAD_FAST 2 ( variable )				    9 56 LOAD_FAST 2 ( variable )				  
							      58 LOAD_FAST 3 ( i )					    58 LOAD_FAST 2 ( variable )					  
							      60 LOAD_CONST 4 ( 10 )					    60 LOAD_FAST 3 ( i )					  
							      62 BINARY_MODULO						    62 LOAD_CONST 4 ( 10 )					  
							      64 BINARY_MULTIPLY					    64 BINARY_MODULO						  
							      66 LOAD_CONST 4 ( 10 )					    66 CALL_FUNCTION 1						  
							      68 BINARY_MODULO						    68 LOAD_CONST 4 ( 10 )					  
							      70 STORE_FAST 2 ( variable )				    70 BINARY_MODULO						  
							      72 JUMP_ABSOLUTE 52					    72 STORE_FAST 2 ( variable )				  
							      >> 74 POP_BLOCK						    74 JUMP_ABSOLUTE 52						  
							      								    >> 76 POP_BLOCK						  
							      10 >> 76 LOAD_FAST 2 ( variable )				    								  
							      78 LOAD_CONST 4 ( 10 )					    10 >> 78 LOAD_FAST 2 ( variable )				  
							      80 BINARY_MODULO						    80 LOAD_CONST 4 ( 10 )					  
							      82 RETURN_VALUE						    82 BINARY_MODULO						  
							      84 LOAD_CONST 0 ( None )					    84 RETURN_VALUE						  
							      86 RETURN_VALUE NEW_LINE					    86 LOAD_CONST 0 ( None )					  
							      								    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
def lexNext ( s , n ) :					      Disassembly of <code object lexNext at 0x7f33e2653f60, file " Disassembly of <code object lexNext at 0x7f2b0163dc90, file " script_not_found : None
    for i in range ( n - 1 , - 1 , - 1 ) :		      2 0 SETUP_LOOP 82 ( to 84 )				    2 0 SETUP_LOOP 78 ( to 80 )					  
	if s [ i ] != 'z' :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    k = ord ( s [ i ] )				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
	    s [ i ] = chr ( k + 1 )			      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    return ''.join ( s )			      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
	s [ i ] = 'a'					      10 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 2 ( - 1 )					  
							      12 LOAD_CONST 2 ( - 1 )					    12 LOAD_CONST 2 ( - 1 )					  
							      14 CALL_FUNCTION 3					    14 CALL_FUNCTION 3						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 62 ( to 82 )				    >> 18 FOR_ITER 62 ( to 78 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      3 22 LOAD_FAST 0 ( s )					    3 22 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 2 ( i )					    24 LOAD_FAST 2 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_CONST 3 ( 'z' )					    28 LOAD_CONST 3 ( 'z' )					  
							      30 COMPARE_OP 3 ( != )					    30 COMPARE_OP 3 ( != )					  
							      32 POP_JUMP_IF_FALSE 72					    32 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      4 34 LOAD_GLOBAL 1 ( ord )				    4 34 LOAD_GLOBAL 1 ( ord )					  
							      36 LOAD_FAST 0 ( s )					    36 LOAD_FAST 0 ( s )					  
							      38 LOAD_FAST 2 ( i )					    38 LOAD_FAST 2 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 CALL_FUNCTION 1					    42 CALL_FUNCTION 1						  
							      44 STORE_FAST 3 ( k )					    44 STORE_FAST 3 ( k )					  
							      								    								  
							      5 46 LOAD_GLOBAL 2 ( chr )				    5 46 LOAD_GLOBAL 2 ( chr )					  
							      48 LOAD_FAST 3 ( k )					    48 LOAD_FAST 3 ( k )					  
							      50 LOAD_CONST 1 ( 1 )					    50 LOAD_CONST 1 ( 1 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 CALL_FUNCTION 1					    54 CALL_FUNCTION 1						  
							      56 LOAD_FAST 0 ( s )					    56 LOAD_FAST 0 ( s )					  
							      58 LOAD_FAST 2 ( i )					    58 LOAD_FAST 2 ( i )					  
							      60 STORE_SUBSCR						    60 STORE_SUBSCR						  
							      								    								  
							      6 62 LOAD_CONST 4 ( '' )					    6 62 LOAD_CONST 4 ( '' )					  
							      64 LOAD_METHOD 3 ( join )					    64 LOAD_METHOD 3 ( join )					  
							      66 LOAD_FAST 0 ( s )					    66 LOAD_FAST 0 ( s )					  
							      68 CALL_METHOD 1						    68 CALL_METHOD 1						  
							      70 RETURN_VALUE						    70 RETURN_VALUE						  
							      								    >> 72 LOAD_CONST 5 ( 'a' )					  
							      7 >> 72 LOAD_CONST 5 ( 'a' )				    74 LOAD_FAST 0 ( s )					  
							      74 LOAD_FAST 0 ( s )					    76 LOAD_FAST 2 ( i )					  
							      76 LOAD_FAST 2 ( i )					    78 STORE_SUBSCR						  
							      78 STORE_SUBSCR						    80 JUMP_ABSOLUTE 18						  
							      80 JUMP_ABSOLUTE 18					    >> 82 POP_BLOCK						  
							      >> 82 POP_BLOCK						    >> 84 LOAD_CONST 0 ( None )					  
							      >> 84 LOAD_CONST 0 ( None )				    86 RETURN_VALUE NEW_LINE					  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
def printPascal ( n ) :					      Disassembly of <code object printPascal at 0x7f33e2653f60, fi Disassembly of <code object printPascal at 0x7f2b01639f60, fi script_not_found : None
    for line in range ( 1 , n + 1 ) :			      2 0 SETUP_LOOP 90 ( to 92 )				    2 0 SETUP_LOOP 74 ( to 76 )					  
	C = 1 ;						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for i in range ( 1 , line + 1 ) :		      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
	    print ( C , end = "" ) ;			      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
	    C = int ( C * ( line - i ) / i ) ;		      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
	print ( "" ) ;					      10 BINARY_ADD						    10 BINARY_ADD						  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 72 ( to 90 )				    >> 16 FOR_ITER 58 ( to 74 )					  
							      18 STORE_FAST 1 ( line )					    18 STORE_FAST 1 ( line )					  
							      								    								  
							      3 20 LOAD_CONST 1 ( 1 )					    3 20 LOAD_CONST 1 ( 1 )					  
							      22 STORE_FAST 2 ( C )					    22 STORE_FAST 2 ( C )					  
							      								    								  
							      4 24 SETUP_LOOP 54 ( to 80 )				    4 24 SETUP_LOOP 46 ( to 72 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_CONST 1 ( 1 )					    28 LOAD_CONST 1 ( 1 )					  
							      30 LOAD_FAST 1 ( line )					    30 LOAD_FAST 1 ( line )					  
							      32 LOAD_CONST 1 ( 1 )					    32 LOAD_CONST 1 ( 1 )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 36 ( to 78 )				    >> 40 FOR_ITER 30 ( to 70 )					  
							      42 STORE_FAST 3 ( i )					    42 STORE_FAST 3 ( i )					  
							      								    								  
							      5 44 LOAD_GLOBAL 1 ( print )				    5 44 LOAD_GLOBAL 1 ( print )				  
							      46 LOAD_FAST 2 ( C )					    46 LOAD_FAST 2 ( C )					  
							      48 LOAD_CONST 2 ( '' )					    48 LOAD_CONST 2 ( ' ' )					  
							      50 LOAD_CONST 3 ( ( 'end' , ) )				    50 LOAD_CONST 3 ( ( 'end' , ) )				  
							      52 CALL_FUNCTION_KW 2					    52 CALL_FUNCTION_KW 2					  
							      54 POP_TOP						    54 POP_TOP							  
							      								    								  
							      6 56 LOAD_GLOBAL 2 ( int )				    6 56 LOAD_GLOBAL 2 ( int )					  
							      58 LOAD_FAST 2 ( C )					    58 LOAD_FAST 2 ( C )					  
							      60 LOAD_FAST 1 ( line )					    60 LOAD_FAST 1 ( line )					  
							      62 LOAD_FAST 3 ( i )					    62 LOAD_FAST 3 ( i )					  
							      64 BINARY_SUBTRACT					    64 BINARY_SUBTRACT						  
							      66 BINARY_MULTIPLY					    66 BINARY_MULTIPLY						  
							      68 LOAD_FAST 3 ( i )					    68 LOAD_FAST 3 ( i )					  
							      70 BINARY_TRUE_DIVIDE					    70 BINARY_TRUE_DIVIDE					  
							      72 CALL_FUNCTION 1					    72 CALL_FUNCTION 1						  
							      74 STORE_FAST 2 ( C )					    74 STORE_FAST 2 ( C )					  
							      76 JUMP_ABSOLUTE 40					    68 JUMP_ABSOLUTE 40						  
							      >> 78 POP_BLOCK						    >> 70 POP_BLOCK						  
							      								    								  
							      7 >> 80 LOAD_GLOBAL 1 ( print )				    7 >> 72 LOAD_GLOBAL 1 ( print )				  
							      82 LOAD_CONST 2 ( '' )					    74 LOAD_CONST 2 ( '' )					  
							      84 CALL_FUNCTION 1					    76 CALL_FUNCTION 1						  
							      86 POP_TOP						    78 POP_TOP							  
							      88 JUMP_ABSOLUTE 16					    80 JUMP_ABSOLUTE 16						  
							      >> 90 POP_BLOCK						    >> 82 POP_BLOCK						  
							      >> 92 LOAD_CONST 0 ( None )				    >> 84 LOAD_CONST 0 ( None )					  
							      94 RETURN_VALUE NEW_LINE					    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	      WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	    WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	  WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS
--							      --							    --								  --
def CountWays ( n ) :					      Disassembly of <code object CountWays at 0x7f33e2644930, file Disassembly of <code object CountWays at 0x7f2b0163dc90, file script_not_found : None
    table = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    table [ 0 ] = 1					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    for i in range ( 1 , n ) :				      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
	for j in range ( i , n + 1 ) :			      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
	    table [ j ] += table [ j - i ]		      8 BINARY_ADD						    8 BINARY_ADD						  
    return table [ n ]					      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 STORE_FAST 1 ( table )					    12 STORE_FAST 1 ( table )					  
							      								    								  
							      3 14 LOAD_CONST 2 ( 1 )					    3 14 LOAD_CONST 2 ( 1 )					  
							      16 LOAD_FAST 1 ( table )					    16 LOAD_FAST 1 ( table )					  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  
							      20 STORE_SUBSCR						    20 STORE_SUBSCR						  
							      								    								  
							      4 22 SETUP_LOOP 66 ( to 90 )				    4 22 SETUP_LOOP 72 ( to 92 )				  
							      24 LOAD_GLOBAL 0 ( range )				    24 LOAD_GLOBAL 0 ( range )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_FAST 0 ( n )					  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 52 ( to 88 )				    >> 34 FOR_ITER 56 ( to 90 )					  
							      36 STORE_FAST 2 ( i )					    36 STORE_FAST 2 ( i )					  
							      								    								  
							      5 38 SETUP_LOOP 46 ( to 86 )				    5 38 SETUP_LOOP 48 ( to 88 )				  
							      40 LOAD_GLOBAL 0 ( range )				    40 LOAD_GLOBAL 0 ( range )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 LOAD_FAST 0 ( n )					    44 LOAD_FAST 0 ( n )					  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 2 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 CALL_FUNCTION 2					    50 CALL_FUNCTION 2						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 28 ( to 84 )				    >> 54 FOR_ITER 28 ( to 86 )					  
							      56 STORE_FAST 3 ( j )					    56 STORE_FAST 3 ( j )					  
							      								    								  
							      6 58 LOAD_FAST 1 ( table )				    6 58 LOAD_FAST 1 ( table )					  
							      60 LOAD_FAST 3 ( j )					    60 LOAD_FAST 3 ( j )					  
							      62 DUP_TOP_TWO						    62 DUP_TOP_TWO						  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 1 ( table )					    66 LOAD_FAST 1 ( table )					  
							      68 LOAD_FAST 3 ( j )					    68 LOAD_FAST 3 ( j )					  
							      70 LOAD_FAST 2 ( i )					    70 LOAD_FAST 2 ( i )					  
							      72 BINARY_SUBTRACT					    72 BINARY_SUBTRACT						  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 INPLACE_ADD						    76 INPLACE_ADD						  
							      78 ROT_THREE						    78 ROT_THREE						  
							      80 STORE_SUBSCR						    80 STORE_SUBSCR						  
							      82 JUMP_ABSOLUTE 54					    >> 82 JUMP_ABSOLUTE 34					  
							      >> 84 POP_BLOCK						    >> 84 POP_BLOCK						  
							      >> 86 JUMP_ABSOLUTE 34					    >> 86 JUMP_ABSOLUTE 34					  
							      >> 88 POP_BLOCK						    >> 88 POP_BLOCK						  
							      								    								  
							      7 >> 90 LOAD_FAST 1 ( table )				    7 90 LOAD_FAST 1 ( table )					  
							      92 LOAD_FAST 0 ( n )					    92 LOAD_FAST 0 ( n )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 RETURN_VALUE NEW_LINE					    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N
--							      --							    --								  --
def getMinSquares ( n ) :				      Disassembly of <code object getMinSquares at 0x7f33e2653f60,  Disassembly of <code object getMinSquares at 0x7f2b01639660,  script_not_found : None
    if n <= 3 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return n ;					      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  
    res = n						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    for x in range ( 1 , n + 1 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	temp = x * x ;					      								    								  
	if temp > n :					      3 8 LOAD_FAST 0 ( n )					    3 8 LOAD_FAST 0 ( n )					  
	    break					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	else :						      								    								  
	    res = min ( res , 1 + getMinSquares ( n - temp )  4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
    return res ;					      14 STORE_FAST 1 ( res )					    14 STORE_FAST 1 ( res )					  
							      								    								  
							      5 16 SETUP_LOOP 64 ( to 82 )				    5 16 SETUP_LOOP 70 ( to 90 )				  
							      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_GLOBAL 0 ( range )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 46 ( to 80 )				    >> 32 FOR_ITER 48 ( to 88 )					  
							      34 STORE_FAST 2 ( x )					    34 STORE_FAST 2 ( x )					  
							      								    								  
							      6 36 LOAD_FAST 2 ( x )					    6 36 LOAD_FAST 2 ( x )					  
							      38 LOAD_FAST 2 ( x )					    38 LOAD_FAST 2 ( x )					  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 STORE_FAST 3 ( temp )					    42 STORE_FAST 3 ( temp )					  
							      								    								  
							      7 44 LOAD_FAST 3 ( temp )					    7 44 LOAD_FAST 3 ( temp )					  
							      46 LOAD_FAST 0 ( n )					    46 LOAD_FAST 0 ( n )					  
							      48 COMPARE_OP 4 ( > )					    48 COMPARE_OP 4 ( > )					  
							      50 POP_JUMP_IF_FALSE 56					    50 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      8 52 BREAK_LOOP						    8 52 BREAK_LOOP						  
							      54 JUMP_ABSOLUTE 32					    54 JUMP_ABSOLUTE 32						  
							      								    								  
							      10 >> 56 LOAD_GLOBAL 1 ( min )				    10 >> 56 LOAD_GLOBAL 1 ( min )				  
							      58 LOAD_FAST 1 ( res )					    58 LOAD_FAST 1 ( res )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 LOAD_GLOBAL 2 ( getMinSquares )			    62 LOAD_GLOBAL 2 ( getMin)					  
							      64 LOAD_FAST 0 ( n )					    64 LOAD_FAST 0 ( n )					  
							      66 LOAD_FAST 3 ( temp )					    66 LOAD_FAST 3 ( temp )					  
							      68 BINARY_SUBTRACT					    68 BINARY_SUBTRACT						  
							      70 CALL_FUNCTION 1					    70 CALL_FUNCTION 2						  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 CALL_FUNCTION 2					    74 STORE_FAST 1 ( res )					  
							      76 STORE_FAST 1 ( res )					    76 JUMP_ABSOLUTE 32						  
							      78 JUMP_ABSOLUTE 32					    >> 78 POP_BLOCK						  
							      >> 80 POP_BLOCK						    								  
							      								    11 >> 80 LOAD_FAST 1 ( res )				  
							      11 >> 82 LOAD_FAST 1 ( res )				    82 RETURN_VALUE NEW_LINE					  
							      84 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_EXTRA_CHARACTER_STRING_1			      FIND_ONE_EXTRA_CHARACTER_STRING_1				    FIND_ONE_EXTRA_CHARACTER_STRING_1				  FIND_ONE_EXTRA_CHARACTER_STRING_1
--							      --							    --								  --
def findExtraCharcter ( strA , strB ) :			      Disassembly of <code object findExtraCharcter at 0x7f33e2649a Disassembly of <code object findExtraCharcter at 0x7f2b0163dc error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , len ( strA ) ) :		      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  (item)   File "main.py", line 33, in <module>	  Fi
	res = res ^ ( ord ) ( strA [ i ] )		      								    								  le "<dis>", line 2, in findExtraCharcter TypeError
    for i in range ( 0 , len ( strB ) ) :		      3 4 SETUP_LOOP 38 ( to 44 )				    3 4 SETUP_LOOP 46 ( to 52 )					  : 'int' object is not callable
	res = res ^ ( ord ) ( strB [ i ] )		      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return ( ( chr ) ( res ) ) ;			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_GLOBAL 1 ( len )					    10 LOAD_GLOBAL 1 ( len )					  
							      12 LOAD_FAST 0 ( strA )					    12 LOAD_FAST 1 ( strA )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 20 ( to 42 )				    >> 20 FOR_ITER 30 ( to 50 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( res )					    4 24 LOAD_FAST 2 ( res )					  
							      26 LOAD_GLOBAL 2 ( ord )					    26 LOAD_GLOBAL 2 ( ord )					  
							      28 LOAD_FAST 0 ( strA )					    28 CALL_FUNCTION 1						  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 1 ( strA )					  
							      32 BINARY_SUBSCR						    32 LOAD_FAST 3 ( i )					  
							      34 CALL_FUNCTION 1					    34 BINARY_SUBSCR						  
							      36 BINARY_XOR						    36 CALL_FUNCTION 1						  
							      38 STORE_FAST 2 ( res )					    38 BINARY_XOR						  
							      40 JUMP_ABSOLUTE 20					    40 STORE_FAST 2 ( res )					  
							      >> 42 POP_BLOCK						    42 JUMP_ABSOLUTE 20						  
							      								    >> 44 POP_BLOCK						  
							      5 >> 44 SETUP_LOOP 38 ( to 84 )				    								  
							      46 LOAD_GLOBAL 0 ( range )				    5 >> 46 SETUP_LOOP 40 ( to 92 )				  
							      48 LOAD_CONST 1 ( 0 )					    48 LOAD_GLOBAL 0 ( range )					  
							      50 LOAD_GLOBAL 1 ( len )					    50 LOAD_CONST 1 ( 0 )					  
							      52 LOAD_FAST 1 ( strB )					    52 LOAD_GLOBAL 1 ( len )					  
							      54 CALL_FUNCTION 1					    54 LOAD_FAST 1 ( strB )					  
							      56 CALL_FUNCTION 2					    56 CALL_FUNCTION 1						  
							      58 GET_ITER						    58 CALL_FUNCTION 2						  
							      >> 60 FOR_ITER 20 ( to 82 )				    60 GET_ITER							  
							      62 STORE_FAST 3 ( i )					    >> 62 FOR_ITER 28 ( to 90 )					  
							      								    64 STORE_FAST 3 ( i )					  
							      6 64 LOAD_FAST 2 ( res )					    								  
							      66 LOAD_GLOBAL 2 ( ord )					    6 66 LOAD_FAST 2 ( res )					  
							      68 LOAD_FAST 1 ( strB )					    68 LOAD_FAST 0 ( strB )					  
							      70 LOAD_FAST 3 ( i )					    70 LOAD_FAST 3 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 CALL_FUNCTION 1					    74 BINARY_XOR						  
							      76 BINARY_XOR						    76 STORE_FAST 2 ( res )					  
							      78 STORE_FAST 2 ( res )					    78 JUMP_ABSOLUTE 62						  
							      80 JUMP_ABSOLUTE 60					    >> 80 POP_BLOCK						  
							      >> 82 POP_BLOCK						    								  
							      								    7 >> 82 LOAD_GLOBAL 3 ( chr )				  
							      7 >> 84 LOAD_GLOBAL 3 ( chr )				    84 LOAD_GLOBAL 3 ( chr )					  
							      86 LOAD_FAST 2 ( res )					    86 CALL_FUNCTION 1						  
							      88 CALL_FUNCTION 1					    88 LOAD_FAST 2 ( res )					  
							      90 RETURN_VALUE NEW_LINE					    90 CALL_FUNCTION 1						  
							      								    92 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUM_CONTIGUOUS_SUBARRAY			      SMALLEST_SUM_CONTIGUOUS_SUBARRAY				    SMALLEST_SUM_CONTIGUOUS_SUBARRAY				  SMALLEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
def <<unk>> stSumSubarr ( arr , n ) :			      Disassembly of <code object <<unk>> stSumSubarr at 0x7f33e264 Disassembly of <code object _0xBstSumSubarr at 0x7f2b0163dc90 error : Traceback (most recent call last):   File
    min_ending_here = sys.maxsize			      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_GLOBAL 0 ( sys )					  "XLM/dis_script.py", line 60, in <module>	exec
    min_so_far = sys.maxsize				      2 LOAD_ATTR 1 ( maxsize )					    2 LOAD_ATTR 1 ( maxsize )					  (item)   File "main.py", line 38, in <module>	  Fi
    for i in range ( n ) :				      4 STORE_FAST 2 ( min_ending_here )			    4 STORE_FAST 2 ( min_ending_here )				  le "<dis>", line 2, in smallestSumSubarr TypeError
	if ( min_ending_here > 0 ) :			      								    								  : '<' not supported between instances of 'range_it
	    min_ending_here = arr [ i ]			      3 6 LOAD_GLOBAL 0 ( sys )					    3 6 LOAD_GLOBAL 0 ( sys )					  erator' and 'int'
	else :						      8 LOAD_ATTR 1 ( maxsize )					    8 LOAD_ATTR 1 ( maxsize )					  
	    min_ending_here += arr [ i ]		      10 STORE_FAST 3 ( min_so_far )				    10 STORE_FAST 3 ( min_so_far )				  
	min_so_far = min ( min_so_far , min_ending_here )     								    								  
    return min_so_far					      4 12 SETUP_LOOP 56 ( to 70 )				    4 12 SETUP_LOOP 62 ( to 78 )				  
							      14 LOAD_GLOBAL 2 ( range )				    14 LOAD_GLOBAL 2 ( range )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 44 ( to 68 )				    >> 22 FOR_ITER 50 ( to 76 )					  
							      24 STORE_FAST 4 ( i )					    24 STORE_FAST 4 ( i )					  
							      								    								  
							      5 26 LOAD_FAST 2 ( min_ending_here )			    5 26 LOAD_FAST 3 ( min_ending_here )			  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 1 ( 0 )					  
							      30 COMPARE_OP 4 ( > )					    30 COMPARE_OP 4 ( > )					  
							      32 POP_JUMP_IF_FALSE 44					    32 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      6 34 LOAD_FAST 0 ( arr )					    6 34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 4 ( i )					    36 LOAD_FAST 4 ( i )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 STORE_FAST 2 ( min_ending_here )			    40 STORE_FAST 3 ( min_ending_here )				  
							      42 JUMP_FORWARD 12 ( to 56 )				    42 JUMP_FORWARD 8 ( to 54 )					  
							      								    								  
							      8 >> 44 LOAD_FAST 2 ( min_ending_here )			    8 >> 44 LOAD_FAST 2 ( min_ending_here )			  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 4 ( i )					    48 LOAD_FAST 4 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 INPLACE_ADD						    52 INPLACE_ADD						  
							      54 STORE_FAST 2 ( min_ending_here )			    >> 54 STORE_FAST 2 ( min_ending_here )			  
							      								    								  
							      9 >> 56 LOAD_GLOBAL 3 ( min )				    9 56 LOAD_GLOBAL 3 ( min )					  
							      58 LOAD_FAST 3 ( min_so_far )				    58 LOAD_FAST 3 ( min_so_far )				  
							      60 LOAD_FAST 2 ( min_ending_here )			    60 LOAD_FAST 2 ( min_ending_here )				  
							      62 CALL_FUNCTION 2					    62 CALL_FUNCTION 2						  
							      64 STORE_FAST 3 ( min_so_far )				    64 STORE_FAST 3 ( min_so_far )				  
							      66 JUMP_ABSOLUTE 22					    66 JUMP_ABSOLUTE 22						  
							      >> 68 POP_BLOCK						    >> 68 POP_BLOCK						  
							      								    								  
							      10 >> 70 LOAD_FAST 3 ( min_so_far )			    10 >> 70 LOAD_FAST 3 ( min_so_far )				  
							      72 RETURN_VALUE NEW_LINE					    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
def ceilSearch ( arr , low , high , x ) :		      Disassembly of <code object ceilSearch at 0x7f33e2644f60, fil Disassembly of <code object ceilSearch at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    if x <= arr [ low ] :				      2 0 LOAD_FAST 3 ( x )					    2 0 LOAD_FAST 2 ( x )					  "XLM/dis_script.py", line 60, in <module>	exec
	return low					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  (item)   File "main.py", line 36, in <module>	  Fi
    i = low						      4 LOAD_FAST 1 ( low )					    4 LOAD_FAST 1 ( low )					  le "<dis>", line 2, in ceilSearch TypeError: 'int'
    for i in range ( high ) :				      6 BINARY_SUBSCR						    6 BINARY_SUBSCR						   object is not subscriptable
	if arr [ i ] == x :				      8 COMPARE_OP 1 ( <= )					    8 COMPARE_OP 1 ( <= )					  
	    return i					      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 16					  
	if arr [ i ] < x and arr [ i + 1 ] >= x :	      								    								  
	    return i + 1				      3 12 LOAD_FAST 1 ( low )					    3 12 LOAD_FAST 1 ( low )					  
    return - 1						      14 RETURN_VALUE						    14 RETURN_VALUE						  
							      								    								  
							      4 >> 16 LOAD_FAST 1 ( low )				    4 >> 16 LOAD_FAST 1 ( low )					  
							      18 STORE_FAST 4 ( i )					    18 STORE_FAST 4 ( i )					  
							      								    								  
							      5 20 SETUP_LOOP 68 ( to 90 )				    5 20 SETUP_LOOP 44 ( to 66 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 2 ( high )					    24 LOAD_FAST 3 ( high )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 56 ( to 88 )				    >> 30 FOR_ITER 32 ( to 64 )					  
							      32 STORE_FAST 4 ( i )					    32 STORE_FAST 5 ( i )					  
							      								    								  
							      6 34 LOAD_FAST 0 ( arr )					    6 34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 4 ( i )					    36 LOAD_FAST 4 ( i )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 3 ( x )					    40 LOAD_FAST 2 ( x )					  
							      42 COMPARE_OP 2 ( == )					    42 COMPARE_OP 2 ( == )					  
							      44 POP_JUMP_IF_FALSE 50					    44 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      7 46 LOAD_FAST 4 ( i )					    7 46 LOAD_FAST 4 ( i )					  
							      48 RETURN_VALUE						    48 RETURN_VALUE						  
							      								    								  
							      8 >> 50 LOAD_FAST 0 ( arr )				    8 >> 50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 4 ( i )					    52 LOAD_FAST 4 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 3 ( x )					    56 LOAD_FAST 2 ( x )					  
							      58 COMPARE_OP 0 ( < )					    58 COMPARE_OP 0 ( < )					  
							      60 POP_JUMP_IF_FALSE 30					    60 POP_JUMP_IF_FALSE 30					  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 0 ( arr )					  
							      64 LOAD_FAST 4 ( i )					    64 LOAD_FAST 4 ( i )					  
							      66 LOAD_CONST 1 ( 1 )					    66 LOAD_CONST 1 ( 1 )					  
							      68 BINARY_ADD						    68 BINARY_ADD						  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_FAST 3 ( x )					    72 LOAD_FAST 2 ( x )					  
							      74 COMPARE_OP 5 ( >= )					    74 COMPARE_OP 5 ( >= )					  
							      76 POP_JUMP_IF_FALSE 30					    76 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      9 78 LOAD_FAST 4 ( i )					    9 78 LOAD_FAST 4 ( i )					  
							      80 LOAD_CONST 1 ( 1 )					    80 LOAD_CONST 1 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 RETURN_VALUE						    84 RETURN_VALUE						  
							      86 JUMP_ABSOLUTE 30					    86 JUMP_ABSOLUTE 30						  
							      >> 88 POP_BLOCK						    >> 88 POP_BLOCK						  
							      								    								  
							      10 >> 90 LOAD_CONST 2 ( - 1 )				    10 >> 90 LOAD_CONST 2 ( - 1 )				  
							      92 RETURN_VALUE NEW_LINE					    92 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	      CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	    CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER		  CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER
--							      --							    --								  --
def areAnagram ( str1 , str2 ) :			      Disassembly of <code object areAnagram at 0x7f33e2653f60, fil Disassembly of <code object areAnagram at 0x7f2b0163dc90, fil success : None
    n1 = len ( str1 )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    n2 = len ( str2 )					      2 LOAD_FAST 0 ( str1 )					    2 LOAD_FAST 0 ( str1 )					  
    if n1 != n2 :					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	return 0					      6 STORE_FAST 2 ( n1 )					    6 STORE_FAST 2 ( n1 )					  
    str1 = sorted ( str1 )				      								    								  
    str2 = sorted ( str2 )				      3 8 LOAD_GLOBAL 0 ( len )					    3 8 LOAD_GLOBAL 0 ( len )					  
    for i in range ( 0 , n1 ) :				      10 LOAD_FAST 1 ( str2 )					    10 LOAD_FAST 1 ( str2 )					  
	if str1 [ i ] != str2 [ i ] :			      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	    return 0					      14 STORE_FAST 3 ( n2 )					    14 STORE_FAST 3 ( n2 )					  
    return 1						      								    								  
							      4 16 LOAD_FAST 2 ( n1 )					    4 16 LOAD_FAST 2 ( n1 )					  
							      18 LOAD_FAST 3 ( n2 )					    18 LOAD_FAST 3 ( n2 )					  
							      20 COMPARE_OP 3 ( != )					    20 COMPARE_OP 3 ( != )					  
							      22 POP_JUMP_IF_FALSE 28					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 LOAD_CONST 1 ( 0 )					    5 24 LOAD_CONST 1 ( 0 )					  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      6 >> 28 LOAD_GLOBAL 1 ( sorted )				    6 >> 28 LOAD_GLOBAL 1 ( sorted )				  
							      30 LOAD_FAST 0 ( str1 )					    30 LOAD_FAST 0 ( str1 )					  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 STORE_FAST 0 ( str1 )					    34 STORE_FAST 0 ( str1 )					  
							      								    								  
							      7 36 LOAD_GLOBAL 1 ( sorted )				    7 36 LOAD_GLOBAL 1 ( sorted )				  
							      38 LOAD_FAST 1 ( str2 )					    38 LOAD_FAST 1 ( str2 )					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 STORE_FAST 1 ( str2 )					    42 STORE_FAST 1 ( str2 )					  
							      								    								  
							      8 44 SETUP_LOOP 38 ( to 84 )				    8 44 SETUP_LOOP 36 ( to 92 )				  
							      46 LOAD_GLOBAL 2 ( range )				    46 LOAD_GLOBAL 2 ( range )					  
							      48 LOAD_CONST 1 ( 0 )					    48 LOAD_CONST 1 ( 0 )					  
							      50 LOAD_FAST 2 ( n1 )					    50 LOAD_FAST 2 ( n1 )					  
							      52 CALL_FUNCTION 2					    52 CALL_FUNCTION 2						  
							      54 GET_ITER						    54 GET_ITER							  
							      >> 56 FOR_ITER 24 ( to 82 )				    >> 56 FOR_ITER 24 ( to 90 )					  
							      58 STORE_FAST 4 ( i )					    58 STORE_FAST 4 ( i )					  
							      								    								  
							      9 60 LOAD_FAST 0 ( str1 )					    9 60 LOAD_FAST 0 ( str1 )					  
							      62 LOAD_FAST 4 ( i )					    62 LOAD_FAST 4 ( i )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 1 ( str2 )					    66 LOAD_FAST 1 ( str2 )					  
							      68 LOAD_FAST 4 ( i )					    68 LOAD_FAST 4 ( i )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 COMPARE_OP 3 ( != )					    72 COMPARE_OP 3 ( != )					  
							      74 POP_JUMP_IF_FALSE 56					    74 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      10 76 LOAD_CONST 1 ( 0 )					    10 76 LOAD_CONST 1 ( 0 )					  
							      78 RETURN_VALUE						    78 RETURN_VALUE						  
							      80 JUMP_ABSOLUTE 56					    80 JUMP_ABSOLUTE 56						  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      11 >> 84 LOAD_CONST 2 ( 1 )				    11 >> 84 LOAD_CONST 2 ( 1 )					  
							      86 RETURN_VALUE NEW_LINE					    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
--							      --							    --								  --
def getOddOccurrence ( arr , arr_size ) :		      Disassembly of <code object getOddOccurrence at 0x7f33e26494b Disassembly of <code object getOddOcCO_MEMORY 0x7f2b01639660, success : None
    for i in range ( 0 , arr_size ) :			      2 0 SETUP_LOOP 86 ( to 88 )				    2 0 SETUP_LOOP 70 ( to 72 )					  
	count = 0					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for j in range ( 0 , arr_size ) :		      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
	    if arr [ i ] == arr [ j ] :			      6 LOAD_FAST 1 ( arr_size )				    6 LOAD_FAST 1 ( arr_size )					  
		count += 1				      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
	if ( count % 2 != 0 ) :				      10 GET_ITER						    10 GET_ITER							  
	    return arr [ i ]				      >> 12 FOR_ITER 72 ( to 86 )				    >> 12 FOR_ITER 54 ( to 70 )					  
    return - 1						      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
							      								    								  
							      3 16 LOAD_CONST 1 ( 0 )					    3 16 LOAD_CONST 1 ( 0 )					  
							      18 STORE_FAST 3 ( count )					    18 STORE_FAST 3 ( count )					  
							      								    								  
							      4 20 SETUP_LOOP 42 ( to 64 )				    4 20 SETUP_LOOP 44 ( to 68 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 1 ( 0 )					  
							      26 LOAD_FAST 1 ( arr_size )				    26 LOAD_FAST 1 ( arr_size )					  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 28 ( to 62 )				    >> 32 FOR_ITER 28 ( to 66 )					  
							      34 STORE_FAST 4 ( j )					    34 STORE_FAST 4 ( j )					  
							      								    								  
							      5 36 LOAD_FAST 0 ( arr )					    5 36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_FAST 2 ( i )					    38 LOAD_FAST 2 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 4 ( j )					    44 LOAD_FAST 4 ( j )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 COMPARE_OP 2 ( == )					    48 COMPARE_OP 2 ( == )					  
							      50 POP_JUMP_IF_FALSE 32					    50 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      6 52 LOAD_FAST 3 ( count )				    6 52 LOAD_FAST 3 ( count )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 INPLACE_ADD						    56 INPLACE_ADD						  
							      58 STORE_FAST 3 ( count )					    58 STORE_FAST 3 ( count )					  
							      60 JUMP_ABSOLUTE 32					    60 JUMP_ABSOLUTE 32						  
							      >> 62 POP_BLOCK						    >> 62 POP_BLOCK						  
							      								    >> 64 JUMP_ABSOLUTE 12					  
							      7 >> 64 LOAD_FAST 3 ( count )				    >> 66 POP_BLOCK						  
							      66 LOAD_CONST 3 ( 2 )					    								  
							      68 BINARY_MODULO						    7 >> 68 LOAD_FAST 3 ( count )				  
							      70 LOAD_CONST 1 ( 0 )					    70 LOAD_CONST 3 ( 2 )					  
							      72 COMPARE_OP 3 ( != )					    72 BINARY_MODULO						  
							      74 POP_JUMP_IF_FALSE 12					    74 LOAD_CONST 1 ( 0 )					  
							      								    76 COMPARE_OP 3 ( != )					  
							      8 76 LOAD_FAST 0 ( arr )					    78 POP_JUMP_IF_FALSE 96					  
							      78 LOAD_FAST 2 ( i )					    								  
							      80 BINARY_SUBSCR						    8 80 LOAD_FAST 0 ( arr )					  
							      82 RETURN_VALUE						    82 LOAD_FAST 2 ( i )					  
							      84 JUMP_ABSOLUTE 12					    84 BINARY_SUBSCR						  
							      >> 86 POP_BLOCK						    86 RETURN_VALUE						  
							      								    88 JUMP_ABSOLUTE 12						  
							      9 >> 88 LOAD_CONST 4 ( - 1 )				    >> 90 POP_BLOCK						  
							      90 RETURN_VALUE NEW_LINE					    								  
							      								    9 >> 92 LOAD_CONST 4 ( - 1 )				  
							      								    94 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_<unk> CATION			      CHECK_INTEGER_OVERFLOW_<unk> CATION			    CHECK_INTEGER_OVERFLOW_<unk> CATION				  CHECK_INTEGER_OVERFLOW_<unk> CATION
--							      --							    --								  --
def isOverflow ( a , b ) :				      Disassembly of <code object isOverflow at 0x7f33e26494b0, fil Disassembly of <code object isOverflow at 0x7f2b0163dc90, fil script_not_found : None
    if ( a == 0 or b == 0 ) :				      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    result = a * b					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    if ( result >= 9223372036854775807 or result <= - 9223372 6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
	result = 0					      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 1 ( b )						  
    if ( a == ( result // b ) ) :			      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
	print ( result // b )				      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	return False					      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
    else :						      								    								  
	return True					      3 >> 16 LOAD_CONST 2 ( False )				    3 >> 16 LOAD_CONST 2 ( False )				  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_FAST 0 ( a )					    4 >> 20 LOAD_FAST 0 ( a )					  
							      22 LOAD_FAST 1 ( b )					    22 LOAD_FAST 1 ( b )					  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 STORE_FAST 2 ( result )				    26 STORE_FAST 2 ( result )					  
							      								    								  
							      5 28 LOAD_FAST 2 ( result )				    5 28 LOAD_FAST 2 ( result )					  
							      30 LOAD_CONST 3 ( 9223372036854775807 )			    30 LOAD_CONST 3 ( 92233720368575807 )			  
							      32 COMPARE_OP 5 ( >= )					    32 COMPARE_OP 5 ( >= )					  
							      34 POP_JUMP_IF_TRUE 44					    34 POP_JUMP_IF_TRUE 48					  
							      36 LOAD_FAST 2 ( result )					    36 LOAD_FAST 2 ( result )					  
							      38 LOAD_CONST 4 ( - 9223372036854775808 )			    38 LOAD_CONST 4 ( - 9223372036854775808 )			  
							      40 COMPARE_OP 1 ( <= )					    40 COMPARE_OP 1 ( <= )					  
							      42 POP_JUMP_IF_FALSE 48					    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      6 >> 44 LOAD_CONST 1 ( 0 )				    6 44 LOAD_CONST 1 ( 0 )					  
							      46 STORE_FAST 2 ( result )				    46 STORE_FAST 2 ( result )					  
							      								    								  
							      7 >> 48 LOAD_FAST 0 ( a )					    7 >> 48 LOAD_FAST 0 ( a )					  
							      50 LOAD_FAST 2 ( result )					    50 LOAD_FAST 2 ( result )					  
							      52 LOAD_FAST 1 ( b )					    52 LOAD_FAST 1 ( b )					  
							      54 BINARY_FLOOR_DIVIDE					    54 BINARY_FLOOR_DIVIDE					  
							      56 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_FALSE 76					    58 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      8 60 LOAD_GLOBAL 0 ( print )				    8 60 LOAD_GLOBAL 0 ( print )				  
							      62 LOAD_FAST 2 ( result )					    62 LOAD_FAST 2 ( result )					  
							      64 LOAD_FAST 1 ( b )					    64 LOAD_FAST 1 ( b )					  
							      66 BINARY_FLOOR_DIVIDE					    66 BINARY_FLOOR_DIVIDE					  
							      68 CALL_FUNCTION 1					    68 CALL_FUNCTION 1						  
							      70 POP_TOP						    70 POP_TOP							  
							      								    								  
							      9 72 LOAD_CONST 2 ( False )				    9 72 LOAD_CONST 2 ( False )					  
							      74 RETURN_VALUE						    74 RETURN_VALUE						  
							      								    								  
							      11 >> 76 LOAD_CONST 5 ( True )				    11 >> 76 LOAD_CONST 5 ( True )				  
							      78 RETURN_VALUE						    78 RETURN_VALUE						  
							      80 LOAD_CONST 0 ( None )					    80 LOAD_CONST 0 ( None )					  
							      82 RETURN_VALUE NEW_LINE					    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
def findElements ( arr , n ) :				      Disassembly of <code object findElements at 0x7f33e26494b0, f Disassembly of <code object findElements at 0x7f2b0163dc90, f script_not_found : None
    for i in range ( n ) :				      2 0 SETUP_LOOP 88 ( to 90 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	count = 0					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for j in range ( 0 , n ) :			      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
	    if arr [ j ] > arr [ i ] :			      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
		count = count + 1			      8 GET_ITER						    8 GET_ITER							  
	if count >= 2 :					      >> 10 FOR_ITER 76 ( to 88 )				    >> 10 FOR_ITER 52 ( to 64 )					  
	    print ( arr [ i ] , end = " " )		      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 LOAD_CONST 1 ( 0 )					    3 14 LOAD_CONST 1 ( 0 )					  
							      16 STORE_FAST 3 ( count )					    16 STORE_FAST 3 ( count )					  
							      								    								  
							      4 18 SETUP_LOOP 42 ( to 62 )				    4 18 SETUP_LOOP 40 ( to 62 )				  
							      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_GLOBAL 0 ( range )					  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 28 ( to 60 )				    >> 30 FOR_ITER 28 ( to 60 )					  
							      32 STORE_FAST 4 ( j )					    32 STORE_FAST 4 ( j )					  
							      								    								  
							      5 34 LOAD_FAST 0 ( arr )					    5 34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 4 ( j )					    36 LOAD_FAST 4 ( j )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 COMPARE_OP 4 ( > )					    46 COMPARE_OP 4 ( > )					  
							      48 POP_JUMP_IF_FALSE 30					    48 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      6 50 LOAD_FAST 3 ( count )				    6 50 LOAD_FAST 3 ( count )					  
							      52 LOAD_CONST 2 ( 1 )					    52 LOAD_CONST 2 ( 1 )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 STORE_FAST 3 ( count )					    56 STORE_FAST 3 ( count )					  
							      58 JUMP_ABSOLUTE 30					    58 JUMP_ABSOLUTE 30						  
							      >> 60 POP_BLOCK						    >> 60 POP_BLOCK						  
							      								    >> 62 JUMP_ABSOLUTE 10					  
							      7 >> 62 LOAD_FAST 3 ( count )				    >> 64 POP_BLOCK						  
							      64 LOAD_CONST 3 ( 2 )					    								  
							      66 COMPARE_OP 5 ( >= )					    7 >> 66 LOAD_FAST 3 ( count )				  
							      68 POP_JUMP_IF_FALSE 10					    68 LOAD_CONST 3 ( 2 )					  
							      								    70 COMPARE_OP 5 ( >= )					  
							      8 70 LOAD_GLOBAL 1 ( print )				    72 POP_JUMP_IF_FALSE 10					  
							      72 LOAD_FAST 0 ( arr )					    								  
							      74 LOAD_FAST 2 ( i )					    8 74 LOAD_GLOBAL 1 ( print )				  
							      76 BINARY_SUBSCR						    76 LOAD_FAST 0 ( arr )					  
							      78 LOAD_CONST 4 ( ' ' )					    78 LOAD_FAST 2 ( i )					  
							      80 LOAD_CONST 5 ( ( 'end' , ) )				    80 BINARY_SUBSCR						  
							      82 CALL_FUNCTION_KW 2					    82 LOAD_CONST 4 ( ' ' )					  
							      84 POP_TOP						    84 LOAD_CONST 5 ( ( 'end' , ) )				  
							      86 JUMP_ABSOLUTE 10					    86 CALL_FUNCTION_KW 2					  
							      >> 88 POP_BLOCK						    88 POP_TOP							  
							      >> 90 LOAD_CONST 0 ( None )				    90 JUMP_ABSOLUTE 10						  
							      92 RETURN_VALUE NEW_LINE					    92 POP_BLOCK						  
							      								    >> 94 LOAD_CONST 0 ( None )					  
							      								    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER					      SUM_FACTORS_NUMBER					    SUM_FACTORS_NUMBER						  SUM_FACTORS_NUMBER
--							      --							    --								  --
def divSum ( n ) :					      Disassembly of <code object divSum at 0x7f33e2653ed0, file "< Disassembly of <code object divSum at 0x7f2b0164d810, file "< error : Traceback (most recent call last):   File
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :  2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  (item)   File "main.py", line 37, in <module>	  Fi
	if ( n % i == 0 ) :				      								    								  le "<dis>", line 2, in divSum TypeError: 'int' obj
	    if ( i == ( n / i ) ) :			      3 4 SETUP_LOOP 82 ( to 88 )				    3 4 SETUP_LOOP 74 ( to 80 )					  ect is not callable
		result = result + i			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    else :					      8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 2 )					  
		result = result + ( i + n // i )	      10 LOAD_GLOBAL 1 ( int )					    10 LOAD_GLOBAL 1 ( int )					  
    return ( result + n + 1 )				      12 LOAD_GLOBAL 2 ( math )					    12 CALL_FUNCTION 1						  
							      14 LOAD_METHOD 3 ( sqrt )					    14 LOAD_GLOBAL 2 ( math )					  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_METHOD 3 ( sqrt )					  
							      18 CALL_METHOD 1						    18 LOAD_FAST 0 ( n )					  
							      20 CALL_FUNCTION 1					    20 CALL_METHOD 1						  
							      22 LOAD_CONST 3 ( 1 )					    22 CALL_FUNCTION 1						  
							      24 BINARY_ADD						    24 LOAD_CONST 3 ( 1 )					  
							      26 CALL_FUNCTION 2					    26 BINARY_ADD						  
							      28 GET_ITER						    28 CALL_FUNCTION 2						  
							      >> 30 FOR_ITER 54 ( to 86 )				    30 GET_ITER							  
							      32 STORE_FAST 2 ( i )					    >> 32 FOR_ITER 52 ( to 78 )					  
							      								    34 STORE_FAST 2 ( i )					  
							      4 34 LOAD_FAST 0 ( n )					    								  
							      36 LOAD_FAST 2 ( i )					    4 36 LOAD_FAST 0 ( n )					  
							      38 BINARY_MODULO						    38 LOAD_FAST 2 ( i )					  
							      40 LOAD_CONST 1 ( 0 )					    40 BINARY_MODULO						  
							      42 COMPARE_OP 2 ( == )					    42 LOAD_CONST 1 ( 0 )					  
							      44 POP_JUMP_IF_FALSE 30					    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 66					  
							      5 46 LOAD_FAST 2 ( i )					    								  
							      48 LOAD_FAST 0 ( n )					    5 48 LOAD_FAST 2 ( i )					  
							      50 LOAD_FAST 2 ( i )					    50 LOAD_FAST 0 ( n )					  
							      52 BINARY_TRUE_DIVIDE					    52 LOAD_FAST 2 ( i )					  
							      54 COMPARE_OP 2 ( == )					    54 BINARY_TRUE_DIVIDE					  
							      56 POP_JUMP_IF_FALSE 68					    56 COMPARE_OP 2 ( == )					  
							      								    58 POP_JUMP_IF_FALSE 64					  
							      6 58 LOAD_FAST 1 ( result )				    								  
							      60 LOAD_FAST 2 ( i )					    6 60 LOAD_FAST 1 ( result )					  
							      62 BINARY_ADD						    62 LOAD_FAST 2 ( i )					  
							      64 STORE_FAST 1 ( result )				    64 BINARY_ADD						  
							      66 JUMP_ABSOLUTE 30					    66 STORE_FAST 1 ( result )					  
							      								    68 JUMP_ABSOLUTE 32						  
							      8 >> 68 LOAD_FAST 1 ( result )				    								  
							      70 LOAD_FAST 2 ( i )					    8 >> 70 LOAD_FAST 1 ( result )				  
							      72 LOAD_FAST 0 ( n )					    72 LOAD_FAST 2 ( i )					  
							      74 LOAD_FAST 2 ( i )					    74 LOAD_FAST 0 ( n )					  
							      76 BINARY_FLOOR_DIVIDE					    76 LOAD_FAST 2 ( i )					  
							      78 BINARY_ADD						    78 BINARY_FLOOR_DIVIDE					  
							      80 BINARY_ADD						    80 BINARY_ADD						  
							      82 STORE_FAST 1 ( result )				    82 BINARY_ADD						  
							      84 JUMP_ABSOLUTE 30					    84 STORE_FAST 1 ( result )					  
							      >> 86 POP_BLOCK						    86 JUMP_ABSOLUTE 32						  
							      								    >> 88 POP_BLOCK						  
							      9 >> 88 LOAD_FAST 1 ( result )				    								  
							      90 LOAD_FAST 0 ( n )					    9 >> 90 LOAD_FAST 1 ( result )				  
							      92 BINARY_ADD						    92 LOAD_FAST 0 ( n )					  
							      94 LOAD_CONST 3 ( 1 )					    94 BINARY_ADD						  
							      96 BINARY_ADD						    96 LOAD_CONST 3 ( 1 )					  
							      98 RETURN_VALUE NEW_LINE					    98 BINARY_ADD						  
							      								    100 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH						      BINARY_SEARCH						    BINARY_SEARCH						  BINARY_SEARCH
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      Disassembly of <code object binarySearch at 0x7f33e26494b0, f Disassembly of <code object binarySearch at 0x7f2b016399c0, f error : /bin/bash: line 1:  4348 Segmentation faul
    if r >= l :						      2 0 LOAD_FAST 2 ( r )					    2 0 LOAD_FAST 2 ( r )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	mid = l + ( r - l ) // 2			      2 LOAD_FAST 1 ( l )					    2 LOAD_FAST 1 ( l )						  ataset/bin/python XLM/dis_script.py --script_path
	if arr [ mid ] == x :				      4 COMPARE_OP 5 ( >= )					    4 COMPARE_OP 5 ( >= )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    return mid					      6 POP_JUMP_IF_FALSE 90					    6 POP_JUMP_IF_FALSE 92					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/BINARY
	elif arr [ mid ] > x :				      								    								  _SEARCH.dis
	    return binarySearch ( arr , l , mid - 1 , x )     3 8 LOAD_FAST 1 ( l )					    3 8 LOAD_FAST 1 ( l )					  
	else :						      10 LOAD_FAST 2 ( r )					    10 LOAD_FAST 2 ( r )					  
	    return binarySearch ( arr , mid + 1 , r , x )     12 LOAD_FAST 1 ( l )					    12 LOAD_FAST 1 ( l )					  
    else :						      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
	return - 1					      16 LOAD_CONST 1 ( 2 )					    16 LOAD_CONST 1 ( 2 )					  
							      18 BINARY_FLOOR_DIVIDE					    18 BINARY_FLOOR_DIVIDE					  
							      20 BINARY_ADD						    20 BINARY_ADD						  
							      22 STORE_FAST 4 ( mid )					    22 STORE_FAST 4 ( mid )					  
							      								    								  
							      4 24 LOAD_FAST 0 ( arr )					    4 24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 4 ( mid )					    26 LOAD_FAST 4 ( mid )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 3 ( x )					    30 LOAD_FAST 3 ( x )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 40					    34 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      5 36 LOAD_FAST 4 ( mid )					    5 36 LOAD_FAST 4 ( mid )					  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      								    								  
							      6 >> 40 LOAD_FAST 0 ( arr )				    6 >> 40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 4 ( mid )					    42 LOAD_FAST 4 ( mid )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 3 ( x )					    46 LOAD_FAST 3 ( x )					  
							      48 COMPARE_OP 4 ( > )					    48 COMPARE_OP 4 ( > )					  
							      50 POP_JUMP_IF_FALSE 70					    50 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      7 52 LOAD_GLOBAL 0 ( binarySearch )			    7 52 LOAD_GLOBAL 0 ( binarySearch )				  
							      54 LOAD_FAST 0 ( arr )					    54 LOAD_FAST 0 ( arr )					  
							      56 LOAD_FAST 1 ( l )					    56 LOAD_FAST 1 ( l )					  
							      58 LOAD_FAST 4 ( mid )					    58 LOAD_FAST 4 ( mid )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 LOAD_FAST 3 ( x )					    64 LOAD_FAST 3 ( x )					  
							      66 CALL_FUNCTION 4					    66 CALL_FUNCTION 4						  
							      68 RETURN_VALUE						    68 RETURN_VALUE						  
							      								    								  
							      9 >> 70 LOAD_GLOBAL 0 ( binarySearch )			    9 >> 70 LOAD_GLOBAL 0 ( binarySearch )			  
							      72 LOAD_FAST 0 ( arr )					    72 LOAD_FAST 0 ( arr )					  
							      74 LOAD_FAST 4 ( mid )					    74 LOAD_FAST 4 ( mid )					  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_ADD						    78 BINARY_ADD						  
							      80 LOAD_FAST 2 ( r )					    80 LOAD_FAST 2 ( r )					  
							      82 LOAD_FAST 3 ( x )					    82 LOAD_FAST 3 ( x )					  
							      84 CALL_FUNCTION 4					    84 CALL_FUNCTION 4						  
							      86 RETURN_VALUE						    86 RETURN_VALUE						  
							      88 JUMP_FORWARD 4 ( to 94 )				    88 JUMP_FORWARD 4 ( to 92 )					  
							      								    								  
							      11 >> 90 LOAD_CONST 3 ( - 1 )				    11 90 LOAD_CONST 3 ( - 1 )					  
							      92 RETURN_VALUE						    >> 92 RETURN_VALUE						  
							      >> 94 LOAD_CONST 0 ( None )				    94 LOAD_CONST 0 ( None )					  
							      96 RETURN_VALUE NEW_LINE					    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1
--							      --							    --								  --
def findExtra ( arr1 , arr2 , n ) :			      Disassembly of <code object findExtra at 0x7f33e2649a50, file Disassembly of <code object findExtra at 0x7f2b016399c0, file timeout : None
    index = n						      2 0 LOAD_FAST 2 ( n )					    2 0 LOAD_FAST 2 ( n )					  
    left = 0						      2 STORE_FAST 3 ( index )					    2 STORE_FAST 3 ( index )					  
    right = n - 1					      								    								  
    while ( left <= right ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	mid = ( int ) ( ( left + right ) / 2 )		      6 STORE_FAST 4 ( left )					    6 STORE_FAST 4 ( left )					  
	if ( arr2 [ mid ] == arr1 [ mid ] ) :		      								    								  
	    left = mid + 1				      4 8 LOAD_FAST 2 ( n )					    4 8 LOAD_FAST 2 ( n )					  
	else :						      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
	    index = mid					      12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
	    right = mid - 1				      14 STORE_FAST 5 ( right )					    14 STORE_FAST 5 ( right )					  
    return index					      								    								  
							      5 16 SETUP_LOOP 66 ( to 84 )				    5 16 SETUP_LOOP 54 ( to 74 )				  
							      >> 18 LOAD_FAST 4 ( left )				    >> 18 LOAD_FAST 4 ( left )					  
							      20 LOAD_FAST 5 ( right )					    20 LOAD_FAST 5 ( right )					  
							      22 COMPARE_OP 1 ( <= )					    22 COMPARE_OP 1 ( <= )					  
							      24 POP_JUMP_IF_FALSE 82					    24 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      6 26 LOAD_GLOBAL 0 ( int )				    6 26 LOAD_GLOBAL 0 ( int )					  
							      28 LOAD_FAST 4 ( left )					    28 LOAD_FAST 4 ( left )					  
							      30 LOAD_FAST 5 ( right )					    30 LOAD_FAST 5 ( right )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 LOAD_CONST 3 ( 2 )					    34 LOAD_CONST 3 ( 2 )					  
							      36 BINARY_TRUE_DIVIDE					    36 BINARY_TRUE_DIVIDE					  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 STORE_FAST 6 ( mid )					    40 STORE_FAST 6 ( mid )					  
							      								    								  
							      7 42 LOAD_FAST 1 ( arr2 )					    7 42 LOAD_FAST 1 ( arr2 )					  
							      44 LOAD_FAST 6 ( mid )					    44 LOAD_FAST 6 ( mid )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_FAST 0 ( arr1 )					    48 LOAD_FAST 0 ( arr1 )					  
							      50 LOAD_FAST 6 ( mid )					    50 LOAD_FAST 6 ( mid )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 COMPARE_OP 2 ( == )					    54 COMPARE_OP 2 ( == )					  
							      56 POP_JUMP_IF_FALSE 68					    56 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      8 58 LOAD_FAST 6 ( mid )					    8 58 LOAD_FAST 6 ( mid )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_ADD						    62 BINARY_ADD						  
							      64 STORE_FAST 4 ( left )					    64 STORE_FAST 4 ( left )					  
							      66 JUMP_ABSOLUTE 18					    66 JUMP_ABSOLUTE 18						  
							      								    								  
							      10 >> 68 LOAD_FAST 6 ( mid )				    10 >> 68 LOAD_FAST 6 ( mid )				  
							      70 STORE_FAST 3 ( index )					    70 STORE_FAST 2 ( n )					  
							      								    								  
							      11 72 LOAD_FAST 6 ( mid )					    11 72 LOAD_FAST 6 ( mid )					  
							      74 LOAD_CONST 2 ( 1 )					    74 LOAD_CONST 2 ( 1 )					  
							      76 BINARY_SUBTRACT					    76 BINARY_SUBTRACT						  
							      78 STORE_FAST 5 ( right )					    78 STORE_FAST 5 ( right )					  
							      80 JUMP_ABSOLUTE 18					    80 JUMP_ABSOLUTE 18						  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      12 >> 84 LOAD_FAST 3 ( index )				    12 >> 84 LOAD_FAST 3 ( index )				  
							      86 RETURN_VALUE NEW_LINE					    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV
--							      --							    --								  --
def minTime ( arr , n ) :				      Disassembly of <code object minTime at 0x7f33e2644f60, file " Disassembly of <code object minTime at 0x7f2b01639660, file " script_not_found : None
    if ( n <= 0 ) : return 0				      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
    incl = arr [ 0 ]					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    excl = 0						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    for i in range ( 1 , n ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	incl_new = arr [ i ] + min ( excl , incl )	      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
	excl_new = incl					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	incl = incl_new					      								    								  
	excl = excl_new					      3 >> 12 LOAD_FAST 0 ( arr )				    3 >> 12 LOAD_FAST 0 ( arr )					  
    return min ( incl , excl )				      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 STORE_FAST 2 ( incl )					    18 STORE_FAST 2 ( 258 )					  
							      								    								  
							      4 20 LOAD_CONST 1 ( 0 )					    4 20 LOAD_CONST 1 ( 0 )					  
							      22 STORE_FAST 3 ( excl )					    22 STORE_FAST 3 ( excl )					  
							      								    								  
							      5 24 SETUP_LOOP 48 ( to 74 )				    5 24 SETUP_LOOP 52 ( to 74 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 CALL_FUNCTION 2					    32 CALL_FUNCTION 2						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 34 ( to 72 )				    >> 36 FOR_ITER 34 ( to 72 )					  
							      38 STORE_FAST 4 ( i )					    38 STORE_FAST 4 ( i )					  
							      								    								  
							      6 40 LOAD_FAST 0 ( arr )					    6 40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_GLOBAL 1 ( min )					    46 LOAD_GLOBAL 1 ( min )					  
							      48 LOAD_FAST 3 ( excl )					    48 LOAD_FAST 3 ( excl )					  
							      50 LOAD_FAST 2 ( incl )					    50 LOAD_FAST 2 ( 258 )					  
							      52 CALL_FUNCTION 2					    52 CALL_FUNCTION 2						  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 STORE_FAST 5 ( incl_new )				    56 STORE_FAST 5 ( incl_new )				  
							      								    								  
							      7 58 LOAD_FAST 2 ( incl )					    7 58 LOAD_FAST 2 ( 258 )					  
							      60 STORE_FAST 6 ( excl_new )				    60 STORE_FAST 6 ( excl_new )				  
							      								    								  
							      8 62 LOAD_FAST 5 ( incl_new )				    8 62 LOAD_FAST 5 ( incl_new )				  
							      64 STORE_FAST 2 ( incl )					    64 STORE_FAST 3 ( 78 )					  
							      								    								  
							      9 66 LOAD_FAST 6 ( excl_new )				    9 66 LOAD_FAST 6 ( excl_new )				  
							      68 STORE_FAST 3 ( excl )					    68 STORE_FAST 3 ( excl )					  
							      70 JUMP_ABSOLUTE 36					    70 JUMP_ABSOLUTE 36						  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      								    								  
							      10 >> 74 LOAD_GLOBAL 1 ( min )				    10 >> 74 LOAD_GLOBAL 1 ( min )				  
							      76 LOAD_FAST 2 ( incl )					    76 LOAD_FAST 2 ( 78 )					  
							      78 LOAD_FAST 3 ( excl )					    78 LOAD_FAST 3 ( excl )					  
							      80 CALL_FUNCTION 2					    80 CALL_FUNCTION 2						  
							      82 RETURN_VALUE NEW_LINE					    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS	      COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		    COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		  COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS
--							      --							    --								  --
def countWords ( stri , n ) :				      Disassembly of <code object countWords at 0x7f33e2644930, fil Disassembly of <code object countWords at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    m = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  (item)   File "main.py", line 35, in <module>	  Fi
	m [ stri [ i ] ] = m.get ( stri [ i ] , 0 ) + 1	      4 STORE_FAST 2 ( m )					    4 STORE_FAST 2 ( m )					  le "<dis>", line 2, in countWords UnboundLocalErro
    res = 0						      								    								  r: local variable 'res' referenced before assignme
    for i in m.values ( ) :				      3 6 SETUP_LOOP 44 ( to 52 )				    3 6 SETUP_LOOP 46 ( to 58 )					  nt
	if i == 2 :					      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	    res += 1					      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
    return res						      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 32 ( to 50 )				    >> 16 FOR_ITER 38 ( to 56 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 2 ( m )					    4 20 LOAD_FAST 2 ( m )					  
							      22 LOAD_METHOD 2 ( get )					    22 LOAD_METHOD 2 ( get )					  
							      24 LOAD_FAST 0 ( stri )					    24 LOAD_FAST 0 ( stri )					  
							      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 1 ( 0 )					  
							      32 CALL_METHOD 2						    32 CALL_METHOD 2						  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 LOAD_FAST 2 ( m )					    38 LOAD_FAST 2 ( m )					  
							      40 LOAD_FAST 0 ( stri )					    40 LOAD_FAST 0 ( stri )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 STORE_SUBSCR						    46 STORE_SUBSCR						  
							      48 JUMP_ABSOLUTE 16					    48 JUMP_ABSOLUTE 16						  
							      >> 50 POP_BLOCK						    >> 50 POP_BLOCK						  
							      								    								  
							      5 >> 52 LOAD_CONST 1 ( 0 )				    5 52 LOAD_CONST 1 ( 0 )					  
							      54 STORE_FAST 4 ( res )					    54 STORE_FAST 4 ( res )					  
							      								    								  
							      6 56 SETUP_LOOP 32 ( to 90 )				    6 56 SETUP_LOOP 40 ( to 96 )				  
							      58 LOAD_FAST 2 ( m )					    58 LOAD_FAST 2 ( m )					  
							      60 LOAD_METHOD 3 ( values )				    60 LOAD_METHOD 3 ( values )					  
							      62 CALL_METHOD 0						    62 CALL_METHOD 0						  
							      64 GET_ITER						    64 GET_ITER							  
							      >> 66 FOR_ITER 20 ( to 88 )				    >> 66 FOR_ITER 28 ( to 94 )					  
							      68 STORE_FAST 3 ( i )					    68 STORE_FAST 3 ( i )					  
							      								    								  
							      7 70 LOAD_FAST 3 ( i )					    7 70 LOAD_FAST 3 ( i )					  
							      72 LOAD_CONST 3 ( 2 )					    72 LOAD_CONST 3 ( 2 )					  
							      74 COMPARE_OP 2 ( == )					    74 COMPARE_OP 2 ( == )					  
							      76 POP_JUMP_IF_FALSE 66					    76 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      8 78 LOAD_FAST 4 ( res )					    8 78 LOAD_FAST 4 ( res )					  
							      80 LOAD_CONST 2 ( 1 )					    80 LOAD_CONST 2 ( 1 )					  
							      82 INPLACE_ADD						    82 INPLACE_ADD						  
							      84 STORE_FAST 4 ( res )					    84 STORE_FAST 4 ( res )					  
							      86 JUMP_ABSOLUTE 66					    86 JUMP_ABSOLUTE 66						  
							      >> 88 POP_BLOCK						    >> 88 POP_BLOCK						  
							      								    								  
							      9 >> 90 LOAD_FAST 4 ( res )				    9 >> 90 LOAD_FAST 4 ( res )					  
							      92 RETURN_VALUE NEW_LINE					    92 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
def countPairsWithDiffK ( arr , n , k ) :		      Disassembly of <code object countPairsWithDiffK at 0x7f33e264 Disassembly of <code object countPairsWithDiffK at 0x7f2b0163 error : /bin/bash: line 1:  4376 Segmentation faul
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n ) :				      2 STORE_FAST 3 ( count )					    2 STORE_FAST 3 ( count )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( i + 1 , n ) :			      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  3 4 SETUP_LOOP 90 ( to 96 )				    3 4 SETUP_LOOP 92 ( to 98 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/COUNT_
		count += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  PAIRS_DIFFERENCE_EQUAL_K.dis
    return count					      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 76 ( to 94 )				    >> 16 FOR_ITER 80 ( to 96 )					  
							      18 STORE_FAST 4 ( i )					    18 STORE_FAST 4 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 70 ( to 92 )				    4 20 SETUP_LOOP 62 ( to 94 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 4 ( i )					    24 LOAD_FAST 4 ( i )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 CALL_FUNCTION 2					    32 CALL_FUNCTION 2						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 52 ( to 90 )				    >> 36 FOR_ITER 48 ( to 92 )					  
							      38 STORE_FAST 5 ( j )					    38 STORE_FAST 5 ( j )					  
							      								    								  
							      5 40 LOAD_FAST 0 ( arr )					    5 40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 5 ( j )					    48 LOAD_FAST 5 ( j )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 BINARY_SUBTRACT					    52 BINARY_SUBTRACT						  
							      54 LOAD_FAST 2 ( k )					    54 LOAD_FAST 2 ( k )					  
							      56 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_TRUE 80					    58 POP_JUMP_IF_TRUE 36					  
							      60 LOAD_FAST 0 ( arr )					    60 LOAD_FAST 0 ( arr )					  
							      62 LOAD_FAST 5 ( j )					    62 LOAD_FAST 5 ( j )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 0 ( arr )					    66 LOAD_FAST 0 ( arr )					  
							      68 LOAD_FAST 4 ( i )					    68 LOAD_FAST 4 ( i )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 BINARY_SUBTRACT					    72 LOAD_FAST 2 ( k )					  
							      74 LOAD_FAST 2 ( k )					    74 COMPARE_OP 2 ( == )					  
							      76 COMPARE_OP 2 ( == )					    76 POP_JUMP_IF_FALSE 36					  
							      78 POP_JUMP_IF_FALSE 36					    								  
							      								    6 78 LOAD_FAST 3 ( count )					  
							      6 >> 80 LOAD_FAST 3 ( count )				    80 LOAD_CONST 2 ( 1 )					  
							      82 LOAD_CONST 2 ( 1 )					    82 INPLACE_ADD						  
							      84 INPLACE_ADD						    84 STORE_FAST 3 ( count )					  
							      86 STORE_FAST 3 ( count )					    86 JUMP_ABSOLUTE 36						  
							      88 JUMP_ABSOLUTE 36					    >> 88 POP_BLOCK						  
							      >> 90 POP_BLOCK						    >> 90 JUMP_ABSOLUTE 16					  
							      >> 92 JUMP_ABSOLUTE 16					    >> 92 POP_BLOCK						  
							      >> 94 POP_BLOCK						    								  
							      								    7 >> 94 LOAD_FAST 3 ( count )				  
							      7 >> 96 LOAD_FAST 3 ( count )				    96 RETURN_VALUE NEW_LINE					  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVEN_FIBONACCI_NUMBERS_SUM				      EVEN_FIBONACCI_NUMBERS_SUM				    EVEN_FIBONACCI_NUMBERS_SUM					  EVEN_FIBONACCI_NUMBERS_SUM
--							      --							    --								  --
def evenFibSum ( limit ) :				      Disassembly of <code object evenFibSum at 0x7f33e2649a50, fil Disassembly of <code object evenFibSum at 0x7f2b01639f60, fil error : /bin/bash: line 1:  4386 Segmentation faul
    if ( limit < 2 ) :					      2 0 LOAD_FAST 0 ( limit )					    2 0 LOAD_FAST 0 ( limit )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return 0					      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  ataset/bin/python XLM/dis_script.py --script_path
    ef1 = 0						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    ef2 = 2						      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/EVEN_F
    sm = ef1 + ef2					      								    								  IBONACCI_NUMBERS_SUM.dis
    while ( ef2 <= limit ) :				      3 8 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
	ef3 = 4 * ef2 + ef1				      10 RETURN_VALUE						    10 RETURN_VALUE						  
	if ( ef3 > limit ) :				      								    								  
	    break					      4 >> 12 LOAD_CONST 2 ( 0 )				    4 >> 12 LOAD_CONST 2 ( 0 )					  
	ef1 = ef2					      14 STORE_FAST 1 ( ef1 )					    14 STORE_FAST 1 ( ef1 )					  
	ef2 = ef3					      								    								  
	sm = sm + ef2					      5 16 LOAD_CONST 1 ( 2 )					    5 16 LOAD_CONST 1 ( 2 )					  
    return sm						      18 STORE_FAST 2 ( ef2 )					    18 STORE_FAST 2 ( ef2 )					  
							      								    								  
							      6 20 LOAD_FAST 1 ( ef1 )					    6 20 LOAD_FAST 1 ( ef1 )					  
							      22 LOAD_FAST 2 ( ef2 )					    22 LOAD_FAST 2 ( ef2 )					  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 STORE_FAST 3 ( sm )					    26 STORE_FAST 3 ( sm )					  
							      								    								  
							      7 28 SETUP_LOOP 50 ( to 80 )				    7 28 SETUP_LOOP 46 ( to 74 )				  
							      >> 30 LOAD_FAST 2 ( ef2 )					    >> 30 LOAD_FAST 2 ( ef2 )					  
							      32 LOAD_FAST 0 ( limit )					    32 LOAD_FAST 0 ( limit )					  
							      34 COMPARE_OP 1 ( <= )					    34 COMPARE_OP 1 ( <= )					  
							      36 POP_JUMP_IF_FALSE 78					    36 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      8 38 LOAD_CONST 3 ( 4 )					    8 38 LOAD_CONST 3 ( 4 )					  
							      40 LOAD_FAST 2 ( ef2 )					    40 LOAD_FAST 2 ( ef2 )					  
							      42 BINARY_MULTIPLY					    42 BINARY_MULTIPLY						  
							      44 LOAD_FAST 1 ( ef1 )					    44 LOAD_FAST 1 ( ef1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 STORE_FAST 4 ( ef3 )					    48 STORE_FAST 4 ( ef3 )					  
							      								    								  
							      9 50 LOAD_FAST 4 ( ef3 )					    9 50 LOAD_FAST 4 ( ef3 )					  
							      52 LOAD_FAST 0 ( limit )					    52 LOAD_FAST 0 ( limit )					  
							      54 COMPARE_OP 4 ( > )					    54 COMPARE_OP 4 ( > )					  
							      56 POP_JUMP_IF_FALSE 60					    56 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      10 58 BREAK_LOOP						    10 58 BREAK_LOOP						  
							      								    60 JUMP_ABSOLUTE 30						  
							      11 >> 60 LOAD_FAST 2 ( ef2 )				    								  
							      62 STORE_FAST 1 ( ef1 )					    11 >> 62 LOAD_FAST 4 ( ef2 )				  
							      								    64 STORE_FAST 1 ( ef1 )					  
							      12 64 LOAD_FAST 4 ( ef3 )					    								  
							      66 STORE_FAST 2 ( ef2 )					    12 66 LOAD_FAST 3 ( ef3 )					  
							      								    68 STORE_FAST 2 ( ef2 )					  
							      13 68 LOAD_FAST 3 ( sm )					    								  
							      70 LOAD_FAST 2 ( ef2 )					    13 70 LOAD_FAST 3 ( sm )					  
							      72 BINARY_ADD						    72 LOAD_FAST 4 ( ef3 )					  
							      74 STORE_FAST 3 ( sm )					    74 BINARY_ADD						  
							      76 JUMP_ABSOLUTE 30					    76 STORE_FAST 3 ( sm )					  
							      >> 78 POP_BLOCK						    78 JUMP_ABSOLUTE 30						  
							      								    >> 80 POP_BLOCK						  
							      14 >> 80 LOAD_FAST 3 ( sm )				    								  
							      82 RETURN_VALUE NEW_LINE					    14 >> 82 LOAD_FAST 3 ( sm )					  
							      								    84 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER
--							      --							    --								  --
def flipsPossible ( a , n ) :				      Disassembly of <code object flipsPossible at 0x7f33e2644930,  Disassembly of <code object flipsPossible at 0x7f2b0163dc90,  failure : #Results: 9, 10
    count_odd = 0 ; count_even = 0 ;			      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( count_odd )				    2 STORE_FAST 2 ( count_odd )				  
	if ( a [ i ] & 1 ) :				      4 LOAD_CONST 1 ( 0 )					    								  
	    count_odd += 1 ;				      6 STORE_FAST 3 ( count_even )				    3 4 LOAD_CONST 1 ( 0 )					  
	else :						      								    6 STORE_FAST 3 ( count_even )				  
	    count_even += 1 ;				      3 8 SETUP_LOOP 46 ( to 56 )				    								  
    if ( count_odd % 2 and count_even % 2 ) :		      10 LOAD_GLOBAL 0 ( range )				    4 8 SETUP_LOOP 46 ( to 58 )					  
	return False ;					      12 LOAD_FAST 1 ( n )					    10 LOAD_GLOBAL 0 ( range )					  
    else :						      14 CALL_FUNCTION 1					    12 LOAD_FAST 1 ( n )					  
	return True ;					      16 GET_ITER						    14 CALL_FUNCTION 1						  
							      >> 18 FOR_ITER 34 ( to 54 )				    16 GET_ITER							  
							      20 STORE_FAST 4 ( i )					    >> 18 FOR_ITER 38 ( to 56 )					  
							      								    20 STORE_FAST 4 ( i )					  
							      4 22 LOAD_FAST 0 ( a )					    								  
							      24 LOAD_FAST 4 ( i )					    5 22 LOAD_FAST 0 ( a )					  
							      26 BINARY_SUBSCR						    24 LOAD_FAST 4 ( i )					  
							      28 LOAD_CONST 2 ( 1 )					    26 BINARY_SUBSCR						  
							      30 BINARY_AND						    28 LOAD_CONST 2 ( 1 )					  
							      32 POP_JUMP_IF_FALSE 44					    30 BINARY_AND						  
							      								    32 POP_JUMP_IF_FALSE 44					  
							      5 34 LOAD_FAST 2 ( count_odd )				    								  
							      36 LOAD_CONST 2 ( 1 )					    6 34 LOAD_FAST 2 ( count_odd )				  
							      38 INPLACE_ADD						    36 LOAD_CONST 2 ( 1 )					  
							      40 STORE_FAST 2 ( count_odd )				    38 INPLACE_ADD						  
							      42 JUMP_ABSOLUTE 18					    40 STORE_FAST 2 ( count_odd )				  
							      								    42 JUMP_ABSOLUTE 18						  
							      7 >> 44 LOAD_FAST 3 ( count_even )			    								  
							      46 LOAD_CONST 2 ( 1 )					    8 >> 44 LOAD_FAST 2 ( count_odd )				  
							      48 INPLACE_ADD						    46 LOAD_CONST 2 ( 1 )					  
							      50 STORE_FAST 3 ( count_even )				    48 INPLACE_ADD						  
							      52 JUMP_ABSOLUTE 18					    50 STORE_FAST 2 ( count_odd )				  
							      >> 54 POP_BLOCK						    52 JUMP_ABSOLUTE 18						  
							      								    54 POP_BLOCK						  
							      8 >> 56 LOAD_FAST 2 ( count_odd )				    								  
							      58 LOAD_CONST 3 ( 2 )					    9 >> 56 LOAD_FAST 3 ( count_odd )				  
							      60 BINARY_MODULO						    58 LOAD_CONST 3 ( 2 )					  
							      62 POP_JUMP_IF_FALSE 76					    60 BINARY_MODULO						  
							      64 LOAD_FAST 3 ( count_even )				    62 POP_JUMP_IF_FALSE 78					  
							      66 LOAD_CONST 3 ( 2 )					    64 LOAD_FAST 2 ( count_even )				  
							      68 BINARY_MODULO						    66 LOAD_CONST 3 ( 2 )					  
							      70 POP_JUMP_IF_FALSE 76					    68 BINARY_MODULO						  
							      								    70 CALL_FUNCTION 1						  
							      9 72 LOAD_CONST 4 ( False )				    72 POP_JUMP_IF_FALSE 78					  
							      74 RETURN_VALUE						    								  
							      								    10 74 LOAD_CONST 4 ( False )				  
							      11 >> 76 LOAD_CONST 5 ( True )				    76 RETURN_VALUE						  
							      78 RETURN_VALUE						    								  
							      80 LOAD_CONST 0 ( None )					    12 >> 78 LOAD_CONST 5 ( True )				  
							      82 RETURN_VALUE NEW_LINE					    80 RETURN_VALUE						  
							      								    82 LOAD_CONST 0 ( None )					  
							      								    84 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_ELEMENT_ROW_MATRIX				      FIND_MAXIMUM_ELEMENT_ROW_MATRIX				    FIND_MAXIMUM_ELEMENT_ROW_MATRIX				  FIND_MAXIMUM_ELEMENT_ROW_MATRIX
--							      --							    --								  --
def maxelement ( arr ) :				      Disassembly of <code object maxelement at 0x7f33e2653f60, fil Disassembly of <code object maxelement at 0x7f2b0163dc90, fil script_not_found : None
    no_of_rows = len ( arr )				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    no_of_column = len ( arr [ 0 ] )			      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    for i in range ( no_of_rows ) :			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	max1 = 0					      6 STORE_FAST 1 ( no_of_rows )				    6 STORE_FAST 1 ( no_of_rows )				  
	for j in range ( no_of_column ) :		      								    								  
	    if arr [ i ] [ j ] > max1 :			      3 8 LOAD_GLOBAL 0 ( len )					    3 8 LOAD_GLOBAL 0 ( len )					  
		max1 = arr [ i ] [ j ]			      10 LOAD_FAST 0 ( arr )					    10 LOAD_FAST 0 ( arr )					  
	print ( max1 )					      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
							      14 BINARY_SUBSCR						    14 BINARY_SUBSCR						  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 STORE_FAST 2 ( no_of_column )				    18 STORE_FAST 2 ( no_of_column )				  
							      								    								  
							      4 20 SETUP_LOOP 74 ( to 96 )				    4 20 SETUP_LOOP 70 ( to 94 )				  
							      22 LOAD_GLOBAL 1 ( range )				    22 LOAD_GLOBAL 1 ( range )					  
							      24 LOAD_FAST 1 ( no_of_rows )				    24 LOAD_FAST 2 ( no_of_rows )				  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 62 ( to 94 )				    >> 30 FOR_ITER 58 ( to 92 )					  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 3 ( i )					  
							      								    								  
							      5 34 LOAD_CONST 1 ( 0 )					    5 34 LOAD_CONST 1 ( 0 )					  
							      36 STORE_FAST 4 ( max1 )					    36 STORE_FAST 4 ( max1 )					  
							      								    								  
							      6 38 SETUP_LOOP 44 ( to 84 )				    6 38 SETUP_LOOP 44 ( to 82 )				  
							      40 LOAD_GLOBAL 1 ( range )				    40 LOAD_GLOBAL 1 ( range )					  
							      42 LOAD_FAST 2 ( no_of_column )				    42 LOAD_FAST 1 ( no_of_column )				  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 GET_ITER						    46 GET_ITER							  
							      >> 48 FOR_ITER 32 ( to 82 )				    >> 48 FOR_ITER 28 ( to 80 )					  
							      50 STORE_FAST 5 ( j )					    50 STORE_FAST 5 ( j )					  
							      								    								  
							      7 52 LOAD_FAST 0 ( arr )					    7 52 LOAD_FAST 0 ( arr )					  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_FAST 3 ( i )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 5 ( j )					    58 LOAD_FAST 5 ( j )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 4 ( max1 )					    62 LOAD_FAST 4 ( max1 )					  
							      64 COMPARE_OP 4 ( > )					    64 COMPARE_OP 4 ( > )					  
							      66 POP_JUMP_IF_FALSE 48					    66 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      8 68 LOAD_FAST 0 ( arr )					    8 68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 3 ( i )					    70 LOAD_FAST 3 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_FAST 5 ( j )					    74 LOAD_FAST 5 ( j )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 STORE_FAST 4 ( max1 )					    78 STORE_FAST 4 ( max1 )					  
							      80 JUMP_ABSOLUTE 48					    74 JUMP_ABSOLUTE 48						  
							      >> 82 POP_BLOCK						    >> 76 POP_BLOCK						  
							      								    								  
							      9 >> 84 LOAD_GLOBAL 2 ( print )				    9 >> 78 LOAD_GLOBAL 2 ( print )				  
							      86 LOAD_FAST 4 ( max1 )					    80 LOAD_FAST 4 ( max1 )					  
							      88 CALL_FUNCTION 1					    82 CALL_FUNCTION 1						  
							      90 POP_TOP						    84 POP_TOP							  
							      92 JUMP_ABSOLUTE 30					    86 JUMP_ABSOLUTE 30						  
							      >> 94 POP_BLOCK						    >> 88 POP_BLOCK						  
							      >> 96 LOAD_CONST 0 ( None )				    >> 90 LOAD_CONST 0 ( None )					  
							      98 RETURN_VALUE NEW_LINE					    92 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT						      BUBBLE_SORT						    BUBBLE_SORT							  BUBBLE_SORT
--							      --							    --								  --
def bubbleSort ( arr ) :				      Disassembly of <code object bubbleSort at 0x7f33e2644930, fil Disassembly of <code object bubbleSort at 0x7f2b0163dc90, fil script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for i in range ( n ) :				      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
	for j in range ( 0 , n - i - 1 ) :		      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    if arr [ j ] > arr [ j + 1 ] :		      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
		arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 								    								  
							      3 8 SETUP_LOOP 98 ( to 108 )				    3 8 SETUP_LOOP 96 ( to 108 )				  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 86 ( to 106 )				    >> 18 FOR_ITER 80 ( to 106 )				  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 SETUP_LOOP 80 ( to 104 )				    4 22 SETUP_LOOP 62 ( to 104 )				  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_GLOBAL 1 ( range )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 BINARY_SUBTRACT					    32 BINARY_SUBTRACT						  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBTRACT						  
							      38 CALL_FUNCTION 2					    38 CALL_FUNCTION 2						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 58 ( to 102 )				    >> 42 FOR_ITER 44 ( to 102 )				  
							      44 STORE_FAST 3 ( j )					    44 STORE_FAST 3 ( j )					  
							      								    								  
							      5 46 LOAD_FAST 0 ( arr )					    5 46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 3 ( j )					    48 LOAD_FAST 3 ( j )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 0 ( arr )					    52 LOAD_FAST 0 ( arr )					  
							      54 LOAD_FAST 3 ( j )					    54 LOAD_FAST 3 ( j )					  
							      56 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 2 ( 1 )					  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 COMPARE_OP 4 ( > )					    62 COMPARE_OP 4 ( > )					  
							      64 POP_JUMP_IF_FALSE 42					    64 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      6 66 LOAD_FAST 0 ( arr )					    6 66 LOAD_FAST 0 ( arr )					  
							      68 LOAD_FAST 3 ( j )					    68 LOAD_FAST 3 ( j )					  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 LOAD_FAST 0 ( arr )					    76 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 3 ( j )					    78 LOAD_FAST 3 ( j )					  
							      80 BINARY_SUBSCR						    80 LOAD_CONST 2 ( 1 )					  
							      82 ROT_TWO						    82 BINARY_ADD						  
							      84 LOAD_FAST 0 ( arr )					    84 STORE_SUBSCR						  
							      86 LOAD_FAST 3 ( j )					    86 JUMP_ABSOLUTE 42						  
							      88 STORE_SUBSCR						    >> 88 POP_BLOCK						  
							      90 LOAD_FAST 0 ( arr )					    >> 90 JUMP_ABSOLUTE 18					  
							      92 LOAD_FAST 3 ( j )					    >> 92 POP_BLOCK						  
							      94 LOAD_CONST 2 ( 1 )					    >> 94 LOAD_CONST 0 ( None )					  
							      96 BINARY_ADD						    96 RETURN_VALUE NEW_LINE					  
							      98 STORE_SUBSCR						    								  
							      100 JUMP_ABSOLUTE 42					    								  
							      >> 102 POP_BLOCK						    								  
							      >> 104 JUMP_ABSOLUTE 18					    								  
							      >> 106 POP_BLOCK						    								  
							      >> 108 LOAD_CONST 0 ( None )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS		      FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			    FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			  FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS
--							      --							    --								  --
def findElement ( arr , ranges , rotations , index ) :	      Disassembly of <code object findElement at 0x7f33e26494b0, fi Disassembly of <code object findElement at 0x7f2b0163dc90, fi script_not_found : None
    for i in range ( rotations - 1 , - 1 , - 1 ) :	      2 0 SETUP_LOOP 86 ( to 88 )				    2 0 SETUP_LOOP 96 ( to 98 )					  
	left = ranges [ i ] [ 0 ]			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	right = ranges [ i ] [ 1 ]			      4 LOAD_FAST 2 ( rotations )				    4 LOAD_FAST 2 ( rotations )					  
	if ( left <= index and right >= index ) :	      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    if ( index == left ) :			      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
		index = right				      10 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 2 ( - 1 )					  
	    else :					      12 LOAD_CONST 2 ( - 1 )					    12 CALL_FUNCTION 2						  
		index = index - 1			      14 CALL_FUNCTION 3					    14 GET_ITER							  
    return arr [ index ]				      16 GET_ITER						    >> 16 FOR_ITER 82 ( to 96 )					  
							      >> 18 FOR_ITER 66 ( to 86 )				    18 STORE_FAST 4 ( i )					  
							      20 STORE_FAST 4 ( i )					    								  
							      								    3 20 LOAD_FAST 1 ( ranges )					  
							      3 22 LOAD_FAST 1 ( ranges )				    22 LOAD_FAST 4 ( i )					  
							      24 LOAD_FAST 4 ( i )					    24 BINARY_SUBSCR						  
							      26 BINARY_SUBSCR						    26 LOAD_CONST 3 ( 0 )					  
							      28 LOAD_CONST 3 ( 0 )					    28 BINARY_SUBSCR						  
							      30 BINARY_SUBSCR						    30 STORE_FAST 5 ( left )					  
							      32 STORE_FAST 5 ( left )					    								  
							      								    4 32 LOAD_FAST 1 ( ranges )					  
							      4 34 LOAD_FAST 1 ( ranges )				    34 LOAD_FAST 4 ( i )					  
							      36 LOAD_FAST 4 ( i )					    36 BINARY_SUBSCR						  
							      38 BINARY_SUBSCR						    38 LOAD_CONST 1 ( 1 )					  
							      40 LOAD_CONST 1 ( 1 )					    40 BINARY_SUBSCR						  
							      42 BINARY_SUBSCR						    42 STORE_FAST 6 ( right )					  
							      44 STORE_FAST 6 ( right )					    								  
							      								    5 44 LOAD_FAST 5 ( left )					  
							      5 46 LOAD_FAST 5 ( left )					    46 LOAD_FAST 3 ( index )					  
							      48 LOAD_FAST 3 ( index )					    48 COMPARE_OP 1 ( <= )					  
							      50 COMPARE_OP 1 ( <= )					    50 POP_JUMP_IF_FALSE 16					  
							      52 POP_JUMP_IF_FALSE 18					    52 LOAD_FAST 6 ( right )					  
							      54 LOAD_FAST 6 ( right )					    54 LOAD_FAST 3 ( index )					  
							      56 LOAD_FAST 3 ( index )					    56 COMPARE_OP 5 ( >= )					  
							      58 COMPARE_OP 5 ( >= )					    58 POP_JUMP_IF_FALSE 16					  
							      60 POP_JUMP_IF_FALSE 18					    								  
							      								    6 60 LOAD_FAST 3 ( index )					  
							      6 62 LOAD_FAST 3 ( index )				    62 LOAD_FAST 5 ( left )					  
							      64 LOAD_FAST 5 ( left )					    64 COMPARE_OP 5 ( >= )					  
							      66 COMPARE_OP 2 ( == )					    66 POP_JUMP_IF_FALSE 80					  
							      68 POP_JUMP_IF_FALSE 76					    								  
							      								    7 68 LOAD_FAST 6 ( right )					  
							      7 70 LOAD_FAST 6 ( right )				    70 STORE_FAST 3 ( index )					  
							      72 STORE_FAST 3 ( index )					    72 JUMP_ABSOLUTE 16						  
							      74 JUMP_ABSOLUTE 18					    								  
							      								    9 74 LOAD_FAST 3 ( index )					  
							      9 >> 76 LOAD_FAST 3 ( index )				    76 LOAD_CONST 1 ( 1 )					  
							      78 LOAD_CONST 1 ( 1 )					    78 BINARY_SUBTRACT						  
							      80 BINARY_SUBTRACT					    80 STORE_FAST 3 ( index )					  
							      82 STORE_FAST 3 ( index )					    82 JUMP_ABSOLUTE 16						  
							      84 JUMP_ABSOLUTE 18					    								  
							      >> 86 POP_BLOCK						    11 >> 84 LOAD_FAST 3 ( index )				  
							      								    86 LOAD_CONST 1 ( 1 )					  
							      10 >> 88 LOAD_FAST 0 ( arr )				    88 BINARY_SUBTRACT						  
							      90 LOAD_FAST 3 ( index )					    90 STORE_FAST 3 ( index )					  
							      92 BINARY_SUBSCR						    92 JUMP_ABSOLUTE 16						  
							      94 RETURN_VALUE NEW_LINE					    >> 94 POP_BLOCK						  
							      								    								  
							      								    12 >> 96 LOAD_FAST 0 ( arr )				  
							      								    98 LOAD_FAST 3 ( index )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T
--							      --							    --								  --
def printSubsequences ( arr , n ) :			      Disassembly of <code object printSubsequences at 0x7f33e2649a Disassembly of <code object printSubsequences at 0x7f2b0163dc script_not_found : None
    opsize = math.pow ( 2 , n )				      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
    for counter in range ( 1 , ( int ) ( opsize ) ) :	      2 LOAD_METHOD 1 ( pow )					    2 LOAD_METHOD 1 ( pow )					  
	for j in range ( 0 , n ) :			      4 LOAD_CONST 1 ( 2 )					    4 LOAD_CONST 1 ( 2 )					  
	    if ( counter & ( 1 << j ) ) :		      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  
		print ( arr [ j ] , end = " " )		      8 CALL_METHOD 2						    8 CALL_METHOD 2						  
	print ( )					      10 STORE_FAST 2 ( opsize )				    10 STORE_FAST 2 ( opsize )					  
							      								    								  
							      3 12 SETUP_LOOP 76 ( to 90 )				    3 12 SETUP_LOOP 70 ( to 88 )				  
							      14 LOAD_GLOBAL 2 ( range )				    14 LOAD_GLOBAL 2 ( range )					  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_GLOBAL 3 ( int )					    18 LOAD_GLOBAL 3 ( int )					  
							      20 LOAD_FAST 2 ( opsize )					    20 CALL_FUNCTION 1						  
							      22 CALL_FUNCTION 1					    22 LOAD_FAST 2 ( opsize )					  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 CALL_FUNCTION 2						  
							      >> 28 FOR_ITER 58 ( to 88 )				    28 GET_ITER							  
							      30 STORE_FAST 3 ( counter )				    >> 30 FOR_ITER 52 ( to 86 )					  
							      								    32 STORE_FAST 3 ( counter )					  
							      4 32 SETUP_LOOP 46 ( to 80 )				    								  
							      34 LOAD_GLOBAL 2 ( range )				    4 34 SETUP_LOOP 44 ( to 78 )				  
							      36 LOAD_CONST 3 ( 0 )					    36 LOAD_GLOBAL 2 ( range )					  
							      38 LOAD_FAST 1 ( n )					    38 LOAD_CONST 3 ( 0 )					  
							      40 CALL_FUNCTION 2					    40 LOAD_FAST 1 ( n )					  
							      42 GET_ITER						    42 CALL_FUNCTION 2						  
							      >> 44 FOR_ITER 32 ( to 78 )				    44 GET_ITER							  
							      46 STORE_FAST 4 ( j )					    >> 46 FOR_ITER 32 ( to 76 )					  
							      								    48 STORE_FAST 4 ( j )					  
							      5 48 LOAD_FAST 3 ( counter )				    								  
							      50 LOAD_CONST 2 ( 1 )					    5 50 LOAD_FAST 3 ( counter )				  
							      52 LOAD_FAST 4 ( j )					    52 LOAD_CONST 2 ( 1 )					  
							      54 BINARY_LSHIFT						    54 LOAD_FAST 4 ( j )					  
							      56 BINARY_AND						    56 BINARY_LSHIFT						  
							      58 POP_JUMP_IF_FALSE 44					    58 BINARY_AND						  
							      								    60 POP_JUMP_IF_FALSE 46					  
							      6 60 LOAD_GLOBAL 4 ( print )				    								  
							      62 LOAD_FAST 0 ( arr )					    6 62 LOAD_GLOBAL 4 ( print )				  
							      64 LOAD_FAST 4 ( j )					    64 LOAD_FAST 0 ( arr )					  
							      66 BINARY_SUBSCR						    66 LOAD_FAST 4 ( j )					  
							      68 LOAD_CONST 4 ( ' ' )					    68 BINARY_SUBSCR						  
							      70 LOAD_CONST 5 ( ( 'end' , ) )				    70 LOAD_CONST 4 ( ' ' )					  
							      72 CALL_FUNCTION_KW 2					    72 LOAD_CONST 5 ( ( 'end' , ) )				  
							      74 POP_TOP						    74 CALL_FUNCTION_KW 2					  
							      76 JUMP_ABSOLUTE 44					    76 POP_TOP							  
							      >> 78 POP_BLOCK						    78 JUMP_ABSOLUTE 46						  
							      								    >> 80 POP_BLOCK						  
							      7 >> 80 LOAD_GLOBAL 4 ( print )				    >> 82 JUMP_ABSOLUTE 30					  
							      82 CALL_FUNCTION 0					    >> 84 POP_BLOCK						  
							      84 POP_TOP						    								  
							      86 JUMP_ABSOLUTE 28					    7 >> 86 LOAD_GLOBAL 4 ( print )				  
							      >> 88 POP_BLOCK						    88 CALL_FUNCTION 0						  
							      >> 90 LOAD_CONST 0 ( None )				    90 POP_TOP							  
							      92 RETURN_VALUE NEW_LINE					    92 LOAD_CONST 0 ( None )					  
							      								    94 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_ROOT_NUMBER					      N_TH_ROOT_NUMBER						    N_TH_ROOT_NUMBER						  N_TH_ROOT_NUMBER
--							      --							    --								  --
def nthRoot ( A , N ) :					      Disassembly of <code object nthRoot at 0x7f33e2644f60, file " Disassembly of <code object nthRoot at 0x7f2b01639660, file " script_not_found : None
    x<<unk>> = random.randint ( 1 , 101 ) % 10		      2 0 LOAD_GLOBAL 0 ( random )				    2 0 LOAD_GLOBAL 0 ( random )				  
    eps = 0.001						      2 LOAD_METHOD 1 ( randint )				    2 LOAD_METHOD 1 ( randint )					  
    delX = 2147483647					      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
    xK = 0.0						      6 LOAD_CONST 2 ( 101 )					    6 LOAD_CONST 2 ( 101 )					  
    while ( delX > eps ) :				      8 CALL_METHOD 2						    8 CALL_METHOD 2						  
	xK = ( ( N - 1.0 ) * x<<unk>> + A / pow ( x<<unk>> ,  10 LOAD_CONST 3 ( 10 )					    10 LOAD_CONST 3 ( 10 )					  
	delX = abs ( xK - x<<unk>> )			      12 BINARY_MODULO						    12 BINARY_MODULO						  
	x<<unk>> = xK ;					      14 STORE_FAST 2 ( x<<unk>> )				    14 STORE_FAST 2 ( xTop)					  
    return xK						      								    								  
							      3 16 LOAD_CONST 4 ( 0.001 )				    3 16 LOAD_CONST 4 ( 0.001 )					  
							      18 STORE_FAST 3 ( eps )					    18 STORE_FAST 3 ( eps )					  
							      								    								  
							      4 20 LOAD_CONST 5 ( 2147483647 )				    4 20 LOAD_CONST 5 ( 2147483647 )				  
							      22 STORE_FAST 4 ( delX )					    22 STORE_FAST 4 ( delX )					  
							      								    								  
							      5 24 LOAD_CONST 6 ( 0.0 )					    5 24 LOAD_CONST 6 ( 0.0 )					  
							      26 STORE_FAST 5 ( xK )					    26 STORE_FAST 5 ( xK )					  
							      								    								  
							      6 28 SETUP_LOOP 62 ( to 92 )				    6 28 SETUP_LOOP 56 ( to 88 )				  
							      >> 30 LOAD_FAST 4 ( delX )				    >> 30 LOAD_FAST 4 ( delX )					  
							      32 LOAD_FAST 3 ( eps )					    32 LOAD_FAST 3 ( eps )					  
							      34 COMPARE_OP 4 ( > )					    34 COMPARE_OP 4 ( > )					  
							      36 POP_JUMP_IF_FALSE 90					    36 POP_JUMP_IF_FALSE 86					  
							      								    								  
							      7 38 LOAD_FAST 1 ( N )					    7 38 LOAD_FAST 1 ( N )					  
							      40 LOAD_CONST 7 ( 1.0 )					    40 LOAD_CONST 3 ( 1.0 )					  
							      42 BINARY_SUBTRACT					    42 BINARY_SUBTRACT						  
							      44 LOAD_FAST 2 ( x<<unk>> )				    44 LOAD_FAST 2 ( xtest_data )				  
							      46 BINARY_MULTIPLY					    46 BINARY_MULTIPLY						  
							      48 LOAD_FAST 0 ( A )					    48 LOAD_FAST 0 ( A )					  
							      50 LOAD_GLOBAL 2 ( pow )					    50 LOAD_GLOBAL 2 ( pow )					  
							      52 LOAD_FAST 2 ( x<<unk>> )				    52 LOAD_FAST 2 ( xguess )					  
							      54 LOAD_FAST 1 ( N )					    54 LOAD_FAST 1 ( N )					  
							      56 LOAD_CONST 1 ( 1 )					    56 LOAD_CONST 1 ( 1 )					  
							      58 BINARY_SUBTRACT					    58 BINARY_SUBTRACT						  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 BINARY_TRUE_DIVIDE					    62 BINARY_TRUE_DIVIDE					  
							      64 BINARY_ADD						    64 LOAD_FAST 1 ( N )					  
							      66 LOAD_FAST 1 ( N )					    66 BINARY_TRUE_DIVIDE					  
							      68 BINARY_TRUE_DIVIDE					    68 BINARY_ADD						  
							      70 STORE_FAST 5 ( xK )					    70 STORE_FAST 6 ( xK )					  
							      								    								  
							      8 72 LOAD_GLOBAL 3 ( abs )				    8 72 LOAD_GLOBAL 3 ( abs )					  
							      74 LOAD_FAST 5 ( xK )					    74 LOAD_FAST 6 ( xK )					  
							      76 LOAD_FAST 2 ( x<<unk>> )				    76 LOAD_FAST 5 ( x98 )					  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      82 STORE_FAST 4 ( delX )					    82 STORE_FAST 4 ( delX )					  
							      								    								  
							      9 84 LOAD_FAST 5 ( xK )					    9 84 LOAD_FAST 6 ( xK )					  
							      86 STORE_FAST 2 ( x<<unk>> )				    86 STORE_FAST 7 ( xecho )					  
							      88 JUMP_ABSOLUTE 30					    88 JUMP_ABSOLUTE 30						  
							      >> 90 POP_BLOCK						    >> 90 POP_BLOCK						  
							      								    								  
							      10 >> 92 LOAD_FAST 5 ( xK )				    10 >> 92 LOAD_FAST 5 ( xK )					  
							      94 RETURN_VALUE NEW_LINE					    94 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_CONSECUTIVE_DUPLICATES_STRING			      REMOVE_CONSECUTIVE_DUPLICATES_STRING			    REMOVE_CONSECUTIVE_DUPLICATES_STRING			  REMOVE_CONSECUTIVE_DUPLICATES_STRING
--							      --							    --								  --
def removeDuplicates ( S ) :				      Disassembly of <code object removeDuplicates at 0x7f33e2649a5 Disassembly of <code object removeDuplicates at 0x7f2b0163dc9 error : /bin/bash: line 1:  4405 Segmentation faul
    n = len ( S )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    if ( n < 2 ) :					      2 LOAD_FAST 0 ( S )					    2 LOAD_FAST 0 ( S )						  ataset/bin/python XLM/dis_script.py --script_path
	return						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    j = 0						      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/REMOVE
    for i in range ( n ) :				      								    								  _CONSECUTIVE_DUPLICATES_STRING.dis
	if ( S [ j ] != S [ i ] ) :			      3 8 LOAD_FAST 1 ( n )					    3 8 LOAD_FAST 1 ( n )					  
	    j += 1					      10 LOAD_CONST 1 ( 2 )					    10 LOAD_CONST 1 ( 2 )					  
	    S [ j ] = S [ i ]				      12 COMPARE_OP 0 ( < )					    12 COMPARE_OP 0 ( < )					  
    j += 1						      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
    S = S [ : j ]					      								    								  
    return S						      4 16 LOAD_CONST 0 ( None )				    4 16 LOAD_CONST 0 ( None )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      5 >> 20 LOAD_CONST 2 ( 0 )				    5 >> 20 LOAD_CONST 2 ( 0 )					  
							      22 STORE_FAST 2 ( j )					    22 STORE_FAST 2 ( j )					  
							      								    								  
							      6 24 SETUP_LOOP 52 ( to 78 )				    6 24 SETUP_LOOP 54 ( to 82 )				  
							      26 LOAD_GLOBAL 1 ( range )				    26 LOAD_GLOBAL 1 ( range )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 40 ( to 76 )				    >> 34 FOR_ITER 42 ( to 80 )					  
							      36 STORE_FAST 3 ( i )					    36 STORE_FAST 3 ( i )					  
							      								    								  
							      7 38 LOAD_FAST 0 ( S )					    7 38 LOAD_FAST 0 ( S )					  
							      40 LOAD_FAST 2 ( j )					    40 LOAD_FAST 2 ( j )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 0 ( S )					    44 LOAD_FAST 0 ( S )					  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 COMPARE_OP 3 ( != )					    50 COMPARE_OP 3 ( != )					  
							      52 POP_JUMP_IF_FALSE 34					    52 POP_JUMP_IF_FALSE 34					  
							      								    								  
							      8 54 LOAD_FAST 2 ( j )					    8 54 LOAD_FAST 2 ( j )					  
							      56 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 3 ( 1 )					  
							      58 INPLACE_ADD						    58 INPLACE_ADD						  
							      60 STORE_FAST 2 ( j )					    60 STORE_FAST 2 ( j )					  
							      								    								  
							      9 62 LOAD_FAST 0 ( S )					    9 62 LOAD_FAST 0 ( S )					  
							      64 LOAD_FAST 3 ( i )					    64 LOAD_FAST 3 ( i )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 0 ( S )					    68 LOAD_FAST 0 ( S )					  
							      70 LOAD_FAST 2 ( j )					    70 LOAD_FAST 2 ( j )					  
							      72 STORE_SUBSCR						    72 STORE_SUBSCR						  
							      74 JUMP_ABSOLUTE 34					    74 JUMP_ABSOLUTE 34						  
							      >> 76 POP_BLOCK						    >> 76 POP_BLOCK						  
							      								    								  
							      10 >> 78 LOAD_FAST 2 ( j )				    10 >> 78 LOAD_FAST 2 ( j )					  
							      80 LOAD_CONST 3 ( 1 )					    80 LOAD_CONST 3 ( 1 )					  
							      82 INPLACE_ADD						    82 INPLACE_ADD						  
							      84 STORE_FAST 2 ( j )					    84 STORE_FAST 2 ( j )					  
							      								    								  
							      11 86 LOAD_FAST 0 ( S )					    11 86 LOAD_FAST 0 ( S )					  
							      88 LOAD_CONST 0 ( None )					    88 LOAD_CONST 0 ( None )					  
							      90 LOAD_FAST 2 ( j )					    90 LOAD_FAST 2 ( j )					  
							      92 BUILD_SLICE 2						    92 BUILD_SLICE 2						  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 STORE_FAST 0 ( S )					    96 STORE_FAST 0 ( S )					  
							      								    								  
							      12 98 LOAD_FAST 0 ( S )					    12 98 LOAD_FAST 0 ( S )					  
							      100 RETURN_VALUE NEW_LINE					    100 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		      EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		    EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		  EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION
--							      --							    --								  --
def exponentiation ( bas , exp ) :			      Disassembly of <code object exponentiation at 0x7f33e2644930, Disassembly of <code object exponentiation at 0x7f2b0163dc90, script_not_found : None
    if ( exp == 0 ) :					      2 0 LOAD_FAST 1 ( exp )					    2 0 LOAD_FAST 1 ( exp )					  
	return 1 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( exp == 1 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return bas % N ;				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    t = exponentiation ( bas , int ( exp / 2 ) ) ;	      								    								  
    t = ( t * t ) % N ;					      3 8 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 2 ( 1 )					  
    if ( exp % 2 == 0 ) :				      10 RETURN_VALUE						    10 RETURN_VALUE						  
	return t ;					      								    								  
    else :						      4 >> 12 LOAD_FAST 1 ( exp )				    4 >> 12 LOAD_FAST 1 ( exp )					  
	return ( ( bas % N ) * t ) % N ;		      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 28					    18 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 20 LOAD_FAST 0 ( bas )					    5 20 LOAD_FAST 0 ( bas )					  
							      22 LOAD_GLOBAL 0 ( N )					    22 LOAD_CONST 3 ( N )					  
							      24 BINARY_MODULO						    24 BINARY_MODULO						  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      6 >> 28 LOAD_GLOBAL 1 ( exponentiation )			    6 >> 28 LOAD_GLOBAL 0 ( exponentiation )			  
							      30 LOAD_FAST 0 ( bas )					    30 LOAD_FAST 0 ( bas )					  
							      32 LOAD_GLOBAL 2 ( int )					    32 LOAD_GLOBAL 1 ( int )					  
							      34 LOAD_FAST 1 ( exp )					    34 LOAD_FAST 1 ( exp )					  
							      36 LOAD_CONST 3 ( 2 )					    36 LOAD_CONST 4 ( 2 )					  
							      38 BINARY_TRUE_DIVIDE					    38 BINARY_TRUE_DIVIDE					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 STORE_FAST 2 ( t )					    44 STORE_FAST 2 ( t )					  
							      								    								  
							      7 46 LOAD_FAST 2 ( t )					    7 46 LOAD_FAST 2 ( t )					  
							      48 LOAD_FAST 2 ( t )					    48 LOAD_FAST 2 ( t )					  
							      50 BINARY_MULTIPLY					    50 BINARY_MULTIPLY						  
							      52 LOAD_GLOBAL 0 ( N )					    52 LOAD_FAST 3 ( N )					  
							      54 BINARY_MODULO						    54 BINARY_MODULO						  
							      56 STORE_FAST 2 ( t )					    56 STORE_FAST 2 ( t )					  
							      								    								  
							      8 58 LOAD_FAST 1 ( exp )					    8 58 LOAD_FAST 1 ( exp )					  
							      60 LOAD_CONST 3 ( 2 )					    60 LOAD_CONST 4 ( 2 )					  
							      62 BINARY_MODULO						    62 BINARY_MODULO						  
							      64 LOAD_CONST 1 ( 0 )					    64 LOAD_CONST 1 ( 0 )					  
							      66 COMPARE_OP 2 ( == )					    66 COMPARE_OP 2 ( == )					  
							      68 POP_JUMP_IF_FALSE 74					    68 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      9 70 LOAD_FAST 2 ( t )					    9 70 LOAD_FAST 2 ( t )					  
							      72 RETURN_VALUE						    72 RETURN_VALUE						  
							      								    								  
							      11 >> 74 LOAD_FAST 0 ( bas )				    11 >> 74 LOAD_FAST 0 ( bas )				  
							      76 LOAD_GLOBAL 0 ( N )					    76 LOAD_FAST 3 ( N )					  
							      78 BINARY_MODULO						    78 BINARY_MODULO						  
							      80 LOAD_FAST 2 ( t )					    80 LOAD_FAST 2 ( t )					  
							      82 BINARY_MULTIPLY					    82 BINARY_MULTIPLY						  
							      84 LOAD_GLOBAL 0 ( N )					    84 RETURN_VALUE						  
							      86 BINARY_MODULO						    86 LOAD_CONST 0 ( None )					  
							      88 RETURN_VALUE						    88 RETURN_VALUE NEW_LINE					  
							      90 LOAD_CONST 0 ( None )					    								  
							      92 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY
--							      --							    --								  --
def maxSum ( arr , n ) :				      Disassembly of <code object maxSum at 0x7f33e2653ed0, file "< Disassembly of <code object maxSum at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    res = - sys.maxsize					      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_GLOBAL 0 ( sys )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n ) :				      2 LOAD_ATTR 1 ( maxsize )					    2 LOAD_ATTR 1 ( maxsize )					  (item)   File "main.py", line 37, in <module>	  Fi
	curr_sum = 0					      4 UNARY_NEGATIVE						    4 UNARY_NEGATIVE						  le "<dis>", line 2, in maxSum TypeError: 'range_it
	for j in range ( 0 , n ) :			      6 STORE_FAST 2 ( res )					    6 STORE_FAST 2 ( res )					  erator' object is not callable
	    index = int ( ( i + j ) % n )		      								    								  
	    curr_sum += j * arr [ index ]		      3 8 SETUP_LOOP 84 ( to 94 )				    3 8 SETUP_LOOP 80 ( to 94 )					  
	res = max ( res , curr_sum )			      10 LOAD_GLOBAL 2 ( range )				    10 LOAD_GLOBAL 2 ( range )					  
    return res						      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 70 ( to 92 )				    >> 20 FOR_ITER 68 ( to 92 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_CONST 1 ( 0 )					    4 24 LOAD_CONST 1 ( 0 )					  
							      26 STORE_FAST 4 ( curr_sum )				    26 STORE_FAST 4 ( curr_sum )				  
							      								    								  
							      5 28 SETUP_LOOP 50 ( to 80 )				    5 28 SETUP_LOOP 52 ( to 80 )				  
							      30 LOAD_GLOBAL 2 ( range )				    30 LOAD_GLOBAL 2 ( range )					  
							      32 LOAD_CONST 1 ( 0 )					    32 LOAD_CONST 1 ( 0 )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 36 ( to 78 )				    >> 40 FOR_ITER 36 ( to 78 )					  
							      42 STORE_FAST 5 ( j )					    42 STORE_FAST 5 ( j )					  
							      								    								  
							      6 44 LOAD_GLOBAL 3 ( int )				    6 44 LOAD_GLOBAL 3 ( int )					  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 LOAD_FAST 5 ( j )					    48 LOAD_FAST 5 ( j )					  
							      50 BINARY_ADD						    50 BINARY_ADD						  
							      52 LOAD_FAST 1 ( n )					    52 CALL_FUNCTION 1						  
							      54 BINARY_MODULO						    54 LOAD_FAST 1 ( n )					  
							      56 CALL_FUNCTION 1					    56 BINARY_MODULO						  
							      58 STORE_FAST 6 ( index )					    58 CALL_FUNCTION 1						  
							      								    60 STORE_FAST 6 ( index )					  
							      7 60 LOAD_FAST 4 ( curr_sum )				    								  
							      62 LOAD_FAST 5 ( j )					    7 62 LOAD_FAST 4 ( curr_sum )				  
							      64 LOAD_FAST 0 ( arr )					    64 LOAD_FAST 5 ( j )					  
							      66 LOAD_FAST 6 ( index )					    66 LOAD_FAST 0 ( arr )					  
							      68 BINARY_SUBSCR						    68 LOAD_FAST 6 ( index )					  
							      70 BINARY_MULTIPLY					    70 BINARY_SUBSCR						  
							      72 INPLACE_ADD						    72 BINARY_MULTIPLY						  
							      74 STORE_FAST 4 ( curr_sum )				    74 INPLACE_ADD						  
							      76 JUMP_ABSOLUTE 40					    76 STORE_FAST 4 ( curr_sum )				  
							      >> 78 POP_BLOCK						    >> 78 JUMP_ABSOLUTE 40					  
							      								    >> 80 POP_BLOCK						  
							      8 >> 80 LOAD_GLOBAL 4 ( max )				    								  
							      82 LOAD_FAST 2 ( res )					    8 >> 82 LOAD_GLOBAL 4 ( max )				  
							      84 LOAD_FAST 4 ( curr_sum )				    84 LOAD_FAST 2 ( res )					  
							      86 CALL_FUNCTION 2					    86 LOAD_FAST 4 ( curr_sum )					  
							      88 STORE_FAST 2 ( res )					    88 CALL_FUNCTION 2						  
							      90 JUMP_ABSOLUTE 20					    90 STORE_FAST 2 ( res )					  
							      >> 92 POP_BLOCK						    >> 92 POP_BLOCK						  
							      								    								  
							      9 >> 94 LOAD_FAST 2 ( res )				    9 >> 94 LOAD_FAST 2 ( res )					  
							      96 RETURN_VALUE NEW_LINE					    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN
--							      --							    --								  --
def power ( x , y ) :					      Disassembly of <code object power at 0x7f33e2644f60, file "<d Disassembly of <code object power at 0x7f2b0163dc90, file "<d error : /bin/bash: line 1:  4424 Segmentation faul
    if ( y == 0 ) : return 1				      2 0 LOAD_FAST 1 ( y )					    2 0 LOAD_FAST 1 ( y )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    elif ( int ( y % 2 ) == 0 ) :			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
	return ( power ( x , int ( y / 2 ) ) * power ( x , in 4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    else :						      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/WRITE_
	return ( x * power ( x , int ( y / 2 ) ) * power ( x  8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  A_C_PROGRAM_TO_CALCULATE_POWXN.dis
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      3 >> 12 LOAD_GLOBAL 0 ( int )				    3 >> 12 LOAD_GLOBAL 0 ( int )				  
							      14 LOAD_FAST 1 ( y )					    14 LOAD_FAST 1 ( y )					  
							      16 LOAD_CONST 3 ( 2 )					    16 LOAD_CONST 3 ( 2 )					  
							      18 BINARY_MODULO						    18 BINARY_MODULO						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
							      26 POP_JUMP_IF_FALSE 64					    26 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      4 28 LOAD_GLOBAL 1 ( power )				    4 28 LOAD_GLOBAL 1 ( power )				  
							      30 LOAD_FAST 0 ( x )					    30 LOAD_FAST 0 ( x )					  
							      32 LOAD_GLOBAL 0 ( int )					    32 LOAD_GLOBAL 0 ( int )					  
							      34 LOAD_FAST 1 ( y )					    34 LOAD_FAST 1 ( y )					  
							      36 LOAD_CONST 3 ( 2 )					    36 LOAD_CONST 3 ( 2 )					  
							      38 BINARY_TRUE_DIVIDE					    38 BINARY_TRUE_DIVIDE					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 LOAD_GLOBAL 1 ( power )				    44 LOAD_GLOBAL 1 ( power )					  
							      46 LOAD_FAST 0 ( x )					    46 LOAD_FAST 0 ( x )					  
							      48 LOAD_GLOBAL 0 ( int )					    48 LOAD_GLOBAL 0 ( int )					  
							      50 LOAD_FAST 1 ( y )					    50 LOAD_FAST 1 ( y )					  
							      52 LOAD_CONST 3 ( 2 )					    52 LOAD_CONST 3 ( 2 )					  
							      54 BINARY_TRUE_DIVIDE					    54 BINARY_TRUE_DIVIDE					  
							      56 CALL_FUNCTION 1					    56 CALL_FUNCTION 1						  
							      58 CALL_FUNCTION 2					    58 CALL_FUNCTION 2						  
							      60 BINARY_MULTIPLY					    60 BINARY_MULTIPLY						  
							      62 RETURN_VALUE						    62 RETURN_VALUE						  
							      								    								  
							      6 >> 64 LOAD_FAST 0 ( x )					    6 >> 64 LOAD_FAST 0 ( x )					  
							      66 LOAD_GLOBAL 1 ( power )				    66 LOAD_GLOBAL 1 ( power )					  
							      68 LOAD_FAST 0 ( x )					    68 LOAD_FAST 0 ( x )					  
							      70 LOAD_GLOBAL 0 ( int )					    70 LOAD_GLOBAL 0 ( int )					  
							      72 LOAD_FAST 1 ( y )					    72 LOAD_FAST 1 ( y )					  
							      74 LOAD_CONST 3 ( 2 )					    74 LOAD_CONST 3 ( 2 )					  
							      76 BINARY_TRUE_DIVIDE					    76 BINARY_TRUE_DIVIDE					  
							      78 CALL_FUNCTION 1					    78 CALL_FUNCTION 1						  
							      80 CALL_FUNCTION 2					    80 CALL_FUNCTION 2						  
							      82 BINARY_MULTIPLY					    82 BINARY_MULTIPLY						  
							      84 LOAD_GLOBAL 1 ( power )				    84 LOAD_GLOBAL 1 ( power )					  
							      86 LOAD_FAST 0 ( x )					    86 LOAD_FAST 0 ( x )					  
							      88 LOAD_GLOBAL 0 ( int )					    88 LOAD_GLOBAL 0 ( int )					  
							      90 LOAD_FAST 1 ( y )					    90 LOAD_FAST 1 ( y )					  
							      92 LOAD_CONST 3 ( 2 )					    92 LOAD_CONST 3 ( 2 )					  
							      94 BINARY_TRUE_DIVIDE					    94 BINARY_TRUE_DIVIDE					  
							      96 CALL_FUNCTION 1					    96 CALL_FUNCTION 1						  
							      98 CALL_FUNCTION 2					    98 CALL_FUNCTION 2						  
							      100 BINARY_MULTIPLY					    100 BINARY_MULTIPLY						  
							      102 RETURN_VALUE						    102 RETURN_VALUE						  
							      104 LOAD_CONST 0 ( None )					    104 LOAD_CONST 0 ( None )					  
							      106 RETURN_VALUE NEW_LINE					    106 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1
--							      --							    --								  --
def printCountDP ( dist ) :				      Disassembly of <code object printCountDP at 0x7f33e26494b0, f Disassembly of <code object printCountDP at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    count = [ 0 ] * ( dist + 1 )			      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    count [ 0 ] = 1					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  item in run_dis_script():   File "XLM/dis_script.p
    count [ 1 ] = 1					      4 LOAD_FAST 0 ( dist )					    4 LOAD_FAST 0 ( dist )					  y", line 47, in run_dis_script     co_code, co_nlo
    count [ 2 ] = 2					      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
    for i in range ( 3 , dist + 1 ) :			      8 BINARY_ADD						    8 BINARY_ADD						  rts = dis_asm.parse(bytecode) TypeError: cannot un
	count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + c 10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  pack non-iterable NoneType object
    return count [ dist ] ;				      12 STORE_FAST 1 ( count )					    12 STORE_FAST 1 ( count )					  
							      								    								  
							      3 14 LOAD_CONST 2 ( 1 )					    3 14 LOAD_CONST 2 ( 1 )					  
							      16 LOAD_FAST 1 ( count )					    16 LOAD_FAST 1 ( count )					  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  
							      20 STORE_SUBSCR						    20 STORE_SUBSCR						  
							      								    								  
							      4 22 LOAD_CONST 2 ( 1 )					    4 22 LOAD_CONST 2 ( 1 )					  
							      24 LOAD_FAST 1 ( count )					    24 LOAD_FAST 1 ( count )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 STORE_SUBSCR						    28 STORE_SUBSCR						  
							      								    								  
							      5 30 LOAD_CONST 3 ( 2 )					    5 30 LOAD_CONST 3 ( 2 )					  
							      32 LOAD_FAST 1 ( count )					    32 LOAD_FAST 1 ( count )					  
							      34 LOAD_CONST 3 ( 2 )					    34 LOAD_CONST 3 ( 2 )					  
							      36 STORE_SUBSCR						    36 STORE_SUBSCR						  
							      								    								  
							      6 38 SETUP_LOOP 62 ( to 102 )				    6 38 SETUP_LOOP 64 ( to 102 )				  
							      40 LOAD_GLOBAL 0 ( range )				    40 LOAD_GLOBAL 0 ( range )					  
							      42 LOAD_CONST 4 ( 3 )					    42 LOAD_CONST 4 ( 3 )					  
							      44 LOAD_FAST 0 ( dist )					    44 LOAD_FAST 0 ( dist )					  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 2 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 CALL_FUNCTION 2					    50 CALL_FUNCTION 2						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 44 ( to 100 )				    >> 54 FOR_ITER 44 ( to 100 )				  
							      56 STORE_FAST 2 ( i )					    56 STORE_FAST 2 ( i )					  
							      								    								  
							      7 58 LOAD_FAST 1 ( count )				    7 58 LOAD_FAST 1 ( count )					  
							      60 LOAD_FAST 2 ( i )					    60 LOAD_FAST 2 ( i )					  
							      62 LOAD_CONST 2 ( 1 )					    62 LOAD_CONST 2 ( 1 )					  
							      64 BINARY_SUBTRACT					    64 BINARY_SUBTRACT						  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 1 ( count )					    68 LOAD_FAST 1 ( count )					  
							      70 LOAD_FAST 2 ( i )					    70 LOAD_FAST 2 ( i )					  
							      72 LOAD_CONST 3 ( 2 )					    72 LOAD_CONST 3 ( 2 )					  
							      74 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 BINARY_ADD						    78 BINARY_ADD						  
							      80 LOAD_FAST 1 ( count )					    80 LOAD_FAST 1 ( count )					  
							      82 LOAD_FAST 2 ( i )					    82 LOAD_FAST 2 ( i )					  
							      84 LOAD_CONST 4 ( 3 )					    84 LOAD_CONST 4 ( 3 )					  
							      86 BINARY_SUBTRACT					    86 BINARY_SUBTRACT						  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 BINARY_ADD						    90 BINARY_ADD						  
							      92 LOAD_FAST 1 ( count )					    92 LOAD_FAST 1 ( count )					  
							      94 LOAD_FAST 2 ( i )					    94 LOAD_FAST 2 ( i )					  
							      96 STORE_SUBSCR						    96 LOAD_CONST 4 ( 3 )					  
							      98 JUMP_ABSOLUTE 54					    98 BINARY_SUBTRACT						  
							      >> 100 POP_BLOCK						    100 BINARY_SUBSCR						  
							      								    102 BINARY_ADD						  
							      8 >> 102 LOAD_FAST 1 ( count )				    104 = BINARY_ADD						  
							      104 LOAD_FAST 0 ( dist )					    106 LOAD_FAST 1 ( count )					  
							      106 BINARY_SUBSCR						    108 LOAD_FAST 2 ( i )					  
							      108 RETURN_VALUE NEW_LINE					    110 LOAD_CONST 4 ( 3 )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 BINARY_SUBSCR						  
							      								    116 BINARY_ADD						  
							      								    118 LOAD_FAST 1 ( count )					  
							      								    120 LOAD_FAST 2 ( i )					  
							      								    122 STORE_SUBSCR						  
							      								    124 JUMP_ABSOLUTE 54					  
							      								    >> 126 POP_BLOCK						  
							      								    								  
							      								    8 >> 128 LOAD_FAST 1 ( count )				  
							      								    130 LOAD_FAST 0 ( dist )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			      CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			    CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT				  CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT
--							      --							    --								  --
def checkJumbled ( num ) :				      Disassembly of <code object checkJumbled at 0x7f33e2644930, f Disassembly of <code object checkJumbled at 0x7f2b0163dc90, f failure : #Results: 5, 10
    if ( num / 10 == 0 ) :				      2 0 LOAD_FAST 0 ( num )					    2 0 LOAD_FAST 0 ( num )					  
	return True					      2 LOAD_CONST 1 ( 10 )					    2 LOAD_CONST 1 ( 10 )					  
    while ( num != 0 ) :				      4 BINARY_TRUE_DIVIDE					    4 BINARY_TRUE_DIVIDE					  
	if ( num / 10 == 0 ) :				      6 LOAD_CONST 2 ( 0 )					    6 LOAD_CONST 2 ( 0 )					  
	    return True					      8 COMPARE_OP 2 ( == )					    8 COMPARE_OP 2 ( == )					  
	digit1 = num % 10				      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 16					  
	digit2 = ( num / 10 ) % 10			      								    								  
	if ( abs ( digit2 - digit1 ) > 1 ) :		      3 12 LOAD_CONST 3 ( True )				    3 12 LOAD_CONST 3 ( True )					  
	    return False				      14 RETURN_VALUE						    14 RETURN_VALUE						  
	num = num / 10					      								    								  
    return True						      4 >> 16 SETUP_LOOP 76 ( to 94 )				    4 >> 16 SETUP_LOOP 80 ( to 94 )				  
							      >> 18 LOAD_FAST 0 ( num )					    >> 18 LOAD_FAST 0 ( num )					  
							      20 LOAD_CONST 2 ( 0 )					    20 LOAD_CONST 2 ( 0 )					  
							      22 COMPARE_OP 3 ( != )					    22 COMPARE_OP 3 ( != )					  
							      24 POP_JUMP_IF_FALSE 92					    24 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      5 26 LOAD_FAST 0 ( num )					    5 26 LOAD_FAST 0 ( num )					  
							      28 LOAD_CONST 1 ( 10 )					    28 LOAD_CONST 1 ( 10 )					  
							      30 BINARY_TRUE_DIVIDE					    30 BINARY_TRUE_DIVIDE					  
							      32 LOAD_CONST 2 ( 0 )					    32 LOAD_CONST 2 ( 0 )					  
							      34 COMPARE_OP 2 ( == )					    34 COMPARE_OP 2 ( == )					  
							      36 POP_JUMP_IF_FALSE 42					    36 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      6 38 LOAD_CONST 3 ( True )				    6 38 LOAD_CONST 3 ( True )					  
							      40 RETURN_VALUE						    40 RETURN_VALUE						  
							      								    								  
							      7 >> 42 LOAD_FAST 0 ( num )				    7 >> 42 LOAD_FAST 0 ( num )					  
							      44 LOAD_CONST 1 ( 10 )					    44 LOAD_CONST 1 ( 10 )					  
							      46 BINARY_MODULO						    46 BINARY_MODULO						  
							      48 STORE_FAST 1 ( digit1 )				    48 STORE_FAST 1 ( digit1 )					  
							      								    								  
							      8 50 LOAD_FAST 0 ( num )					    8 50 LOAD_FAST 0 ( num )					  
							      52 LOAD_CONST 1 ( 10 )					    52 LOAD_CONST 1 ( 10 )					  
							      54 BINARY_TRUE_DIVIDE					    54 BINARY_TRUE_DIVIDE					  
							      56 LOAD_CONST 1 ( 10 )					    56 LOAD_CONST 1 ( 10 )					  
							      58 BINARY_MODULO						    58 BINARY_MODULO						  
							      60 STORE_FAST 2 ( digit2 )				    60 STORE_FAST 2 ( digit)					  
							      								    								  
							      9 62 LOAD_GLOBAL 0 ( abs )				    9 62 LOAD_GLOBAL 0 ( abs )					  
							      64 LOAD_FAST 2 ( digit2 )					    64 LOAD_FAST 1 ( digit2 )					  
							      66 LOAD_FAST 1 ( digit1 )					    66 LOAD_FAST 2 ( digit1 )					  
							      68 BINARY_SUBTRACT					    68 BINARY_SUBTRACT						  
							      70 CALL_FUNCTION 1					    70 CALL_FUNCTION 1						  
							      72 LOAD_CONST 4 ( 1 )					    72 LOAD_CONST 4 ( 1 )					  
							      74 COMPARE_OP 4 ( > )					    74 COMPARE_OP 4 ( > )					  
							      76 POP_JUMP_IF_FALSE 82					    76 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      10 78 LOAD_CONST 5 ( False )				    10 78 LOAD_CONST 5 ( False )				  
							      80 RETURN_VALUE						    80 RETURN_VALUE						  
							      								    								  
							      11 >> 82 LOAD_FAST 0 ( num )				    11 >> 82 LOAD_FAST 0 ( num )				  
							      84 LOAD_CONST 1 ( 10 )					    84 LOAD_CONST 1 ( 10 )					  
							      86 BINARY_TRUE_DIVIDE					    86 BINARY_TRUE_DIVIDE					  
							      88 STORE_FAST 0 ( num )					    88 STORE_FAST 0 ( num )					  
							      90 JUMP_ABSOLUTE 18					    90 JUMP_ABSOLUTE 18						  
							      >> 92 POP_BLOCK						    >> 92 POP_BLOCK						  
							      								    								  
							      12 >> 94 LOAD_CONST 3 ( True )				    12 >> 94 LOAD_CONST 3 ( True )				  
							      96 RETURN_VALUE NEW_LINE					    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CAESAR_CIPHER						      CAESAR_CIPHER						    CAESAR_CIPHER						  CAESAR_CIPHER
--							      --							    --								  --
def encrypt ( text , s ) :				      Disassembly of <code object encrypt at 0x7f33e2644f60, file " Disassembly of <code object encrypt at 0x7f2b0163dc90, file " error : /bin/bash: line 1:  4452 Segmentation faul
    result = ""						      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( len ( text ) ) :			      2 STORE_FAST 2 ( result )					    2 STORE_FAST 2 ( result )					  ataset/bin/python XLM/dis_script.py --script_path
	char = text [ i ]				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	if ( char.isupper ( ) ) :			      3 4 SETUP_LOOP 102 ( to 108 )				    3 4 SETUP_LOOP 104 ( to 110 )				  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/CAESAR
	    result += chr ( ( ord ( char ) + s - 65 ) % 26 +  6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  _CIPHER.dis
	else :						      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_GLOBAL 1 ( len )					  
	    result += chr ( ( ord ( char ) + s - 97 ) % 26 +  10 LOAD_FAST 0 ( text )					    10 LOAD_FAST 0 ( text )					  
    return result					      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 86 ( to 106 )				    >> 18 FOR_ITER 80 ( to 108 )				  
							      20 STORE_FAST 3 ( i )					    20 STORE_FAST 3 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( text )					    4 22 LOAD_FAST 0 ( text )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 STORE_FAST 4 ( char )					    28 STORE_FAST 4 ( char )					  
							      								    								  
							      5 30 LOAD_FAST 4 ( char )					    5 30 LOAD_FAST 4 ( char )					  
							      32 LOAD_METHOD 2 ( isupper )				    32 LOAD_METHOD 2 ( isupper )				  
							      34 CALL_METHOD 0						    34 CALL_METHOD 0						  
							      36 POP_JUMP_IF_FALSE 72					    36 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      6 38 LOAD_FAST 2 ( result )				    6 38 LOAD_FAST 2 ( result )					  
							      40 LOAD_GLOBAL 3 ( chr )					    40 LOAD_GLOBAL 3 ( chr )					  
							      42 LOAD_GLOBAL 4 ( ord )					    42 LOAD_GLOBAL 4 ( ord )					  
							      44 LOAD_FAST 4 ( char )					    44 LOAD_FAST 4 ( char )					  
							      46 CALL_FUNCTION 1					    46 CALL_FUNCTION 1						  
							      48 LOAD_FAST 1 ( s )					    48 LOAD_FAST 1 ( s )					  
							      50 BINARY_ADD						    50 BINARY_ADD						  
							      52 LOAD_CONST 2 ( 65 )					    52 LOAD_CONST 2 ( 65 )					  
							      54 BINARY_SUBTRACT					    54 BINARY_SUBTRACT						  
							      56 LOAD_CONST 3 ( 26 )					    56 LOAD_CONST 3 ( 65 )					  
							      58 BINARY_MODULO						    58 BINARY_MODULO						  
							      60 LOAD_CONST 2 ( 65 )					    60 LOAD_CONST 4 ( 65 )					  
							      62 BINARY_ADD						    62 BINARY_ADD						  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 INPLACE_ADD						    66 INPLACE_ADD						  
							      68 STORE_FAST 2 ( result )				    68 STORE_FAST 2 ( result )					  
							      70 JUMP_ABSOLUTE 18					    70 JUMP_ABSOLUTE 18						  
							      								    								  
							      8 >> 72 LOAD_FAST 2 ( result )				    8 >> 72 LOAD_FAST 2 ( result )				  
							      74 LOAD_GLOBAL 3 ( chr )					    74 LOAD_GLOBAL 3 ( chr )					  
							      76 LOAD_GLOBAL 4 ( ord )					    76 LOAD_GLOBAL 4 ( ord )					  
							      78 LOAD_FAST 4 ( char )					    78 LOAD_FAST 4 ( char )					  
							      80 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      82 LOAD_FAST 1 ( s )					    82 LOAD_FAST 1 ( s )					  
							      84 BINARY_ADD						    84 BINARY_ADD						  
							      86 LOAD_CONST 4 ( 97 )					    86 LOAD_CONST 5 ( 97 )					  
							      88 BINARY_SUBTRACT					    88 BINARY_SUBTRACT						  
							      90 LOAD_CONST 3 ( 26 )					    90 LOAD_CONST 6 ( 97 )					  
							      92 BINARY_MODULO						    92 BINARY_MODULO						  
							      94 LOAD_CONST 4 ( 97 )					    94 CALL_FUNCTION 1						  
							      96 BINARY_ADD						    96 INPLACE_ADD						  
							      98 CALL_FUNCTION 1					    98 STORE_FAST 2 ( result )					  
							      100 INPLACE_ADD						    100 JUMP_ABSOLUTE 18					  
							      102 STORE_FAST 2 ( result )				    >> 102 POP_BLOCK						  
							      104 JUMP_ABSOLUTE 18					    								  
							      >> 106 POP_BLOCK						    9 >> 104 LOAD_FAST 2 ( result )				  
							      								    106 RETURN_VALUE NEW_LINE					  
							      9 >> 108 LOAD_FAST 2 ( result )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING
--							      --							    --								  --
def twoWaySort ( arr , n ) :				      Disassembly of <code object twoWaySort at 0x7f33e2653f60, fil Disassembly of <code object twoWaySort at 0x7f2b0163dc90, fil error : /bin/bash: line 1:  4462 Segmentation faul
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 46 ( to 48 )				    2 0 SETUP_LOOP 46 ( to 48 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( arr [ i ] & 1 ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    arr [ i ] *= - 1				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    arr.sort ( )					      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/SORT_E
    for i in range ( 0 , n ) :				      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  VEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCE
	if ( arr [ i ] & 1 ) :				      10 GET_ITER						    10 GET_ITER							  NDING_ORDER_1.dis
	    arr [ i ] *= - 1				      >> 12 FOR_ITER 32 ( to 46 )				    >> 12 FOR_ITER 30 ( to 46 )					  
							      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
							      								    								  
							      3 16 LOAD_FAST 0 ( arr )					    3 16 LOAD_FAST 0 ( arr )					  
							      18 LOAD_FAST 2 ( i )					    18 LOAD_FAST 2 ( i )					  
							      20 BINARY_SUBSCR						    20 BINARY_SUBSCR						  
							      22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 2 ( 1 )					  
							      24 BINARY_AND						    24 BINARY_AND						  
							      26 POP_JUMP_IF_FALSE 12					    26 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      4 28 LOAD_FAST 0 ( arr )					    4 28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 DUP_TOP_TWO						    32 DUP_TOP_TWO						  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 3 ( - 1 )					    36 LOAD_CONST 3 ( - 1 )					  
							      38 INPLACE_MULTIPLY					    38 INPLACE_MULTIPLY						  
							      40 ROT_THREE						    40 ROT_THREE						  
							      42 STORE_SUBSCR						    42 STORE_SUBSCR						  
							      44 JUMP_ABSOLUTE 12					    44 JUMP_ABSOLUTE 12						  
							      >> 46 POP_BLOCK						    >> 46 POP_BLOCK						  
							      								    								  
							      5 >> 48 LOAD_FAST 0 ( arr )				    5 >> 48 LOAD_FAST 0 ( arr )					  
							      50 LOAD_METHOD 1 ( sort )					    50 LOAD_METHOD 1 ( sort )					  
							      52 CALL_METHOD 0						    52 CALL_METHOD 0						  
							      54 POP_TOP						    54 POP_TOP							  
							      								    								  
							      6 56 SETUP_LOOP 46 ( to 104 )				    6 56 SETUP_LOOP 40 ( to 96 )				  
							      58 LOAD_GLOBAL 0 ( range )				    58 LOAD_GLOBAL 0 ( range )					  
							      60 LOAD_CONST 1 ( 0 )					    60 LOAD_CONST 1 ( 0 )					  
							      62 LOAD_FAST 1 ( n )					    62 LOAD_FAST 1 ( n )					  
							      64 CALL_FUNCTION 2					    64 CALL_FUNCTION 2						  
							      66 GET_ITER						    66 GET_ITER							  
							      >> 68 FOR_ITER 32 ( to 102 )				    >> 68 FOR_ITER 28 ( to 94 )					  
							      70 STORE_FAST 2 ( i )					    70 STORE_FAST 2 ( i )					  
							      								    								  
							      7 72 LOAD_FAST 0 ( arr )					    7 72 LOAD_FAST 0 ( arr )					  
							      74 LOAD_FAST 2 ( i )					    74 LOAD_FAST 2 ( i )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 2 ( 1 )					  
							      80 BINARY_AND						    80 BINARY_AND						  
							      82 POP_JUMP_IF_FALSE 68					    82 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      8 84 LOAD_FAST 0 ( arr )					    8 84 LOAD_FAST 0 ( arr )					  
							      86 LOAD_FAST 2 ( i )					    86 LOAD_FAST 2 ( i )					  
							      88 DUP_TOP_TWO						    88 DUP_TOP_TWO						  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 LOAD_CONST 3 ( - 1 )					    92 LOAD_CONST 3 ( - 1 )					  
							      94 INPLACE_MULTIPLY					    94 INPLACE_MULTIPLY						  
							      96 ROT_THREE						    96 ROT_THREE						  
							      98 STORE_SUBSCR						    98 STORE_SUBSCR						  
							      100 JUMP_ABSOLUTE 68					    100 JUMP_ABSOLUTE 68					  
							      >> 102 POP_BLOCK						    >> 102 POP_BLOCK						  
							      >> 104 LOAD_CONST 0 ( None )				    >> 104 LOAD_CONST 0 ( None )				  
							      106 RETURN_VALUE NEW_LINE					    106 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1
--							      --							    --								  --
def isHeap ( arr , n ) :				      Disassembly of <code object isHeap at 0x7f33e2644f60, file "< Disassembly of <code object isHeap at 0x7f2b0163dc90, file "< error : /bin/bash: line 1:  4472 Segmentation faul
    for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :	      2 0 SETUP_LOOP 104 ( to 106 )				    2 0 SETUP_LOOP 96 ( to 98 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if arr [ 2 * i + 1 ] > arr [ i ] :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    return False				      4 LOAD_GLOBAL 1 ( int )					    4 LOAD_GLOBAL 1 ( int )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ]  6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/HOW_TO
	    return False				      8 LOAD_CONST 1 ( 2 )					    8 LOAD_CONST 1 ( 2 )					  _CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1
    return True						      10 BINARY_SUBTRACT					    10 BINARY_SUBTRACT						  .dis
							      12 LOAD_CONST 1 ( 2 )					    12 LOAD_CONST 1 ( 2 )					  
							      14 BINARY_TRUE_DIVIDE					    14 BINARY_TRUE_DIVIDE					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 2 ( 1 )					  
							      20 BINARY_ADD						    20 BINARY_ADD						  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 76 ( to 104 )				    >> 26 FOR_ITER 82 ( to 96 )					  
							      28 STORE_FAST 2 ( i )					    28 STORE_FAST 2 ( i )					  
							      								    								  
							      3 30 LOAD_FAST 0 ( arr )					    3 30 LOAD_FAST 0 ( arr )					  
							      32 LOAD_CONST 1 ( 2 )					    32 LOAD_CONST 1 ( 2 )					  
							      34 LOAD_FAST 2 ( i )					    34 LOAD_FAST 2 ( i )					  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 2 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 0 ( arr )					    44 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 2 ( i )					    46 LOAD_FAST 2 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 COMPARE_OP 4 ( > )					    50 COMPARE_OP 4 ( > )					  
							      52 POP_JUMP_IF_FALSE 58					    52 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      4 54 LOAD_CONST 3 ( False )				    4 54 LOAD_CONST 3 ( False )					  
							      56 RETURN_VALUE						    56 RETURN_VALUE						  
							      								    								  
							      5 >> 58 LOAD_CONST 1 ( 2 )				    5 >> 58 LOAD_CONST 1 ( 2 )					  
							      60 LOAD_FAST 2 ( i )					    60 LOAD_FAST 2 ( i )					  
							      62 BINARY_MULTIPLY					    62 BINARY_MULTIPLY						  
							      64 LOAD_CONST 1 ( 2 )					    64 LOAD_CONST 1 ( 2 )					  
							      66 BINARY_ADD						    66 BINARY_ADD						  
							      68 LOAD_FAST 1 ( n )					    68 LOAD_FAST 1 ( n )					  
							      70 COMPARE_OP 0 ( < )					    70 COMPARE_OP 0 ( < )					  
							      72 POP_JUMP_IF_FALSE 26					    72 POP_JUMP_IF_FALSE 26					  
							      74 LOAD_FAST 0 ( arr )					    74 LOAD_FAST 0 ( arr )					  
							      76 LOAD_CONST 1 ( 2 )					    76 LOAD_CONST 1 ( 2 )					  
							      78 LOAD_FAST 2 ( i )					    78 LOAD_FAST 2 ( i )					  
							      80 BINARY_MULTIPLY					    80 BINARY_MULTIPLY						  
							      82 LOAD_CONST 1 ( 2 )					    82 LOAD_CONST 1 ( 2 )					  
							      84 BINARY_ADD						    84 BINARY_ADD						  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 LOAD_FAST 0 ( arr )					    88 LOAD_FAST 0 ( arr )					  
							      90 LOAD_FAST 2 ( i )					    90 LOAD_FAST 2 ( i )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 COMPARE_OP 4 ( > )					    94 COMPARE_OP 4 ( > )					  
							      96 POP_JUMP_IF_FALSE 26					    96 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      6 98 LOAD_CONST 3 ( False )				    6 98 LOAD_CONST 3 ( False )					  
							      100 RETURN_VALUE						    100 RETURN_VALUE						  
							      102 JUMP_ABSOLUTE 26					    102 JUMP_ABSOLUTE 26					  
							      >> 104 POP_BLOCK						    >> 104 POP_BLOCK						  
							      								    								  
							      7 >> 106 LOAD_CONST 4 ( True )				    7 >> 106 LOAD_CONST 4 ( True )				  
							      108 RETURN_VALUE NEW_LINE					    108 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S
--							      --							    --								  --
def find ( a , b , k , n1 , n2 ) :			      Disassembly of <code object find at 0x7f33e2653f60, file "<di Disassembly of <code object find at 0x7f2b0163dc90, file "<di script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    for i in range ( n2 ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	s.add ( b [ i ] )				      4 STORE_FAST 5 ( s )					    4 STORE_FAST 5 ( s )					  
    missing = 0						      								    								  
    for i in range ( n1 ) :				      3 6 SETUP_LOOP 30 ( to 38 )				    3 6 SETUP_LOOP 28 ( to 34 )					  
	if a [ i ] not in s :				      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	    missing += 1				      10 LOAD_FAST 4 ( n2 )					    10 LOAD_FAST 3 ( n2 )					  
	if missing == k :				      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	    return a [ i ]				      14 GET_ITER						    14 GET_ITER							  
    return - 1						      >> 16 FOR_ITER 18 ( to 36 )				    >> 16 FOR_ITER 20 ( to 32 )					  
							      18 STORE_FAST 6 ( i )					    18 STORE_FAST 6 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 5 ( s )					    4 20 LOAD_FAST 5 ( s )					  
							      22 LOAD_METHOD 2 ( add )					    22 LOAD_METHOD 2 ( add )					  
							      24 LOAD_FAST 1 ( b )					    24 LOAD_FAST 1 ( b )					  
							      26 LOAD_FAST 6 ( i )					    26 LOAD_FAST 6 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 CALL_METHOD 1						    30 CALL_METHOD 1						  
							      32 POP_TOP						    32 POP_TOP							  
							      34 JUMP_ABSOLUTE 16					    34 JUMP_ABSOLUTE 16						  
							      >> 36 POP_BLOCK						    >> 36 POP_BLOCK						  
							      								    								  
							      5 >> 38 LOAD_CONST 1 ( 0 )				    5 >> 38 LOAD_CONST 1 ( 0 )					  
							      40 STORE_FAST 7 ( missing )				    40 STORE_FAST 7 ( missing )					  
							      								    								  
							      6 42 SETUP_LOOP 52 ( to 96 )				    6 42 SETUP_LOOP 46 ( to 96 )				  
							      44 LOAD_GLOBAL 1 ( range )				    44 LOAD_GLOBAL 1 ( range )					  
							      46 LOAD_FAST 3 ( n1 )					    46 LOAD_FAST 2 ( n1 )					  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 40 ( to 94 )				    >> 52 FOR_ITER 34 ( to 94 )					  
							      54 STORE_FAST 6 ( i )					    54 STORE_FAST 6 ( i )					  
							      								    								  
							      7 56 LOAD_FAST 0 ( a )					    7 56 LOAD_FAST 0 ( a )					  
							      58 LOAD_FAST 6 ( i )					    58 LOAD_FAST 6 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 5 ( s )					    62 LOAD_FAST 5 ( s )					  
							      64 COMPARE_OP 7 ( not in )				    64 COMPARE_OP 7 ( not in )					  
							      66 POP_JUMP_IF_FALSE 76					    66 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      8 68 LOAD_FAST 7 ( missing )				    8 68 LOAD_FAST 7 ( missing )				  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 INPLACE_ADD						    >> 72 INPLACE_ADD						  
							      74 STORE_FAST 7 ( missing )				    74 STORE_FAST 7 ( missing )					  
							      								    								  
							      9 >> 76 LOAD_FAST 7 ( missing )				    9 >> 76 LOAD_FAST 7 ( missing )				  
							      78 LOAD_FAST 2 ( k )					    78 LOAD_FAST 4 ( k )					  
							      80 COMPARE_OP 2 ( == )					    80 COMPARE_OP 2 ( == )					  
							      82 POP_JUMP_IF_FALSE 52					    82 POP_JUMP_IF_FALSE 88					  
							      								    								  
							      10 84 LOAD_FAST 0 ( a )					    10 84 LOAD_FAST 0 ( a )					  
							      86 LOAD_FAST 6 ( i )					    86 LOAD_FAST 6 ( i )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 RETURN_VALUE						    90 RETURN_VALUE						  
							      92 JUMP_ABSOLUTE 52					    92 JUMP_ABSOLUTE 52						  
							      >> 94 POP_BLOCK						    >> 94 POP_BLOCK						  
							      								    								  
							      11 >> 96 LOAD_CONST 3 ( - 1 )				    11 >> 96 LOAD_CONST 3 ( - 1 )				  
							      98 RETURN_VALUE NEW_LINE					    98 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	      COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	    COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	  COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE
--							      --							    --								  --
def findCountOfSolutions ( n , p ) :			      Disassembly of <code object findCountOfSolutions at 0x7f33e26 Disassembly of <code object findCountOfSolutions at 0x7f2b016 error : /bin/bash: line 1:  4482 Segmentation faul
    ans = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for x in range ( 1 , p ) :				      2 STORE_FAST 2 ( ans )					    2 STORE_FAST 2 ( ans )					  ataset/bin/python XLM/dis_script.py --script_path
	if ( ( x * x ) % p == 1 ) :			      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    last = x + p * ( n / p ) ;			      3 4 SETUP_LOOP 86 ( to 92 )				    3 4 SETUP_LOOP 92 ( to 98 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/COUNT_
	    if ( last > n ) :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE.d
		last -= p ;				      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  is
	    ans += ( ( last - x ) / p + 1 ) ;		      10 LOAD_FAST 1 ( p )					    10 LOAD_FAST 1 ( p )					  
    return int ( ans ) ;				      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 72 ( to 90 )				    >> 16 FOR_ITER 80 ( to 96 )					  
							      18 STORE_FAST 3 ( x )					    18 STORE_FAST 3 ( x )					  
							      								    								  
							      4 20 LOAD_FAST 3 ( x )					    4 20 LOAD_FAST 3 ( x )					  
							      22 LOAD_FAST 3 ( x )					    22 LOAD_FAST 3 ( x )					  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 LOAD_FAST 1 ( p )					    26 LOAD_FAST 1 ( p )					  
							      28 BINARY_MODULO						    28 BINARY_MODULO						  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 16					    34 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      5 36 LOAD_FAST 3 ( x )					    5 36 LOAD_FAST 3 ( x )					  
							      38 LOAD_FAST 1 ( p )					    38 LOAD_FAST 1 ( p )					  
							      40 LOAD_FAST 0 ( n )					    40 LOAD_FAST 0 ( n )					  
							      42 LOAD_FAST 1 ( p )					    42 LOAD_FAST 1 ( p )					  
							      44 BINARY_TRUE_DIVIDE					    44 BINARY_TRUE_DIVIDE					  
							      46 BINARY_MULTIPLY					    46 BINARY_MULTIPLY						  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 STORE_FAST 4 ( last )					    50 STORE_FAST 4 ( last )					  
							      								    								  
							      6 52 LOAD_FAST 4 ( last )					    6 52 LOAD_FAST 4 ( last )					  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 0 ( n )					  
							      56 COMPARE_OP 4 ( > )					    56 COMPARE_OP 4 ( > )					  
							      58 POP_JUMP_IF_FALSE 68					    58 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      7 60 LOAD_FAST 4 ( last )					    7 60 LOAD_FAST 4 ( last )					  
							      62 LOAD_FAST 1 ( p )					    62 LOAD_FAST 1 ( p )					  
							      64 INPLACE_SUBTRACT					    64 INPLACE_SUBTRACT						  
							      66 STORE_FAST 4 ( last )					    66 STORE_FAST 4 ( last )					  
							      								    								  
							      8 >> 68 LOAD_FAST 2 ( ans )				    8 >> 68 LOAD_FAST 2 ( ans )					  
							      70 LOAD_FAST 4 ( last )					    70 LOAD_FAST 4 ( last )					  
							      72 LOAD_FAST 3 ( x )					    72 LOAD_FAST 3 ( x )					  
							      74 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      76 LOAD_FAST 1 ( p )					    76 LOAD_FAST 1 ( p )					  
							      78 BINARY_TRUE_DIVIDE					    78 BINARY_TRUE_DIVIDE					  
							      80 LOAD_CONST 2 ( 1 )					    80 LOAD_CONST 2 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 INPLACE_ADD						    84 INPLACE_ADD						  
							      86 STORE_FAST 2 ( ans )					    86 STORE_FAST 2 ( ans )					  
							      88 JUMP_ABSOLUTE 16					    88 JUMP_ABSOLUTE 16						  
							      >> 90 POP_BLOCK						    >> 90 POP_BLOCK						  
							      								    								  
							      9 >> 92 LOAD_GLOBAL 1 ( int )				    9 >> 92 LOAD_GLOBAL 1 ( int )				  
							      94 LOAD_FAST 2 ( ans )					    94 LOAD_FAST 2 ( ans )					  
							      96 CALL_FUNCTION 1					    96 CALL_FUNCTION 1						  
							      98 RETURN_VALUE NEW_LINE					    98 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
def to_upper ( string ) :				      Disassembly of <code object to_upper at 0x7f33e26494b0, file  Disassembly of <code object to_upper at 0x7f2b0163dc90, file  script_not_found : None
    for i in range ( len ( string ) ) :			      2 0 SETUP_LOOP 108 ( to 110 )				    2 0 SETUP_LOOP 96 ( to 98 )					  
	if ( 'a' <= string [ i ] <= 'z' ) :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    string = ( string [ 0 : i ] + chr ( ord ( string  4 LOAD_GLOBAL 1 ( len )					    4 LOAD_GLOBAL 1 ( len )					  
    return string ;					      6 LOAD_FAST 0 ( string )					    6 LOAD_FAST 0 ( string )					  
							      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 92 ( to 108 )				    >> 14 FOR_ITER 82 ( to 96 )					  
							      16 STORE_FAST 1 ( i )					    16 STORE_FAST 1 ( i )					  
							      								    								  
							      3 18 LOAD_CONST 1 ( 'a' )					    3 18 LOAD_CONST 1 ( 'a' )					  
							      20 LOAD_FAST 0 ( string )					    20 LOAD_FAST 0 ( string )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 1 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 DUP_TOP						    26 LOAD_CONST 2 ( 'z' )					  
							      28 ROT_THREE						    28 COMPARE_OP 1 ( <= )					  
							      30 COMPARE_OP 1 ( <= )					    30 POP_JUMP_IF_FALSE 14					  
							      32 POP_JUMP_IF_FALSE 42					    								  
							      34 LOAD_CONST 2 ( 'z' )					    4 32 LOAD_FAST 0 ( string )					  
							      36 COMPARE_OP 1 ( <= )					    34 LOAD_CONST 3 ( 0 )					  
							      38 POP_JUMP_IF_FALSE 14					    36 LOAD_FAST 1 ( i )					  
							      40 JUMP_FORWARD 4 ( to 46 )				    38 BUILD_SLICE 2						  
							      >> 42 POP_TOP						    40 BINARY_SUBSCR						  
							      44 JUMP_ABSOLUTE 14					    42 LOAD_GLOBAL 2 ( chr )					  
							      								    44 LOAD_GLOBAL 3 ( ord )					  
							      4 >> 46 LOAD_FAST 0 ( string )				    46 LOAD_FAST 0 ( string )					  
							      48 LOAD_CONST 3 ( 0 )					    48 LOAD_FAST 1 ( i )					  
							      50 LOAD_FAST 1 ( i )					    50 BINARY_SUBSCR						  
							      52 BUILD_SLICE 2						    52 CALL_FUNCTION 1						  
							      54 BINARY_SUBSCR						    54 LOAD_GLOBAL 3 ( ord )					  
							      56 LOAD_GLOBAL 2 ( chr )					    56 LOAD_CONST 1 ( 'a' )					  
							      58 LOAD_GLOBAL 3 ( ord )					    58 CALL_FUNCTION 1						  
							      60 LOAD_FAST 0 ( string )					    60 BINARY_ADD						  
							      62 LOAD_FAST 1 ( i )					    62 LOAD_GLOBAL 3 ( ord )					  
							      64 BINARY_SUBSCR						    64 LOAD_CONST 1 ( 'A' )					  
							      66 CALL_FUNCTION 1					    66 CALL_FUNCTION 1						  
							      68 LOAD_GLOBAL 3 ( ord )					    68 BINARY_ADD						  
							      70 LOAD_CONST 1 ( 'a' )					    70 LOAD_GLOBAL 3 ( ord )					  
							      72 CALL_FUNCTION 1					    72 LOAD_CONST 1 ( 'A' )					  
							      74 BINARY_SUBTRACT					    74 CALL_FUNCTION 1						  
							      76 LOAD_GLOBAL 3 ( ord )					    76 BINARY_ADD						  
							      78 LOAD_CONST 4 ( 'A' )					    78 CALL_FUNCTION 1						  
							      80 CALL_FUNCTION 1					    80 BINARY_ADD						  
							      82 BINARY_ADD						    82 LOAD_FAST 0 ( string )					  
							      84 CALL_FUNCTION 1					    84 LOAD_FAST 1 ( i )					  
							      86 BINARY_ADD						    86 LOAD_CONST 4 ( 1 )					  
							      88 LOAD_FAST 0 ( string )					    88 BINARY_ADD						  
							      90 LOAD_FAST 1 ( i )					    90 LOAD_CONST 0 ( None )					  
							      92 LOAD_CONST 5 ( 1 )					    92 BUILD_SLICE 2						  
							      94 BINARY_ADD						    94 BINARY_SUBSCR						  
							      96 LOAD_CONST 0 ( None )					    96 BINARY_ADD						  
							      98 BUILD_SLICE 2						    98 STORE_FAST 0 ( string )					  
							      100 BINARY_SUBSCR						    100 JUMP_ABSOLUTE 14					  
							      102 BINARY_ADD						    >> 102 POP_BLOCK						  
							      104 STORE_FAST 0 ( string )				    								  
							      106 JUMP_ABSOLUTE 14					    5 >> 104 LOAD_FAST 0 ( string )				  
							      >> 108 POP_BLOCK						    106 RETURN_VALUE NEW_LINE					  
							      								    								  
							      5 >> 110 LOAD_FAST 0 ( string )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PANGRAM_CHECKING					      PANGRAM_CHECKING						    PANGRAM_CHECKING						  PANGRAM_CHECKING
--							      --							    --								  --
def checkPangram ( s ) :				      Disassembly of <code object checkPangram at 0x7f33e2653f60, f Disassembly of <code object checkPangram at 0x7f2b01639f60, f script_not_found : None
    List = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    for i in range ( 26 ) :				      2 STORE_FAST 1 ( List )					    2 STORE_FAST 1 ( List )					  
	List.append ( False )				      								    								  
    for c in s.lower ( ) :				      3 4 SETUP_LOOP 26 ( to 32 )				    3 4 SETUP_LOOP 26 ( to 32 )					  
	if not c == " " :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    List [ ord ( c ) - ord ( 'a' ) ] = True	      8 LOAD_CONST 1 ( 26 )					    8 LOAD_CONST 1 ( 26 )					  
    for ch in List :					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
	if ch == False :				      12 GET_ITER						    12 GET_ITER							  
	    return False				      >> 14 FOR_ITER 14 ( to 30 )				    >> 14 FOR_ITER 14 ( to 30 )					  
    return True						      16 STORE_FAST 2 ( i )					    16 STORE_FAST 2 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 1 ( List )					    4 18 LOAD_FAST 1 ( List )					  
							      20 LOAD_METHOD 1 ( append )				    20 LOAD_METHOD 1 ( append )					  
							      22 LOAD_CONST 2 ( False )					    22 LOAD_CONST 2 ( False )					  
							      24 CALL_METHOD 1						    24 CALL_METHOD 1						  
							      26 POP_TOP						    26 POP_TOP							  
							      28 JUMP_ABSOLUTE 14					    28 JUMP_ABSOLUTE 14						  
							      >> 30 POP_BLOCK						    >> 30 POP_BLOCK						  
							      								    								  
							      5 >> 32 SETUP_LOOP 44 ( to 78 )				    5 >> 32 SETUP_LOOP 46 ( to 78 )				  
							      34 LOAD_FAST 0 ( s )					    34 LOAD_FAST 0 ( s )					  
							      36 LOAD_METHOD 2 ( lower )				    36 LOAD_METHOD 2 ( lower )					  
							      38 CALL_METHOD 0						    38 CALL_METHOD 0						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 32 ( to 76 )				    >> 42 FOR_ITER 34 ( to 76 )					  
							      44 STORE_FAST 3 ( c )					    44 STORE_FAST 3 ( c )					  
							      								    								  
							      6 46 LOAD_FAST 3 ( c )					    6 46 LOAD_FAST 3 ( c )					  
							      48 LOAD_CONST 3 ( ' ' )					    48 LOAD_CONST 3 ( ' ' )					  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_TRUE 42					    52 POP_JUMP_IF_TRUE 42					  
							      								    								  
							      7 54 LOAD_CONST 4 ( True )				    7 54 LOAD_CONST 4 ( True )					  
							      56 LOAD_FAST 1 ( List )					    56 LOAD_FAST 1 ( List )					  
							      58 LOAD_GLOBAL 3 ( ord )					    58 LOAD_GLOBAL 3 ( ord )					  
							      60 LOAD_FAST 3 ( c )					    60 LOAD_FAST 3 ( c )					  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 LOAD_GLOBAL 3 ( ord )					    64 LOAD_GLOBAL 3 ( ord )					  
							      66 LOAD_CONST 5 ( 'a' )					    66 LOAD_CONST 5 ( 'a' )					  
							      68 CALL_FUNCTION 1					    68 CALL_FUNCTION 1						  
							      70 BINARY_SUBTRACT					    70 BINARY_SUBTRACT						  
							      72 STORE_SUBSCR						    72 STORE_SUBSCR						  
							      74 JUMP_ABSOLUTE 42					    74 JUMP_ABSOLUTE 42						  
							      >> 76 POP_BLOCK						    >> 76 POP_BLOCK						  
							      								    								  
							      8 >> 78 SETUP_LOOP 24 ( to 104 )				    8 >> 78 SETUP_LOOP 30 ( to 106 )				  
							      80 LOAD_FAST 1 ( List )					    80 LOAD_FAST 1 ( List )					  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 16 ( to 102 )				    >> 84 FOR_ITER 22 ( to 104 )				  
							      86 STORE_FAST 4 ( ch )					    86 STORE_FAST 4 ( ch )					  
							      								    								  
							      9 88 LOAD_FAST 4 ( ch )					    9 88 LOAD_FAST 4 ( ch )					  
							      90 LOAD_CONST 2 ( False )					    90 LOAD_CONST 2 ( False )					  
							      92 COMPARE_OP 2 ( == )					    92 COMPARE_OP 2 ( == )					  
							      94 POP_JUMP_IF_FALSE 84					    94 POP_JUMP_IF_FALSE 98					  
							      								    								  
							      10 96 LOAD_CONST 2 ( False )				    10 96 LOAD_CONST 2 ( False )				  
							      98 RETURN_VALUE						    98 RETURN_VALUE						  
							      100 JUMP_ABSOLUTE 84					    100 JUMP_ABSOLUTE 84					  
							      >> 102 POP_BLOCK						    >> 102 POP_BLOCK						  
							      								    								  
							      11 >> 104 LOAD_CONST 4 ( True )				    11 >> 104 LOAD_CONST 4 ( True )				  
							      106 RETURN_VALUE NEW_LINE					    106 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>	      MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		    MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		  MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>
--							      --							    --								  --
def calculate ( a , n ) :				      Disassembly of <code object calculate at 0x7f33e26494b0, file Disassembly of <code object calculate at 0x7f2b0164d6f0, file script_not_found : None
    a.sort ( ) ;					      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    s = [ ] ;						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    i = 0 ;						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
    j = n - 1 ;						      6 POP_TOP							    6 POP_TOP							  
    while ( i < j ) :					      								    								  
	s.append ( ( a [ i ] + a [ j ] ) ) ;		      3 8 BUILD_LIST 0						    3 8 BUILD_LIST 0						  
	i += 1 ;					      10 STORE_FAST 2 ( s )					    10 STORE_FAST 2 ( s )					  
	j -= 1 ;					      								    								  
    mini = min ( s ) ;					      4 12 LOAD_CONST 1 ( 0 )					    4 12 LOAD_CONST 1 ( 0 )					  
    maxi = max ( s ) ;					      14 STORE_FAST 3 ( i )					    14 STORE_FAST 3 ( i )					  
    return abs ( maxi - mini ) ;			      								    								  
							      5 16 LOAD_FAST 1 ( n )					    5 16 LOAD_FAST 1 ( n )					  
							      18 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 2 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 STORE_FAST 4 ( j )					    22 STORE_FAST 4 ( j )					  
							      								    								  
							      6 24 SETUP_LOOP 50 ( to 76 )				    6 24 SETUP_LOOP 52 ( to 74 )				  
							      >> 26 LOAD_FAST 3 ( i )					    >> 26 LOAD_FAST 3 ( i )					  
							      28 LOAD_FAST 4 ( j )					    28 LOAD_FAST 4 ( j )					  
							      30 COMPARE_OP 0 ( < )					    30 COMPARE_OP 0 ( < )					  
							      32 POP_JUMP_IF_FALSE 74					    32 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      7 34 LOAD_FAST 2 ( s )					    7 34 LOAD_FAST 2 ( s )					  
							      36 LOAD_METHOD 1 ( append )				    36 LOAD_METHOD 1 ( append )					  
							      38 LOAD_FAST 0 ( a )					    38 LOAD_FAST 0 ( a )					  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 3 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 0 ( a )					    44 LOAD_FAST 0 ( a )					  
							      46 LOAD_FAST 4 ( j )					    46 LOAD_FAST 4 ( j )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 BINARY_ADD						    50 BINARY_ADD						  
							      52 CALL_METHOD 1						    52 CALL_METHOD 1						  
							      54 POP_TOP						    54 POP_TOP							  
							      								    								  
							      8 56 LOAD_FAST 3 ( i )					    8 56 LOAD_FAST 3 ( i )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 3 ( i )					    62 STORE_FAST 3 ( i )					  
							      								    								  
							      9 64 LOAD_FAST 4 ( j )					    9 64 LOAD_FAST 4 ( j )					  
							      66 LOAD_CONST 2 ( 1 )					    66 LOAD_CONST 2 ( 1 )					  
							      68 INPLACE_SUBTRACT					    68 INPLACE_SUBTRACT						  
							      70 STORE_FAST 4 ( j )					    70 STORE_FAST 4 ( j )					  
							      72 JUMP_ABSOLUTE 26					    								  
							      >> 74 POP_BLOCK						    10 >> 72 LOAD_GLOBAL 2 ( min )				  
							      								    74 LOAD_FAST 2 ( s )					  
							      10 >> 76 LOAD_GLOBAL 2 ( min )				    76 CALL_FUNCTION 1						  
							      78 LOAD_FAST 2 ( s )					    78 STORE_FAST 5 ( mini )					  
							      80 CALL_FUNCTION 1					    								  
							      82 STORE_FAST 5 ( mini )					    11 80 LOAD_GLOBAL 3 ( max )					  
							      								    82 LOAD_FAST 2 ( s )					  
							      11 84 LOAD_GLOBAL 3 ( max )				    84 CALL_FUNCTION 1						  
							      86 LOAD_FAST 2 ( s )					    86 STORE_FAST 6 ( maxi )					  
							      88 CALL_FUNCTION 1					    								  
							      90 STORE_FAST 6 ( maxi )					    12 88 LOAD_GLOBAL 4 ( abs )					  
							      								    90 LOAD_FAST 6 ( maxi )					  
							      12 92 LOAD_GLOBAL 4 ( abs )				    92 LOAD_FAST 5 ( mini )					  
							      94 LOAD_FAST 6 ( maxi )					    94 BINARY_SUBTRACT						  
							      96 LOAD_FAST 5 ( mini )					    96 CALL_FUNCTION 1						  
							      98 BINARY_SUBTRACT					    98 RETURN_VALUE NEW_LINE					  
							      100 CALL_FUNCTION 1					    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	      GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	    GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1		  GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1
--							      --							    --								  --
def findPairs ( arr1 , arr2 , n , m , x ) :		      Disassembly of <code object findPairs at 0x7f33e2644930, file Disassembly of <code object findPairs at 0x7f2b016399c0, file script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    for i in range ( 0 , n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	s.add ( arr1 [ i ] )				      4 STORE_FAST 5 ( s )					    4 STORE_FAST 5 ( s )					  
    for j in range ( 0 , m ) :				      								    								  
	if ( ( x - arr2 [ j ] ) in s ) :		      3 6 SETUP_LOOP 32 ( to 40 )				    3 6 SETUP_LOOP 40 ( to 52 )					  
	    print ( ( x - arr2 [ j ] ) , '' , arr2 [ j ] )    8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
							      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
							      12 LOAD_FAST 2 ( n )					    12 LOAD_FAST 2 ( n )					  
							      14 CALL_FUNCTION 2					    14 CALL_FUNCTION 2						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 18 ( to 38 )				    >> 18 FOR_ITER 26 ( to 50 )					  
							      20 STORE_FAST 6 ( i )					    20 STORE_FAST 6 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 5 ( s )					    4 22 LOAD_FAST 5 ( s )					  
							      24 LOAD_METHOD 2 ( add )					    24 LOAD_METHOD 2 ( add )					  
							      26 LOAD_FAST 0 ( arr1 )					    26 LOAD_FAST 0 ( arr1 )					  
							      28 LOAD_FAST 6 ( i )					    28 LOAD_FAST 6 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 CALL_METHOD 1						    32 CALL_METHOD 1						  
							      34 POP_TOP						    34 POP_TOP							  
							      36 JUMP_ABSOLUTE 18					    36 JUMP_ABSOLUTE 18						  
							      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
							      								    								  
							      5 >> 40 SETUP_LOOP 58 ( to 100 )				    5 >> 40 SETUP_LOOP 54 ( to 96 )				  
							      42 LOAD_GLOBAL 1 ( range )				    42 LOAD_GLOBAL 1 ( range )					  
							      44 LOAD_CONST 1 ( 0 )					    44 LOAD_CONST 1 ( 0 )					  
							      46 LOAD_FAST 3 ( m )					    46 LOAD_FAST 3 ( m )					  
							      48 CALL_FUNCTION 2					    48 CALL_FUNCTION 2						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 44 ( to 98 )				    >> 52 FOR_ITER 46 ( to 94 )					  
							      54 STORE_FAST 7 ( j )					    54 STORE_FAST 7 ( j )					  
							      								    								  
							      6 56 LOAD_FAST 4 ( x )					    6 56 LOAD_FAST 4 ( x )					  
							      58 LOAD_FAST 1 ( arr2 )					    58 LOAD_FAST 1 ( arr2 )					  
							      60 LOAD_FAST 7 ( j )					    60 LOAD_FAST 7 ( j )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 BINARY_SUBTRACT					    64 BINARY_SUBTRACT						  
							      66 LOAD_FAST 5 ( s )					    66 LOAD_FAST 5 ( s )					  
							      68 COMPARE_OP 6 ( in )					    68 COMPARE_OP 6 ( in )					  
							      70 POP_JUMP_IF_FALSE 52					    70 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 72 LOAD_GLOBAL 3 ( print )				    7 72 LOAD_GLOBAL 3 ( print )				  
							      74 LOAD_FAST 4 ( x )					    74 LOAD_FAST 4 ( x )					  
							      76 LOAD_FAST 1 ( arr2 )					    76 LOAD_FAST 1 ( arr2 )					  
							      78 LOAD_FAST 7 ( j )					    78 LOAD_FAST 7 ( j )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 BINARY_SUBTRACT					    82 BINARY_SUBTRACT						  
							      84 LOAD_CONST 2 ( '' )					    84 CALL_FUNCTION 1						  
							      86 LOAD_FAST 1 ( arr2 )					    86 LOAD_CONST 2 ( '' )					  
							      88 LOAD_FAST 7 ( j )					    88 LOAD_FAST 1 ( arr2 )					  
							      90 BINARY_SUBSCR						    90 LOAD_FAST 7 ( j )					  
							      92 CALL_FUNCTION 3					    92 BINARY_SUBSCR						  
							      94 POP_TOP						    94 CALL_FUNCTION 3						  
							      96 JUMP_ABSOLUTE 52					    96 POP_TOP							  
							      >> 98 POP_BLOCK						    92 JUMP_ABSOLUTE 52						  
							      >> 100 LOAD_CONST 0 ( None )				    >> 94 POP_BLOCK						  
							      102 RETURN_VALUE NEW_LINE					    >> 96 LOAD_CONST 0 ( None )					  
							      								    98 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	    COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	  COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
def countZeroes ( mat ) :				      Disassembly of <code object countZeroes at 0x7f33e2644930, fi Disassembly of <code object countZeroes at 0x7f2b0163dc90, fi script_not_found : None
    N = 5 ;						      2 0 LOAD_CONST 1 ( 5 )					    2 0 LOAD_CONST 1 ( 5 )					  
    row = N - 1 ;					      2 STORE_FAST 1 ( N )					    2 STORE_FAST 1 ( N )					  
    col = 0 ;						      								    								  
    count = 0 ;						      3 4 LOAD_FAST 1 ( N )					    3 4 LOAD_FAST 1 ( N )					  
    while ( col < N ) :					      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
	while ( mat [ row ] [ col ] ) :			      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
	    if ( row < 0 ) :				      10 STORE_FAST 2 ( row )					    10 STORE_FAST 2 ( row )					  
		return count ;				      								    								  
	    row = row - 1 ;				      4 12 LOAD_CONST 3 ( 0 )					    4 12 LOAD_CONST 3 ( 0 )					  
	count = count + ( row + 1 ) ;			      14 STORE_FAST 3 ( col )					    14 STORE_FAST 3 ( col )					  
	col = col + 1 ;					      								    								  
    return count ;					      5 16 LOAD_CONST 3 ( 0 )					    5 16 LOAD_CONST 3 ( 0 )					  
							      18 STORE_FAST 4 ( count )					    18 STORE_FAST 4 ( count )					  
							      								    								  
							      6 20 SETUP_LOOP 70 ( to 92 )				    6 20 SETUP_LOOP 66 ( to 88 )				  
							      >> 22 LOAD_FAST 3 ( col )					    >> 22 LOAD_FAST 3 ( col )					  
							      24 LOAD_FAST 1 ( N )					    24 LOAD_FAST 1 ( N )					  
							      26 COMPARE_OP 0 ( < )					    26 COMPARE_OP 0 ( < )					  
							      28 POP_JUMP_IF_FALSE 90					    28 POP_JUMP_IF_FALSE 86					  
							      								    								  
							      7 30 SETUP_LOOP 36 ( to 68 )				    7 30 SETUP_LOOP 48 ( to 86 )				  
							      >> 32 LOAD_FAST 0 ( mat )					    >> 32 LOAD_FAST 0 ( mat )					  
							      34 LOAD_FAST 2 ( row )					    34 LOAD_FAST 2 ( row )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 3 ( col )					    38 LOAD_FAST 3 ( col )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 POP_JUMP_IF_FALSE 66					    42 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      8 44 LOAD_FAST 2 ( row )					    8 44 LOAD_FAST 2 ( row )					  
							      46 LOAD_CONST 3 ( 0 )					    46 LOAD_CONST 3 ( 0 )					  
							      48 COMPARE_OP 0 ( < )					    48 COMPARE_OP 0 ( < )					  
							      50 POP_JUMP_IF_FALSE 56					    50 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      9 52 LOAD_FAST 4 ( count )				    9 52 LOAD_FAST 4 ( count )					  
							      54 RETURN_VALUE						    54 RETURN_VALUE						  
							      								    56 JUMP_ABSOLUTE 32						  
							      10 >> 56 LOAD_FAST 2 ( row )				    								  
							      58 LOAD_CONST 2 ( 1 )					    10 >> 58 LOAD_FAST 2 ( row )				  
							      60 BINARY_SUBTRACT					    60 LOAD_CONST 2 ( 1 )					  
							      62 STORE_FAST 2 ( row )					    62 BINARY_SUBTRACT						  
							      64 JUMP_ABSOLUTE 32					    64 STORE_FAST 2 ( row )					  
							      >> 66 POP_BLOCK						    66 JUMP_ABSOLUTE 22						  
							      								    >> 68 POP_BLOCK						  
							      11 >> 68 LOAD_FAST 4 ( count )				    								  
							      70 LOAD_FAST 2 ( row )					    11 70 LOAD_FAST 4 ( count )					  
							      72 LOAD_CONST 2 ( 1 )					    72 LOAD_FAST 2 ( row )					  
							      74 BINARY_ADD						    74 LOAD_CONST 2 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 STORE_FAST 4 ( count )					    78 BINARY_ADD						  
							      								    80 STORE_FAST 4 ( count )					  
							      12 80 LOAD_FAST 3 ( col )					    								  
							      82 LOAD_CONST 2 ( 1 )					    12 82 LOAD_FAST 3 ( col )					  
							      84 BINARY_ADD						    84 LOAD_CONST 2 ( 1 )					  
							      86 STORE_FAST 3 ( col )					    86 BINARY_ADD						  
							      88 JUMP_ABSOLUTE 22					    88 STORE_FAST 3 ( col )					  
							      >> 90 POP_BLOCK						    								  
							      								    13 >> 90 LOAD_FAST 4 ( count )				  
							      13 >> 92 LOAD_FAST 4 ( count )				    92 RETURN_VALUE NEW_LINE					  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
def decToBinary ( n ) :					      Disassembly of <code object decToBinary at 0x7f33e2653f60, fi Disassembly of <code object decToBinary at 0x7f2b0163dc90, fi script_not_found : None
    binaryNum = [ 0 ] * n ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    i = 0 ;						      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    while ( n > 0 ) :					      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
	binaryNum [ i ] = n % 2 ;			      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	n = int ( n / 2 ) ;				      8 STORE_FAST 1 ( binaryNum )				    8 STORE_FAST 1 ( binaryNum )				  
	i += 1 ;					      								    								  
    for j in range ( i - 1 , - 1 , - 1 ) :		      3 10 LOAD_CONST 1 ( 0 )					    3 10 LOAD_CONST 1 ( 0 )					  
	print ( binaryNum [ j ] , end = "" ) ;		      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      4 14 SETUP_LOOP 44 ( to 60 )				    4 14 SETUP_LOOP 48 ( to 64 )				  
							      >> 16 LOAD_FAST 0 ( n )					    >> 16 LOAD_FAST 0 ( n )					  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  
							      20 COMPARE_OP 4 ( > )					    20 COMPARE_OP 4 ( > )					  
							      22 POP_JUMP_IF_FALSE 58					    22 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      5 24 LOAD_FAST 0 ( n )					    5 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 2 ( 2 )					    26 LOAD_CONST 2 ( 2 )					  
							      28 BINARY_MODULO						    28 BINARY_MODULO						  
							      30 LOAD_FAST 1 ( binaryNum )				    30 LOAD_FAST 1 ( binaryNum )				  
							      32 LOAD_FAST 2 ( i )					    32 LOAD_FAST 2 ( i )					  
							      34 STORE_SUBSCR						    34 STORE_SUBSCR						  
							      								    								  
							      6 36 LOAD_GLOBAL 0 ( int )				    6 36 LOAD_GLOBAL 0 ( int )					  
							      38 LOAD_FAST 0 ( n )					    38 LOAD_FAST 0 ( n )					  
							      40 LOAD_CONST 2 ( 2 )					    40 LOAD_CONST 2 ( 2 )					  
							      42 BINARY_TRUE_DIVIDE					    42 BINARY_TRUE_DIVIDE					  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 STORE_FAST 0 ( n )					    46 STORE_FAST 0 ( n )					  
							      								    								  
							      7 48 LOAD_FAST 2 ( i )					    7 48 LOAD_FAST 2 ( i )					  
							      50 LOAD_CONST 3 ( 1 )					    50 LOAD_CONST 3 ( 1 )					  
							      52 INPLACE_ADD						    52 INPLACE_ADD						  
							      54 STORE_FAST 2 ( i )					    54 STORE_FAST 2 ( i )					  
							      56 JUMP_ABSOLUTE 16					    56 JUMP_ABSOLUTE 16						  
							      >> 58 POP_BLOCK						    >> 58 POP_BLOCK						  
							      								    								  
							      8 >> 60 SETUP_LOOP 40 ( to 102 )				    8 >> 60 SETUP_LOOP 48 ( to 116 )				  
							      62 LOAD_GLOBAL 1 ( range )				    62 LOAD_GLOBAL 1 ( range )					  
							      64 LOAD_FAST 2 ( i )					    64 LOAD_FAST 2 ( i )					  
							      66 LOAD_CONST 3 ( 1 )					    66 LOAD_CONST 3 ( 1 )					  
							      68 BINARY_SUBTRACT					    68 BINARY_SUBTRACT						  
							      70 LOAD_CONST 4 ( - 1 )					    70 LOAD_CONST 4 ( - 1 )					  
							      72 LOAD_CONST 4 ( - 1 )					    72 LOAD_CONST 4 ( - 1 )					  
							      74 CALL_FUNCTION 3					    74 CALL_FUNCTION 3						  
							      76 GET_ITER						    76 GET_ITER							  
							      >> 78 FOR_ITER 20 ( to 100 )				    >> 78 FOR_ITER 28 ( to 114 )				  
							      80 STORE_FAST 3 ( j )					    80 STORE_FAST 3 ( j )					  
							      								    								  
							      9 82 LOAD_GLOBAL 2 ( print )				    9 82 LOAD_GLOBAL 2 ( print )				  
							      84 LOAD_FAST 1 ( binaryNum )				    84 LOAD_FAST 1 ( binaryNum )				  
							      86 LOAD_FAST 3 ( j )					    86 LOAD_FAST 3 ( j )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 LOAD_CONST 5 ( '' )					    90 LOAD_CONST 5 ( '' )					  
							      92 LOAD_CONST 6 ( ( 'end' , ) )				    92 LOAD_CONST 6 ( ( 'end' , ) )				  
							      94 CALL_FUNCTION_KW 2					    94 CALL_FUNCTION_KW 2					  
							      96 POP_TOP						    96 POP_TOP							  
							      98 JUMP_ABSOLUTE 78					    98 JUMP_ABSOLUTE 78						  
							      >> 100 POP_BLOCK						    >> 100 POP_BLOCK						  
							      >> 102 LOAD_CONST 0 ( None )				    102 LOAD_CONST 0 ( None )					  
							      104 RETURN_VALUE NEW_LINE					    104 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER
--							      --							    --								  --
def overflow ( H , r , h , N , R ) :			      Disassembly of <code object overflow at 0x7f33e2644f60, file  Disassembly of <code object overflow at 0x7f2b0163dc90, file  script_not_found : None
    tank_cap = 3.14 * r * r * H				      2 0 LOAD_CONST 1 ( 3.14 )					    2 0 LOAD_CONST 1 ( 3.14 )					  
    water_vol = 3.14 * r * r * h			      2 LOAD_FAST 1 ( r )					    2 LOAD_FAST 1 ( r )						  
    balls_vol = N * ( 4 / 3 ) * 3.14 * R * R * R	      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
    vol = water_vol + balls_vol				      6 LOAD_FAST 1 ( r )					    6 LOAD_FAST 0 ( H )						  
    if vol > tank_cap :					      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
	print ( "Overflow" )				      10 LOAD_FAST 0 ( H )					    10 STORE_FAST 5 ( tank_cap )				  
    else :						      12 BINARY_MULTIPLY					    								  
	print ( "Not in overflow state" )		      14 STORE_FAST 5 ( tank_cap )				    3 12 LOAD_CONST 2 ( 3.14 )					  
							      								    14 LOAD_FAST 1 ( r )					  
							      3 16 LOAD_CONST 1 ( 3.14 )				    16 BINARY_MULTIPLY						  
							      18 LOAD_FAST 1 ( r )					    18 LOAD_FAST 1 ( r )					  
							      20 BINARY_MULTIPLY					    20 BINARY_MULTIPLY						  
							      22 LOAD_FAST 1 ( r )					    22 LOAD_FAST 2 ( h )					  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 LOAD_FAST 2 ( h )					    26 STORE_FAST 6 ( water_vol )				  
							      28 BINARY_MULTIPLY					    								  
							      30 STORE_FAST 6 ( water_vol )				    4 28 LOAD_FAST 3 ( N )					  
							      								    30 LOAD_CONST 3 ( 4 )					  
							      4 32 LOAD_FAST 3 ( N )					    32 BINARY_TRUE_DIVIDE					  
							      34 LOAD_CONST 2 ( 1.3333333333333333 )			    34 LOAD_CONST 4 ( 3.14 )					  
							      36 BINARY_MULTIPLY					    36 LOAD_FAST 0 ( H )					  
							      38 LOAD_CONST 1 ( 3.14 )					    38 BINARY_MULTIPLY						  
							      40 BINARY_MULTIPLY					    40 LOAD_FAST 0 ( H )					  
							      42 LOAD_FAST 4 ( R )					    42 BINARY_MULTIPLY						  
							      44 BINARY_MULTIPLY					    44 LOAD_FAST 0 ( H )					  
							      46 LOAD_FAST 4 ( R )					    46 BINARY_MULTIPLY						  
							      48 BINARY_MULTIPLY					    48 STORE_FAST 7 ( balls_vol )				  
							      50 LOAD_FAST 4 ( R )					    								  
							      52 BINARY_MULTIPLY					    5 50 LOAD_FAST 6 ( water_vol )				  
							      54 STORE_FAST 7 ( balls_vol )				    52 LOAD_FAST 5 ( ballcap )					  
							      								    54 BINARY_ADD						  
							      5 56 LOAD_FAST 6 ( water_vol )				    56 STORE_FAST 8 ( vol )					  
							      58 LOAD_FAST 7 ( balls_vol )				    								  
							      60 BINARY_ADD						    6 58 LOAD_FAST 8 ( vol )					  
							      62 STORE_FAST 8 ( vol )					    60 LOAD_FAST 5 ( tank_cap )					  
							      								    62 COMPARE_OP 4 ( > )					  
							      6 64 LOAD_FAST 8 ( vol )					    64 POP_JUMP_IF_FALSE 76					  
							      66 LOAD_FAST 5 ( tank_cap )				    								  
							      68 COMPARE_OP 4 ( > )					    7 66 LOAD_GLOBAL 0 ( print )				  
							      70 POP_JUMP_IF_FALSE 82					    68 LOAD_CONST 5 ( 'Overflow' )				  
							      								    70 CALL_FUNCTION 1						  
							      7 72 LOAD_GLOBAL 0 ( print )				    72 POP_TOP							  
							      74 LOAD_CONST 3 ( 'Overflow' )				    74 JUMP_FORWARD 8 ( to 90 )					  
							      76 CALL_FUNCTION 1					    								  
							      78 POP_TOP						    9 >> 76 LOAD_GLOBAL 0 ( print )				  
							      80 JUMP_FORWARD 8 ( to 90 )				    78 LOAD_CONST 6 ( 'Not in overflow state' )			  
							      								    80 CALL_FUNCTION 1						  
							      9 >> 82 LOAD_GLOBAL 0 ( print )				    82 POP_TOP							  
							      84 LOAD_CONST 4 ( 'Not in overflow state' )		    >> 84 LOAD_CONST 0 ( None )					  
							      86 CALL_FUNCTION 1					    86 RETURN_VALUE NEW_LINE					  
							      88 POP_TOP						    								  
							      >> 90 LOAD_CONST 0 ( None )				    								  
							      92 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIAGONALLY_DOMINANT_MATRIX				      DIAGONALLY_DOMINANT_MATRIX				    DIAGONALLY_DOMINANT_MATRIX					  DIAGONALLY_DOMINANT_MATRIX
--							      --							    --								  --
def isDDM ( m , n ) :					      Disassembly of <code object isDDM at 0x7f33e2644f60, file "<d Disassembly of <code object isDDM at 0x7f2b0164d5d0, file "<d error : /bin/bash: line 1:  4492 Segmentation faul
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 106 ( to 108 )				    2 0 SETUP_LOOP 96 ( to 98 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	sum = 0						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( 0 , n ) :			      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    sum = sum + abs ( m [ i ] [ j ] )		      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/DIAGON
	sum = sum - abs ( m [ i ] [ i ] )		      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  ALLY_DOMINANT_MATRIX.dis
	if ( abs ( m [ i ] [ i ] ) < sum ) :		      10 GET_ITER						    10 GET_ITER							  
	    return False				      >> 12 FOR_ITER 92 ( to 106 )				    >> 12 FOR_ITER 82 ( to 96 )					  
    return True						      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
							      								    								  
							      3 16 LOAD_CONST 1 ( 0 )					    3 16 LOAD_CONST 1 ( 0 )					  
							      18 STORE_FAST 3 ( sum )					    18 STORE_FAST 3 ( sum )					  
							      								    								  
							      4 20 SETUP_LOOP 38 ( to 60 )				    4 20 SETUP_LOOP 38 ( to 60 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 1 ( 0 )					  
							      26 LOAD_FAST 1 ( n )					    26 LOAD_FAST 1 ( n )					  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 24 ( to 58 )				    >> 32 FOR_ITER 26 ( to 58 )					  
							      34 STORE_FAST 4 ( j )					    34 STORE_FAST 4 ( j )					  
							      								    								  
							      5 36 LOAD_FAST 3 ( sum )					    5 36 LOAD_FAST 3 ( sum )					  
							      38 LOAD_GLOBAL 1 ( abs )					    38 LOAD_GLOBAL 1 ( abs )					  
							      40 LOAD_FAST 0 ( m )					    40 LOAD_FAST 0 ( m )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 4 ( j )					    46 LOAD_FAST 4 ( j )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 STORE_FAST 3 ( sum )					    54 STORE_FAST 3 ( sum )					  
							      56 JUMP_ABSOLUTE 32					    56 JUMP_ABSOLUTE 32						  
							      >> 58 POP_BLOCK						    >> 58 POP_BLOCK						  
							      								    								  
							      6 >> 60 LOAD_FAST 3 ( sum )				    6 >> 60 LOAD_FAST 3 ( sum )					  
							      62 LOAD_GLOBAL 1 ( abs )					    62 LOAD_GLOBAL 1 ( abs )					  
							      64 LOAD_FAST 0 ( m )					    64 LOAD_FAST 0 ( m )					  
							      66 LOAD_FAST 2 ( i )					    66 LOAD_FAST 2 ( i )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 2 ( i )					    70 LOAD_FAST 2 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 CALL_FUNCTION 1					    74 CALL_FUNCTION 1						  
							      76 BINARY_SUBTRACT					    76 BINARY_SUBTRACT						  
							      78 STORE_FAST 3 ( sum )					    78 STORE_FAST 3 ( sum )					  
							      								    								  
							      7 80 LOAD_GLOBAL 1 ( abs )				    7 80 LOAD_GLOBAL 1 ( abs )					  
							      82 LOAD_FAST 0 ( m )					    82 LOAD_FAST 0 ( m )					  
							      84 LOAD_FAST 2 ( i )					    84 LOAD_FAST 2 ( i )					  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 LOAD_FAST 2 ( i )					    88 LOAD_FAST 2 ( i )					  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 CALL_FUNCTION 1					    92 CALL_FUNCTION 1						  
							      94 LOAD_FAST 3 ( sum )					    94 LOAD_FAST 3 ( sum )					  
							      96 COMPARE_OP 0 ( < )					    96 COMPARE_OP 0 ( < )					  
							      98 POP_JUMP_IF_FALSE 12					    98 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      8 100 LOAD_CONST 2 ( False )				    8 100 LOAD_CONST 2 ( False )				  
							      102 RETURN_VALUE						    102 RETURN_VALUE						  
							      104 JUMP_ABSOLUTE 12					    104 JUMP_ABSOLUTE 32					  
							      >> 106 POP_BLOCK						    >> 106 POP_BLOCK						  
							      								    								  
							      9 >> 108 LOAD_CONST 3 ( True )				    9 >> 108 LOAD_CONST 3 ( True )				  
							      110 RETURN_VALUE NEW_LINE					    110 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT		      FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			    FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			  FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT
--							      --							    --								  --
def findDuplicateparenthesis ( string ) :		      Disassembly of <code object findDuplicateparenthesis at 0x7f3 Disassembly of <code object findDuplicateparenthesis at 0x7f2 error : XXX lineno: 2, opcode: 0 Traceback (most r
    Stack = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  ecent call last):   File "XLM/dis_script.py", line
    for ch in string :					      2 STORE_FAST 1 ( Stack )					    2 STORE_FAST 1 ( Stack )					   60, in <module>     exec(item)   File "main.py",
	if ch == ')' :					      								    								  line 40, in <module>	 File "<dis>", line 2, in fi
	    top = Stack.pop ( )				      3 4 SETUP_LOOP 86 ( to 92 )				    3 4 SETUP_LOOP 92 ( to 98 )					  ndDuplicateparenthesis SystemError: unknown opcode
	    elementsInside = 0				      6 LOAD_FAST 0 ( string )					    6 LOAD_FAST 0 ( string )					  
	    while top != '(' :				      8 GET_ITER						    8 GET_ITER							  
		elementsInside += 1			      >> 10 FOR_ITER 78 ( to 90 )				    >> 10 FOR_ITER 84 ( to 96 )					  
		top = Stack.pop ( )			      12 STORE_FAST 2 ( ch )					    12 STORE_FAST 2 ( ch )					  
	    if elementsInside < 1 :			      								    								  
		return True				      4 14 LOAD_FAST 2 ( ch )					    4 14 LOAD_FAST 2 ( ch )					  
	else :						      16 LOAD_CONST 1 ( ')' )					    16 LOAD_CONST 1 ( ')' )					  
	    Stack.append ( ch )				      18 COMPARE_OP 2 ( == )					    18 COMPARE_OP 2 ( == )					  
    return False					      20 POP_JUMP_IF_FALSE 78					    20 POP_JUMP_IF_FALSE 96					  
							      								    								  
							      5 22 LOAD_FAST 1 ( Stack )				    5 22 LOAD_FAST 1 ( Stack )					  
							      24 LOAD_METHOD 0 ( pop )					    24 LOAD_METHOD 0 ( pop )					  
							      26 CALL_METHOD 0						    26 CALL_METHOD 0						  
							      28 STORE_FAST 3 ( top )					    28 STORE_FAST 3 ( top )					  
							      								    								  
							      6 30 LOAD_CONST 2 ( 0 )					    6 30 LOAD_CONST 2 ( 0 )					  
							      32 STORE_FAST 4 ( elementsInside )			    32 STORE_FAST 4 ( elementsInside )				  
							      								    								  
							      7 34 SETUP_LOOP 28 ( to 64 )				    7 34 SETUP_LOOP 30 ( to 74 )				  
							      >> 36 LOAD_FAST 3 ( top )					    >> 36 LOAD_FAST 3 ( top )					  
							      38 LOAD_CONST 3 ( '(' )					    38 LOAD_CONST 3 ( '(' )					  
							      40 COMPARE_OP 3 ( != )					    40 COMPARE_OP 3 ( != )					  
							      42 POP_JUMP_IF_FALSE 62					    42 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      8 44 LOAD_FAST 4 ( elementsInside )			    8 44 LOAD_FAST 4 ( elementsInside )				  
							      46 LOAD_CONST 4 ( 1 )					    46 LOAD_CONST 4 ( 1 )					  
							      48 INPLACE_ADD						    48 INPLACE_ADD						  
							      50 STORE_FAST 4 ( elementsInside )			    50 STORE_FAST 4 ( elementsInside )				  
							      								    								  
							      9 52 LOAD_FAST 1 ( Stack )				    9 52 LOAD_FAST 1 ( Stack )					  
							      54 LOAD_METHOD 0 ( pop )					    54 LOAD_METHOD 0 ( pop )					  
							      56 CALL_METHOD 0						    56 CALL_METHOD 0						  
							      58 STORE_FAST 3 ( top )					    58 STORE_FAST 3 ( top )					  
							      60 JUMP_ABSOLUTE 36					    60 JUMP_ABSOLUTE 36						  
							      >> 62 POP_BLOCK						    >> 62 POP_BLOCK						  
							      								    								  
							      10 >> 64 LOAD_FAST 4 ( elementsInside )			    10 >> 64 LOAD_FAST 4 ( elementsInside )			  
							      66 LOAD_CONST 4 ( 1 )					    66 LOAD_CONST 4 ( 1 )					  
							      68 COMPARE_OP 0 ( < )					    68 COMPARE_OP 0 ( < )					  
							      70 POP_JUMP_IF_FALSE 88					    70 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      11 72 LOAD_CONST 5 ( True )				    11 72 LOAD_CONST 5 ( True )					  
							      74 RETURN_VALUE						    74 RETURN_VALUE						  
							      76 JUMP_ABSOLUTE 10					    								  
							      								    13 >> 76 LOAD_FAST 1 ( Stack )				  
							      13 >> 78 LOAD_FAST 1 ( Stack )				    78 LOAD_METHOD 1 ( append )					  
							      80 LOAD_METHOD 1 ( append )				    80 LOAD_FAST 2 ( ch )					  
							      82 LOAD_FAST 2 ( ch )					    82 CALL_METHOD 1						  
							      84 CALL_METHOD 1						    84 POP_TOP							  
							      86 POP_TOP						    86 JUMP_ABSOLUTE 10						  
							      >> 88 JUMP_ABSOLUTE 10					    >> 88 POP_BLOCK						  
							      >> 90 POP_BLOCK						    								  
							      								    14 >> 90 LOAD_CONST 6 ( False )				  
							      14 >> 92 LOAD_CONST 6 ( False )				    92 RETURN_VALUE NEW_LINE					  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		      FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		    FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N			  FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N
--							      --							    --								  --
def findRepeatingElement ( arr , low , high ) :		      Disassembly of <code object findRepeatingElement at 0x7f33e26 Disassembly of <code object findRepeatingElement at 0x7f2b016 script_not_found : None
    if low > high :					      2 0 LOAD_FAST 1 ( low )					    2 0 LOAD_FAST 1 ( low )					  
	return - 1					      2 LOAD_FAST 2 ( high )					    2 LOAD_FAST 2 ( high )					  
    mid = ( low + high ) / 2				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
    if ( arr [ mid ] != mid + 1 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	if ( mid > 0 and arr [ mid ] == arr [ mid - 1 ] ) :   								    								  
	    return mid					      3 8 LOAD_CONST 1 ( - 1 )					    3 8 LOAD_CONST 1 ( - 1 )					  
	return findRepeatingElement ( arr , low , mid - 1 )   10 RETURN_VALUE						    10 RETURN_VALUE						  
    return findRepeatingElement ( arr , mid + 1 , high )      								    								  
							      4 >> 12 LOAD_FAST 1 ( low )				    4 >> 12 LOAD_FAST 1 ( low )					  
							      14 LOAD_FAST 2 ( high )					    14 LOAD_FAST 2 ( high )					  
							      16 BINARY_ADD						    16 BINARY_ADD						  
							      18 LOAD_CONST 2 ( 2 )					    18 LOAD_CONST 2 ( 2 )					  
							      20 BINARY_TRUE_DIVIDE					    20 BINARY_TRUE_DIVIDE					  
							      22 STORE_FAST 3 ( mid )					    22 STORE_FAST 3 ( mid )					  
							      								    								  
							      5 24 LOAD_FAST 0 ( arr )					    5 24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 3 ( mid )					    26 LOAD_FAST 3 ( mid )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 3 ( mid )					    30 LOAD_FAST 3 ( mid )					  
							      32 LOAD_CONST 3 ( 1 )					    32 LOAD_CONST 3 ( 1 )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 88					    38 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      6 40 LOAD_FAST 3 ( mid )					    6 40 LOAD_FAST 3 ( mid )					  
							      42 LOAD_CONST 4 ( 0 )					    42 LOAD_CONST 4 ( 0 )					  
							      44 COMPARE_OP 4 ( > )					    44 COMPARE_OP 4 ( > )					  
							      46 POP_JUMP_IF_FALSE 72					    46 POP_JUMP_IF_FALSE 74					  
							      48 LOAD_FAST 0 ( arr )					    48 LOAD_FAST 0 ( arr )					  
							      50 LOAD_FAST 3 ( mid )					    50 LOAD_FAST 3 ( mid )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 0 ( arr )					    54 LOAD_FAST 0 ( arr )					  
							      56 LOAD_FAST 3 ( mid )					    56 LOAD_FAST 3 ( mid )					  
							      58 LOAD_CONST 3 ( 1 )					    58 LOAD_CONST 3 ( 1 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 COMPARE_OP 2 ( == )					    64 COMPARE_OP 2 ( == )					  
							      66 POP_JUMP_IF_FALSE 72					    66 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      7 68 LOAD_FAST 3 ( mid )					    7 68 LOAD_FAST 3 ( mid )					  
							      70 RETURN_VALUE						    70 RETURN_VALUE						  
							      								    								  
							      8 >> 72 LOAD_GLOBAL 0 ( findRepeatingElement )		    8 >> 72 LOAD_GLOBAL 0 ( findRepeatingElement )		  
							      74 LOAD_FAST 0 ( arr )					    74 LOAD_FAST 0 ( arr )					  
							      76 LOAD_FAST 1 ( low )					    76 LOAD_FAST 1 ( low )					  
							      78 LOAD_FAST 3 ( mid )					    78 LOAD_FAST 3 ( mid )					  
							      80 LOAD_CONST 3 ( 1 )					    80 LOAD_CONST 3 ( 1 )					  
							      82 BINARY_SUBTRACT					    82 BINARY_SUBTRACT						  
							      84 CALL_FUNCTION 3					    84 CALL_FUNCTION 3						  
							      86 RETURN_VALUE						    86 RETURN_VALUE						  
							      								    								  
							      9 >> 88 LOAD_GLOBAL 0 ( findRepeatingElement )		    9 >> 88 LOAD_GLOBAL 0 ( findRepeatingElement )		  
							      90 LOAD_FAST 0 ( arr )					    90 LOAD_FAST 0 ( arr )					  
							      92 LOAD_FAST 3 ( mid )					    92 LOAD_FAST 3 ( mid )					  
							      94 LOAD_CONST 3 ( 1 )					    94 LOAD_CONST 3 ( 1 )					  
							      96 BINARY_ADD						    96 BINARY_ADD						  
							      98 LOAD_FAST 2 ( high )					    98 LOAD_FAST 2 ( high )					  
							      100 CALL_FUNCTION 3					    100 CALL_FUNCTION 3						  
							      102 RETURN_VALUE NEW_LINE					    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			      MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			    MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			  MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK
--							      --							    --								  --
def minRotation ( input , unlock_code ) :		      Disassembly of <code object minRotation at 0x7f33e2644f60, fi Disassembly of <code object minRotation at 0x7f2b0163dc90, fi error : /bin/bash: line 1:  4511 Segmentation faul
    rotation = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    while ( input > 0 or unlock_code > 0 ) :		      2 STORE_FAST 2 ( rotation )				    2 STORE_FAST 2 ( rotation )					  ataset/bin/python XLM/dis_script.py --script_path
	input_digit = input % 10 ;			      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	code_digit = unlock_code % 10 ;			      3 4 SETUP_LOOP 94 ( to 100 )				    3 4 SETUP_LOOP 88 ( to 94 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MINIMU
	rotation += min ( abs ( input_digit - code_digit ) ,  >> 6 LOAD_FAST 0 ( input )				    >> 6 LOAD_FAST 0 ( input )					  M_ROTATIONS_UNLOCK_CIRCULAR_LOCK.dis
	input = int ( input / 10 ) ;			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
	unlock_code = int ( unlock_code / 10 ) ;	      10 COMPARE_OP 4 ( > )					    10 COMPARE_OP 4 ( > )					  
    return rotation ;					      12 POP_JUMP_IF_TRUE 22					    12 POP_JUMP_IF_TRUE 92					  
							      14 LOAD_FAST 1 ( unlock_code )				    14 LOAD_FAST 1 ( unlock_code )				  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 COMPARE_OP 4 ( > )					    18 COMPARE_OP 4 ( > )					  
							      20 POP_JUMP_IF_FALSE 98					    20 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      4 >> 22 LOAD_FAST 0 ( input )				    4 22 LOAD_FAST 0 ( input )					  
							      24 LOAD_CONST 2 ( 10 )					    24 LOAD_CONST 2 ( 10 )					  
							      26 BINARY_MODULO						    26 BINARY_MODULO						  
							      28 STORE_FAST 3 ( input_digit )				    28 STORE_FAST 3 ( input_digit )				  
							      								    								  
							      5 30 LOAD_FAST 1 ( unlock_code )				    5 30 LOAD_FAST 1 ( unlock_code )				  
							      32 LOAD_CONST 2 ( 10 )					    32 LOAD_CONST 2 ( 10 )					  
							      34 BINARY_MODULO						    34 BINARY_MODULO						  
							      36 STORE_FAST 4 ( code_digit )				    36 STORE_FAST 4 ( code_digit )				  
							      								    								  
							      6 38 LOAD_FAST 2 ( rotation )				    6 38 LOAD_FAST 2 ( rotation )				  
							      40 LOAD_GLOBAL 0 ( min )					    40 LOAD_GLOBAL 0 ( min )					  
							      42 LOAD_GLOBAL 1 ( abs )					    42 LOAD_GLOBAL 1 ( abs )					  
							      44 LOAD_FAST 3 ( input_digit )				    44 LOAD_FAST 3 ( input_digit )				  
							      46 LOAD_FAST 4 ( code_digit )				    46 LOAD_FAST 4 ( code_digit )				  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 LOAD_CONST 2 ( 10 )					    52 LOAD_CONST 2 ( 10 )					  
							      54 LOAD_GLOBAL 1 ( abs )					    54 LOAD_GLOBAL 1 ( abs )					  
							      56 LOAD_FAST 3 ( input_digit )				    56 LOAD_FAST 3 ( input_digit )				  
							      58 LOAD_FAST 4 ( code_digit )				    58 LOAD_FAST 4 ( code_digit )				  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 BINARY_SUBTRACT					    64 BINARY_SUBTRACT						  
							      66 CALL_FUNCTION 2					    66 CALL_FUNCTION 2						  
							      68 INPLACE_ADD						    68 INPLACE_ADD						  
							      70 STORE_FAST 2 ( rotation )				    70 STORE_FAST 2 ( rotation )				  
							      								    								  
							      7 72 LOAD_GLOBAL 2 ( int )				    7 72 LOAD_GLOBAL 2 ( int )					  
							      74 LOAD_FAST 0 ( input )					    74 LOAD_FAST 0 ( input )					  
							      76 LOAD_CONST 2 ( 10 )					    76 LOAD_CONST 2 ( 10 )					  
							      78 BINARY_TRUE_DIVIDE					    78 BINARY_TRUE_DIVIDE					  
							      80 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      82 STORE_FAST 0 ( input )					    82 STORE_FAST 1 ( unlock_code )				  
							      								    								  
							      8 84 LOAD_GLOBAL 2 ( int )				    8 84 LOAD_GLOBAL 2 ( int )					  
							      86 LOAD_FAST 1 ( unlock_code )				    86 LOAD_FAST 1 ( unlock_code )				  
							      88 LOAD_CONST 2 ( 10 )					    88 LOAD_CONST 2 ( 10 )					  
							      90 BINARY_TRUE_DIVIDE					    90 BINARY_TRUE_DIVIDE					  
							      92 CALL_FUNCTION 1					    92 CALL_FUNCTION 1						  
							      94 STORE_FAST 1 ( unlock_code )				    94 STORE_FAST 1 ( unlock_code )				  
							      96 JUMP_ABSOLUTE 6					    96 JUMP_ABSOLUTE 6						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      								    								  
							      9 >> 100 LOAD_FAST 2 ( rotation )				    9 >> 100 LOAD_FAST 2 ( rotation )				  
							      102 RETURN_VALUE NEW_LINE					    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW
--							      --							    --								  --
def checkForSorting ( arr , n ) :			      Disassembly of <code object checkForSorting at 0x7f33e26494b0 Disassembly of <code object checkForSorting at 0x7f2b0163dc90 error : /bin/bash: line 1:  4521 Segmentation faul
    for i in range ( 0 , n - 1 ) :			      2 0 SETUP_LOOP 106 ( to 108 )				    2 0 SETUP_LOOP 96 ( to 98 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( arr [ i ] > arr [ i + 1 ] ) :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    if ( arr [ i ] - arr [ i + 1 ] == 1 ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
		arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/CHECK_
	    else :					      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_
		return False				      10 BINARY_SUBTRACT					    10 BINARY_SUBTRACT						  ALLOWED.dis
    return True						      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 88 ( to 106 )				    >> 16 FOR_ITER 82 ( to 96 )					  
							      18 STORE_FAST 2 ( i )					    18 STORE_FAST 2 ( i )					  
							      								    								  
							      3 20 LOAD_FAST 0 ( arr )					    3 20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_FAST 2 ( i )					    22 LOAD_FAST 2 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 0 ( arr )					    26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 COMPARE_OP 4 ( > )					    36 COMPARE_OP 4 ( > )					  
							      38 POP_JUMP_IF_FALSE 16					    38 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      4 40 LOAD_FAST 0 ( arr )					    4 40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 2 ( i )					    48 LOAD_FAST 2 ( i )					  
							      50 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 BINARY_SUBTRACT					    56 LOAD_CONST 2 ( 1 )					  
							      58 LOAD_CONST 2 ( 1 )					    58 COMPARE_OP 2 ( == )					  
							      60 COMPARE_OP 2 ( == )					    60 POP_JUMP_IF_FALSE 16					  
							      62 POP_JUMP_IF_FALSE 100					    								  
							      								    5 62 LOAD_FAST 0 ( arr )					  
							      5 64 LOAD_FAST 0 ( arr )					    64 LOAD_FAST 2 ( i )					  
							      66 LOAD_FAST 2 ( i )					    66 BINARY_SUBSCR						  
							      68 LOAD_CONST 2 ( 1 )					    68 LOAD_FAST 0 ( arr )					  
							      70 BINARY_ADD						    70 LOAD_FAST 2 ( i )					  
							      72 BINARY_SUBSCR						    72 LOAD_CONST 2 ( 1 )					  
							      74 LOAD_FAST 0 ( arr )					    74 BINARY_ADD						  
							      76 LOAD_FAST 2 ( i )					    76 STORE_SUBSCR						  
							      78 BINARY_SUBSCR						    78 LOAD_FAST 0 ( arr )					  
							      80 ROT_TWO						    80 LOAD_FAST 2 ( i )					  
							      82 LOAD_FAST 0 ( arr )					    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 2 ( i )					    84 ROT_TWO							  
							      86 STORE_SUBSCR						    86 LOAD_FAST 0 ( arr )					  
							      88 LOAD_FAST 0 ( arr )					    88 LOAD_FAST 2 ( i )					  
							      90 LOAD_FAST 2 ( i )					    90 STORE_SUBSCR						  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_FAST 0 ( arr )					  
							      94 BINARY_ADD						    94 LOAD_FAST 2 ( i )					  
							      96 STORE_SUBSCR						    96 BINARY_SUBSCR						  
							      98 JUMP_ABSOLUTE 16					    98 ROT_TWO							  
							      								    100 LOAD_FAST 0 ( arr )					  
							      7 >> 100 LOAD_CONST 3 ( False )				    102 LOAD_FAST 2 ( i )					  
							      102 RETURN_VALUE						    104 STORE_SUBSCR						  
							      104 JUMP_ABSOLUTE 16					    106 LOAD_FAST 0 ( arr )					  
							      >> 106 POP_BLOCK						    108 LOAD_FAST 2 ( i )					  
							      								    110 BINARY_SUBSCR						  
							      8 >> 108 LOAD_CONST 4 ( True )				    112 ROT_TWO							  
							      110 RETURN_VALUE NEW_LINE					    114 LOAD_FAST 0 ( arr )					  
							      								    116 LOAD_FAST 2 ( i )					  
							      								    118 STORE_SUBSCR						  
							      								    120 LOAD_FAST 0 ( arr )					  
							      								    122 LOAD_FAST 2 ( i )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 ROT_TWO							  
							      								    128 STORE_FAST 0 ( arr )					  
							      								    130 STORE_FAST 2 ( i )					  
							      								    >> 132 JUMP_ABSOLUTE 16					  
							      								    >> 134 POP_BLOCK						  
							      								    								  
							      								    6 >> 136 LOAD_CONST 3 ( False )				  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
def insertionSortRecursive ( arr , n ) :		      Disassembly of <code object insertionSortRecursive at 0x7f33e Disassembly of <code object insertionSortRecursive at 0x7f2b0 error : /bin/bash: line 1:  4531 Segmentation faul
    if n <= 1 :						      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return						      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    insertionSortRecursive ( arr , n - 1 )		      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    last = arr [ n - 1 ]				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/RECURS
    j = n - 2						      								    								  IVE_INSERTION_SORT.dis
    while ( j >= 0 and arr [ j ] > last ) :		      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_CONST 0 ( None )					  
	arr [ j + 1 ] = arr [ j ]			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	j = j - 1					      								    								  
    arr [ j + 1 ] = last				      4 >> 12 LOAD_GLOBAL 0 ( insertionSortRecursive )		    4 >> 12 LOAD_GLOBAL 0 ( insertionSortRecursive )		  
							      14 LOAD_FAST 0 ( arr )					    14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 CALL_FUNCTION 2					    22 CALL_FUNCTION 2						  
							      24 POP_TOP						    24 POP_TOP							  
							      								    								  
							      5 26 LOAD_FAST 0 ( arr )					    5 26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 LOAD_CONST 1 ( 1 )					    30 LOAD_CONST 1 ( 1 )					  
							      32 BINARY_SUBTRACT					    32 BINARY_SUBTRACT						  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 STORE_FAST 2 ( last )					    36 STORE_FAST 2 ( last )					  
							      								    								  
							      6 38 LOAD_FAST 1 ( n )					    6 38 LOAD_FAST 1 ( n )					  
							      40 LOAD_CONST 2 ( 2 )					    40 LOAD_CONST 2 ( 2 )					  
							      42 BINARY_SUBTRACT					    42 BINARY_SUBTRACT						  
							      44 STORE_FAST 3 ( j )					    44 STORE_FAST 3 ( j )					  
							      								    								  
							      7 46 SETUP_LOOP 48 ( to 96 )				    7 46 SETUP_LOOP 46 ( to 96 )				  
							      >> 48 LOAD_FAST 3 ( j )					    >> 48 LOAD_FAST 3 ( j )					  
							      50 LOAD_CONST 3 ( 0 )					    50 LOAD_CONST 3 ( 0 )					  
							      52 COMPARE_OP 5 ( >= )					    52 COMPARE_OP 5 ( >= )					  
							      54 POP_JUMP_IF_FALSE 94					    54 POP_JUMP_IF_FALSE 94					  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 3 ( j )					    58 LOAD_FAST 3 ( j )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 2 ( last )					    62 LOAD_FAST 0 ( arr )					  
							      64 COMPARE_OP 4 ( > )					    64 LOAD_FAST 3 ( j )					  
							      66 POP_JUMP_IF_FALSE 94					    66 LOAD_CONST 1 ( 1 )					  
							      								    68 BINARY_ADD						  
							      8 68 LOAD_FAST 0 ( arr )					    70 STORE_SUBSCR						  
							      70 LOAD_FAST 3 ( j )					    								  
							      72 BINARY_SUBSCR						    8 72 LOAD_FAST 3 ( j )					  
							      74 LOAD_FAST 0 ( arr )					    74 LOAD_CONST 1 ( 1 )					  
							      76 LOAD_FAST 3 ( j )					    76 BINARY_SUBTRACT						  
							      78 LOAD_CONST 1 ( 1 )					    78 STORE_FAST 3 ( j )					  
							      80 BINARY_ADD						    80 JUMP_ABSOLUTE 48						  
							      82 STORE_SUBSCR						    >> 82 POP_BLOCK						  
							      								    								  
							      9 84 LOAD_FAST 3 ( j )					    9 >> 84 LOAD_FAST 2 ( last )				  
							      86 LOAD_CONST 1 ( 1 )					    86 LOAD_FAST 0 ( arr )					  
							      88 BINARY_SUBTRACT					    88 LOAD_FAST 3 ( j )					  
							      90 STORE_FAST 3 ( j )					    90 LOAD_CONST 1 ( 1 )					  
							      92 JUMP_ABSOLUTE 48					    92 BINARY_ADD						  
							      >> 94 POP_BLOCK						    94 STORE_SUBSCR						  
							      								    96 LOAD_CONST 0 ( None )					  
							      10 >> 96 LOAD_FAST 2 ( last )				    98 RETURN_VALUE NEW_LINE					  
							      98 LOAD_FAST 0 ( arr )					    								  
							      100 LOAD_FAST 3 ( j )					    								  
							      102 LOAD_CONST 1 ( 1 )					    								  
							      104 BINARY_ADD						    								  
							      106 STORE_SUBSCR						    								  
							      108 LOAD_CONST 0 ( None )					    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSTRING_1				      LONGEST_COMMON_SUBSTRING_1				    LONGEST_COMMON_SUBSTRING_1					  LONGEST_COMMON_SUBSTRING_1
--							      --							    --								  --
def lcs ( i , j , count ) :				      Disassembly of <code object lcs at 0x7f33e2649a50, file "<dis Disassembly of <code object lcs at 0x7f2b0163dc90, file "<dis script_not_found : None
    if ( i == 0 or j == 0 ) :				      2 0 LOAD_FAST 0 ( i )					    2 0 LOAD_FAST 0 ( i )					  
	return count					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( X [ i - 1 ] == Y [ j - 1 ] ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	count = lcs ( i - 1 , j - 1 , count + 1 )	      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
    count = max ( count , max ( lcs ( i , j - 1 , 0 ) , lcs ( 8 LOAD_FAST 1 ( j )					    8 LOAD_FAST 1 ( j )						  
    return count					      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_FAST 2 ( count )				    3 >> 16 LOAD_FAST 2 ( count )				  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_GLOBAL 0 ( X )				    4 >> 20 LOAD_GLOBAL 0 ( X )					  
							      22 LOAD_FAST 0 ( i )					    22 LOAD_FAST 0 ( i )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_GLOBAL 1 ( Y )					    30 LOAD_GLOBAL 1 ( Y )					  
							      32 LOAD_FAST 1 ( j )					    32 LOAD_FAST 1 ( j )					  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBTRACT						  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 COMPARE_OP 2 ( == )					    40 COMPARE_OP 2 ( == )					  
							      42 POP_JUMP_IF_FALSE 68					    42 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      5 44 LOAD_GLOBAL 2 ( lcs )				    5 44 LOAD_GLOBAL 2 ( lcs )					  
							      46 LOAD_FAST 0 ( i )					    46 LOAD_FAST 0 ( i )					  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_SUBTRACT					    50 BINARY_SUBTRACT						  
							      52 LOAD_FAST 1 ( j )					    52 LOAD_FAST 2 ( count )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_SUBTRACT					    56 BINARY_ADD						  
							      58 LOAD_FAST 2 ( count )					    58 CALL_FUNCTION 2						  
							      60 LOAD_CONST 2 ( 1 )					    60 STORE_FAST 2 ( count )					  
							      62 BINARY_ADD						    62 JUMP_FORWARD 18 ( to 86 )				  
							      64 CALL_FUNCTION 3					    								  
							      66 STORE_FAST 2 ( count )					    6 >> 64 LOAD_GLOBAL 3 ( max )				  
							      								    66 LOAD_FAST 2 ( count )					  
							      6 >> 68 LOAD_GLOBAL 3 ( max )				    68 LOAD_GLOBAL 3 ( max )					  
							      70 LOAD_FAST 2 ( count )					    70 LOAD_GLOBAL 4 ( lcs )					  
							      72 LOAD_GLOBAL 3 ( max )					    72 LOAD_FAST 0 ( i )					  
							      74 LOAD_GLOBAL 2 ( lcs )					    74 LOAD_FAST 1 ( j )					  
							      76 LOAD_FAST 0 ( i )					    76 LOAD_CONST 2 ( 1 )					  
							      78 LOAD_FAST 1 ( j )					    78 BINARY_SUBTRACT						  
							      80 LOAD_CONST 2 ( 1 )					    80 LOAD_CONST 1 ( 0 )					  
							      82 BINARY_SUBTRACT					    82 CALL_FUNCTION 3						  
							      84 LOAD_CONST 1 ( 0 )					    84 LOAD_GLOBAL 5 ( lcs )					  
							      86 CALL_FUNCTION 3					    86 LOAD_FAST 0 ( i )					  
							      88 LOAD_GLOBAL 2 ( lcs )					    88 LOAD_CONST 2 ( 1 )					  
							      90 LOAD_FAST 0 ( i )					    90 BINARY_SUBTRACT						  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_FAST 1 ( j )					  
							      94 BINARY_SUBTRACT					    94 LOAD_CONST 1 ( 0 )					  
							      96 LOAD_FAST 1 ( j )					    96 CALL_FUNCTION 3						  
							      98 LOAD_CONST 1 ( 0 )					    98 CALL_FUNCTION 2						  
							      100 CALL_FUNCTION 3					    100 CALL_FUNCTION 2						  
							      102 CALL_FUNCTION 2					    102 STORE_FAST 2 ( count )					  
							      104 CALL_FUNCTION 2					    								  
							      106 STORE_FAST 2 ( count )				    7 104 LOAD_FAST 2 ( count )					  
							      								    106 RETURN_VALUE NEW_LINE					  
							      7 108 LOAD_FAST 2 ( count )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			      CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			    CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX				  CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX
--							      --							    --								  --
def areSumSame ( a , n , m ) :				      Disassembly of <code object areSumSame at 0x7f33e2644930, fil Disassembly of <code object areSumSame at 0x7f2b01639660, fil error : Traceback (most recent call last):   File
    sum1 = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    sum2 = 0						      2 STORE_FAST 3 ( sum1 )					    2 STORE_FAST 3 ( sum1 )					  (item)   File "main.py", line 38, in <module>	  Fi
    for i in range ( 0 , n ) :				      								    								  le "<dis>", line 2, in areSumSame TypeError: 'int'
	sum1 = 0					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					   object is not subscriptable
	sum2 = 0					      6 STORE_FAST 4 ( sum2 )					    6 STORE_FAST 4 ( sum2 )					  
	for j in range ( 0 , m ) :			      								    								  
	    sum1 += a [ i ] [ j ]			      4 8 SETUP_LOOP 90 ( to 100 )				    4 8 SETUP_LOOP 80 ( to 90 )					  
	    sum2 += a [ j ] [ i ]			      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
	if ( sum1 == sum2 ) :				      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
	    return 1					      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
    return 0						      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 76 ( to 98 )				    >> 20 FOR_ITER 68 ( to 88 )					  
							      22 STORE_FAST 5 ( i )					    22 STORE_FAST 5 ( i )					  
							      								    								  
							      5 24 LOAD_CONST 1 ( 0 )					    5 24 LOAD_CONST 1 ( 0 )					  
							      26 STORE_FAST 3 ( sum1 )					    26 STORE_FAST 3 ( sum1 )					  
							      								    								  
							      6 28 LOAD_CONST 1 ( 0 )					    6 28 LOAD_CONST 1 ( 0 )					  
							      30 STORE_FAST 4 ( sum2 )					    30 STORE_FAST 4 ( sum2 )					  
							      								    								  
							      7 32 SETUP_LOOP 50 ( to 84 )				    7 32 SETUP_LOOP 38 ( to 76 )				  
							      34 LOAD_GLOBAL 0 ( range )				    34 LOAD_GLOBAL 0 ( range )					  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 LOAD_FAST 2 ( m )					    38 LOAD_FAST 2 ( m )					  
							      40 CALL_FUNCTION 2					    40 CALL_FUNCTION 2						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 36 ( to 82 )				    >> 44 FOR_ITER 30 ( to 74 )					  
							      46 STORE_FAST 6 ( j )					    46 STORE_FAST 6 ( j )					  
							      								    								  
							      8 48 LOAD_FAST 3 ( sum1 )					    8 48 LOAD_FAST 3 ( sum1 )					  
							      50 LOAD_FAST 0 ( a )					    50 LOAD_FAST 0 ( a )					  
							      52 LOAD_FAST 5 ( i )					    52 LOAD_FAST 5 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 6 ( j )					    56 LOAD_FAST 6 ( j )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 3 ( sum1 )					    62 STORE_FAST 3 ( sum1 )					  
							      								    								  
							      9 64 LOAD_FAST 4 ( sum2 )					    9 64 LOAD_FAST 4 ( sum2 )					  
							      66 LOAD_FAST 0 ( a )					    66 LOAD_FAST 0 ( a )					  
							      68 LOAD_FAST 6 ( j )					    68 LOAD_FAST 6 ( j )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_FAST 5 ( i )					    72 LOAD_FAST 5 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 INPLACE_ADD						    76 INPLACE_ADD						  
							      78 STORE_FAST 4 ( sum2 )					    78 STORE_FAST 4 ( sum2 )					  
							      80 JUMP_ABSOLUTE 44					    80 JUMP_ABSOLUTE 44						  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      10 >> 84 LOAD_FAST 3 ( sum1 )				    10 >> 84 LOAD_FAST 4 ( sum2 )				  
							      86 LOAD_FAST 4 ( sum2 )					    86 LOAD_FAST 3 ( sum2 )					  
							      88 COMPARE_OP 2 ( == )					    88 COMPARE_OP 2 ( == )					  
							      90 POP_JUMP_IF_FALSE 20					    90 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      11 92 LOAD_CONST 2 ( 1 )					    11 92 LOAD_CONST 2 ( 1 )					  
							      94 RETURN_VALUE						    94 RETURN_VALUE						  
							      96 JUMP_ABSOLUTE 20					    96 JUMP_ABSOLUTE 20						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      								    								  
							      12 >> 100 LOAD_CONST 1 ( 0 )				    12 >> 100 LOAD_CONST 1 ( 0 )				  
							      102 RETURN_VALUE NEW_LINE					    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			  LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1
--							      --							    --								  --
def maxLength ( s , n ) :				      Disassembly of <code object maxLength at 0x7f33e2644f60, file Disassembly of <code object maxLength at 0x7f2b0164ded0, file script_not_found : None
    invalidOpenBraces = 0 ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    invalidCloseBraces = 0 ;				      2 STORE_FAST 2 ( invalidOpenBraces )			    2 STORE_FAST 2 ( invalidClosees )				  
    for i in range ( n ) :				      								    								  
	if ( s [ i ] == '(' ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	    invalidOpenBraces += 1			      6 STORE_FAST 3 ( invalidCloseBraces )			    6 STORE_FAST 3 ( invalidClosees )				  
	else :						      								    								  
	    if ( invalidOpenBraces == 0 ) :		      4 8 SETUP_LOOP 64 ( to 74 )				    4 8 SETUP_LOOP 56 ( to 66 )					  
		invalidCloseBraces += 1			      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
	    else :					      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
		invalidOpenBraces -= 1			      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
    return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) 16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 52 ( to 72 )				    >> 18 FOR_ITER 48 ( to 64 )					  
							      20 STORE_FAST 4 ( i )					    20 STORE_FAST 4 ( i )					  
							      								    								  
							      5 22 LOAD_FAST 0 ( s )					    5 22 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 4 ( i )					    24 LOAD_FAST 4 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_CONST 2 ( '(' )					    28 LOAD_CONST 2 ( '(' )					  
							      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 44					    32 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      6 34 LOAD_FAST 2 ( invalidOpenBraces )			    6 34 LOAD_FAST 3 ( invalidOpenBraces )			  
							      36 LOAD_CONST 3 ( 1 )					    36 LOAD_CONST 3 ( 1 )					  
							      38 INPLACE_ADD						    38 INPLACE_ADD						  
							      40 STORE_FAST 2 ( invalidOpenBraces )			    40 STORE_FAST 3 ( invalidOpenBraces )			  
							      42 JUMP_ABSOLUTE 18					    42 JUMP_ABSOLUTE 18						  
							      								    								  
							      8 >> 44 LOAD_FAST 2 ( invalidOpenBraces )			    8 44 LOAD_FAST 2 ( invalidOpenBraces )			  
							      46 LOAD_CONST 1 ( 0 )					    46 LOAD_CONST 1 ( 0 )					  
							      48 COMPARE_OP 2 ( == )					    48 COMPARE_OP 2 ( == )					  
							      50 POP_JUMP_IF_FALSE 62					    50 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      9 52 LOAD_FAST 3 ( invalidCloseBraces )			    9 52 LOAD_FAST 3 ( invalidClosees )				  
							      54 LOAD_CONST 3 ( 1 )					    54 LOAD_CONST 3 ( 1 )					  
							      56 INPLACE_ADD						    56 INPLACE_ADD						  
							      58 STORE_FAST 3 ( invalidCloseBraces )			    58 STORE_FAST 3 ( invalidClosees )				  
							      60 JUMP_ABSOLUTE 18					    60 JUMP_ABSOLUTE 18						  
							      								    								  
							      11 >> 62 LOAD_FAST 2 ( invalidOpenBraces )		    11 >> 62 LOAD_FAST 3 ( invalidOpenBraces )			  
							      64 LOAD_CONST 3 ( 1 )					    64 LOAD_CONST 3 ( 1 )					  
							      66 INPLACE_SUBTRACT					    66 INPLACE_SUBTRACT						  
							      68 STORE_FAST 2 ( invalidOpenBraces )			    68 STORE_FAST 3 ( invalidOpenBraces )			  
							      70 JUMP_ABSOLUTE 18					    70 JUMP_ABSOLUTE 18						  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      								    								  
							      12 >> 74 LOAD_FAST 1 ( n )				    12 >> 74 LOAD_FAST 1 ( n )					  
							      76 LOAD_FAST 2 ( invalidOpenBraces )			    76 LOAD_FAST 2 ( invalidOpenes )				  
							      78 LOAD_FAST 3 ( invalidCloseBraces )			    78 LOAD_FAST 3 ( invalidClosees )				  
							      80 BINARY_ADD						    80 BINARY_ADD						  
							      82 BINARY_SUBTRACT					    82 CALL_FUNCTION 1						  
							      84 RETURN_VALUE NEW_LINE					    84 BINARY_SUBTRACT						  
							      								    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	      GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	    GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	  GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT
--							      --							    --								  --
def findSymPairs ( arr , row ) :			      Disassembly of <code object findSymPairs at 0x7f33e2644f60, f Disassembly of <code object findSymPairs at 0x7f2b0163dc90, f script_not_found : None
    hM = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    for i in range ( row ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	first = arr [ i ] [ 0 ]				      4 STORE_FAST 2 ( hM )					    4 STORE_FAST 2 ( hM )					  
	sec = arr [ i ] [ 1 ]				      								    								  
	if ( sec in hM.keys ( ) and hM [ sec ] == first ) :   3 6 SETUP_LOOP 90 ( to 98 )				    3 6 SETUP_LOOP 96 ( to 108 )				  
	    print ( "(" , sec , "," , first , ")" )	      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	else :						      10 LOAD_FAST 1 ( row )					    10 LOAD_FAST 1 ( row )					  
	    hM [ first ] = sec				      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 78 ( to 96 )				    >> 16 FOR_ITER 82 ( to 106 )				  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 0 ( arr )					    4 20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 STORE_FAST 4 ( first )					    30 STORE_FAST 4 ( first )					  
							      								    								  
							      5 32 LOAD_FAST 0 ( arr )					    5 32 LOAD_FAST 0 ( arr )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 2 ( 1 )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 STORE_FAST 5 ( sec )					    42 STORE_FAST 5 ( sec )					  
							      								    								  
							      6 44 LOAD_FAST 5 ( sec )					    6 44 LOAD_FAST 5 ( sec )					  
							      46 LOAD_FAST 2 ( hM )					    46 LOAD_FAST 2 ( hM )					  
							      48 LOAD_METHOD 2 ( keys )					    48 LOAD_METHOD 2 ( keys )					  
							      50 CALL_METHOD 0						    50 CALL_METHOD 0						  
							      52 COMPARE_OP 6 ( in )					    52 COMPARE_OP 6 ( in )					  
							      54 POP_JUMP_IF_FALSE 86					    54 POP_JUMP_IF_FALSE 76					  
							      56 LOAD_FAST 2 ( hM )					    56 LOAD_FAST 2 ( hM )					  
							      58 LOAD_FAST 5 ( sec )					    58 LOAD_FAST 5 ( sec )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 4 ( first )					    62 LOAD_FAST 4 ( first )					  
							      64 COMPARE_OP 2 ( == )					    64 COMPARE_OP 2 ( == )					  
							      66 POP_JUMP_IF_FALSE 86					    66 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      7 68 LOAD_GLOBAL 3 ( print )				    7 68 LOAD_GLOBAL 3 ( print )				  
							      70 LOAD_CONST 3 ( '(' )					    70 LOAD_CONST 3 ( '(' )					  
							      72 LOAD_FAST 5 ( sec )					    72 LOAD_FAST 5 ( sec )					  
							      74 LOAD_CONST 4 ( ',' )					    74 LOAD_CONST 4 ( ',' )					  
							      76 LOAD_FAST 4 ( first )					    76 LOAD_FAST 4 ( first )					  
							      78 LOAD_CONST 5 ( ')' )					    78 LOAD_CONST 5 ( ')' )					  
							      80 CALL_FUNCTION 5					    80 CALL_FUNCTION 5						  
							      82 POP_TOP						    82 POP_TOP							  
							      84 JUMP_ABSOLUTE 16					    84 JUMP_ABSOLUTE 16						  
							      								    								  
							      9 >> 86 LOAD_FAST 5 ( sec )				    9 >> 86 LOAD_FAST 5 ( sec )					  
							      88 LOAD_FAST 2 ( hM )					    88 LOAD_FAST 2 ( hM )					  
							      90 LOAD_FAST 4 ( first )					    90 LOAD_FAST 4 ( first )					  
							      92 STORE_SUBSCR						    92 STORE_SUBSCR						  
							      94 JUMP_ABSOLUTE 16					    94 JUMP_ABSOLUTE 16						  
							      >> 96 POP_BLOCK						    >> 96 POP_BLOCK						  
							      >> 98 LOAD_CONST 0 ( None )				    >> 98 LOAD_CONST 0 ( None )					  
							      100 RETURN_VALUE NEW_LINE					    100 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PAIRS_ARRAY_XOR_0				      FIND_NUMBER_PAIRS_ARRAY_XOR_0				    FIND_NUMBER_PAIRS_ARRAY_XOR_0				  FIND_NUMBER_PAIRS_ARRAY_XOR_0
--							      --							    --								  --
def calculate ( a ) :					      Disassembly of <code object calculate at 0x7f33e26499c0, file Disassembly of <code object calculate at 0x7f2b01639660, file script_not_found : None
    a.sort ( )						      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    count = 1						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    answer = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
    for i in range ( 1 , len ( a ) ) :			      6 POP_TOP							    6 POP_TOP							  
	if a [ i ] == a [ i - 1 ] :			      								    								  
	    count += 1					      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
	else :						      10 STORE_FAST 1 ( count )					    10 STORE_FAST 1 ( count )					  
	    answer = answer + count * ( count - 1 ) // 2      								    								  
	    count = 1					      4 12 LOAD_CONST 2 ( 0 )					    4 12 LOAD_CONST 2 ( 0 )					  
    answer = answer + count * ( count - 1 ) // 2	      14 STORE_FAST 2 ( answer )				    14 STORE_FAST 2 ( answer )					  
    return answer					      								    								  
							      5 16 SETUP_LOOP 76 ( to 94 )				    5 16 SETUP_LOOP 74 ( to 88 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_CONST 1 ( 1 )					    20 LOAD_CONST 1 ( 1 )					  
							      22 LOAD_GLOBAL 2 ( len )					    22 LOAD_GLOBAL 2 ( len )					  
							      24 LOAD_FAST 0 ( a )					    24 LOAD_FAST 0 ( a )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 58 ( to 92 )				    >> 32 FOR_ITER 52 ( to 86 )					  
							      34 STORE_FAST 3 ( i )					    34 STORE_FAST 3 ( i )					  
							      								    								  
							      6 36 LOAD_FAST 0 ( a )					    6 36 LOAD_FAST 0 ( a )					  
							      38 LOAD_FAST 3 ( i )					    38 LOAD_FAST 3 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( a )					    42 LOAD_FAST 0 ( a )					  
							      44 LOAD_FAST 3 ( i )					    44 LOAD_FAST 3 ( i )					  
							      46 LOAD_CONST 1 ( 1 )					    46 LOAD_CONST 1 ( 1 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 66					    54 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      7 56 LOAD_FAST 1 ( count )				    7 56 LOAD_FAST 1 ( count )					  
							      58 LOAD_CONST 1 ( 1 )					    58 LOAD_CONST 1 ( 1 )					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 1 ( count )					    62 STORE_FAST 1 ( count )					  
							      64 JUMP_ABSOLUTE 32					    64 JUMP_ABSOLUTE 32						  
							      								    								  
							      9 >> 66 LOAD_FAST 2 ( answer )				    9 >> 66 LOAD_FAST 2 ( answer )				  
							      68 LOAD_FAST 1 ( count )					    68 LOAD_FAST 1 ( count )					  
							      70 LOAD_FAST 1 ( count )					    70 LOAD_FAST 1 ( count )					  
							      72 LOAD_CONST 1 ( 1 )					    72 LOAD_CONST 1 ( 1 )					  
							      74 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      76 BINARY_MULTIPLY					    76 BINARY_MULTIPLY						  
							      78 LOAD_CONST 3 ( 2 )					    78 LOAD_CONST 3 ( 2 )					  
							      80 BINARY_FLOOR_DIVIDE					    80 BINARY_FLOOR_DIVIDE					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 STORE_FAST 2 ( answer )				    84 STORE_FAST 2 ( answer )					  
							      								    								  
							      10 86 LOAD_CONST 1 ( 1 )					    10 86 LOAD_CONST 1 ( 1 )					  
							      88 STORE_FAST 1 ( count )					    88 STORE_FAST 1 ( count )					  
							      90 JUMP_ABSOLUTE 32					    90 JUMP_ABSOLUTE 32						  
							      >> 92 POP_BLOCK						    >> 92 POP_BLOCK						  
							      								    								  
							      11 >> 94 LOAD_FAST 2 ( answer )				    11 >> 94 LOAD_FAST 2 ( answer )				  
							      96 LOAD_FAST 1 ( count )					    96 LOAD_FAST 1 ( count )					  
							      98 LOAD_FAST 1 ( count )					    98 LOAD_FAST 1 ( count )					  
							      100 LOAD_CONST 1 ( 1 )					    100 LOAD_CONST 1 ( 1 )					  
							      102 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      104 BINARY_MULTIPLY					    104 BINARY_MULTIPLY						  
							      106 LOAD_CONST 3 ( 2 )					    106 LOAD_CONST 3 ( 2 )					  
							      108 BINARY_FLOOR_DIVIDE					    108 BINARY_FLOOR_DIVIDE					  
							      110 BINARY_ADD						    110 BINARY_ADD						  
							      112 STORE_FAST 2 ( answer )				    112 STORE_FAST 2 ( answer )					  
							      								    								  
							      12 114 LOAD_FAST 2 ( answer )				    12 114 LOAD_FAST 2 ( answer )				  
							      116 RETURN_VALUE NEW_LINE					    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1
--							      --							    --								  --
def breakSum ( n ) :					      Disassembly of <code object breakSum at 0x7f33e2644930, file  Disassembly of <code object breakSum at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    dp = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    dp [ 0 ] = 0					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  (item)   File "main.py", line 33, in <module>	  Fi
    dp [ 1 ] = 1					      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  le "<dis>", line 2, in breakSum TypeError: unsuppo
    for i in range ( 2 , n + 1 ) :			      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  rted operand type(s) for +: 'range_iterator' and '
	dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i  8 BINARY_ADD						    8 BINARY_ADD						  int'
    return dp [ n ]					      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 STORE_FAST 1 ( dp )					    12 STORE_FAST 1 ( dp )					  
							      								    								  
							      3 14 LOAD_CONST 1 ( 0 )					    3 14 LOAD_CONST 1 ( 0 )					  
							      16 LOAD_FAST 1 ( dp )					    16 LOAD_FAST 1 ( dp )					  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  
							      20 STORE_SUBSCR						    20 STORE_SUBSCR						  
							      								    								  
							      4 22 LOAD_CONST 2 ( 1 )					    4 22 LOAD_CONST 2 ( 1 )					  
							      24 LOAD_FAST 1 ( dp )					    24 LOAD_FAST 1 ( dp )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 STORE_SUBSCR						    28 STORE_SUBSCR						  
							      								    								  
							      5 30 SETUP_LOOP 80 ( to 112 )				    5 30 SETUP_LOOP 72 ( to 96 )				  
							      32 LOAD_GLOBAL 0 ( range )				    32 LOAD_GLOBAL 0 ( range )					  
							      34 LOAD_CONST 3 ( 2 )					    34 LOAD_CONST 3 ( 2 )					  
							      36 LOAD_FAST 0 ( n )					    36 LOAD_FAST 0 ( n )					  
							      38 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 2 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 62 ( to 110 )				    >> 46 FOR_ITER 52 ( to 94 )					  
							      48 STORE_FAST 2 ( i )					    48 STORE_FAST 2 ( i )					  
							      								    								  
							      6 50 LOAD_GLOBAL 1 ( max )				    6 50 LOAD_GLOBAL 1 ( max )					  
							      52 LOAD_FAST 1 ( dp )					    52 LOAD_FAST 1 ( dp )					  
							      54 LOAD_GLOBAL 2 ( int )					    54 LOAD_GLOBAL 2 ( int )					  
							      56 LOAD_FAST 2 ( i )					    56 LOAD_FAST 2 ( i )					  
							      58 LOAD_CONST 3 ( 2 )					    58 LOAD_CONST 3 ( 2 )					  
							      60 BINARY_TRUE_DIVIDE					    60 BINARY_TRUE_DIVIDE					  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 1 ( dp )					    66 LOAD_FAST 1 ( dp )					  
							      68 LOAD_GLOBAL 2 ( int )					    68 LOAD_GLOBAL 2 ( int )					  
							      70 LOAD_FAST 2 ( i )					    70 LOAD_FAST 2 ( i )					  
							      72 LOAD_CONST 4 ( 3 )					    72 LOAD_CONST 4 ( 3 )					  
							      74 BINARY_TRUE_DIVIDE					    74 BINARY_TRUE_DIVIDE					  
							      76 CALL_FUNCTION 1					    76 CALL_FUNCTION 1						  
							      78 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      80 BINARY_ADD						    80 BINARY_ADD						  
							      82 LOAD_FAST 1 ( dp )					    82 LOAD_FAST 1 ( dp )					  
							      84 LOAD_GLOBAL 2 ( int )					    84 LOAD_GLOBAL 2 ( int )					  
							      86 LOAD_FAST 2 ( i )					    86 LOAD_FAST 2 ( i )					  
							      88 LOAD_CONST 5 ( 4 )					    88 LOAD_CONST 5 ( 4 )					  
							      90 BINARY_TRUE_DIVIDE					    90 BINARY_TRUE_DIVIDE					  
							      92 CALL_FUNCTION 1					    92 CALL_FUNCTION 1						  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 BINARY_ADD						    96 BINARY_ADD						  
							      98 LOAD_FAST 2 ( i )					    98 LOAD_FAST 2 ( i )					  
							      100 CALL_FUNCTION 2					    100 CALL_FUNCTION 2						  
							      102 LOAD_FAST 1 ( dp )					    102 BINARY_ADD						  
							      104 LOAD_FAST 2 ( i )					    104 LOAD_FAST 2 ( i )					  
							      106 STORE_SUBSCR						    106 CALL_FUNCTION 2						  
							      108 JUMP_ABSOLUTE 46					    108 LOAD_FAST 1 ( dp )					  
							      >> 110 POP_BLOCK						    110 LOAD_FAST 2 ( i )					  
							      								    112 STORE_SUBSCR						  
							      7 >> 112 LOAD_FAST 1 ( dp )				    114 JUMP_ABSOLUTE 46					  
							      114 LOAD_FAST 0 ( n )					    >> 116 POP_BLOCK						  
							      116 BINARY_SUBSCR						    								  
							      118 RETURN_VALUE NEW_LINE					    7 >> 118 LOAD_FAST 1 ( dp )					  
							      								    120 LOAD_FAST 0 ( n )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM
--							      --							    --								  --
def isSubsetSum ( set , n , sum ) :			      Disassembly of <code object isSubsetSum at 0x7f33e26494b0, fi Disassembly of <code object isSubsetSum at 0x7f2b0163dc90, fi script_not_found : None
    if ( sum == 0 ) :					      2 0 LOAD_FAST 2 ( sum )					    2 0 LOAD_FAST 2 ( sum )					  
	return True					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( n == 0 and sum != 0 ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return False					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    if ( set [ n - 1 ] > sum ) :			      								    								  
	return isSubsetSum ( set , n - 1 , sum ) ;	      3 8 LOAD_CONST 2 ( True )					    3 8 LOAD_CONST 2 ( True )					  
    return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( 10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_FAST 1 ( n )					    4 >> 12 LOAD_FAST 1 ( n )					  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 32					    18 POP_JUMP_IF_FALSE 38					  
							      20 LOAD_FAST 2 ( sum )					    20 LOAD_FAST 2 ( sum )					  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 COMPARE_OP 3 ( != )					    24 COMPARE_OP 3 ( != )					  
							      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      5 28 LOAD_CONST 3 ( False )				    5 28 LOAD_CONST 3 ( False )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      6 >> 32 LOAD_FAST 0 ( set )				    6 >> 32 LOAD_FAST 0 ( set )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 LOAD_CONST 4 ( 1 )					    36 LOAD_CONST 4 ( 1 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 2 ( sum )					    42 LOAD_FAST 2 ( sum )					  
							      44 COMPARE_OP 4 ( > )					    44 COMPARE_OP 4 ( > )					  
							      46 POP_JUMP_IF_FALSE 64					    46 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      7 48 LOAD_GLOBAL 0 ( isSubsetSum )			    7 48 LOAD_GLOBAL 0 ( isSubsetSum )				  
							      50 LOAD_FAST 0 ( set )					    50 LOAD_FAST 0 ( set )					  
							      52 LOAD_FAST 1 ( n )					    52 LOAD_FAST 1 ( n )					  
							      54 LOAD_CONST 4 ( 1 )					    54 LOAD_CONST 4 ( 1 )					  
							      56 BINARY_SUBTRACT					    56 BINARY_SUBTRACT						  
							      58 LOAD_FAST 2 ( sum )					    58 LOAD_FAST 2 ( sum )					  
							      60 CALL_FUNCTION 3					    60 CALL_FUNCTION 3						  
							      62 RETURN_VALUE						    62 RETURN_VALUE						  
							      								    								  
							      8 >> 64 LOAD_GLOBAL 0 ( isSubsetSum )			    8 >> 64 LOAD_GLOBAL 0 ( isSubsetSum )			  
							      66 LOAD_FAST 0 ( set )					    66 LOAD_FAST 0 ( set )					  
							      68 LOAD_FAST 1 ( n )					    68 LOAD_FAST 1 ( n )					  
							      70 LOAD_CONST 4 ( 1 )					    70 LOAD_CONST 4 ( 1 )					  
							      72 BINARY_SUBTRACT					    72 BINARY_SUBTRACT						  
							      74 LOAD_FAST 2 ( sum )					    74 LOAD_FAST 2 ( sum )					  
							      76 CALL_FUNCTION 3					    76 CALL_FUNCTION 3						  
							      78 JUMP_IF_TRUE_OR_POP 106				    78 JUMP_IF_TRUE_OR_POP 96					  
							      80 LOAD_GLOBAL 0 ( isSubsetSum )				    80 LOAD_GLOBAL 0 ( isSubsetSum )				  
							      82 LOAD_FAST 0 ( set )					    82 LOAD_FAST 0 ( set )					  
							      84 LOAD_FAST 1 ( n )					    84 LOAD_FAST 1 ( n )					  
							      86 LOAD_CONST 4 ( 1 )					    86 LOAD_CONST 4 ( 1 )					  
							      88 BINARY_SUBTRACT					    88 BINARY_SUBTRACT						  
							      90 LOAD_FAST 2 ( sum )					    90 LOAD_FAST 2 ( sum )					  
							      92 LOAD_FAST 0 ( set )					    92 LOAD_FAST 0 ( set )					  
							      94 LOAD_FAST 1 ( n )					    94 LOAD_FAST 1 ( n )					  
							      96 LOAD_CONST 4 ( 1 )					    96 LOAD_CONST 4 ( 1 )					  
							      98 BINARY_SUBTRACT					    98 BINARY_SUBTRACT						  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      104 CALL_FUNCTION 3					    104 CALL_FUNCTION 2						  
							      >> 106 RETURN_VALUE NEW_LINE				    106 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1
--							      --							    --								  --
def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :	      Disassembly of <code object maxSumPairWithDifferenceLessThanK Disassembly of <code object maxSumPairWithDifferenceLessThanK timeout : None
    maxSum = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    arr.sort ( ) ;					      2 STORE_FAST 3 ( maxSum )					    2 STORE_FAST 3 ( maxSum )					  
    i = N - 1 ;						      								    								  
    while ( i >= 0 ) :					      3 4 LOAD_FAST 0 ( arr )					    3 4 LOAD_FAST 0 ( arr )					  
	if ( arr [ i ] - arr [ i - 1 ] < k ) :		      6 LOAD_METHOD 0 ( sort )					    6 LOAD_METHOD 0 ( sort )					  
	    maxSum += arr [ i ] ;			      8 CALL_METHOD 0						    8 CALL_METHOD 0						  
	    maxSum += arr [ i - 1 ] ;			      10 POP_TOP						    10 POP_TOP							  
	    i -= 1 ;					      								    								  
	i -= 1 ;					      4 12 LOAD_FAST 1 ( N )					    4 12 LOAD_FAST 2 ( N )					  
    return maxSum ;					      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 STORE_FAST 4 ( i )					    18 STORE_FAST 4 ( i )					  
							      								    								  
							      5 20 SETUP_LOOP 80 ( to 102 )				    5 20 SETUP_LOOP 70 ( to 92 )				  
							      >> 22 LOAD_FAST 4 ( i )					    >> 22 LOAD_FAST 4 ( i )					  
							      24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 1 ( 0 )					  
							      26 COMPARE_OP 5 ( >= )					    26 COMPARE_OP 5 ( >= )					  
							      28 POP_JUMP_IF_FALSE 100					    28 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      6 30 LOAD_FAST 0 ( arr )					    6 30 LOAD_FAST 0 ( arr )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 0 ( arr )					    36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_FAST 4 ( i )					    38 LOAD_FAST 4 ( i )					  
							      40 LOAD_CONST 2 ( 1 )					    40 LOAD_CONST 2 ( 1 )					  
							      42 BINARY_SUBTRACT					    42 BINARY_SUBTRACT						  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 LOAD_FAST 2 ( k )					    48 LOAD_FAST 2 ( k )					  
							      50 COMPARE_OP 0 ( < )					    50 COMPARE_OP 0 ( < )					  
							      52 POP_JUMP_IF_FALSE 90					    52 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      7 54 LOAD_FAST 3 ( maxSum )				    7 54 LOAD_FAST 3 ( maxSum )					  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 4 ( i )					    58 LOAD_FAST 4 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 INPLACE_ADD						    62 INPLACE_ADD						  
							      64 STORE_FAST 3 ( maxSum )				    64 STORE_FAST 3 ( maxSum )					  
							      								    								  
							      8 66 LOAD_FAST 3 ( maxSum )				    8 66 LOAD_FAST 3 ( maxSum )					  
							      68 LOAD_FAST 0 ( arr )					    68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 4 ( i )					    70 LOAD_FAST 4 ( i )					  
							      72 LOAD_CONST 2 ( 1 )					    72 LOAD_CONST 2 ( 1 )					  
							      74 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 INPLACE_ADD						    78 INPLACE_ADD						  
							      80 STORE_FAST 3 ( maxSum )				    80 STORE_FAST 3 ( maxSum )					  
							      								    								  
							      9 82 LOAD_FAST 4 ( i )					    9 82 LOAD_FAST 4 ( i )					  
							      84 LOAD_CONST 2 ( 1 )					    84 LOAD_CONST 2 ( 1 )					  
							      86 INPLACE_SUBTRACT					    86 INPLACE_SUBTRACT						  
							      88 STORE_FAST 4 ( i )					    88 STORE_FAST 4 ( i )					  
							      								    								  
							      10 >> 90 LOAD_FAST 4 ( i )				    10 >> 90 LOAD_FAST 4 ( i )					  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_CONST 2 ( 1 )					  
							      94 INPLACE_SUBTRACT					    94 INPLACE_SUBTRACT						  
							      96 STORE_FAST 4 ( i )					    96 STORE_FAST 4 ( i )					  
							      98 JUMP_ABSOLUTE 22					    98 JUMP_ABSOLUTE 22						  
							      >> 100 POP_BLOCK						    >> 100 POP_BLOCK						  
							      								    								  
							      11 >> 102 LOAD_FAST 3 ( maxSum )				    11 >> 102 LOAD_FAST 3 ( maxSum )				  
							      104 RETURN_VALUE NEW_LINE					    104 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			      REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			    REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			  REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S
--							      --							    --								  --
def replace ( s , c1 , c2 ) :				      Disassembly of <code object replace at 0x7f33e2649a50, file " Disassembly of <code object replace at 0x7f2b0163dc90, file " error : /bin/bash: line 1:  4575 Segmentation faul
    l = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( l ) :				      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ataset/bin/python XLM/dis_script.py --script_path
	if ( s [ i ] == c1 ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    s = s [ 0 : i ] + c2 + s [ i + 1 : ]	      6 STORE_FAST 3 ( l )					    6 STORE_FAST 3 ( l )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/REPLAC
	elif ( s [ i ] == c2 ) :			      								    								  E_CHARACTER_C1_C2_C2_C1_STRING_S.dis
	    s = s [ 0 : i ] + c1 + s [ i + 1 : ]	      3 8 SETUP_LOOP 106 ( to 116 )				    3 8 SETUP_LOOP 92 ( to 108 )				  
    return s						      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 3 ( l )					    12 LOAD_FAST 3 ( l )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 94 ( to 114 )				    >> 18 FOR_ITER 76 ( to 106 )				  
							      20 STORE_FAST 4 ( i )					    20 STORE_FAST 4 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( s )					    4 22 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 4 ( i )					    24 LOAD_FAST 4 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_FAST 1 ( c1 )					    28 LOAD_FAST 1 ( c1 )					  
							      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 68					    32 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      5 34 LOAD_FAST 0 ( s )					    5 34 LOAD_FAST 0 ( s )					  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 LOAD_FAST 4 ( i )					    38 LOAD_FAST 4 ( i )					  
							      40 BUILD_SLICE 2						    40 BUILD_SLICE 2						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 2 ( c2 )					    44 LOAD_FAST 2 ( c2 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 LOAD_FAST 0 ( s )					    48 LOAD_FAST 0 ( s )					  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 4 ( i )					  
							      52 LOAD_CONST 2 ( 1 )					    52 LOAD_CONST 2 ( 1 )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 LOAD_CONST 0 ( None )					    56 LOAD_CONST 0 ( None )					  
							      58 BUILD_SLICE 2						    58 BUILD_SLICE 2						  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 BINARY_ADD						    62 BINARY_ADD						  
							      64 STORE_FAST 0 ( s )					    64 STORE_FAST 0 ( s )					  
							      66 JUMP_ABSOLUTE 18					    64 JUMP_ABSOLUTE 18						  
							      								    								  
							      6 >> 68 LOAD_FAST 0 ( s )					    6 >> 66 LOAD_FAST 0 ( s )					  
							      70 LOAD_FAST 4 ( i )					    68 LOAD_FAST 4 ( i )					  
							      72 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      74 LOAD_FAST 2 ( c2 )					    72 LOAD_FAST 2 ( c2 )					  
							      76 COMPARE_OP 2 ( == )					    74 COMPARE_OP 2 ( == )					  
							      78 POP_JUMP_IF_FALSE 18					    76 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      7 80 LOAD_FAST 0 ( s )					    7 78 LOAD_FAST 0 ( s )					  
							      82 LOAD_CONST 1 ( 0 )					    80 LOAD_CONST 1 ( 0 )					  
							      84 LOAD_FAST 4 ( i )					    82 LOAD_FAST 4 ( i )					  
							      86 BUILD_SLICE 2						    84 BUILD_SLICE 2						  
							      88 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      90 LOAD_FAST 1 ( c1 )					    88 LOAD_FAST 1 ( c1 )					  
							      92 BINARY_ADD						    90 BINARY_ADD						  
							      94 LOAD_FAST 0 ( s )					    92 LOAD_FAST 0 ( s )					  
							      96 LOAD_FAST 4 ( i )					    94 LOAD_FAST 4 ( i )					  
							      98 LOAD_CONST 2 ( 1 )					    96 LOAD_CONST 2 ( 1 )					  
							      100 BINARY_ADD						    98 BINARY_ADD						  
							      102 LOAD_CONST 0 ( None )					    100 LOAD_CONST 0 ( None )					  
							      104 BUILD_SLICE 2						    102 BUILD_SLICE 2						  
							      106 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      108 BINARY_ADD						    106 BINARY_ADD						  
							      110 STORE_FAST 0 ( s )					    108 STORE_FAST 0 ( s )					  
							      112 JUMP_ABSOLUTE 18					    110 JUMP_ABSOLUTE 18					  
							      >> 114 POP_BLOCK						    >> 112 POP_BLOCK						  
							      								    								  
							      8 >> 116 LOAD_FAST 0 ( s )				    8 >> 114 LOAD_FAST 0 ( s )					  
							      118 RETURN_VALUE NEW_LINE					    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER_1				      SQUARE_ROOT_OF_AN_INTEGER_1				    SQUARE_ROOT_OF_AN_INTEGER_1					  SQUARE_ROOT_OF_AN_INTEGER_1
--							      --							    --								  --
def floorSqrt ( x ) :					      Disassembly of <code object floorSqrt at 0x7f33e2649a50, file Disassembly of <code object floorSqrt at 0x7f2b0163dc90, file error : /bin/bash: line 1:  4585 Segmentation faul
    if ( x == 0 or x == 1 ) :				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return x					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    start = 1						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    end = x						      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/SQUARE
    while ( start <= end ) :				      8 LOAD_FAST 0 ( x )					    8 LOAD_FAST 0 ( x )						  _ROOT_OF_AN_INTEGER_1.dis
	mid = ( start + end ) // 2			      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
	if ( mid * mid == x ) :				      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	    return mid					      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
	if ( mid * mid < x ) :				      								    								  
	    start = mid + 1				      3 >> 16 LOAD_FAST 0 ( x )					    3 >> 16 LOAD_FAST 0 ( x )					  
	    ans = mid					      18 RETURN_VALUE						    18 RETURN_VALUE						  
	else :						      								    								  
	    end = mid - 1				      4 >> 20 LOAD_CONST 2 ( 1 )				    4 >> 20 LOAD_CONST 2 ( 1 )					  
    return ans						      22 STORE_FAST 1 ( start )					    22 STORE_FAST 1 ( start )					  
							      								    								  
							      5 24 LOAD_FAST 0 ( x )					    5 24 LOAD_FAST 0 ( x )					  
							      26 STORE_FAST 2 ( end )					    26 STORE_FAST 2 ( end )					  
							      								    								  
							      6 28 SETUP_LOOP 74 ( to 104 )				    6 28 SETUP_LOOP 68 ( to 94 )				  
							      >> 30 LOAD_FAST 1 ( start )				    >> 30 LOAD_FAST 1 ( start )					  
							      32 LOAD_FAST 2 ( end )					    32 LOAD_FAST 2 ( end )					  
							      34 COMPARE_OP 1 ( <= )					    34 COMPARE_OP 1 ( <= )					  
							      36 POP_JUMP_IF_FALSE 102					    36 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      7 38 LOAD_FAST 1 ( start )				    7 38 LOAD_FAST 1 ( start )					  
							      40 LOAD_FAST 2 ( end )					    40 LOAD_FAST 2 ( end )					  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 LOAD_CONST 3 ( 2 )					    44 LOAD_CONST 3 ( 2 )					  
							      46 BINARY_FLOOR_DIVIDE					    46 BINARY_FLOOR_DIVIDE					  
							      48 STORE_FAST 3 ( mid )					    48 STORE_FAST 3 ( mid )					  
							      								    								  
							      8 50 LOAD_FAST 3 ( mid )					    8 50 LOAD_FAST 3 ( mid )					  
							      52 LOAD_FAST 3 ( mid )					    52 LOAD_FAST 3 ( mid )					  
							      54 BINARY_MULTIPLY					    54 BINARY_MULTIPLY						  
							      56 LOAD_FAST 0 ( x )					    56 LOAD_FAST 0 ( x )					  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 66					    60 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      9 62 LOAD_FAST 3 ( mid )					    9 62 LOAD_FAST 3 ( mid )					  
							      64 RETURN_VALUE						    64 RETURN_VALUE						  
							      								    								  
							      10 >> 66 LOAD_FAST 3 ( mid )				    10 >> 66 LOAD_FAST 3 ( mid )				  
							      68 LOAD_FAST 3 ( mid )					    68 LOAD_FAST 3 ( mid )					  
							      70 BINARY_MULTIPLY					    70 BINARY_MULTIPLY						  
							      72 LOAD_FAST 0 ( x )					    72 LOAD_FAST 0 ( x )					  
							      74 COMPARE_OP 0 ( < )					    74 COMPARE_OP 0 ( < )					  
							      76 POP_JUMP_IF_FALSE 92					    76 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      11 78 LOAD_FAST 3 ( mid )					    11 78 LOAD_FAST 3 ( mid )					  
							      80 LOAD_CONST 2 ( 1 )					    80 LOAD_CONST 2 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 STORE_FAST 1 ( start )					    84 STORE_FAST 1 ( start )					  
							      								    								  
							      12 86 LOAD_FAST 3 ( mid )					    12 86 LOAD_FAST 3 ( mid )					  
							      88 STORE_FAST 4 ( ans )					    88 STORE_FAST 4 ( ans )					  
							      90 JUMP_ABSOLUTE 30					    90 JUMP_ABSOLUTE 30						  
							      								    								  
							      14 >> 92 LOAD_FAST 3 ( mid )				    14 >> 92 LOAD_FAST 3 ( mid )				  
							      94 LOAD_CONST 2 ( 1 )					    94 LOAD_CONST 2 ( 1 )					  
							      96 BINARY_SUBTRACT					    96 BINARY_SUBTRACT						  
							      98 STORE_FAST 2 ( end )					    98 STORE_FAST 2 ( end )					  
							      100 JUMP_ABSOLUTE 30					    >> 100 JUMP_ABSOLUTE 30					  
							      >> 102 POP_BLOCK						    >> 102 POP_BLOCK						  
							      								    								  
							      15 >> 104 LOAD_FAST 4 ( ans )				    15 >> 104 LOAD_FAST 4 ( ans )				  
							      106 RETURN_VALUE NEW_LINE					    106 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	      CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	    CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	  CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING
--							      --							    --								  --
def calcMaxValue ( str ) :				      Disassembly of <code object calcMaxValue at 0x7f33e2644930, f Disassembly of <code object calcMaxValue at 0x7f2b0164d390, f error : Traceback (most recent call last):   File
    res = ord ( str [ 0 ] ) - 48			      2 0 LOAD_GLOBAL 0 ( ord )					    2 0 LOAD_GLOBAL 0 ( ord )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 1 , len ( str ) ) :		      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( str [ i ] == '0' or str [ i ] == '1' or res < 2  4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in calcMaxValue TypeError: '<'
	    res += ord ( str [ i ] ) - 48		      6 BINARY_SUBSCR						    6 BINARY_SUBSCR						   not supported between instances of 'int' and 'str
	else :						      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  '
	    res *= ord ( str [ i ] ) - 48		      10 LOAD_CONST 2 ( 48 )					    10 LOAD_CONST 2 ( 48 )					  
    return res						      12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
							      14 STORE_FAST 1 ( res )					    14 STORE_FAST 1 ( res )					  
							      								    								  
							      3 16 SETUP_LOOP 96 ( to 114 )				    3 16 SETUP_LOOP 92 ( to 108 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_CONST 3 ( 1 )					    20 LOAD_CONST 3 ( 1 )					  
							      22 LOAD_GLOBAL 2 ( len )					    22 LOAD_GLOBAL 2 ( len )					  
							      24 LOAD_FAST 0 ( str )					    24 LOAD_FAST 0 ( str )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 78 ( to 112 )				    >> 32 FOR_ITER 66 ( to 106 )				  
							      34 STORE_FAST 2 ( i )					    34 STORE_FAST 2 ( i )					  
							      								    								  
							      4 36 LOAD_FAST 0 ( str )					    4 36 LOAD_FAST 0 ( str )					  
							      38 LOAD_FAST 2 ( i )					    38 LOAD_FAST 2 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_CONST 4 ( '0' )					    42 LOAD_CONST 4 ( '0' )					  
							      44 COMPARE_OP 2 ( == )					    44 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_TRUE 68					    46 POP_JUMP_IF_TRUE 52					  
							      48 LOAD_FAST 0 ( str )					    48 LOAD_FAST 0 ( str )					  
							      50 LOAD_FAST 2 ( i )					    50 LOAD_FAST 2 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_CONST 5 ( '1' )					    54 LOAD_CONST 4 ( '1' )					  
							      56 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_TRUE 68					    58 POP_JUMP_IF_TRUE 32					  
							      60 LOAD_FAST 1 ( res )					    60 LOAD_FAST 1 ( res )					  
							      62 LOAD_CONST 6 ( 2 )					    62 LOAD_CONST 5 ( 2 )					  
							      64 COMPARE_OP 0 ( < )					    64 COMPARE_OP 0 ( < )					  
							      66 POP_JUMP_IF_FALSE 90					    66 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      5 >> 68 LOAD_FAST 1 ( res )				    5 68 LOAD_FAST 1 ( res )					  
							      70 LOAD_GLOBAL 0 ( ord )					    70 LOAD_GLOBAL 0 ( ord )					  
							      72 LOAD_FAST 0 ( str )					    72 LOAD_FAST 0 ( str )					  
							      74 LOAD_FAST 2 ( i )					    74 LOAD_FAST 2 ( i )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 CALL_FUNCTION 1					    78 CALL_FUNCTION 1						  
							      80 LOAD_CONST 2 ( 48 )					    80 LOAD_CONST 2 ( 48 )					  
							      82 BINARY_SUBTRACT					    82 BINARY_SUBTRACT						  
							      84 INPLACE_ADD						    84 INPLACE_ADD						  
							      86 STORE_FAST 1 ( res )					    86 STORE_FAST 1 ( res )					  
							      88 JUMP_ABSOLUTE 32					    88 JUMP_ABSOLUTE 32						  
							      								    								  
							      7 >> 90 LOAD_FAST 1 ( res )				    7 >> 90 LOAD_FAST 1 ( res )					  
							      92 LOAD_GLOBAL 0 ( ord )					    92 LOAD_GLOBAL 0 ( ord )					  
							      94 LOAD_FAST 0 ( str )					    94 LOAD_FAST 0 ( str )					  
							      96 LOAD_FAST 2 ( i )					    96 LOAD_FAST 2 ( i )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 CALL_FUNCTION 1					    100 CALL_FUNCTION 1						  
							      102 LOAD_CONST 2 ( 48 )					    102 LOAD_CONST 2 ( 48 )					  
							      104 BINARY_SUBTRACT					    104 BINARY_SUBTRACT						  
							      106 INPLACE_MULTIPLY					    106 INPLACE_MULTIPLY					  
							      108 STORE_FAST 1 ( res )					    108 STORE_FAST 1 ( res )					  
							      110 JUMP_ABSOLUTE 32					    110 JUMP_ABSOLUTE 32					  
							      >> 112 POP_BLOCK						    >> 112 POP_BLOCK						  
							      								    								  
							      8 >> 114 LOAD_FAST 1 ( res )				    8 >> 114 LOAD_FAST 1 ( res )				  
							      116 RETURN_VALUE NEW_LINE					    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP
--							      --							    --								  --
def isHeap ( arr , i , n ) :				      Disassembly of <code object isHeap at 0x7f33e26494b0, file "< Disassembly of <code object isHeap at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    if i > int ( ( n - 2 ) / 2 ) :			      2 0 LOAD_FAST 1 ( i )					    2 0 LOAD_FAST 1 ( i )					  "XLM/dis_script.py", line 60, in <module>	exec
	return True					      2 LOAD_GLOBAL 0 ( int )					    2 LOAD_GLOBAL 0 ( int )					  (item)   File "main.py", line 32, in <module>	  Fi
    if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr  4 LOAD_FAST 2 ( n )					    4 LOAD_FAST 2 ( n )						  le "<dis>", line 2, in isHeap	  File "<dis>", line
	return True					      6 LOAD_CONST 1 ( 2 )					    6 LOAD_CONST 1 ( 2 )					   2, in isHeap TypeError: unsupported operand type(
    return False					      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  s) for -: 'function' and 'int'
							      10 LOAD_CONST 1 ( 2 )					    10 LOAD_CONST 1 ( 2 )					  
							      12 BINARY_TRUE_DIVIDE					    12 BINARY_TRUE_DIVIDE					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 COMPARE_OP 4 ( > )					    16 COMPARE_OP 4 ( > )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      3 20 LOAD_CONST 2 ( True )				    3 20 LOAD_CONST 2 ( True )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      4 >> 24 LOAD_FAST 0 ( arr )				    4 >> 24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 1 ( i )					    26 LOAD_FAST 1 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 0 ( arr )					    30 LOAD_FAST 0 ( arr )					  
							      32 LOAD_CONST 1 ( 2 )					    32 LOAD_CONST 1 ( 2 )					  
							      34 LOAD_FAST 1 ( i )					    34 LOAD_FAST 1 ( i )					  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 LOAD_CONST 3 ( 1 )					    38 LOAD_CONST 3 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 COMPARE_OP 5 ( >= )					    44 COMPARE_OP 5 ( >= )					  
							      46 POP_JUMP_IF_FALSE 116					    46 POP_JUMP_IF_FALSE 90					  
							      48 LOAD_FAST 0 ( arr )					    48 LOAD_FAST 0 ( arr )					  
							      50 LOAD_FAST 1 ( i )					    50 LOAD_FAST 1 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 0 ( arr )					    54 LOAD_FAST 0 ( arr )					  
							      56 LOAD_CONST 1 ( 2 )					    56 LOAD_CONST 1 ( 2 )					  
							      58 LOAD_FAST 1 ( i )					    58 LOAD_FAST 1 ( i )					  
							      60 BINARY_MULTIPLY					    60 BINARY_MULTIPLY						  
							      62 LOAD_CONST 1 ( 2 )					    62 LOAD_CONST 1 ( 2 )					  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 COMPARE_OP 5 ( >= )					    68 COMPARE_OP 5 ( >= )					  
							      70 POP_JUMP_IF_FALSE 116					    70 POP_JUMP_IF_FALSE 90					  
							      72 LOAD_GLOBAL 1 ( isHeap )				    72 LOAD_GLOBAL 1 ( isHeap )					  
							      74 LOAD_FAST 0 ( arr )					    74 LOAD_FAST 0 ( arr )					  
							      76 LOAD_CONST 1 ( 2 )					    76 LOAD_CONST 1 ( 2 )					  
							      78 LOAD_FAST 1 ( i )					    78 LOAD_FAST 1 ( i )					  
							      80 BINARY_MULTIPLY					    80 BINARY_MULTIPLY						  
							      82 LOAD_CONST 3 ( 1 )					    82 LOAD_CONST 3 ( 1 )					  
							      84 BINARY_ADD						    84 BINARY_ADD						  
							      86 LOAD_FAST 2 ( n )					    86 LOAD_FAST 2 ( n )					  
							      88 CALL_FUNCTION 3					    88 CALL_FUNCTION 3						  
							      90 POP_JUMP_IF_FALSE 116					    >> 90 JUMP_IF_FALSE_OR_POP 102				  
							      92 LOAD_GLOBAL 1 ( isHeap )				    92 LOAD_GLOBAL 1 ( isHeap )					  
							      94 LOAD_FAST 0 ( arr )					    94 LOAD_FAST 0 ( arr )					  
							      96 LOAD_CONST 1 ( 2 )					    96 LOAD_CONST 1 ( 2 )					  
							      98 LOAD_FAST 1 ( i )					    98 LOAD_FAST 1 ( i )					  
							      100 BINARY_MULTIPLY					    100 BINARY_MULTIPLY						  
							      102 LOAD_CONST 1 ( 2 )					    102 LOAD_CONST 1 ( 2 )					  
							      104 BINARY_ADD						    104 BINARY_ADD						  
							      106 LOAD_FAST 2 ( n )					    106 LOAD_FAST 2 ( n )					  
							      108 CALL_FUNCTION 3					    108 CALL_FUNCTION 3						  
							      110 POP_JUMP_IF_FALSE 116					    110 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      5 112 LOAD_CONST 2 ( True )				    5 112 LOAD_CONST 2 ( True )					  
							      114 RETURN_VALUE						    114 RETURN_VALUE						  
							      								    								  
							      6 >> 116 LOAD_CONST 4 ( False )				    6 >> 116 LOAD_CONST 4 ( False )				  
							      118 RETURN_VALUE NEW_LINE					    118 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE
--							      --							    --								  --
def minCoins ( coins , m , V ) :			      Disassembly of <code object minCoins at 0x7f33e2644930, file  Disassembly of <code object minCoins at 0x7f2b0164d810, file  script_not_found : None
    if ( V == 0 ) :					      2 0 LOAD_FAST 2 ( V )					    2 0 LOAD_FAST 2 ( V )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    res = sys.maxsize					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    for i in range ( 0 , m ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	if ( coins [ i ] <= V ) :			      								    								  
	    sub_res = minCoins ( coins , m , V - coins [ i ]  3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    if ( sub_res != sys.maxsize and sub_res + 1 < res 10 RETURN_VALUE						    10 RETURN_VALUE						  
		res = sub_res + 1			      								    								  
    return res						      4 >> 12 LOAD_GLOBAL 0 ( sys )				    4 >> 12 LOAD_GLOBAL 0 ( sys )				  
							      14 LOAD_ATTR 1 ( maxsize )				    14 LOAD_ATTR 1 ( maxsize )					  
							      16 STORE_FAST 3 ( res )					    16 STORE_FAST 3 ( res )					  
							      								    								  
							      5 18 SETUP_LOOP 80 ( to 100 )				    5 18 SETUP_LOOP 76 ( to 96 )				  
							      20 LOAD_GLOBAL 2 ( range )				    20 LOAD_GLOBAL 2 ( range )					  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 LOAD_FAST 1 ( m )					    24 LOAD_FAST 1 ( m )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 66 ( to 98 )				    >> 30 FOR_ITER 60 ( to 94 )					  
							      32 STORE_FAST 4 ( i )					    32 STORE_FAST 4 ( i )					  
							      								    								  
							      6 34 LOAD_FAST 0 ( coins )				    6 34 LOAD_FAST 0 ( coins )					  
							      36 LOAD_FAST 4 ( i )					    36 LOAD_FAST 4 ( i )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 2 ( V )					    40 LOAD_FAST 2 ( V )					  
							      42 COMPARE_OP 1 ( <= )					    42 COMPARE_OP 1 ( <= )					  
							      44 POP_JUMP_IF_FALSE 30					    44 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      7 46 LOAD_GLOBAL 3 ( minCoins )				    7 46 LOAD_GLOBAL 3 ( minCoins )				  
							      48 LOAD_FAST 0 ( coins )					    48 LOAD_FAST 0 ( coins )					  
							      50 LOAD_FAST 1 ( m )					    50 LOAD_FAST 1 ( m )					  
							      52 LOAD_FAST 2 ( V )					    52 LOAD_FAST 2 ( V )					  
							      54 LOAD_FAST 0 ( coins )					    54 LOAD_FAST 0 ( coins )					  
							      56 LOAD_FAST 4 ( i )					    56 LOAD_FAST 4 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 CALL_FUNCTION 3					    62 CALL_FUNCTION 3						  
							      64 STORE_FAST 5 ( sub_res )				    64 STORE_FAST 5 ( sub_res )					  
							      								    								  
							      8 66 LOAD_FAST 5 ( sub_res )				    8 66 LOAD_FAST 5 ( sub_res )				  
							      68 LOAD_GLOBAL 0 ( sys )					    68 LOAD_GLOBAL 0 ( sys )					  
							      70 LOAD_ATTR 1 ( maxsize )				    70 LOAD_ATTR 1 ( maxsize )					  
							      72 COMPARE_OP 3 ( != )					    72 COMPARE_OP 3 ( != )					  
							      74 POP_JUMP_IF_FALSE 30					    74 POP_JUMP_IF_FALSE 30					  
							      76 LOAD_FAST 5 ( sub_res )				    76 LOAD_FAST 5 ( sub_res )					  
							      78 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 2 ( 1 )					  
							      80 BINARY_ADD						    80 BINARY_ADD						  
							      82 LOAD_FAST 3 ( res )					    82 LOAD_FAST 3 ( res )					  
							      84 COMPARE_OP 0 ( < )					    84 COMPARE_OP 0 ( < )					  
							      86 POP_JUMP_IF_FALSE 30					    86 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      9 88 LOAD_FAST 5 ( sub_res )				    9 88 LOAD_FAST 5 ( sub_res )				  
							      90 LOAD_CONST 2 ( 1 )					    90 LOAD_CONST 2 ( 1 )					  
							      92 BINARY_ADD						    92 BINARY_ADD						  
							      94 STORE_FAST 3 ( res )					    94 STORE_FAST 3 ( res )					  
							      96 JUMP_ABSOLUTE 30					    96 JUMP_ABSOLUTE 30						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      								    								  
							      10 >> 100 LOAD_FAST 3 ( res )				    10 >> 100 LOAD_FAST 3 ( res )				  
							      102 RETURN_VALUE NEW_LINE					    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		      UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		    UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		  UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1
--							      --							    --								  --
def printIntersection ( arr1 , arr2 , m , n ) :		      Disassembly of <code object printIntersection at 0x7f33e2649a Disassembly of <code object printIntersection at 0x7f2b016399 script_not_found : None
    i , j = 0 , 0					      2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				    2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				  
    while i < m and j < n :				      2 UNPACK_SEQUENCE 2					    2 UNPACK_SEQUENCE 2						  
	if arr1 [ i ] < arr2 [ j ] :			      4 STORE_FAST 4 ( i )					    4 STORE_FAST 4 ( i )					  
	    i += 1					      6 STORE_FAST 5 ( j )					    6 STORE_FAST 5 ( j )					  
	elif arr2 [ j ] < arr1 [ i ] :			      								    								  
	    j += 1					      3 8 SETUP_LOOP 100 ( to 110 )				    3 8 SETUP_LOOP 80 ( to 90 )					  
	else :						      >> 10 LOAD_FAST 4 ( i )					    >> 10 LOAD_FAST 4 ( i )					  
	    print ( arr2 [ j ] )			      12 LOAD_FAST 2 ( m )					    12 LOAD_FAST 2 ( m )					  
	    j += 1					      14 COMPARE_OP 0 ( < )					    14 COMPARE_OP 0 ( < )					  
	    i += 1					      16 POP_JUMP_IF_FALSE 108					    16 POP_JUMP_IF_FALSE 88					  
							      18 LOAD_FAST 5 ( j )					    18 LOAD_FAST 5 ( j )					  
							      20 LOAD_FAST 3 ( n )					    20 LOAD_FAST 3 ( n )					  
							      22 COMPARE_OP 0 ( < )					    22 COMPARE_OP 0 ( < )					  
							      24 POP_JUMP_IF_FALSE 108					    24 POP_JUMP_IF_FALSE 88					  
							      								    								  
							      4 26 LOAD_FAST 0 ( arr1 )					    4 26 LOAD_FAST 0 ( arr1 )					  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_FAST 4 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 1 ( arr2 )					    32 LOAD_FAST 1 ( arr2 )					  
							      34 LOAD_FAST 5 ( j )					    34 LOAD_FAST 5 ( j )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 0 ( < )					  
							      40 POP_JUMP_IF_FALSE 52					    40 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      5 42 LOAD_FAST 4 ( i )					    5 42 LOAD_FAST 4 ( i )					  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 INPLACE_ADD						    46 INPLACE_ADD						  
							      48 STORE_FAST 4 ( i )					    48 STORE_FAST 4 ( i )					  
							      50 JUMP_ABSOLUTE 10					    50 JUMP_ABSOLUTE 10						  
							      								    								  
							      6 >> 52 LOAD_FAST 1 ( arr2 )				    6 >> 52 LOAD_FAST 1 ( arr2 )				  
							      54 LOAD_FAST 5 ( j )					    54 LOAD_FAST 5 ( j )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 0 ( arr1 )					    58 LOAD_FAST 0 ( arr1 )					  
							      60 LOAD_FAST 4 ( i )					    60 LOAD_FAST 4 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 COMPARE_OP 0 ( < )					    64 COMPARE_OP 0 ( < )					  
							      66 POP_JUMP_IF_FALSE 78					    66 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      7 68 LOAD_FAST 5 ( j )					    7 68 LOAD_FAST 5 ( j )					  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 INPLACE_ADD						    72 INPLACE_ADD						  
							      74 STORE_FAST 5 ( j )					    74 STORE_FAST 5 ( j )					  
							      76 JUMP_ABSOLUTE 10					    76 JUMP_ABSOLUTE 10						  
							      								    								  
							      9 >> 78 LOAD_GLOBAL 0 ( print )				    9 >> 78 LOAD_GLOBAL 0 ( print )				  
							      80 LOAD_FAST 1 ( arr2 )					    80 LOAD_FAST 1 ( arr2 )					  
							      82 LOAD_FAST 5 ( j )					    82 LOAD_FAST 5 ( j )					  
							      84 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      86 CALL_FUNCTION 1					    86 CALL_FUNCTION 1						  
							      88 POP_TOP						    88 POP_TOP							  
							      								    								  
							      10 90 LOAD_FAST 5 ( j )					    10 90 LOAD_FAST 5 ( j )					  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_CONST 2 ( 1 )					  
							      94 INPLACE_ADD						    94 INPLACE_ADD						  
							      96 STORE_FAST 5 ( j )					    96 STORE_FAST 4 ( i )					  
							      								    98 JUMP_ABSOLUTE 10						  
							      11 98 LOAD_FAST 4 ( i )					    100 POP_BLOCK						  
							      100 LOAD_CONST 2 ( 1 )					    >> 102 LOAD_CONST 0 ( None )				  
							      102 INPLACE_ADD						    104 RETURN_VALUE NEW_LINE					  
							      104 STORE_FAST 4 ( i )					    								  
							      106 JUMP_ABSOLUTE 10					    								  
							      >> 108 POP_BLOCK						    								  
							      >> 110 LOAD_CONST 0 ( None )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> CATIVE_INVERSE_UNDER_MODULO_M_1			      <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			    <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			  <unk> CATIVE_INVERSE_UNDER_MODULO_M_1
--							      --							    --								  --
def modInverse ( a , m ) :				      Disassembly of <code object modInverse at 0x7f33e26494b0, fil Disassembly of <code object modInverse at 0x7f2b016399c0, fil script_not_found : None
    m0 = m						      2 0 LOAD_FAST 1 ( m )					    2 0 LOAD_FAST 1 ( m )					  
    y = 0						      2 STORE_FAST 2 ( m0 )					    2 STORE_FAST 2 ( m0 )					  
    x = 1						      								    								  
    if ( m == 1 ) :					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	return 0					      6 STORE_FAST 3 ( y )					    6 STORE_FAST 3 ( y )					  
    while ( a > 1 ) :					      								    								  
	q = a // m					      4 8 LOAD_CONST 2 ( 1 )					    4 8 LOAD_CONST 2 ( 1 )					  
	t = m						      10 STORE_FAST 4 ( x )					    10 STORE_FAST 4 ( x )					  
	m = a % m					      								    								  
	a = t						      5 12 LOAD_FAST 1 ( m )					    5 12 LOAD_FAST 1 ( m )					  
	t = y						      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
	y = x - q * y					      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
	x = t						      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
    if ( x < 0 ) :					      								    								  
	x = x + m0					      6 20 LOAD_CONST 1 ( 0 )					    6 20 LOAD_CONST 1 ( 0 )					  
    return x						      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      7 >> 24 SETUP_LOOP 56 ( to 82 )				    7 >> 24 SETUP_LOOP 66 ( to 94 )				  
							      >> 26 LOAD_FAST 0 ( a )					    >> 26 LOAD_FAST 0 ( a )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 COMPARE_OP 4 ( > )					    30 COMPARE_OP 4 ( > )					  
							      32 POP_JUMP_IF_FALSE 80					    32 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      8 34 LOAD_FAST 0 ( a )					    8 34 LOAD_FAST 0 ( a )					  
							      36 LOAD_FAST 1 ( m )					    36 LOAD_FAST 1 ( m )					  
							      38 BINARY_FLOOR_DIVIDE					    38 BINARY_FLOOR_DIVIDE					  
							      40 STORE_FAST 5 ( q )					    40 STORE_FAST 5 ( q )					  
							      								    								  
							      9 42 LOAD_FAST 1 ( m )					    9 42 LOAD_FAST 0 ( a )					  
							      44 STORE_FAST 6 ( t )					    44 LOAD_FAST 1 ( m )					  
							      								    46 BINARY_MODULO						  
							      10 46 LOAD_FAST 0 ( a )					    48 STORE_FAST 6 ( t )					  
							      48 LOAD_FAST 1 ( m )					    								  
							      50 BINARY_MODULO						    10 50 LOAD_FAST 6 ( t )					  
							      52 STORE_FAST 1 ( m )					    52 STORE_FAST 7 ( t )					  
							      								    								  
							      11 54 LOAD_FAST 6 ( t )					    11 54 LOAD_FAST 3 ( y )					  
							      56 STORE_FAST 0 ( a )					    56 STORE_FAST 8 ( t )					  
							      								    								  
							      12 58 LOAD_FAST 3 ( y )					    12 58 LOAD_FAST 4 ( x )					  
							      60 STORE_FAST 6 ( t )					    60 LOAD_FAST 5 ( q )					  
							      								    62 LOAD_FAST 3 ( y )					  
							      13 62 LOAD_FAST 4 ( x )					    64 BINARY_MULTIPLY						  
							      64 LOAD_FAST 5 ( q )					    66 BINARY_SUBTRACT						  
							      66 LOAD_FAST 3 ( y )					    68 STORE_FAST 3 ( y )					  
							      68 BINARY_MULTIPLY					    								  
							      70 BINARY_SUBTRACT					    13 70 LOAD_FAST 6 ( t )					  
							      72 STORE_FAST 3 ( y )					    72 STORE_FAST 4 ( x )					  
							      								    74 JUMP_ABSOLUTE 26						  
							      14 74 LOAD_FAST 6 ( t )					    >> 76 POP_BLOCK						  
							      76 STORE_FAST 4 ( x )					    								  
							      78 JUMP_ABSOLUTE 26					    14 >> 78 LOAD_FAST 4 ( x )					  
							      >> 80 POP_BLOCK						    80 LOAD_CONST 1 ( 0 )					  
							      								    82 COMPARE_OP 0 ( < )					  
							      15 >> 82 LOAD_FAST 4 ( x )				    84 POP_JUMP_IF_FALSE 98					  
							      84 LOAD_CONST 1 ( 0 )					    								  
							      86 COMPARE_OP 0 ( < )					    15 86 LOAD_FAST 4 ( x )					  
							      88 POP_JUMP_IF_FALSE 98					    88 LOAD_FAST 2 ( m0 )					  
							      								    90 BINARY_ADD						  
							      16 90 LOAD_FAST 4 ( x )					    92 STORE_FAST 4 ( x )					  
							      92 LOAD_FAST 2 ( m0 )					    								  
							      94 BINARY_ADD						    16 >> 94 LOAD_FAST 4 ( x )					  
							      96 STORE_FAST 4 ( x )					    96 RETURN_VALUE NEW_LINE					  
							      								    								  
							      17 >> 98 LOAD_FAST 4 ( x )				    								  
							      100 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES			  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7f33e2653f60, file "<dis Disassembly of <code object fib at 0x7f2b0163dc90, file "<dis script_not_found : None
    a = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    b = 1						      2 STORE_FAST 1 ( a )					    2 STORE_FAST 1 ( a )					  
    if ( n >= 0 ) :					      								    								  
	print ( a , end = ' ' )				      3 4 LOAD_CONST 2 ( 1 )					    3 4 LOAD_CONST 2 ( 1 )					  
    if ( n >= 1 ) :					      6 STORE_FAST 2 ( b )					    6 STORE_FAST 2 ( b )					  
	print ( b , end = ' ' )				      								    								  
    for i in range ( 2 , n + 1 ) :			      4 8 LOAD_FAST 0 ( n )					    4 8 LOAD_FAST 0 ( n )					  
	c = a + b					      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
	print ( c , end = ' ' )				      12 COMPARE_OP 5 ( >= )					    12 COMPARE_OP 5 ( >= )					  
	a = b						      14 POP_JUMP_IF_FALSE 28					    14 POP_JUMP_IF_FALSE 28					  
	b = c						      								    								  
							      5 16 LOAD_GLOBAL 0 ( print )				    5 16 LOAD_GLOBAL 0 ( print )				  
							      18 LOAD_FAST 1 ( a )					    18 LOAD_FAST 1 ( a )					  
							      20 LOAD_CONST 3 ( ' ' )					    20 LOAD_CONST 3 ( ' ' )					  
							      22 LOAD_CONST 4 ( ( 'end' , ) )				    22 LOAD_CONST 4 ( ( 'end' , ) )				  
							      24 CALL_FUNCTION_KW 2					    24 CALL_FUNCTION_KW 2					  
							      26 POP_TOP						    26 POP_TOP							  
							      								    								  
							      6 >> 28 LOAD_FAST 0 ( n )					    6 >> 28 LOAD_FAST 0 ( n )					  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 COMPARE_OP 5 ( >= )					    32 COMPARE_OP 5 ( >= )					  
							      34 POP_JUMP_IF_FALSE 48					    34 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      7 36 LOAD_GLOBAL 0 ( print )				    7 36 LOAD_GLOBAL 0 ( print )				  
							      38 LOAD_FAST 2 ( b )					    38 LOAD_FAST 2 ( b )					  
							      40 LOAD_CONST 3 ( ' ' )					    40 LOAD_CONST 3 ( ' ' )					  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    42 LOAD_CONST 4 ( ( 'end' , ) )				  
							      44 CALL_FUNCTION_KW 2					    44 CALL_FUNCTION_KW 2					  
							      46 POP_TOP						    46 POP_TOP							  
							      								    								  
							      8 >> 48 SETUP_LOOP 50 ( to 100 )				    8 >> 48 SETUP_LOOP 56 ( to 102 )				  
							      50 LOAD_GLOBAL 1 ( range )				    50 LOAD_GLOBAL 1 ( range )					  
							      52 LOAD_CONST 5 ( 2 )					    52 LOAD_CONST 5 ( 2 )					  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 0 ( n )					  
							      56 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 2 ( 1 )					  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 GET_ITER						    62 GET_ITER							  
							      >> 64 FOR_ITER 32 ( to 98 )				    >> 64 FOR_ITER 44 ( to 100 )				  
							      66 STORE_FAST 3 ( i )					    66 STORE_FAST 3 ( i )					  
							      								    								  
							      9 68 LOAD_FAST 1 ( a )					    9 68 LOAD_FAST 1 ( a )					  
							      70 LOAD_FAST 2 ( b )					    70 LOAD_FAST 2 ( b )					  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 STORE_FAST 4 ( c )					    74 STORE_FAST 4 ( c )					  
							      								    								  
							      10 76 LOAD_GLOBAL 0 ( print )				    10 76 LOAD_GLOBAL 0 ( print )				  
							      78 LOAD_FAST 4 ( c )					    78 LOAD_FAST 4 ( c )					  
							      80 LOAD_CONST 3 ( ' ' )					    80 LOAD_CONST 3 ( ' ' )					  
							      82 LOAD_CONST 4 ( ( 'end' , ) )				    82 LOAD_CONST 4 ( ( 'end' , ) )				  
							      84 CALL_FUNCTION_KW 2					    84 CALL_FUNCTION_KW 2					  
							      86 POP_TOP						    86 POP_TOP							  
							      								    								  
							      11 88 LOAD_FAST 2 ( b )					    11 88 LOAD_FAST 2 ( b )					  
							      90 STORE_FAST 1 ( a )					    90 STORE_FAST 1 ( a )					  
							      								    								  
							      12 92 LOAD_FAST 4 ( c )					    12 92 LOAD_FAST 4 ( c )					  
							      94 STORE_FAST 2 ( b )					    94 STORE_FAST 2 ( b )					  
							      96 JUMP_ABSOLUTE 64					    96 JUMP_ABSOLUTE 64						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      >> 100 LOAD_CONST 0 ( None )				    >> 100 LOAD_CONST 0 ( None )				  
							      102 RETURN_VALUE NEW_LINE					    >> 102 RETURN_VALUE NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		      FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		    FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY			  FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
def find3largest ( arr , n ) :				      Disassembly of <code object find3largest at 0x7f33e2649a50, f Disassembly of <code object find3largest at 0x7f2b0163dc90, f script_not_found : None
    arr = sorted ( arr )				      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  
    check = 0						      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    count = 1						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 1 , n + 1 ) :			      6 STORE_FAST 0 ( arr )					    6 STORE_FAST 0 ( arr )					  
	if ( count < 4 ) :				      								    								  
	    if ( check != arr [ n - i ] ) :		      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
		print ( arr [ n - i ] , end = " " )	      10 STORE_FAST 2 ( check )					    10 STORE_FAST 2 ( check )					  
		check = arr [ n - i ]			      								    								  
		count += 1				      4 12 LOAD_CONST 2 ( 1 )					    4 12 LOAD_CONST 2 ( 1 )					  
	else :						      14 STORE_FAST 3 ( count )					    14 STORE_FAST 3 ( count )					  
	    break					      								    								  
							      5 16 SETUP_LOOP 90 ( to 108 )				    5 16 SETUP_LOOP 76 ( to 96 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 72 ( to 106 )				    >> 32 FOR_ITER 60 ( to 94 )					  
							      34 STORE_FAST 4 ( i )					    34 STORE_FAST 4 ( i )					  
							      								    								  
							      6 36 LOAD_FAST 3 ( count )				    6 36 LOAD_FAST 3 ( count )					  
							      38 LOAD_CONST 3 ( 4 )					    38 LOAD_CONST 3 ( 4 )					  
							      40 COMPARE_OP 0 ( < )					    40 COMPARE_OP 0 ( < )					  
							      42 POP_JUMP_IF_FALSE 102					    42 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      7 44 LOAD_FAST 2 ( check )				    7 44 LOAD_FAST 2 ( check )					  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 1 ( n )					    48 LOAD_FAST 1 ( n )					  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 4 ( i )					  
							      52 BINARY_SUBTRACT					    52 BINARY_SUBTRACT						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 COMPARE_OP 3 ( != )					    56 COMPARE_OP 3 ( != )					  
							      58 POP_JUMP_IF_FALSE 104					    58 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      8 60 LOAD_GLOBAL 2 ( print )				    8 60 LOAD_GLOBAL 2 ( print )				  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 0 ( arr )					  
							      64 LOAD_FAST 1 ( n )					    64 LOAD_FAST 1 ( n )					  
							      66 LOAD_FAST 4 ( i )					    66 LOAD_FAST 4 ( i )					  
							      68 BINARY_SUBTRACT					    68 BINARY_SUBTRACT						  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_CONST 4 ( ' ' )					    72 LOAD_CONST 4 ( ' ' )					  
							      74 LOAD_CONST 5 ( ( 'end' , ) )				    74 LOAD_CONST 5 ( ( 'end' , ) )				  
							      76 CALL_FUNCTION_KW 2					    76 CALL_FUNCTION_KW 2					  
							      78 POP_TOP						    78 POP_TOP							  
							      								    								  
							      9 80 LOAD_FAST 0 ( arr )					    9 80 LOAD_FAST 0 ( arr )					  
							      82 LOAD_FAST 1 ( n )					    82 LOAD_FAST 1 ( n )					  
							      84 LOAD_FAST 4 ( i )					    84 LOAD_FAST 4 ( i )					  
							      86 BINARY_SUBTRACT					    86 BINARY_SUBTRACT						  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 STORE_FAST 2 ( check )					    90 STORE_FAST 2 ( check )					  
							      								    								  
							      10 92 LOAD_FAST 3 ( count )				    10 92 LOAD_FAST 3 ( count )					  
							      94 LOAD_CONST 2 ( 1 )					    94 LOAD_CONST 2 ( 1 )					  
							      96 INPLACE_ADD						    96 INPLACE_ADD						  
							      98 STORE_FAST 3 ( count )					    98 STORE_FAST 3 ( count )					  
							      100 JUMP_ABSOLUTE 32					    100 JUMP_ABSOLUTE 32					  
							      								    >> 102 POP_BLOCK						  
							      12 >> 102 BREAK_LOOP					    >> 104 JUMP_ABSOLUTE 32					  
							      >> 104 JUMP_ABSOLUTE 32					    								  
							      >> 106 POP_BLOCK						    12 >> 106 BREAK_LOOP					  
							      >> 108 LOAD_CONST 0 ( None )				    108 LOAD_CONST 0 ( None )					  
							      110 RETURN_VALUE NEW_LINE					    110 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPOSITE_NUMBER					      COMPOSITE_NUMBER						    COMPOSITE_NUMBER						  COMPOSITE_NUMBER
--							      --							    --								  --
def isComposite ( n ) :					      Disassembly of <code object isComposite at 0x7f33e26494b0, fi Disassembly of <code object isComposite at 0x7f2b0163dc90, fi timeout : None
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n <= 3 ) :					      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
	return False					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    if ( n % 2 == 0 or n % 3 == 0 ) :			      								    								  
	return True					      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
    i = 5						      10 RETURN_VALUE						    10 RETURN_VALUE						  
    while ( i * i <= n ) :				      								    								  
	if ( n % i == 0 or n % ( i + 2 ) == 0 ) :	      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
	    return True					      14 LOAD_CONST 3 ( 3 )					    14 LOAD_CONST 3 ( 3 )					  
	i = i + 6					      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
    return False					      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( False )				    5 20 LOAD_CONST 2 ( False )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_FAST 0 ( n )					    6 >> 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 4 ( 2 )					    26 LOAD_CONST 4 ( 2 )					  
							      28 BINARY_MODULO						    28 BINARY_MODULO						  
							      30 LOAD_CONST 5 ( 0 )					    30 LOAD_CONST 5 ( 0 )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_TRUE 48					    34 POP_JUMP_IF_TRUE 48					  
							      36 LOAD_FAST 0 ( n )					    36 LOAD_FAST 0 ( n )					  
							      38 LOAD_CONST 3 ( 3 )					    38 LOAD_CONST 3 ( 3 )					  
							      40 BINARY_MODULO						    40 BINARY_MODULO						  
							      42 LOAD_CONST 5 ( 0 )					    42 LOAD_CONST 5 ( 0 )					  
							      44 COMPARE_OP 2 ( == )					    44 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 52					    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 >> 48 LOAD_CONST 6 ( True )				    7 >> 48 LOAD_CONST 6 ( True )				  
							      50 RETURN_VALUE						    50 RETURN_VALUE						  
							      								    								  
							      8 >> 52 LOAD_CONST 7 ( 5 )				    8 >> 52 LOAD_CONST 7 ( 5 )					  
							      54 STORE_FAST 1 ( i )					    54 STORE_FAST 1 ( i )					  
							      								    								  
							      9 56 SETUP_LOOP 56 ( to 114 )				    9 56 SETUP_LOOP 48 ( to 104 )				  
							      >> 58 LOAD_FAST 1 ( i )					    >> 58 LOAD_FAST 1 ( i )					  
							      60 LOAD_FAST 1 ( i )					    60 LOAD_FAST 1 ( i )					  
							      62 BINARY_MULTIPLY					    62 BINARY_MULTIPLY						  
							      64 LOAD_FAST 0 ( n )					    64 LOAD_FAST 0 ( n )					  
							      66 COMPARE_OP 1 ( <= )					    66 COMPARE_OP 1 ( <= )					  
							      68 POP_JUMP_IF_FALSE 112					    68 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      10 70 LOAD_FAST 0 ( n )					    10 70 LOAD_FAST 0 ( n )					  
							      72 LOAD_FAST 1 ( i )					    72 LOAD_FAST 1 ( i )					  
							      74 BINARY_MODULO						    74 BINARY_MODULO						  
							      76 LOAD_CONST 5 ( 0 )					    76 LOAD_CONST 5 ( 0 )					  
							      78 COMPARE_OP 2 ( == )					    78 COMPARE_OP 2 ( == )					  
							      80 POP_JUMP_IF_TRUE 98					    80 POP_JUMP_IF_TRUE 92					  
							      82 LOAD_FAST 0 ( n )					    82 LOAD_FAST 0 ( n )					  
							      84 LOAD_FAST 1 ( i )					    84 LOAD_FAST 1 ( i )					  
							      86 LOAD_CONST 4 ( 2 )					    86 LOAD_CONST 4 ( 2 )					  
							      88 BINARY_ADD						    88 BINARY_ADD						  
							      90 BINARY_MODULO						    90 BINARY_MODULO						  
							      92 LOAD_CONST 5 ( 0 )					    92 LOAD_CONST 5 ( 0 )					  
							      94 COMPARE_OP 2 ( == )					    94 COMPARE_OP 2 ( == )					  
							      96 POP_JUMP_IF_FALSE 102					    96 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      11 >> 98 LOAD_CONST 6 ( True )				    11 98 LOAD_CONST 6 ( True )					  
							      100 RETURN_VALUE						    100 RETURN_VALUE						  
							      								    								  
							      12 >> 102 LOAD_FAST 1 ( i )				    12 >> 102 LOAD_FAST 1 ( i )					  
							      104 LOAD_CONST 8 ( 6 )					    104 LOAD_CONST 8 ( 6 )					  
							      106 BINARY_ADD						    106 BINARY_ADD						  
							      108 STORE_FAST 1 ( i )					    108 STORE_FAST 1 ( i )					  
							      110 JUMP_ABSOLUTE 58					    110 JUMP_ABSOLUTE 58					  
							      >> 112 POP_BLOCK						    >> 112 POP_BLOCK						  
							      								    								  
							      13 >> 114 LOAD_CONST 2 ( False )				    13 >> 114 LOAD_CONST 2 ( False )				  
							      116 RETURN_VALUE NEW_LINE					    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SUM_COSX_SERIES					      PROGRAM_SUM_COSX_SERIES					    PROGRAM_SUM_COSX_SERIES					  PROGRAM_SUM_COSX_SERIES
--							      --							    --								  --
def cosXSertiesSum ( x , n ) :				      Disassembly of <code object cosXSertiesSum at 0x7f33e2653ed0, Disassembly of <code object cosXSertiesSum at 0x7f2b01639f60, script_not_found : None
    x = x * ( PI / 180.0 ) ;				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
    res = 1 ;						      2 LOAD_GLOBAL 0 ( PI )					    2 LOAD_GLOBAL 0 ( PI )					  
    sign = 1 ;						      4 LOAD_CONST 1 ( 180.0 )					    4 LOAD_CONST 1 ( 180.0 )					  
    fact = 1 ;						      6 BINARY_TRUE_DIVIDE					    6 BINARY_TRUE_DIVIDE					  
    pow = 1 ;						      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
    for i in range ( 1 , 5 ) :				      10 STORE_FAST 0 ( x )					    10 STORE_FAST 0 ( x )					  
	sign = sign * - 1 ;				      								    								  
	fact = fact * ( 2 * i - 1 ) * ( 2 * i ) ;	      3 12 LOAD_CONST 2 ( 1 )					    3 12 LOAD_CONST 2 ( 1 )					  
	pow = pow * x * x ;				      14 STORE_FAST 2 ( res )					    14 STORE_FAST 2 ( res )					  
	res = res + sign * pow / fact ;			      								    								  
    return res ;					      4 16 LOAD_CONST 2 ( 1 )					    4 16 LOAD_CONST 2 ( 1 )					  
							      18 STORE_FAST 3 ( sign )					    18 STORE_FAST 3 ( sign )					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 1 )					    5 20 LOAD_CONST 2 ( 1 )					  
							      22 STORE_FAST 4 ( fact )					    22 STORE_FAST 4 ( fact )					  
							      								    								  
							      6 24 LOAD_CONST 2 ( 1 )					    6 24 LOAD_CONST 2 ( 1 )					  
							      26 STORE_FAST 5 ( pow )					    26 STORE_FAST 5 ( fact )					  
							      								    								  
							      7 28 SETUP_LOOP 78 ( to 108 )				    7 28 SETUP_LOOP 76 ( to 96 )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 LOAD_CONST 3 ( 5 )					    34 LOAD_CONST 3 ( 5 )					  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 64 ( to 106 )				    >> 40 FOR_ITER 60 ( to 94 )					  
							      42 STORE_FAST 6 ( i )					    42 STORE_FAST 6 ( i )					  
							      								    								  
							      8 44 LOAD_FAST 3 ( sign )					    8 44 LOAD_FAST 3 ( sign )					  
							      46 LOAD_CONST 4 ( - 1 )					    46 LOAD_CONST 4 ( - 1 )					  
							      48 BINARY_MULTIPLY					    48 BINARY_MULTIPLY						  
							      50 STORE_FAST 3 ( sign )					    50 STORE_FAST 3 ( sign )					  
							      								    								  
							      9 52 LOAD_FAST 4 ( fact )					    9 52 LOAD_FAST 4 ( fact )					  
							      54 LOAD_CONST 5 ( 2 )					    54 LOAD_CONST 5 ( 2 )					  
							      56 LOAD_FAST 6 ( i )					    56 LOAD_FAST 6 ( i )					  
							      58 BINARY_MULTIPLY					    58 BINARY_MULTIPLY						  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 BINARY_MULTIPLY					    64 BINARY_MULTIPLY						  
							      66 LOAD_CONST 5 ( 2 )					    66 LOAD_CONST 5 ( 2 )					  
							      68 LOAD_FAST 6 ( i )					    68 LOAD_FAST 6 ( i )					  
							      70 BINARY_MULTIPLY					    70 BINARY_MULTIPLY						  
							      72 BINARY_MULTIPLY					    72 BINARY_MULTIPLY						  
							      74 STORE_FAST 4 ( fact )					    74 BINARY_MULTIPLY						  
							      								    76 STORE_FAST 4 ( fact )					  
							      10 76 LOAD_FAST 5 ( pow )					    								  
							      78 LOAD_FAST 0 ( x )					    10 78 LOAD_FAST 5 ( fact )					  
							      80 BINARY_MULTIPLY					    80 LOAD_CONST 5 ( 2 )					  
							      82 LOAD_FAST 0 ( x )					    82 LOAD_FAST 6 ( i )					  
							      84 BINARY_MULTIPLY					    84 BINARY_MULTIPLY						  
							      86 STORE_FAST 5 ( pow )					    86 LOAD_CONST 2 ( 1 )					  
							      								    88 BINARY_SUBTRACT						  
							      11 88 LOAD_FAST 2 ( res )					    90 BINARY_MULTIPLY						  
							      90 LOAD_FAST 3 ( sign )					    92 LOAD_CONST 5 ( 2 )					  
							      92 LOAD_FAST 5 ( pow )					    94 LOAD_FAST 6 ( i )					  
							      94 BINARY_MULTIPLY					    96 BINARY_MULTIPLY						  
							      96 LOAD_FAST 4 ( fact )					    98 BINARY_MULTIPLY						  
							      98 BINARY_TRUE_DIVIDE					    100 BINARY_MULTIPLY						  
							      100 BINARY_ADD						    102 STORE_FAST 5 ( fact )					  
							      102 STORE_FAST 2 ( res )					    								  
							      104 JUMP_ABSOLUTE 40					    11 104 LOAD_FAST 5 ( pow )					  
							      >> 106 POP_BLOCK						    106 LOAD_FAST 0 ( x )					  
							      								    108 BINARY_MULTIPLY						  
							      12 >> 108 LOAD_FAST 2 ( res )				    110 LOAD_FAST 0 ( x )					  
							      110 RETURN_VALUE NEW_LINE					    112 BINARY_MULTIPLY						  
							      								    114 STORE_FAST 5 ( pow )					  
							      								    								  
							      								    12 116 LOAD_FAST 2 ( res )					  
							      								    118 LOAD_FAST 3 ( sign )					  
							      								    120 BINARY_MULTIPLY						  
							      								    122 LOAD_FAST 4 ( fact )					  
							      								    124 BINARY_TRUE_DIVIDE					  
							      								    126 BINARY_ADD						  
							      								    128 STORE_FAST 2 ( res )					  
							      								    130 JUMP_ABSOLUTE 40					  
							      								    >> 132 POP_BLOCK						  
							      								    								  
							      								    13 >> 134 LOAD_FAST 2 ( res )				  
							      								    136 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	      DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	    DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION		  DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION
--							      --							    --								  --
def MatrixChainOrder ( p , i , j ) :			      Disassembly of <code object MatrixChainOrder at 0x7f33e26494b Disassembly of <code object MatrixChainOrder at 0x7f2b0163dc9 script_not_found : None
    if i == j :						      2 0 LOAD_FAST 1 ( i )					    2 0 LOAD_FAST 1 ( i )					  
	return 0					      2 LOAD_FAST 2 ( j )					    2 LOAD_FAST 2 ( j )						  
    _min = sys.maxsize					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    for k in range ( i , j ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	count = ( MatrixChainOrder ( p , i , k ) + MatrixChai 								    								  
	if count < _min :				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    _min = count ;				      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return _min ;					      								    								  
							      4 >> 12 LOAD_GLOBAL 0 ( sys )				    4 >> 12 LOAD_GLOBAL 0 ( sys )				  
							      14 LOAD_ATTR 1 ( maxsize )				    14 LOAD_ATTR 1 ( maxsize )					  
							      16 STORE_FAST 3 ( _min )					    16 STORE_FAST 3 ( _min )					  
							      								    								  
							      5 18 SETUP_LOOP 86 ( to 106 )				    5 18 SETUP_LOOP 92 ( to 108 )				  
							      20 LOAD_GLOBAL 2 ( range )				    20 LOAD_GLOBAL 2 ( range )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 1 ( i )					  
							      24 LOAD_FAST 2 ( j )					    24 LOAD_FAST 2 ( j )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 72 ( to 104 )				    >> 30 FOR_ITER 68 ( to 106 )				  
							      32 STORE_FAST 4 ( k )					    32 STORE_FAST 4 ( k )					  
							      								    								  
							      6 34 LOAD_GLOBAL 3 ( MatrixChainOrder )			    6 34 LOAD_GLOBAL 3 ( MatrixChainOrder )			  
							      36 LOAD_FAST 0 ( p )					    36 LOAD_FAST 0 ( p )					  
							      38 LOAD_FAST 1 ( i )					    38 LOAD_FAST 1 ( i )					  
							      40 LOAD_FAST 4 ( k )					    40 LOAD_FAST 4 ( k )					  
							      42 CALL_FUNCTION 3					    42 CALL_FUNCTION 3						  
							      44 LOAD_GLOBAL 3 ( MatrixChainOrder )			    44 LOAD_GLOBAL 3 ( MatrixChainOrder )			  
							      46 LOAD_FAST 0 ( p )					    46 LOAD_FAST 0 ( p )					  
							      48 LOAD_FAST 4 ( k )					    48 LOAD_FAST 4 ( k )					  
							      50 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 LOAD_FAST 2 ( j )					    54 LOAD_FAST 2 ( j )					  
							      56 CALL_FUNCTION 3					    56 CALL_FUNCTION 3						  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 LOAD_FAST 0 ( p )					    60 LOAD_FAST 0 ( p )					  
							      62 LOAD_FAST 1 ( i )					    62 LOAD_FAST 1 ( i )					  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBTRACT						  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 0 ( p )					    70 LOAD_FAST 0 ( p )					  
							      72 LOAD_FAST 4 ( k )					    72 LOAD_FAST 4 ( k )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 BINARY_MULTIPLY					    76 BINARY_MULTIPLY						  
							      78 LOAD_FAST 0 ( p )					    78 LOAD_FAST 0 ( p )					  
							      80 LOAD_FAST 2 ( j )					    80 LOAD_FAST 2 ( j )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 BINARY_MULTIPLY					    84 BINARY_MULTIPLY						  
							      86 BINARY_ADD						    86 BINARY_ADD						  
							      88 STORE_FAST 5 ( count )					    88 STORE_FAST 5 ( count )					  
							      								    								  
							      7 90 LOAD_FAST 5 ( count )				    7 90 LOAD_FAST 5 ( count )					  
							      92 LOAD_FAST 3 ( _min )					    92 LOAD_FAST 3 ( _min )					  
							      94 COMPARE_OP 0 ( < )					    94 COMPARE_OP 0 ( < )					  
							      96 POP_JUMP_IF_FALSE 30					    96 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      8 98 LOAD_FAST 5 ( count )				    8 98 LOAD_FAST 5 ( count )					  
							      100 STORE_FAST 3 ( _min )					    100 STORE_FAST 3 ( _min )					  
							      102 JUMP_ABSOLUTE 30					    102 JUMP_ABSOLUTE 30					  
							      >> 104 POP_BLOCK						    104 POP_BLOCK						  
							      								    >> 106 JUMP_ABSOLUTE 30					  
							      9 >> 106 LOAD_FAST 3 ( _min )				    >> 108 POP_BLOCK						  
							      108 RETURN_VALUE NEW_LINE					    								  
							      								    9 >> 110 LOAD_FAST 3 ( _min )				  
							      								    112 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			      FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			    FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			  FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX
--							      --							    --								  --
def freq ( ar , m , n ) :				      Disassembly of <code object freq at 0x7f33e2649a50, file "<di Disassembly of <code object freq at 0x7f2b0163dc90, file "<di success : None
    even = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    odd = 0						      2 STORE_FAST 3 ( even )					    2 STORE_FAST 3 ( even )					  
    for i in range ( m ) :				      								    								  
	for j in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	    if ( ( ar [ i ] [ j ] % 2 ) == 0 ) :	      6 STORE_FAST 4 ( odd )					    6 STORE_FAST 4 ( odd )					  
		even += 1				      								    								  
	    else :					      4 8 SETUP_LOOP 72 ( to 82 )				    4 8 SETUP_LOOP 70 ( to 82 )					  
		odd += 1				      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
    print ( " Frequency of odd number =" , odd )	      12 LOAD_FAST 1 ( m )					    12 LOAD_FAST 1 ( m )					  
    print ( " Frequency of even number =" , even )	      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 60 ( to 80 )				    >> 18 FOR_ITER 58 ( to 80 )					  
							      20 STORE_FAST 5 ( i )					    20 STORE_FAST 5 ( i )					  
							      								    								  
							      5 22 SETUP_LOOP 54 ( to 78 )				    5 22 SETUP_LOOP 48 ( to 78 )				  
							      24 LOAD_GLOBAL 0 ( range )				    24 LOAD_GLOBAL 0 ( range )					  
							      26 LOAD_FAST 2 ( n )					    26 LOAD_FAST 2 ( n )					  
							      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 42 ( to 76 )				    >> 32 FOR_ITER 36 ( to 76 )					  
							      34 STORE_FAST 6 ( j )					    34 STORE_FAST 6 ( j )					  
							      								    								  
							      6 36 LOAD_FAST 0 ( ar )					    6 36 LOAD_FAST 0 ( ar )					  
							      38 LOAD_FAST 5 ( i )					    38 LOAD_FAST 5 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 6 ( j )					    42 LOAD_FAST 6 ( j )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_CONST 2 ( 2 )					    46 LOAD_CONST 2 ( 2 )					  
							      48 BINARY_MODULO						    48 BINARY_MODULO						  
							      50 LOAD_CONST 1 ( 0 )					    50 LOAD_CONST 1 ( 0 )					  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 66					    54 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      7 56 LOAD_FAST 3 ( even )					    7 56 LOAD_FAST 3 ( even )					  
							      58 LOAD_CONST 3 ( 1 )					    58 LOAD_CONST 3 ( 1 )					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 3 ( even )					    62 STORE_FAST 3 ( even )					  
							      64 JUMP_ABSOLUTE 32					    64 JUMP_ABSOLUTE 32						  
							      								    								  
							      9 >> 66 LOAD_FAST 4 ( odd )				    9 >> 66 LOAD_FAST 4 ( odd )					  
							      68 LOAD_CONST 3 ( 1 )					    68 LOAD_CONST 3 ( 1 )					  
							      70 INPLACE_ADD						    70 INPLACE_ADD						  
							      72 STORE_FAST 4 ( odd )					    72 STORE_FAST 4 ( odd )					  
							      74 JUMP_ABSOLUTE 32					    74 JUMP_ABSOLUTE 32						  
							      >> 76 POP_BLOCK						    >> 76 POP_BLOCK						  
							      >> 78 JUMP_ABSOLUTE 18					    >> 78 JUMP_ABSOLUTE 18					  
							      >> 80 POP_BLOCK						    >> 80 POP_BLOCK						  
							      								    								  
							      10 >> 82 LOAD_GLOBAL 1 ( print )				    10 >> 82 LOAD_GLOBAL 1 ( print )				  
							      84 LOAD_CONST 4 ( ' Frequency of odd number =' )		    84 LOAD_CONST 4 ( ' Frequency of odd number =' )		  
							      86 LOAD_FAST 4 ( odd )					    86 LOAD_FAST 4 ( odd )					  
							      88 CALL_FUNCTION 2					    88 CALL_FUNCTION 2						  
							      90 POP_TOP						    90 POP_TOP							  
							      								    								  
							      11 92 LOAD_GLOBAL 1 ( print )				    11 92 LOAD_GLOBAL 1 ( print )				  
							      94 LOAD_CONST 5 ( ' Frequency of even number =' )		    94 LOAD_CONST 5 ( ' Frequency of even number =' )		  
							      96 LOAD_FAST 3 ( even )					    96 LOAD_FAST 3 ( even )					  
							      98 CALL_FUNCTION 2					    98 CALL_FUNCTION 2						  
							      100 POP_TOP						    100 POP_TOP							  
							      102 LOAD_CONST 0 ( None )					    102 LOAD_CONST 0 ( None )					  
							      104 RETURN_VALUE NEW_LINE					    104 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR
--							      --							    --								  --
def findDiff ( arr , n ) :				      Disassembly of <code object findDiff at 0x7f33e26494b0, file  Disassembly of <code object findDiff at 0x7f2b0163dc90, file  script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    count = 0 ; max_count = 0 ; min_count = n		      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( 0 , ( n - 1 ) ) :			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
	if arr [ i ] == arr [ i + 1 ] :			      6 POP_TOP							    6 POP_TOP							  
	    count += 1					      								    								  
	    continue					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	else :						      10 STORE_FAST 2 ( count )					    10 STORE_FAST 2 ( count )					  
	    max_count = max ( max_count , count )	      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
	    min_count = min ( min_count , count )	      14 STORE_FAST 3 ( max_count )				    14 STORE_FAST 3 ( max_count )				  
	    count = 0					      16 LOAD_FAST 1 ( n )					    								  
    return max_count - min_count			      18 STORE_FAST 4 ( min_count )				    4 16 SETUP_LOOP 92 ( to 108 )				  
							      								    18 LOAD_GLOBAL 1 ( range )					  
							      4 20 SETUP_LOOP 78 ( to 100 )				    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_GLOBAL 1 ( range )				    22 LOAD_FAST 1 ( n )					  
							      24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 LOAD_FAST 1 ( n )					    26 BINARY_SUBTRACT						  
							      28 LOAD_CONST 2 ( 1 )					    28 BUILD_TUPLE 2						  
							      30 BINARY_SUBTRACT					    30 CALL_FUNCTION 2						  
							      32 CALL_FUNCTION 2					    32 GET_ITER							  
							      34 GET_ITER						    >> 34 FOR_ITER 68 ( to 106 )				  
							      >> 36 FOR_ITER 60 ( to 98 )				    36 STORE_FAST 4 ( i )					  
							      38 STORE_FAST 5 ( i )					    								  
							      								    5 38 LOAD_FAST 0 ( arr )					  
							      5 40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 4 ( i )					  
							      42 LOAD_FAST 5 ( i )					    42 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    44 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 4 ( i )					  
							      48 LOAD_FAST 5 ( i )					    48 LOAD_CONST 2 ( 1 )					  
							      50 LOAD_CONST 2 ( 1 )					    50 BINARY_ADD						  
							      52 BINARY_ADD						    52 BINARY_SUBSCR						  
							      54 BINARY_SUBSCR						    54 COMPARE_OP 2 ( == )					  
							      56 COMPARE_OP 2 ( == )					    56 POP_JUMP_IF_FALSE 34					  
							      58 POP_JUMP_IF_FALSE 72					    								  
							      								    6 58 LOAD_FAST 2 ( count )					  
							      6 60 LOAD_FAST 2 ( count )				    60 LOAD_CONST 2 ( 1 )					  
							      62 LOAD_CONST 2 ( 1 )					    62 INPLACE_ADD						  
							      64 INPLACE_ADD						    64 STORE_FAST 2 ( count )					  
							      66 STORE_FAST 2 ( count )					    								  
							      								    7 66 JUMP_ABSOLUTE 34					  
							      7 68 JUMP_ABSOLUTE 36					    								  
							      70 JUMP_ABSOLUTE 36					    9 >> 68 LOAD_GLOBAL 2 ( max )				  
							      								    70 LOAD_FAST 3 ( max_count )				  
							      9 >> 72 LOAD_GLOBAL 2 ( max )				    72 LOAD_FAST 2 ( count )					  
							      74 LOAD_FAST 3 ( max_count )				    74 CALL_FUNCTION 2						  
							      76 LOAD_FAST 2 ( count )					    76 STORE_FAST 3 ( max_count )				  
							      78 CALL_FUNCTION 2					    								  
							      80 STORE_FAST 3 ( max_count )				    10 78 LOAD_GLOBAL 3 ( min )					  
							      								    80 LOAD_FAST 3 ( min_count )				  
							      10 82 LOAD_GLOBAL 3 ( min )				    82 LOAD_FAST 2 ( count )					  
							      84 LOAD_FAST 4 ( min_count )				    84 CALL_FUNCTION 2						  
							      86 LOAD_FAST 2 ( count )					    86 STORE_FAST 3 ( min_count )				  
							      88 CALL_FUNCTION 2					    								  
							      90 STORE_FAST 4 ( min_count )				    11 88 LOAD_CONST 1 ( 0 )					  
							      								    90 STORE_FAST 2 ( count )					  
							      11 92 LOAD_CONST 1 ( 0 )					    92 JUMP_ABSOLUTE 34						  
							      94 STORE_FAST 2 ( count )					    >> 94 POP_BLOCK						  
							      96 JUMP_ABSOLUTE 36					    								  
							      >> 98 POP_BLOCK						    12 >> 96 LOAD_FAST 3 ( max_count )				  
							      								    98 LOAD_FAST 3 ( min_count )				  
							      12 >> 100 LOAD_FAST 3 ( max_count )			    100 BINARY_SUBTRACT						  
							      102 LOAD_FAST 4 ( min_count )				    102 RETURN_VALUE NEW_LINE					  
							      104 BINARY_SUBTRACT					    								  
							      106 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			      FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			    FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			  FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE
--							      --							    --								  --
def findDimen ( H , A ) :				      Disassembly of <code object findDimen at 0x7f33e2653f60, file Disassembly of <code object findDimen at 0x7f2b0163dc90, file script_not_found : None
    if H * H < 4 * A :					      2 0 LOAD_FAST 0 ( H )					    2 0 LOAD_FAST 0 ( H )					  
	print ( "Not Possible" )			      2 LOAD_FAST 0 ( H )					    2 LOAD_FAST 0 ( H )						  
	return						      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
    apb = sqrt ( H * H + 4 * A )			      6 LOAD_CONST 1 ( 4 )					    6 LOAD_CONST 1 ( 4 )					  
    asb = sqrt ( H * H - 4 * A )			      8 LOAD_FAST 1 ( A )					    8 LOAD_FAST 1 ( A )						  
    print ( "P = " , "%.2f" % ( ( apb - asb ) / 2.0 ) )	      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
    print ( "B = " , "%.2f" % ( ( apb + asb ) / 2.0 ) )	      12 COMPARE_OP 0 ( < )					    12 COMPARE_OP 0 ( < )					  
							      14 POP_JUMP_IF_FALSE 28					    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      3 16 LOAD_GLOBAL 0 ( print )				    3 16 LOAD_GLOBAL 0 ( print )				  
							      18 LOAD_CONST 2 ( 'Not Possible' )			    18 LOAD_CONST 2 ( 'Not Possible' )				  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 POP_TOP						    22 POP_TOP							  
							      								    								  
							      4 24 LOAD_CONST 0 ( None )				    4 24 LOAD_CONST 0 ( None )					  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      5 >> 28 LOAD_GLOBAL 1 ( sqrt )				    5 >> 28 LOAD_GLOBAL 1 ( sqrt )				  
							      30 LOAD_FAST 0 ( H )					    30 LOAD_FAST 0 ( H )					  
							      32 LOAD_FAST 0 ( H )					    32 LOAD_FAST 0 ( H )					  
							      34 BINARY_MULTIPLY					    34 BINARY_MULTIPLY						  
							      36 LOAD_CONST 1 ( 4 )					    36 LOAD_CONST 1 ( 4 )					  
							      38 LOAD_FAST 1 ( A )					    38 LOAD_FAST 1 ( A )					  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 STORE_FAST 2 ( apb )					    46 STORE_FAST 2 ( 112 )					  
							      								    								  
							      6 48 LOAD_GLOBAL 1 ( sqrt )				    6 48 LOAD_GLOBAL 1 ( sqrt )					  
							      50 LOAD_FAST 0 ( H )					    50 LOAD_FAST 0 ( H )					  
							      52 LOAD_FAST 0 ( H )					    52 LOAD_FAST 0 ( H )					  
							      54 BINARY_MULTIPLY					    54 BINARY_MULTIPLY						  
							      56 LOAD_CONST 1 ( 4 )					    56 LOAD_CONST 1 ( 4 )					  
							      58 LOAD_FAST 1 ( A )					    58 LOAD_FAST 1 ( A )					  
							      60 BINARY_MULTIPLY					    60 BINARY_MULTIPLY						  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 STORE_FAST 3 ( asb )					    66 STORE_FAST 3 ( asb )					  
							      								    								  
							      7 68 LOAD_GLOBAL 0 ( print )				    7 68 LOAD_GLOBAL 0 ( print )				  
							      70 LOAD_CONST 3 ( 'P = ' )				    70 LOAD_CONST 3 ( 'P = ' )					  
							      72 LOAD_CONST 4 ( '%.2f' )				    72 LOAD_CONST 4 ( '%.2f' )					  
							      74 LOAD_FAST 2 ( apb )					    74 LOAD_FAST 2 ( 112 )					  
							      76 LOAD_FAST 3 ( asb )					    76 LOAD_FAST 3 ( asb )					  
							      78 BINARY_SUBTRACT					    78 BINARY_ADD						  
							      80 LOAD_CONST 5 ( 2.0 )					    80 LOAD_CONST 5 ( 2.0 )					  
							      82 BINARY_TRUE_DIVIDE					    82 BINARY_TRUE_DIVIDE					  
							      84 BINARY_MODULO						    84 BINARY_MODULO						  
							      86 CALL_FUNCTION 2					    86 CALL_FUNCTION 2						  
							      88 POP_TOP						    88 POP_TOP							  
							      								    								  
							      8 90 LOAD_GLOBAL 0 ( print )				    8 90 LOAD_GLOBAL 0 ( print )				  
							      92 LOAD_CONST 6 ( 'B = ' )				    92 LOAD_CONST 6 ( 'B = ' )					  
							      94 LOAD_CONST 4 ( '%.2f' )				    94 LOAD_CONST 4 ( '%.2f' )					  
							      96 LOAD_FAST 2 ( apb )					    96 LOAD_FAST 2 ( 112 )					  
							      98 LOAD_FAST 3 ( asb )					    98 LOAD_FAST 3 ( asb )					  
							      100 BINARY_ADD						    100 BINARY_ADD						  
							      102 LOAD_CONST 5 ( 2.0 )					    102 LOAD_CONST 5 ( 2.0 )					  
							      104 BINARY_TRUE_DIVIDE					    104 BINARY_TRUE_DIVIDE					  
							      106 BINARY_MODULO						    106 BINARY_MODULO						  
							      108 CALL_FUNCTION 2					    108 CALL_FUNCTION 2						  
							      110 POP_TOP						    110 POP_TOP							  
							      112 LOAD_CONST 0 ( None )					    112 LOAD_CONST 0 ( None )					  
							      114 RETURN_VALUE NEW_LINE					    114 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			      KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			    KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			  KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT
--							      --							    --								  --
def printkthnode ( adj , wt , n , k ) :			      Disassembly of <code object printkthnode at 0x7f33e2644f60, f Disassembly of <code object printkthnode at 0x7f2b0163dc90, f script_not_found : None
    for i in range ( n ) :				      2 0 SETUP_LOOP 28 ( to 30 )				    2 0 SETUP_LOOP 22 ( to 24 )					  
	adj [ i ].sort ( )				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
    for i in range ( n ) :				      4 LOAD_FAST 2 ( n )					    4 LOAD_FAST 2 ( n )						  
	if ( len ( adj [ i ] ) >= k ) :			      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
	    print ( adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] 8 GET_ITER						    8 GET_ITER							  
	else :						      >> 10 FOR_ITER 16 ( to 28 )				    >> 10 FOR_ITER 14 ( to 22 )					  
	    print ( "-1" , end = " " )			      12 STORE_FAST 4 ( i )					    12 STORE_FAST 4 ( i )					  
							      								    								  
							      3 14 LOAD_FAST 0 ( adj )					    3 14 LOAD_FAST 0 ( adj )					  
							      16 LOAD_FAST 4 ( i )					    16 LOAD_FAST 4 ( i )					  
							      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 LOAD_METHOD 1 ( sort )					    20 LOAD_METHOD 1 ( sort )					  
							      22 CALL_METHOD 0						    22 CALL_METHOD 0						  
							      24 POP_TOP						    24 POP_TOP							  
							      26 JUMP_ABSOLUTE 10					    26 JUMP_ABSOLUTE 10						  
							      >> 28 POP_BLOCK						    >> 28 POP_BLOCK						  
							      								    								  
							      4 >> 30 SETUP_LOOP 82 ( to 114 )				    4 >> 30 SETUP_LOOP 80 ( to 108 )				  
							      32 LOAD_GLOBAL 0 ( range )				    32 LOAD_GLOBAL 0 ( range )					  
							      34 LOAD_FAST 2 ( n )					    34 LOAD_FAST 2 ( n )					  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 70 ( to 112 )				    >> 40 FOR_ITER 58 ( to 106 )				  
							      42 STORE_FAST 4 ( i )					    42 STORE_FAST 4 ( i )					  
							      								    								  
							      5 44 LOAD_GLOBAL 2 ( len )				    5 44 LOAD_GLOBAL 2 ( len )					  
							      46 LOAD_FAST 0 ( adj )					    46 LOAD_FAST 0 ( adj )					  
							      48 LOAD_FAST 4 ( i )					    48 LOAD_FAST 4 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 CALL_FUNCTION 1					    52 CALL_FUNCTION 1						  
							      54 LOAD_FAST 3 ( k )					    54 LOAD_FAST 3 ( k )					  
							      56 COMPARE_OP 5 ( >= )					    56 COMPARE_OP 5 ( >= )					  
							      58 POP_JUMP_IF_FALSE 98					    58 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      6 60 LOAD_GLOBAL 3 ( print )				    6 60 LOAD_GLOBAL 3 ( print )				  
							      62 LOAD_FAST 0 ( adj )					    62 LOAD_FAST 0 ( adj )					  
							      64 LOAD_FAST 4 ( i )					    64 LOAD_FAST 4 ( i )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_GLOBAL 2 ( len )					    68 LOAD_GLOBAL 2 ( len )					  
							      70 LOAD_FAST 0 ( adj )					    70 LOAD_FAST 0 ( adj )					  
							      72 LOAD_FAST 4 ( i )					    72 LOAD_FAST 4 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 CALL_FUNCTION 1					    76 CALL_FUNCTION 1						  
							      78 LOAD_FAST 3 ( k )					    78 LOAD_FAST 3 ( k )					  
							      80 BINARY_SUBTRACT					    80 BINARY_SUBTRACT						  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 LOAD_CONST 1 ( 1 )					    84 LOAD_CONST 1 ( 1 )					  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 LOAD_CONST 2 ( ' ' )					    88 LOAD_CONST 2 ( ' ' )					  
							      90 LOAD_CONST 3 ( ( 'end' , ) )				    90 LOAD_CONST 3 ( ( 'end' , ) )				  
							      92 CALL_FUNCTION_KW 2					    92 CALL_FUNCTION_KW 2					  
							      94 POP_TOP						    94 POP_TOP							  
							      96 JUMP_ABSOLUTE 40					    96 JUMP_ABSOLUTE 40						  
							      								    								  
							      8 >> 98 LOAD_GLOBAL 3 ( print )				    8 >> 98 LOAD_GLOBAL 3 ( print )				  
							      100 LOAD_CONST 4 ( '-1' )					    100 LOAD_CONST 4 ( '-1' )					  
							      102 LOAD_CONST 2 ( ' ' )					    102 LOAD_CONST 2 ( ' ' )					  
							      104 LOAD_CONST 3 ( ( 'end' , ) )				    104 LOAD_CONST 3 ( ( 'end' , ) )				  
							      106 CALL_FUNCTION_KW 2					    106 CALL_FUNCTION_KW 2					  
							      108 POP_TOP						    108 POP_TOP							  
							      110 JUMP_ABSOLUTE 40					    110 JUMP_ABSOLUTE 40					  
							      >> 112 POP_BLOCK						    >> 112 POP_BLOCK						  
							      >> 114 LOAD_CONST 0 ( None )				    >> 114 LOAD_CONST 0 ( None )				  
							      116 RETURN_VALUE NEW_LINE					    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SERIES_REVERSE_ORDER			      PRINT_FIBONACCI_SERIES_REVERSE_ORDER			    PRINT_FIBONACCI_SERIES_REVERSE_ORDER			  PRINT_FIBONACCI_SERIES_REVERSE_ORDER
--							      --							    --								  --
def reverseFibonacci ( n ) :				      Disassembly of <code object reverseFibonacci at 0x7f33e2653ed Disassembly of <code object reverseFibonacci at 0x7f2b0163966 script_not_found : None
    a = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    a [ 0 ] = 0						      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    a [ 1 ] = 1						      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
    for i in range ( 2 , n ) :				      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	a [ i ] = a [ i - 2 ] + a [ i - 1 ]		      8 STORE_FAST 1 ( a )					    8 STORE_FAST 1 ( a )					  
    for i in range ( n - 1 , - 1 , - 1 ) :		      								    								  
	print ( a [ i ] , end = " " )			      3 10 LOAD_CONST 1 ( 0 )					    3 10 LOAD_CONST 1 ( 0 )					  
							      12 LOAD_FAST 1 ( a )					    12 LOAD_FAST 1 ( a )					  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 STORE_SUBSCR						    16 STORE_SUBSCR						  
							      								    								  
							      4 18 LOAD_CONST 2 ( 1 )					    4 18 LOAD_CONST 2 ( 1 )					  
							      20 LOAD_FAST 1 ( a )					    20 LOAD_FAST 1 ( a )					  
							      22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 2 ( 1 )					  
							      24 STORE_SUBSCR						    24 STORE_SUBSCR						  
							      								    								  
							      5 26 SETUP_LOOP 46 ( to 74 )				    5 26 SETUP_LOOP 46 ( to 78 )				  
							      28 LOAD_GLOBAL 0 ( range )				    28 LOAD_GLOBAL 0 ( range )					  
							      30 LOAD_CONST 3 ( 2 )					    30 LOAD_CONST 3 ( 2 )					  
							      32 LOAD_FAST 0 ( n )					    32 LOAD_FAST 0 ( n )					  
							      34 CALL_FUNCTION 2					    34 CALL_FUNCTION 2						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 32 ( to 72 )				    >> 38 FOR_ITER 30 ( to 76 )					  
							      40 STORE_FAST 2 ( i )					    40 STORE_FAST 2 ( i )					  
							      								    								  
							      6 42 LOAD_FAST 1 ( a )					    6 42 LOAD_FAST 1 ( a )					  
							      44 LOAD_FAST 2 ( i )					    44 LOAD_FAST 2 ( i )					  
							      46 LOAD_CONST 3 ( 2 )					    46 LOAD_CONST 3 ( 2 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 1 ( a )					    52 LOAD_FAST 1 ( a )					  
							      54 LOAD_FAST 2 ( i )					    54 LOAD_FAST 2 ( i )					  
							      56 LOAD_CONST 2 ( 1 )					    56 STORE_SUBSCR						  
							      58 BINARY_SUBTRACT					    58 JUMP_ABSOLUTE 38						  
							      60 BINARY_SUBSCR						    >> 60 POP_BLOCK						  
							      62 BINARY_ADD						    								  
							      64 LOAD_FAST 1 ( a )					    7 62 SETUP_LOOP 40 ( to 108 )				  
							      66 LOAD_FAST 2 ( i )					    64 LOAD_GLOBAL 0 ( range )					  
							      68 STORE_SUBSCR						    66 LOAD_FAST 0 ( n )					  
							      70 JUMP_ABSOLUTE 38					    68 LOAD_CONST 2 ( 1 )					  
							      >> 72 POP_BLOCK						    70 BINARY_SUBTRACT						  
							      								    72 LOAD_CONST 4 ( - 1 )					  
							      7 >> 74 SETUP_LOOP 40 ( to 116 )				    74 LOAD_CONST 4 ( - 1 )					  
							      76 LOAD_GLOBAL 0 ( range )				    76 CALL_FUNCTION 3						  
							      78 LOAD_FAST 0 ( n )					    78 GET_ITER							  
							      80 LOAD_CONST 2 ( 1 )					    >> 80 FOR_ITER 28 ( to 106 )				  
							      82 BINARY_SUBTRACT					    82 STORE_FAST 2 ( i )					  
							      84 LOAD_CONST 4 ( - 1 )					    								  
							      86 LOAD_CONST 4 ( - 1 )					    8 84 LOAD_GLOBAL 1 ( print )				  
							      88 CALL_FUNCTION 3					    86 LOAD_FAST 1 ( a )					  
							      90 GET_ITER						    88 LOAD_FAST 2 ( i )					  
							      >> 92 FOR_ITER 20 ( to 114 )				    90 BINARY_SUBSCR						  
							      94 STORE_FAST 2 ( i )					    92 LOAD_CONST 5 ( ' ' )					  
							      								    94 LOAD_CONST 6 ( ( 'end' , ) )				  
							      8 96 LOAD_GLOBAL 1 ( print )				    96 CALL_FUNCTION_KW 2					  
							      98 LOAD_FAST 1 ( a )					    98 POP_TOP							  
							      100 LOAD_FAST 2 ( i )					    100 JUMP_ABSOLUTE 80					  
							      102 BINARY_SUBSCR						    >> 102 POP_BLOCK						  
							      104 LOAD_CONST 5 ( ' ' )					    >> 104 LOAD_CONST 0 ( None )				  
							      106 LOAD_CONST 6 ( ( 'end' , ) )				    106 RETURN_VALUE NEW_LINE					  
							      108 CALL_FUNCTION_KW 2					    								  
							      110 POP_TOP						    								  
							      112 JUMP_ABSOLUTE 92					    								  
							      >> 114 POP_BLOCK						    								  
							      >> 116 LOAD_CONST 0 ( None )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM					      KNAPSACK_PROBLEM						    KNAPSACK_PROBLEM						  KNAPSACK_PROBLEM
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      Disassembly of <code object knapSack at 0x7f33e2649a50, file  Disassembly of <code object knapSack at 0x7f2b01639660, file  script_not_found : None
    if n == 0 or W == 0 :				      2 0 LOAD_FAST 3 ( n )					    2 0 LOAD_FAST 3 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( wt [ n - 1 ] > W ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return knapSack ( W , wt , val , n - 1 )	      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
    else :						      8 LOAD_FAST 0 ( W )					    8 LOAD_FAST 0 ( W )						  
	return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    3 >> 16 LOAD_CONST 1 ( 0 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_FAST 1 ( wt )				    4 >> 20 LOAD_FAST 1 ( wt )					  
							      22 LOAD_FAST 3 ( n )					    22 LOAD_FAST 3 ( n )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 0 ( W )					    30 LOAD_FAST 0 ( W )					  
							      32 COMPARE_OP 4 ( > )					    32 COMPARE_OP 4 ( > )					  
							      34 POP_JUMP_IF_FALSE 54					    34 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      5 36 LOAD_GLOBAL 0 ( knapSack )				    5 36 LOAD_GLOBAL 0 ( knapSack )				  
							      38 LOAD_FAST 0 ( W )					    38 LOAD_FAST 0 ( W )					  
							      40 LOAD_FAST 1 ( wt )					    40 LOAD_FAST 1 ( wt )					  
							      42 LOAD_FAST 2 ( val )					    42 LOAD_FAST 2 ( val )					  
							      44 LOAD_FAST 3 ( n )					    44 LOAD_FAST 3 ( n )					  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 2 ( 1 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 CALL_FUNCTION 4					    50 CALL_FUNCTION 4						  
							      52 RETURN_VALUE						    52 RETURN_VALUE						  
							      								    								  
							      7 >> 54 LOAD_GLOBAL 1 ( max )				    7 >> 54 LOAD_GLOBAL 1 ( max )				  
							      56 LOAD_FAST 2 ( val )					    56 LOAD_FAST 2 ( val )					  
							      58 LOAD_FAST 3 ( n )					    58 LOAD_FAST 3 ( n )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_GLOBAL 0 ( knapSack )				    66 LOAD_GLOBAL 0 ( knapSack )				  
							      68 LOAD_FAST 0 ( W )					    68 LOAD_FAST 0 ( W )					  
							      70 LOAD_FAST 1 ( wt )					    70 LOAD_FAST 1 ( wt )					  
							      72 LOAD_FAST 3 ( n )					    72 LOAD_FAST 2 ( val )					  
							      74 LOAD_CONST 2 ( 1 )					    74 LOAD_FAST 3 ( n )					  
							      76 BINARY_SUBTRACT					    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_SUBSCR						    78 BINARY_SUBTRACT						  
							      80 BINARY_SUBTRACT					    80 CALL_FUNCTION 4						  
							      82 LOAD_FAST 1 ( wt )					    82 BINARY_ADD						  
							      84 LOAD_FAST 2 ( val )					    84 LOAD_GLOBAL 0 ( knapSack )				  
							      86 LOAD_FAST 3 ( n )					    86 LOAD_FAST 0 ( W )					  
							      88 LOAD_CONST 2 ( 1 )					    88 LOAD_FAST 1 ( wt )					  
							      90 BINARY_SUBTRACT					    90 LOAD_FAST 2 ( val )					  
							      92 CALL_FUNCTION 4					    92 LOAD_FAST 3 ( n )					  
							      94 BINARY_ADD						    94 LOAD_CONST 2 ( 1 )					  
							      96 LOAD_GLOBAL 0 ( knapSack )				    96 BINARY_SUBTRACT						  
							      98 LOAD_FAST 0 ( W )					    98 CALL_FUNCTION 4						  
							      100 LOAD_FAST 1 ( wt )					    100 CALL_FUNCTION 1						  
							      102 LOAD_FAST 2 ( val )					    102 RETURN_VALUE						  
							      104 LOAD_FAST 3 ( n )					    104 LOAD_CONST 0 ( None )					  
							      106 LOAD_CONST 2 ( 1 )					    106 RETURN_VALUE NEW_LINE					  
							      108 BINARY_SUBTRACT					    								  
							      110 CALL_FUNCTION 4					    								  
							      112 CALL_FUNCTION 2					    								  
							      114 RETURN_VALUE						    								  
							      116 LOAD_CONST 0 ( None )					    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1	      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1
--							      --							    --								  --
def findArea ( arr , n ) :				      Disassembly of <code object findArea at 0x7f33e2653f60, file  Disassembly of <code object findArea at 0x7f2b0163dc90, file  error : /bin/bash: line 1:  4638 Segmentation faul
    s = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    first = 0						      2 STORE_FAST 2 ( s )					    2 STORE_FAST 2 ( s )					  ataset/bin/python XLM/dis_script.py --script_path
    second = 0						      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MAXIMU
	if arr [ i ] not in s :				      6 STORE_FAST 3 ( first )					    6 STORE_FAST 3 ( first )					  M_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1.dis
	    s.append ( arr [ i ] )			      								    								  
	    continue					      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 1 ( 0 )					  
	if ( arr [ i ] > first ) :			      10 STORE_FAST 4 ( second )				    10 STORE_FAST 4 ( second )					  
	    second = first				      								    								  
	    first = arr [ i ]				      5 12 SETUP_LOOP 90 ( to 104 )				    5 12 SETUP_LOOP 52 ( to 68 )				  
	elif ( arr [ i ] > second ) :			      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
	    second = arr [ i ]				      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
    return ( first * second )				      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 78 ( to 102 )				    >> 22 FOR_ITER 44 ( to 66 )					  
							      24 STORE_FAST 5 ( i )					    24 STORE_FAST 5 ( i )					  
							      								    								  
							      6 26 LOAD_FAST 0 ( arr )					    6 26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 5 ( i )					    28 LOAD_FAST 5 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 2 ( s )					    32 LOAD_FAST 2 ( s )					  
							      34 COMPARE_OP 7 ( not in )				    34 COMPARE_OP 7 ( not in )					  
							      36 POP_JUMP_IF_FALSE 54					    36 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      7 38 LOAD_FAST 2 ( s )					    7 38 LOAD_FAST 2 ( s )					  
							      40 LOAD_METHOD 1 ( append )				    40 LOAD_METHOD 1 ( append )					  
							      42 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 5 ( i )					    44 LOAD_FAST 5 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 CALL_METHOD 1						    48 CALL_METHOD 1						  
							      50 POP_TOP						    50 POP_TOP							  
							      								    								  
							      8 52 JUMP_ABSOLUTE 22					    8 52 JUMP_ABSOLUTE 22					  
							      								    								  
							      9 >> 54 LOAD_FAST 0 ( arr )				    9 >> 54 LOAD_FAST 0 ( arr )					  
							      56 LOAD_FAST 5 ( i )					    56 LOAD_FAST 5 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_FAST 3 ( first )					    60 LOAD_FAST 3 ( first )					  
							      62 COMPARE_OP 4 ( > )					    62 COMPARE_OP 4 ( > )					  
							      64 POP_JUMP_IF_FALSE 80					    64 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      10 66 LOAD_FAST 3 ( first )				    10 66 LOAD_FAST 3 ( first )					  
							      68 STORE_FAST 4 ( second )				    68 STORE_FAST 4 ( second )					  
							      								    								  
							      11 70 LOAD_FAST 0 ( arr )					    11 70 LOAD_FAST 0 ( arr )					  
							      72 LOAD_FAST 5 ( i )					    72 LOAD_FAST 5 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 STORE_FAST 3 ( first )					    76 STORE_FAST 3 ( first )					  
							      78 JUMP_ABSOLUTE 22					    78 JUMP_ABSOLUTE 22						  
							      								    								  
							      12 >> 80 LOAD_FAST 0 ( arr )				    12 >> 80 LOAD_FAST 0 ( arr )				  
							      82 LOAD_FAST 5 ( i )					    82 LOAD_FAST 5 ( i )					  
							      84 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      86 LOAD_FAST 4 ( second )					    86 LOAD_FAST 4 ( second )					  
							      88 COMPARE_OP 4 ( > )					    88 COMPARE_OP 4 ( > )					  
							      90 POP_JUMP_IF_FALSE 22					    90 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      13 92 LOAD_FAST 0 ( arr )					    13 92 LOAD_FAST 0 ( arr )					  
							      94 LOAD_FAST 5 ( i )					    94 LOAD_FAST 5 ( i )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 STORE_FAST 4 ( second )				    98 STORE_FAST 4 ( second )					  
							      100 JUMP_ABSOLUTE 22					    100 JUMP_ABSOLUTE 22					  
							      >> 102 POP_BLOCK						    								  
							      								    14 >> 102 LOAD_FAST 3 ( first )				  
							      14 >> 104 LOAD_FAST 3 ( first )				    104 LOAD_FAST 4 ( second )					  
							      106 LOAD_FAST 4 ( second )				    106 BINARY_MULTIPLY						  
							      108 BINARY_MULTIPLY					    108 RETURN_VALUE NEW_LINE					  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		      ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		    ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		  ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE
--							      --							    --								  --
def solveQuery ( start , end , arr ) :			      Disassembly of <code object solveQuery at 0x7f33e2644f60, fil Disassembly of <code object solveQuery at 0x7f2b0164d390, fil error : Traceback (most recent call last):   File
    frequency = dict ( )				      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( start , end + 1 ) :		      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  (item)   File "main.py", line 38, in <module>	  Fi
	if arr [ i ] in frequency.keys ( ) :		      4 STORE_FAST 3 ( frequency )				    4 STORE_FAST 3 ( frequency )				  le "<dis>", line 2, in solveQuery TypeError: 'int'
	    frequency [ arr [ i ] ] += 1		      								    								   object does not support item assignment
	else :						      3 6 SETUP_LOOP 72 ( to 80 )				    3 6 SETUP_LOOP 76 ( to 90 )					  
	    frequency [ arr [ i ] ] = 1			      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
    count = 0						      10 LOAD_FAST 0 ( start )					    10 LOAD_FAST 0 ( start )					  
    for x in frequency :				      12 LOAD_FAST 1 ( end )					    12 LOAD_FAST 1 ( end )					  
	if x == frequency [ x ] :			      14 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 1 )					  
	    count += 1					      16 BINARY_ADD						    16 BINARY_ADD						  
    return count					      18 CALL_FUNCTION 2					    18 CALL_FUNCTION 2						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 54 ( to 78 )				    >> 22 FOR_ITER 56 ( to 88 )					  
							      24 STORE_FAST 4 ( i )					    24 STORE_FAST 4 ( i )					  
							      								    								  
							      4 26 LOAD_FAST 2 ( arr )					    4 26 LOAD_FAST 2 ( arr )					  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_FAST 4 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 3 ( frequency )				    32 LOAD_FAST 3 ( frequency )				  
							      34 LOAD_METHOD 2 ( keys )					    34 LOAD_METHOD 2 ( keys )					  
							      36 CALL_METHOD 0						    36 CALL_METHOD 0						  
							      38 COMPARE_OP 6 ( in )					    38 COMPARE_OP 6 ( in )					  
							      40 POP_JUMP_IF_FALSE 64					    40 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      5 42 LOAD_FAST 3 ( frequency )				    5 42 LOAD_FAST 3 ( frequency )				  
							      44 LOAD_FAST 2 ( arr )					    44 LOAD_FAST 2 ( arr )					  
							      46 LOAD_FAST 4 ( i )					    46 LOAD_FAST 4 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 DUP_TOP_TWO						    50 DUP_TOP_TWO						  
							      52 BINARY_SUBSCR						    52 ROT_THREE						  
							      54 LOAD_CONST 1 ( 1 )					    54 STORE_SUBSCR						  
							      56 INPLACE_ADD						    56 JUMP_ABSOLUTE 22						  
							      58 ROT_THREE						    58 JUMP_FORWARD 12 ( to 70 )				  
							      60 STORE_SUBSCR						    								  
							      62 JUMP_ABSOLUTE 22					    7 >> 60 LOAD_CONST 1 ( 1 )					  
							      								    62 LOAD_FAST 3 ( frequency )				  
							      7 >> 64 LOAD_CONST 1 ( 1 )				    64 LOAD_FAST 2 ( arr )					  
							      66 LOAD_FAST 3 ( frequency )				    66 LOAD_FAST 4 ( i )					  
							      68 LOAD_FAST 2 ( arr )					    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 4 ( i )					    70 STORE_SUBSCR						  
							      72 BINARY_SUBSCR						    72 JUMP_FORWARD 4 ( to 74 )					  
							      74 STORE_SUBSCR						    								  
							      76 JUMP_ABSOLUTE 22					    9 >> 74 LOAD_CONST 1 ( 1 )					  
							      >> 78 POP_BLOCK						    76 LOAD_FAST 3 ( frequency )				  
							      								    78 LOAD_FAST 2 ( arr )					  
							      8 >> 80 LOAD_CONST 2 ( 0 )				    80 LOAD_FAST 4 ( i )					  
							      82 STORE_FAST 5 ( count )					    82 BINARY_SUBSCR						  
							      								    84 STORE_SUBSCR						  
							      9 84 SETUP_LOOP 32 ( to 118 )				    86 JUMP_ABSOLUTE 22						  
							      86 LOAD_FAST 3 ( frequency )				    >> 88 POP_BLOCK						  
							      88 GET_ITER						    								  
							      >> 90 FOR_ITER 24 ( to 116 )				    10 >> 90 LOAD_CONST 2 ( 0 )					  
							      92 STORE_FAST 6 ( x )					    92 STORE_FAST 5 ( count )					  
							      								    								  
							      10 94 LOAD_FAST 6 ( x )					    11 94 SETUP_LOOP 44 ( to 124 )				  
							      96 LOAD_FAST 3 ( frequency )				    96 LOAD_FAST 3 ( frequency )				  
							      98 LOAD_FAST 6 ( x )					    98 GET_ITER							  
							      100 BINARY_SUBSCR						    >> 100 FOR_ITER 36 ( to 122 )				  
							      102 COMPARE_OP 2 ( == )					    102 STORE_FAST 6 ( x )					  
							      104 POP_JUMP_IF_FALSE 90					    								  
							      								    12 104 LOAD_FAST 6 ( x )					  
							      11 106 LOAD_FAST 5 ( count )				    106 LOAD_FAST 3 ( frequency )				  
							      108 LOAD_CONST 1 ( 1 )					    108 LOAD_FAST 6 ( x )					  
							      110 INPLACE_ADD						    110 BINARY_SUBSCR						  
							      112 STORE_FAST 5 ( count )				    112 COMPARE_OP 2 ( == )					  
							      114 JUMP_ABSOLUTE 90					    114 POP_JUMP_IF_FALSE 100					  
							      >> 116 POP_BLOCK						    								  
							      								    13 116 LOAD_FAST 5 ( count )				  
							      12 >> 118 LOAD_FAST 5 ( count )				    118 LOAD_CONST 1 ( 1 )					  
							      120 RETURN_VALUE NEW_LINE					    120 INPLACE_ADD						  
							      								    122 STORE_FAST 5 ( count )					  
							      								    124 JUMP_ABSOLUTE 100					  
							      								    >> 126 POP_BLOCK						  
							      								    								  
							      								    14 >> 128 LOAD_FAST 5 ( count )				  
							      								    130 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_BONACCI_NUMBERS					      N_BONACCI_NUMBERS						    N_BONACCI_NUMBERS						  N_BONACCI_NUMBERS
--							      --							    --								  --
def bonacciseries ( n , m ) :				      Disassembly of <code object bonacciseries at 0x7f33e2644f60,  Disassembly of <code object bonacciseries at 0x7f2b01639660,  script_not_found : None
    a = [ 0 ] * m					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    a [ n - 1 ] = 1					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    for i in range ( n , m ) :				      4 LOAD_FAST 1 ( m )					    4 LOAD_FAST 1 ( m )						  
	for j in range ( i - n , i ) :			      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	    a [ i ] = a [ i ] + a [ j ]			      8 STORE_FAST 2 ( a )					    8 STORE_FAST 2 ( a )					  
    for i in range ( 0 , m ) :				      								    								  
	print ( a [ i ] , end = " " )			      3 10 LOAD_CONST 2 ( 1 )					    3 10 LOAD_CONST 2 ( 1 )					  
							      12 LOAD_FAST 2 ( a )					    12 LOAD_FAST 2 ( a )					  
							      14 LOAD_FAST 0 ( n )					    14 LOAD_FAST 0 ( n )					  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 2 ( 1 )					  
							      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
							      20 STORE_SUBSCR						    20 STORE_SUBSCR						  
							      								    								  
							      4 22 SETUP_LOOP 62 ( to 86 )				    4 22 SETUP_LOOP 62 ( to 82 )				  
							      24 LOAD_GLOBAL 0 ( range )				    24 LOAD_GLOBAL 0 ( range )					  
							      26 LOAD_FAST 0 ( n )					    26 LOAD_FAST 0 ( n )					  
							      28 LOAD_FAST 1 ( m )					    28 LOAD_FAST 1 ( m )					  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 48 ( to 84 )				    >> 34 FOR_ITER 50 ( to 80 )					  
							      36 STORE_FAST 3 ( i )					    36 STORE_FAST 3 ( i )					  
							      								    								  
							      5 38 SETUP_LOOP 42 ( to 82 )				    5 38 SETUP_LOOP 36 ( to 78 )				  
							      40 LOAD_GLOBAL 0 ( range )				    40 LOAD_GLOBAL 0 ( range )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 LOAD_FAST 0 ( n )					    44 LOAD_FAST 0 ( n )					  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 LOAD_FAST 3 ( i )					    48 LOAD_FAST 3 ( i )					  
							      50 CALL_FUNCTION 2					    50 CALL_FUNCTION 2						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 24 ( to 80 )				    >> 54 FOR_ITER 24 ( to 76 )					  
							      56 STORE_FAST 4 ( j )					    56 STORE_FAST 4 ( j )					  
							      								    								  
							      6 58 LOAD_FAST 2 ( a )					    6 58 LOAD_FAST 2 ( a )					  
							      60 LOAD_FAST 3 ( i )					    60 LOAD_FAST 3 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_FAST 2 ( a )					    64 LOAD_FAST 2 ( a )					  
							      66 LOAD_FAST 4 ( j )					    66 LOAD_FAST 4 ( j )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 BINARY_ADD						    70 BINARY_ADD						  
							      72 LOAD_FAST 2 ( a )					    72 LOAD_FAST 2 ( a )					  
							      74 LOAD_FAST 3 ( i )					    74 LOAD_FAST 3 ( i )					  
							      76 STORE_SUBSCR						    78 STORE_SUBSCR						  
							      78 JUMP_ABSOLUTE 54					    74 JUMP_ABSOLUTE 54						  
							      >> 80 POP_BLOCK						    >> 76 POP_BLOCK						  
							      >> 82 JUMP_ABSOLUTE 34					    >> 78 JUMP_ABSOLUTE 34					  
							      >> 84 POP_BLOCK						    >> 80 POP_BLOCK						  
							      								    								  
							      7 >> 86 SETUP_LOOP 34 ( to 122 )				    7 >> 82 SETUP_LOOP 48 ( to 142 )				  
							      88 LOAD_GLOBAL 0 ( range )				    84 LOAD_GLOBAL 0 ( range )					  
							      90 LOAD_CONST 1 ( 0 )					    86 LOAD_CONST 1 ( 0 )					  
							      92 LOAD_FAST 1 ( m )					    88 LOAD_FAST 1 ( m )					  
							      94 CALL_FUNCTION 2					    90 CALL_FUNCTION 2						  
							      96 GET_ITER						    92 GET_ITER							  
							      >> 98 FOR_ITER 20 ( to 120 )				    >> 94 FOR_ITER 36 ( to 140 )				  
							      100 STORE_FAST 3 ( i )					    96 STORE_FAST 3 ( i )					  
							      								    								  
							      8 102 LOAD_GLOBAL 1 ( print )				    8 98 LOAD_GLOBAL 1 ( print )				  
							      104 LOAD_FAST 2 ( a )					    100 LOAD_FAST 2 ( a )					  
							      106 LOAD_FAST 3 ( i )					    102 LOAD_FAST 3 ( i )					  
							      108 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      110 LOAD_CONST 3 ( ' ' )					    106 LOAD_CONST 3 ( ' ' )					  
							      112 LOAD_CONST 4 ( ( 'end' , ) )				    108 LOAD_CONST 4 ( ( 'end' , ) )				  
							      114 CALL_FUNCTION_KW 2					    110 CALL_FUNCTION_KW 2					  
							      116 POP_TOP						    112 POP_TOP							  
							      118 JUMP_ABSOLUTE 98					    114 JUMP_ABSOLUTE 94					  
							      >> 120 POP_BLOCK						    >> 116 POP_BLOCK						  
							      >> 122 LOAD_CONST 0 ( None )				    >> 118 LOAD_CONST 0 ( None )				  
							      124 RETURN_VALUE NEW_LINE					    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
def nobleInteger ( arr ) :				      Disassembly of <code object nobleInteger at 0x7f33e2644f60, f Disassembly of <code object nobleInteger at 0x7f2b0163dc90, f script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    n = len ( arr )					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( n - 1 ) :				      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
	if arr [ i ] == arr [ i + 1 ] :			      6 POP_TOP							    6 POP_TOP							  
	    continue					      								    								  
	if arr [ i ] == n - i - 1 :			      3 8 LOAD_GLOBAL 1 ( len )					    3 8 LOAD_GLOBAL 1 ( len )					  
	    return arr [ i ]				      10 LOAD_FAST 0 ( arr )					    10 LOAD_FAST 0 ( arr )					  
    if arr [ n - 1 ] == 0 :				      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	return arr [ n - 1 ]				      14 STORE_FAST 1 ( n )					    14 STORE_FAST 1 ( n )					  
    return - 1						      								    								  
							      4 16 SETUP_LOOP 70 ( to 88 )				    4 16 SETUP_LOOP 92 ( to 108 )				  
							      18 LOAD_GLOBAL 2 ( range )				    18 LOAD_GLOBAL 2 ( range )					  
							      20 LOAD_FAST 1 ( n )					    20 LOAD_FAST 1 ( n )					  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 1 ( 1 )					  
							      24 BINARY_SUBTRACT					    24 BINARY_SUBTRACT						  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 54 ( to 86 )				    >> 30 FOR_ITER 66 ( to 106 )				  
							      32 STORE_FAST 2 ( i )					    32 STORE_FAST 2 ( i )					  
							      								    								  
							      5 34 LOAD_FAST 0 ( arr )					    5 34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 2 ( i )					    36 LOAD_FAST 2 ( i )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 1 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_FALSE 56					    52 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      6 54 JUMP_ABSOLUTE 30					    6 54 JUMP_ABSOLUTE 30					  
							      								    								  
							      7 >> 56 LOAD_FAST 0 ( arr )				    7 >> 56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 2 ( i )					    58 LOAD_FAST 2 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 1 ( n )					    62 LOAD_FAST 1 ( n )					  
							      64 LOAD_FAST 2 ( i )					    64 LOAD_FAST 2 ( i )					  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBTRACT						  
							      68 LOAD_CONST 1 ( 1 )					    68 LOAD_CONST 1 ( 1 )					  
							      70 BINARY_SUBTRACT					    70 BINARY_SUBTRACT						  
							      72 COMPARE_OP 2 ( == )					    72 COMPARE_OP 2 ( == )					  
							      74 POP_JUMP_IF_FALSE 30					    74 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      8 76 LOAD_FAST 0 ( arr )					    8 76 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 2 ( i )					    78 LOAD_FAST 2 ( i )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 RETURN_VALUE						    82 RETURN_VALUE						  
							      84 JUMP_ABSOLUTE 30					    								  
							      >> 86 POP_BLOCK						    9 >> 84 LOAD_FAST 0 ( arr )					  
							      								    86 LOAD_FAST 1 ( n )					  
							      9 >> 88 LOAD_FAST 0 ( arr )				    88 LOAD_CONST 1 ( 1 )					  
							      90 LOAD_FAST 1 ( n )					    90 BINARY_SUBTRACT						  
							      92 LOAD_CONST 1 ( 1 )					    92 BINARY_SUBSCR						  
							      94 BINARY_SUBTRACT					    94 LOAD_CONST 2 ( 0 )					  
							      96 BINARY_SUBSCR						    96 COMPARE_OP 2 ( == )					  
							      98 LOAD_CONST 2 ( 0 )					    98 POP_JUMP_IF_FALSE 30					  
							      100 COMPARE_OP 2 ( == )					    								  
							      102 POP_JUMP_IF_FALSE 116					    10 100 LOAD_FAST 0 ( arr )					  
							      								    102 LOAD_FAST 1 ( n )					  
							      10 104 LOAD_FAST 0 ( arr )				    104 LOAD_CONST 1 ( 1 )					  
							      106 LOAD_FAST 1 ( n )					    106 BINARY_SUBTRACT						  
							      108 LOAD_CONST 1 ( 1 )					    108 BINARY_SUBSCR						  
							      110 BINARY_SUBTRACT					    110 RETURN_VALUE						  
							      112 BINARY_SUBSCR						    112 JUMP_ABSOLUTE 30					  
							      114 RETURN_VALUE						    >> 114 POP_BLOCK						  
							      								    								  
							      11 >> 116 LOAD_CONST 3 ( - 1 )				    11 >> 116 LOAD_CONST 3 ( - 1 )				  
							      118 RETURN_VALUE NEW_LINE					    118 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PATTERNS_101_GIVEN_STRING				      FIND_PATTERNS_101_GIVEN_STRING				    FIND_PATTERNS_101_GIVEN_STRING				  FIND_PATTERNS_101_GIVEN_STRING
--							      --							    --								  --
def patternCount ( str ) :				      Disassembly of <code object patternCount at 0x7f33e2644f60, f Disassembly of <code object patternCount at 0x7f2b01639f60, f script_not_found : None
    last = str [ 0 ]					      2 0 LOAD_FAST 0 ( str )					    2 0 LOAD_FAST 0 ( str )					  
    i = 1 ; counter = 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    while ( i < len ( str ) ) :				      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
	if ( str [ i ] == '0' and last == '1' ) :	      6 STORE_FAST 1 ( last )					    6 STORE_FAST 1 ( last )					  
	    while ( str [ i ] == '0' ) :		      								    								  
		i += 1					      3 8 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 2 ( 1 )					  
		if ( str [ i ] == '1' ) :		      10 STORE_FAST 2 ( i )					    10 STORE_FAST 2 ( i )					  
		    counter += 1			      12 LOAD_CONST 1 ( 0 )					    								  
	last = str [ i ]				      14 STORE_FAST 3 ( counter )				    4 12 LOAD_CONST 1 ( 0 )					  
	i += 1						      								    14 STORE_FAST 3 ( counter )					  
    return counter					      4 16 SETUP_LOOP 98 ( to 116 )				    								  
							      >> 18 LOAD_FAST 2 ( i )					    5 16 SETUP_LOOP 74 ( to 92 )				  
							      20 LOAD_GLOBAL 0 ( len )					    >> 18 LOAD_FAST 2 ( i )					  
							      22 LOAD_FAST 0 ( str )					    20 LOAD_GLOBAL 0 ( len )					  
							      24 CALL_FUNCTION 1					    22 LOAD_FAST 0 ( str )					  
							      26 COMPARE_OP 0 ( < )					    24 CALL_FUNCTION 1						  
							      28 POP_JUMP_IF_FALSE 114					    26 COMPARE_OP 0 ( < )					  
							      								    28 POP_JUMP_IF_FALSE 90					  
							      5 30 LOAD_FAST 0 ( str )					    								  
							      32 LOAD_FAST 2 ( i )					    6 30 LOAD_FAST 0 ( str )					  
							      34 BINARY_SUBSCR						    32 LOAD_FAST 2 ( i )					  
							      36 LOAD_CONST 3 ( '0' )					    34 BINARY_SUBSCR						  
							      38 COMPARE_OP 2 ( == )					    36 LOAD_CONST 3 ( '0' )					  
							      40 POP_JUMP_IF_FALSE 96					    38 COMPARE_OP 2 ( == )					  
							      42 LOAD_FAST 1 ( last )					    40 POP_JUMP_IF_FALSE 18					  
							      44 LOAD_CONST 4 ( '1' )					    42 LOAD_FAST 1 ( last )					  
							      46 COMPARE_OP 2 ( == )					    44 LOAD_CONST 3 ( '1' )					  
							      48 POP_JUMP_IF_FALSE 96					    46 COMPARE_OP 2 ( == )					  
							      								    48 POP_JUMP_IF_FALSE 18					  
							      6 50 SETUP_LOOP 44 ( to 96 )				    								  
							      >> 52 LOAD_FAST 0 ( str )					    7 50 SETUP_LOOP 40 ( to 90 )				  
							      54 LOAD_FAST 2 ( i )					    >> 52 LOAD_FAST 0 ( str )					  
							      56 BINARY_SUBSCR						    54 LOAD_FAST 2 ( i )					  
							      58 LOAD_CONST 3 ( '0' )					    56 BINARY_SUBSCR						  
							      60 COMPARE_OP 2 ( == )					    58 LOAD_CONST 3 ( '0' )					  
							      62 POP_JUMP_IF_FALSE 94					    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 88					  
							      7 64 LOAD_FAST 2 ( i )					    								  
							      66 LOAD_CONST 2 ( 1 )					    8 64 SETUP_LOOP 30 ( to 88 )				  
							      68 INPLACE_ADD						    66 LOAD_FAST 2 ( i )					  
							      70 STORE_FAST 2 ( i )					    68 LOAD_CONST 2 ( 1 )					  
							      								    70 INPLACE_ADD						  
							      8 72 LOAD_FAST 0 ( str )					    72 STORE_FAST 2 ( i )					  
							      74 LOAD_FAST 2 ( i )					    								  
							      76 BINARY_SUBSCR						    9 74 LOAD_FAST 0 ( str )					  
							      78 LOAD_CONST 4 ( '1' )					    76 LOAD_FAST 2 ( i )					  
							      80 COMPARE_OP 2 ( == )					    78 BINARY_SUBSCR						  
							      82 POP_JUMP_IF_FALSE 52					    80 LOAD_CONST 3 ( '1' )					  
							      								    82 COMPARE_OP 2 ( == )					  
							      9 84 LOAD_FAST 3 ( counter )				    84 POP_JUMP_IF_FALSE 52					  
							      86 LOAD_CONST 2 ( 1 )					    								  
							      88 INPLACE_ADD						    10 86 LOAD_FAST 3 ( counter )				  
							      90 STORE_FAST 3 ( counter )				    88 LOAD_CONST 2 ( 1 )					  
							      92 JUMP_ABSOLUTE 52					    90 INPLACE_ADD						  
							      >> 94 POP_BLOCK						    92 STORE_FAST 3 ( counter )					  
							      								    94 JUMP_ABSOLUTE 52						  
							      10 >> 96 LOAD_FAST 0 ( str )				    >> 96 POP_BLOCK						  
							      98 LOAD_FAST 2 ( i )					    >> 98 JUMP_ABSOLUTE 18					  
							      100 BINARY_SUBSCR						    >> 100 POP_BLOCK						  
							      102 STORE_FAST 1 ( last )					    								  
							      								    11 >> 102 LOAD_FAST 0 ( str )				  
							      11 104 LOAD_FAST 2 ( i )					    104 LOAD_FAST 2 ( i )					  
							      106 LOAD_CONST 2 ( 1 )					    106 BINARY_SUBSCR						  
							      108 INPLACE_ADD						    108 STORE_FAST 1 ( last )					  
							      110 STORE_FAST 2 ( i )					    								  
							      112 JUMP_ABSOLUTE 18					    12 110 LOAD_FAST 2 ( i )					  
							      >> 114 POP_BLOCK						    112 LOAD_CONST 2 ( 1 )					  
							      								    114 INPLACE_ADD						  
							      12 >> 116 LOAD_FAST 3 ( counter )				    116 STORE_FAST 2 ( i )					  
							      118 RETURN_VALUE NEW_LINE					    								  
							      								    13 118 LOAD_FAST 3 ( counter )				  
							      								    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YS_DISTINCT_ELEMENTS				      SUB<unk> YS_DISTINCT_ELEMENTS				    SUB<unk> YS_DISTINCT_ELEMENTS				  SUB<unk> YS_DISTINCT_ELEMENTS
--							      --							    --								  --
def sumoflength ( arr , n ) :				      Disassembly of <code object sumoflength at 0x7f33e2644930, fi Disassembly of <code object sumoflength at 0x7f2b0163dc90, fi script_not_found : None
    s = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    j = 0						      2 STORE_FAST 2 ( s )					    2 STORE_FAST 2 ( s )					  
    ans = 0						      								    								  
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	while ( j < n and ( arr [ j ] not in s ) ) :	      6 STORE_FAST 3 ( j )					    6 STORE_FAST 3 ( j )					  
	    s.append ( arr [ j ] )			      								    								  
	    j += 1					      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 1 ( 0 )					  
	ans += ( ( j - i ) * ( j - i + 1 ) ) // 2	      10 STORE_FAST 4 ( ans )					    10 STORE_FAST 4 ( ans )					  
	s.remove ( arr [ i ] )				      								    								  
    return ans						      5 12 SETUP_LOOP 106 ( to 120 )				    5 12 SETUP_LOOP 92 ( to 108 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 94 ( to 118 )				    >> 22 FOR_ITER 80 ( to 106 )				  
							      24 STORE_FAST 5 ( i )					    24 STORE_FAST 5 ( i )					  
							      								    								  
							      6 26 SETUP_LOOP 46 ( to 74 )				    6 26 SETUP_LOOP 56 ( to 94 )				  
							      >> 28 LOAD_FAST 3 ( j )					    >> 28 LOAD_FAST 3 ( j )					  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 COMPARE_OP 0 ( < )					    32 COMPARE_OP 0 ( < )					  
							      34 POP_JUMP_IF_FALSE 72					    34 POP_JUMP_IF_FALSE 92					  
							      36 LOAD_FAST 0 ( arr )					    36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_FAST 3 ( j )					    38 LOAD_FAST 3 ( j )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 2 ( s )					    42 LOAD_FAST 2 ( s )					  
							      44 COMPARE_OP 7 ( not in )				    44 COMPARE_OP 7 ( not in )					  
							      46 POP_JUMP_IF_FALSE 72					    46 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      7 48 LOAD_FAST 2 ( s )					    7 48 LOAD_FAST 2 ( s )					  
							      50 LOAD_METHOD 1 ( append )				    50 LOAD_METHOD 1 ( append )					  
							      52 LOAD_FAST 0 ( arr )					    52 LOAD_FAST 0 ( arr )					  
							      54 LOAD_FAST 3 ( j )					    54 LOAD_FAST 3 ( j )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 CALL_METHOD 1						    58 CALL_METHOD 1						  
							      60 POP_TOP						    60 POP_TOP							  
							      								    								  
							      8 62 LOAD_FAST 3 ( j )					    8 62 LOAD_FAST 3 ( j )					  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      66 INPLACE_ADD						    66 INPLACE_ADD						  
							      68 STORE_FAST 3 ( j )					    68 STORE_FAST 3 ( j )					  
							      70 JUMP_ABSOLUTE 28					    70 JUMP_ABSOLUTE 28						  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      								    								  
							      9 >> 74 LOAD_FAST 4 ( ans )				    9 74 LOAD_FAST 4 ( ans )					  
							      76 LOAD_FAST 3 ( j )					    76 LOAD_FAST 3 ( j )					  
							      78 LOAD_FAST 5 ( i )					    78 LOAD_FAST 5 ( i )					  
							      80 BINARY_SUBTRACT					    80 BINARY_SUBTRACT						  
							      82 LOAD_FAST 3 ( j )					    82 LOAD_FAST 3 ( j )					  
							      84 LOAD_FAST 5 ( i )					    84 LOAD_FAST 5 ( i )					  
							      86 BINARY_SUBTRACT					    86 BINARY_SUBTRACT						  
							      88 LOAD_CONST 2 ( 1 )					    88 LOAD_CONST 2 ( 1 )					  
							      90 BINARY_ADD						    90 BINARY_ADD						  
							      92 BINARY_MULTIPLY					    92 BINARY_MULTIPLY						  
							      94 LOAD_CONST 3 ( 2 )					    94 LOAD_CONST 3 ( 2 )					  
							      96 BINARY_FLOOR_DIVIDE					    96 BINARY_FLOOR_DIVIDE					  
							      98 INPLACE_ADD						    98 INPLACE_ADD						  
							      100 STORE_FAST 4 ( ans )					    100 STORE_FAST 4 ( ans )					  
							      								    								  
							      10 102 LOAD_FAST 2 ( s )					    10 102 LOAD_FAST 2 ( s )					  
							      104 LOAD_METHOD 2 ( remove )				    104 LOAD_METHOD 2 ( remove )				  
							      106 LOAD_FAST 0 ( arr )					    106 LOAD_FAST 0 ( arr )					  
							      108 LOAD_FAST 5 ( i )					    108 LOAD_FAST 5 ( i )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 CALL_METHOD 1						    112 CALL_METHOD 1						  
							      114 POP_TOP						    114 POP_TOP							  
							      116 JUMP_ABSOLUTE 22					    116 JUMP_ABSOLUTE 28					  
							      >> 118 POP_BLOCK						    >> 118 POP_BLOCK						  
							      								    								  
							      11 >> 120 LOAD_FAST 4 ( ans )				    11 >> 120 LOAD_FAST 4 ( ans )				  
							      122 RETURN_VALUE NEW_LINE					    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_<unk> CATIVE_INVERSE_1_N			      MODULAR_<unk> CATIVE_INVERSE_1_N				    MODULAR_<unk> CATIVE_INVERSE_1_N				  MODULAR_<unk> CATIVE_INVERSE_1_N
--							      --							    --								  --
def modularInverse ( n , prime ) :			      Disassembly of <code object modularInverse at 0x7f33e26494b0, Disassembly of <code object modularInverse at 0x7f2b0164de40, script_not_found : None
    dp = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    dp [ 0 ] = dp [ 1 ] = 1				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    for i in range ( 2 , n + 1 ) :			      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
	dp [ i ] = dp [ prime % i ] * ( prime - prime // i )  6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
    for i in range ( 1 , n + 1 ) :			      8 BINARY_ADD						    8 BINARY_ADD						  
	print ( dp [ i ] , end = " " )			      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 STORE_FAST 2 ( dp )					    12 STORE_FAST 2 ( dp )					  
							      								    								  
							      3 14 LOAD_CONST 2 ( 1 )					    3 14 LOAD_FAST 2 ( dp )					  
							      16 DUP_TOP						    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_FAST 2 ( dp )					    18 STORE_SUBSCR						  
							      20 LOAD_CONST 1 ( 0 )					    								  
							      22 STORE_SUBSCR						    4 20 SETUP_LOOP 66 ( to 86 )				  
							      24 LOAD_FAST 2 ( dp )					    22 LOAD_GLOBAL 0 ( range )					  
							      26 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 3 ( 2 )					  
							      28 STORE_SUBSCR						    26 LOAD_FAST 0 ( n )					  
							      								    28 LOAD_CONST 2 ( 1 )					  
							      4 30 SETUP_LOOP 54 ( to 86 )				    30 BINARY_ADD						  
							      32 LOAD_GLOBAL 0 ( range )				    32 CALL_FUNCTION 2						  
							      34 LOAD_CONST 3 ( 2 )					    34 GET_ITER							  
							      36 LOAD_FAST 0 ( n )					    >> 36 FOR_ITER 52 ( to 84 )					  
							      38 LOAD_CONST 2 ( 1 )					    38 STORE_FAST 3 ( i )					  
							      40 BINARY_ADD						    								  
							      42 CALL_FUNCTION 2					    5 40 LOAD_FAST 2 ( dp )					  
							      44 GET_ITER						    42 LOAD_FAST 1 ( prime )					  
							      >> 46 FOR_ITER 36 ( to 84 )				    44 LOAD_FAST 3 ( i )					  
							      48 STORE_FAST 3 ( i )					    46 BINARY_MODULO						  
							      								    48 BINARY_SUBSCR						  
							      5 50 LOAD_FAST 2 ( dp )					    50 LOAD_FAST 1 ( prime )					  
							      52 LOAD_FAST 1 ( prime )					    52 LOAD_FAST 3 ( i )					  
							      54 LOAD_FAST 3 ( i )					    54 BINARY_SUBTRACT						  
							      56 BINARY_MODULO						    56 BINARY_MULTIPLY						  
							      58 BINARY_SUBSCR						    58 LOAD_FAST 1 ( prime )					  
							      60 LOAD_FAST 1 ( prime )					    60 BINARY_MODULO						  
							      62 LOAD_FAST 1 ( prime )					    62 LOAD_FAST 2 ( dp )					  
							      64 LOAD_FAST 3 ( i )					    64 LOAD_FAST 3 ( i )					  
							      66 BINARY_FLOOR_DIVIDE					    66 STORE_SUBSCR						  
							      68 BINARY_SUBTRACT					    68 JUMP_ABSOLUTE 36						  
							      70 BINARY_MULTIPLY					    >> 70 POP_BLOCK						  
							      72 LOAD_FAST 1 ( prime )					    								  
							      74 BINARY_MODULO						    6 72 SETUP_LOOP 38 ( to 106 )				  
							      76 LOAD_FAST 2 ( dp )					    74 LOAD_GLOBAL 0 ( range )					  
							      78 LOAD_FAST 3 ( i )					    76 LOAD_CONST 2 ( 1 )					  
							      80 STORE_SUBSCR						    78 LOAD_FAST 0 ( n )					  
							      82 JUMP_ABSOLUTE 46					    80 LOAD_CONST 2 ( 1 )					  
							      >> 84 POP_BLOCK						    82 BINARY_ADD						  
							      								    84 CALL_FUNCTION 2						  
							      6 >> 86 SETUP_LOOP 38 ( to 126 )				    86 GET_ITER							  
							      88 LOAD_GLOBAL 0 ( range )				    >> 88 FOR_ITER 20 ( to 104 )				  
							      90 LOAD_CONST 2 ( 1 )					    90 STORE_FAST 3 ( i )					  
							      92 LOAD_FAST 0 ( n )					    								  
							      94 LOAD_CONST 2 ( 1 )					    7 92 LOAD_GLOBAL 1 ( print )				  
							      96 BINARY_ADD						    94 LOAD_FAST 2 ( dp )					  
							      98 CALL_FUNCTION 2					    96 LOAD_FAST 3 ( i )					  
							      100 GET_ITER						    98 BINARY_SUBSCR						  
							      >> 102 FOR_ITER 20 ( to 124 )				    100 LOAD_CONST 4 ( ' ' )					  
							      104 STORE_FAST 3 ( i )					    102 LOAD_CONST 5 ( ( 'end' , ) )				  
							      								    104 CALL_FUNCTION_KW 2					  
							      7 106 LOAD_GLOBAL 1 ( print )				    106 POP_TOP							  
							      108 LOAD_FAST 2 ( dp )					    108 JUMP_ABSOLUTE 88					  
							      110 LOAD_FAST 3 ( i )					    >> 110 POP_BLOCK						  
							      112 BINARY_SUBSCR						    >> 112 LOAD_CONST 0 ( None )				  
							      114 LOAD_CONST 4 ( ' ' )					    114 RETURN_VALUE NEW_LINE					  
							      116 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      118 CALL_FUNCTION_KW 2					    								  
							      120 POP_TOP						    								  
							      122 JUMP_ABSOLUTE 102					    								  
							      >> 124 POP_BLOCK						    								  
							      >> 126 LOAD_CONST 0 ( None )				    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1	      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1
--							      --							    --								  --
def maxRepeating ( str ) :				      Disassembly of <code object maxRepeating at 0x7f33e2644930, f Disassembly of <code object maxRepeating at 0x7f2b0163dc90, f error : /bin/bash: line 1:  4657 Segmentation faul
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    count = 0						      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  ataset/bin/python XLM/dis_script.py --script_path
    res = str [ 0 ]					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    cur_count = 1					      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MAXIMU
    for i in range ( n ) :				      								    								  M_CONSECUTIVE_REPEATING_CHARACTER_STRING_1.dis
	if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) :     3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    cur_count += 1				      10 STORE_FAST 2 ( count )					    10 STORE_FAST 2 ( count )					  
	else :						      								    								  
	    if cur_count > count :			      4 12 LOAD_FAST 0 ( str )					    4 12 LOAD_FAST 0 ( str )					  
		count = cur_count			      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
		res = str [ i ]				      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
	    cur_count = 1				      18 STORE_FAST 3 ( res )					    18 STORE_FAST 3 ( res )					  
    return res						      								    								  
							      5 20 LOAD_CONST 2 ( 1 )					    5 20 LOAD_CONST 2 ( 1 )					  
							      22 STORE_FAST 4 ( cur_count )				    22 STORE_FAST 4 ( cur_count )				  
							      								    								  
							      6 24 SETUP_LOOP 82 ( to 108 )				    6 24 SETUP_LOOP 92 ( to 126 )				  
							      26 LOAD_GLOBAL 1 ( range )				    26 LOAD_GLOBAL 1 ( range )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 70 ( to 106 )				    >> 34 FOR_ITER 80 ( to 124 )				  
							      36 STORE_FAST 5 ( i )					    36 STORE_FAST 5 ( i )					  
							      								    								  
							      7 38 LOAD_FAST 5 ( i )					    7 38 LOAD_FAST 5 ( i )					  
							      40 LOAD_FAST 1 ( n )					    40 LOAD_FAST 1 ( n )					  
							      42 LOAD_CONST 2 ( 1 )					    42 COMPARE_OP 0 ( < )					  
							      44 BINARY_SUBTRACT					    44 POP_JUMP_IF_FALSE 74					  
							      46 COMPARE_OP 0 ( < )					    46 LOAD_FAST 0 ( str )					  
							      48 POP_JUMP_IF_FALSE 80					    48 LOAD_FAST 5 ( i )					  
							      50 LOAD_FAST 0 ( str )					    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 5 ( i )					    52 LOAD_FAST 0 ( str )					  
							      54 BINARY_SUBSCR						    54 LOAD_FAST 5 ( i )					  
							      56 LOAD_FAST 0 ( str )					    56 LOAD_CONST 2 ( 1 )					  
							      58 LOAD_FAST 5 ( i )					    58 BINARY_ADD						  
							      60 LOAD_CONST 2 ( 1 )					    60 BINARY_SUBSCR						  
							      62 BINARY_ADD						    62 COMPARE_OP 2 ( == )					  
							      64 BINARY_SUBSCR						    64 POP_JUMP_IF_FALSE 74					  
							      66 COMPARE_OP 2 ( == )					    								  
							      68 POP_JUMP_IF_FALSE 80					    8 66 LOAD_FAST 4 ( cur_count )				  
							      								    68 LOAD_CONST 2 ( 1 )					  
							      8 70 LOAD_FAST 4 ( cur_count )				    70 INPLACE_ADD						  
							      72 LOAD_CONST 2 ( 1 )					    72 STORE_FAST 4 ( cur_count )				  
							      74 INPLACE_ADD						    								  
							      76 STORE_FAST 4 ( cur_count )				    10 >> 74 LOAD_FAST 4 ( cur_count )				  
							      78 JUMP_ABSOLUTE 34					    76 LOAD_FAST 2 ( count )					  
							      								    78 COMPARE_OP 4 ( > )					  
							      10 >> 80 LOAD_FAST 4 ( cur_count )			    80 POP_JUMP_IF_FALSE 92					  
							      82 LOAD_FAST 2 ( count )					    								  
							      84 COMPARE_OP 4 ( > )					    11 82 LOAD_FAST 4 ( cur_count )				  
							      86 POP_JUMP_IF_FALSE 100					    84 STORE_FAST 2 ( count )					  
							      								    								  
							      11 88 LOAD_FAST 4 ( cur_count )				    12 86 LOAD_FAST 0 ( str )					  
							      90 STORE_FAST 2 ( count )					    88 LOAD_FAST 5 ( i )					  
							      								    90 BINARY_SUBSCR						  
							      12 92 LOAD_FAST 0 ( str )					    92 STORE_FAST 3 ( res )					  
							      94 LOAD_FAST 5 ( i )					    94 JUMP_ABSOLUTE 34						  
							      96 BINARY_SUBSCR						    >> 96 POP_BLOCK						  
							      98 STORE_FAST 3 ( res )					    								  
							      								    13 >> 98 LOAD_CONST 2 ( 1 )					  
							      13 >> 100 LOAD_CONST 2 ( 1 )				    100 STORE_FAST 4 ( cur_count )				  
							      102 STORE_FAST 4 ( cur_count )				    102 JUMP_ABSOLUTE 34					  
							      104 JUMP_ABSOLUTE 34					    >> 104 POP_BLOCK						  
							      >> 106 POP_BLOCK						    								  
							      								    14 >> 106 LOAD_FAST 3 ( res )				  
							      14 >> 108 LOAD_FAST 3 ( res )				    108 RETURN_VALUE NEW_LINE					  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1
--							      --							    --								  --
def countSubstringWithEqualEnds ( s ) :			      Disassembly of <code object countSubstringWithEqualEnds at 0x Disassembly of <code object countSubstringWithEqualEnds at 0x script_not_found : None
    result = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    n = len ( s ) ;					      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  
    count = [ 0 ] * MAX_CHAR ;				      								    								  
    for i in range ( n ) :				      3 4 LOAD_GLOBAL 0 ( len )					    3 4 LOAD_GLOBAL 0 ( len )					  
	count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1 ;	      6 LOAD_FAST 0 ( s )					    6 LOAD_FAST 0 ( s )						  
    for i in range ( MAX_CHAR ) :			      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
	result += ( count [ i ] * ( count [ i ] + 1 ) / 2 ) ; 10 STORE_FAST 2 ( n )					    10 STORE_FAST 2 ( n )					  
    return result ;					      								    								  
							      4 12 LOAD_CONST 1 ( 0 )					    4 12 LOAD_CONST 1 ( 0 )					  
							      14 BUILD_LIST 1						    14 BUILD_LIST 1						  
							      16 LOAD_GLOBAL 1 ( MAX_CHAR )				    16 LOAD_GLOBAL 1 ( MAX_CHAR )				  
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 STORE_FAST 3 ( count )					    20 STORE_FAST 3 ( count )					  
							      								    								  
							      5 22 SETUP_LOOP 48 ( to 72 )				    5 22 SETUP_LOOP 46 ( to 68 )				  
							      24 LOAD_GLOBAL 2 ( range )				    24 LOAD_GLOBAL 2 ( range )					  
							      26 LOAD_FAST 2 ( n )					    26 LOAD_FAST 2 ( n )					  
							      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 36 ( to 70 )				    >> 32 FOR_ITER 38 ( to 66 )					  
							      34 STORE_FAST 4 ( i )					    34 STORE_FAST 4 ( i )					  
							      								    								  
							      6 36 LOAD_FAST 3 ( count )				    6 36 LOAD_FAST 3 ( count )					  
							      38 LOAD_GLOBAL 3 ( ord )					    38 LOAD_GLOBAL 3 ( ord )					  
							      40 LOAD_FAST 0 ( s )					    40 LOAD_FAST 0 ( s )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 CALL_FUNCTION 1					    46 CALL_FUNCTION 1						  
							      48 LOAD_GLOBAL 3 ( ord )					    48 LOAD_GLOBAL 3 ( ord )					  
							      50 LOAD_CONST 2 ( 'a' )					    50 LOAD_CONST 2 ( 'a' )					  
							      52 CALL_FUNCTION 1					    52 CALL_FUNCTION 1						  
							      54 BINARY_SUBTRACT					    54 BINARY_SUBTRACT						  
							      56 DUP_TOP_TWO						    56 DUP_TOP_TWO						  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_CONST 3 ( 1 )					    60 LOAD_CONST 3 ( 1 )					  
							      62 INPLACE_ADD						    62 INPLACE_ADD						  
							      64 ROT_THREE						    64 ROT_THREE						  
							      66 STORE_SUBSCR						    66 STORE_SUBSCR						  
							      68 JUMP_ABSOLUTE 32					    68 JUMP_ABSOLUTE 32						  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      								    								  
							      7 >> 72 SETUP_LOOP 44 ( to 118 )				    7 >> 72 SETUP_LOOP 46 ( to 120 )				  
							      74 LOAD_GLOBAL 2 ( range )				    74 LOAD_GLOBAL 2 ( range )					  
							      76 LOAD_GLOBAL 1 ( MAX_CHAR )				    76 LOAD_GLOBAL 1 ( MAX_CHAR )				  
							      78 CALL_FUNCTION 1					    78 CALL_FUNCTION 1						  
							      80 GET_ITER						    80 GET_ITER							  
							      >> 82 FOR_ITER 32 ( to 116 )				    >> 82 FOR_ITER 38 ( to 118 )				  
							      84 STORE_FAST 4 ( i )					    84 STORE_FAST 4 ( i )					  
							      								    								  
							      8 86 LOAD_FAST 1 ( result )				    8 86 LOAD_FAST 1 ( result )					  
							      88 LOAD_FAST 3 ( count )					    88 LOAD_FAST 3 ( count )					  
							      90 LOAD_FAST 4 ( i )					    90 LOAD_FAST 4 ( i )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 LOAD_FAST 3 ( count )					    94 LOAD_FAST 3 ( count )					  
							      96 LOAD_FAST 4 ( i )					    96 LOAD_FAST 4 ( i )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_CONST 3 ( 1 )					    100 LOAD_CONST 3 ( 1 )					  
							      102 BINARY_ADD						    102 BINARY_ADD						  
							      104 BINARY_MULTIPLY					    104 BINARY_MULTIPLY						  
							      106 LOAD_CONST 4 ( 2 )					    106 LOAD_CONST 4 ( 2 )					  
							      108 BINARY_TRUE_DIVIDE					    108 BINARY_TRUE_DIVIDE					  
							      110 INPLACE_ADD						    110 INPLACE_ADD						  
							      112 STORE_FAST 1 ( result )				    112 STORE_FAST 1 ( result )					  
							      114 JUMP_ABSOLUTE 82					    114 JUMP_ABSOLUTE 82					  
							      >> 116 POP_BLOCK						    >> 116 POP_BLOCK						  
							      								    								  
							      9 >> 118 LOAD_FAST 1 ( result )				    9 >> 118 LOAD_FAST 1 ( result )				  
							      120 RETURN_VALUE NEW_LINE					    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_BRACKET_NUMBER					      PRINT_BRACKET_NUMBER					    PRINT_BRACKET_NUMBER					  PRINT_BRACKET_NUMBER
--							      --							    --								  --
def printBracketNumber ( exp , n ) :			      Disassembly of <code object printBracketNumber at 0x7f33e2649 Disassembly of <code object printBracketNumber at 0x7f2b01639 script_not_found : None
    left_bnum = 1					      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    right_bnum = list ( )				      2 STORE_FAST 2 ( left_bnum )				    2 STORE_FAST 2 ( left_bnum )				  
    for i in range ( n ) :				      								    								  
	if exp [ i ] == '(' :				      3 4 LOAD_GLOBAL 0 ( list )				    3 4 LOAD_GLOBAL 0 ( list )					  
	    print ( left_bnum , end = " " )		      6 CALL_FUNCTION 0						    6 CALL_FUNCTION 0						  
	    right_bnum.append ( left_bnum )		      8 STORE_FAST 3 ( right_bnum )				    8 STORE_FAST 3 ( right_bnum )				  
	    left_bnum += 1				      								    								  
	elif exp [ i ] == ')' :				      4 10 SETUP_LOOP 96 ( to 108 )				    4 10 SETUP_LOOP 96 ( to 110 )				  
	    print ( right_bnum [ - 1 ] , end = " " )	      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
	    right_bnum.pop ( )				      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 84 ( to 106 )				    >> 20 FOR_ITER 82 ( to 108 )				  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 LOAD_FAST 0 ( exp )					    5 24 LOAD_FAST 0 ( exp )					  
							      26 LOAD_FAST 4 ( i )					    26 LOAD_FAST 4 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 2 ( '(' )					    30 LOAD_CONST 2 ( '(' )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 68					    34 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      6 36 LOAD_GLOBAL 2 ( print )				    6 36 LOAD_GLOBAL 2 ( print )				  
							      38 LOAD_FAST 2 ( left_bnum )				    38 LOAD_FAST 2 ( left_bnum )				  
							      40 LOAD_CONST 3 ( ' ' )					    40 LOAD_CONST 3 ( ' ' )					  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    42 LOAD_CONST 4 ( ( 'end' , ) )				  
							      44 CALL_FUNCTION_KW 2					    44 CALL_FUNCTION_KW 2					  
							      46 POP_TOP						    46 POP_TOP							  
							      								    								  
							      7 48 LOAD_FAST 3 ( right_bnum )				    7 48 LOAD_FAST 3 ( right_bnum )				  
							      50 LOAD_METHOD 3 ( append )				    50 LOAD_METHOD 3 ( append )					  
							      52 LOAD_FAST 2 ( left_bnum )				    52 LOAD_FAST 2 ( left_bnum )				  
							      54 CALL_METHOD 1						    54 CALL_METHOD 1						  
							      56 POP_TOP						    56 POP_TOP							  
							      								    								  
							      8 58 LOAD_FAST 2 ( left_bnum )				    8 58 LOAD_FAST 2 ( left_bnum )				  
							      60 LOAD_CONST 1 ( 1 )					    60 LOAD_CONST 1 ( 1 )					  
							      62 INPLACE_ADD						    62 INPLACE_ADD						  
							      64 STORE_FAST 2 ( left_bnum )				    64 STORE_FAST 2 ( left_bnum )				  
							      66 JUMP_ABSOLUTE 20					    66 JUMP_ABSOLUTE 20						  
							      								    68 POP_BLOCK						  
							      9 >> 68 LOAD_FAST 0 ( exp )				    								  
							      70 LOAD_FAST 4 ( i )					    9 >> 70 LOAD_FAST 0 ( exp )					  
							      72 BINARY_SUBSCR						    72 LOAD_FAST 4 ( i )					  
							      74 LOAD_CONST 5 ( ')' )					    74 BINARY_SUBSCR						  
							      76 COMPARE_OP 2 ( == )					    76 LOAD_CONST 5 ( ')' )					  
							      78 POP_JUMP_IF_FALSE 20					    78 COMPARE_OP 2 ( == )					  
							      								    80 POP_JUMP_IF_FALSE 20					  
							      10 80 LOAD_GLOBAL 2 ( print )				    								  
							      82 LOAD_FAST 3 ( right_bnum )				    10 82 LOAD_GLOBAL 2 ( print )				  
							      84 LOAD_CONST 6 ( - 1 )					    84 LOAD_FAST 3 ( right_bnum )				  
							      86 BINARY_SUBSCR						    86 LOAD_CONST 6 ( - 1 )					  
							      88 LOAD_CONST 3 ( ' ' )					    88 BINARY_SUBSCR						  
							      90 LOAD_CONST 4 ( ( 'end' , ) )				    90 LOAD_CONST 3 ( ' ' )					  
							      92 CALL_FUNCTION_KW 2					    92 LOAD_CONST 4 ( ( 'end' , ) )				  
							      94 POP_TOP						    94 CALL_FUNCTION_KW 2					  
							      								    96 POP_TOP							  
							      11 96 LOAD_FAST 3 ( right_bnum )				    								  
							      98 LOAD_METHOD 4 ( pop )					    11 98 LOAD_FAST 3 ( right_bnum )				  
							      100 CALL_METHOD 0						    100 LOAD_METHOD 4 ( pop )					  
							      102 POP_TOP						    102 CALL_METHOD 0						  
							      104 JUMP_ABSOLUTE 20					    104 POP_TOP							  
							      >> 106 POP_BLOCK						    106 JUMP_ABSOLUTE 20					  
							      >> 108 LOAD_CONST 0 ( None )				    >> 108 POP_BLOCK						  
							      110 RETURN_VALUE NEW_LINE					    >> 110 LOAD_CONST 0 ( None )				  
							      								    112 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_CONSECUTIVE_SUBSEQUENCE				      LONGEST_CONSECUTIVE_SUBSEQUENCE				    LONGEST_CONSECUTIVE_SUBSEQUENCE				  LONGEST_CONSECUTIVE_SUBSEQUENCE
--							      --							    --								  --
def findLongestConseqSubseq ( arr , n ) :		      Disassembly of <code object findLongestConseqSubseq at 0x7f33 Disassembly of <code object findLongestConseqSubseq at 0x7f2b script_not_found : None
    s = Set ( )						      2 0 LOAD_GLOBAL 0 ( Set )					    2 0 LOAD_GLOBAL 0 ( Set )					  
    ans = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for ele in arr :					      4 STORE_FAST 2 ( s )					    4 STORE_FAST 2 ( s )					  
	s.add ( ele )					      								    								  
    for i in range ( n ) :				      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	if ( arr [ i ] - 1 ) not in s :			      8 STORE_FAST 3 ( ans )					    8 STORE_FAST 3 ( ans )					  
	    j = arr [ i ]				      								    								  
	    while ( j in s ) :				      4 10 SETUP_LOOP 22 ( to 34 )				    4 10 SETUP_LOOP 22 ( to 32 )				  
		j += 1					      12 LOAD_FAST 0 ( arr )					    12 LOAD_FAST 0 ( arr )					  
	    ans = max ( ans , j - arr [ i ] )		      14 GET_ITER						    14 GET_ITER							  
    return ans						      >> 16 FOR_ITER 14 ( to 32 )				    >> 16 FOR_ITER 14 ( to 30 )					  
							      18 STORE_FAST 4 ( ele )					    18 STORE_FAST 4 ( ele )					  
							      								    								  
							      5 20 LOAD_FAST 2 ( s )					    5 20 LOAD_FAST 2 ( s )					  
							      22 LOAD_METHOD 1 ( add )					    22 LOAD_METHOD 1 ( add )					  
							      24 LOAD_FAST 4 ( ele )					    24 LOAD_FAST 4 ( ele )					  
							      26 CALL_METHOD 1						    26 CALL_METHOD 1						  
							      28 POP_TOP						    28 POP_TOP							  
							      30 JUMP_ABSOLUTE 16					    >> 30 JUMP_ABSOLUTE 16					  
							      >> 32 POP_BLOCK						    >> 32 POP_BLOCK						  
							      								    								  
							      6 >> 34 SETUP_LOOP 80 ( to 116 )				    6 >> 34 SETUP_LOOP 68 ( to 108 )				  
							      36 LOAD_GLOBAL 2 ( range )				    36 LOAD_GLOBAL 2 ( range )					  
							      38 LOAD_FAST 1 ( n )					    38 LOAD_FAST 1 ( n )					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 68 ( to 114 )				    >> 44 FOR_ITER 52 ( to 106 )				  
							      46 STORE_FAST 5 ( i )					    46 STORE_FAST 5 ( i )					  
							      								    								  
							      7 48 LOAD_FAST 0 ( arr )					    7 48 LOAD_FAST 0 ( arr )					  
							      50 LOAD_FAST 5 ( i )					    50 LOAD_FAST 5 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_SUBTRACT					    56 BINARY_SUBTRACT						  
							      58 LOAD_FAST 2 ( s )					    58 LOAD_FAST 2 ( s )					  
							      60 COMPARE_OP 7 ( not in )				    60 COMPARE_OP 7 ( not in )					  
							      62 POP_JUMP_IF_FALSE 44					    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      8 64 LOAD_FAST 0 ( arr )					    8 64 LOAD_FAST 0 ( arr )					  
							      66 LOAD_FAST 5 ( i )					    66 LOAD_FAST 5 ( i )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 STORE_FAST 6 ( j )					    70 STORE_FAST 6 ( j )					  
							      								    								  
							      9 72 SETUP_LOOP 20 ( to 94 )				    9 72 SETUP_LOOP 26 ( to 104 )				  
							      >> 74 LOAD_FAST 6 ( j )					    >> 74 LOAD_FAST 6 ( j )					  
							      76 LOAD_FAST 2 ( s )					    76 LOAD_FAST 2 ( s )					  
							      78 COMPARE_OP 6 ( in )					    78 COMPARE_OP 6 ( in )					  
							      80 POP_JUMP_IF_FALSE 92					    80 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      10 82 LOAD_FAST 6 ( j )					    10 82 LOAD_FAST 6 ( j )					  
							      84 LOAD_CONST 2 ( 1 )					    84 LOAD_CONST 2 ( 1 )					  
							      86 INPLACE_ADD						    86 INPLACE_ADD						  
							      88 STORE_FAST 6 ( j )					    88 STORE_FAST 6 ( j )					  
							      90 JUMP_ABSOLUTE 74					    90 JUMP_ABSOLUTE 74						  
							      >> 92 POP_BLOCK						    >> 92 POP_BLOCK						  
							      								    								  
							      11 >> 94 LOAD_GLOBAL 3 ( max )				    11 >> 94 LOAD_GLOBAL 3 ( max )				  
							      96 LOAD_FAST 3 ( ans )					    96 LOAD_FAST 3 ( ans )					  
							      98 LOAD_FAST 6 ( j )					    98 LOAD_FAST 6 ( j )					  
							      100 LOAD_FAST 0 ( arr )					    100 LOAD_FAST 0 ( arr )					  
							      102 LOAD_FAST 5 ( i )					    102 LOAD_FAST 5 ( i )					  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 BINARY_SUBTRACT					    106 BINARY_SUBTRACT						  
							      108 CALL_FUNCTION 2					    108 CALL_FUNCTION 2						  
							      110 STORE_FAST 3 ( ans )					    110 STORE_FAST 3 ( ans )					  
							      112 JUMP_ABSOLUTE 44					    112 JUMP_ABSOLUTE 44					  
							      >> 114 POP_BLOCK						    >> 114 POP_BLOCK						  
							      								    								  
							      12 >> 116 LOAD_FAST 3 ( ans )				    12 >> 116 LOAD_FAST 3 ( ans )				  
							      118 RETURN_VALUE NEW_LINE					    118 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1      PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	    PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	  PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1
--							      --							    --								  --
def isPrime ( n ) :					      Disassembly of <code object isPrime at 0x7f33e2653ed0, file " Disassembly of <code object isPrime at 0x7f2b01639f60, file " script_not_found : None
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n <= 3 ) :					      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
	return True					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    if ( n % 2 == 0 or n % 3 == 0 ) :			      								    								  
	return False					      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
    i = 5						      10 RETURN_VALUE						    10 RETURN_VALUE						  
    while ( i * i <= n ) :				      								    								  
	if ( n % i == 0 or n % ( i + 2 ) == 0 ) :	      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
	    return False				      14 LOAD_CONST 3 ( 3 )					    14 LOAD_CONST 3 ( 3 )					  
	i = i + 6					      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
    return True						      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 4 ( True )				    5 20 LOAD_CONST 4 ( True )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_FAST 0 ( n )					    6 >> 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 5 ( 2 )					    26 LOAD_CONST 5 ( 2 )					  
							      28 BINARY_MODULO						    28 BINARY_MODULO						  
							      30 LOAD_CONST 6 ( 0 )					    30 LOAD_CONST 6 ( 0 )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_TRUE 48					    34 POP_JUMP_IF_TRUE 48					  
							      36 LOAD_FAST 0 ( n )					    36 LOAD_FAST 0 ( n )					  
							      38 LOAD_CONST 3 ( 3 )					    38 LOAD_CONST 3 ( 3 )					  
							      40 BINARY_MODULO						    40 BINARY_MODULO						  
							      42 LOAD_CONST 6 ( 0 )					    42 LOAD_CONST 6 ( 0 )					  
							      44 COMPARE_OP 2 ( == )					    44 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 52					    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 >> 48 LOAD_CONST 2 ( False )				    7 >> 48 LOAD_CONST 2 ( False )				  
							      50 RETURN_VALUE						    50 RETURN_VALUE						  
							      								    								  
							      8 >> 52 LOAD_CONST 7 ( 5 )				    8 >> 52 LOAD_CONST 7 ( 5 )					  
							      54 STORE_FAST 1 ( i )					    54 STORE_FAST 1 ( i )					  
							      								    								  
							      9 56 SETUP_LOOP 56 ( to 114 )				    9 56 SETUP_LOOP 52 ( to 112 )				  
							      >> 58 LOAD_FAST 1 ( i )					    >> 58 LOAD_FAST 1 ( i )					  
							      60 LOAD_FAST 1 ( i )					    60 LOAD_FAST 1 ( i )					  
							      62 BINARY_MULTIPLY					    62 BINARY_MULTIPLY						  
							      64 LOAD_FAST 0 ( n )					    64 LOAD_FAST 0 ( n )					  
							      66 COMPARE_OP 1 ( <= )					    66 COMPARE_OP 1 ( <= )					  
							      68 POP_JUMP_IF_FALSE 112					    68 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      10 70 LOAD_FAST 0 ( n )					    10 70 LOAD_FAST 0 ( n )					  
							      72 LOAD_FAST 1 ( i )					    72 LOAD_FAST 1 ( i )					  
							      74 BINARY_MODULO						    74 BINARY_MODULO						  
							      76 LOAD_CONST 6 ( 0 )					    76 LOAD_CONST 6 ( 0 )					  
							      78 COMPARE_OP 2 ( == )					    78 COMPARE_OP 2 ( == )					  
							      80 POP_JUMP_IF_TRUE 98					    80 POP_JUMP_IF_TRUE 92					  
							      82 LOAD_FAST 0 ( n )					    82 LOAD_FAST 0 ( n )					  
							      84 LOAD_FAST 1 ( i )					    84 LOAD_FAST 1 ( i )					  
							      86 LOAD_CONST 5 ( 2 )					    86 LOAD_CONST 5 ( 2 )					  
							      88 BINARY_ADD						    88 BINARY_ADD						  
							      90 BINARY_MODULO						    90 BINARY_MODULO						  
							      92 LOAD_CONST 6 ( 0 )					    92 LOAD_CONST 6 ( 0 )					  
							      94 COMPARE_OP 2 ( == )					    94 COMPARE_OP 2 ( == )					  
							      96 POP_JUMP_IF_FALSE 102					    96 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      11 >> 98 LOAD_CONST 2 ( False )				    11 98 LOAD_CONST 2 ( False )				  
							      100 RETURN_VALUE						    100 RETURN_VALUE						  
							      								    								  
							      12 >> 102 LOAD_FAST 1 ( i )				    12 >> 102 LOAD_FAST 1 ( i )					  
							      104 LOAD_CONST 8 ( 6 )					    104 LOAD_CONST 8 ( 6 )					  
							      106 BINARY_ADD						    106 BINARY_ADD						  
							      108 STORE_FAST 1 ( i )					    108 STORE_FAST 1 ( i )					  
							      110 JUMP_ABSOLUTE 58					    								  
							      >> 112 POP_BLOCK						    13 >> 110 LOAD_CONST 4 ( True )				  
							      								    112 RETURN_VALUE NEW_LINE					  
							      13 >> 114 LOAD_CONST 4 ( True )				    								  
							      116 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1
--							      --							    --								  --
def printDistinct ( arr , n ) :				      Disassembly of <code object printDistinct at 0x7f33e26494b0,  Disassembly of <code object printDistinct at 0x7f2b0164d660,  script_not_found : None
    arr.sort ( ) ;					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    for i in range ( n ) :				      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
	if ( i < n - 1 and arr [ i ] == arr [ i + 1 ] ) :     4 CALL_METHOD 0						    4 CALL_METHOD 0						  
	    while ( i < n - 1 and ( arr [ i ] == arr [ i + 1  6 POP_TOP							    6 POP_TOP							  
		i += 1 ;				      								    								  
	else :						      3 8 SETUP_LOOP 112 ( to 122 )				    3 8 SETUP_LOOP 112 ( to 120 )				  
	    print ( arr [ i ] , end = " " ) ;		      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 100 ( to 120 )				    >> 18 FOR_ITER 98 ( to 118 )				  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 2 ( i )					    4 22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 COMPARE_OP 0 ( < )					    30 COMPARE_OP 0 ( < )					  
							      32 POP_JUMP_IF_FALSE 102					    32 POP_JUMP_IF_FALSE 18					  
							      34 LOAD_FAST 0 ( arr )					    34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 2 ( i )					    36 LOAD_FAST 2 ( i )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 1 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_FALSE 102					    52 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      5 54 SETUP_LOOP 62 ( to 118 )				    5 54 SETUP_LOOP 56 ( to 116 )				  
							      >> 56 LOAD_FAST 2 ( i )					    >> 56 LOAD_FAST 2 ( i )					  
							      58 LOAD_FAST 1 ( n )					    58 LOAD_FAST 1 ( n )					  
							      60 LOAD_CONST 1 ( 1 )					    60 COMPARE_OP 0 ( < )					  
							      62 BINARY_SUBTRACT					    62 POP_JUMP_IF_FALSE 108					  
							      64 COMPARE_OP 0 ( < )					    64 LOAD_FAST 0 ( arr )					  
							      66 POP_JUMP_IF_FALSE 98					    66 LOAD_FAST 2 ( i )					  
							      68 LOAD_FAST 0 ( arr )					    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 2 ( i )					    70 LOAD_FAST 0 ( arr )					  
							      72 BINARY_SUBSCR						    72 LOAD_FAST 2 ( i )					  
							      74 LOAD_FAST 0 ( arr )					    74 LOAD_CONST 1 ( 1 )					  
							      76 LOAD_FAST 2 ( i )					    76 BINARY_ADD						  
							      78 LOAD_CONST 1 ( 1 )					    78 BINARY_SUBSCR						  
							      80 BINARY_ADD						    80 COMPARE_OP 2 ( == )					  
							      82 BINARY_SUBSCR						    82 POP_JUMP_IF_FALSE 108					  
							      84 COMPARE_OP 2 ( == )					    								  
							      86 POP_JUMP_IF_FALSE 98					    6 84 LOAD_FAST 2 ( i )					  
							      								    86 LOAD_CONST 1 ( 1 )					  
							      6 88 LOAD_FAST 2 ( i )					    88 INPLACE_ADD						  
							      90 LOAD_CONST 1 ( 1 )					    90 STORE_FAST 2 ( i )					  
							      92 INPLACE_ADD						    92 JUMP_ABSOLUTE 56						  
							      94 STORE_FAST 2 ( i )					    >> 94 POP_BLOCK						  
							      96 JUMP_ABSOLUTE 56					    								  
							      >> 98 POP_BLOCK						    8 >> 96 LOAD_GLOBAL 2 ( print )				  
							      100 JUMP_ABSOLUTE 18					    98 LOAD_FAST 0 ( arr )					  
							      								    100 LOAD_FAST 2 ( i )					  
							      8 >> 102 LOAD_GLOBAL 2 ( print )				    102 BINARY_SUBSCR						  
							      104 LOAD_FAST 0 ( arr )					    104 LOAD_CONST 2 ( ' ' )					  
							      106 LOAD_FAST 2 ( i )					    106 LOAD_CONST 3 ( ( 'end' , ) )				  
							      108 BINARY_SUBSCR						    108 CALL_FUNCTION_KW 2					  
							      110 LOAD_CONST 2 ( ' ' )					    110 POP_TOP							  
							      112 LOAD_CONST 3 ( ( 'end' , ) )				    112 JUMP_ABSOLUTE 18					  
							      114 CALL_FUNCTION_KW 2					    >> 114 POP_BLOCK						  
							      116 POP_TOP						    >> 116 LOAD_CONST 0 ( None )				  
							      >> 118 JUMP_ABSOLUTE 18					    118 RETURN_VALUE NEW_LINE					  
							      >> 120 POP_BLOCK						    								  
							      >> 122 LOAD_CONST 0 ( None )				    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY		      FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			    FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			  FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY
--							      --							    --								  --
def findSubarraySum ( arr , n ) :			      Disassembly of <code object findSubarraySum at 0x7f33e2644f60 Disassembly of <code object findSubarraySum at 0x7f2b0163dc90 error : /bin/bash: line 1:  4667 Segmentation faul
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    m = dict ( )					      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( n ) :				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	Sum = 0						      3 4 LOAD_GLOBAL 0 ( dict )				    3 4 LOAD_GLOBAL 0 ( dict )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_S
	for j in range ( i , n ) :			      6 CALL_FUNCTION 0						    6 CALL_FUNCTION 0						  UM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY.dis
	    Sum += arr [ j ]				      8 STORE_FAST 3 ( m )					    8 STORE_FAST 3 ( m )					  
	    m [ Sum ] = m.get ( Sum , 0 ) + 1		      								    								  
    for x in m :					      4 10 SETUP_LOOP 72 ( to 84 )				    4 10 SETUP_LOOP 80 ( to 90 )				  
	if m [ x ] == 1 :				      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
	    res += x					      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
    return res						      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 60 ( to 82 )				    >> 20 FOR_ITER 72 ( to 88 )					  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 LOAD_CONST 1 ( 0 )					    5 24 LOAD_CONST 1 ( 0 )					  
							      26 STORE_FAST 5 ( Sum )					    26 STORE_FAST 5 ( Sum )					  
							      								    								  
							      6 28 SETUP_LOOP 50 ( to 80 )				    6 28 SETUP_LOOP 46 ( to 86 )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 36 ( to 78 )				    >> 40 FOR_ITER 30 ( to 84 )					  
							      42 STORE_FAST 6 ( j )					    42 STORE_FAST 6 ( j )					  
							      								    								  
							      7 44 LOAD_FAST 5 ( Sum )					    7 44 LOAD_FAST 5 ( Sum )					  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 6 ( j )					    48 LOAD_FAST 6 ( j )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 INPLACE_ADD						    52 INPLACE_ADD						  
							      54 STORE_FAST 5 ( Sum )					    54 STORE_FAST 5 ( Sum )					  
							      								    								  
							      8 56 LOAD_FAST 3 ( m )					    8 56 LOAD_FAST 3 ( m )					  
							      58 LOAD_METHOD 2 ( get )					    58 LOAD_METHOD 2 ( get )					  
							      60 LOAD_FAST 5 ( Sum )					    60 LOAD_FAST 5 ( Sum )					  
							      62 LOAD_CONST 1 ( 0 )					    62 LOAD_CONST 1 ( 0 )					  
							      64 CALL_METHOD 2						    64 CALL_METHOD 2						  
							      66 LOAD_CONST 2 ( 1 )					    66 LOAD_CONST 2 ( 1 )					  
							      68 BINARY_ADD						    68 BINARY_ADD						  
							      70 LOAD_FAST 3 ( m )					    70 LOAD_FAST 3 ( m )					  
							      72 LOAD_FAST 5 ( Sum )					    72 LOAD_FAST 5 ( Sum )					  
							      74 STORE_SUBSCR						    74 STORE_SUBSCR						  
							      76 JUMP_ABSOLUTE 40					    76 JUMP_ABSOLUTE 40						  
							      >> 78 POP_BLOCK						    >> 78 POP_BLOCK						  
							      >> 80 JUMP_ABSOLUTE 20					    >> 80 JUMP_ABSOLUTE 20					  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      9 >> 84 SETUP_LOOP 32 ( to 118 )				    9 >> 84 SETUP_LOOP 46 ( to 124 )				  
							      86 LOAD_FAST 3 ( m )					    86 LOAD_FAST 3 ( m )					  
							      88 GET_ITER						    88 GET_ITER							  
							      >> 90 FOR_ITER 24 ( to 116 )				    >> 90 FOR_ITER 38 ( to 122 )				  
							      92 STORE_FAST 7 ( x )					    92 STORE_FAST 7 ( x )					  
							      								    								  
							      10 94 LOAD_FAST 3 ( m )					    10 94 LOAD_FAST 3 ( m )					  
							      96 LOAD_FAST 7 ( x )					    96 LOAD_FAST 7 ( x )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_CONST 2 ( 1 )					    100 LOAD_CONST 2 ( 1 )					  
							      102 COMPARE_OP 2 ( == )					    102 COMPARE_OP 2 ( == )					  
							      104 POP_JUMP_IF_FALSE 90					    104 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      11 106 LOAD_FAST 2 ( res )				    11 106 LOAD_FAST 2 ( res )					  
							      108 LOAD_FAST 7 ( x )					    108 LOAD_FAST 7 ( x )					  
							      110 INPLACE_ADD						    110 INPLACE_ADD						  
							      112 STORE_FAST 2 ( res )					    112 STORE_FAST 2 ( res )					  
							      114 JUMP_ABSOLUTE 90					    114 JUMP_ABSOLUTE 90					  
							      >> 116 POP_BLOCK						    >> 116 POP_BLOCK						  
							      								    >> 118 JUMP_ABSOLUTE 20					  
							      12 >> 118 LOAD_FAST 2 ( res )				    >> 120 POP_BLOCK						  
							      120 RETURN_VALUE NEW_LINE					    								  
							      								    12 >> 122 LOAD_FAST 2 ( res )				  
							      								    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_PRIME_FACTOR_NUMBER			      FIND_LARGEST_PRIME_FACTOR_NUMBER				    FIND_LARGEST_PRIME_FACTOR_NUMBER				  FIND_LARGEST_PRIME_FACTOR_NUMBER
--							      --							    --								  --
def maxPrimeFactors ( n ) :				      Disassembly of <code object maxPrimeFactors at 0x7f33e26494b0 Disassembly of <code object maxPrimeFactors at 0x7f2b0163dc90 timeout : None
    maxPrime = - 1					      2 0 LOAD_CONST 1 ( - 1 )					    2 0 LOAD_CONST 1 ( - 1 )					  
    while n % 2 == 0 :					      2 STORE_FAST 1 ( maxPrime )				    2 STORE_FAST 1 ( maxPrime )					  
	maxPrime = 2					      								    								  
	n >>= 1						      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 SETUP_LOOP 26 ( to 32 )					  
    for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :  >> 6 LOAD_FAST 0 ( n )					    >> 6 LOAD_FAST 0 ( n )					  
	while n % i == 0 :				      8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 2 )					  
	    maxPrime = i				      10 BINARY_MODULO						    10 BINARY_MODULO						  
	    n = n / i					      12 LOAD_CONST 3 ( 0 )					    12 LOAD_CONST 3 ( 0 )					  
    if n > 2 :						      14 COMPARE_OP 2 ( == )					    14 COMPARE_OP 2 ( == )					  
	maxPrime = n					      16 POP_JUMP_IF_FALSE 32					    16 POP_JUMP_IF_FALSE 30					  
    return int ( maxPrime )				      								    								  
							      4 18 LOAD_CONST 2 ( 2 )					    4 18 LOAD_CONST 2 ( 2 )					  
							      20 STORE_FAST 1 ( maxPrime )				    20 STORE_FAST 1 ( maxPrime )				  
							      								    								  
							      5 22 LOAD_FAST 0 ( n )					    5 22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 4 ( 1 )					    24 LOAD_CONST 4 ( 1 )					  
							      26 INPLACE_RSHIFT						    26 INPLACE_RSHIFT						  
							      28 STORE_FAST 0 ( n )					    28 STORE_FAST 0 ( n )					  
							      30 JUMP_ABSOLUTE 6					    								  
							      >> 32 POP_BLOCK						    6 >> 30 SETUP_LOOP 48 ( to 84 )				  
							      								    >> 32 LOAD_GLOBAL 0 ( range )				  
							      6 >> 34 SETUP_LOOP 64 ( to 100 )				    34 LOAD_CONST 5 ( 3 )					  
							      36 LOAD_GLOBAL 0 ( range )				    36 LOAD_GLOBAL 1 ( int )					  
							      38 LOAD_CONST 5 ( 3 )					    38 LOAD_GLOBAL 2 ( math )					  
							      40 LOAD_GLOBAL 1 ( int )					    40 LOAD_METHOD 3 ( sqrt )					  
							      42 LOAD_GLOBAL 2 ( math )					    42 LOAD_FAST 0 ( n )					  
							      44 LOAD_METHOD 3 ( sqrt )					    44 CALL_METHOD 1						  
							      46 LOAD_FAST 0 ( n )					    46 CALL_FUNCTION 1						  
							      48 CALL_METHOD 1						    48 LOAD_CONST 4 ( 1 )					  
							      50 CALL_FUNCTION 1					    50 BINARY_ADD						  
							      52 LOAD_CONST 4 ( 1 )					    52 LOAD_CONST 2 ( 2 )					  
							      54 BINARY_ADD						    54 CALL_FUNCTION 3						  
							      56 LOAD_CONST 2 ( 2 )					    56 GET_ITER							  
							      58 CALL_FUNCTION 3					    >> 58 FOR_ITER 28 ( to 82 )					  
							      60 GET_ITER						    60 STORE_FAST 2 ( i )					  
							      >> 62 FOR_ITER 34 ( to 98 )				    								  
							      64 STORE_FAST 2 ( i )					    7 62 SETUP_LOOP 24 ( to 80 )				  
							      								    >> 64 LOAD_FAST 0 ( n )					  
							      7 66 SETUP_LOOP 28 ( to 96 )				    66 LOAD_FAST 2 ( i )					  
							      >> 68 LOAD_FAST 0 ( n )					    68 BINARY_MODULO						  
							      70 LOAD_FAST 2 ( i )					    70 LOAD_CONST 3 ( 0 )					  
							      72 BINARY_MODULO						    72 COMPARE_OP 2 ( == )					  
							      74 LOAD_CONST 3 ( 0 )					    74 POP_JUMP_IF_FALSE 78					  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 94					    8 76 LOAD_FAST 2 ( i )					  
							      								    78 STORE_FAST 1 ( maxPrime )				  
							      8 80 LOAD_FAST 2 ( i )					    								  
							      82 STORE_FAST 1 ( maxPrime )				    9 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_FAST 2 ( i )					  
							      9 84 LOAD_FAST 0 ( n )					    84 BINARY_TRUE_DIVIDE					  
							      86 LOAD_FAST 2 ( i )					    86 STORE_FAST 0 ( n )					  
							      88 BINARY_TRUE_DIVIDE					    88 JUMP_ABSOLUTE 64						  
							      90 STORE_FAST 0 ( n )					    >> 90 POP_BLOCK						  
							      92 JUMP_ABSOLUTE 68					    >> 92 JUMP_ABSOLUTE 6					  
							      >> 94 POP_BLOCK						    >> 94 POP_BLOCK						  
							      >> 96 JUMP_ABSOLUTE 62					    								  
							      >> 98 POP_BLOCK						    10 >> 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 2 ( 2 )					  
							      10 >> 100 LOAD_FAST 0 ( n )				    100 COMPARE_OP 4 ( > )					  
							      102 LOAD_CONST 2 ( 2 )					    102 POP_JUMP_IF_FALSE 108					  
							      104 COMPARE_OP 4 ( > )					    								  
							      106 POP_JUMP_IF_FALSE 112					    11 104 LOAD_FAST 0 ( n )					  
							      								    106 STORE_FAST 1 ( maxPrime )				  
							      11 108 LOAD_FAST 0 ( n )					    								  
							      110 STORE_FAST 1 ( maxPrime )				    12 >> 108 LOAD_GLOBAL 1 ( int )				  
							      								    110 LOAD_FAST 1 ( maxPrime )				  
							      12 >> 112 LOAD_GLOBAL 1 ( int )				    112 CALL_FUNCTION 1						  
							      114 LOAD_FAST 1 ( maxPrime )				    114 RETURN_VALUE NEW_LINE					  
							      116 CALL_FUNCTION 1					    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		    SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		  SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
def search ( mat , n , x ) :				      Disassembly of <code object search at 0x7f33e2653ed0, file "< Disassembly of <code object search at 0x7f2b0163dc90, file "< error : /bin/bash: line 1:  4690 Segmentation faul
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    j = n - 1						      2 STORE_FAST 3 ( i )					    2 STORE_FAST 3 ( i )					  ataset/bin/python XLM/dis_script.py --script_path
    while ( i < n and j >= 0 ) :			      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	if ( mat [ i ] [ j ] == x ) :			      3 4 LOAD_FAST 1 ( n )					    3 4 LOAD_FAST 1 ( n )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/SEARCH
	    print ( "n Found at " , i , ", " , j )	      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  _IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX.dis
	    return 1					      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
	if ( mat [ i ] [ j ] > x ) :			      10 STORE_FAST 4 ( j )					    10 STORE_FAST 4 ( j )					  
	    j -= 1					      								    								  
	else :						      4 12 SETUP_LOOP 88 ( to 102 )				    4 12 SETUP_LOOP 48 ( to 60 )				  
	    i += 1					      >> 14 LOAD_FAST 3 ( i )					    >> 14 LOAD_FAST 3 ( i )					  
    print ( "Element not found" )			      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
    return 0						      18 COMPARE_OP 0 ( < )					    18 COMPARE_OP 0 ( < )					  
							      20 POP_JUMP_IF_FALSE 100					    20 POP_JUMP_IF_FALSE 58					  
							      22 LOAD_FAST 4 ( j )					    22 LOAD_FAST 4 ( j )					  
							      24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 1 ( 0 )					  
							      26 COMPARE_OP 5 ( >= )					    26 COMPARE_OP 5 ( >= )					  
							      28 POP_JUMP_IF_FALSE 100					    28 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      5 30 LOAD_FAST 0 ( mat )					    5 30 LOAD_FAST 0 ( mat )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 4 ( j )					    36 LOAD_FAST 4 ( j )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 2 ( x )					    40 LOAD_FAST 2 ( x )					  
							      42 COMPARE_OP 2 ( == )					    42 COMPARE_OP 2 ( == )					  
							      44 POP_JUMP_IF_FALSE 64					    44 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      6 46 LOAD_GLOBAL 0 ( print )				    6 46 LOAD_GLOBAL 0 ( print )				  
							      48 LOAD_CONST 3 ( 'n Found at ' )				    48 LOAD_CONST 3 ( 'n Found at ' )				  
							      50 LOAD_FAST 3 ( i )					    50 LOAD_FAST 3 ( i )					  
							      52 LOAD_CONST 4 ( ', ' )					    52 LOAD_CONST 4 ( ', ' )					  
							      54 LOAD_FAST 4 ( j )					    54 LOAD_FAST 4 ( j )					  
							      56 CALL_FUNCTION 4					    56 CALL_FUNCTION 5						  
							      58 POP_TOP						    58 POP_TOP							  
							      								    								  
							      7 60 LOAD_CONST 2 ( 1 )					    7 60 LOAD_CONST 2 ( 1 )					  
							      62 RETURN_VALUE						    62 RETURN_VALUE						  
							      								    								  
							      8 >> 64 LOAD_FAST 0 ( mat )				    8 >> 64 LOAD_FAST 0 ( mat )					  
							      66 LOAD_FAST 3 ( i )					    66 LOAD_FAST 3 ( i )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 4 ( j )					    70 LOAD_FAST 4 ( j )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_FAST 2 ( x )					    74 LOAD_FAST 2 ( x )					  
							      76 COMPARE_OP 4 ( > )					    76 COMPARE_OP 4 ( > )					  
							      78 POP_JUMP_IF_FALSE 90					    78 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      9 80 LOAD_FAST 4 ( j )					    9 80 LOAD_FAST 4 ( j )					  
							      82 LOAD_CONST 2 ( 1 )					    82 LOAD_CONST 2 ( 1 )					  
							      84 INPLACE_SUBTRACT					    84 INPLACE_SUBTRACT						  
							      86 STORE_FAST 4 ( j )					    86 STORE_FAST 4 ( j )					  
							      88 JUMP_ABSOLUTE 14					    88 JUMP_ABSOLUTE 14						  
							      								    								  
							      11 >> 90 LOAD_FAST 3 ( i )				    11 >> 90 LOAD_FAST 3 ( i )					  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_CONST 2 ( 1 )					  
							      94 INPLACE_ADD						    94 INPLACE_ADD						  
							      96 STORE_FAST 3 ( i )					    96 STORE_FAST 3 ( i )					  
							      98 JUMP_ABSOLUTE 14					    100 JUMP_ABSOLUTE 14					  
							      >> 100 POP_BLOCK						    >> 102 POP_BLOCK						  
							      								    								  
							      12 >> 102 LOAD_GLOBAL 0 ( print )				    12 >> 104 LOAD_GLOBAL 0 ( print )				  
							      104 LOAD_CONST 5 ( 'Element not found' )			    106 LOAD_CONST 5 ( 'Element not found' )			  
							      106 CALL_FUNCTION 1					    108 CALL_FUNCTION 1						  
							      108 POP_TOP						    110 POP_TOP							  
							      								    								  
							      13 110 LOAD_CONST 1 ( 0 )					    13 112 LOAD_CONST 1 ( 0 )					  
							      112 RETURN_VALUE NEW_LINE					    114 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	      SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	    SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M		  SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M
--							      --							    --								  --
def coutSubSeq ( A , N , M ) :				      Disassembly of <code object coutSubSeq at 0x7f33e2649a50, fil Disassembly of <code object coutSubSeq at 0x7f2b0163dc90, fil script_not_found : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    ans = 0						      2 STORE_FAST 3 ( sum )					    2 STORE_FAST 3 ( sum )					  
    for i in range ( 0 , N ) :				      								    								  
	for j in range ( i + 1 , N ) :			      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	    for k in range ( j + 1 , N ) :		      6 STORE_FAST 4 ( ans )					    6 STORE_FAST 4 ( ans )					  
		sum = A [ i ] + A [ j ] + A [ k ]	      								    								  
		if ( sum % M == 0 ) :			      4 8 SETUP_LOOP 110 ( to 120 )				    4 8 SETUP_LOOP 112 ( to 126 )				  
		    ans = ans + 1			      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
    return ans						      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
							      14 LOAD_FAST 1 ( N )					    14 LOAD_FAST 1 ( N )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 96 ( to 118 )				    >> 20 FOR_ITER 104 ( to 124 )				  
							      22 STORE_FAST 5 ( i )					    22 STORE_FAST 5 ( i )					  
							      								    								  
							      5 24 SETUP_LOOP 90 ( to 116 )				    5 24 SETUP_LOOP 88 ( to 122 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_FAST 5 ( i )					    28 LOAD_FAST 5 ( i )					  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 LOAD_FAST 1 ( N )					    34 LOAD_FAST 1 ( N )					  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 72 ( to 114 )				    >> 40 FOR_ITER 80 ( to 120 )				  
							      42 STORE_FAST 6 ( j )					    42 STORE_FAST 6 ( j )					  
							      								    								  
							      6 44 SETUP_LOOP 66 ( to 112 )				    6 44 SETUP_LOOP 68 ( to 118 )				  
							      46 LOAD_GLOBAL 0 ( range )				    46 LOAD_GLOBAL 0 ( range )					  
							      48 LOAD_FAST 6 ( j )					    48 LOAD_FAST 6 ( j )					  
							      50 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 LOAD_FAST 1 ( N )					    54 LOAD_FAST 1 ( N )					  
							      56 CALL_FUNCTION 2					    56 CALL_FUNCTION 2						  
							      58 GET_ITER						    58 GET_ITER							  
							      >> 60 FOR_ITER 48 ( to 110 )				    >> 60 FOR_ITER 52 ( to 116 )				  
							      62 STORE_FAST 7 ( k )					    62 STORE_FAST 7 ( k )					  
							      								    								  
							      7 64 LOAD_FAST 0 ( A )					    7 64 LOAD_FAST 0 ( A )					  
							      66 LOAD_FAST 5 ( i )					    66 LOAD_FAST 5 ( i )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 0 ( A )					    70 LOAD_FAST 0 ( A )					  
							      72 LOAD_FAST 6 ( j )					    72 LOAD_FAST 6 ( j )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 0 ( A )					    78 LOAD_FAST 0 ( A )					  
							      80 LOAD_FAST 7 ( k )					    80 LOAD_FAST 7 ( k )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 BINARY_ADD						    84 BINARY_ADD						  
							      86 STORE_FAST 3 ( sum )					    86 STORE_FAST 3 ( sum )					  
							      								    								  
							      8 88 LOAD_FAST 3 ( sum )					    8 88 LOAD_FAST 3 ( sum )					  
							      90 LOAD_FAST 2 ( M )					    90 LOAD_FAST 2 ( M )					  
							      92 BINARY_MODULO						    92 BINARY_MODULO						  
							      94 LOAD_CONST 1 ( 0 )					    94 LOAD_CONST 1 ( 0 )					  
							      96 COMPARE_OP 2 ( == )					    96 COMPARE_OP 2 ( == )					  
							      98 POP_JUMP_IF_FALSE 60					    98 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      9 100 LOAD_FAST 4 ( ans )					    9 100 LOAD_FAST 4 ( ans )					  
							      102 LOAD_CONST 2 ( 1 )					    102 LOAD_CONST 2 ( 1 )					  
							      104 BINARY_ADD						    104 BINARY_ADD						  
							      106 STORE_FAST 4 ( ans )					    106 STORE_FAST 4 ( ans )					  
							      108 JUMP_ABSOLUTE 60					    108 JUMP_ABSOLUTE 60					  
							      >> 110 POP_BLOCK						    110 POP_BLOCK						  
							      >> 112 JUMP_ABSOLUTE 40					    >> 112 JUMP_ABSOLUTE 60					  
							      >> 114 POP_BLOCK						    >> 114 POP_BLOCK						  
							      >> 116 JUMP_ABSOLUTE 20					    >> 116 JUMP_ABSOLUTE 20					  
							      >> 118 POP_BLOCK						    >> 118 POP_BLOCK						  
							      								    								  
							      10 >> 120 LOAD_FAST 4 ( ans )				    10 >> 120 LOAD_FAST 4 ( ans )				  
							      122 RETURN_VALUE NEW_LINE					    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		      CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		    CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		  CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE
--							      --							    --								  --
def convertOpposite ( str ) :				      Disassembly of <code object convertOpposite at 0x7f33e2644930 Disassembly of <code object convertOpposite at 0x7f2b0164d810 script_not_found : None
    ln = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for i in range ( ln ) :				      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
	if str [ i ] >= 'a' and str [ i ] <= 'z' :	      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    str [ i ] = chr ( ord ( str [ i ] ) - 32 )	      6 STORE_FAST 1 ( ln )					    6 STORE_FAST 1 ( ln )					  
	elif str [ i ] >= 'A' and str [ i ] <= 'Z' :	      								    								  
	    str [ i ] = chr ( ord ( str [ i ] ) + 32 )	      3 8 SETUP_LOOP 114 ( to 124 )				    3 8 SETUP_LOOP 120 ( to 126 )				  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( ln )					    12 LOAD_FAST 1 ( ln )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 102 ( to 122 )				    >> 18 FOR_ITER 106 ( to 124 )				  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( str )					    4 22 LOAD_FAST 0 ( str )					  
							      24 LOAD_FAST 2 ( i )					    24 LOAD_FAST 2 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_CONST 1 ( 'a' )					    28 LOAD_CONST 1 ( 'a' )					  
							      30 COMPARE_OP 5 ( >= )					    30 COMPARE_OP 5 ( >= )					  
							      32 POP_JUMP_IF_FALSE 72					    32 POP_JUMP_IF_FALSE 60					  
							      34 LOAD_FAST 0 ( str )					    34 LOAD_FAST 0 ( str )					  
							      36 LOAD_FAST 2 ( i )					    36 LOAD_FAST 2 ( i )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_CONST 2 ( 'z' )					    40 LOAD_CONST 2 ( 'z' )					  
							      42 COMPARE_OP 1 ( <= )					    42 COMPARE_OP 1 ( <= )					  
							      44 POP_JUMP_IF_FALSE 72					    44 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      5 46 LOAD_GLOBAL 2 ( chr )				    5 46 LOAD_GLOBAL 2 ( chr )					  
							      48 LOAD_GLOBAL 3 ( ord )					    48 LOAD_GLOBAL 3 ( ord )					  
							      50 LOAD_FAST 0 ( str )					    50 LOAD_FAST 0 ( str )					  
							      52 LOAD_FAST 2 ( i )					    52 LOAD_FAST 2 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 CALL_FUNCTION 1					    56 CALL_FUNCTION 1						  
							      58 LOAD_CONST 3 ( 32 )					    58 LOAD_CONST 3 ( 32 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 LOAD_FAST 0 ( str )					    64 LOAD_FAST 0 ( str )					  
							      66 LOAD_FAST 2 ( i )					    66 LOAD_FAST 2 ( i )					  
							      68 STORE_SUBSCR						    68 STORE_SUBSCR						  
							      70 JUMP_ABSOLUTE 18					    70 JUMP_ABSOLUTE 18						  
							      								    								  
							      6 >> 72 LOAD_FAST 0 ( str )				    6 >> 72 LOAD_FAST 0 ( str )					  
							      74 LOAD_FAST 2 ( i )					    74 LOAD_FAST 2 ( i )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 LOAD_CONST 4 ( 'A' )					    78 LOAD_CONST 4 ( 'A' )					  
							      80 COMPARE_OP 5 ( >= )					    80 COMPARE_OP 5 ( >= )					  
							      82 POP_JUMP_IF_FALSE 18					    82 POP_JUMP_IF_FALSE 18					  
							      84 LOAD_FAST 0 ( str )					    84 LOAD_FAST 0 ( str )					  
							      86 LOAD_FAST 2 ( i )					    86 LOAD_FAST 2 ( i )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 LOAD_CONST 5 ( 'Z' )					    90 LOAD_CONST 2 ( 'Z' )					  
							      92 COMPARE_OP 1 ( <= )					    92 COMPARE_OP 1 ( <= )					  
							      94 POP_JUMP_IF_FALSE 18					    94 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      7 96 LOAD_GLOBAL 2 ( chr )				    7 96 LOAD_GLOBAL 2 ( chr )					  
							      98 LOAD_GLOBAL 3 ( ord )					    98 LOAD_GLOBAL 3 ( ord )					  
							      100 LOAD_FAST 0 ( str )					    100 LOAD_FAST 0 ( str )					  
							      102 LOAD_FAST 2 ( i )					    102 LOAD_FAST 2 ( i )					  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 CALL_FUNCTION 1					    106 CALL_FUNCTION 1						  
							      108 LOAD_CONST 3 ( 32 )					    108 LOAD_CONST 3 ( 32 )					  
							      110 BINARY_ADD						    110 BINARY_ADD						  
							      112 CALL_FUNCTION 1					    112 CALL_FUNCTION 1						  
							      114 LOAD_FAST 0 ( str )					    114 LOAD_FAST 0 ( str )					  
							      116 LOAD_FAST 2 ( i )					    116 LOAD_FAST 2 ( i )					  
							      118 STORE_SUBSCR						    118 STORE_SUBSCR						  
							      120 JUMP_ABSOLUTE 18					    120 JUMP_ABSOLUTE 18					  
							      >> 122 POP_BLOCK						    >> 122 POP_BLOCK						  
							      >> 124 LOAD_CONST 0 ( None )				    >> 124 LOAD_CONST 0 ( None )				  
							      126 RETURN_VALUE NEW_LINE					    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			      SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			    SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			  SMALLEST_SUBSET_SUM_GREATER_ELEMENTS
--							      --							    --								  --
def minElements ( arr , n ) :				      Disassembly of <code object minElements at 0x7f33e2644930, fi Disassembly of <code object minElements at 0x7f2b0163dc90, fi script_not_found : None
    halfSum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( halfSum )				    2 STORE_FAST 2 ( half)					  
	halfSum = halfSum + arr [ i ]			      								    								  
    halfSum = int ( halfSum / 2 )			      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 SETUP_LOOP 26 ( to 32 )					  
    arr.sort ( reverse = True )				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    res = 0						      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
    curr_sum = 0					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    for i in range ( n ) :				      12 GET_ITER						    12 GET_ITER							  
	curr_sum += arr [ i ]				      >> 14 FOR_ITER 16 ( to 32 )				    >> 14 FOR_ITER 14 ( to 30 )					  
	res += 1					      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
	if curr_sum > halfSum :				      								    								  
	    return res					      4 18 LOAD_FAST 2 ( halfSum )				    4 18 LOAD_FAST 2 ( halfSum )				  
    return res						      20 LOAD_FAST 0 ( arr )					    20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 STORE_FAST 2 ( halfSum )				    28 STORE_FAST 2 ( halfSum )					  
							      30 JUMP_ABSOLUTE 14					    								  
							      >> 32 POP_BLOCK						    5 >> 30 LOAD_GLOBAL 1 ( int )				  
							      								    32 LOAD_FAST 2 ( halfSum )					  
							      5 >> 34 LOAD_GLOBAL 1 ( int )				    34 LOAD_CONST 2 ( 2 )					  
							      36 LOAD_FAST 2 ( halfSum )				    36 BINARY_TRUE_DIVIDE					  
							      38 LOAD_CONST 2 ( 2 )					    38 CALL_FUNCTION 1						  
							      40 BINARY_TRUE_DIVIDE					    40 STORE_FAST 4 ( halfSum )					  
							      42 CALL_FUNCTION 1					    								  
							      44 STORE_FAST 2 ( halfSum )				    6 42 LOAD_FAST 0 ( arr )					  
							      								    44 LOAD_ATTR 2 ( sort )					  
							      6 46 LOAD_FAST 0 ( arr )					    46 LOAD_CONST 3 ( True )					  
							      48 LOAD_ATTR 2 ( sort )					    48 LOAD_CONST 4 ( ( 'reverse' , ) )				  
							      50 LOAD_CONST 3 ( True )					    50 CALL_FUNCTION_KW 1					  
							      52 LOAD_CONST 4 ( ( 'reverse' , ) )			    52 POP_TOP							  
							      54 CALL_FUNCTION_KW 1					    								  
							      56 POP_TOP						    7 54 LOAD_CONST 1 ( 0 )					  
							      								    56 STORE_FAST 5 ( res )					  
							      7 58 LOAD_CONST 1 ( 0 )					    								  
							      60 STORE_FAST 4 ( res )					    8 58 LOAD_CONST 1 ( 0 )					  
							      								    60 STORE_FAST 6 ( curr_sum )				  
							      8 62 LOAD_CONST 1 ( 0 )					    								  
							      64 STORE_FAST 5 ( curr_sum )				    9 62 SETUP_LOOP 64 ( to 126 )				  
							      								    64 LOAD_GLOBAL 0 ( range )					  
							      9 66 SETUP_LOOP 48 ( to 116 )				    66 LOAD_FAST 1 ( n )					  
							      68 LOAD_GLOBAL 0 ( range )				    68 CALL_FUNCTION 1						  
							      70 LOAD_FAST 1 ( n )					    70 GET_ITER							  
							      72 CALL_FUNCTION 1					    >> 72 FOR_ITER 48 ( to 124 )				  
							      74 GET_ITER						    74 STORE_FAST 3 ( i )					  
							      >> 76 FOR_ITER 36 ( to 114 )				    								  
							      78 STORE_FAST 3 ( i )					    10 76 LOAD_FAST 6 ( curr_sum )				  
							      								    78 LOAD_FAST 0 ( arr )					  
							      10 80 LOAD_FAST 5 ( curr_sum )				    80 LOAD_FAST 3 ( i )					  
							      82 LOAD_FAST 0 ( arr )					    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 3 ( i )					    84 INPLACE_ADD						  
							      86 BINARY_SUBSCR						    86 STORE_FAST 6 ( curr_sum )				  
							      88 INPLACE_ADD						    								  
							      90 STORE_FAST 5 ( curr_sum )				    11 88 LOAD_FAST 5 ( res )					  
							      								    90 LOAD_CONST 5 ( 1 )					  
							      11 92 LOAD_FAST 4 ( res )					    92 INPLACE_ADD						  
							      94 LOAD_CONST 5 ( 1 )					    94 STORE_FAST 5 ( res )					  
							      96 INPLACE_ADD						    								  
							      98 STORE_FAST 4 ( res )					    12 96 LOAD_FAST 6 ( curr_sum )				  
							      								    98 LOAD_FAST 4 ( halfSum )					  
							      12 100 LOAD_FAST 5 ( curr_sum )				    100 COMPARE_OP 4 ( > )					  
							      102 LOAD_FAST 2 ( halfSum )				    102 POP_JUMP_IF_FALSE 72					  
							      104 COMPARE_OP 4 ( > )					    								  
							      106 POP_JUMP_IF_FALSE 76					    13 104 LOAD_FAST 5 ( res )					  
							      								    106 RETURN_VALUE						  
							      13 108 LOAD_FAST 4 ( res )				    108 JUMP_ABSOLUTE 72					  
							      110 RETURN_VALUE						    >> 110 POP_BLOCK						  
							      112 JUMP_ABSOLUTE 76					    								  
							      >> 114 POP_BLOCK						    14 112 LOAD_FAST 5 ( res )					  
							      								    114 RETURN_VALUE NEW_LINE					  
							      14 >> 116 LOAD_FAST 4 ( res )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			      PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			    PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			  PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
def sequence ( n ) :					      Disassembly of <code object sequence at 0x7f33e2653f60, file  Disassembly of <code object sequence at 0x7f2b0163dc90, file  script_not_found : None
    f = [ 0 , 1 , 1 ]					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    print ( f [ 1 ] , end = " " ) ,			      2 LOAD_CONST 2 ( 1 )					    2 LOAD_CONST 2 ( 1 )					  
    print ( f [ 2 ] , end = " " ) ,			      4 LOAD_CONST 2 ( 1 )					    4 LOAD_CONST 2 ( 1 )					  
    for i in range ( 3 , n + 1 ) :			      6 BUILD_LIST 3						    6 BUILD_LIST 3						  
	f.append ( f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  8 STORE_FAST 1 ( f )					    8 STORE_FAST 1 ( f )					  
	print ( f [ i ] , end = " " ) ,			      								    								  
							      3 10 LOAD_GLOBAL 0 ( print )				    3 10 LOAD_GLOBAL 0 ( print )				  
							      12 LOAD_FAST 1 ( f )					    12 LOAD_FAST 1 ( f )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 LOAD_CONST 3 ( ' ' )					    18 LOAD_CONST 3 ( ' ' )					  
							      20 LOAD_CONST 4 ( ( 'end' , ) )				    20 LOAD_CONST 4 ( ( 'end' , ) )				  
							      22 CALL_FUNCTION_KW 2					    22 CALL_FUNCTION_KW 2					  
							      24 BUILD_TUPLE 1						    24 POP_TOP							  
							      26 POP_TOP						    								  
							      								    4 26 LOAD_GLOBAL 0 ( print )				  
							      4 28 LOAD_GLOBAL 0 ( print )				    28 LOAD_FAST 1 ( f )					  
							      30 LOAD_FAST 1 ( f )					    30 LOAD_CONST 5 ( 2 )					  
							      32 LOAD_CONST 5 ( 2 )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 LOAD_CONST 3 ( ' ' )					  
							      36 LOAD_CONST 3 ( ' ' )					    36 LOAD_CONST 4 ( ( 'end' , ) )				  
							      38 LOAD_CONST 4 ( ( 'end' , ) )				    38 CALL_FUNCTION_KW 2					  
							      40 CALL_FUNCTION_KW 2					    40 POP_TOP							  
							      42 BUILD_TUPLE 1						    								  
							      44 POP_TOP						    5 42 SETUP_LOOP 72 ( to 124 )				  
							      								    44 LOAD_GLOBAL 1 ( range )					  
							      5 46 SETUP_LOOP 82 ( to 130 )				    46 LOAD_CONST 6 ( 3 )					  
							      48 LOAD_GLOBAL 1 ( range )				    48 LOAD_FAST 0 ( n )					  
							      50 LOAD_CONST 6 ( 3 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 LOAD_FAST 0 ( n )					    52 BINARY_ADD						  
							      54 LOAD_CONST 2 ( 1 )					    54 CALL_FUNCTION 2						  
							      56 BINARY_ADD						    56 GET_ITER							  
							      58 CALL_FUNCTION 2					    >> 58 FOR_ITER 52 ( to 122 )				  
							      60 GET_ITER						    60 STORE_FAST 2 ( i )					  
							      >> 62 FOR_ITER 64 ( to 128 )				    								  
							      64 STORE_FAST 2 ( i )					    6 62 LOAD_FAST 1 ( f )					  
							      								    64 LOAD_METHOD 2 ( append )					  
							      6 66 LOAD_FAST 1 ( f )					    66 LOAD_FAST 1 ( f )					  
							      68 LOAD_METHOD 2 ( append )				    68 LOAD_FAST 1 ( f )					  
							      70 LOAD_FAST 1 ( f )					    70 LOAD_FAST 2 ( i )					  
							      72 LOAD_FAST 1 ( f )					    72 LOAD_CONST 2 ( 1 )					  
							      74 LOAD_FAST 2 ( i )					    74 BINARY_SUBTRACT						  
							      76 LOAD_CONST 2 ( 1 )					    76 BINARY_SUBSCR						  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBSCR						  
							      80 BINARY_SUBSCR						    80 LOAD_FAST 1 ( f )					  
							      82 BINARY_SUBSCR						    82 LOAD_FAST 2 ( i )					  
							      84 LOAD_FAST 1 ( f )					    84 LOAD_FAST 1 ( f )					  
							      86 LOAD_FAST 2 ( i )					    86 LOAD_FAST 2 ( i )					  
							      88 LOAD_FAST 1 ( f )					    88 LOAD_CONST 2 ( 1 )					  
							      90 LOAD_FAST 2 ( i )					    90 BINARY_SUBTRACT						  
							      92 LOAD_CONST 2 ( 1 )					    92 BINARY_SUBSCR						  
							      94 BINARY_SUBTRACT					    94 BINARY_SUBTRACT						  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 BINARY_SUBTRACT					    98 BINARY_ADD						  
							      100 BINARY_SUBSCR						    100 CALL_METHOD 1						  
							      102 BINARY_ADD						    102 POP_TOP							  
							      104 CALL_METHOD 1						    								  
							      106 POP_TOP						    7 104 LOAD_GLOBAL 0 ( print )				  
							      								    106 LOAD_FAST 1 ( f )					  
							      7 108 LOAD_GLOBAL 0 ( print )				    108 LOAD_FAST 1 ( f )					  
							      110 LOAD_FAST 1 ( f )					    110 LOAD_FAST 2 ( i )					  
							      112 LOAD_FAST 2 ( i )					    112 BINARY_SUBSCR						  
							      114 BINARY_SUBSCR						    114 LOAD_CONST 3 ( ' ' )					  
							      116 LOAD_CONST 3 ( ' ' )					    116 LOAD_CONST 4 ( ( 'end' , ) )				  
							      118 LOAD_CONST 4 ( ( 'end' , ) )				    118 CALL_FUNCTION_KW 2					  
							      120 CALL_FUNCTION_KW 2					    120 POP_TOP							  
							      122 BUILD_TUPLE 1						    >> 122 LOAD_CONST 0 ( None )				  
							      124 POP_TOP						    124 RETURN_VALUE NEW_LINE					  
							      126 JUMP_ABSOLUTE 62					    								  
							      >> 128 POP_BLOCK						    								  
							      >> 130 LOAD_CONST 0 ( None )				    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE
--							      --							    --								  --
def eggDrop ( n , k ) :					      Disassembly of <code object eggDrop at 0x7f33e2653f60, file " Disassembly of <code object eggDrop at 0x7f2b0163dc90, file " script_not_found : None
    if ( k == 1 or k == 0 ) :				      2 0 LOAD_FAST 1 ( k )					    2 0 LOAD_FAST 1 ( k )					  
	return k					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n == 1 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return k					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
    min = sys.maxsize					      8 LOAD_FAST 1 ( k )					    8 LOAD_FAST 1 ( k )						  
    for x in range ( 1 , k + 1 ) :			      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
	res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , 12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	if ( res < min ) :				      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
	    min = res					      								    								  
    return min + 1					      3 >> 16 LOAD_FAST 1 ( k )					    3 >> 16 LOAD_FAST 1 ( k )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_FAST 0 ( n )					    4 >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 1 ( 1 )					  
							      24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
							      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      5 28 LOAD_FAST 1 ( k )					    5 28 LOAD_FAST 1 ( k )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      6 >> 32 LOAD_GLOBAL 0 ( sys )				    6 >> 32 LOAD_GLOBAL 0 ( sys )				  
							      34 LOAD_ATTR 1 ( maxsize )				    34 LOAD_ATTR 1 ( maxsize )					  
							      36 STORE_FAST 2 ( min )					    36 STORE_FAST 2 ( min )					  
							      								    								  
							      7 38 SETUP_LOOP 68 ( to 108 )				    7 38 SETUP_LOOP 68 ( to 104 )				  
							      40 LOAD_GLOBAL 2 ( range )				    40 LOAD_GLOBAL 2 ( range )					  
							      42 LOAD_CONST 1 ( 1 )					    42 LOAD_CONST 1 ( 1 )					  
							      44 LOAD_FAST 1 ( k )					    44 LOAD_FAST 1 ( k )					  
							      46 LOAD_CONST 1 ( 1 )					    46 LOAD_CONST 1 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 CALL_FUNCTION 2					    50 CALL_FUNCTION 2						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 50 ( to 106 )				    >> 54 FOR_ITER 48 ( to 102 )				  
							      56 STORE_FAST 3 ( x )					    56 STORE_FAST 3 ( x )					  
							      								    								  
							      8 58 LOAD_GLOBAL 3 ( max )				    8 58 LOAD_GLOBAL 3 ( max )					  
							      60 LOAD_GLOBAL 4 ( eggDrop )				    60 LOAD_GLOBAL 4 ( eggDrop )				  
							      62 LOAD_FAST 0 ( n )					    62 LOAD_FAST 0 ( n )					  
							      64 LOAD_CONST 1 ( 1 )					    64 LOAD_CONST 1 ( 1 )					  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBTRACT						  
							      68 LOAD_FAST 3 ( x )					    68 LOAD_FAST 3 ( x )					  
							      70 LOAD_CONST 1 ( 1 )					    70 LOAD_CONST 1 ( 1 )					  
							      72 BINARY_SUBTRACT					    72 BINARY_SUBTRACT						  
							      74 CALL_FUNCTION 2					    74 CALL_FUNCTION 2						  
							      76 LOAD_GLOBAL 4 ( eggDrop )				    76 LOAD_GLOBAL 5 ( eggDrop )				  
							      78 LOAD_FAST 0 ( n )					    78 LOAD_FAST 0 ( n )					  
							      80 LOAD_FAST 1 ( k )					    80 LOAD_FAST 1 ( k )					  
							      82 LOAD_FAST 3 ( x )					    82 LOAD_FAST 3 ( x )					  
							      84 BINARY_SUBTRACT					    84 BINARY_SUBTRACT						  
							      86 CALL_FUNCTION 2					    86 CALL_FUNCTION 2						  
							      88 CALL_FUNCTION 2					    88 CALL_FUNCTION 2						  
							      90 STORE_FAST 4 ( res )					    90 STORE_FAST 4 ( res )					  
							      								    								  
							      9 92 LOAD_FAST 4 ( res )					    9 92 LOAD_FAST 4 ( res )					  
							      94 LOAD_FAST 2 ( min )					    94 LOAD_FAST 2 ( min )					  
							      96 COMPARE_OP 0 ( < )					    96 COMPARE_OP 0 ( < )					  
							      98 POP_JUMP_IF_FALSE 54					    98 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      10 100 LOAD_FAST 4 ( res )				    10 100 LOAD_FAST 4 ( res )					  
							      102 STORE_FAST 2 ( min )					    102 STORE_FAST 2 ( min )					  
							      104 JUMP_ABSOLUTE 54					    104 JUMP_ABSOLUTE 54					  
							      >> 106 POP_BLOCK						    >> 106 POP_BLOCK						  
							      								    								  
							      11 >> 108 LOAD_FAST 2 ( min )				    11 >> 108 LOAD_FAST 2 ( min )				  
							      110 LOAD_CONST 1 ( 1 )					    110 LOAD_CONST 1 ( 1 )					  
							      112 BINARY_ADD						    112 BINARY_ADD						  
							      114 RETURN_VALUE NEW_LINE					    114 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS     RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	    RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	  RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS
--							      --							    --								  --
def countSubstrs ( str , i , j , n ) :			      Disassembly of <code object countSubstrs at 0x7f33e2644f60, f Disassembly of <code object countSubstrs at 0x7f2b0163dc90, f script_not_found : None
    if ( n == 1 ) :					      2 0 LOAD_FAST 3 ( n )					    2 0 LOAD_FAST 3 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n <= 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 0					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    res = ( countSubstrs ( str , i + 1 , j , n - 1 ) + countS 								    								  
    if ( str [ i ] == str [ j ] ) :			      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
	res += 1					      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return res						      								    								  
							      4 >> 12 LOAD_FAST 3 ( n )					    4 >> 12 LOAD_FAST 3 ( n )					  
							      14 LOAD_CONST 2 ( 0 )					    14 LOAD_CONST 2 ( 0 )					  
							      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 0 )					    5 20 LOAD_CONST 2 ( 0 )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_GLOBAL 0 ( countSubstrs )			    6 >> 24 LOAD_GLOBAL 0 ( countSubstrs )			  
							      26 LOAD_FAST 0 ( str )					    26 LOAD_FAST 0 ( str )					  
							      28 LOAD_FAST 1 ( i )					    28 LOAD_FAST 1 ( i )					  
							      30 LOAD_CONST 1 ( 1 )					    30 LOAD_CONST 1 ( 1 )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 LOAD_FAST 2 ( j )					    34 LOAD_FAST 2 ( j )					  
							      36 LOAD_FAST 3 ( n )					    36 LOAD_FAST 3 ( n )					  
							      38 LOAD_CONST 1 ( 1 )					    38 LOAD_CONST 1 ( 1 )					  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBTRACT						  
							      42 CALL_FUNCTION 4					    42 CALL_FUNCTION 4						  
							      44 LOAD_GLOBAL 0 ( countSubstrs )				    44 LOAD_GLOBAL 0 ( countSubstrs )				  
							      46 LOAD_FAST 0 ( str )					    46 LOAD_FAST 0 ( str )					  
							      48 LOAD_FAST 1 ( i )					    48 LOAD_FAST 1 ( i )					  
							      50 LOAD_FAST 2 ( j )					    50 LOAD_FAST 2 ( j )					  
							      52 LOAD_CONST 1 ( 1 )					    52 LOAD_CONST 1 ( 1 )					  
							      54 BINARY_SUBTRACT					    54 BINARY_SUBTRACT						  
							      56 LOAD_FAST 3 ( n )					    56 LOAD_FAST 3 ( n )					  
							      58 LOAD_CONST 1 ( 1 )					    58 LOAD_CONST 3 ( 2 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 CALL_FUNCTION 4					    62 CALL_FUNCTION 4						  
							      64 BINARY_ADD						    64 BINARY_SUBTRACT						  
							      66 LOAD_GLOBAL 0 ( countSubstrs )				    66 LOAD_GLOBAL 0 ( countSubstrs )				  
							      68 LOAD_FAST 0 ( str )					    68 LOAD_FAST 0 ( str )					  
							      70 LOAD_FAST 1 ( i )					    70 LOAD_FAST 1 ( i )					  
							      72 LOAD_CONST 1 ( 1 )					    72 LOAD_CONST 1 ( 1 )					  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 LOAD_FAST 2 ( j )					    76 LOAD_FAST 3 ( n )					  
							      78 LOAD_CONST 1 ( 1 )					    78 LOAD_CONST 4 ( 2 )					  
							      80 BINARY_SUBTRACT					    80 BINARY_SUBTRACT						  
							      82 LOAD_FAST 3 ( n )					    82 CALL_FUNCTION 4						  
							      84 LOAD_CONST 3 ( 2 )					    84 BINARY_SUBTRACT						  
							      86 BINARY_SUBTRACT					    86 STORE_FAST 4 ( res )					  
							      88 CALL_FUNCTION 4					    								  
							      90 BINARY_SUBTRACT					    7 88 LOAD_FAST 0 ( str )					  
							      92 STORE_FAST 4 ( res )					    90 LOAD_FAST 1 ( i )					  
							      								    92 BINARY_SUBSCR						  
							      7 94 LOAD_FAST 0 ( str )					    94 LOAD_FAST 0 ( str )					  
							      96 LOAD_FAST 1 ( i )					    96 LOAD_FAST 2 ( j )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_FAST 0 ( str )					    100 COMPARE_OP 2 ( == )					  
							      102 LOAD_FAST 2 ( j )					    102 POP_JUMP_IF_FALSE 112					  
							      104 BINARY_SUBSCR						    								  
							      106 COMPARE_OP 2 ( == )					    8 104 LOAD_FAST 4 ( res )					  
							      108 POP_JUMP_IF_FALSE 118					    106 LOAD_CONST 1 ( 1 )					  
							      								    108 INPLACE_ADD						  
							      8 110 LOAD_FAST 4 ( res )					    110 STORE_FAST 4 ( res )					  
							      112 LOAD_CONST 1 ( 1 )					    								  
							      114 INPLACE_ADD						    9 >> 112 LOAD_FAST 4 ( res )				  
							      116 STORE_FAST 4 ( res )					    114 RETURN_VALUE NEW_LINE					  
							      								    								  
							      9 >> 118 LOAD_FAST 4 ( res )				    								  
							      120 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	      COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	    COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		  COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES
--							      --							    --								  --
def countarray ( n , k , x ) :				      Disassembly of <code object countarray at 0x7f33e2653f60, fil Disassembly of <code object countarray at 0x7f2b0163dc90, fil script_not_found : None
    dp = list ( )					      2 0 LOAD_GLOBAL 0 ( list )				    2 0 LOAD_GLOBAL 0 ( list )					  
    dp.append ( 0 )					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    dp.append ( 1 )					      4 STORE_FAST 3 ( dp )					    4 STORE_FAST 3 ( dp )					  
    i = 2						      								    								  
    while i < n :					      3 6 LOAD_FAST 3 ( dp )					    3 6 LOAD_FAST 3 ( dp )					  
	dp.append ( ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp 8 LOAD_METHOD 1 ( append )				    8 LOAD_METHOD 1 ( append )					  
	i = i + 1					      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
    return ( ( k - 1 ) * dp [ n - 2 ] if x == 1 else dp [ n - 12 CALL_METHOD 1						    12 CALL_METHOD 1						  
							      14 POP_TOP						    14 POP_TOP							  
							      								    								  
							      4 16 LOAD_FAST 3 ( dp )					    4 16 LOAD_FAST 3 ( dp )					  
							      18 LOAD_METHOD 1 ( append )				    18 LOAD_METHOD 1 ( append )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 CALL_METHOD 1						    22 CALL_METHOD 1						  
							      24 POP_TOP						    24 POP_TOP							  
							      								    								  
							      5 26 LOAD_CONST 3 ( 2 )					    5 26 LOAD_CONST 3 ( 2 )					  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      6 30 SETUP_LOOP 66 ( to 98 )				    6 30 SETUP_LOOP 62 ( to 96 )				  
							      >> 32 LOAD_FAST 4 ( i )					    >> 32 LOAD_FAST 4 ( i )					  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 COMPARE_OP 0 ( < )					    36 COMPARE_OP 0 ( < )					  
							      38 POP_JUMP_IF_FALSE 96					    38 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      7 40 LOAD_FAST 3 ( dp )					    7 40 LOAD_FAST 3 ( dp )					  
							      42 LOAD_METHOD 1 ( append )				    42 LOAD_METHOD 1 ( append )					  
							      44 LOAD_FAST 1 ( k )					    44 LOAD_FAST 1 ( k )					  
							      46 LOAD_CONST 3 ( 2 )					    46 LOAD_CONST 3 ( 2 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 LOAD_FAST 3 ( dp )					    50 CALL_METHOD 1						  
							      52 LOAD_FAST 4 ( i )					    52 LOAD_FAST 3 ( dp )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_FAST 4 ( i )					  
							      56 BINARY_SUBTRACT					    56 LOAD_CONST 2 ( 1 )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBTRACT						  
							      60 BINARY_MULTIPLY					    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 1 ( k )					    62 BINARY_MULTIPLY						  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_FAST 1 ( k )					  
							      66 BINARY_SUBTRACT					    66 LOAD_CONST 3 ( 2 )					  
							      68 LOAD_FAST 3 ( dp )					    68 BINARY_SUBTRACT						  
							      70 LOAD_FAST 4 ( i )					    70 BINARY_SUBSCR						  
							      72 LOAD_CONST 3 ( 2 )					    72 BINARY_MULTIPLY						  
							      74 BINARY_SUBTRACT					    74 BINARY_ADD						  
							      76 BINARY_SUBSCR						    76 CALL_METHOD 1						  
							      78 BINARY_MULTIPLY					    78 POP_TOP							  
							      80 BINARY_ADD						    								  
							      82 CALL_METHOD 1						    8 80 LOAD_FAST 4 ( i )					  
							      84 POP_TOP						    82 LOAD_CONST 2 ( 1 )					  
							      								    84 BINARY_ADD						  
							      8 86 LOAD_FAST 4 ( i )					    86 STORE_FAST 4 ( i )					  
							      88 LOAD_CONST 2 ( 1 )					    88 JUMP_ABSOLUTE 32						  
							      90 BINARY_ADD						    >> 90 POP_BLOCK						  
							      92 STORE_FAST 4 ( i )					    								  
							      94 JUMP_ABSOLUTE 32					    9 >> 92 LOAD_FAST 1 ( k )					  
							      >> 96 POP_BLOCK						    94 LOAD_CONST 2 ( 1 )					  
							      								    96 BINARY_SUBTRACT						  
							      9 >> 98 LOAD_FAST 2 ( x )					    98 LOAD_FAST 3 ( dp )					  
							      100 LOAD_CONST 2 ( 1 )					    100 LOAD_FAST 0 ( n )					  
							      102 COMPARE_OP 2 ( == )					    102 LOAD_CONST 3 ( 2 )					  
							      104 POP_JUMP_IF_FALSE 126					    104 BINARY_SUBTRACT						  
							      106 LOAD_FAST 1 ( k )					    106 BINARY_SUBSCR						  
							      108 LOAD_CONST 2 ( 1 )					    108 BINARY_MULTIPLY						  
							      110 BINARY_SUBTRACT					    110 RETURN_VALUE NEW_LINE					  
							      112 LOAD_FAST 3 ( dp )					    								  
							      114 LOAD_FAST 0 ( n )					    								  
							      116 LOAD_CONST 3 ( 2 )					    								  
							      118 BINARY_SUBTRACT					    								  
							      120 BINARY_SUBSCR						    								  
							      122 BINARY_MULTIPLY					    								  
							      124 RETURN_VALUE						    								  
							      >> 126 LOAD_FAST 3 ( dp )					    								  
							      128 LOAD_FAST 0 ( n )					    								  
							      130 LOAD_CONST 2 ( 1 )					    								  
							      132 BINARY_SUBTRACT					    								  
							      134 BINARY_SUBSCR						    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1
--							      --							    --								  --
def isScalarMatrix ( mat ) :				      Disassembly of <code object isScalarMatrix at 0x7f33e2644f60, Disassembly of <code object isScalarMatrix at 0x7f2b0164d4b0, script_not_found : None
    for i in range ( 0 , N ) :				      2 0 SETUP_LOOP 66 ( to 68 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	for j in range ( 0 , N ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
		return False				      6 LOAD_GLOBAL 1 ( N )					    6 LOAD_GLOBAL 1 ( N )					  
    for i in range ( 0 , N - 1 ) :			      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
	if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) :   10 GET_ITER						    10 GET_ITER							  
	    return False				      >> 12 FOR_ITER 52 ( to 66 )				    >> 12 FOR_ITER 52 ( to 64 )					  
    return True						      14 STORE_FAST 1 ( i )					    14 STORE_FAST 1 ( i )					  
							      								    								  
							      3 16 SETUP_LOOP 46 ( to 64 )				    3 16 SETUP_LOOP 40 ( to 62 )				  
							      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_GLOBAL 0 ( range )					  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_GLOBAL 1 ( N )					    22 LOAD_GLOBAL 1 ( N )					  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 32 ( to 62 )				    >> 28 FOR_ITER 28 ( to 60 )					  
							      30 STORE_FAST 2 ( j )					    30 STORE_FAST 2 ( j )					  
							      								    								  
							      4 32 LOAD_FAST 1 ( i )					    4 32 LOAD_FAST 1 ( i )					  
							      34 LOAD_FAST 2 ( j )					    34 LOAD_FAST 2 ( j )					  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 28					    38 POP_JUMP_IF_FALSE 28					  
							      40 LOAD_FAST 0 ( mat )					    40 LOAD_FAST 0 ( mat )					  
							      42 LOAD_FAST 1 ( i )					    42 LOAD_FAST 1 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 2 ( j )					    46 LOAD_FAST 2 ( j )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 1 ( 0 )					    50 LOAD_CONST 1 ( 0 )					  
							      52 COMPARE_OP 3 ( != )					    52 COMPARE_OP 3 ( != )					  
							      54 POP_JUMP_IF_FALSE 28					    54 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 56 LOAD_CONST 2 ( False )				    5 56 LOAD_CONST 2 ( False )					  
							      58 RETURN_VALUE						    58 RETURN_VALUE						  
							      60 JUMP_ABSOLUTE 28					    >> 60 JUMP_ABSOLUTE 28					  
							      >> 62 POP_BLOCK						    >> 62 POP_BLOCK						  
							      >> 64 JUMP_ABSOLUTE 12					    >> 64 JUMP_ABSOLUTE 12					  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      6 >> 68 SETUP_LOOP 58 ( to 128 )				    6 68 SETUP_LOOP 54 ( to 124 )				  
							      70 LOAD_GLOBAL 0 ( range )				    70 LOAD_GLOBAL 0 ( range )					  
							      72 LOAD_CONST 1 ( 0 )					    72 LOAD_CONST 1 ( 0 )					  
							      74 LOAD_GLOBAL 1 ( N )					    74 LOAD_GLOBAL 1 ( N )					  
							      76 LOAD_CONST 3 ( 1 )					    76 LOAD_CONST 3 ( 1 )					  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 CALL_FUNCTION 2					    80 CALL_FUNCTION 2						  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 40 ( to 126 )				    >> 84 FOR_ITER 36 ( to 122 )				  
							      86 STORE_FAST 1 ( i )					    86 STORE_FAST 1 ( i )					  
							      								    								  
							      7 88 LOAD_FAST 0 ( mat )					    7 88 LOAD_FAST 0 ( mat )					  
							      90 LOAD_FAST 1 ( i )					    90 LOAD_FAST 1 ( i )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 LOAD_FAST 1 ( i )					    94 LOAD_FAST 1 ( i )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_FAST 0 ( mat )					    98 LOAD_FAST 0 ( mat )					  
							      100 LOAD_FAST 1 ( i )					    100 LOAD_FAST 1 ( i )					  
							      102 LOAD_CONST 3 ( 1 )					    102 LOAD_CONST 3 ( 1 )					  
							      104 BINARY_ADD						    104 BINARY_ADD						  
							      106 BINARY_SUBSCR						    106 BINARY_SUBSCR						  
							      108 LOAD_FAST 1 ( i )					    108 LOAD_FAST 1 ( i )					  
							      110 LOAD_CONST 3 ( 1 )					    110 LOAD_CONST 3 ( 1 )					  
							      112 BINARY_ADD						    112 BINARY_ADD						  
							      114 BINARY_SUBSCR						    114 BINARY_SUBSCR						  
							      116 COMPARE_OP 3 ( != )					    116 COMPARE_OP 3 ( != )					  
							      118 POP_JUMP_IF_FALSE 84					    118 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      8 120 LOAD_CONST 2 ( False )				    8 120 LOAD_CONST 2 ( False )				  
							      122 RETURN_VALUE						    122 RETURN_VALUE						  
							      124 JUMP_ABSOLUTE 84					    124 JUMP_ABSOLUTE 84					  
							      >> 126 POP_BLOCK						    >> 126 POP_BLOCK						  
							      								    								  
							      9 >> 128 LOAD_CONST 4 ( True )				    9 >> 128 LOAD_CONST 4 ( True )				  
							      130 RETURN_VALUE NEW_LINE					    130 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE     REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	    REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	  REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE
--							      --							    --								  --
def translate ( st ) :					      Disassembly of <code object translate at 0x7f33e2653ed0, file Disassembly of <code object translate at 0x7f2b0163dc90, file error : /bin/bash: line 1:  4703 Segmentation faul
    for i in range ( 1 , len ( st ) ) :			      2 0 SETUP_LOOP 122 ( to 124 )				    2 0 SETUP_LOOP 92 ( to 94 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    st [ i - 1 ] = 'C'				      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    for j in range ( i , len ( st ) - 1 ) :	      6 LOAD_GLOBAL 1 ( len )					    6 LOAD_GLOBAL 1 ( len )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/REPLAC
		st [ j ] = st [ j + 1 ]			      8 LOAD_FAST 0 ( st )					    8 LOAD_FAST 0 ( st )					  E_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPAC
	    st [ len ( st ) - 1 ] = ' '			      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  E.dis
    return						      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 104 ( to 122 )				    >> 16 FOR_ITER 76 ( to 92 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 1 ( i )					  
							      								    								  
							      3 20 LOAD_FAST 0 ( st )					    3 20 LOAD_FAST 0 ( st )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 1 ( i )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 1 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 2 ( 'A' )					    30 LOAD_CONST 2 ( 'A' )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 16					    34 POP_JUMP_IF_FALSE 16					  
							      36 LOAD_FAST 0 ( st )					    36 LOAD_FAST 0 ( st )					  
							      38 LOAD_FAST 1 ( i )					    38 LOAD_FAST 1 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_CONST 3 ( 'B' )					    42 LOAD_CONST 3 ( 'B' )					  
							      44 COMPARE_OP 2 ( == )					    44 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 16					    46 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      4 48 LOAD_CONST 4 ( 'C' )					    4 48 LOAD_CONST 4 ( 'C' )					  
							      50 LOAD_FAST 0 ( st )					    50 LOAD_FAST 0 ( st )					  
							      52 LOAD_FAST 1 ( i )					    52 LOAD_FAST 1 ( i )					  
							      54 LOAD_CONST 1 ( 1 )					    54 LOAD_CONST 1 ( 1 )					  
							      56 BINARY_SUBTRACT					    56 BINARY_SUBTRACT						  
							      58 STORE_SUBSCR						    58 STORE_SUBSCR						  
							      								    								  
							      5 60 SETUP_LOOP 42 ( to 104 )				    5 60 SETUP_LOOP 40 ( to 98 )				  
							      62 LOAD_GLOBAL 0 ( range )				    62 LOAD_GLOBAL 0 ( range )					  
							      64 LOAD_FAST 1 ( i )					    64 LOAD_FAST 1 ( i )					  
							      66 LOAD_GLOBAL 1 ( len )					    66 LOAD_GLOBAL 1 ( len )					  
							      68 LOAD_FAST 0 ( st )					    68 LOAD_FAST 0 ( st )					  
							      70 CALL_FUNCTION 1					    70 CALL_FUNCTION 1						  
							      72 LOAD_CONST 1 ( 1 )					    72 LOAD_CONST 1 ( 1 )					  
							      74 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      76 CALL_FUNCTION 2					    76 CALL_FUNCTION 2						  
							      78 GET_ITER						    78 GET_ITER							  
							      >> 80 FOR_ITER 20 ( to 102 )				    >> 80 FOR_ITER 20 ( to 96 )					  
							      82 STORE_FAST 2 ( j )					    82 STORE_FAST 2 ( j )					  
							      								    								  
							      6 84 LOAD_FAST 0 ( st )					    6 84 LOAD_FAST 0 ( st )					  
							      86 LOAD_FAST 2 ( j )					    86 LOAD_FAST 2 ( j )					  
							      88 LOAD_CONST 1 ( 1 )					    88 LOAD_CONST 1 ( 1 )					  
							      90 BINARY_ADD						    90 BINARY_ADD						  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 LOAD_FAST 0 ( st )					    94 LOAD_FAST 0 ( st )					  
							      96 LOAD_FAST 2 ( j )					    96 LOAD_FAST 2 ( j )					  
							      98 STORE_SUBSCR						    98 STORE_SUBSCR						  
							      100 JUMP_ABSOLUTE 80					    100 JUMP_ABSOLUTE 80					  
							      >> 102 POP_BLOCK						    >> 102 POP_BLOCK						  
							      								    								  
							      7 >> 104 LOAD_CONST 5 ( ' ' )				    7 >> 104 LOAD_CONST 5 ( ' ' )				  
							      106 LOAD_FAST 0 ( st )					    106 LOAD_FAST 0 ( st )					  
							      108 LOAD_GLOBAL 1 ( len )					    108 LOAD_GLOBAL 1 ( len )					  
							      110 LOAD_FAST 0 ( st )					    110 LOAD_FAST 0 ( st )					  
							      112 CALL_FUNCTION 1					    112 CALL_FUNCTION 1						  
							      114 LOAD_CONST 1 ( 1 )					    114 LOAD_CONST 1 ( 1 )					  
							      116 BINARY_SUBTRACT					    116 BINARY_SUBTRACT						  
							      118 STORE_SUBSCR						    118 STORE_SUBSCR						  
							      120 JUMP_ABSOLUTE 16					    >> 120 JUMP_ABSOLUTE 16					  
							      >> 122 POP_BLOCK						    >> 122 POP_BLOCK						  
							      								    								  
							      8 >> 124 LOAD_CONST 0 ( None )				    8 >> 124 LOAD_CONST 0 ( None )				  
							      126 RETURN_VALUE NEW_LINE					    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			      NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			    NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			  NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS
--							      --							    --								  --
def numberOfPermWithKInversion ( N , K ) :		      Disassembly of <code object numberOfPermWithKInversion at 0x7 Disassembly of <code object numberOfPermWithKInversion at 0x7 script_not_found : None
    if ( N == 0 ) : return 0				      2 0 LOAD_FAST 0 ( N )					    2 0 LOAD_FAST 0 ( N )					  
    if ( K == 0 ) : return 1				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( memo [ N ] [ K ] != 0 ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return memo [ N ] [ K ]				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    sum = 0						      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
    for i in range ( K + 1 ) :				      10 RETURN_VALUE						    10 RETURN_VALUE						  
	if ( i <= N - 1 ) :				      								    								  
	    sum += numberOfPermWithKInversion ( N - 1 , K - i 3 >> 12 LOAD_FAST 1 ( K )					    3 >> 12 LOAD_FAST 1 ( K )					  
    memo [ N ] [ K ] = sum				      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
    return sum						      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      4 >> 24 LOAD_GLOBAL 0 ( memo )				    4 >> 24 LOAD_GLOBAL 0 ( memo )				  
							      26 LOAD_FAST 0 ( N )					    26 LOAD_FAST 0 ( N )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 1 ( K )					    30 LOAD_FAST 1 ( K )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_CONST 1 ( 0 )					    34 LOAD_CONST 1 ( 0 )					  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 52					    38 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      5 40 LOAD_GLOBAL 0 ( memo )				    5 40 LOAD_GLOBAL 0 ( memo )					  
							      42 LOAD_FAST 0 ( N )					    42 LOAD_FAST 0 ( N )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 1 ( K )					    46 LOAD_FAST 1 ( K )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 RETURN_VALUE						    50 RETURN_VALUE						  
							      								    								  
							      6 >> 52 LOAD_CONST 1 ( 0 )				    6 >> 52 LOAD_CONST 1 ( 0 )					  
							      54 STORE_FAST 2 ( sum )					    54 STORE_FAST 2 ( sum )					  
							      								    								  
							      7 56 SETUP_LOOP 54 ( to 112 )				    7 56 SETUP_LOOP 52 ( to 112 )				  
							      58 LOAD_GLOBAL 1 ( range )				    58 LOAD_GLOBAL 1 ( range )					  
							      60 LOAD_FAST 1 ( K )					    60 LOAD_FAST 1 ( K )					  
							      62 LOAD_CONST 2 ( 1 )					    62 LOAD_CONST 2 ( 1 )					  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 CALL_FUNCTION 1					    66 CALL_FUNCTION 1						  
							      68 GET_ITER						    68 GET_ITER							  
							      >> 70 FOR_ITER 38 ( to 110 )				    >> 70 FOR_ITER 36 ( to 110 )				  
							      72 STORE_FAST 3 ( i )					    72 STORE_FAST 3 ( i )					  
							      								    								  
							      8 74 LOAD_FAST 3 ( i )					    8 74 LOAD_FAST 3 ( i )					  
							      76 LOAD_FAST 0 ( N )					    76 LOAD_FAST 0 ( N )					  
							      78 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 2 ( 1 )					  
							      80 BINARY_SUBTRACT					    80 BINARY_SUBTRACT						  
							      82 COMPARE_OP 1 ( <= )					    82 COMPARE_OP 1 ( <= )					  
							      84 POP_JUMP_IF_FALSE 70					    84 POP_JUMP_IF_FALSE 70					  
							      								    								  
							      9 86 LOAD_FAST 2 ( sum )					    9 86 LOAD_FAST 2 ( sum )					  
							      88 LOAD_GLOBAL 2 ( numberOfPermWithKInversion )		    88 LOAD_CONST 3 ( numberOfPermWithKInversion )		  
							      90 LOAD_FAST 0 ( N )					    90 LOAD_FAST 0 ( N )					  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_CONST 2 ( 1 )					  
							      94 BINARY_SUBTRACT					    94 BINARY_SUBTRACT						  
							      96 LOAD_FAST 1 ( K )					    96 LOAD_FAST 1 ( K )					  
							      98 LOAD_FAST 3 ( i )					    98 LOAD_FAST 3 ( i )					  
							      100 BINARY_SUBTRACT					    100 BINARY_SUBTRACT						  
							      102 CALL_FUNCTION 2					    102 CALL_FUNCTION 2						  
							      104 INPLACE_ADD						    104 INPLACE_ADD						  
							      106 STORE_FAST 2 ( sum )					    106 STORE_FAST 2 ( sum )					  
							      108 JUMP_ABSOLUTE 70					    108 JUMP_ABSOLUTE 70					  
							      >> 110 POP_BLOCK						    >> 110 POP_BLOCK						  
							      								    								  
							      10 >> 112 LOAD_FAST 2 ( sum )				    10 >> 112 LOAD_FAST 2 ( sum )				  
							      114 LOAD_GLOBAL 0 ( memo )				    114 LOAD_GLOBAL 0 ( memo )					  
							      116 LOAD_FAST 0 ( N )					    116 LOAD_FAST 0 ( N )					  
							      118 BINARY_SUBSCR						    118 BINARY_SUBSCR						  
							      120 LOAD_FAST 1 ( K )					    120 LOAD_FAST 1 ( K )					  
							      122 STORE_SUBSCR						    122 STORE_SUBSCR						  
							      								    								  
							      11 124 LOAD_FAST 2 ( sum )				    11 124 LOAD_FAST 2 ( sum )					  
							      126 RETURN_VALUE NEW_LINE					    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS
--							      --							    --								  --
def printDistinct ( str ) :				      Disassembly of <code object printDistinct at 0x7f33e2649a50,  Disassembly of <code object printDistinct at 0x7f2b0164d660,  script_not_found : None
    count = [ 0 ] * NO_OF_CHARS				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( len ( str ) ) :			      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	if ( str [ i ] != ' ' ) :			      4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				    4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				  
	    count [ ord ( str [ i ] ) ] += 1		      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
    n = i						      8 STORE_FAST 1 ( count )					    8 STORE_FAST 1 ( count )					  
    for i in range ( n ) :				      								    								  
	if ( count [ ord ( str [ i ] ) ] == 1 ) :	      3 10 SETUP_LOOP 56 ( to 68 )				    3 10 SETUP_LOOP 54 ( to 66 )				  
	    print ( str [ i ] , end = "" )		      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
							      14 LOAD_GLOBAL 2 ( len )					    14 LOAD_GLOBAL 2 ( len )					  
							      16 LOAD_FAST 0 ( str )					    16 LOAD_FAST 0 ( str )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 40 ( to 66 )				    >> 24 FOR_ITER 42 ( to 64 )					  
							      26 STORE_FAST 2 ( i )					    26 STORE_FAST 2 ( i )					  
							      								    								  
							      4 28 LOAD_FAST 0 ( str )					    4 28 LOAD_FAST 0 ( str )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_CONST 2 ( ' ' )					    34 LOAD_CONST 2 ( ' ' )					  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 24					    38 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 40 LOAD_FAST 1 ( count )				    5 40 LOAD_FAST 1 ( count )					  
							      42 LOAD_GLOBAL 3 ( ord )					    42 LOAD_GLOBAL 3 ( ord )					  
							      44 LOAD_FAST 0 ( str )					    44 LOAD_FAST 0 ( str )					  
							      46 LOAD_FAST 2 ( i )					    46 LOAD_FAST 2 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 DUP_TOP_TWO						    52 DUP_TOP_TWO						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 3 ( 1 )					  
							      58 INPLACE_ADD						    58 INPLACE_ADD						  
							      60 ROT_THREE						    60 ROT_THREE						  
							      62 STORE_SUBSCR						    62 STORE_SUBSCR						  
							      64 JUMP_ABSOLUTE 24					    >> 64 JUMP_ABSOLUTE 24					  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      6 >> 68 LOAD_FAST 2 ( i )					    6 >> 68 LOAD_FAST 2 ( i )					  
							      70 STORE_FAST 3 ( n )					    70 STORE_FAST 3 ( n )					  
							      								    								  
							      7 72 SETUP_LOOP 52 ( to 126 )				    7 72 SETUP_LOOP 54 ( to 124 )				  
							      74 LOAD_GLOBAL 1 ( range )				    74 LOAD_GLOBAL 1 ( range )					  
							      76 LOAD_FAST 3 ( n )					    76 LOAD_FAST 3 ( n )					  
							      78 CALL_FUNCTION 1					    78 CALL_FUNCTION 1						  
							      80 GET_ITER						    80 GET_ITER							  
							      >> 82 FOR_ITER 40 ( to 124 )				    >> 82 FOR_ITER 46 ( to 122 )				  
							      84 STORE_FAST 2 ( i )					    84 STORE_FAST 2 ( i )					  
							      								    								  
							      8 86 LOAD_FAST 1 ( count )				    8 86 LOAD_FAST 1 ( count )					  
							      88 LOAD_GLOBAL 3 ( ord )					    88 LOAD_GLOBAL 3 ( ord )					  
							      90 LOAD_FAST 0 ( str )					    90 LOAD_FAST 0 ( str )					  
							      92 LOAD_FAST 2 ( i )					    92 LOAD_FAST 2 ( i )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 CALL_FUNCTION 1					    96 CALL_FUNCTION 1						  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_CONST 3 ( 1 )					    100 LOAD_CONST 3 ( 1 )					  
							      102 COMPARE_OP 2 ( == )					    102 COMPARE_OP 2 ( == )					  
							      104 POP_JUMP_IF_FALSE 82					    104 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      9 106 LOAD_GLOBAL 4 ( print )				    9 106 LOAD_GLOBAL 4 ( print )				  
							      108 LOAD_FAST 0 ( str )					    108 LOAD_FAST 0 ( str )					  
							      110 LOAD_FAST 2 ( i )					    110 LOAD_FAST 0 ( str )					  
							      112 BINARY_SUBSCR						    112 LOAD_FAST 2 ( i )					  
							      114 LOAD_CONST 4 ( '' )					    114 BINARY_SUBSCR						  
							      116 LOAD_CONST 5 ( ( 'end' , ) )				    116 LOAD_CONST 2 ( '' )					  
							      118 CALL_FUNCTION_KW 2					    118 LOAD_CONST 4 ( ( 'end' , ) )				  
							      120 POP_TOP						    120 CALL_FUNCTION_KW 2					  
							      122 JUMP_ABSOLUTE 82					    122 POP_TOP							  
							      >> 124 POP_BLOCK						    124 JUMP_ABSOLUTE 82					  
							      >> 126 LOAD_CONST 0 ( None )				    >> 126 POP_BLOCK						  
							      128 RETURN_VALUE NEW_LINE					    >> 128 LOAD_CONST 0 ( None )				  
							      								    130 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BRESENHAMS_LINE_GENERATION_ALGORITHM			      BRESENHAMS_LINE_GENERATION_ALGORITHM			    BRESENHAMS_LINE_GENERATION_ALGORITHM			  BRESENHAMS_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
def bresenham ( x1 , y1 , x2 , y2 ) :			      Disassembly of <code object bresenham at 0x7f33e26494b0, file Disassembly of <code object bresenham at 0x7f2b0164ded0, file script_not_found : None
    m_new = 2 * ( y2 - y1 )				      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
    slope_error_new = m_new - ( x2 - x1 )		      2 LOAD_FAST 3 ( y2 )					    2 LOAD_FAST 2 ( x2 )					  
    y = y1						      4 LOAD_FAST 1 ( y1 )					    4 LOAD_FAST 1 ( y1 )					  
    for x in range ( x1 , x2 + 1 ) :			      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
	print ( "(" , x , "," , y , ")\n" )		      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
	slope_error_new = slope_error_new + m_new	      10 STORE_FAST 4 ( m_new )					    10 STORE_FAST 4 ( m_new )					  
	if ( slope_error_new >= 0 ) :			      								    								  
	    y = y + 1					      3 12 LOAD_FAST 4 ( m_new )				    3 12 LOAD_FAST 4 ( m_new )					  
	    slope_error_new = slope_error_new - 2 * ( x2 - x1 14 LOAD_FAST 2 ( x2 )					    14 LOAD_FAST 2 ( x2 )					  
							      16 LOAD_FAST 0 ( x1 )					    16 LOAD_FAST 0 ( x1 )					  
							      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 STORE_FAST 5 ( slope_error_new )			    22 STORE_FAST 5 ( slope_error_new )				  
							      								    								  
							      4 24 LOAD_FAST 1 ( y1 )					    4 24 LOAD_FAST 1 ( y1 )					  
							      26 STORE_FAST 6 ( y )					    26 STORE_FAST 6 ( y )					  
							      								    								  
							      5 28 SETUP_LOOP 78 ( to 108 )				    5 28 SETUP_LOOP 74 ( to 94 )				  
							      30 LOAD_GLOBAL 0 ( range )				    30 LOAD_GLOBAL 0 ( range )					  
							      32 LOAD_FAST 0 ( x1 )					    32 LOAD_FAST 0 ( x1 )					  
							      34 LOAD_FAST 2 ( x2 )					    34 LOAD_FAST 2 ( x2 )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 CALL_FUNCTION 2					    40 CALL_FUNCTION 2						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 60 ( to 106 )				    >> 44 FOR_ITER 52 ( to 92 )					  
							      46 STORE_FAST 7 ( x )					    46 STORE_FAST 7 ( x )					  
							      								    								  
							      6 48 LOAD_GLOBAL 1 ( print )				    6 48 LOAD_GLOBAL 1 ( print )				  
							      50 LOAD_CONST 3 ( '(' )					    50 LOAD_CONST 3 ( '(' )					  
							      52 LOAD_FAST 7 ( x )					    52 LOAD_FAST 7 ( x )					  
							      54 LOAD_CONST 4 ( ',' )					    54 LOAD_CONST 4 ( ',' )					  
							      56 LOAD_FAST 6 ( y )					    56 LOAD_FAST 6 ( y )					  
							      58 LOAD_CONST 5 ( ')\n' )					    58 LOAD_CONST 5 ( ')\n' )					  
							      60 CALL_FUNCTION 5					    60 CALL_FUNCTION 5						  
							      62 POP_TOP						    62 CALL_FUNCTION 1						  
							      								    64 POP_TOP							  
							      7 64 LOAD_FAST 5 ( slope_error_new )			    								  
							      66 LOAD_FAST 4 ( m_new )					    7 66 LOAD_FAST 5 ( slope_error_new )			  
							      68 BINARY_ADD						    68 LOAD_FAST 4 ( m_new )					  
							      70 STORE_FAST 5 ( slope_error_new )			    70 BINARY_ADD						  
							      								    72 STORE_FAST 5 ( slope_error_new )				  
							      8 72 LOAD_FAST 5 ( slope_error_new )			    								  
							      74 LOAD_CONST 6 ( 0 )					    8 74 LOAD_FAST 5 ( slope_error_new )			  
							      76 COMPARE_OP 5 ( >= )					    76 LOAD_CONST 6 ( 0 )					  
							      78 POP_JUMP_IF_FALSE 44					    78 COMPARE_OP 5 ( >= )					  
							      								    80 POP_JUMP_IF_FALSE 44					  
							      9 80 LOAD_FAST 6 ( y )					    								  
							      82 LOAD_CONST 2 ( 1 )					    9 82 LOAD_FAST 6 ( y )					  
							      84 BINARY_ADD						    84 LOAD_CONST 2 ( 1 )					  
							      86 STORE_FAST 6 ( y )					    86 BINARY_ADD						  
							      								    88 STORE_FAST 6 ( y )					  
							      10 88 LOAD_FAST 5 ( slope_error_new )			    								  
							      90 LOAD_CONST 1 ( 2 )					    10 90 LOAD_FAST 5 ( slope_error_new )			  
							      92 LOAD_FAST 2 ( x2 )					    92 LOAD_CONST 1 ( 2 )					  
							      94 LOAD_FAST 0 ( x1 )					    94 LOAD_FAST 2 ( x2 )					  
							      96 BINARY_SUBTRACT					    96 LOAD_FAST 0 ( x1 )					  
							      98 BINARY_MULTIPLY					    98 BINARY_SUBTRACT						  
							      100 BINARY_SUBTRACT					    100 BINARY_MULTIPLY						  
							      102 STORE_FAST 5 ( slope_error_new )			    102 STORE_FAST 5 ( slope_error_new )			  
							      104 JUMP_ABSOLUTE 44					    104 JUMP_ABSOLUTE 44					  
							      >> 106 POP_BLOCK						    >> 106 POP_BLOCK						  
							      >> 108 LOAD_CONST 0 ( None )				    >> 108 LOAD_CONST 0 ( None )				  
							      110 RETURN_VALUE NEW_LINE					    110 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		      FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		    FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		  FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY
--							      --							    --								  --
def maxProduct ( arr , n ) :				      Disassembly of <code object maxProduct at 0x7f33e2649a50, fil Disassembly of <code object maxProduct at 0x7f2b0163dc90, fil script_not_found : None
    if n < 3 :						      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
	return - 1					      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  
    max_product = - ( sys.maxsize - 1 )			      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    for i in range ( 0 , n - 2 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	for j in range ( i + 1 , n - 1 ) :		      								    								  
	    for k in range ( j + 1 , n ) :		      3 8 LOAD_CONST 2 ( - 1 )					    3 8 LOAD_CONST 2 ( - 1 )					  
		max_product = max ( max_product , arr [ i ] * 10 RETURN_VALUE						    10 RETURN_VALUE						  
    return max_product					      								    								  
							      4 >> 12 LOAD_GLOBAL 0 ( sys )				    4 >> 12 LOAD_GLOBAL 0 ( sys )				  
							      14 LOAD_ATTR 1 ( maxsize )				    14 LOAD_ATTR 1 ( maxsize )					  
							      16 LOAD_CONST 3 ( 1 )					    16 LOAD_CONST 3 ( 1 )					  
							      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
							      20 UNARY_NEGATIVE						    20 UNARY_NEGATIVE						  
							      22 STORE_FAST 2 ( max_product )				    22 UNARY_NEGATIVE						  
							      								    24 STORE_FAST 2 ( max_product )				  
							      5 24 SETUP_LOOP 104 ( to 130 )				    								  
							      26 LOAD_GLOBAL 2 ( range )				    5 26 SETUP_LOOP 92 ( to 118 )				  
							      28 LOAD_CONST 4 ( 0 )					    28 LOAD_GLOBAL 2 ( range )					  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_CONST 4 ( 0 )					  
							      32 LOAD_CONST 5 ( 2 )					    32 LOAD_FAST 1 ( n )					  
							      34 BINARY_SUBTRACT					    34 LOAD_CONST 5 ( 2 )					  
							      36 CALL_FUNCTION 2					    36 BINARY_SUBTRACT						  
							      38 GET_ITER						    38 CALL_FUNCTION 2						  
							      >> 40 FOR_ITER 86 ( to 128 )				    40 GET_ITER							  
							      42 STORE_FAST 3 ( i )					    >> 42 FOR_ITER 74 ( to 116 )				  
							      								    44 STORE_FAST 3 ( i )					  
							      6 44 SETUP_LOOP 80 ( to 126 )				    								  
							      46 LOAD_GLOBAL 2 ( range )				    6 46 SETUP_LOOP 62 ( to 108 )				  
							      48 LOAD_FAST 3 ( i )					    48 LOAD_GLOBAL 2 ( range )					  
							      50 LOAD_CONST 3 ( 1 )					    50 LOAD_FAST 3 ( i )					  
							      52 BINARY_ADD						    52 LOAD_CONST 3 ( 1 )					  
							      54 LOAD_FAST 1 ( n )					    54 BINARY_ADD						  
							      56 LOAD_CONST 3 ( 1 )					    56 LOAD_FAST 1 ( n )					  
							      58 BINARY_SUBTRACT					    58 LOAD_CONST 3 ( 1 )					  
							      60 CALL_FUNCTION 2					    60 BINARY_SUBTRACT						  
							      62 GET_ITER						    62 CALL_FUNCTION 2						  
							      >> 64 FOR_ITER 58 ( to 124 )				    64 GET_ITER							  
							      66 STORE_FAST 4 ( j )					    >> 66 FOR_ITER 46 ( to 106 )				  
							      								    68 STORE_FAST 4 ( j )					  
							      7 68 SETUP_LOOP 52 ( to 122 )				    								  
							      70 LOAD_GLOBAL 2 ( range )				    7 70 SETUP_LOOP 46 ( to 104 )				  
							      72 LOAD_FAST 4 ( j )					    72 LOAD_GLOBAL 2 ( range )					  
							      74 LOAD_CONST 3 ( 1 )					    74 LOAD_FAST 4 ( j )					  
							      76 BINARY_ADD						    76 LOAD_CONST 3 ( 1 )					  
							      78 LOAD_FAST 1 ( n )					    78 BINARY_ADD						  
							      80 CALL_FUNCTION 2					    80 LOAD_FAST 1 ( n )					  
							      82 GET_ITER						    82 CALL_FUNCTION 2						  
							      >> 84 FOR_ITER 34 ( to 120 )				    84 GET_ITER							  
							      86 STORE_FAST 5 ( k )					    >> 86 FOR_ITER 30 ( to 102 )				  
							      								    88 STORE_FAST 5 ( k )					  
							      8 88 LOAD_GLOBAL 3 ( max )				    								  
							      90 LOAD_FAST 2 ( max_product )				    8 90 LOAD_GLOBAL 3 ( max )					  
							      92 LOAD_FAST 0 ( arr )					    92 LOAD_FAST 2 ( max_product )				  
							      94 LOAD_FAST 3 ( i )					    94 LOAD_FAST 0 ( arr )					  
							      96 BINARY_SUBSCR						    96 LOAD_FAST 3 ( i )					  
							      98 LOAD_FAST 0 ( arr )					    98 BINARY_SUBSCR						  
							      100 LOAD_FAST 4 ( j )					    100 LOAD_FAST 0 ( arr )					  
							      102 BINARY_SUBSCR						    102 LOAD_FAST 4 ( j )					  
							      104 BINARY_MULTIPLY					    104 BINARY_SUBSCR						  
							      106 LOAD_FAST 0 ( arr )					    106 BINARY_MULTIPLY						  
							      108 LOAD_FAST 5 ( k )					    108 LOAD_FAST 0 ( arr )					  
							      110 BINARY_SUBSCR						    110 LOAD_FAST 5 ( k )					  
							      112 BINARY_MULTIPLY					    112 BINARY_SUBSCR						  
							      114 CALL_FUNCTION 2					    114 BINARY_MULTIPLY						  
							      116 STORE_FAST 2 ( max_product )				    116 CALL_FUNCTION 2						  
							      118 JUMP_ABSOLUTE 84					    118 STORE_FAST 2 ( max_product )				  
							      >> 120 POP_BLOCK						    120 JUMP_ABSOLUTE 86					  
							      >> 122 JUMP_ABSOLUTE 64					    >> 122 POP_BLOCK						  
							      >> 124 POP_BLOCK						    >> 124 JUMP_ABSOLUTE 42					  
							      >> 126 JUMP_ABSOLUTE 40					    >> 126 POP_BLOCK						  
							      >> 128 POP_BLOCK						    >> 128 JUMP_ABSOLUTE 42					  
							      								    >> 130 POP_BLOCK						  
							      9 >> 130 LOAD_FAST 2 ( max_product )			    								  
							      132 RETURN_VALUE NEW_LINE					    9 >> 132 LOAD_FAST 2 ( max_product )			  
							      								    134 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GOOGLE_CASE_GIVEN_SENTENCE				      GOOGLE_CASE_GIVEN_SENTENCE				    GOOGLE_CASE_GIVEN_SENTENCE					  GOOGLE_CASE_GIVEN_SENTENCE
--							      --							    --								  --
def convert ( s ) :					      Disassembly of <code object convert at 0x7f33e2649a50, file " Disassembly of <code object convert at 0x7f2b0163dc90, file " error : /bin/bash: line 1:  4713 Segmentation faul
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    s1 = ""						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ataset/bin/python XLM/dis_script.py --script_path
    s1 = s1 + s [ 0 ].lower ( )				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    i = 1						      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/GOOGLE
    while i < n :					      								    								  _CASE_GIVEN_SENTENCE.dis
	if ( s [ i ] == ' ' and i <= n ) :		      3 8 LOAD_CONST 1 ( '' )					    3 8 LOAD_CONST 1 ( '' )					  
	    s1 = s1 + " " + ( s [ i + 1 ] ).lower ( )	      10 STORE_FAST 2 ( s1 )					    10 STORE_FAST 2 ( s1 )					  
	    i = i + 1					      								    								  
	else :						      4 12 LOAD_FAST 2 ( s1 )					    4 12 LOAD_FAST 2 ( s1 )					  
	    s1 = s1 + ( s [ i ] ).upper ( )		      14 LOAD_FAST 0 ( s )					    14 LOAD_FAST 0 ( s )					  
	i = i + 1					      16 LOAD_CONST 2 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
    return s1						      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 LOAD_METHOD 1 ( lower )				    20 LOAD_METHOD 1 ( lower )					  
							      22 CALL_METHOD 0						    22 CALL_METHOD 0						  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 STORE_FAST 2 ( s1 )					    26 STORE_FAST 2 ( s1 )					  
							      								    								  
							      5 28 LOAD_CONST 3 ( 1 )					    5 28 LOAD_CONST 3 ( 1 )					  
							      30 STORE_FAST 3 ( i )					    30 STORE_FAST 3 ( i )					  
							      								    								  
							      6 32 SETUP_LOOP 90 ( to 124 )				    6 32 SETUP_LOOP 72 ( to 104 )				  
							      >> 34 LOAD_FAST 3 ( i )					    >> 34 LOAD_FAST 3 ( i )					  
							      36 LOAD_FAST 1 ( n )					    36 LOAD_FAST 1 ( n )					  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 0 ( < )					  
							      40 POP_JUMP_IF_FALSE 122					    40 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      7 42 LOAD_FAST 0 ( s )					    7 42 LOAD_FAST 0 ( s )					  
							      44 LOAD_FAST 3 ( i )					    44 LOAD_FAST 3 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_CONST 4 ( ' ' )					    48 LOAD_CONST 1 ( ' ' )					  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_FALSE 96					    52 POP_JUMP_IF_FALSE 80					  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_FAST 3 ( i )					  
							      56 LOAD_FAST 1 ( n )					    56 LOAD_FAST 1 ( n )					  
							      58 COMPARE_OP 1 ( <= )					    58 COMPARE_OP 1 ( <= )					  
							      60 POP_JUMP_IF_FALSE 96					    60 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      8 62 LOAD_FAST 2 ( s1 )					    8 62 LOAD_FAST 2 ( s1 )					  
							      64 LOAD_CONST 4 ( ' ' )					    64 LOAD_CONST 1 ( ' ' )					  
							      66 BINARY_ADD						    66 BINARY_ADD						  
							      68 LOAD_FAST 0 ( s )					    68 LOAD_FAST 0 ( s )					  
							      70 LOAD_FAST 3 ( i )					    70 LOAD_FAST 3 ( i )					  
							      72 LOAD_CONST 3 ( 1 )					    72 LOAD_CONST 3 ( 1 )					  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 LOAD_METHOD 1 ( lower )				    78 LOAD_METHOD 1 ( lower )					  
							      80 CALL_METHOD 0						    80 CALL_METHOD 0						  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 STORE_FAST 2 ( s1 )					    84 STORE_FAST 2 ( s1 )					  
							      								    								  
							      9 86 LOAD_FAST 3 ( i )					    9 86 LOAD_FAST 3 ( i )					  
							      88 LOAD_CONST 3 ( 1 )					    88 LOAD_CONST 3 ( 1 )					  
							      90 BINARY_ADD						    90 BINARY_ADD						  
							      92 STORE_FAST 3 ( i )					    92 STORE_FAST 3 ( i )					  
							      94 JUMP_FORWARD 16 ( to 112 )				    94 JUMP_FORWARD 18 ( to 124 )				  
							      								    								  
							      11 >> 96 LOAD_FAST 2 ( s1 )				    11 >> 96 LOAD_FAST 2 ( s1 )					  
							      98 LOAD_FAST 0 ( s )					    98 LOAD_FAST 0 ( s )					  
							      100 LOAD_FAST 3 ( i )					    100 LOAD_FAST 3 ( i )					  
							      102 BINARY_SUBSCR						    102 BINARY_SUBSCR						  
							      104 LOAD_METHOD 2 ( upper )				    104 LOAD_METHOD 2 ( upper )					  
							      106 CALL_METHOD 0						    106 CALL_METHOD 0						  
							      108 BINARY_ADD						    108 BINARY_ADD						  
							      110 STORE_FAST 2 ( s1 )					    110 STORE_FAST 2 ( s1 )					  
							      								    								  
							      12 >> 112 LOAD_FAST 3 ( i )				    12 >> 112 LOAD_FAST 3 ( i )					  
							      114 LOAD_CONST 3 ( 1 )					    114 LOAD_CONST 3 ( 1 )					  
							      116 BINARY_ADD						    116 BINARY_ADD						  
							      118 STORE_FAST 3 ( i )					    118 STORE_FAST 3 ( i )					  
							      120 JUMP_ABSOLUTE 34					    								  
							      >> 122 POP_BLOCK						    13 >> 120 LOAD_FAST 2 ( s1 )				  
							      								    122 RETURN_VALUE NEW_LINE					  
							      13 >> 124 LOAD_FAST 2 ( s1 )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY				      EQUILIBRIUM_INDEX_OF_AN_ARRAY				    EQUILIBRIUM_INDEX_OF_AN_ARRAY				  EQUILIBRIUM_INDEX_OF_AN_ARRAY
--							      --							    --								  --
def equilibrium ( arr ) :				      Disassembly of <code object equilibrium at 0x7f33e2653ed0, fi Disassembly of <code object equilibrium at 0x7f2b0163dc90, fi script_not_found : None
    leftsum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    rightsum = 0					      2 STORE_FAST 1 ( leftsum )				    2 STORE_FAST 1 ( leftsum )					  
    n = len ( arr )					      								    								  
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	leftsum = 0					      6 STORE_FAST 2 ( rightsum )				    6 STORE_FAST 2 ( rightsum )					  
	rightsum = 0					      								    								  
	for j in range ( i ) :				      4 8 LOAD_GLOBAL 0 ( len )					    4 8 LOAD_GLOBAL 0 ( len )					  
	    leftsum += arr [ j ]			      10 LOAD_FAST 0 ( arr )					    10 LOAD_FAST 0 ( arr )					  
	for j in range ( i + 1 , n ) :			      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	    rightsum += arr [ j ]			      14 STORE_FAST 3 ( n )					    14 STORE_FAST 3 ( n )					  
	if leftsum == rightsum :			      								    								  
	    return i					      5 16 SETUP_LOOP 102 ( to 120 )				    5 16 SETUP_LOOP 92 ( to 114 )				  
    return - 1						      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_FAST 3 ( n )					    20 LOAD_FAST 3 ( n )					  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 90 ( to 118 )				    >> 26 FOR_ITER 80 ( to 112 )				  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      6 30 LOAD_CONST 1 ( 0 )					    6 30 LOAD_CONST 1 ( 0 )					  
							      32 STORE_FAST 1 ( leftsum )				    32 STORE_FAST 1 ( leftsum )					  
							      								    								  
							      7 34 LOAD_CONST 1 ( 0 )					    7 34 LOAD_CONST 1 ( 0 )					  
							      36 STORE_FAST 2 ( rightsum )				    36 STORE_FAST 2 ( rightsum )				  
							      								    								  
							      8 38 SETUP_LOOP 28 ( to 68 )				    8 38 SETUP_LOOP 30 ( to 78 )				  
							      40 LOAD_GLOBAL 1 ( range )				    40 LOAD_GLOBAL 1 ( range )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 GET_ITER						    46 GET_ITER							  
							      >> 48 FOR_ITER 16 ( to 66 )				    >> 48 FOR_ITER 18 ( to 76 )					  
							      50 STORE_FAST 5 ( j )					    50 STORE_FAST 5 ( j )					  
							      								    								  
							      9 52 LOAD_FAST 1 ( leftsum )				    9 52 LOAD_FAST 1 ( leftsum )				  
							      54 LOAD_FAST 0 ( arr )					    54 LOAD_FAST 0 ( arr )					  
							      56 LOAD_FAST 5 ( j )					    56 LOAD_FAST 5 ( j )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 1 ( leftsum )				    62 STORE_FAST 1 ( leftsum )					  
							      64 JUMP_ABSOLUTE 48					    64 JUMP_ABSOLUTE 48						  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      10 >> 68 SETUP_LOOP 34 ( to 104 )				    10 >> 68 SETUP_LOOP 34 ( to 110 )				  
							      70 LOAD_GLOBAL 1 ( range )				    70 LOAD_GLOBAL 1 ( range )					  
							      72 LOAD_FAST 4 ( i )					    72 LOAD_FAST 4 ( i )					  
							      74 LOAD_CONST 2 ( 1 )					    74 LOAD_CONST 2 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 3 ( n )					    78 LOAD_FAST 3 ( n )					  
							      80 CALL_FUNCTION 2					    80 CALL_FUNCTION 2						  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 16 ( to 102 )				    >> 84 FOR_ITER 18 ( to 108 )				  
							      86 STORE_FAST 5 ( j )					    86 STORE_FAST 5 ( j )					  
							      								    								  
							      11 88 LOAD_FAST 2 ( rightsum )				    11 88 LOAD_FAST 2 ( rightsum )				  
							      90 LOAD_FAST 0 ( arr )					    90 LOAD_FAST 0 ( arr )					  
							      92 LOAD_FAST 5 ( j )					    92 LOAD_FAST 5 ( j )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 INPLACE_ADD						    96 INPLACE_ADD						  
							      98 STORE_FAST 2 ( rightsum )				    98 STORE_FAST 2 ( rightsum )				  
							      100 JUMP_ABSOLUTE 84					    100 JUMP_ABSOLUTE 84					  
							      >> 102 POP_BLOCK						    >> 102 POP_BLOCK						  
							      								    								  
							      12 >> 104 LOAD_FAST 1 ( leftsum )				    12 >> 104 LOAD_FAST 1 ( leftsum )				  
							      106 LOAD_FAST 2 ( rightsum )				    106 LOAD_FAST 2 ( rightsum )				  
							      108 COMPARE_OP 2 ( == )					    108 COMPARE_OP 2 ( == )					  
							      110 POP_JUMP_IF_FALSE 26					    110 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      13 112 LOAD_FAST 4 ( i )					    13 112 LOAD_FAST 4 ( i )					  
							      114 RETURN_VALUE						    114 RETURN_VALUE						  
							      116 JUMP_ABSOLUTE 26					    >> 116 JUMP_ABSOLUTE 26					  
							      >> 118 POP_BLOCK						    >> 118 POP_BLOCK						  
							      								    								  
							      14 >> 120 LOAD_CONST 3 ( - 1 )				    14 120 LOAD_CONST 3 ( - 1 )					  
							      122 RETURN_VALUE NEW_LINE					    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PALINDROME_K_DIGITS					      NTH_PALINDROME_K_DIGITS					    NTH_PALINDROME_K_DIGITS					  NTH_PALINDROME_K_DIGITS
--							      --							    --								  --
def nthPalindrome ( n , k ) :				      Disassembly of <code object nthPalindrome at 0x7f33e2653f60,  Disassembly of <code object nthPalindrome at 0x7f2b0163dc90,  script_not_found : None
    if ( k & 1 ) :					      2 0 LOAD_FAST 1 ( k )					    2 0 LOAD_FAST 1 ( k )					  
	temp = k // 2					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    else :						      4 BINARY_AND						    4 BINARY_AND						  
	temp = k // 2 - 1				      6 POP_JUMP_IF_FALSE 18					    6 POP_JUMP_IF_FALSE 16					  
    palindrome = 10 ** temp				      								    								  
    palindrome = palindrome + n - 1			      3 8 LOAD_FAST 1 ( k )					    3 8 LOAD_FAST 1 ( k )					  
    print ( palindrome , end = "" )			      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
    if ( k & 1 ) :					      12 BINARY_FLOOR_DIVIDE					    12 BINARY_FLOOR_DIVIDE					  
	palindrome = palindrome // 10			      14 STORE_FAST 2 ( temp )					    14 STORE_FAST 2 ( temp )					  
    while ( palindrome ) :				      16 JUMP_FORWARD 12 ( to 30 )				    >> 16 JUMP_FORWARD 8 ( to 26 )				  
	print ( palindrome % 10 , end = "" )		      								    								  
	palindrome = palindrome // 10			      5 >> 18 LOAD_FAST 1 ( k )					    5 >> 18 LOAD_FAST 1 ( k )					  
							      20 LOAD_CONST 2 ( 2 )					    20 LOAD_CONST 2 ( 2 )					  
							      22 BINARY_FLOOR_DIVIDE					    22 BINARY_FLOOR_DIVIDE					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 1 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 STORE_FAST 2 ( temp )					    28 STORE_FAST 2 ( temp )					  
							      								    								  
							      6 >> 30 LOAD_CONST 3 ( 10 )				    6 >> 30 LOAD_CONST 3 ( 10 )					  
							      32 LOAD_FAST 2 ( temp )					    32 LOAD_FAST 2 ( temp )					  
							      34 BINARY_POWER						    34 BINARY_POWER						  
							      36 STORE_FAST 3 ( palindrome )				    36 STORE_FAST 3 ( palindrome )				  
							      								    								  
							      7 38 LOAD_FAST 3 ( palindrome )				    7 38 LOAD_FAST 3 ( palindrome )				  
							      40 LOAD_FAST 0 ( n )					    40 LOAD_FAST 0 ( n )					  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 1 ( 1 )					  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 STORE_FAST 3 ( palindrome )				    48 STORE_FAST 4 ( palindrome )				  
							      								    								  
							      8 50 LOAD_GLOBAL 0 ( print )				    8 50 LOAD_FAST 1 ( k )					  
							      52 LOAD_FAST 3 ( palindrome )				    52 LOAD_CONST 1 ( 1 )					  
							      54 LOAD_CONST 4 ( '' )					    54 BINARY_AND						  
							      56 LOAD_CONST 5 ( ( 'end' , ) )				    56 POP_JUMP_IF_FALSE 66					  
							      58 CALL_FUNCTION_KW 2					    								  
							      60 POP_TOP						    9 58 LOAD_FAST 3 ( palindrome )				  
							      								    60 LOAD_CONST 3 ( 10 )					  
							      9 62 LOAD_FAST 1 ( k )					    62 BINARY_FLOOR_DIVIDE					  
							      64 LOAD_CONST 1 ( 1 )					    64 STORE_FAST 3 ( palindrome )				  
							      66 BINARY_AND						    								  
							      68 POP_JUMP_IF_FALSE 78					    10 >> 66 SETUP_LOOP 38 ( to 108 )				  
							      								    >> 68 LOAD_FAST 3 ( palindrome )				  
							      10 70 LOAD_FAST 3 ( palindrome )				    70 CALL_FUNCTION 1						  
							      72 LOAD_CONST 3 ( 10 )					    72 POP_JUMP_IF_FALSE 94					  
							      74 BINARY_FLOOR_DIVIDE					    								  
							      76 STORE_FAST 3 ( palindrome )				    11 74 LOAD_GLOBAL 0 ( print )				  
							      								    76 LOAD_FAST 3 ( palindrome )				  
							      11 >> 78 SETUP_LOOP 32 ( to 112 )				    78 LOAD_CONST 3 ( 10 )					  
							      >> 80 LOAD_FAST 3 ( palindrome )				    80 BINARY_MODULO						  
							      82 POP_JUMP_IF_FALSE 110					    82 STORE_FAST 4 ( palindrome )				  
							      								    84 JUMP_ABSOLUTE 68						  
							      12 84 LOAD_GLOBAL 0 ( print )				    >> 86 POP_BLOCK						  
							      86 LOAD_FAST 3 ( palindrome )				    								  
							      88 LOAD_CONST 3 ( 10 )					    12 >> 88 SETUP_LOOP 34 ( to 126 )				  
							      90 BINARY_MODULO						    >> 90 LOAD_FAST 4 ( palindrome )				  
							      92 LOAD_CONST 4 ( '' )					    92 CALL_FUNCTION 1						  
							      94 LOAD_CONST 5 ( ( 'end' , ) )				    94 POP_JUMP_IF_FALSE 124					  
							      96 CALL_FUNCTION_KW 2					    								  
							      98 POP_TOP						    13 96 LOAD_GLOBAL 0 ( print )				  
							      								    98 LOAD_FAST 3 ( palindrome )				  
							      13 100 LOAD_FAST 3 ( palindrome )				    100 LOAD_CONST 3 ( 10 )					  
							      102 LOAD_CONST 3 ( 10 )					    102 BINARY_MODULO						  
							      104 BINARY_FLOOR_DIVIDE					    104 LOAD_CONST 4 ( '' )					  
							      106 STORE_FAST 3 ( palindrome )				    106 LOAD_CONST 5 ( ( 'end' , ) )				  
							      108 JUMP_ABSOLUTE 80					    108 CALL_FUNCTION_KW 2					  
							      >> 110 POP_BLOCK						    110 POP_TOP							  
							      >> 112 LOAD_CONST 0 ( None )				    								  
							      114 RETURN_VALUE NEW_LINE					    14 112 LOAD_FAST 3 ( palindrome )				  
							      								    114 LOAD_CONST 3 ( 10 )					  
							      								    116 BINARY_FLOOR_DIVIDE					  
							      								    118 STORE_FAST 3 ( palindrome )				  
							      								    >> 120 LOAD_CONST 0 ( None )				  
							      								    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			      CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			    CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			  CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND
--							      --							    --								  --
def calcAngle ( h , m ) :				      Disassembly of <code object calcAngle at 0x7f33e2644930, file Disassembly of <code object calcAngle at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    if ( h < 0 or m < 0 or h > 12 or m > 60 ) :		      2 0 LOAD_FAST 0 ( h )					    2 0 LOAD_FAST 0 ( h )					  "XLM/dis_script.py", line 60, in <module>	exec
	print ( 'Wrong input' )				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 38, in <module>	  Fi
    if ( h == 12 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  le "<dis>", line 2, in calcAngle TypeError: can't
	h = 0						      6 POP_JUMP_IF_TRUE 32					    6 POP_JUMP_IF_TRUE 24					  multiply sequence by non-int of type 'float'
    if ( m == 60 ) :					      8 LOAD_FAST 1 ( m )					    8 LOAD_FAST 1 ( m )						  
	m = 0						      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
    hour_angle = 0.5 * ( h * 60 + m )			      12 COMPARE_OP 0 ( < )					    12 COMPARE_OP 0 ( < )					  
    minute_angle = 6 * m				      14 POP_JUMP_IF_TRUE 32					    14 POP_JUMP_IF_TRUE 24					  
    angle = abs ( hour_angle - minute_angle )		      16 LOAD_FAST 0 ( h )					    16 LOAD_FAST 0 ( h )					  
    angle = min ( 360 - angle , angle )			      18 LOAD_CONST 2 ( 12 )					    18 LOAD_CONST 2 ( 12 )					  
    return angle					      20 COMPARE_OP 4 ( > )					    20 COMPARE_OP 4 ( > )					  
							      22 POP_JUMP_IF_TRUE 32					    22 POP_JUMP_IF_TRUE 32					  
							      24 LOAD_FAST 1 ( m )					    >> 24 LOAD_FAST 1 ( m )					  
							      26 LOAD_CONST 3 ( 60 )					    26 LOAD_CONST 2 ( 60 )					  
							      28 COMPARE_OP 4 ( > )					    28 COMPARE_OP 4 ( > )					  
							      30 POP_JUMP_IF_FALSE 40					    30 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      3 >> 32 LOAD_GLOBAL 0 ( print )				    3 >> 32 LOAD_GLOBAL 0 ( print )				  
							      34 LOAD_CONST 4 ( 'Wrong input' )				    34 LOAD_CONST 3 ( 'Wrong input' )				  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 POP_TOP						    38 POP_TOP							  
							      								    								  
							      4 >> 40 LOAD_FAST 0 ( h )					    4 >> 40 LOAD_FAST 0 ( h )					  
							      42 LOAD_CONST 2 ( 12 )					    42 LOAD_CONST 2 ( 12 )					  
							      44 COMPARE_OP 2 ( == )					    44 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 52					    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      5 48 LOAD_CONST 1 ( 0 )					    5 48 LOAD_CONST 1 ( 0 )					  
							      50 STORE_FAST 0 ( h )					    50 STORE_FAST 0 ( h )					  
							      								    								  
							      6 >> 52 LOAD_FAST 1 ( m )					    6 >> 52 LOAD_FAST 1 ( m )					  
							      54 LOAD_CONST 3 ( 60 )					    54 LOAD_CONST 2 ( 60 )					  
							      56 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_FALSE 64					    58 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      7 60 LOAD_CONST 1 ( 0 )					    7 60 LOAD_CONST 1 ( 0 )					  
							      62 STORE_FAST 1 ( m )					    62 STORE_FAST 1 ( m )					  
							      								    								  
							      8 >> 64 LOAD_CONST 5 ( 0.5 )				    8 >> 64 LOAD_CONST 4 ( 0.5 )				  
							      66 LOAD_FAST 0 ( h )					    66 LOAD_FAST 0 ( h )					  
							      68 LOAD_CONST 3 ( 60 )					    68 LOAD_CONST 2 ( 60 )					  
							      70 BINARY_MULTIPLY					    70 BINARY_MULTIPLY						  
							      72 LOAD_FAST 1 ( m )					    72 LOAD_FAST 1 ( m )					  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 BINARY_MULTIPLY					    76 BINARY_MULTIPLY						  
							      78 STORE_FAST 2 ( hour_angle )				    78 STORE_FAST 2 ( hour_angle )				  
							      								    								  
							      9 80 LOAD_CONST 6 ( 6 )					    9 80 LOAD_CONST 5 ( 6 )					  
							      82 LOAD_FAST 1 ( m )					    82 LOAD_FAST 1 ( m )					  
							      84 BINARY_MULTIPLY					    84 BINARY_MULTIPLY						  
							      86 STORE_FAST 3 ( minute_angle )				    86 STORE_FAST 3 ( minute_angle )				  
							      								    								  
							      10 88 LOAD_GLOBAL 1 ( abs )				    10 88 LOAD_GLOBAL 1 ( abs )					  
							      90 LOAD_FAST 2 ( hour_angle )				    90 LOAD_FAST 2 ( hour_angle )				  
							      92 LOAD_FAST 3 ( minute_angle )				    92 LOAD_FAST 3 ( minute_angle )				  
							      94 BINARY_SUBTRACT					    94 BINARY_SUBTRACT						  
							      96 CALL_FUNCTION 1					    96 CALL_FUNCTION 1						  
							      98 STORE_FAST 4 ( angle )					    98 STORE_FAST 4 ( angle )					  
							      								    								  
							      11 100 LOAD_GLOBAL 2 ( min )				    11 100 LOAD_GLOBAL 1 ( min )				  
							      102 LOAD_CONST 7 ( 360 )					    102 LOAD_CONST 6 ( 360 )					  
							      104 LOAD_FAST 4 ( angle )					    104 LOAD_FAST 4 ( angle )					  
							      106 BINARY_SUBTRACT					    106 BINARY_SUBTRACT						  
							      108 LOAD_FAST 4 ( angle )					    108 LOAD_FAST 4 ( angle )					  
							      110 CALL_FUNCTION 2					    110 CALL_FUNCTION 2						  
							      112 STORE_FAST 4 ( angle )				    112 STORE_FAST 4 ( angle )					  
							      								    								  
							      12 114 LOAD_FAST 4 ( angle )				    12 114 LOAD_FAST 4 ( angle )				  
							      116 RETURN_VALUE NEW_LINE					    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION			      SORTING_USING_TRIVIAL_HASH_FUNCTION			    SORTING_USING_TRIVIAL_HASH_FUNCTION				  SORTING_USING_TRIVIAL_HASH_FUNCTION
--							      --							    --								  --
def sortUsingHash ( a , n ) :				      Disassembly of <code object sortUsingHash at 0x7f33e2653f60,  Disassembly of <code object sortUsingHash at 0x7f2b01639660,  script_not_found : None
    Max = max ( a )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
    Hash = [ 0 ] * ( Max + 1 )				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
    for i in range ( 0 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	Hash [ a [ i ] ] += 1				      6 STORE_FAST 2 ( Max )					    6 STORE_FAST 2 ( Max )					  
    for i in range ( 0 , Max + 1 ) :			      								    								  
	if Hash [ i ] != 0 :				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    for j in range ( 0 , Hash [ i ] ) :		      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
		print ( i , end = " " )			      12 LOAD_FAST 2 ( Max )					    12 LOAD_FAST 2 ( Max )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_ADD						    16 BINARY_ADD						  
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 STORE_FAST 3 ( Hash )					    20 STORE_FAST 3 ( Hash )					  
							      								    								  
							      4 22 SETUP_LOOP 38 ( to 62 )				    4 22 SETUP_LOOP 40 ( to 60 )				  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_GLOBAL 1 ( range )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 24 ( to 60 )				    >> 34 FOR_ITER 28 ( to 58 )					  
							      36 STORE_FAST 4 ( i )					    36 STORE_FAST 4 ( i )					  
							      								    								  
							      5 38 LOAD_FAST 3 ( Hash )					    5 38 LOAD_FAST 3 ( Hash )					  
							      40 LOAD_FAST 0 ( a )					    40 LOAD_FAST 0 ( a )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 DUP_TOP_TWO						    46 DUP_TOP_TWO						  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      52 INPLACE_ADD						    52 INPLACE_ADD						  
							      54 ROT_THREE						    54 ROT_THREE						  
							      56 STORE_SUBSCR						    56 STORE_SUBSCR						  
							      58 JUMP_ABSOLUTE 34					    >> 58 JUMP_ABSOLUTE 34					  
							      >> 60 POP_BLOCK						    >> 60 POP_BLOCK						  
							      								    								  
							      6 >> 62 SETUP_LOOP 70 ( to 134 )				    6 62 SETUP_LOOP 92 ( to 146 )				  
							      64 LOAD_GLOBAL 1 ( range )				    64 LOAD_GLOBAL 1 ( range )					  
							      66 LOAD_CONST 1 ( 0 )					    66 LOAD_CONST 1 ( 0 )					  
							      68 LOAD_FAST 2 ( Max )					    68 LOAD_FAST 2 ( Max )					  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 CALL_FUNCTION 2					    74 CALL_FUNCTION 2						  
							      76 GET_ITER						    76 GET_ITER							  
							      >> 78 FOR_ITER 52 ( to 132 )				    >> 78 FOR_ITER 68 ( to 144 )				  
							      80 STORE_FAST 4 ( i )					    80 STORE_FAST 4 ( i )					  
							      								    								  
							      7 82 LOAD_FAST 3 ( Hash )					    7 82 LOAD_FAST 3 ( Hash )					  
							      84 LOAD_FAST 4 ( i )					    84 LOAD_FAST 4 ( i )					  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 LOAD_CONST 1 ( 0 )					    88 LOAD_CONST 1 ( 0 )					  
							      90 COMPARE_OP 3 ( != )					    90 COMPARE_OP 3 ( != )					  
							      92 POP_JUMP_IF_FALSE 78					    92 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      8 94 SETUP_LOOP 34 ( to 130 )				    8 94 SETUP_LOOP 56 ( to 142 )				  
							      96 LOAD_GLOBAL 1 ( range )				    96 LOAD_GLOBAL 1 ( range )					  
							      98 LOAD_CONST 1 ( 0 )					    98 LOAD_CONST 1 ( 0 )					  
							      100 LOAD_FAST 3 ( Hash )					    100 LOAD_FAST 3 ( Hash )					  
							      102 LOAD_FAST 4 ( i )					    102 LOAD_FAST 4 ( i )					  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 CALL_FUNCTION 2					    106 CALL_FUNCTION 2						  
							      108 GET_ITER						    108 GET_ITER						  
							      >> 110 FOR_ITER 16 ( to 128 )				    >> 110 FOR_ITER 32 ( to 140 )				  
							      112 STORE_FAST 5 ( j )					    112 STORE_FAST 5 ( j )					  
							      								    								  
							      9 114 LOAD_GLOBAL 2 ( print )				    9 114 LOAD_GLOBAL 2 ( print )				  
							      116 LOAD_FAST 4 ( i )					    116 LOAD_FAST 4 ( i )					  
							      118 LOAD_CONST 3 ( ' ' )					    118 LOAD_CONST 3 ( ' ' )					  
							      120 LOAD_CONST 4 ( ( 'end' , ) )				    120 LOAD_CONST 4 ( ( 'end' , ) )				  
							      122 CALL_FUNCTION_KW 2					    122 CALL_FUNCTION_KW 2					  
							      124 POP_TOP						    124 POP_TOP							  
							      126 JUMP_ABSOLUTE 110					    126 JUMP_ABSOLUTE 110					  
							      >> 128 POP_BLOCK						    >> 128 POP_BLOCK						  
							      >> 130 JUMP_ABSOLUTE 78					    >> 130 JUMP_ABSOLUTE 78					  
							      >> 132 POP_BLOCK						    >> 132 POP_BLOCK						  
							      >> 134 LOAD_CONST 0 ( None )				    >> 134 JUMP_ABSOLUTE 78					  
							      136 RETURN_VALUE NEW_LINE					    >> 136 POP_BLOCK						  
							      								    >> 138 LOAD_CONST 0 ( None )				  
							      								    140 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			      FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			    FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT				  FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT
--							      --							    --								  --
def possibleOrNot ( a1 , a2 , b1 , b2 , c1 , c2 ) :	      Disassembly of <code object possibleOrNot at 0x7f33e2644f60,  Disassembly of <code object possibleOrNot at 0x7f2b0163dc90,  script_not_found : None
    dis1 = ( pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 ) )      2 0 LOAD_GLOBAL 0 ( pow )					    2 0 LOAD_GLOBAL 0 ( pow )					  
    dis2 = ( pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 ) )      2 LOAD_FAST 2 ( b1 )					    2 LOAD_FAST 2 ( b1 )					  
    if ( dis1 != dis2 ) :				      4 LOAD_FAST 0 ( a1 )					    4 LOAD_FAST 0 ( a1 )					  
	print ( "No" )					      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
    elif ( b1 == ( ( a1 + c1 ) // 2.0 ) and b2 == ( ( a2 + c2 8 LOAD_CONST 1 ( 2 )					    8 LOAD_CONST 1 ( 2 )					  
	print ( "No" )					      10 CALL_FUNCTION 2					    10 CALL_FUNCTION 2						  
    else :						      12 LOAD_GLOBAL 0 ( pow )					    12 LOAD_GLOBAL 0 ( pow )					  
	print ( "Yes" )					      14 LOAD_FAST 3 ( b2 )					    14 LOAD_FAST 3 ( b2 )					  
							      16 LOAD_FAST 1 ( a2 )					    16 LOAD_FAST 1 ( a2 )					  
							      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
							      20 LOAD_CONST 1 ( 2 )					    20 LOAD_CONST 1 ( 2 )					  
							      22 CALL_FUNCTION 2					    22 CALL_FUNCTION 2						  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 STORE_FAST 6 ( dis1 )					    26 CALL_FUNCTION 1						  
							      								    28 STORE_FAST 6 ( dis1 )					  
							      3 28 LOAD_GLOBAL 0 ( pow )				    								  
							      30 LOAD_FAST 4 ( c1 )					    3 30 LOAD_GLOBAL 0 ( pow )					  
							      32 LOAD_FAST 2 ( b1 )					    32 LOAD_FAST 4 ( c1 )					  
							      34 BINARY_SUBTRACT					    34 LOAD_FAST 2 ( b1 )					  
							      36 LOAD_CONST 1 ( 2 )					    36 BINARY_SUBTRACT						  
							      38 CALL_FUNCTION 2					    38 LOAD_CONST 1 ( 2 )					  
							      40 LOAD_GLOBAL 0 ( pow )					    40 CALL_FUNCTION 2						  
							      42 LOAD_FAST 5 ( c2 )					    42 LOAD_GLOBAL 0 ( pow )					  
							      44 LOAD_FAST 3 ( b2 )					    44 LOAD_FAST 3 ( c2 )					  
							      46 BINARY_SUBTRACT					    46 LOAD_FAST 3 ( b2 )					  
							      48 LOAD_CONST 1 ( 2 )					    48 BINARY_SUBTRACT						  
							      50 CALL_FUNCTION 2					    50 LOAD_CONST 1 ( 2 )					  
							      52 BINARY_ADD						    52 CALL_FUNCTION 2						  
							      54 STORE_FAST 7 ( dis2 )					    54 BINARY_ADD						  
							      								    56 CALL_FUNCTION 1						  
							      4 56 LOAD_FAST 6 ( dis1 )					    58 STORE_FAST 7 ( dis2 )					  
							      58 LOAD_FAST 7 ( dis2 )					    								  
							      60 COMPARE_OP 3 ( != )					    4 60 LOAD_FAST 5 ( dis1 )					  
							      62 POP_JUMP_IF_FALSE 74					    62 LOAD_FAST 6 ( dis2 )					  
							      								    64 COMPARE_OP 3 ( != )					  
							      5 64 LOAD_GLOBAL 1 ( print )				    66 POP_JUMP_IF_FALSE 80					  
							      66 LOAD_CONST 2 ( 'No' )					    								  
							      68 CALL_FUNCTION 1					    5 68 LOAD_GLOBAL 1 ( print )				  
							      70 POP_TOP						    70 LOAD_CONST 2 ( 'No' )					  
							      72 JUMP_FORWARD 50 ( to 124 )				    72 CALL_FUNCTION 1						  
							      								    74 POP_TOP							  
							      6 >> 74 LOAD_FAST 2 ( b1 )				    76 JUMP_FORWARD 54 ( to 124 )				  
							      76 LOAD_FAST 0 ( a1 )					    								  
							      78 LOAD_FAST 4 ( c1 )					    6 >> 78 LOAD_FAST 2 ( b1 )					  
							      80 BINARY_ADD						    80 LOAD_FAST 0 ( a1 )					  
							      82 LOAD_CONST 3 ( 2.0 )					    82 LOAD_FAST 4 ( c1 )					  
							      84 BINARY_FLOOR_DIVIDE					    84 BINARY_ADD						  
							      86 COMPARE_OP 2 ( == )					    86 LOAD_CONST 3 ( 2.0 )					  
							      88 POP_JUMP_IF_FALSE 116					    88 BINARY_FLOOR_DIVIDE					  
							      90 LOAD_FAST 3 ( b2 )					    90 COMPARE_OP 2 ( == )					  
							      92 LOAD_FAST 1 ( a2 )					    92 POP_JUMP_IF_FALSE 116					  
							      94 LOAD_FAST 5 ( c2 )					    94 LOAD_FAST 3 ( b2 )					  
							      96 BINARY_ADD						    96 LOAD_FAST 1 ( a2 )					  
							      98 LOAD_CONST 3 ( 2.0 )					    98 LOAD_FAST 3 ( c2 )					  
							      100 BINARY_FLOOR_DIVIDE					    100 BINARY_ADD						  
							      102 COMPARE_OP 2 ( == )					    102 LOAD_CONST 3 ( 2.0 )					  
							      104 POP_JUMP_IF_FALSE 116					    104 BINARY_FLOOR_DIVIDE					  
							      								    106 COMPARE_OP 2 ( == )					  
							      7 106 LOAD_GLOBAL 1 ( print )				    108 POP_JUMP_IF_FALSE 116					  
							      108 LOAD_CONST 2 ( 'No' )					    								  
							      110 CALL_FUNCTION 1					    7 110 LOAD_GLOBAL 1 ( print )				  
							      112 POP_TOP						    112 LOAD_CONST 2 ( 'No' )					  
							      114 JUMP_FORWARD 8 ( to 124 )				    114 CALL_FUNCTION 1						  
							      								    116 POP_TOP							  
							      9 >> 116 LOAD_GLOBAL 1 ( print )				    118 JUMP_FORWARD 8 ( to 124 )				  
							      118 LOAD_CONST 4 ( 'Yes' )				    								  
							      120 CALL_FUNCTION 1					    9 >> 120 LOAD_GLOBAL 1 ( print )				  
							      122 POP_TOP						    122 LOAD_CONST 2 ( 'Yes' )					  
							      >> 124 LOAD_CONST 0 ( None )				    124 CALL_FUNCTION 1						  
							      126 RETURN_VALUE NEW_LINE					    126 POP_TOP							  
							      								    >> 128 LOAD_CONST 0 ( None )				  
							      								    130 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	      MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	    MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	  MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION
--							      --							    --								  --
def findPlatform ( arr , dep , n ) :			      Disassembly of <code object findPlatform at 0x7f33e26494b0, f Disassembly of <code object findPlatform at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    dep.sort ( )					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 43, in <module>	  Fi
    plat_needed = 1					      4 CALL_METHOD 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in findPlatform IndexError: li
    result = 1						      6 POP_TOP							    6 POP_TOP							  st index out of range
    i = 1						      								    								  
    j = 0						      3 8 LOAD_FAST 1 ( dep )					    3 8 LOAD_FAST 1 ( dep )					  
    while ( i < n and j < n ) :				      10 LOAD_METHOD 0 ( sort )					    10 LOAD_METHOD 0 ( sort )					  
	if ( arr [ i ] < dep [ j ] ) :			      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
	    plat_needed += 1				      14 POP_TOP						    14 POP_TOP							  
	    i += 1					      								    								  
	    if ( plat_needed > result ) :		      4 16 LOAD_CONST 1 ( 1 )					    4 16 LOAD_CONST 1 ( 1 )					  
		result = plat_needed			      18 STORE_FAST 3 ( plat_needed )				    18 STORE_FAST 3 ( plat_needed )				  
	else :						      								    								  
	    plat_needed -= 1				      5 20 LOAD_CONST 1 ( 1 )					    5 20 LOAD_CONST 1 ( 1 )					  
	    j += 1					      22 STORE_FAST 4 ( result )				    22 STORE_FAST 4 ( result )					  
    return result					      								    								  
							      6 24 LOAD_CONST 1 ( 1 )					    6 24 LOAD_CONST 1 ( 1 )					  
							      26 STORE_FAST 5 ( i )					    26 STORE_FAST 5 ( i )					  
							      								    								  
							      7 28 LOAD_CONST 2 ( 0 )					    7 28 LOAD_CONST 2 ( 0 )					  
							      30 STORE_FAST 6 ( j )					    30 STORE_FAST 6 ( j )					  
							      								    								  
							      8 32 SETUP_LOOP 82 ( to 116 )				    8 32 SETUP_LOOP 76 ( to 106 )				  
							      >> 34 LOAD_FAST 5 ( i )					    >> 34 LOAD_FAST 5 ( i )					  
							      36 LOAD_FAST 2 ( n )					    36 LOAD_FAST 2 ( n )					  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 0 ( < )					  
							      40 POP_JUMP_IF_FALSE 114					    40 POP_JUMP_IF_FALSE 104					  
							      42 LOAD_FAST 6 ( j )					    42 LOAD_FAST 6 ( j )					  
							      44 LOAD_FAST 2 ( n )					    44 LOAD_FAST 2 ( n )					  
							      46 COMPARE_OP 0 ( < )					    46 COMPARE_OP 0 ( < )					  
							      48 POP_JUMP_IF_FALSE 114					    48 POP_JUMP_IF_FALSE 104					  
							      								    								  
							      9 50 LOAD_FAST 0 ( arr )					    9 50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 5 ( i )					    52 LOAD_FAST 5 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 1 ( dep )					    56 LOAD_FAST 1 ( dep )					  
							      58 LOAD_FAST 6 ( j )					    58 LOAD_FAST 6 ( j )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 COMPARE_OP 0 ( < )					    62 COMPARE_OP 0 ( < )					  
							      64 POP_JUMP_IF_FALSE 96					    64 POP_JUMP_IF_FALSE 104					  
							      								    								  
							      10 66 LOAD_FAST 3 ( plat_needed )				    10 66 LOAD_FAST 3 ( plat_needed )				  
							      68 LOAD_CONST 1 ( 1 )					    68 LOAD_CONST 1 ( 1 )					  
							      70 INPLACE_ADD						    70 INPLACE_ADD						  
							      72 STORE_FAST 3 ( plat_needed )				    72 STORE_FAST 3 ( plat_needed )				  
							      								    								  
							      11 74 LOAD_FAST 5 ( i )					    11 74 LOAD_FAST 5 ( i )					  
							      76 LOAD_CONST 1 ( 1 )					    76 LOAD_CONST 1 ( 1 )					  
							      78 INPLACE_ADD						    78 INPLACE_ADD						  
							      80 STORE_FAST 5 ( i )					    80 STORE_FAST 5 ( i )					  
							      								    								  
							      12 82 LOAD_FAST 3 ( plat_needed )				    12 82 LOAD_FAST 3 ( plat_needed )				  
							      84 LOAD_FAST 4 ( result )					    84 LOAD_FAST 4 ( result )					  
							      86 COMPARE_OP 4 ( > )					    86 COMPARE_OP 4 ( > )					  
							      88 POP_JUMP_IF_FALSE 112					    88 POP_JUMP_IF_FALSE 98					  
							      								    								  
							      13 90 LOAD_FAST 3 ( plat_needed )				    13 90 LOAD_FAST 3 ( plat_needed )				  
							      92 STORE_FAST 4 ( result )				    92 STORE_FAST 4 ( result )					  
							      94 JUMP_ABSOLUTE 34					    94 JUMP_ABSOLUTE 34						  
							      								    96 JUMP_FORWARD 12 ( to 110 )				  
							      15 >> 96 LOAD_FAST 3 ( plat_needed )			    								  
							      98 LOAD_CONST 1 ( 1 )					    15 >> 98 LOAD_FAST 3 ( plat_needed )			  
							      100 INPLACE_SUBTRACT					    100 LOAD_CONST 1 ( 1 )					  
							      102 STORE_FAST 3 ( plat_needed )				    102 INPLACE_SUBTRACT					  
							      								    >> 104 STORE_FAST 3 ( plat_needed )				  
							      16 104 LOAD_FAST 6 ( j )					    								  
							      106 LOAD_CONST 1 ( 1 )					    16 106 LOAD_FAST 6 ( j )					  
							      108 INPLACE_ADD						    108 LOAD_CONST 1 ( 1 )					  
							      110 STORE_FAST 6 ( j )					    110 INPLACE_ADD						  
							      >> 112 JUMP_ABSOLUTE 34					    112 STORE_FAST 6 ( j )					  
							      >> 114 POP_BLOCK						    								  
							      								    17 114 LOAD_FAST 6 ( j )					  
							      17 >> 116 LOAD_FAST 4 ( result )				    116 LOAD_CONST 1 ( 1 )					  
							      118 RETURN_VALUE NEW_LINE					    118 INPLACE_ADD						  
							      								    120 STORE_FAST 6 ( j )					  
							      								    								  
							      								    18 122 LOAD_FAST 6 ( j )					  
							      								    124 LOAD_CONST 1 ( 1 )					  
							      								    126 INPLACE_ADD						  
							      								    128 STORE_FAST 6 ( j )					  
							      								    								  
							      								    19 130 LOAD_FAST 6 ( j )					  
							      								    132 LOAD_CONST 1 ( 1 )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 6 ( j )					  
							      								    138 JUMP_ABSOLUTE 34					  
							      								    >> 140 POP_BLOCK						  
							      								    								  
							      								    20 >> 142 LOAD_FAST 4 ( result )				  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY     FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	    FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY
--							      --							    --								  --
def printPrevSmaller ( arr , n ) :			      Disassembly of <code object printPrevSmaller at 0x7f33e264493 Disassembly of <code object printPrevSmaller at 0x7f2b0163dc9 script_not_found : None
    print ( "_, " , end = "" )				      2 0 LOAD_GLOBAL 0 ( print )				    2 0 LOAD_GLOBAL 0 ( print )					  
    for i in range ( 1 , n ) :				      2 LOAD_CONST 1 ( '_, ' )					    2 LOAD_CONST 1 ( '_, ' )					  
	for j in range ( i - 1 , - 2 , - 1 ) :		      4 LOAD_CONST 2 ( '' )					    4 LOAD_CONST 2 ( '' )					  
	    if ( arr [ j ] < arr [ i ] ) :		      6 LOAD_CONST 3 ( ( 'end' , ) )				    6 LOAD_CONST 3 ( ( 'end' , ) )				  
		print ( arr [ j ] , ", " , end = "" )	      8 CALL_FUNCTION_KW 2					    8 CALL_FUNCTION_KW 2					  
		break					      10 POP_TOP						    10 POP_TOP							  
	if ( j == - 1 ) :				      								    								  
	    print ( "_, " , end = "" )			      3 12 SETUP_LOOP 100 ( to 114 )				    3 12 SETUP_LOOP 80 ( to 96 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 4 ( 1 )					    16 LOAD_CONST 4 ( 1 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 86 ( to 112 )				    >> 24 FOR_ITER 62 ( to 94 )					  
							      26 STORE_FAST 2 ( i )					    26 STORE_FAST 2 ( i )					  
							      								    								  
							      4 28 SETUP_LOOP 60 ( to 90 )				    4 28 SETUP_LOOP 54 ( to 86 )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_FAST 2 ( i )					    32 LOAD_FAST 2 ( i )					  
							      34 LOAD_CONST 4 ( 1 )					    34 LOAD_CONST 4 ( 1 )					  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBTRACT						  
							      38 LOAD_CONST 5 ( - 2 )					    38 LOAD_CONST 5 ( - 2 )					  
							      40 LOAD_CONST 6 ( - 1 )					    40 LOAD_CONST 5 ( - 1 )					  
							      42 CALL_FUNCTION 3					    42 CALL_FUNCTION 3						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 40 ( to 88 )				    >> 46 FOR_ITER 28 ( to 84 )					  
							      48 STORE_FAST 3 ( j )					    48 STORE_FAST 3 ( j )					  
							      								    								  
							      5 50 LOAD_FAST 0 ( arr )					    5 50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 3 ( j )					    52 LOAD_FAST 3 ( j )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 2 ( i )					    58 LOAD_FAST 2 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 COMPARE_OP 0 ( < )					    62 COMPARE_OP 0 ( < )					  
							      64 POP_JUMP_IF_FALSE 46					    64 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      6 66 LOAD_GLOBAL 0 ( print )				    6 66 LOAD_GLOBAL 0 ( print )				  
							      68 LOAD_FAST 0 ( arr )					    68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 3 ( j )					    70 LOAD_FAST 3 ( j )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_CONST 7 ( ', ' )					    74 LOAD_CONST 6 ( ', ' )					  
							      76 LOAD_CONST 2 ( '' )					    76 LOAD_CONST 2 ( '' )					  
							      78 LOAD_CONST 3 ( ( 'end' , ) )				    78 LOAD_CONST 3 ( ( 'end' , ) )				  
							      80 CALL_FUNCTION_KW 3					    80 CALL_FUNCTION_KW 3					  
							      82 POP_TOP						    82 POP_TOP							  
							      								    								  
							      7 84 BREAK_LOOP						    7 84 BREAK_LOOP						  
							      86 JUMP_ABSOLUTE 46					    86 JUMP_ABSOLUTE 46						  
							      >> 88 POP_BLOCK						    >> 88 POP_BLOCK						  
							      								    >> 90 JUMP_ABSOLUTE 24					  
							      8 >> 90 LOAD_FAST 3 ( j )					    >> 92 POP_BLOCK						  
							      92 LOAD_CONST 6 ( - 1 )					    								  
							      94 COMPARE_OP 2 ( == )					    8 >> 94 LOAD_FAST 3 ( j )					  
							      96 POP_JUMP_IF_FALSE 24					    96 LOAD_CONST 5 ( - 1 )					  
							      								    98 COMPARE_OP 2 ( == )					  
							      9 98 LOAD_GLOBAL 0 ( print )				    100 POP_JUMP_IF_FALSE 112					  
							      100 LOAD_CONST 1 ( '_, ' )				    								  
							      102 LOAD_CONST 2 ( '' )					    9 102 LOAD_GLOBAL 0 ( print )				  
							      104 LOAD_CONST 3 ( ( 'end' , ) )				    104 LOAD_CONST 1 ( '_, ' )					  
							      106 CALL_FUNCTION_KW 2					    106 LOAD_CONST 2 ( '' )					  
							      108 POP_TOP						    108 LOAD_CONST 3 ( ( 'end' , ) )				  
							      110 JUMP_ABSOLUTE 24					    110 CALL_FUNCTION_KW 2					  
							      >> 112 POP_BLOCK						    112 POP_TOP							  
							      >> 114 LOAD_CONST 0 ( None )				    114 JUMP_ABSOLUTE 24					  
							      116 RETURN_VALUE NEW_LINE					    >> 116 POP_BLOCK						  
							      								    >> 118 LOAD_CONST 0 ( None )				  
							      								    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ARRI					      REARRANGE_ARRAY_ARRI					    REARRANGE_ARRAY_ARRI					  REARRANGE_ARRAY_ARRI
--							      --							    --								  --
def fix ( A , len ) :					      Disassembly of <code object fix at 0x7f33e2653f60, file "<dis Disassembly of <code object fix at 0x7f2b0163dc90, file "<dis script_not_found : None
    for i in range ( 0 , len ) :			      2 0 SETUP_LOOP 128 ( to 130 )				    2 0 SETUP_LOOP 118 ( to 120 )				  
	if ( A [ i ] != - 1 and A [ i ] != i ) :	      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    x = A [ i ] ;				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
	    while ( A [ x ] != - 1 and A [ x ] != x ) :	      6 LOAD_FAST 1 ( len )					    6 LOAD_FAST 1 ( len )					  
		y = A [ x ]				      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
		A [ x ] = x				      10 GET_ITER						    10 GET_ITER							  
		x = y					      >> 12 FOR_ITER 114 ( to 128 )				    >> 12 FOR_ITER 106 ( to 118 )				  
	    A [ x ] = x ;				      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
	    if ( A [ i ] != i ) :			      								    								  
		A [ i ] = - 1 ;				      3 16 LOAD_FAST 0 ( A )					    3 16 LOAD_FAST 0 ( A )					  
							      18 LOAD_FAST 2 ( i )					    18 LOAD_FAST 2 ( i )					  
							      20 BINARY_SUBSCR						    20 BINARY_SUBSCR						  
							      22 LOAD_CONST 2 ( - 1 )					    22 LOAD_CONST 2 ( - 1 )					  
							      24 COMPARE_OP 3 ( != )					    24 COMPARE_OP 3 ( != )					  
							      26 POP_JUMP_IF_FALSE 12					    26 POP_JUMP_IF_FALSE 12					  
							      28 LOAD_FAST 0 ( A )					    28 LOAD_FAST 0 ( A )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 2 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 2 ( i )					    34 LOAD_FAST 2 ( i )					  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 12					    38 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      4 40 LOAD_FAST 0 ( A )					    4 40 LOAD_FAST 0 ( A )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 STORE_FAST 3 ( x )					    46 STORE_FAST 3 ( x )					  
							      								    								  
							      5 48 SETUP_LOOP 48 ( to 98 )				    5 48 SETUP_LOOP 76 ( to 116 )				  
							      >> 50 LOAD_FAST 0 ( A )					    >> 50 LOAD_FAST 0 ( A )					  
							      52 LOAD_FAST 3 ( x )					    52 LOAD_FAST 3 ( x )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 2 ( - 1 )					    56 LOAD_CONST 2 ( - 1 )					  
							      58 COMPARE_OP 3 ( != )					    58 COMPARE_OP 3 ( != )					  
							      60 POP_JUMP_IF_FALSE 96					    60 POP_JUMP_IF_FALSE 114					  
							      62 LOAD_FAST 0 ( A )					    62 LOAD_FAST 0 ( A )					  
							      64 LOAD_FAST 3 ( x )					    64 LOAD_FAST 3 ( x )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 3 ( x )					    68 LOAD_FAST 3 ( x )					  
							      70 COMPARE_OP 3 ( != )					    70 COMPARE_OP 3 ( != )					  
							      72 POP_JUMP_IF_FALSE 96					    72 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      6 74 LOAD_FAST 0 ( A )					    6 74 LOAD_FAST 0 ( A )					  
							      76 LOAD_FAST 3 ( x )					    76 LOAD_FAST 3 ( x )					  
							      78 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      80 STORE_FAST 4 ( y )					    80 STORE_FAST 4 ( y )					  
							      								    								  
							      7 82 LOAD_FAST 3 ( x )					    7 82 LOAD_FAST 3 ( x )					  
							      84 LOAD_FAST 0 ( A )					    84 LOAD_FAST 0 ( A )					  
							      86 LOAD_FAST 3 ( x )					    86 LOAD_FAST 3 ( x )					  
							      88 STORE_SUBSCR						    88 STORE_SUBSCR						  
							      								    								  
							      8 90 LOAD_FAST 4 ( y )					    8 90 LOAD_FAST 4 ( y )					  
							      92 STORE_FAST 3 ( x )					    92 STORE_FAST 3 ( x )					  
							      94 JUMP_ABSOLUTE 50					    94 JUMP_ABSOLUTE 50						  
							      >> 96 POP_BLOCK						    >> 96 POP_BLOCK						  
							      								    								  
							      9 >> 98 LOAD_FAST 3 ( x )					    9 >> 98 LOAD_FAST 3 ( x )					  
							      100 LOAD_FAST 0 ( A )					    100 LOAD_FAST 0 ( A )					  
							      102 LOAD_FAST 3 ( x )					    102 LOAD_FAST 2 ( i )					  
							      104 STORE_SUBSCR						    104 BINARY_SUBSCR						  
							      								    106 LOAD_FAST 2 ( i )					  
							      10 106 LOAD_FAST 0 ( A )					    108 COMPARE_OP 3 ( != )					  
							      108 LOAD_FAST 2 ( i )					    110 POP_JUMP_IF_FALSE 12					  
							      110 BINARY_SUBSCR						    								  
							      112 LOAD_FAST 2 ( i )					    10 112 LOAD_CONST 2 ( - 1 )					  
							      114 COMPARE_OP 3 ( != )					    114 LOAD_FAST 0 ( A )					  
							      116 POP_JUMP_IF_FALSE 12					    116 LOAD_FAST 2 ( i )					  
							      								    118 STORE_SUBSCR						  
							      11 118 LOAD_CONST 2 ( - 1 )				    120 JUMP_ABSOLUTE 50					  
							      120 LOAD_FAST 0 ( A )					    >> 122 POP_BLOCK						  
							      122 LOAD_FAST 2 ( i )					    >> 124 LOAD_CONST 0 ( None )				  
							      124 STORE_SUBSCR						    126 RETURN_VALUE NEW_LINE					  
							      126 JUMP_ABSOLUTE 12					    								  
							      >> 128 POP_BLOCK						    								  
							      >> 130 LOAD_CONST 0 ( None )				    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT	      REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		    REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		  REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT
--							      --							    --								  --
def solve ( dp , a , low , high , turn ) :		      Disassembly of <code object solve at 0x7f33e2644f60, file "<d Disassembly of <code object solve at 0x7f2b0164d930, file "<d script_not_found : None
    if ( low == high ) :				      2 0 LOAD_FAST 2 ( low )					    2 0 LOAD_FAST 2 ( low )					  
	return a [ low ] * turn				      2 LOAD_FAST 3 ( high )					    2 LOAD_FAST 3 ( high )					  
    if ( dp [ low ] [ high ] != 0 ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return dp [ low ] [ high ]			      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 20					  
    dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp 								    								  
    return dp [ low ] [ high ]				      3 8 LOAD_FAST 1 ( a )					    3 8 LOAD_FAST 1 ( a )					  
							      10 LOAD_FAST 2 ( low )					    10 LOAD_FAST 2 ( low )					  
							      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
							      14 LOAD_FAST 4 ( turn )					    14 LOAD_FAST 3 ( turn )					  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      4 >> 20 LOAD_FAST 0 ( dp )				    4 >> 20 LOAD_FAST 0 ( dp )					  
							      22 LOAD_FAST 2 ( low )					    22 LOAD_FAST 2 ( low )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 3 ( high )					    26 LOAD_FAST 3 ( high )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 1 ( 0 )					  
							      32 COMPARE_OP 3 ( != )					    32 COMPARE_OP 3 ( != )					  
							      34 POP_JUMP_IF_FALSE 48					    34 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      5 36 LOAD_FAST 0 ( dp )					    5 36 LOAD_FAST 0 ( dp )					  
							      38 LOAD_FAST 2 ( low )					    38 LOAD_FAST 2 ( low )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 3 ( high )					    42 LOAD_FAST 3 ( high )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      6 >> 48 LOAD_GLOBAL 0 ( max )				    6 >> 48 LOAD_GLOBAL 0 ( max )				  
							      50 LOAD_FAST 1 ( a )					    50 LOAD_FAST 1 ( a )					  
							      52 LOAD_FAST 2 ( low )					    52 LOAD_FAST 2 ( low )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 4 ( turn )					    56 LOAD_FAST 3 ( turn )					  
							      58 BINARY_MULTIPLY					    58 LOAD_FAST 0 ( dp )					  
							      60 LOAD_GLOBAL 1 ( solve )				    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 0 ( dp )					    62 BINARY_MULTIPLY						  
							      64 LOAD_FAST 1 ( a )					    64 LOAD_GLOBAL 1 ( solve )					  
							      66 LOAD_FAST 2 ( low )					    66 LOAD_FAST 0 ( dp )					  
							      68 LOAD_CONST 2 ( 1 )					    68 LOAD_FAST 1 ( a )					  
							      70 BINARY_ADD						    70 LOAD_FAST 2 ( low )					  
							      72 LOAD_FAST 3 ( high )					    72 LOAD_CONST 2 ( 1 )					  
							      74 LOAD_FAST 4 ( turn )					    74 BINARY_ADD						  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_FAST 3 ( high )					  
							      78 BINARY_ADD						    78 LOAD_FAST 4 ( turn )					  
							      80 CALL_FUNCTION 5					    80 LOAD_CONST 2 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 LOAD_FAST 1 ( a )					    84 CALL_FUNCTION 5						  
							      86 LOAD_FAST 3 ( high )					    86 LOAD_FAST 1 ( a )					  
							      88 BINARY_SUBSCR						    88 LOAD_FAST 3 ( high )					  
							      90 LOAD_FAST 4 ( turn )					    90 BINARY_SUBSCR						  
							      92 BINARY_MULTIPLY					    92 LOAD_FAST 4 ( turn )					  
							      94 LOAD_GLOBAL 1 ( solve )				    94 BINARY_MULTIPLY						  
							      96 LOAD_FAST 0 ( dp )					    96 BINARY_ADD						  
							      98 LOAD_FAST 1 ( a )					    98 LOAD_GLOBAL 1 ( solve )					  
							      100 LOAD_FAST 2 ( low )					    100 LOAD_FAST 0 ( dp )					  
							      102 LOAD_FAST 3 ( high )					    102 LOAD_FAST 1 ( a )					  
							      104 LOAD_CONST 2 ( 1 )					    104 LOAD_FAST 2 ( low )					  
							      106 BINARY_SUBTRACT					    106 LOAD_FAST 3 ( high )					  
							      108 LOAD_FAST 4 ( turn )					    108 LOAD_CONST 2 ( 1 )					  
							      110 LOAD_CONST 2 ( 1 )					    110 BINARY_SUBTRACT						  
							      112 BINARY_ADD						    112 LOAD_FAST 4 ( turn )					  
							      114 CALL_FUNCTION 5					    114 LOAD_CONST 2 ( 1 )					  
							      116 BINARY_ADD						    116 BINARY_ADD						  
							      118 CALL_FUNCTION 2					    118 CALL_FUNCTION 5						  
							      120 LOAD_FAST 0 ( dp )					    120 BINARY_ADD						  
							      122 LOAD_FAST 2 ( low )					    122 CALL_FUNCTION 1						  
							      124 BINARY_SUBSCR						    124 BINARY_ADD						  
							      126 LOAD_FAST 3 ( high )					    126 LOAD_FAST 1 ( a )					  
							      128 STORE_SUBSCR						    128 LOAD_FAST 3 ( high )					  
							      								    130 BINARY_SUBSCR						  
							      7 130 LOAD_FAST 0 ( dp )					    132 LOAD_FAST 4 ( turn )					  
							      132 LOAD_FAST 2 ( low )					    134 BINARY_MULTIPLY						  
							      134 BINARY_SUBSCR						    136 LOAD_GLOBAL 1 ( solve )					  
							      136 LOAD_FAST 3 ( high )					    138 LOAD_FAST 0 ( dp )					  
							      138 BINARY_SUBSCR						    140 LOAD_FAST 1 ( a )					  
							      140 RETURN_VALUE NEW_LINE					    142 LOAD_FAST 2 ( low )					  
							      								    144 LOAD_FAST 3 ( high )					  
							      								    146 LOAD_CONST 2 ( 1 )					  
							      								    148 BINARY_SUBTRACT						  
							      								    150 LOAD_FAST 4 ( turn )					  
							      								    152 LOAD_CONST 2 ( 1 )					  
							      								    154 BINARY_ADD						  
							      								    156 CALL_FUNCTION 5						  
							      								    158 BINARY_ADD						  
							      								    160 CALL_FUNCTION 1						  
							      								    162 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY
--							      --							    --								  --
def findPair ( arr , n ) :				      Disassembly of <code object findPair at 0x7f33e2644930, file  Disassembly of <code object findPair at 0x7f2b0163dc90, file  script_not_found : None
    found = False					      2 0 LOAD_CONST 1 ( False )				    2 0 LOAD_CONST 1 ( False )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( found )					    2 STORE_FAST 2 ( found )					  
	for j in range ( i + 1 , n ) :			      								    								  
	    for k in range ( 0 , n ) :			      3 4 SETUP_LOOP 108 ( to 114 )				    3 4 SETUP_LOOP 120 ( to 126 )				  
		if ( arr [ i ] + arr [ j ] == arr [ k ] ) :   6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
		    print ( arr [ i ] , arr [ j ] )	      8 LOAD_CONST 2 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
		    found = True			      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
    if ( found == False ) :				      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
	print ( "Not exist" )				      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 94 ( to 112 )				    >> 16 FOR_ITER 106 ( to 124 )				  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 88 ( to 110 )				    4 20 SETUP_LOOP 94 ( to 122 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_CONST 3 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 CALL_FUNCTION 2					    32 CALL_FUNCTION 2						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 70 ( to 108 )				    >> 36 FOR_ITER 80 ( to 120 )				  
							      38 STORE_FAST 4 ( j )					    38 STORE_FAST 4 ( j )					  
							      								    								  
							      5 40 SETUP_LOOP 64 ( to 106 )				    5 40 SETUP_LOOP 62 ( to 112 )				  
							      42 LOAD_GLOBAL 0 ( range )				    42 LOAD_GLOBAL 0 ( range )					  
							      44 LOAD_CONST 2 ( 0 )					    44 LOAD_CONST 2 ( 0 )					  
							      46 LOAD_FAST 1 ( n )					    46 LOAD_FAST 1 ( n )					  
							      48 CALL_FUNCTION 2					    48 CALL_FUNCTION 2						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 50 ( to 104 )				    >> 52 FOR_ITER 46 ( to 110 )				  
							      54 STORE_FAST 5 ( k )					    54 STORE_FAST 5 ( k )					  
							      								    								  
							      6 56 LOAD_FAST 0 ( arr )					    6 56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 3 ( i )					    58 LOAD_FAST 3 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 0 ( arr )					  
							      64 LOAD_FAST 4 ( j )					    64 LOAD_FAST 4 ( j )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 BINARY_ADD						    68 BINARY_ADD						  
							      70 LOAD_FAST 0 ( arr )					    70 LOAD_FAST 0 ( arr )					  
							      72 LOAD_FAST 5 ( k )					    72 LOAD_FAST 5 ( k )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 COMPARE_OP 2 ( == )					    76 COMPARE_OP 2 ( == )					  
							      78 POP_JUMP_IF_FALSE 52					    78 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 80 LOAD_GLOBAL 1 ( print )				    7 80 LOAD_GLOBAL 1 ( print )				  
							      82 LOAD_FAST 0 ( arr )					    82 LOAD_FAST 0 ( arr )					  
							      84 LOAD_FAST 3 ( i )					    84 LOAD_FAST 3 ( i )					  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 LOAD_FAST 0 ( arr )					    88 LOAD_FAST 0 ( arr )					  
							      90 LOAD_FAST 4 ( j )					    90 LOAD_FAST 4 ( j )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 CALL_FUNCTION 2					    94 CALL_FUNCTION 2						  
							      96 POP_TOP						    96 POP_TOP							  
							      								    								  
							      8 98 LOAD_CONST 4 ( True )				    8 98 LOAD_CONST 4 ( True )					  
							      100 STORE_FAST 2 ( found )				    100 STORE_FAST 2 ( found )					  
							      102 JUMP_ABSOLUTE 52					    102 JUMP_ABSOLUTE 52					  
							      >> 104 POP_BLOCK						    >> 104 POP_BLOCK						  
							      >> 106 JUMP_ABSOLUTE 36					    >> 106 JUMP_ABSOLUTE 36					  
							      >> 108 POP_BLOCK						    >> 108 POP_BLOCK						  
							      >> 110 JUMP_ABSOLUTE 16					    >> 110 JUMP_ABSOLUTE 16					  
							      >> 112 POP_BLOCK						    >> 112 POP_BLOCK						  
							      								    								  
							      9 >> 114 LOAD_FAST 2 ( found )				    9 >> 114 LOAD_FAST 2 ( found )				  
							      116 LOAD_CONST 1 ( False )				    116 LOAD_CONST 1 ( False )					  
							      118 COMPARE_OP 2 ( == )					    118 COMPARE_OP 2 ( == )					  
							      120 POP_JUMP_IF_FALSE 130					    120 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      10 122 LOAD_GLOBAL 1 ( print )				    10 122 LOAD_GLOBAL 1 ( print )				  
							      124 LOAD_CONST 5 ( 'Not exist' )				    124 LOAD_CONST 5 ( 'Not exist' )				  
							      126 CALL_FUNCTION 1					    126 CALL_FUNCTION 1						  
							      128 POP_TOP						    128 POP_TOP							  
							      >> 130 LOAD_CONST 0 ( None )				    130 LOAD_CONST 0 ( None )					  
							      132 RETURN_VALUE NEW_LINE					    132 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT					      MAJORITY_ELEMENT						    MAJORITY_ELEMENT						  MAJORITY_ELEMENT
--							      --							    --								  --
def findMajority ( arr , n ) :				      Disassembly of <code object findMajority at 0x7f33e26494b0, f Disassembly of <code object findMajority at 0x7f2b0163dc90, f script_not_found : None
    maxCount = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    index = - 1						      2 STORE_FAST 2 ( maxCount )				    2 STORE_FAST 2 ( maxCount )					  
    for i in range ( n ) :				      								    								  
	count = 0					      3 4 LOAD_CONST 2 ( - 1 )					    3 4 LOAD_CONST 2 ( - 1 )					  
	for j in range ( n ) :				      6 STORE_FAST 3 ( index )					    6 STORE_FAST 3 ( index )					  
	    if ( arr [ i ] == arr [ j ] ) :		      								    								  
		count += 1				      4 8 SETUP_LOOP 78 ( to 88 )				    4 8 SETUP_LOOP 80 ( to 90 )					  
	if ( count > maxCount ) :			      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
	    maxCount = count				      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 3 ( n )					  
	    index = i					      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
    if ( maxCount > n // 2 ) :				      16 GET_ITER						    16 GET_ITER							  
	print ( arr [ index ] )				      >> 18 FOR_ITER 66 ( to 86 )				    >> 18 FOR_ITER 68 ( to 88 )					  
    else :						      20 STORE_FAST 4 ( i )					    20 STORE_FAST 4 ( i )					  
	print ( "No Majority Element" )			      								    								  
							      5 22 LOAD_CONST 1 ( 0 )					    5 22 LOAD_CONST 1 ( 0 )					  
							      24 STORE_FAST 5 ( count )					    24 STORE_FAST 5 ( count )					  
							      								    								  
							      6 26 SETUP_LOOP 40 ( to 68 )				    6 26 SETUP_LOOP 44 ( to 78 )				  
							      28 LOAD_GLOBAL 0 ( range )				    28 LOAD_GLOBAL 0 ( range )					  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 28 ( to 66 )				    >> 36 FOR_ITER 28 ( to 76 )					  
							      38 STORE_FAST 6 ( j )					    38 STORE_FAST 6 ( j )					  
							      								    								  
							      7 40 LOAD_FAST 0 ( arr )					    7 40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 6 ( j )					    48 LOAD_FAST 6 ( j )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 36					    54 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      8 56 LOAD_FAST 5 ( count )				    8 56 LOAD_FAST 5 ( count )					  
							      58 LOAD_CONST 3 ( 1 )					    58 LOAD_CONST 3 ( 1 )					  
							      60 INPLACE_ADD						    60 INPLACE_ADD						  
							      62 STORE_FAST 5 ( count )					    62 STORE_FAST 5 ( count )					  
							      64 JUMP_ABSOLUTE 36					    64 JUMP_ABSOLUTE 36						  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      9 >> 68 LOAD_FAST 5 ( count )				    9 >> 68 LOAD_FAST 5 ( count )				  
							      70 LOAD_FAST 2 ( maxCount )				    70 LOAD_FAST 2 ( maxCount )					  
							      72 COMPARE_OP 4 ( > )					    72 COMPARE_OP 4 ( > )					  
							      74 POP_JUMP_IF_FALSE 18					    74 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      10 76 LOAD_FAST 5 ( count )				    10 76 LOAD_FAST 5 ( count )					  
							      78 STORE_FAST 2 ( maxCount )				    78 STORE_FAST 2 ( maxCount )				  
							      								    								  
							      11 80 LOAD_FAST 4 ( i )					    11 80 LOAD_FAST 4 ( i )					  
							      82 STORE_FAST 3 ( index )					    82 STORE_FAST 3 ( index )					  
							      84 JUMP_ABSOLUTE 18					    84 JUMP_ABSOLUTE 18						  
							      >> 86 POP_BLOCK						    86 POP_BLOCK						  
							      								    								  
							      12 >> 88 LOAD_FAST 2 ( maxCount )				    12 >> 88 LOAD_FAST 2 ( maxCount )				  
							      90 LOAD_FAST 1 ( n )					    90 LOAD_FAST 1 ( n )					  
							      92 LOAD_CONST 4 ( 2 )					    92 LOAD_CONST 4 ( 2 )					  
							      94 BINARY_FLOOR_DIVIDE					    94 BINARY_FLOOR_DIVIDE					  
							      96 COMPARE_OP 4 ( > )					    96 COMPARE_OP 4 ( > )					  
							      98 POP_JUMP_IF_FALSE 114					    98 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      13 100 LOAD_GLOBAL 1 ( print )				    13 100 LOAD_GLOBAL 1 ( print )				  
							      102 LOAD_FAST 0 ( arr )					    102 LOAD_FAST 0 ( arr )					  
							      104 LOAD_FAST 3 ( index )					    104 LOAD_FAST 3 ( index )					  
							      106 BINARY_SUBSCR						    106 BINARY_SUBSCR						  
							      108 CALL_FUNCTION 1					    108 CALL_FUNCTION 1						  
							      110 POP_TOP						    >> 110 POP_TOP						  
							      112 JUMP_FORWARD 8 ( to 122 )				    112 JUMP_ABSOLUTE 18					  
							      								    								  
							      15 >> 114 LOAD_GLOBAL 1 ( print )				    15 >> 114 LOAD_GLOBAL 1 ( print )				  
							      116 LOAD_CONST 5 ( 'No Majority Element' )		    116 LOAD_CONST 5 ( 'No Majority Element' )			  
							      118 CALL_FUNCTION 1					    118 CALL_FUNCTION 1						  
							      120 POP_TOP						    120 POP_TOP							  
							      >> 122 LOAD_CONST 0 ( None )				    122 LOAD_CONST 0 ( None )					  
							      124 RETURN_VALUE NEW_LINE					    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS	  COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS
--							      --							    --								  --
def chordCnt ( A ) :					      Disassembly of <code object chordCnt at 0x7f33e2653ed0, file  Disassembly of <code object chordCnt at 0x7f2b0163dc00, file  script_not_found : None
    n = 2 * A						      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
    dpArray = [ 0 ] * ( n + 1 )				      2 LOAD_FAST 0 ( A )					    2 LOAD_FAST 0 ( A )						  
    dpArray [ 0 ] = 1					      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
    dpArray [ 2 ] = 1					      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
    for i in range ( 4 , n + 1 , 2 ) :			      								    								  
	for j in range ( 0 , i - 1 , 2 ) :		      3 8 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
	    dpArray [ i ] += ( dpArray [ j ] * dpArray [ i -  10 BUILD_LIST 1						    10 BUILD_LIST 1						  
    return int ( dpArray [ n ] )			      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
							      14 LOAD_CONST 3 ( 1 )					    14 LOAD_CONST 3 ( 1 )					  
							      16 BINARY_ADD						    16 BINARY_ADD						  
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 STORE_FAST 2 ( dpArray )				    20 STORE_FAST 2 ( dpArray )					  
							      								    								  
							      4 22 LOAD_CONST 3 ( 1 )					    4 22 LOAD_CONST 3 ( 1 )					  
							      24 LOAD_FAST 2 ( dpArray )				    24 LOAD_FAST 2 ( dpArray )					  
							      26 LOAD_CONST 2 ( 0 )					    26 LOAD_CONST 2 ( 0 )					  
							      28 STORE_SUBSCR						    28 STORE_SUBSCR						  
							      								    								  
							      5 30 LOAD_CONST 3 ( 1 )					    5 30 LOAD_CONST 3 ( 1 )					  
							      32 LOAD_FAST 2 ( dpArray )				    32 LOAD_FAST 2 ( dpArray )					  
							      34 LOAD_CONST 1 ( 2 )					    34 LOAD_CONST 1 ( 2 )					  
							      36 STORE_SUBSCR						    36 STORE_SUBSCR						  
							      								    								  
							      6 38 SETUP_LOOP 86 ( to 126 )				    6 38 SETUP_LOOP 68 ( to 104 )				  
							      40 LOAD_GLOBAL 0 ( range )				    40 LOAD_GLOBAL 0 ( range )					  
							      42 LOAD_CONST 4 ( 4 )					    42 LOAD_CONST 4 ( 4 )					  
							      44 LOAD_FAST 1 ( n )					    44 LOAD_FAST 1 ( n )					  
							      46 LOAD_CONST 3 ( 1 )					    46 LOAD_CONST 3 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 LOAD_CONST 1 ( 2 )					    50 LOAD_CONST 1 ( 2 )					  
							      52 CALL_FUNCTION 3					    52 CALL_FUNCTION 3						  
							      54 GET_ITER						    54 GET_ITER							  
							      >> 56 FOR_ITER 66 ( to 124 )				    >> 56 FOR_ITER 52 ( to 102 )				  
							      58 STORE_FAST 3 ( i )					    58 STORE_FAST 3 ( i )					  
							      								    								  
							      7 60 SETUP_LOOP 60 ( to 122 )				    7 60 SETUP_LOOP 46 ( to 100 )				  
							      62 LOAD_GLOBAL 0 ( range )				    62 LOAD_GLOBAL 0 ( range )					  
							      64 LOAD_CONST 2 ( 0 )					    64 LOAD_CONST 2 ( 0 )					  
							      66 LOAD_FAST 3 ( i )					    66 LOAD_FAST 3 ( i )					  
							      68 LOAD_CONST 3 ( 1 )					    68 LOAD_CONST 3 ( 1 )					  
							      70 BINARY_SUBTRACT					    70 BINARY_SUBTRACT						  
							      72 LOAD_CONST 1 ( 2 )					    72 LOAD_CONST 1 ( 2 )					  
							      74 CALL_FUNCTION 3					    74 CALL_FUNCTION 3						  
							      76 GET_ITER						    76 GET_ITER							  
							      >> 78 FOR_ITER 40 ( to 120 )				    >> 78 FOR_ITER 28 ( to 98 )					  
							      80 STORE_FAST 4 ( j )					    80 STORE_FAST 4 ( j )					  
							      								    								  
							      8 82 LOAD_FAST 2 ( dpArray )				    8 82 LOAD_FAST 2 ( dpArray )				  
							      84 LOAD_FAST 3 ( i )					    84 LOAD_FAST 3 ( i )					  
							      86 DUP_TOP_TWO						    86 DUP_TOP_TWO						  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 LOAD_FAST 2 ( dpArray )				    90 LOAD_FAST 2 ( dpArray )					  
							      92 LOAD_FAST 4 ( j )					    92 LOAD_FAST 4 ( j )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 LOAD_FAST 2 ( dpArray )				    96 LOAD_FAST 2 ( dpArray )					  
							      98 LOAD_FAST 3 ( i )					    98 LOAD_FAST 3 ( i )					  
							      100 LOAD_CONST 1 ( 2 )					    100 LOAD_CONST 1 ( 2 )					  
							      102 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      104 LOAD_FAST 4 ( j )					    104 LOAD_FAST 4 ( j )					  
							      106 BINARY_SUBTRACT					    106 BINARY_SUBTRACT						  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 BINARY_MULTIPLY					    110 BINARY_MULTIPLY						  
							      112 INPLACE_ADD						    112 INPLACE_ADD						  
							      114 ROT_THREE						    114 ROT_THREE						  
							      116 STORE_SUBSCR						    116 STORE_SUBSCR						  
							      118 JUMP_ABSOLUTE 78					    >> 118 JUMP_ABSOLUTE 78					  
							      >> 120 POP_BLOCK						    >> 120 POP_BLOCK						  
							      >> 122 JUMP_ABSOLUTE 56					    								  
							      >> 124 POP_BLOCK						    9 >> 122 LOAD_GLOBAL 1 ( int )				  
							      								    124 LOAD_FAST 2 ( dpArray )					  
							      9 >> 126 LOAD_GLOBAL 1 ( int )				    126 LOAD_FAST 1 ( n )					  
							      128 LOAD_FAST 2 ( dpArray )				    128 BINARY_SUBSCR						  
							      130 LOAD_FAST 1 ( n )					    130 CALL_FUNCTION 1						  
							      132 BINARY_SUBSCR						    132 RETURN_VALUE NEW_LINE					  
							      134 CALL_FUNCTION 1					    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED	  CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED
--							      --							    --								  --
def areElementsContiguous ( arr , n ) :			      Disassembly of <code object areElementsContiguous at 0x7f33e2 Disassembly of <code object areElementsContiguous at 0x7f2b01 error : Traceback (most recent call last):   File
    max1 = max ( arr )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  "XLM/dis_script.py", line 60, in <module>	exec
    min1 = min ( arr )					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  (item)   File "main.py", line 39, in <module>	  Fi
    m = max1 - min1 + 1					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in areElementsContiguous TypeE
    if ( m > n ) :					      6 STORE_FAST 2 ( max1 )					    6 STORE_FAST 2 ( max1 )					  rror: 'int' object is not callable
	return False					      								    								  
    visited = [ 0 ] * m					      3 8 LOAD_GLOBAL 1 ( min )					    3 8 LOAD_GLOBAL 1 ( min )					  
    for i in range ( 0 , n ) :				      10 LOAD_FAST 0 ( arr )					    10 LOAD_FAST 0 ( arr )					  
	visited [ arr [ i ] - min1 ] = True		      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
    for i in range ( 0 , m ) :				      14 STORE_FAST 3 ( min1 )					    14 STORE_FAST 3 ( min1 )					  
	if ( visited [ i ] == False ) :			      								    								  
	    return False				      4 16 LOAD_FAST 2 ( max1 )					    4 16 LOAD_FAST 2 ( max1 )					  
    return True						      18 LOAD_FAST 3 ( min1 )					    18 LOAD_FAST 3 ( min1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 1 ( 1 )					  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 STORE_FAST 4 ( m )					    26 STORE_FAST 4 ( m )					  
							      								    								  
							      5 28 LOAD_FAST 4 ( m )					    5 28 LOAD_FAST 4 ( m )					  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 COMPARE_OP 4 ( > )					    32 COMPARE_OP 4 ( > )					  
							      34 POP_JUMP_IF_FALSE 40					    34 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      6 36 LOAD_CONST 2 ( False )				    6 36 LOAD_CONST 2 ( False )					  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      								    								  
							      7 >> 40 LOAD_CONST 3 ( 0 )				    7 >> 40 LOAD_CONST 3 ( 0 )					  
							      42 BUILD_LIST 1						    42 BUILD_LIST 1						  
							      44 LOAD_FAST 4 ( m )					    44 LOAD_FAST 4 ( m )					  
							      46 BINARY_MULTIPLY					    46 BINARY_MULTIPLY						  
							      48 STORE_FAST 5 ( visited )				    48 STORE_FAST 5 ( visited )					  
							      								    								  
							      8 50 SETUP_LOOP 34 ( to 86 )				    8 50 SETUP_LOOP 36 ( to 92 )				  
							      52 LOAD_GLOBAL 2 ( range )				    52 LOAD_GLOBAL 2 ( range )					  
							      54 LOAD_CONST 3 ( 0 )					    54 LOAD_CONST 3 ( 0 )					  
							      56 LOAD_FAST 1 ( n )					    56 LOAD_FAST 1 ( n )					  
							      58 CALL_FUNCTION 2					    58 CALL_FUNCTION 2						  
							      60 GET_ITER						    60 GET_ITER							  
							      >> 62 FOR_ITER 20 ( to 84 )				    >> 62 FOR_ITER 24 ( to 90 )					  
							      64 STORE_FAST 6 ( i )					    64 STORE_FAST 6 ( i )					  
							      								    								  
							      9 66 LOAD_CONST 4 ( True )				    9 66 LOAD_CONST 4 ( True )					  
							      68 LOAD_FAST 5 ( visited )				    68 LOAD_FAST 5 ( visited )					  
							      70 LOAD_FAST 0 ( arr )					    70 LOAD_FAST 0 ( arr )					  
							      72 LOAD_FAST 6 ( i )					    72 LOAD_FAST 6 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 LOAD_FAST 3 ( min1 )					    76 LOAD_FAST 3 ( min1 )					  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 STORE_SUBSCR						    80 STORE_SUBSCR						  
							      82 JUMP_ABSOLUTE 62					    82 JUMP_ABSOLUTE 62						  
							      >> 84 POP_BLOCK						    >> 84 POP_BLOCK						  
							      								    								  
							      10 >> 86 SETUP_LOOP 34 ( to 122 )				    10 >> 86 SETUP_LOOP 40 ( to 128 )				  
							      88 LOAD_GLOBAL 2 ( range )				    88 LOAD_GLOBAL 2 ( range )					  
							      90 LOAD_CONST 3 ( 0 )					    90 LOAD_CONST 3 ( 0 )					  
							      92 LOAD_FAST 4 ( m )					    92 LOAD_FAST 4 ( m )					  
							      94 CALL_FUNCTION 2					    94 CALL_FUNCTION 2						  
							      96 GET_ITER						    96 GET_ITER							  
							      >> 98 FOR_ITER 20 ( to 120 )				    >> 98 FOR_ITER 28 ( to 126 )				  
							      100 STORE_FAST 6 ( i )					    100 STORE_FAST 6 ( i )					  
							      								    								  
							      11 102 LOAD_FAST 5 ( visited )				    11 102 LOAD_FAST 5 ( visited )				  
							      104 LOAD_FAST 6 ( i )					    104 LOAD_FAST 6 ( i )					  
							      106 BINARY_SUBSCR						    106 BINARY_SUBSCR						  
							      108 LOAD_CONST 2 ( False )				    108 LOAD_CONST 2 ( False )					  
							      110 COMPARE_OP 2 ( == )					    110 COMPARE_OP 2 ( == )					  
							      112 POP_JUMP_IF_FALSE 98					    112 POP_JUMP_IF_FALSE 118					  
							      								    								  
							      12 114 LOAD_CONST 2 ( False )				    12 114 LOAD_CONST 2 ( False )				  
							      116 RETURN_VALUE						    116 RETURN_VALUE						  
							      118 JUMP_ABSOLUTE 98					    								  
							      >> 120 POP_BLOCK						    13 >> 118 LOAD_CONST 4 ( True )				  
							      								    120 RETURN_VALUE NEW_LINE					  
							      13 >> 122 LOAD_CONST 4 ( True )				    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1
--							      --							    --								  --
def maxLen ( arr ) :					      Disassembly of <code object maxLen at 0x7f33e2653ed0, file "< Disassembly of <code object maxLen at 0x7f2b0163dc90, file "< script_not_found : None
    hash_map = { }					      2 0 BUILD_MAP 0						    2 0 BUILD_MAP 0						  
    max_len = 0						      2 STORE_FAST 1 ( hash_map )				    2 STORE_FAST 1 ( hash_map )					  
    curr_sum = 0					      								    								  
    for i in range ( len ( arr ) ) :			      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	curr_sum += arr [ i ]				      6 STORE_FAST 2 ( max_len )				    6 STORE_FAST 2 ( max_len )					  
	if arr [ i ] is 0 and max_len is 0 :		      								    								  
	    max_len = 1					      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 1 ( 0 )					  
	if curr_sum is 0 :				      10 STORE_FAST 3 ( curr_sum )				    10 STORE_FAST 3 ( curr_sum )				  
	    max_len = i + 1				      								    								  
	if curr_sum in hash_map :			      5 12 SETUP_LOOP 108 ( to 122 )				    5 12 SETUP_LOOP 104 ( to 118 )				  
	    max_len = max ( max_len , i - hash_map [ curr_sum 14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
	else :						      16 LOAD_GLOBAL 1 ( len )					    16 LOAD_GLOBAL 1 ( len )					  
	    hash_map [ curr_sum ] = i			      18 LOAD_FAST 0 ( arr )					    18 LOAD_FAST 0 ( arr )					  
    return max_len					      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 92 ( to 120 )				    >> 26 FOR_ITER 80 ( to 116 )				  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      6 30 LOAD_FAST 3 ( curr_sum )				    6 30 LOAD_FAST 3 ( curr_sum )				  
							      32 LOAD_FAST 0 ( arr )					    32 LOAD_FAST 0 ( arr )					  
							      34 LOAD_FAST 4 ( i )					    34 LOAD_FAST 4 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 INPLACE_ADD						    38 INPLACE_ADD						  
							      40 STORE_FAST 3 ( curr_sum )				    40 STORE_FAST 3 ( curr_sum )				  
							      								    								  
							      7 42 LOAD_FAST 0 ( arr )					    7 42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 4 ( i )					    44 LOAD_FAST 4 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_CONST 1 ( 0 )					    48 LOAD_CONST 1 ( 0 )					  
							      50 COMPARE_OP 8 ( is )					    50 COMPARE_OP 8 ( is )					  
							      52 POP_JUMP_IF_FALSE 66					    52 POP_JUMP_IF_FALSE 64					  
							      54 LOAD_FAST 2 ( max_len )				    54 LOAD_FAST 2 ( max_len )					  
							      56 LOAD_CONST 1 ( 0 )					    56 LOAD_CONST 1 ( 0 )					  
							      58 COMPARE_OP 8 ( is )					    58 COMPARE_OP 8 ( is )					  
							      60 POP_JUMP_IF_FALSE 66					    60 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      8 62 LOAD_CONST 2 ( 1 )					    8 62 LOAD_CONST 2 ( 1 )					  
							      64 STORE_FAST 2 ( max_len )				    64 STORE_FAST 2 ( max_len )					  
							      								    								  
							      9 >> 66 LOAD_FAST 3 ( curr_sum )				    9 >> 66 LOAD_FAST 3 ( curr_sum )				  
							      68 LOAD_CONST 1 ( 0 )					    68 LOAD_CONST 1 ( 0 )					  
							      70 COMPARE_OP 8 ( is )					    70 COMPARE_OP 8 ( is )					  
							      72 POP_JUMP_IF_FALSE 82					    72 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      10 74 LOAD_FAST 4 ( i )					    10 74 LOAD_FAST 4 ( i )					  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_ADD						    78 BINARY_ADD						  
							      80 STORE_FAST 2 ( max_len )				    80 STORE_FAST 2 ( max_len )					  
							      								    								  
							      11 >> 82 LOAD_FAST 3 ( curr_sum )				    11 >> 82 LOAD_FAST 3 ( curr_sum )				  
							      84 LOAD_FAST 1 ( hash_map )				    84 LOAD_FAST 1 ( hash_map )					  
							      86 COMPARE_OP 6 ( in )					    86 COMPARE_OP 6 ( in )					  
							      88 POP_JUMP_IF_FALSE 110					    88 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      12 90 LOAD_GLOBAL 2 ( max )				    12 90 LOAD_GLOBAL 2 ( max )					  
							      92 LOAD_FAST 2 ( max_len )				    92 LOAD_FAST 2 ( max_len )					  
							      94 LOAD_FAST 4 ( i )					    94 LOAD_FAST 4 ( i )					  
							      96 LOAD_FAST 1 ( hash_map )				    96 LOAD_FAST 1 ( hash_map )					  
							      98 LOAD_FAST 3 ( curr_sum )				    98 LOAD_FAST 3 ( curr_sum )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      104 CALL_FUNCTION 2					    104 CALL_FUNCTION 2						  
							      106 STORE_FAST 2 ( max_len )				    106 STORE_FAST 2 ( max_len )				  
							      108 JUMP_ABSOLUTE 26					    108 JUMP_ABSOLUTE 26					  
							      								    								  
							      14 >> 110 LOAD_FAST 4 ( i )				    14 >> 110 LOAD_FAST 4 ( i )					  
							      112 LOAD_FAST 1 ( hash_map )				    112 LOAD_FAST 1 ( hash_map )				  
							      114 LOAD_FAST 3 ( curr_sum )				    114 LOAD_FAST 3 ( curr_sum )				  
							      116 STORE_SUBSCR						    116 STORE_SUBSCR						  
							      118 JUMP_ABSOLUTE 26					    118 JUMP_ABSOLUTE 26					  
							      >> 120 POP_BLOCK						    >> 120 POP_BLOCK						  
							      								    								  
							      15 >> 122 LOAD_FAST 2 ( max_len )				    15 >> 122 LOAD_FAST 2 ( max_len )				  
							      124 RETURN_VALUE NEW_LINE					    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1
--							      --							    --								  --
def printPrevSmaller ( arr , n ) :			      Disassembly of <code object printPrevSmaller at 0x7f33e264493 Disassembly of <code object printPrevSmaller at 0x7f2b016399c script_not_found : None
    S = list ( )					      2 0 LOAD_GLOBAL 0 ( list )				    2 0 LOAD_GLOBAL 0 ( list )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	while ( len ( S ) > 0 and S [ - 1 ] >= arr [ i ] ) :  4 STORE_FAST 2 ( S )					    4 STORE_FAST 2 ( S )					  
	    S.pop ( )					      								    								  
	if ( len ( S ) == 0 ) :				      3 6 SETUP_LOOP 114 ( to 122 )				    3 6 SETUP_LOOP 74 ( to 80 )					  
	    print ( "_, " , end = "" )			      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	else :						      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
	    print ( S [ - 1 ] , end = ", " )		      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	S.append ( arr [ i ] )				      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 102 ( to 120 )				    >> 16 FOR_ITER 60 ( to 78 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 40 ( to 62 )				    4 20 SETUP_LOOP 48 ( to 76 )				  
							      >> 22 LOAD_GLOBAL 2 ( len )				    >> 22 LOAD_GLOBAL 2 ( len )					  
							      24 LOAD_FAST 2 ( S )					    24 LOAD_FAST 2 ( S )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 1 ( 0 )					  
							      30 COMPARE_OP 4 ( > )					    30 COMPARE_OP 4 ( > )					  
							      32 POP_JUMP_IF_FALSE 60					    32 POP_JUMP_IF_FALSE 64					  
							      34 LOAD_FAST 2 ( S )					    34 LOAD_FAST 2 ( S )					  
							      36 LOAD_CONST 2 ( - 1 )					    36 LOAD_CONST 2 ( - 1 )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 COMPARE_OP 5 ( >= )					    46 COMPARE_OP 5 ( >= )					  
							      48 POP_JUMP_IF_FALSE 60					    48 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      5 50 LOAD_FAST 2 ( S )					    5 50 LOAD_FAST 2 ( S )					  
							      52 LOAD_METHOD 3 ( pop )					    52 LOAD_METHOD 3 ( pop )					  
							      54 CALL_METHOD 0						    54 CALL_METHOD 0						  
							      56 POP_TOP						    56 POP_TOP							  
							      58 JUMP_ABSOLUTE 22					    58 JUMP_ABSOLUTE 22						  
							      >> 60 POP_BLOCK						    >> 60 POP_BLOCK						  
							      								    								  
							      6 >> 62 LOAD_GLOBAL 2 ( len )				    6 >> 62 LOAD_GLOBAL 2 ( len )				  
							      64 LOAD_FAST 2 ( S )					    64 LOAD_FAST 2 ( S )					  
							      66 CALL_FUNCTION 1					    66 CALL_FUNCTION 1						  
							      68 LOAD_CONST 1 ( 0 )					    68 LOAD_CONST 1 ( 0 )					  
							      70 COMPARE_OP 2 ( == )					    70 COMPARE_OP 2 ( == )					  
							      72 POP_JUMP_IF_FALSE 88					    72 POP_JUMP_IF_FALSE 88					  
							      								    								  
							      7 74 LOAD_GLOBAL 4 ( print )				    7 74 LOAD_GLOBAL 4 ( print )				  
							      76 LOAD_CONST 3 ( '_, ' )					    76 LOAD_CONST 3 ( '_, ' )					  
							      78 LOAD_CONST 4 ( '' )					    78 LOAD_CONST 4 ( '' )					  
							      80 LOAD_CONST 5 ( ( 'end' , ) )				    80 LOAD_CONST 5 ( ( 'end' , ) )				  
							      82 CALL_FUNCTION_KW 2					    82 CALL_FUNCTION_KW 2					  
							      84 POP_TOP						    84 POP_TOP							  
							      86 JUMP_FORWARD 16 ( to 104 )				    86 JUMP_FORWARD 14 ( to 102 )				  
							      								    								  
							      9 >> 88 LOAD_GLOBAL 4 ( print )				    9 >> 88 LOAD_GLOBAL 4 ( print )				  
							      90 LOAD_FAST 2 ( S )					    90 LOAD_FAST 2 ( S )					  
							      92 LOAD_CONST 2 ( - 1 )					    92 LOAD_CONST 2 ( - 1 )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 LOAD_CONST 6 ( ', ' )					    96 LOAD_CONST 6 ( ', ' )					  
							      98 LOAD_CONST 5 ( ( 'end' , ) )				    98 LOAD_CONST 5 ( ( 'end' , ) )				  
							      100 CALL_FUNCTION_KW 2					    100 CALL_FUNCTION_KW 2					  
							      102 POP_TOP						    >> 102 POP_TOP						  
							      								    104 JUMP_ABSOLUTE 22					  
							      10 >> 104 LOAD_FAST 2 ( S )				    >> 106 POP_BLOCK						  
							      106 LOAD_METHOD 5 ( append )				    								  
							      108 LOAD_FAST 0 ( arr )					    10 >> 108 LOAD_FAST 2 ( S )					  
							      110 LOAD_FAST 3 ( i )					    110 LOAD_METHOD 5 ( append )				  
							      112 BINARY_SUBSCR						    112 LOAD_FAST 0 ( arr )					  
							      114 CALL_METHOD 1						    114 LOAD_FAST 3 ( i )					  
							      116 POP_TOP						    116 BINARY_SUBSCR						  
							      118 JUMP_ABSOLUTE 16					    118 CALL_METHOD 1						  
							      >> 120 POP_BLOCK						    120 POP_TOP							  
							      >> 122 LOAD_CONST 0 ( None )				    122 LOAD_CONST 0 ( None )					  
							      124 RETURN_VALUE NEW_LINE					    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1
--							      --							    --								  --
def areElementsContiguous ( arr ) :			      Disassembly of <code object areElementsContiguous at 0x7f33e2 Disassembly of <code object areElementsContiguous at 0x7f2b01 script_not_found : None
    us = set ( )					      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    for i in arr : us.add ( i )				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    count = 1						      4 STORE_FAST 1 ( us )					    4 STORE_FAST 1 ( us )					  
    curr_ele = arr [ 0 ] - 1				      								    								  
    while curr_ele in us :				      3 6 SETUP_LOOP 22 ( to 30 )				    3 6 SETUP_LOOP 80 ( to 90 )					  
	count += 1					      8 LOAD_FAST 0 ( arr )					    8 LOAD_FAST 0 ( arr )					  
	curr_ele -= 1					      10 GET_ITER						    10 GET_ITER							  
    curr_ele = arr [ 0 ] + 1				      >> 12 FOR_ITER 14 ( to 28 )				    >> 12 FOR_ITER 72 ( to 88 )					  
    while curr_ele in us :				      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
	count += 1					      16 LOAD_FAST 1 ( us )					    								  
	curr_ele += 1					      18 LOAD_METHOD 1 ( add )					    4 16 LOAD_CONST 1 ( 1 )					  
    return ( count == len ( us ) )			      20 LOAD_FAST 2 ( i )					    18 STORE_FAST 3 ( count )					  
							      22 CALL_METHOD 1						    								  
							      24 POP_TOP						    5 20 LOAD_FAST 0 ( arr )					  
							      26 JUMP_ABSOLUTE 12					    22 LOAD_CONST 2 ( 0 )					  
							      >> 28 POP_BLOCK						    24 BINARY_SUBSCR						  
							      								    26 LOAD_CONST 1 ( 1 )					  
							      4 >> 30 LOAD_CONST 1 ( 1 )				    28 BINARY_SUBTRACT						  
							      32 STORE_FAST 3 ( count )					    30 STORE_FAST 4 ( curr_ele )				  
							      								    								  
							      5 34 LOAD_FAST 0 ( arr )					    6 32 SETUP_LOOP 38 ( to 76 )				  
							      36 LOAD_CONST 2 ( 0 )					    >> 34 LOAD_FAST 4 ( curr_ele )				  
							      38 BINARY_SUBSCR						    36 LOAD_FAST 1 ( us )					  
							      40 LOAD_CONST 1 ( 1 )					    38 COMPARE_OP 6 ( in )					  
							      42 BINARY_SUBTRACT					    40 POP_JUMP_IF_FALSE 74					  
							      44 STORE_FAST 4 ( curr_ele )				    								  
							      								    7 42 LOAD_FAST 3 ( count )					  
							      6 46 SETUP_LOOP 28 ( to 76 )				    44 LOAD_CONST 1 ( 1 )					  
							      >> 48 LOAD_FAST 4 ( curr_ele )				    46 INPLACE_ADD						  
							      50 LOAD_FAST 1 ( us )					    48 STORE_FAST 3 ( count )					  
							      52 COMPARE_OP 6 ( in )					    								  
							      54 POP_JUMP_IF_FALSE 74					    8 50 LOAD_FAST 4 ( curr_ele )				  
							      								    52 LOAD_CONST 1 ( 1 )					  
							      7 56 LOAD_FAST 3 ( count )				    54 INPLACE_SUBTRACT						  
							      58 LOAD_CONST 1 ( 1 )					    56 STORE_FAST 4 ( curr_ele )				  
							      60 INPLACE_ADD						    58 JUMP_ABSOLUTE 34						  
							      62 STORE_FAST 3 ( count )					    >> 60 POP_BLOCK						  
							      								    								  
							      8 64 LOAD_FAST 4 ( curr_ele )				    9 >> 62 LOAD_FAST 0 ( arr )					  
							      66 LOAD_CONST 1 ( 1 )					    64 LOAD_CONST 2 ( 0 )					  
							      68 INPLACE_SUBTRACT					    66 BINARY_SUBSCR						  
							      70 STORE_FAST 4 ( curr_ele )				    68 LOAD_CONST 1 ( 1 )					  
							      72 JUMP_ABSOLUTE 48					    70 BINARY_ADD						  
							      >> 74 POP_BLOCK						    72 STORE_FAST 4 ( curr_ele )				  
							      								    								  
							      9 >> 76 LOAD_FAST 0 ( arr )				    10 74 SETUP_LOOP 26 ( to 96 )				  
							      78 LOAD_CONST 2 ( 0 )					    >> 76 LOAD_FAST 4 ( curr_ele )				  
							      80 BINARY_SUBSCR						    78 LOAD_FAST 1 ( us )					  
							      82 LOAD_CONST 1 ( 1 )					    80 COMPARE_OP 6 ( in )					  
							      84 BINARY_ADD						    82 POP_JUMP_IF_FALSE 94					  
							      86 STORE_FAST 4 ( curr_ele )				    								  
							      								    11 84 LOAD_FAST 3 ( count )					  
							      10 88 SETUP_LOOP 28 ( to 118 )				    86 LOAD_CONST 1 ( 1 )					  
							      >> 90 LOAD_FAST 4 ( curr_ele )				    88 INPLACE_ADD						  
							      92 LOAD_FAST 1 ( us )					    90 STORE_FAST 3 ( count )					  
							      94 COMPARE_OP 6 ( in )					    								  
							      96 POP_JUMP_IF_FALSE 116					    12 92 LOAD_FAST 4 ( curr_ele )				  
							      								    94 LOAD_CONST 1 ( 1 )					  
							      11 98 LOAD_FAST 3 ( count )				    96 INPLACE_ADD						  
							      100 LOAD_CONST 1 ( 1 )					    98 STORE_FAST 4 ( curr_ele )				  
							      102 INPLACE_ADD						    100 JUMP_ABSOLUTE 76					  
							      104 STORE_FAST 3 ( count )				    >> 102 POP_BLOCK						  
							      								    								  
							      12 106 LOAD_FAST 4 ( curr_ele )				    13 >> 104 LOAD_FAST 3 ( count )				  
							      108 LOAD_CONST 1 ( 1 )					    106 LOAD_GLOBAL 1 ( len )					  
							      110 INPLACE_ADD						    108 LOAD_FAST 1 ( us )					  
							      112 STORE_FAST 4 ( curr_ele )				    110 CALL_FUNCTION 1						  
							      114 JUMP_ABSOLUTE 90					    112 COMPARE_OP 2 ( == )					  
							      >> 116 POP_BLOCK						    114 RETURN_VALUE NEW_LINE					  
							      								    								  
							      13 >> 118 LOAD_FAST 3 ( count )				    								  
							      120 LOAD_GLOBAL 2 ( len )					    								  
							      122 LOAD_FAST 1 ( us )					    								  
							      124 CALL_FUNCTION 1					    								  
							      126 COMPARE_OP 2 ( == )					    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS			      SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				    SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				  SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS
--							      --							    --								  --
def count ( n ) :					      Disassembly of <code object count at 0x7f33e2644f60, file "<d Disassembly of <code object count at 0x7f2b0163dc90, file "<d failure : #Results: 8, 10
    if ( n < 4 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return - 1					      2 LOAD_CONST 1 ( 4 )					    2 LOAD_CONST 1 ( 4 )					  
    rem = n % 4						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    if ( rem == 0 ) :					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	return n // 4					      								    								  
    if ( rem == 1 ) :					      3 8 LOAD_CONST 2 ( - 1 )					    3 8 LOAD_CONST 2 ( - 1 )					  
	if ( n < 9 ) :					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	    return - 1					      								    								  
	return ( n - 9 ) // 4 + 1			      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
    if ( rem == 2 ) :					      14 LOAD_CONST 1 ( 4 )					    14 LOAD_CONST 1 ( 4 )					  
	return ( n - 6 ) // 4 + 1			      16 BINARY_MODULO						    16 BINARY_MODULO						  
    if ( rem == 3 ) :					      18 STORE_FAST 1 ( rem )					    18 STORE_FAST 1 ( rem )					  
	if ( n < 15 ) :					      								    								  
	    return - 1					      5 20 LOAD_FAST 1 ( rem )					    5 20 LOAD_FAST 1 ( rem )					  
	return ( n - 15 ) // 4 + 2			      22 LOAD_CONST 3 ( 0 )					    22 LOAD_CONST 3 ( 0 )					  
							      24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
							      26 POP_JUMP_IF_FALSE 36					    26 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      6 28 LOAD_FAST 0 ( n )					    6 28 LOAD_FAST 0 ( n )					  
							      30 LOAD_CONST 1 ( 4 )					    30 LOAD_CONST 1 ( 4 )					  
							      32 BINARY_FLOOR_DIVIDE					    32 BINARY_FLOOR_DIVIDE					  
							      34 RETURN_VALUE						    34 RETURN_VALUE						  
							      								    								  
							      7 >> 36 LOAD_FAST 1 ( rem )				    7 >> 36 LOAD_FAST 1 ( rem )					  
							      38 LOAD_CONST 4 ( 1 )					    38 LOAD_CONST 4 ( 1 )					  
							      40 COMPARE_OP 2 ( == )					    40 COMPARE_OP 2 ( == )					  
							      42 POP_JUMP_IF_FALSE 72					    42 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      8 44 LOAD_FAST 0 ( n )					    8 44 LOAD_FAST 0 ( n )					  
							      46 LOAD_CONST 5 ( 9 )					    46 LOAD_CONST 5 ( 9 )					  
							      48 COMPARE_OP 0 ( < )					    48 COMPARE_OP 0 ( < )					  
							      50 POP_JUMP_IF_FALSE 56					    50 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      9 52 LOAD_CONST 2 ( - 1 )					    9 52 LOAD_CONST 2 ( - 1 )					  
							      54 RETURN_VALUE						    54 RETURN_VALUE						  
							      								    								  
							      10 >> 56 LOAD_FAST 0 ( n )				    10 >> 56 LOAD_FAST 0 ( n )					  
							      58 LOAD_CONST 5 ( 9 )					    58 LOAD_CONST 5 ( 9 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 LOAD_CONST 1 ( 4 )					    62 LOAD_CONST 1 ( 4 )					  
							      64 BINARY_FLOOR_DIVIDE					    64 BINARY_FLOOR_DIVIDE					  
							      66 LOAD_CONST 4 ( 1 )					    66 LOAD_CONST 4 ( 1 )					  
							      68 BINARY_ADD						    68 BINARY_ADD						  
							      70 RETURN_VALUE						    70 RETURN_VALUE						  
							      								    								  
							      11 >> 72 LOAD_FAST 1 ( rem )				    11 >> 72 LOAD_FAST 1 ( rem )				  
							      74 LOAD_CONST 6 ( 2 )					    74 LOAD_CONST 6 ( 2 )					  
							      76 COMPARE_OP 2 ( == )					    76 COMPARE_OP 2 ( == )					  
							      78 POP_JUMP_IF_FALSE 96					    78 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      12 80 LOAD_FAST 0 ( n )					    12 80 LOAD_FAST 0 ( n )					  
							      82 LOAD_CONST 7 ( 6 )					    82 LOAD_CONST 7 ( 6 )					  
							      84 BINARY_SUBTRACT					    84 BINARY_SUBTRACT						  
							      86 LOAD_CONST 1 ( 4 )					    86 LOAD_CONST 1 ( 4 )					  
							      88 BINARY_FLOOR_DIVIDE					    88 BINARY_FLOOR_DIVIDE					  
							      90 LOAD_CONST 4 ( 1 )					    90 LOAD_CONST 4 ( 1 )					  
							      92 BINARY_ADD						    92 BINARY_ADD						  
							      94 RETURN_VALUE						    94 RETURN_VALUE						  
							      								    								  
							      13 >> 96 LOAD_FAST 1 ( rem )				    13 >> 96 LOAD_FAST 1 ( rem )				  
							      98 LOAD_CONST 8 ( 3 )					    98 LOAD_CONST 8 ( 3 )					  
							      100 COMPARE_OP 2 ( == )					    100 COMPARE_OP 2 ( == )					  
							      102 POP_JUMP_IF_FALSE 132					    102 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      14 104 LOAD_FAST 0 ( n )					    14 104 LOAD_FAST 0 ( n )					  
							      106 LOAD_CONST 9 ( 15 )					    106 LOAD_CONST 9 ( 15 )					  
							      108 COMPARE_OP 0 ( < )					    108 COMPARE_OP 0 ( < )					  
							      110 POP_JUMP_IF_FALSE 116					    110 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      15 112 LOAD_CONST 2 ( - 1 )				    15 112 LOAD_FAST 0 ( n )					  
							      114 RETURN_VALUE						    114 LOAD_CONST 9 ( 15 )					  
							      								    116 COMPARE_OP 0 ( < )					  
							      16 >> 116 LOAD_FAST 0 ( n )				    118 POP_JUMP_IF_FALSE 124					  
							      118 LOAD_CONST 9 ( 15 )					    								  
							      120 BINARY_SUBTRACT					    16 120 LOAD_CONST 2 ( - 1 )					  
							      122 LOAD_CONST 1 ( 4 )					    122 RETURN_VALUE						  
							      124 BINARY_FLOOR_DIVIDE					    								  
							      126 LOAD_CONST 6 ( 2 )					    17 >> 124 LOAD_FAST 0 ( n )					  
							      128 BINARY_ADD						    126 LOAD_CONST 9 ( 15 )					  
							      130 RETURN_VALUE						    128 BINARY_SUBTRACT						  
							      >> 132 LOAD_CONST 0 ( None )				    130 LOAD_CONST 1 ( 4 )					  
							      134 RETURN_VALUE NEW_LINE					    132 BINARY_FLOOR_DIVIDE					  
							      								    134 LOAD_CONST 6 ( 2 )					  
							      								    136 BINARY_ADD						  
							      								    138 RETURN_VALUE						  
							      								    >> 140 LOAD_CONST 0 ( None )				  
							      								    142 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE_1					      RECAMANS_SEQUENCE_1					    RECAMANS_SEQUENCE_1						  RECAMANS_SEQUENCE_1
--							      --							    --								  --
def recaman ( n ) :					      Disassembly of <code object recaman at 0x7f33e26494b0, file " Disassembly of <code object recaman at 0x7f2b0163dc90, file " script_not_found : None
    if ( n <= 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    print ( 0 , "," , end = '' )			      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    s = set ( [ ] )					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    s.add ( 0 )						      								    								  
    prev = 0						      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_CONST 0 ( None )					  
    for i in range ( 1 , n ) :				      10 RETURN_VALUE						    10 RETURN_VALUE						  
	curr = prev - i					      								    								  
	if ( curr < 0 or curr in s ) :			      4 >> 12 LOAD_GLOBAL 0 ( print )				    4 >> 12 LOAD_GLOBAL 0 ( print )				  
	    curr = prev + i				      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
	s.add ( curr )					      16 LOAD_CONST 2 ( ',' )					    16 LOAD_CONST 2 ( ',' )					  
	print ( curr , "," , end = '' )			      18 LOAD_CONST 3 ( '' )					    18 LOAD_CONST 3 ( '' )					  
	prev = curr					      20 LOAD_CONST 4 ( ( 'end' , ) )				    20 LOAD_CONST 4 ( ( 'end' , ) )				  
							      22 CALL_FUNCTION_KW 3					    22 CALL_FUNCTION_KW 3					  
							      24 POP_TOP						    24 POP_TOP							  
							      								    								  
							      5 26 LOAD_GLOBAL 1 ( set )				    5 26 LOAD_GLOBAL 1 ( set )					  
							      28 BUILD_LIST 0						    28 BUILD_LIST 0						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 STORE_FAST 1 ( s )					    32 STORE_FAST 1 ( s )					  
							      								    								  
							      6 34 LOAD_FAST 1 ( s )					    6 34 LOAD_FAST 1 ( s )					  
							      36 LOAD_METHOD 2 ( add )					    36 LOAD_METHOD 2 ( add )					  
							      38 LOAD_CONST 1 ( 0 )					    38 LOAD_CONST 1 ( 0 )					  
							      40 CALL_METHOD 1						    40 CALL_METHOD 1						  
							      42 POP_TOP						    42 POP_TOP							  
							      								    								  
							      7 44 LOAD_CONST 1 ( 0 )					    7 44 LOAD_CONST 1 ( 0 )					  
							      46 STORE_FAST 2 ( prev )					    46 STORE_FAST 2 ( prev )					  
							      								    								  
							      8 48 SETUP_LOOP 78 ( to 128 )				    8 48 SETUP_LOOP 66 ( to 118 )				  
							      50 LOAD_GLOBAL 3 ( range )				    50 LOAD_GLOBAL 3 ( range )					  
							      52 LOAD_CONST 5 ( 1 )					    52 LOAD_CONST 5 ( 1 )					  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 0 ( n )					  
							      56 CALL_FUNCTION 2					    56 CALL_FUNCTION 2						  
							      58 GET_ITER						    58 GET_ITER							  
							      >> 60 FOR_ITER 64 ( to 126 )				    >> 60 FOR_ITER 52 ( to 116 )				  
							      62 STORE_FAST 3 ( i )					    62 STORE_FAST 3 ( i )					  
							      								    								  
							      9 64 LOAD_FAST 2 ( prev )					    9 64 LOAD_FAST 2 ( prev )					  
							      66 LOAD_FAST 3 ( i )					    66 LOAD_FAST 3 ( i )					  
							      68 BINARY_SUBTRACT					    68 BINARY_SUBTRACT						  
							      70 STORE_FAST 4 ( curr )					    70 STORE_FAST 4 ( curr )					  
							      								    								  
							      10 72 LOAD_FAST 4 ( curr )				    10 72 LOAD_FAST 4 ( curr )					  
							      74 LOAD_CONST 1 ( 0 )					    74 LOAD_CONST 1 ( 0 )					  
							      76 COMPARE_OP 0 ( < )					    76 COMPARE_OP 0 ( < )					  
							      78 POP_JUMP_IF_TRUE 88					    78 POP_JUMP_IF_TRUE 84					  
							      80 LOAD_FAST 4 ( curr )					    80 LOAD_FAST 4 ( curr )					  
							      82 LOAD_FAST 1 ( s )					    82 LOAD_FAST 1 ( s )					  
							      84 COMPARE_OP 6 ( in )					    84 COMPARE_OP 6 ( in )					  
							      86 POP_JUMP_IF_FALSE 96					    86 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      11 >> 88 LOAD_FAST 2 ( prev )				    11 88 LOAD_FAST 2 ( prev )					  
							      90 LOAD_FAST 3 ( i )					    90 LOAD_FAST 3 ( i )					  
							      92 BINARY_ADD						    92 BINARY_ADD						  
							      94 STORE_FAST 4 ( curr )					    94 STORE_FAST 4 ( curr )					  
							      								    96 JUMP_ABSOLUTE 60						  
							      12 >> 96 LOAD_FAST 1 ( s )				    >> 98 POP_BLOCK						  
							      98 LOAD_METHOD 2 ( add )					    								  
							      100 LOAD_FAST 4 ( curr )					    12 >> 100 LOAD_FAST 1 ( s )					  
							      102 CALL_METHOD 1						    102 LOAD_METHOD 2 ( add )					  
							      104 POP_TOP						    104 LOAD_FAST 4 ( curr )					  
							      								    106 CALL_METHOD 1						  
							      13 106 LOAD_GLOBAL 0 ( print )				    108 POP_TOP							  
							      108 LOAD_FAST 4 ( curr )					    								  
							      110 LOAD_CONST 2 ( ',' )					    13 110 LOAD_GLOBAL 0 ( print )				  
							      112 LOAD_CONST 3 ( '' )					    112 LOAD_FAST 4 ( curr )					  
							      114 LOAD_CONST 4 ( ( 'end' , ) )				    114 LOAD_CONST 6 ( ',' )					  
							      116 CALL_FUNCTION_KW 3					    116 LOAD_CONST 3 ( '' )					  
							      118 POP_TOP						    118 LOAD_CONST 4 ( ( 'end' , ) )				  
							      								    120 CALL_FUNCTION_KW 3					  
							      14 120 LOAD_FAST 4 ( curr )				    122 POP_TOP							  
							      122 STORE_FAST 2 ( prev )					    								  
							      124 JUMP_ABSOLUTE 60					    14 124 LOAD_FAST 4 ( curr )					  
							      >> 126 POP_BLOCK						    126 STORE_FAST 2 ( prev )					  
							      >> 128 LOAD_CONST 0 ( None )				    128 JUMP_ABSOLUTE 60					  
							      130 RETURN_VALUE NEW_LINE					    >> 130 POP_BLOCK						  
							      								    >> 132 LOAD_CONST 0 ( None )				  
							      								    134 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUPER_PRIME						      SUPER_PRIME						    SUPER_PRIME							  SUPER_PRIME
--							      --							    --								  --
def SieveOfEratosthenes ( n , isPrime ) :		      Disassembly of <code object SieveOfEratosthenes at 0x7f33e264 Disassembly of <code object SieveOfEratosthenes at 0x7f2b0163 script_not_found : None
    isPrime [ 0 ] = isPrime [ 1 ] = False		      2 0 LOAD_CONST 1 ( False )				    2 0 LOAD_CONST 1 ( False )					  
    for i in range ( 2 , n + 1 ) :			      2 DUP_TOP							    2 LOAD_FAST 1 ( isPrime )					  
	isPrime [ i ] = True				      4 LOAD_FAST 1 ( isPrime )					    4 LOAD_CONST 2 ( 1 )					  
    for p in range ( 2 , n + 1 ) :			      6 LOAD_CONST 2 ( 0 )					    6 STORE_SUBSCR						  
	if ( p * p <= n and isPrime [ p ] == True ) :	      8 STORE_SUBSCR						    								  
	    for i in range ( p * 2 , n + 1 , p ) :	      10 LOAD_FAST 1 ( isPrime )				    3 8 SETUP_LOOP 72 ( to 82 )					  
		isPrime [ i ] = False			      12 LOAD_CONST 3 ( 1 )					    10 LOAD_GLOBAL 0 ( range )					  
		p += 1					      14 STORE_SUBSCR						    12 LOAD_CONST 3 ( 2 )					  
							      								    14 LOAD_FAST 0 ( n )					  
							      3 16 SETUP_LOOP 30 ( to 48 )				    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_GLOBAL 0 ( range )				    18 BINARY_ADD						  
							      20 LOAD_CONST 4 ( 2 )					    20 CALL_FUNCTION 2						  
							      22 LOAD_FAST 0 ( n )					    22 GET_ITER							  
							      24 LOAD_CONST 3 ( 1 )					    >> 24 FOR_ITER 60 ( to 80 )					  
							      26 BINARY_ADD						    26 STORE_FAST 2 ( i )					  
							      28 CALL_FUNCTION 2					    								  
							      30 GET_ITER						    4 28 LOAD_CONST 4 ( True )					  
							      >> 32 FOR_ITER 12 ( to 46 )				    30 LOAD_FAST 1 ( isPrime )					  
							      34 STORE_FAST 2 ( i )					    32 LOAD_FAST 2 ( i )					  
							      								    34 STORE_SUBSCR						  
							      4 36 LOAD_CONST 5 ( True )				    36 JUMP_ABSOLUTE 24						  
							      38 LOAD_FAST 1 ( isPrime )				    >> 38 POP_BLOCK						  
							      40 LOAD_FAST 2 ( i )					    								  
							      42 STORE_SUBSCR						    5 40 SETUP_LOOP 64 ( to 78 )				  
							      44 JUMP_ABSOLUTE 32					    42 LOAD_GLOBAL 0 ( range )					  
							      >> 46 POP_BLOCK						    44 LOAD_CONST 3 ( 2 )					  
							      								    46 LOAD_FAST 0 ( n )					  
							      5 >> 48 SETUP_LOOP 92 ( to 142 )				    48 LOAD_CONST 2 ( 1 )					  
							      50 LOAD_GLOBAL 0 ( range )				    50 BINARY_ADD						  
							      52 LOAD_CONST 4 ( 2 )					    52 CALL_FUNCTION 2						  
							      54 LOAD_FAST 0 ( n )					    54 GET_ITER							  
							      56 LOAD_CONST 3 ( 1 )					    >> 56 FOR_ITER 40 ( to 76 )					  
							      58 BINARY_ADD						    58 STORE_FAST 3 ( p )					  
							      60 CALL_FUNCTION 2					    								  
							      62 GET_ITER						    6 60 LOAD_FAST 3 ( p )					  
							      >> 64 FOR_ITER 74 ( to 140 )				    62 LOAD_FAST 3 ( p )					  
							      66 STORE_FAST 3 ( p )					    64 BINARY_MULTIPLY						  
							      								    66 LOAD_FAST 0 ( n )					  
							      6 68 LOAD_FAST 3 ( p )					    68 COMPARE_OP 1 ( <= )					  
							      70 LOAD_FAST 3 ( p )					    70 POP_JUMP_IF_FALSE 56					  
							      72 BINARY_MULTIPLY					    72 LOAD_FAST 1 ( isPrime )					  
							      74 LOAD_FAST 0 ( n )					    74 LOAD_FAST 3 ( p )					  
							      76 COMPARE_OP 1 ( <= )					    76 BINARY_SUBSCR						  
							      78 POP_JUMP_IF_FALSE 64					    78 LOAD_CONST 4 ( True )					  
							      80 LOAD_FAST 1 ( isPrime )				    80 COMPARE_OP 2 ( == )					  
							      82 LOAD_FAST 3 ( p )					    82 POP_JUMP_IF_FALSE 56					  
							      84 BINARY_SUBSCR						    								  
							      86 LOAD_CONST 5 ( True )					    7 84 SETUP_LOOP 34 ( to 124 )				  
							      88 COMPARE_OP 2 ( == )					    86 LOAD_GLOBAL 0 ( range )					  
							      90 POP_JUMP_IF_FALSE 64					    88 LOAD_FAST 3 ( p )					  
							      								    90 LOAD_CONST 3 ( 2 )					  
							      7 92 SETUP_LOOP 44 ( to 138 )				    92 BINARY_MULTIPLY						  
							      94 LOAD_GLOBAL 0 ( range )				    94 LOAD_FAST 0 ( n )					  
							      96 LOAD_FAST 3 ( p )					    96 LOAD_CONST 2 ( 1 )					  
							      98 LOAD_CONST 4 ( 2 )					    98 BINARY_ADD						  
							      100 BINARY_MULTIPLY					    100 LOAD_FAST 3 ( p )					  
							      102 LOAD_FAST 0 ( n )					    102 CALL_FUNCTION 3						  
							      104 LOAD_CONST 3 ( 1 )					    104 GET_ITER						  
							      106 BINARY_ADD						    >> 106 FOR_ITER 20 ( to 122 )				  
							      108 LOAD_FAST 3 ( p )					    108 STORE_FAST 2 ( i )					  
							      110 CALL_FUNCTION 3					    								  
							      112 GET_ITER						    8 110 LOAD_CONST 1 ( False )				  
							      >> 114 FOR_ITER 20 ( to 136 )				    112 LOAD_FAST 1 ( isPrime )					  
							      116 STORE_FAST 2 ( i )					    114 LOAD_FAST 2 ( i )					  
							      								    116 STORE_SUBSCR						  
							      8 118 LOAD_CONST 1 ( False )				    								  
							      120 LOAD_FAST 1 ( isPrime )				    9 118 LOAD_FAST 3 ( p )					  
							      122 LOAD_FAST 2 ( i )					    120 LOAD_CONST 2 ( 1 )					  
							      124 STORE_SUBSCR						    122 INPLACE_ADD						  
							      								    124 STORE_FAST 3 ( p )					  
							      9 126 LOAD_FAST 3 ( p )					    126 JUMP_ABSOLUTE 106					  
							      128 LOAD_CONST 3 ( 1 )					    >> 128 POP_BLOCK						  
							      130 INPLACE_ADD						    >> 130 JUMP_ABSOLUTE 56					  
							      132 STORE_FAST 3 ( p )					    >> 132 POP_BLOCK						  
							      134 JUMP_ABSOLUTE 114					    >> 134 LOAD_CONST 0 ( None )				  
							      >> 136 POP_BLOCK						    136 RETURN_VALUE NEW_LINE					  
							      >> 138 JUMP_ABSOLUTE 64					    								  
							      >> 140 POP_BLOCK						    								  
							      >> 142 LOAD_CONST 0 ( None )				    								  
							      144 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			      PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			    PROGRAM_BINOMIAL_COEFFICIENTS_TABLE				  PROGRAM_BINOMIAL_COEFFICIENTS_TABLE
--							      --							    --								  --
def printbinomial ( max ) :				      Disassembly of <code object printbinomial at 0x7f33e2649a50,  Disassembly of <code object printbinomial at 0x7f2b0163dc90,  script_not_found : None
    for m in range ( max + 1 ) :			      2 0 SETUP_LOOP 126 ( to 128 )				    2 0 SETUP_LOOP 124 ( to 126 )				  
	print ( '% 2d' % m , end = '' )			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	binom = 1					      4 LOAD_FAST 0 ( max )					    4 LOAD_FAST 0 ( max )					  
	for x in range ( m + 1 ) :			      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    if m != 0 and x != 0 :			      8 BINARY_ADD						    8 BINARY_ADD						  
		binom = binom * ( m - x + 1 ) / x	      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
	    print ( '% 4d' % binom , end = '' )		      12 GET_ITER						    12 GET_ITER							  
	print ( "\n" , end = '' )			      >> 14 FOR_ITER 110 ( to 126 )				    >> 14 FOR_ITER 108 ( to 124 )				  
							      16 STORE_FAST 1 ( m )					    16 STORE_FAST 1 ( m )					  
							      								    								  
							      3 18 LOAD_GLOBAL 1 ( print )				    3 18 LOAD_GLOBAL 1 ( print )				  
							      20 LOAD_CONST 2 ( '% 2d' )				    20 LOAD_CONST 2 ( '% 2d' )					  
							      22 LOAD_FAST 1 ( m )					    22 LOAD_FAST 1 ( m )					  
							      24 BINARY_MODULO						    24 BINARY_MODULO						  
							      26 LOAD_CONST 3 ( '' )					    26 LOAD_CONST 3 ( ' ' )					  
							      28 LOAD_CONST 4 ( ( 'end' , ) )				    28 LOAD_CONST 4 ( ( 'end' , ) )				  
							      30 CALL_FUNCTION_KW 2					    30 CALL_FUNCTION_KW 2					  
							      32 POP_TOP						    32 POP_TOP							  
							      								    								  
							      4 34 LOAD_CONST 1 ( 1 )					    4 34 LOAD_CONST 1 ( 1 )					  
							      36 STORE_FAST 2 ( binom )					    36 STORE_FAST 2 ( binom )					  
							      								    								  
							      5 38 SETUP_LOOP 72 ( to 112 )				    5 38 SETUP_LOOP 46 ( to 92 )				  
							      40 LOAD_GLOBAL 0 ( range )				    40 LOAD_GLOBAL 0 ( range )					  
							      42 LOAD_FAST 1 ( m )					    42 LOAD_FAST 1 ( m )					  
							      44 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 1 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 56 ( to 110 )				    >> 52 FOR_ITER 30 ( to 90 )					  
							      54 STORE_FAST 3 ( x )					    54 STORE_FAST 3 ( x )					  
							      								    								  
							      6 56 LOAD_FAST 1 ( m )					    6 56 LOAD_FAST 1 ( m )					  
							      58 LOAD_CONST 5 ( 0 )					    58 LOAD_CONST 5 ( 0 )					  
							      60 COMPARE_OP 3 ( != )					    60 COMPARE_OP 3 ( != )					  
							      62 POP_JUMP_IF_FALSE 92					    62 POP_JUMP_IF_FALSE 52					  
							      64 LOAD_FAST 3 ( x )					    64 LOAD_FAST 3 ( x )					  
							      66 LOAD_CONST 5 ( 0 )					    66 LOAD_CONST 5 ( 0 )					  
							      68 COMPARE_OP 3 ( != )					    68 COMPARE_OP 3 ( != )					  
							      70 POP_JUMP_IF_FALSE 92					    70 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      7 72 LOAD_FAST 2 ( binom )				    7 72 LOAD_FAST 2 ( binom )					  
							      74 LOAD_FAST 1 ( m )					    74 LOAD_FAST 1 ( m )					  
							      76 LOAD_FAST 3 ( x )					    76 LOAD_FAST 3 ( x )					  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 LOAD_CONST 1 ( 1 )					    80 LOAD_CONST 1 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 BINARY_MULTIPLY					    84 BINARY_MULTIPLY						  
							      86 LOAD_FAST 3 ( x )					    86 LOAD_FAST 3 ( x )					  
							      88 BINARY_TRUE_DIVIDE					    88 BINARY_TRUE_DIVIDE					  
							      90 STORE_FAST 2 ( binom )					    >> 90 STORE_FAST 2 ( binom )				  
							      								    92 JUMP_ABSOLUTE 52						  
							      8 >> 92 LOAD_GLOBAL 1 ( print )				    >> 94 POP_BLOCK						  
							      94 LOAD_CONST 6 ( '% 4d' )				    								  
							      96 LOAD_FAST 2 ( binom )					    8 >> 96 LOAD_GLOBAL 1 ( print )				  
							      98 BINARY_MODULO						    98 LOAD_CONST 6 ( '% 4d' )					  
							      100 LOAD_CONST 3 ( '' )					    100 LOAD_FAST 2 ( binom )					  
							      102 LOAD_CONST 4 ( ( 'end' , ) )				    102 BINARY_MODULO						  
							      104 CALL_FUNCTION_KW 2					    104 LOAD_CONST 3 ( ' ' )					  
							      106 POP_TOP						    106 LOAD_CONST 4 ( ( 'end' , ) )				  
							      108 JUMP_ABSOLUTE 52					    108 CALL_FUNCTION_KW 2					  
							      >> 110 POP_BLOCK						    110 POP_TOP							  
							      								    112 JUMP_ABSOLUTE 14					  
							      9 >> 112 LOAD_GLOBAL 1 ( print )				    >> 114 POP_BLOCK						  
							      114 LOAD_CONST 7 ( '\n' )					    								  
							      116 LOAD_CONST 3 ( '' )					    9 >> 116 LOAD_GLOBAL 1 ( print )				  
							      118 LOAD_CONST 4 ( ( 'end' , ) )				    118 LOAD_CONST 7 ( '\n' )					  
							      120 CALL_FUNCTION_KW 2					    120 LOAD_CONST 3 ( '' )					  
							      122 POP_TOP						    122 LOAD_CONST 4 ( ( 'end' , ) )				  
							      124 JUMP_ABSOLUTE 14					    124 CALL_FUNCTION_KW 2					  
							      >> 126 POP_BLOCK						    126 POP_TOP							  
							      >> 128 LOAD_CONST 0 ( None )				    128 LOAD_CONST 0 ( None )					  
							      130 RETURN_VALUE NEW_LINE					    130 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			      COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			    COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			  COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1
--							      --							    --								  --
def countSubarrWithEqualZeroAndOne ( arr , n ) :	      Disassembly of <code object countSubarrWithEqualZeroAndOne at Disassembly of <code object countSubarrWithEqualZeroAndOne at script_not_found : None
    mp = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    Sum = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    count = 0						      4 STORE_FAST 2 ( mp )					    4 STORE_FAST 2 ( mp )					  
    for i in range ( n ) :				      								    								  
	if ( arr [ i ] == 0 ) :				      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	    arr [ i ] = - 1				      8 STORE_FAST 3 ( Sum )					    8 STORE_FAST 3 ( Sum )					  
	Sum += arr [ i ]				      								    								  
	if ( Sum == 0 ) :				      4 10 LOAD_CONST 1 ( 0 )					    4 10 LOAD_CONST 1 ( 0 )					  
	    count += 1					      12 STORE_FAST 4 ( count )					    12 STORE_FAST 4 ( count )					  
	if ( Sum in mp.keys ( ) ) :			      								    								  
	    count += mp [ Sum ]				      5 14 SETUP_LOOP 108 ( to 124 )				    5 14 SETUP_LOOP 76 ( to 94 )				  
	mp [ Sum ] = mp.get ( Sum , 0 ) + 1		      16 LOAD_GLOBAL 1 ( range )				    16 LOAD_GLOBAL 1 ( range )					  
    return count					      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 4 ( n )					  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 96 ( to 122 )				    >> 24 FOR_ITER 64 ( to 92 )					  
							      26 STORE_FAST 5 ( i )					    26 STORE_FAST 5 ( i )					  
							      								    								  
							      6 28 LOAD_FAST 0 ( arr )					    6 28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 5 ( i )					    30 LOAD_FAST 5 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_CONST 1 ( 0 )					    34 LOAD_CONST 1 ( 0 )					  
							      36 COMPARE_OP 2 ( == )					    36 COMPARE_OP 2 ( == )					  
							      38 POP_JUMP_IF_FALSE 48					    38 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 40 LOAD_CONST 2 ( - 1 )					    7 40 LOAD_CONST 2 ( - 1 )					  
							      42 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 5 ( i )					    44 LOAD_FAST 5 ( i )					  
							      46 STORE_SUBSCR						    46 STORE_SUBSCR						  
							      								    								  
							      8 >> 48 LOAD_FAST 3 ( Sum )				    8 >> 48 LOAD_FAST 3 ( Sum )					  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 5 ( i )					    52 LOAD_FAST 5 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 INPLACE_ADD						    56 INPLACE_ADD						  
							      58 STORE_FAST 3 ( Sum )					    58 STORE_FAST 3 ( Sum )					  
							      								    								  
							      9 60 LOAD_FAST 3 ( Sum )					    9 60 LOAD_FAST 3 ( Sum )					  
							      62 LOAD_CONST 1 ( 0 )					    62 LOAD_CONST 1 ( 0 )					  
							      64 COMPARE_OP 2 ( == )					    64 COMPARE_OP 2 ( == )					  
							      66 POP_JUMP_IF_FALSE 76					    66 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      10 68 LOAD_FAST 4 ( count )				    10 68 LOAD_FAST 4 ( count )					  
							      70 LOAD_CONST 3 ( 1 )					    70 LOAD_CONST 3 ( 1 )					  
							      72 INPLACE_ADD						    72 INPLACE_ADD						  
							      74 STORE_FAST 4 ( count )					    74 STORE_FAST 4 ( count )					  
							      								    								  
							      11 >> 76 LOAD_FAST 3 ( Sum )				    11 >> 76 LOAD_FAST 3 ( Sum )				  
							      78 LOAD_FAST 2 ( mp )					    78 LOAD_FAST 2 ( mp )					  
							      80 LOAD_METHOD 2 ( keys )					    80 LOAD_METHOD 2 ( keys )					  
							      82 CALL_METHOD 0						    82 CALL_METHOD 0						  
							      84 COMPARE_OP 6 ( in )					    84 COMPARE_OP 6 ( in )					  
							      86 POP_JUMP_IF_FALSE 100					    86 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      12 88 LOAD_FAST 4 ( count )				    12 88 LOAD_FAST 4 ( count )					  
							      90 LOAD_FAST 2 ( mp )					    90 LOAD_FAST 2 ( mp )					  
							      92 LOAD_FAST 3 ( Sum )					    92 LOAD_FAST 3 ( Sum )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 INPLACE_ADD						    96 INPLACE_ADD						  
							      98 STORE_FAST 4 ( count )					    98 STORE_FAST 4 ( count )					  
							      								    								  
							      13 >> 100 LOAD_FAST 2 ( mp )				    13 >> 100 LOAD_FAST 2 ( mp )				  
							      102 LOAD_METHOD 3 ( get )					    102 LOAD_METHOD 3 ( get )					  
							      104 LOAD_FAST 3 ( Sum )					    104 LOAD_FAST 3 ( Sum )					  
							      106 LOAD_CONST 1 ( 0 )					    106 LOAD_CONST 1 ( 0 )					  
							      108 CALL_METHOD 2						    108 CALL_METHOD 2						  
							      110 LOAD_CONST 3 ( 1 )					    110 LOAD_CONST 3 ( 1 )					  
							      112 BINARY_ADD						    112 BINARY_ADD						  
							      114 LOAD_FAST 2 ( mp )					    114 LOAD_FAST 2 ( mp )					  
							      116 LOAD_FAST 3 ( Sum )					    116 LOAD_FAST 3 ( Sum )					  
							      118 STORE_SUBSCR						    118 STORE_SUBSCR						  
							      120 JUMP_ABSOLUTE 24					    120 JUMP_ABSOLUTE 24					  
							      >> 122 POP_BLOCK						    >> 122 POP_BLOCK						  
							      								    								  
							      14 >> 124 LOAD_FAST 4 ( count )				    14 >> 124 LOAD_FAST 4 ( count )				  
							      126 RETURN_VALUE NEW_LINE					    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	      WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	    WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	  WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER
--							      --							    --								  --
def countWays ( s ) :					      Disassembly of <code object countWays at 0x7f33e2649a50, file Disassembly of <code object countWays at 0x7f2b0163dc90, file script_not_found : None
    count = [ 0 ] * 26 ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for x in s :					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	count [ ord ( x ) - ord ( 'a' ) ] = ( count [ ord ( x 4 LOAD_CONST 2 ( 26 )					    4 LOAD_CONST 2 ( 26 )					  
    count [ ord ( s [ 0 ] ) - ord ( 'a' ) ] = 1 ;	      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
    ans = 1 ;						      8 STORE_FAST 1 ( count )					    8 STORE_FAST 1 ( count )					  
    for i in range ( 26 ) :				      								    								  
	if ( count [ i ] != 0 ) :			      3 10 SETUP_LOOP 52 ( to 64 )				    3 10 SETUP_LOOP 48 ( to 60 )				  
	    ans *= count [ i ] ;			      12 LOAD_FAST 0 ( s )					    12 LOAD_FAST 0 ( s )					  
    return ans ;					      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 44 ( to 62 )				    >> 16 FOR_ITER 40 ( to 58 )					  
							      18 STORE_FAST 2 ( x )					    18 STORE_FAST 2 ( x )					  
							      								    								  
							      4 20 LOAD_FAST 1 ( count )				    4 20 LOAD_FAST 1 ( count )					  
							      22 LOAD_GLOBAL 0 ( ord )					    22 LOAD_GLOBAL 0 ( ord )					  
							      24 LOAD_FAST 2 ( x )					    24 LOAD_FAST 2 ( x )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 LOAD_GLOBAL 0 ( ord )					    28 LOAD_GLOBAL 0 ( ord )					  
							      30 LOAD_CONST 3 ( 'a' )					    30 LOAD_FAST 2 ( x )					  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 BINARY_SUBSCR						    36 LOAD_CONST 3 ( 1 )					  
							      38 LOAD_CONST 4 ( 1 )					    38 BINARY_ADD						  
							      40 BINARY_ADD						    40 LOAD_FAST 1 ( count )					  
							      42 LOAD_FAST 1 ( count )					    42 LOAD_GLOBAL 0 ( ord )					  
							      44 LOAD_GLOBAL 0 ( ord )					    44 LOAD_FAST 0 ( s )					  
							      46 LOAD_FAST 2 ( x )					    46 LOAD_CONST 1 ( 0 )					  
							      48 CALL_FUNCTION 1					    48 BINARY_SUBSCR						  
							      50 LOAD_GLOBAL 0 ( ord )					    50 CALL_FUNCTION 1						  
							      52 LOAD_CONST 3 ( 'a' )					    52 BINARY_SUBTRACT						  
							      54 CALL_FUNCTION 1					    54 LOAD_CONST 3 ( 1 )					  
							      56 BINARY_SUBTRACT					    56 BINARY_ADD						  
							      58 STORE_SUBSCR						    >> 58 LOAD_FAST 1 ( count )					  
							      60 JUMP_ABSOLUTE 16					    60 LOAD_GLOBAL 0 ( ord )					  
							      >> 62 POP_BLOCK						    62 LOAD_FAST 0 ( s )					  
							      								    64 LOAD_CONST 1 ( 0 )					  
							      5 >> 64 LOAD_CONST 4 ( 1 )				    66 BINARY_SUBSCR						  
							      66 LOAD_FAST 1 ( count )					    68 CALL_FUNCTION 1						  
							      68 LOAD_GLOBAL 0 ( ord )					    70 LOAD_GLOBAL 0 ( ord )					  
							      70 LOAD_FAST 0 ( s )					    72 LOAD_CONST 4 ( 'a' )					  
							      72 LOAD_CONST 1 ( 0 )					    74 CALL_FUNCTION 1						  
							      74 BINARY_SUBSCR						    76 BINARY_SUBTRACT						  
							      76 CALL_FUNCTION 1					    78 STORE_SUBSCR						  
							      78 LOAD_GLOBAL 0 ( ord )					    								  
							      80 LOAD_CONST 3 ( 'a' )					    5 80 LOAD_CONST 3 ( 1 )					  
							      82 CALL_FUNCTION 1					    82 STORE_FAST 3 ( ans )					  
							      84 BINARY_SUBTRACT					    								  
							      86 STORE_SUBSCR						    6 84 SETUP_LOOP 48 ( to 126 )				  
							      								    86 LOAD_GLOBAL 1 ( range )					  
							      6 88 LOAD_CONST 4 ( 1 )					    88 LOAD_CONST 2 ( 26 )					  
							      90 STORE_FAST 3 ( ans )					    90 CALL_FUNCTION 1						  
							      								    92 GET_ITER							  
							      7 92 SETUP_LOOP 40 ( to 134 )				    >> 94 FOR_ITER 36 ( to 124 )				  
							      94 LOAD_GLOBAL 1 ( range )				    96 STORE_FAST 4 ( i )					  
							      96 LOAD_CONST 2 ( 26 )					    								  
							      98 CALL_FUNCTION 1					    7 98 LOAD_FAST 1 ( count )					  
							      100 GET_ITER						    100 LOAD_FAST 4 ( i )					  
							      >> 102 FOR_ITER 28 ( to 132 )				    102 BINARY_SUBSCR						  
							      104 STORE_FAST 4 ( i )					    104 LOAD_CONST 1 ( 0 )					  
							      								    106 COMPARE_OP 3 ( != )					  
							      8 106 LOAD_FAST 1 ( count )				    108 POP_JUMP_IF_FALSE 94					  
							      108 LOAD_FAST 4 ( i )					    								  
							      110 BINARY_SUBSCR						    8 110 LOAD_FAST 3 ( ans )					  
							      112 LOAD_CONST 1 ( 0 )					    112 LOAD_FAST 1 ( count )					  
							      114 COMPARE_OP 3 ( != )					    114 LOAD_FAST 4 ( i )					  
							      116 POP_JUMP_IF_FALSE 102					    116 BINARY_SUBSCR						  
							      								    118 INPLACE_MULTIPLY					  
							      9 118 LOAD_FAST 3 ( ans )					    120 STORE_FAST 3 ( ans )					  
							      120 LOAD_FAST 1 ( count )					    122 JUMP_ABSOLUTE 94					  
							      122 LOAD_FAST 4 ( i )					    >> 124 POP_BLOCK						  
							      124 BINARY_SUBSCR						    								  
							      126 INPLACE_MULTIPLY					    9 >> 126 LOAD_FAST 3 ( ans )				  
							      128 STORE_FAST 3 ( ans )					    128 RETURN_VALUE NEW_LINE					  
							      130 JUMP_ABSOLUTE 102					    								  
							      >> 132 POP_BLOCK						    								  
							      								    								  
							      10 >> 134 LOAD_FAST 3 ( ans )				    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT<
--							      --							    --								  --
def MinOperation ( a , b , n ) :			      Disassembly of <code object MinOperation at 0x7f33e2644930, f Disassembly of <code object MinOperation at 0x7f2b0163dc90, f script_not_found : None
    a.sort ( reverse = False )				      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    b.sort ( reverse = False )				      2 LOAD_ATTR 0 ( sort )					    2 LOAD_ATTR 0 ( sort )					  
    result = 0						      4 LOAD_CONST 1 ( False )					    4 LOAD_CONST 1 ( False )					  
    for i in range ( 0 , n , 1 ) :			      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 LOAD_CONST 2 ( ( 'reverse' , ) )				  
	if ( a [ i ] > b [ i ] ) :			      8 CALL_FUNCTION_KW 1					    8 CALL_FUNCTION_KW 1					  
	    result = result + abs ( a [ i ] - b [ i ] )	      10 POP_TOP						    10 POP_TOP							  
	elif ( a [ i ] < b [ i ] ) :			      								    								  
	    result = result + abs ( a [ i ] - b [ i ] )	      3 12 LOAD_FAST 1 ( b )					    3 12 LOAD_FAST 1 ( b )					  
    return result					      14 LOAD_ATTR 0 ( sort )					    14 LOAD_ATTR 0 ( sort )					  
							      16 LOAD_CONST 1 ( False )					    16 LOAD_CONST 1 ( False )					  
							      18 LOAD_CONST 2 ( ( 'reverse' , ) )			    18 LOAD_CONST 2 ( ( 'reverse' , ) )				  
							      20 CALL_FUNCTION_KW 1					    20 CALL_FUNCTION_KW 1					  
							      22 POP_TOP						    22 POP_TOP							  
							      								    								  
							      4 24 LOAD_CONST 3 ( 0 )					    4 24 LOAD_CONST 3 ( 0 )					  
							      26 STORE_FAST 3 ( result )				    26 STORE_FAST 3 ( result )					  
							      								    								  
							      5 28 SETUP_LOOP 102 ( to 132 )				    5 28 SETUP_LOOP 92 ( to 118 )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_CONST 3 ( 0 )					    32 LOAD_CONST 3 ( 0 )					  
							      34 LOAD_FAST 2 ( n )					    34 LOAD_FAST 2 ( n )					  
							      36 LOAD_CONST 4 ( 1 )					    36 LOAD_CONST 4 ( 1 )					  
							      38 CALL_FUNCTION 3					    38 CALL_FUNCTION 3						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 86 ( to 130 )				    >> 42 FOR_ITER 68 ( to 116 )				  
							      44 STORE_FAST 4 ( i )					    44 STORE_FAST 4 ( i )					  
							      								    								  
							      6 46 LOAD_FAST 0 ( a )					    6 46 LOAD_FAST 0 ( a )					  
							      48 LOAD_FAST 4 ( i )					    48 LOAD_FAST 4 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 1 ( b )					    52 LOAD_FAST 1 ( b )					  
							      54 LOAD_FAST 4 ( i )					    54 LOAD_FAST 4 ( i )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 COMPARE_OP 4 ( > )					    58 COMPARE_OP 4 ( > )					  
							      60 POP_JUMP_IF_FALSE 88					    60 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      7 62 LOAD_FAST 3 ( result )				    7 62 LOAD_FAST 3 ( result )					  
							      64 LOAD_GLOBAL 2 ( abs )					    64 LOAD_GLOBAL 2 ( abs )					  
							      66 LOAD_FAST 0 ( a )					    66 LOAD_FAST 0 ( a )					  
							      68 LOAD_FAST 4 ( i )					    68 LOAD_FAST 4 ( i )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_FAST 1 ( b )					    72 LOAD_FAST 1 ( b )					  
							      74 LOAD_FAST 4 ( i )					    74 LOAD_FAST 4 ( i )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      82 BINARY_ADD						    >> 82 BINARY_ADD						  
							      84 STORE_FAST 3 ( result )				    84 STORE_FAST 3 ( result )					  
							      86 JUMP_ABSOLUTE 42					    86 JUMP_ABSOLUTE 42						  
							      								    88 POP_BLOCK						  
							      8 >> 88 LOAD_FAST 0 ( a )					    90 JUMP_FORWARD 44 ( to 146 )				  
							      90 LOAD_FAST 4 ( i )					    								  
							      92 BINARY_SUBSCR						    8 >> 92 LOAD_FAST 0 ( a )					  
							      94 LOAD_FAST 1 ( b )					    94 LOAD_FAST 4 ( i )					  
							      96 LOAD_FAST 4 ( i )					    96 BINARY_SUBSCR						  
							      98 BINARY_SUBSCR						    98 LOAD_FAST 1 ( b )					  
							      100 COMPARE_OP 0 ( < )					    100 LOAD_FAST 4 ( i )					  
							      102 POP_JUMP_IF_FALSE 42					    102 BINARY_SUBSCR						  
							      								    104 COMPARE_OP 0 ( < )					  
							      9 104 LOAD_FAST 3 ( result )				    106 POP_JUMP_IF_FALSE 146					  
							      106 LOAD_GLOBAL 2 ( abs )					    								  
							      108 LOAD_FAST 0 ( a )					    9 108 LOAD_FAST 3 ( result )				  
							      110 LOAD_FAST 4 ( i )					    110 LOAD_GLOBAL 2 ( abs )					  
							      112 BINARY_SUBSCR						    112 LOAD_FAST 0 ( a )					  
							      114 LOAD_FAST 1 ( b )					    114 LOAD_FAST 4 ( i )					  
							      116 LOAD_FAST 4 ( i )					    116 BINARY_SUBSCR						  
							      118 BINARY_SUBSCR						    118 LOAD_FAST 1 ( b )					  
							      120 BINARY_SUBTRACT					    120 LOAD_FAST 4 ( i )					  
							      122 CALL_FUNCTION 1					    122 BINARY_SUBSCR						  
							      124 BINARY_ADD						    124 BINARY_SUBTRACT						  
							      126 STORE_FAST 3 ( result )				    126 CALL_FUNCTION 1						  
							      128 JUMP_ABSOLUTE 42					    128 BINARY_ADD						  
							      >> 130 POP_BLOCK						    130 STORE_FAST 3 ( result )					  
							      								    132 JUMP_ABSOLUTE 42					  
							      10 >> 132 LOAD_FAST 3 ( result )				    >> 134 POP_BLOCK						  
							      134 RETURN_VALUE NEW_LINE					    								  
							      								    10 >> 136 LOAD_FAST 3 ( result )				  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
def solve ( i , par , a , n , k , current_ans ) :	      Disassembly of <code object solve at 0x7f33e2644f60, file "<d Disassembly of <code object solve at 0x7f2b0164d930, file "<d script_not_found : None
    if ( par > k ) :					      2 0 LOAD_FAST 1 ( par )					    2 0 LOAD_FAST 1 ( par )					  
	return 0					      2 LOAD_FAST 4 ( k )					    2 LOAD_FAST 4 ( k )						  
    global ans						      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
    if ( par == k and i == n - 1 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	ans = min ( ans , current_ans )			      								    								  
	return 0					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
    for j in range ( i + 1 , n ) :			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	solve ( j , par + 1 , a , n , k , current_ans + ( a [ 								    								  
							      5 >> 12 LOAD_FAST 1 ( par )				    5 >> 12 LOAD_FAST 1 ( par )					  
							      14 LOAD_FAST 4 ( k )					    14 LOAD_FAST 4 ( k )					  
							      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 46					    18 POP_JUMP_IF_FALSE 40					  
							      20 LOAD_FAST 0 ( i )					    20 LOAD_FAST 0 ( i )					  
							      22 LOAD_FAST 3 ( n )					    22 LOAD_FAST 3 ( n )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 COMPARE_OP 2 ( == )					    28 COMPARE_OP 2 ( == )					  
							      30 POP_JUMP_IF_FALSE 46					    30 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      6 32 LOAD_GLOBAL 0 ( min )				    6 32 LOAD_GLOBAL 0 ( min )					  
							      34 LOAD_GLOBAL 1 ( ans )					    34 LOAD_FAST 5 ( ans )					  
							      36 LOAD_FAST 5 ( current_ans )				    36 LOAD_FAST 4 ( current_ans )				  
							      38 CALL_FUNCTION 2					    38 CALL_FUNCTION 2						  
							      40 STORE_GLOBAL 1 ( ans )					    >> 40 STORE_FAST 5 ( ans )					  
							      								    								  
							      7 42 LOAD_CONST 1 ( 0 )					    7 42 LOAD_CONST 1 ( 0 )					  
							      44 RETURN_VALUE						    44 RETURN_VALUE						  
							      								    								  
							      8 >> 46 SETUP_LOOP 84 ( to 132 )				    8 >> 46 SETUP_LOOP 112 ( to 176 )				  
							      48 LOAD_GLOBAL 2 ( range )				    48 LOAD_GLOBAL 1 ( range )					  
							      50 LOAD_FAST 0 ( i )					    50 LOAD_FAST 0 ( i )					  
							      52 LOAD_CONST 2 ( 1 )					    52 LOAD_CONST 2 ( 1 )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 LOAD_FAST 3 ( n )					    56 LOAD_FAST 3 ( n )					  
							      58 CALL_FUNCTION 2					    58 CALL_FUNCTION 2						  
							      60 GET_ITER						    60 GET_ITER							  
							      >> 62 FOR_ITER 66 ( to 130 )				    >> 62 FOR_ITER 100 ( to 174 )				  
							      64 STORE_FAST 6 ( j )					    64 STORE_FAST 6 ( j )					  
							      								    								  
							      9 66 LOAD_GLOBAL 3 ( solve )				    9 66 LOAD_GLOBAL 2 ( solve )				  
							      68 LOAD_FAST 6 ( j )					    68 LOAD_FAST 6 ( j )					  
							      70 LOAD_FAST 1 ( par )					    70 LOAD_FAST 1 ( par )					  
							      72 LOAD_CONST 2 ( 1 )					    72 LOAD_CONST 2 ( 1 )					  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 LOAD_FAST 2 ( a )					    76 LOAD_FAST 2 ( a )					  
							      78 LOAD_FAST 3 ( n )					    78 LOAD_FAST 3 ( n )					  
							      80 LOAD_FAST 4 ( k )					    80 LOAD_FAST 4 ( k )					  
							      82 LOAD_FAST 5 ( current_ans )				    82 LOAD_FAST 5 ( current_ans )				  
							      84 LOAD_FAST 2 ( a )					    84 LOAD_FAST 2 ( a )					  
							      86 LOAD_FAST 6 ( j )					    86 LOAD_FAST 3 ( n )					  
							      88 BINARY_SUBSCR						    88 LOAD_FAST 4 ( k )					  
							      90 LOAD_FAST 2 ( a )					    90 BINARY_SUBTRACT						  
							      92 LOAD_FAST 0 ( i )					    92 LOAD_FAST 2 ( a )					  
							      94 LOAD_CONST 2 ( 1 )					    94 LOAD_FAST 0 ( i )					  
							      96 BINARY_ADD						    96 LOAD_CONST 2 ( 1 )					  
							      98 BINARY_SUBSCR						    98 BINARY_ADD						  
							      100 BINARY_SUBTRACT					    100 BINARY_SUBSCR						  
							      102 LOAD_FAST 2 ( a )					    102 BINARY_SUBTRACT						  
							      104 LOAD_FAST 6 ( j )					    104 BINARY_MULTIPLY						  
							      106 BINARY_SUBSCR						    106 LOAD_FAST 2 ( a )					  
							      108 LOAD_FAST 2 ( a )					    108 LOAD_FAST 6 ( j )					  
							      110 LOAD_FAST 0 ( i )					    110 BINARY_SUBSCR						  
							      112 LOAD_CONST 2 ( 1 )					    112 LOAD_FAST 2 ( a )					  
							      114 BINARY_ADD						    114 LOAD_FAST 0 ( i )					  
							      116 BINARY_SUBSCR						    116 LOAD_CONST 2 ( 1 )					  
							      118 BINARY_SUBTRACT					    118 BINARY_ADD						  
							      120 BINARY_MULTIPLY					    120 BINARY_SUBSCR						  
							      122 BINARY_ADD						    122 BINARY_SUBTRACT						  
							      124 CALL_FUNCTION 6					    124 BINARY_MULTIPLY						  
							      126 POP_TOP						    126 CALL_FUNCTION 7						  
							      128 JUMP_ABSOLUTE 62					    128 POP_TOP							  
							      >> 130 POP_BLOCK						    130 JUMP_ABSOLUTE 62					  
							      >> 132 LOAD_CONST 0 ( None )				    >> 132 POP_BLOCK						  
							      134 RETURN_VALUE NEW_LINE					    >> 134 LOAD_CONST 0 ( None )				  
							      								    136 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2
--							      --							    --								  --
def findElements ( arr , n ) :				      Disassembly of <code object findElements at 0x7f33e2644f60, f Disassembly of <code object findElements at 0x7f2b0163dc90, f script_not_found : None
    first = - sys.maxsize				      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_GLOBAL 0 ( sys )					  
    second = - sys.maxsize				      2 LOAD_ATTR 1 ( maxsize )					    2 LOAD_ATTR 1 ( maxsize )					  
    for i in range ( 0 , n ) :				      4 UNARY_NEGATIVE						    4 UNARY_NEGATIVE						  
	if ( arr [ i ] > first ) :			      6 STORE_FAST 2 ( first )					    6 STORE_FAST 2 ( first )					  
	    second = first				      								    								  
	    first = arr [ i ]				      3 8 LOAD_GLOBAL 0 ( sys )					    3 8 LOAD_GLOBAL 0 ( sys )					  
	elif ( arr [ i ] > second ) :			      10 LOAD_ATTR 1 ( maxsize )				    10 LOAD_ATTR 1 ( maxsize )					  
	    second = arr [ i ]				      12 UNARY_NEGATIVE						    12 UNARY_NEGATIVE						  
    for i in range ( 0 , n ) :				      14 STORE_FAST 3 ( second )				    14 STORE_FAST 3 ( second )					  
	if ( arr [ i ] < second ) :			      								    								  
	    print ( arr [ i ] , end = " " )		      4 16 SETUP_LOOP 64 ( to 82 )				    4 16 SETUP_LOOP 80 ( to 98 )				  
							      18 LOAD_GLOBAL 2 ( range )				    18 LOAD_GLOBAL 2 ( range )					  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 50 ( to 80 )				    >> 28 FOR_ITER 62 ( to 96 )					  
							      30 STORE_FAST 4 ( i )					    30 STORE_FAST 4 ( i )					  
							      								    								  
							      5 32 LOAD_FAST 0 ( arr )					    5 32 LOAD_FAST 0 ( arr )					  
							      34 LOAD_FAST 4 ( i )					    34 LOAD_FAST 4 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 2 ( first )					    38 LOAD_FAST 2 ( first )					  
							      40 COMPARE_OP 4 ( > )					    40 COMPARE_OP 4 ( > )					  
							      42 POP_JUMP_IF_FALSE 58					    42 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      6 44 LOAD_FAST 2 ( first )				    6 44 LOAD_FAST 2 ( first )					  
							      46 STORE_FAST 3 ( second )				    46 STORE_FAST 3 ( second )					  
							      								    								  
							      7 48 LOAD_FAST 0 ( arr )					    7 48 LOAD_FAST 0 ( arr )					  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 4 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 STORE_FAST 2 ( first )					    54 STORE_FAST 2 ( first )					  
							      56 JUMP_ABSOLUTE 28					    56 JUMP_ABSOLUTE 28						  
							      								    58 POP_BLOCK						  
							      8 >> 58 LOAD_FAST 0 ( arr )				    								  
							      60 LOAD_FAST 4 ( i )					    8 >> 60 LOAD_FAST 0 ( arr )					  
							      62 BINARY_SUBSCR						    62 LOAD_FAST 4 ( i )					  
							      64 LOAD_FAST 3 ( second )					    64 BINARY_SUBSCR						  
							      66 COMPARE_OP 4 ( > )					    66 LOAD_FAST 3 ( second )					  
							      68 POP_JUMP_IF_FALSE 28					    68 COMPARE_OP 4 ( > )					  
							      								    70 POP_JUMP_IF_FALSE 80					  
							      9 70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 4 ( i )					    9 72 LOAD_FAST 0 ( arr )					  
							      74 BINARY_SUBSCR						    74 LOAD_FAST 4 ( i )					  
							      76 STORE_FAST 3 ( second )				    76 BINARY_SUBSCR						  
							      78 JUMP_ABSOLUTE 28					    78 STORE_FAST 3 ( second )					  
							      >> 80 POP_BLOCK						    								  
							      								    10 >> 80 SETUP_LOOP 34 ( to 94 )				  
							      10 >> 82 SETUP_LOOP 46 ( to 130 )				    82 LOAD_GLOBAL 2 ( range )					  
							      84 LOAD_GLOBAL 2 ( range )				    84 LOAD_CONST 1 ( 0 )					  
							      86 LOAD_CONST 1 ( 0 )					    86 LOAD_FAST 1 ( n )					  
							      88 LOAD_FAST 1 ( n )					    88 CALL_FUNCTION 2						  
							      90 CALL_FUNCTION 2					    90 GET_ITER							  
							      92 GET_ITER						    >> 92 FOR_ITER 20 ( to 92 )					  
							      >> 94 FOR_ITER 32 ( to 128 )				    96 STORE_FAST 4 ( i )					  
							      96 STORE_FAST 4 ( i )					    								  
							      								    11 98 LOAD_FAST 0 ( arr )					  
							      11 98 LOAD_FAST 0 ( arr )					    100 LOAD_FAST 4 ( i )					  
							      100 LOAD_FAST 4 ( i )					    102 BINARY_SUBSCR						  
							      102 BINARY_SUBSCR						    104 LOAD_FAST 3 ( second )					  
							      104 LOAD_FAST 3 ( second )				    106 COMPARE_OP 0 ( < )					  
							      106 COMPARE_OP 0 ( < )					    108 POP_JUMP_IF_FALSE 92					  
							      108 POP_JUMP_IF_FALSE 94					    								  
							      								    12 110 LOAD_GLOBAL 3 ( print )				  
							      12 110 LOAD_GLOBAL 3 ( print )				    112 LOAD_FAST 0 ( arr )					  
							      112 LOAD_FAST 0 ( arr )					    114 LOAD_FAST 4 ( i )					  
							      114 LOAD_FAST 4 ( i )					    116 BINARY_SUBSCR						  
							      116 BINARY_SUBSCR						    118 LOAD_CONST 2 ( ' ' )					  
							      118 LOAD_CONST 2 ( ' ' )					    120 LOAD_CONST 3 ( ( 'end' , ) )				  
							      120 LOAD_CONST 3 ( ( 'end' , ) )				    122 CALL_FUNCTION_KW 2					  
							      122 CALL_FUNCTION_KW 2					    124 POP_TOP							  
							      124 POP_TOP						    126 JUMP_ABSOLUTE 92					  
							      126 JUMP_ABSOLUTE 94					    >> 128 POP_BLOCK						  
							      >> 128 POP_BLOCK						    >> 130 LOAD_CONST 0 ( None )				  
							      >> 130 LOAD_CONST 0 ( None )				    132 RETURN_VALUE NEW_LINE					  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	      SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	    SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS		  SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS
--							      --							    --								  --
def findSmallestDifference ( A , B , m , n ) :		      Disassembly of <code object findSmallestDifference at 0x7f33e Disassembly of <code object findSmallestDifference at 0x7f2b0 error : Traceback (most recent call last):   File
    A.sort ( )						      2 0 LOAD_FAST 0 ( A )					    2 0 LOAD_FAST 0 ( A )					  "XLM/dis_script.py", line 60, in <module>	exec
    B.sort ( )						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 42, in <module>	  Fi
    a = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in findSmallestDifference Type
    b = 0						      6 POP_TOP							    6 POP_TOP							  Error: 'int' object is not subscriptable
    result = sys.maxsize				      								    								  
    while ( a < m and b < n ) :				      3 8 LOAD_FAST 1 ( B )					    3 8 LOAD_FAST 1 ( B )					  
	if ( abs ( A [ a ] - B [ b ] ) < result ) :	      10 LOAD_METHOD 0 ( sort )					    10 LOAD_METHOD 0 ( sort )					  
	    result = abs ( A [ a ] - B [ b ] )		      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
	if ( A [ a ] < B [ b ] ) :			      14 POP_TOP						    14 POP_TOP							  
	    a += 1					      								    								  
	else :						      4 16 LOAD_CONST 1 ( 0 )					    4 16 LOAD_CONST 1 ( 0 )					  
	    b += 1					      18 STORE_FAST 4 ( a )					    18 STORE_FAST 4 ( a )					  
    return result					      								    								  
							      5 20 LOAD_CONST 1 ( 0 )					    5 20 LOAD_CONST 1 ( 0 )					  
							      22 STORE_FAST 5 ( b )					    22 STORE_FAST 5 ( b )					  
							      								    								  
							      6 24 LOAD_GLOBAL 1 ( sys )				    6 24 LOAD_GLOBAL 1 ( sys )					  
							      26 LOAD_ATTR 2 ( maxsize )				    26 LOAD_ATTR 2 ( maxsize )					  
							      28 STORE_FAST 6 ( result )				    28 STORE_FAST 6 ( result )					  
							      								    								  
							      7 30 SETUP_LOOP 98 ( to 130 )				    7 30 SETUP_LOOP 68 ( to 96 )				  
							      >> 32 LOAD_FAST 4 ( a )					    >> 32 LOAD_FAST 4 ( a )					  
							      34 LOAD_FAST 2 ( m )					    34 LOAD_FAST 2 ( m )					  
							      36 COMPARE_OP 0 ( < )					    36 COMPARE_OP 0 ( < )					  
							      38 POP_JUMP_IF_FALSE 128					    38 POP_JUMP_IF_FALSE 94					  
							      40 LOAD_FAST 5 ( b )					    40 LOAD_FAST 5 ( b )					  
							      42 LOAD_FAST 3 ( n )					    42 LOAD_FAST 3 ( n )					  
							      44 COMPARE_OP 0 ( < )					    44 COMPARE_OP 0 ( < )					  
							      46 POP_JUMP_IF_FALSE 128					    46 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      8 48 LOAD_GLOBAL 3 ( abs )				    8 48 LOAD_GLOBAL 3 ( abs )					  
							      50 LOAD_FAST 0 ( A )					    50 LOAD_FAST 0 ( A )					  
							      52 LOAD_FAST 4 ( a )					    52 LOAD_FAST 4 ( a )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 1 ( B )					    56 LOAD_FAST 1 ( B )					  
							      58 LOAD_FAST 5 ( b )					    58 LOAD_FAST 5 ( b )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 LOAD_FAST 6 ( result )					    66 LOAD_FAST 6 ( result )					  
							      68 COMPARE_OP 0 ( < )					    68 COMPARE_OP 0 ( < )					  
							      70 POP_JUMP_IF_FALSE 92					    70 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      9 72 LOAD_GLOBAL 3 ( abs )				    9 72 LOAD_GLOBAL 3 ( abs )					  
							      74 LOAD_FAST 0 ( A )					    74 LOAD_FAST 0 ( A )					  
							      76 LOAD_FAST 4 ( a )					    76 LOAD_FAST 4 ( a )					  
							      78 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      80 LOAD_FAST 1 ( B )					    80 LOAD_FAST 1 ( B )					  
							      82 LOAD_FAST 5 ( b )					    82 LOAD_FAST 5 ( b )					  
							      84 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      86 BINARY_SUBTRACT					    86 BINARY_SUBTRACT						  
							      88 CALL_FUNCTION 1					    88 CALL_FUNCTION 1						  
							      90 STORE_FAST 6 ( result )				    90 STORE_FAST 6 ( result )					  
							      								    92 JUMP_ABSOLUTE 32						  
							      10 >> 92 LOAD_FAST 0 ( A )				    >> 94 POP_BLOCK						  
							      94 LOAD_FAST 4 ( a )					    								  
							      96 BINARY_SUBSCR						    10 >> 96 LOAD_FAST 0 ( A )					  
							      98 LOAD_FAST 1 ( B )					    98 LOAD_FAST 4 ( a )					  
							      100 LOAD_FAST 5 ( b )					    100 BINARY_SUBSCR						  
							      102 BINARY_SUBSCR						    102 LOAD_FAST 1 ( B )					  
							      104 COMPARE_OP 0 ( < )					    104 LOAD_FAST 5 ( b )					  
							      106 POP_JUMP_IF_FALSE 118					    106 BINARY_SUBSCR						  
							      								    108 COMPARE_OP 0 ( < )					  
							      11 108 LOAD_FAST 4 ( a )					    110 POP_JUMP_IF_FALSE 126					  
							      110 LOAD_CONST 2 ( 1 )					    								  
							      112 INPLACE_ADD						    11 112 LOAD_FAST 4 ( a )					  
							      114 STORE_FAST 4 ( a )					    114 LOAD_CONST 2 ( 1 )					  
							      116 JUMP_ABSOLUTE 32					    116 INPLACE_ADD						  
							      								    118 STORE_FAST 4 ( a )					  
							      13 >> 118 LOAD_FAST 5 ( b )				    120 JUMP_FORWARD 8 ( to 132 )				  
							      120 LOAD_CONST 2 ( 1 )					    								  
							      122 INPLACE_ADD						    13 >> 122 LOAD_FAST 5 ( b )					  
							      124 STORE_FAST 5 ( b )					    124 LOAD_CONST 2 ( 1 )					  
							      126 JUMP_ABSOLUTE 32					    126 INPLACE_ADD						  
							      >> 128 POP_BLOCK						    128 STORE_FAST 5 ( b )					  
							      								    								  
							      14 >> 130 LOAD_FAST 6 ( result )				    14 >> 130 LOAD_FAST 6 ( result )				  
							      132 RETURN_VALUE NEW_LINE					    132 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		      CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		    CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		  CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT
--							      --							    --								  --
def checkPoint ( radius , x , y , percent , startAngle ) :    Disassembly of <code object checkPoint at 0x7f33e2644f60, fil Disassembly of <code object checkPoint at 0x7f2b0163dc90, fil script_not_found : None
    endAngle = 360 / percent + startAngle		      2 0 LOAD_CONST 1 ( 360 )					    2 0 LOAD_CONST 1 ( 360 )					  
    polarradius = math.sqrt ( x * x + y * y )		      2 LOAD_FAST 3 ( percent )					    2 LOAD_FAST 2 ( percent )					  
    Angle = math.atan ( y / x )				      4 BINARY_TRUE_DIVIDE					    4 BINARY_TRUE_DIVIDE					  
    if ( Angle >= startAngle and Angle <= endAngle and polarr 6 LOAD_FAST 4 ( startAngle )				    6 LOAD_FAST 3 ( startAngle )				  
	print ( "Point (" , x , "," , y , ") " "exist in the  8 BINARY_ADD						    8 BINARY_ADD						  
    else :						      10 STORE_FAST 5 ( endAngle )				    10 STORE_FAST 5 ( endAngle )				  
	print ( "Point (" , x , "," , y , ") " "does not exis 								    								  
							      3 12 LOAD_GLOBAL 0 ( math )				    3 12 LOAD_GLOBAL 0 ( math )					  
							      14 LOAD_METHOD 1 ( sqrt )					    14 LOAD_METHOD 1 ( sqrt )					  
							      16 LOAD_FAST 1 ( x )					    16 LOAD_FAST 1 ( x )					  
							      18 LOAD_FAST 1 ( x )					    18 LOAD_FAST 1 ( x )					  
							      20 BINARY_MULTIPLY					    20 BINARY_MULTIPLY						  
							      22 LOAD_FAST 2 ( y )					    22 LOAD_FAST 2 ( y )					  
							      24 LOAD_FAST 2 ( y )					    24 LOAD_FAST 2 ( y )					  
							      26 BINARY_MULTIPLY					    26 BINARY_MULTIPLY						  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 CALL_METHOD 1						    30 CALL_METHOD 1						  
							      32 STORE_FAST 6 ( polarradius )				    32 STORE_FAST 6 ( pol/ us )					  
							      								    								  
							      4 34 LOAD_GLOBAL 0 ( math )				    4 34 LOAD_GLOBAL 0 ( math )					  
							      36 LOAD_METHOD 2 ( atan )					    36 LOAD_METHOD 2 ( atan )					  
							      38 LOAD_FAST 2 ( y )					    38 LOAD_FAST 2 ( y )					  
							      40 LOAD_FAST 1 ( x )					    40 LOAD_FAST 1 ( x )					  
							      42 BINARY_TRUE_DIVIDE					    42 BINARY_TRUE_DIVIDE					  
							      44 CALL_METHOD 1						    44 CALL_METHOD 1						  
							      46 STORE_FAST 7 ( Angle )					    46 STORE_FAST 7 ( Angle )					  
							      								    								  
							      5 48 LOAD_FAST 7 ( Angle )				    5 48 LOAD_FAST 7 ( Angle )					  
							      50 LOAD_FAST 4 ( startAngle )				    50 LOAD_FAST 3 ( startAngle )				  
							      52 COMPARE_OP 5 ( >= )					    52 COMPARE_OP 5 ( >= )					  
							      54 POP_JUMP_IF_FALSE 90					    54 POP_JUMP_IF_FALSE 76					  
							      56 LOAD_FAST 7 ( Angle )					    56 LOAD_FAST 7 ( Angle )					  
							      58 LOAD_FAST 5 ( endAngle )				    58 LOAD_FAST 5 ( endAngle )					  
							      60 COMPARE_OP 1 ( <= )					    60 COMPARE_OP 1 ( <= )					  
							      62 POP_JUMP_IF_FALSE 90					    62 POP_JUMP_IF_FALSE 76					  
							      64 LOAD_FAST 6 ( polarradius )				    64 LOAD_FAST 6 ( pol/ us )					  
							      66 LOAD_FAST 0 ( radius )					    66 LOAD_FAST 0 ( radius )					  
							      68 COMPARE_OP 0 ( < )					    68 COMPARE_OP 0 ( < )					  
							      70 POP_JUMP_IF_FALSE 90					    70 POP_JUMP_IF_TRUE 76					  
							      								    72 LOAD_FAST 6 ( pol/ us )					  
							      6 72 LOAD_GLOBAL 3 ( print )				    74 LOAD_FAST 0 ( radius )					  
							      74 LOAD_CONST 2 ( 'Point (' )				    76 COMPARE_OP 0 ( < )					  
							      76 LOAD_FAST 1 ( x )					    78 POP_JUMP_IF_FALSE 88					  
							      78 LOAD_CONST 3 ( ',' )					    								  
							      80 LOAD_FAST 2 ( y )					    6 >> 80 LOAD_GLOBAL 3 ( print )				  
							      82 LOAD_CONST 4 ( ') exist in the circle sector' )	    82 LOAD_CONST 2 ( 'Point (' )				  
							      84 CALL_FUNCTION 5					    84 LOAD_FAST 1 ( x )					  
							      86 POP_TOP						    86 LOAD_CONST 3 ( ',' )					  
							      88 JUMP_FORWARD 16 ( to 106 )				    88 LOAD_FAST 2 ( y )					  
							      								    90 LOAD_CONST 4 ( ') does not exist in the circle sector' )	  
							      8 >> 90 LOAD_GLOBAL 3 ( print )				    92 CALL_FUNCTION 5						  
							      92 LOAD_CONST 2 ( 'Point (' )				    94 POP_TOP							  
							      94 LOAD_FAST 1 ( x )					    96 JUMP_FORWARD 8 ( to 102 )				  
							      96 LOAD_CONST 3 ( ',' )					    								  
							      98 LOAD_FAST 2 ( y )					    8 >> 98 LOAD_GLOBAL 3 ( print )				  
							      100 LOAD_CONST 5 ( ') does not exist in the circle sector' )  100 LOAD_CONST 5 ( 'Point (' )				  
							      102 CALL_FUNCTION 5					    102 LOAD_FAST 1 ( x )					  
							      104 POP_TOP						    104 LOAD_CONST 3 ( ',' )					  
							      >> 106 LOAD_CONST 0 ( None )				    106 LOAD_FAST 2 ( y )					  
							      108 RETURN_VALUE NEW_LINE					    108 LOAD_CONST 4 ( ') does not exist in the circle sector' )  
							      								    110 CALL_FUNCTION 3						  
							      								    112 POP_TOP							  
							      								    114 LOAD_CONST 0 ( None )					  
							      								    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT_1					      MAJORITY_ELEMENT_1					    MAJORITY_ELEMENT_1						  MAJORITY_ELEMENT_1
--							      --							    --								  --
def findMajority ( arr , size ) :			      Disassembly of <code object findMajority at 0x7f33e2653ed0, f Disassembly of <code object findMajority at 0x7f2b0163dc90, f script_not_found : None
    m = { }						      2 0 BUILD_MAP 0						    2 0 BUILD_MAP 0						  
    for i in range ( size ) :				      2 STORE_FAST 2 ( m )					    2 STORE_FAST 2 ( m )					  
	if arr [ i ] in m :				      								    								  
	    m [ arr [ i ] ] += 1			      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 SETUP_LOOP 52 ( to 58 )					  
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    m [ arr [ i ] ] = 1				      8 LOAD_FAST 1 ( size )					    8 LOAD_FAST 1 ( size )					  
    count = 0						      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    for key in m :					      12 GET_ITER						    12 GET_ITER							  
	if m [ key ] > size / 2 :			      >> 14 FOR_ITER 50 ( to 66 )				    >> 14 FOR_ITER 44 ( to 56 )					  
	    count = 1					      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
	    print ( "Majority found :-" , key )		      								    								  
	    break					      4 18 LOAD_FAST 0 ( arr )					    4 18 LOAD_FAST 0 ( arr )					  
    if ( count == 0 ) :					      20 LOAD_FAST 3 ( i )					    20 LOAD_FAST 3 ( i )					  
	print ( "No Majority element" )			      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
							      24 LOAD_FAST 2 ( m )					    24 LOAD_FAST 2 ( m )					  
							      26 COMPARE_OP 6 ( in )					    26 COMPARE_OP 6 ( in )					  
							      28 POP_JUMP_IF_FALSE 52					    28 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      5 30 LOAD_FAST 2 ( m )					    5 30 LOAD_FAST 2 ( m )					  
							      32 LOAD_FAST 0 ( arr )					    32 LOAD_FAST 0 ( arr )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 DUP_TOP_TWO						    38 DUP_TOP_TWO						  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_CONST 1 ( 1 )					    42 LOAD_CONST 1 ( 1 )					  
							      44 INPLACE_ADD						    44 INPLACE_ADD						  
							      46 ROT_THREE						    46 ROT_THREE						  
							      48 STORE_SUBSCR						    48 STORE_SUBSCR						  
							      50 JUMP_ABSOLUTE 14					    50 JUMP_ABSOLUTE 14						  
							      								    >> 52 POP_BLOCK						  
							      7 >> 52 LOAD_CONST 1 ( 1 )				    								  
							      54 LOAD_FAST 2 ( m )					    7 >> 54 LOAD_CONST 1 ( 1 )					  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 2 ( m )					  
							      58 LOAD_FAST 3 ( i )					    58 LOAD_FAST 0 ( arr )					  
							      60 BINARY_SUBSCR						    60 LOAD_FAST 3 ( i )					  
							      62 STORE_SUBSCR						    62 BINARY_SUBSCR						  
							      64 JUMP_ABSOLUTE 14					    64 STORE_SUBSCR						  
							      >> 66 POP_BLOCK						    66 JUMP_ABSOLUTE 14						  
							      								    >> 68 POP_BLOCK						  
							      8 >> 68 LOAD_CONST 2 ( 0 )				    								  
							      70 STORE_FAST 4 ( count )					    8 70 LOAD_CONST 2 ( 0 )					  
							      								    72 STORE_FAST 4 ( count )					  
							      9 72 SETUP_LOOP 44 ( to 118 )				    								  
							      74 LOAD_FAST 2 ( m )					    9 74 SETUP_LOOP 52 ( to 126 )				  
							      76 GET_ITER						    76 LOAD_FAST 2 ( m )					  
							      >> 78 FOR_ITER 36 ( to 116 )				    78 GET_ITER							  
							      80 STORE_FAST 5 ( key )					    >> 80 FOR_ITER 44 ( to 124 )				  
							      								    82 STORE_FAST 5 ( key )					  
							      10 82 LOAD_FAST 2 ( m )					    								  
							      84 LOAD_FAST 5 ( key )					    10 84 LOAD_FAST 2 ( m )					  
							      86 BINARY_SUBSCR						    86 LOAD_FAST 5 ( key )					  
							      88 LOAD_FAST 1 ( size )					    88 BINARY_SUBSCR						  
							      90 LOAD_CONST 3 ( 2 )					    90 LOAD_FAST 1 ( size )					  
							      92 BINARY_TRUE_DIVIDE					    92 LOAD_CONST 3 ( 2 )					  
							      94 COMPARE_OP 4 ( > )					    94 BINARY_TRUE_DIVIDE					  
							      96 POP_JUMP_IF_FALSE 78					    96 COMPARE_OP 4 ( > )					  
							      								    98 POP_JUMP_IF_FALSE 80					  
							      11 98 LOAD_CONST 1 ( 1 )					    								  
							      100 STORE_FAST 4 ( count )				    11 100 LOAD_CONST 1 ( 1 )					  
							      								    102 STORE_FAST 4 ( count )					  
							      12 102 LOAD_GLOBAL 1 ( print )				    								  
							      104 LOAD_CONST 4 ( 'Majority found :-' )			    12 104 LOAD_GLOBAL 1 ( print )				  
							      106 LOAD_FAST 5 ( key )					    106 LOAD_CONST 4 ( 'Majority found :-' )			  
							      108 CALL_FUNCTION 2					    108 LOAD_FAST 5 ( key )					  
							      110 POP_TOP						    110 CALL_FUNCTION 2						  
							      								    112 POP_TOP							  
							      13 112 BREAK_LOOP						    								  
							      114 JUMP_ABSOLUTE 78					    13 114 BREAK_LOOP						  
							      >> 116 POP_BLOCK						    116 JUMP_ABSOLUTE 80					  
							      								    >> 118 POP_BLOCK						  
							      14 >> 118 LOAD_FAST 4 ( count )				    								  
							      120 LOAD_CONST 2 ( 0 )					    14 >> 120 LOAD_FAST 4 ( count )				  
							      122 COMPARE_OP 2 ( == )					    122 LOAD_CONST 2 ( 0 )					  
							      124 POP_JUMP_IF_FALSE 134					    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 144					  
							      15 126 LOAD_GLOBAL 1 ( print )				    								  
							      128 LOAD_CONST 5 ( 'No Majority element' )		    15 128 LOAD_GLOBAL 1 ( print )				  
							      130 CALL_FUNCTION 1					    130 LOAD_CONST 5 ( 'No Majority element' )			  
							      132 POP_TOP						    132 CALL_FUNCTION 1						  
							      >> 134 LOAD_CONST 0 ( None )				    134 POP_TOP							  
							      136 RETURN_VALUE NEW_LINE					    136 LOAD_CONST 0 ( None )					  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS		      PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			    PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			  PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS
--							      --							    --								  --
def amendSentence ( string ) :				      Disassembly of <code object amendSentence at 0x7f33e26494b0,  Disassembly of <code object amendSentence at 0x7f2b0163dc90,  script_not_found : None
    string = list ( string )				      2 0 LOAD_GLOBAL 0 ( list )				    2 0 LOAD_GLOBAL 0 ( list )					  
    for i in range ( len ( string ) ) :			      2 LOAD_FAST 0 ( string )					    2 LOAD_FAST 0 ( string )					  
	if string [ i ] >= 'A' and string [ i ] <= 'Z' :      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    string [ i ] = chr ( ord ( string [ i ] ) + 32 )  6 STORE_FAST 0 ( string )					    6 STORE_FAST 0 ( string )					  
	    if i != 0 :					      								    								  
		print ( "" , end = "" )			      3 8 SETUP_LOOP 122 ( to 132 )				    3 8 SETUP_LOOP 96 ( to 108 )				  
	    print ( string [ i ] , end = "" )		      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
	else :						      12 LOAD_GLOBAL 2 ( len )					    12 LOAD_GLOBAL 2 ( len )					  
	    print ( string [ i ] , end = "" )		      14 LOAD_FAST 0 ( string )					    14 LOAD_FAST 0 ( string )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 106 ( to 130 )				    >> 22 FOR_ITER 82 ( to 106 )				  
							      24 STORE_FAST 1 ( i )					    24 STORE_FAST 1 ( i )					  
							      								    								  
							      4 26 LOAD_FAST 0 ( string )				    4 26 LOAD_FAST 0 ( string )					  
							      28 LOAD_FAST 1 ( i )					    28 LOAD_FAST 1 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_CONST 1 ( 'A' )					    32 LOAD_CONST 1 ( 'A' )					  
							      34 COMPARE_OP 5 ( >= )					    34 COMPARE_OP 5 ( >= )					  
							      36 POP_JUMP_IF_FALSE 112					    36 POP_JUMP_IF_FALSE 22					  
							      38 LOAD_FAST 0 ( string )					    38 LOAD_FAST 0 ( string )					  
							      40 LOAD_FAST 1 ( i )					    40 LOAD_FAST 1 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_CONST 2 ( 'Z' )					    44 LOAD_CONST 2 ( 'Z' )					  
							      46 COMPARE_OP 1 ( <= )					    46 COMPARE_OP 1 ( <= )					  
							      48 POP_JUMP_IF_FALSE 112					    48 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      5 50 LOAD_GLOBAL 3 ( chr )				    5 50 LOAD_GLOBAL 3 ( chr )					  
							      52 LOAD_GLOBAL 4 ( ord )					    52 LOAD_GLOBAL 4 ( ord )					  
							      54 LOAD_FAST 0 ( string )					    54 LOAD_FAST 0 ( string )					  
							      56 LOAD_FAST 1 ( i )					    56 LOAD_FAST 1 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 CALL_FUNCTION 1					    60 CALL_FUNCTION 1						  
							      62 LOAD_CONST 3 ( 32 )					    62 LOAD_CONST 3 ( 32 )					  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 CALL_FUNCTION 1					    66 CALL_FUNCTION 1						  
							      68 LOAD_FAST 0 ( string )					    68 LOAD_FAST 0 ( string )					  
							      70 LOAD_FAST 1 ( i )					    70 LOAD_FAST 1 ( i )					  
							      72 STORE_SUBSCR						    72 STORE_SUBSCR						  
							      								    								  
							      6 74 LOAD_FAST 1 ( i )					    6 74 LOAD_FAST 1 ( i )					  
							      76 LOAD_CONST 4 ( 0 )					    76 LOAD_CONST 4 ( 0 )					  
							      78 COMPARE_OP 3 ( != )					    78 COMPARE_OP 3 ( != )					  
							      80 POP_JUMP_IF_FALSE 94					    80 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      7 82 LOAD_GLOBAL 5 ( print )				    7 82 LOAD_GLOBAL 5 ( print )				  
							      84 LOAD_CONST 5 ( '' )					    84 LOAD_CONST 5 ( ' ' )					  
							      86 LOAD_CONST 5 ( '' )					    86 LOAD_CONST 5 ( '' )					  
							      88 LOAD_CONST 6 ( ( 'end' , ) )				    88 LOAD_CONST 6 ( ( 'end' , ) )				  
							      90 CALL_FUNCTION_KW 2					    90 CALL_FUNCTION_KW 2					  
							      92 POP_TOP						    92 POP_TOP							  
							      								    								  
							      8 >> 94 LOAD_GLOBAL 5 ( print )				    8 >> 94 LOAD_GLOBAL 5 ( print )				  
							      96 LOAD_FAST 0 ( string )					    96 LOAD_FAST 0 ( string )					  
							      98 LOAD_FAST 1 ( i )					    98 LOAD_FAST 1 ( i )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 LOAD_CONST 5 ( '' )					    102 LOAD_CONST 5 ( '' )					  
							      104 LOAD_CONST 6 ( ( 'end' , ) )				    104 LOAD_CONST 6 ( ( 'end' , ) )				  
							      106 CALL_FUNCTION_KW 2					    106 CALL_FUNCTION_KW 2					  
							      108 POP_TOP						    108 POP_TOP							  
							      110 JUMP_ABSOLUTE 22					    110 JUMP_ABSOLUTE 22					  
							      								    112 POP_BLOCK						  
							      10 >> 112 LOAD_GLOBAL 5 ( print )				    								  
							      114 LOAD_FAST 0 ( string )				    10 >> 114 LOAD_GLOBAL 5 ( print )				  
							      116 LOAD_FAST 1 ( i )					    116 LOAD_FAST 0 ( string )					  
							      118 BINARY_SUBSCR						    118 LOAD_FAST 1 ( i )					  
							      120 LOAD_CONST 5 ( '' )					    120 BINARY_SUBSCR						  
							      122 LOAD_CONST 6 ( ( 'end' , ) )				    122 LOAD_CONST 5 ( '' )					  
							      124 CALL_FUNCTION_KW 2					    124 LOAD_CONST 6 ( ( 'end' , ) )				  
							      126 POP_TOP						    126 CALL_FUNCTION_KW 2					  
							      128 JUMP_ABSOLUTE 22					    128 POP_TOP							  
							      >> 130 POP_BLOCK						    130 JUMP_FORWARD 12 ( to 142 )				  
							      >> 132 LOAD_CONST 0 ( None )				    								  
							      134 RETURN_VALUE NEW_LINE					    12 >> 132 LOAD_GLOBAL 5 ( print )				  
							      								    134 LOAD_FAST 0 ( string )					  
							      								    136 LOAD_FAST 1 ( i )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 5 ( '' )					  
							      								    142 LOAD_CONST 6 ( ( 'end' , ) )				  
							      								    144 CALL_FUNCTION_KW 2					  
							      								    146 POP_TOP							  
							      								    >> 148 LOAD_CONST 0 ( None )				  
							      								    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		      MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		    MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE			  MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr , n ) :					      Disassembly of <code object lis at 0x7f33e2644f60, file "<dis Disassembly of <code object lis at 0x7f2b0163dc90, file "<dis script_not_found : None
    mpis = [ 0 ] * ( n )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	mpis [ i ] = arr [ i ]				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
    for i in range ( 1 , n ) :				      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	for j in range ( i ) :				      8 STORE_FAST 2 ( mpis )					    8 STORE_FAST 2 ( mpis )					  
	    if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpi 								    								  
		mpis [ i ] = mpis [ j ] * arr [ i ]	      3 10 SETUP_LOOP 28 ( to 40 )				    3 10 SETUP_LOOP 32 ( to 46 )				  
    return max ( mpis )					      12 LOAD_GLOBAL 0 ( range )				    12 LOAD_GLOBAL 0 ( range )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 16 ( to 38 )				    >> 20 FOR_ITER 20 ( to 44 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 0 ( arr )					    4 24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 2 ( mpis )					    30 LOAD_FAST 2 ( mpis )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 STORE_SUBSCR						    34 STORE_SUBSCR						  
							      36 JUMP_ABSOLUTE 20					    36 JUMP_ABSOLUTE 20						  
							      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
							      								    								  
							      5 >> 40 SETUP_LOOP 96 ( to 138 )				    5 >> 40 SETUP_LOOP 120 ( to 146 )				  
							      42 LOAD_GLOBAL 0 ( range )				    42 LOAD_GLOBAL 0 ( range )					  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 LOAD_FAST 1 ( n )					    46 LOAD_FAST 1 ( n )					  
							      48 CALL_FUNCTION 2					    48 CALL_FUNCTION 2						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 82 ( to 136 )				    >> 52 FOR_ITER 112 ( to 144 )				  
							      54 STORE_FAST 3 ( i )					    54 STORE_FAST 3 ( i )					  
							      								    								  
							      6 56 SETUP_LOOP 76 ( to 134 )				    6 56 SETUP_LOOP 94 ( to 142 )				  
							      58 LOAD_GLOBAL 0 ( range )				    58 LOAD_GLOBAL 0 ( range )					  
							      60 LOAD_FAST 3 ( i )					    60 LOAD_FAST 3 ( i )					  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 GET_ITER						    64 GET_ITER							  
							      >> 66 FOR_ITER 64 ( to 132 )				    >> 66 FOR_ITER 82 ( to 140 )				  
							      68 STORE_FAST 4 ( j )					    68 STORE_FAST 4 ( j )					  
							      								    								  
							      7 70 LOAD_FAST 0 ( arr )					    7 70 LOAD_FAST 0 ( arr )					  
							      72 LOAD_FAST 3 ( i )					    72 LOAD_FAST 3 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 LOAD_FAST 0 ( arr )					    76 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 4 ( j )					    78 LOAD_FAST 4 ( j )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 COMPARE_OP 4 ( > )					    82 COMPARE_OP 4 ( > )					  
							      84 POP_JUMP_IF_FALSE 66					    84 POP_JUMP_IF_FALSE 66					  
							      86 LOAD_FAST 2 ( mpis )					    86 LOAD_FAST 2 ( mpis )					  
							      88 LOAD_FAST 3 ( i )					    88 LOAD_FAST 3 ( i )					  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 LOAD_FAST 2 ( mpis )					    92 LOAD_FAST 2 ( mpis )					  
							      94 LOAD_FAST 4 ( j )					    94 LOAD_FAST 4 ( j )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_FAST 0 ( arr )					    98 LOAD_FAST 0 ( arr )					  
							      100 LOAD_FAST 3 ( i )					    100 LOAD_FAST 3 ( i )					  
							      102 BINARY_SUBSCR						    102 BINARY_SUBSCR						  
							      104 BINARY_MULTIPLY					    104 BINARY_MULTIPLY						  
							      106 COMPARE_OP 0 ( < )					    106 COMPARE_OP 0 ( < )					  
							      108 POP_JUMP_IF_FALSE 66					    108 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      8 110 LOAD_FAST 2 ( mpis )				    8 110 LOAD_FAST 2 ( mpis )					  
							      112 LOAD_FAST 4 ( j )					    112 LOAD_FAST 4 ( j )					  
							      114 BINARY_SUBSCR						    114 BINARY_SUBSCR						  
							      116 LOAD_FAST 0 ( arr )					    116 LOAD_FAST 0 ( arr )					  
							      118 LOAD_FAST 3 ( i )					    118 LOAD_FAST 3 ( i )					  
							      120 BINARY_SUBSCR						    120 BINARY_SUBSCR						  
							      122 BINARY_MULTIPLY					    122 BINARY_MULTIPLY						  
							      124 LOAD_FAST 2 ( mpis )					    124 COMPARE_OP 0 ( < )					  
							      126 LOAD_FAST 3 ( i )					    126 POP_JUMP_IF_FALSE 66					  
							      128 STORE_SUBSCR						    128 LOAD_FAST 2 ( mpis )					  
							      130 JUMP_ABSOLUTE 66					    130 LOAD_FAST 4 ( j )					  
							      >> 132 POP_BLOCK						    132 BINARY_SUBSCR						  
							      >> 134 JUMP_ABSOLUTE 52					    134 LOAD_FAST 0 ( arr )					  
							      >> 136 POP_BLOCK						    136 LOAD_FAST 3 ( i )					  
							      								    138 STORE_SUBSCR						  
							      9 >> 138 LOAD_GLOBAL 1 ( max )				    142 JUMP_ABSOLUTE 66					  
							      140 LOAD_FAST 2 ( mpis )					    >> 144 POP_BLOCK						  
							      142 CALL_FUNCTION 1					    >> 146 JUMP_ABSOLUTE 52					  
							      144 RETURN_VALUE NEW_LINE					    >> 148 POP_BLOCK						  
							      								    								  
							      								    9 >> 150 LOAD_GLOBAL 1 ( max )				  
							      								    152 LOAD_FAST 2 ( mpis )					  
							      								    154 CALL_FUNCTION 1						  
							      								    156 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_LINE_PASSING_2_POINTS			      PROGRAM_FIND_LINE_PASSING_2_POINTS			    PROGRAM_FIND_LINE_PASSING_2_POINTS				  PROGRAM_FIND_LINE_PASSING_2_POINTS
--							      --							    --								  --
def lineFromPoints ( P , Q ) :				      Disassembly of <code object lineFromPoints at 0x7f33e2653ed0, Disassembly of <code object lineFromPoints at 0x7f2b0164d8a0, script_not_found : None
    a = Q [ 1 ] - P [ 1 ]				      2 0 LOAD_FAST 1 ( Q )					    2 0 LOAD_FAST 1 ( Q )					  
    b = P [ 0 ] - Q [ 0 ]				      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    c = a * ( P [ 0 ] ) + b * ( P [ 1 ] )		      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
    if ( b < 0 ) :					      6 LOAD_FAST 0 ( P )					    6 LOAD_FAST 0 ( P )						  
	print ( "The line passing through points P and Q is:" 8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
    else :						      10 BINARY_SUBSCR						    10 BINARY_SUBSCR						  
	print ( "The line passing through points P and Q is:  12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
							      14 STORE_FAST 2 ( a )					    14 STORE_FAST 2 ( a )					  
							      								    								  
							      3 16 LOAD_FAST 0 ( P )					    3 16 LOAD_FAST 0 ( P )					  
							      18 LOAD_CONST 2 ( 0 )					    18 LOAD_CONST 2 ( 0 )					  
							      20 BINARY_SUBSCR						    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 1 ( Q )					    22 LOAD_FAST 1 ( Q )					  
							      24 LOAD_CONST 2 ( 0 )					    24 LOAD_CONST 2 ( 0 )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 STORE_FAST 3 ( b )					    30 STORE_FAST 3 ( b )					  
							      								    								  
							      4 32 LOAD_FAST 2 ( a )					    4 32 LOAD_FAST 2 ( a )					  
							      34 LOAD_FAST 0 ( P )					    34 LOAD_FAST 0 ( P )					  
							      36 LOAD_CONST 2 ( 0 )					    36 LOAD_CONST 2 ( 0 )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 LOAD_FAST 3 ( b )					    42 LOAD_FAST 3 ( b )					  
							      44 LOAD_FAST 0 ( P )					    44 LOAD_FAST 0 ( P )					  
							      46 LOAD_CONST 1 ( 1 )					    46 LOAD_CONST 1 ( 1 )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 BINARY_MULTIPLY					    50 BINARY_MULTIPLY						  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 STORE_FAST 4 ( c )					    54 BINARY_MULTIPLY						  
							      								    56 STORE_FAST 4 ( c )					  
							      5 56 LOAD_FAST 3 ( b )					    								  
							      58 LOAD_CONST 2 ( 0 )					    5 58 LOAD_FAST 3 ( b )					  
							      60 COMPARE_OP 0 ( < )					    60 LOAD_CONST 2 ( 0 )					  
							      62 POP_JUMP_IF_FALSE 86					    62 COMPARE_OP 0 ( < )					  
							      								    64 POP_JUMP_IF_FALSE 80					  
							      6 64 LOAD_GLOBAL 0 ( print )				    								  
							      66 LOAD_CONST 3 ( 'The line passing through points P and Q is 6 66 LOAD_GLOBAL 0 ( print )				  
							      68 LOAD_FAST 2 ( a )					    68 LOAD_CONST 3 ( 'The line passing through points P and Q is 
							      70 LOAD_CONST 4 ( 'x ' )					    70 LOAD_FAST 2 ( a )					  
							      72 LOAD_FAST 3 ( b )					    72 LOAD_CONST 4 ( 'x ' )					  
							      74 LOAD_CONST 5 ( 'y = ' )				    74 LOAD_FAST 3 ( b )					  
							      76 LOAD_FAST 4 ( c )					    76 LOAD_CONST 5 ( 'y = ' )					  
							      78 LOAD_CONST 6 ( '\n' )					    78 LOAD_FAST 4 ( c )					  
							      80 CALL_FUNCTION 7					    80 LOAD_CONST 6 ( '\n' )					  
							      82 POP_TOP						    82 CALL_FUNCTION 6						  
							      84 JUMP_FORWARD 20 ( to 106 )				    84 POP_TOP							  
							      								    86 JUMP_FORWARD 14 ( to 106 )				  
							      8 >> 86 LOAD_GLOBAL 0 ( print )				    								  
							      88 LOAD_CONST 7 ( 'The line passing through points P and Q is 8 >> 88 LOAD_GLOBAL 0 ( print )				  
							      90 LOAD_FAST 2 ( a )					    90 LOAD_CONST 3 ( 'The line passing through points P and Q is 
							      92 LOAD_CONST 8 ( 'x + ' )				    92 LOAD_FAST 2 ( a )					  
							      94 LOAD_FAST 3 ( b )					    94 LOAD_CONST 4 ( 'x + ' )					  
							      96 LOAD_CONST 5 ( 'y = ' )				    96 LOAD_FAST 3 ( b )					  
							      98 LOAD_FAST 4 ( c )					    98 LOAD_CONST 5 ( 'y = ' )					  
							      100 LOAD_CONST 6 ( '\n' )					    100 LOAD_FAST 4 ( c )					  
							      102 CALL_FUNCTION 7					    102 LOAD_CONST 6 ( '\n' )					  
							      104 POP_TOP						    104 CALL_FUNCTION 6						  
							      >> 106 LOAD_CONST 0 ( None )				    106 POP_TOP							  
							      108 RETURN_VALUE NEW_LINE					    108 LOAD_CONST 0 ( None )					  
							      								    110 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MID_POINT_LINE_GENERATION_ALGORITHM			      MID_POINT_LINE_GENERATION_ALGORITHM			    MID_POINT_LINE_GENERATION_ALGORITHM				  MID_POINT_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
def midPoint ( X1 , Y1 , X2 , Y2 ) :			      Disassembly of <code object midPoint at 0x7f33e2653ed0, file  Disassembly of <code object midPoint at 0x7f2b0163dc90, file  script_not_found : None
    dx = X2 - X1					      2 0 LOAD_FAST 2 ( X2 )					    2 0 LOAD_FAST 2 ( X2 )					  
    dy = Y2 - Y1					      2 LOAD_FAST 0 ( X1 )					    2 LOAD_FAST 0 ( X1 )					  
    d = dy - ( dx / 2 )					      4 BINARY_SUBTRACT						    4 BINARY_SUBTRACT						  
    x = X1						      6 STORE_FAST 4 ( dx )					    6 STORE_FAST 4 ( dx )					  
    y = Y1						      								    								  
    print ( x , "," , y , "\n" )			      3 8 LOAD_FAST 3 ( Y2 )					    3 8 LOAD_CONST 1 ( Y2 )					  
    while ( x < X2 ) :					      10 LOAD_FAST 1 ( Y1 )					    10 LOAD_FAST 1 ( Y1 )					  
	x = x + 1					      12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
	if ( d < 0 ) :					      14 STORE_FAST 5 ( dy )					    14 STORE_FAST 5 ( dy )					  
	    d = d + dy					      								    								  
	else :						      4 16 LOAD_FAST 5 ( dy )					    4 16 LOAD_FAST 5 ( dy )					  
	    d = d + ( dy - dx )				      18 LOAD_FAST 4 ( dx )					    18 LOAD_FAST 4 ( dx )					  
	    y = y + 1					      20 LOAD_CONST 1 ( 2 )					    20 LOAD_CONST 2 ( 2 )					  
	print ( x , "," , y , "\n" )			      22 BINARY_TRUE_DIVIDE					    22 BINARY_TRUE_DIVIDE					  
							      24 BINARY_SUBTRACT					    24 BINARY_SUBTRACT						  
							      26 STORE_FAST 6 ( d )					    26 BINARY_SUBTRACT						  
							      								    28 STORE_FAST 6 ( d )					  
							      5 28 LOAD_FAST 0 ( X1 )					    								  
							      30 STORE_FAST 7 ( x )					    5 30 LOAD_FAST 0 ( X1 )					  
							      								    32 STORE_FAST 7 ( x )					  
							      6 32 LOAD_FAST 1 ( Y1 )					    								  
							      34 STORE_FAST 8 ( y )					    6 34 LOAD_FAST 1 ( Y1 )					  
							      								    36 STORE_FAST 8 ( y )					  
							      7 36 LOAD_GLOBAL 0 ( print )				    								  
							      38 LOAD_FAST 7 ( x )					    7 38 LOAD_GLOBAL 0 ( print )				  
							      40 LOAD_CONST 2 ( ',' )					    40 LOAD_FAST 7 ( x )					  
							      42 LOAD_FAST 8 ( y )					    42 LOAD_CONST 3 ( ',' )					  
							      44 LOAD_CONST 3 ( '\n' )					    44 LOAD_FAST 8 ( y )					  
							      46 CALL_FUNCTION 4					    46 LOAD_CONST 4 ( '\n' )					  
							      48 POP_TOP						    48 CALL_FUNCTION 5						  
							      								    50 POP_TOP							  
							      8 50 SETUP_LOOP 72 ( to 124 )				    								  
							      >> 52 LOAD_FAST 7 ( x )					    8 52 SETUP_LOOP 40 ( to 96 )				  
							      54 LOAD_FAST 2 ( X2 )					    >> 54 LOAD_FAST 7 ( x )					  
							      56 COMPARE_OP 0 ( < )					    56 LOAD_FAST 2 ( X2 )					  
							      58 POP_JUMP_IF_FALSE 122					    58 COMPARE_OP 0 ( < )					  
							      								    60 POP_JUMP_IF_FALSE 94					  
							      9 60 LOAD_FAST 7 ( x )					    								  
							      62 LOAD_CONST 4 ( 1 )					    9 62 LOAD_FAST 7 ( x )					  
							      64 BINARY_ADD						    64 LOAD_CONST 5 ( 1 )					  
							      66 STORE_FAST 7 ( x )					    66 BINARY_ADD						  
							      								    68 STORE_FAST 7 ( x )					  
							      10 68 LOAD_FAST 6 ( d )					    								  
							      70 LOAD_CONST 5 ( 0 )					    10 70 LOAD_FAST 6 ( d )					  
							      72 COMPARE_OP 0 ( < )					    72 LOAD_CONST 6 ( 0 )					  
							      74 POP_JUMP_IF_FALSE 86					    74 COMPARE_OP 0 ( < )					  
							      								    76 POP_JUMP_IF_FALSE 82					  
							      11 76 LOAD_FAST 6 ( d )					    								  
							      78 LOAD_FAST 5 ( dy )					    11 78 LOAD_FAST 6 ( d )					  
							      80 BINARY_ADD						    80 LOAD_FAST 5 ( dy )					  
							      82 STORE_FAST 6 ( d )					    82 BINARY_ADD						  
							      84 JUMP_FORWARD 20 ( to 106 )				    84 STORE_FAST 6 ( d )					  
							      								    86 JUMP_ABSOLUTE 54						  
							      13 >> 86 LOAD_FAST 6 ( d )				    								  
							      88 LOAD_FAST 5 ( dy )					    13 >> 88 LOAD_FAST 6 ( d )					  
							      90 LOAD_FAST 4 ( dx )					    90 LOAD_FAST 4 ( dx )					  
							      92 BINARY_SUBTRACT					    92 LOAD_FAST 4 ( dx )					  
							      94 BINARY_ADD						    94 BINARY_SUBTRACT						  
							      96 STORE_FAST 6 ( d )					    96 BINARY_ADD						  
							      								    98 STORE_FAST 6 ( d )					  
							      14 98 LOAD_FAST 8 ( y )					    								  
							      100 LOAD_CONST 4 ( 1 )					    14 100 LOAD_FAST 8 ( y )					  
							      102 BINARY_ADD						    102 LOAD_CONST 5 ( 1 )					  
							      104 STORE_FAST 8 ( y )					    104 BINARY_ADD						  
							      								    106 STORE_FAST 8 ( y )					  
							      15 >> 106 LOAD_GLOBAL 0 ( print )				    108 JUMP_ABSOLUTE 54					  
							      108 LOAD_FAST 7 ( x )					    >> 110 POP_BLOCK						  
							      110 LOAD_CONST 2 ( ',' )					    								  
							      112 LOAD_FAST 8 ( y )					    15 >> 112 LOAD_GLOBAL 0 ( print )				  
							      114 LOAD_CONST 3 ( '\n' )					    114 LOAD_FAST 7 ( x )					  
							      116 CALL_FUNCTION 4					    116 LOAD_CONST 3 ( ',' )					  
							      118 POP_TOP						    118 LOAD_FAST 8 ( y )					  
							      120 JUMP_ABSOLUTE 52					    120 LOAD_CONST 4 ( '\n' )					  
							      >> 122 POP_BLOCK						    122 CALL_FUNCTION 5						  
							      >> 124 LOAD_CONST 0 ( None )				    124 POP_TOP							  
							      126 RETURN_VALUE NEW_LINE					    126 LOAD_CONST 0 ( None )					  
							      								    128 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING	      COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		    COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		  COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING
--							      --							    --								  --
def countPattern ( s ) :				      Disassembly of <code object countPattern at 0x7f33e2649a50, f Disassembly of <code object countPattern at 0x7f2b0163dc90, f error : /bin/bash: line 1:  4768 Segmentation faul
    length = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    oneSeen = False					      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ataset/bin/python XLM/dis_script.py --script_path
    count = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( length ) :				      6 STORE_FAST 1 ( length )					    6 STORE_FAST 1 ( length )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/COUNT_
	if ( s [ i ] == '1' and oneSeen ) :		      								    								  OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING.dis
	    if ( s [ i - 1 ] == '0' ) :			      3 8 LOAD_CONST 1 ( False )				    3 8 LOAD_CONST 1 ( False )					  
		count += 1				      10 STORE_FAST 2 ( oneSeen )				    10 STORE_FAST 2 ( oneSeen )					  
	if ( s [ i ] == '1' and oneSeen == 0 ) :	      								    								  
	    oneSeen = True				      4 12 LOAD_CONST 2 ( 0 )					    4 12 LOAD_CONST 2 ( 0 )					  
	if ( s [ i ] != '0' and s [ i ] != '1' ) :	      14 STORE_FAST 3 ( count )					    14 STORE_FAST 3 ( count )					  
	    oneSeen = False				      								    								  
    return count					      5 16 SETUP_LOOP 108 ( to 126 )				    5 16 SETUP_LOOP 52 ( to 68 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_FAST 1 ( length )					    20 LOAD_FAST 1 ( length )					  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 96 ( to 124 )				    >> 26 FOR_ITER 44 ( to 66 )					  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      6 30 LOAD_FAST 0 ( s )					    6 30 LOAD_FAST 0 ( s )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 3 ( '1' )					    36 LOAD_CONST 3 ( '1' )					  
							      38 COMPARE_OP 2 ( == )					    38 COMPARE_OP 2 ( == )					  
							      40 POP_JUMP_IF_FALSE 70					    40 POP_JUMP_IF_FALSE 26					  
							      42 LOAD_FAST 2 ( oneSeen )				    42 LOAD_FAST 2 ( oneSeen )					  
							      44 POP_JUMP_IF_FALSE 70					    44 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      7 46 LOAD_FAST 0 ( s )					    7 46 LOAD_FAST 0 ( s )					  
							      48 LOAD_FAST 4 ( i )					    48 LOAD_FAST 4 ( i )					  
							      50 LOAD_CONST 4 ( 1 )					    50 LOAD_CONST 4 ( 1 )					  
							      52 BINARY_SUBTRACT					    52 BINARY_SUBTRACT						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 5 ( '0' )					    56 LOAD_CONST 5 ( '0' )					  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 70					    60 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      8 62 LOAD_FAST 3 ( count )				    8 62 LOAD_FAST 3 ( count )					  
							      64 LOAD_CONST 4 ( 1 )					    64 LOAD_CONST 4 ( 1 )					  
							      66 INPLACE_ADD						    66 INPLACE_ADD						  
							      68 STORE_FAST 3 ( count )					    68 STORE_FAST 3 ( count )					  
							      								    70 JUMP_ABSOLUTE 26						  
							      9 >> 70 LOAD_FAST 0 ( s )					    >> 72 POP_BLOCK						  
							      72 LOAD_FAST 4 ( i )					    								  
							      74 BINARY_SUBSCR						    9 >> 74 LOAD_FAST 0 ( s )					  
							      76 LOAD_CONST 3 ( '1' )					    76 LOAD_FAST 4 ( i )					  
							      78 COMPARE_OP 2 ( == )					    78 BINARY_SUBSCR						  
							      80 POP_JUMP_IF_FALSE 94					    80 LOAD_CONST 3 ( '1' )					  
							      82 LOAD_FAST 2 ( oneSeen )				    82 COMPARE_OP 2 ( == )					  
							      84 LOAD_CONST 2 ( 0 )					    84 POP_JUMP_IF_FALSE 98					  
							      86 COMPARE_OP 2 ( == )					    86 LOAD_FAST 2 ( oneSeen )					  
							      88 POP_JUMP_IF_FALSE 94					    88 LOAD_CONST 2 ( 0 )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      10 90 LOAD_CONST 6 ( True )				    92 POP_JUMP_IF_FALSE 98					  
							      92 STORE_FAST 2 ( oneSeen )				    								  
							      								    10 94 LOAD_CONST 6 ( True )					  
							      11 >> 94 LOAD_FAST 0 ( s )				    96 STORE_FAST 2 ( oneSeen )					  
							      96 LOAD_FAST 4 ( i )					    								  
							      98 BINARY_SUBSCR						    11 >> 98 LOAD_FAST 0 ( s )					  
							      100 LOAD_CONST 5 ( '0' )					    100 LOAD_FAST 4 ( i )					  
							      102 COMPARE_OP 3 ( != )					    102 BINARY_SUBSCR						  
							      104 POP_JUMP_IF_FALSE 26					    104 LOAD_CONST 5 ( '0' )					  
							      106 LOAD_FAST 0 ( s )					    106 COMPARE_OP 3 ( != )					  
							      108 LOAD_FAST 4 ( i )					    108 POP_JUMP_IF_FALSE 26					  
							      110 BINARY_SUBSCR						    110 LOAD_FAST 0 ( s )					  
							      112 LOAD_CONST 3 ( '1' )					    112 LOAD_FAST 4 ( i )					  
							      114 COMPARE_OP 3 ( != )					    114 BINARY_SUBSCR						  
							      116 POP_JUMP_IF_FALSE 26					    116 LOAD_CONST 3 ( '1' )					  
							      								    118 COMPARE_OP 3 ( != )					  
							      12 118 LOAD_CONST 1 ( False )				    120 POP_JUMP_IF_FALSE 26					  
							      120 STORE_FAST 2 ( oneSeen )				    								  
							      122 JUMP_ABSOLUTE 26					    12 122 LOAD_CONST 1 ( False )				  
							      >> 124 POP_BLOCK						    124 STORE_FAST 2 ( oneSeen )				  
							      								    126 JUMP_ABSOLUTE 26					  
							      13 >> 126 LOAD_FAST 3 ( count )				    >> 128 POP_BLOCK						  
							      128 RETURN_VALUE NEW_LINE					    								  
							      								    13 >> 130 LOAD_FAST 3 ( count )				  
							      								    132 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		      SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		    SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N			  SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N
--							      --							    --								  --
def digitsNum ( N ) :					      Disassembly of <code object digitsNum at 0x7f33e2653ed0, file Disassembly of <code object digitsNum at 0x7f2b01639f60, file script_not_found : None
    if ( N == 0 ) :					      2 0 LOAD_FAST 0 ( N )					    2 0 LOAD_FAST 0 ( N )					  
	print ( "0" , end = "" )			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( N % 9 != 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	print ( N % 9 , end = "" )			      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 20					  
    for i in range ( 1 , int ( N / 9 ) + 1 ) :		      								    								  
	print ( "9" , end = "" )			      3 8 LOAD_GLOBAL 0 ( print )				    3 8 LOAD_GLOBAL 0 ( print )					  
    for i in range ( 1 , N + 1 ) :			      10 LOAD_CONST 2 ( '0' )					    10 LOAD_CONST 2 ( '0' )					  
	print ( "0" , end = "" )			      12 LOAD_CONST 3 ( '' )					    12 LOAD_CONST 3 ( '' )					  
    print ( )						      14 LOAD_CONST 4 ( ( 'end' , ) )				    14 LOAD_CONST 4 ( ( 'end' , ) )				  
							      16 CALL_FUNCTION_KW 2					    16 CALL_FUNCTION_KW 2					  
							      18 POP_TOP						    18 POP_TOP							  
							      								    								  
							      4 >> 20 LOAD_FAST 0 ( N )					    4 >> 20 LOAD_FAST 0 ( N )					  
							      22 LOAD_CONST 5 ( 9 )					    22 LOAD_CONST 5 ( 9 )					  
							      24 BINARY_MODULO						    24 BINARY_MODULO						  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 COMPARE_OP 3 ( != )					    28 COMPARE_OP 3 ( != )					  
							      30 POP_JUMP_IF_FALSE 48					    30 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      5 32 LOAD_GLOBAL 0 ( print )				    5 32 LOAD_GLOBAL 0 ( print )				  
							      34 LOAD_FAST 0 ( N )					    34 LOAD_FAST 0 ( N )					  
							      36 LOAD_CONST 5 ( 9 )					    36 LOAD_CONST 5 ( 9 )					  
							      38 BINARY_MODULO						    38 BINARY_MODULO						  
							      40 LOAD_CONST 3 ( '' )					    40 LOAD_CONST 3 ( '' )					  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    42 LOAD_CONST 4 ( ( 'end' , ) )				  
							      44 CALL_FUNCTION_KW 2					    44 CALL_FUNCTION_KW 2					  
							      46 POP_TOP						    46 POP_TOP							  
							      								    								  
							      6 >> 48 SETUP_LOOP 42 ( to 92 )				    6 >> 48 SETUP_LOOP 46 ( to 96 )				  
							      50 LOAD_GLOBAL 1 ( range )				    50 LOAD_GLOBAL 1 ( range )					  
							      52 LOAD_CONST 6 ( 1 )					    52 LOAD_CONST 6 ( 1 )					  
							      54 LOAD_GLOBAL 2 ( int )					    54 LOAD_GLOBAL 2 ( int )					  
							      56 LOAD_FAST 0 ( N )					    56 LOAD_FAST 0 ( N )					  
							      58 LOAD_CONST 5 ( 9 )					    58 LOAD_CONST 5 ( 9 )					  
							      60 BINARY_TRUE_DIVIDE					    60 BINARY_TRUE_DIVIDE					  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 LOAD_CONST 6 ( 1 )					    64 LOAD_CONST 6 ( 1 )					  
							      66 BINARY_ADD						    66 BINARY_ADD						  
							      68 CALL_FUNCTION 2					    68 CALL_FUNCTION 2						  
							      70 GET_ITER						    70 GET_ITER							  
							      >> 72 FOR_ITER 16 ( to 90 )				    >> 72 FOR_ITER 20 ( to 94 )					  
							      74 STORE_FAST 1 ( i )					    74 STORE_FAST 1 ( i )					  
							      								    								  
							      7 76 LOAD_GLOBAL 0 ( print )				    7 76 LOAD_GLOBAL 0 ( print )				  
							      78 LOAD_CONST 7 ( '9' )					    78 LOAD_CONST 7 ( '9' )					  
							      80 LOAD_CONST 3 ( '' )					    80 LOAD_CONST 3 ( '' )					  
							      82 LOAD_CONST 4 ( ( 'end' , ) )				    82 LOAD_CONST 4 ( ( 'end' , ) )				  
							      84 CALL_FUNCTION_KW 2					    84 CALL_FUNCTION_KW 2					  
							      86 POP_TOP						    86 POP_TOP							  
							      88 JUMP_ABSOLUTE 72					    88 JUMP_ABSOLUTE 72						  
							      >> 90 POP_BLOCK						    >> 90 POP_BLOCK						  
							      								    								  
							      8 >> 92 SETUP_LOOP 34 ( to 128 )				    8 >> 92 SETUP_LOOP 34 ( to 128 )				  
							      94 LOAD_GLOBAL 1 ( range )				    94 LOAD_GLOBAL 1 ( range )					  
							      96 LOAD_CONST 6 ( 1 )					    96 LOAD_CONST 6 ( 1 )					  
							      98 LOAD_FAST 0 ( N )					    98 LOAD_FAST 0 ( N )					  
							      100 LOAD_CONST 6 ( 1 )					    100 LOAD_CONST 6 ( 1 )					  
							      102 BINARY_ADD						    102 BINARY_ADD						  
							      104 CALL_FUNCTION 2					    104 CALL_FUNCTION 2						  
							      106 GET_ITER						    106 GET_ITER						  
							      >> 108 FOR_ITER 16 ( to 126 )				    >> 108 FOR_ITER 20 ( to 126 )				  
							      110 STORE_FAST 1 ( i )					    110 STORE_FAST 1 ( i )					  
							      								    								  
							      9 112 LOAD_GLOBAL 0 ( print )				    9 112 LOAD_GLOBAL 0 ( print )				  
							      114 LOAD_CONST 2 ( '0' )					    114 LOAD_CONST 2 ( '0' )					  
							      116 LOAD_CONST 3 ( '' )					    116 LOAD_CONST 3 ( '' )					  
							      118 LOAD_CONST 4 ( ( 'end' , ) )				    118 LOAD_CONST 4 ( ( 'end' , ) )				  
							      120 CALL_FUNCTION_KW 2					    120 CALL_FUNCTION_KW 2					  
							      122 POP_TOP						    122 POP_TOP							  
							      124 JUMP_ABSOLUTE 108					    124 JUMP_ABSOLUTE 108					  
							      >> 126 POP_BLOCK						    >> 126 POP_BLOCK						  
							      								    								  
							      10 >> 128 LOAD_GLOBAL 0 ( print )				    10 >> 128 LOAD_GLOBAL 0 ( print )				  
							      130 CALL_FUNCTION 0					    130 CALL_FUNCTION 0						  
							      132 POP_TOP						    132 POP_TOP							  
							      134 LOAD_CONST 0 ( None )					    134 LOAD_CONST 0 ( None )					  
							      136 RETURN_VALUE NEW_LINE					    136 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE				    FIND_NUMBER_OF_TRIANGLES_POSSIBLE				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE
--							      --							    --								  --
def findnumberofTriangles ( arr ) :			      Disassembly of <code object findnumberofTriangles at 0x7f33e2 Disassembly of <code object findnumberofTriangles at 0x7f2b01 script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    arr.sort ( )					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    count = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 0 , n - 2 ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	k = i + 2					      								    								  
	for j in range ( i + 1 , n ) :			      3 8 LOAD_FAST 0 ( arr )					    3 8 LOAD_FAST 0 ( arr )					  
	    while ( k < n and arr [ i ] + arr [ j ] > arr [ k 10 LOAD_METHOD 1 ( sort )					    10 LOAD_METHOD 1 ( sort )					  
		k += 1					      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
	    if ( k > j ) :				      14 POP_TOP						    14 POP_TOP							  
		count += k - j - 1			      								    								  
    return count					      4 16 LOAD_CONST 1 ( 0 )					    4 16 LOAD_CONST 1 ( 0 )					  
							      18 STORE_FAST 2 ( count )					    18 STORE_FAST 2 ( count )					  
							      								    								  
							      5 20 SETUP_LOOP 124 ( to 146 )				    5 20 SETUP_LOOP 120 ( to 134 )				  
							      22 LOAD_GLOBAL 2 ( range )				    22 LOAD_GLOBAL 2 ( range )					  
							      24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 1 ( 0 )					  
							      26 LOAD_FAST 1 ( n )					    26 LOAD_FAST 1 ( n )					  
							      28 LOAD_CONST 2 ( 2 )					    28 LOAD_CONST 2 ( 2 )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 CALL_FUNCTION 2					    32 CALL_FUNCTION 2						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 106 ( to 144 )				    >> 36 FOR_ITER 112 ( to 132 )				  
							      38 STORE_FAST 3 ( i )					    38 STORE_FAST 3 ( i )					  
							      								    								  
							      6 40 LOAD_FAST 3 ( i )					    6 40 LOAD_FAST 3 ( i )					  
							      42 LOAD_CONST 2 ( 2 )					    42 LOAD_CONST 2 ( 2 )					  
							      44 BINARY_ADD						    44 BINARY_ADD						  
							      46 STORE_FAST 4 ( k )					    46 STORE_FAST 4 ( k )					  
							      								    								  
							      7 48 SETUP_LOOP 92 ( to 142 )				    7 48 SETUP_LOOP 94 ( to 130 )				  
							      50 LOAD_GLOBAL 2 ( range )				    50 LOAD_GLOBAL 2 ( range )					  
							      52 LOAD_FAST 3 ( i )					    52 LOAD_FAST 3 ( i )					  
							      54 LOAD_CONST 3 ( 1 )					    54 LOAD_CONST 3 ( 1 )					  
							      56 BINARY_ADD						    56 BINARY_ADD						  
							      58 LOAD_FAST 1 ( n )					    58 LOAD_FAST 1 ( n )					  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 GET_ITER						    62 GET_ITER							  
							      >> 64 FOR_ITER 74 ( to 140 )				    >> 64 FOR_ITER 80 ( to 128 )				  
							      66 STORE_FAST 5 ( j )					    66 STORE_FAST 5 ( j )					  
							      								    								  
							      8 68 SETUP_LOOP 44 ( to 114 )				    8 68 SETUP_LOOP 48 ( to 126 )				  
							      >> 70 LOAD_FAST 4 ( k )					    >> 70 LOAD_FAST 4 ( k )					  
							      72 LOAD_FAST 1 ( n )					    72 LOAD_FAST 1 ( n )					  
							      74 COMPARE_OP 0 ( < )					    74 COMPARE_OP 0 ( < )					  
							      76 POP_JUMP_IF_FALSE 112					    76 POP_JUMP_IF_FALSE 124					  
							      78 LOAD_FAST 0 ( arr )					    78 LOAD_FAST 0 ( arr )					  
							      80 LOAD_FAST 3 ( i )					    80 LOAD_FAST 3 ( i )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 0 ( arr )					    84 LOAD_FAST 0 ( arr )					  
							      86 LOAD_FAST 5 ( j )					    86 LOAD_FAST 5 ( j )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 BINARY_ADD						    90 BINARY_ADD						  
							      92 LOAD_FAST 0 ( arr )					    92 LOAD_FAST 0 ( arr )					  
							      94 LOAD_FAST 4 ( k )					    94 LOAD_FAST 4 ( k )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 COMPARE_OP 4 ( > )					    98 COMPARE_OP 4 ( > )					  
							      100 POP_JUMP_IF_FALSE 112					    100 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      9 102 LOAD_FAST 4 ( k )					    9 102 LOAD_FAST 4 ( k )					  
							      104 LOAD_CONST 3 ( 1 )					    104 LOAD_CONST 3 ( 1 )					  
							      106 INPLACE_ADD						    106 INPLACE_ADD						  
							      108 STORE_FAST 4 ( k )					    108 STORE_FAST 4 ( k )					  
							      110 JUMP_ABSOLUTE 70					    110 JUMP_ABSOLUTE 70					  
							      >> 112 POP_BLOCK						    >> 112 POP_BLOCK						  
							      								    								  
							      10 >> 114 LOAD_FAST 4 ( k )				    10 >> 114 LOAD_FAST 4 ( k )					  
							      116 LOAD_FAST 5 ( j )					    116 LOAD_FAST 5 ( j )					  
							      118 COMPARE_OP 4 ( > )					    118 COMPARE_OP 4 ( > )					  
							      120 POP_JUMP_IF_FALSE 64					    120 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      11 122 LOAD_FAST 2 ( count )				    11 122 LOAD_FAST 2 ( count )				  
							      124 LOAD_FAST 4 ( k )					    124 LOAD_FAST 4 ( k )					  
							      126 LOAD_FAST 5 ( j )					    126 LOAD_FAST 5 ( j )					  
							      128 BINARY_SUBTRACT					    128 BINARY_SUBTRACT						  
							      130 LOAD_CONST 3 ( 1 )					    130 LOAD_CONST 3 ( 1 )					  
							      132 BINARY_SUBTRACT					    132 BINARY_SUBTRACT						  
							      134 INPLACE_ADD						    134 INPLACE_ADD						  
							      136 STORE_FAST 2 ( count )				    136 STORE_FAST 2 ( count )					  
							      138 JUMP_ABSOLUTE 64					    138 JUMP_ABSOLUTE 70					  
							      >> 140 POP_BLOCK						    >> 140 POP_BLOCK						  
							      >> 142 JUMP_ABSOLUTE 36					    								  
							      >> 144 POP_BLOCK						    12 >> 142 LOAD_FAST 2 ( count )				  
							      								    144 RETURN_VALUE NEW_LINE					  
							      12 >> 146 LOAD_FAST 2 ( count )				    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL		      MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			    MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			  MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL
--							      --							    --								  --
def moveSpaceInFront ( s ) :				      Disassembly of <code object moveSpaceInFront at 0x7f33e2653ed Disassembly of <code object moveSpaceInFront at 0x7f2b0164ded script_not_found : None
    i = len ( s ) - 1 ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for j in range ( i , - 1 , - 1 ) :			      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  
	if ( s [ j ] != ' ' ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    s = s [ : i ] + s [ j ] + s [ i + 1 : ]	      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    i -= 1 ;					      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
    while ( i >= 0 ) :					      10 STORE_FAST 1 ( i )					    10 STORE_FAST 1 ( i )					  
	s = s [ : i ] + ' ' + s [ i + 1 : ]		      								    								  
	i -= 1						      3 12 SETUP_LOOP 76 ( to 90 )				    3 12 SETUP_LOOP 76 ( to 90 )				  
    return s ;						      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_FAST 1 ( i )					    16 LOAD_FAST 1 ( i )					  
							      18 LOAD_CONST 2 ( - 1 )					    18 LOAD_CONST 2 ( - 1 )					  
							      20 LOAD_CONST 2 ( - 1 )					    20 LOAD_CONST 2 ( - 1 )					  
							      22 CALL_FUNCTION 3					    22 CALL_FUNCTION 3						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 60 ( to 88 )				    >> 26 FOR_ITER 60 ( to 88 )					  
							      28 STORE_FAST 2 ( j )					    28 STORE_FAST 2 ( j )					  
							      								    								  
							      4 30 LOAD_FAST 0 ( s )					    4 30 LOAD_FAST 0 ( s )					  
							      32 LOAD_FAST 2 ( j )					    32 LOAD_FAST 2 ( j )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 3 ( ' ' )					    36 LOAD_CONST 3 ( ' ' )					  
							      38 COMPARE_OP 3 ( != )					    38 COMPARE_OP 3 ( != )					  
							      40 POP_JUMP_IF_FALSE 26					    40 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      5 42 LOAD_FAST 0 ( s )					    5 42 LOAD_FAST 0 ( s )					  
							      44 LOAD_CONST 0 ( None )					    44 LOAD_CONST 0 ( None )					  
							      46 LOAD_FAST 1 ( i )					    46 LOAD_FAST 1 ( i )					  
							      48 BUILD_SLICE 2						    48 BUILD_SLICE 2						  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 0 ( s )					    52 LOAD_FAST 0 ( s )					  
							      54 LOAD_FAST 2 ( j )					    54 LOAD_FAST 2 ( j )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 LOAD_FAST 0 ( s )					    60 LOAD_FAST 0 ( s )					  
							      62 LOAD_FAST 1 ( i )					    62 LOAD_FAST 1 ( i )					  
							      64 LOAD_CONST 1 ( 1 )					    64 LOAD_CONST 1 ( 1 )					  
							      66 BINARY_ADD						    66 BINARY_ADD						  
							      68 LOAD_CONST 0 ( None )					    68 LOAD_CONST 0 ( None )					  
							      70 BUILD_SLICE 2						    70 BUILD_SLICE 2						  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 STORE_FAST 0 ( s )					    76 STORE_FAST 0 ( s )					  
							      								    								  
							      6 78 LOAD_FAST 1 ( i )					    6 78 LOAD_FAST 1 ( i )					  
							      80 LOAD_CONST 1 ( 1 )					    80 LOAD_CONST 1 ( 1 )					  
							      82 INPLACE_SUBTRACT					    82 INPLACE_SUBTRACT						  
							      84 STORE_FAST 1 ( i )					    84 STORE_FAST 1 ( i )					  
							      86 JUMP_ABSOLUTE 26					    86 JUMP_ABSOLUTE 26						  
							      >> 88 POP_BLOCK						    >> 88 POP_BLOCK						  
							      								    								  
							      7 >> 90 SETUP_LOOP 52 ( to 144 )				    7 >> 90 SETUP_LOOP 68 ( to 160 )				  
							      >> 92 LOAD_FAST 1 ( i )					    >> 92 LOAD_FAST 1 ( i )					  
							      94 LOAD_CONST 4 ( 0 )					    94 LOAD_CONST 4 ( 0 )					  
							      96 COMPARE_OP 5 ( >= )					    96 COMPARE_OP 5 ( >= )					  
							      98 POP_JUMP_IF_FALSE 142					    98 POP_JUMP_IF_FALSE 158					  
							      								    								  
							      8 100 LOAD_FAST 0 ( s )					    8 100 LOAD_FAST 0 ( s )					  
							      102 LOAD_CONST 0 ( None )					    102 LOAD_CONST 0 ( None )					  
							      104 LOAD_FAST 1 ( i )					    104 LOAD_FAST 1 ( i )					  
							      106 BUILD_SLICE 2						    106 BUILD_SLICE 2						  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 LOAD_CONST 3 ( ' ' )					    110 LOAD_CONST 3 ( ' ' )					  
							      112 BINARY_ADD						    112 BINARY_ADD						  
							      114 LOAD_FAST 0 ( s )					    114 LOAD_FAST 0 ( s )					  
							      116 LOAD_FAST 1 ( i )					    116 LOAD_FAST 1 ( i )					  
							      118 LOAD_CONST 1 ( 1 )					    118 LOAD_CONST 1 ( 1 )					  
							      120 BINARY_ADD						    120 BINARY_ADD						  
							      122 LOAD_CONST 0 ( None )					    122 LOAD_CONST 0 ( None )					  
							      124 BUILD_SLICE 2						    124 BUILD_SLICE 2						  
							      126 BINARY_SUBSCR						    126 BINARY_SUBSCR						  
							      128 BINARY_ADD						    128 BINARY_ADD						  
							      130 STORE_FAST 0 ( s )					    130 STORE_FAST 0 ( s )					  
							      								    								  
							      9 132 LOAD_FAST 1 ( i )					    9 132 LOAD_FAST 1 ( i )					  
							      134 LOAD_CONST 1 ( 1 )					    134 LOAD_CONST 1 ( 1 )					  
							      136 INPLACE_SUBTRACT					    136 INPLACE_SUBTRACT					  
							      138 STORE_FAST 1 ( i )					    138 STORE_FAST 1 ( i )					  
							      140 JUMP_ABSOLUTE 92					    								  
							      >> 142 POP_BLOCK						    10 140 LOAD_FAST 1 ( i )					  
							      								    142 LOAD_CONST 1 ( 1 )					  
							      10 >> 144 LOAD_FAST 0 ( s )				    144 INPLACE_SUBTRACT					  
							      146 RETURN_VALUE NEW_LINE					    146 STORE_FAST 1 ( i )					  
							      								    								  
							      								    11 >> 148 LOAD_FAST 0 ( s )					  
							      								    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE
--							      --							    --								  --
def find3Numbers ( A , arr_size , sum ) :		      Disassembly of <code object find3Numbers at 0x7f33e2649a50, f Disassembly of <code object find3Numbers at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    for i in range ( 0 , arr_size - 2 ) :		      2 0 SETUP_LOOP 136 ( to 138 )				    2 0 SETUP_LOOP 120 ( to 122 )				  "XLM/dis_script.py", line 60, in <module>	exec
	for j in range ( i + 1 , arr_size - 1 ) :	      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  (item)   File "main.py", line 34, in <module>	  Fi
	    for k in range ( j + 1 , arr_size ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in find3Numbers TypeError: 'ra
		if A [ i ] + A [ j ] + A [ k ] == sum :	      6 LOAD_FAST 1 ( arr_size )				    6 LOAD_FAST 1 ( arr_size )					  nge_iterator' object is not callable
		    print ( "Triplet is" , A [ i ] , ", " , A 8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 2 )					  
		    return True				      10 BINARY_SUBTRACT					    10 BINARY_SUBTRACT						  
    return False					      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 118 ( to 136 )				    >> 16 FOR_ITER 106 ( to 120 )				  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      3 20 SETUP_LOOP 112 ( to 134 )				    3 20 SETUP_LOOP 94 ( to 118 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_CONST 3 ( 1 )					  
							      28 BINARY_ADD						    28 BINARY_ADD						  
							      30 LOAD_FAST 1 ( arr_size )				    30 LOAD_FAST 1 ( arr_size )					  
							      32 LOAD_CONST 3 ( 1 )					    32 LOAD_CONST 3 ( 1 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 90 ( to 132 )				    >> 40 FOR_ITER 82 ( to 116 )				  
							      42 STORE_FAST 4 ( j )					    42 STORE_FAST 4 ( j )					  
							      								    								  
							      4 44 SETUP_LOOP 84 ( to 130 )				    4 44 SETUP_LOOP 74 ( to 114 )				  
							      46 LOAD_GLOBAL 0 ( range )				    46 LOAD_GLOBAL 0 ( range )					  
							      48 LOAD_FAST 4 ( j )					    48 LOAD_FAST 4 ( j )					  
							      50 LOAD_CONST 3 ( 1 )					    50 LOAD_CONST 3 ( 1 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 LOAD_FAST 1 ( arr_size )				    54 LOAD_FAST 2 ( arr_size )					  
							      56 CALL_FUNCTION 2					    56 CALL_FUNCTION 2						  
							      58 GET_ITER						    58 GET_ITER							  
							      >> 60 FOR_ITER 66 ( to 128 )				    >> 60 FOR_ITER 60 ( to 112 )				  
							      62 STORE_FAST 5 ( k )					    62 STORE_FAST 5 ( k )					  
							      								    								  
							      5 64 LOAD_FAST 0 ( A )					    5 64 LOAD_FAST 0 ( A )					  
							      66 LOAD_FAST 3 ( i )					    66 LOAD_FAST 3 ( i )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 0 ( A )					    70 LOAD_FAST 0 ( A )					  
							      72 LOAD_FAST 4 ( j )					    72 LOAD_FAST 4 ( j )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 0 ( A )					    78 LOAD_FAST 0 ( A )					  
							      80 LOAD_FAST 5 ( k )					    80 LOAD_FAST 5 ( k )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 BINARY_ADD						    84 BINARY_ADD						  
							      86 LOAD_FAST 2 ( sum )					    86 LOAD_FAST 2 ( sum )					  
							      88 COMPARE_OP 2 ( == )					    88 COMPARE_OP 2 ( == )					  
							      90 POP_JUMP_IF_FALSE 60					    90 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      6 92 LOAD_GLOBAL 1 ( print )				    6 92 LOAD_GLOBAL 1 ( print )				  
							      94 LOAD_CONST 4 ( 'Triplet is' )				    94 LOAD_CONST 4 ( 'Triplet is' )				  
							      96 LOAD_FAST 0 ( A )					    96 LOAD_FAST 0 ( A )					  
							      98 LOAD_FAST 3 ( i )					    98 LOAD_FAST 3 ( i )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 LOAD_CONST 5 ( ', ' )					    102 LOAD_CONST 5 ( ', ' )					  
							      104 LOAD_FAST 0 ( A )					    104 LOAD_FAST 0 ( A )					  
							      106 LOAD_FAST 4 ( j )					    106 LOAD_FAST 4 ( j )					  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 LOAD_CONST 5 ( ', ' )					    110 CALL_FUNCTION 5						  
							      112 LOAD_FAST 0 ( A )					    112 POP_TOP							  
							      114 LOAD_FAST 5 ( k )					    								  
							      116 BINARY_SUBSCR						    7 114 LOAD_CONST 6 ( True )					  
							      118 CALL_FUNCTION 6					    116 RETURN_VALUE						  
							      120 POP_TOP						    118 JUMP_ABSOLUTE 60					  
							      								    >> 120 POP_BLOCK						  
							      7 122 LOAD_CONST 6 ( True )				    >> 122 JUMP_ABSOLUTE 40					  
							      124 RETURN_VALUE						    >> 124 POP_BLOCK						  
							      126 JUMP_ABSOLUTE 60					    								  
							      >> 128 POP_BLOCK						    8 >> 126 LOAD_CONST 7 ( False )				  
							      >> 130 JUMP_ABSOLUTE 40					    128 RETURN_VALUE NEW_LINE					  
							      >> 132 POP_BLOCK						    								  
							      >> 134 JUMP_ABSOLUTE 16					    								  
							      >> 136 POP_BLOCK						    								  
							      								    								  
							      8 >> 138 LOAD_CONST 7 ( False )				    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STOOGE_SORT						      STOOGE_SORT						    STOOGE_SORT							  STOOGE_SORT
--							      --							    --								  --
def stoogesort ( arr , l , h ) :			      Disassembly of <code object stoogesort at 0x7f33e2653f60, fil Disassembly of <code object stoogesort at 0x7f2b0163dc90, fil error : /bin/bash: line 1:  4787 Segmentation faul
    if l >= h :						      2 0 LOAD_FAST 1 ( l )					    2 0 LOAD_FAST 1 ( l )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return						      2 LOAD_FAST 2 ( h )					    2 LOAD_FAST 2 ( h )						  ataset/bin/python XLM/dis_script.py --script_path
    if arr [ l ] > arr [ h ] :				      4 COMPARE_OP 5 ( >= )					    4 COMPARE_OP 5 ( >= )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	t = arr [ l ]					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/STOOGE
	arr [ l ] = arr [ h ]				      								    								  _SORT.dis
	arr [ h ] = t					      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_CONST 0 ( None )					  
    if h - l + 1 > 2 :					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	t = ( int ) ( ( h - l + 1 ) / 3 )		      								    								  
	stoogesort ( arr , l , ( h - t ) )		      4 >> 12 LOAD_FAST 0 ( arr )				    4 >> 12 LOAD_FAST 0 ( arr )					  
	stoogesort ( arr , l + t , ( h ) )		      14 LOAD_FAST 1 ( l )					    14 LOAD_FAST 1 ( l )					  
	stoogesort ( arr , l , ( h - t ) )		      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 LOAD_FAST 0 ( arr )					    18 LOAD_FAST 0 ( arr )					  
							      20 LOAD_FAST 2 ( h )					    20 LOAD_FAST 2 ( h )					  
							      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
							      24 COMPARE_OP 4 ( > )					    24 COMPARE_OP 4 ( > )					  
							      26 POP_JUMP_IF_FALSE 56					    26 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      5 28 LOAD_FAST 0 ( arr )					    5 28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 1 ( l )					    30 LOAD_FAST 1 ( l )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 STORE_FAST 3 ( t )					    34 STORE_FAST 3 ( t )					  
							      								    								  
							      6 36 LOAD_FAST 0 ( arr )					    6 36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_FAST 2 ( h )					    38 LOAD_FAST 2 ( h )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 1 ( l )					    44 LOAD_FAST 1 ( l )					  
							      46 STORE_SUBSCR						    46 STORE_SUBSCR						  
							      								    								  
							      7 48 LOAD_FAST 3 ( t )					    7 48 LOAD_FAST 3 ( t )					  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 2 ( h )					    52 LOAD_FAST 2 ( h )					  
							      54 STORE_SUBSCR						    54 STORE_SUBSCR						  
							      								    								  
							      8 >> 56 LOAD_FAST 2 ( h )					    8 56 LOAD_FAST 2 ( h )					  
							      58 LOAD_FAST 1 ( l )					    58 LOAD_FAST 1 ( l )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 LOAD_CONST 1 ( 1 )					    62 LOAD_CONST 1 ( 1 )					  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 LOAD_CONST 2 ( 2 )					    66 LOAD_CONST 2 ( 2 )					  
							      68 COMPARE_OP 4 ( > )					    68 COMPARE_OP 4 ( > )					  
							      70 POP_JUMP_IF_FALSE 140					    70 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      9 72 LOAD_GLOBAL 0 ( int )				    9 72 LOAD_GLOBAL 0 ( int )					  
							      74 LOAD_FAST 2 ( h )					    74 LOAD_FAST 2 ( h )					  
							      76 LOAD_FAST 1 ( l )					    76 LOAD_FAST 1 ( l )					  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 LOAD_CONST 1 ( 1 )					    80 LOAD_CONST 1 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 LOAD_CONST 3 ( 3 )					    84 LOAD_CONST 3 ( 3 )					  
							      86 BINARY_TRUE_DIVIDE					    86 BINARY_TRUE_DIVIDE					  
							      88 CALL_FUNCTION 1					    88 CALL_FUNCTION 1						  
							      90 STORE_FAST 3 ( t )					    90 STORE_FAST 3 ( t )					  
							      								    								  
							      10 92 LOAD_GLOBAL 1 ( stoogesort )			    10 92 LOAD_GLOBAL 1 ( stoogesort )				  
							      94 LOAD_FAST 0 ( arr )					    94 LOAD_FAST 0 ( arr )					  
							      96 LOAD_FAST 1 ( l )					    96 LOAD_FAST 1 ( l )					  
							      98 LOAD_FAST 2 ( h )					    98 LOAD_FAST 2 ( h )					  
							      100 LOAD_FAST 3 ( t )					    100 LOAD_FAST 3 ( t )					  
							      102 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      104 CALL_FUNCTION 3					    104 BUILD_TUPLE 2						  
							      106 POP_TOP						    106 CALL_FUNCTION 1						  
							      								    108 POP_TOP							  
							      11 108 LOAD_GLOBAL 1 ( stoogesort )			    								  
							      110 LOAD_FAST 0 ( arr )					    11 110 LOAD_GLOBAL 1 ( stoogesort )				  
							      112 LOAD_FAST 1 ( l )					    112 LOAD_FAST 0 ( arr )					  
							      114 LOAD_FAST 3 ( t )					    114 LOAD_FAST 1 ( l )					  
							      116 BINARY_ADD						    116 LOAD_FAST 3 ( t )					  
							      118 LOAD_FAST 2 ( h )					    118 BINARY_ADD						  
							      120 CALL_FUNCTION 3					    120 LOAD_FAST 2 ( h )					  
							      122 POP_TOP						    122 BUILD_TUPLE 2						  
							      								    124 CALL_FUNCTION 3						  
							      12 124 LOAD_GLOBAL 1 ( stoogesort )			    126 POP_TOP							  
							      126 LOAD_FAST 0 ( arr )					    								  
							      128 LOAD_FAST 1 ( l )					    12 128 LOAD_GLOBAL 1 ( stoogesort )				  
							      130 LOAD_FAST 2 ( h )					    130 LOAD_FAST 0 ( arr )					  
							      132 LOAD_FAST 3 ( t )					    132 LOAD_FAST 1 ( l )					  
							      134 BINARY_SUBTRACT					    134 LOAD_FAST 2 ( h )					  
							      136 CALL_FUNCTION 3					    136 LOAD_FAST 2 ( h )					  
							      138 POP_TOP						    138 BINARY_SUBTRACT						  
							      >> 140 LOAD_CONST 0 ( None )				    140 BUILD_TUPLE 2						  
							      142 RETURN_VALUE NEW_LINE					    142 CALL_FUNCTION 3						  
							      								    144 POP_TOP							  
							      								    >> 146 LOAD_CONST 0 ( None )				  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			    FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1
--							      --							    --								  --
def CountTriangles ( A ) :				      Disassembly of <code object CountTriangles at 0x7f33e2653ed0, Disassembly of <code object CountTriangles at 0x7f2b0163dc90, script_not_found : None
    n = len ( A ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    A.sort ( ) ;					      2 LOAD_FAST 0 ( A )					    2 LOAD_FAST 0 ( A )						  
    count = 0 ;						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( n - 1 , 0 , - 1 ) :		      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	l = 0 ;						      								    								  
	r = i - 1 ;					      3 8 LOAD_FAST 0 ( A )					    3 8 LOAD_FAST 0 ( A )					  
	while ( l < r ) :				      10 LOAD_METHOD 1 ( sort )					    10 LOAD_METHOD 1 ( sort )					  
	    if ( A [ l ] + A [ r ] > A [ i ] ) :	      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
		count += r - l ;			      14 POP_TOP						    14 POP_TOP							  
		r -= 1 ;				      								    								  
	    else :					      4 16 LOAD_CONST 1 ( 0 )					    4 16 LOAD_CONST 1 ( 0 )					  
		l += 1 ;				      18 STORE_FAST 2 ( count )					    18 STORE_FAST 2 ( count )					  
    print ( "No of possible solutions: " , count ) ;	      								    								  
							      5 20 SETUP_LOOP 104 ( to 126 )				    5 20 SETUP_LOOP 96 ( to 118 )				  
							      22 LOAD_GLOBAL 2 ( range )				    22 LOAD_GLOBAL 2 ( range )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 1 ( 0 )					  
							      32 LOAD_CONST 3 ( - 1 )					    32 LOAD_CONST 3 ( - 1 )					  
							      34 CALL_FUNCTION 3					    34 CALL_FUNCTION 3						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 84 ( to 124 )				    >> 38 FOR_ITER 82 ( to 116 )				  
							      40 STORE_FAST 3 ( i )					    40 STORE_FAST 3 ( i )					  
							      								    								  
							      6 42 LOAD_CONST 1 ( 0 )					    6 42 LOAD_CONST 1 ( 0 )					  
							      44 STORE_FAST 4 ( l )					    44 STORE_FAST 4 ( l )					  
							      								    								  
							      7 46 LOAD_FAST 3 ( i )					    7 46 LOAD_FAST 3 ( i )					  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_SUBTRACT					    50 BINARY_SUBTRACT						  
							      52 STORE_FAST 5 ( r )					    52 STORE_FAST 5 ( r )					  
							      								    								  
							      8 54 SETUP_LOOP 66 ( to 122 )				    8 54 SETUP_LOOP 64 ( to 114 )				  
							      >> 56 LOAD_FAST 4 ( l )					    >> 56 LOAD_FAST 4 ( l )					  
							      58 LOAD_FAST 5 ( r )					    58 LOAD_FAST 5 ( r )					  
							      60 COMPARE_OP 0 ( < )					    60 COMPARE_OP 0 ( < )					  
							      62 POP_JUMP_IF_FALSE 120					    62 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      9 64 LOAD_FAST 0 ( A )					    9 64 LOAD_FAST 0 ( A )					  
							      66 LOAD_FAST 4 ( l )					    66 LOAD_FAST 4 ( l )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 0 ( A )					    70 LOAD_FAST 0 ( A )					  
							      72 LOAD_FAST 5 ( r )					    72 LOAD_FAST 5 ( r )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 0 ( A )					    78 LOAD_FAST 0 ( A )					  
							      80 LOAD_FAST 3 ( i )					    80 LOAD_FAST 3 ( i )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 COMPARE_OP 4 ( > )					    84 COMPARE_OP 4 ( > )					  
							      86 POP_JUMP_IF_FALSE 110					    86 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      10 88 LOAD_FAST 2 ( count )				    10 88 LOAD_FAST 2 ( count )					  
							      90 LOAD_FAST 5 ( r )					    90 LOAD_FAST 5 ( r )					  
							      92 LOAD_FAST 4 ( l )					    92 LOAD_FAST 4 ( l )					  
							      94 BINARY_SUBTRACT					    94 BINARY_SUBTRACT						  
							      96 INPLACE_ADD						    96 INPLACE_ADD						  
							      98 STORE_FAST 2 ( count )					    98 STORE_FAST 2 ( count )					  
							      								    								  
							      11 100 LOAD_FAST 5 ( r )					    11 100 LOAD_FAST 5 ( r )					  
							      102 LOAD_CONST 2 ( 1 )					    102 LOAD_CONST 2 ( 1 )					  
							      104 INPLACE_SUBTRACT					    104 INPLACE_SUBTRACT					  
							      106 STORE_FAST 5 ( r )					    106 STORE_FAST 5 ( r )					  
							      108 JUMP_ABSOLUTE 56					    108 JUMP_ABSOLUTE 56					  
							      								    								  
							      13 >> 110 LOAD_FAST 4 ( l )				    13 >> 110 LOAD_FAST 4 ( l )					  
							      112 LOAD_CONST 2 ( 1 )					    112 LOAD_CONST 2 ( 1 )					  
							      114 INPLACE_ADD						    114 INPLACE_SUBTRACT					  
							      116 STORE_FAST 4 ( l )					    116 STORE_FAST 4 ( l )					  
							      118 JUMP_ABSOLUTE 56					    118 JUMP_ABSOLUTE 38					  
							      >> 120 POP_BLOCK						    120 POP_BLOCK						  
							      >> 122 JUMP_ABSOLUTE 38					    >> 122 JUMP_ABSOLUTE 38					  
							      >> 124 POP_BLOCK						    >> 124 POP_BLOCK						  
							      								    								  
							      14 >> 126 LOAD_GLOBAL 3 ( print )				    14 >> 126 LOAD_GLOBAL 3 ( print )				  
							      128 LOAD_CONST 4 ( 'No of possible solutions: ' )		    128 LOAD_CONST 4 ( 'No of possible solutions: ' )		  
							      130 LOAD_FAST 2 ( count )					    130 LOAD_FAST 2 ( count )					  
							      132 CALL_FUNCTION 2					    132 CALL_FUNCTION 2						  
							      134 POP_TOP						    134 POP_TOP							  
							      136 LOAD_CONST 0 ( None )					    136 LOAD_CONST 0 ( None )					  
							      138 RETURN_VALUE NEW_LINE					    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_REPEATING_AND_A_MISSING_NUMBER			      FIND_A_REPEATING_AND_A_MISSING_NUMBER			    FIND_A_REPEATING_AND_A_MISSING_NUMBER			  FIND_A_REPEATING_AND_A_MISSING_NUMBER
--							      --							    --								  --
def printTwoElements ( arr , size ) :			      Disassembly of <code object printTwoElements at 0x7f33e26494b Disassembly of <code object printTwoElements at 0x7f2b0163dc9 script_not_found : None
    for i in range ( size ) :				      2 0 SETUP_LOOP 98 ( to 100 )				    2 0 SETUP_LOOP 120 ( to 122 )				  
	if arr [ abs ( arr [ i ] ) - 1 ] > 0 :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr 4 LOAD_FAST 1 ( size )					    4 LOAD_FAST 1 ( size )					  
	else :						      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
	    print ( "The repeating element is" , abs ( arr [  8 GET_ITER						    8 GET_ITER							  
    for i in range ( size ) :				      >> 10 FOR_ITER 86 ( to 98 )				    >> 10 FOR_ITER 108 ( to 120 )				  
	if arr [ i ] > 0 :				      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
	    print ( "and the missing element is" , i + 1 )    								    								  
							      3 14 LOAD_FAST 0 ( arr )					    3 14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_GLOBAL 1 ( abs )					    16 LOAD_GLOBAL 1 ( abs )					  
							      18 LOAD_FAST 0 ( arr )					    18 LOAD_FAST 0 ( arr )					  
							      20 LOAD_FAST 2 ( i )					    20 LOAD_FAST 2 ( i )					  
							      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_CONST 2 ( 0 )					    32 LOAD_CONST 2 ( 0 )					  
							      34 COMPARE_OP 4 ( > )					    34 COMPARE_OP 4 ( > )					  
							      36 POP_JUMP_IF_FALSE 78					    36 POP_JUMP_IF_FALSE 70					  
							      								    								  
							      4 38 LOAD_FAST 0 ( arr )					    4 38 LOAD_FAST 0 ( arr )					  
							      40 LOAD_GLOBAL 1 ( abs )					    40 LOAD_GLOBAL 1 ( abs )					  
							      42 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 2 ( i )					    44 LOAD_FAST 2 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 LOAD_CONST 1 ( 1 )					    50 LOAD_CONST 1 ( 1 )					  
							      52 BINARY_SUBTRACT					    52 BINARY_SUBTRACT						  
							      54 BINARY_SUBSCR						    54 BUILD_SLICE 2						  
							      56 UNARY_NEGATIVE						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 0 ( arr )					    58 UNARY_NEGATIVE						  
							      60 LOAD_GLOBAL 1 ( abs )					    60 LOAD_FAST 0 ( arr )					  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_GLOBAL 1 ( abs )					  
							      64 LOAD_FAST 2 ( i )					    64 LOAD_FAST 0 ( arr )					  
							      66 BINARY_SUBSCR						    66 LOAD_FAST 2 ( i )					  
							      68 CALL_FUNCTION 1					    68 BINARY_SUBSCR						  
							      70 LOAD_CONST 1 ( 1 )					    70 CALL_FUNCTION 1						  
							      72 BINARY_SUBTRACT					    72 LOAD_CONST 1 ( 1 )					  
							      74 STORE_SUBSCR						    74 BINARY_SUBTRACT						  
							      76 JUMP_ABSOLUTE 10					    76 STORE_SUBSCR						  
							      								    78 JUMP_ABSOLUTE 10						  
							      6 >> 78 LOAD_GLOBAL 2 ( print )				    								  
							      80 LOAD_CONST 3 ( 'The repeating element is' )		    6 >> 80 LOAD_GLOBAL 2 ( print )				  
							      82 LOAD_GLOBAL 1 ( abs )					    82 LOAD_CONST 3 ( 'The site_ating element is' )		  
							      84 LOAD_FAST 0 ( arr )					    84 LOAD_GLOBAL 1 ( abs )					  
							      86 LOAD_FAST 2 ( i )					    86 LOAD_FAST 0 ( arr )					  
							      88 BINARY_SUBSCR						    88 LOAD_FAST 2 ( i )					  
							      90 CALL_FUNCTION 1					    90 BINARY_SUBSCR						  
							      92 CALL_FUNCTION 2					    92 CALL_FUNCTION 1						  
							      94 POP_TOP						    94 CALL_FUNCTION 2						  
							      96 JUMP_ABSOLUTE 10					    96 POP_TOP							  
							      >> 98 POP_BLOCK						    98 JUMP_ABSOLUTE 10						  
							      								    >> 100 POP_BLOCK						  
							      7 >> 100 SETUP_LOOP 42 ( to 144 )				    								  
							      102 LOAD_GLOBAL 0 ( range )				    7 >> 102 SETUP_LOOP 52 ( to 150 )				  
							      104 LOAD_FAST 1 ( size )					    104 LOAD_GLOBAL 0 ( range )					  
							      106 CALL_FUNCTION 1					    106 LOAD_FAST 1 ( size )					  
							      108 GET_ITER						    108 CALL_FUNCTION 1						  
							      >> 110 FOR_ITER 30 ( to 142 )				    110 GET_ITER						  
							      112 STORE_FAST 2 ( i )					    >> 112 FOR_ITER 44 ( to 148 )				  
							      								    114 STORE_FAST 2 ( i )					  
							      8 114 LOAD_FAST 0 ( arr )					    								  
							      116 LOAD_FAST 2 ( i )					    8 116 LOAD_FAST 0 ( arr )					  
							      118 BINARY_SUBSCR						    118 LOAD_FAST 2 ( i )					  
							      120 LOAD_CONST 2 ( 0 )					    120 BINARY_SUBSCR						  
							      122 COMPARE_OP 4 ( > )					    122 LOAD_CONST 2 ( 0 )					  
							      124 POP_JUMP_IF_FALSE 110					    124 COMPARE_OP 4 ( > )					  
							      								    126 POP_JUMP_IF_FALSE 112					  
							      9 126 LOAD_GLOBAL 2 ( print )				    								  
							      128 LOAD_CONST 4 ( 'and the missing element is' )		    9 128 LOAD_GLOBAL 2 ( print )				  
							      130 LOAD_FAST 2 ( i )					    130 LOAD_CONST 4 ( 'and the missing element is' )		  
							      132 LOAD_CONST 1 ( 1 )					    132 LOAD_FAST 2 ( i )					  
							      134 BINARY_ADD						    134 LOAD_CONST 1 ( 1 )					  
							      136 CALL_FUNCTION 2					    136 BINARY_ADD						  
							      138 POP_TOP						    138 CALL_FUNCTION 2						  
							      140 JUMP_ABSOLUTE 110					    140 POP_TOP							  
							      >> 142 POP_BLOCK						    142 JUMP_ABSOLUTE 112					  
							      >> 144 LOAD_CONST 0 ( None )				    >> 144 POP_BLOCK						  
							      146 RETURN_VALUE NEW_LINE					    >> 146 LOAD_CONST 0 ( None )				  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
JUMP_SEARCH						      JUMP_SEARCH						    JUMP_SEARCH							  JUMP_SEARCH
--							      --							    --								  --
def jumpSearch ( arr , x , n ) :			      Disassembly of <code object jumpSearch at 0x7f33e2644930, fil Disassembly of <code object jumpSearch at 0x7f2b0163dc90, fil script_not_found : None
    step = math.sqrt ( n )				      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
    prev = 0						      2 LOAD_METHOD 1 ( sqrt )					    2 LOAD_METHOD 1 ( sqrt )					  
    while arr [ int ( min ( step , n ) - 1 ) ] < x :	      4 LOAD_FAST 2 ( n )					    4 LOAD_FAST 2 ( n )						  
	prev = step					      6 CALL_METHOD 1						    6 CALL_METHOD 1						  
	step += math.sqrt ( n )				      8 STORE_FAST 3 ( step )					    8 STORE_FAST 3 ( step )					  
	if prev >= n :					      								    								  
	    return - 1					      3 10 LOAD_CONST 1 ( 0 )					    3 10 LOAD_CONST 1 ( 0 )					  
    while arr [ int ( prev ) ] < x :			      12 STORE_FAST 4 ( prev )					    12 STORE_FAST 4 ( prev )					  
	prev += 1					      								    								  
	if prev == min ( step , n ) :			      4 14 SETUP_LOOP 60 ( to 76 )				    4 14 SETUP_LOOP 54 ( to 70 )				  
	    return - 1					      >> 16 LOAD_FAST 0 ( arr )					    >> 16 LOAD_FAST 0 ( arr )					  
    if arr [ int ( prev ) ] == x :			      18 LOAD_GLOBAL 2 ( int )					    18 LOAD_GLOBAL 2 ( int )					  
	return prev					      20 LOAD_GLOBAL 3 ( min )					    20 LOAD_GLOBAL 3 ( min )					  
    return - 1						      22 LOAD_FAST 3 ( step )					    22 LOAD_FAST 3 ( step )					  
							      24 LOAD_FAST 2 ( n )					    24 LOAD_FAST 2 ( n )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 1 ( x )					    36 LOAD_FAST 1 ( x )					  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 0 ( < )					  
							      40 POP_JUMP_IF_FALSE 74					    40 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      5 42 LOAD_FAST 3 ( step )					    5 42 LOAD_FAST 3 ( step )					  
							      44 STORE_FAST 4 ( prev )					    44 STORE_FAST 4 ( prev )					  
							      								    								  
							      6 46 LOAD_FAST 3 ( step )					    6 46 LOAD_FAST 3 ( step )					  
							      48 LOAD_GLOBAL 0 ( math )					    48 LOAD_GLOBAL 0 ( math )					  
							      50 LOAD_METHOD 1 ( sqrt )					    50 LOAD_METHOD 1 ( sqrt )					  
							      52 LOAD_FAST 2 ( n )					    52 LOAD_FAST 2 ( n )					  
							      54 CALL_METHOD 1						    54 CALL_METHOD 1						  
							      56 INPLACE_ADD						    56 INPLACE_ADD						  
							      58 STORE_FAST 3 ( step )					    58 STORE_FAST 3 ( step )					  
							      								    								  
							      7 60 LOAD_FAST 4 ( prev )					    7 60 LOAD_FAST 4 ( prev )					  
							      62 LOAD_FAST 2 ( n )					    62 LOAD_FAST 2 ( n )					  
							      64 COMPARE_OP 5 ( >= )					    64 COMPARE_OP 5 ( >= )					  
							      66 POP_JUMP_IF_FALSE 16					    66 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      8 68 LOAD_CONST 3 ( - 1 )					    8 68 LOAD_CONST 3 ( - 1 )					  
							      70 RETURN_VALUE						    70 RETURN_VALUE						  
							      72 JUMP_ABSOLUTE 16					    >> 72 JUMP_ABSOLUTE 16					  
							      >> 74 POP_BLOCK						    >> 74 POP_BLOCK						  
							      								    								  
							      9 >> 76 SETUP_LOOP 46 ( to 124 )				    9 >> 76 SETUP_LOOP 46 ( to 126 )				  
							      >> 78 LOAD_FAST 0 ( arr )					    >> 78 LOAD_FAST 0 ( arr )					  
							      80 LOAD_GLOBAL 2 ( int )					    80 LOAD_GLOBAL 2 ( int )					  
							      82 LOAD_FAST 4 ( prev )					    82 LOAD_FAST 4 ( prev )					  
							      84 CALL_FUNCTION 1					    84 CALL_FUNCTION 1						  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 LOAD_FAST 1 ( x )					    88 LOAD_FAST 1 ( x )					  
							      90 COMPARE_OP 0 ( < )					    90 COMPARE_OP 0 ( < )					  
							      92 POP_JUMP_IF_FALSE 122					    92 POP_JUMP_IF_FALSE 124					  
							      								    								  
							      10 94 LOAD_FAST 4 ( prev )				    10 94 LOAD_FAST 4 ( prev )					  
							      96 LOAD_CONST 2 ( 1 )					    96 LOAD_CONST 2 ( 1 )					  
							      98 INPLACE_ADD						    98 INPLACE_ADD						  
							      100 STORE_FAST 4 ( prev )					    100 STORE_FAST 4 ( prev )					  
							      								    								  
							      11 102 LOAD_FAST 4 ( prev )				    11 102 LOAD_FAST 4 ( prev )					  
							      104 LOAD_GLOBAL 3 ( min )					    104 LOAD_GLOBAL 3 ( min )					  
							      106 LOAD_FAST 3 ( step )					    106 LOAD_FAST 3 ( step )					  
							      108 LOAD_FAST 2 ( n )					    108 LOAD_FAST 2 ( n )					  
							      110 CALL_FUNCTION 2					    110 CALL_FUNCTION 2						  
							      112 COMPARE_OP 2 ( == )					    112 COMPARE_OP 2 ( == )					  
							      114 POP_JUMP_IF_FALSE 78					    114 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      12 116 LOAD_CONST 3 ( - 1 )				    12 116 LOAD_CONST 3 ( - 1 )					  
							      118 RETURN_VALUE						    118 RETURN_VALUE						  
							      120 JUMP_ABSOLUTE 78					    								  
							      >> 122 POP_BLOCK						    13 >> 120 LOAD_FAST 0 ( arr )				  
							      								    122 LOAD_GLOBAL 2 ( int )					  
							      13 >> 124 LOAD_FAST 0 ( arr )				    124 LOAD_FAST 4 ( prev )					  
							      126 LOAD_GLOBAL 2 ( int )					    126 CALL_FUNCTION 1						  
							      128 LOAD_FAST 4 ( prev )					    128 BINARY_SUBSCR						  
							      130 CALL_FUNCTION 1					    130 LOAD_FAST 1 ( x )					  
							      132 BINARY_SUBSCR						    132 COMPARE_OP 2 ( == )					  
							      134 LOAD_FAST 1 ( x )					    134 POP_JUMP_IF_FALSE 140					  
							      136 COMPARE_OP 2 ( == )					    								  
							      138 POP_JUMP_IF_FALSE 144					    14 136 LOAD_FAST 4 ( prev )					  
							      								    138 RETURN_VALUE						  
							      14 140 LOAD_FAST 4 ( prev )				    								  
							      142 RETURN_VALUE						    15 >> 140 LOAD_CONST 3 ( - 1 )				  
							      								    142 RETURN_VALUE NEW_LINE					  
							      15 >> 144 LOAD_CONST 3 ( - 1 )				    								  
							      146 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			      CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			    CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			  CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS
--							      --							    --								  --
def isPermutedMatrix ( mat , n ) :			      Disassembly of <code object isPermutedMatrix at 0x7f33e2644f6 Disassembly of <code object isPermutedMatrix at 0x7f2b0163966 script_not_found : None
    str_cat = ""					      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( str_cat )				    2 STORE_FAST 2 ( str_cat )					  
	str_cat = str_cat + "-" + str ( mat [ 0 ] [ i ] )     								    								  
    str_cat = str_cat + str_cat				      3 4 SETUP_LOOP 40 ( to 46 )				    3 4 SETUP_LOOP 40 ( to 46 )					  
    for i in range ( 1 , n ) :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	curr_str = ""					      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
	for j in range ( n ) :				      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
	    curr_str = curr_str + "-" + str ( mat [ i ] [ j ] 12 GET_ITER						    12 GET_ITER							  
	if ( str_cat.find ( curr_str ) ) :		      >> 14 FOR_ITER 28 ( to 44 )				    >> 14 FOR_ITER 28 ( to 44 )					  
	    return True					      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
    return False					      								    								  
							      4 18 LOAD_FAST 2 ( str_cat )				    4 18 LOAD_FAST 2 ( str_cat )				  
							      20 LOAD_CONST 2 ( '-' )					    20 LOAD_CONST 2 ( '-' )					  
							      22 BINARY_ADD						    22 BINARY_ADD						  
							      24 LOAD_GLOBAL 1 ( str )					    24 LOAD_GLOBAL 1 ( str )					  
							      26 LOAD_FAST 0 ( mat )					    26 LOAD_FAST 0 ( mat )					  
							      28 LOAD_CONST 3 ( 0 )					    28 LOAD_CONST 3 ( 0 )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 STORE_FAST 2 ( str_cat )				    40 STORE_FAST 2 ( str_cat )					  
							      42 JUMP_ABSOLUTE 14					    42 JUMP_ABSOLUTE 14						  
							      >> 44 POP_BLOCK						    >> 44 POP_BLOCK						  
							      								    								  
							      5 >> 46 LOAD_FAST 2 ( str_cat )				    5 >> 46 LOAD_FAST 2 ( str_cat )				  
							      48 LOAD_FAST 2 ( str_cat )				    48 LOAD_FAST 2 ( str_cat )					  
							      50 BINARY_ADD						    50 BINARY_ADD						  
							      52 STORE_FAST 2 ( str_cat )				    52 STORE_FAST 2 ( str_cat )					  
							      								    								  
							      6 54 SETUP_LOOP 78 ( to 134 )				    6 54 SETUP_LOOP 66 ( to 120 )				  
							      56 LOAD_GLOBAL 0 ( range )				    56 LOAD_GLOBAL 0 ( range )					  
							      58 LOAD_CONST 4 ( 1 )					    58 LOAD_CONST 4 ( 1 )					  
							      60 LOAD_FAST 1 ( n )					    60 LOAD_FAST 1 ( n )					  
							      62 CALL_FUNCTION 2					    62 CALL_FUNCTION 2						  
							      64 GET_ITER						    64 GET_ITER							  
							      >> 66 FOR_ITER 64 ( to 132 )				    >> 66 FOR_ITER 52 ( to 118 )				  
							      68 STORE_FAST 3 ( i )					    68 STORE_FAST 3 ( i )					  
							      								    								  
							      7 70 LOAD_CONST 1 ( '' )					    7 70 LOAD_CONST 1 ( '' )					  
							      72 STORE_FAST 4 ( curr_str )				    72 STORE_FAST 4 ( curr_str )				  
							      								    								  
							      8 74 SETUP_LOOP 40 ( to 116 )				    8 74 SETUP_LOOP 30 ( to 106 )				  
							      76 LOAD_GLOBAL 0 ( range )				    76 LOAD_GLOBAL 0 ( range )					  
							      78 LOAD_FAST 1 ( n )					    78 LOAD_FAST 1 ( n )					  
							      80 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 28 ( to 114 )				    >> 84 FOR_ITER 16 ( to 104 )				  
							      86 STORE_FAST 5 ( j )					    86 STORE_FAST 5 ( j )					  
							      								    								  
							      9 88 LOAD_FAST 4 ( curr_str )				    9 88 LOAD_FAST 4 ( curr_str )				  
							      90 LOAD_CONST 2 ( '-' )					    90 LOAD_CONST 2 ( '-' )					  
							      92 BINARY_ADD						    92 BINARY_ADD						  
							      94 LOAD_GLOBAL 1 ( str )					    94 LOAD_GLOBAL 1 ( str )					  
							      96 LOAD_FAST 0 ( mat )					    96 LOAD_FAST 0 ( mat )					  
							      98 LOAD_FAST 3 ( i )					    98 LOAD_FAST 3 ( i )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 LOAD_FAST 5 ( j )					    102 LOAD_FAST 5 ( j )					  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 CALL_FUNCTION 1					    106 CALL_FUNCTION 1						  
							      108 BINARY_ADD						    108 BINARY_ADD						  
							      110 STORE_FAST 4 ( curr_str )				    110 STORE_FAST 4 ( curr_str )				  
							      112 JUMP_ABSOLUTE 84					    112 JUMP_ABSOLUTE 84					  
							      >> 114 POP_BLOCK						    >> 114 POP_BLOCK						  
							      								    								  
							      10 >> 116 LOAD_FAST 2 ( str_cat )				    10 >> 116 LOAD_FAST 2 ( str_cat )				  
							      118 LOAD_METHOD 2 ( find )				    118 LOAD_METHOD 2 ( find )					  
							      120 LOAD_FAST 4 ( curr_str )				    120 LOAD_FAST 4 ( curr_str )				  
							      122 CALL_METHOD 1						    122 CALL_METHOD 1						  
							      124 POP_JUMP_IF_FALSE 66					    124 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      11 126 LOAD_CONST 5 ( True )				    11 126 LOAD_CONST 5 ( True )				  
							      128 RETURN_VALUE						    128 RETURN_VALUE						  
							      130 JUMP_ABSOLUTE 66					    								  
							      >> 132 POP_BLOCK						    12 >> 130 LOAD_CONST 6 ( False )				  
							      								    132 RETURN_VALUE NEW_LINE					  
							      12 >> 134 LOAD_CONST 6 ( False )				    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FITTING_SHELVES_PROBLEM					      FITTING_SHELVES_PROBLEM					    FITTING_SHELVES_PROBLEM					  FITTING_SHELVES_PROBLEM
--							      --							    --								  --
def minSpacePreferLarge ( w , m , n ) :			      Disassembly of <code object minSpacePreferLarge at 0x7f33e264 Disassembly of <code object minSpacePreferLarge at 0x7f2b0163 script_not_found : None
    num_m = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    num_n = 0						      2 STORE_FAST 3 ( num_m )					    2 STORE_FAST 3 ( num_m )					  
    rem = w						      								    								  
    p = 0						      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
    q = 0						      6 STORE_FAST 4 ( num_n )					    6 STORE_FAST 4 ( num_n )					  
    r = 0						      								    								  
    while ( w >= n ) :					      4 8 LOAD_FAST 0 ( w )					    4 8 LOAD_FAST 0 ( w )					  
	p = w / m					      10 STORE_FAST 5 ( rem )					    10 STORE_FAST 5 ( rem )					  
	r = w % m					      								    								  
	if ( r <= rem ) :				      5 12 LOAD_CONST 1 ( 0 )					    5 12 LOAD_CONST 1 ( 0 )					  
	    num_m = p					      14 STORE_FAST 6 ( p )					    14 STORE_FAST 6 ( p )					  
	    num_n = q					      								    								  
	    rem = r					      6 16 LOAD_CONST 1 ( 0 )					    6 16 LOAD_CONST 1 ( 0 )					  
	q += 1						      18 STORE_FAST 7 ( q )					    18 STORE_FAST 7 ( q )					  
	w -= n						      								    								  
    print ( str ( int ( num_m ) ) + " " + str ( num_n ) + " " 7 20 LOAD_CONST 1 ( 0 )					    7 20 LOAD_CONST 1 ( 0 )					  
							      22 STORE_FAST 8 ( r )					    22 STORE_FAST 8 ( r )					  
							      								    								  
							      8 24 SETUP_LOOP 64 ( to 90 )				    8 24 SETUP_LOOP 56 ( to 78 )				  
							      >> 26 LOAD_FAST 0 ( w )					    >> 26 LOAD_FAST 0 ( w )					  
							      28 LOAD_FAST 2 ( n )					    28 LOAD_FAST 2 ( n )					  
							      30 COMPARE_OP 5 ( >= )					    30 COMPARE_OP 5 ( >= )					  
							      32 POP_JUMP_IF_FALSE 88					    32 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      9 34 LOAD_FAST 0 ( w )					    9 34 LOAD_FAST 0 ( w )					  
							      36 LOAD_FAST 1 ( m )					    36 LOAD_FAST 1 ( m )					  
							      38 BINARY_TRUE_DIVIDE					    38 BINARY_TRUE_DIVIDE					  
							      40 STORE_FAST 6 ( p )					    40 STORE_FAST 6 ( p )					  
							      								    								  
							      10 42 LOAD_FAST 0 ( w )					    10 42 LOAD_FAST 0 ( w )					  
							      44 LOAD_FAST 1 ( m )					    44 LOAD_FAST 1 ( m )					  
							      46 BINARY_MODULO						    46 BINARY_MODULO						  
							      48 STORE_FAST 8 ( r )					    48 STORE_FAST 8 ( r )					  
							      								    								  
							      11 50 LOAD_FAST 8 ( r )					    11 50 LOAD_FAST 8 ( r )					  
							      52 LOAD_FAST 5 ( rem )					    52 LOAD_FAST 5 ( rem )					  
							      54 COMPARE_OP 1 ( <= )					    54 COMPARE_OP 1 ( <= )					  
							      56 POP_JUMP_IF_FALSE 70					    56 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      12 58 LOAD_FAST 6 ( p )					    12 58 LOAD_FAST 6 ( p )					  
							      60 STORE_FAST 3 ( num_m )					    60 STORE_FAST 3 ( num_m )					  
							      								    								  
							      13 62 LOAD_FAST 7 ( q )					    13 62 LOAD_FAST 7 ( q )					  
							      64 STORE_FAST 4 ( num_n )					    64 STORE_FAST 4 ( num_n )					  
							      								    								  
							      14 66 LOAD_FAST 8 ( r )					    14 >> 66 LOAD_FAST 7 ( q )					  
							      68 STORE_FAST 5 ( rem )					    68 LOAD_CONST 2 ( 1 )					  
							      								    70 INPLACE_ADD						  
							      15 >> 70 LOAD_FAST 7 ( q )				    72 STORE_FAST 7 ( q )					  
							      72 LOAD_CONST 2 ( 1 )					    74 JUMP_ABSOLUTE 26						  
							      74 INPLACE_ADD						    >> 76 POP_BLOCK						  
							      76 STORE_FAST 7 ( q )					    								  
							      								    15 >> 78 LOAD_GLOBAL 0 ( print )				  
							      16 78 LOAD_FAST 0 ( w )					    80 LOAD_GLOBAL 1 ( str )					  
							      80 LOAD_FAST 2 ( n )					    82 LOAD_GLOBAL 2 ( int )					  
							      82 INPLACE_SUBTRACT					    84 LOAD_FAST 3 ( num_m )					  
							      84 STORE_FAST 0 ( w )					    86 CALL_FUNCTION 1						  
							      86 JUMP_ABSOLUTE 26					    88 CALL_FUNCTION 1						  
							      >> 88 POP_BLOCK						    90 LOAD_CONST 3 ( ' ' )					  
							      								    92 BINARY_ADD						  
							      17 >> 90 LOAD_GLOBAL 0 ( print )				    94 LOAD_GLOBAL 1 ( str )					  
							      92 LOAD_GLOBAL 1 ( str )					    96 LOAD_FAST 4 ( num_n )					  
							      94 LOAD_GLOBAL 2 ( int )					    98 CALL_FUNCTION 1						  
							      96 LOAD_FAST 3 ( num_m )					    100 BINARY_ADD						  
							      98 CALL_FUNCTION 1					    102 LOAD_CONST 3 ( ' ' )					  
							      100 CALL_FUNCTION 1					    104 BINARY_ADD						  
							      102 LOAD_CONST 3 ( ' ' )					    106 LOAD_GLOBAL 1 ( str )					  
							      104 BINARY_ADD						    108 LOAD_FAST 5 ( rem )					  
							      106 LOAD_GLOBAL 1 ( str )					    110 CALL_FUNCTION 1						  
							      108 LOAD_FAST 4 ( num_n )					    112 BINARY_ADD						  
							      110 CALL_FUNCTION 1					    114 CALL_FUNCTION 1						  
							      112 BINARY_ADD						    116 POP_TOP							  
							      114 LOAD_CONST 3 ( ' ' )					    118 LOAD_CONST 0 ( None )					  
							      116 BINARY_ADD						    120 RETURN_VALUE NEW_LINE					  
							      118 LOAD_GLOBAL 1 ( str )					    								  
							      120 LOAD_FAST 5 ( rem )					    								  
							      122 CALL_FUNCTION 1					    								  
							      124 BINARY_ADD						    								  
							      126 CALL_FUNCTION 1					    								  
							      128 POP_TOP						    								  
							      130 LOAD_CONST 0 ( None )					    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN
--							      --							    --								  --
def printMaxOfMin ( arr , n ) :				      Disassembly of <code object printMaxOfMin at 0x7f33e2653ed0,  Disassembly of <code object printMaxOfMin at 0x7f2b0163dc90,  script_not_found : None
    for k in range ( 1 , n + 1 ) :			      2 0 SETUP_LOOP 130 ( to 132 )				    2 0 SETUP_LOOP 120 ( to 122 )				  
	maxOfMin = INT_MIN ;				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for i in range ( n - k + 1 ) :			      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
	    min = arr [ i ]				      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  
	    for j in range ( k ) :			      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
		if ( arr [ i + j ] < min ) :		      10 BINARY_ADD						    10 BINARY_ADD						  
		    min = arr [ i + j ]			      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
	    if ( min > maxOfMin ) :			      14 GET_ITER						    14 GET_ITER							  
		maxOfMin = min				      >> 16 FOR_ITER 112 ( to 130 )				    >> 16 FOR_ITER 102 ( to 120 )				  
	print ( maxOfMin , end = " " )			      18 STORE_FAST 2 ( k )					    18 STORE_FAST 2 ( k )					  
							      								    								  
							      3 20 LOAD_GLOBAL 1 ( INT_MIN )				    3 20 LOAD_GLOBAL 1 ( INT_MIN )				  
							      22 STORE_FAST 3 ( maxOfMin )				    22 STORE_FAST 3 ( maxOfMin )				  
							      								    								  
							      4 24 SETUP_LOOP 90 ( to 116 )				    4 24 SETUP_LOOP 76 ( to 112 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 LOAD_FAST 2 ( k )					    30 LOAD_FAST 2 ( k )					  
							      32 BINARY_SUBTRACT					    32 BINARY_SUBTRACT						  
							      34 LOAD_CONST 1 ( 1 )					    34 LOAD_CONST 1 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 70 ( to 114 )				    >> 42 FOR_ITER 60 ( to 110 )				  
							      44 STORE_FAST 4 ( i )					    44 STORE_FAST 4 ( i )					  
							      								    								  
							      5 46 LOAD_FAST 0 ( arr )					    5 46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 4 ( i )					    48 LOAD_FAST 4 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 STORE_FAST 5 ( min )					    52 STORE_FAST 5 ( min )					  
							      								    								  
							      6 54 SETUP_LOOP 44 ( to 100 )				    6 54 SETUP_LOOP 36 ( to 100 )				  
							      56 LOAD_GLOBAL 0 ( range )				    56 LOAD_GLOBAL 0 ( range )					  
							      58 LOAD_FAST 2 ( k )					    58 LOAD_FAST 2 ( k )					  
							      60 CALL_FUNCTION 1					    60 CALL_FUNCTION 1						  
							      62 GET_ITER						    62 GET_ITER							  
							      >> 64 FOR_ITER 32 ( to 98 )				    >> 64 FOR_ITER 28 ( to 98 )					  
							      66 STORE_FAST 6 ( j )					    66 STORE_FAST 6 ( j )					  
							      								    								  
							      7 68 LOAD_FAST 0 ( arr )					    7 68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 4 ( i )					    70 LOAD_FAST 4 ( i )					  
							      72 LOAD_FAST 6 ( j )					    72 LOAD_FAST 6 ( j )					  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 LOAD_FAST 5 ( min )					    78 LOAD_FAST 5 ( min )					  
							      80 COMPARE_OP 0 ( < )					    80 COMPARE_OP 0 ( < )					  
							      82 POP_JUMP_IF_FALSE 64					    82 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      8 84 LOAD_FAST 0 ( arr )					    8 84 LOAD_FAST 0 ( arr )					  
							      86 LOAD_FAST 4 ( i )					    86 LOAD_FAST 4 ( i )					  
							      88 LOAD_FAST 6 ( j )					    88 LOAD_FAST 6 ( j )					  
							      90 BINARY_ADD						    90 BINARY_ADD						  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 STORE_FAST 5 ( min )					    94 STORE_FAST 5 ( min )					  
							      96 JUMP_ABSOLUTE 64					    96 JUMP_ABSOLUTE 64						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      								    								  
							      9 >> 100 LOAD_FAST 5 ( min )				    9 >> 100 LOAD_FAST 5 ( min )				  
							      102 LOAD_FAST 3 ( maxOfMin )				    102 LOAD_FAST 3 ( maxOfMin )				  
							      104 COMPARE_OP 4 ( > )					    104 COMPARE_OP 4 ( > )					  
							      106 POP_JUMP_IF_FALSE 42					    106 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      10 108 LOAD_FAST 5 ( min )				    10 108 LOAD_FAST 5 ( min )					  
							      110 STORE_FAST 3 ( maxOfMin )				    110 STORE_FAST 3 ( maxOfMin )				  
							      112 JUMP_ABSOLUTE 42					    112 JUMP_ABSOLUTE 42					  
							      >> 114 POP_BLOCK						    >> 114 POP_BLOCK						  
							      								    								  
							      11 >> 116 LOAD_GLOBAL 2 ( print )				    11 >> 116 LOAD_GLOBAL 2 ( print )				  
							      118 LOAD_FAST 3 ( maxOfMin )				    118 LOAD_FAST 3 ( maxOfMin )				  
							      120 LOAD_CONST 2 ( ' ' )					    120 LOAD_CONST 2 ( ' ' )					  
							      122 LOAD_CONST 3 ( ( 'end' , ) )				    122 LOAD_CONST 3 ( ( 'end' , ) )				  
							      124 CALL_FUNCTION_KW 2					    124 CALL_FUNCTION_KW 2					  
							      126 POP_TOP						    126 POP_TOP							  
							      128 JUMP_ABSOLUTE 16					    128 LOAD_CONST 0 ( None )					  
							      >> 130 POP_BLOCK						    130 RETURN_VALUE NEW_LINE					  
							      >> 132 LOAD_CONST 0 ( None )				    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY
--							      --							    --								  --
def minJumps ( arr , l , h ) :				      Disassembly of <code object minJumps at 0x7f33e2653ed0, file  Disassembly of <code object minJumps at 0x7f2b0163dc90, file  script_not_found : None
    if ( h == l ) :					      2 0 LOAD_FAST 2 ( h )					    2 0 LOAD_FAST 2 ( h )					  
	return 0					      2 LOAD_FAST 1 ( l )					    2 LOAD_FAST 1 ( l )						  
    if ( arr [ l ] == 0 ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return float ( 'inf' )				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    min = float ( 'inf' )				      								    								  
    for i in range ( l + 1 , h + 1 ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	if ( i < l + arr [ l ] + 1 ) :			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	    jumps = minJumps ( arr , i , h )		      								    								  
	    if ( jumps != float ( 'inf' ) and jumps + 1 < min 4 >> 12 LOAD_FAST 0 ( arr )				    4 >> 12 LOAD_FAST 0 ( arr )					  
		min = jumps + 1				      14 LOAD_FAST 1 ( l )					    14 LOAD_FAST 1 ( l )					  
    return min						      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  
							      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
							      22 POP_JUMP_IF_FALSE 32					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 LOAD_GLOBAL 0 ( float )				    5 24 LOAD_GLOBAL 0 ( float )				  
							      26 LOAD_CONST 2 ( 'inf' )					    26 LOAD_CONST 2 ( 'inf' )					  
							      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      6 >> 32 LOAD_GLOBAL 0 ( float )				    6 >> 32 LOAD_GLOBAL 0 ( float )				  
							      34 LOAD_CONST 2 ( 'inf' )					    34 LOAD_CONST 2 ( 'inf' )					  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 STORE_FAST 3 ( min )					    38 STORE_FAST 3 ( min )					  
							      								    								  
							      7 40 SETUP_LOOP 90 ( to 132 )				    7 40 SETUP_LOOP 96 ( to 148 )				  
							      42 LOAD_GLOBAL 1 ( range )				    42 LOAD_GLOBAL 1 ( range )					  
							      44 LOAD_FAST 1 ( l )					    44 LOAD_FAST 1 ( l )					  
							      46 LOAD_CONST 3 ( 1 )					    46 LOAD_CONST 3 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 LOAD_FAST 2 ( h )					    50 LOAD_FAST 2 ( h )					  
							      52 LOAD_CONST 3 ( 1 )					    52 LOAD_CONST 3 ( 1 )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 CALL_FUNCTION 2					    56 CALL_FUNCTION 2						  
							      58 GET_ITER						    58 GET_ITER							  
							      >> 60 FOR_ITER 68 ( to 130 )				    >> 60 FOR_ITER 80 ( to 146 )				  
							      62 STORE_FAST 4 ( i )					    62 STORE_FAST 4 ( i )					  
							      								    								  
							      8 64 LOAD_FAST 4 ( i )					    8 64 LOAD_FAST 4 ( i )					  
							      66 LOAD_FAST 1 ( l )					    66 LOAD_FAST 1 ( l )					  
							      68 LOAD_FAST 0 ( arr )					    68 LOAD_FAST 1 ( l )					  
							      70 LOAD_FAST 1 ( l )					    70 LOAD_FAST 0 ( arr )					  
							      72 BINARY_SUBSCR						    72 LOAD_FAST 1 ( l )					  
							      74 BINARY_ADD						    74 BINARY_SUBSCR						  
							      76 LOAD_CONST 3 ( 1 )					    76 LOAD_CONST 3 ( 1 )					  
							      78 BINARY_ADD						    78 BINARY_ADD						  
							      80 COMPARE_OP 0 ( < )					    80 COMPARE_OP 0 ( < )					  
							      82 POP_JUMP_IF_FALSE 60					    82 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      9 84 LOAD_GLOBAL 2 ( minJumps )				    9 84 LOAD_GLOBAL 2 ( minJumps )				  
							      86 LOAD_FAST 0 ( arr )					    86 LOAD_FAST 0 ( arr )					  
							      88 LOAD_FAST 4 ( i )					    88 LOAD_FAST 4 ( i )					  
							      90 LOAD_FAST 2 ( h )					    90 LOAD_FAST 2 ( h )					  
							      92 CALL_FUNCTION 3					    92 CALL_FUNCTION 3						  
							      94 STORE_FAST 5 ( jumps )					    94 STORE_FAST 5 ( jumps )					  
							      								    								  
							      10 96 LOAD_FAST 5 ( jumps )				    10 96 LOAD_FAST 5 ( jumps )					  
							      98 LOAD_GLOBAL 0 ( float )				    98 LOAD_GLOBAL 0 ( float )					  
							      100 LOAD_CONST 2 ( 'inf' )				    100 LOAD_CONST 2 ( 'inf' )					  
							      102 CALL_FUNCTION 1					    102 CALL_FUNCTION 1						  
							      104 COMPARE_OP 3 ( != )					    104 COMPARE_OP 3 ( != )					  
							      106 POP_JUMP_IF_FALSE 60					    106 POP_JUMP_IF_FALSE 60					  
							      108 LOAD_FAST 5 ( jumps )					    108 LOAD_FAST 5 ( jumps )					  
							      110 LOAD_CONST 3 ( 1 )					    110 LOAD_CONST 3 ( 1 )					  
							      112 BINARY_ADD						    112 BINARY_ADD						  
							      114 LOAD_FAST 3 ( min )					    114 LOAD_FAST 3 ( min )					  
							      116 COMPARE_OP 0 ( < )					    116 COMPARE_OP 0 ( < )					  
							      118 POP_JUMP_IF_FALSE 60					    118 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      11 120 LOAD_FAST 5 ( jumps )				    11 120 LOAD_FAST 5 ( jumps )				  
							      122 LOAD_CONST 3 ( 1 )					    122 LOAD_CONST 3 ( 1 )					  
							      124 BINARY_ADD						    124 BINARY_ADD						  
							      126 STORE_FAST 3 ( min )					    126 STORE_FAST 3 ( min )					  
							      128 JUMP_ABSOLUTE 60					    								  
							      >> 130 POP_BLOCK						    12 >> 128 LOAD_FAST 3 ( min )				  
							      								    130 RETURN_VALUE NEW_LINE					  
							      12 >> 132 LOAD_FAST 3 ( min )				    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		      PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		    PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		  PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N
--							      --							    --								  --
def findConsecutive ( N ) :				      Disassembly of <code object findConsecutive at 0x7f33e2649a50 Disassembly of <code object findConsecutive at 0x7f2b0163dc90 script_not_found : None
    start = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    end = ( N + 1 ) // 2				      2 STORE_FAST 1 ( start )					    2 STORE_FAST 1 ( start )					  
    while ( start < end ) :				      								    								  
	Sum = 0						      3 4 LOAD_FAST 0 ( N )					    3 4 LOAD_FAST 0 ( N )					  
	for i in range ( start , end + 1 ) :		      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    Sum = Sum + i				      8 BINARY_ADD						    8 BINARY_ADD						  
	    if ( Sum == N ) :				      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
		for j in range ( start , i + 1 ) :	      12 BINARY_FLOOR_DIVIDE					    12 BINARY_FLOOR_DIVIDE					  
		    print ( j , end = " " )		      14 STORE_FAST 2 ( end )					    14 STORE_FAST 2 ( end )					  
		print ( )				      								    								  
		break					      4 16 SETUP_LOOP 122 ( to 140 )				    4 16 SETUP_LOOP 104 ( to 118 )				  
	    if ( Sum > N ) :				      >> 18 LOAD_FAST 1 ( start )				    >> 18 LOAD_FAST 1 ( start )					  
		break					      20 LOAD_FAST 2 ( end )					    20 LOAD_FAST 2 ( end )					  
	Sum = 0						      22 COMPARE_OP 0 ( < )					    22 COMPARE_OP 0 ( < )					  
	start += 1					      24 POP_JUMP_IF_FALSE 138					    24 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      5 26 LOAD_CONST 3 ( 0 )					    5 26 LOAD_CONST 3 ( 0 )					  
							      28 STORE_FAST 3 ( Sum )					    28 STORE_FAST 3 ( Sum )					  
							      								    								  
							      6 30 SETUP_LOOP 92 ( to 124 )				    6 30 SETUP_LOOP 76 ( to 104 )				  
							      32 LOAD_GLOBAL 0 ( range )				    32 LOAD_GLOBAL 0 ( range )					  
							      34 LOAD_FAST 1 ( start )					    34 LOAD_FAST 1 ( start )					  
							      36 LOAD_FAST 2 ( end )					    36 LOAD_FAST 2 ( end )					  
							      38 LOAD_CONST 1 ( 1 )					    38 LOAD_CONST 1 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 74 ( to 122 )				    >> 46 FOR_ITER 60 ( to 102 )				  
							      48 STORE_FAST 4 ( i )					    48 STORE_FAST 4 ( i )					  
							      								    								  
							      7 50 LOAD_FAST 3 ( Sum )					    7 50 LOAD_FAST 3 ( Sum )					  
							      52 LOAD_FAST 4 ( i )					    52 LOAD_FAST 4 ( i )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 STORE_FAST 3 ( Sum )					    56 STORE_FAST 3 ( Sum )					  
							      								    								  
							      8 58 LOAD_FAST 3 ( Sum )					    8 58 LOAD_FAST 3 ( Sum )					  
							      60 LOAD_FAST 0 ( N )					    60 LOAD_FAST 0 ( N )					  
							      62 COMPARE_OP 2 ( == )					    62 COMPARE_OP 2 ( == )					  
							      64 POP_JUMP_IF_FALSE 110					    64 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      9 66 SETUP_LOOP 34 ( to 102 )				    9 66 SETUP_LOOP 38 ( to 100 )				  
							      68 LOAD_GLOBAL 0 ( range )				    68 LOAD_GLOBAL 0 ( range )					  
							      70 LOAD_FAST 1 ( start )					    70 LOAD_FAST 1 ( start )					  
							      72 LOAD_FAST 4 ( i )					    72 LOAD_FAST 4 ( i )					  
							      74 LOAD_CONST 1 ( 1 )					    74 LOAD_CONST 1 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 CALL_FUNCTION 2					    78 CALL_FUNCTION 2						  
							      80 GET_ITER						    80 GET_ITER							  
							      >> 82 FOR_ITER 16 ( to 100 )				    >> 82 FOR_ITER 18 ( to 98 )					  
							      84 STORE_FAST 5 ( j )					    84 STORE_FAST 5 ( j )					  
							      								    								  
							      10 86 LOAD_GLOBAL 1 ( print )				    10 86 LOAD_GLOBAL 1 ( print )				  
							      88 LOAD_FAST 5 ( j )					    88 LOAD_FAST 5 ( j )					  
							      90 LOAD_CONST 4 ( ' ' )					    90 LOAD_CONST 4 ( ' ' )					  
							      92 LOAD_CONST 5 ( ( 'end' , ) )				    92 LOAD_CONST 5 ( ( 'end' , ) )				  
							      94 CALL_FUNCTION_KW 2					    94 CALL_FUNCTION_KW 2					  
							      96 POP_TOP						    96 POP_TOP							  
							      98 JUMP_ABSOLUTE 82					    								  
							      >> 100 POP_BLOCK						    11 >> 98 LOAD_GLOBAL 1 ( print )				  
							      								    100 CALL_FUNCTION 0						  
							      11 >> 102 LOAD_GLOBAL 1 ( print )				    102 POP_TOP							  
							      104 CALL_FUNCTION 0					    								  
							      106 POP_TOP						    12 104 BREAK_LOOP						  
							      								    106 JUMP_ABSOLUTE 82					  
							      12 108 BREAK_LOOP						    >> 108 POP_BLOCK						  
							      								    								  
							      13 >> 110 LOAD_FAST 3 ( Sum )				    13 >> 110 LOAD_GLOBAL 1 ( print )				  
							      112 LOAD_FAST 0 ( N )					    112 CALL_FUNCTION 0						  
							      114 COMPARE_OP 4 ( > )					    114 POP_TOP							  
							      116 POP_JUMP_IF_FALSE 46					    								  
							      								    14 116 BREAK_LOOP						  
							      14 118 BREAK_LOOP						    118 JUMP_ABSOLUTE 18					  
							      120 JUMP_ABSOLUTE 46					    120 POP_BLOCK						  
							      >> 122 POP_BLOCK						    								  
							      								    15 >> 122 LOAD_FAST 3 ( Sum )				  
							      15 >> 124 LOAD_CONST 3 ( 0 )				    124 LOAD_FAST 0 ( N )					  
							      126 STORE_FAST 3 ( Sum )					    126 COMPARE_OP 4 ( > )					  
							      								    128 POP_JUMP_IF_FALSE 144					  
							      16 128 LOAD_FAST 1 ( start )				    								  
							      130 LOAD_CONST 1 ( 1 )					    16 130 BREAK_LOOP						  
							      132 INPLACE_ADD						    132 JUMP_ABSOLUTE 18					  
							      134 STORE_FAST 1 ( start )				    134 POP_BLOCK						  
							      136 JUMP_ABSOLUTE 18					    								  
							      >> 138 POP_BLOCK						    17 >> 136 LOAD_CONST 3 ( 0 )				  
							      >> 140 LOAD_CONST 0 ( None )				    138 STORE_FAST 3 ( Sum )					  
							      142 RETURN_VALUE NEW_LINE					    								  
							      								    18 140 LOAD_FAST 1 ( start )				  
							      								    142 LOAD_CONST 1 ( 1 )					  
							      								    144 INPLACE_ADD						  
							      								    146 STORE_FAST 1 ( start )					  
							      								    >> 148 LOAD_CONST 0 ( None )				  
							      								    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1
--							      --							    --								  --
def lis ( arr ) :					      Disassembly of <code object lis at 0x7f33e2644f60, file "<dis Disassembly of <code object lis at 0x7f2b0163dc90, file "<dis script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    lis = [ 1 ] * n					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    for i in range ( 1 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	for j in range ( 0 , i ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  								    								  
		lis [ i ] = lis [ j ] + 1		      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
    maximum = 0						      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
    for i in range ( n ) :				      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
	maximum = max ( maximum , lis [ i ] )		      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
    return maximum					      16 STORE_FAST 2 ( lis )					    16 STORE_FAST 2 ( lis )					  
							      								    								  
							      4 18 SETUP_LOOP 90 ( to 110 )				    4 18 SETUP_LOOP 92 ( to 118 )				  
							      20 LOAD_GLOBAL 1 ( range )				    20 LOAD_GLOBAL 1 ( range )					  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 1 ( 1 )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 76 ( to 108 )				    >> 30 FOR_ITER 80 ( to 116 )				  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 3 ( i )					  
							      								    								  
							      5 34 SETUP_LOOP 70 ( to 106 )				    5 34 SETUP_LOOP 70 ( to 114 )				  
							      36 LOAD_GLOBAL 1 ( range )				    36 LOAD_GLOBAL 1 ( range )					  
							      38 LOAD_CONST 2 ( 0 )					    38 LOAD_CONST 2 ( 0 )					  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 3 ( i )					  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 56 ( to 104 )				    >> 46 FOR_ITER 52 ( to 112 )				  
							      48 STORE_FAST 4 ( j )					    48 STORE_FAST 4 ( j )					  
							      								    								  
							      6 50 LOAD_FAST 0 ( arr )					    6 50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 3 ( i )					    52 LOAD_FAST 3 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 4 ( j )					    58 LOAD_FAST 4 ( j )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 COMPARE_OP 4 ( > )					    62 COMPARE_OP 4 ( > )					  
							      64 POP_JUMP_IF_FALSE 46					    64 POP_JUMP_IF_FALSE 46					  
							      66 LOAD_FAST 2 ( lis )					    66 LOAD_FAST 2 ( lis )					  
							      68 LOAD_FAST 3 ( i )					    68 LOAD_FAST 3 ( i )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_FAST 2 ( lis )					    72 LOAD_FAST 2 ( lis )					  
							      74 LOAD_FAST 4 ( j )					    74 LOAD_FAST 4 ( j )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 LOAD_CONST 1 ( 1 )					    78 LOAD_CONST 1 ( 1 )					  
							      80 BINARY_ADD						    80 BINARY_ADD						  
							      82 COMPARE_OP 0 ( < )					    82 COMPARE_OP 0 ( < )					  
							      84 POP_JUMP_IF_FALSE 46					    84 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      7 86 LOAD_FAST 2 ( lis )					    7 86 LOAD_FAST 2 ( lis )					  
							      88 LOAD_FAST 4 ( j )					    88 LOAD_FAST 4 ( j )					  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 LOAD_CONST 1 ( 1 )					    92 LOAD_CONST 1 ( 1 )					  
							      94 BINARY_ADD						    94 BINARY_ADD						  
							      96 LOAD_FAST 2 ( lis )					    96 LOAD_FAST 2 ( lis )					  
							      98 LOAD_FAST 3 ( i )					    98 LOAD_FAST 3 ( i )					  
							      100 STORE_SUBSCR						    100 STORE_SUBSCR						  
							      102 JUMP_ABSOLUTE 46					    102 JUMP_ABSOLUTE 46					  
							      >> 104 POP_BLOCK						    >> 104 POP_BLOCK						  
							      >> 106 JUMP_ABSOLUTE 30					    >> 106 JUMP_ABSOLUTE 30					  
							      >> 108 POP_BLOCK						    >> 108 POP_BLOCK						  
							      								    								  
							      8 >> 110 LOAD_CONST 2 ( 0 )				    8 >> 110 LOAD_CONST 2 ( 0 )					  
							      112 STORE_FAST 5 ( maximum )				    112 STORE_FAST 5 ( maximum )				  
							      								    								  
							      9 114 SETUP_LOOP 30 ( to 146 )				    9 114 SETUP_LOOP 34 ( to 140 )				  
							      116 LOAD_GLOBAL 1 ( range )				    116 LOAD_GLOBAL 1 ( range )					  
							      118 LOAD_FAST 1 ( n )					    118 LOAD_FAST 1 ( n )					  
							      120 CALL_FUNCTION 1					    120 CALL_FUNCTION 1						  
							      122 GET_ITER						    122 GET_ITER						  
							      >> 124 FOR_ITER 18 ( to 144 )				    >> 124 FOR_ITER 26 ( to 138 )				  
							      126 STORE_FAST 3 ( i )					    126 STORE_FAST 3 ( i )					  
							      								    								  
							      10 128 LOAD_GLOBAL 2 ( max )				    10 128 LOAD_GLOBAL 2 ( max )				  
							      130 LOAD_FAST 5 ( maximum )				    130 LOAD_FAST 5 ( maximum )					  
							      132 LOAD_FAST 2 ( lis )					    132 LOAD_FAST 2 ( lis )					  
							      134 LOAD_FAST 3 ( i )					    134 LOAD_FAST 3 ( i )					  
							      136 BINARY_SUBSCR						    136 BINARY_SUBSCR						  
							      138 CALL_FUNCTION 2					    138 CALL_FUNCTION 2						  
							      140 STORE_FAST 5 ( maximum )				    140 STORE_FAST 5 ( maximum )				  
							      142 JUMP_ABSOLUTE 124					    142 JUMP_ABSOLUTE 124					  
							      >> 144 POP_BLOCK						    >> 144 POP_BLOCK						  
							      								    								  
							      11 >> 146 LOAD_FAST 5 ( maximum )				    11 >> 146 LOAD_FAST 5 ( maximum )				  
							      148 RETURN_VALUE NEW_LINE					    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A
--							      --							    --								  --
def findmin ( p , n ) :					      Disassembly of <code object findmin at 0x7f33e2644f60, file " Disassembly of <code object findmin at 0x7f2b0163dc90, file " script_not_found : None
    a , b , c , d = 0 , 0 , 0 , 0			      2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 , 0 ) )			    2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 , 0 ) )			  
    for i in range ( n ) :				      2 UNPACK_SEQUENCE 4					    2 UNPACK_SEQUENCE 5						  
	if ( p [ i ] [ 0 ] <= 0 ) :			      4 STORE_FAST 2 ( a )					    4 STORE_FAST 2 ( a )					  
	    a += 1					      6 STORE_FAST 3 ( b )					    6 STORE_FAST 3 ( b )					  
	elif ( p [ i ] [ 0 ] >= 0 ) :			      8 STORE_FAST 4 ( c )					    8 STORE_FAST 4 ( c )					  
	    b += 1					      10 STORE_FAST 5 ( d )					    10 STORE_FAST 5 ( d )					  
	if ( p [ i ] [ 1 ] >= 0 ) :			      								    12 STORE_FAST 6 ( d )					  
	    c += 1					      3 12 SETUP_LOOP 116 ( to 130 )				    								  
	elif ( p [ i ] [ 1 ] <= 0 ) :			      14 LOAD_GLOBAL 0 ( range )				    3 14 SETUP_LOOP 104 ( to 118 )				  
	    d += 1					      16 LOAD_FAST 1 ( n )					    16 LOAD_GLOBAL 0 ( range )					  
    return min ( [ a , b , c , d ] )			      18 CALL_FUNCTION 1					    18 LOAD_FAST 1 ( n )					  
							      20 GET_ITER						    20 CALL_FUNCTION 1						  
							      >> 22 FOR_ITER 104 ( to 128 )				    22 GET_ITER							  
							      24 STORE_FAST 6 ( i )					    >> 24 FOR_ITER 88 ( to 116 )				  
							      								    26 STORE_FAST 7 ( i )					  
							      4 26 LOAD_FAST 0 ( p )					    								  
							      28 LOAD_FAST 6 ( i )					    4 28 LOAD_FAST 0 ( p )					  
							      30 BINARY_SUBSCR						    30 LOAD_FAST 7 ( i )					  
							      32 LOAD_CONST 2 ( 0 )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 LOAD_CONST 1 ( 0 )					  
							      36 LOAD_CONST 2 ( 0 )					    36 BINARY_SUBSCR						  
							      38 COMPARE_OP 1 ( <= )					    38 LOAD_CONST 1 ( 0 )					  
							      40 POP_JUMP_IF_FALSE 52					    40 COMPARE_OP 1 ( <= )					  
							      								    42 POP_JUMP_IF_FALSE 52					  
							      5 42 LOAD_FAST 2 ( a )					    								  
							      44 LOAD_CONST 3 ( 1 )					    5 44 LOAD_FAST 2 ( a )					  
							      46 INPLACE_ADD						    46 LOAD_CONST 2 ( 1 )					  
							      48 STORE_FAST 2 ( a )					    48 INPLACE_ADD						  
							      50 JUMP_FORWARD 24 ( to 76 )				    50 STORE_FAST 2 ( a )					  
							      								    								  
							      6 >> 52 LOAD_FAST 0 ( p )					    6 >> 52 LOAD_FAST 0 ( p )					  
							      54 LOAD_FAST 6 ( i )					    54 LOAD_FAST 7 ( i )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_CONST 2 ( 0 )					    58 LOAD_CONST 1 ( 0 )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_CONST 2 ( 0 )					    62 LOAD_CONST 1 ( 0 )					  
							      64 COMPARE_OP 5 ( >= )					    64 COMPARE_OP 5 ( >= )					  
							      66 POP_JUMP_IF_FALSE 76					    66 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      7 68 LOAD_FAST 3 ( b )					    7 68 LOAD_FAST 3 ( b )					  
							      70 LOAD_CONST 3 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 INPLACE_ADD						    72 INPLACE_ADD						  
							      74 STORE_FAST 3 ( b )					    74 STORE_FAST 3 ( b )					  
							      								    								  
							      8 >> 76 LOAD_FAST 0 ( p )					    8 >> 76 LOAD_FAST 0 ( p )					  
							      78 LOAD_FAST 6 ( i )					    78 LOAD_FAST 7 ( i )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 LOAD_CONST 3 ( 1 )					    82 LOAD_CONST 2 ( 1 )					  
							      84 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      86 LOAD_CONST 2 ( 0 )					    86 LOAD_CONST 1 ( 0 )					  
							      88 COMPARE_OP 5 ( >= )					    88 COMPARE_OP 1 ( <= )					  
							      90 POP_JUMP_IF_FALSE 102					    90 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      9 92 LOAD_FAST 4 ( c )					    9 92 LOAD_FAST 4 ( c )					  
							      94 LOAD_CONST 3 ( 1 )					    94 LOAD_CONST 2 ( 1 )					  
							      96 INPLACE_ADD						    96 INPLACE_ADD						  
							      98 STORE_FAST 4 ( c )					    98 STORE_FAST 4 ( c )					  
							      100 JUMP_ABSOLUTE 22					    100 JUMP_ABSOLUTE 24					  
							      								    102 POP_BLOCK						  
							      10 >> 102 LOAD_FAST 0 ( p )				    								  
							      104 LOAD_FAST 6 ( i )					    10 >> 104 LOAD_FAST 0 ( p )					  
							      106 BINARY_SUBSCR						    106 LOAD_FAST 7 ( i )					  
							      108 LOAD_CONST 3 ( 1 )					    108 BINARY_SUBSCR						  
							      110 BINARY_SUBSCR						    110 LOAD_CONST 2 ( 1 )					  
							      112 LOAD_CONST 2 ( 0 )					    112 BINARY_SUBSCR						  
							      114 COMPARE_OP 1 ( <= )					    114 LOAD_CONST 1 ( 0 )					  
							      116 POP_JUMP_IF_FALSE 22					    116 COMPARE_OP 1 ( <= )					  
							      								    118 POP_JUMP_IF_FALSE 24					  
							      11 118 LOAD_FAST 5 ( d )					    								  
							      120 LOAD_CONST 3 ( 1 )					    11 120 LOAD_FAST 6 ( d )					  
							      122 INPLACE_ADD						    122 LOAD_CONST 2 ( 1 )					  
							      124 STORE_FAST 5 ( d )					    124 INPLACE_ADD						  
							      126 JUMP_ABSOLUTE 22					    126 STORE_FAST 6 ( d )					  
							      >> 128 POP_BLOCK						    128 JUMP_ABSOLUTE 24					  
							      								    								  
							      12 >> 130 LOAD_GLOBAL 1 ( min )				    12 >> 130 LOAD_GLOBAL 1 ( min )				  
							      132 LOAD_FAST 2 ( a )					    132 LOAD_FAST 2 ( a )					  
							      134 LOAD_FAST 3 ( b )					    134 LOAD_FAST 3 ( b )					  
							      136 LOAD_FAST 4 ( c )					    136 LOAD_FAST 4 ( c )					  
							      138 LOAD_FAST 5 ( d )					    138 LOAD_FAST 5 ( d )					  
							      140 BUILD_LIST 4						    140 BUILD_LIST 4						  
							      142 CALL_FUNCTION 1					    142 CALL_FUNCTION 1						  
							      144 RETURN_VALUE NEW_LINE					    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
def countNum ( arr , n ) :				      Disassembly of <code object countNum at 0x7f33e26494b0, file  Disassembly of <code object countNum at 0x7f2b0163dc90, file  error : /bin/bash: line 1:  4797 Segmentation faul
    s = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9	      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( n ) :				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 2 ( s )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	s [ arr [ i ] ] = 1				      								    								  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/ELEMEN
	if ( arr [ i ] < minm ) :			      3 6 LOAD_CONST 1 ( ( 0 , - 1000000000 , 1000000000 ) )	    3 6 LOAD_CONST 1 ( ( 0 , - 10 , - 11 , 10 ) )		  TS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE
	    minm = arr [ i ]				      8 UNPACK_SEQUENCE 3					    8 UNPACK_SEQUENCE 3						  _PRESENT_IN_ARRAY_1.dis
	if ( arr [ i ] > maxm ) :			      10 STORE_FAST 3 ( count )					    10 STORE_FAST 3 ( count )					  
	    maxm = arr [ i ]				      12 STORE_FAST 4 ( maxm )					    12 STORE_FAST 4 ( maxm )					  
    for i in range ( minm , maxm + 1 ) :		      14 STORE_FAST 5 ( minm )					    14 STORE_FAST 5 ( minm )					  
	if i not in s.keys ( ) :			      								    16 STORE_FAST 6 ( minm )					  
	    count += 1					      4 16 SETUP_LOOP 68 ( to 86 )				    								  
    return count					      18 LOAD_GLOBAL 1 ( range )				    4 18 SETUP_LOOP 56 ( to 78 )				  
							      20 LOAD_FAST 1 ( n )					    20 LOAD_GLOBAL 1 ( range )					  
							      22 CALL_FUNCTION 1					    22 LOAD_FAST 1 ( n )					  
							      24 GET_ITER						    24 CALL_FUNCTION 1						  
							      >> 26 FOR_ITER 56 ( to 84 )				    26 GET_ITER							  
							      28 STORE_FAST 6 ( i )					    >> 28 FOR_ITER 44 ( to 76 )					  
							      								    30 STORE_FAST 7 ( i )					  
							      5 30 LOAD_CONST 2 ( 1 )					    								  
							      32 LOAD_FAST 2 ( s )					    5 32 LOAD_CONST 2 ( 1 )					  
							      34 LOAD_FAST 0 ( arr )					    34 LOAD_FAST 2 ( s )					  
							      36 LOAD_FAST 6 ( i )					    36 LOAD_FAST 0 ( arr )					  
							      38 BINARY_SUBSCR						    38 LOAD_FAST 7 ( i )					  
							      40 STORE_SUBSCR						    40 BINARY_SUBSCR						  
							      								    42 STORE_SUBSCR						  
							      6 42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 6 ( i )					    6 44 LOAD_FAST 0 ( arr )					  
							      46 BINARY_SUBSCR						    46 LOAD_FAST 7 ( i )					  
							      48 LOAD_FAST 5 ( minm )					    48 BINARY_SUBSCR						  
							      50 COMPARE_OP 0 ( < )					    50 LOAD_FAST 6 ( minm )					  
							      52 POP_JUMP_IF_FALSE 62					    52 COMPARE_OP 0 ( < )					  
							      								    54 POP_JUMP_IF_FALSE 68					  
							      7 54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 6 ( i )					    7 56 LOAD_FAST 0 ( arr )					  
							      58 BINARY_SUBSCR						    58 LOAD_FAST 7 ( i )					  
							      60 STORE_FAST 5 ( minm )					    60 BINARY_SUBSCR						  
							      								    62 STORE_FAST 6 ( minm )					  
							      8 >> 62 LOAD_FAST 0 ( arr )				    64 JUMP_ABSOLUTE 28						  
							      64 LOAD_FAST 6 ( i )					    66 POP_BLOCK						  
							      66 BINARY_SUBSCR						    								  
							      68 LOAD_FAST 4 ( maxm )					    8 >> 68 LOAD_FAST 0 ( arr )					  
							      70 COMPARE_OP 4 ( > )					    70 LOAD_FAST 7 ( i )					  
							      72 POP_JUMP_IF_FALSE 26					    72 BINARY_SUBSCR						  
							      								    74 LOAD_FAST 4 ( maxm )					  
							      9 74 LOAD_FAST 0 ( arr )					    76 COMPARE_OP 4 ( > )					  
							      76 LOAD_FAST 6 ( i )					    78 POP_JUMP_IF_FALSE 88					  
							      78 BINARY_SUBSCR						    								  
							      80 STORE_FAST 4 ( maxm )					    9 80 LOAD_FAST 0 ( arr )					  
							      82 JUMP_ABSOLUTE 26					    82 LOAD_FAST 7 ( i )					  
							      >> 84 POP_BLOCK						    84 BINARY_SUBSCR						  
							      								    86 STORE_FAST 4 ( maxm )					  
							      10 >> 86 SETUP_LOOP 42 ( to 130 )				    								  
							      88 LOAD_GLOBAL 1 ( range )				    10 >> 88 SETUP_LOOP 32 ( to 124 )				  
							      90 LOAD_FAST 5 ( minm )					    90 LOAD_GLOBAL 1 ( range )					  
							      92 LOAD_FAST 4 ( maxm )					    92 LOAD_FAST 5 ( minm )					  
							      94 LOAD_CONST 2 ( 1 )					    94 LOAD_FAST 4 ( maxm )					  
							      96 BINARY_ADD						    96 LOAD_CONST 2 ( 1 )					  
							      98 CALL_FUNCTION 2					    98 BINARY_ADD						  
							      100 GET_ITER						    100 CALL_FUNCTION 2						  
							      >> 102 FOR_ITER 24 ( to 128 )				    102 GET_ITER						  
							      104 STORE_FAST 6 ( i )					    >> 104 FOR_ITER 20 ( to 122 )				  
							      								    106 STORE_FAST 7 ( i )					  
							      11 106 LOAD_FAST 6 ( i )					    								  
							      108 LOAD_FAST 2 ( s )					    11 108 LOAD_FAST 7 ( i )					  
							      110 LOAD_METHOD 2 ( keys )				    110 LOAD_FAST 2 ( s )					  
							      112 CALL_METHOD 0						    112 LOAD_METHOD 2 ( keys )					  
							      114 COMPARE_OP 7 ( not in )				    114 CALL_METHOD 0						  
							      116 POP_JUMP_IF_FALSE 102					    116 COMPARE_OP 7 ( not in )					  
							      								    118 POP_JUMP_IF_FALSE 104					  
							      12 118 LOAD_FAST 3 ( count )				    								  
							      120 LOAD_CONST 2 ( 1 )					    12 120 LOAD_FAST 3 ( count )				  
							      122 INPLACE_ADD						    122 LOAD_CONST 2 ( 1 )					  
							      124 STORE_FAST 3 ( count )				    124 INPLACE_ADD						  
							      126 JUMP_ABSOLUTE 102					    126 STORE_FAST 3 ( count )					  
							      >> 128 POP_BLOCK						    128 JUMP_ABSOLUTE 104					  
							      								    >> 130 POP_BLOCK						  
							      13 >> 130 LOAD_FAST 3 ( count )				    								  
							      132 RETURN_VALUE NEW_LINE					    13 >> 132 LOAD_FAST 3 ( count )				  
							      								    134 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS	      GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		    GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		  GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS
--							      --							    --								  --
def findMin ( V ) :					      Disassembly of <code object findMin at 0x7f33e2644f60, file " Disassembly of <code object findMin at 0x7f2b0163dc90, file " script_not_found : None
    deno = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ]    2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    n = len ( deno )					      2 LOAD_CONST 2 ( 2 )					    2 LOAD_CONST 2 ( 2 )					  
    ans = [ ]						      4 LOAD_CONST 3 ( 5 )					    4 LOAD_CONST 3 ( 5 )					  
    i = n - 1						      6 LOAD_CONST 4 ( 10 )					    6 LOAD_CONST 4 ( 10 )					  
    while ( i >= 0 ) :					      8 LOAD_CONST 5 ( 20 )					    8 LOAD_CONST 5 ( 20 )					  
	while ( V >= deno [ i ] ) :			      10 LOAD_CONST 6 ( 50 )					    10 LOAD_CONST 6 ( 50 )					  
	    V -= deno [ i ]				      12 LOAD_CONST 7 ( 100 )					    12 LOAD_CONST 7 ( 100 )					  
	    ans.append ( deno [ i ] )			      14 LOAD_CONST 8 ( 500 )					    14 LOAD_CONST 8 ( 500 )					  
	i -= 1						      16 LOAD_CONST 9 ( 1000 )					    16 LOAD_CONST 9 ( 1000 )					  
    for i in range ( len ( ans ) ) :			      18 BUILD_LIST 9						    18 BUILD_LIST 10						  
	print ( ans [ i ] , end = " " )			      20 STORE_FAST 1 ( deno )					    20 STORE_FAST 1 ( deno )					  
							      								    								  
							      3 22 LOAD_GLOBAL 0 ( len )				    3 22 LOAD_GLOBAL 0 ( len )					  
							      24 LOAD_FAST 1 ( deno )					    24 LOAD_FAST 1 ( deno )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 STORE_FAST 2 ( n )					    28 STORE_FAST 2 ( n )					  
							      								    								  
							      4 30 BUILD_LIST 0						    4 30 BUILD_LIST 0						  
							      32 STORE_FAST 3 ( ans )					    32 STORE_FAST 3 ( ans )					  
							      								    								  
							      5 34 LOAD_FAST 2 ( n )					    5 34 LOAD_FAST 2 ( n )					  
							      36 LOAD_CONST 1 ( 1 )					    36 LOAD_CONST 1 ( 1 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 STORE_FAST 4 ( i )					    40 STORE_FAST 4 ( i )					  
							      								    								  
							      6 42 SETUP_LOOP 64 ( to 108 )				    6 42 SETUP_LOOP 52 ( to 96 )				  
							      >> 44 LOAD_FAST 4 ( i )					    >> 44 LOAD_FAST 4 ( i )					  
							      46 LOAD_CONST 10 ( 0 )					    46 LOAD_CONST 10 ( 0 )					  
							      48 COMPARE_OP 5 ( >= )					    48 COMPARE_OP 5 ( >= )					  
							      50 POP_JUMP_IF_FALSE 106					    50 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      7 52 SETUP_LOOP 42 ( to 96 )				    7 52 SETUP_LOOP 38 ( to 92 )				  
							      >> 54 LOAD_FAST 0 ( V )					    >> 54 LOAD_FAST 0 ( V )					  
							      56 LOAD_FAST 1 ( deno )					    56 LOAD_FAST 1 ( deno )					  
							      58 LOAD_FAST 4 ( i )					    58 LOAD_FAST 4 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 COMPARE_OP 5 ( >= )					    62 COMPARE_OP 5 ( >= )					  
							      64 POP_JUMP_IF_FALSE 94					    64 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      8 66 LOAD_FAST 0 ( V )					    8 66 LOAD_FAST 0 ( V )					  
							      68 LOAD_FAST 1 ( deno )					    68 LOAD_FAST 1 ( deno )					  
							      70 LOAD_FAST 4 ( i )					    70 LOAD_FAST 4 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 INPLACE_SUBTRACT					    74 INPLACE_SUBTRACT						  
							      76 STORE_FAST 0 ( V )					    76 STORE_FAST 0 ( V )					  
							      								    								  
							      9 78 LOAD_FAST 3 ( ans )					    9 78 LOAD_FAST 3 ( ans )					  
							      80 LOAD_METHOD 1 ( append )				    80 LOAD_METHOD 1 ( append )					  
							      82 LOAD_FAST 1 ( deno )					    82 LOAD_FAST 1 ( deno )					  
							      84 LOAD_FAST 4 ( i )					    84 LOAD_FAST 4 ( i )					  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 CALL_METHOD 1						    88 CALL_METHOD 1						  
							      90 POP_TOP						    >> 90 POP_TOP						  
							      92 JUMP_ABSOLUTE 54					    92 JUMP_ABSOLUTE 44						  
							      >> 94 POP_BLOCK						    >> 94 POP_BLOCK						  
							      								    								  
							      10 >> 96 LOAD_FAST 4 ( i )				    10 >> 96 LOAD_FAST 4 ( i )					  
							      98 LOAD_CONST 1 ( 1 )					    98 LOAD_CONST 1 ( 1 )					  
							      100 INPLACE_SUBTRACT					    100 INPLACE_SUBTRACT					  
							      102 STORE_FAST 4 ( i )					    102 STORE_FAST 4 ( i )					  
							      104 JUMP_ABSOLUTE 44					    104 JUMP_ABSOLUTE 44					  
							      >> 106 POP_BLOCK						    >> 106 POP_BLOCK						  
							      								    								  
							      11 >> 108 SETUP_LOOP 36 ( to 146 )			    11 >> 108 SETUP_LOOP 46 ( to 162 )				  
							      110 LOAD_GLOBAL 2 ( range )				    110 LOAD_GLOBAL 2 ( range )					  
							      112 LOAD_GLOBAL 0 ( len )					    112 LOAD_GLOBAL 0 ( len )					  
							      114 LOAD_FAST 3 ( ans )					    114 LOAD_FAST 3 ( ans )					  
							      116 CALL_FUNCTION 1					    116 CALL_FUNCTION 1						  
							      118 CALL_FUNCTION 1					    118 CALL_FUNCTION 1						  
							      120 GET_ITER						    120 GET_ITER						  
							      >> 122 FOR_ITER 20 ( to 144 )				    >> 122 FOR_ITER 28 ( to 160 )				  
							      124 STORE_FAST 4 ( i )					    124 STORE_FAST 4 ( i )					  
							      								    								  
							      12 126 LOAD_GLOBAL 3 ( print )				    12 126 LOAD_GLOBAL 3 ( print )				  
							      128 LOAD_FAST 3 ( ans )					    128 LOAD_FAST 3 ( ans )					  
							      130 LOAD_FAST 4 ( i )					    130 LOAD_FAST 4 ( i )					  
							      132 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      134 LOAD_CONST 11 ( ' ' )					    134 LOAD_CONST 11 ( ' ' )					  
							      136 LOAD_CONST 12 ( ( 'end' , ) )				    136 LOAD_CONST 12 ( ( 'end' , ) )				  
							      138 CALL_FUNCTION_KW 2					    138 CALL_FUNCTION_KW 2					  
							      140 POP_TOP						    140 POP_TOP							  
							      142 JUMP_ABSOLUTE 122					    142 JUMP_ABSOLUTE 122					  
							      >> 144 POP_BLOCK						    >> 144 POP_BLOCK						  
							      >> 146 LOAD_CONST 0 ( None )				    >> 146 LOAD_CONST 0 ( None )				  
							      148 RETURN_VALUE NEW_LINE					    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECODE_MEDIAN_STRING_ORIGINAL_STRING			      DECODE_MEDIAN_STRING_ORIGINAL_STRING			    DECODE_MEDIAN_STRING_ORIGINAL_STRING			  DECODE_MEDIAN_STRING_ORIGINAL_STRING
--							      --							    --								  --
def decodeMedianString ( s ) :				      Disassembly of <code object decodeMedianString at 0x7f33e2649 Disassembly of <code object decodeMedianString at 0x7f2b01639 error : Traceback (most recent call last):   File
    l = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    s1 = ""						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  (item)   File "main.py", line 44, in <module>	  Fi
    if ( l % 2 == 0 ) :					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in decodeMedianString TypeErro
	isEven = True					      6 STORE_FAST 1 ( l )					    6 STORE_FAST 1 ( l )					  r: unsupported operand type(s) for -: 'int' and 'r
    else :						      								    								  ange_iterator'
	isEven = False					      3 8 LOAD_CONST 1 ( '' )					    3 8 LOAD_CONST 1 ( '' )					  
    for i in range ( 0 , l , 2 ) :			      10 STORE_FAST 2 ( s1 )					    10 STORE_FAST 2 ( s1 )					  
	if ( isEven ) :					      								    								  
	    s1 = s [ i ] + s1				      4 12 LOAD_FAST 1 ( l )					    4 12 LOAD_FAST 1 ( l )					  
	    s1 += s [ i + 1 ]				      14 LOAD_CONST 2 ( 2 )					    14 LOAD_CONST 2 ( 2 )					  
	else :						      16 BINARY_MODULO						    16 BINARY_MODULO						  
	    if ( l - i > 1 ) :				      18 LOAD_CONST 3 ( 0 )					    18 LOAD_CONST 3 ( 0 )					  
		s1 += s [ i ]				      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
		s1 = s [ i + 1 ] + s1			      22 POP_JUMP_IF_FALSE 30					    22 POP_JUMP_IF_FALSE 28					  
	    else :					      								    								  
		s1 += s [ i ]				      5 24 LOAD_CONST 4 ( True )				    5 24 LOAD_CONST 4 ( True )					  
    return s1						      26 STORE_FAST 3 ( isEven )				    26 STORE_FAST 3 ( isEven )					  
							      28 JUMP_FORWARD 4 ( to 34 )				    								  
							      								    7 >> 28 LOAD_CONST 5 ( False )				  
							      7 >> 30 LOAD_CONST 5 ( False )				    30 STORE_FAST 3 ( isEven )					  
							      32 STORE_FAST 3 ( isEven )				    								  
							      								    8 >> 32 SETUP_LOOP 96 ( to 138 )				  
							      8 >> 34 SETUP_LOOP 108 ( to 144 )				    34 LOAD_GLOBAL 1 ( range )					  
							      36 LOAD_GLOBAL 1 ( range )				    36 LOAD_CONST 3 ( 0 )					  
							      38 LOAD_CONST 3 ( 0 )					    38 LOAD_FAST 1 ( l )					  
							      40 LOAD_FAST 1 ( l )					    40 LOAD_CONST 2 ( 2 )					  
							      42 LOAD_CONST 2 ( 2 )					    42 CALL_FUNCTION 3						  
							      44 CALL_FUNCTION 3					    44 GET_ITER							  
							      46 GET_ITER						    >> 46 FOR_ITER 80 ( to 136 )				  
							      >> 48 FOR_ITER 92 ( to 142 )				    48 STORE_FAST 4 ( i )					  
							      50 STORE_FAST 4 ( i )					    								  
							      								    9 50 LOAD_FAST 3 ( isEven )					  
							      9 52 LOAD_FAST 3 ( isEven )				    52 POP_JUMP_IF_FALSE 88					  
							      54 POP_JUMP_IF_FALSE 86					    								  
							      								    10 54 LOAD_FAST 0 ( s )					  
							      10 56 LOAD_FAST 0 ( s )					    56 LOAD_FAST 4 ( i )					  
							      58 LOAD_FAST 4 ( i )					    58 BINARY_SUBSCR						  
							      60 BINARY_SUBSCR						    60 LOAD_FAST 2 ( s1 )					  
							      62 LOAD_FAST 2 ( s1 )					    62 BINARY_ADD						  
							      64 BINARY_ADD						    64 STORE_FAST 2 ( s1 )					  
							      66 STORE_FAST 2 ( s1 )					    								  
							      								    11 66 LOAD_FAST 2 ( s1 )					  
							      11 68 LOAD_FAST 2 ( s1 )					    68 LOAD_FAST 0 ( s )					  
							      70 LOAD_FAST 0 ( s )					    70 LOAD_FAST 4 ( i )					  
							      72 LOAD_FAST 4 ( i )					    72 LOAD_CONST 6 ( 1 )					  
							      74 LOAD_CONST 6 ( 1 )					    74 BINARY_ADD						  
							      76 BINARY_ADD						    76 BINARY_SUBSCR						  
							      78 BINARY_SUBSCR						    78 INPLACE_ADD						  
							      80 INPLACE_ADD						    80 STORE_FAST 2 ( s1 )					  
							      82 STORE_FAST 2 ( s1 )					    82 JUMP_ABSOLUTE 46						  
							      84 JUMP_ABSOLUTE 48					    								  
							      								    13 >> 84 LOAD_FAST 1 ( l )					  
							      13 >> 86 LOAD_FAST 1 ( l )				    86 LOAD_FAST 4 ( i )					  
							      88 LOAD_FAST 4 ( i )					    88 BINARY_SUBTRACT						  
							      90 BINARY_SUBTRACT					    90 LOAD_CONST 6 ( 1 )					  
							      92 LOAD_CONST 6 ( 1 )					    92 COMPARE_OP 4 ( > )					  
							      94 COMPARE_OP 4 ( > )					    94 POP_JUMP_IF_FALSE 118					  
							      96 POP_JUMP_IF_FALSE 128					    								  
							      								    14 96 LOAD_FAST 2 ( s1 )					  
							      14 98 LOAD_FAST 2 ( s1 )					    98 LOAD_FAST 0 ( s )					  
							      100 LOAD_FAST 0 ( s )					    100 LOAD_FAST 4 ( i )					  
							      102 LOAD_FAST 4 ( i )					    102 BINARY_SUBSCR						  
							      104 BINARY_SUBSCR						    104 INPLACE_ADD						  
							      106 INPLACE_ADD						    106 STORE_FAST 2 ( s1 )					  
							      108 STORE_FAST 2 ( s1 )					    								  
							      								    15 108 LOAD_FAST 0 ( s )					  
							      15 110 LOAD_FAST 0 ( s )					    110 LOAD_FAST 4 ( i )					  
							      112 LOAD_FAST 4 ( i )					    112 LOAD_CONST 6 ( 1 )					  
							      114 LOAD_CONST 6 ( 1 )					    114 BINARY_ADD						  
							      116 BINARY_ADD						    116 BINARY_SUBSCR						  
							      118 BINARY_SUBSCR						    118 LOAD_FAST 2 ( s1 )					  
							      120 LOAD_FAST 2 ( s1 )					    120 BINARY_ADD						  
							      122 BINARY_ADD						    122 STORE_FAST 2 ( s1 )					  
							      124 STORE_FAST 2 ( s1 )					    124 JUMP_ABSOLUTE 46					  
							      126 JUMP_ABSOLUTE 48					    								  
							      								    17 >> 126 LOAD_FAST 2 ( s1 )				  
							      17 >> 128 LOAD_FAST 2 ( s1 )				    128 LOAD_FAST 0 ( s )					  
							      130 LOAD_FAST 0 ( s )					    130 LOAD_FAST 4 ( i )					  
							      132 LOAD_FAST 4 ( i )					    132 BINARY_SUBSCR						  
							      134 BINARY_SUBSCR						    134 INPLACE_ADD						  
							      136 INPLACE_ADD						    136 STORE_FAST 2 ( s1 )					  
							      138 STORE_FAST 2 ( s1 )					    138 JUMP_ABSOLUTE 46					  
							      140 JUMP_ABSOLUTE 48					    >> 140 POP_BLOCK						  
							      >> 142 POP_BLOCK						    								  
							      								    18 >> 142 LOAD_FAST 2 ( s1 )				  
							      18 >> 144 LOAD_FAST 2 ( s1 )				    144 RETURN_VALUE NEW_LINE					  
							      146 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			      MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			    MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			  MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE
--							      --							    --								  --
def merge ( ar1 , ar2 , m , n ) :			      Disassembly of <code object merge at 0x7f33e2653ed0, file "<d Disassembly of <code object merge at 0x7f2b0163dc90, file "<d script_not_found : None
    for i in range ( n - 1 , - 1 , - 1 ) :		      2 0 SETUP_LOOP 146 ( to 148 )				    2 0 SETUP_LOOP 142 ( to 144 )				  
	last = ar1 [ m - 1 ]				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	j = m - 2					      4 LOAD_FAST 3 ( n )					    4 LOAD_FAST 3 ( n )						  
	while ( j >= 0 and ar1 [ j ] > ar2 [ i ] ) :	      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    ar1 [ j + 1 ] = ar1 [ j ]			      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
	    j -= 1					      10 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 2 ( - 1 )					  
	if ( j != m - 2 or last > ar2 [ i ] ) :		      12 LOAD_CONST 2 ( - 1 )					    12 LOAD_CONST 2 ( - 1 )					  
	    ar1 [ j + 1 ] = ar2 [ i ]			      14 CALL_FUNCTION 3					    14 CALL_FUNCTION 3						  
	    ar2 [ i ] = last				      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 126 ( to 146 )				    >> 18 FOR_ITER 118 ( to 142 )				  
							      20 STORE_FAST 4 ( i )					    20 STORE_FAST 4 ( i )					  
							      								    								  
							      3 22 LOAD_FAST 0 ( ar1 )					    3 22 LOAD_FAST 0 ( ar1 )					  
							      24 LOAD_FAST 2 ( m )					    24 LOAD_FAST 2 ( m )					  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 STORE_FAST 5 ( last )					    32 STORE_FAST 5 ( last )					  
							      								    								  
							      4 34 LOAD_FAST 2 ( m )					    4 34 LOAD_FAST 2 ( m )					  
							      36 LOAD_CONST 3 ( 2 )					    36 LOAD_CONST 3 ( 2 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 STORE_FAST 6 ( j )					    40 STORE_FAST 6 ( j )					  
							      								    								  
							      5 42 SETUP_LOOP 52 ( to 96 )				    5 42 SETUP_LOOP 44 ( to 92 )				  
							      >> 44 LOAD_FAST 6 ( j )					    >> 44 LOAD_FAST 6 ( j )					  
							      46 LOAD_CONST 4 ( 0 )					    46 LOAD_CONST 4 ( 0 )					  
							      48 COMPARE_OP 5 ( >= )					    48 COMPARE_OP 5 ( >= )					  
							      50 POP_JUMP_IF_FALSE 94					    50 POP_JUMP_IF_FALSE 90					  
							      52 LOAD_FAST 0 ( ar1 )					    52 LOAD_FAST 0 ( ar1 )					  
							      54 LOAD_FAST 6 ( j )					    54 LOAD_FAST 6 ( j )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 1 ( ar2 )					    58 LOAD_FAST 0 ( ar2 )					  
							      60 LOAD_FAST 4 ( i )					    60 LOAD_FAST 4 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 COMPARE_OP 4 ( > )					    64 COMPARE_OP 4 ( > )					  
							      66 POP_JUMP_IF_FALSE 94					    66 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      6 68 LOAD_FAST 0 ( ar1 )					    6 68 LOAD_FAST 0 ( ar1 )					  
							      70 LOAD_FAST 6 ( j )					    70 LOAD_FAST 6 ( j )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_FAST 0 ( ar1 )					    74 LOAD_FAST 0 ( ar1 )					  
							      76 LOAD_FAST 6 ( j )					    76 LOAD_FAST 6 ( j )					  
							      78 LOAD_CONST 1 ( 1 )					    78 LOAD_CONST 1 ( 1 )					  
							      80 BINARY_ADD						    80 BINARY_ADD						  
							      82 STORE_SUBSCR						    82 STORE_SUBSCR						  
							      								    								  
							      7 84 LOAD_FAST 6 ( j )					    7 84 LOAD_FAST 6 ( j )					  
							      86 LOAD_CONST 1 ( 1 )					    86 LOAD_CONST 1 ( 1 )					  
							      88 INPLACE_SUBTRACT					    88 INPLACE_SUBTRACT						  
							      90 STORE_FAST 6 ( j )					    >> 90 STORE_FAST 6 ( j )					  
							      92 JUMP_ABSOLUTE 44					    								  
							      >> 94 POP_BLOCK						    8 >> 92 LOAD_FAST 6 ( j )					  
							      								    94 LOAD_FAST 2 ( m )					  
							      8 >> 96 LOAD_FAST 6 ( j )					    96 LOAD_CONST 3 ( 2 )					  
							      98 LOAD_FAST 2 ( m )					    98 BINARY_SUBTRACT						  
							      100 LOAD_CONST 3 ( 2 )					    100 COMPARE_OP 3 ( != )					  
							      102 BINARY_SUBTRACT					    102 POP_JUMP_IF_TRUE 18					  
							      104 COMPARE_OP 3 ( != )					    104 LOAD_FAST 5 ( last )					  
							      106 POP_JUMP_IF_TRUE 120					    106 LOAD_FAST 0 ( ar2 )					  
							      108 LOAD_FAST 5 ( last )					    108 LOAD_FAST 4 ( i )					  
							      110 LOAD_FAST 1 ( ar2 )					    110 BINARY_SUBSCR						  
							      112 LOAD_FAST 4 ( i )					    112 COMPARE_OP 4 ( > )					  
							      114 BINARY_SUBSCR						    114 POP_JUMP_IF_FALSE 44					  
							      116 COMPARE_OP 4 ( > )					    								  
							      118 POP_JUMP_IF_FALSE 18					    9 116 LOAD_FAST 0 ( ar2 )					  
							      								    118 LOAD_FAST 4 ( i )					  
							      9 >> 120 LOAD_FAST 1 ( ar2 )				    120 BINARY_SUBSCR						  
							      122 LOAD_FAST 4 ( i )					    122 LOAD_FAST 0 ( ar1 )					  
							      124 BINARY_SUBSCR						    124 LOAD_FAST 6 ( j )					  
							      126 LOAD_FAST 0 ( ar1 )					    126 LOAD_CONST 1 ( 1 )					  
							      128 LOAD_FAST 6 ( j )					    128 BINARY_ADD						  
							      130 LOAD_CONST 1 ( 1 )					    130 STORE_SUBSCR						  
							      132 BINARY_ADD						    								  
							      134 STORE_SUBSCR						    10 132 LOAD_FAST 5 ( last )					  
							      								    134 LOAD_FAST 0 ( ar2 )					  
							      10 136 LOAD_FAST 5 ( last )				    136 LOAD_FAST 4 ( i )					  
							      138 LOAD_FAST 1 ( ar2 )					    138 STORE_SUBSCR						  
							      140 LOAD_FAST 4 ( i )					    140 JUMP_ABSOLUTE 44					  
							      142 STORE_SUBSCR						    >> 142 POP_BLOCK						  
							      144 JUMP_ABSOLUTE 18					    >> 144 JUMP_ABSOLUTE 18					  
							      >> 146 POP_BLOCK						    >> 146 POP_BLOCK						  
							      >> 148 LOAD_CONST 0 ( None )				    >> 148 LOAD_CONST 0 ( None )				  
							      150 RETURN_VALUE NEW_LINE					    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY_1				      FLOOR_IN_A_SORTED_ARRAY_1					    FLOOR_IN_A_SORTED_ARRAY_1					  FLOOR_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
def floorSearch ( arr , low , high , x ) :		      Disassembly of <code object floorSearch at 0x7f33e2644f60, fi Disassembly of <code object floorSearch at 0x7f2b0163dc90, fi error : /bin/bash: line 1:  4816 Segmentation faul
    if ( low > high ) :					      2 0 LOAD_FAST 1 ( low )					    2 0 LOAD_FAST 1 ( low )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return - 1					      2 LOAD_FAST 2 ( high )					    2 LOAD_FAST 2 ( high )					  ataset/bin/python XLM/dis_script.py --script_path
    if ( x >= arr [ high ] ) :				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	return high					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FLOOR_
    mid = int ( ( low + high ) / 2 )			      								    								  IN_A_SORTED_ARRAY_1.dis
    if ( arr [ mid ] == x ) :				      3 8 LOAD_CONST 1 ( - 1 )					    3 8 LOAD_CONST 1 ( - 1 )					  
	return mid					      10 RETURN_VALUE						    10 RETURN_VALUE						  
    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 								    								  
	return mid - 1					      4 >> 12 LOAD_FAST 3 ( x )					    4 >> 12 LOAD_FAST 3 ( x )					  
    if ( x < arr [ mid ] ) :				      14 LOAD_FAST 0 ( arr )					    14 LOAD_FAST 0 ( arr )					  
	return floorSearch ( arr , low , mid - 1 , x )	      16 LOAD_FAST 2 ( high )					    16 LOAD_FAST 2 ( high )					  
    return floorSearch ( arr , mid + 1 , high , x )	      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 COMPARE_OP 5 ( >= )					    20 COMPARE_OP 5 ( >= )					  
							      22 POP_JUMP_IF_FALSE 28					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 LOAD_FAST 2 ( high )					    5 24 LOAD_FAST 2 ( high )					  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      6 >> 28 LOAD_GLOBAL 0 ( int )				    6 >> 28 LOAD_GLOBAL 0 ( int )				  
							      30 LOAD_FAST 1 ( low )					    30 LOAD_FAST 1 ( low )					  
							      32 LOAD_FAST 2 ( high )					    32 LOAD_FAST 2 ( high )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 LOAD_CONST 2 ( 2 )					    36 LOAD_CONST 2 ( 2 )					  
							      38 BINARY_TRUE_DIVIDE					    38 BINARY_TRUE_DIVIDE					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 STORE_FAST 4 ( mid )					    42 STORE_FAST 4 ( mid )					  
							      								    								  
							      7 44 LOAD_FAST 0 ( arr )					    7 44 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 4 ( mid )					    46 LOAD_FAST 4 ( mid )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 3 ( x )					    50 LOAD_FAST 3 ( x )					  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 60					    54 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      8 56 LOAD_FAST 4 ( mid )					    8 56 LOAD_FAST 4 ( mid )					  
							      58 RETURN_VALUE						    58 RETURN_VALUE						  
							      								    								  
							      9 >> 60 LOAD_FAST 4 ( mid )				    9 >> 60 LOAD_FAST 4 ( mid )					  
							      62 LOAD_CONST 3 ( 0 )					    62 LOAD_CONST 3 ( 0 )					  
							      64 COMPARE_OP 4 ( > )					    64 COMPARE_OP 4 ( > )					  
							      66 POP_JUMP_IF_FALSE 104					    66 POP_JUMP_IF_FALSE 98					  
							      68 LOAD_FAST 0 ( arr )					    68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 4 ( mid )					    70 LOAD_FAST 4 ( mid )					  
							      72 LOAD_CONST 4 ( 1 )					    72 LOAD_CONST 4 ( 1 )					  
							      74 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 LOAD_FAST 3 ( x )					    78 LOAD_FAST 3 ( x )					  
							      80 COMPARE_OP 1 ( <= )					    80 COMPARE_OP 1 ( <= )					  
							      82 POP_JUMP_IF_FALSE 104					    82 POP_JUMP_IF_FALSE 98					  
							      84 LOAD_FAST 3 ( x )					    84 LOAD_FAST 3 ( x )					  
							      86 LOAD_FAST 0 ( arr )					    86 LOAD_FAST 0 ( arr )					  
							      88 LOAD_FAST 4 ( mid )					    88 LOAD_FAST 4 ( mid )					  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 COMPARE_OP 0 ( < )					    92 COMPARE_OP 0 ( < )					  
							      94 POP_JUMP_IF_FALSE 104					    94 POP_JUMP_IF_FALSE 98					  
							      								    96 LOAD_FAST 3 ( x )					  
							      10 96 LOAD_FAST 4 ( mid )					    98 LOAD_FAST 0 ( arr )					  
							      98 LOAD_CONST 4 ( 1 )					    100 LOAD_FAST 4 ( mid )					  
							      100 BINARY_SUBTRACT					    102 BINARY_SUBSCR						  
							      102 RETURN_VALUE						    104 COMPARE_OP 0 ( < )					  
							      								    106 POP_JUMP_IF_FALSE 98					  
							      11 >> 104 LOAD_FAST 3 ( x )				    								  
							      106 LOAD_FAST 0 ( arr )					    10 108 LOAD_FAST 4 ( mid )					  
							      108 LOAD_FAST 4 ( mid )					    110 LOAD_CONST 4 ( 1 )					  
							      110 BINARY_SUBSCR						    112 BINARY_SUBTRACT						  
							      112 COMPARE_OP 0 ( < )					    114 RETURN_VALUE						  
							      114 POP_JUMP_IF_FALSE 134					    								  
							      								    11 >> 116 LOAD_FAST 3 ( x )					  
							      12 116 LOAD_GLOBAL 1 ( floorSearch )			    118 LOAD_FAST 0 ( arr )					  
							      118 LOAD_FAST 0 ( arr )					    120 LOAD_FAST 0 ( arr )					  
							      120 LOAD_FAST 1 ( low )					    122 LOAD_FAST 4 ( mid )					  
							      122 LOAD_FAST 4 ( mid )					    124 BINARY_SUBSCR						  
							      124 LOAD_CONST 4 ( 1 )					    126 COMPARE_OP 0 ( < )					  
							      126 BINARY_SUBTRACT					    128 POP_JUMP_IF_FALSE 140					  
							      128 LOAD_FAST 3 ( x )					    								  
							      130 CALL_FUNCTION 4					    12 130 LOAD_GLOBAL 1 ( floorSearch )			  
							      132 RETURN_VALUE						    132 LOAD_FAST 0 ( arr )					  
							      								    134 LOAD_FAST 1 ( low )					  
							      13 >> 134 LOAD_GLOBAL 1 ( floorSearch )			    136 LOAD_FAST 4 ( mid )					  
							      136 LOAD_FAST 0 ( arr )					    138 LOAD_CONST 4 ( 1 )					  
							      138 LOAD_FAST 4 ( mid )					    140 BINARY_SUBTRACT						  
							      140 LOAD_CONST 4 ( 1 )					    142 LOAD_FAST 3 ( x )					  
							      142 BINARY_ADD						    144 CALL_FUNCTION 4						  
							      144 LOAD_FAST 2 ( high )					    146 RETURN_VALUE						  
							      146 LOAD_FAST 3 ( x )					    								  
							      148 CALL_FUNCTION 4					    13 >> 148 LOAD_GLOBAL 1 ( floorSearch )			  
							      150 RETURN_VALUE NEW_LINE					    150 LOAD_FAST 0 ( arr )					  
							      								    152 LOAD_FAST 4 ( mid )					  
							      								    154 LOAD_CONST 4 ( 1 )					  
							      								    156 BINARY_ADD						  
							      								    158 LOAD_FAST 2 ( high )					  
							      								    160 LOAD_FAST 3 ( x )					  
							      								    162 CALL_FUNCTION 3						  
							      								    164 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL			  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL
--							      --							    --								  --
def substringConversions ( s , k , b ) :		      Disassembly of <code object substringConversions at 0x7f33e26 Disassembly of <code object substringConversions at 0x7f2b016 script_not_found : None
    l = len ( s ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for i in range ( l ) :				      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  
	if ( ( i + k ) < l + 1 ) :			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    sub = s [ i : i + k ] ;			      6 STORE_FAST 3 ( l )					    6 STORE_FAST 3 ( l )					  
	    sum , counter = 0 , 0 ;			      								    								  
	    for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :  3 8 SETUP_LOOP 140 ( to 150 )				    3 8 SETUP_LOOP 138 ( to 148 )				  
		sum = sum + ( ( ord ( sub [ i ] ) - ord ( '0' 10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
		counter += 1 ;				      12 LOAD_FAST 3 ( l )					    12 LOAD_FAST 3 ( l )					  
	    print ( sum , end = " " ) ;			      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 128 ( to 148 )				    >> 18 FOR_ITER 126 ( to 146 )				  
							      20 STORE_FAST 4 ( i )					    20 STORE_FAST 4 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 4 ( i )					    4 22 LOAD_FAST 4 ( i )					  
							      24 LOAD_FAST 1 ( k )					    24 LOAD_FAST 1 ( k )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 LOAD_FAST 3 ( l )					    28 LOAD_FAST 3 ( l )					  
							      30 LOAD_CONST 1 ( 1 )					    30 LOAD_CONST 1 ( 1 )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 COMPARE_OP 0 ( < )					    34 COMPARE_OP 0 ( < )					  
							      36 POP_JUMP_IF_FALSE 18					    36 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      5 38 LOAD_FAST 0 ( s )					    5 38 LOAD_FAST 0 ( s )					  
							      40 LOAD_FAST 4 ( i )					    40 LOAD_FAST 4 ( i )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 LOAD_FAST 1 ( k )					    44 LOAD_FAST 1 ( k )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 BUILD_SLICE 2						    48 BUILD_SLICE 2						  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 STORE_FAST 5 ( sub )					    52 STORE_FAST 5 ( sub )					  
							      								    								  
							      6 54 LOAD_CONST 2 ( ( 0 , 0 ) )				    6 54 LOAD_CONST 2 ( ( 0 , 0 ) )				  
							      56 UNPACK_SEQUENCE 2					    56 UNPACK_SEQUENCE 2					  
							      58 STORE_FAST 6 ( sum )					    58 STORE_FAST 6 ( sum )					  
							      60 STORE_FAST 7 ( counter )				    60 STORE_FAST 7 ( counter )					  
							      								    								  
							      7 62 SETUP_LOOP 70 ( to 134 )				    7 62 SETUP_LOOP 88 ( to 144 )				  
							      64 LOAD_GLOBAL 1 ( range )				    64 LOAD_GLOBAL 1 ( range )					  
							      66 LOAD_GLOBAL 0 ( len )					    66 LOAD_GLOBAL 0 ( len )					  
							      68 LOAD_FAST 5 ( sub )					    68 LOAD_FAST 5 ( sub )					  
							      70 CALL_FUNCTION 1					    70 CALL_FUNCTION 1						  
							      72 LOAD_CONST 1 ( 1 )					    72 LOAD_CONST 1 ( 1 )					  
							      74 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      76 LOAD_CONST 3 ( - 1 )					    76 LOAD_CONST 3 ( - 1 )					  
							      78 LOAD_CONST 3 ( - 1 )					    78 LOAD_CONST 3 ( - 1 )					  
							      80 CALL_FUNCTION 3					    80 CALL_FUNCTION 3						  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 46 ( to 132 )				    >> 84 FOR_ITER 72 ( to 142 )				  
							      86 STORE_FAST 4 ( i )					    86 STORE_FAST 4 ( i )					  
							      								    								  
							      8 88 LOAD_FAST 6 ( sum )					    8 88 LOAD_FAST 6 ( sum )					  
							      90 LOAD_GLOBAL 2 ( ord )					    90 LOAD_GLOBAL 2 ( ord )					  
							      92 LOAD_FAST 5 ( sub )					    92 LOAD_FAST 5 ( sub )					  
							      94 LOAD_FAST 4 ( i )					    94 LOAD_FAST 4 ( i )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 CALL_FUNCTION 1					    98 CALL_FUNCTION 1						  
							      100 LOAD_GLOBAL 2 ( ord )					    100 LOAD_GLOBAL 2 ( ord )					  
							      102 LOAD_CONST 4 ( '0' )					    102 LOAD_CONST 4 ( '0' )					  
							      104 CALL_FUNCTION 1					    104 CALL_FUNCTION 1						  
							      106 BINARY_SUBTRACT					    106 BINARY_SUBTRACT						  
							      108 LOAD_GLOBAL 3 ( pow )					    108 LOAD_GLOBAL 2 ( ord )					  
							      110 LOAD_FAST 2 ( b )					    110 LOAD_FAST 1 ( k )					  
							      112 LOAD_FAST 7 ( counter )				    112 LOAD_FAST 7 ( counter )					  
							      114 CALL_FUNCTION 2					    114 CALL_FUNCTION 2						  
							      116 BINARY_MULTIPLY					    116 BINARY_MULTIPLY						  
							      118 BINARY_ADD						    118 BINARY_SUBTRACT						  
							      120 STORE_FAST 6 ( sum )					    120 STORE_FAST 6 ( sum )					  
							      								    								  
							      9 122 LOAD_FAST 7 ( counter )				    9 122 LOAD_FAST 7 ( counter )				  
							      124 LOAD_CONST 1 ( 1 )					    124 LOAD_CONST 1 ( 1 )					  
							      126 INPLACE_ADD						    126 INPLACE_ADD						  
							      128 STORE_FAST 7 ( counter )				    128 STORE_FAST 7 ( counter )				  
							      130 JUMP_ABSOLUTE 84					    130 JUMP_ABSOLUTE 84					  
							      >> 132 POP_BLOCK						    >> 132 POP_BLOCK						  
							      								    								  
							      10 >> 134 LOAD_GLOBAL 4 ( print )				    10 >> 134 LOAD_GLOBAL 3 ( print )				  
							      136 LOAD_FAST 6 ( sum )					    136 LOAD_FAST 6 ( sum )					  
							      138 LOAD_CONST 5 ( ' ' )					    138 LOAD_CONST 5 ( ' ' )					  
							      140 LOAD_CONST 6 ( ( 'end' , ) )				    140 LOAD_CONST 6 ( ( 'end' , ) )				  
							      142 CALL_FUNCTION_KW 2					    142 CALL_FUNCTION_KW 2					  
							      144 POP_TOP						    144 POP_TOP							  
							      146 JUMP_ABSOLUTE 18					    146 JUMP_ABSOLUTE 18					  
							      >> 148 POP_BLOCK						    >> 148 POP_BLOCK						  
							      >> 150 LOAD_CONST 0 ( None )				    >> 150 LOAD_CONST 0 ( None )				  
							      152 RETURN_VALUE NEW_LINE					    152 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS	  RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS
--							      --							    --								  --
def maxProduct ( arr , n ) :				      Disassembly of <code object maxProduct at 0x7f33e2649a50, fil Disassembly of <code object maxProduct at 0x7f2b0163dc90, fil script_not_found : None
    if ( n < 2 ) :					      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
	print ( "No pairs exists" )			      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  
	return						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    a = arr [ 0 ] ; b = arr [ 1 ]			      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 20					  
    for i in range ( 0 , n ) :				      								    								  
	for j in range ( i + 1 , n ) :			      3 8 LOAD_GLOBAL 0 ( print )				    3 8 LOAD_GLOBAL 0 ( print )					  
	    if ( arr [ i ] * arr [ j ] > a * b ) :	      10 LOAD_CONST 2 ( 'No pairs exists' )			    10 LOAD_CONST 2 ( 'No pairs exists' )			  
		a = arr [ i ] ; b = arr [ j ]		      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
    print ( "Max product pair is {" , a , "," , b , "}" , sep 14 POP_TOP						    14 POP_TOP							  
							      								    								  
							      4 16 LOAD_CONST 0 ( None )				    4 16 LOAD_CONST 0 ( None )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      5 >> 20 LOAD_FAST 0 ( arr )				    5 >> 20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_CONST 3 ( 0 )					    22 LOAD_CONST 3 ( 0 )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 STORE_FAST 2 ( a )					    26 STORE_FAST 2 ( a )					  
							      28 LOAD_FAST 0 ( arr )					    								  
							      30 LOAD_CONST 4 ( 1 )					    6 28 LOAD_FAST 0 ( arr )					  
							      32 BINARY_SUBSCR						    30 LOAD_CONST 4 ( 1 )					  
							      34 STORE_FAST 3 ( b )					    32 BINARY_SUBSCR						  
							      								    34 STORE_FAST 3 ( b )					  
							      6 36 SETUP_LOOP 82 ( to 120 )				    								  
							      38 LOAD_GLOBAL 1 ( range )				    7 36 SETUP_LOOP 74 ( to 108 )				  
							      40 LOAD_CONST 3 ( 0 )					    38 LOAD_GLOBAL 1 ( range )					  
							      42 LOAD_FAST 1 ( n )					    40 LOAD_CONST 3 ( 0 )					  
							      44 CALL_FUNCTION 2					    42 LOAD_FAST 1 ( n )					  
							      46 GET_ITER						    44 CALL_FUNCTION 2						  
							      >> 48 FOR_ITER 68 ( to 118 )				    46 GET_ITER							  
							      50 STORE_FAST 4 ( i )					    >> 48 FOR_ITER 58 ( to 106 )				  
							      								    50 STORE_FAST 4 ( i )					  
							      7 52 SETUP_LOOP 62 ( to 116 )				    								  
							      54 LOAD_GLOBAL 1 ( range )				    8 52 SETUP_LOOP 46 ( to 104 )				  
							      56 LOAD_FAST 4 ( i )					    54 LOAD_GLOBAL 1 ( range )					  
							      58 LOAD_CONST 4 ( 1 )					    56 LOAD_FAST 4 ( i )					  
							      60 BINARY_ADD						    58 LOAD_CONST 4 ( 1 )					  
							      62 LOAD_FAST 1 ( n )					    60 BINARY_ADD						  
							      64 CALL_FUNCTION 2					    62 LOAD_FAST 1 ( n )					  
							      66 GET_ITER						    64 CALL_FUNCTION 2						  
							      >> 68 FOR_ITER 44 ( to 114 )				    66 GET_ITER							  
							      70 STORE_FAST 5 ( j )					    >> 68 FOR_ITER 38 ( to 102 )				  
							      								    70 STORE_FAST 5 ( j )					  
							      8 72 LOAD_FAST 0 ( arr )					    								  
							      74 LOAD_FAST 4 ( i )					    9 72 LOAD_FAST 0 ( arr )					  
							      76 BINARY_SUBSCR						    74 LOAD_FAST 4 ( i )					  
							      78 LOAD_FAST 0 ( arr )					    76 BINARY_SUBSCR						  
							      80 LOAD_FAST 5 ( j )					    78 LOAD_FAST 0 ( arr )					  
							      82 BINARY_SUBSCR						    80 LOAD_FAST 5 ( j )					  
							      84 BINARY_MULTIPLY					    82 BINARY_SUBSCR						  
							      86 LOAD_FAST 2 ( a )					    84 BINARY_MULTIPLY						  
							      88 LOAD_FAST 3 ( b )					    86 LOAD_FAST 2 ( a )					  
							      90 BINARY_MULTIPLY					    88 LOAD_FAST 3 ( b )					  
							      92 COMPARE_OP 4 ( > )					    90 BINARY_MULTIPLY						  
							      94 POP_JUMP_IF_FALSE 68					    92 COMPARE_OP 4 ( > )					  
							      								    94 POP_JUMP_IF_FALSE 68					  
							      9 96 LOAD_FAST 0 ( arr )					    								  
							      98 LOAD_FAST 4 ( i )					    10 96 LOAD_FAST 0 ( arr )					  
							      100 BINARY_SUBSCR						    98 LOAD_FAST 4 ( i )					  
							      102 STORE_FAST 2 ( a )					    100 BINARY_SUBSCR						  
							      104 LOAD_FAST 0 ( arr )					    102 STORE_FAST 2 ( a )					  
							      106 LOAD_FAST 5 ( j )					    104 JUMP_ABSOLUTE 68					  
							      108 BINARY_SUBSCR						    >> 106 POP_BLOCK						  
							      110 STORE_FAST 3 ( b )					    >> 108 JUMP_ABSOLUTE 48					  
							      112 JUMP_ABSOLUTE 68					    >> 110 POP_BLOCK						  
							      >> 114 POP_BLOCK						    								  
							      >> 116 JUMP_ABSOLUTE 48					    11 >> 112 LOAD_GLOBAL 0 ( print )				  
							      >> 118 POP_BLOCK						    114 LOAD_CONST 5 ( 'Max product pair is {' )		  
							      								    116 LOAD_FAST 2 ( a )					  
							      10 >> 120 LOAD_GLOBAL 0 ( print )				    118 LOAD_CONST 6 ( ',' )					  
							      122 LOAD_CONST 5 ( 'Max product pair is {' )		    120 LOAD_FAST 3 ( b )					  
							      124 LOAD_FAST 2 ( a )					    122 LOAD_CONST 7 ( '}' )					  
							      126 LOAD_CONST 6 ( ',' )					    124 LOAD_CONST 8 ( '' )					  
							      128 LOAD_FAST 3 ( b )					    126 LOAD_CONST 9 ( ( 'sep' , ) )				  
							      130 LOAD_CONST 7 ( '}' )					    128 CALL_FUNCTION_KW 5					  
							      132 LOAD_CONST 8 ( '' )					    130 POP_TOP							  
							      134 LOAD_CONST 9 ( ( 'sep' , ) )				    132 LOAD_CONST 0 ( None )					  
							      136 CALL_FUNCTION_KW 6					    134 RETURN_VALUE NEW_LINE					  
							      138 POP_TOP						    								  
							      140 LOAD_CONST 0 ( None )					    								  
							      142 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING				      GENERATE_ROTATIONS_GIVEN_STRING				    GENERATE_ROTATIONS_GIVEN_STRING				  GENERATE_ROTATIONS_GIVEN_STRING
--							      --							    --								  --
def printRotatedString ( str ) :			      Disassembly of <code object printRotatedString at 0x7f33e2653 Disassembly of <code object printRotatedString at 0x7f2b0163d script_not_found : None
    lenn = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    temp = [ 0 ] * ( lenn )				      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    for i in range ( lenn ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	j = i						      6 STORE_FAST 1 ( lenn )					    6 STORE_FAST 1 ( lenn )					  
	k = 0						      								    								  
	while ( j < len ( str ) ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    temp [ k ] = str [ j ]			      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
	    k += 1					      12 LOAD_FAST 1 ( lenn )					    12 LOAD_FAST 1 ( lenn )					  
	    j += 1					      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
	j = 0						      16 STORE_FAST 2 ( temp )					    16 STORE_FAST 2 ( temp )					  
	while ( j < i ) :				      								    								  
	    temp [ k ] = str [ j ]			      4 18 SETUP_LOOP 130 ( to 150 )				    4 18 SETUP_LOOP 72 ( to 92 )				  
	    j += 1					      20 LOAD_GLOBAL 1 ( range )				    20 LOAD_GLOBAL 1 ( range )					  
	    k += 1					      22 LOAD_FAST 1 ( lenn )					    22 LOAD_FAST 1 ( lenn )					  
	print ( * temp , sep = "" )			      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 118 ( to 148 )				    >> 28 FOR_ITER 56 ( to 90 )					  
							      30 STORE_FAST 3 ( i )					    30 STORE_FAST 3 ( i )					  
							      								    								  
							      5 32 LOAD_FAST 3 ( i )					    5 32 LOAD_FAST 3 ( i )					  
							      34 STORE_FAST 4 ( j )					    34 STORE_FAST 4 ( j )					  
							      								    								  
							      6 36 LOAD_CONST 1 ( 0 )					    6 36 LOAD_CONST 1 ( 0 )					  
							      38 STORE_FAST 5 ( k )					    38 STORE_FAST 5 ( k )					  
							      								    								  
							      7 40 SETUP_LOOP 44 ( to 86 )				    7 40 SETUP_LOOP 46 ( to 88 )				  
							      >> 42 LOAD_FAST 4 ( j )					    >> 42 LOAD_FAST 4 ( j )					  
							      44 LOAD_GLOBAL 0 ( len )					    44 LOAD_GLOBAL 0 ( len )					  
							      46 LOAD_FAST 0 ( str )					    46 LOAD_FAST 0 ( str )					  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 COMPARE_OP 0 ( < )					    50 COMPARE_OP 0 ( < )					  
							      52 POP_JUMP_IF_FALSE 84					    52 POP_JUMP_IF_FALSE 86					  
							      								    								  
							      8 54 LOAD_FAST 0 ( str )					    8 54 LOAD_FAST 0 ( str )					  
							      56 LOAD_FAST 4 ( j )					    56 LOAD_FAST 4 ( j )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_FAST 2 ( temp )					    60 LOAD_FAST 2 ( temp )					  
							      62 LOAD_FAST 5 ( k )					    62 LOAD_FAST 5 ( k )					  
							      64 STORE_SUBSCR						    64 STORE_SUBSCR						  
							      								    								  
							      9 66 LOAD_FAST 5 ( k )					    9 66 LOAD_FAST 5 ( k )					  
							      68 LOAD_CONST 2 ( 1 )					    68 LOAD_CONST 2 ( 1 )					  
							      70 INPLACE_ADD						    70 INPLACE_ADD						  
							      72 STORE_FAST 5 ( k )					    72 STORE_FAST 5 ( k )					  
							      								    								  
							      10 74 LOAD_FAST 4 ( j )					    10 74 LOAD_FAST 4 ( j )					  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 INPLACE_ADD						    78 INPLACE_ADD						  
							      80 STORE_FAST 4 ( j )					    80 STORE_FAST 4 ( j )					  
							      82 JUMP_ABSOLUTE 42					    								  
							      >> 84 POP_BLOCK						    11 >> 82 LOAD_CONST 1 ( 0 )					  
							      								    84 STORE_FAST 4 ( j )					  
							      11 >> 86 LOAD_CONST 1 ( 0 )				    								  
							      88 STORE_FAST 4 ( j )					    12 >> 86 SETUP_LOOP 34 ( to 124 )				  
							      								    >> 88 LOAD_FAST 4 ( j )					  
							      12 90 SETUP_LOOP 40 ( to 132 )				    90 LOAD_FAST 3 ( i )					  
							      >> 92 LOAD_FAST 4 ( j )					    92 COMPARE_OP 0 ( < )					  
							      94 LOAD_FAST 3 ( i )					    94 POP_JUMP_IF_FALSE 122					  
							      96 COMPARE_OP 0 ( < )					    								  
							      98 POP_JUMP_IF_FALSE 130					    13 96 LOAD_FAST 0 ( str )					  
							      								    98 LOAD_FAST 4 ( j )					  
							      13 100 LOAD_FAST 0 ( str )				    100 BINARY_SUBSCR						  
							      102 LOAD_FAST 4 ( j )					    102 LOAD_FAST 2 ( temp )					  
							      104 BINARY_SUBSCR						    104 LOAD_FAST 5 ( k )					  
							      106 LOAD_FAST 2 ( temp )					    106 STORE_SUBSCR						  
							      108 LOAD_FAST 5 ( k )					    								  
							      110 STORE_SUBSCR						    14 108 LOAD_FAST 5 ( k )					  
							      								    110 LOAD_CONST 2 ( 1 )					  
							      14 112 LOAD_FAST 4 ( j )					    112 INPLACE_ADD						  
							      114 LOAD_CONST 2 ( 1 )					    114 STORE_FAST 5 ( k )					  
							      116 INPLACE_ADD						    								  
							      118 STORE_FAST 4 ( j )					    15 116 LOAD_FAST 5 ( k )					  
							      								    118 LOAD_CONST 2 ( 1 )					  
							      15 120 LOAD_FAST 5 ( k )					    120 INPLACE_ADD						  
							      122 LOAD_CONST 2 ( 1 )					    >> 122 STORE_FAST 5 ( k )					  
							      124 INPLACE_ADD						    124 JUMP_ABSOLUTE 88					  
							      126 STORE_FAST 5 ( k )					    >> 126 POP_BLOCK						  
							      128 JUMP_ABSOLUTE 92					    								  
							      >> 130 POP_BLOCK						    16 >> 128 LOAD_GLOBAL 2 ( print )				  
							      								    130 LOAD_FAST 2 ( temp )					  
							      16 >> 132 LOAD_GLOBAL 2 ( print )				    132 LOAD_CONST 3 ( '' )					  
							      134 LOAD_FAST 2 ( temp )					    134 LOAD_CONST 4 ( ( 'sep' , ) )				  
							      136 LOAD_CONST 3 ( 'sep' )				    136 CALL_FUNCTION_KW 2					  
							      138 LOAD_CONST 4 ( '' )					    138 POP_TOP							  
							      140 BUILD_MAP 1						    >> 140 LOAD_CONST 0 ( None )				  
							      142 CALL_FUNCTION_EX 1					    142 RETURN_VALUE NEW_LINE					  
							      144 POP_TOP						    								  
							      146 JUMP_ABSOLUTE 28					    								  
							      >> 148 POP_BLOCK						    								  
							      >> 150 LOAD_CONST 0 ( None )				    								  
							      152 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE
--							      --							    --								  --
def longestAlternating ( arr , n ) :			      Disassembly of <code object longestAlternating at 0x7f33e2644 Disassembly of <code object longestAlternating at 0x7f2b0163d script_not_found : None
    count = [ None ] * n				      2 0 LOAD_CONST 0 ( None )					    2 0 LOAD_CONST 0 ( None )					  
    count [ n - 1 ] = 1					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    i = n - 2						      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
    while i >= 0 :					      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	if ( arr [ i ] * arr [ i + 1 ] < 0 ) :		      8 STORE_FAST 2 ( count )					    8 STORE_FAST 2 ( count )					  
	    count [ i ] = count [ i + 1 ] + 1		      								    								  
	else :						      3 10 LOAD_CONST 1 ( 1 )					    3 10 LOAD_CONST 1 ( 1 )					  
	    count [ i ] = 1 ;				      12 LOAD_FAST 2 ( count )					    12 LOAD_FAST 2 ( count )					  
	i = i - 1					      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
    i = 0						      16 LOAD_CONST 1 ( 1 )					    16 LOAD_CONST 1 ( 1 )					  
    while i < n :					      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
	print ( count [ i ] , end = " " )		      20 STORE_SUBSCR						    20 STORE_SUBSCR						  
	i = i + 1					      								    								  
							      4 22 LOAD_FAST 1 ( n )					    4 22 LOAD_FAST 1 ( n )					  
							      24 LOAD_CONST 2 ( 2 )					    24 LOAD_CONST 2 ( 2 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 STORE_FAST 3 ( i )					    28 STORE_FAST 3 ( i )					  
							      								    								  
							      5 30 SETUP_LOOP 74 ( to 106 )				    5 30 SETUP_LOOP 68 ( to 96 )				  
							      >> 32 LOAD_FAST 3 ( i )					    >> 32 LOAD_FAST 3 ( i )					  
							      34 LOAD_CONST 3 ( 0 )					    34 LOAD_CONST 3 ( 0 )					  
							      36 COMPARE_OP 5 ( >= )					    36 COMPARE_OP 5 ( >= )					  
							      38 POP_JUMP_IF_FALSE 104					    38 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      6 40 LOAD_FAST 0 ( arr )					    6 40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 3 ( i )					    48 LOAD_FAST 3 ( i )					  
							      50 LOAD_CONST 1 ( 1 )					    50 LOAD_CONST 1 ( 1 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 BINARY_MULTIPLY					    56 BINARY_MULTIPLY						  
							      58 LOAD_CONST 3 ( 0 )					    58 LOAD_CONST 3 ( 0 )					  
							      60 COMPARE_OP 0 ( < )					    60 COMPARE_OP 0 ( < )					  
							      62 POP_JUMP_IF_FALSE 86					    62 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      7 64 LOAD_FAST 2 ( count )				    7 64 LOAD_FAST 2 ( count )					  
							      66 LOAD_FAST 3 ( i )					    66 LOAD_FAST 3 ( i )					  
							      68 LOAD_CONST 1 ( 1 )					    68 LOAD_CONST 1 ( 1 )					  
							      70 BINARY_ADD						    70 BINARY_ADD						  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_CONST 1 ( 1 )					    74 LOAD_CONST 1 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 2 ( count )					    78 LOAD_FAST 2 ( count )					  
							      80 LOAD_FAST 3 ( i )					    80 LOAD_FAST 3 ( i )					  
							      82 STORE_SUBSCR						    82 STORE_SUBSCR						  
							      84 JUMP_FORWARD 8 ( to 94 )				    84 JUMP_ABSOLUTE 32						  
							      								    								  
							      9 >> 86 LOAD_CONST 1 ( 1 )				    9 >> 86 LOAD_CONST 1 ( 1 )					  
							      88 LOAD_FAST 2 ( count )					    88 LOAD_FAST 2 ( count )					  
							      90 LOAD_FAST 3 ( i )					    90 LOAD_FAST 3 ( i )					  
							      92 STORE_SUBSCR						    92 STORE_SUBSCR						  
							      								    								  
							      10 >> 94 LOAD_FAST 3 ( i )				    10 >> 94 LOAD_FAST 3 ( i )					  
							      96 LOAD_CONST 1 ( 1 )					    96 LOAD_CONST 1 ( 1 )					  
							      98 BINARY_SUBTRACT					    98 BINARY_SUBTRACT						  
							      100 STORE_FAST 3 ( i )					    100 STORE_FAST 3 ( i )					  
							      102 JUMP_ABSOLUTE 32					    102 JUMP_ABSOLUTE 32					  
							      >> 104 POP_BLOCK						    >> 104 POP_BLOCK						  
							      								    								  
							      11 >> 106 LOAD_CONST 3 ( 0 )				    11 >> 106 LOAD_CONST 3 ( 0 )				  
							      108 STORE_FAST 3 ( i )					    108 STORE_FAST 3 ( i )					  
							      								    								  
							      12 110 SETUP_LOOP 36 ( to 148 )				    12 110 SETUP_LOOP 46 ( to 146 )				  
							      >> 112 LOAD_FAST 3 ( i )					    >> 112 LOAD_FAST 3 ( i )					  
							      114 LOAD_FAST 1 ( n )					    114 LOAD_FAST 1 ( n )					  
							      116 COMPARE_OP 0 ( < )					    116 COMPARE_OP 0 ( < )					  
							      118 POP_JUMP_IF_FALSE 146					    118 POP_JUMP_IF_FALSE 144					  
							      								    								  
							      13 120 LOAD_GLOBAL 0 ( print )				    13 120 LOAD_GLOBAL 0 ( print )				  
							      122 LOAD_FAST 2 ( count )					    122 LOAD_FAST 2 ( count )					  
							      124 LOAD_FAST 3 ( i )					    124 LOAD_FAST 3 ( i )					  
							      126 BINARY_SUBSCR						    126 BINARY_SUBSCR						  
							      128 LOAD_CONST 4 ( ' ' )					    128 LOAD_CONST 4 ( ' ' )					  
							      130 LOAD_CONST 5 ( ( 'end' , ) )				    130 LOAD_CONST 5 ( ( 'end' , ) )				  
							      132 CALL_FUNCTION_KW 2					    132 CALL_FUNCTION_KW 2					  
							      134 POP_TOP						    134 POP_TOP							  
							      								    								  
							      14 136 LOAD_FAST 3 ( i )					    14 136 LOAD_FAST 3 ( i )					  
							      138 LOAD_CONST 1 ( 1 )					    138 LOAD_CONST 1 ( 1 )					  
							      140 BINARY_ADD						    140 BINARY_ADD						  
							      142 STORE_FAST 3 ( i )					    142 STORE_FAST 3 ( i )					  
							      144 JUMP_ABSOLUTE 112					    >> 144 JUMP_ABSOLUTE 112					  
							      >> 146 POP_BLOCK						    >> 146 POP_BLOCK						  
							      >> 148 LOAD_CONST 0 ( None )				    >> 148 LOAD_CONST 0 ( None )				  
							      150 RETURN_VALUE NEW_LINE					    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WORDS_STRING_REVERSE_ORDER			      PRINT_WORDS_STRING_REVERSE_ORDER				    PRINT_WORDS_STRING_REVERSE_ORDER				  PRINT_WORDS_STRING_REVERSE_ORDER
--							      --							    --								  --
def wordReverse ( str ) :				      Disassembly of <code object wordReverse at 0x7f33e2644f60, fi Disassembly of <code object wordReverse at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    i = len ( str ) - 1					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    start = end = i + 1					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  (item)   File "main.py", line 44, in <module>	  Fi
    result = ''						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in wordReverse IndexError: str
    while i >= 0 :					      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  ing index out of range
	if str [ i ] == ' ' :				      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
	    start = i + 1				      10 STORE_FAST 1 ( i )					    10 STORE_FAST 1 ( i )					  
	    while start != end :			      								    								  
		result += str [ start ]			      3 12 LOAD_FAST 1 ( i )					    3 12 LOAD_FAST 1 ( i )					  
		start += 1				      14 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 1 )					  
	    result += ' '				      16 BINARY_ADD						    16 BINARY_ADD						  
	    end = i					      18 DUP_TOP						    18 STORE_FAST 2 ( start )					  
	i -= 1						      20 STORE_FAST 2 ( start )					    								  
    start = 0						      22 STORE_FAST 3 ( end )					    4 20 LOAD_CONST 2 ( '' )					  
    while start != end :				      								    22 STORE_FAST 3 ( result )					  
	result += str [ start ]				      4 24 LOAD_CONST 2 ( '' )					    								  
	start += 1					      26 STORE_FAST 4 ( result )				    5 24 SETUP_LOOP 72 ( to 92 )				  
    return result					      								    >> 26 LOAD_FAST 1 ( i )					  
							      5 28 SETUP_LOOP 86 ( to 116 )				    28 LOAD_CONST 3 ( 0 )					  
							      >> 30 LOAD_FAST 1 ( i )					    30 COMPARE_OP 5 ( >= )					  
							      32 LOAD_CONST 3 ( 0 )					    32 POP_JUMP_IF_FALSE 90					  
							      34 COMPARE_OP 5 ( >= )					    								  
							      36 POP_JUMP_IF_FALSE 114					    6 34 LOAD_FAST 0 ( str )					  
							      								    36 LOAD_FAST 1 ( i )					  
							      6 38 LOAD_FAST 0 ( str )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 1 ( i )					    40 LOAD_CONST 4 ( ' ' )					  
							      42 BINARY_SUBSCR						    42 COMPARE_OP 2 ( == )					  
							      44 LOAD_CONST 4 ( ' ' )					    44 POP_JUMP_IF_FALSE 66					  
							      46 COMPARE_OP 2 ( == )					    								  
							      48 POP_JUMP_IF_FALSE 104					    7 46 LOAD_FAST 1 ( i )					  
							      								    48 LOAD_CONST 1 ( 1 )					  
							      7 50 LOAD_FAST 1 ( i )					    50 BINARY_ADD						  
							      52 LOAD_CONST 1 ( 1 )					    52 STORE_FAST 2 ( start )					  
							      54 BINARY_ADD						    								  
							      56 STORE_FAST 2 ( start )					    8 54 SETUP_LOOP 30 ( to 84 )				  
							      								    >> 56 LOAD_FAST 2 ( start )					  
							      8 58 SETUP_LOOP 32 ( to 92 )				    58 LOAD_FAST 2 ( end )					  
							      >> 60 LOAD_FAST 2 ( start )				    60 COMPARE_OP 3 ( != )					  
							      62 LOAD_FAST 3 ( end )					    62 POP_JUMP_IF_FALSE 82					  
							      64 COMPARE_OP 3 ( != )					    								  
							      66 POP_JUMP_IF_FALSE 90					    9 64 LOAD_FAST 3 ( result )					  
							      								    66 LOAD_FAST 0 ( str )					  
							      9 68 LOAD_FAST 4 ( result )				    68 LOAD_FAST 2 ( start )					  
							      70 LOAD_FAST 0 ( str )					    70 BINARY_SUBSCR						  
							      72 LOAD_FAST 2 ( start )					    72 INPLACE_ADD						  
							      74 BINARY_SUBSCR						    74 STORE_FAST 3 ( result )					  
							      76 INPLACE_ADD						    								  
							      78 STORE_FAST 4 ( result )				    10 76 LOAD_FAST 2 ( start )					  
							      								    78 LOAD_CONST 1 ( 1 )					  
							      10 80 LOAD_FAST 2 ( start )				    80 INPLACE_ADD						  
							      82 LOAD_CONST 1 ( 1 )					    >> 82 STORE_FAST 2 ( start )				  
							      84 INPLACE_ADD						    								  
							      86 STORE_FAST 2 ( start )					    11 86 LOAD_FAST 1 ( i )					  
							      88 JUMP_ABSOLUTE 60					    88 STORE_FAST 2 ( end )					  
							      >> 90 POP_BLOCK						    								  
							      								    12 >> 90 LOAD_FAST 1 ( i )					  
							      11 >> 92 LOAD_FAST 4 ( result )				    92 LOAD_CONST 1 ( 1 )					  
							      94 LOAD_CONST 4 ( ' ' )					    94 INPLACE_SUBTRACT						  
							      96 INPLACE_ADD						    96 STORE_FAST 1 ( i )					  
							      98 STORE_FAST 4 ( result )				    98 JUMP_ABSOLUTE 26						  
							      								    >> 100 POP_BLOCK						  
							      12 100 LOAD_FAST 1 ( i )					    								  
							      102 STORE_FAST 3 ( end )					    13 >> 102 LOAD_CONST 3 ( 0 )				  
							      								    104 STORE_FAST 2 ( start )					  
							      13 >> 104 LOAD_FAST 1 ( i )				    								  
							      106 LOAD_CONST 1 ( 1 )					    14 106 SETUP_LOOP 34 ( to 156 )				  
							      108 INPLACE_SUBTRACT					    >> 108 LOAD_FAST 2 ( start )				  
							      110 STORE_FAST 1 ( i )					    110 LOAD_FAST 2 ( end )					  
							      112 JUMP_ABSOLUTE 30					    112 COMPARE_OP 3 ( != )					  
							      >> 114 POP_BLOCK						    114 POP_JUMP_IF_FALSE 154					  
							      								    								  
							      14 >> 116 LOAD_CONST 3 ( 0 )				    15 116 LOAD_FAST 3 ( result )				  
							      118 STORE_FAST 2 ( start )				    118 LOAD_FAST 0 ( str )					  
							      								    120 LOAD_FAST 2 ( start )					  
							      15 120 SETUP_LOOP 32 ( to 154 )				    122 BINARY_SUBSCR						  
							      >> 122 LOAD_FAST 2 ( start )				    124 INPLACE_ADD						  
							      124 LOAD_FAST 3 ( end )					    126 STORE_FAST 3 ( result )					  
							      126 COMPARE_OP 3 ( != )					    								  
							      128 POP_JUMP_IF_FALSE 152					    16 128 LOAD_FAST 2 ( start )				  
							      								    130 LOAD_CONST 1 ( 1 )					  
							      16 130 LOAD_FAST 4 ( result )				    132 INPLACE_ADD						  
							      132 LOAD_FAST 0 ( str )					    134 STORE_FAST 2 ( start )					  
							      134 LOAD_FAST 2 ( start )					    136 JUMP_ABSOLUTE 108					  
							      136 BINARY_SUBSCR						    >> 138 POP_BLOCK						  
							      138 INPLACE_ADD						    								  
							      140 STORE_FAST 4 ( result )				    17 >> 140 LOAD_FAST 3 ( result )				  
							      								    142 RETURN_VALUE NEW_LINE					  
							      17 142 LOAD_FAST 2 ( start )				    								  
							      144 LOAD_CONST 1 ( 1 )					    								  
							      146 INPLACE_ADD						    								  
							      148 STORE_FAST 2 ( start )				    								  
							      150 JUMP_ABSOLUTE 122					    								  
							      >> 152 POP_BLOCK						    								  
							      								    								  
							      18 >> 154 LOAD_FAST 4 ( result )				    								  
							      156 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			      FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			    FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			  FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA
--							      --							    --								  --
def parabola ( a , b , c ) :				      Disassembly of <code object parabola at 0x7f33e2653f60, file  Disassembly of <code object parabola at 0x7f2b0163dc90, file  script_not_found : None
    print ( "Vertex: (" , ( - b / ( 2 * a ) ) , ", " , ( ( (  2 0 LOAD_GLOBAL 0 ( print )				    2 0 LOAD_GLOBAL 0 ( print )					  
    print ( "Focus: (" , ( - b / ( 2 * a ) ) , ", " , ( ( ( 4 2 LOAD_CONST 1 ( 'Vertex: (' )				    2 LOAD_CONST 1 ( 'Vertex: (' )				  
    print ( "Directrix: y=" , c - ( ( b * b ) + 1 ) * 4 * a , 4 LOAD_FAST 1 ( b )					    4 LOAD_CONST 2 ( - b / ( 2 * a ) ) )			  
							      6 UNARY_NEGATIVE						    6 LOAD_FAST 2 ( c )						  
							      8 LOAD_CONST 2 ( 2 )					    8 BINARY_MULTIPLY						  
							      10 LOAD_FAST 0 ( a )					    10 BINARY_TRUE_DIVIDE					  
							      12 BINARY_MULTIPLY					    12 CALL_FUNCTION 2						  
							      14 BINARY_TRUE_DIVIDE					    14 LOAD_CONST 3 ( ', ' )					  
							      16 LOAD_CONST 3 ( ', ' )					    16 LOAD_CONST 4 ( ( ( 4 * a ) )				  
							      18 LOAD_CONST 4 ( 4 )					    18 LOAD_FAST 2 ( c )					  
							      20 LOAD_FAST 0 ( a )					    20 BINARY_MULTIPLY						  
							      22 BINARY_MULTIPLY					    22 LOAD_FAST 1 ( b )					  
							      24 LOAD_FAST 2 ( c )					    24 LOAD_FAST 1 ( b )					  
							      26 BINARY_MULTIPLY					    26 BINARY_MULTIPLY						  
							      28 LOAD_FAST 1 ( b )					    28 BINARY_SUBTRACT						  
							      30 LOAD_FAST 1 ( b )					    30 LOAD_CONST 5 ( ( 'sep' , ) )				  
							      32 BINARY_MULTIPLY					    32 CALL_FUNCTION_KW 3					  
							      34 BINARY_SUBTRACT					    34 LOAD_CONST 6 ( '' )					  
							      36 LOAD_CONST 4 ( 4 )					    36 LOAD_CONST 7 ( '' )					  
							      38 LOAD_FAST 0 ( a )					    38 LOAD_CONST 7 ( ( 'sep' , ) )				  
							      40 BINARY_MULTIPLY					    40 CALL_FUNCTION_KW 5					  
							      42 BINARY_TRUE_DIVIDE					    42 POP_TOP							  
							      44 LOAD_CONST 5 ( ')' )					    								  
							      46 LOAD_CONST 6 ( '' )					    3 44 LOAD_GLOBAL 0 ( print )				  
							      48 LOAD_CONST 7 ( ( 'sep' , ) )				    46 LOAD_CONST 8 ( 'Focus: (' )				  
							      50 CALL_FUNCTION_KW 6					    48 LOAD_CONST 2 ( - b ) )					  
							      52 POP_TOP						    50 LOAD_CONST 9 ( 2 )					  
							      								    52 LOAD_FAST 0 ( a )					  
							      3 54 LOAD_GLOBAL 0 ( print )				    54 BINARY_MULTIPLY						  
							      56 LOAD_CONST 8 ( 'Focus: (' )				    56 LOAD_FAST 2 ( c )					  
							      58 LOAD_FAST 1 ( b )					    58 BINARY_MULTIPLY						  
							      60 UNARY_NEGATIVE						    60 BINARY_SUBTRACT						  
							      62 LOAD_CONST 2 ( 2 )					    62 LOAD_FAST 1 ( b )					  
							      64 LOAD_FAST 0 ( a )					    64 LOAD_FAST 1 ( b )					  
							      66 BINARY_MULTIPLY					    66 BINARY_MULTIPLY						  
							      68 BINARY_TRUE_DIVIDE					    68 BINARY_SUBTRACT						  
							      70 LOAD_CONST 3 ( ', ' )					    70 LOAD_CONST 9 ( 1 )					  
							      72 LOAD_CONST 4 ( 4 )					    72 BINARY_ADD						  
							      74 LOAD_FAST 0 ( a )					    74 LOAD_CONST 5 ( ( 'sep' , ) )				  
							      76 BINARY_MULTIPLY					    76 CALL_FUNCTION_KW 3					  
							      78 LOAD_FAST 2 ( c )					    78 LOAD_CONST 6 ( '' )					  
							      80 BINARY_MULTIPLY					    80 LOAD_CONST 7 ( ( 'sep' , ) )				  
							      82 LOAD_FAST 1 ( b )					    82 CALL_FUNCTION_KW 3					  
							      84 LOAD_FAST 1 ( b )					    84 POP_TOP							  
							      86 BINARY_MULTIPLY					    								  
							      88 BINARY_SUBTRACT					    4 86 LOAD_GLOBAL 0 ( print )				  
							      90 LOAD_CONST 9 ( 1 )					    88 LOAD_CONST 10 ( 'Directrix: y=' )			  
							      92 BINARY_ADD						    90 LOAD_FAST 2 ( c )					  
							      94 LOAD_CONST 4 ( 4 )					    92 LOAD_FAST 1 ( b )					  
							      96 LOAD_FAST 0 ( a )					    94 BINARY_MULTIPLY						  
							      98 BINARY_MULTIPLY					    96 LOAD_FAST 1 ( b )					  
							      100 BINARY_TRUE_DIVIDE					    98 BINARY_MULTIPLY						  
							      102 LOAD_CONST 5 ( ')' )					    100 LOAD_CONST 9 ( 1 )					  
							      104 LOAD_CONST 6 ( '' )					    102 BINARY_ADD						  
							      106 LOAD_CONST 7 ( ( 'sep' , ) )				    104 LOAD_CONST 5 ( ( 'sep' , ) )				  
							      108 CALL_FUNCTION_KW 6					    106 CALL_FUNCTION_KW 2					  
							      110 POP_TOP						    108 POP_TOP							  
							      								    110 LOAD_CONST 0 ( None )					  
							      4 112 LOAD_GLOBAL 0 ( print )				    112 RETURN_VALUE NEW_LINE					  
							      114 LOAD_CONST 10 ( 'Directrix: y=' )			    								  
							      116 LOAD_FAST 2 ( c )					    								  
							      118 LOAD_FAST 1 ( b )					    								  
							      120 LOAD_FAST 1 ( b )					    								  
							      122 BINARY_MULTIPLY					    								  
							      124 LOAD_CONST 9 ( 1 )					    								  
							      126 BINARY_ADD						    								  
							      128 LOAD_CONST 4 ( 4 )					    								  
							      130 BINARY_MULTIPLY					    								  
							      132 LOAD_FAST 0 ( a )					    								  
							      134 BINARY_MULTIPLY					    								  
							      136 BINARY_SUBTRACT					    								  
							      138 LOAD_CONST 6 ( '' )					    								  
							      140 LOAD_CONST 7 ( ( 'sep' , ) )				    								  
							      142 CALL_FUNCTION_KW 3					    								  
							      144 POP_TOP						    								  
							      146 LOAD_CONST 0 ( None )					    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY		      PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY		    PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY		  PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY
--							      --							    --								  --
def printPairs ( arr , n ) :				      Disassembly of <code object printPairs at 0x7f33e26494b0, fil Disassembly of <code object printPairs at 0x7f2b0163dc90, fil script_not_found : None
    v = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    for i in range ( n ) :				      2 STORE_FAST 2 ( v )					    2 STORE_FAST 2 ( v )					  
	for j in range ( i + 1 , n ) :			      								    								  
	    if ( abs ( arr [ i ] ) == abs ( arr [ j ] ) ) :   3 4 SETUP_LOOP 82 ( to 88 )				    3 4 SETUP_LOOP 70 ( to 76 )					  
		v.append ( abs ( arr [ i ] ) )		      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    if ( len ( v ) == 0 ) :				      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
	return ;					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    v.sort ( )						      12 GET_ITER						    12 GET_ITER							  
    for i in range ( len ( v ) ) :			      >> 14 FOR_ITER 70 ( to 86 )				    >> 14 FOR_ITER 58 ( to 74 )					  
	print ( - v [ i ] , "" , v [ i ] , end = " " )	      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
							      								    								  
							      4 18 SETUP_LOOP 64 ( to 84 )				    4 18 SETUP_LOOP 52 ( to 72 )				  
							      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_GLOBAL 0 ( range )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 1 ( 1 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 46 ( to 82 )				    >> 34 FOR_ITER 40 ( to 70 )					  
							      36 STORE_FAST 4 ( j )					    36 STORE_FAST 4 ( j )					  
							      								    								  
							      5 38 LOAD_GLOBAL 1 ( abs )				    5 38 LOAD_GLOBAL 1 ( abs )					  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 CALL_FUNCTION 1					    46 CALL_FUNCTION 1						  
							      48 LOAD_GLOBAL 1 ( abs )					    48 LOAD_GLOBAL 1 ( abs )					  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 4 ( j )					    52 LOAD_FAST 4 ( j )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 CALL_FUNCTION 1					    56 CALL_FUNCTION 1						  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 34					    60 POP_JUMP_IF_FALSE 34					  
							      								    								  
							      6 62 LOAD_FAST 2 ( v )					    6 62 LOAD_FAST 2 ( v )					  
							      64 LOAD_METHOD 2 ( append )				    64 LOAD_METHOD 2 ( append )					  
							      66 LOAD_GLOBAL 1 ( abs )					    66 LOAD_GLOBAL 1 ( abs )					  
							      68 LOAD_FAST 0 ( arr )					    68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 3 ( i )					    70 LOAD_FAST 3 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 CALL_FUNCTION 1					    74 CALL_FUNCTION 1						  
							      76 CALL_METHOD 1						    76 CALL_METHOD 1						  
							      78 POP_TOP						    78 POP_TOP							  
							      80 JUMP_ABSOLUTE 34					    80 JUMP_ABSOLUTE 34						  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      >> 84 JUMP_ABSOLUTE 14					    >> 84 JUMP_ABSOLUTE 14					  
							      >> 86 POP_BLOCK						    >> 86 POP_BLOCK						  
							      								    								  
							      7 >> 88 LOAD_GLOBAL 3 ( len )				    7 >> 88 LOAD_GLOBAL 3 ( len )				  
							      90 LOAD_FAST 2 ( v )					    90 LOAD_FAST 2 ( v )					  
							      92 CALL_FUNCTION 1					    92 CALL_FUNCTION 1						  
							      94 LOAD_CONST 2 ( 0 )					    94 LOAD_CONST 2 ( 0 )					  
							      96 COMPARE_OP 2 ( == )					    96 COMPARE_OP 2 ( == )					  
							      98 POP_JUMP_IF_FALSE 104					    98 POP_JUMP_IF_FALSE 104					  
							      								    								  
							      8 100 LOAD_CONST 0 ( None )				    8 100 LOAD_CONST 0 ( None )					  
							      102 RETURN_VALUE						    102 RETURN_VALUE						  
							      								    								  
							      9 >> 104 LOAD_FAST 2 ( v )				    9 >> 104 LOAD_FAST 2 ( v )					  
							      106 LOAD_METHOD 4 ( sort )				    106 LOAD_METHOD 4 ( sort )					  
							      108 CALL_METHOD 0						    108 CALL_METHOD 0						  
							      110 POP_TOP						    110 POP_TOP							  
							      								    								  
							      10 112 SETUP_LOOP 46 ( to 160 )				    10 112 SETUP_LOOP 52 ( to 160 )				  
							      114 LOAD_GLOBAL 0 ( range )				    114 LOAD_GLOBAL 0 ( range )					  
							      116 LOAD_GLOBAL 3 ( len )					    116 LOAD_GLOBAL 3 ( len )					  
							      118 LOAD_FAST 2 ( v )					    118 LOAD_FAST 2 ( v )					  
							      120 CALL_FUNCTION 1					    120 CALL_FUNCTION 1						  
							      122 CALL_FUNCTION 1					    122 CALL_FUNCTION 1						  
							      124 GET_ITER						    124 GET_ITER						  
							      >> 126 FOR_ITER 30 ( to 158 )				    >> 126 FOR_ITER 44 ( to 158 )				  
							      128 STORE_FAST 3 ( i )					    128 STORE_FAST 3 ( i )					  
							      								    								  
							      11 130 LOAD_GLOBAL 5 ( print )				    11 130 LOAD_GLOBAL 5 ( print )				  
							      132 LOAD_FAST 2 ( v )					    132 LOAD_FAST 2 ( v )					  
							      134 LOAD_FAST 3 ( i )					    134 LOAD_FAST 3 ( i )					  
							      136 BINARY_SUBSCR						    136 BINARY_SUBSCR						  
							      138 UNARY_NEGATIVE					    138 UNARY_NEGATIVE						  
							      140 LOAD_CONST 3 ( '' )					    140 LOAD_CONST 3 ( '' )					  
							      142 LOAD_FAST 2 ( v )					    142 LOAD_FAST 2 ( v )					  
							      144 LOAD_FAST 3 ( i )					    144 LOAD_FAST 3 ( i )					  
							      146 BINARY_SUBSCR						    146 BINARY_SUBSCR						  
							      148 LOAD_CONST 4 ( ' ' )					    148 LOAD_CONST 3 ( ' ' )					  
							      150 LOAD_CONST 5 ( ( 'end' , ) )				    150 LOAD_CONST 4 ( ( 'end' , ) )				  
							      152 CALL_FUNCTION_KW 4					    152 CALL_FUNCTION_KW 3					  
							      154 POP_TOP						    154 POP_TOP							  
							      156 JUMP_ABSOLUTE 126					    156 JUMP_ABSOLUTE 126					  
							      >> 158 POP_BLOCK						    >> 158 POP_BLOCK						  
							      >> 160 LOAD_CONST 0 ( None )				    >> 160 LOAD_CONST 0 ( None )				  
							      162 RETURN_VALUE NEW_LINE					    162 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHOCOLATE_DISTRIBUTION_PROBLEM				      CHOCOLATE_DISTRIBUTION_PROBLEM				    CHOCOLATE_DISTRIBUTION_PROBLEM				  CHOCOLATE_DISTRIBUTION_PROBLEM
--							      --							    --								  --
def findMinDiff ( arr , n , m ) :			      Disassembly of <code object findMinDiff at 0x7f33e26494b0, fi Disassembly of <code object findMinDiff at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    if ( m == 0 or n == 0 ) :				      2 0 LOAD_FAST 2 ( m )					    2 0 LOAD_FAST 2 ( m )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 46, in <module>	  Fi
    arr.sort ( )					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in findMinDiff TypeError: can
    if ( n < m ) :					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  only concatenate list (not "int") to list
	return - 1					      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
    min_diff = sys.maxsize				      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
    first = 0						      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
    last = 0						      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
    i = 0						      								    								  
    while ( i + m - 1 < n ) :				      3 >> 16 LOAD_CONST 1 ( 0 )				    3 >> 16 LOAD_CONST 1 ( 0 )					  
	diff = arr [ i + m - 1 ] - arr [ i ]		      18 RETURN_VALUE						    18 RETURN_VALUE						  
	if ( diff < min_diff ) :			      								    								  
	    min_diff = diff				      4 >> 20 LOAD_FAST 0 ( arr )				    4 >> 20 LOAD_FAST 0 ( arr )					  
	    first = i					      22 LOAD_METHOD 0 ( sort )					    22 LOAD_METHOD 0 ( sort )					  
	    last = i + m - 1				      24 CALL_METHOD 0						    24 CALL_METHOD 0						  
	i += 1						      26 POP_TOP						    26 POP_TOP							  
    return ( arr [ last ] - arr [ first ] )		      								    								  
							      5 28 LOAD_FAST 1 ( n )					    5 28 LOAD_FAST 1 ( n )					  
							      30 LOAD_FAST 2 ( m )					    30 LOAD_FAST 2 ( m )					  
							      32 COMPARE_OP 0 ( < )					    32 COMPARE_OP 0 ( < )					  
							      34 POP_JUMP_IF_FALSE 40					    34 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      6 36 LOAD_CONST 2 ( - 1 )					    6 36 LOAD_CONST 2 ( - 1 )					  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      								    								  
							      7 >> 40 LOAD_GLOBAL 1 ( sys )				    7 >> 40 LOAD_GLOBAL 1 ( sys )				  
							      42 LOAD_ATTR 2 ( maxsize )				    42 LOAD_ATTR 2 ( maxsize )					  
							      44 STORE_FAST 3 ( min_diff )				    44 STORE_FAST 3 ( min_diff )				  
							      								    								  
							      8 46 LOAD_CONST 1 ( 0 )					    8 46 LOAD_CONST 1 ( 0 )					  
							      48 STORE_FAST 4 ( first )					    48 STORE_FAST 4 ( first )					  
							      								    								  
							      9 50 LOAD_CONST 1 ( 0 )					    9 50 LOAD_CONST 1 ( 0 )					  
							      52 STORE_FAST 5 ( last )					    52 STORE_FAST 5 ( i )					  
							      								    								  
							      10 54 LOAD_CONST 1 ( 0 )					    10 54 LOAD_CONST 1 ( 0 )					  
							      56 STORE_FAST 6 ( i )					    56 STORE_FAST 6 ( i )					  
							      								    								  
							      11 58 SETUP_LOOP 80 ( to 140 )				    11 58 SETUP_LOOP 104 ( to 160 )				  
							      >> 60 LOAD_FAST 6 ( i )					    >> 60 LOAD_FAST 6 ( i )					  
							      62 LOAD_FAST 2 ( m )					    62 LOAD_FAST 2 ( m )					  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 LOAD_CONST 3 ( 1 )					    66 LOAD_CONST 3 ( 1 )					  
							      68 BINARY_SUBTRACT					    68 BINARY_SUBTRACT						  
							      70 LOAD_FAST 1 ( n )					    70 LOAD_FAST 1 ( n )					  
							      72 COMPARE_OP 0 ( < )					    72 COMPARE_OP 0 ( < )					  
							      74 POP_JUMP_IF_FALSE 138					    74 POP_JUMP_IF_FALSE 158					  
							      								    								  
							      12 76 LOAD_FAST 0 ( arr )					    12 76 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 6 ( i )					    78 LOAD_FAST 6 ( i )					  
							      80 LOAD_FAST 2 ( m )					    80 LOAD_FAST 2 ( m )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 LOAD_CONST 3 ( 1 )					    84 LOAD_CONST 3 ( 1 )					  
							      86 BINARY_SUBTRACT					    86 BINARY_SUBTRACT						  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 LOAD_FAST 0 ( arr )					    90 LOAD_FAST 0 ( arr )					  
							      92 LOAD_FAST 6 ( i )					    92 LOAD_FAST 6 ( i )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 BINARY_SUBTRACT					    96 BINARY_SUBTRACT						  
							      98 STORE_FAST 7 ( diff )					    98 STORE_FAST 7 ( diff )					  
							      								    								  
							      13 100 LOAD_FAST 7 ( diff )				    13 100 LOAD_FAST 7 ( diff )					  
							      102 LOAD_FAST 3 ( min_diff )				    102 LOAD_FAST 3 ( min_diff )				  
							      104 COMPARE_OP 0 ( < )					    104 COMPARE_OP 0 ( < )					  
							      106 POP_JUMP_IF_FALSE 128					    106 POP_JUMP_IF_FALSE 124					  
							      								    								  
							      14 108 LOAD_FAST 7 ( diff )				    14 108 LOAD_FAST 7 ( diff )					  
							      110 STORE_FAST 3 ( min_diff )				    110 STORE_FAST 3 ( min_diff )				  
							      								    								  
							      15 112 LOAD_FAST 6 ( i )					    15 112 LOAD_FAST 6 ( i )					  
							      114 STORE_FAST 4 ( first )				    114 STORE_FAST 4 ( first )					  
							      								    								  
							      16 116 LOAD_FAST 6 ( i )					    16 116 LOAD_FAST 6 ( i )					  
							      118 LOAD_FAST 2 ( m )					    118 LOAD_FAST 2 ( m )					  
							      120 BINARY_ADD						    120 BINARY_ADD						  
							      122 LOAD_CONST 3 ( 1 )					    122 LOAD_CONST 3 ( 1 )					  
							      124 BINARY_SUBTRACT					    124 BINARY_SUBTRACT						  
							      126 STORE_FAST 5 ( last )					    126 STORE_FAST 4 ( last )					  
							      								    								  
							      17 >> 128 LOAD_FAST 6 ( i )				    17 >> 128 LOAD_FAST 6 ( i )					  
							      130 LOAD_CONST 3 ( 1 )					    130 LOAD_CONST 3 ( 1 )					  
							      132 INPLACE_ADD						    132 INPLACE_ADD						  
							      134 STORE_FAST 6 ( i )					    134 STORE_FAST 6 ( i )					  
							      136 JUMP_ABSOLUTE 60					    136 JUMP_ABSOLUTE 60					  
							      >> 138 POP_BLOCK						    >> 138 POP_BLOCK						  
							      								    								  
							      18 >> 140 LOAD_FAST 0 ( arr )				    18 >> 140 LOAD_FAST 6 ( i )					  
							      142 LOAD_FAST 5 ( last )					    142 LOAD_CONST 3 ( 1 )					  
							      144 BINARY_SUBSCR						    144 INPLACE_ADD						  
							      146 LOAD_FAST 0 ( arr )					    146 STORE_FAST 6 ( i )					  
							      148 LOAD_FAST 4 ( first )					    								  
							      150 BINARY_SUBSCR						    19 148 LOAD_FAST 0 ( arr )					  
							      152 BINARY_SUBTRACT					    150 LOAD_FAST 4 ( last )					  
							      154 RETURN_VALUE NEW_LINE					    152 BINARY_SUBSCR						  
							      								    154 LOAD_FAST 0 ( arr )					  
							      								    156 LOAD_FAST 4 ( first )					  
							      								    158 BINARY_SUBSCR						  
							      								    160 BINARY_SUBTRACT						  
							      								    162 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_ODD_FACTORS_NUMBER				      FIND_SUM_ODD_FACTORS_NUMBER				    FIND_SUM_ODD_FACTORS_NUMBER					  FIND_SUM_ODD_FACTORS_NUMBER
--							      --							    --								  --
def sumofoddFactors ( n ) :				      Disassembly of <code object sumofoddFactors at 0x7f33e2649a50 Disassembly of <code object sumofoddFactors at 0x7f2b0163dc90 error : /bin/bash: line 1:  4844 Segmentation faul
    res = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    while n % 2 == 0 :					      2 STORE_FAST 1 ( res )					    2 STORE_FAST 1 ( res )					  ataset/bin/python XLM/dis_script.py --script_path
	n = n // 2					      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( 3 , int ( math.sqrt ( n ) + 1 ) ) :      3 4 SETUP_LOOP 24 ( to 30 )				    3 4 SETUP_LOOP 26 ( to 32 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_S
	count = 0					      >> 6 LOAD_FAST 0 ( n )					    >> 6 LOAD_FAST 0 ( n )					  UM_ODD_FACTORS_NUMBER.dis
	curr_sum = 1					      8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 2 )					  
	curr_term = 1					      10 BINARY_MODULO						    10 BINARY_MODULO						  
	while n % i == 0 :				      12 LOAD_CONST 3 ( 0 )					    12 LOAD_CONST 3 ( 0 )					  
	    count += 1					      14 COMPARE_OP 2 ( == )					    14 COMPARE_OP 2 ( == )					  
	    n = n // i					      16 POP_JUMP_IF_FALSE 28					    16 POP_JUMP_IF_FALSE 30					  
	    curr_term *= i				      								    								  
	    curr_sum += curr_term			      4 18 LOAD_FAST 0 ( n )					    4 18 LOAD_FAST 0 ( n )					  
	res *= curr_sum					      20 LOAD_CONST 2 ( 2 )					    20 LOAD_CONST 2 ( 2 )					  
    if n >= 2 :						      22 BINARY_FLOOR_DIVIDE					    22 BINARY_FLOOR_DIVIDE					  
	res *= ( 1 + n )				      24 STORE_FAST 0 ( n )					    24 STORE_FAST 0 ( n )					  
    return res						      26 JUMP_ABSOLUTE 6					    26 JUMP_ABSOLUTE 6						  
							      >> 28 POP_BLOCK						    28 POP_BLOCK						  
							      								    								  
							      5 >> 30 SETUP_LOOP 102 ( to 134 )				    5 >> 30 SETUP_LOOP 92 ( to 128 )				  
							      32 LOAD_GLOBAL 0 ( range )				    >> 32 LOAD_GLOBAL 0 ( range )				  
							      34 LOAD_CONST 4 ( 3 )					    34 LOAD_CONST 4 ( 3 )					  
							      36 LOAD_GLOBAL 1 ( int )					    36 LOAD_GLOBAL 1 ( int )					  
							      38 LOAD_GLOBAL 2 ( math )					    38 LOAD_GLOBAL 2 ( math )					  
							      40 LOAD_METHOD 3 ( sqrt )					    40 LOAD_METHOD 3 ( sqrt )					  
							      42 LOAD_FAST 0 ( n )					    42 LOAD_FAST 0 ( n )					  
							      44 CALL_METHOD 1						    44 CALL_METHOD 1						  
							      46 LOAD_CONST 1 ( 1 )					    46 LOAD_CONST 1 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 CALL_FUNCTION 2					    52 CALL_FUNCTION 2						  
							      54 GET_ITER						    54 GET_ITER							  
							      >> 56 FOR_ITER 74 ( to 132 )				    >> 56 FOR_ITER 66 ( to 126 )				  
							      58 STORE_FAST 2 ( i )					    58 STORE_FAST 2 ( i )					  
							      								    								  
							      6 60 LOAD_CONST 3 ( 0 )					    6 60 LOAD_CONST 3 ( 0 )					  
							      62 STORE_FAST 3 ( count )					    62 STORE_FAST 3 ( count )					  
							      								    								  
							      7 64 LOAD_CONST 1 ( 1 )					    7 64 LOAD_CONST 1 ( 1 )					  
							      66 STORE_FAST 4 ( curr_sum )				    66 STORE_FAST 4 ( curr_sum )				  
							      								    								  
							      8 68 LOAD_CONST 1 ( 1 )					    8 68 LOAD_CONST 1 ( 1 )					  
							      70 STORE_FAST 5 ( curr_term )				    70 STORE_FAST 5 ( curr_term )				  
							      								    								  
							      9 72 SETUP_LOOP 48 ( to 122 )				    9 72 SETUP_LOOP 46 ( to 124 )				  
							      >> 74 LOAD_FAST 0 ( n )					    >> 74 LOAD_FAST 0 ( n )					  
							      76 LOAD_FAST 2 ( i )					    76 LOAD_FAST 2 ( i )					  
							      78 BINARY_MODULO						    78 BINARY_MODULO						  
							      80 LOAD_CONST 3 ( 0 )					    80 LOAD_CONST 3 ( 0 )					  
							      82 COMPARE_OP 2 ( == )					    82 COMPARE_OP 2 ( == )					  
							      84 POP_JUMP_IF_FALSE 120					    84 POP_JUMP_IF_FALSE 122					  
							      								    								  
							      10 86 LOAD_FAST 3 ( count )				    10 86 LOAD_FAST 3 ( count )					  
							      88 LOAD_CONST 1 ( 1 )					    88 LOAD_CONST 1 ( 1 )					  
							      90 INPLACE_ADD						    90 INPLACE_ADD						  
							      92 STORE_FAST 3 ( count )					    92 STORE_FAST 3 ( count )					  
							      								    								  
							      11 94 LOAD_FAST 0 ( n )					    11 94 LOAD_FAST 0 ( n )					  
							      96 LOAD_FAST 2 ( i )					    96 LOAD_FAST 2 ( i )					  
							      98 BINARY_FLOOR_DIVIDE					    98 BINARY_FLOOR_DIVIDE					  
							      100 STORE_FAST 0 ( n )					    100 STORE_FAST 0 ( n )					  
							      								    								  
							      12 102 LOAD_FAST 5 ( curr_term )				    12 102 LOAD_FAST 4 ( curr_sum )				  
							      104 LOAD_FAST 2 ( i )					    104 LOAD_FAST 5 ( curr_term )				  
							      106 INPLACE_MULTIPLY					    106 INPLACE_ADD						  
							      108 STORE_FAST 5 ( curr_term )				    108 STORE_FAST 4 ( curr_sum )				  
							      								    110 JUMP_ABSOLUTE 74					  
							      13 110 LOAD_FAST 4 ( curr_sum )				    >> 112 POP_BLOCK						  
							      112 LOAD_FAST 5 ( curr_term )				    								  
							      114 INPLACE_ADD						    13 >> 114 LOAD_FAST 1 ( res )				  
							      116 STORE_FAST 4 ( curr_sum )				    116 LOAD_FAST 4 ( curr_sum )				  
							      118 JUMP_ABSOLUTE 74					    118 INPLACE_MULTIPLY					  
							      >> 120 POP_BLOCK						    120 STORE_FAST 1 ( res )					  
							      								    								  
							      14 >> 122 LOAD_FAST 1 ( res )				    14 >> 122 LOAD_FAST 0 ( n )					  
							      124 LOAD_FAST 4 ( curr_sum )				    124 LOAD_CONST 2 ( 2 )					  
							      126 INPLACE_MULTIPLY					    126 COMPARE_OP 5 ( >= )					  
							      128 STORE_FAST 1 ( res )					    128 POP_JUMP_IF_FALSE 144					  
							      130 JUMP_ABSOLUTE 56					    								  
							      >> 132 POP_BLOCK						    15 130 LOAD_FAST 1 ( res )					  
							      								    132 LOAD_CONST 1 ( 1 )					  
							      15 >> 134 LOAD_FAST 0 ( n )				    134 LOAD_FAST 0 ( n )					  
							      136 LOAD_CONST 2 ( 2 )					    136 BINARY_ADD						  
							      138 COMPARE_OP 5 ( >= )					    138 INPLACE_MULTIPLY					  
							      140 POP_JUMP_IF_FALSE 154					    140 STORE_FAST 1 ( res )					  
							      								    142 JUMP_ABSOLUTE 32					  
							      16 142 LOAD_FAST 1 ( res )				    >> 144 POP_BLOCK						  
							      144 LOAD_CONST 1 ( 1 )					    								  
							      146 LOAD_FAST 0 ( n )					    16 >> 146 LOAD_FAST 1 ( res )				  
							      148 BINARY_ADD						    148 RETURN_VALUE NEW_LINE					  
							      150 INPLACE_MULTIPLY					    								  
							      152 STORE_FAST 1 ( res )					    								  
							      								    								  
							      17 >> 154 LOAD_FAST 1 ( res )				    								  
							      156 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	      DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	    DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M		  DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M
--							      --							    --								  --
def numberofways ( n , m ) :				      Disassembly of <code object numberofways at 0x7f33e2644930, f Disassembly of <code object numberofways at 0x7f2b01639660, f script_not_found : None
    dp = np.zeros ( ( n + 2 , n + 2 ) )			      2 0 LOAD_GLOBAL 0 ( np )					    2 0 LOAD_GLOBAL 0 ( np )					  
    dp [ 0 ] [ n + 1 ] = 1				      2 LOAD_METHOD 1 ( zeros )					    2 LOAD_METHOD 1 ( zeros )					  
    for k in range ( n , m - 1 , - 1 ) :		      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
	for i in range ( n + 1 ) :			      6 LOAD_CONST 1 ( 2 )					    6 LOAD_CONST 1 ( 2 )					  
	    dp [ i ] [ k ] = dp [ i ] [ k + 1 ]		      8 BINARY_ADD						    8 BINARY_ADD						  
	    if ( i - k >= 0 ) :				      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
		dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i -  12 LOAD_CONST 1 ( 2 )					    12 LOAD_CONST 1 ( 2 )					  
    return dp [ n ] [ m ]				      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 BUILD_TUPLE 2						    16 BUILD_TUPLE 2						  
							      18 CALL_METHOD 1						    18 CALL_METHOD 1						  
							      20 STORE_FAST 2 ( dp )					    20 STORE_FAST 2 ( dp )					  
							      								    								  
							      3 22 LOAD_CONST 2 ( 1 )					    3 22 LOAD_CONST 2 ( 1 )					  
							      24 LOAD_FAST 2 ( dp )					    24 LOAD_FAST 2 ( dp )					  
							      26 LOAD_CONST 3 ( 0 )					    26 LOAD_CONST 3 ( 0 )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 0 ( n )					    30 LOAD_FAST 0 ( n )					  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 STORE_SUBSCR						    36 STORE_SUBSCR						  
							      								    								  
							      4 38 SETUP_LOOP 118 ( to 158 )				    4 38 SETUP_LOOP 120 ( to 146 )				  
							      40 LOAD_GLOBAL 2 ( range )				    40 LOAD_GLOBAL 2 ( range )					  
							      42 LOAD_FAST 0 ( n )					    42 LOAD_FAST 0 ( n )					  
							      44 LOAD_FAST 1 ( m )					    44 LOAD_FAST 1 ( m )					  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 2 ( 1 )					  
							      48 BINARY_SUBTRACT					    48 BINARY_SUBTRACT						  
							      50 LOAD_CONST 4 ( - 1 )					    50 LOAD_CONST 4 ( - 1 )					  
							      52 CALL_FUNCTION 3					    52 CALL_FUNCTION 3						  
							      54 GET_ITER						    54 GET_ITER							  
							      >> 56 FOR_ITER 98 ( to 156 )				    >> 56 FOR_ITER 112 ( to 144 )				  
							      58 STORE_FAST 3 ( k )					    58 STORE_FAST 3 ( k )					  
							      								    								  
							      5 60 SETUP_LOOP 92 ( to 154 )				    5 60 SETUP_LOOP 112 ( to 142 )				  
							      62 LOAD_GLOBAL 2 ( range )				    62 LOAD_GLOBAL 2 ( range )					  
							      64 LOAD_FAST 0 ( n )					    64 LOAD_FAST 0 ( n )					  
							      66 LOAD_CONST 2 ( 1 )					    66 LOAD_CONST 2 ( 1 )					  
							      68 BINARY_ADD						    68 BINARY_ADD						  
							      70 CALL_FUNCTION 1					    70 CALL_FUNCTION 1						  
							      72 GET_ITER						    72 GET_ITER							  
							      >> 74 FOR_ITER 76 ( to 152 )				    >> 74 FOR_ITER 100 ( to 140 )				  
							      76 STORE_FAST 4 ( i )					    76 STORE_FAST 4 ( i )					  
							      								    								  
							      6 78 LOAD_FAST 2 ( dp )					    6 78 LOAD_FAST 2 ( dp )					  
							      80 LOAD_FAST 4 ( i )					    80 LOAD_FAST 4 ( i )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 3 ( k )					    84 LOAD_FAST 3 ( k )					  
							      86 LOAD_CONST 2 ( 1 )					    86 LOAD_CONST 2 ( 1 )					  
							      88 BINARY_ADD						    88 BINARY_ADD						  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 LOAD_FAST 2 ( dp )					    92 LOAD_FAST 2 ( dp )					  
							      94 LOAD_FAST 4 ( i )					    94 LOAD_FAST 4 ( i )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_FAST 3 ( k )					    98 LOAD_FAST 3 ( k )					  
							      100 STORE_SUBSCR						    100 STORE_SUBSCR						  
							      								    								  
							      7 102 LOAD_FAST 4 ( i )					    7 102 LOAD_FAST 4 ( i )					  
							      104 LOAD_FAST 3 ( k )					    104 LOAD_FAST 3 ( k )					  
							      106 BINARY_SUBTRACT					    106 BINARY_SUBTRACT						  
							      108 LOAD_CONST 3 ( 0 )					    108 LOAD_CONST 3 ( 0 )					  
							      110 COMPARE_OP 5 ( >= )					    110 COMPARE_OP 5 ( >= )					  
							      112 POP_JUMP_IF_FALSE 74					    112 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      8 114 LOAD_FAST 2 ( dp )					    8 114 LOAD_FAST 2 ( dp )					  
							      116 LOAD_FAST 4 ( i )					    116 LOAD_FAST 4 ( i )					  
							      118 BINARY_SUBSCR						    118 BINARY_SUBSCR						  
							      120 LOAD_FAST 3 ( k )					    120 LOAD_FAST 3 ( k )					  
							      122 BINARY_SUBSCR						    122 BINARY_SUBSCR						  
							      124 LOAD_FAST 2 ( dp )					    124 LOAD_FAST 2 ( dp )					  
							      126 LOAD_FAST 4 ( i )					    126 LOAD_FAST 4 ( i )					  
							      128 LOAD_FAST 3 ( k )					    128 LOAD_FAST 3 ( k )					  
							      130 BINARY_SUBTRACT					    130 BINARY_SUBTRACT						  
							      132 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      134 LOAD_FAST 3 ( k )					    134 LOAD_FAST 3 ( k )					  
							      136 BINARY_SUBSCR						    136 BINARY_SUBSCR						  
							      138 BINARY_ADD						    138 BINARY_ADD						  
							      140 LOAD_FAST 2 ( dp )					    140 LOAD_FAST 2 ( dp )					  
							      142 LOAD_FAST 4 ( i )					    142 LOAD_FAST 4 ( i )					  
							      144 BINARY_SUBSCR						    144 BINARY_SUBSCR						  
							      146 LOAD_FAST 3 ( k )					    146 LOAD_FAST 3 ( k )					  
							      148 STORE_SUBSCR						    148 STORE_SUBSCR						  
							      150 JUMP_ABSOLUTE 74					    150 JUMP_ABSOLUTE 74					  
							      >> 152 POP_BLOCK						    >> 152 POP_BLOCK						  
							      >> 154 JUMP_ABSOLUTE 56					    >> 154 JUMP_ABSOLUTE 56					  
							      >> 156 POP_BLOCK						    >> 156 POP_BLOCK						  
							      								    								  
							      9 >> 158 LOAD_FAST 2 ( dp )				    9 >> 158 LOAD_FAST 2 ( dp )					  
							      160 LOAD_FAST 0 ( n )					    160 LOAD_FAST 0 ( n )					  
							      162 BINARY_SUBSCR						    162 BINARY_SUBSCR						  
							      164 LOAD_FAST 1 ( m )					    164 LOAD_FAST 1 ( m )					  
							      166 BINARY_SUBSCR						    166 BINARY_SUBSCR						  
							      168 RETURN_VALUE NEW_LINE					    168 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY  REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY  REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY  REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY
--							      --							    --								  --
def minRemove ( a , b , n , m ) :			      Disassembly of <code object minRemove at 0x7f33e2649a50, file Disassembly of <code object minRemove at 0x7f2b0163dc90, file error : /bin/bash: line 1:  4854 Segmentation faul
    countA = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    countB = dict ( )					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( n ) :				      4 STORE_FAST 4 ( countA )					    4 STORE_FAST 4 ( countA )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	countA [ a [ i ] ] = countA.get ( a [ i ] , 0 ) + 1   								    								  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/REMOVE
    for i in range ( n ) :				      3 6 LOAD_GLOBAL 0 ( dict )				    3 6 LOAD_GLOBAL 0 ( dict )					  _MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_A
	countB [ b [ i ] ] = countB.get ( b [ i ] , 0 ) + 1   8 CALL_FUNCTION 0						    8 CALL_FUNCTION 0						  RRAY.dis
    res = 0						      10 STORE_FAST 5 ( countB )				    10 STORE_FAST 5 ( countB )					  
    for x in countA :					      								    								  
	if x in countB.keys ( ) :			      4 12 SETUP_LOOP 44 ( to 58 )				    4 12 SETUP_LOOP 46 ( to 60 )				  
	    res += min ( countA [ x ] , countB [ x ] )	      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
    return res						      16 LOAD_FAST 2 ( n )					    16 LOAD_FAST 2 ( n )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 32 ( to 56 )				    >> 22 FOR_ITER 34 ( to 58 )					  
							      24 STORE_FAST 6 ( i )					    24 STORE_FAST 6 ( i )					  
							      								    								  
							      5 26 LOAD_FAST 4 ( countA )				    5 26 LOAD_FAST 4 ( countA )					  
							      28 LOAD_METHOD 2 ( get )					    28 LOAD_METHOD 2 ( get )					  
							      30 LOAD_FAST 0 ( a )					    30 LOAD_FAST 0 ( a )					  
							      32 LOAD_FAST 6 ( i )					    32 LOAD_FAST 6 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 CALL_METHOD 2						    38 CALL_METHOD 2						  
							      40 LOAD_CONST 2 ( 1 )					    40 LOAD_CONST 2 ( 1 )					  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 LOAD_FAST 4 ( countA )					    44 LOAD_FAST 5 ( countA )					  
							      46 LOAD_FAST 0 ( a )					    46 LOAD_FAST 0 ( a )					  
							      48 LOAD_FAST 6 ( i )					    48 LOAD_FAST 6 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 STORE_SUBSCR						    52 STORE_SUBSCR						  
							      54 JUMP_ABSOLUTE 22					    54 JUMP_ABSOLUTE 22						  
							      >> 56 POP_BLOCK						    >> 56 POP_BLOCK						  
							      								    								  
							      6 >> 58 SETUP_LOOP 44 ( to 104 )				    6 58 SETUP_LOOP 40 ( to 108 )				  
							      60 LOAD_GLOBAL 1 ( range )				    60 LOAD_GLOBAL 1 ( range )					  
							      62 LOAD_FAST 2 ( n )					    62 LOAD_FAST 2 ( n )					  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 GET_ITER						    66 GET_ITER							  
							      >> 68 FOR_ITER 32 ( to 102 )				    >> 68 FOR_ITER 28 ( to 106 )				  
							      70 STORE_FAST 6 ( i )					    70 STORE_FAST 6 ( i )					  
							      								    								  
							      7 72 LOAD_FAST 5 ( countB )				    7 72 LOAD_FAST 4 ( countB )					  
							      74 LOAD_METHOD 2 ( get )					    74 LOAD_METHOD 2 ( get )					  
							      76 LOAD_FAST 1 ( b )					    76 LOAD_FAST 1 ( b )					  
							      78 LOAD_FAST 6 ( i )					    78 LOAD_FAST 6 ( i )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 LOAD_CONST 1 ( 0 )					    82 LOAD_CONST 1 ( 0 )					  
							      84 CALL_METHOD 2						    84 CALL_METHOD 2						  
							      86 LOAD_CONST 2 ( 1 )					    86 LOAD_CONST 2 ( 1 )					  
							      88 BINARY_ADD						    88 BINARY_ADD						  
							      90 LOAD_FAST 5 ( countB )					    90 LOAD_FAST 5 ( countB )					  
							      92 LOAD_FAST 1 ( b )					    92 LOAD_FAST 1 ( b )					  
							      94 LOAD_FAST 6 ( i )					    94 LOAD_FAST 6 ( i )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 STORE_SUBSCR						    98 STORE_SUBSCR						  
							      100 JUMP_ABSOLUTE 68					    100 JUMP_ABSOLUTE 68					  
							      >> 102 POP_BLOCK						    >> 102 POP_BLOCK						  
							      								    								  
							      8 >> 104 LOAD_CONST 1 ( 0 )				    8 >> 104 LOAD_CONST 1 ( 0 )					  
							      106 STORE_FAST 7 ( res )					    106 STORE_FAST 7 ( res )					  
							      								    								  
							      9 108 SETUP_LOOP 46 ( to 156 )				    9 108 SETUP_LOOP 52 ( to 162 )				  
							      110 LOAD_FAST 4 ( countA )				    110 LOAD_FAST 5 ( countA )					  
							      112 GET_ITER						    112 GET_ITER						  
							      >> 114 FOR_ITER 38 ( to 154 )				    >> 114 FOR_ITER 44 ( to 160 )				  
							      116 STORE_FAST 8 ( x )					    116 STORE_FAST 8 ( x )					  
							      								    								  
							      10 118 LOAD_FAST 8 ( x )					    10 118 LOAD_FAST 8 ( x )					  
							      120 LOAD_FAST 5 ( countB )				    120 LOAD_FAST 4 ( countB )					  
							      122 LOAD_METHOD 3 ( keys )				    122 LOAD_METHOD 3 ( keys )					  
							      124 CALL_METHOD 0						    124 CALL_METHOD 0						  
							      126 COMPARE_OP 6 ( in )					    126 COMPARE_OP 6 ( in )					  
							      128 POP_JUMP_IF_FALSE 114					    128 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      11 130 LOAD_FAST 7 ( res )				    11 130 LOAD_FAST 7 ( res )					  
							      132 LOAD_GLOBAL 4 ( min )					    132 LOAD_GLOBAL 4 ( min )					  
							      134 LOAD_FAST 4 ( countA )				    134 LOAD_FAST 4 ( countA )					  
							      136 LOAD_FAST 8 ( x )					    136 LOAD_FAST 8 ( x )					  
							      138 BINARY_SUBSCR						    138 BINARY_SUBSCR						  
							      140 LOAD_FAST 5 ( countB )				    140 LOAD_FAST 5 ( countB )					  
							      142 LOAD_FAST 8 ( x )					    142 LOAD_FAST 8 ( x )					  
							      144 BINARY_SUBSCR						    144 BINARY_SUBSCR						  
							      146 CALL_FUNCTION 2					    146 CALL_FUNCTION 2						  
							      148 INPLACE_ADD						    148 INPLACE_ADD						  
							      150 STORE_FAST 7 ( res )					    150 STORE_FAST 7 ( res )					  
							      152 JUMP_ABSOLUTE 114					    152 JUMP_ABSOLUTE 114					  
							      >> 154 POP_BLOCK						    >> 154 POP_BLOCK						  
							      								    								  
							      12 >> 156 LOAD_FAST 7 ( res )				    12 >> 156 LOAD_FAST 7 ( res )				  
							      158 RETURN_VALUE NEW_LINE					    158 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY			      SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY			    SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY			  SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY
--							      --							    --								  --
def manipulated_seive ( N ) :				      Disassembly of <code object manipulated_seive at 0x7f33e26449 Disassembly of <code object manipulated_seive at 0x7f2b0164d8 script_not_found : None
    isprime [ 0 ] = isprime [ 1 ] = False		      2 0 LOAD_CONST 1 ( False )				    2 0 LOAD_CONST 1 ( False )					  
    for i in range ( 2 , N ) :				      2 DUP_TOP							    2 LOAD_GLOBAL 0 ( isprime )					  
	if isprime [ i ] == True :			      4 LOAD_GLOBAL 0 ( isprime )				    4 LOAD_CONST 2 ( 1 )					  
	    prime.append ( i )				      6 LOAD_CONST 2 ( 0 )					    6 STORE_SUBSCR						  
	    SPF [ i ] = i				      8 STORE_SUBSCR						    								  
	j = 0						      10 LOAD_GLOBAL 0 ( isprime )				    3 8 SETUP_LOOP 118 ( to 128 )				  
	while ( j < len ( prime ) and i * prime [ j ] < N and 12 LOAD_CONST 3 ( 1 )					    10 LOAD_GLOBAL 1 ( range )					  
	    isprime [ i * prime [ j ] ] = False		      14 STORE_SUBSCR						    12 LOAD_CONST 3 ( 2 )					  
	    SPF [ i * prime [ j ] ] = prime [ j ]	      								    14 LOAD_FAST 0 ( N )					  
	    j += 1					      3 16 SETUP_LOOP 146 ( to 164 )				    16 CALL_FUNCTION 2						  
							      18 LOAD_GLOBAL 1 ( range )				    18 GET_ITER							  
							      20 LOAD_CONST 4 ( 2 )					    >> 20 FOR_ITER 106 ( to 126 )				  
							      22 LOAD_FAST 0 ( N )					    22 STORE_FAST 1 ( i )					  
							      24 CALL_FUNCTION 2					    								  
							      26 GET_ITER						    4 24 LOAD_GLOBAL 0 ( isprime )				  
							      >> 28 FOR_ITER 132 ( to 162 )				    26 LOAD_FAST 1 ( i )					  
							      30 STORE_FAST 1 ( i )					    28 BINARY_SUBSCR						  
							      								    30 LOAD_CONST 4 ( True )					  
							      4 32 LOAD_GLOBAL 0 ( isprime )				    32 COMPARE_OP 2 ( == )					  
							      34 LOAD_FAST 1 ( i )					    34 POP_JUMP_IF_FALSE 20					  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_CONST 5 ( True )					    5 36 LOAD_GLOBAL 2 ( prime )				  
							      40 COMPARE_OP 2 ( == )					    38 LOAD_METHOD 3 ( append )					  
							      42 POP_JUMP_IF_FALSE 62					    40 LOAD_FAST 1 ( i )					  
							      								    42 CALL_METHOD 1						  
							      5 44 LOAD_GLOBAL 2 ( prime )				    44 POP_TOP							  
							      46 LOAD_METHOD 3 ( append )				    								  
							      48 LOAD_FAST 1 ( i )					    6 46 LOAD_FAST 1 ( i )					  
							      50 CALL_METHOD 1						    48 LOAD_GLOBAL 4 ( SPF )					  
							      52 POP_TOP						    50 LOAD_FAST 1 ( i )					  
							      								    52 STORE_SUBSCR						  
							      6 54 LOAD_FAST 1 ( i )					    54 JUMP_ABSOLUTE 20						  
							      56 LOAD_GLOBAL 4 ( SPF )					    >> 56 POP_BLOCK						  
							      58 LOAD_FAST 1 ( i )					    								  
							      60 STORE_SUBSCR						    7 58 LOAD_CONST 5 ( 0 )					  
							      								    60 STORE_FAST 2 ( j )					  
							      7 >> 62 LOAD_CONST 2 ( 0 )				    								  
							      64 STORE_FAST 2 ( j )					    8 62 SETUP_LOOP 94 ( to 124 )				  
							      								    >> 64 LOAD_FAST 2 ( j )					  
							      8 66 SETUP_LOOP 92 ( to 160 )				    66 LOAD_GLOBAL 5 ( len )					  
							      >> 68 LOAD_FAST 2 ( j )					    68 LOAD_GLOBAL 2 ( prime )					  
							      70 LOAD_GLOBAL 5 ( len )					    70 CALL_FUNCTION 1						  
							      72 LOAD_GLOBAL 2 ( prime )				    72 COMPARE_OP 0 ( < )					  
							      74 CALL_FUNCTION 1					    74 POP_JUMP_IF_FALSE 122					  
							      76 COMPARE_OP 0 ( < )					    76 LOAD_FAST 1 ( i )					  
							      78 POP_JUMP_IF_FALSE 158					    78 LOAD_GLOBAL 2 ( prime )					  
							      80 LOAD_FAST 1 ( i )					    80 LOAD_FAST 2 ( j )					  
							      82 LOAD_GLOBAL 2 ( prime )				    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 2 ( j )					    84 BINARY_MULTIPLY						  
							      86 BINARY_SUBSCR						    86 LOAD_FAST 0 ( N )					  
							      88 BINARY_MULTIPLY					    88 COMPARE_OP 0 ( < )					  
							      90 LOAD_FAST 0 ( N )					    90 POP_JUMP_IF_FALSE 122					  
							      92 COMPARE_OP 0 ( < )					    92 LOAD_GLOBAL 2 ( prime )					  
							      94 POP_JUMP_IF_FALSE 158					    94 LOAD_FAST 2 ( j )					  
							      96 LOAD_GLOBAL 2 ( prime )				    96 BINARY_SUBSCR						  
							      98 LOAD_FAST 2 ( j )					    98 LOAD_FAST 3 ( SPF )					  
							      100 BINARY_SUBSCR						    100 LOAD_FAST 1 ( i )					  
							      102 LOAD_GLOBAL 4 ( SPF )					    102 BINARY_SUBSCR						  
							      104 LOAD_FAST 1 ( i )					    104 COMPARE_OP 1 ( <= )					  
							      106 BINARY_SUBSCR						    106 POP_JUMP_IF_FALSE 122					  
							      108 COMPARE_OP 1 ( <= )					    								  
							      110 POP_JUMP_IF_FALSE 158					    9 108 LOAD_CONST 1 ( False )				  
							      								    110 LOAD_GLOBAL 0 ( isprime )				  
							      9 112 LOAD_CONST 1 ( False )				    112 LOAD_FAST 1 ( i )					  
							      114 LOAD_GLOBAL 0 ( isprime )				    114 BINARY_SUBSCR						  
							      116 LOAD_FAST 1 ( i )					    116 STORE_SUBSCR						  
							      118 LOAD_GLOBAL 2 ( prime )				    								  
							      120 LOAD_FAST 2 ( j )					    10 118 LOAD_CONST 1 ( False )				  
							      122 BINARY_SUBSCR						    120 LOAD_GLOBAL 0 ( isprime )				  
							      124 BINARY_MULTIPLY					    122 LOAD_FAST 1 ( i )					  
							      126 STORE_SUBSCR						    124 LOAD_GLOBAL 2 ( prime )					  
							      								    126 LOAD_FAST 2 ( j )					  
							      10 128 LOAD_GLOBAL 2 ( prime )				    128 BINARY_SUBSCR						  
							      130 LOAD_FAST 2 ( j )					    130 BINARY_MULTIPLY						  
							      132 BINARY_SUBSCR						    132 STORE_SUBSCR						  
							      134 LOAD_GLOBAL 4 ( SPF )					    								  
							      136 LOAD_FAST 1 ( i )					    11 134 LOAD_GLOBAL 2 ( prime )				  
							      138 LOAD_GLOBAL 2 ( prime )				    136 LOAD_FAST 2 ( j )					  
							      140 LOAD_FAST 2 ( j )					    138 BINARY_SUBSCR						  
							      142 BINARY_SUBSCR						    140 LOAD_GLOBAL 4 ( SPF )					  
							      144 BINARY_MULTIPLY					    142 LOAD_FAST 1 ( i )					  
							      146 STORE_SUBSCR						    144 LOAD_GLOBAL 2 ( prime )					  
							      								    146 LOAD_FAST 2 ( j )					  
							      11 148 LOAD_FAST 2 ( j )					    148 BINARY_SUBSCR						  
							      150 LOAD_CONST 3 ( 1 )					    150 BINARY_MULTIPLY						  
							      152 INPLACE_ADD						    152 STORE_SUBSCR						  
							      154 STORE_FAST 2 ( j )					    								  
							      156 JUMP_ABSOLUTE 68					    12 154 LOAD_FAST 2 ( j )					  
							      >> 158 POP_BLOCK						    156 LOAD_CONST 2 ( 1 )					  
							      >> 160 JUMP_ABSOLUTE 28					    158 INPLACE_ADD						  
							      >> 162 POP_BLOCK						    160 STORE_FAST 2 ( j )					  
							      >> 164 LOAD_CONST 0 ( None )				    162 JUMP_ABSOLUTE 64					  
							      166 RETURN_VALUE NEW_LINE					    >> 164 POP_BLOCK						  
							      								    >> 166 LOAD_CONST 0 ( None )				  
							      								    168 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F
--							      --							    --								  --
def CountSubString ( Str , n ) :			      Disassembly of <code object CountSubString at 0x7f33e2653ed0, Disassembly of <code object CountSubString at 0x7f2b0163dc90, script_not_found : None
    ans = ( n * ( n + 1 ) ) // 2			      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
    a_index = 0						      2 LOAD_FAST 1 ( n )					    2 LOAD_FAST 1 ( n )						  
    b_index = 0						      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
    c_index = 0						      6 BINARY_ADD						    6 BINARY_ADD						  
    for i in range ( n ) :				      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
	if ( Str [ i ] == 'a' ) :			      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
	    a_index = i + 1				      12 BINARY_FLOOR_DIVIDE					    12 BINARY_FLOOR_DIVIDE					  
	    ans -= min ( b_index , c_index )		      14 STORE_FAST 2 ( ans )					    14 STORE_FAST 2 ( ans )					  
	elif ( Str [ i ] == 'b' ) :			      								    								  
	    b_index = i + 1				      3 16 LOAD_CONST 3 ( 0 )					    3 16 LOAD_CONST 3 ( 0 )					  
	    ans -= min ( a_index , c_index )		      18 STORE_FAST 3 ( a_index )				    18 STORE_FAST 3 ( a_index )					  
	else :						      								    								  
	    c_index = i + 1				      4 20 LOAD_CONST 3 ( 0 )					    4 20 LOAD_CONST 3 ( 0 )					  
	    ans -= min ( a_index , b_index )		      22 STORE_FAST 4 ( b_index )				    22 STORE_FAST 4 ( c_index )					  
    return ans						      								    								  
							      5 24 LOAD_CONST 3 ( 0 )					    5 24 LOAD_CONST 3 ( 0 )					  
							      26 STORE_FAST 5 ( c_index )				    26 STORE_FAST 5 ( c_index )					  
							      								    								  
							      6 28 SETUP_LOOP 110 ( to 140 )				    6 28 LOAD_CONST 3 ( 0 )					  
							      30 LOAD_GLOBAL 0 ( range )				    30 STORE_FAST 6 ( c_index )					  
							      32 LOAD_FAST 1 ( n )					    								  
							      34 CALL_FUNCTION 1					    7 32 SETUP_LOOP 76 ( to 112 )				  
							      36 GET_ITER						    34 LOAD_GLOBAL 0 ( range )					  
							      >> 38 FOR_ITER 98 ( to 138 )				    36 LOAD_FAST 1 ( n )					  
							      40 STORE_FAST 6 ( i )					    38 CALL_FUNCTION 1						  
							      								    40 GET_ITER							  
							      7 42 LOAD_FAST 0 ( Str )					    >> 42 FOR_ITER 60 ( to 110 )				  
							      44 LOAD_FAST 6 ( i )					    44 STORE_FAST 7 ( i )					  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_CONST 4 ( 'a' )					    8 46 LOAD_FAST 0 ( Str )					  
							      50 COMPARE_OP 2 ( == )					    48 LOAD_FAST 7 ( i )					  
							      52 POP_JUMP_IF_FALSE 78					    50 BINARY_SUBSCR						  
							      								    52 LOAD_CONST 4 ( 'a' )					  
							      8 54 LOAD_FAST 6 ( i )					    54 COMPARE_OP 2 ( == )					  
							      56 LOAD_CONST 1 ( 1 )					    56 POP_JUMP_IF_FALSE 78					  
							      58 BINARY_ADD						    								  
							      60 STORE_FAST 3 ( a_index )				    9 58 LOAD_FAST 7 ( i )					  
							      								    60 LOAD_CONST 1 ( 1 )					  
							      9 62 LOAD_FAST 2 ( ans )					    62 BINARY_ADD						  
							      64 LOAD_GLOBAL 1 ( min )					    64 STORE_FAST 3 ( a_index )					  
							      66 LOAD_FAST 4 ( b_index )				    								  
							      68 LOAD_FAST 5 ( c_index )				    10 66 LOAD_FAST 2 ( ans )					  
							      70 CALL_FUNCTION 2					    68 LOAD_GLOBAL 1 ( min )					  
							      72 INPLACE_SUBTRACT					    70 LOAD_FAST 3 ( b_index )					  
							      74 STORE_FAST 2 ( ans )					    72 LOAD_FAST 5 ( c_index )					  
							      76 JUMP_ABSOLUTE 38					    74 CALL_FUNCTION 2						  
							      								    76 INPLACE_SUBTRACT						  
							      10 >> 78 LOAD_FAST 0 ( Str )				    78 STORE_FAST 2 ( ans )					  
							      80 LOAD_FAST 6 ( i )					    80 JUMP_ABSOLUTE 42						  
							      82 BINARY_SUBSCR						    								  
							      84 LOAD_CONST 5 ( 'b' )					    11 >> 82 LOAD_FAST 0 ( Str )				  
							      86 COMPARE_OP 2 ( == )					    84 LOAD_FAST 7 ( i )					  
							      88 POP_JUMP_IF_FALSE 114					    86 BINARY_SUBSCR						  
							      								    88 LOAD_CONST 5 ( 'b' )					  
							      11 90 LOAD_FAST 6 ( i )					    90 COMPARE_OP 2 ( == )					  
							      92 LOAD_CONST 1 ( 1 )					    92 POP_JUMP_IF_FALSE 120					  
							      94 BINARY_ADD						    								  
							      96 STORE_FAST 4 ( b_index )				    12 94 LOAD_FAST 7 ( i )					  
							      								    96 LOAD_CONST 1 ( 1 )					  
							      12 98 LOAD_FAST 2 ( ans )					    98 BINARY_ADD						  
							      100 LOAD_GLOBAL 1 ( min )					    100 STORE_FAST 3 ( b_index )				  
							      102 LOAD_FAST 3 ( a_index )				    								  
							      104 LOAD_FAST 5 ( c_index )				    13 102 LOAD_FAST 2 ( ans )					  
							      106 CALL_FUNCTION 2					    104 LOAD_GLOBAL 1 ( min )					  
							      108 INPLACE_SUBTRACT					    106 LOAD_FAST 3 ( a_index )					  
							      110 STORE_FAST 2 ( ans )					    108 LOAD_FAST 5 ( c_index )					  
							      112 JUMP_ABSOLUTE 38					    110 CALL_FUNCTION 2						  
							      								    112 INPLACE_SUBTRACT					  
							      14 >> 114 LOAD_FAST 6 ( i )				    114 STORE_FAST 2 ( ans )					  
							      116 LOAD_CONST 1 ( 1 )					    116 JUMP_ABSOLUTE 42					  
							      118 BINARY_ADD						    								  
							      120 STORE_FAST 5 ( c_index )				    15 >> 118 LOAD_FAST 7 ( i )					  
							      								    120 LOAD_CONST 1 ( 1 )					  
							      15 122 LOAD_FAST 2 ( ans )				    122 BINARY_ADD						  
							      124 LOAD_GLOBAL 1 ( min )					    124 STORE_FAST 6 ( c_index )				  
							      126 LOAD_FAST 3 ( a_index )				    								  
							      128 LOAD_FAST 4 ( b_index )				    16 126 LOAD_FAST 2 ( ans )					  
							      130 CALL_FUNCTION 2					    128 LOAD_GLOBAL 1 ( min )					  
							      132 INPLACE_SUBTRACT					    130 LOAD_FAST 3 ( a_index )					  
							      134 STORE_FAST 2 ( ans )					    132 LOAD_FAST 3 ( b_index )					  
							      136 JUMP_ABSOLUTE 38					    134 CALL_FUNCTION 2						  
							      >> 138 POP_BLOCK						    136 INPLACE_SUBTRACT					  
							      								    138 STORE_FAST 2 ( ans )					  
							      16 >> 140 LOAD_FAST 2 ( ans )				    140 JUMP_ABSOLUTE 42					  
							      142 RETURN_VALUE NEW_LINE					    >> 142 POP_BLOCK						  
							      								    								  
							      								    17 >> 144 LOAD_FAST 2 ( ans )				  
							      								    146 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> E_OFFERINGS					      <unk> E_OFFERINGS						    <unk> E_OFFERINGS						  <unk> E_OFFERINGS
--							      --							    --								  --
def offeringNumber ( n , templeHeight ) :		      Disassembly of <code object offeringNumber at 0x7f33e2649a50, Disassembly of <code object offeringNumber at 0x7f2b0163dc90, script_not_found : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( sum )					    2 STORE_FAST 2 ( sum )					  
	left = 0					      								    								  
	right = 0					      3 4 SETUP_LOOP 156 ( to 162 )				    3 4 SETUP_LOOP 132 ( to 138 )				  
	for j in range ( i - 1 , - 1 , - 1 ) :		      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    if ( templeHeight [ j ] < templeHeight [ j + 1 ]  8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
		left += 1				      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
	    else :					      12 GET_ITER						    12 GET_ITER							  
		break					      >> 14 FOR_ITER 144 ( to 160 )				    >> 14 FOR_ITER 124 ( to 136 )				  
	for j in range ( i + 1 , n ) :			      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
	    if ( templeHeight [ j ] < templeHeight [ j - 1 ]  								    								  
		right += 1				      4 18 LOAD_CONST 1 ( 0 )					    4 18 LOAD_CONST 1 ( 0 )					  
	    else :					      20 STORE_FAST 4 ( left )					    20 STORE_FAST 4 ( left )					  
		break					      								    								  
	sum += max ( right , left ) + 1			      5 22 LOAD_CONST 1 ( 0 )					    5 22 LOAD_CONST 1 ( 0 )					  
    return sum						      24 STORE_FAST 5 ( right )					    24 STORE_FAST 5 ( right )					  
							      								    								  
							      6 26 SETUP_LOOP 56 ( to 84 )				    6 26 SETUP_LOOP 54 ( to 86 )				  
							      28 LOAD_GLOBAL 0 ( range )				    28 LOAD_GLOBAL 0 ( range )					  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 3 ( i )					  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 LOAD_CONST 3 ( - 1 )					    36 LOAD_CONST 3 ( - 1 )					  
							      38 LOAD_CONST 3 ( - 1 )					    38 LOAD_CONST 3 ( - 1 )					  
							      40 CALL_FUNCTION 3					    40 CALL_FUNCTION 3						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 36 ( to 82 )				    >> 44 FOR_ITER 36 ( to 84 )					  
							      46 STORE_FAST 6 ( j )					    46 STORE_FAST 6 ( j )					  
							      								    								  
							      7 48 LOAD_FAST 1 ( templeHeight )				    7 48 LOAD_FAST 1 ( templeHeight )				  
							      50 LOAD_FAST 6 ( j )					    50 LOAD_FAST 6 ( j )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 1 ( templeHeight )				    54 LOAD_FAST 1 ( templeHeight )				  
							      56 LOAD_FAST 6 ( j )					    56 LOAD_FAST 6 ( j )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      60 BINARY_ADD						    60 BINARY_ADD						  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 COMPARE_OP 0 ( < )					    64 COMPARE_OP 0 ( < )					  
							      66 POP_JUMP_IF_FALSE 78					    66 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      8 68 LOAD_FAST 4 ( left )					    8 68 LOAD_FAST 4 ( left )					  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 INPLACE_ADD						    72 INPLACE_ADD						  
							      74 STORE_FAST 4 ( left )					    74 STORE_FAST 4 ( left )					  
							      76 JUMP_ABSOLUTE 44					    								  
							      								    10 >> 76 BREAK_LOOP						  
							      10 >> 78 BREAK_LOOP					    78 JUMP_ABSOLUTE 44						  
							      80 JUMP_ABSOLUTE 44					    >> 80 POP_BLOCK						  
							      >> 82 POP_BLOCK						    								  
							      								    11 >> 82 SETUP_LOOP 66 ( to 144 )				  
							      11 >> 84 SETUP_LOOP 54 ( to 140 )				    84 LOAD_GLOBAL 0 ( range )					  
							      86 LOAD_GLOBAL 0 ( range )				    86 LOAD_FAST 3 ( i )					  
							      88 LOAD_FAST 3 ( i )					    88 LOAD_CONST 2 ( 1 )					  
							      90 LOAD_CONST 2 ( 1 )					    90 BINARY_ADD						  
							      92 BINARY_ADD						    92 LOAD_FAST 0 ( n )					  
							      94 LOAD_FAST 0 ( n )					    94 CALL_FUNCTION 2						  
							      96 CALL_FUNCTION 2					    96 GET_ITER							  
							      98 GET_ITER						    >> 98 FOR_ITER 52 ( to 142 )				  
							      >> 100 FOR_ITER 36 ( to 138 )				    100 STORE_FAST 6 ( j )					  
							      102 STORE_FAST 6 ( j )					    								  
							      								    12 102 LOAD_FAST 1 ( templeHeight )				  
							      12 104 LOAD_FAST 1 ( templeHeight )			    104 LOAD_FAST 6 ( j )					  
							      106 LOAD_FAST 6 ( j )					    106 BINARY_SUBSCR						  
							      108 BINARY_SUBSCR						    108 LOAD_FAST 1 ( templeHeight )				  
							      110 LOAD_FAST 1 ( templeHeight )				    110 LOAD_FAST 6 ( j )					  
							      112 LOAD_FAST 6 ( j )					    112 LOAD_CONST 2 ( 1 )					  
							      114 LOAD_CONST 2 ( 1 )					    114 BINARY_SUBTRACT						  
							      116 BINARY_SUBTRACT					    116 BINARY_SUBSCR						  
							      118 BINARY_SUBSCR						    118 COMPARE_OP 0 ( < )					  
							      120 COMPARE_OP 0 ( < )					    120 POP_JUMP_IF_FALSE 130					  
							      122 POP_JUMP_IF_FALSE 134					    								  
							      								    13 122 LOAD_FAST 5 ( right )				  
							      13 124 LOAD_FAST 5 ( right )				    124 LOAD_CONST 2 ( 1 )					  
							      126 LOAD_CONST 2 ( 1 )					    126 INPLACE_ADD						  
							      128 INPLACE_ADD						    128 STORE_FAST 5 ( right )					  
							      130 STORE_FAST 5 ( right )				    								  
							      132 JUMP_ABSOLUTE 100					    15 >> 130 BREAK_LOOP					  
							      								    132 JUMP_ABSOLUTE 98					  
							      15 >> 134 BREAK_LOOP					    >> 134 POP_BLOCK						  
							      136 JUMP_ABSOLUTE 100					    								  
							      >> 138 POP_BLOCK						    16 >> 136 LOAD_FAST 2 ( sum )				  
							      								    138 LOAD_GLOBAL 1 ( max )					  
							      16 >> 140 LOAD_FAST 2 ( sum )				    140 LOAD_FAST 5 ( right )					  
							      142 LOAD_GLOBAL 1 ( max )					    142 LOAD_FAST 4 ( left )					  
							      144 LOAD_FAST 5 ( right )					    144 CALL_FUNCTION 2						  
							      146 LOAD_FAST 4 ( left )					    146 LOAD_CONST 2 ( 1 )					  
							      148 CALL_FUNCTION 2					    148 BINARY_ADD						  
							      150 LOAD_CONST 2 ( 1 )					    150 INPLACE_ADD						  
							      152 BINARY_ADD						    152 STORE_FAST 2 ( sum )					  
							      154 INPLACE_ADD						    154 JUMP_ABSOLUTE 14					  
							      156 STORE_FAST 2 ( sum )					    >> 156 POP_BLOCK						  
							      158 JUMP_ABSOLUTE 14					    								  
							      >> 160 POP_BLOCK						    17 >> 158 LOAD_FAST 2 ( sum )				  
							      								    160 LOAD_GLOBAL 1 ( max )					  
							      17 >> 162 LOAD_FAST 2 ( sum )				    162 LOAD_FAST 5 ( right )					  
							      164 RETURN_VALUE NEW_LINE					    164 LOAD_FAST 4 ( left )					  
							      								    166 CALL_FUNCTION 2						  
							      								    168 LOAD_CONST 2 ( 1 )					  
							      								    170 BINARY_ADD						  
							      								    172 INPLACE_ADD						  
							      								    174 STORE_FAST 2 ( sum )					  
							      								    176 JUMP_ABSOLUTE 14					  
							      								    >> 178 POP_BLOCK						  
							      								    								  
							      								    18 >> 180 LOAD_FAST 2 ( sum )				  
							      								    182 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			      DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			    DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			  DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER
--							      --							    --								  --
def isDvisibleBy12 ( num ) :				      Disassembly of <code object isDvisibleBy12 at 0x7f33e2653f60, Disassembly of <code object isDvisibleBy12 at 0x7f2b0163dc90, script_not_found : None
    if ( len ( num ) >= 3 ) :				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
	d1 = int ( num [ len ( num ) - 1 ] ) ;		      2 LOAD_FAST 0 ( num )					    2 LOAD_FAST 0 ( num )					  
	if ( d1 % 2 != 0 ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    return False				      6 LOAD_CONST 1 ( 3 )					    6 LOAD_CONST 1 ( 3 )					  
	d2 = int ( num [ len ( num ) - 2 ] )		      8 COMPARE_OP 5 ( >= )					    8 COMPARE_OP 5 ( >= )					  
	sum = 0						      10 POP_JUMP_IF_FALSE 144					    10 POP_JUMP_IF_FALSE 108					  
	for i in range ( 0 , len ( num ) ) :		      								    								  
	    sum += int ( num [ i ] )			      3 12 LOAD_GLOBAL 1 ( int )				    3 12 LOAD_GLOBAL 1 ( int )					  
	return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 ) 14 LOAD_FAST 0 ( num )					    14 LOAD_FAST 0 ( num )					  
    else :						      16 LOAD_GLOBAL 0 ( len )					    16 LOAD_GLOBAL 0 ( len )					  
	number = int ( num )				      18 LOAD_FAST 0 ( num )					    18 LOAD_FAST 0 ( num )					  
	return ( number % 12 == 0 )			      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 2 ( 1 )					  
							      24 BINARY_SUBTRACT					    24 BINARY_SUBTRACT						  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
							      30 STORE_FAST 1 ( d1 )					    30 STORE_FAST 1 ( d1 )					  
							      								    								  
							      4 32 LOAD_FAST 1 ( d1 )					    4 32 LOAD_FAST 1 ( d1 )					  
							      34 LOAD_CONST 3 ( 2 )					    34 LOAD_CONST 3 ( 2 )					  
							      36 BINARY_MODULO						    36 BINARY_MODULO						  
							      38 LOAD_CONST 4 ( 0 )					    38 LOAD_CONST 4 ( 0 )					  
							      40 COMPARE_OP 3 ( != )					    40 COMPARE_OP 3 ( != )					  
							      42 POP_JUMP_IF_FALSE 48					    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      5 44 LOAD_CONST 5 ( False )				    5 44 LOAD_CONST 5 ( False )					  
							      46 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      6 >> 48 LOAD_GLOBAL 1 ( int )				    6 >> 48 LOAD_GLOBAL 1 ( int )				  
							      50 LOAD_FAST 0 ( num )					    50 LOAD_FAST 0 ( num )					  
							      52 LOAD_GLOBAL 0 ( len )					    52 LOAD_GLOBAL 0 ( len )					  
							      54 LOAD_FAST 0 ( num )					    54 LOAD_FAST 0 ( num )					  
							      56 CALL_FUNCTION 1					    56 CALL_FUNCTION 1						  
							      58 LOAD_CONST 3 ( 2 )					    58 LOAD_CONST 3 ( 2 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 STORE_FAST 2 ( d2 )					    66 STORE_FAST 2 ( d2 )					  
							      								    								  
							      7 68 LOAD_CONST 4 ( 0 )					    7 68 LOAD_CONST 4 ( 0 )					  
							      70 STORE_FAST 3 ( sum )					    70 STORE_FAST 3 ( sum )					  
							      								    								  
							      8 72 SETUP_LOOP 38 ( to 112 )				    8 72 SETUP_LOOP 46 ( to 108 )				  
							      74 LOAD_GLOBAL 2 ( range )				    74 LOAD_GLOBAL 2 ( range )					  
							      76 LOAD_CONST 4 ( 0 )					    76 LOAD_CONST 4 ( 0 )					  
							      78 LOAD_GLOBAL 0 ( len )					    78 LOAD_GLOBAL 0 ( len )					  
							      80 LOAD_FAST 0 ( num )					    80 LOAD_FAST 0 ( num )					  
							      82 CALL_FUNCTION 1					    82 CALL_FUNCTION 1						  
							      84 CALL_FUNCTION 2					    84 CALL_FUNCTION 2						  
							      86 GET_ITER						    86 GET_ITER							  
							      >> 88 FOR_ITER 20 ( to 110 )				    >> 88 FOR_ITER 28 ( to 106 )				  
							      90 STORE_FAST 4 ( i )					    90 STORE_FAST 4 ( i )					  
							      								    								  
							      9 92 LOAD_FAST 3 ( sum )					    9 92 LOAD_FAST 3 ( sum )					  
							      94 LOAD_GLOBAL 1 ( int )					    94 LOAD_GLOBAL 1 ( int )					  
							      96 LOAD_FAST 0 ( num )					    96 LOAD_FAST 0 ( num )					  
							      98 LOAD_FAST 4 ( i )					    98 LOAD_FAST 4 ( i )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 CALL_FUNCTION 1					    102 CALL_FUNCTION 1						  
							      104 INPLACE_ADD						    104 INPLACE_ADD						  
							      106 STORE_FAST 3 ( sum )					    106 STORE_FAST 3 ( sum )					  
							      108 JUMP_ABSOLUTE 88					    108 JUMP_ABSOLUTE 88					  
							      >> 110 POP_BLOCK						    >> 110 POP_BLOCK						  
							      								    								  
							      10 >> 112 LOAD_FAST 3 ( sum )				    10 >> 112 LOAD_FAST 3 ( sum )				  
							      114 LOAD_CONST 1 ( 3 )					    114 LOAD_CONST 1 ( 3 )					  
							      116 BINARY_MODULO						    116 BINARY_MODULO						  
							      118 LOAD_CONST 4 ( 0 )					    118 LOAD_CONST 4 ( 0 )					  
							      120 COMPARE_OP 2 ( == )					    120 COMPARE_OP 2 ( == )					  
							      122 JUMP_IF_FALSE_OR_POP 142				    122 JUMP_IF_FALSE_OR_POP 138				  
							      124 LOAD_FAST 2 ( d2 )					    124 LOAD_FAST 2 ( d2 )					  
							      126 LOAD_CONST 6 ( 10 )					    126 LOAD_CONST 6 ( 10 )					  
							      128 BINARY_MULTIPLY					    128 BINARY_MULTIPLY						  
							      130 LOAD_FAST 1 ( d1 )					    130 LOAD_FAST 1 ( d1 )					  
							      132 BINARY_ADD						    132 BINARY_ADD						  
							      134 LOAD_CONST 7 ( 4 )					    134 LOAD_CONST 4 ( 0 )					  
							      136 BINARY_MODULO						    136 COMPARE_OP 2 ( == )					  
							      138 LOAD_CONST 4 ( 0 )					    138 RETURN_VALUE						  
							      140 COMPARE_OP 2 ( == )					    								  
							      >> 142 RETURN_VALUE					    12 >> 140 LOAD_GLOBAL 1 ( int )				  
							      								    142 LOAD_FAST 0 ( num )					  
							      12 >> 144 LOAD_GLOBAL 1 ( int )				    144 CALL_FUNCTION 1						  
							      146 LOAD_FAST 0 ( num )					    146 STORE_FAST 5 ( number )					  
							      148 CALL_FUNCTION 1					    								  
							      150 STORE_FAST 5 ( number )				    13 148 LOAD_FAST 5 ( number )				  
							      								    150 LOAD_CONST 5 ( 12 )					  
							      13 152 LOAD_FAST 5 ( number )				    152 BINARY_MODULO						  
							      154 LOAD_CONST 8 ( 12 )					    154 LOAD_CONST 4 ( 0 )					  
							      156 BINARY_MODULO						    156 COMPARE_OP 2 ( == )					  
							      158 LOAD_CONST 4 ( 0 )					    158 RETURN_VALUE						  
							      160 COMPARE_OP 2 ( == )					    160 LOAD_CONST 0 ( None )					  
							      162 RETURN_VALUE						    162 RETURN_VALUE NEW_LINE					  
							      164 LOAD_CONST 0 ( None )					    								  
							      166 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1	      CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		    CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		  CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1
--							      --							    --								  --
def checkCorrectOrNot ( s ) :				      Disassembly of <code object checkCorrectOrNot at 0x7f33e26494 Disassembly of <code object checkCorrectOrNot at 0x7f2b016396 script_not_found : None
    global MAX_CHAR					      3 0 LOAD_CONST 1 ( 0 )					    3 0 LOAD_CONST 1 ( 0 )					  
    count = [ 0 ] * MAX_CHAR				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    n = len ( s )					      4 LOAD_GLOBAL 0 ( MAX_CHAR )				    4 LOAD_GLOBAL 0 ( MAX_CHAR )				  
    if n == 1 :						      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	return true					      8 STORE_FAST 1 ( count )					    8 STORE_FAST 1 ( count )					  
    i = 0 ; j = n - 1					      								    								  
    while i < j :					      4 10 LOAD_GLOBAL 1 ( len )				    4 10 LOAD_GLOBAL 1 ( len )					  
	count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	      12 LOAD_FAST 0 ( s )					    12 LOAD_FAST 0 ( s )					  
	count [ ord ( s [ j ] ) - ord ( 'a' ) ] -= 1	      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
	i += 1 ; j -= 1					      16 STORE_FAST 2 ( n )					    16 STORE_FAST 2 ( n )					  
    for i in range ( MAX_CHAR ) :			      								    								  
	if count [ i ] != 0 :				      5 18 LOAD_FAST 2 ( n )					    5 18 LOAD_FAST 2 ( n )					  
	    return False				      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
    return True						      22 COMPARE_OP 2 ( == )					    22 COMPARE_OP 2 ( == )					  
							      24 POP_JUMP_IF_FALSE 30					    24 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      6 26 LOAD_GLOBAL 2 ( true )				    6 26 LOAD_GLOBAL 2 ( true )					  
							      28 RETURN_VALUE						    28 RETURN_VALUE						  
							      								    								  
							      7 >> 30 LOAD_CONST 1 ( 0 )				    7 >> 30 LOAD_CONST 1 ( 0 )					  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 3 ( i )					  
							      34 LOAD_FAST 2 ( n )					    								  
							      36 LOAD_CONST 2 ( 1 )					    8 34 LOAD_FAST 2 ( n )					  
							      38 BINARY_SUBTRACT					    36 LOAD_CONST 2 ( 1 )					  
							      40 STORE_FAST 4 ( j )					    38 BINARY_SUBTRACT						  
							      								    40 STORE_FAST 4 ( j )					  
							      8 42 SETUP_LOOP 92 ( to 136 )				    								  
							      >> 44 LOAD_FAST 3 ( i )					    9 42 SETUP_LOOP 68 ( to 116 )				  
							      46 LOAD_FAST 4 ( j )					    >> 44 LOAD_FAST 3 ( i )					  
							      48 COMPARE_OP 0 ( < )					    46 LOAD_FAST 4 ( j )					  
							      50 POP_JUMP_IF_FALSE 134					    48 COMPARE_OP 0 ( < )					  
							      								    50 POP_JUMP_IF_FALSE 114					  
							      9 52 LOAD_FAST 1 ( count )				    								  
							      54 LOAD_GLOBAL 3 ( ord )					    10 52 LOAD_FAST 1 ( count )					  
							      56 LOAD_FAST 0 ( s )					    54 LOAD_GLOBAL 3 ( ord )					  
							      58 LOAD_FAST 3 ( i )					    56 LOAD_FAST 0 ( s )					  
							      60 BINARY_SUBSCR						    58 LOAD_FAST 3 ( i )					  
							      62 CALL_FUNCTION 1					    60 BINARY_SUBSCR						  
							      64 LOAD_GLOBAL 3 ( ord )					    62 CALL_FUNCTION 1						  
							      66 LOAD_CONST 3 ( 'a' )					    64 LOAD_GLOBAL 3 ( ord )					  
							      68 CALL_FUNCTION 1					    66 LOAD_CONST 3 ( 'a' )					  
							      70 BINARY_SUBTRACT					    68 CALL_FUNCTION 1						  
							      72 DUP_TOP_TWO						    70 BINARY_SUBTRACT						  
							      74 BINARY_SUBSCR						    72 DUP_TOP_TWO						  
							      76 LOAD_CONST 2 ( 1 )					    74 BINARY_SUBSCR						  
							      78 INPLACE_ADD						    76 LOAD_CONST 2 ( 1 )					  
							      80 ROT_THREE						    78 INPLACE_ADD						  
							      82 STORE_SUBSCR						    80 ROT_THREE						  
							      								    82 STORE_SUBSCR						  
							      10 84 LOAD_FAST 1 ( count )				    								  
							      86 LOAD_GLOBAL 3 ( ord )					    11 84 LOAD_FAST 1 ( count )					  
							      88 LOAD_FAST 0 ( s )					    86 LOAD_GLOBAL 3 ( ord )					  
							      90 LOAD_FAST 4 ( j )					    88 LOAD_FAST 0 ( s )					  
							      92 BINARY_SUBSCR						    90 LOAD_FAST 4 ( j )					  
							      94 CALL_FUNCTION 1					    92 BINARY_SUBSCR						  
							      96 LOAD_GLOBAL 3 ( ord )					    94 CALL_FUNCTION 1						  
							      98 LOAD_CONST 3 ( 'a' )					    96 LOAD_GLOBAL 3 ( ord )					  
							      100 CALL_FUNCTION 1					    98 LOAD_CONST 3 ( 'a' )					  
							      102 BINARY_SUBTRACT					    100 CALL_FUNCTION 1						  
							      104 DUP_TOP_TWO						    102 BINARY_SUBTRACT						  
							      106 BINARY_SUBSCR						    104 DUP_TOP_TWO						  
							      108 LOAD_CONST 2 ( 1 )					    106 BINARY_SUBSCR						  
							      110 INPLACE_SUBTRACT					    108 LOAD_CONST 2 ( 1 )					  
							      112 ROT_THREE						    110 INPLACE_SUBTRACT					  
							      114 STORE_SUBSCR						    112 ROT_THREE						  
							      								    114 STORE_SUBSCR						  
							      11 116 LOAD_FAST 3 ( i )					    								  
							      118 LOAD_CONST 2 ( 1 )					    12 116 LOAD_FAST 3 ( i )					  
							      120 INPLACE_ADD						    118 LOAD_CONST 2 ( 1 )					  
							      122 STORE_FAST 3 ( i )					    120 INPLACE_ADD						  
							      124 LOAD_FAST 4 ( j )					    122 ROT_THREE						  
							      126 LOAD_CONST 2 ( 1 )					    124 STORE_SUBSCR						  
							      128 INPLACE_SUBTRACT					    >> 126 JUMP_ABSOLUTE 44					  
							      130 STORE_FAST 4 ( j )					    >> 128 POP_BLOCK						  
							      132 JUMP_ABSOLUTE 44					    								  
							      >> 134 POP_BLOCK						    13 >> 130 SETUP_LOOP 44 ( to 164 )				  
							      								    132 LOAD_GLOBAL 4 ( range )					  
							      12 >> 136 SETUP_LOOP 32 ( to 170 )			    134 LOAD_GLOBAL 5 ( MAX_CHAR )				  
							      138 LOAD_GLOBAL 4 ( range )				    136 CALL_FUNCTION 1						  
							      140 LOAD_GLOBAL 0 ( MAX_CHAR )				    138 GET_ITER						  
							      142 CALL_FUNCTION 1					    >> 140 FOR_ITER 32 ( to 162 )				  
							      144 GET_ITER						    142 STORE_FAST 3 ( i )					  
							      >> 146 FOR_ITER 20 ( to 168 )				    								  
							      148 STORE_FAST 3 ( i )					    14 144 LOAD_FAST 1 ( count )				  
							      								    146 LOAD_FAST 3 ( i )					  
							      13 150 LOAD_FAST 1 ( count )				    148 BINARY_SUBSCR						  
							      152 LOAD_FAST 3 ( i )					    150 LOAD_CONST 1 ( 0 )					  
							      154 BINARY_SUBSCR						    152 COMPARE_OP 3 ( != )					  
							      156 LOAD_CONST 1 ( 0 )					    154 POP_JUMP_IF_FALSE 138					  
							      158 COMPARE_OP 3 ( != )					    								  
							      160 POP_JUMP_IF_FALSE 146					    15 156 LOAD_CONST 4 ( False )				  
							      								    158 RETURN_VALUE						  
							      14 162 LOAD_CONST 4 ( False )				    160 JUMP_ABSOLUTE 140					  
							      164 RETURN_VALUE						    >> 162 POP_BLOCK						  
							      166 JUMP_ABSOLUTE 146					    								  
							      >> 168 POP_BLOCK						    16 >> 164 LOAD_CONST 5 ( True )				  
							      								    166 RETURN_VALUE NEW_LINE					  
							      15 >> 170 LOAD_CONST 5 ( True )				    								  
							      172 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE     REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE
--							      --							    --								  --
def rearrange ( arr , n ) :				      Disassembly of <code object rearrange at 0x7f33e2649a50, file Disassembly of <code object rearrange at 0x7f2b0163dc90, file error : /bin/bash: line 1:  4864 Segmentation faul
    max_idx = n - 1					      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    min_idx = 0						      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    max_elem = arr [ n - 1 ] + 1			      4 BINARY_SUBTRACT						    4 BINARY_SUBTRACT						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( 0 , n ) :				      6 STORE_FAST 2 ( max_idx )				    6 STORE_FAST 2 ( max_idx )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/REARRA
	if i % 2 == 0 :					      								    								  NGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPAC
	    arr [ i ] += ( arr [ max_idx ] % max_elem ) * max 3 8 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  E.dis
	    max_idx -= 1				      10 STORE_FAST 3 ( min_idx )				    10 STORE_FAST 3 ( min_idx )					  
	else :						      								    								  
	    arr [ i ] += ( arr [ min_idx ] % max_elem ) * max 4 12 LOAD_FAST 0 ( arr )					    4 12 LOAD_FAST 0 ( arr )					  
	    min_idx += 1				      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
    for i in range ( 0 , n ) :				      16 LOAD_CONST 1 ( 1 )					    16 LOAD_CONST 1 ( 1 )					  
	arr [ i ] = arr [ i ] / max_elem		      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
							      20 BINARY_SUBSCR						    20 BINARY_SUBSCR						  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 1 ( 1 )					  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 STORE_FAST 4 ( max_elem )				    26 STORE_FAST 4 ( max_elem )				  
							      								    								  
							      5 28 SETUP_LOOP 104 ( to 134 )				    5 28 SETUP_LOOP 92 ( to 126 )				  
							      30 LOAD_GLOBAL 0 ( range )				    30 LOAD_GLOBAL 0 ( range )					  
							      32 LOAD_CONST 2 ( 0 )					    32 LOAD_CONST 2 ( 0 )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 90 ( to 132 )				    >> 40 FOR_ITER 76 ( to 124 )				  
							      42 STORE_FAST 5 ( i )					    42 STORE_FAST 5 ( i )					  
							      								    								  
							      6 44 LOAD_FAST 5 ( i )					    6 44 LOAD_FAST 5 ( i )					  
							      46 LOAD_CONST 3 ( 2 )					    46 LOAD_CONST 3 ( 2 )					  
							      48 BINARY_MODULO						    48 BINARY_MODULO						  
							      50 LOAD_CONST 2 ( 0 )					    50 LOAD_CONST 2 ( 0 )					  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 94					    54 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      7 56 LOAD_FAST 0 ( arr )					    7 56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 5 ( i )					    58 LOAD_FAST 5 ( i )					  
							      60 DUP_TOP_TWO						    60 DUP_TOP_TWO						  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_FAST 0 ( arr )					    64 LOAD_FAST 0 ( arr )					  
							      66 LOAD_FAST 2 ( max_idx )				    66 LOAD_FAST 2 ( max_idx )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 4 ( max_elem )				    70 LOAD_FAST 2 ( max_idx )					  
							      72 BINARY_MODULO						    72 BINARY_MODULO						  
							      74 LOAD_FAST 4 ( max_elem )				    74 LOAD_FAST 4 ( max_elem )					  
							      76 BINARY_MULTIPLY					    76 BINARY_MULTIPLY						  
							      78 INPLACE_ADD						    78 INPLACE_ADD						  
							      80 ROT_THREE						    80 ROT_THREE						  
							      82 STORE_SUBSCR						    82 STORE_SUBSCR						  
							      								    								  
							      8 84 LOAD_FAST 2 ( max_idx )				    8 84 LOAD_FAST 2 ( max_idx )				  
							      86 LOAD_CONST 1 ( 1 )					    86 LOAD_CONST 1 ( 1 )					  
							      88 INPLACE_SUBTRACT					    88 INPLACE_SUBTRACT						  
							      90 STORE_FAST 2 ( max_idx )				    90 STORE_FAST 2 ( max_idx )					  
							      92 JUMP_ABSOLUTE 40					    								  
							      								    9 >> 92 LOAD_FAST 0 ( arr )					  
							      10 >> 94 LOAD_FAST 0 ( arr )				    94 LOAD_FAST 5 ( i )					  
							      96 LOAD_FAST 5 ( i )					    96 DUP_TOP_TWO						  
							      98 DUP_TOP_TWO						    98 BINARY_SUBSCR						  
							      100 BINARY_SUBSCR						    100 LOAD_FAST 0 ( arr )					  
							      102 LOAD_FAST 0 ( arr )					    102 LOAD_FAST 3 ( min_idx )					  
							      104 LOAD_FAST 3 ( min_idx )				    104 BINARY_SUBSCR						  
							      106 BINARY_SUBSCR						    106 LOAD_FAST 2 ( max_elem )				  
							      108 LOAD_FAST 4 ( max_elem )				    108 BINARY_MULTIPLY						  
							      110 BINARY_MODULO						    110 LOAD_FAST 4 ( max_elem )				  
							      112 LOAD_FAST 4 ( max_elem )				    112 BINARY_MULTIPLY						  
							      114 BINARY_MULTIPLY					    114 INPLACE_ADD						  
							      116 INPLACE_ADD						    116 ROT_THREE						  
							      118 ROT_THREE						    118 STORE_SUBSCR						  
							      120 STORE_SUBSCR						    								  
							      								    10 120 LOAD_FAST 3 ( min_idx )				  
							      11 122 LOAD_FAST 3 ( min_idx )				    122 LOAD_CONST 1 ( 1 )					  
							      124 LOAD_CONST 1 ( 1 )					    124 INPLACE_ADD						  
							      126 INPLACE_ADD						    126 STORE_FAST 3 ( min_idx )				  
							      128 STORE_FAST 3 ( min_idx )				    128 JUMP_ABSOLUTE 40					  
							      130 JUMP_ABSOLUTE 40					    >> 130 POP_BLOCK						  
							      >> 132 POP_BLOCK						    >> 132 JUMP_ABSOLUTE 40					  
							      								    >> 134 POP_BLOCK						  
							      12 >> 134 SETUP_LOOP 34 ( to 170 )			    								  
							      136 LOAD_GLOBAL 0 ( range )				    11 >> 136 SETUP_LOOP 34 ( to 156 )				  
							      138 LOAD_CONST 2 ( 0 )					    138 LOAD_GLOBAL 0 ( range )					  
							      140 LOAD_FAST 1 ( n )					    140 LOAD_CONST 2 ( 0 )					  
							      142 CALL_FUNCTION 2					    142 LOAD_FAST 1 ( n )					  
							      144 GET_ITER						    144 CALL_FUNCTION 2						  
							      >> 146 FOR_ITER 20 ( to 168 )				    146 GET_ITER						  
							      148 STORE_FAST 5 ( i )					    >> 148 FOR_ITER 18 ( to 154 )				  
							      								    150 STORE_FAST 5 ( i )					  
							      13 150 LOAD_FAST 0 ( arr )				    								  
							      152 LOAD_FAST 5 ( i )					    12 152 LOAD_FAST 0 ( arr )					  
							      154 BINARY_SUBSCR						    154 LOAD_FAST 5 ( i )					  
							      156 LOAD_FAST 4 ( max_elem )				    156 BINARY_SUBSCR						  
							      158 BINARY_TRUE_DIVIDE					    158 LOAD_FAST 2 ( max_elem )				  
							      160 LOAD_FAST 0 ( arr )					    160 BINARY_TRUE_DIVIDE					  
							      162 LOAD_FAST 5 ( i )					    162 LOAD_FAST 0 ( arr )					  
							      164 STORE_SUBSCR						    164 LOAD_FAST 5 ( i )					  
							      166 JUMP_ABSOLUTE 146					    166 STORE_SUBSCR						  
							      >> 168 POP_BLOCK						    168 JUMP_ABSOLUTE 148					  
							      >> 170 LOAD_CONST 0 ( None )				    >> 170 POP_BLOCK						  
							      172 RETURN_VALUE NEW_LINE					    >> 172 LOAD_CONST 0 ( None )				  
							      								    174 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>      COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>	    COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>	  COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>
--							      --							    --								  --
def countkDist ( str1 , k ) :				      Disassembly of <code object countkDist at 0x7f33e2644f60, fil Disassembly of <code object countkDist at 0x7f2b0163dc90, fil script_not_found : None
    n = len ( str1 )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    res = 0						      2 LOAD_FAST 0 ( str1 )					    2 LOAD_FAST 0 ( str1 )					  
    cnt = [ 0 ] * 27					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 0 , n ) :				      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  
	dist_count = 0					      								    								  
	cnt = [ 0 ] * 27				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	for j in range ( i , n ) :			      10 STORE_FAST 3 ( res )					    10 STORE_FAST 3 ( res )					  
	    if ( cnt [ ord ( str1 [ j ] ) - 97 ] == 0 ) :     								    								  
		dist_count += 1				      4 12 LOAD_CONST 1 ( 0 )					    4 12 LOAD_CONST 1 ( 0 )					  
	    cnt [ ord ( str1 [ j ] ) - 97 ] += 1	      14 BUILD_LIST 1						    14 BUILD_LIST 1						  
	    if ( dist_count == k ) :			      16 LOAD_CONST 2 ( 27 )					    16 LOAD_CONST 2 ( 27 )					  
		res += 1				      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
	    if ( dist_count > k ) :			      20 STORE_FAST 4 ( cnt )					    20 STORE_FAST 4 ( cnt )					  
		break					      								    								  
    return res						      5 22 SETUP_LOOP 138 ( to 162 )				    5 22 SETUP_LOOP 120 ( to 138 )				  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_GLOBAL 1 ( range )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 2 ( n )					    28 LOAD_FAST 2 ( n )					  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 124 ( to 160 )				    >> 34 FOR_ITER 112 ( to 136 )				  
							      36 STORE_FAST 5 ( i )					    36 STORE_FAST 5 ( i )					  
							      								    								  
							      6 38 LOAD_CONST 1 ( 0 )					    6 38 LOAD_CONST 1 ( 0 )					  
							      40 STORE_FAST 6 ( dist_count )				    40 STORE_FAST 6 ( dist_count )				  
							      								    								  
							      7 42 LOAD_CONST 1 ( 0 )					    7 42 LOAD_CONST 1 ( 0 )					  
							      44 BUILD_LIST 1						    44 BUILD_LIST 1						  
							      46 LOAD_CONST 2 ( 27 )					    46 LOAD_CONST 2 ( 27 )					  
							      48 BINARY_MULTIPLY					    48 BINARY_MULTIPLY						  
							      50 STORE_FAST 4 ( cnt )					    50 STORE_FAST 4 ( cnt )					  
							      								    								  
							      8 52 SETUP_LOOP 104 ( to 158 )				    8 52 SETUP_LOOP 52 ( to 120 )				  
							      54 LOAD_GLOBAL 1 ( range )				    54 LOAD_GLOBAL 1 ( range )					  
							      56 LOAD_FAST 5 ( i )					    56 LOAD_FAST 5 ( i )					  
							      58 LOAD_FAST 2 ( n )					    58 LOAD_FAST 2 ( n )					  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 GET_ITER						    62 GET_ITER							  
							      >> 64 FOR_ITER 90 ( to 156 )				    >> 64 FOR_ITER 44 ( to 118 )				  
							      66 STORE_FAST 7 ( j )					    66 STORE_FAST 7 ( j )					  
							      								    								  
							      9 68 LOAD_FAST 4 ( cnt )					    9 68 LOAD_FAST 4 ( cnt )					  
							      70 LOAD_GLOBAL 2 ( ord )					    70 LOAD_GLOBAL 2 ( ord )					  
							      72 LOAD_FAST 0 ( str1 )					    72 LOAD_FAST 0 ( str1 )					  
							      74 LOAD_FAST 7 ( j )					    74 LOAD_FAST 7 ( j )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 CALL_FUNCTION 1					    78 CALL_FUNCTION 1						  
							      80 LOAD_CONST 3 ( 97 )					    80 LOAD_CONST 3 ( 97 )					  
							      82 BINARY_SUBTRACT					    82 BINARY_SUBTRACT						  
							      84 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      86 LOAD_CONST 1 ( 0 )					    86 LOAD_CONST 1 ( 0 )					  
							      88 COMPARE_OP 2 ( == )					    88 COMPARE_OP 2 ( == )					  
							      90 POP_JUMP_IF_FALSE 100					    90 POP_JUMP_IF_FALSE 96					  
							      								    								  
							      10 92 LOAD_FAST 6 ( dist_count )				    10 92 LOAD_FAST 6 ( dist_count )				  
							      94 LOAD_CONST 4 ( 1 )					    94 LOAD_CONST 4 ( 1 )					  
							      96 INPLACE_ADD						    96 INPLACE_ADD						  
							      98 STORE_FAST 6 ( dist_count )				    98 STORE_FAST 6 ( dist_count )				  
							      								    								  
							      11 >> 100 LOAD_FAST 4 ( cnt )				    11 >> 100 LOAD_FAST 4 ( cnt )				  
							      102 LOAD_GLOBAL 2 ( ord )					    102 LOAD_GLOBAL 2 ( ord )					  
							      104 LOAD_FAST 0 ( str1 )					    104 LOAD_FAST 0 ( str1 )					  
							      106 LOAD_FAST 7 ( j )					    106 LOAD_FAST 7 ( j )					  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 CALL_FUNCTION 1					    110 CALL_FUNCTION 1						  
							      112 LOAD_CONST 3 ( 97 )					    112 LOAD_CONST 5 ( 97 )					  
							      114 BINARY_SUBTRACT					    114 BINARY_SUBTRACT						  
							      116 DUP_TOP_TWO						    116 BINARY_SUBSCR						  
							      118 BINARY_SUBSCR						    118 LOAD_CONST 4 ( 1 )					  
							      120 LOAD_CONST 4 ( 1 )					    120 INPLACE_ADD						  
							      122 INPLACE_ADD						    122 ROT_THREE						  
							      124 ROT_THREE						    124 STORE_SUBSCR						  
							      126 STORE_SUBSCR						    								  
							      								    12 126 LOAD_FAST 6 ( dist_count )				  
							      12 128 LOAD_FAST 6 ( dist_count )				    128 LOAD_FAST 1 ( k )					  
							      130 LOAD_FAST 1 ( k )					    130 COMPARE_OP 2 ( == )					  
							      132 COMPARE_OP 2 ( == )					    132 POP_JUMP_IF_FALSE 134					  
							      134 POP_JUMP_IF_FALSE 144					    								  
							      								    13 >> 134 LOAD_FAST 3 ( res )				  
							      13 136 LOAD_FAST 3 ( res )				    136 LOAD_CONST 4 ( 1 )					  
							      138 LOAD_CONST 4 ( 1 )					    138 INPLACE_ADD						  
							      140 INPLACE_ADD						    140 STORE_FAST 3 ( res )					  
							      142 STORE_FAST 3 ( res )					    								  
							      								    14 >> 142 LOAD_FAST 6 ( dist_count )			  
							      14 >> 144 LOAD_FAST 6 ( dist_count )			    144 LOAD_FAST 1 ( k )					  
							      146 LOAD_FAST 1 ( k )					    146 COMPARE_OP 2 ( == )					  
							      148 COMPARE_OP 4 ( > )					    148 POP_JUMP_IF_FALSE 60					  
							      150 POP_JUMP_IF_FALSE 64					    								  
							      								    15 150 LOAD_FAST 3 ( res )					  
							      15 152 BREAK_LOOP						    152 LOAD_CONST 4 ( 1 )					  
							      154 JUMP_ABSOLUTE 64					    154 INPLACE_ADD						  
							      >> 156 POP_BLOCK						    156 STORE_FAST 3 ( res )					  
							      >> 158 JUMP_ABSOLUTE 34					    								  
							      >> 160 POP_BLOCK						    16 158 LOAD_FAST 6 ( dist_count )				  
							      								    160 LOAD_FAST 1 ( k )					  
							      16 >> 162 LOAD_FAST 3 ( res )				    162 COMPARE_OP 2 ( == )					  
							      164 RETURN_VALUE NEW_LINE					    164 POP_JUMP_IF_FALSE 162					  
							      								    								  
							      								    17 166 BREAK_LOOP						  
							      								    168 JUMP_ABSOLUTE 64					  
							      								    >> 170 POP_BLOCK						  
							      								    								  
							      								    18 >> 172 LOAD_FAST 3 ( res )				  
							      								    174 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			      CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			    CHECK_VALID_SEQUENCE_DIVISIBLE_M_1				  CHECK_VALID_SEQUENCE_DIVISIBLE_M_1
--							      --							    --								  --
def isPossible ( n , index , modulo , M , arr , dp ) :	      Disassembly of <code object isPossible at 0x7f33e2653ed0, fil Disassembly of <code object isPossible at 0x7f2b01639660, fil error : Traceback (most recent call last):   File
    modulo = ( ( modulo % M ) + M ) % M			      2 0 LOAD_FAST 2 ( modulo )				    2 0 LOAD_FAST 3 ( modulo )					  "XLM/dis_script.py", line 60, in <module>	exec
    if ( index == n ) :					      2 LOAD_FAST 3 ( M )					    2 LOAD_FAST 4 ( M )						  (item)   File "main.py", line 39, in <module>	  Fi
	if ( modulo == 0 ) :				      4 BINARY_MODULO						    4 BINARY_MODULO						  le "<dis>", line 2, in isPossible TypeError: unsup
	    return 1					      6 LOAD_FAST 3 ( M )					    6 LOAD_FAST 4 ( M )						  ported operand type(s) for %: 'int' and 'list'
	return 0					      8 BINARY_ADD						    8 BINARY_ADD						  
    if ( dp [ index ] [ modulo ] != - 1 ) :		      10 LOAD_FAST 3 ( M )					    10 LOAD_FAST 4 ( M )					  
	return dp [ index ] [ modulo ]			      12 BINARY_MODULO						    12 BINARY_MODULO						  
    placeAdd = isPossible ( n , index + 1 , modulo + arr [ in 14 STORE_FAST 2 ( modulo )				    14 STORE_FAST 5 ( modulo )					  
    placeMinus = isPossible ( n , index + 1 , modulo - arr [  								    								  
    res = bool ( placeAdd or placeMinus )		      3 16 LOAD_FAST 1 ( index )				    3 16 LOAD_FAST 1 ( index )					  
    dp [ index ] [ modulo ] = res			      18 LOAD_FAST 0 ( n )					    18 LOAD_FAST 0 ( n )					  
    return res						      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
							      22 POP_JUMP_IF_FALSE 40					    22 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      4 24 LOAD_FAST 2 ( modulo )				    4 24 LOAD_FAST 5 ( modulo )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 COMPARE_OP 2 ( == )					    28 COMPARE_OP 2 ( == )					  
							      30 POP_JUMP_IF_FALSE 36					    30 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      5 32 LOAD_CONST 2 ( 1 )					    5 32 LOAD_CONST 2 ( 1 )					  
							      34 RETURN_VALUE						    34 RETURN_VALUE						  
							      								    								  
							      6 >> 36 LOAD_CONST 1 ( 0 )				    6 >> 36 LOAD_CONST 1 ( 0 )					  
							      38 RETURN_VALUE						    38 RETURN_VALUE						  
							      								    								  
							      7 >> 40 LOAD_FAST 5 ( dp )				    7 >> 40 LOAD_FAST 5 ( dp )					  
							      42 LOAD_FAST 1 ( index )					    42 LOAD_FAST 1 ( index )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 2 ( modulo )					    46 LOAD_FAST 5 ( modulo )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 3 ( - 1 )					    50 LOAD_CONST 3 ( - 1 )					  
							      52 COMPARE_OP 3 ( != )					    52 COMPARE_OP 3 ( != )					  
							      54 POP_JUMP_IF_FALSE 68					    54 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      8 56 LOAD_FAST 5 ( dp )					    8 56 LOAD_FAST 5 ( dp )					  
							      58 LOAD_FAST 1 ( index )					    58 LOAD_FAST 1 ( index )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 2 ( modulo )					    62 LOAD_FAST 5 ( modulo )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 RETURN_VALUE						    66 RETURN_VALUE						  
							      								    								  
							      9 >> 68 LOAD_GLOBAL 0 ( isPossible )			    9 >> 68 LOAD_GLOBAL 0 ( isPossible )			  
							      70 LOAD_FAST 0 ( n )					    70 LOAD_FAST 0 ( n )					  
							      72 LOAD_FAST 1 ( index )					    72 LOAD_FAST 1 ( index )					  
							      74 LOAD_CONST 2 ( 1 )					    74 LOAD_CONST 2 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 2 ( modulo )					    78 LOAD_FAST 5 ( modulo )					  
							      80 LOAD_FAST 4 ( arr )					    80 LOAD_FAST 4 ( M )					  
							      82 LOAD_FAST 1 ( index )					    82 LOAD_FAST 3 ( arr )					  
							      84 BINARY_SUBSCR						    84 LOAD_FAST 4 ( M )					  
							      86 BINARY_ADD						    86 CALL_FUNCTION 5						  
							      88 LOAD_FAST 3 ( M )					    88 STORE_FAST 6 ( place)					  
							      90 LOAD_FAST 4 ( arr )					    								  
							      92 LOAD_FAST 5 ( dp )					    10 90 LOAD_GLOBAL 0 ( isPossible )				  
							      94 CALL_FUNCTION 6					    92 LOAD_FAST 0 ( n )					  
							      96 STORE_FAST 6 ( placeAdd )				    94 LOAD_FAST 1 ( index )					  
							      								    96 LOAD_CONST 2 ( 1 )					  
							      10 98 LOAD_GLOBAL 0 ( isPossible )			    98 BINARY_ADD						  
							      100 LOAD_FAST 0 ( n )					    100 LOAD_FAST 5 ( modulo )					  
							      102 LOAD_FAST 1 ( index )					    102 LOAD_FAST 4 ( M )					  
							      104 LOAD_CONST 2 ( 1 )					    104 LOAD_FAST 3 ( arr )					  
							      106 BINARY_ADD						    106 LOAD_FAST 4 ( M )					  
							      108 LOAD_FAST 2 ( modulo )				    108 CALL_FUNCTION 5						  
							      110 LOAD_FAST 4 ( arr )					    110 STORE_FAST 7 ( place)					  
							      112 LOAD_FAST 1 ( index )					    								  
							      114 BINARY_SUBSCR						    11 112 LOAD_GLOBAL 0 ( isPossible )				  
							      116 BINARY_SUBTRACT					    114 LOAD_FAST 0 ( n )					  
							      118 LOAD_FAST 3 ( M )					    116 LOAD_FAST 1 ( index )					  
							      120 LOAD_FAST 4 ( arr )					    118 LOAD_CONST 2 ( 1 )					  
							      122 LOAD_FAST 5 ( dp )					    120 BINARY_ADD						  
							      124 CALL_FUNCTION 6					    122 LOAD_FAST 5 ( modulo )					  
							      126 STORE_FAST 7 ( placeMinus )				    124 LOAD_FAST 4 ( M )					  
							      								    126 LOAD_FAST 3 ( arr )					  
							      11 128 LOAD_GLOBAL 1 ( bool )				    128 LOAD_FAST 4 ( dp )					  
							      130 LOAD_FAST 6 ( placeAdd )				    130 CALL_FUNCTION 5						  
							      132 JUMP_IF_TRUE_OR_POP 136				    132 STORE_FAST 8 ( place)					  
							      134 LOAD_FAST 7 ( placeMinus )				    								  
							      >> 136 CALL_FUNCTION 1					    12 134 LOAD_GLOBAL 1 ( bool )				  
							      138 STORE_FAST 8 ( res )					    136 LOAD_FAST 8 ( placeAdd )				  
							      								    138 JUMP_IF_TRUE_OR_POP 144					  
							      12 140 LOAD_FAST 8 ( res )				    140 LOAD_FAST 9 ( placeMinus )				  
							      142 LOAD_FAST 5 ( dp )					    142 CALL_FUNCTION 1						  
							      144 LOAD_FAST 1 ( index )					    >> 144 STORE_FAST 9 ( res )					  
							      146 BINARY_SUBSCR						    								  
							      148 LOAD_FAST 2 ( modulo )				    13 146 LOAD_FAST 9 ( res )					  
							      150 STORE_SUBSCR						    148 LOAD_FAST 4 ( M )					  
							      								    150 LOAD_FAST 0 ( n )					  
							      13 152 LOAD_FAST 8 ( res )				    152 BINARY_SUBSCR						  
							      154 RETURN_VALUE NEW_LINE					    154 LOAD_FAST 5 ( modulo )					  
							      								    156 STORE_SUBSCR						  
							      								    								  
							      								    14 158 LOAD_FAST 9 ( res )					  
							      								    160 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEAF_NODES_PREORDER_BINARY_SEARCH_TREE			      LEAF_NODES_PREORDER_BINARY_SEARCH_TREE			    LEAF_NODES_PREORDER_BINARY_SEARCH_TREE			  LEAF_NODES_PREORDER_BINARY_SEARCH_TREE
--							      --							    --								  --
def leafNode ( preorder , n ) :				      Disassembly of <code object leafNode at 0x7f33e2644f60, file  Disassembly of <code object leafNode at 0x7f2b0163dc90, file  script_not_found : None
    s = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    i = 0						      2 STORE_FAST 2 ( s )					    2 STORE_FAST 2 ( s )					  
    for j in range ( 1 , n ) :				      								    								  
	found = False					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	if preorder [ i ] > preorder [ j ] :		      6 STORE_FAST 3 ( i )					    6 STORE_FAST 3 ( i )					  
	    s.append ( preorder [ i ] )			      								    								  
	else :						      4 8 SETUP_LOOP 134 ( to 144 )				    4 8 SETUP_LOOP 138 ( to 148 )				  
	    while len ( s ) != 0 :			      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
		if preorder [ j ] > s [ - 1 ] :		      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
		    s.pop ( - 1 )			      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
		    found = True			      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
		else :					      18 GET_ITER						    18 GET_ITER							  
		    break				      >> 20 FOR_ITER 120 ( to 142 )				    >> 20 FOR_ITER 124 ( to 146 )				  
	if found :					      22 STORE_FAST 4 ( j )					    22 STORE_FAST 4 ( j )					  
	    print ( preorder [ i ] , end = " " )	      								    								  
	i += 1						      5 24 LOAD_CONST 3 ( False )				    5 24 LOAD_CONST 3 ( False )					  
    print ( preorder [ n - 1 ] )			      26 STORE_FAST 5 ( found )					    26 STORE_FAST 5 ( found )					  
							      								    								  
							      6 28 LOAD_FAST 0 ( preorder )				    6 28 LOAD_FAST 0 ( preorder )				  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 3 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 0 ( preorder )				    34 LOAD_FAST 0 ( preorder )					  
							      36 LOAD_FAST 4 ( j )					    36 LOAD_FAST 4 ( j )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 COMPARE_OP 4 ( > )					    40 COMPARE_OP 4 ( > )					  
							      42 POP_JUMP_IF_FALSE 60					    42 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      7 44 LOAD_FAST 2 ( s )					    7 44 LOAD_FAST 2 ( s )					  
							      46 LOAD_METHOD 1 ( append )				    46 LOAD_METHOD 1 ( append )					  
							      48 LOAD_FAST 0 ( preorder )				    48 LOAD_FAST 0 ( preorder )					  
							      50 LOAD_FAST 3 ( i )					    50 LOAD_FAST 3 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 CALL_METHOD 1						    54 CALL_METHOD 1						  
							      56 POP_TOP						    56 POP_TOP							  
							      58 JUMP_FORWARD 52 ( to 112 )				    58 JUMP_ABSOLUTE 20						  
							      								    60 JUMP_FORWARD 40 ( to 108 )				  
							      9 >> 60 SETUP_LOOP 50 ( to 112 )				    								  
							      >> 62 LOAD_GLOBAL 2 ( len )				    9 >> 62 SETUP_LOOP 46 ( to 108 )				  
							      64 LOAD_FAST 2 ( s )					    >> 64 LOAD_GLOBAL 2 ( len )					  
							      66 CALL_FUNCTION 1					    66 LOAD_FAST 2 ( s )					  
							      68 LOAD_CONST 1 ( 0 )					    68 CALL_FUNCTION 1						  
							      70 COMPARE_OP 3 ( != )					    70 LOAD_CONST 1 ( 0 )					  
							      72 POP_JUMP_IF_FALSE 110					    72 COMPARE_OP 3 ( != )					  
							      								    74 POP_JUMP_IF_FALSE 106					  
							      10 74 LOAD_FAST 0 ( preorder )				    								  
							      76 LOAD_FAST 4 ( j )					    10 76 LOAD_FAST 0 ( preorder )				  
							      78 BINARY_SUBSCR						    78 LOAD_FAST 4 ( j )					  
							      80 LOAD_FAST 2 ( s )					    80 BINARY_SUBSCR						  
							      82 LOAD_CONST 4 ( - 1 )					    82 LOAD_FAST 2 ( s )					  
							      84 BINARY_SUBSCR						    84 LOAD_CONST 4 ( - 1 )					  
							      86 COMPARE_OP 4 ( > )					    86 BINARY_SUBSCR						  
							      88 POP_JUMP_IF_FALSE 106					    88 COMPARE_OP 4 ( > )					  
							      								    90 POP_JUMP_IF_FALSE 106					  
							      11 90 LOAD_FAST 2 ( s )					    								  
							      92 LOAD_METHOD 3 ( pop )					    11 92 LOAD_FAST 2 ( s )					  
							      94 LOAD_CONST 4 ( - 1 )					    94 LOAD_METHOD 3 ( pop )					  
							      96 CALL_METHOD 1						    96 LOAD_CONST 4 ( - 1 )					  
							      98 POP_TOP						    98 CALL_METHOD 1						  
							      								    100 POP_TOP							  
							      12 100 LOAD_CONST 5 ( True )				    								  
							      102 STORE_FAST 5 ( found )				    12 102 LOAD_CONST 5 ( True )				  
							      104 JUMP_ABSOLUTE 62					    104 STORE_FAST 5 ( found )					  
							      								    								  
							      14 >> 106 BREAK_LOOP					    13 >> 106 BREAK_LOOP					  
							      108 JUMP_ABSOLUTE 62					    								  
							      >> 110 POP_BLOCK						    15 >> 108 BREAK_LOOP					  
							      								    110 JUMP_ABSOLUTE 64					  
							      15 >> 112 LOAD_FAST 5 ( found )				    >> 112 POP_BLOCK						  
							      114 POP_JUMP_IF_FALSE 132					    								  
							      								    16 >> 114 LOAD_FAST 5 ( found )				  
							      16 116 LOAD_GLOBAL 4 ( print )				    116 POP_JUMP_IF_FALSE 132					  
							      118 LOAD_FAST 0 ( preorder )				    								  
							      120 LOAD_FAST 3 ( i )					    17 118 LOAD_GLOBAL 4 ( print )				  
							      122 BINARY_SUBSCR						    120 LOAD_FAST 0 ( preorder )				  
							      124 LOAD_CONST 6 ( ' ' )					    122 LOAD_FAST 3 ( i )					  
							      126 LOAD_CONST 7 ( ( 'end' , ) )				    124 BINARY_SUBSCR						  
							      128 CALL_FUNCTION_KW 2					    126 LOAD_CONST 6 ( ' ' )					  
							      130 POP_TOP						    128 LOAD_CONST 7 ( ( 'end' , ) )				  
							      								    130 CALL_FUNCTION_KW 2					  
							      17 >> 132 LOAD_FAST 3 ( i )				    132 POP_TOP							  
							      134 LOAD_CONST 2 ( 1 )					    								  
							      136 INPLACE_ADD						    18 134 LOAD_FAST 3 ( i )					  
							      138 STORE_FAST 3 ( i )					    136 LOAD_CONST 2 ( 1 )					  
							      140 JUMP_ABSOLUTE 20					    138 INPLACE_ADD						  
							      >> 142 POP_BLOCK						    140 STORE_FAST 3 ( i )					  
							      								    142 JUMP_ABSOLUTE 24					  
							      18 >> 144 LOAD_GLOBAL 4 ( print )				    144 POP_BLOCK						  
							      146 LOAD_FAST 0 ( preorder )				    								  
							      148 LOAD_FAST 1 ( n )					    19 >> 146 LOAD_GLOBAL 4 ( print )				  
							      150 LOAD_CONST 2 ( 1 )					    148 LOAD_FAST 0 ( preorder )				  
							      152 BINARY_SUBTRACT					    150 LOAD_FAST 1 ( n )					  
							      154 BINARY_SUBSCR						    152 LOAD_CONST 2 ( 1 )					  
							      156 CALL_FUNCTION 1					    154 BINARY_SUBTRACT						  
							      158 POP_TOP						    156 BINARY_SUBSCR						  
							      160 LOAD_CONST 0 ( None )					    158 CALL_FUNCTION 1						  
							      162 RETURN_VALUE NEW_LINE					    160 POP_TOP							  
							      								    162 LOAD_CONST 0 ( None )					  
							      								    164 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT
--							      --							    --								  --
def minTimeForWritingChars ( N , insrt , remov , cpy ) :      Disassembly of <code object minTimeForWritingChars at 0x7f33e Disassembly of <code object minTimeForWritingChars at 0x7f2b0 error : Traceback (most recent call last):   File
    if N == 0 :						      2 0 LOAD_FAST 0 ( N )					    2 0 LOAD_FAST 0 ( N )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 38, in <module>	  Fi
    if N == 1 :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in minTimeForWritingChars Inde
	return insrt					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  xError: list index out of range
    dp = [ 0 ] * ( N + 1 )				      								    								  
    for i in range ( 1 , N + 1 ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	if i % 2 == 0 :					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	    dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i // 								    								  
	else :						      4 >> 12 LOAD_FAST 0 ( N )					    4 >> 12 LOAD_FAST 0 ( N )					  
	    dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ ( i  14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
    return dp [ N ]					      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_FAST 1 ( insrt )				    5 20 LOAD_FAST 1 ( insrt )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_CONST 1 ( 0 )				    6 >> 24 LOAD_CONST 1 ( 0 )					  
							      26 BUILD_LIST 1						    26 BUILD_LIST 1						  
							      28 LOAD_FAST 0 ( N )					    28 LOAD_FAST 0 ( N )					  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 BINARY_MULTIPLY					    34 BINARY_MULTIPLY						  
							      36 STORE_FAST 4 ( dp )					    36 STORE_FAST 4 ( dp )					  
							      								    								  
							      7 38 SETUP_LOOP 120 ( to 160 )				    7 38 SETUP_LOOP 140 ( to 182 )				  
							      40 LOAD_GLOBAL 0 ( range )				    40 LOAD_GLOBAL 0 ( range )					  
							      42 LOAD_CONST 2 ( 1 )					    42 LOAD_CONST 2 ( 1 )					  
							      44 LOAD_FAST 0 ( N )					    44 LOAD_FAST 0 ( N )					  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 2 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 CALL_FUNCTION 2					    50 CALL_FUNCTION 2						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 102 ( to 158 )				    >> 54 FOR_ITER 128 ( to 180 )				  
							      56 STORE_FAST 5 ( i )					    56 STORE_FAST 5 ( i )					  
							      								    								  
							      8 58 LOAD_FAST 5 ( i )					    8 58 LOAD_FAST 5 ( i )					  
							      60 LOAD_CONST 3 ( 2 )					    60 LOAD_CONST 3 ( 2 )					  
							      62 BINARY_MODULO						    62 BINARY_MODULO						  
							      64 LOAD_CONST 1 ( 0 )					    64 LOAD_CONST 1 ( 0 )					  
							      66 COMPARE_OP 2 ( == )					    66 COMPARE_OP 2 ( == )					  
							      68 POP_JUMP_IF_FALSE 110					    68 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      9 70 LOAD_GLOBAL 1 ( min )				    9 70 LOAD_GLOBAL 1 ( min )					  
							      72 LOAD_FAST 4 ( dp )					    72 LOAD_FAST 4 ( dp )					  
							      74 LOAD_FAST 5 ( i )					    74 LOAD_FAST 5 ( i )					  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 LOAD_FAST 1 ( insrt )					    82 LOAD_FAST 1 ( insrt )					  
							      84 BINARY_ADD						    84 BINARY_ADD						  
							      86 LOAD_FAST 4 ( dp )					    86 LOAD_FAST 4 ( dp )					  
							      88 LOAD_FAST 5 ( i )					    88 LOAD_FAST 5 ( i )					  
							      90 LOAD_CONST 3 ( 2 )					    90 LOAD_CONST 3 ( 2 )					  
							      92 BINARY_FLOOR_DIVIDE					    92 BINARY_FLOOR_DIVIDE					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 LOAD_FAST 3 ( cpy )					    96 LOAD_FAST 2 ( cpy )					  
							      98 BINARY_ADD						    98 BINARY_ADD						  
							      100 CALL_FUNCTION 2					    100 CALL_FUNCTION 2						  
							      102 LOAD_FAST 4 ( dp )					    102 LOAD_FAST 4 ( dp )					  
							      104 LOAD_FAST 5 ( i )					    104 LOAD_FAST 5 ( i )					  
							      106 STORE_SUBSCR						    106 STORE_SUBSCR						  
							      108 JUMP_ABSOLUTE 54					    108 JUMP_ABSOLUTE 54					  
							      								    								  
							      11 >> 110 LOAD_GLOBAL 1 ( min )				    11 >> 110 LOAD_GLOBAL 1 ( min )				  
							      112 LOAD_FAST 4 ( dp )					    112 LOAD_FAST 4 ( dp )					  
							      114 LOAD_FAST 5 ( i )					    114 LOAD_FAST 5 ( i )					  
							      116 LOAD_CONST 2 ( 1 )					    116 LOAD_CONST 2 ( 1 )					  
							      118 BINARY_SUBTRACT					    118 BINARY_SUBTRACT						  
							      120 BINARY_SUBSCR						    120 BINARY_SUBSCR						  
							      122 LOAD_FAST 1 ( insrt )					    122 LOAD_FAST 1 ( insrt )					  
							      124 BINARY_ADD						    124 BINARY_ADD						  
							      126 LOAD_FAST 4 ( dp )					    126 LOAD_FAST 4 ( dp )					  
							      128 LOAD_FAST 5 ( i )					    128 LOAD_FAST 5 ( i )					  
							      130 LOAD_CONST 2 ( 1 )					    130 LOAD_CONST 3 ( 2 )					  
							      132 BINARY_ADD						    132 BINARY_ADD						  
							      134 LOAD_CONST 3 ( 2 )					    134 BINARY_SUBSCR						  
							      136 BINARY_FLOOR_DIVIDE					    136 LOAD_FAST 2 ( cpy )					  
							      138 BINARY_SUBSCR						    138 BINARY_ADD						  
							      140 LOAD_FAST 3 ( cpy )					    140 LOAD_FAST 3 ( remo)					  
							      142 BINARY_ADD						    142 BINARY_ADD						  
							      144 LOAD_FAST 2 ( remov )					    144 CALL_FUNCTION 2						  
							      146 BINARY_ADD						    146 LOAD_FAST 4 ( dp )					  
							      148 CALL_FUNCTION 2					    148 LOAD_FAST 5 ( i )					  
							      150 LOAD_FAST 4 ( dp )					    150 STORE_SUBSCR						  
							      152 LOAD_FAST 5 ( i )					    152 JUMP_ABSOLUTE 54					  
							      154 STORE_SUBSCR						    >> 154 POP_BLOCK						  
							      156 JUMP_ABSOLUTE 54					    								  
							      >> 158 POP_BLOCK						    12 >> 156 LOAD_FAST 4 ( dp )				  
							      								    158 LOAD_FAST 0 ( N )					  
							      12 >> 160 LOAD_FAST 4 ( dp )				    160 BINARY_SUBSCR						  
							      162 LOAD_FAST 0 ( N )					    162 RETURN_VALUE NEW_LINE					  
							      164 BINARY_SUBSCR						    								  
							      166 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PREFIX_ALSO_SUFFIX_1				      LONGEST_PREFIX_ALSO_SUFFIX_1				    LONGEST_PREFIX_ALSO_SUFFIX_1				  LONGEST_PREFIX_ALSO_SUFFIX_1
--							      --							    --								  --
def longestPrefixSuffix ( s ) :				      Disassembly of <code object longestPrefixSuffix at 0x7f33e265 Disassembly of <code object longestPrefixSufCO_MEMORY 0x7f2b0 error : /bin/bash: line 1:  4892 Segmentation faul
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    lps = [ 0 ] * n					      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ataset/bin/python XLM/dis_script.py --script_path
    l = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    i = 1						      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/LONGES
    while ( i < n ) :					      								    								  T_PREFIX_ALSO_SUFFIX_1.dis
	if ( s [ i ] == s [ l ] ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    l = l + 1					      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
	    lps [ i ] = l				      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
	    i = i + 1					      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
	else :						      16 STORE_FAST 2 ( lps )					    16 STORE_FAST 2 ( lps )					  
	    if ( l != 0 ) :				      								    								  
		l = lps [ l - 1 ]			      4 18 LOAD_CONST 1 ( 0 )					    4 18 LOAD_CONST 1 ( 0 )					  
	    else :					      20 STORE_FAST 3 ( l )					    20 STORE_FAST 3 ( l )					  
		lps [ i ] = 0				      								    								  
		i = i + 1				      5 22 LOAD_CONST 2 ( 1 )					    5 22 LOAD_CONST 2 ( 1 )					  
    res = lps [ n - 1 ]					      24 STORE_FAST 4 ( i )					    24 STORE_FAST 4 ( i )					  
    if ( res > n / 2 ) :				      								    								  
	return n // 2					      6 26 SETUP_LOOP 92 ( to 120 )				    6 26 SETUP_LOOP 76 ( to 96 )				  
    else :						      >> 28 LOAD_FAST 4 ( i )					    >> 28 LOAD_FAST 4 ( i )					  
	return res					      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      32 COMPARE_OP 0 ( < )					    32 COMPARE_OP 0 ( < )					  
							      34 POP_JUMP_IF_FALSE 118					    34 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      7 36 LOAD_FAST 0 ( s )					    7 36 LOAD_FAST 0 ( s )					  
							      38 LOAD_FAST 4 ( i )					    38 LOAD_FAST 4 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( s )					    42 LOAD_FAST 0 ( s )					  
							      44 LOAD_FAST 3 ( l )					    44 LOAD_FAST 3 ( l )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 COMPARE_OP 2 ( == )					    48 COMPARE_OP 2 ( == )					  
							      50 POP_JUMP_IF_FALSE 78					    50 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      8 52 LOAD_FAST 3 ( l )					    8 52 LOAD_FAST 3 ( l )					  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_ADD						    56 BINARY_ADD						  
							      58 STORE_FAST 3 ( l )					    58 STORE_FAST 3 ( l )					  
							      								    								  
							      9 60 LOAD_FAST 3 ( l )					    9 60 LOAD_FAST 3 ( l )					  
							      62 LOAD_FAST 2 ( lps )					    62 LOAD_FAST 2 ( lps )					  
							      64 LOAD_FAST 4 ( i )					    64 LOAD_FAST 4 ( i )					  
							      66 STORE_SUBSCR						    66 STORE_SUBSCR						  
							      								    								  
							      10 68 LOAD_FAST 4 ( i )					    10 68 LOAD_FAST 4 ( i )					  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 STORE_FAST 4 ( i )					    74 STORE_FAST 4 ( i )					  
							      76 JUMP_ABSOLUTE 28					    76 JUMP_ABSOLUTE 28						  
							      								    								  
							      12 >> 78 LOAD_FAST 3 ( l )				    12 >> 78 LOAD_FAST 3 ( l )					  
							      80 LOAD_CONST 1 ( 0 )					    80 LOAD_CONST 1 ( 0 )					  
							      82 COMPARE_OP 3 ( != )					    82 COMPARE_OP 3 ( != )					  
							      84 POP_JUMP_IF_FALSE 100					    84 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      13 86 LOAD_FAST 2 ( lps )					    13 86 LOAD_FAST 2 ( lps )					  
							      88 LOAD_FAST 3 ( l )					    88 LOAD_FAST 3 ( l )					  
							      90 LOAD_CONST 2 ( 1 )					    90 LOAD_CONST 2 ( 1 )					  
							      92 BINARY_SUBTRACT					    92 BINARY_SUBTRACT						  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 STORE_FAST 3 ( l )					    96 STORE_FAST 3 ( l )					  
							      98 JUMP_ABSOLUTE 28					    98 JUMP_FORWARD 8 ( to 110 )				  
							      								    								  
							      15 >> 100 LOAD_CONST 1 ( 0 )				    15 >> 100 LOAD_CONST 1 ( 0 )				  
							      102 LOAD_FAST 2 ( lps )					    102 LOAD_FAST 2 ( lps )					  
							      104 LOAD_FAST 4 ( i )					    104 LOAD_FAST 4 ( i )					  
							      106 STORE_SUBSCR						    106 STORE_SUBSCR						  
							      								    								  
							      16 108 LOAD_FAST 4 ( i )					    16 108 LOAD_FAST 4 ( i )					  
							      110 LOAD_CONST 2 ( 1 )					    110 LOAD_CONST 2 ( 1 )					  
							      112 BINARY_ADD						    112 BINARY_ADD						  
							      114 STORE_FAST 4 ( i )					    114 STORE_FAST 4 ( i )					  
							      116 JUMP_ABSOLUTE 28					    116 JUMP_ABSOLUTE 28					  
							      >> 118 POP_BLOCK						    >> 118 POP_BLOCK						  
							      								    								  
							      17 >> 120 LOAD_FAST 2 ( lps )				    17 >> 120 LOAD_FAST 2 ( lps )				  
							      122 LOAD_FAST 1 ( n )					    122 LOAD_FAST 1 ( n )					  
							      124 LOAD_CONST 2 ( 1 )					    124 LOAD_CONST 2 ( 1 )					  
							      126 BINARY_SUBTRACT					    126 BINARY_SUBTRACT						  
							      128 BINARY_SUBSCR						    128 BINARY_SUBSCR						  
							      130 STORE_FAST 5 ( res )					    130 STORE_FAST 5 ( res )					  
							      								    								  
							      18 132 LOAD_FAST 5 ( res )				    18 132 LOAD_FAST 5 ( res )					  
							      134 LOAD_FAST 1 ( n )					    134 LOAD_FAST 1 ( n )					  
							      136 LOAD_CONST 3 ( 2 )					    136 LOAD_CONST 3 ( 2 )					  
							      138 BINARY_TRUE_DIVIDE					    138 BINARY_TRUE_DIVIDE					  
							      140 COMPARE_OP 4 ( > )					    140 COMPARE_OP 4 ( > )					  
							      142 POP_JUMP_IF_FALSE 152					    142 POP_JUMP_IF_FALSE 148					  
							      								    								  
							      19 144 LOAD_FAST 1 ( n )					    19 144 LOAD_FAST 1 ( n )					  
							      146 LOAD_CONST 3 ( 2 )					    146 LOAD_CONST 3 ( 2 )					  
							      148 BINARY_FLOOR_DIVIDE					    148 BINARY_FLOOR_DIVIDE					  
							      150 RETURN_VALUE						    150 RETURN_VALUE						  
							      								    								  
							      21 >> 152 LOAD_FAST 5 ( res )				    21 >> 152 LOAD_FAST 5 ( res )				  
							      154 RETURN_VALUE						    154 RETURN_VALUE						  
							      156 LOAD_CONST 0 ( None )					    156 LOAD_CONST 0 ( None )					  
							      158 RETURN_VALUE NEW_LINE					    158 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH
--							      --							    --								  --
def findElement ( arr , n ) :				      Disassembly of <code object findElement at 0x7f33e2649150, fi Disassembly of <code object findElement at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    leftMax = [ None ] * n				      2 0 LOAD_CONST 0 ( None )					    2 0 LOAD_CONST 0 ( None )					  "XLM/dis_script.py", line 60, in <module>	exec
    leftMax [ 0 ] = float ( '-inf' )			      2 BUILD_LIST 1						    2 BUILD_LIST 1						  (item)   File "main.py", line 37, in <module>	  Fi
    for i in range ( 1 , n ) :				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in findElement TypeError: 'str
	leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  ' object cannot be interpreted as an integer
    rightMin = float ( 'inf' )				      8 STORE_FAST 2 ( leftMax )				    8 STORE_FAST 2 ( leftMax )					  
    for i in range ( n - 1 , - 1 , - 1 ) :		      								    								  
	if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] 3 10 LOAD_GLOBAL 0 ( float )				    3 10 LOAD_GLOBAL 0 ( float )				  
	    return i					      12 LOAD_CONST 1 ( '-inf' )				    12 LOAD_CONST 1 ( '-inf' )					  
	rightMin = min ( rightMin , arr [ i ] )		      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
    return - 1						      16 LOAD_FAST 2 ( leftMax )				    16 LOAD_FAST 2 ( leftMax )					  
							      18 LOAD_CONST 2 ( 0 )					    18 LOAD_CONST 2 ( 0 )					  
							      20 STORE_SUBSCR						    20 STORE_SUBSCR						  
							      								    								  
							      4 22 SETUP_LOOP 48 ( to 72 )				    4 22 SETUP_LOOP 42 ( to 66 )				  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_GLOBAL 1 ( range )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 34 ( to 70 )				    >> 34 FOR_ITER 30 ( to 64 )					  
							      36 STORE_FAST 3 ( i )					    36 STORE_FAST 3 ( i )					  
							      								    								  
							      5 38 LOAD_GLOBAL 2 ( max )				    5 38 LOAD_GLOBAL 2 ( max )					  
							      40 LOAD_FAST 2 ( leftMax )				    40 LOAD_FAST 2 ( leftMax )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 LOAD_CONST 3 ( 1 )					    44 LOAD_CONST 3 ( 1 )					  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 3 ( i )					    52 LOAD_FAST 3 ( i )					  
							      54 LOAD_CONST 3 ( 1 )					    54 LOAD_CONST 3 ( 1 )					  
							      56 BINARY_SUBTRACT					    56 BINARY_SUBTRACT						  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 LOAD_FAST 2 ( leftMax )				    62 LOAD_FAST 2 ( leftMax )					  
							      64 LOAD_FAST 3 ( i )					    >> 64 LOAD_FAST 3 ( i )					  
							      66 STORE_SUBSCR						    66 STORE_SUBSCR						  
							      68 JUMP_ABSOLUTE 34					    								  
							      >> 70 POP_BLOCK						    6 68 SETUP_LOOP 80 ( to 158 )				  
							      								    70 LOAD_GLOBAL 1 ( range )					  
							      6 >> 72 LOAD_GLOBAL 0 ( float )				    72 LOAD_FAST 1 ( n )					  
							      74 LOAD_CONST 4 ( 'inf' )					    74 LOAD_CONST 3 ( 1 )					  
							      76 CALL_FUNCTION 1					    76 BINARY_SUBTRACT						  
							      78 STORE_FAST 4 ( rightMin )				    78 LOAD_CONST 4 ( - 1 )					  
							      								    80 LOAD_CONST 4 ( - 1 )					  
							      7 80 SETUP_LOOP 70 ( to 152 )				    82 CALL_FUNCTION 3						  
							      82 LOAD_GLOBAL 1 ( range )				    84 GET_ITER							  
							      84 LOAD_FAST 1 ( n )					    >> 86 FOR_ITER 58 ( to 156 )				  
							      86 LOAD_CONST 3 ( 1 )					    88 STORE_FAST 3 ( i )					  
							      88 BINARY_SUBTRACT					    								  
							      90 LOAD_CONST 5 ( - 1 )					    7 90 LOAD_FAST 2 ( leftMax )				  
							      92 LOAD_CONST 5 ( - 1 )					    92 LOAD_FAST 3 ( i )					  
							      94 CALL_FUNCTION 3					    94 BINARY_SUBSCR						  
							      96 GET_ITER						    96 LOAD_FAST 0 ( arr )					  
							      >> 98 FOR_ITER 50 ( to 150 )				    98 LOAD_FAST 3 ( i )					  
							      100 STORE_FAST 3 ( i )					    100 BINARY_SUBSCR						  
							      								    102 COMPARE_OP 0 ( < )					  
							      8 102 LOAD_FAST 2 ( leftMax )				    104 POP_JUMP_IF_FALSE 116					  
							      104 LOAD_FAST 3 ( i )					    106 LOAD_FAST 4 ( rightMin )				  
							      106 BINARY_SUBSCR						    108 LOAD_FAST 0 ( arr )					  
							      108 LOAD_FAST 0 ( arr )					    110 LOAD_FAST 3 ( i )					  
							      110 LOAD_FAST 3 ( i )					    112 BINARY_SUBSCR						  
							      112 BINARY_SUBSCR						    114 COMPARE_OP 0 ( < )					  
							      114 COMPARE_OP 0 ( < )					    >> 116 STORE_FAST 4 ( rightMin )				  
							      116 POP_JUMP_IF_FALSE 134					    								  
							      118 LOAD_FAST 4 ( rightMin )				    8 118 LOAD_GLOBAL 3 ( min )					  
							      120 LOAD_FAST 0 ( arr )					    120 LOAD_FAST 4 ( rightMin )				  
							      122 LOAD_FAST 3 ( i )					    122 LOAD_FAST 0 ( arr )					  
							      124 BINARY_SUBSCR						    124 LOAD_FAST 3 ( i )					  
							      126 COMPARE_OP 4 ( > )					    126 BINARY_SUBSCR						  
							      128 POP_JUMP_IF_FALSE 134					    128 CALL_FUNCTION 2						  
							      								    130 STORE_FAST 4 ( rightMin )				  
							      9 130 LOAD_FAST 3 ( i )					    132 JUMP_ABSOLUTE 86					  
							      132 RETURN_VALUE						    >> 134 POP_BLOCK						  
							      								    								  
							      10 >> 134 LOAD_GLOBAL 3 ( min )				    9 >> 136 LOAD_CONST 4 ( - 1 )				  
							      136 LOAD_FAST 4 ( rightMin )				    138 RETURN_VALUE NEW_LINE					  
							      138 LOAD_FAST 0 ( arr )					    								  
							      140 LOAD_FAST 3 ( i )					    								  
							      142 BINARY_SUBSCR						    								  
							      144 CALL_FUNCTION 2					    								  
							      146 STORE_FAST 4 ( rightMin )				    								  
							      148 JUMP_ABSOLUTE 98					    								  
							      >> 150 POP_BLOCK						    								  
							      								    								  
							      11 >> 152 LOAD_CONST 5 ( - 1 )				    								  
							      154 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING
--							      --							    --								  --
def shufleArray ( a , f , l ) :				      Disassembly of <code object shufleArray at 0x7f33e2644930, fi Disassembly of <code object shufleArray at 0x7f2b01639660, fi script_not_found : None
    if ( l > f ) :					      2 0 LOAD_FAST 2 ( l )					    2 0 LOAD_FAST 2 ( l )					  
	return						      2 LOAD_FAST 1 ( f )					    2 LOAD_FAST 1 ( f )						  
    if ( l - f == 1 ) :					      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
	return						      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    mid = int ( ( f + l ) / 2 )				      								    								  
    temp = mid + 1					      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_CONST 0 ( None )					  
    mmid = int ( ( f + mid ) / 2 )			      10 RETURN_VALUE						    10 RETURN_VALUE						  
    for i in range ( mmid + 1 , mid + 1 ) :		      								    								  
	( a [ i ] , a [ temp ] ) = ( a [ temp ] , a [ i ] )   4 >> 12 LOAD_FAST 2 ( l )					    4 >> 12 LOAD_FAST 2 ( l )					  
	temp += 1					      14 LOAD_FAST 1 ( f )					    14 LOAD_FAST 1 ( f )					  
    shufleArray ( a , f , mid )				      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
    shufleArray ( a , mid + 1 , l )			      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
							      22 POP_JUMP_IF_FALSE 28					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 LOAD_CONST 0 ( None )				    5 24 LOAD_CONST 0 ( None )					  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      6 >> 28 LOAD_GLOBAL 0 ( int )				    6 >> 28 LOAD_GLOBAL 0 ( int )				  
							      30 LOAD_FAST 1 ( f )					    30 LOAD_FAST 1 ( f )					  
							      32 LOAD_FAST 2 ( l )					    32 LOAD_FAST 2 ( l )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 LOAD_CONST 2 ( 2 )					    36 LOAD_CONST 2 ( 2 )					  
							      38 BINARY_TRUE_DIVIDE					    38 BINARY_TRUE_DIVIDE					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 STORE_FAST 3 ( mid )					    42 STORE_FAST 3 ( mid )					  
							      								    								  
							      7 44 LOAD_FAST 3 ( mid )					    7 44 LOAD_FAST 3 ( mid )					  
							      46 LOAD_CONST 1 ( 1 )					    46 LOAD_CONST 1 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 STORE_FAST 4 ( temp )					    50 STORE_FAST 4 ( temp )					  
							      								    								  
							      8 52 LOAD_GLOBAL 0 ( int )				    8 52 LOAD_GLOBAL 0 ( int )					  
							      54 LOAD_FAST 1 ( f )					    54 LOAD_FAST 1 ( f )					  
							      56 LOAD_FAST 3 ( mid )					    56 LOAD_FAST 3 ( mid )					  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 LOAD_CONST 2 ( 2 )					    60 LOAD_CONST 2 ( 2 )					  
							      62 BINARY_TRUE_DIVIDE					    62 BINARY_TRUE_DIVIDE					  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 STORE_FAST 5 ( mmid )					    66 STORE_FAST 5 ( mmid )					  
							      								    								  
							      9 68 SETUP_LOOP 60 ( to 130 )				    9 68 SETUP_LOOP 54 ( to 124 )				  
							      70 LOAD_GLOBAL 1 ( range )				    70 LOAD_GLOBAL 1 ( range )					  
							      72 LOAD_FAST 5 ( mmid )					    72 LOAD_FAST 5 ( mmid )					  
							      74 LOAD_CONST 1 ( 1 )					    74 LOAD_CONST 1 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 3 ( mid )					    78 LOAD_FAST 3 ( mid )					  
							      80 LOAD_CONST 1 ( 1 )					    80 LOAD_CONST 1 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 CALL_FUNCTION 2					    84 CALL_FUNCTION 2						  
							      86 GET_ITER						    86 GET_ITER							  
							      >> 88 FOR_ITER 38 ( to 128 )				    >> 88 FOR_ITER 38 ( to 122 )				  
							      90 STORE_FAST 6 ( i )					    90 STORE_FAST 6 ( i )					  
							      								    								  
							      10 92 LOAD_FAST 0 ( a )					    10 92 LOAD_FAST 0 ( a )					  
							      94 LOAD_FAST 4 ( temp )					    94 LOAD_FAST 4 ( temp )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_FAST 0 ( a )					    98 LOAD_FAST 0 ( a )					  
							      100 LOAD_FAST 6 ( i )					    100 LOAD_FAST 4 ( temp )					  
							      102 BINARY_SUBSCR						    102 BINARY_SUBSCR						  
							      104 ROT_TWO						    104 BUILD_TUPLE 2						  
							      106 LOAD_FAST 0 ( a )					    106 LOAD_FAST 0 ( a )					  
							      108 LOAD_FAST 6 ( i )					    108 LOAD_FAST 6 ( i )					  
							      110 STORE_SUBSCR						    110 BINARY_SUBSCR						  
							      112 LOAD_FAST 0 ( a )					    112 BUILD_TUPLE 2						  
							      114 LOAD_FAST 4 ( temp )					    114 LOAD_FAST 0 ( a )					  
							      116 STORE_SUBSCR						    116 LOAD_FAST 6 ( i )					  
							      								    118 BINARY_SUBSCR						  
							      11 118 LOAD_FAST 4 ( temp )				    120 BUILD_TUPLE 2						  
							      120 LOAD_CONST 1 ( 1 )					    122 STORE_SUBSCR						  
							      122 INPLACE_ADD						    								  
							      124 STORE_FAST 4 ( temp )					    11 124 LOAD_FAST 4 ( temp )					  
							      126 JUMP_ABSOLUTE 88					    126 LOAD_CONST 1 ( 1 )					  
							      >> 128 POP_BLOCK						    128 INPLACE_ADD						  
							      								    130 STORE_FAST 4 ( temp )					  
							      12 >> 130 LOAD_GLOBAL 2 ( shufleArray )			    132 JUMP_ABSOLUTE 88					  
							      132 LOAD_FAST 0 ( a )					    >> 134 POP_BLOCK						  
							      134 LOAD_FAST 1 ( f )					    								  
							      136 LOAD_FAST 3 ( mid )					    12 >> 136 LOAD_GLOBAL 2 ( shufleArray )			  
							      138 CALL_FUNCTION 3					    138 LOAD_FAST 0 ( a )					  
							      140 POP_TOP						    140 LOAD_FAST 1 ( f )					  
							      								    142 LOAD_FAST 3 ( mid )					  
							      13 142 LOAD_GLOBAL 2 ( shufleArray )			    144 CALL_FUNCTION 3						  
							      144 LOAD_FAST 0 ( a )					    146 POP_TOP							  
							      146 LOAD_FAST 3 ( mid )					    								  
							      148 LOAD_CONST 1 ( 1 )					    13 148 LOAD_GLOBAL 2 ( shufleArray )			  
							      150 BINARY_ADD						    150 LOAD_FAST 0 ( a )					  
							      152 LOAD_FAST 2 ( l )					    152 LOAD_FAST 3 ( mid )					  
							      154 CALL_FUNCTION 3					    154 LOAD_CONST 1 ( 1 )					  
							      156 POP_TOP						    156 BINARY_ADD						  
							      158 LOAD_CONST 0 ( None )					    158 LOAD_FAST 2 ( l )					  
							      160 RETURN_VALUE NEW_LINE					    160 CALL_FUNCTION 3						  
							      								    162 POP_TOP							  
							      								    164 LOAD_CONST 0 ( None )					  
							      								    166 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU
--							      --							    --								  --
def printRoman ( number ) :				      Disassembly of <code object printRoman at 0x7f33e2653ed0, fil Disassembly of <code object printRoman at 0x7f2b0163dc90, fil script_not_found : None
    num = [ 1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 5 2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    sym = [ "I" , "IV" , "V" , "IX" , "X" , "XL" , "L" , "XC" 2 LOAD_CONST 2 ( 4 )					    2 LOAD_CONST 2 ( 4 )					  
    i = 12						      4 LOAD_CONST 3 ( 5 )					    4 LOAD_CONST 3 ( 5 )					  
    while number :					      6 LOAD_CONST 4 ( 9 )					    6 LOAD_CONST 4 ( 9 )					  
	div = number // num [ i ]			      8 LOAD_CONST 5 ( 10 )					    8 LOAD_CONST 5 ( 10 )					  
	number %= num [ i ]				      10 LOAD_CONST 6 ( 40 )					    10 LOAD_CONST 6 ( 50 )					  
	while div :					      12 LOAD_CONST 7 ( 50 )					    12 LOAD_CONST 7 ( 100 )					  
	    print ( sym [ i ] , end = "" )		      14 LOAD_CONST 8 ( 90 )					    14 LOAD_CONST 8 ( 100 )					  
	    div -= 1					      16 LOAD_CONST 9 ( 100 )					    16 LOAD_CONST 9 ( 100 )					  
	i -= 1						      18 LOAD_CONST 10 ( 400 )					    18 LOAD_CONST 10 ( 300 )					  
							      20 LOAD_CONST 11 ( 500 )					    20 LOAD_CONST 11 ( 1000 )					  
							      22 LOAD_CONST 12 ( 900 )					    22 BUILD_LIST 10						  
							      24 LOAD_CONST 13 ( 1000 )					    24 STORE_FAST 1 ( num )					  
							      26 BUILD_LIST 13						    								  
							      28 STORE_FAST 1 ( num )					    3 26 LOAD_CONST 12 ( 'I' )					  
							      								    28 LOAD_CONST 13 ( 'IV' )					  
							      3 30 LOAD_CONST 14 ( 'I' )				    30 LOAD_CONST 14 ( 'V' )					  
							      32 LOAD_CONST 15 ( 'IV' )					    32 LOAD_CONST 15 ( 'IX' )					  
							      34 LOAD_CONST 16 ( 'V' )					    34 LOAD_CONST 16 ( 'X' )					  
							      36 LOAD_CONST 17 ( 'IX' )					    36 LOAD_CONST 17 ( 'L' )					  
							      38 LOAD_CONST 18 ( 'X' )					    38 LOAD_CONST 18 ( 'C' )					  
							      40 LOAD_CONST 19 ( 'XL' )					    40 LOAD_CONST 19 ( 'D' )					  
							      42 LOAD_CONST 20 ( 'L' )					    42 LOAD_CONST 20 ( 'CM' )					  
							      44 LOAD_CONST 21 ( 'XC' )					    44 LOAD_CONST 21 ( 'M' )					  
							      46 LOAD_CONST 22 ( 'C' )					    46 BUILD_LIST 7						  
							      48 LOAD_CONST 23 ( 'CD' )					    48 STORE_FAST 2 ( sym )					  
							      50 LOAD_CONST 24 ( 'D' )					    								  
							      52 LOAD_CONST 25 ( 'CM' )					    4 50 LOAD_CONST 9 ( 12 )					  
							      54 LOAD_CONST 26 ( 'M' )					    52 STORE_FAST 3 ( i )					  
							      56 BUILD_LIST 13						    								  
							      58 STORE_FAST 2 ( sym )					    5 54 SETUP_LOOP 80 ( to 138 )				  
							      								    >> 56 LOAD_FAST 0 ( number )				  
							      4 60 LOAD_CONST 27 ( 12 )					    58 POP_JUMP_IF_FALSE 136					  
							      62 STORE_FAST 3 ( i )					    								  
							      								    6 60 LOAD_FAST 0 ( number )					  
							      5 64 SETUP_LOOP 74 ( to 140 )				    62 LOAD_FAST 1 ( num )					  
							      >> 66 LOAD_FAST 0 ( number )				    64 LOAD_FAST 3 ( i )					  
							      68 POP_JUMP_IF_FALSE 138					    66 BINARY_SUBSCR						  
							      								    68 BINARY_FLOOR_DIVIDE					  
							      6 70 LOAD_FAST 0 ( number )				    70 STORE_FAST 4 ( div )					  
							      72 LOAD_FAST 1 ( num )					    								  
							      74 LOAD_FAST 3 ( i )					    7 72 LOAD_FAST 1 ( num )					  
							      76 BINARY_SUBSCR						    74 LOAD_FAST 3 ( i )					  
							      78 BINARY_FLOOR_DIVIDE					    76 BINARY_SUBSCR						  
							      80 STORE_FAST 4 ( div )					    78 STORE_FAST 0 ( number )					  
							      								    								  
							      7 82 LOAD_FAST 0 ( number )				    8 80 SETUP_LOOP 38 ( to 134 )				  
							      84 LOAD_FAST 1 ( num )					    >> 82 LOAD_FAST 4 ( div )					  
							      86 LOAD_FAST 3 ( i )					    84 POP_JUMP_IF_FALSE 132					  
							      88 BINARY_SUBSCR						    								  
							      90 INPLACE_MODULO						    9 86 LOAD_GLOBAL 0 ( print )				  
							      92 STORE_FAST 0 ( number )				    88 LOAD_FAST 2 ( sym )					  
							      								    90 LOAD_FAST 3 ( i )					  
							      8 94 SETUP_LOOP 32 ( to 128 )				    92 BINARY_SUBSCR						  
							      >> 96 LOAD_FAST 4 ( div )					    94 LOAD_CONST 18 ( '' )					  
							      98 POP_JUMP_IF_FALSE 126					    96 LOAD_CONST 19 ( ( 'end' , ) )				  
							      								    98 CALL_FUNCTION_KW 2					  
							      9 100 LOAD_GLOBAL 0 ( print )				    100 POP_TOP							  
							      102 LOAD_FAST 2 ( sym )					    								  
							      104 LOAD_FAST 3 ( i )					    10 102 LOAD_FAST 4 ( div )					  
							      106 BINARY_SUBSCR						    104 LOAD_CONST 1 ( 1 )					  
							      108 LOAD_CONST 28 ( '' )					    106 INPLACE_SUBTRACT					  
							      110 LOAD_CONST 29 ( ( 'end' , ) )				    108 STORE_FAST 4 ( div )					  
							      112 CALL_FUNCTION_KW 2					    110 JUMP_ABSOLUTE 82					  
							      114 POP_TOP						    >> 112 POP_BLOCK						  
							      								    								  
							      10 116 LOAD_FAST 4 ( div )				    11 >> 114 LOAD_FAST 3 ( i )					  
							      118 LOAD_CONST 1 ( 1 )					    116 LOAD_CONST 1 ( 1 )					  
							      120 INPLACE_SUBTRACT					    118 INPLACE_SUBTRACT					  
							      122 STORE_FAST 4 ( div )					    120 STORE_FAST 3 ( i )					  
							      124 JUMP_ABSOLUTE 96					    122 JUMP_ABSOLUTE 56					  
							      >> 126 POP_BLOCK						    >> 124 POP_BLOCK						  
							      								    >> 126 LOAD_CONST 0 ( None )				  
							      11 >> 128 LOAD_FAST 3 ( i )				    128 RETURN_VALUE NEW_LINE					  
							      130 LOAD_CONST 1 ( 1 )					    								  
							      132 INPLACE_SUBTRACT					    								  
							      134 STORE_FAST 3 ( i )					    								  
							      136 JUMP_ABSOLUTE 66					    								  
							      >> 138 POP_BLOCK						    								  
							      >> 140 LOAD_CONST 0 ( None )				    								  
							      142 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		      FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		    FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS			  FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
def relativeComplement ( arr1 , arr2 , n , m ) :	      Disassembly of <code object relativeComplement at 0x7f33e2653 Disassembly of <code object relativeComplement at 0x7f2b0163d script_not_found : None
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    j = 0						      2 STORE_FAST 4 ( i )					    2 STORE_FAST 4 ( i )					  
    while ( i < n and j < m ) :				      								    								  
	if ( arr1 [ i ] < arr2 [ j ] ) :		      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	    print ( arr1 [ i ] , "" , end = "" )	      6 STORE_FAST 5 ( j )					    6 STORE_FAST 5 ( j )					  
	    i += 1					      								    								  
	elif ( arr1 [ i ] > arr2 [ j ] ) :		      4 8 SETUP_LOOP 122 ( to 132 )				    4 8 SETUP_LOOP 96 ( to 108 )				  
	    j += 1					      >> 10 LOAD_FAST 4 ( i )					    >> 10 LOAD_FAST 4 ( i )					  
	elif ( arr1 [ i ] == arr2 [ j ] ) :		      12 LOAD_FAST 2 ( n )					    12 LOAD_FAST 2 ( n )					  
	    i += 1					      14 COMPARE_OP 0 ( < )					    14 COMPARE_OP 0 ( < )					  
	    j += 1					      16 POP_JUMP_IF_FALSE 130					    16 POP_JUMP_IF_FALSE 106					  
    while ( i < n ) :					      18 LOAD_FAST 5 ( j )					    18 LOAD_FAST 5 ( j )					  
	print ( arr1 [ i ] , "" , end = "" )		      20 LOAD_FAST 3 ( m )					    20 LOAD_FAST 3 ( m )					  
							      22 COMPARE_OP 0 ( < )					    22 COMPARE_OP 0 ( < )					  
							      24 POP_JUMP_IF_FALSE 130					    24 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      5 26 LOAD_FAST 0 ( arr1 )					    5 26 LOAD_FAST 0 ( arr1 )					  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_FAST 4 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 1 ( arr2 )					    32 LOAD_FAST 1 ( arr2 )					  
							      34 LOAD_FAST 5 ( j )					    34 LOAD_FAST 5 ( j )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 0 ( < )					  
							      40 POP_JUMP_IF_FALSE 70					    40 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      6 42 LOAD_GLOBAL 0 ( print )				    6 42 LOAD_GLOBAL 0 ( print )				  
							      44 LOAD_FAST 0 ( arr1 )					    44 LOAD_FAST 0 ( arr1 )					  
							      46 LOAD_FAST 4 ( i )					    46 LOAD_FAST 4 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 2 ( '' )					    50 LOAD_CONST 2 ( ' ' )					  
							      52 LOAD_CONST 2 ( '' )					    52 LOAD_CONST 3 ( '' )					  
							      54 LOAD_CONST 3 ( ( 'end' , ) )				    54 LOAD_CONST 4 ( ( 'end' , ) )				  
							      56 CALL_FUNCTION_KW 3					    56 CALL_FUNCTION_KW 3					  
							      58 POP_TOP						    58 POP_TOP							  
							      								    								  
							      7 60 LOAD_FAST 4 ( i )					    7 60 LOAD_FAST 4 ( i )					  
							      62 LOAD_CONST 4 ( 1 )					    62 LOAD_CONST 5 ( 1 )					  
							      64 INPLACE_ADD						    64 INPLACE_ADD						  
							      66 STORE_FAST 4 ( i )					    66 STORE_FAST 4 ( i )					  
							      68 JUMP_ABSOLUTE 10					    68 JUMP_ABSOLUTE 10						  
							      								    70 POP_BLOCK						  
							      8 >> 70 LOAD_FAST 0 ( arr1 )				    								  
							      72 LOAD_FAST 4 ( i )					    8 >> 72 LOAD_FAST 0 ( arr1 )				  
							      74 BINARY_SUBSCR						    74 LOAD_FAST 4 ( i )					  
							      76 LOAD_FAST 1 ( arr2 )					    76 BINARY_SUBSCR						  
							      78 LOAD_FAST 5 ( j )					    78 LOAD_FAST 1 ( arr2 )					  
							      80 BINARY_SUBSCR						    80 LOAD_FAST 5 ( j )					  
							      82 COMPARE_OP 4 ( > )					    82 BINARY_SUBSCR						  
							      84 POP_JUMP_IF_FALSE 96					    84 COMPARE_OP 4 ( > )					  
							      								    86 POP_JUMP_IF_FALSE 10					  
							      9 86 LOAD_FAST 5 ( j )					    								  
							      88 LOAD_CONST 4 ( 1 )					    9 88 LOAD_FAST 5 ( j )					  
							      90 INPLACE_ADD						    90 LOAD_CONST 5 ( 1 )					  
							      92 STORE_FAST 5 ( j )					    92 INPLACE_ADD						  
							      94 JUMP_ABSOLUTE 10					    94 STORE_FAST 5 ( j )					  
							      								    96 JUMP_FORWARD 34 ( to 132 )				  
							      10 >> 96 LOAD_FAST 0 ( arr1 )				    								  
							      98 LOAD_FAST 4 ( i )					    10 >> 98 LOAD_FAST 0 ( arr1 )				  
							      100 BINARY_SUBSCR						    100 LOAD_FAST 4 ( i )					  
							      102 LOAD_FAST 1 ( arr2 )					    102 BINARY_SUBSCR						  
							      104 LOAD_FAST 5 ( j )					    104 LOAD_FAST 1 ( arr2 )					  
							      106 BINARY_SUBSCR						    106 LOAD_FAST 5 ( j )					  
							      108 COMPARE_OP 2 ( == )					    108 BINARY_SUBSCR						  
							      110 POP_JUMP_IF_FALSE 10					    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 132					  
							      11 112 LOAD_FAST 4 ( i )					    								  
							      114 LOAD_CONST 4 ( 1 )					    11 114 LOAD_FAST 4 ( i )					  
							      116 INPLACE_ADD						    116 LOAD_CONST 5 ( 1 )					  
							      118 STORE_FAST 4 ( i )					    118 INPLACE_ADD						  
							      								    120 STORE_FAST 4 ( i )					  
							      12 120 LOAD_FAST 5 ( j )					    								  
							      122 LOAD_CONST 4 ( 1 )					    12 122 LOAD_FAST 5 ( j )					  
							      124 INPLACE_ADD						    124 LOAD_CONST 5 ( 1 )					  
							      126 STORE_FAST 5 ( j )					    126 INPLACE_ADD						  
							      128 JUMP_ABSOLUTE 10					    128 STORE_FAST 5 ( j )					  
							      >> 130 POP_BLOCK						    130 JUMP_FORWARD 2 ( to 132 )				  
							      								    >> 132 POP_BLOCK						  
							      13 >> 132 SETUP_LOOP 30 ( to 164 )			    >> 134 LOAD_CONST 0 ( None )				  
							      >> 134 LOAD_FAST 4 ( i )					    >> 136 LOAD_CONST 0 ( None )				  
							      136 LOAD_FAST 2 ( n )					    138 RETURN_VALUE NEW_LINE					  
							      138 COMPARE_OP 0 ( < )					    								  
							      140 POP_JUMP_IF_FALSE 162					    								  
							      								    								  
							      14 142 LOAD_GLOBAL 0 ( print )				    								  
							      144 LOAD_FAST 0 ( arr1 )					    								  
							      146 LOAD_FAST 4 ( i )					    								  
							      148 BINARY_SUBSCR						    								  
							      150 LOAD_CONST 2 ( '' )					    								  
							      152 LOAD_CONST 2 ( '' )					    								  
							      154 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      156 CALL_FUNCTION_KW 3					    								  
							      158 POP_TOP						    								  
							      160 JUMP_ABSOLUTE 134					    								  
							      >> 162 POP_BLOCK						    								  
							      >> 164 LOAD_CONST 0 ( None )				    								  
							      166 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	      CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	    CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE
--							      --							    --								  --
def isChangeable ( notes , n ) :			      Disassembly of <code object isChangeable at 0x7f33e26494b0, f Disassembly of <code object isChangeable at 0x7f2b0163dc90, f error : /bin/bash: line 1:  4918 Segmentation faul
    fiveCount = 0					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    tenCount = 0					      2 STORE_FAST 2 ( fiveCount )				    2 STORE_FAST 2 ( fiveCount )				  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( n ) :				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	if ( notes [ i ] == 5 ) :			      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/CHECK_
	    fiveCount += 1				      6 STORE_FAST 3 ( tenCount )				    6 STORE_FAST 3 ( tenCount )					  IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.
	elif ( notes [ i ] == 10 ) :			      								    								  dis
	    if ( fiveCount > 0 ) :			      4 8 SETUP_LOOP 138 ( to 148 )				    4 8 SETUP_LOOP 96 ( to 108 )				  
		fiveCount -= 1				      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
		tenCount += 1				      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
	    else :					      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
		return 0				      16 GET_ITER						    16 GET_ITER							  
	else :						      >> 18 FOR_ITER 126 ( to 146 )				    >> 18 FOR_ITER 80 ( to 106 )				  
	    if ( fiveCount > 0 and tenCount > 0 ) :	      20 STORE_FAST 4 ( i )					    20 STORE_FAST 4 ( i )					  
		fiveCount -= 1				      								    								  
		tenCount -= 1				      5 22 LOAD_FAST 0 ( notes )				    5 22 LOAD_FAST 0 ( notes )					  
	    elif ( fiveCount >= 3 ) :			      24 LOAD_FAST 4 ( i )					    24 LOAD_FAST 4 ( i )					  
		fiveCount -= 3				      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
	    else :					      28 LOAD_CONST 2 ( 5 )					    28 LOAD_CONST 2 ( 5 )					  
		return 0				      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
    return 1						      32 POP_JUMP_IF_FALSE 44					    32 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 34 LOAD_FAST 2 ( fiveCount )				    6 34 LOAD_FAST 2 ( fiveCount )				  
							      36 LOAD_CONST 3 ( 1 )					    36 LOAD_CONST 3 ( 1 )					  
							      38 INPLACE_ADD						    38 INPLACE_ADD						  
							      40 STORE_FAST 2 ( fiveCount )				    40 STORE_FAST 2 ( fiveCount )				  
							      42 JUMP_ABSOLUTE 18					    42 JUMP_ABSOLUTE 18						  
							      								    								  
							      7 >> 44 LOAD_FAST 0 ( notes )				    7 >> 44 LOAD_FAST 0 ( notes )				  
							      46 LOAD_FAST 4 ( i )					    46 LOAD_FAST 4 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 4 ( 10 )					    50 LOAD_CONST 4 ( 10 )					  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 88					    54 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      8 56 LOAD_FAST 2 ( fiveCount )				    8 56 LOAD_FAST 2 ( fiveCount )				  
							      58 LOAD_CONST 1 ( 0 )					    58 LOAD_CONST 1 ( 0 )					  
							      60 COMPARE_OP 4 ( > )					    60 COMPARE_OP 4 ( > )					  
							      62 POP_JUMP_IF_FALSE 82					    62 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      9 64 LOAD_FAST 2 ( fiveCount )				    9 64 LOAD_FAST 2 ( fiveCount )				  
							      66 LOAD_CONST 3 ( 1 )					    66 LOAD_CONST 3 ( 1 )					  
							      68 INPLACE_SUBTRACT					    68 INPLACE_SUBTRACT						  
							      70 STORE_FAST 2 ( fiveCount )				    70 STORE_FAST 2 ( fiveCount )				  
							      								    								  
							      10 72 LOAD_FAST 3 ( tenCount )				    10 72 LOAD_FAST 3 ( tenCount )				  
							      74 LOAD_CONST 3 ( 1 )					    74 LOAD_CONST 3 ( 1 )					  
							      76 INPLACE_ADD						    76 INPLACE_ADD						  
							      78 STORE_FAST 3 ( tenCount )				    78 STORE_FAST 3 ( tenCount )				  
							      80 JUMP_ABSOLUTE 144					    								  
							      								    11 >> 80 LOAD_CONST 1 ( 0 )					  
							      12 >> 82 LOAD_CONST 1 ( 0 )				    82 RETURN_VALUE						  
							      84 RETURN_VALUE						    								  
							      86 JUMP_ABSOLUTE 18					    13 >> 84 LOAD_FAST 2 ( fiveCount )				  
							      								    86 LOAD_CONST 1 ( 0 )					  
							      14 >> 88 LOAD_FAST 2 ( fiveCount )			    88 COMPARE_OP 4 ( > )					  
							      90 LOAD_CONST 1 ( 0 )					    90 POP_JUMP_IF_FALSE 104					  
							      92 COMPARE_OP 4 ( > )					    92 LOAD_FAST 3 ( tenCount )					  
							      94 POP_JUMP_IF_FALSE 122					    94 LOAD_CONST 1 ( 0 )					  
							      96 LOAD_FAST 3 ( tenCount )				    96 COMPARE_OP 4 ( > )					  
							      98 LOAD_CONST 1 ( 0 )					    98 POP_JUMP_IF_FALSE 104					  
							      100 COMPARE_OP 4 ( > )					    100 LOAD_FAST 3 ( tenCount )				  
							      102 POP_JUMP_IF_FALSE 122					    102 LOAD_CONST 1 ( 0 )					  
							      								    104 COMPARE_OP 4 ( > )					  
							      15 104 LOAD_FAST 2 ( fiveCount )				    106 POP_JUMP_IF_FALSE 104					  
							      106 LOAD_CONST 3 ( 1 )					    								  
							      108 INPLACE_SUBTRACT					    14 108 LOAD_FAST 2 ( fiveCount )				  
							      110 STORE_FAST 2 ( fiveCount )				    110 LOAD_CONST 3 ( 1 )					  
							      								    112 INPLACE_SUBTRACT					  
							      16 112 LOAD_FAST 3 ( tenCount )				    114 STORE_FAST 2 ( fiveCount )				  
							      114 LOAD_CONST 3 ( 1 )					    								  
							      116 INPLACE_SUBTRACT					    15 116 LOAD_FAST 3 ( tenCount )				  
							      118 STORE_FAST 3 ( tenCount )				    118 LOAD_CONST 3 ( 1 )					  
							      120 JUMP_ABSOLUTE 18					    120 INPLACE_SUBTRACT					  
							      								    122 STORE_FAST 3 ( tenCount )				  
							      17 >> 122 LOAD_FAST 2 ( fiveCount )			    124 JUMP_ABSOLUTE 18					  
							      124 LOAD_CONST 5 ( 3 )					    								  
							      126 COMPARE_OP 5 ( >= )					    16 >> 126 LOAD_FAST 2 ( fiveCount )				  
							      128 POP_JUMP_IF_FALSE 140					    128 LOAD_CONST 5 ( 3 )					  
							      								    130 COMPARE_OP 5 ( >= )					  
							      18 130 LOAD_FAST 2 ( fiveCount )				    132 POP_JUMP_IF_FALSE 148					  
							      132 LOAD_CONST 5 ( 3 )					    								  
							      134 INPLACE_SUBTRACT					    17 134 LOAD_FAST 2 ( fiveCount )				  
							      136 STORE_FAST 2 ( fiveCount )				    136 LOAD_CONST 5 ( 3 )					  
							      138 JUMP_ABSOLUTE 18					    138 INPLACE_SUBTRACT					  
							      								    140 STORE_FAST 3 ( tenCount )				  
							      20 >> 140 LOAD_CONST 1 ( 0 )				    142 JUMP_ABSOLUTE 18					  
							      142 RETURN_VALUE						    								  
							      >> 144 JUMP_ABSOLUTE 18					    18 >> 144 LOAD_FAST 2 ( fiveCount )				  
							      >> 146 POP_BLOCK						    146 LOAD_CONST 5 ( 3 )					  
							      								    148 COMPARE_OP 5 ( >= )					  
							      21 >> 148 LOAD_CONST 3 ( 1 )				    150 POP_JUMP_IF_FALSE 156					  
							      150 RETURN_VALUE NEW_LINE					    								  
							      								    19 152 LOAD_FAST 2 ( fiveCount )				  
							      								    154 LOAD_CONST 5 ( 3 )					  
							      								    156 INPLACE_SUBTRACT					  
							      								    158 STORE_FAST 2 ( fiveCount )				  
							      								    160 JUMP_ABSOLUTE 18					  
							      								    								  
							      								    21 162 LOAD_CONST 1 ( 0 )					  
							      								    164 RETURN_VALUE						  
							      								    								  
							      								    22 >> 166 LOAD_CONST 3 ( 1 )				  
							      								    168 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_
--							      --							    --								  --
def subsequence ( s , t , n , k ) :			      Disassembly of <code object subsequence at 0x7f33e2653f60, fi Disassembly of <code object subsequence at 0x7f2b0163dc90, fi error : Fatal Python error: XXX block stack overfl
    last = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  ow  Current thread 0x00007f3170a75740 (most recent
    cnt = 0						      2 STORE_FAST 4 ( last )					    2 STORE_FAST 4 ( last )					   call first):	  File "<dis>", line 2 in subsequenc
    new_last = 0					      								    								  e   File "main.py", line 56 in <module>   File "XL
    size = 0						      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  M/dis_script.py", line 60 in <module> /bin/bash: l
    string = 'zyxwvutsrqponmlkjihgfedcba'		      6 STORE_FAST 5 ( cnt )					    6 STORE_FAST 5 ( new_last )					  ine 1:  4927 Aborted		       (core dumped)
    for ch in string :					      								    								   /home/ubuntu/anaconda3/envs/dataset/bin/python XL
	cnt = 0						      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 1 ( 0 )					  M/dis_script.py --script_path /home/ubuntu/TransCo
	for i in range ( last , n ) :			      10 STORE_FAST 6 ( new_last )				    10 STORE_FAST 6 ( size )					  der/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts
	    if s [ i ] == ch :				      								    								  /python_sa-dis_sa.valid/LEXICOGRAPHICALLY_LARGEST_
		cnt += 1				      5 12 LOAD_CONST 1 ( 0 )					    5 12 LOAD_CONST 1 ( 0 )					  SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES.d
	if cnt >= k :					      14 STORE_FAST 7 ( size )					    14 STORE_FAST 7 ( size )					  is
	    for i in range ( last , n ) :		      								    								  
		if s [ i ] == ch :			      6 16 LOAD_CONST 2 ( 'zyxwvutsrqponmlkjihgfedcba' )	    6 16 LOAD_CONST 2 ( 'zyxwvutsrsrkjihgfedcba' )		  
		    t [ size ] = ch			      18 STORE_FAST 8 ( string )				    18 STORE_FAST 8 ( string )					  
		    new_last = i			      								    								  
		    size += 1				      7 20 SETUP_LOOP 120 ( to 142 )				    7 20 SETUP_LOOP 56 ( to 80 )				  
	    last = new_last				      22 LOAD_FAST 8 ( string )					    22 LOAD_FAST 8 ( string )					  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 112 ( to 140 )				    >> 26 FOR_ITER 48 ( to 78 )					  
							      28 STORE_FAST 9 ( ch )					    28 STORE_FAST 9 ( ch )					  
							      								    								  
							      8 30 LOAD_CONST 1 ( 0 )					    8 30 LOAD_CONST 1 ( 0 )					  
							      32 STORE_FAST 5 ( cnt )					    32 STORE_FAST 10 ( cnt )					  
							      								    								  
							      9 34 SETUP_LOOP 38 ( to 74 )				    9 34 SETUP_LOOP 30 ( to 76 )				  
							      36 LOAD_GLOBAL 0 ( range )				    36 LOAD_GLOBAL 0 ( range )					  
							      38 LOAD_FAST 4 ( last )					    38 LOAD_FAST 4 ( last )					  
							      40 LOAD_FAST 2 ( n )					    40 LOAD_FAST 2 ( n )					  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 24 ( to 72 )				    >> 46 FOR_ITER 20 ( to 74 )					  
							      48 STORE_FAST 10 ( i )					    48 STORE_FAST 11 ( i )					  
							      								    								  
							      10 50 LOAD_FAST 0 ( s )					    10 50 LOAD_FAST 0 ( s )					  
							      52 LOAD_FAST 10 ( i )					    52 LOAD_FAST 11 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 9 ( ch )					    56 LOAD_FAST 9 ( ch )					  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 46					    60 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      11 62 LOAD_FAST 5 ( cnt )					    11 62 LOAD_FAST 10 ( cnt )					  
							      64 LOAD_CONST 3 ( 1 )					    64 LOAD_CONST 3 ( 1 )					  
							      66 INPLACE_ADD						    66 INPLACE_ADD						  
							      68 STORE_FAST 5 ( cnt )					    68 STORE_FAST 10 ( cnt )					  
							      70 JUMP_ABSOLUTE 46					    70 JUMP_ABSOLUTE 46						  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      								    								  
							      12 >> 74 LOAD_FAST 5 ( cnt )				    12 >> 74 LOAD_FAST 10 ( cnt )				  
							      76 LOAD_FAST 3 ( k )					    76 LOAD_FAST 3 ( k )					  
							      78 COMPARE_OP 5 ( >= )					    78 COMPARE_OP 5 ( >= )					  
							      80 POP_JUMP_IF_FALSE 26					    80 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      13 82 SETUP_LOOP 50 ( to 134 )				    13 82 SETUP_LOOP 58 ( to 138 )				  
							      84 LOAD_GLOBAL 0 ( range )				    84 LOAD_GLOBAL 0 ( range )					  
							      86 LOAD_FAST 4 ( last )					    86 LOAD_FAST 4 ( last )					  
							      88 LOAD_FAST 2 ( n )					    88 LOAD_FAST 2 ( n )					  
							      90 CALL_FUNCTION 2					    90 CALL_FUNCTION 2						  
							      92 GET_ITER						    92 GET_ITER							  
							      >> 94 FOR_ITER 36 ( to 132 )				    >> 94 FOR_ITER 44 ( to 136 )				  
							      96 STORE_FAST 10 ( i )					    96 STORE_FAST 11 ( i )					  
							      								    								  
							      14 98 LOAD_FAST 0 ( s )					    14 98 LOAD_FAST 0 ( s )					  
							      100 LOAD_FAST 10 ( i )					    100 LOAD_FAST 11 ( i )					  
							      102 BINARY_SUBSCR						    102 BINARY_SUBSCR						  
							      104 LOAD_FAST 9 ( ch )					    104 LOAD_FAST 9 ( ch )					  
							      106 COMPARE_OP 2 ( == )					    106 COMPARE_OP 2 ( == )					  
							      108 POP_JUMP_IF_FALSE 94					    108 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      15 110 LOAD_FAST 9 ( ch )					    15 110 LOAD_FAST 9 ( ch )					  
							      112 LOAD_FAST 1 ( t )					    112 LOAD_FAST 0 ( s )					  
							      114 LOAD_FAST 7 ( size )					    114 LOAD_FAST 3 ( size )					  
							      116 STORE_SUBSCR						    116 STORE_SUBSCR						  
							      								    								  
							      16 118 LOAD_FAST 10 ( i )					    16 118 LOAD_FAST 11 ( i )					  
							      120 STORE_FAST 6 ( new_last )				    120 STORE_FAST 5 ( new_last )				  
							      								    								  
							      17 122 LOAD_FAST 7 ( size )				    17 122 LOAD_FAST 6 ( size )					  
							      124 LOAD_CONST 3 ( 1 )					    124 LOAD_CONST 3 ( 1 )					  
							      126 INPLACE_ADD						    126 INPLACE_ADD						  
							      128 STORE_FAST 7 ( size )					    128 STORE_FAST 6 ( size )					  
							      130 JUMP_ABSOLUTE 94					    130 JUMP_ABSOLUTE 94					  
							      >> 132 POP_BLOCK						    >> 132 POP_BLOCK						  
							      								    >> 134 JUMP_ABSOLUTE 26					  
							      18 >> 134 LOAD_FAST 6 ( new_last )			    >> 136 POP_BLOCK						  
							      136 STORE_FAST 4 ( last )					    								  
							      138 JUMP_ABSOLUTE 26					    18 >> 138 LOAD_FAST 5 ( new_last )				  
							      >> 140 POP_BLOCK						    140 STORE_FAST 4 ( last )					  
							      >> 142 LOAD_CONST 0 ( None )				    >> 142 LOAD_CONST 0 ( None )				  
							      144 RETURN_VALUE NEW_LINE					    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS		      NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS		    NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS		  NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS
--							      --							    --								  --
def countDivisbleby4 ( s ) :				      Disassembly of <code object countDivisbleby4 at 0x7f33e264493 Disassembly of <code object countDivisbleby4 at 0x7f2b0163dc9 error : /bin/bash: line 1:  4938 Segmentation faul
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    count = 0 ;						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( 0 , n , 1 ) :			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	if ( s [ i ] == '4' or s [ i ] == '8' or s [ i ] == ' 6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/NUMBER
	    count += 1					      								    								  _SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS.dis
    for i in range ( 0 , n - 1 , 1 ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	h = ( ord ( s [ i ] ) - ord ( '0' ) ) * 10 + ( ord (  10 STORE_FAST 2 ( count )					    10 STORE_FAST 2 ( count )					  
	if ( h % 4 == 0 ) :				      								    								  
	    count = count + i + 1			      4 12 SETUP_LOOP 64 ( to 78 )				    4 12 SETUP_LOOP 54 ( to 68 )				  
    return count					      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
							      22 CALL_FUNCTION 3					    22 CALL_FUNCTION 3						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 48 ( to 76 )				    >> 26 FOR_ITER 42 ( to 66 )					  
							      28 STORE_FAST 3 ( i )					    28 STORE_FAST 3 ( i )					  
							      								    								  
							      5 30 LOAD_FAST 0 ( s )					    5 30 LOAD_FAST 0 ( s )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 3 ( '4' )					    36 LOAD_CONST 3 ( '4' )					  
							      38 COMPARE_OP 2 ( == )					    38 COMPARE_OP 2 ( == )					  
							      40 POP_JUMP_IF_TRUE 66					    40 POP_JUMP_IF_TRUE 26					  
							      42 LOAD_FAST 0 ( s )					    42 LOAD_FAST 0 ( s )					  
							      44 LOAD_FAST 3 ( i )					    44 LOAD_FAST 3 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_CONST 4 ( '8' )					    48 LOAD_CONST 3 ( '8' )					  
							      50 COMPARE_OP 2 ( == )					    50 COMPARE_OP 2 ( == )					  
							      52 POP_JUMP_IF_TRUE 66					    52 POP_JUMP_IF_TRUE 26					  
							      54 LOAD_FAST 0 ( s )					    54 LOAD_FAST 0 ( s )					  
							      56 LOAD_FAST 3 ( i )					    56 LOAD_FAST 3 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_CONST 5 ( '0' )					    60 LOAD_CONST 4 ( '0' )					  
							      62 COMPARE_OP 2 ( == )					    62 COMPARE_OP 2 ( == )					  
							      64 POP_JUMP_IF_FALSE 26					    64 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      6 >> 66 LOAD_FAST 2 ( count )				    6 66 LOAD_FAST 2 ( count )					  
							      68 LOAD_CONST 2 ( 1 )					    68 LOAD_CONST 2 ( 1 )					  
							      70 INPLACE_ADD						    70 INPLACE_ADD						  
							      72 STORE_FAST 2 ( count )					    72 STORE_FAST 2 ( count )					  
							      74 JUMP_ABSOLUTE 26					    74 JUMP_ABSOLUTE 26						  
							      >> 76 POP_BLOCK						    >> 76 POP_BLOCK						  
							      								    								  
							      7 >> 78 SETUP_LOOP 96 ( to 176 )				    7 >> 78 SETUP_LOOP 82 ( to 160 )				  
							      80 LOAD_GLOBAL 1 ( range )				    80 LOAD_GLOBAL 1 ( range )					  
							      82 LOAD_CONST 1 ( 0 )					    82 LOAD_CONST 1 ( 0 )					  
							      84 LOAD_FAST 1 ( n )					    84 LOAD_FAST 1 ( n )					  
							      86 LOAD_CONST 2 ( 1 )					    86 LOAD_CONST 2 ( 1 )					  
							      88 BINARY_SUBTRACT					    88 BINARY_SUBTRACT						  
							      90 LOAD_CONST 2 ( 1 )					    90 LOAD_CONST 2 ( 1 )					  
							      92 CALL_FUNCTION 3					    92 CALL_FUNCTION 3						  
							      94 GET_ITER						    94 GET_ITER							  
							      >> 96 FOR_ITER 76 ( to 174 )				    >> 96 FOR_ITER 66 ( to 158 )				  
							      98 STORE_FAST 3 ( i )					    98 STORE_FAST 3 ( i )					  
							      								    								  
							      8 100 LOAD_GLOBAL 2 ( ord )				    8 100 LOAD_GLOBAL 2 ( ord )					  
							      102 LOAD_FAST 0 ( s )					    102 LOAD_FAST 0 ( s )					  
							      104 LOAD_FAST 3 ( i )					    104 LOAD_FAST 3 ( i )					  
							      106 BINARY_SUBSCR						    106 BINARY_SUBSCR						  
							      108 CALL_FUNCTION 1					    108 CALL_FUNCTION 1						  
							      110 LOAD_GLOBAL 2 ( ord )					    110 LOAD_GLOBAL 2 ( ord )					  
							      112 LOAD_CONST 5 ( '0' )					    112 LOAD_CONST 4 ( '0' )					  
							      114 CALL_FUNCTION 1					    114 CALL_FUNCTION 1						  
							      116 BINARY_SUBTRACT					    116 BINARY_SUBTRACT						  
							      118 LOAD_CONST 6 ( 10 )					    118 STORE_FAST 4 ( h )					  
							      120 BINARY_MULTIPLY					    								  
							      122 LOAD_GLOBAL 2 ( ord )					    9 120 LOAD_FAST 4 ( h )					  
							      124 LOAD_FAST 0 ( s )					    122 LOAD_CONST 5 ( 4 )					  
							      126 LOAD_FAST 3 ( i )					    124 BINARY_MODULO						  
							      128 LOAD_CONST 2 ( 1 )					    126 LOAD_CONST 1 ( 0 )					  
							      130 BINARY_ADD						    128 COMPARE_OP 2 ( == )					  
							      132 BINARY_SUBSCR						    130 POP_JUMP_IF_FALSE 96					  
							      134 CALL_FUNCTION 1					    								  
							      136 LOAD_GLOBAL 2 ( ord )					    10 132 LOAD_FAST 2 ( count )				  
							      138 LOAD_CONST 5 ( '0' )					    134 LOAD_FAST 3 ( i )					  
							      140 CALL_FUNCTION 1					    136 BINARY_ADD						  
							      142 BINARY_SUBTRACT					    138 LOAD_CONST 2 ( 1 )					  
							      144 BINARY_ADD						    140 BINARY_ADD						  
							      146 STORE_FAST 4 ( h )					    142 STORE_FAST 2 ( count )					  
							      								    144 JUMP_ABSOLUTE 96					  
							      9 148 LOAD_FAST 4 ( h )					    >> 146 POP_BLOCK						  
							      150 LOAD_CONST 7 ( 4 )					    								  
							      152 BINARY_MODULO						    11 >> 148 LOAD_FAST 2 ( count )				  
							      154 LOAD_CONST 1 ( 0 )					    150 RETURN_VALUE NEW_LINE					  
							      156 COMPARE_OP 2 ( == )					    								  
							      158 POP_JUMP_IF_FALSE 96					    								  
							      								    								  
							      10 160 LOAD_FAST 2 ( count )				    								  
							      162 LOAD_FAST 3 ( i )					    								  
							      164 BINARY_ADD						    								  
							      166 LOAD_CONST 2 ( 1 )					    								  
							      168 BINARY_ADD						    								  
							      170 STORE_FAST 2 ( count )				    								  
							      172 JUMP_ABSOLUTE 96					    								  
							      >> 174 POP_BLOCK						    								  
							      								    								  
							      11 >> 176 LOAD_FAST 2 ( count )				    								  
							      178 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE
--							      --							    --								  --
def rearrangeArray ( arr , n ) :			      Disassembly of <code object rearrangeArray at 0x7f33e26494b0, Disassembly of <code object rearrangeArray at 0x7f2b0163dc90, script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    tempArr = [ 0 ] * ( n + 1 )				      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    ArrIndex = 0					      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
    i = 0						      6 POP_TOP							    6 POP_TOP							  
    j = n - 1						      								    								  
    while ( i <= n // 2 or j > n // 2 ) :		      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	tempArr [ ArrIndex ] = arr [ i ]		      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
	ArrIndex = ArrIndex + 1				      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
	tempArr [ ArrIndex ] = arr [ j ]		      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
	ArrIndex = ArrIndex + 1				      16 BINARY_ADD						    16 BINARY_ADD						  
	i = i + 1					      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
	j = j - 1					      20 STORE_FAST 2 ( tempArr )				    20 STORE_FAST 2 ( tempArr )					  
    for i in range ( 0 , n ) :				      								    								  
	arr [ i ] = tempArr [ i ]			      4 22 LOAD_CONST 1 ( 0 )					    4 22 LOAD_CONST 1 ( 0 )					  
							      24 STORE_FAST 3 ( ArrIndex )				    24 STORE_FAST 3 ( ArrIndex )				  
							      								    								  
							      5 26 LOAD_CONST 1 ( 0 )					    5 26 LOAD_CONST 1 ( 0 )					  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      6 30 LOAD_FAST 1 ( n )					    6 30 LOAD_FAST 1 ( n )					  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      36 STORE_FAST 5 ( j )					    36 STORE_FAST 5 ( j )					  
							      								    								  
							      7 38 SETUP_LOOP 84 ( to 124 )				    7 38 SETUP_LOOP 118 ( to 158 )				  
							      >> 40 LOAD_FAST 4 ( i )					    >> 40 LOAD_FAST 4 ( i )					  
							      42 LOAD_FAST 1 ( n )					    42 LOAD_FAST 1 ( n )					  
							      44 LOAD_CONST 3 ( 2 )					    44 LOAD_CONST 3 ( 2 )					  
							      46 BINARY_FLOOR_DIVIDE					    46 BINARY_FLOOR_DIVIDE					  
							      48 COMPARE_OP 1 ( <= )					    48 COMPARE_OP 1 ( <= )					  
							      50 POP_JUMP_IF_TRUE 64					    50 POP_JUMP_IF_TRUE 156					  
							      52 LOAD_FAST 5 ( j )					    52 LOAD_FAST 5 ( j )					  
							      54 LOAD_FAST 1 ( n )					    54 LOAD_FAST 1 ( n )					  
							      56 LOAD_CONST 3 ( 2 )					    56 LOAD_CONST 3 ( 2 )					  
							      58 BINARY_FLOOR_DIVIDE					    58 BINARY_FLOOR_DIVIDE					  
							      60 COMPARE_OP 4 ( > )					    60 COMPARE_OP 4 ( > )					  
							      62 POP_JUMP_IF_FALSE 122					    62 POP_JUMP_IF_FALSE 156					  
							      								    								  
							      8 >> 64 LOAD_FAST 0 ( arr )				    8 64 LOAD_FAST 0 ( arr )					  
							      66 LOAD_FAST 4 ( i )					    66 LOAD_FAST 4 ( i )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 2 ( tempArr )				    70 LOAD_FAST 2 ( tempArr )					  
							      72 LOAD_FAST 3 ( ArrIndex )				    72 LOAD_FAST 3 ( ArrIndex )					  
							      74 STORE_SUBSCR						    74 STORE_SUBSCR						  
							      								    								  
							      9 76 LOAD_FAST 3 ( ArrIndex )				    9 76 LOAD_FAST 3 ( ArrIndex )				  
							      78 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 2 ( 1 )					  
							      80 BINARY_ADD						    80 BINARY_ADD						  
							      82 STORE_FAST 3 ( ArrIndex )				    82 STORE_FAST 3 ( ArrIndex )				  
							      								    								  
							      10 84 LOAD_FAST 0 ( arr )					    10 84 LOAD_FAST 0 ( arr )					  
							      86 LOAD_FAST 5 ( j )					    86 LOAD_FAST 5 ( j )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 LOAD_FAST 2 ( tempArr )				    90 LOAD_FAST 2 ( tempArr )					  
							      92 LOAD_FAST 3 ( ArrIndex )				    92 LOAD_FAST 3 ( ArrIndex )					  
							      94 STORE_SUBSCR						    94 STORE_SUBSCR						  
							      								    								  
							      11 96 LOAD_FAST 3 ( ArrIndex )				    11 96 LOAD_FAST 3 ( ArrIndex )				  
							      98 LOAD_CONST 2 ( 1 )					    98 LOAD_CONST 2 ( 1 )					  
							      100 BINARY_ADD						    100 BINARY_ADD						  
							      102 STORE_FAST 3 ( ArrIndex )				    102 STORE_FAST 4 ( i )					  
							      								    								  
							      12 104 LOAD_FAST 4 ( i )					    12 104 LOAD_FAST 4 ( i )					  
							      106 LOAD_CONST 2 ( 1 )					    106 LOAD_CONST 2 ( 1 )					  
							      108 BINARY_ADD						    108 BINARY_ADD						  
							      110 STORE_FAST 4 ( i )					    110 STORE_FAST 4 ( i )					  
							      								    								  
							      13 112 LOAD_FAST 5 ( j )					    13 112 LOAD_FAST 5 ( j )					  
							      114 LOAD_CONST 2 ( 1 )					    114 LOAD_CONST 2 ( 1 )					  
							      116 BINARY_SUBTRACT					    116 BINARY_SUBTRACT						  
							      118 STORE_FAST 5 ( j )					    118 STORE_FAST 5 ( j )					  
							      120 JUMP_ABSOLUTE 40					    120 JUMP_ABSOLUTE 40					  
							      >> 122 POP_BLOCK						    >> 122 POP_BLOCK						  
							      								    								  
							      14 >> 124 SETUP_LOOP 30 ( to 156 )			    14 >> 124 SETUP_LOOP 32 ( to 156 )				  
							      126 LOAD_GLOBAL 1 ( range )				    126 LOAD_GLOBAL 1 ( range )					  
							      128 LOAD_CONST 1 ( 0 )					    128 LOAD_CONST 1 ( 0 )					  
							      130 LOAD_FAST 1 ( n )					    130 LOAD_FAST 1 ( n )					  
							      132 CALL_FUNCTION 2					    132 CALL_FUNCTION 2						  
							      134 GET_ITER						    134 GET_ITER						  
							      >> 136 FOR_ITER 16 ( to 154 )				    >> 136 FOR_ITER 14 ( to 154 )				  
							      138 STORE_FAST 4 ( i )					    138 STORE_FAST 4 ( i )					  
							      								    								  
							      15 140 LOAD_FAST 2 ( tempArr )				    15 140 LOAD_FAST 2 ( tempArr )				  
							      142 LOAD_FAST 4 ( i )					    142 LOAD_FAST 4 ( i )					  
							      144 BINARY_SUBSCR						    144 BINARY_SUBSCR						  
							      146 LOAD_FAST 0 ( arr )					    146 LOAD_FAST 0 ( arr )					  
							      148 LOAD_FAST 4 ( i )					    148 LOAD_FAST 4 ( i )					  
							      150 STORE_SUBSCR						    150 STORE_SUBSCR						  
							      152 JUMP_ABSOLUTE 136					    152 JUMP_ABSOLUTE 136					  
							      >> 154 POP_BLOCK						    >> 154 POP_BLOCK						  
							      >> 156 LOAD_CONST 0 ( None )				    >> 156 LOAD_CONST 0 ( None )				  
							      158 RETURN_VALUE NEW_LINE					    158 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS		      NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS			    NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS			  NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS
--							      --							    --								  --
def nonDecNums ( n ) :					      Disassembly of <code object nonDecNums at 0x7f33e26494b0, fil Disassembly of <code object nonDecNums at 0x7f2b0163dc90, fil script_not_found : None
    a = np.zeros ( ( n + 1 , 10 ) )			      2 0 LOAD_GLOBAL 0 ( np )					    2 0 LOAD_GLOBAL 0 ( np )					  
    for i in range ( 10 ) :				      2 LOAD_METHOD 1 ( zeros )					    2 LOAD_METHOD 1 ( zeros )					  
	a [ 0 ] [ i ] = 1				      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
    for i in range ( 1 , n + 1 ) :			      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	a [ i ] [ 9 ] = 1				      8 BINARY_ADD						    8 BINARY_ADD						  
    for i in range ( 1 , n + 1 ) :			      10 LOAD_CONST 2 ( 10 )					    10 LOAD_CONST 2 ( 10 )					  
	for j in range ( 8 , - 1 , - 1 ) :		      12 BUILD_TUPLE 2						    12 BUILD_TUPLE 2						  
	    a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 14 CALL_METHOD 1						    14 CALL_METHOD 1						  
    return int ( a [ n ] [ 0 ] )			      16 STORE_FAST 1 ( a )					    16 STORE_FAST 1 ( a )					  
							      								    								  
							      3 18 SETUP_LOOP 28 ( to 48 )				    3 18 SETUP_LOOP 32 ( to 52 )				  
							      20 LOAD_GLOBAL 2 ( range )				    20 LOAD_GLOBAL 2 ( range )					  
							      22 LOAD_CONST 2 ( 10 )					    22 LOAD_CONST 2 ( 10 )					  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 16 ( to 46 )				    >> 28 FOR_ITER 20 ( to 50 )					  
							      30 STORE_FAST 2 ( i )					    30 STORE_FAST 2 ( i )					  
							      								    								  
							      4 32 LOAD_CONST 1 ( 1 )					    4 32 LOAD_CONST 1 ( 1 )					  
							      34 LOAD_FAST 1 ( a )					    34 LOAD_FAST 1 ( a )					  
							      36 LOAD_CONST 3 ( 0 )					    36 LOAD_CONST 3 ( 0 )					  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 2 ( i )					    40 LOAD_FAST 2 ( i )					  
							      42 STORE_SUBSCR						    42 STORE_SUBSCR						  
							      44 JUMP_ABSOLUTE 28					    44 JUMP_ABSOLUTE 28						  
							      >> 46 POP_BLOCK						    >> 46 POP_BLOCK						  
							      								    								  
							      5 >> 48 SETUP_LOOP 34 ( to 84 )				    5 >> 48 SETUP_LOOP 40 ( to 96 )				  
							      50 LOAD_GLOBAL 2 ( range )				    50 LOAD_GLOBAL 2 ( range )					  
							      52 LOAD_CONST 1 ( 1 )					    52 LOAD_CONST 1 ( 1 )					  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 0 ( n )					  
							      56 LOAD_CONST 1 ( 1 )					    56 LOAD_CONST 1 ( 1 )					  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 GET_ITER						    62 GET_ITER							  
							      >> 64 FOR_ITER 16 ( to 82 )				    >> 64 FOR_ITER 20 ( to 94 )					  
							      66 STORE_FAST 2 ( i )					    66 STORE_FAST 2 ( i )					  
							      								    								  
							      6 68 LOAD_CONST 1 ( 1 )					    6 68 LOAD_CONST 1 ( 1 )					  
							      70 LOAD_FAST 1 ( a )					    70 LOAD_FAST 1 ( a )					  
							      72 LOAD_FAST 2 ( i )					    72 LOAD_FAST 2 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 LOAD_CONST 4 ( 9 )					    76 LOAD_CONST 4 ( 9 )					  
							      78 STORE_SUBSCR						    78 STORE_SUBSCR						  
							      80 JUMP_ABSOLUTE 64					    80 JUMP_ABSOLUTE 64						  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      7 >> 84 SETUP_LOOP 84 ( to 170 )				    7 >> 84 SETUP_LOOP 82 ( to 160 )				  
							      86 LOAD_GLOBAL 2 ( range )				    86 LOAD_GLOBAL 2 ( range )					  
							      88 LOAD_CONST 1 ( 1 )					    88 LOAD_CONST 1 ( 1 )					  
							      90 LOAD_FAST 0 ( n )					    90 LOAD_FAST 0 ( n )					  
							      92 LOAD_CONST 1 ( 1 )					    92 LOAD_CONST 1 ( 1 )					  
							      94 BINARY_ADD						    94 BINARY_ADD						  
							      96 CALL_FUNCTION 2					    96 CALL_FUNCTION 2						  
							      98 GET_ITER						    98 GET_ITER							  
							      >> 100 FOR_ITER 66 ( to 168 )				    >> 100 FOR_ITER 58 ( to 158 )				  
							      102 STORE_FAST 2 ( i )					    102 STORE_FAST 2 ( i )					  
							      								    								  
							      8 104 SETUP_LOOP 60 ( to 166 )				    8 104 SETUP_LOOP 52 ( to 156 )				  
							      106 LOAD_GLOBAL 2 ( range )				    106 LOAD_GLOBAL 2 ( range )					  
							      108 LOAD_CONST 5 ( 8 )					    108 LOAD_CONST 5 ( 8 )					  
							      110 LOAD_CONST 6 ( - 1 )					    110 LOAD_CONST 6 ( - 1 )					  
							      112 LOAD_CONST 6 ( - 1 )					    112 LOAD_CONST 6 ( - 1 )					  
							      114 CALL_FUNCTION 3					    114 CALL_FUNCTION 3						  
							      116 GET_ITER						    116 GET_ITER						  
							      >> 118 FOR_ITER 44 ( to 164 )				    >> 118 FOR_ITER 44 ( to 154 )				  
							      120 STORE_FAST 3 ( j )					    120 STORE_FAST 3 ( j )					  
							      								    								  
							      9 122 LOAD_FAST 1 ( a )					    9 122 SETUP_LOOP 40 ( to 156 )				  
							      124 LOAD_FAST 2 ( i )					    124 LOAD_GLOBAL 2 ( range )					  
							      126 LOAD_CONST 1 ( 1 )					    126 LOAD_CONST 5 ( 8 )					  
							      128 BINARY_SUBTRACT					    128 LOAD_CONST 6 ( - 1 )					  
							      130 BINARY_SUBSCR						    130 LOAD_CONST 6 ( - 1 )					  
							      132 LOAD_FAST 3 ( j )					    132 CALL_FUNCTION 3						  
							      134 BINARY_SUBSCR						    134 GET_ITER						  
							      136 LOAD_FAST 1 ( a )					    >> 136 FOR_ITER 28 ( to 154 )				  
							      138 LOAD_FAST 2 ( i )					    138 STORE_FAST 3 ( j )					  
							      140 BINARY_SUBSCR						    								  
							      142 LOAD_FAST 3 ( j )					    10 140 LOAD_FAST 1 ( a )					  
							      144 LOAD_CONST 1 ( 1 )					    142 LOAD_FAST 2 ( i )					  
							      146 BINARY_ADD						    144 LOAD_CONST 1 ( 1 )					  
							      148 BINARY_SUBSCR						    146 BINARY_SUBTRACT						  
							      150 BINARY_ADD						    148 BINARY_SUBSCR						  
							      152 LOAD_FAST 1 ( a )					    150 LOAD_FAST 3 ( j )					  
							      154 LOAD_FAST 2 ( i )					    152 BINARY_SUBSCR						  
							      156 BINARY_SUBSCR						    154 LOAD_FAST 1 ( a )					  
							      158 LOAD_FAST 3 ( j )					    156 LOAD_FAST 2 ( i )					  
							      160 STORE_SUBSCR						    158 BINARY_SUBSCR						  
							      162 JUMP_ABSOLUTE 118					    160 LOAD_FAST 3 ( j )					  
							      >> 164 POP_BLOCK						    162 LOAD_CONST 1 ( 1 )					  
							      >> 166 JUMP_ABSOLUTE 100					    164 BINARY_ADD						  
							      >> 168 POP_BLOCK						    166 BINARY_SUBSCR						  
							      								    168 BINARY_ADD						  
							      10 >> 170 LOAD_GLOBAL 3 ( int )				    170 LOAD_FAST 1 ( a )					  
							      172 LOAD_FAST 1 ( a )					    172 LOAD_FAST 2 ( i )					  
							      174 LOAD_FAST 0 ( n )					    174 BINARY_SUBSCR						  
							      176 BINARY_SUBSCR						    176 LOAD_FAST 3 ( j )					  
							      178 LOAD_CONST 3 ( 0 )					    178 LOAD_CONST 1 ( 1 )					  
							      180 BINARY_SUBSCR						    180 BINARY_ADD						  
							      182 CALL_FUNCTION 1					    182 BINARY_SUBSCR						  
							      184 RETURN_VALUE NEW_LINE					    184 BINARY_ADD						  
							      								    186 LOAD_FAST 1 ( a )					  
							      								    188 LOAD_FAST 2 ( i )					  
							      								    190 BINARY_SUBSCR						  
							      								    192 LOAD_FAST 3 ( j )					  
							      								    194 STORE_SUBSCR						  
							      								    196 JUMP_ABSOLUTE 136					  
							      								    >> 198 POP_BLOCK						  
							      								    >> 200 JUMP_ABSOLUTE 100					  
							      								    >> 202 POP_BLOCK						  
							      								    								  
							      								    11 >> 204 LOAD_GLOBAL 3 ( int )				  
							      								    206 LOAD_FAST 1 ( a )					  
							      								    208 LOAD_FAST 0 ( n )					  
							      								    210 BINARY_SUBSCR						  
							      								    212 LOAD_CONST 3 ( 0 )					  
							      								    214 BINARY_SUBSCR						  
							      								    216 CALL_FUNCTION 1						  
							      								    218 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS			      SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS				    SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS				  SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS
--							      --							    --								  --
def sum ( a , n ) :					      Disassembly of <code object sum at 0x7f33e2644f60, file "<dis Disassembly of <code object sum at 0x7f2b01639660, file "<dis error : Traceback (most recent call last):   File
    cnt = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    ans = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  (item)   File "main.py", line 41, in <module>	  Fi
    pre_sum = 0						      4 STORE_FAST 2 ( cnt )					    4 STORE_FAST 2 ( cnt )					  le "<dis>", line 2, in sum TypeError: 'range_itera
    for i in range ( n ) :				      								    								  tor' object is not subscriptable
	ans += ( i * a [ i ] ) - pre_sum		      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	pre_sum += a [ i ]				      8 STORE_FAST 3 ( ans )					    8 STORE_FAST 3 ( ans )					  
	if ( a [ i ] - 1 ) in cnt :			      								    								  
	    ans -= cnt [ a [ i ] - 1 ]			      4 10 LOAD_CONST 1 ( 0 )					    4 10 LOAD_CONST 1 ( 0 )					  
	if ( a [ i ] + 1 ) in cnt :			      12 STORE_FAST 4 ( pre_sum )				    12 STORE_FAST 4 ( pre_sum )					  
	    ans += cnt [ a [ i ] + 1 ]			      								    								  
	if a [ i ] not in cnt :				      5 14 SETUP_LOOP 164 ( to 180 )				    5 14 SETUP_LOOP 118 ( to 134 )				  
	    cnt [ a [ i ] ] = 0				      16 LOAD_GLOBAL 1 ( range )				    16 LOAD_GLOBAL 1 ( range )					  
	cnt [ a [ i ] ] += 1				      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
    return ans						      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 152 ( to 178 )				    >> 24 FOR_ITER 106 ( to 132 )				  
							      26 STORE_FAST 5 ( i )					    26 STORE_FAST 5 ( i )					  
							      								    								  
							      6 28 LOAD_FAST 3 ( ans )					    6 28 LOAD_FAST 3 ( ans )					  
							      30 LOAD_FAST 5 ( i )					    30 LOAD_FAST 5 ( i )					  
							      32 LOAD_FAST 0 ( a )					    32 LOAD_FAST 0 ( a )					  
							      34 LOAD_FAST 5 ( i )					    34 LOAD_FAST 5 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 BINARY_MULTIPLY					    38 BINARY_MULTIPLY						  
							      40 LOAD_FAST 4 ( pre_sum )				    40 LOAD_FAST 4 ( pre_sum )					  
							      42 BINARY_SUBTRACT					    42 BINARY_SUBTRACT						  
							      44 INPLACE_ADD						    44 INPLACE_ADD						  
							      46 STORE_FAST 3 ( ans )					    46 STORE_FAST 3 ( ans )					  
							      								    								  
							      7 48 LOAD_FAST 4 ( pre_sum )				    7 48 LOAD_FAST 4 ( pre_sum )				  
							      50 LOAD_FAST 0 ( a )					    50 LOAD_FAST 0 ( a )					  
							      52 LOAD_FAST 5 ( i )					    52 LOAD_FAST 5 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 INPLACE_ADD						    56 LOAD_CONST 2 ( 1 )					  
							      58 STORE_FAST 4 ( pre_sum )				    58 BINARY_SUBTRACT						  
							      								    60 LOAD_FAST 2 ( cnt )					  
							      8 60 LOAD_FAST 0 ( a )					    62 COMPARE_OP 6 ( in )					  
							      62 LOAD_FAST 5 ( i )					    64 POP_JUMP_IF_FALSE 92					  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_CONST 2 ( 1 )					    8 66 LOAD_FAST 3 ( ans )					  
							      68 BINARY_SUBTRACT					    68 LOAD_FAST 2 ( cnt )					  
							      70 LOAD_FAST 2 ( cnt )					    70 LOAD_FAST 0 ( a )					  
							      72 COMPARE_OP 6 ( in )					    72 LOAD_FAST 5 ( i )					  
							      74 POP_JUMP_IF_FALSE 96					    74 BINARY_SUBSCR						  
							      								    76 LOAD_CONST 2 ( 1 )					  
							      9 76 LOAD_FAST 3 ( ans )					    78 BINARY_SUBTRACT						  
							      78 LOAD_FAST 2 ( cnt )					    80 BINARY_SUBSCR						  
							      80 LOAD_FAST 0 ( a )					    82 INPLACE_SUBTRACT						  
							      82 LOAD_FAST 5 ( i )					    84 STORE_FAST 3 ( ans )					  
							      84 BINARY_SUBSCR						    86 JUMP_ABSOLUTE 24						  
							      86 LOAD_CONST 2 ( 1 )					    								  
							      88 BINARY_SUBTRACT					    9 >> 88 LOAD_FAST 0 ( a )					  
							      90 BINARY_SUBSCR						    90 LOAD_FAST 5 ( i )					  
							      92 INPLACE_SUBTRACT					    92 BINARY_SUBSCR						  
							      94 STORE_FAST 3 ( ans )					    94 LOAD_CONST 2 ( 1 )					  
							      								    96 BINARY_ADD						  
							      10 >> 96 LOAD_FAST 0 ( a )				    98 LOAD_FAST 2 ( cnt )					  
							      98 LOAD_FAST 5 ( i )					    100 COMPARE_OP 6 ( in )					  
							      100 BINARY_SUBSCR						    102 POP_JUMP_IF_FALSE 120					  
							      102 LOAD_CONST 2 ( 1 )					    								  
							      104 BINARY_ADD						    10 104 LOAD_FAST 3 ( ans )					  
							      106 LOAD_FAST 2 ( cnt )					    106 LOAD_FAST 2 ( cnt )					  
							      108 COMPARE_OP 6 ( in )					    108 LOAD_FAST 0 ( a )					  
							      110 POP_JUMP_IF_FALSE 132					    110 LOAD_FAST 5 ( i )					  
							      								    112 BINARY_SUBSCR						  
							      11 112 LOAD_FAST 3 ( ans )				    114 LOAD_CONST 2 ( 1 )					  
							      114 LOAD_FAST 2 ( cnt )					    116 BINARY_ADD						  
							      116 LOAD_FAST 0 ( a )					    118 BINARY_SUBSCR						  
							      118 LOAD_FAST 5 ( i )					    >> 120 INPLACE_ADD						  
							      120 BINARY_SUBSCR						    122 STORE_FAST 3 ( ans )					  
							      122 LOAD_CONST 2 ( 1 )					    								  
							      124 BINARY_ADD						    11 >> 124 LOAD_FAST 0 ( a )					  
							      126 BINARY_SUBSCR						    126 LOAD_FAST 5 ( i )					  
							      128 INPLACE_ADD						    128 BINARY_SUBSCR						  
							      130 STORE_FAST 3 ( ans )					    130 LOAD_FAST 2 ( cnt )					  
							      								    132 COMPARE_OP 7 ( not in )					  
							      12 >> 132 LOAD_FAST 0 ( a )				    134 POP_JUMP_IF_FALSE 24					  
							      134 LOAD_FAST 5 ( i )					    								  
							      136 BINARY_SUBSCR						    12 136 LOAD_CONST 1 ( 0 )					  
							      138 LOAD_FAST 2 ( cnt )					    138 LOAD_FAST 2 ( cnt )					  
							      140 COMPARE_OP 7 ( not in )				    140 LOAD_FAST 0 ( a )					  
							      142 POP_JUMP_IF_FALSE 156					    142 LOAD_FAST 5 ( i )					  
							      								    144 BINARY_SUBSCR						  
							      13 144 LOAD_CONST 1 ( 0 )					    146 LOAD_CONST 2 ( 1 )					  
							      146 LOAD_FAST 2 ( cnt )					    148 BINARY_ADD						  
							      148 LOAD_FAST 0 ( a )					    150 BINARY_SUBSCR						  
							      150 LOAD_FAST 5 ( i )					    152 INPLACE_ADD						  
							      152 BINARY_SUBSCR						    154 STORE_FAST 3 ( ans )					  
							      154 STORE_SUBSCR						    								  
							      								    13 >> 156 LOAD_FAST 2 ( cnt )				  
							      14 >> 156 LOAD_FAST 2 ( cnt )				    158 LOAD_FAST 0 ( a )					  
							      158 LOAD_FAST 0 ( a )					    160 LOAD_FAST 5 ( i )					  
							      160 LOAD_FAST 5 ( i )					    162 BINARY_SUBSCR						  
							      162 BINARY_SUBSCR						    164 LOAD_CONST 2 ( 1 )					  
							      164 DUP_TOP_TWO						    166 INPLACE_ADD						  
							      166 BINARY_SUBSCR						    168 STORE_FAST 2 ( cnt )					  
							      168 LOAD_CONST 2 ( 1 )					    170 JUMP_ABSOLUTE 24					  
							      170 INPLACE_ADD						    >> 172 POP_BLOCK						  
							      172 ROT_THREE						    								  
							      174 STORE_SUBSCR						    14 >> 174 LOAD_FAST 3 ( ans )				  
							      176 JUMP_ABSOLUTE 24					    176 RETURN_VALUE NEW_LINE					  
							      >> 178 POP_BLOCK						    								  
							      								    								  
							      15 >> 180 LOAD_FAST 3 ( ans )				    								  
							      182 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1	      <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1	    <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		  <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1
--							      --							    --								  --
def thirdLargest ( arr , arr_size ) :			      Disassembly of <code object thirdLargest at 0x7f33e2644930, f Disassembly of <code object thirdLargest at 0x7f2b01639660, f script_not_found : None
    if ( arr_size < 3 ) :				      2 0 LOAD_FAST 1 ( arr_size )				    2 0 LOAD_FAST 1 ( arr_size )				  
	print ( " Invalid Input " )			      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  
	return						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    first = arr [ 0 ]					      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 18					  
    second = - sys.maxsize				      								    								  
    third = - sys.maxsize				      3 8 LOAD_GLOBAL 0 ( print )				    3 8 LOAD_GLOBAL 0 ( print )					  
    for i in range ( 1 , arr_size ) :			      10 LOAD_CONST 2 ( ' Invalid Input ' )			    10 LOAD_CONST 2 ( ' Invalid Input ' )			  
	if ( arr [ i ] > first ) :			      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	    third = second				      14 POP_TOP						    14 POP_TOP							  
	    second = first				      								    								  
	    first = arr [ i ]				      4 16 LOAD_CONST 0 ( None )				    4 16 LOAD_CONST 0 ( None )					  
	elif ( arr [ i ] > second ) :			      18 RETURN_VALUE						    18 RETURN_VALUE						  
	    third = second				      								    								  
	    second = arr [ i ]				      5 >> 20 LOAD_FAST 0 ( arr )				    5 >> 20 LOAD_FAST 0 ( arr )					  
	elif ( arr [ i ] > third ) :			      22 LOAD_CONST 3 ( 0 )					    22 LOAD_CONST 3 ( 0 )					  
	    third = arr [ i ]				      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
    print ( "The third Largest" , "element is" , third )      26 STORE_FAST 2 ( first )					    26 STORE_FAST 2 ( first )					  
							      								    								  
							      6 28 LOAD_GLOBAL 1 ( sys )				    6 28 LOAD_GLOBAL 1 ( sys )					  
							      30 LOAD_ATTR 2 ( maxsize )				    30 LOAD_ATTR 2 ( maxsize )					  
							      32 UNARY_NEGATIVE						    32 UNARY_NEGATIVE						  
							      34 STORE_FAST 3 ( second )				    34 STORE_FAST 3 ( second )					  
							      								    								  
							      7 36 LOAD_GLOBAL 1 ( sys )				    7 36 LOAD_GLOBAL 1 ( sys )					  
							      38 LOAD_ATTR 2 ( maxsize )				    38 LOAD_ATTR 2 ( maxsize )					  
							      40 UNARY_NEGATIVE						    40 UNARY_NEGATIVE						  
							      42 STORE_FAST 4 ( third )					    42 STORE_FAST 4 ( third )					  
							      								    								  
							      8 44 SETUP_LOOP 94 ( to 140 )				    8 44 SETUP_LOOP 66 ( to 112 )				  
							      46 LOAD_GLOBAL 3 ( range )				    46 LOAD_GLOBAL 3 ( range )					  
							      48 LOAD_CONST 4 ( 1 )					    48 LOAD_CONST 4 ( 1 )					  
							      50 LOAD_FAST 1 ( arr_size )				    50 LOAD_FAST 1 ( arr_size )					  
							      52 CALL_FUNCTION 2					    52 CALL_FUNCTION 2						  
							      54 GET_ITER						    54 GET_ITER							  
							      >> 56 FOR_ITER 80 ( to 138 )				    >> 56 FOR_ITER 52 ( to 110 )				  
							      58 STORE_FAST 5 ( i )					    58 STORE_FAST 5 ( i )					  
							      								    								  
							      9 60 LOAD_FAST 0 ( arr )					    9 60 LOAD_FAST 0 ( arr )					  
							      62 LOAD_FAST 5 ( i )					    62 LOAD_FAST 5 ( i )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 2 ( first )					    66 LOAD_FAST 2 ( first )					  
							      68 COMPARE_OP 4 ( > )					    68 COMPARE_OP 4 ( > )					  
							      70 POP_JUMP_IF_FALSE 90					    70 POP_JUMP_IF_FALSE 86					  
							      								    								  
							      10 72 LOAD_FAST 3 ( second )				    10 72 LOAD_FAST 3 ( second )				  
							      74 STORE_FAST 4 ( third )					    74 STORE_FAST 4 ( third )					  
							      								    								  
							      11 76 LOAD_FAST 2 ( first )				    11 76 LOAD_FAST 2 ( first )					  
							      78 STORE_FAST 3 ( second )				    78 STORE_FAST 3 ( second )					  
							      								    								  
							      12 80 LOAD_FAST 0 ( arr )					    12 80 LOAD_FAST 0 ( arr )					  
							      82 LOAD_FAST 5 ( i )					    82 LOAD_FAST 5 ( i )					  
							      84 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      86 STORE_FAST 2 ( first )					    86 STORE_FAST 2 ( first )					  
							      88 JUMP_ABSOLUTE 56					    88 JUMP_ABSOLUTE 56						  
							      								    								  
							      13 >> 90 LOAD_FAST 0 ( arr )				    13 >> 90 LOAD_FAST 0 ( arr )				  
							      92 LOAD_FAST 5 ( i )					    92 LOAD_FAST 5 ( i )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 LOAD_FAST 3 ( second )					    96 LOAD_FAST 3 ( second )					  
							      98 COMPARE_OP 4 ( > )					    98 COMPARE_OP 4 ( > )					  
							      100 POP_JUMP_IF_FALSE 116					    100 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      14 102 LOAD_FAST 3 ( second )				    14 102 LOAD_FAST 3 ( second )				  
							      104 STORE_FAST 4 ( third )				    104 STORE_FAST 4 ( third )					  
							      								    								  
							      15 106 LOAD_FAST 0 ( arr )				    15 106 LOAD_FAST 0 ( arr )					  
							      108 LOAD_FAST 5 ( i )					    108 LOAD_FAST 5 ( i )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 STORE_FAST 3 ( second )				    112 STORE_FAST 3 ( second )					  
							      114 JUMP_ABSOLUTE 56					    114 JUMP_FORWARD 18 ( to 132 )				  
							      								    								  
							      16 >> 116 LOAD_FAST 0 ( arr )				    16 >> 116 LOAD_FAST 0 ( arr )				  
							      118 LOAD_FAST 5 ( i )					    118 LOAD_FAST 5 ( i )					  
							      120 BINARY_SUBSCR						    120 BINARY_SUBSCR						  
							      122 LOAD_FAST 4 ( third )					    122 LOAD_FAST 4 ( third )					  
							      124 COMPARE_OP 4 ( > )					    124 COMPARE_OP 4 ( > )					  
							      126 POP_JUMP_IF_FALSE 56					    126 POP_JUMP_IF_FALSE 132					  
							      								    								  
							      17 128 LOAD_FAST 0 ( arr )				    17 128 LOAD_FAST 0 ( arr )					  
							      130 LOAD_FAST 5 ( i )					    130 LOAD_FAST 5 ( i )					  
							      132 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      134 STORE_FAST 4 ( third )				    134 STORE_FAST 4 ( third )					  
							      136 JUMP_ABSOLUTE 56					    								  
							      >> 138 POP_BLOCK						    18 >> 136 LOAD_GLOBAL 0 ( print )				  
							      								    138 LOAD_CONST 5 ( 'The third Largest' )			  
							      18 >> 140 LOAD_GLOBAL 0 ( print )				    140 LOAD_CONST 6 ( 'element is' )				  
							      142 LOAD_CONST 5 ( 'The third Largest' )			    142 LOAD_FAST 4 ( third )					  
							      144 LOAD_CONST 6 ( 'element is' )				    144 CALL_FUNCTION 3						  
							      146 LOAD_FAST 4 ( third )					    146 POP_TOP							  
							      148 CALL_FUNCTION 3					    148 LOAD_CONST 0 ( None )					  
							      150 POP_TOP						    150 RETURN_VALUE NEW_LINE					  
							      152 LOAD_CONST 0 ( None )					    								  
							      154 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS	      COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		    COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		  COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS
--							      --							    --								  --
def countSubarrays ( arr , n ) :			      Disassembly of <code object countSubarrays at 0x7f33e2649a50, Disassembly of <code object countSubarrays at 0x7f2b016399c0, script_not_found : None
    difference = 0					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    ans = 0						      2 STORE_FAST 2 ( difference )				    2 STORE_FAST 2 ( difference )				  
    hash_positive = [ 0 ] * ( n + 1 )			      								    								  
    hash_negative = [ 0 ] * ( n + 1 )			      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
    hash_positive [ 0 ] = 1				      6 STORE_FAST 3 ( ans )					    6 STORE_FAST 3 ( ans )					  
    for i in range ( n ) :				      								    								  
	if ( arr [ i ] & 1 == 1 ) :			      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 1 ( 0 )					  
	    difference = difference + 1			      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
	else :						      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
	    difference = difference - 1			      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
	if ( difference < 0 ) :				      16 BINARY_ADD						    16 BINARY_ADD						  
	    ans += hash_negative [ - difference ]	      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
	    hash_negative [ - difference ] = hash_negative [  20 STORE_FAST 4 ( hash_positive )				    20 STORE_FAST 4 ( hash_positive )				  
	else :						      								    								  
	    ans += hash_positive [ difference ]		      5 22 LOAD_CONST 1 ( 0 )					    5 22 LOAD_CONST 1 ( 0 )					  
	    hash_positive [ difference ] = hash_positive [ di 24 BUILD_LIST 1						    24 BUILD_LIST 1						  
    return ans						      26 LOAD_FAST 1 ( n )					    26 LOAD_FAST 1 ( n )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_ADD						    30 BINARY_ADD						  
							      32 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      34 STORE_FAST 5 ( hash_negative )				    34 STORE_FAST 5 ( hash_negative )				  
							      								    								  
							      6 36 LOAD_CONST 2 ( 1 )					    6 36 LOAD_CONST 2 ( 1 )					  
							      38 LOAD_FAST 4 ( hash_positive )				    38 LOAD_FAST 4 ( hash_positive )				  
							      40 LOAD_CONST 1 ( 0 )					    40 LOAD_CONST 1 ( 0 )					  
							      42 STORE_SUBSCR						    42 STORE_SUBSCR						  
							      								    								  
							      7 44 SETUP_LOOP 122 ( to 168 )				    7 44 SETUP_LOOP 52 ( to 96 )				  
							      46 LOAD_GLOBAL 0 ( range )				    46 LOAD_GLOBAL 0 ( range )					  
							      48 LOAD_FAST 1 ( n )					    48 LOAD_FAST 1 ( n )					  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 110 ( to 166 )				    >> 54 FOR_ITER 44 ( to 94 )					  
							      56 STORE_FAST 6 ( i )					    56 STORE_FAST 6 ( i )					  
							      								    								  
							      8 58 LOAD_FAST 0 ( arr )					    8 58 LOAD_FAST 0 ( arr )					  
							      60 LOAD_FAST 6 ( i )					    60 LOAD_FAST 6 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      66 BINARY_AND						    66 BINARY_AND						  
							      68 LOAD_CONST 2 ( 1 )					    68 LOAD_CONST 2 ( 1 )					  
							      70 COMPARE_OP 2 ( == )					    70 COMPARE_OP 2 ( == )					  
							      72 POP_JUMP_IF_FALSE 84					    72 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      9 74 LOAD_FAST 2 ( difference )				    9 74 LOAD_FAST 2 ( difference )				  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_ADD						    78 BINARY_ADD						  
							      80 STORE_FAST 2 ( difference )				    80 STORE_FAST 2 ( difference )				  
							      82 JUMP_FORWARD 8 ( to 92 )				    								  
							      								    10 >> 82 LOAD_FAST 2 ( difference )				  
							      11 >> 84 LOAD_FAST 2 ( difference )			    84 LOAD_CONST 2 ( 1 )					  
							      86 LOAD_CONST 2 ( 1 )					    86 BINARY_SUBTRACT						  
							      88 BINARY_SUBTRACT					    88 STORE_FAST 2 ( difference )				  
							      90 STORE_FAST 2 ( difference )				    90 JUMP_ABSOLUTE 54						  
							      								    92 POP_BLOCK						  
							      12 >> 92 LOAD_FAST 2 ( difference )			    								  
							      94 LOAD_CONST 1 ( 0 )					    11 >> 94 LOAD_FAST 2 ( difference )				  
							      96 COMPARE_OP 0 ( < )					    96 LOAD_CONST 1 ( 0 )					  
							      98 POP_JUMP_IF_FALSE 136					    98 COMPARE_OP 0 ( < )					  
							      								    100 POP_JUMP_IF_FALSE 124					  
							      13 100 LOAD_FAST 3 ( ans )				    								  
							      102 LOAD_FAST 5 ( hash_negative )				    12 102 LOAD_FAST 3 ( ans )					  
							      104 LOAD_FAST 2 ( difference )				    104 LOAD_FAST 4 ( hash_negative )				  
							      106 UNARY_NEGATIVE					    106 LOAD_FAST 5 ( - difference )				  
							      108 BINARY_SUBSCR						    108 UNARY_NEGATIVE						  
							      110 INPLACE_ADD						    110 BINARY_SUBSCR						  
							      112 STORE_FAST 3 ( ans )					    112 INPLACE_ADD						  
							      								    114 STORE_FAST 3 ( ans )					  
							      14 114 LOAD_FAST 5 ( hash_negative )			    								  
							      116 LOAD_FAST 2 ( difference )				    13 116 LOAD_FAST 5 ( hash_negative )			  
							      118 UNARY_NEGATIVE					    118 LOAD_FAST 5 ( - difference )				  
							      120 BINARY_SUBSCR						    120 UNARY_NEGATIVE						  
							      122 LOAD_CONST 2 ( 1 )					    122 BINARY_SUBSCR						  
							      124 BINARY_ADD						    124 LOAD_CONST 2 ( 1 )					  
							      126 LOAD_FAST 5 ( hash_negative )				    126 BINARY_ADD						  
							      128 LOAD_FAST 2 ( difference )				    128 LOAD_FAST 5 ( hash_negative )				  
							      130 UNARY_NEGATIVE					    130 LOAD_FAST 5 ( - difference )				  
							      132 STORE_SUBSCR						    132 UNARY_NEGATIVE						  
							      134 JUMP_ABSOLUTE 54					    134 STORE_SUBSCR						  
							      								    136 JUMP_ABSOLUTE 54					  
							      16 >> 136 LOAD_FAST 3 ( ans )				    								  
							      138 LOAD_FAST 4 ( hash_positive )				    15 >> 138 LOAD_FAST 3 ( ans )				  
							      140 LOAD_FAST 2 ( difference )				    140 LOAD_FAST 4 ( hash_positive )				  
							      142 BINARY_SUBSCR						    142 LOAD_FAST 2 ( difference )				  
							      144 INPLACE_ADD						    144 BINARY_SUBSCR						  
							      146 STORE_FAST 3 ( ans )					    146 INPLACE_ADD						  
							      								    148 STORE_FAST 3 ( ans )					  
							      17 148 LOAD_FAST 4 ( hash_positive )			    								  
							      150 LOAD_FAST 2 ( difference )				    16 150 LOAD_FAST 5 ( hash_positive )			  
							      152 BINARY_SUBSCR						    152 LOAD_FAST 2 ( difference )				  
							      154 LOAD_CONST 2 ( 1 )					    154 BINARY_SUBSCR						  
							      156 BINARY_ADD						    156 LOAD_CONST 2 ( 1 )					  
							      158 LOAD_FAST 4 ( hash_positive )				    158 BINARY_ADD						  
							      160 LOAD_FAST 2 ( difference )				    160 LOAD_FAST 5 ( hash_positive )				  
							      162 STORE_SUBSCR						    162 LOAD_FAST 2 ( difference )				  
							      164 JUMP_ABSOLUTE 54					    164 UNARY_NEGATIVE						  
							      >> 166 POP_BLOCK						    166 STORE_SUBSCR						  
							      								    								  
							      18 >> 168 LOAD_FAST 3 ( ans )				    17 168 LOAD_FAST 4 ( hash_positive )			  
							      170 RETURN_VALUE NEW_LINE					    170 LOAD_FAST 2 ( difference )				  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 2 ( 1 )					  
							      								    176 BINARY_ADD						  
							      								    178 LOAD_FAST 5 ( hash_positive )				  
							      								    180 LOAD_FAST 2 ( difference )				  
							      								    182 STORE_SUBSCR						  
							      								    184 JUMP_ABSOLUTE 54					  
							      								    >> 186 POP_BLOCK						  
							      								    								  
							      								    18 >> 188 LOAD_FAST 3 ( ans )				  
							      								    190 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSEQUENCE_SPACE			      LONGEST_PALINDROME_SUBSEQUENCE_SPACE			    LONGEST_PALINDROME_SUBSEQUENCE_SPACE			  LONGEST_PALINDROME_SUBSEQUENCE_SPACE
--							      --							    --								  --
def lps ( s ) :						      Disassembly of <code object lps at 0x7f33e2653ed0, file "<dis Disassembly of <code object lps at 0x7f2b0163dc90, file "<dis error : XXX lineno: 2, opcode: 0 Traceback (most r
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  ecent call last):   File "XLM/dis_script.py", line
    a = [ 0 ] * n					      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						   60, in <module>     exec(item)   File "main.py",
    for i in range ( n - 1 , - 1 , - 1 ) :		      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  line 42, in <module>	 File "<dis>", line 2, in lp
	back_up = 0					      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  s SystemError: unknown opcode
	for j in range ( i , n ) :			      								    								  
	    if j == i :					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
		a [ j ] = 1				      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
	    elif s [ i ] == s [ j ] :			      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
		temp = a [ j ]				      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
		a [ j ] = back_up + 2			      16 STORE_FAST 2 ( a )					    16 STORE_FAST 2 ( a )					  
		back_up = temp				      								    								  
	    else :					      4 18 SETUP_LOOP 142 ( to 162 )				    4 18 SETUP_LOOP 164 ( to 180 )				  
		back_up = a [ j ]			      20 LOAD_GLOBAL 1 ( range )				    20 LOAD_GLOBAL 1 ( range )					  
		a [ j ] = max ( a [ j - 1 ] , a [ j ] )	      22 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
    return a [ n - 1 ]					      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 LOAD_CONST 3 ( - 1 )					    28 LOAD_CONST 3 ( - 1 )					  
							      30 LOAD_CONST 3 ( - 1 )					    30 LOAD_CONST 3 ( - 1 )					  
							      32 CALL_FUNCTION 3					    32 CALL_FUNCTION 3						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 122 ( to 160 )				    >> 36 FOR_ITER 144 ( to 178 )				  
							      38 STORE_FAST 3 ( i )					    38 STORE_FAST 3 ( i )					  
							      								    								  
							      5 40 LOAD_CONST 1 ( 0 )					    5 40 LOAD_CONST 1 ( 0 )					  
							      42 STORE_FAST 4 ( back_up )				    42 STORE_FAST 4 ( back_up )					  
							      								    								  
							      6 44 SETUP_LOOP 112 ( to 158 )				    6 44 SETUP_LOOP 140 ( to 180 )				  
							      46 LOAD_GLOBAL 1 ( range )				    46 LOAD_GLOBAL 1 ( range )					  
							      48 LOAD_FAST 3 ( i )					    48 LOAD_FAST 3 ( i )					  
							      50 LOAD_FAST 1 ( n )					    50 LOAD_FAST 1 ( n )					  
							      52 CALL_FUNCTION 2					    52 CALL_FUNCTION 2						  
							      54 GET_ITER						    54 GET_ITER							  
							      >> 56 FOR_ITER 98 ( to 156 )				    >> 56 FOR_ITER 128 ( to 178 )				  
							      58 STORE_FAST 5 ( j )					    58 STORE_FAST 5 ( j )					  
							      								    								  
							      7 60 LOAD_FAST 5 ( j )					    7 60 LOAD_FAST 5 ( j )					  
							      62 LOAD_FAST 3 ( i )					    62 LOAD_FAST 3 ( i )					  
							      64 COMPARE_OP 2 ( == )					    64 COMPARE_OP 2 ( == )					  
							      66 POP_JUMP_IF_FALSE 78					    66 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      8 68 LOAD_CONST 2 ( 1 )					    8 68 LOAD_CONST 2 ( 1 )					  
							      70 LOAD_FAST 2 ( a )					    70 LOAD_FAST 2 ( a )					  
							      72 LOAD_FAST 5 ( j )					    72 LOAD_FAST 5 ( j )					  
							      74 STORE_SUBSCR						    74 STORE_SUBSCR						  
							      76 JUMP_ABSOLUTE 56					    76 JUMP_ABSOLUTE 56						  
							      								    								  
							      9 >> 78 LOAD_FAST 0 ( s )					    9 >> 78 LOAD_FAST 0 ( s )					  
							      80 LOAD_FAST 3 ( i )					    80 LOAD_FAST 3 ( i )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 0 ( s )					    84 LOAD_FAST 0 ( s )					  
							      86 LOAD_FAST 5 ( j )					    86 LOAD_FAST 5 ( j )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 COMPARE_OP 2 ( == )					    90 COMPARE_OP 2 ( == )					  
							      92 POP_JUMP_IF_FALSE 120					    92 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      10 94 LOAD_FAST 2 ( a )					    10 94 LOAD_FAST 2 ( a )					  
							      96 LOAD_FAST 5 ( j )					    96 LOAD_FAST 5 ( j )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 STORE_FAST 6 ( temp )					    100 STORE_FAST 6 ( temp )					  
							      								    								  
							      11 102 LOAD_FAST 4 ( back_up )				    11 102 LOAD_FAST 4 ( back_up )				  
							      104 LOAD_CONST 4 ( 2 )					    104 LOAD_CONST 4 ( 2 )					  
							      106 BINARY_ADD						    106 BINARY_ADD						  
							      108 LOAD_FAST 2 ( a )					    108 STORE_FAST 4 ( back_up )				  
							      110 LOAD_FAST 5 ( j )					    								  
							      112 STORE_SUBSCR						    12 110 LOAD_FAST 6 ( temp )					  
							      								    112 STORE_FAST 4 ( back_up )				  
							      12 114 LOAD_FAST 6 ( temp )				    114 JUMP_ABSOLUTE 56					  
							      116 STORE_FAST 4 ( back_up )				    								  
							      118 JUMP_ABSOLUTE 56					    14 >> 116 LOAD_FAST 2 ( a )					  
							      								    118 LOAD_FAST 5 ( j )					  
							      14 >> 120 LOAD_FAST 2 ( a )				    120 BINARY_SUBSCR						  
							      122 LOAD_FAST 5 ( j )					    122 STORE_FAST 4 ( back_up )				  
							      124 BINARY_SUBSCR						    								  
							      126 STORE_FAST 4 ( back_up )				    15 124 LOAD_GLOBAL 2 ( max )				  
							      								    126 LOAD_FAST 2 ( a )					  
							      15 128 LOAD_GLOBAL 2 ( max )				    128 LOAD_FAST 5 ( j )					  
							      130 LOAD_FAST 2 ( a )					    130 LOAD_CONST 2 ( 1 )					  
							      132 LOAD_FAST 5 ( j )					    132 BINARY_SUBTRACT						  
							      134 LOAD_CONST 2 ( 1 )					    134 BINARY_SUBSCR						  
							      136 BINARY_SUBTRACT					    136 LOAD_FAST 2 ( a )					  
							      138 BINARY_SUBSCR						    138 LOAD_FAST 5 ( j )					  
							      140 LOAD_FAST 2 ( a )					    140 BINARY_SUBSCR						  
							      142 LOAD_FAST 5 ( j )					    142 CALL_FUNCTION 2						  
							      144 BINARY_SUBSCR						    144 LOAD_FAST 2 ( a )					  
							      146 CALL_FUNCTION 2					    146 LOAD_FAST 5 ( j )					  
							      148 LOAD_FAST 2 ( a )					    148 STORE_SUBSCR						  
							      150 LOAD_FAST 5 ( j )					    150 JUMP_ABSOLUTE 56					  
							      152 STORE_SUBSCR						    >> 152 POP_BLOCK						  
							      154 JUMP_ABSOLUTE 56					    >> 154 JUMP_ABSOLUTE 36					  
							      >> 156 POP_BLOCK						    >> 156 POP_BLOCK						  
							      >> 158 JUMP_ABSOLUTE 36					    								  
							      >> 160 POP_BLOCK						    16 158 LOAD_FAST 2 ( a )					  
							      								    160 LOAD_FAST 1 ( n )					  
							      16 >> 162 LOAD_FAST 2 ( a )				    162 LOAD_CONST 2 ( 1 )					  
							      164 LOAD_FAST 1 ( n )					    164 BINARY_SUBTRACT						  
							      166 LOAD_CONST 2 ( 1 )					    166 BINARY_SUBSCR						  
							      168 BINARY_SUBTRACT					    168 RETURN_VALUE NEW_LINE					  
							      170 BINARY_SUBSCR						    								  
							      172 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_CHECK					      DIVISIBILITY_CHECK					    DIVISIBILITY_CHECK						  DIVISIBILITY_CHECK
--							      --							    --								  --
def divisibilityCheck ( arr , n ) :			      Disassembly of <code object divisibilityCheck at 0x7f33e2644f Disassembly of <code object divisibilityCheck at 0x7f2b0163dc script_not_found : None
    s = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    max_ele = - 10 ** 9					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for i in range ( n ) :				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 2 ( s )					  
	s [ arr [ i ] ] = 1				      								    								  
	max_ele = max ( max_ele , arr [ i ] )		      3 6 LOAD_CONST 1 ( - 1000000000 )				    3 6 LOAD_CONST 1 ( - 10 )					  
    res = dict ( )					      8 STORE_FAST 3 ( max_ele )				    8 LOAD_CONST 2 ( 9 )					  
    for i in range ( n ) :				      								    10 BINARY_POWER						  
	if ( arr [ i ] != 0 ) :				      4 10 SETUP_LOOP 42 ( to 54 )				    12 STORE_FAST 3 ( max_ele )					  
	    for j in range ( arr [ i ] * 2 , max_ele + 1 , ar 12 LOAD_GLOBAL 1 ( range )				    								  
		if ( j in s.keys ( ) ) :		      14 LOAD_FAST 1 ( n )					    4 14 SETUP_LOOP 44 ( to 58 )				  
		    res [ j ] = 1			      16 CALL_FUNCTION 1					    16 LOAD_GLOBAL 1 ( range )					  
    for x in res :					      18 GET_ITER						    18 LOAD_FAST 1 ( n )					  
	print ( x , end = " " )				      >> 20 FOR_ITER 30 ( to 52 )				    20 CALL_FUNCTION 1						  
							      22 STORE_FAST 4 ( i )					    22 GET_ITER							  
							      								    >> 24 FOR_ITER 36 ( to 56 )					  
							      5 24 LOAD_CONST 2 ( 1 )					    26 STORE_FAST 4 ( i )					  
							      26 LOAD_FAST 2 ( s )					    								  
							      28 LOAD_FAST 0 ( arr )					    5 28 LOAD_CONST 3 ( 1 )					  
							      30 LOAD_FAST 4 ( i )					    30 LOAD_FAST 2 ( s )					  
							      32 BINARY_SUBSCR						    32 LOAD_FAST 0 ( arr )					  
							      34 STORE_SUBSCR						    34 LOAD_FAST 4 ( i )					  
							      								    36 BINARY_SUBSCR						  
							      6 36 LOAD_GLOBAL 2 ( max )				    38 STORE_SUBSCR						  
							      38 LOAD_FAST 3 ( max_ele )				    								  
							      40 LOAD_FAST 0 ( arr )					    6 40 LOAD_GLOBAL 2 ( max )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 3 ( max_ele )					  
							      44 BINARY_SUBSCR						    44 LOAD_FAST 0 ( arr )					  
							      46 CALL_FUNCTION 2					    46 LOAD_FAST 4 ( i )					  
							      48 STORE_FAST 3 ( max_ele )				    48 BINARY_SUBSCR						  
							      50 JUMP_ABSOLUTE 20					    50 CALL_FUNCTION 2						  
							      >> 52 POP_BLOCK						    52 STORE_FAST 3 ( max_ele )					  
							      								    54 JUMP_ABSOLUTE 24						  
							      7 >> 54 LOAD_GLOBAL 0 ( dict )				    >> 56 POP_BLOCK						  
							      56 CALL_FUNCTION 0					    								  
							      58 STORE_FAST 5 ( res )					    7 >> 58 LOAD_GLOBAL 0 ( dict )				  
							      								    60 CALL_FUNCTION 0						  
							      8 60 SETUP_LOOP 86 ( to 148 )				    62 STORE_FAST 5 ( res )					  
							      62 LOAD_GLOBAL 1 ( range )				    								  
							      64 LOAD_FAST 1 ( n )					    8 64 SETUP_LOOP 132 ( to 194 )				  
							      66 CALL_FUNCTION 1					    66 LOAD_GLOBAL 1 ( range )					  
							      68 GET_ITER						    68 LOAD_FAST 1 ( n )					  
							      >> 70 FOR_ITER 74 ( to 146 )				    70 CALL_FUNCTION 1						  
							      72 STORE_FAST 4 ( i )					    72 GET_ITER							  
							      								    >> 74 FOR_ITER 124 ( to 192 )				  
							      9 74 LOAD_FAST 0 ( arr )					    76 STORE_FAST 4 ( i )					  
							      76 LOAD_FAST 4 ( i )					    								  
							      78 BINARY_SUBSCR						    9 78 LOAD_FAST 0 ( arr )					  
							      80 LOAD_CONST 3 ( 0 )					    80 LOAD_FAST 4 ( i )					  
							      82 COMPARE_OP 3 ( != )					    82 BINARY_SUBSCR						  
							      84 POP_JUMP_IF_FALSE 70					    84 LOAD_CONST 4 ( 0 )					  
							      								    86 COMPARE_OP 3 ( != )					  
							      10 86 SETUP_LOOP 56 ( to 144 )				    88 POP_JUMP_IF_FALSE 74					  
							      88 LOAD_GLOBAL 1 ( range )				    								  
							      90 LOAD_FAST 0 ( arr )					    10 90 SETUP_LOOP 90 ( to 190 )				  
							      92 LOAD_FAST 4 ( i )					    92 LOAD_GLOBAL 1 ( range )					  
							      94 BINARY_SUBSCR						    94 LOAD_FAST 0 ( arr )					  
							      96 LOAD_CONST 4 ( 2 )					    96 LOAD_FAST 4 ( i )					  
							      98 BINARY_MULTIPLY					    98 BINARY_SUBSCR						  
							      100 LOAD_FAST 3 ( max_ele )				    100 LOAD_CONST 5 ( 2 )					  
							      102 LOAD_CONST 2 ( 1 )					    102 BINARY_MULTIPLY						  
							      104 BINARY_ADD						    104 LOAD_FAST 3 ( max_ele )					  
							      106 LOAD_FAST 0 ( arr )					    106 LOAD_CONST 3 ( 1 )					  
							      108 LOAD_FAST 4 ( i )					    108 BINARY_ADD						  
							      110 BINARY_SUBSCR						    110 LOAD_FAST 0 ( arr )					  
							      112 CALL_FUNCTION 3					    112 LOAD_FAST 4 ( i )					  
							      114 GET_ITER						    114 BINARY_SUBSCR						  
							      >> 116 FOR_ITER 24 ( to 142 )				    116 CALL_FUNCTION 3						  
							      118 STORE_FAST 6 ( j )					    118 GET_ITER						  
							      								    >> 120 FOR_ITER 58 ( to 188 )				  
							      11 120 LOAD_FAST 6 ( j )					    122 STORE_FAST 6 ( j )					  
							      122 LOAD_FAST 2 ( s )					    								  
							      124 LOAD_METHOD 3 ( keys )				    11 124 LOAD_FAST 6 ( j )					  
							      126 CALL_METHOD 0						    126 LOAD_FAST 2 ( s )					  
							      128 COMPARE_OP 6 ( in )					    128 LOAD_METHOD 3 ( keys )					  
							      130 POP_JUMP_IF_FALSE 116					    130 CALL_METHOD 0						  
							      								    132 COMPARE_OP 6 ( in )					  
							      12 132 LOAD_CONST 2 ( 1 )					    134 POP_JUMP_IF_FALSE 120					  
							      134 LOAD_FAST 5 ( res )					    								  
							      136 LOAD_FAST 6 ( j )					    12 136 LOAD_CONST 3 ( 1 )					  
							      138 STORE_SUBSCR						    138 LOAD_FAST 5 ( res )					  
							      140 JUMP_ABSOLUTE 116					    140 LOAD_FAST 6 ( j )					  
							      >> 142 POP_BLOCK						    142 STORE_SUBSCR						  
							      >> 144 JUMP_ABSOLUTE 70					    144 JUMP_ABSOLUTE 120					  
							      >> 146 POP_BLOCK						    >> 146 POP_BLOCK						  
							      								    >> 148 JUMP_ABSOLUTE 74					  
							      13 >> 148 SETUP_LOOP 24 ( to 174 )			    >> 150 POP_BLOCK						  
							      150 LOAD_FAST 5 ( res )					    >> 152 JUMP_ABSOLUTE 74					  
							      152 GET_ITER						    >> 154 POP_BLOCK						  
							      >> 154 FOR_ITER 16 ( to 172 )				    								  
							      156 STORE_FAST 7 ( x )					    13 >> 156 SETUP_LOOP 36 ( to 154 )				  
							      								    158 LOAD_FAST 5 ( res )					  
							      14 158 LOAD_GLOBAL 4 ( print )				    160 GET_ITER						  
							      160 LOAD_FAST 7 ( x )					    >> 162 FOR_ITER 28 ( to 152 )				  
							      162 LOAD_CONST 5 ( ' ' )					    164 STORE_FAST 7 ( x )					  
							      164 LOAD_CONST 6 ( ( 'end' , ) )				    								  
							      166 CALL_FUNCTION_KW 2					    14 166 LOAD_GLOBAL 4 ( print )				  
							      168 POP_TOP						    168 LOAD_FAST 7 ( x )					  
							      170 JUMP_ABSOLUTE 154					    170 LOAD_CONST 6 ( ' ' )					  
							      >> 172 POP_BLOCK						    172 LOAD_CONST 7 ( ( 'end' , ) )				  
							      >> 174 LOAD_CONST 0 ( None )				    174 CALL_FUNCTION_KW 2					  
							      176 RETURN_VALUE NEW_LINE					    176 POP_TOP							  
							      								    178 JUMP_ABSOLUTE 162					  
							      								    >> 180 POP_BLOCK						  
							      								    >> 182 LOAD_CONST 0 ( None )				  
							      								    184 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING		      EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING		    EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING		  EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING
--							      --							    --								  --
def find<<unk>> oscomplement ( str ) :			      Disassembly of <code object find<<unk>> oscomplement at 0x7f3 Disassembly of <code object findSuppresoscomplement at 0x7f2b script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    i = n - 1						      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    while ( i >= 0 ) :					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	if ( str [ i ] == '1' ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    break					      								    								  
	i -= 1						      3 8 LOAD_FAST 1 ( n )					    3 8 LOAD_FAST 1 ( n )					  
    if ( i == - 1 ) :					      10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( 1 )					  
	return '1' + str				      12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
    k = i - 1						      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
    while ( k >= 0 ) :					      								    								  
	if ( str [ k ] == '1' ) :			      4 16 SETUP_LOOP 34 ( to 52 )				    4 16 SETUP_LOOP 40 ( to 58 )				  
	    str = list ( str )				      >> 18 LOAD_FAST 2 ( i )					    >> 18 LOAD_FAST 2 ( i )					  
	    str [ k ] = '0'				      20 LOAD_CONST 2 ( 0 )					    20 LOAD_CONST 2 ( 0 )					  
	    str = ''.join ( str )			      22 COMPARE_OP 5 ( >= )					    22 COMPARE_OP 5 ( >= )					  
	else :						      24 POP_JUMP_IF_FALSE 50					    24 POP_JUMP_IF_FALSE 56					  
	    str = list ( str )				      								    								  
	    str [ k ] = '1'				      5 26 LOAD_FAST 0 ( str )					    5 26 LOAD_FAST 0 ( str )					  
	    str = ''.join ( str )			      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
	k -= 1						      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
    return str						      32 LOAD_CONST 3 ( '1' )					    32 LOAD_CONST 3 ( '1' )					  
							      34 COMPARE_OP 2 ( == )					    34 COMPARE_OP 2 ( == )					  
							      36 POP_JUMP_IF_FALSE 40					    36 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      6 38 BREAK_LOOP						    6 38 BREAK_LOOP						  
							      								    40 JUMP_ABSOLUTE 18						  
							      7 >> 40 LOAD_FAST 2 ( i )					    								  
							      42 LOAD_CONST 1 ( 1 )					    7 >> 42 LOAD_FAST 2 ( i )					  
							      44 INPLACE_SUBTRACT					    44 LOAD_CONST 1 ( 1 )					  
							      46 STORE_FAST 2 ( i )					    46 INPLACE_SUBTRACT						  
							      48 JUMP_ABSOLUTE 18					    48 STORE_FAST 2 ( i )					  
							      >> 50 POP_BLOCK						    50 JUMP_ABSOLUTE 18						  
							      								    >> 52 POP_BLOCK						  
							      8 >> 52 LOAD_FAST 2 ( i )					    								  
							      54 LOAD_CONST 4 ( - 1 )					    8 >> 54 LOAD_FAST 2 ( i )					  
							      56 COMPARE_OP 2 ( == )					    56 LOAD_CONST 1 ( 1 )					  
							      58 POP_JUMP_IF_FALSE 68					    58 COMPARE_OP 2 ( == )					  
							      								    60 POP_JUMP_IF_FALSE 66					  
							      9 60 LOAD_CONST 3 ( '1' )					    								  
							      62 LOAD_FAST 0 ( str )					    9 62 LOAD_CONST 3 ( '1' )					  
							      64 BINARY_ADD						    64 LOAD_FAST 0 ( str )					  
							      66 RETURN_VALUE						    66 BINARY_ADD						  
							      								    68 RETURN_VALUE						  
							      10 >> 68 LOAD_FAST 2 ( i )				    								  
							      70 LOAD_CONST 1 ( 1 )					    10 >> 70 LOAD_FAST 2 ( i )					  
							      72 BINARY_SUBTRACT					    72 LOAD_CONST 1 ( 1 )					  
							      74 STORE_FAST 3 ( k )					    74 BINARY_SUBTRACT						  
							      								    76 STORE_FAST 3 ( k )					  
							      11 76 SETUP_LOOP 86 ( to 164 )				    								  
							      >> 78 LOAD_FAST 3 ( k )					    11 78 SETUP_LOOP 76 ( to 158 )				  
							      80 LOAD_CONST 2 ( 0 )					    >> 80 LOAD_FAST 3 ( k )					  
							      82 COMPARE_OP 5 ( >= )					    82 LOAD_CONST 2 ( 0 )					  
							      84 POP_JUMP_IF_FALSE 162					    84 COMPARE_OP 5 ( >= )					  
							      								    86 POP_JUMP_IF_FALSE 156					  
							      12 86 LOAD_FAST 0 ( str )					    								  
							      88 LOAD_FAST 3 ( k )					    12 88 LOAD_FAST 0 ( str )					  
							      90 BINARY_SUBSCR						    90 LOAD_FAST 3 ( k )					  
							      92 LOAD_CONST 3 ( '1' )					    92 BINARY_SUBSCR						  
							      94 COMPARE_OP 2 ( == )					    94 LOAD_CONST 3 ( '1' )					  
							      96 POP_JUMP_IF_FALSE 126					    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 138					  
							      13 98 LOAD_GLOBAL 1 ( list )				    								  
							      100 LOAD_FAST 0 ( str )					    13 100 LOAD_GLOBAL 1 ( list )				  
							      102 CALL_FUNCTION 1					    102 LOAD_FAST 0 ( str )					  
							      104 STORE_FAST 0 ( str )					    104 CALL_FUNCTION 1						  
							      								    106 STORE_FAST 0 ( str )					  
							      14 106 LOAD_CONST 5 ( '0' )				    								  
							      108 LOAD_FAST 0 ( str )					    14 108 LOAD_CONST 4 ( '0' )					  
							      110 LOAD_FAST 3 ( k )					    110 STORE_FAST 0 ( str )					  
							      112 STORE_SUBSCR						    								  
							      								    15 112 LOAD_CONST 5 ( '' )					  
							      15 114 LOAD_CONST 6 ( '' )				    114 LOAD_METHOD 2 ( join )					  
							      116 LOAD_METHOD 2 ( join )				    116 LOAD_FAST 0 ( str )					  
							      118 LOAD_FAST 0 ( str )					    118 CALL_METHOD 1						  
							      120 CALL_METHOD 1						    120 STORE_FAST 0 ( str )					  
							      122 STORE_FAST 0 ( str )					    122 JUMP_FORWARD 32 ( to 144 )				  
							      124 JUMP_FORWARD 26 ( to 152 )				    								  
							      								    17 >> 124 LOAD_GLOBAL 1 ( list )				  
							      17 >> 126 LOAD_GLOBAL 1 ( list )				    126 LOAD_FAST 0 ( str )					  
							      128 LOAD_FAST 0 ( str )					    128 CALL_FUNCTION 1						  
							      130 CALL_FUNCTION 1					    130 STORE_FAST 0 ( str )					  
							      132 STORE_FAST 0 ( str )					    								  
							      								    18 132 LOAD_CONST 3 ( '1' )					  
							      18 134 LOAD_CONST 3 ( '1' )				    134 STORE_FAST 0 ( str )					  
							      136 LOAD_FAST 0 ( str )					    								  
							      138 LOAD_FAST 3 ( k )					    19 136 LOAD_CONST 6 ( '' )					  
							      140 STORE_SUBSCR						    138 LOAD_METHOD 2 ( join )					  
							      								    140 LOAD_FAST 0 ( str )					  
							      19 142 LOAD_CONST 6 ( '' )				    142 CALL_METHOD 1						  
							      144 LOAD_METHOD 2 ( join )				    144 STORE_FAST 0 ( str )					  
							      146 LOAD_FAST 0 ( str )					    146 JUMP_ABSOLUTE 80					  
							      148 CALL_METHOD 1						    >> 148 POP_BLOCK						  
							      150 STORE_FAST 0 ( str )					    								  
							      								    20 >> 150 LOAD_FAST 3 ( k )					  
							      20 >> 152 LOAD_FAST 3 ( k )				    152 LOAD_CONST 1 ( 1 )					  
							      154 LOAD_CONST 1 ( 1 )					    154 INPLACE_SUBTRACT					  
							      156 INPLACE_SUBTRACT					    156 STORE_FAST 3 ( k )					  
							      158 STORE_FAST 3 ( k )					    158 JUMP_FORWARD 8 ( to 166 )				  
							      160 JUMP_ABSOLUTE 78					    								  
							      >> 162 POP_BLOCK						    21 >> 160 LOAD_FAST 0 ( str )				  
							      								    162 RETURN_VALUE						  
							      21 >> 164 LOAD_FAST 0 ( str )				    								  
							      166 RETURN_VALUE NEW_LINE					    22 >> 164 LOAD_FAST 0 ( str )				  
							      								    166 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		      MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		    MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS			  MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS
--							      --							    --								  --
def find ( list1 , list2 ) :				      Disassembly of <code object find at 0x7f33e26494b0, file "<di Disassembly of <code object find at 0x7f2b0163dc90, file "<di script_not_found : None
    res = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    max_possible_sum = len ( list1 ) + len ( list2 ) - 2      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  
    for sum in range ( max_possible_sum + 1 ) :		      								    								  
	for i in range ( sum + 1 ) :			      3 4 LOAD_GLOBAL 0 ( len )					    3 4 LOAD_GLOBAL 0 ( len )					  
	    if ( i < len ( list1 ) and ( sum - i ) < len ( li 6 LOAD_FAST 0 ( list1 )					    6 LOAD_FAST 0 ( list1 )					  
		res.append ( list1 [ i ] )		      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
	if ( len ( res ) > 0 ) :			      10 LOAD_GLOBAL 0 ( len )					    10 LOAD_GLOBAL 0 ( len )					  
	    break					      12 LOAD_FAST 1 ( list2 )					    12 LOAD_FAST 1 ( list2 )					  
    for i in range ( len ( res ) ) :			      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
	print ( res [ i ] , end = " " )			      16 BINARY_ADD						    16 BINARY_ADD						  
							      18 LOAD_CONST 1 ( 2 )					    18 LOAD_CONST 1 ( 2 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 STORE_FAST 3 ( max_possible_sum )			    22 STORE_FAST 3 ( max_possible_sum )			  
							      								    								  
							      4 24 SETUP_LOOP 118 ( to 144 )				    4 24 SETUP_LOOP 120 ( to 138 )				  
							      26 LOAD_GLOBAL 1 ( range )				    26 LOAD_GLOBAL 1 ( range )					  
							      28 LOAD_FAST 3 ( max_possible_sum )			    28 LOAD_FAST 3 ( max_possible_sum )				  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 102 ( to 142 )				    >> 38 FOR_ITER 106 ( to 136 )				  
							      40 STORE_FAST 4 ( sum )					    40 STORE_FAST 4 ( sum )					  
							      								    								  
							      5 42 SETUP_LOOP 82 ( to 126 )				    5 42 SETUP_LOOP 72 ( to 134 )				  
							      44 LOAD_GLOBAL 1 ( range )				    44 LOAD_GLOBAL 1 ( range )					  
							      46 LOAD_FAST 4 ( sum )					    46 LOAD_FAST 4 ( sum )					  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_ADD						    50 BINARY_ADD						  
							      52 CALL_FUNCTION 1					    52 CALL_FUNCTION 1						  
							      54 GET_ITER						    54 GET_ITER							  
							      >> 56 FOR_ITER 66 ( to 124 )				    >> 56 FOR_ITER 60 ( to 132 )				  
							      58 STORE_FAST 5 ( i )					    58 STORE_FAST 5 ( i )					  
							      								    								  
							      6 60 LOAD_FAST 5 ( i )					    6 60 LOAD_FAST 5 ( i )					  
							      62 LOAD_GLOBAL 0 ( len )					    62 LOAD_GLOBAL 0 ( len )					  
							      64 LOAD_FAST 0 ( list1 )					    64 LOAD_FAST 0 ( list1 )					  
							      66 CALL_FUNCTION 1					    66 CALL_FUNCTION 1						  
							      68 COMPARE_OP 0 ( < )					    68 COMPARE_OP 0 ( < )					  
							      70 POP_JUMP_IF_FALSE 56					    70 POP_JUMP_IF_FALSE 56					  
							      72 LOAD_FAST 4 ( sum )					    72 LOAD_FAST 4 ( sum )					  
							      74 LOAD_FAST 5 ( i )					    74 LOAD_FAST 5 ( i )					  
							      76 BINARY_SUBTRACT					    76 BINARY_SUBTRACT						  
							      78 LOAD_GLOBAL 0 ( len )					    78 CALL_FUNCTION 1						  
							      80 LOAD_FAST 1 ( list2 )					    80 LOAD_GLOBAL 0 ( len )					  
							      82 CALL_FUNCTION 1					    82 LOAD_FAST 1 ( list2 )					  
							      84 COMPARE_OP 0 ( < )					    84 CALL_FUNCTION 1						  
							      86 POP_JUMP_IF_FALSE 56					    86 COMPARE_OP 0 ( < )					  
							      88 LOAD_FAST 0 ( list1 )					    88 POP_JUMP_IF_FALSE 56					  
							      90 LOAD_FAST 5 ( i )					    90 LOAD_FAST 0 ( list1 )					  
							      92 BINARY_SUBSCR						    92 LOAD_FAST 5 ( i )					  
							      94 LOAD_FAST 1 ( list2 )					    94 BINARY_SUBSCR						  
							      96 LOAD_FAST 4 ( sum )					    96 LOAD_FAST 1 ( list2 )					  
							      98 LOAD_FAST 5 ( i )					    98 LOAD_FAST 4 ( sum )					  
							      100 BINARY_SUBTRACT					    100 LOAD_FAST 5 ( i )					  
							      102 BINARY_SUBSCR						    102 BINARY_SUBTRACT						  
							      104 COMPARE_OP 2 ( == )					    104 BINARY_SUBSCR						  
							      106 POP_JUMP_IF_FALSE 56					    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 56					  
							      7 108 LOAD_FAST 2 ( res )					    								  
							      110 LOAD_METHOD 2 ( append )				    7 110 LOAD_FAST 2 ( res )					  
							      112 LOAD_FAST 0 ( list1 )					    112 LOAD_METHOD 2 ( append )				  
							      114 LOAD_FAST 5 ( i )					    114 LOAD_FAST 0 ( list1 )					  
							      116 BINARY_SUBSCR						    116 LOAD_FAST 5 ( i )					  
							      118 CALL_METHOD 1						    118 BINARY_SUBSCR						  
							      120 POP_TOP						    120 CALL_METHOD 1						  
							      122 JUMP_ABSOLUTE 56					    122 POP_TOP							  
							      >> 124 POP_BLOCK						    124 JUMP_ABSOLUTE 56					  
							      								    >> 126 POP_BLOCK						  
							      8 >> 126 LOAD_GLOBAL 0 ( len )				    >> 128 JUMP_ABSOLUTE 38					  
							      128 LOAD_FAST 2 ( res )					    >> 130 POP_BLOCK						  
							      130 CALL_FUNCTION 1					    								  
							      132 LOAD_CONST 3 ( 0 )					    8 >> 132 LOAD_GLOBAL 0 ( len )				  
							      134 COMPARE_OP 4 ( > )					    134 LOAD_FAST 2 ( res )					  
							      136 POP_JUMP_IF_FALSE 38					    136 CALL_FUNCTION 1						  
							      								    138 LOAD_CONST 3 ( 0 )					  
							      9 138 BREAK_LOOP						    140 COMPARE_OP 4 ( > )					  
							      140 JUMP_ABSOLUTE 38					    142 POP_JUMP_IF_FALSE 38					  
							      >> 142 POP_BLOCK						    								  
							      								    9 144 BREAK_LOOP						  
							      10 >> 144 SETUP_LOOP 36 ( to 182 )			    146 JUMP_ABSOLUTE 38					  
							      146 LOAD_GLOBAL 1 ( range )				    >> 148 POP_BLOCK						  
							      148 LOAD_GLOBAL 0 ( len )					    								  
							      150 LOAD_FAST 2 ( res )					    10 >> 150 SETUP_LOOP 54 ( to 182 )				  
							      152 CALL_FUNCTION 1					    152 LOAD_GLOBAL 1 ( range )					  
							      154 CALL_FUNCTION 1					    154 LOAD_GLOBAL 0 ( len )					  
							      156 GET_ITER						    156 LOAD_FAST 2 ( res )					  
							      >> 158 FOR_ITER 20 ( to 180 )				    158 CALL_FUNCTION 1						  
							      160 STORE_FAST 5 ( i )					    160 CALL_FUNCTION 1						  
							      								    162 GET_ITER						  
							      11 162 LOAD_GLOBAL 3 ( print )				    >> 164 FOR_ITER 46 ( to 180 )				  
							      164 LOAD_FAST 2 ( res )					    166 STORE_FAST 5 ( i )					  
							      166 LOAD_FAST 5 ( i )					    								  
							      168 BINARY_SUBSCR						    11 168 LOAD_GLOBAL 3 ( print )				  
							      170 LOAD_CONST 4 ( ' ' )					    170 LOAD_FAST 2 ( res )					  
							      172 LOAD_CONST 5 ( ( 'end' , ) )				    172 LOAD_FAST 5 ( i )					  
							      174 CALL_FUNCTION_KW 2					    174 BINARY_SUBSCR						  
							      176 POP_TOP						    176 LOAD_CONST 4 ( ' ' )					  
							      178 JUMP_ABSOLUTE 158					    178 LOAD_CONST 5 ( ( 'end' , ) )				  
							      >> 180 POP_BLOCK						    180 CALL_FUNCTION_KW 2					  
							      >> 182 LOAD_CONST 0 ( None )				    182 POP_TOP							  
							      184 RETURN_VALUE NEW_LINE					    184 JUMP_ABSOLUTE 164					  
							      								    >> 186 POP_BLOCK						  
							      								    >> 188 LOAD_CONST 0 ( None )				  
							      								    190 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	      GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	    GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	  GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE
--							      --							    --								  --
def printGrouped ( string ) :				      Disassembly of <code object printGrouped at 0x7f33e2653f60, f Disassembly of <code object printGrouped at 0x7f2b0163dc90, f script_not_found : None
    n = len ( string )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    count = [ 0 ] * MAX_CHAR				      2 LOAD_FAST 0 ( string )					    2 LOAD_FAST 0 ( string )					  
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	count [ ord ( string [ i ] ) - ord ( "a" ) ] += 1     6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
    for i in range ( n ) :				      								    								  
	while count [ ord ( string [ i ] ) - ord ( "a" ) ] :  3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    print ( string [ i ] , end = "" )		      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
	    count [ ord ( string [ i ] ) - ord ( "a" ) ] -= 1 12 LOAD_GLOBAL 1 ( MAX_CHAR )				    12 LOAD_GLOBAL 1 ( MAX_CHAR )				  
	count [ ord ( string [ i ] ) - ord ( "a" ) ] = 0      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
							      16 STORE_FAST 2 ( count )					    16 STORE_FAST 2 ( count )					  
							      								    								  
							      4 18 SETUP_LOOP 48 ( to 68 )				    4 18 SETUP_LOOP 46 ( to 68 )				  
							      20 LOAD_GLOBAL 2 ( range )				    20 LOAD_GLOBAL 2 ( range )					  
							      22 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 36 ( to 66 )				    >> 28 FOR_ITER 38 ( to 66 )					  
							      30 STORE_FAST 3 ( i )					    30 STORE_FAST 3 ( i )					  
							      								    								  
							      5 32 LOAD_FAST 2 ( count )				    5 32 LOAD_FAST 2 ( count )					  
							      34 LOAD_GLOBAL 3 ( ord )					    34 LOAD_GLOBAL 3 ( ord )					  
							      36 LOAD_FAST 0 ( string )					    36 LOAD_FAST 0 ( string )					  
							      38 LOAD_FAST 3 ( i )					    38 LOAD_FAST 3 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 CALL_FUNCTION 1					    42 CALL_FUNCTION 1						  
							      44 LOAD_GLOBAL 3 ( ord )					    44 LOAD_GLOBAL 3 ( ord )					  
							      46 LOAD_CONST 2 ( 'a' )					    46 LOAD_CONST 2 ( 'a' )					  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 BINARY_SUBTRACT					    50 BINARY_SUBTRACT						  
							      52 DUP_TOP_TWO						    52 DUP_TOP_TWO						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 3 ( 1 )					  
							      58 INPLACE_ADD						    58 INPLACE_ADD						  
							      60 ROT_THREE						    60 ROT_THREE						  
							      62 STORE_SUBSCR						    62 STORE_SUBSCR						  
							      64 JUMP_ABSOLUTE 28					    64 JUMP_ABSOLUTE 28						  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      6 >> 68 SETUP_LOOP 118 ( to 188 )				    6 >> 68 SETUP_LOOP 94 ( to 144 )				  
							      70 LOAD_GLOBAL 2 ( range )				    70 LOAD_GLOBAL 2 ( range )					  
							      72 LOAD_FAST 1 ( n )					    72 LOAD_FAST 1 ( n )					  
							      74 CALL_FUNCTION 1					    74 CALL_FUNCTION 1						  
							      76 GET_ITER						    76 GET_ITER							  
							      >> 78 FOR_ITER 106 ( to 186 )				    >> 78 FOR_ITER 80 ( to 142 )				  
							      80 STORE_FAST 3 ( i )					    80 STORE_FAST 3 ( i )					  
							      								    								  
							      7 82 SETUP_LOOP 76 ( to 160 )				    7 82 SETUP_LOOP 78 ( to 140 )				  
							      >> 84 LOAD_FAST 2 ( count )				    >> 84 LOAD_GLOBAL 3 ( count )				  
							      86 LOAD_GLOBAL 3 ( ord )					    86 LOAD_GLOBAL 3 ( ord )					  
							      88 LOAD_FAST 0 ( string )					    88 LOAD_FAST 0 ( string )					  
							      90 LOAD_FAST 3 ( i )					    90 LOAD_FAST 3 ( i )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 CALL_FUNCTION 1					    94 CALL_FUNCTION 1						  
							      96 LOAD_GLOBAL 3 ( ord )					    96 LOAD_GLOBAL 3 ( ord )					  
							      98 LOAD_CONST 2 ( 'a' )					    98 LOAD_CONST 2 ( 'a' )					  
							      100 CALL_FUNCTION 1					    100 CALL_FUNCTION 1						  
							      102 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 POP_JUMP_IF_FALSE 158					    106 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      8 108 LOAD_GLOBAL 4 ( print )				    8 108 LOAD_GLOBAL 4 ( print )				  
							      110 LOAD_FAST 0 ( string )				    110 LOAD_FAST 0 ( string )					  
							      112 LOAD_FAST 3 ( i )					    112 LOAD_FAST 3 ( i )					  
							      114 BINARY_SUBSCR						    114 BINARY_SUBSCR						  
							      116 LOAD_CONST 4 ( '' )					    116 LOAD_CONST 4 ( '' )					  
							      118 LOAD_CONST 5 ( ( 'end' , ) )				    118 LOAD_CONST 5 ( ( 'end' , ) )				  
							      120 CALL_FUNCTION_KW 2					    120 CALL_FUNCTION_KW 2					  
							      122 POP_TOP						    122 POP_TOP							  
							      								    								  
							      9 124 LOAD_FAST 2 ( count )				    9 124 LOAD_FAST 2 ( count )					  
							      126 LOAD_GLOBAL 3 ( ord )					    126 LOAD_GLOBAL 3 ( ord )					  
							      128 LOAD_FAST 0 ( string )				    128 LOAD_FAST 0 ( string )					  
							      130 LOAD_FAST 3 ( i )					    130 LOAD_FAST 3 ( i )					  
							      132 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      134 CALL_FUNCTION 1					    134 CALL_FUNCTION 1						  
							      136 LOAD_GLOBAL 3 ( ord )					    136 LOAD_GLOBAL 3 ( ord )					  
							      138 LOAD_CONST 2 ( 'a' )					    138 LOAD_CONST 2 ( 'a' )					  
							      140 CALL_FUNCTION 1					    140 CALL_FUNCTION 1						  
							      142 BINARY_SUBTRACT					    142 BINARY_SUBTRACT						  
							      144 DUP_TOP_TWO						    144 DUP_TOP_TWO						  
							      146 BINARY_SUBSCR						    146 ROT_THREE						  
							      148 LOAD_CONST 3 ( 1 )					    148 STORE_SUBSCR						  
							      150 INPLACE_SUBTRACT					    								  
							      152 ROT_THREE						    10 150 LOAD_FAST 2 ( count )				  
							      154 STORE_SUBSCR						    152 LOAD_GLOBAL 3 ( ord )					  
							      156 JUMP_ABSOLUTE 84					    154 LOAD_FAST 0 ( string )					  
							      >> 158 POP_BLOCK						    156 LOAD_FAST 3 ( i )					  
							      								    158 BINARY_SUBSCR						  
							      10 >> 160 LOAD_CONST 1 ( 0 )				    160 CALL_FUNCTION 1						  
							      162 LOAD_FAST 2 ( count )					    162 LOAD_GLOBAL 3 ( ord )					  
							      164 LOAD_GLOBAL 3 ( ord )					    164 LOAD_CONST 2 ( 'a' )					  
							      166 LOAD_FAST 0 ( string )				    166 CALL_FUNCTION 1						  
							      168 LOAD_FAST 3 ( i )					    168 BINARY_SUBTRACT						  
							      170 BINARY_SUBSCR						    170 DUP_TOP_TWO						  
							      172 CALL_FUNCTION 1					    172 BINARY_SUBSCR						  
							      174 LOAD_GLOBAL 3 ( ord )					    174 LOAD_CONST 3 ( 1 )					  
							      176 LOAD_CONST 2 ( 'a' )					    176 INPLACE_SUBTRACT					  
							      178 CALL_FUNCTION 1					    178 ROT_THREE						  
							      180 BINARY_SUBTRACT					    180 STORE_SUBSCR						  
							      182 STORE_SUBSCR						    182 JUMP_ABSOLUTE 84					  
							      184 JUMP_ABSOLUTE 78					    >> 184 POP_BLOCK						  
							      >> 186 POP_BLOCK						    								  
							      >> 188 LOAD_CONST 0 ( None )				    11 >> 186 LOAD_CONST 1 ( 0 )				  
							      190 RETURN_VALUE NEW_LINE					    188 LOAD_FAST 2 ( count )					  
							      								    190 LOAD_GLOBAL 3 ( ord )					  
							      								    192 LOAD_FAST 0 ( string )					  
							      								    194 LOAD_FAST 3 ( i )					  
							      								    196 BINARY_SUBSCR						  
							      								    198 CALL_FUNCTION 1						  
							      								    200 LOAD_GLOBAL 3 ( ord )					  
							      								    202 LOAD_CONST 2 ( 'a' )					  
							      								    204 CALL_FUNCTION 1						  
							      								    206 BINARY_SUBTRACT						  
							      								    208 STORE_SUBSCR						  
							      								    >> 210 LOAD_CONST 0 ( None )				  
							      								    212 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1	      MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		    MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		  MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1
--							      --							    --								  --
def <<unk>> stSubWithSum ( arr , n , x ) :		      Disassembly of <code object <<unk>> stSubWithSum at 0x7f33e26 Disassembly of <code object Encoder stSubWithSum at 0x7f2b016 timeout : None
    curr_sum = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    min_len = n + 1 ;					      2 STORE_FAST 3 ( curr_sum )				    2 STORE_FAST 3 ( curr_sum )					  
    start = 0 ;						      								    								  
    end = 0 ;						      3 4 LOAD_FAST 1 ( n )					    3 4 LOAD_FAST 1 ( n )					  
    while ( end < n ) :					      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
	while ( curr_sum <= x and end < n ) :		      8 BINARY_ADD						    8 BINARY_ADD						  
	    if ( curr_sum <= 0 and x > 0 ) :		      10 STORE_FAST 4 ( min_len )				    10 STORE_FAST 4 ( min_len )					  
		start = end ;				      								    								  
		curr_sum = 0 ;				      4 12 LOAD_CONST 1 ( 0 )					    4 12 LOAD_CONST 1 ( 0 )					  
	    curr_sum += arr [ end ] ;			      14 STORE_FAST 5 ( start )					    14 STORE_FAST 5 ( start )					  
	    end += 1 ;					      								    								  
	while ( curr_sum > x and start < n ) :		      5 16 LOAD_CONST 1 ( 0 )					    5 16 LOAD_CONST 1 ( 0 )					  
	    if ( end - start < min_len ) :		      18 STORE_FAST 6 ( end )					    18 STORE_FAST 6 ( end )					  
		min_len = end - start ;			      								    								  
	    curr_sum -= arr [ start ] ;			      6 20 SETUP_LOOP 140 ( to 162 )				    6 20 SETUP_LOOP 80 ( to 102 )				  
	    start += 1 ;				      >> 22 LOAD_FAST 6 ( end )					    >> 22 LOAD_FAST 6 ( end )					  
    return min_len ;					      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 COMPARE_OP 0 ( < )					    26 COMPARE_OP 0 ( < )					  
							      28 POP_JUMP_IF_FALSE 160					    28 POP_JUMP_IF_FALSE 100					  
							      								    								  
							      7 30 SETUP_LOOP 64 ( to 96 )				    7 30 SETUP_LOOP 62 ( to 96 )				  
							      >> 32 LOAD_FAST 3 ( curr_sum )				    >> 32 LOAD_FAST 3 ( curr_sum )				  
							      34 LOAD_FAST 2 ( x )					    34 LOAD_FAST 2 ( x )					  
							      36 COMPARE_OP 1 ( <= )					    36 COMPARE_OP 1 ( <= )					  
							      38 POP_JUMP_IF_FALSE 94					    38 POP_JUMP_IF_FALSE 94					  
							      40 LOAD_FAST 6 ( end )					    40 LOAD_FAST 6 ( end )					  
							      42 LOAD_FAST 1 ( n )					    42 LOAD_FAST 1 ( n )					  
							      44 COMPARE_OP 0 ( < )					    44 COMPARE_OP 0 ( < )					  
							      46 POP_JUMP_IF_FALSE 94					    46 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      8 48 LOAD_FAST 3 ( curr_sum )				    8 48 LOAD_FAST 3 ( curr_sum )				  
							      50 LOAD_CONST 1 ( 0 )					    50 LOAD_CONST 1 ( 0 )					  
							      52 COMPARE_OP 1 ( <= )					    52 COMPARE_OP 4 ( > )					  
							      54 POP_JUMP_IF_FALSE 72					    54 POP_JUMP_IF_FALSE 66					  
							      56 LOAD_FAST 2 ( x )					    56 LOAD_FAST 2 ( x )					  
							      58 LOAD_CONST 1 ( 0 )					    58 LOAD_CONST 1 ( 0 )					  
							      60 COMPARE_OP 4 ( > )					    60 COMPARE_OP 4 ( > )					  
							      62 POP_JUMP_IF_FALSE 72					    62 POP_JUMP_IF_FALSE 66					  
							      								    64 LOAD_FAST 2 ( x )					  
							      9 64 LOAD_FAST 6 ( end )					    66 LOAD_CONST 1 ( 0 )					  
							      66 STORE_FAST 5 ( start )					    68 COMPARE_OP 4 ( > )					  
							      								    70 POP_JUMP_IF_FALSE 66					  
							      10 68 LOAD_CONST 1 ( 0 )					    								  
							      70 STORE_FAST 3 ( curr_sum )				    9 72 LOAD_FAST 6 ( end )					  
							      								    74 STORE_FAST 5 ( start )					  
							      11 >> 72 LOAD_FAST 3 ( curr_sum )				    								  
							      74 LOAD_FAST 0 ( arr )					    10 76 LOAD_CONST 1 ( 0 )					  
							      76 LOAD_FAST 6 ( end )					    78 STORE_FAST 3 ( curr_sum )				  
							      78 BINARY_SUBSCR						    80 JUMP_ABSOLUTE 32						  
							      80 INPLACE_ADD						    >> 82 POP_BLOCK						  
							      82 STORE_FAST 3 ( curr_sum )				    								  
							      								    11 >> 84 LOAD_FAST 3 ( curr_sum )				  
							      12 84 LOAD_FAST 6 ( end )					    86 LOAD_FAST 0 ( arr )					  
							      86 LOAD_CONST 2 ( 1 )					    88 LOAD_FAST 6 ( end )					  
							      88 INPLACE_ADD						    90 BINARY_SUBSCR						  
							      90 STORE_FAST 6 ( end )					    92 INPLACE_ADD						  
							      92 JUMP_ABSOLUTE 32					    94 STORE_FAST 3 ( curr_sum )				  
							      >> 94 POP_BLOCK						    								  
							      								    12 96 LOAD_FAST 6 ( end )					  
							      13 >> 96 SETUP_LOOP 60 ( to 158 )				    98 LOAD_CONST 2 ( 1 )					  
							      >> 98 LOAD_FAST 3 ( curr_sum )				    100 INPLACE_ADD						  
							      100 LOAD_FAST 2 ( x )					    102 STORE_FAST 6 ( end )					  
							      102 COMPARE_OP 4 ( > )					    104 JUMP_ABSOLUTE 22					  
							      104 POP_JUMP_IF_FALSE 156					    >> 106 POP_BLOCK						  
							      106 LOAD_FAST 5 ( start )					    								  
							      108 LOAD_FAST 1 ( n )					    13 >> 108 SETUP_LOOP 52 ( to 156 )				  
							      110 COMPARE_OP 0 ( < )					    >> 110 LOAD_FAST 3 ( curr_sum )				  
							      112 POP_JUMP_IF_FALSE 156					    112 LOAD_FAST 2 ( x )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      14 114 LOAD_FAST 6 ( end )				    116 POP_JUMP_IF_FALSE 154					  
							      116 LOAD_FAST 5 ( start )					    118 LOAD_FAST 5 ( start )					  
							      118 BINARY_SUBTRACT					    120 LOAD_FAST 1 ( n )					  
							      120 LOAD_FAST 4 ( min_len )				    122 COMPARE_OP 0 ( < )					  
							      122 COMPARE_OP 0 ( < )					    124 POP_JUMP_IF_FALSE 154					  
							      124 POP_JUMP_IF_FALSE 134					    								  
							      								    14 126 LOAD_FAST 6 ( end )					  
							      15 126 LOAD_FAST 6 ( end )				    128 LOAD_FAST 5 ( start )					  
							      128 LOAD_FAST 5 ( start )					    130 BINARY_SUBTRACT						  
							      130 BINARY_SUBTRACT					    132 STORE_FAST 4 ( min_len )				  
							      132 STORE_FAST 4 ( min_len )				    								  
							      								    15 >> 134 LOAD_FAST 3 ( curr_sum )				  
							      16 >> 134 LOAD_FAST 3 ( curr_sum )			    136 LOAD_FAST 0 ( arr )					  
							      136 LOAD_FAST 0 ( arr )					    138 LOAD_FAST 5 ( start )					  
							      138 LOAD_FAST 5 ( start )					    140 BINARY_SUBSCR						  
							      140 BINARY_SUBSCR						    142 INPLACE_SUBTRACT					  
							      142 INPLACE_SUBTRACT					    144 STORE_FAST 3 ( curr_sum )				  
							      144 STORE_FAST 3 ( curr_sum )				    								  
							      								    16 146 LOAD_FAST 5 ( start )				  
							      17 146 LOAD_FAST 5 ( start )				    148 LOAD_CONST 2 ( 1 )					  
							      148 LOAD_CONST 2 ( 1 )					    150 INPLACE_ADD						  
							      150 INPLACE_ADD						    152 STORE_FAST 5 ( start )					  
							      152 STORE_FAST 5 ( start )				    154 JUMP_ABSOLUTE 22					  
							      154 JUMP_ABSOLUTE 98					    >> 156 POP_BLOCK						  
							      >> 156 POP_BLOCK						    								  
							      >> 158 JUMP_ABSOLUTE 22					    17 >> 158 LOAD_FAST 4 ( min_len )				  
							      >> 160 POP_BLOCK						    160 RETURN_VALUE NEW_LINE					  
							      								    								  
							      18 >> 162 LOAD_FAST 4 ( min_len )				    								  
							      164 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO		      PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO		    PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO		  PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO
--							      --							    --								  --
def pageFaults ( pages , n , capacity ) :		      Disassembly of <code object pageFaults at 0x7f33e2649a50, fil Disassembly of <code object pageFaults at 0x7f2b0163dc90, fil error : /bin/bash: line 1:  4975 Segmentation faul
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    indexes = Queue ( )					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  ataset/bin/python XLM/dis_script.py --script_path
    page_faults = 0					      4 STORE_FAST 3 ( s )					    4 STORE_FAST 3 ( s )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( n ) :				      								    								  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/PROGRA
	if ( len ( s ) < capacity ) :			      3 6 LOAD_GLOBAL 1 ( Queue )				    3 6 LOAD_GLOBAL 1 ( Queue )					  M_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO.dis
	    if ( pages [ i ] not in s ) :		      8 CALL_FUNCTION 0						    8 CALL_FUNCTION 0						  
		s.add ( pages [ i ] )			      10 STORE_FAST 4 ( indexes )				    10 STORE_FAST 4 ( indexes )					  
		page_faults += 1			      								    								  
		indexes.put ( pages [ i ] )		      4 12 LOAD_CONST 1 ( 0 )					    4 12 LOAD_CONST 1 ( 0 )					  
	else :						      14 STORE_FAST 5 ( page_faults )				    14 STORE_FAST 5 ( page_faults )				  
	    if ( pages [ i ] not in s ) :		      								    								  
		val = indexes.queue [ 0 ]		      5 16 SETUP_LOOP 154 ( to 172 )				    5 16 SETUP_LOOP 106 ( to 126 )				  
		indexes.get ( )				      18 LOAD_GLOBAL 2 ( range )				    18 LOAD_GLOBAL 2 ( range )					  
		s.remove ( val )			      20 LOAD_FAST 1 ( n )					    20 LOAD_FAST 1 ( n )					  
		s.add ( pages [ i ] )			      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
		indexes.put ( pages [ i ] )		      24 GET_ITER						    24 GET_ITER							  
		page_faults += 1			      >> 26 FOR_ITER 142 ( to 170 )				    >> 26 FOR_ITER 82 ( to 124 )				  
    return page_faults					      28 STORE_FAST 6 ( i )					    28 STORE_FAST 6 ( i )					  
							      								    								  
							      6 30 LOAD_GLOBAL 3 ( len )				    6 30 LOAD_GLOBAL 3 ( len )					  
							      32 LOAD_FAST 3 ( s )					    32 LOAD_FAST 3 ( s )					  
							      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 LOAD_FAST 2 ( capacity )				    36 LOAD_FAST 2 ( capacity )					  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 0 ( < )					  
							      40 POP_JUMP_IF_FALSE 92					    40 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      7 42 LOAD_FAST 0 ( pages )				    7 42 LOAD_FAST 0 ( pages )					  
							      44 LOAD_FAST 6 ( i )					    44 LOAD_FAST 6 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_FAST 3 ( s )					    48 LOAD_FAST 3 ( s )					  
							      50 COMPARE_OP 7 ( not in )				    50 COMPARE_OP 7 ( not in )					  
							      52 POP_JUMP_IF_FALSE 168					    52 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      8 54 LOAD_FAST 3 ( s )					    8 54 LOAD_FAST 3 ( s )					  
							      56 LOAD_METHOD 4 ( add )					    56 LOAD_METHOD 4 ( add )					  
							      58 LOAD_FAST 0 ( pages )					    58 LOAD_FAST 0 ( pages )					  
							      60 LOAD_FAST 6 ( i )					    60 LOAD_FAST 6 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 CALL_METHOD 1						    64 CALL_METHOD 1						  
							      66 POP_TOP						    66 POP_TOP							  
							      								    								  
							      9 68 LOAD_FAST 5 ( page_faults )				    9 68 LOAD_FAST 5 ( page_faults )				  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 INPLACE_ADD						    72 INPLACE_ADD						  
							      74 STORE_FAST 5 ( page_faults )				    74 STORE_FAST 5 ( page_faults )				  
							      								    								  
							      10 76 LOAD_FAST 4 ( indexes )				    10 76 LOAD_FAST 4 ( indexes )				  
							      78 LOAD_METHOD 5 ( put )					    78 LOAD_METHOD 5 ( put )					  
							      80 LOAD_FAST 0 ( pages )					    80 LOAD_FAST 0 ( pages )					  
							      82 LOAD_FAST 6 ( i )					    82 LOAD_FAST 6 ( i )					  
							      84 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      86 CALL_METHOD 1						    86 CALL_METHOD 1						  
							      88 POP_TOP						    88 POP_TOP							  
							      90 JUMP_ABSOLUTE 26					    90 JUMP_ABSOLUTE 26						  
							      								    								  
							      12 >> 92 LOAD_FAST 0 ( pages )				    12 >> 92 LOAD_FAST 0 ( pages )				  
							      94 LOAD_FAST 6 ( i )					    94 LOAD_FAST 6 ( i )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_FAST 3 ( s )					    98 LOAD_FAST 3 ( s )					  
							      100 COMPARE_OP 7 ( not in )				    100 COMPARE_OP 7 ( not in )					  
							      102 POP_JUMP_IF_FALSE 26					    102 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      13 104 LOAD_FAST 4 ( indexes )				    13 104 LOAD_FAST 4 ( indexes )				  
							      106 LOAD_ATTR 6 ( queue )					    106 LOAD_ATTR 6 ( queue )					  
							      108 LOAD_CONST 1 ( 0 )					    108 LOAD_CONST 1 ( 0 )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 STORE_FAST 7 ( val )					    112 STORE_FAST 7 ( val )					  
							      								    								  
							      14 114 LOAD_FAST 4 ( indexes )				    14 114 LOAD_FAST 4 ( indexes )				  
							      116 LOAD_METHOD 7 ( get )					    116 LOAD_METHOD 7 ( get )					  
							      118 CALL_METHOD 0						    118 CALL_METHOD 0						  
							      120 POP_TOP						    120 POP_TOP							  
							      								    								  
							      15 122 LOAD_FAST 3 ( s )					    15 122 LOAD_FAST 3 ( s )					  
							      124 LOAD_METHOD 8 ( remove )				    124 LOAD_METHOD 4 ( remove )				  
							      126 LOAD_FAST 7 ( val )					    126 LOAD_FAST 7 ( val )					  
							      128 CALL_METHOD 1						    128 CALL_METHOD 1						  
							      130 POP_TOP						    130 POP_TOP							  
							      								    								  
							      16 132 LOAD_FAST 3 ( s )					    16 132 LOAD_FAST 3 ( s )					  
							      134 LOAD_METHOD 4 ( add )					    134 LOAD_METHOD 4 ( add )					  
							      136 LOAD_FAST 0 ( pages )					    136 LOAD_FAST 0 ( pages )					  
							      138 LOAD_FAST 6 ( i )					    138 LOAD_FAST 6 ( i )					  
							      140 BINARY_SUBSCR						    140 BINARY_SUBSCR						  
							      142 CALL_METHOD 1						    142 CALL_METHOD 1						  
							      144 POP_TOP						    144 POP_TOP							  
							      								    								  
							      17 146 LOAD_FAST 4 ( indexes )				    17 146 LOAD_FAST 4 ( indexes )				  
							      148 LOAD_METHOD 5 ( put )					    148 LOAD_METHOD 5 ( put )					  
							      150 LOAD_FAST 0 ( pages )					    150 LOAD_FAST 0 ( pages )					  
							      152 LOAD_FAST 6 ( i )					    152 LOAD_FAST 6 ( i )					  
							      154 BINARY_SUBSCR						    154 BINARY_SUBSCR						  
							      156 CALL_METHOD 1						    156 CALL_METHOD 1						  
							      158 POP_TOP						    158 POP_TOP							  
							      								    								  
							      18 160 LOAD_FAST 5 ( page_faults )			    18 160 LOAD_FAST 4 ( indexes )				  
							      162 LOAD_CONST 2 ( 1 )					    162 LOAD_CONST 2 ( 1 )					  
							      164 INPLACE_ADD						    164 INPLACE_ADD						  
							      166 STORE_FAST 5 ( page_faults )				    166 STORE_FAST 5 ( page_faults )				  
							      >> 168 JUMP_ABSOLUTE 26					    168 JUMP_ABSOLUTE 26					  
							      >> 170 POP_BLOCK						    >> 170 POP_BLOCK						  
							      								    								  
							      19 >> 172 LOAD_FAST 5 ( page_faults )			    19 >> 172 LOAD_FAST 5 ( page_faults )			  
							      174 RETURN_VALUE NEW_LINE					    174 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ISBN					      PROGRAM_CHECK_ISBN					    PROGRAM_CHECK_ISBN						  PROGRAM_CHECK_ISBN
--							      --							    --								  --
def isValidISBN ( isbn ) :				      Disassembly of <code object isValidISBN at 0x7f33e2644930, fi Disassembly of <code object isValidISBN at 0x7f2b0163dc90, fi script_not_found : None
    if len ( isbn ) != 10 :				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
	return False					      2 LOAD_FAST 0 ( isbn )					    2 LOAD_FAST 0 ( isbn )					  
    _sum = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 9 ) :				      6 LOAD_CONST 1 ( 10 )					    6 LOAD_CONST 1 ( 10 )					  
	if 0 <= int ( isbn [ i ] ) <= 9 :		      8 COMPARE_OP 3 ( != )					    8 COMPARE_OP 3 ( != )					  
	    _sum += int ( isbn [ i ] ) * ( 10 - i )	      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 16					  
	else :						      								    								  
	    return False				      3 12 LOAD_CONST 2 ( False )				    3 12 LOAD_CONST 2 ( False )					  
    if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) 14 RETURN_VALUE						    14 RETURN_VALUE						  
	return False					      								    								  
    _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )   4 >> 16 LOAD_CONST 3 ( 0 )				    4 >> 16 LOAD_CONST 3 ( 0 )					  
    return ( _sum % 11 == 0 )				      18 STORE_FAST 1 ( _sum )					    18 STORE_FAST 1 ( _sum )					  
							      								    								  
							      5 20 SETUP_LOOP 78 ( to 100 )				    5 20 SETUP_LOOP 60 ( to 78 )				  
							      22 LOAD_GLOBAL 1 ( range )				    22 LOAD_GLOBAL 1 ( range )					  
							      24 LOAD_CONST 4 ( 9 )					    24 LOAD_CONST 4 ( 9 )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 66 ( to 98 )				    >> 30 FOR_ITER 48 ( to 76 )					  
							      32 STORE_FAST 2 ( i )					    32 STORE_FAST 2 ( i )					  
							      								    								  
							      6 34 LOAD_CONST 3 ( 0 )					    6 34 LOAD_CONST 3 ( 0 )					  
							      36 LOAD_GLOBAL 2 ( int )					    36 LOAD_GLOBAL 2 ( int )					  
							      38 LOAD_FAST 0 ( isbn )					    38 LOAD_FAST 0 ( isbn )					  
							      40 LOAD_FAST 2 ( i )					    40 LOAD_FAST 2 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 DUP_TOP						    46 DUP_TOP							  
							      48 ROT_THREE						    48 ROT_THREE						  
							      50 COMPARE_OP 1 ( <= )					    50 COMPARE_OP 1 ( <= )					  
							      52 POP_JUMP_IF_FALSE 62					    52 POP_JUMP_IF_FALSE 76					  
							      54 LOAD_CONST 4 ( 9 )					    54 LOAD_CONST 4 ( 9 )					  
							      56 COMPARE_OP 1 ( <= )					    56 COMPARE_OP 1 ( <= )					  
							      58 POP_JUMP_IF_FALSE 92					    58 POP_JUMP_IF_FALSE 30					  
							      60 JUMP_FORWARD 4 ( to 66 )				    60 JUMP_FORWARD 4 ( to 66 )					  
							      >> 62 POP_TOP						    >> 62 POP_TOP						  
							      64 JUMP_FORWARD 26 ( to 92 )				    64 JUMP_FORWARD 18 ( to 80 )				  
							      								    								  
							      7 >> 66 LOAD_FAST 1 ( _sum )				    7 >> 66 LOAD_FAST 1 ( _sum )				  
							      68 LOAD_GLOBAL 2 ( int )					    68 LOAD_GLOBAL 2 ( int )					  
							      70 LOAD_FAST 0 ( isbn )					    70 LOAD_FAST 0 ( isbn )					  
							      72 LOAD_FAST 2 ( i )					    72 LOAD_FAST 2 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 CALL_FUNCTION 1					    76 CALL_FUNCTION 1						  
							      78 LOAD_CONST 1 ( 10 )					    78 LOAD_CONST 1 ( 10 )					  
							      80 LOAD_FAST 2 ( i )					    80 LOAD_FAST 2 ( i )					  
							      82 BINARY_SUBTRACT					    82 BINARY_SUBTRACT						  
							      84 BINARY_MULTIPLY					    84 BINARY_MULTIPLY						  
							      86 INPLACE_ADD						    86 INPLACE_ADD						  
							      88 STORE_FAST 1 ( _sum )					    88 STORE_FAST 1 ( _sum )					  
							      90 JUMP_ABSOLUTE 30					    90 JUMP_FORWARD 4 ( to 96 )					  
							      								    								  
							      9 >> 92 LOAD_CONST 2 ( False )				    9 >> 92 LOAD_CONST 2 ( False )				  
							      94 RETURN_VALUE						    94 RETURN_VALUE						  
							      96 JUMP_ABSOLUTE 30					    >> 96 LOAD_CONST 0 ( None )					  
							      >> 98 POP_BLOCK						    98 RETURN_VALUE NEW_LINE					  
							      								    								  
							      10 >> 100 LOAD_FAST 0 ( isbn )				    								  
							      102 LOAD_CONST 4 ( 9 )					    								  
							      104 BINARY_SUBSCR						    								  
							      106 LOAD_CONST 5 ( 'X' )					    								  
							      108 COMPARE_OP 3 ( != )					    								  
							      110 POP_JUMP_IF_FALSE 148					    								  
							      112 LOAD_CONST 3 ( 0 )					    								  
							      114 LOAD_GLOBAL 2 ( int )					    								  
							      116 LOAD_FAST 0 ( isbn )					    								  
							      118 LOAD_CONST 4 ( 9 )					    								  
							      120 BINARY_SUBSCR						    								  
							      122 CALL_FUNCTION 1					    								  
							      124 DUP_TOP						    								  
							      126 ROT_THREE						    								  
							      128 COMPARE_OP 1 ( <= )					    								  
							      130 POP_JUMP_IF_FALSE 140					    								  
							      132 LOAD_CONST 4 ( 9 )					    								  
							      134 COMPARE_OP 1 ( <= )					    								  
							      136 POP_JUMP_IF_FALSE 148					    								  
							      138 JUMP_FORWARD 4 ( to 144 )				    								  
							      >> 140 POP_TOP						    								  
							      142 JUMP_FORWARD 4 ( to 148 )				    								  
							      								    								  
							      11 >> 144 LOAD_CONST 2 ( False )				    								  
							      146 RETURN_VALUE						    								  
							      								    								  
							      12 >> 148 LOAD_FAST 1 ( _sum )				    								  
							      150 LOAD_FAST 0 ( isbn )					    								  
							      152 LOAD_CONST 4 ( 9 )					    								  
							      154 BINARY_SUBSCR						    								  
							      156 LOAD_CONST 5 ( 'X' )					    								  
							      158 COMPARE_OP 2 ( == )					    								  
							      160 POP_JUMP_IF_FALSE 166					    								  
							      162 LOAD_CONST 1 ( 10 )					    								  
							      164 JUMP_FORWARD 10 ( to 176 )				    								  
							      >> 166 LOAD_GLOBAL 2 ( int )				    								  
							      168 LOAD_FAST 0 ( isbn )					    								  
							      170 LOAD_CONST 4 ( 9 )					    								  
							      172 BINARY_SUBSCR						    								  
							      174 CALL_FUNCTION 1					    								  
							      >> 176 INPLACE_ADD					    								  
							      178 STORE_FAST 1 ( _sum )					    								  
							      								    								  
							      13 180 LOAD_FAST 1 ( _sum )				    								  
							      182 LOAD_CONST 6 ( 11 )					    								  
							      184 BINARY_MODULO						    								  
							      186 LOAD_CONST 3 ( 0 )					    								  
							      188 COMPARE_OP 2 ( == )					    								  
							      190 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS		      LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS		    LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS		  LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS
--							      --							    --								  --
def subsetGraph ( C ) :					      Disassembly of <code object subsetGraph at 0x7f33e2644930, fi Disassembly of <code object subsetGraph at 0x7f2b01639660, fi script_not_found : None
    global N						      3 0 LOAD_GLOBAL 0 ( set )					    3 0 LOAD_GLOBAL 0 ( set )					  
    vertices = set ( )					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for i in range ( N ) :				      4 STORE_FAST 1 ( vertices )				    4 STORE_FAST 1 ( vertices )					  
	vertices.add ( i )				      								    								  
    while ( len ( vertices ) != 0 ) :			      4 6 SETUP_LOOP 26 ( to 34 )				    4 6 SETUP_LOOP 26 ( to 32 )					  
	if ( len ( vertices ) == 1 ) :			      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	    return 1					      10 LOAD_GLOBAL 2 ( N )					    10 LOAD_FAST 0 ( C )					  
	someone_removed = False				      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	for x in vertices :				      14 GET_ITER						    14 GET_ITER							  
	    values = set ( )				      >> 16 FOR_ITER 14 ( to 32 )				    >> 16 FOR_ITER 14 ( to 30 )					  
	    for y in vertices :				      18 STORE_FAST 2 ( i )					    18 STORE_FAST 2 ( i )					  
		if ( y != x ) :				      								    								  
		    values.add ( C [ x ] [ y ] )	      5 20 LOAD_FAST 1 ( vertices )				    5 20 LOAD_FAST 1 ( vertices )				  
	    if ( len ( values ) == 1 ) :		      22 LOAD_METHOD 3 ( add )					    22 LOAD_METHOD 2 ( add )					  
		vertices.remove ( x )			      24 LOAD_FAST 2 ( i )					    24 LOAD_FAST 2 ( i )					  
		someone_removed = True			      26 CALL_METHOD 1						    26 CALL_METHOD 1						  
		break					      28 POP_TOP						    28 POP_TOP							  
	if ( not someone_removed ) :			      30 JUMP_ABSOLUTE 16					    >> 30 JUMP_ABSOLUTE 16					  
	    break					      >> 32 POP_BLOCK						    >> 32 POP_BLOCK						  
    return len ( vertices )				      								    								  
							      6 >> 34 SETUP_LOOP 130 ( to 166 )				    6 >> 34 SETUP_LOOP 126 ( to 146 )				  
							      >> 36 LOAD_GLOBAL 4 ( len )				    >> 36 LOAD_GLOBAL 3 ( len )					  
							      38 LOAD_FAST 1 ( vertices )				    38 LOAD_FAST 1 ( vertices )					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 LOAD_CONST 1 ( 0 )					    42 LOAD_CONST 1 ( 0 )					  
							      44 COMPARE_OP 3 ( != )					    44 COMPARE_OP 3 ( != )					  
							      46 POP_JUMP_IF_FALSE 164					    46 POP_JUMP_IF_FALSE 144					  
							      								    								  
							      7 48 LOAD_GLOBAL 4 ( len )				    7 48 LOAD_GLOBAL 3 ( len )					  
							      50 LOAD_FAST 1 ( vertices )				    50 LOAD_FAST 1 ( vertices )					  
							      52 CALL_FUNCTION 1					    52 CALL_FUNCTION 1						  
							      54 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 2 ( 1 )					  
							      56 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_FALSE 64					    58 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      8 60 LOAD_CONST 2 ( 1 )					    8 60 LOAD_CONST 2 ( 1 )					  
							      62 RETURN_VALUE						    62 RETURN_VALUE						  
							      								    								  
							      9 >> 64 LOAD_CONST 3 ( False )				    9 >> 64 LOAD_CONST 3 ( False )				  
							      66 STORE_FAST 3 ( someone_removed )			    66 STORE_FAST 3 ( someone_removed )				  
							      								    								  
							      10 68 SETUP_LOOP 86 ( to 156 )				    10 68 SETUP_LOOP 58 ( to 144 )				  
							      70 LOAD_FAST 1 ( vertices )				    70 LOAD_FAST 1 ( vertices )					  
							      72 GET_ITER						    72 GET_ITER							  
							      >> 74 FOR_ITER 78 ( to 154 )				    >> 74 FOR_ITER 50 ( to 142 )				  
							      76 STORE_FAST 4 ( x )					    76 STORE_FAST 4 ( x )					  
							      								    								  
							      11 78 LOAD_GLOBAL 0 ( set )				    11 78 LOAD_GLOBAL 0 ( set )					  
							      80 CALL_FUNCTION 0					    80 CALL_FUNCTION 0						  
							      82 STORE_FAST 5 ( values )				    82 STORE_FAST 5 ( values )					  
							      								    								  
							      12 84 SETUP_LOOP 38 ( to 124 )				    12 84 SETUP_LOOP 38 ( to 128 )				  
							      86 LOAD_FAST 1 ( vertices )				    86 LOAD_FAST 1 ( vertices )					  
							      88 GET_ITER						    88 GET_ITER							  
							      >> 90 FOR_ITER 30 ( to 122 )				    >> 90 FOR_ITER 30 ( to 126 )				  
							      92 STORE_FAST 6 ( y )					    92 STORE_FAST 6 ( y )					  
							      								    								  
							      13 94 LOAD_FAST 6 ( y )					    13 94 LOAD_FAST 6 ( y )					  
							      96 LOAD_FAST 4 ( x )					    96 LOAD_FAST 4 ( x )					  
							      98 COMPARE_OP 3 ( != )					    98 COMPARE_OP 3 ( != )					  
							      100 POP_JUMP_IF_FALSE 90					    100 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      14 102 LOAD_FAST 5 ( values )				    14 102 LOAD_FAST 5 ( values )				  
							      104 LOAD_METHOD 3 ( add )					    104 LOAD_METHOD 2 ( add )					  
							      106 LOAD_FAST 0 ( C )					    106 LOAD_FAST 0 ( C )					  
							      108 LOAD_FAST 4 ( x )					    108 LOAD_FAST 4 ( x )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 LOAD_FAST 6 ( y )					    112 LOAD_FAST 6 ( y )					  
							      114 BINARY_SUBSCR						    114 BINARY_SUBSCR						  
							      116 CALL_METHOD 1						    116 CALL_METHOD 1						  
							      118 POP_TOP						    118 POP_TOP							  
							      120 JUMP_ABSOLUTE 90					    120 JUMP_ABSOLUTE 90					  
							      >> 122 POP_BLOCK						    >> 122 POP_BLOCK						  
							      								    124 JUMP_ABSOLUTE 36					  
							      15 >> 124 LOAD_GLOBAL 4 ( len )				    >> 126 POP_BLOCK						  
							      126 LOAD_FAST 5 ( values )				    								  
							      128 CALL_FUNCTION 1					    15 >> 128 LOAD_GLOBAL 3 ( len )				  
							      130 LOAD_CONST 2 ( 1 )					    130 LOAD_FAST 5 ( values )					  
							      132 COMPARE_OP 2 ( == )					    132 CALL_FUNCTION 1						  
							      134 POP_JUMP_IF_FALSE 74					    134 LOAD_CONST 2 ( 1 )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      16 136 LOAD_FAST 1 ( vertices )				    138 POP_JUMP_IF_FALSE 36					  
							      138 LOAD_METHOD 5 ( remove )				    								  
							      140 LOAD_FAST 4 ( x )					    16 140 LOAD_FAST 1 ( vertices )				  
							      142 CALL_METHOD 1						    142 LOAD_METHOD 4 ( remove )				  
							      144 POP_TOP						    144 LOAD_FAST 4 ( x )					  
							      								    146 CALL_METHOD 1						  
							      17 146 LOAD_CONST 4 ( True )				    148 POP_TOP							  
							      148 STORE_FAST 3 ( someone_removed )			    								  
							      								    17 150 LOAD_CONST 4 ( True )				  
							      18 150 BREAK_LOOP						    152 STORE_GLOBAL 5 ( someone_removed )			  
							      152 JUMP_ABSOLUTE 74					    								  
							      >> 154 POP_BLOCK						    18 154 BREAK_LOOP						  
							      								    156 JUMP_ABSOLUTE 28					  
							      19 >> 156 LOAD_FAST 3 ( someone_removed )			    >> 158 POP_BLOCK						  
							      158 POP_JUMP_IF_TRUE 36					    								  
							      								    19 >> 160 LOAD_FAST 3 ( someone_removed )			  
							      20 160 BREAK_LOOP						    162 POP_JUMP_IF_TRUE 36					  
							      162 JUMP_ABSOLUTE 36					    								  
							      >> 164 POP_BLOCK						    20 164 BREAK_LOOP						  
							      								    166 JUMP_ABSOLUTE 36					  
							      21 >> 166 LOAD_GLOBAL 4 ( len )				    >> 168 POP_BLOCK						  
							      168 LOAD_FAST 1 ( vertices )				    								  
							      170 CALL_FUNCTION 1					    21 170 LOAD_GLOBAL 3 ( len )				  
							      172 RETURN_VALUE NEW_LINE					    172 LOAD_FAST 1 ( vertices )				  
							      								    174 CALL_FUNCTION 1						  
							      								    176 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		      MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		    MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		  MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX
--							      --							    --								  --
def maxRowDiff ( mat , m , n ) :			      Disassembly of <code object maxRowDiff at 0x7f33e2644f60, fil Disassembly of <code object maxRowDiff at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    rowSum = [ 0 ] * m					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , m ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  (item)   File "main.py", line 41, in <module>	  Fi
	sum = 0						      4 LOAD_FAST 1 ( m )					    4 LOAD_FAST 1 ( m )						  le "<dis>", line 2, in maxRowDiff TypeError: 'rang
	for j in range ( 0 , n ) :			      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  e_iterator' object is not subscriptable
	    sum += mat [ i ] [ j ]			      8 STORE_FAST 3 ( rowSum )					    8 STORE_FAST 3 ( rowSum )					  
	rowSum [ i ] = sum				      								    								  
    max_diff = rowSum [ 1 ] - rowSum [ 0 ]		      3 10 SETUP_LOOP 66 ( to 78 )				    3 10 SETUP_LOOP 76 ( to 90 )				  
    min_element = rowSum [ 0 ]				      12 LOAD_GLOBAL 0 ( range )				    12 LOAD_GLOBAL 0 ( range )					  
    for i in range ( 1 , m ) :				      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
	if ( rowSum [ i ] - min_element > max_diff ) :	      16 LOAD_FAST 1 ( m )					    16 LOAD_FAST 1 ( m )					  
	    max_diff = rowSum [ i ] - min_element	      18 CALL_FUNCTION 2					    18 CALL_FUNCTION 2						  
	if ( rowSum [ i ] < min_element ) :		      20 GET_ITER						    20 GET_ITER							  
	    min_element = rowSum [ i ]			      >> 22 FOR_ITER 52 ( to 76 )				    >> 22 FOR_ITER 60 ( to 88 )					  
    return max_diff					      24 STORE_FAST 4 ( i )					    24 STORE_FAST 4 ( i )					  
							      								    								  
							      4 26 LOAD_CONST 1 ( 0 )					    4 26 LOAD_CONST 1 ( 0 )					  
							      28 STORE_FAST 5 ( sum )					    28 STORE_FAST 5 ( sum )					  
							      								    								  
							      5 30 SETUP_LOOP 34 ( to 66 )				    5 30 SETUP_LOOP 36 ( to 76 )				  
							      32 LOAD_GLOBAL 0 ( range )				    32 LOAD_GLOBAL 0 ( range )					  
							      34 LOAD_CONST 1 ( 0 )					    34 LOAD_CONST 1 ( 0 )					  
							      36 LOAD_FAST 2 ( n )					    36 LOAD_FAST 2 ( n )					  
							      38 CALL_FUNCTION 2					    38 CALL_FUNCTION 2						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 20 ( to 64 )				    >> 42 FOR_ITER 24 ( to 74 )					  
							      44 STORE_FAST 6 ( j )					    44 STORE_FAST 6 ( j )					  
							      								    								  
							      6 46 LOAD_FAST 5 ( sum )					    6 46 LOAD_FAST 5 ( sum )					  
							      48 LOAD_FAST 0 ( mat )					    48 LOAD_FAST 0 ( mat )					  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 4 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 6 ( j )					    54 LOAD_FAST 6 ( j )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 INPLACE_ADD						    58 INPLACE_ADD						  
							      60 STORE_FAST 5 ( sum )					    60 STORE_FAST 5 ( sum )					  
							      62 JUMP_ABSOLUTE 42					    62 JUMP_ABSOLUTE 42						  
							      >> 64 POP_BLOCK						    >> 64 POP_BLOCK						  
							      								    								  
							      7 >> 66 LOAD_FAST 5 ( sum )				    7 >> 66 LOAD_FAST 5 ( sum )					  
							      68 LOAD_FAST 3 ( rowSum )					    68 LOAD_FAST 3 ( rowSum )					  
							      70 LOAD_FAST 4 ( i )					    70 LOAD_FAST 4 ( i )					  
							      72 STORE_SUBSCR						    72 STORE_SUBSCR						  
							      74 JUMP_ABSOLUTE 22					    								  
							      >> 76 POP_BLOCK						    8 74 LOAD_FAST 3 ( rowSum )					  
							      								    76 LOAD_CONST 1 ( 0 )					  
							      8 >> 78 LOAD_FAST 3 ( rowSum )				    78 BINARY_SUBSCR						  
							      80 LOAD_CONST 2 ( 1 )					    80 STORE_FAST 7 ( min_element )				  
							      82 BINARY_SUBSCR						    								  
							      84 LOAD_FAST 3 ( rowSum )					    9 82 SETUP_LOOP 68 ( to 146 )				  
							      86 LOAD_CONST 1 ( 0 )					    84 LOAD_GLOBAL 0 ( range )					  
							      88 BINARY_SUBSCR						    86 LOAD_CONST 2 ( 1 )					  
							      90 BINARY_SUBTRACT					    88 LOAD_FAST 1 ( m )					  
							      92 STORE_FAST 7 ( max_diff )				    90 CALL_FUNCTION 2						  
							      								    92 GET_ITER							  
							      9 94 LOAD_FAST 3 ( rowSum )				    >> 94 FOR_ITER 52 ( to 144 )				  
							      96 LOAD_CONST 1 ( 0 )					    96 STORE_FAST 4 ( i )					  
							      98 BINARY_SUBSCR						    								  
							      100 STORE_FAST 8 ( min_element )				    10 98 LOAD_FAST 3 ( rowSum )				  
							      								    100 LOAD_FAST 4 ( i )					  
							      10 102 SETUP_LOOP 66 ( to 170 )				    102 BINARY_SUBSCR						  
							      104 LOAD_GLOBAL 0 ( range )				    104 LOAD_FAST 7 ( min_element )				  
							      106 LOAD_CONST 2 ( 1 )					    106 BINARY_SUBTRACT						  
							      108 LOAD_FAST 1 ( m )					    108 LOAD_FAST 7 ( max_element )				  
							      110 CALL_FUNCTION 2					    110 COMPARE_OP 4 ( > )					  
							      112 GET_ITER						    112 POP_JUMP_IF_FALSE 130					  
							      >> 114 FOR_ITER 52 ( to 168 )				    								  
							      116 STORE_FAST 4 ( i )					    11 114 LOAD_FAST 3 ( rowSum )				  
							      								    116 LOAD_FAST 4 ( i )					  
							      11 118 LOAD_FAST 3 ( rowSum )				    118 BINARY_SUBSCR						  
							      120 LOAD_FAST 4 ( i )					    120 LOAD_FAST 7 ( min_element )				  
							      122 BINARY_SUBSCR						    122 BINARY_SUBTRACT						  
							      124 LOAD_FAST 8 ( min_element )				    124 STORE_FAST 7 ( max_diff )				  
							      126 BINARY_SUBTRACT					    								  
							      128 LOAD_FAST 7 ( max_diff )				    12 >> 126 LOAD_FAST 3 ( rowSum )				  
							      130 COMPARE_OP 4 ( > )					    128 LOAD_FAST 4 ( i )					  
							      132 POP_JUMP_IF_FALSE 146					    130 BINARY_SUBSCR						  
							      								    132 LOAD_FAST 7 ( min_element )				  
							      12 134 LOAD_FAST 3 ( rowSum )				    134 COMPARE_OP 0 ( < )					  
							      136 LOAD_FAST 4 ( i )					    136 POP_JUMP_IF_FALSE 142					  
							      138 BINARY_SUBSCR						    								  
							      140 LOAD_FAST 8 ( min_element )				    13 138 LOAD_FAST 3 ( rowSum )				  
							      142 BINARY_SUBTRACT					    140 LOAD_FAST 4 ( i )					  
							      144 STORE_FAST 7 ( max_diff )				    142 BINARY_SUBSCR						  
							      								    144 LOAD_FAST 7 ( min_element )				  
							      13 >> 146 LOAD_FAST 3 ( rowSum )				    146 BINARY_SUBTRACT						  
							      148 LOAD_FAST 4 ( i )					    148 STORE_FAST 7 ( max_diff )				  
							      150 BINARY_SUBSCR						    								  
							      152 LOAD_FAST 8 ( min_element )				    14 >> 150 LOAD_FAST 3 ( rowSum )				  
							      154 COMPARE_OP 0 ( < )					    152 LOAD_FAST 4 ( i )					  
							      156 POP_JUMP_IF_FALSE 114					    154 BINARY_SUBSCR						  
							      								    156 LOAD_FAST 7 ( min_element )				  
							      14 158 LOAD_FAST 3 ( rowSum )				    158 COMPARE_OP 0 ( < )					  
							      160 LOAD_FAST 4 ( i )					    160 POP_JUMP_IF_FALSE 172					  
							      162 BINARY_SUBSCR						    								  
							      164 STORE_FAST 8 ( min_element )				    15 162 LOAD_FAST 3 ( rowSum )				  
							      166 JUMP_ABSOLUTE 114					    164 LOAD_FAST 4 ( i )					  
							      >> 168 POP_BLOCK						    166 BINARY_SUBSCR						  
							      								    168 STORE_FAST 7 ( min_element )				  
							      15 >> 170 LOAD_FAST 7 ( max_diff )			    170 JUMP_ABSOLUTE 94					  
							      172 RETURN_VALUE NEW_LINE					    >> 172 POP_BLOCK						  
							      								    								  
							      								    16 >> 174 LOAD_FAST 7 ( max_diff )				  
							      								    176 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_FACTORS_BIG_NUMBER				      PRIME_FACTORS_BIG_NUMBER					    PRIME_FACTORS_BIG_NUMBER					  PRIME_FACTORS_BIG_NUMBER
--							      --							    --								  --
def factorize ( n ) :					      Disassembly of <code object factorize at 0x7f33e2653f60, file Disassembly of <code object factorize at 0x7f2b01639f60, file script_not_found : None
    count = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    while ( ( n % 2 > 0 ) == False ) :			      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  
	n >>= 1 ;					      								    								  
	count += 1 ;					      3 4 SETUP_LOOP 36 ( to 42 )				    3 4 SETUP_LOOP 44 ( to 50 )					  
    if ( count > 0 ) :					      >> 6 LOAD_FAST 0 ( n )					    >> 6 LOAD_FAST 0 ( n )					  
	print ( 2 , count ) ;				      8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 2 )					  
    for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 ) :      10 BINARY_MODULO						    10 BINARY_MODULO						  
	count = 0 ;					      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
	while ( n % i == 0 ) :				      14 COMPARE_OP 4 ( > )					    14 COMPARE_OP 2 ( == )					  
	    count += 1 ;				      16 LOAD_CONST 3 ( False )					    16 POP_JUMP_IF_FALSE 48					  
	    n = int ( n / i ) ;				      18 COMPARE_OP 2 ( == )					    								  
	if ( count > 0 ) :				      20 POP_JUMP_IF_FALSE 40					    4 18 LOAD_FAST 0 ( n )					  
	    print ( i , count ) ;			      								    20 LOAD_CONST 3 ( 1 )					  
	i += 2 ;					      4 22 LOAD_FAST 0 ( n )					    22 INPLACE_RSHIFT						  
    if ( n > 2 ) :					      24 LOAD_CONST 4 ( 1 )					    24 STORE_FAST 0 ( n )					  
	print ( n , 1 ) ;				      26 INPLACE_RSHIFT						    								  
							      28 STORE_FAST 0 ( n )					    5 26 LOAD_FAST 1 ( count )					  
							      								    28 LOAD_CONST 3 ( 1 )					  
							      5 30 LOAD_FAST 1 ( count )				    30 INPLACE_ADD						  
							      32 LOAD_CONST 4 ( 1 )					    32 STORE_FAST 1 ( count )					  
							      34 INPLACE_ADD						    								  
							      36 STORE_FAST 1 ( count )					    6 34 LOAD_FAST 1 ( count )					  
							      38 JUMP_ABSOLUTE 6					    36 LOAD_CONST 1 ( 0 )					  
							      >> 40 POP_BLOCK						    38 COMPARE_OP 4 ( > )					  
							      								    40 POP_JUMP_IF_FALSE 52					  
							      6 >> 42 LOAD_FAST 1 ( count )				    								  
							      44 LOAD_CONST 1 ( 0 )					    7 42 LOAD_GLOBAL 0 ( print )				  
							      46 COMPARE_OP 4 ( > )					    44 LOAD_CONST 2 ( 2 )					  
							      48 POP_JUMP_IF_FALSE 60					    46 LOAD_FAST 1 ( count )					  
							      								    48 CALL_FUNCTION 2						  
							      7 50 LOAD_GLOBAL 0 ( print )				    50 POP_TOP							  
							      52 LOAD_CONST 2 ( 2 )					    								  
							      54 LOAD_FAST 1 ( count )					    8 >> 52 SETUP_LOOP 68 ( to 116 )				  
							      56 CALL_FUNCTION 2					    54 LOAD_GLOBAL 1 ( range )					  
							      58 POP_TOP						    56 LOAD_CONST 4 ( 3 )					  
							      								    58 LOAD_GLOBAL 2 ( int )					  
							      8 >> 60 SETUP_LOOP 100 ( to 162 )				    60 LOAD_GLOBAL 3 ( math )					  
							      62 LOAD_GLOBAL 1 ( range )				    62 LOAD_METHOD 4 ( sqrt )					  
							      64 LOAD_CONST 5 ( 3 )					    64 LOAD_FAST 0 ( n )					  
							      66 LOAD_GLOBAL 2 ( int )					    66 CALL_METHOD 1						  
							      68 LOAD_GLOBAL 3 ( math )					    68 CALL_FUNCTION 1						  
							      70 LOAD_METHOD 4 ( sqrt )					    70 LOAD_CONST 3 ( 1 )					  
							      72 LOAD_FAST 0 ( n )					    72 BINARY_ADD						  
							      74 CALL_METHOD 1						    74 CALL_FUNCTION 2						  
							      76 CALL_FUNCTION 1					    76 GET_ITER							  
							      78 LOAD_CONST 4 ( 1 )					    >> 78 FOR_ITER 52 ( to 114 )				  
							      80 BINARY_ADD						    80 STORE_FAST 2 ( i )					  
							      82 CALL_FUNCTION 2					    								  
							      84 GET_ITER						    9 82 LOAD_CONST 1 ( 0 )					  
							      >> 86 FOR_ITER 72 ( to 160 )				    84 STORE_FAST 1 ( count )					  
							      88 STORE_FAST 2 ( i )					    								  
							      								    10 86 SETUP_LOOP 40 ( to 112 )				  
							      9 90 LOAD_CONST 1 ( 0 )					    >> 88 LOAD_FAST 0 ( n )					  
							      92 STORE_FAST 1 ( count )					    90 LOAD_FAST 2 ( i )					  
							      								    92 BINARY_MODULO						  
							      10 94 SETUP_LOOP 36 ( to 132 )				    94 LOAD_CONST 1 ( 0 )					  
							      >> 96 LOAD_FAST 0 ( n )					    96 COMPARE_OP 2 ( == )					  
							      98 LOAD_FAST 2 ( i )					    98 POP_JUMP_IF_FALSE 110					  
							      100 BINARY_MODULO						    								  
							      102 LOAD_CONST 1 ( 0 )					    11 100 LOAD_FAST 1 ( count )				  
							      104 COMPARE_OP 2 ( == )					    102 LOAD_CONST 3 ( 1 )					  
							      106 POP_JUMP_IF_FALSE 130					    104 INPLACE_ADD						  
							      								    106 STORE_FAST 1 ( count )					  
							      11 108 LOAD_FAST 1 ( count )				    								  
							      110 LOAD_CONST 4 ( 1 )					    12 108 LOAD_GLOBAL 2 ( int )				  
							      112 INPLACE_ADD						    110 LOAD_FAST 0 ( n )					  
							      114 STORE_FAST 1 ( count )				    112 LOAD_FAST 2 ( i )					  
							      								    114 BINARY_TRUE_DIVIDE					  
							      12 116 LOAD_GLOBAL 2 ( int )				    116 CALL_FUNCTION 1						  
							      118 LOAD_FAST 0 ( n )					    118 STORE_FAST 0 ( n )					  
							      120 LOAD_FAST 2 ( i )					    120 JUMP_ABSOLUTE 88					  
							      122 BINARY_TRUE_DIVIDE					    >> 122 POP_BLOCK						  
							      124 CALL_FUNCTION 1					    								  
							      126 STORE_FAST 0 ( n )					    13 >> 124 LOAD_FAST 1 ( count )				  
							      128 JUMP_ABSOLUTE 96					    126 LOAD_CONST 1 ( 0 )					  
							      >> 130 POP_BLOCK						    128 COMPARE_OP 4 ( > )					  
							      								    130 POP_JUMP_IF_FALSE 144					  
							      13 >> 132 LOAD_FAST 1 ( count )				    								  
							      134 LOAD_CONST 1 ( 0 )					    14 132 LOAD_GLOBAL 0 ( print )				  
							      136 COMPARE_OP 4 ( > )					    134 LOAD_FAST 2 ( i )					  
							      138 POP_JUMP_IF_FALSE 150					    136 LOAD_FAST 1 ( count )					  
							      								    138 CALL_FUNCTION 2						  
							      14 140 LOAD_GLOBAL 0 ( print )				    140 POP_TOP							  
							      142 LOAD_FAST 2 ( i )					    142 JUMP_ABSOLUTE 88					  
							      144 LOAD_FAST 1 ( count )					    >> 144 POP_BLOCK						  
							      146 CALL_FUNCTION 2					    								  
							      148 POP_TOP						    15 >> 146 LOAD_FAST 2 ( i )					  
							      								    148 LOAD_CONST 2 ( 2 )					  
							      15 >> 150 LOAD_FAST 2 ( i )				    150 INPLACE_ADD						  
							      152 LOAD_CONST 2 ( 2 )					    152 STORE_FAST 2 ( i )					  
							      154 INPLACE_ADD						    								  
							      156 STORE_FAST 2 ( i )					    16 >> 154 LOAD_FAST 0 ( n )					  
							      158 JUMP_ABSOLUTE 86					    156 LOAD_CONST 2 ( 2 )					  
							      >> 160 POP_BLOCK						    158 COMPARE_OP 4 ( > )					  
							      								    160 POP_JUMP_IF_FALSE 178					  
							      16 >> 162 LOAD_FAST 0 ( n )				    								  
							      164 LOAD_CONST 2 ( 2 )					    17 162 LOAD_GLOBAL 0 ( print )				  
							      166 COMPARE_OP 4 ( > )					    164 LOAD_FAST 0 ( n )					  
							      168 POP_JUMP_IF_FALSE 180					    166 LOAD_CONST 3 ( 1 )					  
							      								    168 CALL_FUNCTION 2						  
							      17 170 LOAD_GLOBAL 0 ( print )				    170 POP_TOP							  
							      172 LOAD_FAST 0 ( n )					    172 JUMP_ABSOLUTE 6						  
							      174 LOAD_CONST 4 ( 1 )					    174 POP_BLOCK						  
							      176 CALL_FUNCTION 2					    176 LOAD_CONST 0 ( None )					  
							      178 POP_TOP						    >> 178 RETURN_VALUE NEW_LINE				  
							      >> 180 LOAD_CONST 0 ( None )				    								  
							      182 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY_1				      CEILING_IN_A_SORTED_ARRAY_1				    CEILING_IN_A_SORTED_ARRAY_1					  CEILING_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
def ceilSearch ( arr , low , high , x ) :		      Disassembly of <code object ceilSearch at 0x7f33e2653ed0, fil Disassembly of <code object ceilSearch at 0x7f2b01639f60, fil error : Traceback (most recent call last):   File
    if x <= arr [ low ] :				      2 0 LOAD_FAST 3 ( x )					    2 0 LOAD_FAST 2 ( x )					  "XLM/dis_script.py", line 60, in <module>	exec
	return low					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  (item)   File "main.py", line 44, in <module>	  Fi
    if x > arr [ high ] :				      4 LOAD_FAST 1 ( low )					    4 LOAD_FAST 1 ( low )					  le "<dis>", line 2, in ceilSearch TypeError: list
	return - 1					      6 BINARY_SUBSCR						    6 BINARY_SUBSCR						  indices must be integers or slices, not float
    mid = ( low + high ) / 2 ;				      8 COMPARE_OP 1 ( <= )					    8 COMPARE_OP 1 ( <= )					  
    if arr [ mid ] == x :				      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 16					  
	return mid					      								    								  
    elif arr [ mid ] < x :				      3 12 LOAD_FAST 1 ( low )					    3 12 LOAD_FAST 1 ( low )					  
	if mid + 1 <= high and x <= arr [ mid + 1 ] :	      14 RETURN_VALUE						    14 RETURN_VALUE						  
	    return mid + 1				      								    								  
	else :						      4 >> 16 LOAD_FAST 3 ( x )					    4 >> 16 LOAD_FAST 2 ( x )					  
	    return ceilSearch ( arr , mid + 1 , high , x )    18 LOAD_FAST 0 ( arr )					    18 LOAD_FAST 0 ( arr )					  
    else :						      20 LOAD_FAST 2 ( high )					    20 LOAD_FAST 3 ( high )					  
	if mid - 1 >= low and x > arr [ mid - 1 ] :	      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
	    return mid					      24 COMPARE_OP 4 ( > )					    24 COMPARE_OP 4 ( > )					  
	else :						      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 32					  
	    return ceilSearch ( arr , low , mid - 1 , x )     								    								  
							      5 28 LOAD_CONST 1 ( - 1 )					    5 28 LOAD_CONST 1 ( - 1 )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      6 >> 32 LOAD_FAST 1 ( low )				    6 >> 32 LOAD_FAST 1 ( low )					  
							      34 LOAD_FAST 2 ( high )					    34 LOAD_FAST 3 ( high )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 LOAD_CONST 2 ( 2 )					    38 LOAD_CONST 2 ( 2 )					  
							      40 BINARY_TRUE_DIVIDE					    40 BINARY_TRUE_DIVIDE					  
							      42 STORE_FAST 4 ( mid )					    42 STORE_FAST 4 ( mid )					  
							      								    								  
							      7 44 LOAD_FAST 0 ( arr )					    7 44 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 4 ( mid )					    46 LOAD_FAST 4 ( mid )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 3 ( x )					    50 LOAD_FAST 2 ( x )					  
							      52 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      54 POP_JUMP_IF_FALSE 60					    54 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      8 56 LOAD_FAST 4 ( mid )					    8 56 LOAD_FAST 4 ( mid )					  
							      58 RETURN_VALUE						    58 RETURN_VALUE						  
							      								    								  
							      9 >> 60 LOAD_FAST 0 ( arr )				    9 >> 60 LOAD_FAST 0 ( arr )					  
							      62 LOAD_FAST 4 ( mid )					    62 LOAD_FAST 4 ( mid )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 3 ( x )					    66 LOAD_FAST 2 ( x )					  
							      68 COMPARE_OP 0 ( < )					    68 COMPARE_OP 0 ( < )					  
							      70 POP_JUMP_IF_FALSE 128					    70 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      10 72 LOAD_FAST 4 ( mid )					    10 72 LOAD_FAST 4 ( mid )					  
							      74 LOAD_CONST 3 ( 1 )					    74 LOAD_CONST 3 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 LOAD_FAST 2 ( high )					    78 LOAD_FAST 3 ( high )					  
							      80 COMPARE_OP 1 ( <= )					    80 COMPARE_OP 1 ( <= )					  
							      82 POP_JUMP_IF_FALSE 108					    82 POP_JUMP_IF_FALSE 116					  
							      84 LOAD_FAST 3 ( x )					    84 LOAD_FAST 2 ( x )					  
							      86 LOAD_FAST 0 ( arr )					    86 LOAD_FAST 0 ( arr )					  
							      88 LOAD_FAST 4 ( mid )					    88 LOAD_FAST 4 ( mid )					  
							      90 LOAD_CONST 3 ( 1 )					    90 LOAD_CONST 3 ( 1 )					  
							      92 BINARY_ADD						    92 BINARY_ADD						  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 COMPARE_OP 1 ( <= )					    96 COMPARE_OP 1 ( <= )					  
							      98 POP_JUMP_IF_FALSE 108					    98 POP_JUMP_IF_FALSE 116					  
							      								    								  
							      11 100 LOAD_FAST 4 ( mid )				    11 100 LOAD_FAST 4 ( mid )					  
							      102 LOAD_CONST 3 ( 1 )					    102 LOAD_CONST 3 ( 1 )					  
							      104 BINARY_ADD						    104 BINARY_ADD						  
							      106 RETURN_VALUE						    106 RETURN_VALUE						  
							      								    								  
							      13 >> 108 LOAD_GLOBAL 0 ( ceilSearch )			    13 >> 108 LOAD_GLOBAL 0 ( ceilSearch )			  
							      110 LOAD_FAST 0 ( arr )					    110 LOAD_FAST 0 ( arr )					  
							      112 LOAD_FAST 4 ( mid )					    112 LOAD_FAST 4 ( mid )					  
							      114 LOAD_CONST 3 ( 1 )					    114 LOAD_CONST 3 ( 1 )					  
							      116 BINARY_ADD						    116 BINARY_ADD						  
							      118 LOAD_FAST 2 ( high )					    118 LOAD_FAST 3 ( high )					  
							      120 LOAD_FAST 3 ( x )					    120 LOAD_FAST 2 ( x )					  
							      122 CALL_FUNCTION 4					    122 CALL_FUNCTION 4						  
							      124 RETURN_VALUE						    124 RETURN_VALUE						  
							      126 JUMP_FORWARD 50 ( to 178 )				    126 JUMP_FORWARD 42 ( to 144 )				  
							      								    								  
							      15 >> 128 LOAD_FAST 4 ( mid )				    15 >> 128 LOAD_FAST 4 ( mid )				  
							      130 LOAD_CONST 3 ( 1 )					    130 LOAD_CONST 3 ( 1 )					  
							      132 BINARY_SUBTRACT					    132 BINARY_SUBTRACT						  
							      134 LOAD_FAST 1 ( low )					    134 LOAD_FAST 1 ( low )					  
							      136 COMPARE_OP 5 ( >= )					    136 COMPARE_OP 5 ( >= )					  
							      138 POP_JUMP_IF_FALSE 160					    138 POP_JUMP_IF_FALSE 148					  
							      140 LOAD_FAST 3 ( x )					    140 LOAD_FAST 2 ( x )					  
							      142 LOAD_FAST 0 ( arr )					    142 LOAD_FAST 0 ( arr )					  
							      144 LOAD_FAST 4 ( mid )					    144 LOAD_FAST 4 ( mid )					  
							      146 LOAD_CONST 3 ( 1 )					    146 LOAD_CONST 3 ( 1 )					  
							      148 BINARY_SUBTRACT					    148 BINARY_SUBTRACT						  
							      150 BINARY_SUBSCR						    150 BINARY_SUBSCR						  
							      152 COMPARE_OP 4 ( > )					    152 COMPARE_OP 0 ( < )					  
							      154 POP_JUMP_IF_FALSE 160					    154 POP_JUMP_IF_FALSE 156					  
							      								    								  
							      16 156 LOAD_FAST 4 ( mid )				    16 156 LOAD_FAST 4 ( mid )					  
							      158 RETURN_VALUE						    158 RETURN_VALUE						  
							      								    								  
							      18 >> 160 LOAD_GLOBAL 0 ( ceilSearch )			    18 >> 160 LOAD_GLOBAL 0 ( ceilSearch )			  
							      162 LOAD_FAST 0 ( arr )					    162 LOAD_FAST 0 ( arr )					  
							      164 LOAD_FAST 1 ( low )					    164 LOAD_FAST 1 ( low )					  
							      166 LOAD_FAST 4 ( mid )					    166 LOAD_FAST 4 ( mid )					  
							      168 LOAD_CONST 3 ( 1 )					    168 LOAD_CONST 3 ( 1 )					  
							      170 BINARY_SUBTRACT					    170 BINARY_SUBTRACT						  
							      172 LOAD_FAST 3 ( x )					    172 LOAD_FAST 2 ( x )					  
							      174 CALL_FUNCTION 4					    174 CALL_FUNCTION 4						  
							      176 RETURN_VALUE						    176 RETURN_VALUE						  
							      >> 178 LOAD_CONST 0 ( None )				    178 LOAD_CONST 0 ( None )					  
							      180 RETURN_VALUE NEW_LINE					    180 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GRAPHS_CY<unk> ODD_LENGTH				      CHECK_GRAPHS_CY<unk> ODD_LENGTH				    CHECK_GRAPHS_CY<unk> ODD_LENGTH				  CHECK_GRAPHS_CY<unk> ODD_LENGTH
--							      --							    --								  --
def containsOdd ( G , src ) :				      Disassembly of <code object containsOdd at 0x7f33e2649a50, fi Disassembly of <code object containsOdd at 0x7f2b01639f60, fi script_not_found : None
    global V						      3 0 LOAD_CONST 1 ( - 1 )					    3 0 LOAD_CONST 1 ( - 1 )					  
    colorArr = [ - 1 ] * V				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    colorArr [ src ] = 1				      4 LOAD_GLOBAL 0 ( V )					    4 LOAD_FAST 1 ( src )					  
    q = queue.Queue ( )					      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
    q.put ( src )					      8 STORE_FAST 2 ( colorArr )				    8 STORE_FAST 2 ( colorArr )					  
    while ( not q.empty ( ) ) :				      								    								  
	u = q.get ( )					      4 10 LOAD_CONST 2 ( 1 )					    4 10 LOAD_CONST 2 ( 1 )					  
	if ( G [ u ] [ u ] == 1 ) :			      12 LOAD_FAST 2 ( colorArr )				    12 LOAD_FAST 2 ( colorArr )					  
	    return True					      14 LOAD_FAST 1 ( src )					    14 LOAD_FAST 1 ( src )					  
	for v in range ( V ) :				      16 STORE_SUBSCR						    16 STORE_SUBSCR						  
	    if ( G [ u ] [ v ] and colorArr [ v ] == - 1 ) :  								    								  
		colorArr [ v ] = 1 - colorArr [ u ]	      5 18 LOAD_GLOBAL 1 ( queue )				    5 18 LOAD_GLOBAL 0 ( queue )				  
		q.put ( v )				      20 LOAD_METHOD 2 ( Queue )				    20 LOAD_METHOD 1 ( Queue )					  
	    elif ( G [ u ] [ v ] and colorArr [ v ] == colorA 22 CALL_METHOD 0						    22 CALL_METHOD 0						  
		return True				      24 STORE_FAST 3 ( q )					    24 STORE_FAST 3 ( q )					  
    return False					      								    								  
							      6 26 LOAD_FAST 3 ( q )					    6 26 LOAD_FAST 3 ( q )					  
							      28 LOAD_METHOD 3 ( put )					    28 LOAD_METHOD 2 ( put )					  
							      30 LOAD_FAST 1 ( src )					    30 LOAD_FAST 1 ( src )					  
							      32 CALL_METHOD 1						    32 CALL_METHOD 1						  
							      34 POP_TOP						    34 POP_TOP							  
							      								    								  
							      7 36 SETUP_LOOP 142 ( to 180 )				    7 36 SETUP_LOOP 126 ( to 146 )				  
							      >> 38 LOAD_FAST 3 ( q )					    >> 38 LOAD_FAST 3 ( q )					  
							      40 LOAD_METHOD 4 ( empty )				    40 LOAD_METHOD 3 ( empty )					  
							      42 CALL_METHOD 0						    42 CALL_METHOD 0						  
							      44 POP_JUMP_IF_TRUE 178					    44 POP_JUMP_IF_TRUE 144					  
							      								    								  
							      8 46 LOAD_FAST 3 ( q )					    8 46 LOAD_FAST 3 ( q )					  
							      48 LOAD_METHOD 5 ( get )					    48 LOAD_METHOD 4 ( get )					  
							      50 CALL_METHOD 0						    50 CALL_METHOD 0						  
							      52 STORE_FAST 4 ( u )					    52 STORE_FAST 4 ( u )					  
							      								    								  
							      9 54 LOAD_FAST 0 ( G )					    9 54 LOAD_FAST 0 ( G )					  
							      56 LOAD_FAST 4 ( u )					    56 LOAD_FAST 4 ( u )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_FAST 4 ( u )					    60 LOAD_FAST 4 ( u )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      66 COMPARE_OP 2 ( == )					    66 COMPARE_OP 2 ( == )					  
							      68 POP_JUMP_IF_FALSE 74					    68 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      10 70 LOAD_CONST 3 ( True )				    10 70 LOAD_CONST 3 ( True )					  
							      72 RETURN_VALUE						    72 RETURN_VALUE						  
							      								    								  
							      11 >> 74 SETUP_LOOP 100 ( to 176 )			    11 >> 74 SETUP_LOOP 82 ( to 144 )				  
							      76 LOAD_GLOBAL 6 ( range )				    76 LOAD_GLOBAL 5 ( range )					  
							      78 LOAD_GLOBAL 0 ( V )					    78 LOAD_FAST 1 ( src )					  
							      80 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 88 ( to 174 )				    >> 84 FOR_ITER 74 ( to 142 )				  
							      86 STORE_FAST 5 ( v )					    86 STORE_FAST 5 ( v )					  
							      								    								  
							      12 88 LOAD_FAST 0 ( G )					    12 88 LOAD_FAST 0 ( G )					  
							      90 LOAD_FAST 4 ( u )					    90 LOAD_FAST 4 ( u )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 LOAD_FAST 5 ( v )					    94 LOAD_FAST 5 ( v )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 POP_JUMP_IF_FALSE 140					    98 POP_JUMP_IF_FALSE 84					  
							      100 LOAD_FAST 2 ( colorArr )				    100 LOAD_FAST 2 ( colorArr )				  
							      102 LOAD_FAST 5 ( v )					    102 LOAD_FAST 5 ( v )					  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 LOAD_CONST 1 ( - 1 )					    106 LOAD_CONST 1 ( - 1 )					  
							      108 COMPARE_OP 2 ( == )					    108 COMPARE_OP 2 ( == )					  
							      110 POP_JUMP_IF_FALSE 140					    110 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      13 112 LOAD_CONST 2 ( 1 )					    13 112 LOAD_CONST 2 ( 1 )					  
							      114 LOAD_FAST 2 ( colorArr )				    114 LOAD_FAST 2 ( colorArr )				  
							      116 LOAD_FAST 4 ( u )					    116 LOAD_FAST 4 ( u )					  
							      118 BINARY_SUBSCR						    118 BINARY_SUBSCR						  
							      120 BINARY_SUBTRACT					    120 BINARY_SUBTRACT						  
							      122 LOAD_FAST 2 ( colorArr )				    122 STORE_FAST 2 ( colorArr )				  
							      124 LOAD_FAST 5 ( v )					    								  
							      126 STORE_SUBSCR						    14 124 LOAD_FAST 3 ( q )					  
							      								    126 LOAD_METHOD 2 ( put )					  
							      14 128 LOAD_FAST 3 ( q )					    128 LOAD_FAST 5 ( v )					  
							      130 LOAD_METHOD 3 ( put )					    130 CALL_METHOD 1						  
							      132 LOAD_FAST 5 ( v )					    132 POP_TOP							  
							      134 CALL_METHOD 1						    134 JUMP_ABSOLUTE 84					  
							      136 POP_TOP						    >> 136 POP_BLOCK						  
							      138 JUMP_ABSOLUTE 84					    								  
							      								    15 >> 138 LOAD_FAST 0 ( G )					  
							      15 >> 140 LOAD_FAST 0 ( G )				    140 LOAD_FAST 4 ( u )					  
							      142 LOAD_FAST 4 ( u )					    142 BINARY_SUBSCR						  
							      144 BINARY_SUBSCR						    144 LOAD_FAST 5 ( v )					  
							      146 LOAD_FAST 5 ( v )					    146 BINARY_SUBSCR						  
							      148 BINARY_SUBSCR						    148 POP_JUMP_IF_FALSE 160					  
							      150 POP_JUMP_IF_FALSE 84					    150 LOAD_FAST 2 ( colorArr )				  
							      152 LOAD_FAST 2 ( colorArr )				    152 LOAD_FAST 5 ( v )					  
							      154 LOAD_FAST 5 ( v )					    154 BINARY_SUBSCR						  
							      156 BINARY_SUBSCR						    156 LOAD_FAST 2 ( colorArr )				  
							      158 LOAD_FAST 2 ( colorArr )				    158 LOAD_FAST 4 ( u )					  
							      160 LOAD_FAST 4 ( u )					    160 BINARY_SUBSCR						  
							      162 BINARY_SUBSCR						    162 COMPARE_OP 2 ( == )					  
							      164 COMPARE_OP 2 ( == )					    164 POP_JUMP_IF_FALSE 84					  
							      166 POP_JUMP_IF_FALSE 84					    								  
							      								    16 166 LOAD_CONST 3 ( True )				  
							      16 168 LOAD_CONST 3 ( True )				    168 RETURN_VALUE						  
							      170 RETURN_VALUE						    >> 170 JUMP_ABSOLUTE 38					  
							      172 JUMP_ABSOLUTE 84					    >> 172 POP_BLOCK						  
							      >> 174 POP_BLOCK						    								  
							      >> 176 JUMP_ABSOLUTE 38					    17 >> 174 LOAD_CONST 4 ( False )				  
							      >> 178 POP_BLOCK						    176 RETURN_VALUE NEW_LINE					  
							      								    								  
							      17 >> 180 LOAD_CONST 4 ( False )				    								  
							      182 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			      PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			    PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2				  PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7f33e26494b0, file "<dis Disassembly of <code object fib at 0x7f2b0163dc90, file "<dis script_not_found : None
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( n == 1 or n == 2 ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	f [ n ] = 1					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	return ( f [ n ] )				      								    								  
    if ( f [ n ] ) :					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	return f [ n ]					      10 RETURN_VALUE						    10 RETURN_VALUE						  
    if ( n & 1 ) :					      								    								  
	k = ( n + 1 ) // 2				      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
    else :						      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
	k = n // 2					      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
    if ( ( n & 1 ) ) :					      18 POP_JUMP_IF_TRUE 28					    18 POP_JUMP_IF_TRUE 32					  
	f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * f 20 LOAD_FAST 0 ( n )					    20 LOAD_FAST 0 ( n )					  
    else :						      22 LOAD_CONST 3 ( 2 )					    22 LOAD_CONST 3 ( 2 )					  
	f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k 24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
    return f [ n ]					      26 POP_JUMP_IF_FALSE 44					    26 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      5 >> 28 LOAD_CONST 2 ( 1 )				    5 28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_GLOBAL 0 ( f )					    30 LOAD_FAST 1 ( f )					  
							      32 LOAD_FAST 0 ( n )					    32 LOAD_FAST 0 ( n )					  
							      34 STORE_SUBSCR						    34 STORE_SUBSCR						  
							      								    								  
							      6 36 LOAD_GLOBAL 0 ( f )					    6 36 LOAD_FAST 1 ( f )					  
							      38 LOAD_FAST 0 ( n )					    38 LOAD_FAST 0 ( n )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 RETURN_VALUE						    42 RETURN_VALUE						  
							      								    								  
							      7 >> 44 LOAD_GLOBAL 0 ( f )				    7 >> 44 LOAD_FAST 1 ( f )					  
							      46 LOAD_FAST 0 ( n )					    46 LOAD_FAST 0 ( n )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 POP_JUMP_IF_FALSE 60					    50 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      8 52 LOAD_GLOBAL 0 ( f )					    8 52 LOAD_FAST 1 ( f )					  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 0 ( n )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 RETURN_VALUE						    58 RETURN_VALUE						  
							      								    								  
							      9 >> 60 LOAD_FAST 0 ( n )					    9 >> 60 LOAD_FAST 0 ( n )					  
							      62 LOAD_CONST 2 ( 1 )					    62 LOAD_CONST 2 ( 1 )					  
							      64 BINARY_AND						    64 BINARY_AND						  
							      66 POP_JUMP_IF_FALSE 82					    66 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      10 68 LOAD_FAST 0 ( n )					    10 68 LOAD_FAST 0 ( n )					  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 LOAD_CONST 3 ( 2 )					    74 LOAD_CONST 3 ( 2 )					  
							      76 BINARY_FLOOR_DIVIDE					    76 BINARY_FLOOR_DIVIDE					  
							      78 STORE_FAST 1 ( k )					    78 STORE_FAST 2 ( k )					  
							      80 JUMP_FORWARD 8 ( to 90 )				    80 JUMP_FORWARD 4 ( to 82 )					  
							      								    								  
							      12 >> 82 LOAD_FAST 0 ( n )				    12 >> 82 LOAD_FAST 0 ( n )					  
							      84 LOAD_CONST 3 ( 2 )					    84 LOAD_CONST 3 ( 2 )					  
							      86 BINARY_FLOOR_DIVIDE					    86 BINARY_FLOOR_DIVIDE					  
							      88 STORE_FAST 1 ( k )					    88 STORE_FAST 2 ( k )					  
							      								    								  
							      13 >> 90 LOAD_FAST 0 ( n )				    13 >> 90 LOAD_FAST 0 ( n )					  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_CONST 2 ( 1 )					  
							      94 BINARY_AND						    94 BINARY_AND						  
							      96 POP_JUMP_IF_FALSE 144					    96 STORE_FAST 2 ( k )					  
							      								    								  
							      14 98 LOAD_GLOBAL 1 ( fib )				    14 98 LOAD_FAST 0 ( n )					  
							      100 LOAD_FAST 1 ( k )					    100 LOAD_CONST 2 ( 1 )					  
							      102 CALL_FUNCTION 1					    102 BINARY_AND						  
							      104 LOAD_GLOBAL 1 ( fib )					    104 POP_JUMP_IF_FALSE 162					  
							      106 LOAD_FAST 1 ( k )					    								  
							      108 CALL_FUNCTION 1					    15 106 LOAD_GLOBAL 0 ( fib )				  
							      110 BINARY_MULTIPLY					    108 LOAD_FAST 2 ( k )					  
							      112 LOAD_GLOBAL 1 ( fib )					    110 CALL_FUNCTION 1						  
							      114 LOAD_FAST 1 ( k )					    112 LOAD_GLOBAL 0 ( fib )					  
							      116 LOAD_CONST 2 ( 1 )					    114 LOAD_FAST 2 ( k )					  
							      118 BINARY_SUBTRACT					    116 LOAD_CONST 2 ( 1 )					  
							      120 CALL_FUNCTION 1					    118 BINARY_SUBTRACT						  
							      122 LOAD_GLOBAL 1 ( fib )					    120 CALL_FUNCTION 1						  
							      124 LOAD_FAST 1 ( k )					    122 LOAD_GLOBAL 0 ( fib )					  
							      126 LOAD_CONST 2 ( 1 )					    124 LOAD_FAST 2 ( k )					  
							      128 BINARY_SUBTRACT					    126 LOAD_CONST 2 ( 1 )					  
							      130 CALL_FUNCTION 1					    128 BINARY_SUBTRACT						  
							      132 BINARY_MULTIPLY					    130 CALL_FUNCTION 1						  
							      134 BINARY_ADD						    132 BINARY_MULTIPLY						  
							      136 LOAD_GLOBAL 0 ( f )					    134 BINARY_ADD						  
							      138 LOAD_FAST 0 ( n )					    136 LOAD_FAST 1 ( f )					  
							      140 STORE_SUBSCR						    138 LOAD_FAST 0 ( n )					  
							      142 JUMP_FORWARD 36 ( to 180 )				    140 STORE_SUBSCR						  
							      								    142 JUMP_FORWARD 48 ( to 164 )				  
							      16 >> 144 LOAD_CONST 3 ( 2 )				    								  
							      146 LOAD_GLOBAL 1 ( fib )					    17 >> 144 LOAD_CONST 3 ( 2 )				  
							      148 LOAD_FAST 1 ( k )					    146 LOAD_GLOBAL 0 ( fib )					  
							      150 LOAD_CONST 2 ( 1 )					    148 LOAD_FAST 2 ( k )					  
							      152 BINARY_SUBTRACT					    150 LOAD_CONST 2 ( 1 )					  
							      154 CALL_FUNCTION 1					    152 BINARY_SUBTRACT						  
							      156 BINARY_MULTIPLY					    154 CALL_FUNCTION 1						  
							      158 LOAD_GLOBAL 1 ( fib )					    156 BINARY_MULTIPLY						  
							      160 LOAD_FAST 1 ( k )					    158 LOAD_GLOBAL 0 ( fib )					  
							      162 CALL_FUNCTION 1					    160 LOAD_FAST 2 ( k )					  
							      164 BINARY_ADD						    162 LOAD_CONST 2 ( 1 )					  
							      166 LOAD_GLOBAL 1 ( fib )					    164 BINARY_SUBTRACT						  
							      168 LOAD_FAST 1 ( k )					    166 CALL_FUNCTION 1						  
							      170 CALL_FUNCTION 1					    168 BINARY_MULTIPLY						  
							      172 BINARY_MULTIPLY					    170 BINARY_ADD						  
							      174 LOAD_GLOBAL 0 ( f )					    172 BINARY_MULTIPLY						  
							      176 LOAD_FAST 0 ( n )					    174 LOAD_FAST 1 ( f )					  
							      178 STORE_SUBSCR						    176 LOAD_FAST 0 ( n )					  
							      								    178 STORE_SUBSCR						  
							      17 >> 180 LOAD_GLOBAL 0 ( f )				    								  
							      182 LOAD_FAST 0 ( n )					    18 >> 180 LOAD_FAST 1 ( f )					  
							      184 BINARY_SUBSCR						    182 LOAD_FAST 0 ( n )					  
							      186 RETURN_VALUE NEW_LINE					    184 BINARY_SUBSCR						  
							      								    186 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_MAXIMUM_GCD_ARRAY_1				      FIND_PAIR_MAXIMUM_GCD_ARRAY_1				    FIND_PAIR_MAXIMUM_GCD_ARRAY_1				  FIND_PAIR_MAXIMUM_GCD_ARRAY_1
--							      --							    --								  --
def findMaxGCD ( arr , n ) :				      Disassembly of <code object findMaxGCD at 0x7f33e26494b0, fil Disassembly of <code object findMaxGCD at 0x7f2b0163dc90, fil script_not_found : None
    high = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( high )					    2 STORE_FAST 2 ( high )					  
	high = max ( high , arr [ i ] )			      								    								  
    count = [ 0 ] * ( high + 1 )			      3 4 SETUP_LOOP 32 ( to 38 )				    3 4 SETUP_LOOP 32 ( to 38 )					  
    for i in range ( 0 , n ) :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	count [ arr [ i ] ] += 1			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
    counter = 0						      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
    for i in range ( high , 0 , - 1 ) :			      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
	j = i						      14 GET_ITER						    14 GET_ITER							  
	while ( j <= high ) :				      >> 16 FOR_ITER 18 ( to 36 )				    >> 16 FOR_ITER 20 ( to 36 )					  
	    if ( count [ j ] > 0 ) :			      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
		counter += count [ j ]			      								    								  
	    j += i					      4 20 LOAD_GLOBAL 1 ( max )				    4 20 LOAD_GLOBAL 1 ( max )					  
	    if ( counter == 2 ) :			      22 LOAD_FAST 2 ( high )					    22 LOAD_FAST 2 ( high )					  
		return i				      24 LOAD_FAST 0 ( arr )					    24 LOAD_FAST 0 ( arr )					  
	counter = 0					      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      32 STORE_FAST 2 ( high )					    32 STORE_FAST 2 ( high )					  
							      34 JUMP_ABSOLUTE 16					    34 JUMP_ABSOLUTE 16						  
							      >> 36 POP_BLOCK						    >> 36 POP_BLOCK						  
							      								    								  
							      5 >> 38 LOAD_CONST 1 ( 0 )				    5 >> 38 LOAD_CONST 1 ( 0 )					  
							      40 BUILD_LIST 1						    40 BUILD_LIST 1						  
							      42 LOAD_FAST 2 ( high )					    42 LOAD_FAST 2 ( high )					  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 BINARY_MULTIPLY					    48 BINARY_MULTIPLY						  
							      50 STORE_FAST 4 ( count )					    50 STORE_FAST 4 ( count )					  
							      								    								  
							      6 52 SETUP_LOOP 38 ( to 92 )				    6 52 SETUP_LOOP 44 ( to 96 )				  
							      54 LOAD_GLOBAL 0 ( range )				    54 LOAD_GLOBAL 0 ( range )					  
							      56 LOAD_CONST 1 ( 0 )					    56 LOAD_CONST 1 ( 0 )					  
							      58 LOAD_FAST 1 ( n )					    58 LOAD_FAST 1 ( n )					  
							      60 CALL_FUNCTION 2					    60 CALL_FUNCTION 2						  
							      62 GET_ITER						    62 GET_ITER							  
							      >> 64 FOR_ITER 24 ( to 90 )				    >> 64 FOR_ITER 32 ( to 94 )					  
							      66 STORE_FAST 3 ( i )					    66 STORE_FAST 3 ( i )					  
							      								    								  
							      7 68 LOAD_FAST 4 ( count )				    7 68 LOAD_FAST 4 ( count )					  
							      70 LOAD_FAST 0 ( arr )					    70 LOAD_FAST 0 ( arr )					  
							      72 LOAD_FAST 3 ( i )					    72 LOAD_FAST 3 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 DUP_TOP_TWO						    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_SUBSCR						    78 INPLACE_ADD						  
							      80 LOAD_CONST 2 ( 1 )					    80 STORE_FAST 4 ( count )					  
							      82 INPLACE_ADD						    82 JUMP_ABSOLUTE 64						  
							      84 ROT_THREE						    >> 84 POP_BLOCK						  
							      86 STORE_SUBSCR						    								  
							      88 JUMP_ABSOLUTE 64					    8 >> 86 LOAD_CONST 1 ( 0 )					  
							      >> 90 POP_BLOCK						    88 STORE_FAST 5 ( counter )					  
							      								    								  
							      8 >> 92 LOAD_CONST 1 ( 0 )				    9 90 SETUP_LOOP 76 ( to 174 )				  
							      94 STORE_FAST 5 ( counter )				    92 LOAD_GLOBAL 0 ( range )					  
							      								    94 LOAD_FAST 2 ( high )					  
							      9 96 SETUP_LOOP 86 ( to 184 )				    96 LOAD_CONST 1 ( 0 )					  
							      98 LOAD_GLOBAL 0 ( range )				    98 LOAD_CONST 3 ( - 1 )					  
							      100 LOAD_FAST 2 ( high )					    100 CALL_FUNCTION 3						  
							      102 LOAD_CONST 1 ( 0 )					    102 GET_ITER						  
							      104 LOAD_CONST 3 ( - 1 )					    >> 104 FOR_ITER 58 ( to 172 )				  
							      106 CALL_FUNCTION 3					    106 STORE_FAST 3 ( i )					  
							      108 GET_ITER						    								  
							      >> 110 FOR_ITER 70 ( to 182 )				    10 108 LOAD_FAST 3 ( i )					  
							      112 STORE_FAST 3 ( i )					    110 STORE_FAST 6 ( j )					  
							      								    								  
							      10 114 LOAD_FAST 3 ( i )					    11 112 SETUP_LOOP 44 ( to 170 )				  
							      116 STORE_FAST 6 ( j )					    >> 114 LOAD_FAST 6 ( j )					  
							      								    116 LOAD_FAST 2 ( high )					  
							      11 118 SETUP_LOOP 56 ( to 176 )				    118 COMPARE_OP 1 ( <= )					  
							      >> 120 LOAD_FAST 6 ( j )					    120 POP_JUMP_IF_FALSE 168					  
							      122 LOAD_FAST 2 ( high )					    								  
							      124 COMPARE_OP 1 ( <= )					    12 122 LOAD_FAST 4 ( count )				  
							      126 POP_JUMP_IF_FALSE 174					    124 LOAD_FAST 6 ( j )					  
							      								    126 BINARY_SUBSCR						  
							      12 128 LOAD_FAST 4 ( count )				    128 LOAD_CONST 1 ( 0 )					  
							      130 LOAD_FAST 6 ( j )					    130 COMPARE_OP 4 ( > )					  
							      132 BINARY_SUBSCR						    132 POP_JUMP_IF_FALSE 144					  
							      134 LOAD_CONST 1 ( 0 )					    								  
							      136 COMPARE_OP 4 ( > )					    13 134 LOAD_FAST 5 ( counter )				  
							      138 POP_JUMP_IF_FALSE 152					    136 LOAD_FAST 4 ( count )					  
							      								    138 LOAD_FAST 6 ( j )					  
							      13 140 LOAD_FAST 5 ( counter )				    140 BINARY_SUBSCR						  
							      142 LOAD_FAST 4 ( count )					    142 INPLACE_ADD						  
							      144 LOAD_FAST 6 ( j )					    144 STORE_FAST 5 ( counter )				  
							      146 BINARY_SUBSCR						    								  
							      148 INPLACE_ADD						    14 >> 146 LOAD_FAST 6 ( j )					  
							      150 STORE_FAST 5 ( counter )				    148 LOAD_FAST 3 ( i )					  
							      								    150 INPLACE_ADD						  
							      14 >> 152 LOAD_FAST 6 ( j )				    152 STORE_FAST 6 ( j )					  
							      154 LOAD_FAST 3 ( i )					    								  
							      156 INPLACE_ADD						    15 154 LOAD_FAST 5 ( counter )				  
							      158 STORE_FAST 6 ( j )					    156 LOAD_CONST 4 ( 2 )					  
							      								    158 COMPARE_OP 2 ( == )					  
							      15 160 LOAD_FAST 5 ( counter )				    160 POP_JUMP_IF_FALSE 166					  
							      162 LOAD_CONST 4 ( 2 )					    								  
							      164 COMPARE_OP 2 ( == )					    16 162 LOAD_FAST 3 ( i )					  
							      166 POP_JUMP_IF_FALSE 120					    164 RETURN_VALUE						  
							      								    								  
							      16 168 LOAD_FAST 3 ( i )					    17 >> 166 LOAD_CONST 1 ( 0 )				  
							      170 RETURN_VALUE						    168 STORE_FAST 5 ( counter )				  
							      172 JUMP_ABSOLUTE 120					    170 JUMP_ABSOLUTE 114					  
							      >> 174 POP_BLOCK						    >> 172 POP_BLOCK						  
							      								    >> 174 JUMP_ABSOLUTE 104					  
							      17 >> 176 LOAD_CONST 1 ( 0 )				    >> 176 POP_BLOCK						  
							      178 STORE_FAST 5 ( counter )				    								  
							      180 JUMP_ABSOLUTE 110					    18 >> 178 LOAD_CONST 1 ( 0 )				  
							      >> 182 POP_BLOCK						    180 STORE_FAST 5 ( counter )				  
							      >> 184 LOAD_CONST 0 ( None )				    182 LOAD_CONST 0 ( None )					  
							      186 RETURN_VALUE NEW_LINE					    184 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED		      CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED		    CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED			  CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED
--							      --							    --								  --
def checkReverse ( arr , n ) :				      Disassembly of <code object checkReverse at 0x7f33e2653f60, f Disassembly of <code object checkReverse at 0x7f2b0163dc90, f error : /bin/bash: line 1:  5003 Segmentation faul
    temp = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  ataset/bin/python XLM/dis_script.py --script_path
	temp [ i ] = arr [ i ]				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    temp.sort ( )					      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/CHECK_
    for front in range ( n ) :				      8 STORE_FAST 2 ( temp )					    8 STORE_FAST 2 ( temp )					  REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED.dis
	if temp [ front ] != arr [ front ] :		      								    								  
	    break					      3 10 SETUP_LOOP 28 ( to 40 )				    3 10 SETUP_LOOP 32 ( to 46 )				  
    for back in range ( n - 1 , - 1 , - 1 ) :		      12 LOAD_GLOBAL 0 ( range )				    12 LOAD_GLOBAL 0 ( range )					  
	if temp [ back ] != arr [ back ] :		      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
	    break					      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
    if front >= back :					      18 GET_ITER						    18 GET_ITER							  
	return True					      >> 20 FOR_ITER 16 ( to 38 )				    >> 20 FOR_ITER 18 ( to 44 )					  
    while front != back :				      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
	front += 1					      								    								  
	if arr [ front - 1 ] < arr [ front ] :		      4 24 LOAD_FAST 0 ( arr )					    4 24 LOAD_FAST 0 ( arr )					  
	    return False				      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
    return True						      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 2 ( temp )					    30 LOAD_FAST 2 ( temp )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 STORE_SUBSCR						    34 STORE_SUBSCR						  
							      36 JUMP_ABSOLUTE 20					    36 JUMP_ABSOLUTE 20						  
							      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
							      								    								  
							      5 >> 40 LOAD_FAST 2 ( temp )				    5 >> 40 LOAD_FAST 2 ( temp )				  
							      42 LOAD_METHOD 1 ( sort )					    42 LOAD_METHOD 1 ( sort )					  
							      44 CALL_METHOD 0						    44 CALL_METHOD 0						  
							      46 POP_TOP						    46 POP_TOP							  
							      								    								  
							      6 48 SETUP_LOOP 34 ( to 84 )				    6 48 SETUP_LOOP 34 ( to 84 )				  
							      50 LOAD_GLOBAL 0 ( range )				    50 LOAD_GLOBAL 0 ( range )					  
							      52 LOAD_FAST 1 ( n )					    52 LOAD_FAST 1 ( n )					  
							      54 CALL_FUNCTION 1					    54 CALL_FUNCTION 1						  
							      56 GET_ITER						    56 GET_ITER							  
							      >> 58 FOR_ITER 22 ( to 82 )				    >> 58 FOR_ITER 22 ( to 82 )					  
							      60 STORE_FAST 4 ( front )					    60 STORE_FAST 4 ( front )					  
							      								    								  
							      7 62 LOAD_FAST 2 ( temp )					    7 62 LOAD_FAST 2 ( temp )					  
							      64 LOAD_FAST 4 ( front )					    64 LOAD_FAST 4 ( front )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 0 ( arr )					    68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 4 ( front )					    70 LOAD_FAST 4 ( front )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 COMPARE_OP 3 ( != )					    74 COMPARE_OP 3 ( != )					  
							      76 POP_JUMP_IF_FALSE 58					    76 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      8 78 BREAK_LOOP						    8 78 BREAK_LOOP						  
							      80 JUMP_ABSOLUTE 58					    80 JUMP_ABSOLUTE 58						  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      9 >> 84 SETUP_LOOP 42 ( to 128 )				    9 >> 84 SETUP_LOOP 48 ( to 126 )				  
							      86 LOAD_GLOBAL 0 ( range )				    86 LOAD_GLOBAL 0 ( range )					  
							      88 LOAD_FAST 1 ( n )					    88 LOAD_FAST 1 ( n )					  
							      90 LOAD_CONST 2 ( 1 )					    90 LOAD_CONST 2 ( 1 )					  
							      92 BINARY_SUBTRACT					    92 BINARY_SUBTRACT						  
							      94 LOAD_CONST 3 ( - 1 )					    94 LOAD_CONST 3 ( - 1 )					  
							      96 LOAD_CONST 3 ( - 1 )					    96 LOAD_CONST 3 ( - 1 )					  
							      98 CALL_FUNCTION 3					    98 CALL_FUNCTION 3						  
							      100 GET_ITER						    100 GET_ITER						  
							      >> 102 FOR_ITER 22 ( to 126 )				    >> 102 FOR_ITER 28 ( to 124 )				  
							      104 STORE_FAST 5 ( back )					    104 STORE_FAST 5 ( back )					  
							      								    								  
							      10 106 LOAD_FAST 2 ( temp )				    10 106 LOAD_FAST 2 ( temp )					  
							      108 LOAD_FAST 5 ( back )					    108 LOAD_FAST 5 ( back )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 LOAD_FAST 0 ( arr )					    112 LOAD_FAST 0 ( arr )					  
							      114 LOAD_FAST 5 ( back )					    114 LOAD_FAST 5 ( back )					  
							      116 BINARY_SUBSCR						    116 BINARY_SUBSCR						  
							      118 COMPARE_OP 3 ( != )					    118 COMPARE_OP 3 ( != )					  
							      120 POP_JUMP_IF_FALSE 102					    120 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      11 122 BREAK_LOOP						    11 122 BREAK_LOOP						  
							      124 JUMP_ABSOLUTE 102					    >> 124 JUMP_ABSOLUTE 102					  
							      >> 126 POP_BLOCK						    >> 126 POP_BLOCK						  
							      								    								  
							      12 >> 128 LOAD_FAST 4 ( front )				    12 >> 128 LOAD_FAST 4 ( front )				  
							      130 LOAD_FAST 5 ( back )					    130 LOAD_FAST 5 ( back )					  
							      132 COMPARE_OP 5 ( >= )					    132 COMPARE_OP 5 ( >= )					  
							      134 POP_JUMP_IF_FALSE 140					    134 POP_JUMP_IF_FALSE 144					  
							      								    								  
							      13 136 LOAD_CONST 4 ( True )				    13 136 LOAD_CONST 4 ( True )				  
							      138 RETURN_VALUE						    138 RETURN_VALUE						  
							      								    								  
							      14 >> 140 SETUP_LOOP 44 ( to 186 )			    14 >> 140 SETUP_LOOP 54 ( to 192 )				  
							      >> 142 LOAD_FAST 4 ( front )				    >> 142 LOAD_FAST 4 ( front )				  
							      144 LOAD_FAST 5 ( back )					    144 LOAD_FAST 5 ( back )					  
							      146 COMPARE_OP 3 ( != )					    146 COMPARE_OP 3 ( != )					  
							      148 POP_JUMP_IF_FALSE 184					    148 POP_JUMP_IF_FALSE 190					  
							      								    								  
							      15 150 LOAD_FAST 4 ( front )				    15 150 LOAD_FAST 4 ( front )				  
							      152 LOAD_CONST 2 ( 1 )					    152 LOAD_CONST 2 ( 1 )					  
							      154 INPLACE_ADD						    154 INPLACE_ADD						  
							      156 STORE_FAST 4 ( front )				    156 STORE_FAST 4 ( front )					  
							      								    								  
							      16 158 LOAD_FAST 0 ( arr )				    16 158 LOAD_FAST 0 ( arr )					  
							      160 LOAD_FAST 4 ( front )					    160 LOAD_FAST 4 ( front )					  
							      162 LOAD_CONST 2 ( 1 )					    162 LOAD_CONST 2 ( 1 )					  
							      164 BINARY_SUBTRACT					    164 BINARY_SUBTRACT						  
							      166 BINARY_SUBSCR						    166 BINARY_SUBSCR						  
							      168 LOAD_FAST 0 ( arr )					    168 LOAD_FAST 0 ( arr )					  
							      170 LOAD_FAST 4 ( front )					    170 LOAD_FAST 4 ( front )					  
							      172 BINARY_SUBSCR						    172 BINARY_SUBSCR						  
							      174 COMPARE_OP 0 ( < )					    174 COMPARE_OP 0 ( < )					  
							      176 POP_JUMP_IF_FALSE 142					    176 POP_JUMP_IF_FALSE 178					  
							      								    								  
							      17 178 LOAD_CONST 5 ( False )				    17 178 LOAD_CONST 5 ( False )				  
							      180 RETURN_VALUE						    180 RETURN_VALUE						  
							      182 JUMP_ABSOLUTE 142					    								  
							      >> 184 POP_BLOCK						    18 >> 182 LOAD_CONST 4 ( True )				  
							      								    184 RETURN_VALUE NEW_LINE					  
							      18 >> 186 LOAD_CONST 4 ( True )				    								  
							      188 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STEINS_ALGORITHM_FOR_FINDING_GCD			      STEINS_ALGORITHM_FOR_FINDING_GCD				    STEINS_ALGORITHM_FOR_FINDING_GCD				  STEINS_ALGORITHM_FOR_FINDING_GCD
--							      --							    --								  --
def gcd ( a , b ) :					      Disassembly of <code object gcd at 0x7f33e2653ed0, file "<dis Disassembly of <code object gcd at 0x7f2b0163dc90, file "<dis timeout : None
    if ( a == 0 ) :					      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
	return b					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( b == 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return a					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    k = 0						      								    								  
    while ( ( ( a | b ) & 1 ) == 0 ) :			      3 8 LOAD_FAST 1 ( b )					    3 8 LOAD_FAST 1 ( b )					  
	a = a >> 1					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	b = b >> 1					      								    								  
	k = k + 1					      4 >> 12 LOAD_FAST 1 ( b )					    4 >> 12 LOAD_FAST 1 ( b )					  
    while ( ( a & 1 ) == 0 ) :				      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
	a = a >> 1					      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
    while ( b != 0 ) :					      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
	while ( ( b & 1 ) == 0 ) :			      								    								  
	    b = b >> 1					      5 20 LOAD_FAST 0 ( a )					    5 20 LOAD_FAST 0 ( a )					  
	if ( a > b ) :					      22 RETURN_VALUE						    22 RETURN_VALUE						  
	    temp = a					      								    								  
	    a = b					      6 >> 24 LOAD_CONST 1 ( 0 )				    6 >> 24 LOAD_CONST 1 ( 0 )					  
	    b = temp					      26 STORE_FAST 2 ( k )					    26 STORE_FAST 2 ( k )					  
	b = ( b - a )					      								    								  
    return ( a << k )					      7 28 SETUP_LOOP 44 ( to 74 )				    7 28 SETUP_LOOP 46 ( to 74 )				  
							      >> 30 LOAD_FAST 0 ( a )					    >> 30 LOAD_FAST 0 ( a )					  
							      32 LOAD_FAST 1 ( b )					    32 LOAD_FAST 1 ( b )					  
							      34 BINARY_OR						    34 BINARY_RSHIFT						  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_AND						    38 BINARY_AND						  
							      40 LOAD_CONST 1 ( 0 )					    40 LOAD_CONST 1 ( 0 )					  
							      42 COMPARE_OP 2 ( == )					    42 COMPARE_OP 2 ( == )					  
							      44 POP_JUMP_IF_FALSE 72					    44 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      8 46 LOAD_FAST 0 ( a )					    8 46 LOAD_FAST 0 ( a )					  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_RSHIFT						    50 BINARY_RSHIFT						  
							      52 STORE_FAST 0 ( a )					    52 STORE_FAST 0 ( a )					  
							      								    								  
							      9 54 LOAD_FAST 1 ( b )					    9 54 LOAD_FAST 1 ( b )					  
							      56 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 2 ( 1 )					  
							      58 BINARY_RSHIFT						    58 BINARY_RSHIFT						  
							      60 STORE_FAST 1 ( b )					    60 STORE_FAST 1 ( b )					  
							      								    								  
							      10 62 LOAD_FAST 2 ( k )					    10 62 LOAD_FAST 2 ( k )					  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      66 BINARY_ADD						    66 BINARY_ADD						  
							      68 STORE_FAST 2 ( k )					    68 STORE_FAST 2 ( k )					  
							      70 JUMP_ABSOLUTE 30					    70 JUMP_ABSOLUTE 30						  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      								    								  
							      11 >> 74 SETUP_LOOP 24 ( to 100 )				    11 >> 74 SETUP_LOOP 46 ( to 126 )				  
							      >> 76 LOAD_FAST 0 ( a )					    >> 76 LOAD_FAST 0 ( a )					  
							      78 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 2 ( 1 )					  
							      80 BINARY_AND						    80 BINARY_AND						  
							      82 LOAD_CONST 1 ( 0 )					    82 LOAD_CONST 1 ( 0 )					  
							      84 COMPARE_OP 2 ( == )					    84 COMPARE_OP 2 ( == )					  
							      86 POP_JUMP_IF_FALSE 98					    86 POP_JUMP_IF_FALSE 124					  
							      								    								  
							      12 88 LOAD_FAST 0 ( a )					    12 88 LOAD_FAST 0 ( a )					  
							      90 LOAD_CONST 2 ( 1 )					    90 LOAD_CONST 2 ( 1 )					  
							      92 BINARY_RSHIFT						    92 BINARY_RSHIFT						  
							      94 STORE_FAST 0 ( a )					    94 STORE_FAST 0 ( a )					  
							      96 JUMP_ABSOLUTE 76					    96 JUMP_ABSOLUTE 76						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      								    								  
							      13 >> 100 SETUP_LOOP 66 ( to 168 )			    13 >> 100 SETUP_LOOP 74 ( to 194 )				  
							      >> 102 LOAD_FAST 1 ( b )					    >> 102 LOAD_FAST 1 ( b )					  
							      104 LOAD_CONST 1 ( 0 )					    104 LOAD_CONST 1 ( 0 )					  
							      106 COMPARE_OP 3 ( != )					    106 COMPARE_OP 3 ( != )					  
							      108 POP_JUMP_IF_FALSE 166					    108 POP_JUMP_IF_FALSE 192					  
							      								    								  
							      14 110 SETUP_LOOP 24 ( to 136 )				    14 110 SETUP_LOOP 32 ( to 192 )				  
							      >> 112 LOAD_FAST 1 ( b )					    >> 112 LOAD_FAST 1 ( b )					  
							      114 LOAD_CONST 2 ( 1 )					    114 LOAD_CONST 2 ( 1 )					  
							      116 BINARY_AND						    116 BINARY_AND						  
							      118 LOAD_CONST 1 ( 0 )					    118 LOAD_CONST 1 ( 0 )					  
							      120 COMPARE_OP 2 ( == )					    120 COMPARE_OP 2 ( == )					  
							      122 POP_JUMP_IF_FALSE 134					    122 POP_JUMP_IF_FALSE 136					  
							      								    								  
							      15 124 LOAD_FAST 1 ( b )					    15 124 LOAD_FAST 1 ( b )					  
							      126 LOAD_CONST 2 ( 1 )					    126 LOAD_CONST 2 ( 1 )					  
							      128 BINARY_RSHIFT						    128 BINARY_RSHIFT						  
							      130 STORE_FAST 1 ( b )					    130 STORE_FAST 1 ( b )					  
							      132 JUMP_ABSOLUTE 112					    132 JUMP_ABSOLUTE 112					  
							      >> 134 POP_BLOCK						    >> 134 POP_BLOCK						  
							      								    								  
							      16 >> 136 LOAD_FAST 0 ( a )				    16 >> 136 LOAD_FAST 0 ( a )					  
							      138 LOAD_FAST 1 ( b )					    138 LOAD_FAST 1 ( b )					  
							      140 COMPARE_OP 4 ( > )					    140 COMPARE_OP 4 ( > )					  
							      142 POP_JUMP_IF_FALSE 156					    142 POP_JUMP_IF_FALSE 152					  
							      								    								  
							      17 144 LOAD_FAST 0 ( a )					    17 144 LOAD_FAST 0 ( a )					  
							      146 STORE_FAST 3 ( temp )					    146 STORE_FAST 0 ( a )					  
							      								    								  
							      18 148 LOAD_FAST 1 ( b )					    18 148 LOAD_FAST 1 ( b )					  
							      150 STORE_FAST 0 ( a )					    150 STORE_FAST 0 ( a )					  
							      								    								  
							      19 152 LOAD_FAST 3 ( temp )				    19 >> 152 LOAD_FAST 1 ( b )					  
							      154 STORE_FAST 1 ( b )					    154 LOAD_FAST 0 ( a )					  
							      								    156 BINARY_SUBTRACT						  
							      20 >> 156 LOAD_FAST 1 ( b )				    158 STORE_FAST 1 ( b )					  
							      158 LOAD_FAST 0 ( a )					    160 JUMP_ABSOLUTE 112					  
							      160 BINARY_SUBTRACT					    >> 162 POP_BLOCK						  
							      162 STORE_FAST 1 ( b )					    								  
							      164 JUMP_ABSOLUTE 102					    20 164 LOAD_FAST 1 ( b )					  
							      >> 166 POP_BLOCK						    166 LOAD_FAST 0 ( a )					  
							      								    168 BINARY_SUBTRACT						  
							      21 >> 168 LOAD_FAST 0 ( a )				    170 STORE_FAST 1 ( b )					  
							      170 LOAD_FAST 2 ( k )					    								  
							      172 BINARY_LSHIFT						    21 172 LOAD_FAST 1 ( b )					  
							      174 RETURN_VALUE NEW_LINE					    174 LOAD_FAST 0 ( a )					  
							      								    176 BINARY_SUBTRACT						  
							      								    178 STORE_FAST 1 ( b )					  
							      								    180 JUMP_ABSOLUTE 46					  
							      								    >> 182 POP_BLOCK						  
							      								    								  
							      								    22 >> 184 LOAD_FAST 0 ( a )					  
							      								    186 LOAD_FAST 2 ( k )					  
							      								    188 BINARY_SUBTRACT						  
							      								    190 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM	  REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM
--							      --							    --								  --
def remAnagram ( str1 , str2 ) :			      Disassembly of <code object remAnagram at 0x7f33e2653ed0, fil Disassembly of <code object remAnagram at 0x7f2b01639660, fil script_not_found : None
    count1 = [ 0 ] * CHARS				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    count2 = [ 0 ] * CHARS				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    i = 0						      4 LOAD_GLOBAL 0 ( CHARS )					    4 LOAD_GLOBAL 0 ( CHARS )					  
    while i < len ( str1 ) :				      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	count1 [ ord ( str1 [ i ] ) - ord ( 'a' ) ] += 1      8 STORE_FAST 2 ( count1 )					    8 STORE_FAST 2 ( count1 )					  
	i += 1						      								    								  
    i = 0						      3 10 LOAD_CONST 1 ( 0 )					    3 10 LOAD_CONST 1 ( 0 )					  
    while i < len ( str2 ) :				      12 BUILD_LIST 1						    12 BUILD_LIST 1						  
	count2 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] += 1      14 LOAD_GLOBAL 0 ( CHARS )				    14 LOAD_GLOBAL 0 ( CHARS )					  
	i += 1						      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
    result = 0						      18 STORE_FAST 3 ( count2 )				    18 STORE_FAST 3 ( count2 )					  
    for i in range ( 26 ) :				      								    								  
	result += abs ( count1 [ i ] - count2 [ i ] )	      4 20 LOAD_CONST 1 ( 0 )					    4 20 LOAD_CONST 1 ( 0 )					  
    return result					      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 SETUP_LOOP 56 ( to 82 )				    5 24 SETUP_LOOP 52 ( to 74 )				  
							      >> 26 LOAD_FAST 4 ( i )					    >> 26 LOAD_FAST 4 ( i )					  
							      28 LOAD_GLOBAL 1 ( len )					    28 LOAD_GLOBAL 1 ( len )					  
							      30 LOAD_FAST 0 ( str1 )					    30 LOAD_FAST 0 ( str1 )					  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 COMPARE_OP 0 ( < )					    34 COMPARE_OP 0 ( < )					  
							      36 POP_JUMP_IF_FALSE 80					    36 POP_JUMP_IF_FALSE 72					  
							      								    								  
							      6 38 LOAD_FAST 2 ( count1 )				    6 38 LOAD_FAST 2 ( count1 )					  
							      40 LOAD_GLOBAL 2 ( ord )					    40 LOAD_GLOBAL 2 ( ord )					  
							      42 LOAD_FAST 0 ( str1 )					    42 LOAD_FAST 0 ( str1 )					  
							      44 LOAD_FAST 4 ( i )					    44 LOAD_FAST 4 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 LOAD_GLOBAL 2 ( ord )					    50 LOAD_GLOBAL 2 ( ord )					  
							      52 LOAD_CONST 2 ( 'a' )					    52 LOAD_CONST 2 ( 'a' )					  
							      54 CALL_FUNCTION 1					    54 CALL_FUNCTION 1						  
							      56 BINARY_SUBTRACT					    56 BINARY_SUBTRACT						  
							      58 DUP_TOP_TWO						    58 DUP_TOP_TWO						  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_CONST 3 ( 1 )					    62 LOAD_CONST 3 ( 1 )					  
							      64 INPLACE_ADD						    64 INPLACE_ADD						  
							      66 ROT_THREE						    66 ROT_THREE						  
							      68 STORE_SUBSCR						    68 STORE_SUBSCR						  
							      								    								  
							      7 70 LOAD_FAST 4 ( i )					    7 70 LOAD_FAST 4 ( i )					  
							      72 LOAD_CONST 3 ( 1 )					    72 LOAD_CONST 3 ( 1 )					  
							      74 INPLACE_ADD						    74 INPLACE_ADD						  
							      76 STORE_FAST 4 ( i )					    76 STORE_FAST 4 ( i )					  
							      78 JUMP_ABSOLUTE 26					    78 JUMP_ABSOLUTE 26						  
							      >> 80 POP_BLOCK						    >> 80 POP_BLOCK						  
							      								    								  
							      8 >> 82 LOAD_CONST 1 ( 0 )				    8 >> 82 LOAD_CONST 1 ( 0 )					  
							      84 STORE_FAST 4 ( i )					    84 STORE_FAST 4 ( i )					  
							      								    								  
							      9 86 SETUP_LOOP 56 ( to 144 )				    9 86 SETUP_LOOP 66 ( to 146 )				  
							      >> 88 LOAD_FAST 4 ( i )					    >> 88 LOAD_FAST 4 ( i )					  
							      90 LOAD_GLOBAL 1 ( len )					    90 LOAD_GLOBAL 1 ( len )					  
							      92 LOAD_FAST 1 ( str2 )					    92 LOAD_FAST 1 ( str2 )					  
							      94 CALL_FUNCTION 1					    94 CALL_FUNCTION 1						  
							      96 COMPARE_OP 0 ( < )					    96 COMPARE_OP 0 ( < )					  
							      98 POP_JUMP_IF_FALSE 142					    98 POP_JUMP_IF_FALSE 144					  
							      								    								  
							      10 100 LOAD_FAST 3 ( count2 )				    10 100 LOAD_FAST 3 ( count2 )				  
							      102 LOAD_GLOBAL 2 ( ord )					    102 LOAD_GLOBAL 2 ( ord )					  
							      104 LOAD_FAST 1 ( str2 )					    104 LOAD_FAST 1 ( str2 )					  
							      106 LOAD_FAST 4 ( i )					    106 LOAD_FAST 4 ( i )					  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 CALL_FUNCTION 1					    110 CALL_FUNCTION 1						  
							      112 LOAD_GLOBAL 2 ( ord )					    112 LOAD_GLOBAL 2 ( ord )					  
							      114 LOAD_CONST 2 ( 'a' )					    114 LOAD_CONST 2 ( 'a' )					  
							      116 CALL_FUNCTION 1					    116 CALL_FUNCTION 1						  
							      118 BINARY_SUBTRACT					    118 BINARY_SUBTRACT						  
							      120 DUP_TOP_TWO						    120 DUP_TOP_TWO						  
							      122 BINARY_SUBSCR						    122 BINARY_SUBSCR						  
							      124 LOAD_CONST 3 ( 1 )					    124 LOAD_CONST 3 ( 1 )					  
							      126 INPLACE_ADD						    126 INPLACE_ADD						  
							      128 ROT_THREE						    128 ROT_THREE						  
							      130 STORE_SUBSCR						    130 STORE_SUBSCR						  
							      								    								  
							      11 132 LOAD_FAST 4 ( i )					    11 132 LOAD_FAST 4 ( i )					  
							      134 LOAD_CONST 3 ( 1 )					    134 LOAD_CONST 3 ( 1 )					  
							      136 INPLACE_ADD						    136 INPLACE_ADD						  
							      138 STORE_FAST 4 ( i )					    138 STORE_FAST 4 ( i )					  
							      140 JUMP_ABSOLUTE 88					    140 JUMP_ABSOLUTE 88					  
							      >> 142 POP_BLOCK						    >> 142 POP_BLOCK						  
							      								    								  
							      12 >> 144 LOAD_CONST 1 ( 0 )				    12 >> 144 LOAD_CONST 1 ( 0 )				  
							      146 STORE_FAST 5 ( result )				    146 STORE_FAST 5 ( result )					  
							      								    								  
							      13 148 SETUP_LOOP 40 ( to 190 )				    13 148 SETUP_LOOP 46 ( to 194 )				  
							      150 LOAD_GLOBAL 3 ( range )				    150 LOAD_GLOBAL 3 ( range )					  
							      152 LOAD_CONST 4 ( 26 )					    152 LOAD_CONST 4 ( 26 )					  
							      154 CALL_FUNCTION 1					    154 CALL_FUNCTION 1						  
							      156 GET_ITER						    156 GET_ITER						  
							      >> 158 FOR_ITER 28 ( to 188 )				    >> 158 FOR_ITER 38 ( to 192 )				  
							      160 STORE_FAST 4 ( i )					    160 STORE_FAST 4 ( i )					  
							      								    								  
							      14 162 LOAD_FAST 5 ( result )				    14 162 LOAD_FAST 5 ( result )				  
							      164 LOAD_GLOBAL 4 ( abs )					    164 LOAD_GLOBAL 4 ( abs )					  
							      166 LOAD_FAST 2 ( count1 )				    166 LOAD_FAST 2 ( count1 )					  
							      168 LOAD_FAST 4 ( i )					    168 LOAD_FAST 4 ( i )					  
							      170 BINARY_SUBSCR						    170 BINARY_SUBSCR						  
							      172 LOAD_FAST 3 ( count2 )				    172 LOAD_FAST 3 ( count2 )					  
							      174 LOAD_FAST 4 ( i )					    174 LOAD_FAST 4 ( i )					  
							      176 BINARY_SUBSCR						    176 BINARY_SUBSCR						  
							      178 BINARY_SUBTRACT					    178 BINARY_SUBTRACT						  
							      180 CALL_FUNCTION 1					    180 CALL_FUNCTION 1						  
							      182 INPLACE_ADD						    182 INPLACE_ADD						  
							      184 STORE_FAST 5 ( result )				    184 STORE_FAST 5 ( result )					  
							      186 JUMP_ABSOLUTE 158					    186 JUMP_ABSOLUTE 158					  
							      >> 188 POP_BLOCK						    >> 188 POP_BLOCK						  
							      								    								  
							      15 >> 190 LOAD_FAST 5 ( result )				    15 >> 190 LOAD_FAST 5 ( result )				  
							      192 RETURN_VALUE NEW_LINE					    192 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_
--							      --							    --								  --
def countManipulations ( s1 , s2 ) :			      Disassembly of <code object countManipulations at 0x7f33e2649 Disassembly of <code object countManipulations at 0x7f2b0163d script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    char_count = [ 0 ] * 26				      2 STORE_FAST 2 ( count )					    2 STORE_FAST 2 ( count )					  
    for i in range ( 26 ) :				      								    								  
	char_count [ i ] = 0				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
    for i in range ( len ( s1 ) ) :			      6 BUILD_LIST 1						    6 BUILD_LIST 1						  
	char_count [ ord ( s1 [ i ] ) - ord ( 'a' ) ] += 1    8 LOAD_CONST 2 ( 26 )					    8 LOAD_CONST 2 ( 26 )					  
    for i in range ( len ( s2 ) ) :			      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
	char_count [ ord ( s2 [ i ] ) - ord ( 'a' ) ] -= 1    12 STORE_FAST 3 ( char_count )				    12 STORE_FAST 3 ( char_count )				  
	if ( char_count [ ord ( s2 [ i ] ) - ord ( 'a' ) ] <  								    								  
	    count += 1					      4 14 SETUP_LOOP 24 ( to 40 )				    4 14 SETUP_LOOP 28 ( to 44 )				  
    return count					      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_GLOBAL 0 ( range )					  
							      18 LOAD_CONST 2 ( 26 )					    18 LOAD_CONST 3 ( 26 )					  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 12 ( to 38 )				    >> 24 FOR_ITER 12 ( to 42 )					  
							      26 STORE_FAST 4 ( i )					    26 STORE_FAST 4 ( i )					  
							      								    								  
							      5 28 LOAD_CONST 1 ( 0 )					    5 28 LOAD_CONST 1 ( 0 )					  
							      30 LOAD_FAST 3 ( char_count )				    30 LOAD_FAST 3 ( char_count )				  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 STORE_SUBSCR						    34 STORE_SUBSCR						  
							      36 JUMP_ABSOLUTE 24					    36 JUMP_ABSOLUTE 24						  
							      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
							      								    								  
							      6 >> 40 SETUP_LOOP 52 ( to 94 )				    6 >> 40 SETUP_LOOP 52 ( to 96 )				  
							      42 LOAD_GLOBAL 0 ( range )				    42 LOAD_GLOBAL 0 ( range )					  
							      44 LOAD_GLOBAL 1 ( len )					    44 LOAD_GLOBAL 1 ( len )					  
							      46 LOAD_FAST 0 ( s1 )					    46 LOAD_FAST 0 ( s1 )					  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 36 ( to 92 )				    >> 54 FOR_ITER 36 ( to 94 )					  
							      56 STORE_FAST 4 ( i )					    56 STORE_FAST 4 ( i )					  
							      								    								  
							      7 58 LOAD_FAST 3 ( char_count )				    7 58 LOAD_FAST 3 ( char_count )				  
							      60 LOAD_GLOBAL 2 ( ord )					    60 LOAD_GLOBAL 2 ( ord )					  
							      62 LOAD_FAST 0 ( s1 )					    62 LOAD_FAST 0 ( s1 )					  
							      64 LOAD_FAST 4 ( i )					    64 LOAD_FAST 4 ( i )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 CALL_FUNCTION 1					    68 CALL_FUNCTION 1						  
							      70 LOAD_GLOBAL 2 ( ord )					    70 LOAD_GLOBAL 2 ( ord )					  
							      72 LOAD_CONST 3 ( 'a' )					    72 LOAD_CONST 4 ( 'a' )					  
							      74 CALL_FUNCTION 1					    74 CALL_FUNCTION 1						  
							      76 BINARY_SUBTRACT					    76 BINARY_SUBTRACT						  
							      78 DUP_TOP_TWO						    78 DUP_TOP_TWO						  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 LOAD_CONST 4 ( 1 )					    82 LOAD_CONST 5 ( 1 )					  
							      84 INPLACE_ADD						    84 INPLACE_ADD						  
							      86 ROT_THREE						    86 ROT_THREE						  
							      88 STORE_SUBSCR						    88 STORE_SUBSCR						  
							      90 JUMP_ABSOLUTE 54					    90 JUMP_ABSOLUTE 54						  
							      >> 92 POP_BLOCK						    92 POP_BLOCK						  
							      								    >> 94 LOAD_CONST 0 ( None )					  
							      8 >> 94 SETUP_LOOP 88 ( to 184 )				    96 RETURN_VALUE NEW_LINE					  
							      96 LOAD_GLOBAL 0 ( range )				    								  
							      98 LOAD_GLOBAL 1 ( len )					    								  
							      100 LOAD_FAST 1 ( s2 )					    								  
							      102 CALL_FUNCTION 1					    								  
							      104 CALL_FUNCTION 1					    								  
							      106 GET_ITER						    								  
							      >> 108 FOR_ITER 72 ( to 182 )				    								  
							      110 STORE_FAST 4 ( i )					    								  
							      								    								  
							      9 112 LOAD_FAST 3 ( char_count )				    								  
							      114 LOAD_GLOBAL 2 ( ord )					    								  
							      116 LOAD_FAST 1 ( s2 )					    								  
							      118 LOAD_FAST 4 ( i )					    								  
							      120 BINARY_SUBSCR						    								  
							      122 CALL_FUNCTION 1					    								  
							      124 LOAD_GLOBAL 2 ( ord )					    								  
							      126 LOAD_CONST 3 ( 'a' )					    								  
							      128 CALL_FUNCTION 1					    								  
							      130 BINARY_SUBTRACT					    								  
							      132 DUP_TOP_TWO						    								  
							      134 BINARY_SUBSCR						    								  
							      136 LOAD_CONST 4 ( 1 )					    								  
							      138 INPLACE_SUBTRACT					    								  
							      140 ROT_THREE						    								  
							      142 STORE_SUBSCR						    								  
							      								    								  
							      10 144 LOAD_FAST 3 ( char_count )				    								  
							      146 LOAD_GLOBAL 2 ( ord )					    								  
							      148 LOAD_FAST 1 ( s2 )					    								  
							      150 LOAD_FAST 4 ( i )					    								  
							      152 BINARY_SUBSCR						    								  
							      154 CALL_FUNCTION 1					    								  
							      156 LOAD_GLOBAL 2 ( ord )					    								  
							      158 LOAD_CONST 3 ( 'a' )					    								  
							      160 CALL_FUNCTION 1					    								  
							      162 BINARY_SUBTRACT					    								  
							      164 BINARY_SUBSCR						    								  
							      166 LOAD_CONST 1 ( 0 )					    								  
							      168 COMPARE_OP 0 ( < )					    								  
							      170 POP_JUMP_IF_FALSE 108					    								  
							      								    								  
							      11 172 LOAD_FAST 2 ( count )				    								  
							      174 LOAD_CONST 4 ( 1 )					    								  
							      176 INPLACE_ADD						    								  
							      178 STORE_FAST 2 ( count )				    								  
							      180 JUMP_ABSOLUTE 108					    								  
							      >> 182 POP_BLOCK						    								  
							      								    								  
							      12 >> 184 LOAD_FAST 2 ( count )				    								  
							      186 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S			      COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S			    COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S			  COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S
--							      --							    --								  --
def countSubarrWithEqualZeroAndOne ( arr , n ) :	      Disassembly of <code object countSubarrWithEqualZeroAndOne at Disassembly of <code object countSubarrWithEqualZeroAndOne at script_not_found : None
    um = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    curr_sum = 0					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for i in range ( n ) :				      4 STORE_FAST 2 ( um )					    4 STORE_FAST 2 ( um )					  
	curr_sum += ( - 1 if ( arr [ i ] == 0 ) else arr [ i  								    								  
	if um.get ( curr_sum ) :			      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	    um [ curr_sum ] += 1			      8 STORE_FAST 3 ( curr_sum )				    8 STORE_FAST 3 ( curr_sum )					  
	else :						      								    								  
	    um [ curr_sum ] = 1				      4 10 SETUP_LOOP 80 ( to 92 )				    4 10 SETUP_LOOP 68 ( to 86 )				  
    count = 0						      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
    for itr in um :					      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
	if um [ itr ] > 1 :				      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
	    count += ( ( um [ itr ] * int ( um [ itr ] - 1 )  18 GET_ITER						    18 GET_ITER							  
    if um.get ( 0 ) :					      >> 20 FOR_ITER 68 ( to 90 )				    >> 20 FOR_ITER 52 ( to 84 )					  
	count += um [ 0 ]				      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
    return int ( count )				      								    								  
							      5 24 LOAD_FAST 3 ( curr_sum )				    5 24 LOAD_FAST 3 ( curr_sum )				  
							      26 LOAD_FAST 0 ( arr )					    26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_FAST 4 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_CONST 1 ( 0 )					    32 LOAD_CONST 1 ( 0 )					  
							      34 COMPARE_OP 2 ( == )					    34 COMPARE_OP 2 ( == )					  
							      36 POP_JUMP_IF_FALSE 42					    36 POP_JUMP_IF_FALSE 48					  
							      38 LOAD_CONST 2 ( - 1 )					    38 LOAD_FAST 3 ( curr_sum )					  
							      40 JUMP_FORWARD 6 ( to 48 )				    40 LOAD_FAST 0 ( arr )					  
							      >> 42 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 4 ( i )					  
							      44 LOAD_FAST 4 ( i )					    44 BINARY_SUBSCR						  
							      46 BINARY_SUBSCR						    46 LOAD_CONST 1 ( 0 )					  
							      >> 48 INPLACE_ADD						    48 COMPARE_OP 2 ( == )					  
							      50 STORE_FAST 3 ( curr_sum )				    50 POP_JUMP_IF_FALSE 62					  
							      								    52 LOAD_FAST 3 ( curr_sum )					  
							      6 52 LOAD_FAST 2 ( um )					    54 LOAD_FAST 3 ( curr_sum )					  
							      54 LOAD_METHOD 2 ( get )					    56 DUP_TOP_TWO						  
							      56 LOAD_FAST 3 ( curr_sum )				    58 BINARY_SUBSCR						  
							      58 CALL_METHOD 1						    60 LOAD_CONST 2 ( 1 )					  
							      60 POP_JUMP_IF_FALSE 80					    64 INPLACE_ADD						  
							      								    66 ROT_THREE						  
							      7 62 LOAD_FAST 2 ( um )					    68 STORE_SUBSCR						  
							      64 LOAD_FAST 3 ( curr_sum )				    70 JUMP_ABSOLUTE 20						  
							      66 DUP_TOP_TWO						    								  
							      68 BINARY_SUBSCR						    7 >> 72 LOAD_CONST 2 ( 1 )					  
							      70 LOAD_CONST 3 ( 1 )					    74 LOAD_FAST 2 ( um )					  
							      72 INPLACE_ADD						    76 LOAD_FAST 3 ( curr_sum )					  
							      74 ROT_THREE						    78 STORE_SUBSCR						  
							      76 STORE_SUBSCR						    80 JUMP_ABSOLUTE 20						  
							      78 JUMP_ABSOLUTE 20					    82 POP_BLOCK						  
							      								    								  
							      9 >> 80 LOAD_CONST 3 ( 1 )				    8 >> 84 LOAD_CONST 1 ( 0 )					  
							      82 LOAD_FAST 2 ( um )					    86 STORE_FAST 5 ( count )					  
							      84 LOAD_FAST 3 ( curr_sum )				    88 JUMP_ABSOLUTE 20						  
							      86 STORE_SUBSCR						    >> 90 POP_BLOCK						  
							      88 JUMP_ABSOLUTE 20					    								  
							      >> 90 POP_BLOCK						    9 92 SETUP_LOOP 68 ( to 158 )				  
							      								    94 LOAD_FAST 2 ( um )					  
							      10 >> 92 LOAD_CONST 1 ( 0 )				    96 GET_ITER							  
							      94 STORE_FAST 5 ( count )					    >> 98 FOR_ITER 60 ( to 156 )				  
							      								    100 STORE_FAST 6 ( itr )					  
							      11 96 SETUP_LOOP 56 ( to 154 )				    								  
							      98 LOAD_FAST 2 ( um )					    10 102 LOAD_FAST 2 ( um )					  
							      100 GET_ITER						    104 LOAD_FAST 6 ( itr )					  
							      >> 102 FOR_ITER 48 ( to 152 )				    106 BINARY_SUBSCR						  
							      104 STORE_FAST 6 ( itr )					    108 LOAD_CONST 2 ( 1 )					  
							      								    110 COMPARE_OP 4 ( > )					  
							      12 106 LOAD_FAST 2 ( um )					    112 POP_JUMP_IF_FALSE 98					  
							      108 LOAD_FAST 6 ( itr )					    								  
							      110 BINARY_SUBSCR						    11 114 LOAD_FAST 5 ( count )				  
							      112 LOAD_CONST 3 ( 1 )					    116 LOAD_FAST 2 ( um )					  
							      114 COMPARE_OP 4 ( > )					    118 LOAD_FAST 6 ( itr )					  
							      116 POP_JUMP_IF_FALSE 102					    120 BINARY_SUBSCR						  
							      								    122 LOAD_GLOBAL 2 ( int )					  
							      13 118 LOAD_FAST 5 ( count )				    124 LOAD_FAST 2 ( um )					  
							      120 LOAD_FAST 2 ( um )					    126 LOAD_FAST 6 ( itr )					  
							      122 LOAD_FAST 6 ( itr )					    128 BINARY_SUBSCR						  
							      124 BINARY_SUBSCR						    130 LOAD_CONST 2 ( 1 )					  
							      126 LOAD_GLOBAL 3 ( int )					    132 BINARY_SUBTRACT						  
							      128 LOAD_FAST 2 ( um )					    134 CALL_FUNCTION 1						  
							      130 LOAD_FAST 6 ( itr )					    136 BINARY_MULTIPLY						  
							      132 BINARY_SUBSCR						    138 LOAD_CONST 3 ( 2 )					  
							      134 LOAD_CONST 3 ( 1 )					    140 BINARY_TRUE_DIVIDE					  
							      136 BINARY_SUBTRACT					    142 INPLACE_ADD						  
							      138 CALL_FUNCTION 1					    144 STORE_FAST 5 ( count )					  
							      140 BINARY_MULTIPLY					    146 JUMP_ABSOLUTE 98					  
							      142 LOAD_CONST 4 ( 2 )					    >> 148 POP_BLOCK						  
							      144 BINARY_TRUE_DIVIDE					    								  
							      146 INPLACE_ADD						    12 >> 150 LOAD_FAST 2 ( um )				  
							      148 STORE_FAST 5 ( count )				    152 LOAD_METHOD 3 ( get )					  
							      150 JUMP_ABSOLUTE 102					    154 LOAD_CONST 1 ( 0 )					  
							      >> 152 POP_BLOCK						    156 CALL_METHOD 1						  
							      								    158 POP_JUMP_IF_FALSE 98					  
							      14 >> 154 LOAD_FAST 2 ( um )				    								  
							      156 LOAD_METHOD 2 ( get )					    13 160 LOAD_FAST 5 ( count )				  
							      158 LOAD_CONST 1 ( 0 )					    162 LOAD_FAST 2 ( um )					  
							      160 CALL_METHOD 1						    164 LOAD_CONST 1 ( 0 )					  
							      162 POP_JUMP_IF_FALSE 176					    166 BINARY_SUBSCR						  
							      								    168 INPLACE_ADD						  
							      15 164 LOAD_FAST 5 ( count )				    170 STORE_FAST 5 ( count )					  
							      166 LOAD_FAST 2 ( um )					    172 JUMP_ABSOLUTE 98					  
							      168 LOAD_CONST 1 ( 0 )					    >> 174 POP_BLOCK						  
							      170 BINARY_SUBSCR						    								  
							      172 INPLACE_ADD						    14 176 LOAD_GLOBAL 2 ( int )				  
							      174 STORE_FAST 5 ( count )				    178 LOAD_FAST 5 ( count )					  
							      								    180 CALL_FUNCTION 1						  
							      16 >> 176 LOAD_GLOBAL 3 ( int )				    182 RETURN_VALUE NEW_LINE					  
							      178 LOAD_FAST 5 ( count )					    								  
							      180 CALL_FUNCTION 1					    								  
							      182 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNIQUE_CELLS_BINARY_MATRIX				      UNIQUE_CELLS_BINARY_MATRIX				    UNIQUE_CELLS_BINARY_MATRIX					  UNIQUE_CELLS_BINARY_MATRIX
--							      --							    --								  --
def countUnique ( mat , n , m ) :			      Disassembly of <code object countUnique at 0x7f33e2653f60, fi Disassembly of <code object countUnique at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    rowsum = [ 0 ] * n ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    colsum = [ 0 ] * m ;				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( n ) :				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  y", line 47, in run_dis_script     co_code, co_nlo
	for j in range ( m ) :				      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  cals, co_varnames, co_names, co_consts, co_linesta
	    if ( mat [ i ] [ j ] != 0 ) :		      8 STORE_FAST 3 ( rowsum )					    8 STORE_FAST 3 ( rowsum )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
		rowsum [ i ] += 1 ;			      								    								  /TransCoder/XLM/src/dis_assembler.py", line 233, i
		colsum [ j ] += 1 ;			      3 10 LOAD_CONST 1 ( 0 )					    3 10 LOAD_CONST 1 ( 0 )					  n parse     code.append(arg) ValueError: byte must
    uniquecount = 0 ;					      12 BUILD_LIST 1						    12 BUILD_LIST 1						   be in range(0, 256)
    for i in range ( n ) :				      14 LOAD_FAST 2 ( m )					    14 LOAD_FAST 2 ( m )					  
	for j in range ( m ) :				      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
	    if ( mat [ i ] [ j ] != 0 and rowsum [ i ] == 1 a 18 STORE_FAST 4 ( colsum )				    18 STORE_FAST 4 ( colsum )					  
		uniquecount += 1 ;			      								    								  
    return uniquecount ;				      4 20 SETUP_LOOP 82 ( to 104 )				    4 20 SETUP_LOOP 68 ( to 92 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 70 ( to 102 )				    >> 30 FOR_ITER 56 ( to 90 )					  
							      32 STORE_FAST 5 ( i )					    32 STORE_FAST 5 ( i )					  
							      								    								  
							      5 34 SETUP_LOOP 64 ( to 100 )				    5 34 SETUP_LOOP 52 ( to 88 )				  
							      36 LOAD_GLOBAL 0 ( range )				    36 LOAD_GLOBAL 0 ( range )					  
							      38 LOAD_FAST 2 ( m )					    38 LOAD_FAST 2 ( m )					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 52 ( to 98 )				    >> 44 FOR_ITER 38 ( to 86 )					  
							      46 STORE_FAST 6 ( j )					    46 STORE_FAST 6 ( j )					  
							      								    								  
							      6 48 LOAD_FAST 0 ( mat )					    6 48 LOAD_FAST 0 ( mat )					  
							      50 LOAD_FAST 5 ( i )					    50 LOAD_FAST 5 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 6 ( j )					    54 LOAD_FAST 6 ( j )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_CONST 1 ( 0 )					    58 LOAD_CONST 1 ( 0 )					  
							      60 COMPARE_OP 3 ( != )					    60 COMPARE_OP 3 ( != )					  
							      62 POP_JUMP_IF_FALSE 44					    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 64 LOAD_FAST 3 ( rowsum )				    7 64 LOAD_FAST 3 ( rowsum )					  
							      66 LOAD_FAST 5 ( i )					    66 LOAD_FAST 5 ( i )					  
							      68 DUP_TOP_TWO						    68 DUP_TOP_TWO						  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_CONST 2 ( 1 )					    72 LOAD_CONST 2 ( 1 )					  
							      74 INPLACE_ADD						    74 INPLACE_ADD						  
							      76 ROT_THREE						    76 ROT_THREE						  
							      78 STORE_SUBSCR						    78 STORE_SUBSCR						  
							      								    								  
							      8 80 LOAD_FAST 4 ( colsum )				    8 80 LOAD_FAST 4 ( colsum )					  
							      82 LOAD_FAST 6 ( j )					    82 LOAD_FAST 6 ( j )					  
							      84 DUP_TOP_TWO						    84 DUP_TOP_TWO						  
							      86 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      88 LOAD_CONST 2 ( 1 )					    88 LOAD_CONST 2 ( 1 )					  
							      90 INPLACE_ADD						    90 INPLACE_ADD						  
							      92 ROT_THREE						    92 ROT_THREE						  
							      94 STORE_SUBSCR						    94 STORE_SUBSCR						  
							      96 JUMP_ABSOLUTE 44					    96 JUMP_ABSOLUTE 44						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      >> 100 JUMP_ABSOLUTE 30					    >> 100 JUMP_ABSOLUTE 30					  
							      >> 102 POP_BLOCK						    >> 102 POP_BLOCK						  
							      								    								  
							      9 >> 104 LOAD_CONST 1 ( 0 )				    9 104 LOAD_CONST 1 ( 0 )					  
							      106 STORE_FAST 7 ( uniquecount )				    106 STORE_FAST 7 ( uniquecount )				  
							      								    								  
							      10 108 SETUP_LOOP 82 ( to 192 )				    10 108 SETUP_LOOP 92 ( to 252 )				  
							      110 LOAD_GLOBAL 0 ( range )				    110 LOAD_GLOBAL 0 ( range )					  
							      112 LOAD_FAST 1 ( n )					    112 LOAD_FAST 1 ( n )					  
							      114 CALL_FUNCTION 1					    114 CALL_FUNCTION 1						  
							      116 GET_ITER						    116 GET_ITER						  
							      >> 118 FOR_ITER 70 ( to 190 )				    >> 118 FOR_ITER 80 ( to 254 )				  
							      120 STORE_FAST 5 ( i )					    120 STORE_FAST 5 ( i )					  
							      								    								  
							      11 122 SETUP_LOOP 64 ( to 188 )				    11 122 SETUP_LOOP 68 ( to 252 )				  
							      124 LOAD_GLOBAL 0 ( range )				    124 LOAD_GLOBAL 0 ( range )					  
							      126 LOAD_FAST 2 ( m )					    126 LOAD_FAST 2 ( m )					  
							      128 CALL_FUNCTION 1					    128 CALL_FUNCTION 1						  
							      130 GET_ITER						    130 GET_ITER						  
							      >> 132 FOR_ITER 52 ( to 186 )				    >> 132 FOR_ITER 56 ( to 250 )				  
							      134 STORE_FAST 6 ( j )					    134 STORE_FAST 6 ( j )					  
							      								    								  
							      12 136 LOAD_FAST 0 ( mat )				    12 136 SETUP_LOOP 52 ( to 184 )				  
							      138 LOAD_FAST 5 ( i )					    138 LOAD_GLOBAL 0 ( range )					  
							      140 BINARY_SUBSCR						    140 LOAD_FAST 2 ( m )					  
							      142 LOAD_FAST 6 ( j )					    142 CALL_FUNCTION 1						  
							      144 BINARY_SUBSCR						    144 GET_ITER						  
							      146 LOAD_CONST 1 ( 0 )					    >> 146 FOR_ITER 44 ( to 182 )				  
							      148 COMPARE_OP 3 ( != )					    148 STORE_FAST 6 ( j )					  
							      150 POP_JUMP_IF_FALSE 132					    								  
							      152 LOAD_FAST 3 ( rowsum )				    13 150 SETUP_LOOP 46 ( to 180 )				  
							      154 LOAD_FAST 5 ( i )					    152 LOAD_GLOBAL 0 ( range )					  
							      156 BINARY_SUBSCR						    154 LOAD_FAST 2 ( m )					  
							      158 LOAD_CONST 2 ( 1 )					    156 CALL_FUNCTION 1						  
							      160 COMPARE_OP 2 ( == )					    158 GET_ITER						  
							      162 POP_JUMP_IF_FALSE 132					    >> 160 FOR_ITER 38 ( to 178 )				  
							      164 LOAD_FAST 4 ( colsum )				    162 STORE_FAST 7 ( j )					  
							      166 LOAD_FAST 6 ( j )					    								  
							      168 BINARY_SUBSCR						    14 164 SETUP_LOOP 38 ( to 176 )				  
							      170 LOAD_CONST 2 ( 1 )					    166 LOAD_GLOBAL 0 ( range )					  
							      172 COMPARE_OP 2 ( == )					    168 LOAD_FAST 2 ( m )					  
							      174 POP_JUMP_IF_FALSE 132					    170 CALL_FUNCTION 1						  
							      								    172 GET_ITER						  
							      13 176 LOAD_FAST 7 ( uniquecount )			    >> 174 FOR_ITER 30 ( to 174 )				  
							      178 LOAD_CONST 2 ( 1 )					    176 STORE_FAST 8 ( j )					  
							      180 INPLACE_ADD						    								  
							      182 STORE_FAST 7 ( uniquecount )				    15 178 LOAD_FAST 0 ( mat )					  
							      184 JUMP_ABSOLUTE 132					    180 LOAD_FAST 5 ( i )					  
							      >> 186 POP_BLOCK						    182 BINARY_SUBSCR						  
							      >> 188 JUMP_ABSOLUTE 118					    184 LOAD_FAST 6 ( j )					  
							      >> 190 POP_BLOCK						    186 BINARY_SUBSCR						  
							      								    188 LOAD_CONST 1 ( 0 )					  
							      14 >> 192 LOAD_FAST 7 ( uniquecount )			    190 COMPARE_OP 3 ( != )					  
							      194 RETURN_VALUE NEW_LINE					    192 POP_JUMP_IF_FALSE 174					  
							      								    194 LOAD_FAST 3 ( rowsum )					  
							      								    196 LOAD_FAST 5 ( i )					  
							      								    198 BINARY_SUBSCR						  
							      								    200 LOAD_CONST 2 ( 1 )					  
							      								    202 COMPARE_OP 2 ( == )					  
							      								    204 POP_JUMP_IF_FALSE 174					  
							      								    								  
							      								    16 206 LOAD_FAST 7 ( uniquecount )				  
							      								    208 LOAD_CONST 2 ( 1 )					  
							      								    210 INPLACE_ADD						  
							      								    212 STORE_FAST 7 ( uniquecount )				  
							      								    214 JUMP_ABSOLUTE 132					  
							      								    >> 216 POP_BLOCK						  
							      								    >> 218 JUMP_ABSOLUTE 132					  
							      								    >> 220 POP_BLOCK						  
							      								    >> 222 JUMP_ABSOLUTE 118					  
							      								    >> 224 POP_BLOCK						  
							      								    								  
							      								    17 >> 226 LOAD_FAST 7 ( uniquecount )			  
							      								    228 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ROTATIONS_DIVISIBLE_4				      COUNT_ROTATIONS_DIVISIBLE_4				    COUNT_ROTATIONS_DIVISIBLE_4					  COUNT_ROTATIONS_DIVISIBLE_4
--							      --							    --								  --
def countRotations ( n ) :				      Disassembly of <code object countRotations at 0x7f33e26494b0, Disassembly of <code object countRotations at 0x7f2b0163dc90, script_not_found : None
    l = len ( n )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    if ( l == 1 ) :					      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
	oneDigit = ( int ) ( n [ 0 ] )			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	if ( oneDigit % 4 == 0 ) :			      6 STORE_FAST 1 ( l )					    6 STORE_FAST 1 ( l )					  
	    return 1					      								    								  
	return 0					      3 8 LOAD_FAST 1 ( l )					    3 8 LOAD_FAST 1 ( l )					  
    count = 0						      10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( 1 )					  
    for i in range ( 0 , l - 1 ) :			      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	twoDigit = ( int ) ( n [ i ] ) * 10 + ( int ) ( n [ i 14 POP_JUMP_IF_FALSE 48					    14 POP_JUMP_IF_FALSE 44					  
	if ( twoDigit % 4 == 0 ) :			      								    								  
	    count = count + 1				      4 16 LOAD_GLOBAL 1 ( int )				    4 16 LOAD_GLOBAL 1 ( int )					  
    twoDigit = ( int ) ( n [ l - 1 ] ) * 10 + ( int ) ( n [ 0 18 LOAD_FAST 0 ( n )					    18 LOAD_FAST 0 ( n )					  
    if ( twoDigit % 4 == 0 ) :				      20 LOAD_CONST 2 ( 0 )					    20 LOAD_CONST 2 ( 0 )					  
	count = count + 1				      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
    return count					      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 STORE_FAST 2 ( oneDigit )				    26 STORE_FAST 2 ( oneDigit )				  
							      								    								  
							      5 28 LOAD_FAST 2 ( oneDigit )				    5 28 LOAD_FAST 2 ( oneDigit )				  
							      30 LOAD_CONST 3 ( 4 )					    30 LOAD_CONST 3 ( 4 )					  
							      32 BINARY_MODULO						    32 BINARY_MODULO						  
							      34 LOAD_CONST 2 ( 0 )					    34 LOAD_CONST 2 ( 0 )					  
							      36 COMPARE_OP 2 ( == )					    36 COMPARE_OP 2 ( == )					  
							      38 POP_JUMP_IF_FALSE 44					    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 40 LOAD_CONST 1 ( 1 )					    6 40 LOAD_CONST 1 ( 1 )					  
							      42 RETURN_VALUE						    42 RETURN_VALUE						  
							      								    								  
							      7 >> 44 LOAD_CONST 2 ( 0 )				    7 >> 44 LOAD_CONST 2 ( 0 )					  
							      46 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      8 >> 48 LOAD_CONST 2 ( 0 )				    8 >> 48 LOAD_CONST 2 ( 0 )					  
							      50 STORE_FAST 3 ( count )					    50 STORE_FAST 3 ( count )					  
							      								    								  
							      9 52 SETUP_LOOP 74 ( to 128 )				    9 52 SETUP_LOOP 120 ( to 174 )				  
							      54 LOAD_GLOBAL 2 ( range )				    54 LOAD_GLOBAL 2 ( range )					  
							      56 LOAD_CONST 2 ( 0 )					    56 LOAD_CONST 2 ( 0 )					  
							      58 LOAD_FAST 1 ( l )					    58 LOAD_FAST 1 ( l )					  
							      60 LOAD_CONST 1 ( 1 )					    60 LOAD_CONST 1 ( 1 )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBTRACT						  
							      64 CALL_FUNCTION 2					    64 CALL_FUNCTION 2						  
							      66 GET_ITER						    66 GET_ITER							  
							      >> 68 FOR_ITER 56 ( to 126 )				    >> 68 FOR_ITER 104 ( to 172 )				  
							      70 STORE_FAST 4 ( i )					    70 STORE_FAST 4 ( i )					  
							      								    								  
							      10 72 LOAD_GLOBAL 1 ( int )				    10 72 LOAD_GLOBAL 1 ( int )					  
							      74 LOAD_FAST 0 ( n )					    74 LOAD_FAST 0 ( n )					  
							      76 LOAD_FAST 4 ( i )					    76 LOAD_FAST 4 ( i )					  
							      78 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      80 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      82 LOAD_CONST 4 ( 10 )					    82 LOAD_CONST 4 ( 10 )					  
							      84 BINARY_MULTIPLY					    84 BINARY_MULTIPLY						  
							      86 LOAD_GLOBAL 1 ( int )					    86 LOAD_FAST 2 ( int )					  
							      88 LOAD_FAST 0 ( n )					    88 LOAD_FAST 0 ( n )					  
							      90 LOAD_FAST 4 ( i )					    90 LOAD_FAST 4 ( i )					  
							      92 LOAD_CONST 1 ( 1 )					    92 LOAD_CONST 1 ( 1 )					  
							      94 BINARY_ADD						    94 BINARY_ADD						  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 CALL_FUNCTION 1					    98 BINARY_ADD						  
							      100 BINARY_ADD						    100 STORE_FAST 5 ( twoDigit )				  
							      102 STORE_FAST 5 ( twoDigit )				    								  
							      								    11 102 LOAD_FAST 5 ( twoDigit )				  
							      11 104 LOAD_FAST 5 ( twoDigit )				    104 LOAD_CONST 3 ( 4 )					  
							      106 LOAD_CONST 3 ( 4 )					    106 BINARY_MODULO						  
							      108 BINARY_MODULO						    108 LOAD_CONST 2 ( 0 )					  
							      110 LOAD_CONST 2 ( 0 )					    110 COMPARE_OP 2 ( == )					  
							      112 COMPARE_OP 2 ( == )					    112 POP_JUMP_IF_FALSE 68					  
							      114 POP_JUMP_IF_FALSE 68					    								  
							      								    12 114 LOAD_FAST 3 ( count )				  
							      12 116 LOAD_FAST 3 ( count )				    116 LOAD_CONST 1 ( 1 )					  
							      118 LOAD_CONST 1 ( 1 )					    118 BINARY_ADD						  
							      120 BINARY_ADD						    120 STORE_FAST 3 ( count )					  
							      122 STORE_FAST 3 ( count )				    122 JUMP_ABSOLUTE 68					  
							      124 JUMP_ABSOLUTE 68					    124 POP_BLOCK						  
							      >> 126 POP_BLOCK						    126 LOAD_CONST 0 ( None )					  
							      								    >> 128 WITH_CLEANUP_START					  
							      13 >> 128 LOAD_GLOBAL 1 ( int )				    130 WITH_CLEANUP_FINISH					  
							      130 LOAD_FAST 0 ( n )					    132 END_FINALLY						  
							      132 LOAD_FAST 1 ( l )					    								  
							      134 LOAD_CONST 1 ( 1 )					    13 134 LOAD_GLOBAL 1 ( int )				  
							      136 BINARY_SUBTRACT					    136 LOAD_FAST 0 ( n )					  
							      138 BINARY_SUBSCR						    138 LOAD_FAST 1 ( l )					  
							      140 CALL_FUNCTION 1					    140 LOAD_CONST 1 ( 1 )					  
							      142 LOAD_CONST 4 ( 10 )					    142 BINARY_SUBTRACT						  
							      144 BINARY_MULTIPLY					    144 BINARY_SUBSCR						  
							      146 LOAD_GLOBAL 1 ( int )					    146 CALL_FUNCTION 1						  
							      148 LOAD_FAST 0 ( n )					    148 LOAD_CONST 4 ( 10 )					  
							      150 LOAD_CONST 2 ( 0 )					    150 BINARY_MULTIPLY						  
							      152 BINARY_SUBSCR						    152 LOAD_GLOBAL 1 ( int )					  
							      154 CALL_FUNCTION 1					    154 LOAD_FAST 0 ( n )					  
							      156 BINARY_ADD						    156 LOAD_CONST 2 ( 0 )					  
							      158 STORE_FAST 5 ( twoDigit )				    158 BINARY_SUBSCR						  
							      								    160 CALL_FUNCTION 1						  
							      14 160 LOAD_FAST 5 ( twoDigit )				    162 BINARY_ADD						  
							      162 LOAD_CONST 3 ( 4 )					    164 STORE_FAST 5 ( two)					  
							      164 BINARY_MODULO						    								  
							      166 LOAD_CONST 2 ( 0 )					    14 166 LOAD_FAST 5 ( twoDigit )				  
							      168 COMPARE_OP 2 ( == )					    168 LOAD_CONST 3 ( 4 )					  
							      170 POP_JUMP_IF_FALSE 180					    170 BINARY_MODULO						  
							      								    172 LOAD_CONST 2 ( 0 )					  
							      15 172 LOAD_FAST 3 ( count )				    174 COMPARE_OP 2 ( == )					  
							      174 LOAD_CONST 1 ( 1 )					    176 POP_JUMP_IF_FALSE 68					  
							      176 BINARY_ADD						    								  
							      178 STORE_FAST 3 ( count )				    15 178 LOAD_FAST 3 ( count )				  
							      								    180 LOAD_CONST 1 ( 1 )					  
							      16 >> 180 LOAD_FAST 3 ( count )				    182 BINARY_ADD						  
							      182 RETURN_VALUE NEW_LINE					    184 STORE_FAST 3 ( count )					  
							      								    186 JUMP_ABSOLUTE 68					  
							      								    >> 188 POP_BLOCK						  
							      								    								  
							      								    16 >> 190 LOAD_FAST 3 ( count )				  
							      								    192 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1		  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1
--							      --							    --								  --
def minMaxProduct ( arr1 , arr2 , n1 , n2 ) :		      Disassembly of <code object minMaxProduct at 0x7f33e2644f60,  Disassembly of <code object minMaxProduct at 0x7f2b0163dc90,  script_not_found : None
    max = arr1 [ 0 ]					      2 0 LOAD_FAST 0 ( arr1 )					    2 0 LOAD_FAST 0 ( arr1 )					  
    min = arr2 [ 0 ]					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    i = 1						      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
    while ( i < n1 and i < n2 ) :			      6 STORE_FAST 4 ( max )					    6 STORE_FAST 4 ( max )					  
	if ( arr1 [ i ] > max ) :			      								    								  
	    max = arr1 [ i ]				      3 8 LOAD_FAST 1 ( arr2 )					    3 8 LOAD_FAST 1 ( arr2 )					  
	if ( arr2 [ i ] < min ) :			      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
	    min = arr2 [ i ]				      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
	i += 1						      14 STORE_FAST 5 ( min )					    14 STORE_FAST 5 ( min )					  
    while ( i < n1 ) :					      								    								  
	if ( arr1 [ i ] > max ) :			      4 16 LOAD_CONST 2 ( 1 )					    4 16 LOAD_CONST 2 ( 1 )					  
	    max = arr1 [ i ]				      18 STORE_FAST 6 ( i )					    18 STORE_FAST 6 ( i )					  
	    i += 1					      								    								  
    while ( i < n2 ) :					      5 20 SETUP_LOOP 68 ( to 90 )				    5 20 SETUP_LOOP 46 ( to 66 )				  
	if ( arr2 [ i ] < min ) :			      >> 22 LOAD_FAST 6 ( i )					    >> 22 LOAD_FAST 6 ( i )					  
	    min = arr2 [ i ]				      24 LOAD_FAST 2 ( n1 )					    24 LOAD_FAST 2 ( n1 )					  
	    i += 1					      26 COMPARE_OP 0 ( < )					    26 COMPARE_OP 0 ( < )					  
    return max * min					      28 POP_JUMP_IF_FALSE 88					    28 POP_JUMP_IF_FALSE 64					  
							      30 LOAD_FAST 6 ( i )					    30 LOAD_FAST 6 ( i )					  
							      32 LOAD_FAST 3 ( n2 )					    32 LOAD_FAST 3 ( n2 )					  
							      34 COMPARE_OP 0 ( < )					    34 COMPARE_OP 0 ( < )					  
							      36 POP_JUMP_IF_FALSE 88					    36 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      6 38 LOAD_FAST 0 ( arr1 )					    6 38 LOAD_FAST 0 ( arr1 )					  
							      40 LOAD_FAST 6 ( i )					    40 LOAD_FAST 6 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 4 ( max )					    44 LOAD_FAST 4 ( max )					  
							      46 COMPARE_OP 4 ( > )					    46 COMPARE_OP 4 ( > )					  
							      48 POP_JUMP_IF_FALSE 58					    48 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      7 50 LOAD_FAST 0 ( arr1 )					    7 50 LOAD_FAST 0 ( arr1 )					  
							      52 LOAD_FAST 6 ( i )					    52 LOAD_FAST 6 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 STORE_FAST 4 ( max )					    56 STORE_FAST 4 ( max )					  
							      								    								  
							      8 >> 58 LOAD_FAST 1 ( arr2 )				    8 >> 58 LOAD_FAST 1 ( arr2 )				  
							      60 LOAD_FAST 6 ( i )					    60 LOAD_FAST 6 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_FAST 5 ( min )					    64 LOAD_FAST 5 ( min )					  
							      66 COMPARE_OP 0 ( < )					    66 COMPARE_OP 0 ( < )					  
							      68 POP_JUMP_IF_FALSE 78					    68 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      9 70 LOAD_FAST 1 ( arr2 )					    9 70 LOAD_FAST 1 ( arr2 )					  
							      72 LOAD_FAST 6 ( i )					    72 LOAD_FAST 6 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 STORE_FAST 5 ( min )					    76 STORE_FAST 5 ( min )					  
							      								    								  
							      10 >> 78 LOAD_FAST 6 ( i )				    10 >> 78 LOAD_FAST 6 ( i )					  
							      80 LOAD_CONST 2 ( 1 )					    80 LOAD_CONST 2 ( 1 )					  
							      82 INPLACE_ADD						    82 INPLACE_ADD						  
							      84 STORE_FAST 6 ( i )					    84 STORE_FAST 6 ( i )					  
							      86 JUMP_ABSOLUTE 22					    								  
							      >> 88 POP_BLOCK						    11 >> 86 SETUP_LOOP 52 ( to 154 )				  
							      								    >> 88 LOAD_FAST 6 ( i )					  
							      11 >> 90 SETUP_LOOP 40 ( to 132 )				    90 LOAD_FAST 2 ( n1 )					  
							      >> 92 LOAD_FAST 6 ( i )					    92 COMPARE_OP 0 ( < )					  
							      94 LOAD_FAST 2 ( n1 )					    94 POP_JUMP_IF_FALSE 142					  
							      96 COMPARE_OP 0 ( < )					    								  
							      98 POP_JUMP_IF_FALSE 130					    12 96 LOAD_FAST 0 ( arr1 )					  
							      								    98 LOAD_FAST 6 ( i )					  
							      12 100 LOAD_FAST 0 ( arr1 )				    100 BINARY_SUBSCR						  
							      102 LOAD_FAST 6 ( i )					    102 LOAD_FAST 4 ( max )					  
							      104 BINARY_SUBSCR						    104 COMPARE_OP 4 ( > )					  
							      106 LOAD_FAST 4 ( max )					    106 POP_JUMP_IF_FALSE 112					  
							      108 COMPARE_OP 4 ( > )					    								  
							      110 POP_JUMP_IF_FALSE 92					    13 108 LOAD_FAST 0 ( arr1 )					  
							      								    110 LOAD_FAST 6 ( i )					  
							      13 112 LOAD_FAST 0 ( arr1 )				    112 BINARY_SUBSCR						  
							      114 LOAD_FAST 6 ( i )					    114 STORE_FAST 4 ( max )					  
							      116 BINARY_SUBSCR						    								  
							      118 STORE_FAST 4 ( max )					    14 116 LOAD_FAST 6 ( i )					  
							      								    118 LOAD_CONST 2 ( 1 )					  
							      14 120 LOAD_FAST 6 ( i )					    120 INPLACE_ADD						  
							      122 LOAD_CONST 2 ( 1 )					    122 STORE_FAST 6 ( i )					  
							      124 INPLACE_ADD						    124 JUMP_ABSOLUTE 88					  
							      126 STORE_FAST 6 ( i )					    >> 126 POP_BLOCK						  
							      128 JUMP_ABSOLUTE 92					    								  
							      >> 130 POP_BLOCK						    15 >> 128 SETUP_LOOP 54 ( to 194 )				  
							      								    >> 130 LOAD_FAST 6 ( i )					  
							      15 >> 132 SETUP_LOOP 40 ( to 174 )			    132 LOAD_FAST 3 ( n2 )					  
							      >> 134 LOAD_FAST 6 ( i )					    134 COMPARE_OP 0 ( < )					  
							      136 LOAD_FAST 3 ( n2 )					    136 POP_JUMP_IF_FALSE 192					  
							      138 COMPARE_OP 0 ( < )					    								  
							      140 POP_JUMP_IF_FALSE 172					    16 138 LOAD_FAST 1 ( arr2 )					  
							      								    140 LOAD_FAST 6 ( i )					  
							      16 142 LOAD_FAST 1 ( arr2 )				    142 BINARY_SUBSCR						  
							      144 LOAD_FAST 6 ( i )					    144 LOAD_FAST 5 ( min )					  
							      146 BINARY_SUBSCR						    146 COMPARE_OP 0 ( < )					  
							      148 LOAD_FAST 5 ( min )					    148 POP_JUMP_IF_FALSE 130					  
							      150 COMPARE_OP 0 ( < )					    								  
							      152 POP_JUMP_IF_FALSE 134					    17 150 LOAD_FAST 1 ( arr2 )					  
							      								    152 LOAD_FAST 6 ( i )					  
							      17 154 LOAD_FAST 1 ( arr2 )				    154 BINARY_SUBSCR						  
							      156 LOAD_FAST 6 ( i )					    156 STORE_FAST 5 ( min )					  
							      158 BINARY_SUBSCR						    								  
							      160 STORE_FAST 5 ( min )					    18 158 LOAD_FAST 6 ( i )					  
							      								    160 LOAD_CONST 2 ( 1 )					  
							      18 162 LOAD_FAST 6 ( i )					    162 INPLACE_ADD						  
							      164 LOAD_CONST 2 ( 1 )					    164 STORE_FAST 6 ( i )					  
							      166 INPLACE_ADD						    166 JUMP_ABSOLUTE 130					  
							      168 STORE_FAST 6 ( i )					    >> 168 POP_BLOCK						  
							      170 JUMP_ABSOLUTE 134					    								  
							      >> 172 POP_BLOCK						    19 >> 170 LOAD_FAST 4 ( max )				  
							      								    172 LOAD_FAST 5 ( min )					  
							      19 >> 174 LOAD_FAST 4 ( max )				    174 BINARY_MULTIPLY						  
							      176 LOAD_FAST 5 ( min )					    176 RETURN_VALUE NEW_LINE					  
							      178 BINARY_MULTIPLY					    								  
							      180 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S
--							      --							    --								  --
def firstnonrepeating ( Str ) :				      Disassembly of <code object firstnonrepeating at 0x7f33e2644f Disassembly of <code object firstnonrepeating at 0x7f2b0163dc script_not_found : None
    global MAX_CHAR					      3 0 LOAD_GLOBAL 0 ( Queue )				    3 0 LOAD_GLOBAL 0 ( Queue )					  
    q = Queue ( )					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    charCount = [ 0 ] * MAX_CHAR			      4 STORE_FAST 1 ( q )					    4 STORE_FAST 1 ( q )					  
    for i in range ( len ( Str ) ) :			      								    								  
	q.put ( Str [ i ] )				      4 6 LOAD_CONST 1 ( 0 )					    4 6 LOAD_CONST 1 ( 0 )					  
	charCount [ ord ( Str [ i ] ) - ord ( 'a' ) ] += 1    8 BUILD_LIST 1						    8 BUILD_LIST 1						  
	while ( not q.empty ( ) ) :			      10 LOAD_GLOBAL 1 ( MAX_CHAR )				    10 LOAD_GLOBAL 1 ( MAX_CHAR )				  
	    if ( charCount [ ord ( q.queue [ 0 ] ) - ord ( 'a 12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  
		q.get ( )				      14 STORE_FAST 2 ( charCount )				    14 STORE_FAST 2 ( charCount )				  
	    else :					      								    								  
		print ( q.queue [ 0 ] , end = " " )	      5 16 SETUP_LOOP 160 ( to 178 )				    5 16 SETUP_LOOP 108 ( to 122 )				  
		break					      18 LOAD_GLOBAL 2 ( range )				    18 LOAD_GLOBAL 2 ( range )					  
	if ( q.empty ( ) ) :				      20 LOAD_GLOBAL 3 ( len )					    20 LOAD_GLOBAL 3 ( len )					  
	    print ( - 1 , end = " " )			      22 LOAD_FAST 0 ( Str )					    22 LOAD_FAST 0 ( Str )					  
    print ( )						      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 144 ( to 176 )				    >> 30 FOR_ITER 88 ( to 120 )				  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 3 ( i )					  
							      								    								  
							      6 34 LOAD_FAST 1 ( q )					    6 34 LOAD_FAST 1 ( q )					  
							      36 LOAD_METHOD 4 ( put )					    36 LOAD_METHOD 4 ( put )					  
							      38 LOAD_FAST 0 ( Str )					    38 LOAD_FAST 0 ( Str )					  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 3 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 CALL_METHOD 1						    44 CALL_METHOD 1						  
							      46 POP_TOP						    46 POP_TOP							  
							      								    								  
							      7 48 LOAD_FAST 2 ( charCount )				    7 48 LOAD_FAST 2 ( charCount )				  
							      50 LOAD_GLOBAL 5 ( ord )					    50 LOAD_GLOBAL 5 ( ord )					  
							      52 LOAD_FAST 0 ( Str )					    52 LOAD_FAST 0 ( Str )					  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_FAST 3 ( i )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 CALL_FUNCTION 1					    58 CALL_FUNCTION 1						  
							      60 LOAD_GLOBAL 5 ( ord )					    60 LOAD_GLOBAL 5 ( ord )					  
							      62 LOAD_CONST 2 ( 'a' )					    62 LOAD_CONST 2 ( 'a' )					  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBTRACT						  
							      68 DUP_TOP_TWO						    68 DUP_TOP_TWO						  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_CONST 3 ( 1 )					    72 LOAD_CONST 3 ( 1 )					  
							      74 INPLACE_ADD						    74 INPLACE_ADD						  
							      76 ROT_THREE						    76 ROT_THREE						  
							      78 STORE_SUBSCR						    78 STORE_SUBSCR						  
							      								    								  
							      8 80 SETUP_LOOP 72 ( to 154 )				    8 80 SETUP_LOOP 72 ( to 118 )				  
							      >> 82 LOAD_FAST 1 ( q )					    82 LOAD_FAST 1 ( q )					  
							      84 LOAD_METHOD 6 ( empty )				    84 LOAD_METHOD 6 ( empty )					  
							      86 CALL_METHOD 0						    86 CALL_METHOD 0						  
							      88 POP_JUMP_IF_TRUE 152					    88 POP_JUMP_IF_TRUE 30					  
							      								    								  
							      9 90 LOAD_FAST 2 ( charCount )				    9 90 LOAD_FAST 2 ( charCount )				  
							      92 LOAD_GLOBAL 5 ( ord )					    92 LOAD_GLOBAL 5 ( ord )					  
							      94 LOAD_FAST 1 ( q )					    94 LOAD_FAST 1 ( q )					  
							      96 LOAD_ATTR 7 ( queue )					    96 LOAD_ATTR 7 ( queue )					  
							      98 LOAD_CONST 1 ( 0 )					    98 LOAD_CONST 1 ( 0 )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 CALL_FUNCTION 1					    102 CALL_FUNCTION 1						  
							      104 LOAD_GLOBAL 5 ( ord )					    104 LOAD_GLOBAL 5 ( ord )					  
							      106 LOAD_CONST 2 ( 'a' )					    106 LOAD_CONST 2 ( 'a' )					  
							      108 CALL_FUNCTION 1					    108 CALL_FUNCTION 1						  
							      110 BINARY_SUBTRACT					    110 BINARY_SUBTRACT						  
							      112 BINARY_SUBSCR						    112 BINARY_SUBSCR						  
							      114 LOAD_CONST 3 ( 1 )					    114 LOAD_CONST 3 ( 1 )					  
							      116 COMPARE_OP 4 ( > )					    116 COMPARE_OP 4 ( > )					  
							      118 POP_JUMP_IF_FALSE 130					    118 POP_JUMP_IF_FALSE 132					  
							      								    								  
							      10 120 LOAD_FAST 1 ( q )					    10 120 LOAD_FAST 1 ( q )					  
							      122 LOAD_METHOD 8 ( get )					    122 LOAD_METHOD 8 ( get )					  
							      124 CALL_METHOD 0						    124 CALL_METHOD 0						  
							      126 POP_TOP						    126 POP_TOP							  
							      128 JUMP_ABSOLUTE 82					    128 JUMP_FORWARD 18 ( to 144 )				  
							      								    								  
							      12 >> 130 LOAD_GLOBAL 9 ( print )				    12 >> 130 LOAD_GLOBAL 9 ( print )				  
							      132 LOAD_FAST 1 ( q )					    132 LOAD_FAST 1 ( q )					  
							      134 LOAD_ATTR 7 ( queue )					    134 LOAD_ATTR 7 ( queue )					  
							      136 LOAD_CONST 1 ( 0 )					    136 LOAD_CONST 1 ( 0 )					  
							      138 BINARY_SUBSCR						    138 BINARY_SUBSCR						  
							      140 LOAD_CONST 4 ( ' ' )					    140 LOAD_CONST 4 ( ' ' )					  
							      142 LOAD_CONST 5 ( ( 'end' , ) )				    142 LOAD_CONST 5 ( ( 'end' , ) )				  
							      144 CALL_FUNCTION_KW 2					    144 CALL_FUNCTION_KW 2					  
							      146 POP_TOP						    146 POP_TOP							  
							      								    								  
							      13 148 BREAK_LOOP						    13 148 BREAK_LOOP						  
							      150 JUMP_ABSOLUTE 82					    								  
							      >> 152 POP_BLOCK						    14 >> 150 LOAD_FAST 1 ( q )					  
							      								    152 LOAD_METHOD 6 ( empty )					  
							      14 >> 154 LOAD_FAST 1 ( q )				    154 CALL_METHOD 0						  
							      156 LOAD_METHOD 6 ( empty )				    156 POP_JUMP_IF_FALSE 166					  
							      158 CALL_METHOD 0						    								  
							      160 POP_JUMP_IF_FALSE 30					    15 158 LOAD_GLOBAL 9 ( print )				  
							      								    160 LOAD_CONST 6 ( - 1 )					  
							      15 162 LOAD_GLOBAL 9 ( print )				    162 LOAD_CONST 4 ( ' ' )					  
							      164 LOAD_CONST 6 ( - 1 )					    164 LOAD_CONST 5 ( ( 'end' , ) )				  
							      166 LOAD_CONST 4 ( ' ' )					    166 CALL_FUNCTION_KW 2					  
							      168 LOAD_CONST 5 ( ( 'end' , ) )				    168 POP_TOP							  
							      170 CALL_FUNCTION_KW 2					    								  
							      172 POP_TOP						    16 >> 170 LOAD_GLOBAL 9 ( print )				  
							      174 JUMP_ABSOLUTE 30					    172 CALL_FUNCTION 0						  
							      >> 176 POP_BLOCK						    174 POP_TOP							  
							      								    176 JUMP_ABSOLUTE 30					  
							      16 >> 178 LOAD_GLOBAL 9 ( print )				    >> 178 POP_BLOCK						  
							      180 CALL_FUNCTION 0					    								  
							      182 POP_TOP						    17 >> 180 LOAD_GLOBAL 9 ( print )				  
							      184 LOAD_CONST 0 ( None )					    182 CALL_FUNCTION 0						  
							      186 RETURN_VALUE NEW_LINE					    184 POP_TOP							  
							      								    186 LOAD_CONST 0 ( None )					  
							      								    188 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1			      CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1			    CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1				  CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1
--							      --							    --								  --
def areKAnagrams ( str1 , str2 , k ) :			      Disassembly of <code object areKAnagrams at 0x7f33e2644f60, f Disassembly of <code object areKAnagrams at 0x7f2b0163dc90, f script_not_found : None
    n = len ( str1 ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    if ( len ( str2 ) != n ) :				      2 LOAD_FAST 0 ( str1 )					    2 LOAD_FAST 0 ( str1 )					  
	return False ;					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    hash_str1 = [ 0 ] * ( MAX_CHAR ) ;			      6 STORE_FAST 3 ( n )					    6 STORE_FAST 3 ( n )					  
    for i in range ( n ) :				      								    								  
	hash_str1 [ ord ( str1 [ i ] ) - ord ( 'a' ) ] += 1 ; 3 8 LOAD_GLOBAL 0 ( len )					    3 8 LOAD_GLOBAL 0 ( len )					  
    count = 0 ;						      10 LOAD_FAST 1 ( str2 )					    10 LOAD_FAST 1 ( str2 )					  
    for i in range ( n ) :				      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	if ( hash_str1 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] > 14 LOAD_FAST 3 ( n )					    14 LOAD_FAST 3 ( n )					  
	    hash_str1 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] -= 16 COMPARE_OP 3 ( != )					    16 COMPARE_OP 3 ( != )					  
	else :						      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
	    count += 1 ;				      								    								  
	if ( count > k ) :				      4 20 LOAD_CONST 1 ( False )				    4 20 LOAD_CONST 1 ( False )					  
	    return False ;				      22 RETURN_VALUE						    22 RETURN_VALUE						  
    return True ;					      								    								  
							      5 >> 24 LOAD_CONST 2 ( 0 )				    5 >> 24 LOAD_CONST 2 ( 0 )					  
							      26 BUILD_LIST 1						    26 BUILD_LIST 1						  
							      28 LOAD_GLOBAL 1 ( MAX_CHAR )				    28 LOAD_GLOBAL 1 ( MAX_CHAR )				  
							      30 BINARY_MULTIPLY					    30 BINARY_MULTIPLY						  
							      32 STORE_FAST 4 ( hash_str1 )				    32 STORE_FAST 4 ( hash_str1 )				  
							      								    								  
							      6 34 SETUP_LOOP 48 ( to 84 )				    6 34 SETUP_LOOP 46 ( to 78 )				  
							      36 LOAD_GLOBAL 2 ( range )				    36 LOAD_GLOBAL 2 ( range )					  
							      38 LOAD_FAST 3 ( n )					    38 LOAD_FAST 3 ( n )					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 36 ( to 82 )				    >> 44 FOR_ITER 34 ( to 76 )					  
							      46 STORE_FAST 5 ( i )					    46 STORE_FAST 5 ( i )					  
							      								    								  
							      7 48 LOAD_FAST 4 ( hash_str1 )				    7 48 LOAD_FAST 4 ( hash_str1 )				  
							      50 LOAD_GLOBAL 3 ( ord )					    50 LOAD_GLOBAL 3 ( ord )					  
							      52 LOAD_FAST 0 ( str1 )					    52 LOAD_FAST 0 ( str1 )					  
							      54 LOAD_FAST 5 ( i )					    54 LOAD_FAST 5 ( i )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 CALL_FUNCTION 1					    58 CALL_FUNCTION 1						  
							      60 LOAD_GLOBAL 3 ( ord )					    60 LOAD_GLOBAL 3 ( ord )					  
							      62 LOAD_CONST 3 ( 'a' )					    62 LOAD_CONST 3 ( 'a' )					  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBTRACT						  
							      68 DUP_TOP_TWO						    68 BINARY_SUBSCR						  
							      70 BINARY_SUBSCR						    70 LOAD_CONST 4 ( 1 )					  
							      72 LOAD_CONST 4 ( 1 )					    72 INPLACE_ADD						  
							      74 INPLACE_ADD						    74 ROT_THREE						  
							      76 ROT_THREE						    >> 76 STORE_SUBSCR						  
							      78 STORE_SUBSCR						    78 JUMP_ABSOLUTE 44						  
							      80 JUMP_ABSOLUTE 44					    >> 80 POP_BLOCK						  
							      >> 82 POP_BLOCK						    								  
							      								    8 >> 82 LOAD_CONST 2 ( 0 )					  
							      8 >> 84 LOAD_CONST 2 ( 0 )				    84 STORE_FAST 6 ( count )					  
							      86 STORE_FAST 6 ( count )					    								  
							      								    9 86 SETUP_LOOP 96 ( to 234 )				  
							      9 88 SETUP_LOOP 98 ( to 188 )				    88 LOAD_GLOBAL 2 ( range )					  
							      90 LOAD_GLOBAL 2 ( range )				    90 LOAD_FAST 3 ( n )					  
							      92 LOAD_FAST 3 ( n )					    92 CALL_FUNCTION 1						  
							      94 CALL_FUNCTION 1					    94 GET_ITER							  
							      96 GET_ITER						    >> 96 FOR_ITER 80 ( to 232 )				  
							      >> 98 FOR_ITER 86 ( to 186 )				    98 STORE_FAST 5 ( i )					  
							      100 STORE_FAST 5 ( i )					    								  
							      								    10 100 LOAD_FAST 4 ( hash_str1 )				  
							      10 102 LOAD_FAST 4 ( hash_str1 )				    102 LOAD_FAST 3 ( n )					  
							      104 LOAD_GLOBAL 3 ( ord )					    104 BINARY_SUBSCR						  
							      106 LOAD_FAST 1 ( str2 )					    106 LOAD_GLOBAL 3 ( ord )					  
							      108 LOAD_FAST 5 ( i )					    108 LOAD_CONST 3 ( 'a' )					  
							      110 BINARY_SUBSCR						    110 CALL_FUNCTION 1						  
							      112 CALL_FUNCTION 1					    112 BINARY_SUBTRACT						  
							      114 LOAD_GLOBAL 3 ( ord )					    114 BINARY_SUBSCR						  
							      116 LOAD_CONST 3 ( 'a' )					    116 LOAD_CONST 2 ( 0 )					  
							      118 CALL_FUNCTION 1					    118 COMPARE_OP 4 ( > )					  
							      120 BINARY_SUBTRACT					    120 POP_JUMP_IF_FALSE 132					  
							      122 BINARY_SUBSCR						    								  
							      124 LOAD_CONST 2 ( 0 )					    11 122 LOAD_FAST 4 ( hash_str1 )				  
							      126 COMPARE_OP 4 ( > )					    124 LOAD_FAST 3 ( n )					  
							      128 POP_JUMP_IF_FALSE 164					    126 BINARY_SUBSCR						  
							      								    128 LOAD_GLOBAL 3 ( ord )					  
							      11 130 LOAD_FAST 4 ( hash_str1 )				    130 LOAD_CONST 3 ( 'a' )					  
							      132 LOAD_GLOBAL 3 ( ord )					    132 CALL_FUNCTION 1						  
							      134 LOAD_FAST 1 ( str2 )					    134 BINARY_SUBTRACT						  
							      136 LOAD_FAST 5 ( i )					    136 BINARY_SUBSCR						  
							      138 BINARY_SUBSCR						    138 LOAD_CONST 2 ( 0 )					  
							      140 CALL_FUNCTION 1					    140 COMPARE_OP 4 ( > )					  
							      142 LOAD_GLOBAL 3 ( ord )					    142 POP_JUMP_IF_FALSE 166					  
							      144 LOAD_CONST 3 ( 'a' )					    								  
							      146 CALL_FUNCTION 1					    12 144 LOAD_FAST 4 ( hash_str1 )				  
							      148 BINARY_SUBTRACT					    146 LOAD_FAST 3 ( n )					  
							      150 DUP_TOP_TWO						    148 LOAD_GLOBAL 3 ( ord )					  
							      152 BINARY_SUBSCR						    150 LOAD_FAST 1 ( str2 )					  
							      154 LOAD_CONST 4 ( 1 )					    152 LOAD_FAST 5 ( i )					  
							      156 INPLACE_SUBTRACT					    154 BINARY_SUBSCR						  
							      158 ROT_THREE						    156 CALL_FUNCTION 1						  
							      160 STORE_SUBSCR						    158 LOAD_GLOBAL 3 ( ord )					  
							      162 JUMP_FORWARD 8 ( to 172 )				    160 LOAD_CONST 3 ( 'a' )					  
							      								    162 CALL_FUNCTION 1						  
							      13 >> 164 LOAD_FAST 6 ( count )				    164 BINARY_SUBTRACT						  
							      166 LOAD_CONST 4 ( 1 )					    166 BINARY_SUBSCR						  
							      168 INPLACE_ADD						    168 LOAD_CONST 4 ( 1 )					  
							      170 STORE_FAST 6 ( count )				    170 INPLACE_SUBTRACT					  
							      								    172 STORE_FAST 4 ( hash_str1 )				  
							      14 >> 172 LOAD_FAST 6 ( count )				    174 JUMP_FORWARD 8 ( to 196 )				  
							      174 LOAD_FAST 2 ( k )					    								  
							      176 COMPARE_OP 4 ( > )					    14 >> 176 LOAD_FAST 6 ( count )				  
							      178 POP_JUMP_IF_FALSE 98					    178 LOAD_CONST 4 ( 1 )					  
							      								    180 INPLACE_ADD						  
							      15 180 LOAD_CONST 1 ( False )				    182 STORE_FAST 6 ( count )					  
							      182 RETURN_VALUE						    								  
							      184 JUMP_ABSOLUTE 98					    15 >> 184 LOAD_FAST 6 ( count )				  
							      >> 186 POP_BLOCK						    186 LOAD_FAST 1 ( str2 )					  
							      								    188 COMPARE_OP 4 ( > )					  
							      16 >> 188 LOAD_CONST 5 ( True )				    190 POP_JUMP_IF_FALSE 96					  
							      190 RETURN_VALUE NEW_LINE					    								  
							      								    16 192 LOAD_CONST 1 ( False )				  
							      								    194 RETURN_VALUE						  
							      								    								  
							      								    17 >> 196 LOAD_CONST 5 ( True )				  
							      								    198 RETURN_VALUE						  
							      								    200 LOAD_CONST 0 ( None )					  
							      								    202 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS	      ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS		    ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS		  ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS
--							      --							    --								  --
def Round_off ( N , n ) :				      Disassembly of <code object Round_off at 0x7f33e26494b0, file Disassembly of <code object Round_off at 0x7f2b0163dc90, file script_not_found : None
    b = N						      2 0 LOAD_FAST 0 ( N )					    2 0 LOAD_FAST 0 ( N )					  
    c = floor ( N )					      2 STORE_FAST 2 ( b )					    2 STORE_FAST 2 ( b )					  
    i = 0 ;						      								    								  
    while ( b >= 1 ) :					      3 4 LOAD_GLOBAL 0 ( floor )				    3 4 LOAD_GLOBAL 0 ( floor )					  
	b = b / 10					      6 LOAD_FAST 0 ( N )					    6 LOAD_FAST 0 ( N )						  
	i = i + 1					      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
    d = n - i						      10 STORE_FAST 3 ( c )					    10 STORE_FAST 3 ( c )					  
    b = N						      								    								  
    b = b * pow ( 10 , d )				      4 12 LOAD_CONST 1 ( 0 )					    4 12 LOAD_CONST 1 ( 0 )					  
    e = b + 0.5						      14 STORE_FAST 4 ( i )					    14 STORE_FAST 4 ( i )					  
    if ( float ( e ) == float ( ceil ( b ) ) ) :	      								    								  
	f = ( ceil ( b ) )				      5 16 SETUP_LOOP 28 ( to 46 )				    5 16 SETUP_LOOP 32 ( to 52 )				  
	h = f - 2					      >> 18 LOAD_FAST 2 ( b )					    >> 18 LOAD_FAST 2 ( b )					  
	if ( h % 2 != 0 ) :				      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
	    e = e - 1					      22 COMPARE_OP 5 ( >= )					    22 COMPARE_OP 5 ( >= )					  
    j = floor ( e )					      24 POP_JUMP_IF_FALSE 44					    24 POP_JUMP_IF_FALSE 50					  
    m = pow ( 10 , d )					      								    								  
    j = j / m						      6 26 LOAD_FAST 2 ( b )					    6 26 LOAD_FAST 2 ( b )					  
    print ( "The number after rounding-off is" , j )	      28 LOAD_CONST 3 ( 10 )					    28 LOAD_CONST 3 ( 10 )					  
							      30 BINARY_TRUE_DIVIDE					    30 BINARY_TRUE_DIVIDE					  
							      32 STORE_FAST 2 ( b )					    32 STORE_FAST 2 ( b )					  
							      								    								  
							      7 34 LOAD_FAST 4 ( i )					    7 34 LOAD_FAST 4 ( i )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 STORE_FAST 4 ( i )					    40 STORE_FAST 4 ( i )					  
							      42 JUMP_ABSOLUTE 18					    42 JUMP_ABSOLUTE 18						  
							      >> 44 POP_BLOCK						    >> 44 POP_BLOCK						  
							      								    								  
							      8 >> 46 LOAD_FAST 1 ( n )					    8 >> 46 LOAD_FAST 1 ( n )					  
							      48 LOAD_FAST 4 ( i )					    48 LOAD_FAST 4 ( i )					  
							      50 BINARY_SUBTRACT					    50 BINARY_SUBTRACT						  
							      52 STORE_FAST 5 ( d )					    52 STORE_FAST 5 ( d )					  
							      								    								  
							      9 54 LOAD_FAST 0 ( N )					    9 54 LOAD_FAST 0 ( N )					  
							      56 STORE_FAST 2 ( b )					    56 LOAD_GLOBAL 1 ( pow )					  
							      								    58 LOAD_CONST 3 ( 10 )					  
							      10 58 LOAD_FAST 2 ( b )					    60 LOAD_FAST 5 ( d )					  
							      60 LOAD_GLOBAL 1 ( pow )					    62 CALL_FUNCTION 2						  
							      62 LOAD_CONST 3 ( 10 )					    64 BINARY_MULTIPLY						  
							      64 LOAD_FAST 5 ( d )					    66 STORE_FAST 2 ( b )					  
							      66 CALL_FUNCTION 2					    								  
							      68 BINARY_MULTIPLY					    10 68 LOAD_FAST 2 ( b )					  
							      70 STORE_FAST 2 ( b )					    70 LOAD_CONST 4 ( 0.5 )					  
							      								    72 BINARY_ADD						  
							      11 72 LOAD_FAST 2 ( b )					    74 STORE_FAST 6 ( e )					  
							      74 LOAD_CONST 4 ( 0.5 )					    								  
							      76 BINARY_ADD						    11 76 LOAD_GLOBAL 2 ( float )				  
							      78 STORE_FAST 6 ( e )					    78 LOAD_FAST 6 ( e )					  
							      								    80 CALL_FUNCTION 1						  
							      12 80 LOAD_GLOBAL 2 ( float )				    82 LOAD_GLOBAL 2 ( float )					  
							      82 LOAD_FAST 6 ( e )					    84 LOAD_GLOBAL 3 ( ceil )					  
							      84 CALL_FUNCTION 1					    86 LOAD_FAST 2 ( b )					  
							      86 LOAD_GLOBAL 2 ( float )				    88 CALL_FUNCTION 1						  
							      88 LOAD_GLOBAL 3 ( ceil )					    90 CALL_FUNCTION 1						  
							      90 LOAD_FAST 2 ( b )					    92 COMPARE_OP 2 ( == )					  
							      92 CALL_FUNCTION 1					    94 POP_JUMP_IF_FALSE 18					  
							      94 CALL_FUNCTION 1					    								  
							      96 COMPARE_OP 2 ( == )					    12 96 LOAD_GLOBAL 3 ( ceil )				  
							      98 POP_JUMP_IF_FALSE 136					    98 LOAD_FAST 2 ( b )					  
							      								    100 CALL_FUNCTION 1						  
							      13 100 LOAD_GLOBAL 3 ( ceil )				    102 STORE_FAST 7 ( f )					  
							      102 LOAD_FAST 2 ( b )					    								  
							      104 CALL_FUNCTION 1					    13 104 LOAD_FAST 7 ( f )					  
							      106 STORE_FAST 7 ( f )					    106 LOAD_CONST 5 ( 2 )					  
							      								    108 BINARY_SUBTRACT						  
							      14 108 LOAD_FAST 7 ( f )					    110 STORE_FAST 8 ( h )					  
							      110 LOAD_CONST 5 ( 2 )					    								  
							      112 BINARY_SUBTRACT					    14 112 LOAD_FAST 8 ( h )					  
							      114 STORE_FAST 8 ( h )					    114 LOAD_CONST 5 ( 2 )					  
							      								    116 BINARY_MODULO						  
							      15 116 LOAD_FAST 8 ( h )					    118 STORE_FAST 8 ( h )					  
							      118 LOAD_CONST 5 ( 2 )					    								  
							      120 BINARY_MODULO						    15 120 LOAD_FAST 8 ( h )					  
							      122 LOAD_CONST 1 ( 0 )					    122 LOAD_CONST 5 ( 2 )					  
							      124 COMPARE_OP 3 ( != )					    124 BINARY_MODULO						  
							      126 POP_JUMP_IF_FALSE 136					    126 LOAD_CONST 1 ( 0 )					  
							      								    128 COMPARE_OP 3 ( != )					  
							      16 128 LOAD_FAST 6 ( e )					    130 POP_JUMP_IF_FALSE 144					  
							      130 LOAD_CONST 2 ( 1 )					    								  
							      132 BINARY_SUBTRACT					    16 132 LOAD_FAST 6 ( e )					  
							      134 STORE_FAST 6 ( e )					    134 LOAD_CONST 2 ( 1 )					  
							      								    136 BINARY_SUBTRACT						  
							      17 >> 136 LOAD_GLOBAL 0 ( floor )				    138 STORE_FAST 6 ( e )					  
							      138 LOAD_FAST 6 ( e )					    140 JUMP_ABSOLUTE 18					  
							      140 CALL_FUNCTION 1					    142 POP_BLOCK						  
							      142 STORE_FAST 9 ( j )					    								  
							      								    17 >> 144 LOAD_GLOBAL 0 ( floor )				  
							      18 144 LOAD_GLOBAL 1 ( pow )				    146 LOAD_FAST 6 ( e )					  
							      146 LOAD_CONST 3 ( 10 )					    148 CALL_FUNCTION 1						  
							      148 LOAD_FAST 5 ( d )					    150 STORE_FAST 9 ( j )					  
							      150 CALL_FUNCTION 2					    								  
							      152 STORE_FAST 10 ( m )					    18 152 LOAD_GLOBAL 1 ( pow )				  
							      								    154 LOAD_CONST 3 ( 10 )					  
							      19 154 LOAD_FAST 9 ( j )					    156 LOAD_FAST 5 ( d )					  
							      156 LOAD_FAST 10 ( m )					    158 CALL_FUNCTION 2						  
							      158 BINARY_TRUE_DIVIDE					    160 STORE_FAST 10 ( m )					  
							      160 STORE_FAST 9 ( j )					    								  
							      								    19 162 LOAD_FAST 9 ( j )					  
							      20 162 LOAD_GLOBAL 4 ( print )				    164 LOAD_FAST 10 ( m )					  
							      164 LOAD_CONST 6 ( 'The number after rounding-off is' )	    166 BINARY_TRUE_DIVIDE					  
							      166 LOAD_FAST 9 ( j )					    168 STORE_FAST 9 ( j )					  
							      168 CALL_FUNCTION 2					    								  
							      170 POP_TOP						    20 170 LOAD_GLOBAL 4 ( print )				  
							      172 LOAD_CONST 0 ( None )					    172 LOAD_CONST 6 ( 'The number after rounding-off is' )	  
							      174 RETURN_VALUE NEW_LINE					    174 LOAD_FAST 9 ( j )					  
							      								    176 CALL_FUNCTION 2						  
							      								    178 POP_TOP							  
							      								    180 LOAD_CONST 0 ( None )					  
							      								    182 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DERANGEMENT_SEQUENCE				      SMALLEST_DERANGEMENT_SEQUENCE				    SMALLEST_DERANGEMENT_SEQUENCE				  SMALLEST_DERANGEMENT_SEQUENCE
--							      --							    --								  --
def generate_derangement ( N ) :			      Disassembly of <code object generate_derangement at 0x7f33e26 Disassembly of <code object generate_derangement at 0x7f2b016 script_not_found : None
    S = [ 0 ] * ( N + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 1 , N + 1 ) :			      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	S [ i ] = i					      4 LOAD_FAST 0 ( N )					    4 LOAD_FAST 0 ( N )						  
    D = [ 0 ] * ( N + 1 )				      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
    for i in range ( 1 , N + 1 , 2 ) :			      8 BINARY_ADD						    8 BINARY_ADD						  
	if i == N :					      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
	    D [ N ] = S [ N - 1 ]			      12 STORE_FAST 1 ( S )					    12 STORE_FAST 1 ( S )					  
	    D [ N - 1 ] = S [ N ]			      								    								  
	else :						      3 14 SETUP_LOOP 30 ( to 46 )				    3 14 SETUP_LOOP 32 ( to 46 )				  
	    D [ i ] = i + 1				      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_GLOBAL 0 ( range )					  
	    D [ i + 1 ] = i				      18 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 2 ( 1 )					  
    for i in range ( 1 , N + 1 ) :			      20 LOAD_FAST 0 ( N )					    20 LOAD_FAST 0 ( N )					  
	print ( D [ i ] , end = " " )			      22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 2 ( 1 )					  
    print ( )						      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 12 ( to 44 )				    >> 30 FOR_ITER 14 ( to 44 )					  
							      32 STORE_FAST 2 ( i )					    32 STORE_FAST 2 ( i )					  
							      								    								  
							      4 34 LOAD_FAST 2 ( i )					    4 34 LOAD_FAST 2 ( i )					  
							      36 LOAD_FAST 1 ( S )					    36 LOAD_FAST 1 ( S )					  
							      38 LOAD_FAST 2 ( i )					    38 LOAD_FAST 2 ( i )					  
							      40 STORE_SUBSCR						    40 STORE_SUBSCR						  
							      42 JUMP_ABSOLUTE 30					    42 JUMP_ABSOLUTE 30						  
							      >> 44 POP_BLOCK						    >> 44 POP_BLOCK						  
							      								    								  
							      5 >> 46 LOAD_CONST 1 ( 0 )				    5 >> 46 LOAD_CONST 1 ( 0 )					  
							      48 BUILD_LIST 1						    48 BUILD_LIST 1						  
							      50 LOAD_FAST 0 ( N )					    50 LOAD_FAST 0 ( N )					  
							      52 LOAD_CONST 2 ( 1 )					    52 LOAD_CONST 2 ( 1 )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 BINARY_MULTIPLY					    56 BINARY_MULTIPLY						  
							      58 STORE_FAST 3 ( D )					    58 STORE_FAST 3 ( D )					  
							      								    								  
							      6 60 SETUP_LOOP 90 ( to 152 )				    6 60 SETUP_LOOP 136 ( to 194 )				  
							      62 LOAD_GLOBAL 0 ( range )				    62 LOAD_GLOBAL 0 ( range )					  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      66 LOAD_FAST 0 ( N )					    66 LOAD_FAST 0 ( N )					  
							      68 LOAD_CONST 2 ( 1 )					    68 LOAD_CONST 2 ( 1 )					  
							      70 BINARY_ADD						    70 BINARY_ADD						  
							      72 LOAD_CONST 3 ( 2 )					    72 LOAD_CONST 3 ( 2 )					  
							      74 CALL_FUNCTION 3					    74 CALL_FUNCTION 3						  
							      76 GET_ITER						    76 GET_ITER							  
							      >> 78 FOR_ITER 70 ( to 150 )				    >> 78 FOR_ITER 126 ( to 192 )				  
							      80 STORE_FAST 2 ( i )					    80 STORE_FAST 2 ( i )					  
							      								    								  
							      7 82 LOAD_FAST 2 ( i )					    7 82 LOAD_FAST 2 ( i )					  
							      84 LOAD_FAST 0 ( N )					    84 LOAD_FAST 0 ( N )					  
							      86 COMPARE_OP 2 ( == )					    86 COMPARE_OP 2 ( == )					  
							      88 POP_JUMP_IF_FALSE 124					    88 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      8 90 LOAD_FAST 1 ( S )					    8 90 LOAD_FAST 1 ( S )					  
							      92 LOAD_FAST 0 ( N )					    92 LOAD_FAST 0 ( N )					  
							      94 LOAD_CONST 2 ( 1 )					    94 LOAD_CONST 2 ( 1 )					  
							      96 BINARY_SUBTRACT					    96 BINARY_SUBTRACT						  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_FAST 3 ( D )					    100 LOAD_FAST 3 ( D )					  
							      102 LOAD_FAST 0 ( N )					    102 LOAD_FAST 0 ( N )					  
							      104 STORE_SUBSCR						    104 LOAD_CONST 2 ( 1 )					  
							      								    106 BINARY_SUBTRACT						  
							      9 106 LOAD_FAST 1 ( S )					    108 STORE_SUBSCR						  
							      108 LOAD_FAST 0 ( N )					    								  
							      110 BINARY_SUBSCR						    9 >> 110 LOAD_FAST 1 ( S )					  
							      112 LOAD_FAST 3 ( D )					    112 LOAD_FAST 0 ( N )					  
							      114 LOAD_FAST 0 ( N )					    114 BINARY_SUBSCR						  
							      116 LOAD_CONST 2 ( 1 )					    116 LOAD_FAST 3 ( D )					  
							      118 BINARY_SUBTRACT					    118 LOAD_FAST 0 ( N )					  
							      120 STORE_SUBSCR						    120 LOAD_CONST 2 ( 1 )					  
							      122 JUMP_ABSOLUTE 78					    122 BINARY_SUBTRACT						  
							      								    124 STORE_SUBSCR						  
							      11 >> 124 LOAD_FAST 2 ( i )				    126 JUMP_ABSOLUTE 78					  
							      126 LOAD_CONST 2 ( 1 )					    								  
							      128 BINARY_ADD						    11 128 LOAD_FAST 2 ( i )					  
							      130 LOAD_FAST 3 ( D )					    130 LOAD_FAST 3 ( D )					  
							      132 LOAD_FAST 2 ( i )					    132 LOAD_FAST 2 ( i )					  
							      134 STORE_SUBSCR						    134 LOAD_CONST 2 ( 1 )					  
							      								    136 BINARY_ADD						  
							      12 136 LOAD_FAST 2 ( i )					    138 STORE_SUBSCR						  
							      138 LOAD_FAST 3 ( D )					    								  
							      140 LOAD_FAST 2 ( i )					    12 140 LOAD_FAST 2 ( i )					  
							      142 LOAD_CONST 2 ( 1 )					    142 LOAD_FAST 3 ( D )					  
							      144 BINARY_ADD						    144 LOAD_FAST 2 ( i )					  
							      146 STORE_SUBSCR						    146 LOAD_CONST 2 ( 1 )					  
							      148 JUMP_ABSOLUTE 78					    148 BINARY_ADD						  
							      >> 150 POP_BLOCK						    150 STORE_SUBSCR						  
							      								    								  
							      13 >> 152 SETUP_LOOP 38 ( to 192 )			    13 152 SETUP_LOOP 26 ( to 162 )				  
							      154 LOAD_GLOBAL 0 ( range )				    154 LOAD_GLOBAL 0 ( range )					  
							      156 LOAD_CONST 2 ( 1 )					    156 LOAD_CONST 2 ( 1 )					  
							      158 LOAD_FAST 0 ( N )					    158 LOAD_FAST 0 ( N )					  
							      160 LOAD_CONST 2 ( 1 )					    160 LOAD_CONST 2 ( 1 )					  
							      162 BINARY_ADD						    162 BINARY_ADD						  
							      164 CALL_FUNCTION 2					    164 CALL_FUNCTION 2						  
							      166 GET_ITER						    166 GET_ITER						  
							      >> 168 FOR_ITER 20 ( to 190 )				    >> 168 FOR_ITER 14 ( to 160 )				  
							      170 STORE_FAST 2 ( i )					    170 STORE_FAST 2 ( i )					  
							      								    								  
							      14 172 LOAD_GLOBAL 1 ( print )				    14 172 LOAD_GLOBAL 1 ( print )				  
							      174 LOAD_FAST 3 ( D )					    174 LOAD_FAST 3 ( D )					  
							      176 LOAD_FAST 2 ( i )					    176 LOAD_FAST 2 ( i )					  
							      178 BINARY_SUBSCR						    178 BINARY_SUBSCR						  
							      180 LOAD_CONST 4 ( ' ' )					    180 LOAD_CONST 4 ( ' ' )					  
							      182 LOAD_CONST 5 ( ( 'end' , ) )				    182 LOAD_CONST 5 ( ( 'end' , ) )				  
							      184 CALL_FUNCTION_KW 2					    184 CALL_FUNCTION_KW 2					  
							      186 POP_TOP						    186 POP_TOP							  
							      188 JUMP_ABSOLUTE 168					    188 JUMP_ABSOLUTE 168					  
							      >> 190 POP_BLOCK						    >> 190 POP_BLOCK						  
							      								    								  
							      15 >> 192 LOAD_GLOBAL 1 ( print )				    15 >> 192 LOAD_GLOBAL 1 ( print )				  
							      194 CALL_FUNCTION 0					    194 CALL_FUNCTION 0						  
							      196 POP_TOP						    196 POP_TOP							  
							      198 LOAD_CONST 0 ( None )					    198 LOAD_CONST 0 ( None )					  
							      200 RETURN_VALUE NEW_LINE					    200 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		      REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		    REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		  REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX
--							      --							    --								  --
def minRemovalsDP ( arr , n ) :				      Disassembly of <code object minRemovalsDP at 0x7f33e2653f60,  Disassembly of <code object minRemovalsDP at 0x7f2b0163dc90,  error : /bin/bash: line 1:  5038 Segmentation faul
    longest_start = - 1 ;				      2 0 LOAD_CONST 1 ( - 1 )					    2 0 LOAD_CONST 1 ( - 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    longest_end = 0 ;					      2 STORE_FAST 2 ( longest_start )				    2 STORE_FAST 2 ( longest_start )				  ataset/bin/python XLM/dis_script.py --script_path
    for start in range ( n ) :				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	min = sys.maxsize ;				      3 4 LOAD_CONST 2 ( 0 )					    3 4 LOAD_CONST 2 ( 0 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/REMOVE
	max = - sys.maxsize ;				      6 STORE_FAST 3 ( longest_end )				    6 STORE_FAST 3 ( longest_end )				  _MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX.dis
	for end in range ( start , n ) :		      								    								  
	    val = arr [ end ] ;				      4 8 SETUP_LOOP 128 ( to 138 )				    4 8 SETUP_LOOP 138 ( to 152 )				  
	    if ( val < min ) :				      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
		min = val ;				      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
	    if ( val > max ) :				      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
		max = val ;				      16 GET_ITER						    16 GET_ITER							  
	    if ( 2 * min <= max ) :			      >> 18 FOR_ITER 116 ( to 136 )				    >> 18 FOR_ITER 126 ( to 150 )				  
		break ;					      20 STORE_FAST 4 ( start )					    20 STORE_FAST 4 ( start )					  
	    if ( end - start > longest_end - longest_start or 								    								  
		longest_start = start ;			      5 22 LOAD_GLOBAL 1 ( sys )				    5 22 LOAD_GLOBAL 1 ( sys )					  
		longest_end = end ;			      24 LOAD_ATTR 2 ( maxsize )				    24 LOAD_ATTR 2 ( maxsize )					  
    if ( longest_start == - 1 ) :			      26 STORE_FAST 5 ( min )					    26 STORE_FAST 5 ( min )					  
	return n ;					      								    								  
    return ( n - ( longest_end - longest_start + 1 ) ) ;      6 28 LOAD_GLOBAL 1 ( sys )				    6 28 LOAD_GLOBAL 1 ( sys )					  
							      30 LOAD_ATTR 2 ( maxsize )				    30 LOAD_ATTR 2 ( maxsize )					  
							      32 UNARY_NEGATIVE						    32 UNARY_NEGATIVE						  
							      34 STORE_FAST 6 ( max )					    34 STORE_FAST 6 ( max )					  
							      								    								  
							      7 36 SETUP_LOOP 96 ( to 134 )				    7 36 LOAD_GLOBAL 1 ( sys )					  
							      38 LOAD_GLOBAL 0 ( range )				    38 LOAD_ATTR 2 ( maxsize )					  
							      40 LOAD_FAST 4 ( start )					    40 UNARY_NEGATIVE						  
							      42 LOAD_FAST 1 ( n )					    42 STORE_FAST 7 ( max )					  
							      44 CALL_FUNCTION 2					    								  
							      46 GET_ITER						    8 44 SETUP_LOOP 32 ( to 80 )				  
							      >> 48 FOR_ITER 82 ( to 132 )				    46 LOAD_GLOBAL 0 ( range )					  
							      50 STORE_FAST 7 ( end )					    48 LOAD_FAST 4 ( start )					  
							      								    50 LOAD_FAST 1 ( n )					  
							      8 52 LOAD_FAST 0 ( arr )					    52 CALL_FUNCTION 2						  
							      54 LOAD_FAST 7 ( end )					    54 GET_ITER							  
							      56 BINARY_SUBSCR						    >> 56 FOR_ITER 20 ( to 78 )					  
							      58 STORE_FAST 8 ( val )					    58 STORE_FAST 8 ( end )					  
							      								    								  
							      9 60 LOAD_FAST 8 ( val )					    9 60 LOAD_FAST 0 ( arr )					  
							      62 LOAD_FAST 5 ( min )					    62 LOAD_FAST 8 ( end )					  
							      64 COMPARE_OP 0 ( < )					    64 BINARY_SUBSCR						  
							      66 POP_JUMP_IF_FALSE 72					    66 STORE_FAST 9 ( val )					  
							      								    								  
							      10 68 LOAD_FAST 8 ( val )					    10 68 LOAD_FAST 9 ( val )					  
							      70 STORE_FAST 5 ( min )					    70 LOAD_FAST 5 ( min )					  
							      								    72 COMPARE_OP 0 ( < )					  
							      11 >> 72 LOAD_FAST 8 ( val )				    74 POP_JUMP_IF_FALSE 56					  
							      74 LOAD_FAST 6 ( max )					    								  
							      76 COMPARE_OP 4 ( > )					    11 76 LOAD_FAST 9 ( val )					  
							      78 POP_JUMP_IF_FALSE 84					    78 STORE_FAST 5 ( min )					  
							      								    80 JUMP_ABSOLUTE 56						  
							      12 80 LOAD_FAST 8 ( val )					    >> 82 POP_BLOCK						  
							      82 STORE_FAST 6 ( max )					    								  
							      								    12 >> 84 LOAD_FAST 9 ( val )				  
							      13 >> 84 LOAD_CONST 3 ( 2 )				    86 LOAD_FAST 7 ( max )					  
							      86 LOAD_FAST 5 ( min )					    88 COMPARE_OP 4 ( > )					  
							      88 BINARY_MULTIPLY					    90 POP_JUMP_IF_FALSE 18					  
							      90 LOAD_FAST 6 ( max )					    								  
							      92 COMPARE_OP 1 ( <= )					    13 92 LOAD_FAST 9 ( val )					  
							      94 POP_JUMP_IF_FALSE 98					    94 STORE_FAST 7 ( max )					  
							      								    96 JUMP_ABSOLUTE 18						  
							      14 96 BREAK_LOOP						    >> 98 POP_BLOCK						  
							      								    								  
							      15 >> 98 LOAD_FAST 7 ( end )				    14 >> 100 LOAD_CONST 3 ( 2 )				  
							      100 LOAD_FAST 4 ( start )					    102 LOAD_FAST 5 ( min )					  
							      102 BINARY_SUBTRACT					    104 BINARY_MULTIPLY						  
							      104 LOAD_FAST 3 ( longest_end )				    106 LOAD_FAST 7 ( max )					  
							      106 LOAD_FAST 2 ( longest_start )				    108 COMPARE_OP 1 ( <= )					  
							      108 BINARY_SUBTRACT					    110 POP_JUMP_IF_FALSE 18					  
							      110 COMPARE_OP 4 ( > )					    								  
							      112 POP_JUMP_IF_TRUE 122					    15 112 BREAK_LOOP						  
							      114 LOAD_FAST 2 ( longest_start )				    114 JUMP_ABSOLUTE 18					  
							      116 LOAD_CONST 1 ( - 1 )					    >> 116 POP_BLOCK						  
							      118 COMPARE_OP 2 ( == )					    								  
							      120 POP_JUMP_IF_FALSE 48					    16 118 LOAD_FAST 8 ( end )					  
							      								    120 LOAD_FAST 4 ( start )					  
							      16 >> 122 LOAD_FAST 4 ( start )				    122 BINARY_SUBTRACT						  
							      124 STORE_FAST 2 ( longest_start )			    124 LOAD_FAST 2 ( longest_start )				  
							      								    126 BINARY_SUBTRACT						  
							      17 126 LOAD_FAST 7 ( end )				    128 COMPARE_OP 0 ( < )					  
							      128 STORE_FAST 3 ( longest_end )				    130 POP_JUMP_IF_TRUE 146					  
							      130 JUMP_ABSOLUTE 48					    132 LOAD_FAST 2 ( longest_start )				  
							      >> 132 POP_BLOCK						    134 LOAD_CONST 1 ( - 1 )					  
							      >> 134 JUMP_ABSOLUTE 18					    136 COMPARE_OP 2 ( == )					  
							      >> 136 POP_BLOCK						    138 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      18 >> 138 LOAD_FAST 2 ( longest_start )			    17 140 LOAD_FAST 4 ( start )				  
							      140 LOAD_CONST 1 ( - 1 )					    142 STORE_FAST 2 ( longest_start )				  
							      142 COMPARE_OP 2 ( == )					    								  
							      144 POP_JUMP_IF_FALSE 150					    18 144 LOAD_FAST 8 ( end )					  
							      								    146 STORE_FAST 8 ( end )					  
							      19 146 LOAD_FAST 1 ( n )					    148 JUMP_ABSOLUTE 18					  
							      148 RETURN_VALUE						    >> 150 POP_BLOCK						  
							      								    								  
							      20 >> 150 LOAD_FAST 1 ( n )				    19 >> 152 LOAD_FAST 2 ( longest_start )			  
							      152 LOAD_FAST 3 ( longest_end )				    154 LOAD_CONST 1 ( - 1 )					  
							      154 LOAD_FAST 2 ( longest_start )				    156 COMPARE_OP 2 ( == )					  
							      156 BINARY_SUBTRACT					    158 POP_JUMP_IF_FALSE 18					  
							      158 LOAD_CONST 4 ( 1 )					    								  
							      160 BINARY_ADD						    20 160 LOAD_FAST 4 ( start )				  
							      162 BINARY_SUBTRACT					    162 RETURN_VALUE						  
							      164 RETURN_VALUE NEW_LINE					    								  
							      								    21 >> 164 LOAD_FAST 1 ( n )					  
							      								    166 LOAD_FAST 2 ( longest_)					  
							      								    168 LOAD_FAST 3 ( longest_start )				  
							      								    170 BINARY_SUBTRACT						  
							      								    172 LOAD_CONST 4 ( 1 )					  
							      								    174 BINARY_ADD						  
							      								    176 BINARY_SUBTRACT						  
							      								    178 BINARY_MULTIPLY						  
							      								    180 BINARY_SUBTRACT						  
							      								    182 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F
--							      --							    --								  --
def findLength ( str ) :				      Disassembly of <code object findLength at 0x7f33e2649a50, fil Disassembly of <code object findLength at 0x7f2b0163dc90, fil script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    maxlen = 0						      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    for i in range ( 0 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	for j in range ( i + 1 , n , 2 ) :		      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    length = j - i + 1				      								    								  
	    leftsum = 0					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    rightsum = 0				      10 STORE_FAST 2 ( maxlen )				    10 STORE_FAST 2 ( maxlen )					  
	    for k in range ( 0 , int ( length / 2 ) ) :	      								    								  
		leftsum += ( int ( str [ i + k ] ) - int ( '0 4 12 SETUP_LOOP 180 ( to 194 )				    4 12 SETUP_LOOP 138 ( to 148 )				  
		rightsum += ( int ( str [ i + k + int ( lengt 14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
	    if ( leftsum == rightsum and maxlen < length ) :  16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
		maxlen = length				      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
    return maxlen					      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 166 ( to 192 )				    >> 24 FOR_ITER 126 ( to 146 )				  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 SETUP_LOOP 160 ( to 190 )				    5 28 SETUP_LOOP 130 ( to 144 )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 LOAD_FAST 1 ( n )					    38 LOAD_FAST 1 ( n )					  
							      40 LOAD_CONST 3 ( 2 )					    40 LOAD_CONST 3 ( 2 )					  
							      42 CALL_FUNCTION 3					    42 CALL_FUNCTION 3						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 140 ( to 188 )				    >> 46 FOR_ITER 118 ( to 142 )				  
							      48 STORE_FAST 4 ( j )					    48 STORE_FAST 4 ( j )					  
							      								    								  
							      6 50 LOAD_FAST 4 ( j )					    6 50 LOAD_FAST 4 ( j )					  
							      52 LOAD_FAST 3 ( i )					    52 LOAD_FAST 3 ( i )					  
							      54 BINARY_SUBTRACT					    54 BINARY_SUBTRACT						  
							      56 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 2 ( 1 )					  
							      58 BINARY_ADD						    58 BINARY_ADD						  
							      60 STORE_FAST 5 ( length )				    60 STORE_FAST 5 ( length )					  
							      								    								  
							      7 62 LOAD_CONST 1 ( 0 )					    7 62 LOAD_CONST 1 ( 0 )					  
							      64 STORE_FAST 6 ( leftsum )				    64 STORE_FAST 6 ( leftsum )					  
							      								    								  
							      8 66 LOAD_CONST 1 ( 0 )					    8 66 SETUP_LOOP 90 ( to 144 )				  
							      68 STORE_FAST 7 ( rightsum )				    68 LOAD_GLOBAL 1 ( range )					  
							      								    70 LOAD_CONST 1 ( 0 )					  
							      9 70 SETUP_LOOP 94 ( to 166 )				    72 LOAD_GLOBAL 2 ( int )					  
							      72 LOAD_GLOBAL 1 ( range )				    74 LOAD_FAST 5 ( length )					  
							      74 LOAD_CONST 1 ( 0 )					    76 LOAD_CONST 3 ( 2 )					  
							      76 LOAD_GLOBAL 2 ( int )					    78 BINARY_TRUE_DIVIDE					  
							      78 LOAD_FAST 5 ( length )					    80 CALL_FUNCTION 1						  
							      80 LOAD_CONST 3 ( 2 )					    82 CALL_FUNCTION 2						  
							      82 BINARY_TRUE_DIVIDE					    84 GET_ITER							  
							      84 CALL_FUNCTION 1					    >> 86 FOR_ITER 52 ( to 142 )				  
							      86 CALL_FUNCTION 2					    88 STORE_FAST 7 ( k )					  
							      88 GET_ITER						    								  
							      >> 90 FOR_ITER 72 ( to 164 )				    9 90 LOAD_FAST 6 ( leftsum )				  
							      92 STORE_FAST 8 ( k )					    92 LOAD_GLOBAL 3 ( int )					  
							      								    94 LOAD_FAST 0 ( str )					  
							      10 94 LOAD_FAST 6 ( leftsum )				    96 LOAD_FAST 3 ( i )					  
							      96 LOAD_GLOBAL 2 ( int )					    98 LOAD_FAST 7 ( k )					  
							      98 LOAD_FAST 0 ( str )					    100 BINARY_ADD						  
							      100 LOAD_FAST 3 ( i )					    102 BINARY_SUBSCR						  
							      102 LOAD_FAST 8 ( k )					    104 CALL_FUNCTION 1						  
							      104 BINARY_ADD						    106 LOAD_GLOBAL 2 ( int )					  
							      106 BINARY_SUBSCR						    108 LOAD_CONST 4 ( '0' )					  
							      108 CALL_FUNCTION 1					    110 CALL_FUNCTION 1						  
							      110 LOAD_GLOBAL 2 ( int )					    112 BINARY_SUBTRACT						  
							      112 LOAD_CONST 4 ( '0' )					    114 INPLACE_ADD						  
							      114 CALL_FUNCTION 1					    116 STORE_FAST 6 ( leftsum )				  
							      116 BINARY_SUBTRACT					    								  
							      118 INPLACE_ADD						    10 118 LOAD_FAST 6 ( rightsum )				  
							      120 STORE_FAST 6 ( leftsum )				    120 LOAD_GLOBAL 3 ( int )					  
							      								    122 LOAD_FAST 0 ( str )					  
							      11 122 LOAD_FAST 7 ( rightsum )				    124 LOAD_FAST 3 ( i )					  
							      124 LOAD_GLOBAL 2 ( int )					    126 LOAD_FAST 7 ( k )					  
							      126 LOAD_FAST 0 ( str )					    128 BINARY_ADD						  
							      128 LOAD_FAST 3 ( i )					    130 LOAD_GLOBAL 2 ( int )					  
							      130 LOAD_FAST 8 ( k )					    132 LOAD_FAST 5 ( length )					  
							      132 BINARY_ADD						    134 LOAD_CONST 3 ( 2 )					  
							      134 LOAD_GLOBAL 2 ( int )					    136 BINARY_TRUE_DIVIDE					  
							      136 LOAD_FAST 5 ( length )				    138 CALL_FUNCTION 1						  
							      138 LOAD_CONST 3 ( 2 )					    140 BINARY_ADD						  
							      140 BINARY_TRUE_DIVIDE					    142 CALL_FUNCTION 1						  
							      142 CALL_FUNCTION 1					    144 LOAD_GLOBAL 2 ( int )					  
							      144 BINARY_ADD						    146 LOAD_CONST 4 ( '0' )					  
							      146 BINARY_SUBSCR						    148 CALL_FUNCTION 1						  
							      148 CALL_FUNCTION 1					    150 BINARY_SUBTRACT						  
							      150 LOAD_GLOBAL 2 ( int )					    152 INPLACE_ADD						  
							      152 LOAD_CONST 4 ( '0' )					    154 STORE_FAST 6 ( rightsum )				  
							      154 CALL_FUNCTION 1					    156 JUMP_ABSOLUTE 86					  
							      156 BINARY_SUBTRACT					    >> 158 POP_BLOCK						  
							      158 INPLACE_ADD						    								  
							      160 STORE_FAST 7 ( rightsum )				    11 >> 160 LOAD_FAST 6 ( leftsum )				  
							      162 JUMP_ABSOLUTE 90					    162 LOAD_FAST 6 ( rightsum )				  
							      >> 164 POP_BLOCK						    164 COMPARE_OP 2 ( == )					  
							      								    166 POP_JUMP_IF_FALSE 24					  
							      12 >> 166 LOAD_FAST 6 ( leftsum )				    168 LOAD_FAST 2 ( maxlen )					  
							      168 LOAD_FAST 7 ( rightsum )				    170 LOAD_FAST 5 ( length )					  
							      170 COMPARE_OP 2 ( == )					    172 COMPARE_OP 0 ( < )					  
							      172 POP_JUMP_IF_FALSE 46					    174 POP_JUMP_IF_FALSE 180					  
							      174 LOAD_FAST 2 ( maxlen )				    								  
							      176 LOAD_FAST 5 ( length )				    12 176 LOAD_FAST 5 ( length )				  
							      178 COMPARE_OP 0 ( < )					    178 STORE_FAST 2 ( maxlen )					  
							      180 POP_JUMP_IF_FALSE 46					    								  
							      								    13 >> 180 LOAD_FAST 2 ( maxlen )				  
							      13 182 LOAD_FAST 5 ( length )				    182 RETURN_VALUE NEW_LINE					  
							      184 STORE_FAST 2 ( maxlen )				    								  
							      186 JUMP_ABSOLUTE 46					    								  
							      >> 188 POP_BLOCK						    								  
							      >> 190 JUMP_ABSOLUTE 24					    								  
							      >> 192 POP_BLOCK						    								  
							      								    								  
							      14 >> 194 LOAD_FAST 2 ( maxlen )				    								  
							      196 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE		      LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE			    LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE			  LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE
--							      --							    --								  --
def longOddEvenIncSeq ( arr , n ) :			      Disassembly of <code object longOddEvenIncSeq at 0x7f33e2649a Disassembly of <code object longOddEvenIncSeq at 0x7f2b016399 script_not_found : None
    lioes = list ( )					      2 0 LOAD_GLOBAL 0 ( list )				    2 0 LOAD_GLOBAL 0 ( list )					  
    maxLen = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for i in range ( n ) :				      4 STORE_FAST 2 ( lioes )					    4 STORE_FAST 2 ( lioes )					  
	lioes.append ( 1 )				      								    								  
    i = 1						      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      8 STORE_FAST 3 ( maxLen )					    8 STORE_FAST 3 ( ( seek )					  
	for j in range ( i ) :				      								    								  
	    if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr  4 10 SETUP_LOOP 26 ( to 38 )				    4 10 SETUP_LOOP 26 ( to 40 )				  
		lioes [ i ] = lioes [ j ] + 1		      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
    for i in range ( n ) :				      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
	if maxLen < lioes [ i ] :			      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
	    maxLen = lioes [ i ]			      18 GET_ITER						    18 GET_ITER							  
    return maxLen					      >> 20 FOR_ITER 14 ( to 36 )				    >> 20 FOR_ITER 14 ( to 38 )					  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 LOAD_FAST 2 ( lioes )				    5 24 LOAD_FAST 2 ( lioes )					  
							      26 LOAD_METHOD 2 ( append )				    26 LOAD_METHOD 2 ( append )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 CALL_METHOD 1						    30 CALL_METHOD 1						  
							      32 POP_TOP						    32 POP_TOP							  
							      34 JUMP_ABSOLUTE 20					    34 JUMP_ABSOLUTE 20						  
							      >> 36 POP_BLOCK						    36 POP_BLOCK						  
							      								    								  
							      6 >> 38 LOAD_CONST 2 ( 1 )				    6 >> 38 LOAD_CONST 2 ( 1 )					  
							      40 STORE_FAST 4 ( i )					    40 STORE_FAST 4 ( i )					  
							      								    								  
							      7 42 SETUP_LOOP 110 ( to 154 )				    7 42 SETUP_LOOP 138 ( to 194 )				  
							      44 LOAD_GLOBAL 1 ( range )				    44 LOAD_GLOBAL 1 ( range )					  
							      46 LOAD_FAST 1 ( n )					    46 LOAD_FAST 4 ( i )					  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 98 ( to 152 )				    >> 52 FOR_ITER 126 ( to 192 )				  
							      54 STORE_FAST 4 ( i )					    54 STORE_FAST 4 ( i )					  
							      								    								  
							      8 56 SETUP_LOOP 92 ( to 150 )				    8 56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_GLOBAL 1 ( range )				    58 LOAD_FAST 4 ( i )					  
							      60 LOAD_FAST 4 ( i )					    60 BINARY_SUBSCR						  
							      62 CALL_FUNCTION 1					    62 LOAD_FAST 0 ( arr )					  
							      64 GET_ITER						    64 LOAD_FAST 4 ( i )					  
							      >> 66 FOR_ITER 80 ( to 148 )				    66 BINARY_SUBSCR						  
							      68 STORE_FAST 5 ( j )					    68 COMPARE_OP 4 ( > )					  
							      								    70 POP_JUMP_IF_FALSE 52					  
							      9 70 LOAD_FAST 0 ( arr )					    72 LOAD_FAST 0 ( arr )					  
							      72 LOAD_FAST 4 ( i )					    74 LOAD_FAST 4 ( i )					  
							      74 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      76 LOAD_FAST 0 ( arr )					    78 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 5 ( j )					    80 LOAD_FAST 4 ( i )					  
							      80 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      82 COMPARE_OP 4 ( > )					    84 BINARY_ADD						  
							      84 POP_JUMP_IF_FALSE 66					    86 LOAD_CONST 3 ( 2 )					  
							      86 LOAD_FAST 0 ( arr )					    88 BINARY_MODULO						  
							      88 LOAD_FAST 4 ( i )					    90 LOAD_CONST 1 ( 0 )					  
							      90 BINARY_SUBSCR						    92 COMPARE_OP 3 ( != )					  
							      92 LOAD_FAST 0 ( arr )					    94 POP_JUMP_IF_FALSE 52					  
							      94 LOAD_FAST 5 ( j )					    96 LOAD_FAST 2 ( lioes )					  
							      96 BINARY_SUBSCR						    98 LOAD_FAST 4 ( i )					  
							      98 BINARY_ADD						    100 BINARY_SUBSCR						  
							      100 LOAD_CONST 3 ( 2 )					    102 LOAD_FAST 0 ( lioes )					  
							      102 BINARY_MODULO						    104 LOAD_FAST 4 ( j )					  
							      104 LOAD_CONST 1 ( 0 )					    106 BINARY_SUBSCR						  
							      106 COMPARE_OP 3 ( != )					    108 LOAD_CONST 2 ( 1 )					  
							      108 POP_JUMP_IF_FALSE 66					    110 BINARY_ADD						  
							      110 LOAD_FAST 2 ( lioes )					    112 COMPARE_OP 0 ( < )					  
							      112 LOAD_FAST 4 ( i )					    114 POP_JUMP_IF_FALSE 52					  
							      114 BINARY_SUBSCR						    								  
							      116 LOAD_FAST 2 ( lioes )					    9 116 LOAD_FAST 2 ( lioes )					  
							      118 LOAD_FAST 5 ( j )					    118 LOAD_FAST 4 ( i )					  
							      120 BINARY_SUBSCR						    120 BINARY_SUBSCR						  
							      122 LOAD_CONST 2 ( 1 )					    122 LOAD_CONST 2 ( 1 )					  
							      124 BINARY_ADD						    124 BINARY_ADD						  
							      126 COMPARE_OP 0 ( < )					    126 LOAD_FAST 2 ( lioes )					  
							      128 POP_JUMP_IF_FALSE 66					    128 LOAD_FAST 4 ( i )					  
							      								    130 STORE_SUBSCR						  
							      10 130 LOAD_FAST 2 ( lioes )				    132 JUMP_ABSOLUTE 52					  
							      132 LOAD_FAST 5 ( j )					    >> 134 POP_BLOCK						  
							      134 BINARY_SUBSCR						    								  
							      136 LOAD_CONST 2 ( 1 )					    10 >> 136 SETUP_LOOP 54 ( to 186 )				  
							      138 BINARY_ADD						    138 LOAD_GLOBAL 1 ( range )					  
							      140 LOAD_FAST 2 ( lioes )					    140 LOAD_FAST 1 ( n )					  
							      142 LOAD_FAST 4 ( i )					    142 CALL_FUNCTION 1						  
							      144 STORE_SUBSCR						    144 GET_ITER						  
							      146 JUMP_ABSOLUTE 66					    >> 146 FOR_ITER 46 ( to 184 )				  
							      >> 148 POP_BLOCK						    148 STORE_FAST 4 ( i )					  
							      >> 150 JUMP_ABSOLUTE 52					    								  
							      >> 152 POP_BLOCK						    11 150 LOAD_FAST 3 ( ( 14 , col )				  
							      								    152 LOAD_FAST 2 ( lioes )					  
							      11 >> 154 SETUP_LOOP 36 ( to 192 )			    154 LOAD_FAST 4 ( i )					  
							      156 LOAD_GLOBAL 1 ( range )				    156 BINARY_SUBSCR						  
							      158 LOAD_FAST 1 ( n )					    158 COMPARE_OP 0 ( < )					  
							      160 CALL_FUNCTION 1					    160 POP_JUMP_IF_FALSE 146					  
							      162 GET_ITER						    								  
							      >> 164 FOR_ITER 24 ( to 190 )				    12 162 LOAD_FAST 2 ( lioes )				  
							      166 STORE_FAST 4 ( i )					    164 LOAD_FAST 4 ( i )					  
							      								    166 BINARY_SUBSCR						  
							      12 168 LOAD_FAST 3 ( maxLen )				    168 STORE_FAST 3 ( 14 )					  
							      170 LOAD_FAST 2 ( lioes )					    170 JUMP_ABSOLUTE 146					  
							      172 LOAD_FAST 4 ( i )					    >> 172 POP_BLOCK						  
							      174 BINARY_SUBSCR						    								  
							      176 COMPARE_OP 0 ( < )					    13 >> 174 LOAD_FAST 3 ( 18 )				  
							      178 POP_JUMP_IF_FALSE 164					    176 LOAD_FAST 3 ( 26 )					  
							      								    178 RETURN_VALUE NEW_LINE					  
							      13 180 LOAD_FAST 2 ( lioes )				    								  
							      182 LOAD_FAST 4 ( i )					    								  
							      184 BINARY_SUBSCR						    								  
							      186 STORE_FAST 3 ( maxLen )				    								  
							      188 JUMP_ABSOLUTE 164					    								  
							      >> 190 POP_BLOCK						    								  
							      								    								  
							      14 >> 192 LOAD_FAST 3 ( maxLen )				    								  
							      194 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_SUBSET_ARRAY				      MAXIMUM_PR<unk> CT_SUBSET_ARRAY				    MAXIMUM_PR<unk> CT_SUBSET_ARRAY				  MAXIMUM_PR<unk> CT_SUBSET_ARRAY
--							      --							    --								  --
def maxProductSubset ( a , n ) :			      Disassembly of <code object maxProductSubset at 0x7f33e2653f6 Disassembly of <code object maxProductSubset at 0x7f2b0163dc9 script_not_found : None
    if n == 1 :						      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
	return a [ 0 ]					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    max_neg = - 999999999999				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    count_neg = 0					      6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 16					  
    count_zero = 0					      								    								  
    prod = 1						      3 8 LOAD_FAST 0 ( a )					    3 8 LOAD_FAST 0 ( a )					  
    for i in range ( n ) :				      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
	if a [ i ] == 0 :				      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
	    count_zero += 1				      14 RETURN_VALUE						    14 RETURN_VALUE						  
	    continue					      								    								  
	if a [ i ] < 0 :				      4 >> 16 LOAD_CONST 3 ( - 999999999999 )			    4 >> 16 LOAD_CONST 3 ( - 999999999999 )			  
	    count_neg += 1				      18 STORE_FAST 2 ( max_neg )				    18 STORE_FAST 2 ( max_neg )					  
	    max_neg = max ( max_neg , a [ i ] )		      								    								  
	prod = prod * a [ i ]				      5 20 LOAD_CONST 2 ( 0 )					    5 20 LOAD_CONST 2 ( 0 )					  
    if count_zero == n :				      22 STORE_FAST 3 ( count_neg )				    22 STORE_FAST 3 ( count_neg )				  
	return 0					      								    								  
    if count_neg & 1 :					      6 24 LOAD_CONST 2 ( 0 )					    6 24 LOAD_CONST 2 ( 0 )					  
	if ( count_neg == 1 and count_zero > 0 and count_zero 26 STORE_FAST 4 ( count_zero )				    26 STORE_FAST 4 ( count_zero )				  
	    return 0					      								    								  
	prod = int ( prod / max_neg )			      7 28 LOAD_CONST 1 ( 1 )					    7 28 LOAD_CONST 1 ( 1 )					  
    return prod						      30 STORE_FAST 5 ( prod )					    30 STORE_FAST 5 ( prod )					  
							      								    								  
							      8 32 SETUP_LOOP 84 ( to 118 )				    8 32 SETUP_LOOP 54 ( to 96 )				  
							      34 LOAD_GLOBAL 0 ( range )				    34 LOAD_GLOBAL 0 ( range )					  
							      36 LOAD_FAST 1 ( n )					    36 LOAD_FAST 1 ( n )					  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 72 ( to 116 )				    >> 42 FOR_ITER 46 ( to 94 )					  
							      44 STORE_FAST 6 ( i )					    44 STORE_FAST 6 ( i )					  
							      								    								  
							      9 46 LOAD_FAST 0 ( a )					    9 46 LOAD_FAST 0 ( a )					  
							      48 LOAD_FAST 6 ( i )					    48 LOAD_FAST 6 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_CONST 2 ( 0 )					    52 LOAD_CONST 2 ( 0 )					  
							      54 COMPARE_OP 2 ( == )					    54 COMPARE_OP 2 ( == )					  
							      56 POP_JUMP_IF_FALSE 68					    56 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      10 58 LOAD_FAST 4 ( count_zero )				    10 58 LOAD_FAST 3 ( count_zero )				  
							      60 LOAD_CONST 1 ( 1 )					    60 LOAD_CONST 1 ( 1 )					  
							      62 INPLACE_ADD						    62 INPLACE_ADD						  
							      64 STORE_FAST 4 ( count_zero )				    64 STORE_FAST 3 ( count_zero )				  
							      								    								  
							      11 66 JUMP_ABSOLUTE 42					    11 66 JUMP_ABSOLUTE 42					  
							      								    								  
							      12 >> 68 LOAD_FAST 0 ( a )				    12 >> 68 LOAD_FAST 0 ( a )					  
							      70 LOAD_FAST 6 ( i )					    70 LOAD_FAST 6 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_CONST 2 ( 0 )					    74 LOAD_CONST 2 ( 0 )					  
							      76 COMPARE_OP 0 ( < )					    76 COMPARE_OP 0 ( < )					  
							      78 POP_JUMP_IF_FALSE 102					    78 POP_JUMP_IF_FALSE 88					  
							      								    								  
							      13 80 LOAD_FAST 3 ( count_neg )				    13 80 LOAD_FAST 3 ( count_neg )				  
							      82 LOAD_CONST 1 ( 1 )					    82 LOAD_CONST 1 ( 1 )					  
							      84 INPLACE_ADD						    84 INPLACE_ADD						  
							      86 STORE_FAST 3 ( count_neg )				    86 STORE_FAST 3 ( count_neg )				  
							      								    								  
							      14 88 LOAD_GLOBAL 1 ( max )				    14 >> 88 LOAD_GLOBAL 1 ( max )				  
							      90 LOAD_FAST 2 ( max_neg )				    90 LOAD_FAST 2 ( max_neg )					  
							      92 LOAD_FAST 0 ( a )					    92 LOAD_FAST 0 ( a )					  
							      94 LOAD_FAST 6 ( i )					    94 LOAD_FAST 6 ( i )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 CALL_FUNCTION 2					    98 CALL_FUNCTION 2						  
							      100 STORE_FAST 2 ( max_neg )				    100 STORE_FAST 2 ( max_neg )				  
							      								    102 JUMP_ABSOLUTE 42					  
							      15 >> 102 LOAD_FAST 5 ( prod )				    >> 104 POP_BLOCK						  
							      104 LOAD_FAST 0 ( a )					    								  
							      106 LOAD_FAST 6 ( i )					    15 >> 106 LOAD_FAST 5 ( prod )				  
							      108 BINARY_SUBSCR						    108 LOAD_FAST 0 ( a )					  
							      110 BINARY_MULTIPLY					    110 LOAD_FAST 6 ( i )					  
							      112 STORE_FAST 5 ( prod )					    112 BINARY_SUBSCR						  
							      114 JUMP_ABSOLUTE 42					    114 BINARY_MULTIPLY						  
							      >> 116 POP_BLOCK						    116 STORE_FAST 5 ( prod )					  
							      								    								  
							      16 >> 118 LOAD_FAST 4 ( count_zero )			    16 >> 118 LOAD_FAST 4 ( count_zero )			  
							      120 LOAD_FAST 1 ( n )					    120 LOAD_FAST 1 ( n )					  
							      122 COMPARE_OP 2 ( == )					    122 COMPARE_OP 2 ( == )					  
							      124 POP_JUMP_IF_FALSE 130					    124 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      17 126 LOAD_CONST 2 ( 0 )					    17 126 LOAD_CONST 2 ( 0 )					  
							      128 RETURN_VALUE						    128 RETURN_VALUE						  
							      								    								  
							      18 >> 130 LOAD_FAST 3 ( count_neg )			    18 130 LOAD_FAST 3 ( count_neg )				  
							      132 LOAD_CONST 1 ( 1 )					    132 LOAD_CONST 1 ( 1 )					  
							      134 BINARY_AND						    134 BINARY_AND						  
							      136 POP_JUMP_IF_FALSE 182					    136 POP_JUMP_IF_FALSE 150					  
							      								    								  
							      19 138 LOAD_FAST 3 ( count_neg )				    19 138 LOAD_FAST 3 ( count_neg )				  
							      140 LOAD_CONST 1 ( 1 )					    140 LOAD_CONST 1 ( 1 )					  
							      142 COMPARE_OP 2 ( == )					    142 COMPARE_OP 2 ( == )					  
							      144 POP_JUMP_IF_FALSE 170					    144 POP_JUMP_IF_FALSE 150					  
							      146 LOAD_FAST 4 ( count_zero )				    								  
							      148 LOAD_CONST 2 ( 0 )					    20 146 LOAD_FAST 3 ( count_neg )				  
							      150 COMPARE_OP 4 ( > )					    148 LOAD_CONST 2 ( 0 )					  
							      152 POP_JUMP_IF_FALSE 170					    150 COMPARE_OP 4 ( > )					  
							      154 LOAD_FAST 4 ( count_zero )				    152 POP_JUMP_IF_FALSE 150					  
							      156 LOAD_FAST 3 ( count_neg )				    154 LOAD_FAST 4 ( count_zero )				  
							      158 BINARY_ADD						    156 LOAD_FAST 4 ( count_neg )				  
							      160 LOAD_FAST 1 ( n )					    158 LOAD_FAST 3 ( count_neg )				  
							      162 COMPARE_OP 2 ( == )					    160 COMPARE_OP 2 ( == )					  
							      164 POP_JUMP_IF_FALSE 170					    162 LOAD_FAST 1 ( n )					  
							      								    164 COMPARE_OP 2 ( == )					  
							      20 166 LOAD_CONST 2 ( 0 )					    166 POP_JUMP_IF_FALSE 180					  
							      168 RETURN_VALUE						    								  
							      								    21 >> 168 LOAD_FAST 3 ( count_neg )				  
							      21 >> 170 LOAD_GLOBAL 2 ( int )				    170 LOAD_FAST 4 ( count_neg )				  
							      172 LOAD_FAST 5 ( prod )					    172 LOAD_FAST 1 ( n )					  
							      174 LOAD_FAST 2 ( max_neg )				    174 COMPARE_OP 2 ( == )					  
							      176 BINARY_TRUE_DIVIDE					    176 BINARY_ADD						  
							      178 CALL_FUNCTION 1					    178 POP_JUMP_IF_FALSE 192					  
							      180 STORE_FAST 5 ( prod )					    								  
							      								    22 180 LOAD_CONST 2 ( 0 )					  
							      22 >> 182 LOAD_FAST 5 ( prod )				    182 RETURN_VALUE						  
							      184 RETURN_VALUE NEW_LINE					    								  
							      								    23 >> 184 LOAD_GLOBAL 2 ( int )				  
							      								    186 LOAD_FAST 5 ( prod )					  
							      								    188 LOAD_FAST 2 ( max_neg )					  
							      								    190 BINARY_TRUE_DIVIDE					  
							      								    192 CALL_FUNCTION 1						  
							      								    194 STORE_FAST 5 ( prod )					  
							      								    								  
							      								    24 >> 196 LOAD_FAST 5 ( prod )				  
							      								    198 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SORTED_ROWS_MATRIX				      COUNT_SORTED_ROWS_MATRIX					    COUNT_SORTED_ROWS_MATRIX					  COUNT_SORTED_ROWS_MATRIX
--							      --							    --								  --
def sortedCount ( mat , r , c ) :			      Disassembly of <code object sortedCount at 0x7f33e2653f60, fi Disassembly of <code object sortedCount at 0x7f2b0163dc90, fi error : /bin/bash: line 1:  5048 Segmentation faul
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( r ) :				      2 STORE_FAST 3 ( result )					    2 STORE_FAST 3 ( result )					  ataset/bin/python XLM/dis_script.py --script_path
	j = 0						      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	for j in range ( c - 1 ) :			      3 4 SETUP_LOOP 92 ( to 98 )				    3 4 SETUP_LOOP 166 ( to 172 )				  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/COUNT_
	    if mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] :	      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  SORTED_ROWS_MATRIX.dis
		break					      8 LOAD_FAST 1 ( r )					    8 LOAD_FAST 1 ( r )						  
	if j == c - 2 :					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
	    result += 1					      12 GET_ITER						    12 GET_ITER							  
    for i in range ( 0 , r ) :				      >> 14 FOR_ITER 80 ( to 96 )				    >> 14 FOR_ITER 144 ( to 170 )				  
	j = 0						      16 STORE_FAST 4 ( i )					    16 STORE_FAST 4 ( i )					  
	for j in range ( c - 1 , 0 , - 1 ) :		      								    								  
	    if mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] :	      4 18 LOAD_CONST 1 ( 0 )					    4 18 LOAD_CONST 1 ( 0 )					  
		break					      20 STORE_FAST 5 ( j )					    20 STORE_FAST 5 ( j )					  
	if c > 1 and j == 1 :				      								    								  
	    result += 1					      5 22 SETUP_LOOP 50 ( to 74 )				    5 22 SETUP_LOOP 46 ( to 70 )				  
    return result					      24 LOAD_GLOBAL 0 ( range )				    24 LOAD_GLOBAL 0 ( range )					  
							      26 LOAD_FAST 2 ( c )					    26 LOAD_FAST 2 ( c )					  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 34 ( to 72 )				    >> 36 FOR_ITER 30 ( to 68 )					  
							      38 STORE_FAST 5 ( j )					    38 STORE_FAST 5 ( j )					  
							      								    								  
							      6 40 LOAD_FAST 0 ( mat )					    6 40 LOAD_FAST 0 ( mat )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 5 ( j )					    46 LOAD_FAST 5 ( j )					  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_ADD						    50 BINARY_ADD						  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 0 ( mat )					    54 LOAD_FAST 0 ( mat )					  
							      56 LOAD_FAST 4 ( i )					    56 LOAD_FAST 4 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_FAST 5 ( j )					    60 LOAD_FAST 5 ( j )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 COMPARE_OP 1 ( <= )					    64 COMPARE_OP 1 ( <= )					  
							      66 POP_JUMP_IF_FALSE 36					    66 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      7 68 BREAK_LOOP						    7 68 BREAK_LOOP						  
							      70 JUMP_ABSOLUTE 36					    70 JUMP_ABSOLUTE 36						  
							      >> 72 POP_BLOCK						    >> 72 POP_BLOCK						  
							      								    								  
							      8 >> 74 LOAD_FAST 5 ( j )					    8 >> 74 LOAD_FAST 5 ( j )					  
							      76 LOAD_FAST 2 ( c )					    76 LOAD_FAST 2 ( c )					  
							      78 LOAD_CONST 3 ( 2 )					    78 LOAD_CONST 3 ( 2 )					  
							      80 BINARY_SUBTRACT					    80 BINARY_SUBTRACT						  
							      82 COMPARE_OP 2 ( == )					    82 COMPARE_OP 2 ( == )					  
							      84 POP_JUMP_IF_FALSE 14					    84 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      9 86 LOAD_FAST 3 ( result )				    9 86 LOAD_FAST 3 ( result )					  
							      88 LOAD_CONST 2 ( 1 )					    88 LOAD_CONST 2 ( 1 )					  
							      90 INPLACE_ADD						    90 INPLACE_ADD						  
							      92 STORE_FAST 3 ( result )				    92 STORE_FAST 3 ( result )					  
							      94 JUMP_ABSOLUTE 14					    94 JUMP_ABSOLUTE 14						  
							      >> 96 POP_BLOCK						    >> 96 POP_BLOCK						  
							      								    								  
							      10 >> 98 SETUP_LOOP 102 ( to 202 )			    10 >> 98 SETUP_LOOP 80 ( to 172 )				  
							      100 LOAD_GLOBAL 0 ( range )				    100 LOAD_GLOBAL 0 ( range )					  
							      102 LOAD_CONST 1 ( 0 )					    102 LOAD_CONST 1 ( 0 )					  
							      104 LOAD_FAST 1 ( r )					    104 LOAD_FAST 1 ( r )					  
							      106 CALL_FUNCTION 2					    106 CALL_FUNCTION 2						  
							      108 GET_ITER						    108 GET_ITER						  
							      >> 110 FOR_ITER 88 ( to 200 )				    >> 110 FOR_ITER 68 ( to 170 )				  
							      112 STORE_FAST 4 ( i )					    112 STORE_FAST 4 ( i )					  
							      								    								  
							      11 114 LOAD_CONST 1 ( 0 )					    11 114 LOAD_FAST 0 ( mat )					  
							      116 STORE_FAST 5 ( j )					    116 LOAD_FAST 4 ( i )					  
							      								    118 BINARY_SUBSCR						  
							      12 118 SETUP_LOOP 54 ( to 174 )				    120 LOAD_FAST 5 ( j )					  
							      120 LOAD_GLOBAL 0 ( range )				    122 LOAD_CONST 2 ( 1 )					  
							      122 LOAD_FAST 2 ( c )					    124 BINARY_SUBTRACT						  
							      124 LOAD_CONST 2 ( 1 )					    126 BINARY_SUBSCR						  
							      126 BINARY_SUBTRACT					    128 LOAD_FAST 0 ( mat )					  
							      128 LOAD_CONST 1 ( 0 )					    130 LOAD_FAST 4 ( i )					  
							      130 LOAD_CONST 4 ( - 1 )					    132 BINARY_SUBSCR						  
							      132 CALL_FUNCTION 3					    134 COMPARE_OP 1 ( <= )					  
							      134 GET_ITER						    136 POP_JUMP_IF_FALSE 110					  
							      >> 136 FOR_ITER 34 ( to 172 )				    								  
							      138 STORE_FAST 5 ( j )					    12 138 BREAK_LOOP						  
							      								    140 JUMP_ABSOLUTE 110					  
							      13 140 LOAD_FAST 0 ( mat )				    >> 142 POP_BLOCK						  
							      142 LOAD_FAST 4 ( i )					    								  
							      144 BINARY_SUBSCR						    13 >> 144 LOAD_FAST 2 ( c )					  
							      146 LOAD_FAST 5 ( j )					    146 LOAD_CONST 2 ( 1 )					  
							      148 LOAD_CONST 2 ( 1 )					    148 COMPARE_OP 4 ( > )					  
							      150 BINARY_SUBTRACT					    150 POP_JUMP_IF_FALSE 152					  
							      152 BINARY_SUBSCR						    >> 152 LOAD_FAST 5 ( j )					  
							      154 LOAD_FAST 0 ( mat )					    154 LOAD_CONST 2 ( 1 )					  
							      156 LOAD_FAST 4 ( i )					    156 COMPARE_OP 2 ( == )					  
							      158 BINARY_SUBSCR						    158 POP_JUMP_IF_FALSE 110					  
							      160 LOAD_FAST 5 ( j )					    160 LOAD_FAST 5 ( j )					  
							      162 BINARY_SUBSCR						    162 LOAD_CONST 2 ( 1 )					  
							      164 COMPARE_OP 1 ( <= )					    164 COMPARE_OP 2 ( == )					  
							      166 POP_JUMP_IF_FALSE 136					    166 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      14 168 BREAK_LOOP						    14 168 LOAD_FAST 3 ( result )				  
							      170 JUMP_ABSOLUTE 136					    170 LOAD_CONST 2 ( 1 )					  
							      >> 172 POP_BLOCK						    172 INPLACE_ADD						  
							      								    174 STORE_FAST 3 ( result )					  
							      15 >> 174 LOAD_FAST 2 ( c )				    176 JUMP_ABSOLUTE 110					  
							      176 LOAD_CONST 2 ( 1 )					    >> 178 POP_BLOCK						  
							      178 COMPARE_OP 4 ( > )					    >> 180 JUMP_ABSOLUTE 14					  
							      180 POP_JUMP_IF_FALSE 110					    >> 182 POP_BLOCK						  
							      182 LOAD_FAST 5 ( j )					    								  
							      184 LOAD_CONST 2 ( 1 )					    15 >> 184 LOAD_FAST 2 ( c )					  
							      186 COMPARE_OP 2 ( == )					    186 LOAD_CONST 2 ( 1 )					  
							      188 POP_JUMP_IF_FALSE 110					    188 COMPARE_OP 4 ( > )					  
							      								    190 POP_JUMP_IF_FALSE 200					  
							      16 190 LOAD_FAST 3 ( result )				    192 LOAD_FAST 5 ( j )					  
							      192 LOAD_CONST 2 ( 1 )					    194 LOAD_CONST 2 ( 1 )					  
							      194 INPLACE_ADD						    196 COMPARE_OP 2 ( == )					  
							      196 STORE_FAST 3 ( result )				    198 POP_JUMP_IF_FALSE 200					  
							      198 JUMP_ABSOLUTE 110					    								  
							      >> 200 POP_BLOCK						    16 200 LOAD_FAST 3 ( result )				  
							      								    202 LOAD_CONST 2 ( 1 )					  
							      17 >> 202 LOAD_FAST 3 ( result )				    204 INPLACE_ADD						  
							      204 RETURN_VALUE NEW_LINE					    206 STORE_FAST 3 ( result )					  
							      								    208 JUMP_ABSOLUTE 14					  
							      								    >> 210 POP_BLOCK						  
							      								    								  
							      								    17 >> 212 LOAD_FAST 3 ( result )				  
							      								    214 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>	      REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>		    REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>		  REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>
--							      --							    --								  --
def arrangeString ( str1 , x , y ) :			      Disassembly of <code object arrangeString at 0x7f33e2649a50,  Disassembly of <code object arrangeString at 0x7f2b0163dc90,  script_not_found : None
    count_0 = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    count_1 = 0						      2 STORE_FAST 3 ( count_0 )				    2 STORE_FAST 3 ( count_1 )					  
    n = len ( str1 )					      								    								  
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	if str1 [ i ] == '0' :				      6 STORE_FAST 4 ( count_1 )				    6 STORE_FAST 4 ( count_1 )					  
	    count_0 += 1				      								    								  
	else :						      4 8 LOAD_GLOBAL 0 ( len )					    4 8 LOAD_GLOBAL 0 ( len )					  
	    count_1 += 1				      10 LOAD_FAST 0 ( str1 )					    10 LOAD_FAST 0 ( str1 )					  
    while count_0 > 0 or count_1 > 0 :			      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	for i in range ( 0 , x ) :			      14 STORE_FAST 5 ( n )					    14 STORE_FAST 5 ( n )					  
	    if count_0 > 0 :				      								    								  
		print ( "0" , end = "" )		      5 16 SETUP_LOOP 46 ( to 64 )				    5 16 SETUP_LOOP 46 ( to 68 )				  
		count_0 -= 1				      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
	for j in range ( 0 , y ) :			      20 LOAD_FAST 5 ( n )					    20 LOAD_FAST 5 ( n )					  
	    if count_1 > 0 :				      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
		print ( "1" , end = "" )		      24 GET_ITER						    24 GET_ITER							  
		count_1 -= 1				      >> 26 FOR_ITER 34 ( to 62 )				    >> 26 FOR_ITER 34 ( to 66 )					  
							      28 STORE_FAST 6 ( i )					    28 STORE_FAST 6 ( i )					  
							      								    								  
							      6 30 LOAD_FAST 0 ( str1 )					    6 30 LOAD_FAST 0 ( str1 )					  
							      32 LOAD_FAST 6 ( i )					    32 LOAD_FAST 6 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 2 ( '0' )					    36 LOAD_CONST 2 ( '0' )					  
							      38 COMPARE_OP 2 ( == )					    38 COMPARE_OP 2 ( == )					  
							      40 POP_JUMP_IF_FALSE 52					    40 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 42 LOAD_FAST 3 ( count_0 )				    7 42 LOAD_FAST 3 ( count_1 )				  
							      44 LOAD_CONST 3 ( 1 )					    44 LOAD_CONST 3 ( 1 )					  
							      46 INPLACE_ADD						    46 INPLACE_ADD						  
							      48 STORE_FAST 3 ( count_0 )				    48 STORE_FAST 3 ( count_1 )					  
							      50 JUMP_ABSOLUTE 26					    50 JUMP_ABSOLUTE 26						  
							      								    								  
							      9 >> 52 LOAD_FAST 4 ( count_1 )				    9 >> 52 LOAD_FAST 3 ( count_1 )				  
							      54 LOAD_CONST 3 ( 1 )					    54 LOAD_CONST 3 ( 1 )					  
							      56 INPLACE_ADD						    56 INPLACE_ADD						  
							      58 STORE_FAST 4 ( count_1 )				    58 STORE_FAST 3 ( count_1 )					  
							      60 JUMP_ABSOLUTE 26					    60 JUMP_ABSOLUTE 26						  
							      >> 62 POP_BLOCK						    >> 62 POP_BLOCK						  
							      								    								  
							      10 >> 64 SETUP_LOOP 116 ( to 182 )			    10 >> 64 SETUP_LOOP 68 ( to 156 )				  
							      >> 66 LOAD_FAST 3 ( count_0 )				    >> 66 LOAD_FAST 3 ( count_1 )				  
							      68 LOAD_CONST 1 ( 0 )					    68 LOAD_CONST 1 ( 0 )					  
							      70 COMPARE_OP 4 ( > )					    70 COMPARE_OP 4 ( > )					  
							      72 POP_JUMP_IF_TRUE 82					    72 POP_JUMP_IF_TRUE 154					  
							      74 LOAD_FAST 4 ( count_1 )				    74 LOAD_FAST 3 ( count_1 )					  
							      76 LOAD_CONST 1 ( 0 )					    76 LOAD_CONST 1 ( 0 )					  
							      78 COMPARE_OP 4 ( > )					    78 COMPARE_OP 4 ( > )					  
							      80 POP_JUMP_IF_FALSE 180					    80 POP_JUMP_IF_FALSE 154					  
							      								    								  
							      11 >> 82 SETUP_LOOP 46 ( to 130 )				    11 82 SETUP_LOOP 56 ( to 154 )				  
							      84 LOAD_GLOBAL 1 ( range )				    84 LOAD_GLOBAL 1 ( range )					  
							      86 LOAD_CONST 1 ( 0 )					    86 LOAD_CONST 1 ( 0 )					  
							      88 LOAD_FAST 1 ( x )					    88 LOAD_FAST 1 ( x )					  
							      90 CALL_FUNCTION 2					    90 CALL_FUNCTION 2						  
							      92 GET_ITER						    92 GET_ITER							  
							      >> 94 FOR_ITER 32 ( to 128 )				    >> 94 FOR_ITER 44 ( to 152 )				  
							      96 STORE_FAST 6 ( i )					    96 STORE_FAST 6 ( i )					  
							      								    								  
							      12 98 LOAD_FAST 3 ( count_0 )				    12 98 LOAD_FAST 4 ( count_1 )				  
							      100 LOAD_CONST 1 ( 0 )					    100 LOAD_CONST 1 ( 0 )					  
							      102 COMPARE_OP 4 ( > )					    102 COMPARE_OP 4 ( > )					  
							      104 POP_JUMP_IF_FALSE 94					    104 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      13 106 LOAD_GLOBAL 2 ( print )				    13 106 LOAD_GLOBAL 2 ( print )				  
							      108 LOAD_CONST 2 ( '0' )					    108 LOAD_CONST 2 ( '0' )					  
							      110 LOAD_CONST 4 ( '' )					    110 LOAD_CONST 2 ( '' )					  
							      112 LOAD_CONST 5 ( ( 'end' , ) )				    112 LOAD_CONST 4 ( ( 'end' , ) )				  
							      114 CALL_FUNCTION_KW 2					    114 CALL_FUNCTION_KW 2					  
							      116 POP_TOP						    116 POP_TOP							  
							      								    								  
							      14 118 LOAD_FAST 3 ( count_0 )				    14 118 LOAD_FAST 3 ( count_0 )				  
							      120 LOAD_CONST 3 ( 1 )					    120 LOAD_CONST 3 ( 1 )					  
							      122 INPLACE_SUBTRACT					    122 INPLACE_SUBTRACT					  
							      124 STORE_FAST 3 ( count_0 )				    124 STORE_FAST 3 ( count_1 )				  
							      126 JUMP_ABSOLUTE 94					    126 JUMP_ABSOLUTE 94					  
							      >> 128 POP_BLOCK						    >> 128 POP_BLOCK						  
							      								    								  
							      15 >> 130 SETUP_LOOP 46 ( to 178 )			    15 >> 130 SETUP_LOOP 54 ( to 194 )				  
							      132 LOAD_GLOBAL 1 ( range )				    132 LOAD_GLOBAL 1 ( range )					  
							      134 LOAD_CONST 1 ( 0 )					    134 LOAD_CONST 1 ( 0 )					  
							      136 LOAD_FAST 2 ( y )					    136 LOAD_FAST 2 ( y )					  
							      138 CALL_FUNCTION 2					    138 CALL_FUNCTION 2						  
							      140 GET_ITER						    140 GET_ITER						  
							      >> 142 FOR_ITER 32 ( to 176 )				    >> 142 FOR_ITER 44 ( to 192 )				  
							      144 STORE_FAST 7 ( j )					    144 STORE_FAST 7 ( j )					  
							      								    								  
							      16 146 LOAD_FAST 4 ( count_1 )				    16 146 LOAD_FAST 3 ( count_1 )				  
							      148 LOAD_CONST 1 ( 0 )					    148 LOAD_CONST 1 ( 0 )					  
							      150 COMPARE_OP 4 ( > )					    150 COMPARE_OP 4 ( > )					  
							      152 POP_JUMP_IF_FALSE 142					    152 POP_JUMP_IF_FALSE 142					  
							      								    								  
							      17 154 LOAD_GLOBAL 2 ( print )				    17 154 LOAD_GLOBAL 2 ( print )				  
							      156 LOAD_CONST 6 ( '1' )					    156 LOAD_CONST 2 ( '1' )					  
							      158 LOAD_CONST 4 ( '' )					    158 LOAD_CONST 2 ( '' )					  
							      160 LOAD_CONST 5 ( ( 'end' , ) )				    160 LOAD_CONST 4 ( ( 'end' , ) )				  
							      162 CALL_FUNCTION_KW 2					    162 CALL_FUNCTION_KW 2					  
							      164 POP_TOP						    164 POP_TOP							  
							      								    								  
							      18 166 LOAD_FAST 4 ( count_1 )				    18 166 LOAD_FAST 3 ( count_1 )				  
							      168 LOAD_CONST 3 ( 1 )					    168 LOAD_CONST 3 ( 1 )					  
							      170 INPLACE_SUBTRACT					    170 INPLACE_SUBTRACT					  
							      172 STORE_FAST 4 ( count_1 )				    172 STORE_FAST 3 ( count_1 )				  
							      174 JUMP_ABSOLUTE 142					    174 JUMP_ABSOLUTE 142					  
							      >> 176 POP_BLOCK						    >> 176 POP_BLOCK						  
							      >> 178 JUMP_ABSOLUTE 66					    >> 178 JUMP_ABSOLUTE 66					  
							      >> 180 POP_BLOCK						    >> 180 POP_BLOCK						  
							      >> 182 LOAD_CONST 0 ( None )				    >> 182 LOAD_CONST 0 ( None )				  
							      184 RETURN_VALUE NEW_LINE					    184 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2			      PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2			    PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2			  PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2
--							      --							    --								  --
def minimumSquare ( m , n ) :				      Disassembly of <code object minimumSquare at 0x7f33e2653ed0,  Disassembly of <code object minimumSquare at 0x7f2b0163dc90,  script_not_found : None
    vertical_min = 10000000000				      2 0 LOAD_CONST 1 ( 10000000000 )				    2 0 LOAD_CONST 1 ( 10000000000 )				  
    horizontal_min = 10000000000			      2 STORE_FAST 2 ( vertical_min )				    2 STORE_FAST 2 ( vertical_min )				  
    if m == n :						      								    								  
	return 1					      3 4 LOAD_CONST 1 ( 10000000000 )				    3 4 LOAD_CONST 1 ( 10000000000 )				  
    if dp [ m ] [ n ] != 0 :				      6 STORE_FAST 3 ( horizontal_min )				    6 STORE_FAST 3 ( horizontal_min )				  
	return dp [ m ] [ n ]				      								    								  
    for i in range ( 1 , m // 2 + 1 ) :			      4 8 LOAD_FAST 0 ( m )					    4 8 LOAD_FAST 0 ( m )					  
	horizontal_min = min ( minimumSquare ( i , n ) + mini 10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
    for j in range ( 1 , n // 2 + 1 ) :			      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	vertical_min = min ( minimumSquare ( m , j ) + minimu 14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
    dp [ m ] [ n ] = min ( vertical_min , horizontal_min )    								    								  
    return dp [ m ] [ n ]				      5 16 LOAD_CONST 2 ( 1 )					    5 16 LOAD_CONST 2 ( 1 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      6 >> 20 LOAD_GLOBAL 0 ( dp )				    6 >> 20 LOAD_GLOBAL 0 ( dp )				  
							      22 LOAD_FAST 0 ( m )					    22 LOAD_FAST 0 ( m )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 1 ( n )					    26 LOAD_FAST 1 ( n )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 3 ( 0 )					    30 LOAD_CONST 3 ( 0 )					  
							      32 COMPARE_OP 3 ( != )					    32 COMPARE_OP 3 ( != )					  
							      34 POP_JUMP_IF_FALSE 48					    34 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      7 36 LOAD_GLOBAL 0 ( dp )					    7 36 LOAD_GLOBAL 0 ( dp )					  
							      38 LOAD_FAST 0 ( m )					    38 LOAD_FAST 0 ( m )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 1 ( n )					    42 LOAD_FAST 1 ( n )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      8 >> 48 SETUP_LOOP 56 ( to 106 )				    8 >> 48 SETUP_LOOP 52 ( to 102 )				  
							      50 LOAD_GLOBAL 1 ( range )				    50 LOAD_GLOBAL 1 ( range )					  
							      52 LOAD_CONST 2 ( 1 )					    52 LOAD_CONST 2 ( 1 )					  
							      54 LOAD_FAST 0 ( m )					    54 LOAD_FAST 0 ( m )					  
							      56 LOAD_CONST 4 ( 2 )					    56 LOAD_CONST 4 ( 2 )					  
							      58 BINARY_FLOOR_DIVIDE					    58 BINARY_FLOOR_DIVIDE					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_ADD						    62 BINARY_ADD						  
							      64 CALL_FUNCTION 2					    64 CALL_FUNCTION 2						  
							      66 GET_ITER						    66 GET_ITER							  
							      >> 68 FOR_ITER 34 ( to 104 )				    >> 68 FOR_ITER 32 ( to 100 )				  
							      70 STORE_FAST 4 ( i )					    70 STORE_FAST 4 ( i )					  
							      								    								  
							      9 72 LOAD_GLOBAL 2 ( min )				    9 72 LOAD_GLOBAL 2 ( min )					  
							      74 LOAD_GLOBAL 3 ( minimumSquare )			    74 LOAD_GLOBAL 3 ( minimumSquare )				  
							      76 LOAD_FAST 4 ( i )					    76 LOAD_FAST 4 ( i )					  
							      78 LOAD_FAST 1 ( n )					    78 LOAD_FAST 1 ( n )					  
							      80 CALL_FUNCTION 2					    80 CALL_FUNCTION 2						  
							      82 LOAD_GLOBAL 3 ( minimumSquare )			    82 LOAD_GLOBAL 4 ( minimumSquare )				  
							      84 LOAD_FAST 0 ( m )					    84 LOAD_FAST 0 ( m )					  
							      86 LOAD_FAST 4 ( i )					    86 LOAD_FAST 4 ( i )					  
							      88 BINARY_SUBTRACT					    88 BINARY_SUBTRACT						  
							      90 LOAD_FAST 1 ( n )					    90 LOAD_FAST 1 ( n )					  
							      92 CALL_FUNCTION 2					    92 CALL_FUNCTION 2						  
							      94 BINARY_ADD						    94 BINARY_ADD						  
							      96 LOAD_FAST 3 ( horizontal_min )				    96 LOAD_FAST 3 ( horizontal_min )				  
							      98 CALL_FUNCTION 2					    98 CALL_FUNCTION 2						  
							      100 STORE_FAST 3 ( horizontal_min )			    100 STORE_FAST 3 ( horizontal_min )				  
							      102 JUMP_ABSOLUTE 68					    102 JUMP_ABSOLUTE 68					  
							      >> 104 POP_BLOCK						    >> 104 POP_BLOCK						  
							      								    								  
							      10 >> 106 SETUP_LOOP 56 ( to 164 )			    10 >> 106 SETUP_LOOP 60 ( to 176 )				  
							      108 LOAD_GLOBAL 1 ( range )				    108 LOAD_GLOBAL 1 ( range )					  
							      110 LOAD_CONST 2 ( 1 )					    110 LOAD_CONST 2 ( 1 )					  
							      112 LOAD_FAST 1 ( n )					    112 LOAD_FAST 1 ( n )					  
							      114 LOAD_CONST 4 ( 2 )					    114 LOAD_CONST 4 ( 2 )					  
							      116 BINARY_FLOOR_DIVIDE					    116 BINARY_FLOOR_DIVIDE					  
							      118 LOAD_CONST 2 ( 1 )					    118 LOAD_CONST 2 ( 1 )					  
							      120 BINARY_ADD						    120 BINARY_ADD						  
							      122 CALL_FUNCTION 2					    122 CALL_FUNCTION 2						  
							      124 GET_ITER						    124 GET_ITER						  
							      >> 126 FOR_ITER 34 ( to 162 )				    >> 126 FOR_ITER 40 ( to 174 )				  
							      128 STORE_FAST 5 ( j )					    128 STORE_FAST 5 ( j )					  
							      								    								  
							      11 130 LOAD_GLOBAL 2 ( min )				    11 130 LOAD_GLOBAL 2 ( min )				  
							      132 LOAD_GLOBAL 3 ( minimumSquare )			    132 LOAD_GLOBAL 3 ( minimumSquare )				  
							      134 LOAD_FAST 0 ( m )					    134 LOAD_FAST 0 ( m )					  
							      136 LOAD_FAST 5 ( j )					    136 LOAD_FAST 5 ( j )					  
							      138 CALL_FUNCTION 2					    138 CALL_FUNCTION 2						  
							      140 LOAD_GLOBAL 3 ( minimumSquare )			    140 LOAD_GLOBAL 3 ( minimumSquare )				  
							      142 LOAD_FAST 0 ( m )					    142 LOAD_FAST 0 ( m )					  
							      144 LOAD_FAST 1 ( n )					    144 LOAD_FAST 1 ( n )					  
							      146 LOAD_FAST 5 ( j )					    146 LOAD_FAST 5 ( j )					  
							      148 BINARY_SUBTRACT					    148 BINARY_SUBTRACT						  
							      150 CALL_FUNCTION 2					    150 CALL_FUNCTION 2						  
							      152 BINARY_ADD						    152 BINARY_ADD						  
							      154 LOAD_FAST 2 ( vertical_min )				    154 LOAD_FAST 2 ( vertical_min )				  
							      156 CALL_FUNCTION 2					    156 CALL_FUNCTION 2						  
							      158 STORE_FAST 2 ( vertical_min )				    158 STORE_FAST 2 ( vertical_min )				  
							      160 JUMP_ABSOLUTE 126					    160 JUMP_ABSOLUTE 126					  
							      >> 162 POP_BLOCK						    >> 162 POP_BLOCK						  
							      								    								  
							      12 >> 164 LOAD_GLOBAL 2 ( min )				    12 >> 164 LOAD_GLOBAL 2 ( min )				  
							      166 LOAD_FAST 2 ( vertical_min )				    166 LOAD_FAST 2 ( vertical_min )				  
							      168 LOAD_FAST 3 ( horizontal_min )			    168 LOAD_FAST 3 ( horizontal_min )				  
							      170 CALL_FUNCTION 2					    170 CALL_FUNCTION 2						  
							      172 LOAD_GLOBAL 0 ( dp )					    172 LOAD_GLOBAL 0 ( dp )					  
							      174 LOAD_FAST 0 ( m )					    174 LOAD_FAST 0 ( m )					  
							      176 BINARY_SUBSCR						    176 BINARY_SUBSCR						  
							      178 LOAD_FAST 1 ( n )					    178 LOAD_FAST 1 ( n )					  
							      180 STORE_SUBSCR						    180 STORE_SUBSCR						  
							      								    								  
							      13 182 LOAD_GLOBAL 0 ( dp )				    13 182 LOAD_GLOBAL 0 ( dp )					  
							      184 LOAD_FAST 0 ( m )					    184 LOAD_FAST 0 ( m )					  
							      186 BINARY_SUBSCR						    186 BINARY_SUBSCR						  
							      188 LOAD_FAST 1 ( n )					    188 LOAD_FAST 1 ( n )					  
							      190 BINARY_SUBSCR						    190 BINARY_SUBSCR						  
							      192 RETURN_VALUE NEW_LINE					    192 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_NON_REPEATING_CHARACTER				      KTH_NON_REPEATING_CHARACTER				    KTH_NON_REPEATING_CHARACTER					  KTH_NON_REPEATING_CHARACTER
--							      --							    --								  --
def kthNonRepeating ( str , k ) :			      Disassembly of <code object kthNonRepeating at 0x7f33e26494b0 Disassembly of <code object kthNonRepeating at 0x7f2b0164d930 script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    count = [ 0 ] * MAX_CHAR				      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    index = [ 0 ] * MAX_CHAR				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( MAX_CHAR ) :			      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  
	count [ i ] = 0					      								    								  
	index [ i ] = n					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
	x = str [ i ]					      12 LOAD_GLOBAL 1 ( MAX_CHAR )				    12 LOAD_GLOBAL 1 ( MAX_CHAR )				  
	count [ ord ( x ) ] += 1			      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
	if ( count [ ord ( x ) ] == 1 ) :		      16 STORE_FAST 3 ( count )					    16 STORE_FAST 3 ( count )					  
	    index [ ord ( x ) ] = i			      								    								  
	if ( count [ ord ( x ) ] == 2 ) :		      4 18 LOAD_CONST 1 ( 0 )					    4 18 LOAD_CONST 1 ( 0 )					  
	    index [ ord ( x ) ] = n			      20 BUILD_LIST 1						    20 BUILD_LIST 1						  
    index.sort ( )					      22 LOAD_GLOBAL 1 ( MAX_CHAR )				    22 LOAD_GLOBAL 1 ( MAX_CHAR )				  
    return index [ k - 1 ] if ( index [ k - 1 ] != n ) else - 24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 STORE_FAST 4 ( index )					    26 STORE_FAST 4 ( index )					  
							      								    								  
							      5 28 SETUP_LOOP 32 ( to 62 )				    5 28 SETUP_LOOP 34 ( to 62 )				  
							      30 LOAD_GLOBAL 2 ( range )				    30 LOAD_GLOBAL 2 ( range )					  
							      32 LOAD_GLOBAL 1 ( MAX_CHAR )				    32 LOAD_GLOBAL 3 ( MAX_CHAR )				  
							      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 20 ( to 60 )				    >> 38 FOR_ITER 22 ( to 60 )					  
							      40 STORE_FAST 5 ( i )					    40 STORE_FAST 5 ( i )					  
							      								    								  
							      6 42 LOAD_CONST 1 ( 0 )					    6 42 LOAD_CONST 1 ( 0 )					  
							      44 LOAD_FAST 3 ( count )					    44 LOAD_FAST 3 ( count )					  
							      46 LOAD_FAST 5 ( i )					    46 LOAD_FAST 5 ( i )					  
							      48 STORE_SUBSCR						    48 STORE_SUBSCR						  
							      								    								  
							      7 50 LOAD_FAST 2 ( n )					    7 50 LOAD_FAST 2 ( n )					  
							      52 LOAD_FAST 4 ( index )					    52 LOAD_FAST 4 ( index )					  
							      54 LOAD_FAST 5 ( i )					    54 LOAD_FAST 5 ( i )					  
							      56 STORE_SUBSCR						    56 STORE_SUBSCR						  
							      58 JUMP_ABSOLUTE 38					    58 JUMP_ABSOLUTE 38						  
							      >> 60 POP_BLOCK						    >> 60 POP_BLOCK						  
							      								    								  
							      8 >> 62 SETUP_LOOP 100 ( to 164 )				    8 >> 62 SETUP_LOOP 76 ( to 144 )				  
							      64 LOAD_GLOBAL 2 ( range )				    64 LOAD_GLOBAL 2 ( range )					  
							      66 LOAD_FAST 2 ( n )					    66 LOAD_FAST 2 ( n )					  
							      68 CALL_FUNCTION 1					    68 CALL_FUNCTION 1						  
							      70 GET_ITER						    70 GET_ITER							  
							      >> 72 FOR_ITER 88 ( to 162 )				    >> 72 FOR_ITER 64 ( to 142 )				  
							      74 STORE_FAST 5 ( i )					    74 STORE_FAST 5 ( i )					  
							      								    								  
							      9 76 LOAD_FAST 0 ( str )					    9 76 LOAD_FAST 0 ( str )					  
							      78 LOAD_FAST 5 ( i )					    78 LOAD_FAST 5 ( i )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 STORE_FAST 6 ( x )					    82 STORE_FAST 6 ( x )					  
							      								    								  
							      10 84 LOAD_FAST 3 ( count )				    10 84 LOAD_FAST 3 ( count )					  
							      86 LOAD_GLOBAL 3 ( ord )					    86 LOAD_GLOBAL 4 ( ord )					  
							      88 LOAD_FAST 6 ( x )					    88 LOAD_FAST 6 ( x )					  
							      90 CALL_FUNCTION 1					    90 CALL_FUNCTION 1						  
							      92 DUP_TOP_TWO						    92 DUP_TOP_TWO						  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 LOAD_CONST 2 ( 1 )					    96 LOAD_CONST 2 ( 1 )					  
							      98 INPLACE_ADD						    98 INPLACE_ADD						  
							      100 ROT_THREE						    100 ROT_THREE						  
							      102 STORE_SUBSCR						    102 STORE_SUBSCR						  
							      								    								  
							      11 104 LOAD_FAST 3 ( count )				    11 104 LOAD_FAST 3 ( count )				  
							      106 LOAD_GLOBAL 3 ( ord )					    106 LOAD_GLOBAL 4 ( ord )					  
							      108 LOAD_FAST 6 ( x )					    108 LOAD_FAST 6 ( x )					  
							      110 CALL_FUNCTION 1					    110 CALL_FUNCTION 1						  
							      112 BINARY_SUBSCR						    112 BINARY_SUBSCR						  
							      114 LOAD_CONST 2 ( 1 )					    114 LOAD_CONST 2 ( 1 )					  
							      116 COMPARE_OP 2 ( == )					    116 COMPARE_OP 2 ( == )					  
							      118 POP_JUMP_IF_FALSE 132					    118 POP_JUMP_IF_FALSE 134					  
							      								    								  
							      12 120 LOAD_FAST 5 ( i )					    12 120 LOAD_FAST 5 ( i )					  
							      122 LOAD_FAST 4 ( index )					    122 LOAD_FAST 4 ( index )					  
							      124 LOAD_GLOBAL 3 ( ord )					    124 LOAD_GLOBAL 4 ( ord )					  
							      126 LOAD_FAST 6 ( x )					    126 LOAD_FAST 6 ( x )					  
							      128 CALL_FUNCTION 1					    128 CALL_FUNCTION 1						  
							      130 STORE_SUBSCR						    130 STORE_SUBSCR						  
							      								    132 JUMP_ABSOLUTE 72					  
							      13 >> 132 LOAD_FAST 3 ( count )				    >> 134 POP_BLOCK						  
							      134 LOAD_GLOBAL 3 ( ord )					    								  
							      136 LOAD_FAST 6 ( x )					    13 >> 136 LOAD_FAST 3 ( count )				  
							      138 CALL_FUNCTION 1					    138 LOAD_GLOBAL 4 ( ord )					  
							      140 BINARY_SUBSCR						    140 LOAD_FAST 6 ( x )					  
							      142 LOAD_CONST 3 ( 2 )					    142 CALL_FUNCTION 1						  
							      144 COMPARE_OP 2 ( == )					    144 BINARY_SUBSCR						  
							      146 POP_JUMP_IF_FALSE 72					    146 LOAD_CONST 3 ( 2 )					  
							      								    148 COMPARE_OP 2 ( == )					  
							      14 148 LOAD_FAST 2 ( n )					    150 POP_JUMP_IF_FALSE 72					  
							      150 LOAD_FAST 4 ( index )					    								  
							      152 LOAD_GLOBAL 3 ( ord )					    14 152 LOAD_FAST 2 ( n )					  
							      154 LOAD_FAST 6 ( x )					    154 LOAD_FAST 4 ( index )					  
							      156 CALL_FUNCTION 1					    156 LOAD_FAST 4 ( index )					  
							      158 STORE_SUBSCR						    158 LOAD_GLOBAL 4 ( ord )					  
							      160 JUMP_ABSOLUTE 72					    160 LOAD_FAST 6 ( x )					  
							      >> 162 POP_BLOCK						    162 CALL_FUNCTION 1						  
							      								    164 STORE_SUBSCR						  
							      15 >> 164 LOAD_FAST 4 ( index )				    								  
							      166 LOAD_METHOD 4 ( sort )				    15 >> 166 LOAD_FAST 4 ( index )				  
							      168 CALL_METHOD 0						    168 LOAD_METHOD 5 ( sort )					  
							      170 POP_TOP						    170 CALL_METHOD 0						  
							      								    172 POP_TOP							  
							      16 172 LOAD_FAST 4 ( index )				    								  
							      174 LOAD_FAST 1 ( k )					    16 174 LOAD_FAST 4 ( index )				  
							      176 LOAD_CONST 2 ( 1 )					    176 LOAD_FAST 1 ( k )					  
							      178 BINARY_SUBTRACT					    178 LOAD_CONST 2 ( 1 )					  
							      180 BINARY_SUBSCR						    180 BINARY_SUBTRACT						  
							      182 LOAD_FAST 2 ( n )					    182 BINARY_SUBSCR						  
							      184 COMPARE_OP 3 ( != )					    184 LOAD_FAST 2 ( n )					  
							      186 POP_JUMP_IF_FALSE 200					    186 COMPARE_OP 3 ( != )					  
							      188 LOAD_FAST 4 ( index )					    188 POP_JUMP_IF_FALSE 196					  
							      190 LOAD_FAST 1 ( k )					    190 JUMP_FORWARD 2 ( to 194 )				  
							      192 LOAD_CONST 2 ( 1 )					    >> 192 LOAD_CONST 4 ( - 1 )					  
							      194 BINARY_SUBTRACT					    >> 194 RETURN_VALUE NEW_LINE				  
							      196 BINARY_SUBSCR						    								  
							      198 RETURN_VALUE						    								  
							      >> 200 LOAD_CONST 4 ( - 1 )				    								  
							      202 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMMON_CHARACTERS_N_STRINGS				      COMMON_CHARACTERS_N_STRINGS				    COMMON_CHARACTERS_N_STRINGS					  COMMON_CHARACTERS_N_STRINGS
--							      --							    --								  --
def commonCharacters ( strings , n ) :			      Disassembly of <code object commonCharacters at 0x7f33e2653ed Disassembly of <code object commonCharacters at 0x7f2b0163dc9 script_not_found : None
    prim = [ True ] * MAX_CHAR				      2 0 LOAD_CONST 1 ( True )					    2 0 LOAD_CONST 1 ( True )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	sec = [ False ] * MAX_CHAR			      4 LOAD_GLOBAL 0 ( MAX_CHAR )				    4 LOAD_GLOBAL 0 ( MAX_CHAR )				  
	for j in range ( len ( strings [ i ] ) ) :	      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
	    if ( prim [ ord ( strings [ i ] [ j ] ) - ord ( ' 8 STORE_FAST 2 ( prim )					    8 STORE_FAST 2 ( prim )					  
		sec [ ord ( strings [ i ] [ j ] ) - ord ( 'a' 								    								  
	for i in range ( MAX_CHAR ) :			      3 10 SETUP_LOOP 138 ( to 150 )				    3 10 SETUP_LOOP 120 ( to 128 )				  
	    prim [ i ] = sec [ i ]			      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
    for i in range ( 26 ) :				      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
	if ( prim [ i ] ) :				      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
	    print ( "%c " % ( i + ord ( 'a' ) ) , end = "" )  18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 126 ( to 148 )				    >> 20 FOR_ITER 112 ( to 126 )				  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_CONST 2 ( False )				    4 24 LOAD_CONST 2 ( False )					  
							      26 BUILD_LIST 1						    26 BUILD_LIST 1						  
							      28 LOAD_GLOBAL 0 ( MAX_CHAR )				    28 LOAD_GLOBAL 0 ( MAX_CHAR )				  
							      30 BINARY_MULTIPLY					    30 BINARY_MULTIPLY						  
							      32 STORE_FAST 4 ( sec )					    32 STORE_FAST 4 ( sec )					  
							      								    								  
							      5 34 SETUP_LOOP 80 ( to 116 )				    5 34 SETUP_LOOP 66 ( to 112 )				  
							      36 LOAD_GLOBAL 1 ( range )				    36 LOAD_GLOBAL 1 ( range )					  
							      38 LOAD_GLOBAL 2 ( len )					    38 LOAD_GLOBAL 2 ( len )					  
							      40 LOAD_FAST 0 ( strings )				    40 LOAD_FAST 0 ( strings )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 3 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 CALL_FUNCTION 1					    46 CALL_FUNCTION 1						  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 60 ( to 114 )				    >> 52 FOR_ITER 44 ( to 110 )				  
							      54 STORE_FAST 5 ( j )					    54 STORE_FAST 5 ( j )					  
							      								    								  
							      6 56 LOAD_FAST 2 ( prim )					    6 56 LOAD_FAST 2 ( prim )					  
							      58 LOAD_GLOBAL 3 ( ord )					    58 LOAD_GLOBAL 3 ( ord )					  
							      60 LOAD_FAST 0 ( strings )				    60 LOAD_FAST 0 ( strings )					  
							      62 LOAD_FAST 3 ( i )					    62 LOAD_FAST 3 ( i )					  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 5 ( j )					    66 LOAD_FAST 5 ( j )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 CALL_FUNCTION 1					    70 CALL_FUNCTION 1						  
							      72 LOAD_GLOBAL 3 ( ord )					    72 LOAD_GLOBAL 3 ( ord )					  
							      74 LOAD_CONST 3 ( 'a' )					    74 LOAD_CONST 3 ( 'a' )					  
							      76 CALL_FUNCTION 1					    76 CALL_FUNCTION 1						  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 POP_JUMP_IF_FALSE 52					    82 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 84 LOAD_CONST 1 ( True )				    7 84 LOAD_CONST 1 ( True )					  
							      86 LOAD_FAST 4 ( sec )					    86 LOAD_FAST 4 ( sec )					  
							      88 LOAD_GLOBAL 3 ( ord )					    88 LOAD_GLOBAL 3 ( ord )					  
							      90 LOAD_FAST 0 ( strings )				    90 LOAD_FAST 0 ( strings )					  
							      92 LOAD_FAST 3 ( i )					    92 LOAD_FAST 3 ( i )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 LOAD_FAST 5 ( j )					    96 LOAD_FAST 5 ( j )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 CALL_FUNCTION 1					    100 CALL_FUNCTION 1						  
							      102 LOAD_GLOBAL 3 ( ord )					    102 LOAD_GLOBAL 3 ( ord )					  
							      104 LOAD_CONST 3 ( 'a' )					    104 LOAD_CONST 3 ( 'a' )					  
							      106 CALL_FUNCTION 1					    106 CALL_FUNCTION 1						  
							      108 BINARY_SUBTRACT					    108 BINARY_SUBTRACT						  
							      110 STORE_SUBSCR						    110 STORE_SUBSCR						  
							      112 JUMP_ABSOLUTE 52					    112 JUMP_ABSOLUTE 52					  
							      >> 114 POP_BLOCK						    >> 114 POP_BLOCK						  
							      								    								  
							      8 >> 116 SETUP_LOOP 28 ( to 146 )				    8 >> 116 SETUP_LOOP 32 ( to 124 )				  
							      118 LOAD_GLOBAL 1 ( range )				    118 LOAD_GLOBAL 1 ( range )					  
							      120 LOAD_GLOBAL 0 ( MAX_CHAR )				    120 LOAD_GLOBAL 0 ( MAX_CHAR )				  
							      122 CALL_FUNCTION 1					    122 CALL_FUNCTION 1						  
							      124 GET_ITER						    124 GET_ITER						  
							      >> 126 FOR_ITER 16 ( to 144 )				    >> 126 FOR_ITER 18 ( to 122 )				  
							      128 STORE_FAST 3 ( i )					    128 STORE_FAST 3 ( i )					  
							      								    								  
							      9 130 LOAD_FAST 4 ( sec )					    9 130 LOAD_FAST 4 ( sec )					  
							      132 LOAD_FAST 3 ( i )					    132 LOAD_FAST 3 ( i )					  
							      134 BINARY_SUBSCR						    134 BINARY_SUBSCR						  
							      136 LOAD_FAST 2 ( prim )					    136 LOAD_FAST 2 ( prim )					  
							      138 LOAD_FAST 3 ( i )					    138 LOAD_FAST 3 ( i )					  
							      140 STORE_SUBSCR						    140 STORE_SUBSCR						  
							      142 JUMP_ABSOLUTE 126					    142 JUMP_ABSOLUTE 126					  
							      >> 144 POP_BLOCK						    >> 144 POP_BLOCK						  
							      >> 146 JUMP_ABSOLUTE 20					    >> 146 JUMP_ABSOLUTE 20					  
							      >> 148 POP_BLOCK						    >> 148 POP_BLOCK						  
							      								    								  
							      10 >> 150 SETUP_LOOP 48 ( to 200 )			    10 >> 150 SETUP_LOOP 68 ( to 194 )				  
							      152 LOAD_GLOBAL 1 ( range )				    152 LOAD_GLOBAL 1 ( range )					  
							      154 LOAD_CONST 4 ( 26 )					    154 LOAD_CONST 4 ( 26 )					  
							      156 CALL_FUNCTION 1					    156 CALL_FUNCTION 1						  
							      158 GET_ITER						    158 GET_ITER						  
							      >> 160 FOR_ITER 36 ( to 198 )				    >> 160 FOR_ITER 56 ( to 192 )				  
							      162 STORE_FAST 3 ( i )					    162 STORE_FAST 3 ( i )					  
							      								    								  
							      11 164 LOAD_FAST 2 ( prim )				    11 164 LOAD_FAST 2 ( prim )					  
							      166 LOAD_FAST 3 ( i )					    166 LOAD_FAST 3 ( i )					  
							      168 BINARY_SUBSCR						    168 BINARY_SUBSCR						  
							      170 POP_JUMP_IF_FALSE 160					    170 POP_JUMP_IF_FALSE 160					  
							      								    								  
							      12 172 LOAD_GLOBAL 4 ( print )				    12 172 LOAD_GLOBAL 4 ( print )				  
							      174 LOAD_CONST 5 ( '%c ' )				    174 LOAD_CONST 5 ( '%c ' )					  
							      176 LOAD_FAST 3 ( i )					    176 LOAD_FAST 3 ( i )					  
							      178 LOAD_GLOBAL 3 ( ord )					    178 LOAD_GLOBAL 3 ( ord )					  
							      180 LOAD_CONST 3 ( 'a' )					    180 LOAD_CONST 3 ( 'a' )					  
							      182 CALL_FUNCTION 1					    182 CALL_FUNCTION 1						  
							      184 BINARY_ADD						    184 BINARY_ADD						  
							      186 BINARY_MODULO						    186 BINARY_MODULO						  
							      188 LOAD_CONST 6 ( '' )					    188 LOAD_CONST 6 ( '' )					  
							      190 LOAD_CONST 7 ( ( 'end' , ) )				    190 LOAD_CONST 7 ( ( 'end' , ) )				  
							      192 CALL_FUNCTION_KW 2					    192 CALL_FUNCTION_KW 2					  
							      194 POP_TOP						    194 POP_TOP							  
							      196 JUMP_ABSOLUTE 160					    >> 196 JUMP_ABSOLUTE 160					  
							      >> 198 POP_BLOCK						    >> 198 POP_BLOCK						  
							      >> 200 LOAD_CONST 0 ( None )				    >> 200 LOAD_CONST 0 ( None )				  
							      202 RETURN_VALUE NEW_LINE					    202 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS
--							      --							    --								  --
def countMinReversals ( expr ) :			      Disassembly of <code object countMinReversals at 0x7f33e2644f Disassembly of <code object countMinReversals at 0x7f2b0163dc error : /bin/bash: line 1:  5058 Segmentation faul
    lenn = len ( expr )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    if ( lenn % 2 ) :					      2 LOAD_FAST 0 ( expr )					    2 LOAD_FAST 0 ( expr )					  ataset/bin/python XLM/dis_script.py --script_path
	return - 1					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    s = [ ]						      6 STORE_FAST 1 ( lenn )					    6 STORE_FAST 1 ( lenn )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MINIMU
    for i in range ( lenn ) :				      								    								  M_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EX
	if ( expr [ i ] == '' and len ( s ) ) :		      3 8 LOAD_FAST 1 ( lenn )					    3 8 LOAD_FAST 1 ( lenn )					  PRESSION_BALANCED.dis
	    if ( s [ 0 ] == '' ) :			      10 LOAD_CONST 1 ( 2 )					    10 LOAD_CONST 1 ( 2 )					  
		s.pop ( 0 )				      12 BINARY_MODULO						    12 BINARY_MODULO						  
	    else :					      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
		s.insert ( 0 , expr [ i ] )		      								    								  
	else :						      4 16 LOAD_CONST 2 ( - 1 )					    4 16 LOAD_CONST 2 ( - 1 )					  
	    s.insert ( 0 , expr [ i ] )			      18 RETURN_VALUE						    18 RETURN_VALUE						  
    red_len = len ( s )					      								    								  
    n = 0						      5 >> 20 BUILD_LIST 0					    5 >> 20 BUILD_LIST 0					  
    while ( len ( s ) and s [ 0 ] == '' ) :		      22 STORE_FAST 2 ( s )					    22 STORE_FAST 2 ( s )					  
	s.pop ( 0 )					      								    								  
	n += 1						      6 24 SETUP_LOOP 94 ( to 120 )				    6 24 SETUP_LOOP 92 ( to 106 )				  
    return ( red_len // 2 + n % 2 )			      26 LOAD_GLOBAL 1 ( range )				    26 LOAD_GLOBAL 1 ( range )					  
							      28 LOAD_FAST 1 ( lenn )					    28 LOAD_FAST 1 ( lenn )					  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 GET_ITER						    32 GET_ITER							  
							      >> 34 FOR_ITER 82 ( to 118 )				    >> 34 FOR_ITER 80 ( to 104 )				  
							      36 STORE_FAST 3 ( i )					    36 STORE_FAST 3 ( i )					  
							      								    								  
							      7 38 LOAD_FAST 0 ( expr )					    7 38 LOAD_FAST 0 ( expr )					  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 3 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_CONST 3 ( '' )					    44 LOAD_CONST 3 ( '' )					  
							      46 COMPARE_OP 2 ( == )					    46 COMPARE_OP 2 ( == )					  
							      48 POP_JUMP_IF_FALSE 100					    48 POP_JUMP_IF_FALSE 80					  
							      50 LOAD_GLOBAL 0 ( len )					    50 LOAD_GLOBAL 0 ( len )					  
							      52 LOAD_FAST 2 ( s )					    52 LOAD_FAST 2 ( s )					  
							      54 CALL_FUNCTION 1					    54 CALL_FUNCTION 1						  
							      56 POP_JUMP_IF_FALSE 100					    56 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      8 58 LOAD_FAST 2 ( s )					    8 58 LOAD_FAST 2 ( s )					  
							      60 LOAD_CONST 4 ( 0 )					    60 LOAD_CONST 4 ( 0 )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_CONST 3 ( '' )					    64 LOAD_CONST 3 ( '' )					  
							      66 COMPARE_OP 2 ( == )					    66 COMPARE_OP 2 ( == )					  
							      68 POP_JUMP_IF_FALSE 82					    68 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      9 70 LOAD_FAST 2 ( s )					    9 70 LOAD_FAST 2 ( s )					  
							      72 LOAD_METHOD 2 ( pop )					    72 LOAD_METHOD 2 ( pop )					  
							      74 LOAD_CONST 4 ( 0 )					    74 LOAD_CONST 4 ( 0 )					  
							      76 CALL_METHOD 1						    76 CALL_METHOD 1						  
							      78 POP_TOP						    78 POP_TOP							  
							      80 JUMP_ABSOLUTE 116					    								  
							      								    10 >> 80 LOAD_FAST 2 ( s )					  
							      11 >> 82 LOAD_FAST 2 ( s )				    82 LOAD_METHOD 3 ( insert )					  
							      84 LOAD_METHOD 3 ( insert )				    84 LOAD_CONST 4 ( 0 )					  
							      86 LOAD_CONST 4 ( 0 )					    86 LOAD_FAST 0 ( expr )					  
							      88 LOAD_FAST 0 ( expr )					    88 LOAD_FAST 3 ( i )					  
							      90 LOAD_FAST 3 ( i )					    90 BINARY_SUBSCR						  
							      92 BINARY_SUBSCR						    92 CALL_METHOD 2						  
							      94 CALL_METHOD 2						    94 POP_TOP							  
							      96 POP_TOP						    96 JUMP_ABSOLUTE 34						  
							      98 JUMP_ABSOLUTE 34					    98 POP_BLOCK						  
							      								    								  
							      13 >> 100 LOAD_FAST 2 ( s )				    12 >> 100 LOAD_FAST 2 ( s )					  
							      102 LOAD_METHOD 3 ( insert )				    102 LOAD_METHOD 3 ( insert )				  
							      104 LOAD_CONST 4 ( 0 )					    104 LOAD_CONST 4 ( 0 )					  
							      106 LOAD_FAST 0 ( expr )					    106 LOAD_FAST 0 ( expr )					  
							      108 LOAD_FAST 3 ( i )					    108 LOAD_FAST 3 ( i )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 CALL_METHOD 2						    112 CALL_METHOD 2						  
							      114 POP_TOP						    114 POP_TOP							  
							      >> 116 JUMP_ABSOLUTE 34					    116 JUMP_ABSOLUTE 34					  
							      >> 118 POP_BLOCK						    								  
							      								    14 >> 118 LOAD_FAST 2 ( s )					  
							      14 >> 120 LOAD_GLOBAL 0 ( len )				    120 LOAD_METHOD 3 ( insert )				  
							      122 LOAD_FAST 2 ( s )					    122 LOAD_CONST 4 ( 0 )					  
							      124 CALL_FUNCTION 1					    124 LOAD_FAST 0 ( expr )					  
							      126 STORE_FAST 4 ( red_len )				    126 LOAD_FAST 3 ( i )					  
							      								    128 BINARY_SUBSCR						  
							      15 128 LOAD_CONST 4 ( 0 )					    130 CALL_METHOD 2						  
							      130 STORE_FAST 5 ( n )					    132 POP_TOP							  
							      								    134 JUMP_ABSOLUTE 34					  
							      16 132 SETUP_LOOP 42 ( to 176 )				    >> 136 POP_BLOCK						  
							      >> 134 LOAD_GLOBAL 0 ( len )				    								  
							      136 LOAD_FAST 2 ( s )					    15 >> 138 LOAD_GLOBAL 0 ( len )				  
							      138 CALL_FUNCTION 1					    140 LOAD_FAST 2 ( s )					  
							      140 POP_JUMP_IF_FALSE 174					    142 CALL_FUNCTION 1						  
							      142 LOAD_FAST 2 ( s )					    144 STORE_FAST 4 ( red_len )				  
							      144 LOAD_CONST 4 ( 0 )					    								  
							      146 BINARY_SUBSCR						    16 146 LOAD_CONST 4 ( 0 )					  
							      148 LOAD_CONST 3 ( '' )					    148 STORE_FAST 5 ( n )					  
							      150 COMPARE_OP 2 ( == )					    								  
							      152 POP_JUMP_IF_FALSE 174					    17 150 SETUP_LOOP 56 ( to 198 )				  
							      								    >> 152 LOAD_FAST 0 ( expr )					  
							      17 154 LOAD_FAST 2 ( s )					    154 LOAD_CONST 5 ( 0 )					  
							      156 LOAD_METHOD 2 ( pop )					    156 STORE_FAST 6 ( red_)					  
							      158 LOAD_CONST 4 ( 0 )					    								  
							      160 CALL_METHOD 1						    18 158 SETUP_LOOP 46 ( to 196 )				  
							      162 POP_TOP						    >> 160 LOAD_FAST 0 ( expr )					  
							      								    162 GET_ITER						  
							      18 164 LOAD_FAST 5 ( n )					    >> 164 FOR_ITER 38 ( to 194 )				  
							      166 LOAD_CONST 5 ( 1 )					    166 STORE_FAST 7 ( red_len )				  
							      168 INPLACE_ADD						    								  
							      170 STORE_FAST 5 ( n )					    19 168 LOAD_CONST 4 ( 0 )					  
							      172 JUMP_ABSOLUTE 134					    170 STORE_FAST 8 ( n )					  
							      >> 174 POP_BLOCK						    								  
							      								    20 172 SETUP_LOOP 30 ( to 192 )				  
							      19 >> 176 LOAD_FAST 4 ( red_len )				    >> 174 LOAD_FAST 0 ( expr )					  
							      178 LOAD_CONST 1 ( 2 )					    176 LOAD_FAST 2 ( s )					  
							      180 BINARY_FLOOR_DIVIDE					    178 CALL_FUNCTION 1						  
							      182 LOAD_FAST 5 ( n )					    180 POP_JUMP_IF_FALSE 190					  
							      184 LOAD_CONST 1 ( 2 )					    182 LOAD_FAST 2 ( s )					  
							      186 BINARY_MODULO						    184 LOAD_CONST 4 ( 0 )					  
							      188 BINARY_ADD						    186 BINARY_SUBSCR						  
							      190 RETURN_VALUE NEW_LINE					    188 LOAD_CONST 3 ( '' )					  
							      								    190 COMPARE_OP 2 ( == )					  
							      								    192 POP_JUMP_IF_FALSE 190					  
							      								    								  
							      								    21 194 LOAD_FAST 2 ( s )					  
							      								    196 LOAD_METHOD 2 ( pop )					  
							      								    198 LOAD_CONST 4 ( 0 )					  
							      								    200 CALL_METHOD 1						  
							      								    202 POP_TOP							  
							      								    								  
							      								    22 204 LOAD_FAST 8 ( n )					  
							      								    206 LOAD_CONST 6 ( 1 )					  
							      								    208 INPLACE_ADD						  
							      								    210 STORE_FAST 8 ( n )					  
							      								    212 JUMP_ABSOLUTE 174					  
							      								    >> 214 POP_BLOCK						  
							      								    								  
							      								    23 >> 216 LOAD_FAST 4 ( red_len )				  
							      								    218 LOAD_CONST 1 ( 2 )					  
							      								    220 BINARY_FLOOR_DIVIDE					  
							      								    222 LOAD_FAST 8 ( n )					  
							      								    224 LOAD_CONST 1 ( 2 )					  
							      								    226 BINARY_MODULO						  
							      								    228 BINARY_ADD						  
							      								    230 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD
--							      --							    --								  --
def totalNodes ( adjac , n , x , y ) :			      Disassembly of <code object totalNodes at 0x7f33e2649150, fil Disassembly of <code object totalNodes at 0x7f2b0163dc90, fil script_not_found : None
    visited = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    p = [ None ] * n					      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    q = queue.Queue ( )					      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
    q.put ( x )						      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
    visited [ x ] = True				      8 BINARY_ADD						    8 BINARY_ADD						  
    m = None						      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
    while ( not q.empty ( ) ) :				      12 STORE_FAST 4 ( visited )				    12 STORE_FAST 4 ( visited )					  
	m = q.get ( )					      								    								  
	for i in range ( len ( adjac [ m ] ) ) :	      3 14 LOAD_CONST 0 ( None )				    3 14 LOAD_CONST 0 ( None )					  
	    h = adjac [ m ] [ i ]			      16 BUILD_LIST 1						    16 BUILD_LIST 1						  
	    if ( not visited [ h ] ) :			      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
		visited [ h ] = True			      20 BINARY_MULTIPLY					    20 BINARY_MULTIPLY						  
		p [ h ] = m				      22 STORE_FAST 5 ( p )					    22 STORE_FAST 5 ( p )					  
		q.put ( h )				      								    								  
    count = 0						      4 24 LOAD_GLOBAL 0 ( queue )				    4 24 LOAD_GLOBAL 0 ( queue )				  
    i = p [ y ]						      26 LOAD_METHOD 1 ( Queue )				    26 LOAD_METHOD 1 ( Queue )					  
    while ( i != x ) :					      28 CALL_METHOD 0						    28 CALL_METHOD 0						  
	count += 1					      30 STORE_FAST 6 ( q )					    30 STORE_FAST 6 ( q )					  
	i = p [ i ]					      								    								  
    return count					      5 32 LOAD_FAST 6 ( q )					    5 32 LOAD_FAST 6 ( q )					  
							      34 LOAD_METHOD 2 ( put )					    34 LOAD_METHOD 2 ( put )					  
							      36 LOAD_FAST 2 ( x )					    36 LOAD_FAST 2 ( x )					  
							      38 CALL_METHOD 1						    38 CALL_METHOD 1						  
							      40 POP_TOP						    40 POP_TOP							  
							      								    								  
							      6 42 LOAD_CONST 3 ( True )				    6 42 LOAD_CONST 3 ( True )					  
							      44 LOAD_FAST 4 ( visited )				    44 STORE_FAST 7 ( m )					  
							      46 LOAD_FAST 2 ( x )					    								  
							      48 STORE_SUBSCR						    7 46 LOAD_CONST 0 ( None )					  
							      								    48 STORE_FAST 8 ( m )					  
							      7 50 LOAD_CONST 0 ( None )				    								  
							      52 STORE_FAST 7 ( m )					    8 50 SETUP_LOOP 142 ( to 180 )				  
							      								    >> 52 LOAD_FAST 6 ( q )					  
							      8 54 SETUP_LOOP 92 ( to 148 )				    54 LOAD_METHOD 3 ( empty )					  
							      >> 56 LOAD_FAST 6 ( q )					    56 CALL_METHOD 0						  
							      58 LOAD_METHOD 3 ( empty )				    58 POP_JUMP_IF_TRUE 178					  
							      60 CALL_METHOD 0						    								  
							      62 POP_JUMP_IF_TRUE 146					    9 60 LOAD_FAST 6 ( q )					  
							      								    62 LOAD_METHOD 4 ( get )					  
							      9 64 LOAD_FAST 6 ( q )					    64 CALL_METHOD 0						  
							      66 LOAD_METHOD 4 ( get )					    66 STORE_FAST 7 ( m )					  
							      68 CALL_METHOD 0						    								  
							      70 STORE_FAST 7 ( m )					    10 68 SETUP_LOOP 118 ( to 174 )				  
							      								    70 LOAD_GLOBAL 5 ( range )					  
							      10 72 SETUP_LOOP 70 ( to 144 )				    72 LOAD_GLOBAL 6 ( len )					  
							      74 LOAD_GLOBAL 5 ( range )				    74 LOAD_FAST 0 ( adjac )					  
							      76 LOAD_GLOBAL 6 ( len )					    76 LOAD_FAST 7 ( m )					  
							      78 LOAD_FAST 0 ( adjac )					    78 BINARY_SUBSCR						  
							      80 LOAD_FAST 7 ( m )					    80 CALL_FUNCTION 1						  
							      82 BINARY_SUBSCR						    82 CALL_FUNCTION 1						  
							      84 CALL_FUNCTION 1					    84 GET_ITER							  
							      86 CALL_FUNCTION 1					    >> 86 FOR_ITER 106 ( to 172 )				  
							      88 GET_ITER						    88 STORE_FAST 9 ( i )					  
							      >> 90 FOR_ITER 50 ( to 142 )				    								  
							      92 STORE_FAST 8 ( i )					    11 90 LOAD_FAST 0 ( adjac )					  
							      								    92 LOAD_FAST 7 ( m )					  
							      11 94 LOAD_FAST 0 ( adjac )				    94 BINARY_SUBSCR						  
							      96 LOAD_FAST 7 ( m )					    96 LOAD_FAST 9 ( i )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_FAST 8 ( i )					    100 STORE_FAST 10 ( h )					  
							      102 BINARY_SUBSCR						    								  
							      104 STORE_FAST 9 ( h )					    12 102 LOAD_FAST 4 ( visited )				  
							      								    104 LOAD_FAST 10 ( h )					  
							      12 106 LOAD_FAST 4 ( visited )				    106 BINARY_SUBSCR						  
							      108 LOAD_FAST 9 ( h )					    108 POP_JUMP_IF_TRUE 116					  
							      110 BINARY_SUBSCR						    								  
							      112 POP_JUMP_IF_TRUE 90					    13 110 LOAD_CONST 3 ( True )				  
							      								    112 LOAD_FAST 4 ( visited )					  
							      13 114 LOAD_CONST 3 ( True )				    114 STORE_SUBSCR						  
							      116 LOAD_FAST 4 ( visited )				    								  
							      118 LOAD_FAST 9 ( h )					    14 >> 116 LOAD_FAST 7 ( m )					  
							      120 STORE_SUBSCR						    118 LOAD_FAST 4 ( visited )					  
							      								    120 STORE_SUBSCR						  
							      14 122 LOAD_FAST 7 ( m )					    								  
							      124 LOAD_FAST 5 ( p )					    15 122 LOAD_FAST 6 ( q )					  
							      126 LOAD_FAST 9 ( h )					    124 LOAD_METHOD 2 ( put )					  
							      128 STORE_SUBSCR						    126 LOAD_FAST 10 ( h )					  
							      								    128 CALL_METHOD 1						  
							      15 130 LOAD_FAST 6 ( q )					    130 POP_TOP							  
							      132 LOAD_METHOD 2 ( put )					    132 JUMP_ABSOLUTE 86					  
							      134 LOAD_FAST 9 ( h )					    >> 134 POP_BLOCK						  
							      136 CALL_METHOD 1						    >> 136 JUMP_ABSOLUTE 52					  
							      138 POP_TOP						    >> 138 POP_BLOCK						  
							      140 JUMP_ABSOLUTE 90					    								  
							      >> 142 POP_BLOCK						    16 140 LOAD_CONST 1 ( 0 )					  
							      >> 144 JUMP_ABSOLUTE 56					    142 STORE_FAST 11 ( count )					  
							      >> 146 POP_BLOCK						    								  
							      								    17 144 LOAD_FAST 5 ( p )					  
							      16 >> 148 LOAD_CONST 1 ( 0 )				    146 LOAD_FAST 10 ( h )					  
							      150 STORE_FAST 10 ( count )				    148 STORE_SUBSCR						  
							      								    								  
							      17 152 LOAD_FAST 5 ( p )					    18 150 LOAD_FAST 6 ( q )					  
							      154 LOAD_FAST 3 ( y )					    152 LOAD_METHOD 2 ( put )					  
							      156 BINARY_SUBSCR						    154 LOAD_FAST 10 ( h )					  
							      158 STORE_FAST 8 ( i )					    156 CALL_METHOD 1						  
							      								    158 POP_TOP							  
							      18 160 SETUP_LOOP 28 ( to 190 )				    160 JUMP_ABSOLUTE 52					  
							      >> 162 LOAD_FAST 8 ( i )					    >> 162 POP_BLOCK						  
							      164 LOAD_FAST 2 ( x )					    								  
							      166 COMPARE_OP 3 ( != )					    19 >> 164 LOAD_CONST 1 ( 0 )				  
							      168 POP_JUMP_IF_FALSE 188					    166 STORE_FAST 11 ( count )					  
							      								    								  
							      19 170 LOAD_FAST 10 ( count )				    20 168 LOAD_FAST 5 ( p )					  
							      172 LOAD_CONST 2 ( 1 )					    170 LOAD_FAST 3 ( y )					  
							      174 INPLACE_ADD						    172 BINARY_SUBSCR						  
							      176 STORE_FAST 10 ( count )				    174 STORE_FAST 9 ( i )					  
							      								    								  
							      20 178 LOAD_FAST 5 ( p )					    21 176 SETUP_LOOP 32 ( to 212 )				  
							      180 LOAD_FAST 8 ( i )					    >> 178 LOAD_FAST 9 ( i )					  
							      182 BINARY_SUBSCR						    180 LOAD_FAST 2 ( x )					  
							      184 STORE_FAST 8 ( i )					    182 COMPARE_OP 3 ( != )					  
							      186 JUMP_ABSOLUTE 162					    184 POP_JUMP_IF_FALSE 210					  
							      >> 188 POP_BLOCK						    								  
							      								    22 186 LOAD_FAST 11 ( count )				  
							      21 >> 190 LOAD_FAST 10 ( count )				    188 LOAD_CONST 2 ( 1 )					  
							      192 RETURN_VALUE NEW_LINE					    190 INPLACE_ADD						  
							      								    192 STORE_FAST 11 ( count )					  
							      								    								  
							      								    23 194 LOAD_FAST 5 ( p )					  
							      								    196 LOAD_FAST 9 ( i )					  
							      								    198 BINARY_SUBSCR						  
							      								    200 STORE_FAST 9 ( i )					  
							      								    202 JUMP_ABSOLUTE 178					  
							      								    >> 204 POP_BLOCK						  
							      								    								  
							      								    24 >> 206 LOAD_FAST 11 ( count )				  
							      								    208 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N			      SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N			    SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N			  SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N
--							      --							    --								  --
def SieveOfSundaram ( n ) :				      Disassembly of <code object SieveOfSundaram at 0x7f33e2644930 Disassembly of <code object SieveOfSundaram at 0x7f2b0163dc90 script_not_found : None
    nNew = int ( ( n - 2 ) / 2 ) ;			      2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  
    marked = [ 0 ] * ( nNew + 1 ) ;			      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
    for i in range ( 1 , nNew + 1 ) :			      4 LOAD_CONST 1 ( 2 )					    4 LOAD_CONST 1 ( 2 )					  
	j = i ;						      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
	while ( ( i + j + 2 * i * j ) <= nNew ) :	      8 LOAD_CONST 1 ( 2 )					    8 LOAD_CONST 1 ( 2 )					  
	    marked [ i + j + 2 * i * j ] = 1 ;		      10 BINARY_TRUE_DIVIDE					    10 BINARY_TRUE_DIVIDE					  
	    j += 1 ;					      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
    if ( n > 2 ) :					      14 STORE_FAST 1 ( nNew )					    14 STORE_FAST 1 ( nNew )					  
	print ( 2 , end = " " ) ;			      								    								  
    for i in range ( 1 , nNew + 1 ) :			      3 16 LOAD_CONST 2 ( 0 )					    3 16 LOAD_CONST 2 ( 0 )					  
	if ( marked [ i ] == 0 ) :			      18 BUILD_LIST 1						    18 BUILD_LIST 1						  
	    print ( ( 2 * i + 1 ) , end = " " ) ;	      20 LOAD_FAST 1 ( nNew )					    20 LOAD_FAST 1 ( nNew )					  
							      22 LOAD_CONST 3 ( 1 )					    22 LOAD_CONST 3 ( 1 )					  
							      24 BINARY_ADD						    24 BINARY_ADD						  
							      26 BINARY_MULTIPLY					    26 BINARY_MULTIPLY						  
							      28 STORE_FAST 2 ( marked )				    28 STORE_FAST 2 ( marked )					  
							      								    								  
							      4 30 SETUP_LOOP 88 ( to 120 )				    4 30 SETUP_LOOP 96 ( to 118 )				  
							      32 LOAD_GLOBAL 1 ( range )				    32 LOAD_GLOBAL 1 ( range )					  
							      34 LOAD_CONST 3 ( 1 )					    34 LOAD_CONST 3 ( 1 )					  
							      36 LOAD_FAST 1 ( nNew )					    36 LOAD_FAST 1 ( nNew )					  
							      38 LOAD_CONST 3 ( 1 )					    38 LOAD_CONST 3 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 70 ( to 118 )				    >> 46 FOR_ITER 82 ( to 116 )				  
							      48 STORE_FAST 3 ( i )					    48 STORE_FAST 3 ( i )					  
							      								    								  
							      5 50 LOAD_FAST 3 ( i )					    5 50 LOAD_FAST 3 ( i )					  
							      52 STORE_FAST 4 ( j )					    52 STORE_FAST 4 ( j )					  
							      								    								  
							      6 54 SETUP_LOOP 60 ( to 116 )				    6 54 SETUP_LOOP 50 ( to 108 )				  
							      >> 56 LOAD_FAST 3 ( i )					    >> 56 LOAD_FAST 3 ( i )					  
							      58 LOAD_FAST 4 ( j )					    58 LOAD_FAST 4 ( j )					  
							      60 BINARY_ADD						    60 BINARY_ADD						  
							      62 LOAD_CONST 1 ( 2 )					    62 LOAD_CONST 1 ( 2 )					  
							      64 LOAD_FAST 3 ( i )					    64 LOAD_FAST 3 ( i )					  
							      66 BINARY_MULTIPLY					    66 BINARY_MULTIPLY						  
							      68 LOAD_FAST 4 ( j )					    68 LOAD_FAST 4 ( j )					  
							      70 BINARY_MULTIPLY					    70 BINARY_MULTIPLY						  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 LOAD_FAST 1 ( nNew )					    74 LOAD_FAST 1 ( nNew )					  
							      76 COMPARE_OP 1 ( <= )					    76 COMPARE_OP 1 ( <= )					  
							      78 POP_JUMP_IF_FALSE 114					    78 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      7 80 LOAD_CONST 3 ( 1 )					    7 80 LOAD_CONST 3 ( 1 )					  
							      82 LOAD_FAST 2 ( marked )					    82 LOAD_FAST 2 ( marked )					  
							      84 LOAD_FAST 3 ( i )					    84 LOAD_FAST 3 ( i )					  
							      86 LOAD_FAST 4 ( j )					    86 LOAD_FAST 4 ( j )					  
							      88 BINARY_ADD						    88 BINARY_ADD						  
							      90 LOAD_CONST 1 ( 2 )					    90 LOAD_CONST 1 ( 2 )					  
							      92 LOAD_FAST 3 ( i )					    92 LOAD_FAST 3 ( i )					  
							      94 BINARY_MULTIPLY					    94 BINARY_MULTIPLY						  
							      96 LOAD_FAST 4 ( j )					    96 LOAD_FAST 4 ( j )					  
							      98 BINARY_MULTIPLY					    98 BINARY_MULTIPLY						  
							      100 BINARY_ADD						    100 BINARY_ADD						  
							      102 STORE_SUBSCR						    102 STORE_SUBSCR						  
							      								    104 JUMP_ABSOLUTE 56					  
							      8 104 LOAD_FAST 4 ( j )					    >> 106 POP_BLOCK						  
							      106 LOAD_CONST 3 ( 1 )					    								  
							      108 INPLACE_ADD						    8 >> 108 LOAD_FAST 0 ( n )					  
							      110 STORE_FAST 4 ( j )					    110 LOAD_CONST 1 ( 2 )					  
							      112 JUMP_ABSOLUTE 56					    112 COMPARE_OP 4 ( > )					  
							      >> 114 POP_BLOCK						    114 POP_JUMP_IF_FALSE 128					  
							      >> 116 JUMP_ABSOLUTE 46					    								  
							      >> 118 POP_BLOCK						    9 116 LOAD_GLOBAL 2 ( print )				  
							      								    118 LOAD_CONST 1 ( 2 )					  
							      9 >> 120 LOAD_FAST 0 ( n )				    120 LOAD_CONST 4 ( ' ' )					  
							      122 LOAD_CONST 1 ( 2 )					    122 LOAD_CONST 5 ( ( 'end' , ) )				  
							      124 COMPARE_OP 4 ( > )					    124 CALL_FUNCTION_KW 2					  
							      126 POP_JUMP_IF_FALSE 140					    126 POP_TOP							  
							      								    								  
							      10 128 LOAD_GLOBAL 2 ( print )				    10 >> 128 SETUP_LOOP 56 ( to 164 )				  
							      130 LOAD_CONST 1 ( 2 )					    130 LOAD_GLOBAL 1 ( range )					  
							      132 LOAD_CONST 4 ( ' ' )					    132 LOAD_CONST 3 ( 1 )					  
							      134 LOAD_CONST 5 ( ( 'end' , ) )				    134 LOAD_FAST 1 ( nNew )					  
							      136 CALL_FUNCTION_KW 2					    136 LOAD_CONST 3 ( 1 )					  
							      138 POP_TOP						    138 BINARY_ADD						  
							      								    140 CALL_FUNCTION 2						  
							      11 >> 140 SETUP_LOOP 54 ( to 196 )			    142 GET_ITER						  
							      142 LOAD_GLOBAL 1 ( range )				    >> 144 FOR_ITER 40 ( to 162 )				  
							      144 LOAD_CONST 3 ( 1 )					    146 STORE_FAST 3 ( i )					  
							      146 LOAD_FAST 1 ( nNew )					    								  
							      148 LOAD_CONST 3 ( 1 )					    11 148 LOAD_FAST 2 ( marked )				  
							      150 BINARY_ADD						    150 LOAD_FAST 3 ( i )					  
							      152 CALL_FUNCTION 2					    152 BINARY_SUBSCR						  
							      154 GET_ITER						    154 LOAD_CONST 2 ( 0 )					  
							      >> 156 FOR_ITER 36 ( to 194 )				    156 COMPARE_OP 2 ( == )					  
							      158 STORE_FAST 3 ( i )					    158 POP_JUMP_IF_FALSE 144					  
							      								    								  
							      12 160 LOAD_FAST 2 ( marked )				    12 160 LOAD_GLOBAL 2 ( print )				  
							      162 LOAD_FAST 3 ( i )					    162 LOAD_CONST 1 ( 2 )					  
							      164 BINARY_SUBSCR						    164 LOAD_FAST 3 ( i )					  
							      166 LOAD_CONST 2 ( 0 )					    166 BINARY_MULTIPLY						  
							      168 COMPARE_OP 2 ( == )					    168 LOAD_CONST 3 ( 1 )					  
							      170 POP_JUMP_IF_FALSE 156					    170 BINARY_ADD						  
							      								    172 CALL_FUNCTION 1						  
							      13 172 LOAD_GLOBAL 2 ( print )				    174 POP_TOP							  
							      174 LOAD_CONST 1 ( 2 )					    								  
							      176 LOAD_FAST 3 ( i )					    13 176 LOAD_FAST 2 ( marked )				  
							      178 BINARY_MULTIPLY					    178 LOAD_FAST 3 ( i )					  
							      180 LOAD_CONST 3 ( 1 )					    180 BINARY_SUBSCR						  
							      182 BINARY_ADD						    182 LOAD_CONST 2 ( 0 )					  
							      184 LOAD_CONST 4 ( ' ' )					    184 COMPARE_OP 2 ( == )					  
							      186 LOAD_CONST 5 ( ( 'end' , ) )				    186 POP_JUMP_IF_FALSE 144					  
							      188 CALL_FUNCTION_KW 2					    								  
							      190 POP_TOP						    14 188 LOAD_GLOBAL 2 ( print )				  
							      192 JUMP_ABSOLUTE 156					    190 LOAD_CONST 1 ( 2 )					  
							      >> 194 POP_BLOCK						    192 LOAD_FAST 3 ( i )					  
							      >> 196 LOAD_CONST 0 ( None )				    194 BINARY_MULTIPLY						  
							      198 RETURN_VALUE NEW_LINE					    196 LOAD_CONST 3 ( 1 )					  
							      								    198 BINARY_ADD						  
							      								    200 CALL_FUNCTION 1						  
							      								    202 POP_TOP							  
							      								    								  
							      								    15 >> 204 LOAD_FAST 2 ( marked )				  
							      								    206 LOAD_FAST 3 ( i )					  
							      								    208 BINARY_SUBSCR						  
							      								    210 LOAD_CONST 2 ( 0 )					  
							      								    212 COMPARE_OP 2 ( == )					  
							      								    214 POP_JUMP_IF_FALSE 144					  
							      								    								  
							      								    16 216 LOAD_GLOBAL 2 ( print )				  
							      								    218 LOAD_CONST 1 ( 2 )					  
							      								    220 LOAD_FAST 3 ( i )					  
							      								    222 BINARY_MULTIPLY						  
							      								    224 LOAD_CONST 3 ( 1 )					  
							      								    226 BINARY_ADD						  
							      								    228 CALL_FUNCTION 1						  
							      								    230 POP_TOP							  
							      								    232 JUMP_ABSOLUTE 144					  
							      								    >> 234 POP_BLOCK						  
							      								    >> 236 JUMP_ABSOLUTE 46					  
							      								    >> 238 POP_BLOCK						  
							      								    >> 240 LOAD_CONST 0 ( None )				  
							      								    242 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PETERSON_GRAPH						      PETERSON_GRAPH						    PETERSON_GRAPH						  PETERSON_GRAPH
--							      --							    --								  --
def findthepath ( S , v ) :				      Disassembly of <code object findthepath at 0x7f33e2653ed0, fi Disassembly of <code object findthepath at 0x7f2b0163dc90, fi script_not_found : None
    result [ 0 ] = v					      2 0 LOAD_FAST 1 ( v )					    2 0 LOAD_FAST 1 ( v )					  
    for i in range ( 1 , len ( S ) ) :			      2 LOAD_GLOBAL 0 ( result )				    2 LOAD_FAST 2 ( result )					  
	if ( adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) ] or a 4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
	    v = ord ( S [ i ] ) - ord ( 'A' )		      6 STORE_SUBSCR						    6 STORE_SUBSCR						  
	elif ( adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) + 5  								    								  
	    v = ord ( S [ i ] ) - ord ( 'A' ) + 5	      3 8 SETUP_LOOP 204 ( to 214 )				    3 8 SETUP_LOOP 192 ( to 198 )				  
	else :						      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
	    return False				      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
	result.append ( v )				      14 LOAD_GLOBAL 2 ( len )					    14 LOAD_GLOBAL 1 ( len )					  
    return True						      16 LOAD_FAST 0 ( S )					    16 LOAD_FAST 0 ( S )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 186 ( to 212 )				    >> 24 FOR_ITER 180 ( to 196 )				  
							      26 STORE_FAST 2 ( i )					    26 STORE_FAST 2 ( i )					  
							      								    								  
							      4 28 LOAD_GLOBAL 3 ( adj )				    4 28 LOAD_FAST 0 ( adj )					  
							      30 LOAD_FAST 1 ( v )					    30 LOAD_FAST 1 ( v )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_GLOBAL 4 ( ord )					    34 LOAD_GLOBAL 2 ( ord )					  
							      36 LOAD_FAST 0 ( S )					    36 LOAD_FAST 0 ( S )					  
							      38 LOAD_FAST 2 ( i )					    38 LOAD_FAST 2 ( i )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 CALL_FUNCTION 1					    42 CALL_FUNCTION 1						  
							      44 LOAD_GLOBAL 4 ( ord )					    44 LOAD_GLOBAL 2 ( ord )					  
							      46 LOAD_CONST 3 ( 'A' )					    46 LOAD_CONST 3 ( 'A' )					  
							      48 CALL_FUNCTION 1					    48 CALL_FUNCTION 1						  
							      50 BINARY_SUBTRACT					    50 BINARY_SUBTRACT						  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 POP_JUMP_IF_TRUE 84					    54 COMPARE_OP 0 ( < )					  
							      56 LOAD_GLOBAL 3 ( adj )					    56 POP_JUMP_IF_TRUE 92					  
							      58 LOAD_GLOBAL 4 ( ord )					    58 LOAD_FAST 0 ( S )					  
							      60 LOAD_FAST 0 ( S )					    60 LOAD_GLOBAL 2 ( ord )					  
							      62 LOAD_FAST 2 ( i )					    62 LOAD_FAST 0 ( S )					  
							      64 BINARY_SUBSCR						    64 LOAD_FAST 2 ( i )					  
							      66 CALL_FUNCTION 1					    66 BINARY_SUBSCR						  
							      68 LOAD_GLOBAL 4 ( ord )					    68 CALL_FUNCTION 1						  
							      70 LOAD_CONST 3 ( 'A' )					    70 LOAD_GLOBAL 2 ( ord )					  
							      72 CALL_FUNCTION 1					    72 LOAD_CONST 3 ( 'A' )					  
							      74 BINARY_SUBTRACT					    74 CALL_FUNCTION 1						  
							      76 BINARY_SUBSCR						    76 BINARY_SUBTRACT						  
							      78 LOAD_FAST 1 ( v )					    78 BINARY_SUBSCR						  
							      80 BINARY_SUBSCR						    80 LOAD_FAST 1 ( v )					  
							      82 POP_JUMP_IF_FALSE 106					    82 BINARY_SUBSCR						  
							      								    84 COMPARE_OP 0 ( < )					  
							      5 >> 84 LOAD_GLOBAL 4 ( ord )				    86 POP_JUMP_IF_FALSE 100					  
							      86 LOAD_FAST 0 ( S )					    								  
							      88 LOAD_FAST 2 ( i )					    5 88 LOAD_GLOBAL 2 ( ord )					  
							      90 BINARY_SUBSCR						    90 LOAD_FAST 0 ( S )					  
							      92 CALL_FUNCTION 1					    92 LOAD_FAST 2 ( i )					  
							      94 LOAD_GLOBAL 4 ( ord )					    94 BINARY_SUBSCR						  
							      96 LOAD_CONST 3 ( 'A' )					    96 CALL_FUNCTION 1						  
							      98 CALL_FUNCTION 1					    98 LOAD_GLOBAL 2 ( ord )					  
							      100 BINARY_SUBTRACT					    100 LOAD_CONST 3 ( 'A' )					  
							      102 STORE_FAST 1 ( v )					    102 CALL_FUNCTION 1						  
							      104 JUMP_FORWARD 94 ( to 200 )				    104 BINARY_SUBTRACT						  
							      								    106 STORE_FAST 1 ( v )					  
							      6 >> 106 LOAD_GLOBAL 3 ( adj )				    108 JUMP_ABSOLUTE 24					  
							      108 LOAD_FAST 1 ( v )					    								  
							      110 BINARY_SUBSCR						    6 >> 110 LOAD_FAST 0 ( adj )				  
							      112 LOAD_GLOBAL 4 ( ord )					    112 LOAD_FAST 1 ( v )					  
							      114 LOAD_FAST 0 ( S )					    114 BINARY_SUBSCR						  
							      116 LOAD_FAST 2 ( i )					    116 LOAD_GLOBAL 2 ( ord )					  
							      118 BINARY_SUBSCR						    118 LOAD_FAST 0 ( S )					  
							      120 CALL_FUNCTION 1					    120 LOAD_FAST 2 ( i )					  
							      122 LOAD_GLOBAL 4 ( ord )					    122 BINARY_SUBSCR						  
							      124 LOAD_CONST 3 ( 'A' )					    124 CALL_FUNCTION 1						  
							      126 CALL_FUNCTION 1					    126 LOAD_GLOBAL 2 ( ord )					  
							      128 BINARY_SUBTRACT					    128 LOAD_CONST 3 ( 'A' )					  
							      130 LOAD_CONST 4 ( 5 )					    130 CALL_FUNCTION 1						  
							      132 BINARY_ADD						    132 LOAD_CONST 4 ( 5 )					  
							      134 BINARY_SUBSCR						    134 BINARY_ADD						  
							      136 POP_JUMP_IF_TRUE 170					    136 BUILD_SLICE 2						  
							      138 LOAD_GLOBAL 3 ( adj )					    138 BINARY_SUBSCR						  
							      140 LOAD_GLOBAL 4 ( ord )					    140 COMPARE_OP 0 ( < )					  
							      142 LOAD_FAST 0 ( S )					    142 POP_JUMP_IF_TRUE 24					  
							      144 LOAD_FAST 2 ( i )					    144 LOAD_FAST 0 ( S )					  
							      146 BINARY_SUBSCR						    146 LOAD_GLOBAL 2 ( ord )					  
							      148 CALL_FUNCTION 1					    148 LOAD_FAST 0 ( S )					  
							      150 LOAD_GLOBAL 4 ( ord )					    150 LOAD_FAST 0 ( S )					  
							      152 LOAD_CONST 3 ( 'A' )					    152 LOAD_FAST 2 ( i )					  
							      154 CALL_FUNCTION 1					    154 BINARY_SUBSCR						  
							      156 BINARY_SUBTRACT					    156 CALL_FUNCTION 1						  
							      158 LOAD_CONST 4 ( 5 )					    158 LOAD_GLOBAL 2 ( ord )					  
							      160 BINARY_ADD						    160 LOAD_CONST 3 ( 'A' )					  
							      162 BINARY_SUBSCR						    162 CALL_FUNCTION 1						  
							      164 LOAD_FAST 1 ( v )					    164 LOAD_CONST 4 ( 5 )					  
							      166 BINARY_SUBSCR						    166 BINARY_ADD						  
							      168 POP_JUMP_IF_FALSE 196					    168 BINARY_SUBSCR						  
							      								    170 LOAD_FAST 1 ( v )					  
							      7 >> 170 LOAD_GLOBAL 4 ( ord )				    172 BINARY_SUBSCR						  
							      172 LOAD_FAST 0 ( S )					    174 BINARY_SUBTRACT						  
							      174 LOAD_FAST 2 ( i )					    176 CALL_FUNCTION 1						  
							      176 BINARY_SUBSCR						    178 POP_JUMP_IF_FALSE 194					  
							      178 CALL_FUNCTION 1					    								  
							      180 LOAD_GLOBAL 4 ( ord )					    7 180 LOAD_GLOBAL 2 ( ord )					  
							      182 LOAD_CONST 3 ( 'A' )					    182 LOAD_FAST 0 ( S )					  
							      184 CALL_FUNCTION 1					    184 LOAD_FAST 2 ( i )					  
							      186 BINARY_SUBTRACT					    186 BINARY_SUBSCR						  
							      188 LOAD_CONST 4 ( 5 )					    188 CALL_FUNCTION 1						  
							      190 BINARY_ADD						    190 LOAD_GLOBAL 2 ( ord )					  
							      192 STORE_FAST 1 ( v )					    192 LOAD_CONST 3 ( 'A' )					  
							      194 JUMP_FORWARD 4 ( to 200 )				    194 CALL_FUNCTION 1						  
							      								    196 BINARY_SUBTRACT						  
							      9 >> 196 LOAD_CONST 5 ( False )				    198 LOAD_CONST 4 ( 5 )					  
							      198 RETURN_VALUE						    200 BINARY_ADD						  
							      								    202 STORE_FAST 1 ( v )					  
							      10 >> 200 LOAD_GLOBAL 0 ( result )			    204 JUMP_ABSOLUTE 24					  
							      202 LOAD_METHOD 5 ( append )				    								  
							      204 LOAD_FAST 1 ( v )					    9 >> 206 LOAD_CONST 5 ( False )				  
							      206 CALL_METHOD 1						    208 RETURN_VALUE						  
							      208 POP_TOP						    								  
							      210 JUMP_ABSOLUTE 24					    10 >> 210 LOAD_FAST 2 ( result )				  
							      >> 212 POP_BLOCK						    212 LOAD_METHOD 3 ( append )				  
							      								    214 LOAD_FAST 1 ( v )					  
							      11 >> 214 LOAD_CONST 6 ( True )				    216 CALL_METHOD 1						  
							      216 RETURN_VALUE NEW_LINE					    218 POP_TOP							  
							      								    								  
							      								    11 >> 220 LOAD_CONST 6 ( True )				  
							      								    222 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2
--							      --							    --								  --
def findTriplets ( arr , n ) :				      Disassembly of <code object findTriplets at 0x7f33e2644f60, f Disassembly of <code object findTriplets at 0x7f2b0163dc90, f timeout : None
    found = False					      2 0 LOAD_CONST 1 ( False )				    2 0 LOAD_CONST 1 ( False )					  
    arr.sort ( )					      2 STORE_FAST 2 ( found )					    2 STORE_FAST 2 ( found )					  
    for i in range ( 0 , n - 1 ) :			      								    								  
	l = i + 1					      3 4 LOAD_FAST 0 ( arr )					    3 4 LOAD_FAST 0 ( arr )					  
	r = n - 1					      6 LOAD_METHOD 0 ( sort )					    6 LOAD_METHOD 0 ( sort )					  
	x = arr [ i ]					      8 CALL_METHOD 0						    8 CALL_METHOD 0						  
	while ( l < r ) :				      10 POP_TOP						    10 POP_TOP							  
	    if ( x + arr [ l ] + arr [ r ] == 0 ) :	      								    								  
		print ( x , arr [ l ] , arr [ r ] )	      4 12 SETUP_LOOP 168 ( to 182 )				    4 12 SETUP_LOOP 138 ( to 152 )				  
		l += 1					      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
		r -= 1					      16 LOAD_CONST 2 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
		found = True				      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
	    elif ( x + arr [ l ] + arr [ r ] < 0 ) :	      20 LOAD_CONST 3 ( 1 )					    20 LOAD_CONST 3 ( 1 )					  
		l += 1					      22 BINARY_SUBTRACT					    22 BINARY_SUBTRACT						  
	    else :					      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
		r -= 1					      26 GET_ITER						    26 GET_ITER							  
    if ( found == False ) :				      >> 28 FOR_ITER 150 ( to 180 )				    >> 28 FOR_ITER 124 ( to 150 )				  
	print ( " No Triplet Found" )			      30 STORE_FAST 3 ( i )					    30 STORE_FAST 3 ( i )					  
							      								    								  
							      5 32 LOAD_FAST 3 ( i )					    5 32 LOAD_FAST 3 ( i )					  
							      34 LOAD_CONST 3 ( 1 )					    34 LOAD_CONST 3 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 STORE_FAST 4 ( l )					    38 STORE_FAST 4 ( l )					  
							      								    								  
							      6 40 LOAD_FAST 1 ( n )					    6 40 LOAD_FAST 1 ( n )					  
							      42 LOAD_CONST 3 ( 1 )					    42 LOAD_CONST 3 ( 1 )					  
							      44 BINARY_SUBTRACT					    44 BINARY_SUBTRACT						  
							      46 STORE_FAST 5 ( r )					    46 STORE_FAST 5 ( r )					  
							      								    								  
							      7 48 LOAD_FAST 0 ( arr )					    7 48 LOAD_FAST 0 ( arr )					  
							      50 LOAD_FAST 3 ( i )					    50 LOAD_FAST 3 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 STORE_FAST 6 ( x )					    54 STORE_FAST 6 ( x )					  
							      								    								  
							      8 56 SETUP_LOOP 120 ( to 178 )				    8 56 SETUP_LOOP 92 ( to 148 )				  
							      >> 58 LOAD_FAST 4 ( l )					    >> 58 LOAD_FAST 4 ( l )					  
							      60 LOAD_FAST 5 ( r )					    60 LOAD_FAST 5 ( r )					  
							      62 COMPARE_OP 0 ( < )					    62 COMPARE_OP 0 ( < )					  
							      64 POP_JUMP_IF_FALSE 176					    64 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      9 66 LOAD_FAST 6 ( x )					    9 66 LOAD_FAST 6 ( x )					  
							      68 LOAD_FAST 0 ( arr )					    68 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 4 ( l )					    70 LOAD_FAST 4 ( l )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 LOAD_FAST 0 ( arr )					    76 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 5 ( r )					    78 LOAD_FAST 5 ( r )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 LOAD_CONST 2 ( 0 )					    84 LOAD_CONST 2 ( 0 )					  
							      86 COMPARE_OP 2 ( == )					    86 COMPARE_OP 2 ( == )					  
							      88 POP_JUMP_IF_FALSE 132					    88 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      10 90 LOAD_GLOBAL 2 ( print )				    10 90 LOAD_GLOBAL 2 ( print )				  
							      92 LOAD_FAST 6 ( x )					    92 LOAD_FAST 6 ( x )					  
							      94 LOAD_FAST 0 ( arr )					    94 LOAD_FAST 0 ( arr )					  
							      96 LOAD_FAST 4 ( l )					    96 LOAD_FAST 4 ( l )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_FAST 0 ( arr )					    100 LOAD_FAST 0 ( arr )					  
							      102 LOAD_FAST 5 ( r )					    102 LOAD_FAST 5 ( r )					  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 CALL_FUNCTION 3					    106 CALL_FUNCTION 3						  
							      108 POP_TOP						    108 POP_TOP							  
							      								    								  
							      11 110 LOAD_FAST 4 ( l )					    11 110 LOAD_FAST 4 ( l )					  
							      112 LOAD_CONST 3 ( 1 )					    112 LOAD_CONST 3 ( 1 )					  
							      114 INPLACE_ADD						    114 INPLACE_SUBTRACT					  
							      116 STORE_FAST 4 ( l )					    116 STORE_FAST 4 ( l )					  
							      								    								  
							      12 118 LOAD_FAST 5 ( r )					    12 118 LOAD_CONST 4 ( True )				  
							      120 LOAD_CONST 3 ( 1 )					    120 STORE_FAST 2 ( found )					  
							      122 INPLACE_SUBTRACT					    122 JUMP_ABSOLUTE 58					  
							      124 STORE_FAST 5 ( r )					    								  
							      								    13 >> 124 LOAD_FAST 6 ( x )					  
							      13 126 LOAD_CONST 4 ( True )				    126 LOAD_FAST 0 ( arr )					  
							      128 STORE_FAST 2 ( found )				    128 LOAD_FAST 4 ( l )					  
							      130 JUMP_ABSOLUTE 58					    130 BINARY_SUBSCR						  
							      								    132 BINARY_ADD						  
							      14 >> 132 LOAD_FAST 6 ( x )				    134 LOAD_FAST 0 ( arr )					  
							      134 LOAD_FAST 0 ( arr )					    136 LOAD_FAST 5 ( r )					  
							      136 LOAD_FAST 4 ( l )					    138 BINARY_SUBSCR						  
							      138 BINARY_SUBSCR						    140 BINARY_ADD						  
							      140 BINARY_ADD						    142 LOAD_CONST 2 ( 0 )					  
							      142 LOAD_FAST 0 ( arr )					    144 COMPARE_OP 0 ( < )					  
							      144 LOAD_FAST 5 ( r )					    146 POP_JUMP_IF_FALSE 58					  
							      146 BINARY_SUBSCR						    								  
							      148 BINARY_ADD						    14 148 LOAD_FAST 4 ( l )					  
							      150 LOAD_CONST 2 ( 0 )					    150 LOAD_CONST 3 ( 1 )					  
							      152 COMPARE_OP 0 ( < )					    152 INPLACE_ADD						  
							      154 POP_JUMP_IF_FALSE 166					    154 STORE_FAST 4 ( l )					  
							      								    156 JUMP_ABSOLUTE 58					  
							      15 156 LOAD_FAST 4 ( l )					    >> 158 POP_BLOCK						  
							      158 LOAD_CONST 3 ( 1 )					    								  
							      160 INPLACE_ADD						    15 >> 160 LOAD_FAST 2 ( found )				  
							      162 STORE_FAST 4 ( l )					    162 LOAD_CONST 1 ( False )					  
							      164 JUMP_ABSOLUTE 58					    164 COMPARE_OP 2 ( == )					  
							      								    166 POP_JUMP_IF_FALSE 184					  
							      17 >> 166 LOAD_FAST 5 ( r )				    								  
							      168 LOAD_CONST 3 ( 1 )					    16 168 LOAD_GLOBAL 2 ( print )				  
							      170 INPLACE_SUBTRACT					    170 LOAD_CONST 5 ( ' No Triplet Found' )			  
							      172 STORE_FAST 5 ( r )					    172 CALL_FUNCTION 1						  
							      174 JUMP_ABSOLUTE 58					    174 POP_TOP							  
							      >> 176 POP_BLOCK						    176 JUMP_ABSOLUTE 58					  
							      >> 178 JUMP_ABSOLUTE 28					    >> 178 POP_BLOCK						  
							      >> 180 POP_BLOCK						    								  
							      								    17 >> 180 LOAD_FAST 2 ( found )				  
							      18 >> 182 LOAD_FAST 2 ( found )				    182 LOAD_CONST 1 ( False )					  
							      184 LOAD_CONST 1 ( False )				    184 COMPARE_OP 2 ( == )					  
							      186 COMPARE_OP 2 ( == )					    186 POP_JUMP_IF_FALSE 28					  
							      188 POP_JUMP_IF_FALSE 198					    								  
							      								    18 188 LOAD_GLOBAL 2 ( print )				  
							      19 190 LOAD_GLOBAL 2 ( print )				    190 LOAD_CONST 5 ( ' No Triplet Found' )			  
							      192 LOAD_CONST 5 ( ' No Triplet Found' )			    192 CALL_FUNCTION 1						  
							      194 CALL_FUNCTION 1					    194 POP_TOP							  
							      196 POP_TOP						    >> 196 LOAD_CONST 0 ( None )				  
							      >> 198 LOAD_CONST 0 ( None )				    198 RETURN_VALUE NEW_LINE					  
							      200 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	      GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	    GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	  GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8
--							      --							    --								  --
def isSubSeqDivisible ( st ) :				      Disassembly of <code object isSubSeqDivisible at 0x7f33e2653f Disassembly of <code object isSubSeqDivisible at 0x7f2b0163dc error : Traceback (most recent call last):   File
    l = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    arr = [ 0 ] * l					      2 LOAD_FAST 0 ( st )					    2 LOAD_FAST 0 ( st )					  (item)   File "main.py", line 39, in <module>	  Fi
    for i in range ( 0 , l ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in isSubSeqDivisible UnboundLo
	for j in range ( i , l ) :			      6 STORE_FAST 1 ( l )					    6 STORE_FAST 1 ( l )					  calError: local variable 'i' referenced before ass
	    for k in range ( j , l ) :			      								    								  ignment
		if ( arr [ i ] % 8 == 0 ) :		      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
		    return True				      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
		elif ( ( arr [ i ] * 10 + arr [ j ] ) % 8 ==  12 LOAD_FAST 1 ( l )					    12 LOAD_FAST 1 ( l )					  
		    return True				      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
		elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + a 16 STORE_FAST 2 ( arr )					    16 STORE_FAST 2 ( arr )					  
		    return True				      								    								  
    return False					      4 18 SETUP_LOOP 186 ( to 206 )				    4 18 SETUP_LOOP 156 ( to 168 )				  
							      20 LOAD_GLOBAL 1 ( range )				    20 LOAD_GLOBAL 1 ( range )					  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 LOAD_FAST 1 ( l )					    24 LOAD_FAST 1 ( l )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 172 ( to 204 )				    >> 30 FOR_ITER 148 ( to 166 )				  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 3 ( i )					  
							      								    								  
							      5 34 SETUP_LOOP 166 ( to 202 )				    5 34 SETUP_LOOP 146 ( to 164 )				  
							      36 LOAD_GLOBAL 1 ( range )				    36 LOAD_GLOBAL 1 ( range )					  
							      38 LOAD_FAST 3 ( i )					    38 LOAD_FAST 3 ( i )					  
							      40 LOAD_FAST 1 ( l )					    40 LOAD_FAST 1 ( l )					  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 152 ( to 200 )				    >> 46 FOR_ITER 138 ( to 162 )				  
							      48 STORE_FAST 4 ( j )					    48 STORE_FAST 4 ( j )					  
							      								    								  
							      6 50 SETUP_LOOP 146 ( to 198 )				    6 50 SETUP_LOOP 140 ( to 160 )				  
							      52 LOAD_GLOBAL 1 ( range )				    52 LOAD_GLOBAL 1 ( range )					  
							      54 LOAD_FAST 4 ( j )					    54 LOAD_FAST 4 ( j )					  
							      56 LOAD_FAST 1 ( l )					    56 LOAD_FAST 1 ( l )					  
							      58 CALL_FUNCTION 2					    58 CALL_FUNCTION 2						  
							      60 GET_ITER						    60 GET_ITER							  
							      >> 62 FOR_ITER 132 ( to 196 )				    >> 62 FOR_ITER 128 ( to 158 )				  
							      64 STORE_FAST 5 ( k )					    64 STORE_FAST 5 ( k )					  
							      								    								  
							      7 66 LOAD_FAST 2 ( arr )					    7 66 LOAD_FAST 2 ( arr )					  
							      68 LOAD_FAST 3 ( i )					    68 LOAD_FAST 3 ( i )					  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 LOAD_CONST 2 ( 8 )					    72 LOAD_CONST 2 ( 8 )					  
							      74 BINARY_MODULO						    74 BINARY_MODULO						  
							      76 LOAD_CONST 1 ( 0 )					    76 LOAD_CONST 1 ( 0 )					  
							      78 COMPARE_OP 2 ( == )					    78 COMPARE_OP 2 ( == )					  
							      80 POP_JUMP_IF_FALSE 86					    80 POP_JUMP_IF_FALSE 86					  
							      								    								  
							      8 82 LOAD_CONST 3 ( True )				    8 82 LOAD_CONST 3 ( True )					  
							      84 RETURN_VALUE						    84 RETURN_VALUE						  
							      								    								  
							      9 >> 86 LOAD_FAST 2 ( arr )				    9 >> 86 LOAD_FAST 2 ( arr )					  
							      88 LOAD_FAST 3 ( i )					    88 LOAD_FAST 3 ( i )					  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 LOAD_CONST 4 ( 10 )					    92 LOAD_CONST 4 ( 10 )					  
							      94 BINARY_MULTIPLY					    94 BINARY_MULTIPLY						  
							      96 LOAD_FAST 2 ( arr )					    96 LOAD_FAST 2 ( arr )					  
							      98 LOAD_FAST 4 ( j )					    98 LOAD_FAST 4 ( j )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 BINARY_ADD						    102 BINARY_ADD						  
							      104 LOAD_CONST 2 ( 8 )					    104 LOAD_CONST 1 ( 0 )					  
							      106 BINARY_MODULO						    106 COMPARE_OP 2 ( == )					  
							      108 LOAD_CONST 1 ( 0 )					    108 POP_JUMP_IF_FALSE 118					  
							      110 COMPARE_OP 2 ( == )					    110 LOAD_FAST 3 ( i )					  
							      112 POP_JUMP_IF_FALSE 126					    112 LOAD_FAST 4 ( j )					  
							      114 LOAD_FAST 3 ( i )					    114 COMPARE_OP 3 ( != )					  
							      116 LOAD_FAST 4 ( j )					    116 POP_JUMP_IF_FALSE 118					  
							      118 COMPARE_OP 3 ( != )					    								  
							      120 POP_JUMP_IF_FALSE 126					    10 >> 118 LOAD_CONST 3 ( True )				  
							      								    120 RETURN_VALUE						  
							      10 122 LOAD_CONST 3 ( True )				    								  
							      124 RETURN_VALUE						    11 >> 122 LOAD_FAST 2 ( arr )				  
							      								    124 LOAD_FAST 3 ( i )					  
							      11 >> 126 LOAD_FAST 2 ( arr )				    126 BINARY_SUBSCR						  
							      128 LOAD_FAST 3 ( i )					    128 LOAD_CONST 5 ( 100 )					  
							      130 BINARY_SUBSCR						    130 BINARY_MULTIPLY						  
							      132 LOAD_CONST 5 ( 100 )					    132 LOAD_FAST 2 ( arr )					  
							      134 BINARY_MULTIPLY					    134 LOAD_FAST 4 ( j )					  
							      136 LOAD_FAST 2 ( arr )					    136 BINARY_SUBSCR						  
							      138 LOAD_FAST 4 ( j )					    138 LOAD_CONST 4 ( 10 )					  
							      140 BINARY_SUBSCR						    140 BINARY_MULTIPLY						  
							      142 LOAD_CONST 4 ( 10 )					    142 BINARY_ADD						  
							      144 BINARY_MULTIPLY					    144 LOAD_FAST 2 ( arr )					  
							      146 BINARY_ADD						    146 LOAD_FAST 4 ( j )					  
							      148 LOAD_FAST 2 ( arr )					    148 BINARY_SUBSCR						  
							      150 LOAD_FAST 5 ( k )					    150 BINARY_ADD						  
							      152 BINARY_SUBSCR						    152 LOAD_CONST 1 ( 0 )					  
							      154 BINARY_ADD						    154 COMPARE_OP 2 ( == )					  
							      156 LOAD_CONST 2 ( 8 )					    156 POP_JUMP_IF_FALSE 62					  
							      158 BINARY_MODULO						    158 LOAD_FAST 4 ( j )					  
							      160 LOAD_CONST 1 ( 0 )					    160 LOAD_FAST 5 ( k )					  
							      162 COMPARE_OP 2 ( == )					    162 COMPARE_OP 3 ( != )					  
							      164 POP_JUMP_IF_FALSE 62					    164 POP_JUMP_IF_FALSE 62					  
							      166 LOAD_FAST 3 ( i )					    166 LOAD_FAST 3 ( i )					  
							      168 LOAD_FAST 4 ( j )					    168 LOAD_FAST 5 ( k )					  
							      170 COMPARE_OP 3 ( != )					    170 COMPARE_OP 3 ( != )					  
							      172 POP_JUMP_IF_FALSE 62					    172 POP_JUMP_IF_FALSE 62					  
							      174 LOAD_FAST 4 ( j )					    								  
							      176 LOAD_FAST 5 ( k )					    12 174 LOAD_CONST 3 ( True )				  
							      178 COMPARE_OP 3 ( != )					    176 RETURN_VALUE						  
							      180 POP_JUMP_IF_FALSE 62					    >> 178 JUMP_ABSOLUTE 62					  
							      182 LOAD_FAST 3 ( i )					    >> 180 POP_BLOCK						  
							      184 LOAD_FAST 5 ( k )					    >> 182 JUMP_ABSOLUTE 46					  
							      186 COMPARE_OP 3 ( != )					    >> 184 POP_BLOCK						  
							      188 POP_JUMP_IF_FALSE 62					    								  
							      								    13 >> 186 LOAD_CONST 6 ( False )				  
							      12 190 LOAD_CONST 3 ( True )				    188 RETURN_VALUE NEW_LINE					  
							      192 RETURN_VALUE						    								  
							      194 JUMP_ABSOLUTE 62					    								  
							      >> 196 POP_BLOCK						    								  
							      >> 198 JUMP_ABSOLUTE 46					    								  
							      >> 200 POP_BLOCK						    								  
							      >> 202 JUMP_ABSOLUTE 30					    								  
							      >> 204 POP_BLOCK						    								  
							      								    								  
							      13 >> 206 LOAD_CONST 6 ( False )				    								  
							      208 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER   MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER   MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER	  MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER
--							      --							    --								  --
def minSwap ( arr , n , k ) :				      Disassembly of <code object minSwap at 0x7f33e2644f60, file " Disassembly of <code object minSwap at 0x7f2b0163dc90, file " error : /bin/bash: line 1:  5093 Segmentation faul
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n ) :				      2 STORE_FAST 3 ( count )					    2 STORE_FAST 3 ( count )					  ataset/bin/python XLM/dis_script.py --script_path
	if ( arr [ i ] <= k ) :				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
	    count = count + 1				      3 4 SETUP_LOOP 38 ( to 44 )				    3 4 SETUP_LOOP 40 ( to 46 )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MINIMU
    bad = 0						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  M_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGET
    for i in range ( 0 , count ) :			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  HER.dis
	if ( arr [ i ] > k ) :				      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
	    bad = bad + 1				      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
    ans = bad						      14 GET_ITER						    14 GET_ITER							  
    j = count						      >> 16 FOR_ITER 24 ( to 42 )				    >> 16 FOR_ITER 26 ( to 44 )					  
    for i in range ( 0 , n ) :				      18 STORE_FAST 4 ( i )					    18 STORE_FAST 4 ( i )					  
	if ( j == n ) :					      								    								  
	    break					      4 20 LOAD_FAST 0 ( arr )					    4 20 LOAD_FAST 0 ( arr )					  
	if ( arr [ i ] > k ) :				      22 LOAD_FAST 4 ( i )					    22 LOAD_FAST 4 ( i )					  
	    bad = bad - 1				      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
	if ( arr [ j ] > k ) :				      26 LOAD_FAST 2 ( k )					    26 LOAD_FAST 2 ( k )					  
	    bad = bad + 1				      28 COMPARE_OP 1 ( <= )					    28 COMPARE_OP 1 ( <= )					  
	ans = min ( ans , bad )				      30 POP_JUMP_IF_FALSE 16					    30 POP_JUMP_IF_FALSE 16					  
	j = j + 1					      								    								  
    return ans						      5 32 LOAD_FAST 3 ( count )				    5 32 LOAD_FAST 3 ( count )					  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 STORE_FAST 3 ( count )					    38 STORE_FAST 3 ( count )					  
							      40 JUMP_ABSOLUTE 16					    40 JUMP_ABSOLUTE 16						  
							      >> 42 POP_BLOCK						    42 POP_BLOCK						  
							      								    >> 44 LOAD_CONST 0 ( None )					  
							      6 >> 44 LOAD_CONST 1 ( 0 )				    >> 46 STORE_FAST 5 ( bad )					  
							      46 STORE_FAST 5 ( bad )					    								  
							      								    6 48 SETUP_LOOP 40 ( to 92 )				  
							      7 48 SETUP_LOOP 38 ( to 88 )				    50 LOAD_GLOBAL 0 ( range )					  
							      50 LOAD_GLOBAL 0 ( range )				    52 LOAD_CONST 1 ( 0 )					  
							      52 LOAD_CONST 1 ( 0 )					    54 LOAD_FAST 3 ( count )					  
							      54 LOAD_FAST 3 ( count )					    56 CALL_FUNCTION 2						  
							      56 CALL_FUNCTION 2					    58 GET_ITER							  
							      58 GET_ITER						    >> 60 FOR_ITER 28 ( to 90 )					  
							      >> 60 FOR_ITER 24 ( to 86 )				    62 STORE_FAST 4 ( i )					  
							      62 STORE_FAST 4 ( i )					    								  
							      								    7 64 LOAD_FAST 0 ( arr )					  
							      8 64 LOAD_FAST 0 ( arr )					    66 LOAD_FAST 4 ( i )					  
							      66 LOAD_FAST 4 ( i )					    68 BINARY_SUBSCR						  
							      68 BINARY_SUBSCR						    70 LOAD_FAST 2 ( k )					  
							      70 LOAD_FAST 2 ( k )					    72 COMPARE_OP 4 ( > )					  
							      72 COMPARE_OP 4 ( > )					    74 POP_JUMP_IF_FALSE 60					  
							      74 POP_JUMP_IF_FALSE 60					    								  
							      								    8 76 LOAD_FAST 5 ( bad )					  
							      9 76 LOAD_FAST 5 ( bad )					    78 LOAD_CONST 2 ( 1 )					  
							      78 LOAD_CONST 2 ( 1 )					    80 BINARY_ADD						  
							      80 BINARY_ADD						    82 STORE_FAST 5 ( bad )					  
							      82 STORE_FAST 5 ( bad )					    84 JUMP_ABSOLUTE 60						  
							      84 JUMP_ABSOLUTE 60					    >> 86 POP_BLOCK						  
							      >> 86 POP_BLOCK						    								  
							      								    9 >> 88 LOAD_FAST 5 ( bad )					  
							      10 >> 88 LOAD_FAST 5 ( bad )				    90 STORE_FAST 5 ( ans )					  
							      90 STORE_FAST 6 ( ans )					    								  
							      								    10 92 LOAD_FAST 3 ( count )					  
							      11 92 LOAD_FAST 3 ( count )				    94 STORE_FAST 6 ( j )					  
							      94 STORE_FAST 7 ( j )					    								  
							      								    11 96 SETUP_LOOP 68 ( to 146 )				  
							      12 96 SETUP_LOOP 86 ( to 184 )				    98 LOAD_GLOBAL 0 ( range )					  
							      98 LOAD_GLOBAL 0 ( range )				    100 LOAD_CONST 1 ( 0 )					  
							      100 LOAD_CONST 1 ( 0 )					    102 LOAD_FAST 1 ( n )					  
							      102 LOAD_FAST 1 ( n )					    104 CALL_FUNCTION 2						  
							      104 CALL_FUNCTION 2					    106 GET_ITER						  
							      106 GET_ITER						    >> 108 FOR_ITER 52 ( to 144 )				  
							      >> 108 FOR_ITER 72 ( to 182 )				    110 STORE_FAST 4 ( i )					  
							      110 STORE_FAST 4 ( i )					    								  
							      								    12 112 LOAD_FAST 6 ( j )					  
							      13 112 LOAD_FAST 7 ( j )					    114 LOAD_FAST 1 ( n )					  
							      114 LOAD_FAST 1 ( n )					    116 COMPARE_OP 2 ( == )					  
							      116 COMPARE_OP 2 ( == )					    118 POP_JUMP_IF_FALSE 132					  
							      118 POP_JUMP_IF_FALSE 122					    								  
							      								    13 120 BREAK_LOOP						  
							      14 120 BREAK_LOOP						    122 JUMP_ABSOLUTE 108					  
							      								    124 POP_BLOCK						  
							      15 >> 122 LOAD_FAST 0 ( arr )				    								  
							      124 LOAD_FAST 4 ( i )					    14 >> 126 LOAD_FAST 0 ( arr )				  
							      126 BINARY_SUBSCR						    128 LOAD_FAST 4 ( i )					  
							      128 LOAD_FAST 2 ( k )					    130 BINARY_SUBSCR						  
							      130 COMPARE_OP 4 ( > )					    132 LOAD_FAST 2 ( k )					  
							      132 POP_JUMP_IF_FALSE 142					    134 COMPARE_OP 4 ( > )					  
							      								    136 POP_JUMP_IF_FALSE 108					  
							      16 134 LOAD_FAST 5 ( bad )				    								  
							      136 LOAD_CONST 2 ( 1 )					    15 138 LOAD_FAST 5 ( bad )					  
							      138 BINARY_SUBTRACT					    140 LOAD_CONST 2 ( 1 )					  
							      140 STORE_FAST 5 ( bad )					    142 BINARY_SUBTRACT						  
							      								    144 STORE_FAST 5 ( bad )					  
							      17 >> 142 LOAD_FAST 0 ( arr )				    146 JUMP_ABSOLUTE 108					  
							      144 LOAD_FAST 7 ( j )					    >> 148 POP_BLOCK						  
							      146 BINARY_SUBSCR						    								  
							      148 LOAD_FAST 2 ( k )					    16 >> 150 LOAD_FAST 0 ( arr )				  
							      150 COMPARE_OP 4 ( > )					    152 LOAD_FAST 6 ( j )					  
							      152 POP_JUMP_IF_FALSE 162					    154 BINARY_SUBSCR						  
							      								    156 LOAD_FAST 2 ( k )					  
							      18 154 LOAD_FAST 5 ( bad )				    158 COMPARE_OP 4 ( > )					  
							      156 LOAD_CONST 2 ( 1 )					    160 POP_JUMP_IF_FALSE 166					  
							      158 BINARY_ADD						    								  
							      160 STORE_FAST 5 ( bad )					    17 162 LOAD_FAST 5 ( bad )					  
							      								    164 LOAD_CONST 2 ( 1 )					  
							      19 >> 162 LOAD_GLOBAL 1 ( min )				    166 BINARY_ADD						  
							      164 LOAD_FAST 6 ( ans )					    168 STORE_FAST 5 ( bad )					  
							      166 LOAD_FAST 5 ( bad )					    								  
							      168 CALL_FUNCTION 2					    18 >> 170 LOAD_GLOBAL 1 ( min )				  
							      170 STORE_FAST 6 ( ans )					    172 LOAD_FAST 5 ( ans )					  
							      								    174 LOAD_FAST 5 ( bad )					  
							      20 172 LOAD_FAST 7 ( j )					    176 CALL_FUNCTION 2						  
							      174 LOAD_CONST 2 ( 1 )					    178 STORE_FAST 5 ( ans )					  
							      176 BINARY_ADD						    								  
							      178 STORE_FAST 7 ( j )					    19 180 LOAD_FAST 6 ( j )					  
							      180 JUMP_ABSOLUTE 108					    182 LOAD_CONST 2 ( 1 )					  
							      >> 182 POP_BLOCK						    184 BINARY_ADD						  
							      								    186 STORE_FAST 6 ( j )					  
							      21 >> 184 LOAD_FAST 6 ( ans )				    								  
							      186 RETURN_VALUE NEW_LINE					    20 188 LOAD_FAST 5 ( ans )					  
							      								    190 LOAD_CONST 2 ( 1 )					  
							      								    192 BINARY_ADD						  
							      								    194 STORE_FAST 6 ( j )					  
							      								    								  
							      								    21 >> 196 LOAD_FAST 5 ( ans )				  
							      								    198 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		      FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		    FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		  FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE
--							      --							    --								  --
def maxHamming ( arr , n ) :				      Disassembly of <code object maxHamming at 0x7f33e2644930, fil Disassembly of <code object maxHamming at 0x7f2b0163dc90, fil error : /bin/bash: line 1:  5103 Segmentation faul
    brr = [ 0 ] * ( 2 * n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  ataset/bin/python XLM/dis_script.py --script_path
	brr [ i ] = arr [ i ]				      4 LOAD_CONST 2 ( 2 )					    4 LOAD_CONST 2 ( 2 )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( n ) :				      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/FIND_A
	brr [ n + i ] = arr [ i ]			      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  _ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE.dis
    maxHam = 0						      10 LOAD_CONST 3 ( 1 )					    10 LOAD_CONST 3 ( 1 )					  
    for i in range ( 1 , n ) :				      12 BINARY_ADD						    12 BINARY_ADD						  
	currHam = 0					      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
	k = 0						      16 STORE_FAST 2 ( brr )					    16 STORE_FAST 2 ( brr )					  
	for j in range ( i , i + n ) :			      								    								  
	    if brr [ j ] != arr [ k ] :			      3 18 SETUP_LOOP 28 ( to 48 )				    3 18 SETUP_LOOP 28 ( to 46 )				  
		currHam += 1				      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_GLOBAL 0 ( range )					  
		k = k + 1				      22 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
	if currHam == n :				      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
	    return n					      26 GET_ITER						    26 GET_ITER							  
	maxHam = max ( maxHam , currHam )		      >> 28 FOR_ITER 16 ( to 46 )				    >> 28 FOR_ITER 20 ( to 44 )					  
    return maxHam					      30 STORE_FAST 3 ( i )					    30 STORE_FAST 3 ( i )					  
							      								    								  
							      4 32 LOAD_FAST 0 ( arr )					    4 32 LOAD_FAST 0 ( arr )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 3 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 2 ( brr )					    38 LOAD_FAST 2 ( brr )					  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 3 ( i )					  
							      42 STORE_SUBSCR						    42 STORE_SUBSCR						  
							      44 JUMP_ABSOLUTE 28					    >> 44 JUMP_ABSOLUTE 28					  
							      >> 46 POP_BLOCK						    >> 46 POP_BLOCK						  
							      								    								  
							      5 >> 48 SETUP_LOOP 32 ( to 82 )				    5 48 SETUP_LOOP 32 ( to 88 )				  
							      50 LOAD_GLOBAL 0 ( range )				    50 LOAD_GLOBAL 0 ( range )					  
							      52 LOAD_FAST 1 ( n )					    52 LOAD_FAST 1 ( n )					  
							      54 CALL_FUNCTION 1					    54 CALL_FUNCTION 1						  
							      56 GET_ITER						    56 GET_ITER							  
							      >> 58 FOR_ITER 20 ( to 80 )				    >> 58 FOR_ITER 20 ( to 86 )					  
							      60 STORE_FAST 3 ( i )					    60 STORE_FAST 3 ( i )					  
							      								    								  
							      6 62 LOAD_FAST 0 ( arr )					    6 62 LOAD_FAST 0 ( arr )					  
							      64 LOAD_FAST 3 ( i )					    64 LOAD_FAST 3 ( i )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 2 ( brr )					    68 LOAD_FAST 2 ( brr )					  
							      70 LOAD_FAST 1 ( n )					    70 LOAD_FAST 1 ( n )					  
							      72 LOAD_FAST 3 ( i )					    72 LOAD_FAST 3 ( i )					  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 STORE_SUBSCR						    76 STORE_SUBSCR						  
							      78 JUMP_ABSOLUTE 58					    78 JUMP_ABSOLUTE 58						  
							      >> 80 POP_BLOCK						    >> 80 POP_BLOCK						  
							      								    								  
							      7 >> 82 LOAD_CONST 1 ( 0 )				    7 >> 82 LOAD_CONST 1 ( 0 )					  
							      84 STORE_FAST 4 ( maxHam )				    84 STORE_FAST 4 ( maxHam )					  
							      								    								  
							      8 86 SETUP_LOOP 104 ( to 192 )				    8 86 SETUP_LOOP 96 ( to 164 )				  
							      88 LOAD_GLOBAL 0 ( range )				    88 LOAD_GLOBAL 0 ( range )					  
							      90 LOAD_CONST 3 ( 1 )					    90 LOAD_CONST 3 ( 1 )					  
							      92 LOAD_FAST 1 ( n )					    92 LOAD_FAST 1 ( n )					  
							      94 CALL_FUNCTION 2					    94 CALL_FUNCTION 2						  
							      96 GET_ITER						    96 GET_ITER							  
							      >> 98 FOR_ITER 90 ( to 190 )				    >> 98 FOR_ITER 88 ( to 162 )				  
							      100 STORE_FAST 3 ( i )					    100 STORE_FAST 3 ( i )					  
							      								    								  
							      9 102 LOAD_CONST 1 ( 0 )					    9 102 LOAD_CONST 1 ( 0 )					  
							      104 STORE_FAST 5 ( currHam )				    104 STORE_FAST 5 ( currHam )				  
							      								    								  
							      10 106 LOAD_CONST 1 ( 0 )					    10 106 LOAD_CONST 1 ( 0 )					  
							      108 STORE_FAST 6 ( k )					    108 STORE_FAST 6 ( k )					  
							      								    								  
							      11 110 SETUP_LOOP 54 ( to 166 )				    11 110 SETUP_LOOP 52 ( to 160 )				  
							      112 LOAD_GLOBAL 0 ( range )				    112 LOAD_GLOBAL 0 ( range )					  
							      114 LOAD_FAST 3 ( i )					    114 LOAD_FAST 3 ( i )					  
							      116 LOAD_FAST 3 ( i )					    116 LOAD_FAST 3 ( i )					  
							      118 LOAD_FAST 1 ( n )					    118 LOAD_FAST 1 ( n )					  
							      120 BINARY_ADD						    120 BINARY_ADD						  
							      122 CALL_FUNCTION 2					    122 CALL_FUNCTION 2						  
							      124 GET_ITER						    124 GET_ITER						  
							      >> 126 FOR_ITER 36 ( to 164 )				    >> 126 FOR_ITER 44 ( to 158 )				  
							      128 STORE_FAST 7 ( j )					    128 STORE_FAST 7 ( j )					  
							      								    								  
							      12 130 LOAD_FAST 2 ( brr )				    12 130 LOAD_FAST 2 ( brr )					  
							      132 LOAD_FAST 7 ( j )					    132 LOAD_FAST 7 ( j )					  
							      134 BINARY_SUBSCR						    134 BINARY_SUBSCR						  
							      136 LOAD_FAST 0 ( arr )					    136 LOAD_FAST 0 ( arr )					  
							      138 LOAD_FAST 6 ( k )					    138 LOAD_FAST 6 ( k )					  
							      140 BINARY_SUBSCR						    140 BINARY_SUBSCR						  
							      142 COMPARE_OP 3 ( != )					    142 COMPARE_OP 3 ( != )					  
							      144 POP_JUMP_IF_FALSE 126					    144 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      13 146 LOAD_FAST 5 ( currHam )				    13 146 LOAD_FAST 5 ( currHam )				  
							      148 LOAD_CONST 3 ( 1 )					    148 LOAD_CONST 3 ( 1 )					  
							      150 INPLACE_ADD						    150 INPLACE_ADD						  
							      152 STORE_FAST 5 ( currHam )				    152 STORE_FAST 5 ( currHam )				  
							      								    								  
							      14 154 LOAD_FAST 6 ( k )					    14 154 LOAD_FAST 6 ( k )					  
							      156 LOAD_CONST 3 ( 1 )					    156 LOAD_CONST 3 ( 1 )					  
							      158 BINARY_ADD						    158 BINARY_ADD						  
							      160 STORE_FAST 6 ( k )					    160 STORE_FAST 6 ( k )					  
							      162 JUMP_ABSOLUTE 126					    160 JUMP_ABSOLUTE 126					  
							      >> 164 POP_BLOCK						    >> 162 POP_BLOCK						  
							      								    								  
							      15 >> 166 LOAD_FAST 5 ( currHam )				    15 >> 164 LOAD_FAST 5 ( currHam )				  
							      168 LOAD_FAST 1 ( n )					    166 LOAD_FAST 1 ( n )					  
							      170 COMPARE_OP 2 ( == )					    168 COMPARE_OP 2 ( == )					  
							      172 POP_JUMP_IF_FALSE 178					    170 POP_JUMP_IF_FALSE 176					  
							      								    								  
							      16 174 LOAD_FAST 1 ( n )					    16 172 LOAD_FAST 1 ( n )					  
							      176 RETURN_VALUE						    174 RETURN_VALUE						  
							      								    								  
							      17 >> 178 LOAD_GLOBAL 1 ( max )				    17 >> 176 LOAD_GLOBAL 1 ( max )				  
							      180 LOAD_FAST 4 ( maxHam )				    178 LOAD_FAST 4 ( maxHam )					  
							      182 LOAD_FAST 5 ( currHam )				    180 LOAD_FAST 5 ( currHam )					  
							      184 CALL_FUNCTION 2					    182 CALL_FUNCTION 2						  
							      186 STORE_FAST 4 ( maxHam )				    184 STORE_FAST 4 ( maxHam )					  
							      188 JUMP_ABSOLUTE 98					    186 JUMP_ABSOLUTE 98					  
							      >> 190 POP_BLOCK						    >> 188 POP_BLOCK						  
							      								    								  
							      18 >> 192 LOAD_FAST 4 ( maxHam )				    18 >> 190 LOAD_FAST 4 ( maxHam )				  
							      194 RETURN_VALUE NEW_LINE					    192 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		      GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		    GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER			  GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER
--							      --							    --								  --
def evaluate ( n ) :					      Disassembly of <code object evaluate at 0x7f33e2649a50, file  Disassembly of <code object evaluate at 0x7f2b0163dc90, file  script_not_found : None
    if ( n == 1 or n == 2 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	print ( "No Pythagoras" + " Triplet exists" ) ;	      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    elif ( n % 2 == 0 ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	var = n * n / 4 ;				      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 16					  
	print ( "Pythagoras Triplets" + " exist i.e." , end = 8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
	print ( int ( n ) , "" , int ( var - 1 ) , "" , int ( 10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
    elif ( n % 2 != 0 ) :				      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	var = n * n + 1 ;				      14 POP_JUMP_IF_FALSE 26					    14 POP_JUMP_IF_FALSE 32					  
	print ( "Pythagoras Triplets " + "exist i.e." , end = 								    								  
	print ( int ( n ) , "" , int ( var / 2 - 1 ) , "" , i 3 >> 16 LOAD_GLOBAL 0 ( print )				    3 >> 16 LOAD_GLOBAL 0 ( print )				  
							      18 LOAD_CONST 3 ( 'No Pythagoras Triplet exists' )	    18 LOAD_CONST 3 ( 'No Pythagoras Triagoras Triplets "+" Tripl 
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 POP_TOP						    22 POP_TOP							  
							      24 JUMP_FORWARD 150 ( to 176 )				    24 JUMP_FORWARD 76 ( to 96 )				  
							      								    								  
							      4 >> 26 LOAD_FAST 0 ( n )					    4 >> 26 LOAD_FAST 0 ( n )					  
							      28 LOAD_CONST 2 ( 2 )					    28 LOAD_CONST 2 ( 2 )					  
							      30 BINARY_MODULO						    30 BINARY_MODULO						  
							      32 LOAD_CONST 4 ( 0 )					    32 LOAD_CONST 4 ( 0 )					  
							      34 COMPARE_OP 2 ( == )					    34 COMPARE_OP 2 ( == )					  
							      36 POP_JUMP_IF_FALSE 100					    36 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      5 38 LOAD_FAST 0 ( n )					    5 38 LOAD_FAST 0 ( n )					  
							      40 LOAD_FAST 0 ( n )					    40 LOAD_FAST 0 ( n )					  
							      42 BINARY_MULTIPLY					    42 BINARY_MULTIPLY						  
							      44 LOAD_CONST 5 ( 4 )					    44 LOAD_CONST 5 ( 4 )					  
							      46 BINARY_TRUE_DIVIDE					    46 BINARY_TRUE_DIVIDE					  
							      48 STORE_FAST 1 ( var )					    48 STORE_FAST 1 ( var )					  
							      								    								  
							      6 50 LOAD_GLOBAL 0 ( print )				    6 50 LOAD_GLOBAL 0 ( print )				  
							      52 LOAD_CONST 6 ( 'Pythagoras Triplets exist i.e.' )	    52 LOAD_CONST 6 ( 'Pythagoras Triplets' )			  
							      54 LOAD_CONST 7 ( '' )					    54 LOAD_CONST 7 ( ' exist i.e.' )				  
							      56 LOAD_CONST 8 ( ( 'end' , ) )				    56 BINARY_ADD						  
							      58 CALL_FUNCTION_KW 2					    58 LOAD_CONST 8 ( '' )					  
							      60 POP_TOP						    60 LOAD_CONST 9 ( ( 'end' , ) )				  
							      								    62 CALL_FUNCTION_KW 2					  
							      7 62 LOAD_GLOBAL 0 ( print )				    64 POP_TOP							  
							      64 LOAD_GLOBAL 1 ( int )					    								  
							      66 LOAD_FAST 0 ( n )					    7 66 LOAD_GLOBAL 0 ( print )				  
							      68 CALL_FUNCTION 1					    68 LOAD_GLOBAL 1 ( int )					  
							      70 LOAD_CONST 7 ( '' )					    70 LOAD_FAST 0 ( n )					  
							      72 LOAD_GLOBAL 1 ( int )					    72 CALL_FUNCTION 1						  
							      74 LOAD_FAST 1 ( var )					    74 LOAD_CONST 8 ( ' ' )					  
							      76 LOAD_CONST 1 ( 1 )					    76 LOAD_GLOBAL 1 ( int )					  
							      78 BINARY_SUBTRACT					    78 LOAD_FAST 1 ( var )					  
							      80 CALL_FUNCTION 1					    80 LOAD_CONST 1 ( 1 )					  
							      82 LOAD_CONST 7 ( '' )					    82 BINARY_SUBTRACT						  
							      84 LOAD_GLOBAL 1 ( int )					    84 CALL_FUNCTION 1						  
							      86 LOAD_FAST 1 ( var )					    86 CALL_FUNCTION 3						  
							      88 LOAD_CONST 1 ( 1 )					    88 POP_TOP							  
							      90 BINARY_ADD						    90 JUMP_FORWARD 52 ( to 132 )				  
							      92 CALL_FUNCTION 1					    								  
							      94 CALL_FUNCTION 5					    8 >> 92 LOAD_FAST 0 ( n )					  
							      96 POP_TOP						    94 LOAD_CONST 2 ( 2 )					  
							      98 JUMP_FORWARD 76 ( to 176 )				    96 BINARY_MODULO						  
							      								    98 LOAD_CONST 4 ( 0 )					  
							      8 >> 100 LOAD_FAST 0 ( n )				    100 COMPARE_OP 3 ( != )					  
							      102 LOAD_CONST 2 ( 2 )					    102 POP_JUMP_IF_FALSE 132					  
							      104 BINARY_MODULO						    								  
							      106 LOAD_CONST 4 ( 0 )					    9 104 LOAD_FAST 0 ( n )					  
							      108 COMPARE_OP 3 ( != )					    106 LOAD_FAST 0 ( n )					  
							      110 POP_JUMP_IF_FALSE 176					    108 BINARY_MULTIPLY						  
							      								    110 LOAD_CONST 1 ( 1 )					  
							      9 112 LOAD_FAST 0 ( n )					    112 BINARY_ADD						  
							      114 LOAD_FAST 0 ( n )					    114 STORE_FAST 1 ( var )					  
							      116 BINARY_MULTIPLY					    								  
							      118 LOAD_CONST 1 ( 1 )					    10 116 LOAD_GLOBAL 0 ( print )				  
							      120 BINARY_ADD						    118 LOAD_CONST 6 ( 'Pythagoras Triplets "+"exist i.e.")	  
							      122 STORE_FAST 1 ( var )					    120LOAD_CONST8( '' )					  
							      								    122 LOAD_CONST 9 ( ( 'end' , ) )				  
							      10 124 LOAD_GLOBAL 0 ( print )				    124 CALL_FUNCTION_KW 2					  
							      126 LOAD_CONST 6 ( 'Pythagoras Triplets exist i.e.' )	    126 POP_TOP							  
							      128 LOAD_CONST 7 ( '' )					    								  
							      130 LOAD_CONST 8 ( ( 'end' , ) )				    11 128 LOAD_GLOBAL 0 ( print )				  
							      132 CALL_FUNCTION_KW 2					    130 LOAD_GLOBAL 1 ( int )					  
							      134 POP_TOP						    132 LOAD_FAST 0 ( n )					  
							      								    134 CALL_FUNCTION 1						  
							      11 136 LOAD_GLOBAL 0 ( print )				    136 LOAD_CONST 8 ( ' ' )					  
							      138 LOAD_GLOBAL 1 ( int )					    138 LOAD_GLOBAL 1 ( int )					  
							      140 LOAD_FAST 0 ( n )					    140 LOAD_FAST 1 ( var )					  
							      142 CALL_FUNCTION 1					    142 LOAD_CONST 2 ( 2 )					  
							      144 LOAD_CONST 7 ( '' )					    144 BINARY_TRUE_DIVIDE					  
							      146 LOAD_GLOBAL 1 ( int )					    146 CALL_FUNCTION 1						  
							      148 LOAD_FAST 1 ( var )					    148 LOAD_CONST 8 ( ' ' )					  
							      150 LOAD_CONST 2 ( 2 )					    150 LOAD_GLOBAL 1 ( int )					  
							      152 BINARY_TRUE_DIVIDE					    152 LOAD_FAST 1 ( var )					  
							      154 LOAD_CONST 1 ( 1 )					    154 LOAD_CONST 2 ( 2 )					  
							      156 BINARY_SUBTRACT					    156 BINARY_TRUE_DIVIDE					  
							      158 CALL_FUNCTION 1					    158 CALL_FUNCTION 1						  
							      160 LOAD_CONST 7 ( '' )					    160 CALL_FUNCTION 3						  
							      162 LOAD_GLOBAL 1 ( int )					    162 POP_TOP							  
							      164 LOAD_FAST 1 ( var )					    >> 164 LOAD_CONST 0 ( None )				  
							      166 LOAD_CONST 2 ( 2 )					    166 RETURN_VALUE NEW_LINE					  
							      168 BINARY_TRUE_DIVIDE					    								  
							      170 CALL_FUNCTION 1					    								  
							      172 CALL_FUNCTION 5					    								  
							      174 POP_TOP						    								  
							      >> 176 LOAD_CONST 0 ( None )				    								  
							      178 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING		      PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING			    PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING			  PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING
--							      --							    --								  --
def minMaxLengthWords ( inp ) :				      Disassembly of <code object minMaxLengthWords at 0x7f33e2649a Disassembly of <code object minMaxLengthWords at 0x7f2b0163dc script_not_found : None
    length = len ( inp )				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    si = ei = 0						      2 LOAD_FAST 0 ( inp )					    2 LOAD_FAST 0 ( inp )					  
    min_length = length					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    min_start_index = max_length = max_start_index = 0	      6 STORE_FAST 1 ( length )					    6 STORE_FAST 1 ( length )					  
    while ei <= length :				      								    								  
	if ( ei < length ) and ( inp [ ei ] != " " ) :	      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    ei += 1					      10 DUP_TOP						    10 STORE_FAST 2 ( ei )					  
	else :						      12 STORE_FAST 2 ( si )					    								  
	    curr_length = ei - si			      14 STORE_FAST 3 ( ei )					    4 12 LOAD_FAST 1 ( length )					  
	    if curr_length < min_length :		      								    14 STORE_FAST 3 ( min_length )				  
		min_length = curr_length		      4 16 LOAD_FAST 1 ( length )				    								  
		min_start_index = si			      18 STORE_FAST 4 ( min_length )				    5 16 LOAD_CONST 1 ( 0 )					  
	    if curr_length > max_length :		      								    18 DUP_TOP							  
		max_length = curr_length		      5 20 LOAD_CONST 1 ( 0 )					    20 STORE_FAST 4 ( min_start_index )				  
		max_start_index = si			      22 DUP_TOP						    22 STORE_FAST 5 ( min_start_index )				  
	    ei += 1					      24 STORE_FAST 5 ( min_start_index )			    								  
	    si = ei					      26 DUP_TOP						    6 24 SETUP_LOOP 106 ( to 132 )				  
    minWord = inp [ min_start_index : min_start_index + min_l 28 STORE_FAST 6 ( max_length )				    >> 26 LOAD_FAST 2 ( ei )					  
    maxWord = inp [ max_start_index : max_length ]	      30 STORE_FAST 7 ( max_start_index )			    28 LOAD_FAST 1 ( length )					  
    print ( "Minimum length word: " , minWord )		      								    30 COMPARE_OP 1 ( <= )					  
    print ( "Maximum length word: " , maxWord )		      6 32 SETUP_LOOP 94 ( to 128 )				    32 POP_JUMP_IF_FALSE 130					  
							      >> 34 LOAD_FAST 3 ( ei )					    								  
							      36 LOAD_FAST 1 ( length )					    7 34 LOAD_FAST 2 ( ei )					  
							      38 COMPARE_OP 1 ( <= )					    36 LOAD_FAST 1 ( length )					  
							      40 POP_JUMP_IF_FALSE 126					    38 COMPARE_OP 0 ( < )					  
							      								    40 POP_JUMP_IF_FALSE 62					  
							      7 42 LOAD_FAST 3 ( ei )					    42 LOAD_FAST 0 ( inp )					  
							      44 LOAD_FAST 1 ( length )					    44 LOAD_FAST 2 ( ei )					  
							      46 COMPARE_OP 0 ( < )					    46 BINARY_SUBSCR						  
							      48 POP_JUMP_IF_FALSE 72					    48 LOAD_CONST 2 ( ' ' )					  
							      50 LOAD_FAST 0 ( inp )					    50 COMPARE_OP 3 ( != )					  
							      52 LOAD_FAST 3 ( ei )					    52 POP_JUMP_IF_FALSE 62					  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_CONST 2 ( ' ' )					    8 54 LOAD_FAST 2 ( ei )					  
							      58 COMPARE_OP 3 ( != )					    56 LOAD_CONST 3 ( 1 )					  
							      60 POP_JUMP_IF_FALSE 72					    58 INPLACE_ADD						  
							      								    60 STORE_FAST 2 ( ei )					  
							      8 62 LOAD_FAST 3 ( ei )					    62 JUMP_ABSOLUTE 26						  
							      64 LOAD_CONST 3 ( 1 )					    64 JUMP_FORWARD 16 ( to 78 )				  
							      66 INPLACE_ADD						    								  
							      68 STORE_FAST 3 ( ei )					    10 >> 66 LOAD_FAST 2 ( ei )					  
							      70 JUMP_ABSOLUTE 34					    68 LOAD_FAST 2 ( ei )					  
							      								    70 BINARY_SUBTRACT						  
							      10 >> 72 LOAD_FAST 3 ( ei )				    72 STORE_FAST 5 ( curr_length )				  
							      74 LOAD_FAST 2 ( si )					    								  
							      76 BINARY_SUBTRACT					    11 74 LOAD_FAST 5 ( curr_length )				  
							      78 STORE_FAST 8 ( curr_length )				    76 LOAD_FAST 3 ( min_length )				  
							      								    78 COMPARE_OP 0 ( < )					  
							      11 80 LOAD_FAST 8 ( curr_length )				    80 POP_JUMP_IF_FALSE 90					  
							      82 LOAD_FAST 4 ( min_length )				    								  
							      84 COMPARE_OP 0 ( < )					    12 82 LOAD_FAST 5 ( curr_length )				  
							      86 POP_JUMP_IF_FALSE 96					    84 STORE_FAST 3 ( min_length )				  
							      								    								  
							      12 88 LOAD_FAST 8 ( curr_length )				    13 86 LOAD_FAST 2 ( ei )					  
							      90 STORE_FAST 4 ( min_length )				    88 STORE_FAST 4 ( min_start_index )				  
							      								    								  
							      13 92 LOAD_FAST 2 ( si )					    14 >> 90 LOAD_FAST 5 ( curr_length )			  
							      94 STORE_FAST 5 ( min_start_index )			    92 LOAD_FAST 5 ( max_length )				  
							      								    94 COMPARE_OP 4 ( > )					  
							      14 >> 96 LOAD_FAST 8 ( curr_length )			    96 POP_JUMP_IF_FALSE 110					  
							      98 LOAD_FAST 6 ( max_length )				    								  
							      100 COMPARE_OP 4 ( > )					    15 98 LOAD_FAST 5 ( curr_length )				  
							      102 POP_JUMP_IF_FALSE 112					    100 STORE_FAST 5 ( max_length )				  
							      								    								  
							      15 104 LOAD_FAST 8 ( curr_length )			    16 102 LOAD_FAST 2 ( ei )					  
							      106 STORE_FAST 6 ( max_length )				    104 STORE_FAST 6 ( max_start_index )			  
							      								    								  
							      16 108 LOAD_FAST 2 ( si )					    17 106 LOAD_FAST 2 ( ei )					  
							      110 STORE_FAST 7 ( max_start_index )			    108 STORE_FAST 2 ( ei )					  
							      								    								  
							      17 >> 112 LOAD_FAST 3 ( ei )				    18 >> 110 LOAD_FAST 2 ( ei )				  
							      114 LOAD_CONST 3 ( 1 )					    112 STORE_FAST 2 ( ei )					  
							      116 INPLACE_ADD						    114 JUMP_ABSOLUTE 26					  
							      118 STORE_FAST 3 ( ei )					    >> 116 POP_BLOCK						  
							      								    								  
							      18 120 LOAD_FAST 3 ( ei )					    19 >> 118 LOAD_FAST 0 ( inp )				  
							      122 STORE_FAST 2 ( si )					    120 LOAD_FAST 3 ( min_start_index )				  
							      124 JUMP_ABSOLUTE 34					    122 LOAD_FAST 3 ( min_start_index )				  
							      >> 126 POP_BLOCK						    124 LOAD_FAST 3 ( min_length )				  
							      								    126 BINARY_ADD						  
							      19 >> 128 LOAD_FAST 0 ( inp )				    128 BUILD_SLICE 2						  
							      130 LOAD_FAST 5 ( min_start_index )			    130 BINARY_SUBSCR						  
							      132 LOAD_FAST 5 ( min_start_index )			    132 STORE_FAST 7 ( minWord )				  
							      134 LOAD_FAST 4 ( min_length )				    								  
							      136 BINARY_ADD						    20 134 LOAD_FAST 0 ( inp )					  
							      138 BUILD_SLICE 2						    136 LOAD_FAST 4 ( min_start_index )				  
							      140 BINARY_SUBSCR						    138 LOAD_FAST 5 ( max_length )				  
							      142 STORE_FAST 9 ( minWord )				    140 BUILD_SLICE 2						  
							      								    142 BINARY_SUBSCR						  
							      20 144 LOAD_FAST 0 ( inp )				    144 STORE_FAST 8 ( maxWord )				  
							      146 LOAD_FAST 7 ( max_start_index )			    								  
							      148 LOAD_FAST 6 ( max_length )				    21 146 LOAD_GLOBAL 1 ( print )				  
							      150 BUILD_SLICE 2						    148 LOAD_CONST 4 ( 'Minimum length word: ' )		  
							      152 BINARY_SUBSCR						    150 LOAD_FAST 7 ( minWord )					  
							      154 STORE_FAST 10 ( maxWord )				    152 CALL_FUNCTION 2						  
							      								    154 POP_TOP							  
							      21 156 LOAD_GLOBAL 1 ( print )				    								  
							      158 LOAD_CONST 4 ( 'Minimum length word: ' )		    22 156 LOAD_GLOBAL 1 ( print )				  
							      160 LOAD_FAST 9 ( minWord )				    158 LOAD_CONST 5 ( 'Maximum length word: ' )		  
							      162 CALL_FUNCTION 2					    160 LOAD_FAST 8 ( maxWord )					  
							      164 POP_TOP						    162 CALL_FUNCTION 2						  
							      								    164 POP_TOP							  
							      22 166 LOAD_GLOBAL 1 ( print )				    166 LOAD_CONST 0 ( None )					  
							      168 LOAD_CONST 5 ( 'Maximum length word: ' )		    168 RETURN_VALUE NEW_LINE					  
							      170 LOAD_FAST 10 ( maxWord )				    								  
							      172 CALL_FUNCTION 2					    								  
							      174 POP_TOP						    								  
							      176 LOAD_CONST 0 ( None )					    								  
							      178 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1		      FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1		    FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1		  FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1
--							      --							    --								  --
def printFirstNegativeInteger ( arr , n , k ) :		      Disassembly of <code object printFirstNegativeInteger at 0x7f Disassembly of <code object printFirstNegativeInteger at 0x7f script_not_found : None
    Di = deque ( )					      2 0 LOAD_GLOBAL 0 ( deque )				    2 0 LOAD_GLOBAL 0 ( deque )					  
    for i in range ( k ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	if ( arr [ i ] < 0 ) :				      4 STORE_FAST 3 ( Di )					    4 STORE_FAST 3 ( Di )					  
	    Di.append ( i ) ;				      								    								  
    for i in range ( k , n ) :				      3 6 SETUP_LOOP 38 ( to 46 )				    3 6 SETUP_LOOP 38 ( to 52 )					  
	if ( not Di ) :					      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	    print ( 0 , end = ' ' )			      10 LOAD_FAST 2 ( k )					    10 LOAD_FAST 2 ( k )					  
	else :						      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	    print ( arr [ Di [ 0 ] ] , end = ' ' ) ;	      14 GET_ITER						    14 GET_ITER							  
	while Di and Di [ 0 ] <= ( i - k ) :		      >> 16 FOR_ITER 26 ( to 44 )				    >> 16 FOR_ITER 26 ( to 50 )					  
	    Di.popleft ( )				      18 STORE_FAST 4 ( i )					    18 STORE_FAST 4 ( i )					  
	if ( arr [ i ] < 0 ) :				      								    								  
	    Di.append ( i ) ;				      4 20 LOAD_FAST 0 ( arr )					    4 20 LOAD_FAST 0 ( arr )					  
    if not Di :						      22 LOAD_FAST 4 ( i )					    22 LOAD_FAST 4 ( i )					  
	print ( 0 )					      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
    else :						      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
	print ( arr [ Di [ 0 ] ] , end = " " )		      28 COMPARE_OP 0 ( < )					    28 COMPARE_OP 0 ( < )					  
							      30 POP_JUMP_IF_FALSE 16					    30 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      5 32 LOAD_FAST 3 ( Di )					    5 32 LOAD_FAST 3 ( Di )					  
							      34 LOAD_METHOD 2 ( append )				    34 LOAD_METHOD 2 ( append )					  
							      36 LOAD_FAST 4 ( i )					    36 LOAD_FAST 4 ( i )					  
							      38 CALL_METHOD 1						    38 CALL_METHOD 1						  
							      40 POP_TOP						    40 POP_TOP							  
							      42 JUMP_ABSOLUTE 16					    42 JUMP_ABSOLUTE 16						  
							      >> 44 POP_BLOCK						    >> 44 POP_BLOCK						  
							      								    								  
							      6 >> 46 SETUP_LOOP 112 ( to 160 )				    6 >> 46 SETUP_LOOP 56 ( to 100 )				  
							      48 LOAD_GLOBAL 1 ( range )				    48 LOAD_GLOBAL 1 ( range )					  
							      50 LOAD_FAST 2 ( k )					    50 LOAD_FAST 2 ( k )					  
							      52 LOAD_FAST 1 ( n )					    52 LOAD_FAST 1 ( n )					  
							      54 CALL_FUNCTION 2					    54 CALL_FUNCTION 2						  
							      56 GET_ITER						    56 GET_ITER							  
							      >> 58 FOR_ITER 98 ( to 158 )				    >> 58 FOR_ITER 44 ( to 98 )					  
							      60 STORE_FAST 4 ( i )					    60 STORE_FAST 4 ( i )					  
							      								    								  
							      7 62 LOAD_FAST 3 ( Di )					    7 62 LOAD_FAST 3 ( Di )					  
							      64 POP_JUMP_IF_TRUE 80					    64 POP_JUMP_IF_TRUE 80					  
							      								    								  
							      8 66 LOAD_GLOBAL 3 ( print )				    8 66 LOAD_GLOBAL 3 ( print )				  
							      68 LOAD_CONST 1 ( 0 )					    68 LOAD_CONST 1 ( 0 )					  
							      70 LOAD_CONST 2 ( ' ' )					    70 LOAD_CONST 2 ( ' ' )					  
							      72 LOAD_CONST 3 ( ( 'end' , ) )				    72 LOAD_CONST 3 ( ( 'end' , ) )				  
							      74 CALL_FUNCTION_KW 2					    74 CALL_FUNCTION_KW 2					  
							      76 POP_TOP						    76 POP_TOP							  
							      78 JUMP_FORWARD 20 ( to 100 )				    78 JUMP_ABSOLUTE 58						  
							      								    								  
							      10 >> 80 LOAD_GLOBAL 3 ( print )				    10 >> 80 LOAD_GLOBAL 3 ( print )				  
							      82 LOAD_FAST 0 ( arr )					    82 LOAD_FAST 0 ( arr )					  
							      84 LOAD_FAST 3 ( Di )					    84 LOAD_FAST 3 ( Di )					  
							      86 LOAD_CONST 1 ( 0 )					    86 LOAD_CONST 1 ( 0 )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 LOAD_CONST 2 ( ' ' )					    92 LOAD_CONST 2 ( ' ' )					  
							      94 LOAD_CONST 3 ( ( 'end' , ) )				    94 LOAD_CONST 3 ( ( 'end' , ) )				  
							      96 CALL_FUNCTION_KW 2					    96 CALL_FUNCTION_KW 2					  
							      98 POP_TOP						    98 POP_TOP							  
							      								    100 JUMP_ABSOLUTE 58					  
							      11 >> 100 SETUP_LOOP 32 ( to 134 )			    >> 102 POP_BLOCK						  
							      >> 102 LOAD_FAST 3 ( Di )					    								  
							      104 POP_JUMP_IF_FALSE 132					    11 >> 104 SETUP_LOOP 48 ( to 156 )				  
							      106 LOAD_FAST 3 ( Di )					    >> 106 LOAD_FAST 3 ( Di )					  
							      108 LOAD_CONST 1 ( 0 )					    108 POP_JUMP_IF_FALSE 154					  
							      110 BINARY_SUBSCR						    110 LOAD_FAST 3 ( Di )					  
							      112 LOAD_FAST 4 ( i )					    112 LOAD_CONST 1 ( 0 )					  
							      114 LOAD_FAST 2 ( k )					    114 BINARY_SUBSCR						  
							      116 BINARY_SUBTRACT					    116 LOAD_FAST 4 ( i )					  
							      118 COMPARE_OP 1 ( <= )					    118 LOAD_FAST 2 ( k )					  
							      120 POP_JUMP_IF_FALSE 132					    120 BINARY_SUBTRACT						  
							      								    122 COMPARE_OP 1 ( <= )					  
							      12 122 LOAD_FAST 3 ( Di )					    124 POP_JUMP_IF_FALSE 140					  
							      124 LOAD_METHOD 4 ( popleft )				    								  
							      126 CALL_METHOD 0						    12 126 LOAD_FAST 3 ( Di )					  
							      128 POP_TOP						    128 LOAD_METHOD 4 ( popleft )				  
							      130 JUMP_ABSOLUTE 102					    130 CALL_METHOD 0						  
							      >> 132 POP_BLOCK						    132 POP_TOP							  
							      								    								  
							      13 >> 134 LOAD_FAST 0 ( arr )				    13 >> 134 LOAD_FAST 0 ( arr )				  
							      136 LOAD_FAST 4 ( i )					    136 LOAD_FAST 4 ( i )					  
							      138 BINARY_SUBSCR						    138 BINARY_SUBSCR						  
							      140 LOAD_CONST 1 ( 0 )					    140 LOAD_CONST 1 ( 0 )					  
							      142 COMPARE_OP 0 ( < )					    142 COMPARE_OP 0 ( < )					  
							      144 POP_JUMP_IF_FALSE 58					    144 POP_JUMP_IF_FALSE 154					  
							      								    								  
							      14 146 LOAD_FAST 3 ( Di )					    14 146 LOAD_FAST 3 ( Di )					  
							      148 LOAD_METHOD 2 ( append )				    148 LOAD_METHOD 2 ( append )				  
							      150 LOAD_FAST 4 ( i )					    150 LOAD_FAST 4 ( i )					  
							      152 CALL_METHOD 1						    152 CALL_METHOD 1						  
							      154 POP_TOP						    154 POP_TOP							  
							      156 JUMP_ABSOLUTE 58					    156 JUMP_ABSOLUTE 106					  
							      >> 158 POP_BLOCK						    >> 158 POP_BLOCK						  
							      								    								  
							      15 >> 160 LOAD_FAST 3 ( Di )				    15 >> 160 LOAD_FAST 0 ( arr )				  
							      162 POP_JUMP_IF_TRUE 174					    162 LOAD_FAST 4 ( i )					  
							      								    164 BINARY_SUBSCR						  
							      16 164 LOAD_GLOBAL 3 ( print )				    166 LOAD_CONST 1 ( 0 )					  
							      166 LOAD_CONST 1 ( 0 )					    168 COMPARE_OP 0 ( < )					  
							      168 CALL_FUNCTION 1					    170 POP_JUMP_IF_FALSE 180					  
							      170 POP_TOP						    								  
							      172 JUMP_FORWARD 20 ( to 194 )				    16 172 LOAD_FAST 3 ( Di )					  
							      								    174 LOAD_METHOD 2 ( append )				  
							      18 >> 174 LOAD_GLOBAL 3 ( print )				    176 LOAD_FAST 4 ( i )					  
							      176 LOAD_FAST 0 ( arr )					    178 CALL_METHOD 1						  
							      178 LOAD_FAST 3 ( Di )					    180 POP_TOP							  
							      180 LOAD_CONST 1 ( 0 )					    182 JUMP_FORWARD 18 ( to 200 )				  
							      182 BINARY_SUBSCR						    								  
							      184 BINARY_SUBSCR						    18 >> 184 LOAD_FAST 3 ( Di )				  
							      186 LOAD_CONST 2 ( ' ' )					    186 POP_JUMP_IF_TRUE 206					  
							      188 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      190 CALL_FUNCTION_KW 2					    19 188 LOAD_GLOBAL 3 ( print )				  
							      192 POP_TOP						    190 LOAD_CONST 1 ( 0 )					  
							      >> 194 LOAD_CONST 0 ( None )				    192 CALL_FUNCTION 1						  
							      196 RETURN_VALUE NEW_LINE					    194 POP_TOP							  
							      								    196 JUMP_FORWARD 14 ( to 200 )				  
							      								    								  
							      								    21 >> 198 LOAD_GLOBAL 3 ( print )				  
							      								    200 LOAD_FAST 0 ( arr )					  
							      								    202 LOAD_FAST 3 ( Di )					  
							      								    204 LOAD_CONST 1 ( 0 )					  
							      								    206 BINARY_SUBSCR						  
							      								    208 BINARY_SUBSCR						  
							      								    210 LOAD_CONST 2 ( ' ' )					  
							      								    212 LOAD_CONST 3 ( ( ( 'end' , ) )				  
							      								    214 CALL_FUNCTION_KW 2					  
							      								    216 POP_TOP							  
							      								    >> 218 LOAD_CONST 0 ( None )				  
							      								    220 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS			      LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS			    LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS			  LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS
--							      --							    --								  --
def printLevels ( graph , V , x ) :			      Disassembly of <code object printLevels at 0x7f33e2644f60, fi Disassembly of <code object printLevels at 0x7f2b01639660, fi script_not_found : None
    level = [ None ] * V				      2 0 LOAD_CONST 0 ( None )					    2 0 LOAD_CONST 0 ( None )					  
    marked = [ False ] * V				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    que = queue.Queue ( )				      4 LOAD_FAST 1 ( V )					    4 LOAD_FAST 1 ( V )						  
    que.put ( x )					      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
    level [ x ] = 0					      8 STORE_FAST 3 ( level )					    8 STORE_FAST 3 ( level )					  
    marked [ x ] = True					      								    								  
    while ( not que.empty ( ) ) :			      3 10 LOAD_CONST 1 ( False )				    3 10 LOAD_CONST 1 ( False )					  
	x = que.get ( )					      12 BUILD_LIST 1						    12 BUILD_LIST 1						  
	for i in range ( len ( graph [ x ] ) ) :	      14 LOAD_FAST 1 ( V )					    14 LOAD_FAST 1 ( V )					  
	    b = graph [ x ] [ i ]			      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
	    if ( not marked [ b ] ) :			      18 STORE_FAST 4 ( marked )				    18 STORE_FAST 4 ( marked )					  
		que.put ( b )				      								    								  
		level [ b ] = level [ x ] + 1		      4 20 LOAD_GLOBAL 0 ( queue )				    4 20 LOAD_GLOBAL 0 ( queue )				  
		marked [ b ] = True			      22 LOAD_METHOD 1 ( Queue )				    22 LOAD_METHOD 1 ( Queue )					  
    print ( "Nodes" , " " , "Level" )			      24 CALL_METHOD 0						    24 CALL_METHOD 0						  
    for i in range ( V ) :				      26 STORE_FAST 5 ( que )					    26 STORE_FAST 5 ( que )					  
	print ( " " , i , " --> " , level [ i ] )	      								    								  
							      5 28 LOAD_FAST 5 ( que )					    5 28 LOAD_FAST 5 ( que )					  
							      30 LOAD_METHOD 2 ( put )					    30 LOAD_METHOD 2 ( put )					  
							      32 LOAD_FAST 2 ( x )					    32 LOAD_FAST 2 ( x )					  
							      34 CALL_METHOD 1						    34 CALL_METHOD 1						  
							      36 POP_TOP						    36 POP_TOP							  
							      								    								  
							      6 38 LOAD_CONST 2 ( 0 )					    6 38 LOAD_CONST 2 ( 0 )					  
							      40 LOAD_FAST 3 ( level )					    40 LOAD_FAST 3 ( level )					  
							      42 LOAD_FAST 2 ( x )					    42 LOAD_FAST 2 ( x )					  
							      44 STORE_SUBSCR						    44 STORE_SUBSCR						  
							      								    								  
							      7 46 LOAD_CONST 3 ( True )				    7 46 LOAD_CONST 3 ( True )					  
							      48 LOAD_FAST 4 ( marked )					    48 LOAD_FAST 4 ( marked )					  
							      50 LOAD_FAST 2 ( x )					    50 LOAD_FAST 2 ( x )					  
							      52 STORE_SUBSCR						    52 STORE_SUBSCR						  
							      								    								  
							      8 54 SETUP_LOOP 100 ( to 156 )				    8 54 SETUP_LOOP 142 ( to 194 )				  
							      >> 56 LOAD_FAST 5 ( que )					    >> 56 LOAD_FAST 5 ( que )					  
							      58 LOAD_METHOD 3 ( empty )				    58 LOAD_METHOD 3 ( empty )					  
							      60 CALL_METHOD 0						    60 CALL_METHOD 0						  
							      62 POP_JUMP_IF_TRUE 154					    62 POP_JUMP_IF_TRUE 192					  
							      								    								  
							      9 64 LOAD_FAST 5 ( que )					    9 64 LOAD_FAST 5 ( que )					  
							      66 LOAD_METHOD 4 ( get )					    66 LOAD_METHOD 4 ( get )					  
							      68 CALL_METHOD 0						    68 CALL_METHOD 0						  
							      70 STORE_FAST 2 ( x )					    70 STORE_FAST 2 ( x )					  
							      								    								  
							      10 72 SETUP_LOOP 78 ( to 152 )				    10 72 SETUP_LOOP 112 ( to 186 )				  
							      74 LOAD_GLOBAL 5 ( range )				    74 LOAD_GLOBAL 5 ( range )					  
							      76 LOAD_GLOBAL 6 ( len )					    76 LOAD_GLOBAL 6 ( len )					  
							      78 LOAD_FAST 0 ( graph )					    78 LOAD_FAST 0 ( graph )					  
							      80 LOAD_FAST 2 ( x )					    80 LOAD_FAST 2 ( x )					  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 CALL_FUNCTION 1					    84 CALL_FUNCTION 1						  
							      86 CALL_FUNCTION 1					    86 CALL_FUNCTION 1						  
							      88 GET_ITER						    88 GET_ITER							  
							      >> 90 FOR_ITER 58 ( to 150 )				    >> 90 FOR_ITER 100 ( to 184 )				  
							      92 STORE_FAST 6 ( i )					    92 STORE_FAST 6 ( i )					  
							      								    								  
							      11 94 LOAD_FAST 0 ( graph )				    11 94 LOAD_FAST 0 ( graph )					  
							      96 LOAD_FAST 2 ( x )					    96 LOAD_FAST 2 ( x )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_FAST 6 ( i )					    100 LOAD_FAST 6 ( i )					  
							      102 BINARY_SUBSCR						    102 BINARY_SUBSCR						  
							      104 STORE_FAST 7 ( b )					    104 STORE_FAST 7 ( b )					  
							      								    								  
							      12 106 LOAD_FAST 4 ( marked )				    12 106 LOAD_FAST 4 ( marked )				  
							      108 LOAD_FAST 7 ( b )					    108 LOAD_FAST 7 ( b )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 POP_JUMP_IF_TRUE 90					    112 POP_JUMP_IF_TRUE 146					  
							      								    								  
							      13 114 LOAD_FAST 5 ( que )				    13 114 LOAD_FAST 3 ( level )				  
							      116 LOAD_METHOD 2 ( put )					    116 LOAD_FAST 2 ( x )					  
							      118 LOAD_FAST 7 ( b )					    118 BINARY_SUBSCR						  
							      120 CALL_METHOD 1						    120 LOAD_CONST 4 ( 1 )					  
							      122 POP_TOP						    122 BINARY_ADD						  
							      								    124 LOAD_FAST 3 ( level )					  
							      14 124 LOAD_FAST 3 ( level )				    126 STORE_SUBSCR						  
							      126 LOAD_FAST 2 ( x )					    								  
							      128 BINARY_SUBSCR						    14 128 LOAD_CONST 3 ( True )				  
							      130 LOAD_CONST 4 ( 1 )					    130 LOAD_FAST 4 ( marked )					  
							      132 BINARY_ADD						    132 LOAD_FAST 7 ( b )					  
							      134 LOAD_FAST 3 ( level )					    134 STORE_SUBSCR						  
							      136 LOAD_FAST 7 ( b )					    136 JUMP_ABSOLUTE 90					  
							      138 STORE_SUBSCR						    >> 138 POP_BLOCK						  
							      								    								  
							      15 140 LOAD_CONST 3 ( True )				    15 >> 140 LOAD_GLOBAL 7 ( print )				  
							      142 LOAD_FAST 4 ( marked )				    142 LOAD_CONST 5 ( 'Nodes' )				  
							      144 LOAD_FAST 7 ( b )					    144 LOAD_CONST 6 ( ' ' )					  
							      146 STORE_SUBSCR						    146 LOAD_CONST 7 ( 'Level' )				  
							      148 JUMP_ABSOLUTE 90					    148 CALL_FUNCTION 3						  
							      >> 150 POP_BLOCK						    150 POP_TOP							  
							      >> 152 JUMP_ABSOLUTE 56					    								  
							      >> 154 POP_BLOCK						    16 152 SETUP_LOOP 30 ( to 180 )				  
							      								    154 LOAD_GLOBAL 5 ( range )					  
							      16 >> 156 LOAD_GLOBAL 7 ( print )				    156 LOAD_FAST 1 ( V )					  
							      158 LOAD_CONST 5 ( 'Nodes' )				    158 CALL_FUNCTION 1						  
							      160 LOAD_CONST 6 ( ' ' )					    160 GET_ITER						  
							      162 LOAD_CONST 7 ( 'Level' )				    >> 162 FOR_ITER 18 ( to 178 )				  
							      164 CALL_FUNCTION 3					    164 STORE_FAST 6 ( i )					  
							      166 POP_TOP						    								  
							      								    17 166 LOAD_GLOBAL 7 ( print )				  
							      17 168 SETUP_LOOP 34 ( to 204 )				    168 LOAD_CONST 6 ( ' ' )					  
							      170 LOAD_GLOBAL 5 ( range )				    170 LOAD_FAST 6 ( i )					  
							      172 LOAD_FAST 1 ( V )					    172 LOAD_CONST 8 ( ' --> ' )				  
							      174 CALL_FUNCTION 1					    174 LOAD_FAST 3 ( level )					  
							      176 GET_ITER						    176 LOAD_FAST 6 ( i )					  
							      >> 178 FOR_ITER 22 ( to 202 )				    178 BINARY_SUBSCR						  
							      180 STORE_FAST 6 ( i )					    180 CALL_FUNCTION 4						  
							      								    182 POP_TOP							  
							      18 182 LOAD_GLOBAL 7 ( print )				    184 JUMP_ABSOLUTE 162					  
							      184 LOAD_CONST 6 ( ' ' )					    >> 186 POP_BLOCK						  
							      186 LOAD_FAST 6 ( i )					    >> 188 LOAD_CONST 0 ( None )				  
							      188 LOAD_CONST 8 ( ' --> ' )				    190 RETURN_VALUE NEW_LINE					  
							      190 LOAD_FAST 3 ( level )					    								  
							      192 LOAD_FAST 6 ( i )					    								  
							      194 BINARY_SUBSCR						    								  
							      196 CALL_FUNCTION 4					    								  
							      198 POP_TOP						    								  
							      200 JUMP_ABSOLUTE 178					    								  
							      >> 202 POP_BLOCK						    								  
							      >> 204 LOAD_CONST 0 ( None )				    								  
							      206 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE
--							      --							    --								  --
def findString ( str , n , k ) :			      Disassembly of <code object findString at 0x7f33e2644f60, fil Disassembly of <code object findString at 0x7f2b0163dc90, fil script_not_found : None
    if ( k == 0 ) :					      2 0 LOAD_FAST 2 ( k )					    2 0 LOAD_FAST 2 ( k )					  
	print ( str )					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
	return						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    str2 = str						      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 20					  
    p = 0						      								    								  
    for i in range ( 0 , n , 1 ) :			      3 8 LOAD_GLOBAL 0 ( print )				    3 8 LOAD_GLOBAL 0 ( print )					  
	if ( str2 [ i ] != 'a' ) :			      10 LOAD_FAST 0 ( str )					    10 LOAD_FAST 0 ( str )					  
	    str2 = str2.replace ( str2 [ i ] , 'a' )	      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	    p += 1					      14 POP_TOP						    14 POP_TOP							  
	    if ( p == k ) :				      								    								  
		break					      4 16 LOAD_CONST 0 ( None )				    4 16 LOAD_CONST 0 ( None )					  
    if ( p < k ) :					      18 RETURN_VALUE						    18 RETURN_VALUE						  
	i = n - 1					      								    								  
	while ( i >= 0 ) :				      5 >> 20 LOAD_FAST 0 ( str )				    5 >> 20 LOAD_FAST 0 ( str )					  
	    if ( str [ i ] == 'a' ) :			      22 STORE_FAST 3 ( str2 )					    22 STORE_FAST 3 ( str2 )					  
		str2 = str2.replace ( str2 [ i ] , 'b' )      								    								  
		p += 1					      6 24 LOAD_CONST 1 ( 0 )					    6 24 LOAD_CONST 1 ( 0 )					  
	    if ( p == k ) :				      26 STORE_FAST 4 ( p )					    26 STORE_FAST 4 ( p )					  
		break					      								    								  
	    i -= 1					      7 28 SETUP_LOOP 66 ( to 96 )				    7 28 SETUP_LOOP 68 ( to 96 )				  
    print ( str2 )					      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_CONST 1 ( 0 )					    32 LOAD_CONST 1 ( 0 )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 2 ( 1 )					  
							      38 CALL_FUNCTION 3					    38 CALL_FUNCTION 3						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 50 ( to 94 )				    >> 42 FOR_ITER 52 ( to 94 )					  
							      44 STORE_FAST 5 ( i )					    44 STORE_FAST 5 ( i )					  
							      								    								  
							      8 46 LOAD_FAST 3 ( str2 )					    8 46 LOAD_FAST 3 ( str2 )					  
							      48 LOAD_FAST 5 ( i )					    48 LOAD_FAST 5 ( i )					  
							      50 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      52 LOAD_CONST 3 ( 'a' )					    52 LOAD_CONST 3 ( 'a' )					  
							      54 COMPARE_OP 3 ( != )					    54 COMPARE_OP 3 ( != )					  
							      56 POP_JUMP_IF_FALSE 42					    56 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      9 58 LOAD_FAST 3 ( str2 )					    9 58 LOAD_FAST 3 ( str2 )					  
							      60 LOAD_METHOD 2 ( replace )				    60 LOAD_METHOD 2 ( replace )				  
							      62 LOAD_FAST 3 ( str2 )					    62 LOAD_FAST 3 ( str2 )					  
							      64 LOAD_FAST 5 ( i )					    64 LOAD_FAST 5 ( i )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_CONST 3 ( 'a' )					    68 LOAD_CONST 3 ( 'a' )					  
							      70 CALL_METHOD 2						    70 CALL_METHOD 2						  
							      72 STORE_FAST 3 ( str2 )					    72 STORE_FAST 3 ( str2 )					  
							      								    								  
							      10 74 LOAD_FAST 4 ( p )					    10 74 LOAD_FAST 4 ( p )					  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 INPLACE_ADD						    78 INPLACE_ADD						  
							      80 STORE_FAST 4 ( p )					    80 STORE_FAST 4 ( p )					  
							      								    								  
							      11 82 LOAD_FAST 4 ( p )					    11 82 LOAD_FAST 4 ( p )					  
							      84 LOAD_FAST 2 ( k )					    84 LOAD_FAST 2 ( k )					  
							      86 COMPARE_OP 2 ( == )					    86 COMPARE_OP 2 ( == )					  
							      88 POP_JUMP_IF_FALSE 42					    88 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      12 90 BREAK_LOOP						    12 90 BREAK_LOOP						  
							      92 JUMP_ABSOLUTE 42					    92 JUMP_ABSOLUTE 42						  
							      >> 94 POP_BLOCK						    >> 94 POP_BLOCK						  
							      								    								  
							      13 >> 96 LOAD_FAST 4 ( p )				    13 >> 96 LOAD_FAST 4 ( p )					  
							      98 LOAD_FAST 2 ( k )					    98 LOAD_FAST 2 ( k )					  
							      100 COMPARE_OP 0 ( < )					    100 COMPARE_OP 0 ( < )					  
							      102 POP_JUMP_IF_FALSE 180					    102 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      14 104 LOAD_FAST 1 ( n )					    14 104 LOAD_FAST 1 ( n )					  
							      106 LOAD_CONST 2 ( 1 )					    106 LOAD_CONST 2 ( 1 )					  
							      108 BINARY_SUBTRACT					    108 BINARY_SUBTRACT						  
							      110 STORE_FAST 5 ( i )					    110 STORE_FAST 5 ( i )					  
							      								    								  
							      15 112 SETUP_LOOP 66 ( to 180 )				    15 112 SETUP_LOOP 74 ( to 188 )				  
							      >> 114 LOAD_FAST 5 ( i )					    >> 114 LOAD_FAST 5 ( i )					  
							      116 LOAD_CONST 1 ( 0 )					    116 LOAD_CONST 1 ( 0 )					  
							      118 COMPARE_OP 5 ( >= )					    118 COMPARE_OP 5 ( >= )					  
							      120 POP_JUMP_IF_FALSE 178					    120 POP_JUMP_IF_FALSE 186					  
							      								    								  
							      16 122 LOAD_FAST 0 ( str )				    16 122 LOAD_FAST 0 ( str )					  
							      124 LOAD_FAST 5 ( i )					    124 LOAD_FAST 5 ( i )					  
							      126 BINARY_SUBSCR						    126 BINARY_SUBSCR						  
							      128 LOAD_CONST 3 ( 'a' )					    128 LOAD_CONST 3 ( 'a' )					  
							      130 COMPARE_OP 2 ( == )					    130 COMPARE_OP 2 ( == )					  
							      132 POP_JUMP_IF_FALSE 158					    132 POP_JUMP_IF_FALSE 180					  
							      								    								  
							      17 134 LOAD_FAST 3 ( str2 )				    17 134 LOAD_FAST 3 ( str2 )					  
							      136 LOAD_METHOD 2 ( replace )				    136 LOAD_METHOD 2 ( replace )				  
							      138 LOAD_FAST 3 ( str2 )					    138 LOAD_FAST 3 ( str2 )					  
							      140 LOAD_FAST 5 ( i )					    140 LOAD_FAST 5 ( i )					  
							      142 BINARY_SUBSCR						    142 BINARY_SUBSCR						  
							      144 LOAD_CONST 4 ( 'b' )					    144 LOAD_CONST 3 ( 'b' )					  
							      146 CALL_METHOD 2						    146 CALL_METHOD 2						  
							      148 STORE_FAST 3 ( str2 )					    148 STORE_FAST 3 ( str2 )					  
							      								    								  
							      18 150 LOAD_FAST 4 ( p )					    18 150 LOAD_FAST 4 ( p )					  
							      152 LOAD_CONST 2 ( 1 )					    152 LOAD_CONST 2 ( 1 )					  
							      154 INPLACE_ADD						    154 INPLACE_ADD						  
							      156 STORE_FAST 4 ( p )					    156 STORE_FAST 4 ( p )					  
							      								    158 JUMP_ABSOLUTE 114					  
							      19 >> 158 LOAD_FAST 4 ( p )				    >> 160 POP_BLOCK						  
							      160 LOAD_FAST 2 ( k )					    								  
							      162 COMPARE_OP 2 ( == )					    19 >> 162 LOAD_FAST 4 ( p )					  
							      164 POP_JUMP_IF_FALSE 168					    164 LOAD_FAST 2 ( k )					  
							      								    166 COMPARE_OP 2 ( == )					  
							      20 166 BREAK_LOOP						    168 POP_JUMP_IF_FALSE 180					  
							      								    								  
							      21 >> 168 LOAD_FAST 5 ( i )				    20 170 BREAK_LOOP						  
							      170 LOAD_CONST 2 ( 1 )					    172 JUMP_ABSOLUTE 114					  
							      172 INPLACE_SUBTRACT					    174 POP_BLOCK						  
							      174 STORE_FAST 5 ( i )					    								  
							      176 JUMP_ABSOLUTE 114					    21 176 LOAD_FAST 5 ( i )					  
							      >> 178 POP_BLOCK						    178 LOAD_CONST 2 ( 1 )					  
							      								    180 INPLACE_SUBTRACT					  
							      22 >> 180 LOAD_GLOBAL 0 ( print )				    182 STORE_FAST 5 ( i )					  
							      182 LOAD_FAST 3 ( str2 )					    184 JUMP_ABSOLUTE 42					  
							      184 CALL_FUNCTION 1					    >> 186 POP_BLOCK						  
							      186 POP_TOP						    								  
							      188 LOAD_CONST 0 ( None )					    21 >> 188 LOAD_GLOBAL 0 ( print )				  
							      190 RETURN_VALUE NEW_LINE					    190 LOAD_FAST 3 ( str2 )					  
							      								    192 CALL_FUNCTION 1						  
							      								    194 POP_TOP							  
							      								    196 LOAD_CONST 0 ( None )					  
							      								    198 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_ELEMENT_TWO_SORTED_ARRAYS				      K_TH_ELEMENT_TWO_SORTED_ARRAYS				    K_TH_ELEMENT_TWO_SORTED_ARRAYS				  K_TH_ELEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
def kth ( arr1 , arr2 , m , n , k ) :			      Disassembly of <code object kth at 0x7f33e2644f60, file "<dis Disassembly of <code object kth at 0x7f2b0163dc90, file "<dis error : /bin/bash: line 1:  5113 Segmentation faul
    sorted1 = [ 0 ] * ( m + n )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    i = 0						      2 BUILD_LIST 1						    2 BUILD_LIST 1						  ataset/bin/python XLM/dis_script.py --script_path
    j = 0						      4 LOAD_FAST 2 ( m )					    4 LOAD_FAST 2 ( m )						  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    d = 0						      6 LOAD_FAST 3 ( n )					    6 LOAD_FAST 3 ( n )						  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/K_TH_E
    while ( i < m and j < n ) :				      8 BINARY_ADD						    8 BINARY_ADD						  LEMENT_TWO_SORTED_ARRAYS.dis
	if ( arr1 [ i ] < arr2 [ j ] ) :		      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
	    sorted1 [ d ] = arr1 [ i ]			      12 STORE_FAST 5 ( sorted1 )				    12 STORE_FAST 4 ( sorted1 )					  
	    i += 1					      								    								  
	else :						      3 14 LOAD_CONST 1 ( 0 )					    3 14 LOAD_CONST 1 ( 0 )					  
	    sorted1 [ d ] = arr2 [ j ]			      16 STORE_FAST 6 ( i )					    16 STORE_FAST 5 ( i )					  
	    j += 1					      								    								  
	d += 1						      4 18 LOAD_CONST 1 ( 0 )					    4 18 LOAD_CONST 1 ( 0 )					  
    while ( i < m ) :					      20 STORE_FAST 7 ( j )					    20 STORE_FAST 6 ( j )					  
	sorted1 [ d ] = arr1 [ i ]			      								    								  
	d += 1						      5 22 LOAD_CONST 1 ( 0 )					    5 22 LOAD_CONST 1 ( 0 )					  
	i += 1						      24 STORE_FAST 8 ( d )					    24 STORE_FAST 7 ( d )					  
    while ( j < n ) :					      								    								  
	sorted1 [ d ] = arr2 [ j ]			      6 26 SETUP_LOOP 86 ( to 114 )				    6 26 LOAD_CONST 1 ( 0 )					  
	d += 1						      >> 28 LOAD_FAST 6 ( i )					    28 STORE_FAST 8 ( d )					  
	j += 1						      30 LOAD_FAST 2 ( m )					    								  
    return sorted1 [ k - 1 ]				      32 COMPARE_OP 0 ( < )					    7 30 SETUP_LOOP 66 ( to 100 )				  
							      34 POP_JUMP_IF_FALSE 112					    >> 32 LOAD_FAST 5 ( i )					  
							      36 LOAD_FAST 7 ( j )					    34 LOAD_FAST 2 ( m )					  
							      38 LOAD_FAST 3 ( n )					    36 COMPARE_OP 0 ( < )					  
							      40 COMPARE_OP 0 ( < )					    38 POP_JUMP_IF_FALSE 98					  
							      42 POP_JUMP_IF_FALSE 112					    40 LOAD_FAST 6 ( j )					  
							      								    42 LOAD_FAST 3 ( n )					  
							      7 44 LOAD_FAST 0 ( arr1 )					    44 COMPARE_OP 0 ( < )					  
							      46 LOAD_FAST 6 ( i )					    46 POP_JUMP_IF_FALSE 98					  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_FAST 1 ( arr2 )					    8 48 LOAD_FAST 0 ( arr1 )					  
							      52 LOAD_FAST 7 ( j )					    50 LOAD_FAST 5 ( i )					  
							      54 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      56 COMPARE_OP 0 ( < )					    54 LOAD_FAST 1 ( arr2 )					  
							      58 POP_JUMP_IF_FALSE 82					    56 LOAD_FAST 6 ( j )					  
							      								    58 BINARY_SUBSCR						  
							      8 60 LOAD_FAST 0 ( arr1 )					    60 COMPARE_OP 0 ( < )					  
							      62 LOAD_FAST 6 ( i )					    62 POP_JUMP_IF_FALSE 78					  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 5 ( sorted1 )				    9 64 LOAD_FAST 0 ( arr1 )					  
							      68 LOAD_FAST 8 ( d )					    66 LOAD_FAST 5 ( i )					  
							      70 STORE_SUBSCR						    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 4 ( sorted1 )					  
							      9 72 LOAD_FAST 6 ( i )					    72 LOAD_FAST 8 ( d )					  
							      74 LOAD_CONST 2 ( 1 )					    74 STORE_SUBSCR						  
							      76 INPLACE_ADD						    								  
							      78 STORE_FAST 6 ( i )					    10 76 LOAD_FAST 5 ( i )					  
							      80 JUMP_FORWARD 20 ( to 102 )				    78 LOAD_CONST 2 ( 1 )					  
							      								    80 INPLACE_ADD						  
							      11 >> 82 LOAD_FAST 1 ( arr2 )				    82 STORE_FAST 5 ( i )					  
							      84 LOAD_FAST 7 ( j )					    84 JUMP_ABSOLUTE 32						  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_FAST 5 ( sorted1 )				    12 >> 86 LOAD_FAST 1 ( arr2 )				  
							      90 LOAD_FAST 8 ( d )					    88 LOAD_FAST 6 ( j )					  
							      92 STORE_SUBSCR						    90 BINARY_SUBSCR						  
							      								    92 LOAD_FAST 4 ( sorted1 )					  
							      12 94 LOAD_FAST 7 ( j )					    94 LOAD_FAST 8 ( d )					  
							      96 LOAD_CONST 2 ( 1 )					    96 STORE_SUBSCR						  
							      98 INPLACE_ADD						    								  
							      100 STORE_FAST 7 ( j )					    13 98 LOAD_FAST 6 ( j )					  
							      								    100 LOAD_CONST 2 ( 1 )					  
							      13 >> 102 LOAD_FAST 8 ( d )				    102 INPLACE_ADD						  
							      104 LOAD_CONST 2 ( 1 )					    104 STORE_FAST 6 ( j )					  
							      106 INPLACE_ADD						    								  
							      108 STORE_FAST 8 ( d )					    14 >> 106 LOAD_FAST 8 ( d )					  
							      110 JUMP_ABSOLUTE 28					    108 LOAD_CONST 2 ( 1 )					  
							      >> 112 POP_BLOCK						    110 INPLACE_ADD						  
							      								    112 STORE_FAST 8 ( d )					  
							      14 >> 114 SETUP_LOOP 40 ( to 156 )			    114 JUMP_ABSOLUTE 32					  
							      >> 116 LOAD_FAST 6 ( i )					    >> 116 POP_BLOCK						  
							      118 LOAD_FAST 2 ( m )					    								  
							      120 COMPARE_OP 0 ( < )					    15 >> 118 SETUP_LOOP 44 ( to 194 )				  
							      122 POP_JUMP_IF_FALSE 154					    >> 120 LOAD_FAST 5 ( i )					  
							      								    122 LOAD_FAST 2 ( m )					  
							      15 124 LOAD_FAST 0 ( arr1 )				    124 COMPARE_OP 0 ( < )					  
							      126 LOAD_FAST 6 ( i )					    126 EXTENDED_ARG 1						  
							      128 BINARY_SUBSCR						    128 POP_JUMP_IF_FALSE 192					  
							      130 LOAD_FAST 5 ( sorted1 )				    								  
							      132 LOAD_FAST 8 ( d )					    16 130 LOAD_FAST 0 ( arr1 )					  
							      134 STORE_SUBSCR						    132 LOAD_FAST 5 ( i )					  
							      								    134 BINARY_SUBSCR						  
							      16 136 LOAD_FAST 8 ( d )					    136 LOAD_FAST 4 ( sorted1 )					  
							      138 LOAD_CONST 2 ( 1 )					    138 LOAD_FAST 8 ( d )					  
							      140 INPLACE_ADD						    140 STORE_SUBSCR						  
							      142 STORE_FAST 8 ( d )					    								  
							      								    17 142 LOAD_FAST 8 ( d )					  
							      17 144 LOAD_FAST 6 ( i )					    144 LOAD_CONST 2 ( 1 )					  
							      146 LOAD_CONST 2 ( 1 )					    146 INPLACE_ADD						  
							      148 INPLACE_ADD						    148 STORE_FAST 8 ( d )					  
							      150 STORE_FAST 6 ( i )					    								  
							      152 JUMP_ABSOLUTE 116					    18 150 LOAD_FAST 5 ( i )					  
							      >> 154 POP_BLOCK						    152 LOAD_CONST 2 ( 1 )					  
							      								    154 INPLACE_ADD						  
							      18 >> 156 SETUP_LOOP 40 ( to 198 )			    156 STORE_FAST 5 ( i )					  
							      >> 158 LOAD_FAST 7 ( j )					    158 JUMP_ABSOLUTE 120					  
							      160 LOAD_FAST 3 ( n )					    >> 160 POP_BLOCK						  
							      162 COMPARE_OP 0 ( < )					    								  
							      164 POP_JUMP_IF_FALSE 196					    19 >> 162 SETUP_LOOP 44 ( to 194 )				  
							      								    164 LOAD_FAST 6 ( j )					  
							      19 166 LOAD_FAST 1 ( arr2 )				    166 LOAD_FAST 3 ( n )					  
							      168 LOAD_FAST 7 ( j )					    168 COMPARE_OP 0 ( < )					  
							      170 BINARY_SUBSCR						    170 POP_JUMP_IF_FALSE 192					  
							      172 LOAD_FAST 5 ( sorted1 )				    								  
							      174 LOAD_FAST 8 ( d )					    20 172 LOAD_FAST 1 ( arr2 )					  
							      176 STORE_SUBSCR						    174 LOAD_FAST 6 ( j )					  
							      								    176 BINARY_SUBSCR						  
							      20 178 LOAD_FAST 8 ( d )					    178 LOAD_FAST 4 ( sorted1 )					  
							      180 LOAD_CONST 2 ( 1 )					    180 LOAD_FAST 8 ( d )					  
							      182 INPLACE_ADD						    182 STORE_SUBSCR						  
							      184 STORE_FAST 8 ( d )					    								  
							      								    21 184 LOAD_FAST 8 ( d )					  
							      21 186 LOAD_FAST 7 ( j )					    186 LOAD_CONST 2 ( 1 )					  
							      188 LOAD_CONST 2 ( 1 )					    188 INPLACE_ADD						  
							      190 INPLACE_ADD						    190 STORE_FAST 8 ( d )					  
							      192 STORE_FAST 7 ( j )					    								  
							      194 JUMP_ABSOLUTE 158					    22 >> 192 LOAD_FAST 6 ( j )					  
							      >> 196 POP_BLOCK						    194 LOAD_CONST 2 ( 1 )					  
							      								    196 INPLACE_ADD						  
							      22 >> 198 LOAD_FAST 5 ( sorted1 )				    198 STORE_FAST 6 ( j )					  
							      200 LOAD_FAST 4 ( k )					    								  
							      202 LOAD_CONST 2 ( 1 )					    23 200 LOAD_FAST 6 ( j )					  
							      204 BINARY_SUBTRACT					    202 LOAD_CONST 2 ( 1 )					  
							      206 BINARY_SUBSCR						    204 INPLACE_ADD						  
							      208 RETURN_VALUE NEW_LINE					    206 STORE_FAST 6 ( j )					  
							      								    208 JUMP_ABSOLUTE 120					  
							      								    >> 210 POP_BLOCK						  
							      								    								  
							      								    24 >> 212 LOAD_FAST 4 ( sorted1 )				  
							      								    214 LOAD_CONST 2 ( 1 )					  
							      								    216 BINARY_SUBTRACT						  
							      								    218 BUILD_LIST 1						  
							      								    220 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	      DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	    DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	  DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B
--							      --							    --								  --
def <<unk>> teLogarithm ( a , b , m ) :			      Disassembly of <code object <<unk>> teLogarithm at 0x7f33e264 Disassembly of <code object Encoder teLog1j at 0x7f2b01639660 script_not_found : None
    n = int ( math.sqrt ( m ) + 1 ) ;			      2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  
    an = 1 ;						      2 LOAD_GLOBAL 1 ( math )					    2 LOAD_GLOBAL 1 ( math )					  
    for i in range ( n ) :				      4 LOAD_METHOD 2 ( sqrt )					    4 LOAD_METHOD 2 ( sqrt )					  
	an = ( an * a ) % m ;				      6 LOAD_FAST 2 ( m )					    6 LOAD_FAST 0 ( a )						  
    value = [ 0 ] * m ;					      8 CALL_METHOD 1						    8 CALL_METHOD 1						  
    cur = an ;						      10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( 1 )					  
    for i in range ( 1 , n + 1 ) :			      12 BINARY_ADD						    12 BINARY_ADD						  
	if ( value [ cur ] == 0 ) :			      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
	    value [ cur ] = i ;				      16 STORE_FAST 3 ( n )					    16 STORE_FAST 3 ( n )					  
	cur = ( cur * an ) % m ;			      								    								  
    cur = b ;						      3 18 LOAD_CONST 1 ( 1 )					    3 18 LOAD_CONST 1 ( 1 )					  
    for i in range ( n + 1 ) :				      20 STORE_FAST 4 ( an )					    20 STORE_FAST 4 ( an )					  
	if ( value [ cur ] > 0 ) :			      								    								  
	    ans = value [ cur ] * n - i ;		      4 22 SETUP_LOOP 28 ( to 52 )				    4 22 SETUP_LOOP 34 ( to 58 )				  
	    if ( ans < m ) :				      24 LOAD_GLOBAL 3 ( range )				    24 LOAD_GLOBAL 3 ( range )					  
		return ans ;				      26 LOAD_FAST 3 ( n )					    26 LOAD_FAST 3 ( n )					  
	cur = ( cur * a ) % m ;				      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
    return - 1 ;					      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 16 ( to 50 )				    >> 32 FOR_ITER 20 ( to 56 )					  
							      34 STORE_FAST 5 ( i )					    34 STORE_FAST 5 ( i )					  
							      								    								  
							      5 36 LOAD_FAST 4 ( an )					    5 36 LOAD_FAST 4 ( an )					  
							      38 LOAD_FAST 0 ( a )					    38 LOAD_FAST 0 ( a )					  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 LOAD_FAST 2 ( m )					    42 LOAD_FAST 0 ( a )					  
							      44 BINARY_MODULO						    44 BINARY_MODULO						  
							      46 STORE_FAST 4 ( an )					    46 STORE_FAST 4 ( an )					  
							      48 JUMP_ABSOLUTE 32					    48 JUMP_ABSOLUTE 32						  
							      >> 50 POP_BLOCK						    >> 50 POP_BLOCK						  
							      								    								  
							      6 >> 52 LOAD_CONST 2 ( 0 )				    6 >> 52 LOAD_CONST 2 ( 0 )					  
							      54 BUILD_LIST 1						    54 BUILD_LIST 1						  
							      56 LOAD_FAST 2 ( m )					    56 LOAD_FAST 2 ( m )					  
							      58 BINARY_MULTIPLY					    58 BINARY_MULTIPLY						  
							      60 STORE_FAST 6 ( value )					    60 STORE_FAST 6 ( value )					  
							      								    								  
							      7 62 LOAD_FAST 4 ( an )					    7 62 LOAD_FAST 4 ( an )					  
							      64 STORE_FAST 7 ( cur )					    64 STORE_FAST 7 ( cur )					  
							      								    								  
							      8 66 SETUP_LOOP 54 ( to 122 )				    8 66 SETUP_LOOP 46 ( to 108 )				  
							      68 LOAD_GLOBAL 3 ( range )				    68 LOAD_GLOBAL 3 ( range )					  
							      70 LOAD_CONST 1 ( 1 )					    70 LOAD_CONST 1 ( 1 )					  
							      72 LOAD_FAST 3 ( n )					    72 LOAD_FAST 3 ( n )					  
							      74 LOAD_CONST 1 ( 1 )					    74 LOAD_CONST 1 ( 1 )					  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 CALL_FUNCTION 2					    78 CALL_FUNCTION 2						  
							      80 GET_ITER						    80 GET_ITER							  
							      >> 82 FOR_ITER 36 ( to 120 )				    >> 82 FOR_ITER 30 ( to 106 )				  
							      84 STORE_FAST 5 ( i )					    84 STORE_FAST 5 ( i )					  
							      								    								  
							      9 86 LOAD_FAST 6 ( value )				    9 86 LOAD_FAST 6 ( value )					  
							      88 LOAD_FAST 7 ( cur )					    88 LOAD_FAST 7 ( cur )					  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 LOAD_CONST 2 ( 0 )					    92 LOAD_CONST 2 ( 0 )					  
							      94 COMPARE_OP 2 ( == )					    94 COMPARE_OP 2 ( == )					  
							      96 POP_JUMP_IF_FALSE 106					    96 POP_JUMP_IF_FALSE 104					  
							      								    								  
							      10 98 LOAD_FAST 5 ( i )					    10 98 LOAD_FAST 5 ( i )					  
							      100 LOAD_FAST 6 ( value )					    100 LOAD_FAST 6 ( value )					  
							      102 LOAD_FAST 7 ( cur )					    102 LOAD_FAST 7 ( cur )					  
							      104 STORE_SUBSCR						    104 STORE_SUBSCR						  
							      								    								  
							      11 >> 106 LOAD_FAST 7 ( cur )				    11 >> 106 LOAD_FAST 7 ( cur )				  
							      108 LOAD_FAST 4 ( an )					    108 LOAD_FAST 4 ( an )					  
							      110 BINARY_MULTIPLY					    110 BINARY_MULTIPLY						  
							      112 LOAD_FAST 2 ( m )					    112 LOAD_FAST 0 ( a )					  
							      114 BINARY_MODULO						    114 BINARY_MODULO						  
							      116 STORE_FAST 7 ( cur )					    116 STORE_FAST 7 ( cur )					  
							      118 JUMP_ABSOLUTE 82					    118 JUMP_ABSOLUTE 82					  
							      >> 120 POP_BLOCK						    >> 120 POP_BLOCK						  
							      								    								  
							      12 >> 122 LOAD_FAST 1 ( b )				    12 >> 122 LOAD_FAST 1 ( b )					  
							      124 STORE_FAST 7 ( cur )					    124 STORE_FAST 7 ( cur )					  
							      								    								  
							      13 126 SETUP_LOOP 72 ( to 200 )				    13 126 SETUP_LOOP 68 ( to 274 )				  
							      128 LOAD_GLOBAL 3 ( range )				    128 LOAD_GLOBAL 3 ( range )					  
							      130 LOAD_FAST 3 ( n )					    130 LOAD_FAST 3 ( n )					  
							      132 LOAD_CONST 1 ( 1 )					    132 LOAD_CONST 1 ( 1 )					  
							      134 BINARY_ADD						    134 BINARY_ADD						  
							      136 CALL_FUNCTION 1					    136 CALL_FUNCTION 1						  
							      138 GET_ITER						    138 GET_ITER						  
							      >> 140 FOR_ITER 56 ( to 198 )				    >> 140 FOR_ITER 56 ( to 272 )				  
							      142 STORE_FAST 5 ( i )					    142 STORE_FAST 5 ( i )					  
							      								    								  
							      14 144 LOAD_FAST 6 ( value )				    14 144 LOAD_FAST 6 ( value )				  
							      146 LOAD_FAST 7 ( cur )					    146 LOAD_FAST 7 ( cur )					  
							      148 BINARY_SUBSCR						    148 BINARY_SUBSCR						  
							      150 LOAD_CONST 2 ( 0 )					    150 LOAD_FAST 3 ( n )					  
							      152 COMPARE_OP 4 ( > )					    152 BINARY_MULTIPLY						  
							      154 POP_JUMP_IF_FALSE 184					    154 LOAD_FAST 5 ( i )					  
							      								    156 BINARY_SUBTRACT						  
							      15 156 LOAD_FAST 6 ( value )				    158 STORE_FAST 7 ( cur )					  
							      158 LOAD_FAST 7 ( cur )					    								  
							      160 BINARY_SUBSCR						    15 160 LOAD_FAST 7 ( ans )					  
							      162 LOAD_FAST 3 ( n )					    162 LOAD_FAST 2 ( m )					  
							      164 BINARY_MULTIPLY					    164 COMPARE_OP 0 ( < )					  
							      166 LOAD_FAST 5 ( i )					    166 POP_JUMP_IF_FALSE 140					  
							      168 BINARY_SUBTRACT					    								  
							      170 STORE_FAST 8 ( ans )					    16 168 LOAD_FAST 7 ( ans )					  
							      								    170 RETURN_VALUE						  
							      16 172 LOAD_FAST 8 ( ans )				    172 JUMP_ABSOLUTE 140					  
							      174 LOAD_FAST 2 ( m )					    >> 174 POP_BLOCK						  
							      176 COMPARE_OP 0 ( < )					    								  
							      178 POP_JUMP_IF_FALSE 184					    17 >> 176 LOAD_FAST 7 ( cur )				  
							      								    178 LOAD_FAST 0 ( a )					  
							      17 180 LOAD_FAST 8 ( ans )				    180 BINARY_MULTIPLY						  
							      182 RETURN_VALUE						    182 LOAD_FAST 2 ( m )					  
							      								    184 BINARY_MODULO						  
							      18 >> 184 LOAD_FAST 7 ( cur )				    186 STORE_FAST 7 ( cur )					  
							      186 LOAD_FAST 0 ( a )					    188 JUMP_ABSOLUTE 140					  
							      188 BINARY_MULTIPLY					    >> 190 POP_BLOCK						  
							      190 LOAD_FAST 2 ( m )					    								  
							      192 BINARY_MODULO						    18 >> 192 LOAD_FAST 7 ( cur )				  
							      194 STORE_FAST 7 ( cur )					    194 LOAD_FAST 0 ( a )					  
							      196 JUMP_ABSOLUTE 140					    196 BINARY_MULTIPLY						  
							      >> 198 POP_BLOCK						    198 LOAD_FAST 2 ( m )					  
							      								    200 BINARY_MODULO						  
							      19 >> 200 LOAD_CONST 3 ( - 1 )				    202 STORE_FAST 7 ( cur )					  
							      202 RETURN_VALUE NEW_LINE					    								  
							      								    19 >> 204 LOAD_CONST 3 ( - 1 )				  
							      								    206 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT
--							      --							    --								  --
def maxNumOfChocolates ( arr , n , k ) :		      Disassembly of <code object maxNumOfChocolates at 0x7f33e2653 Disassembly of <code object maxNumOfChocolates at 0x7f2b01639 error : Traceback (most recent call last):   File
    um , curr_rem , maxSum = { } , 0 , 0		      2 0 BUILD_MAP 0						    2 0 BUILD_MAP 0						  "XLM/dis_script.py", line 60, in <module>	exec
    sm = [ 0 ] * n					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 41, in <module>	  Fi
    sm [ 0 ] = arr [ 0 ]				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in maxNumOfChocolates ValueErr
    for i in range ( 1 , n ) :				      6 ROT_THREE						    6 LOAD_CONST 1 ( 0 )					  or: too many values to unpack (expected 3)
	sm [ i ] = sm [ i - 1 ] + arr [ i ]		      8 ROT_TWO							    8 BUILD_TUPLE 4						  
    for i in range ( n ) :				      10 STORE_FAST 3 ( um )					    10 UNPACK_SEQUENCE 3					  
	curr_rem = sm [ i ] % k				      12 STORE_FAST 4 ( curr_rem )				    12 STORE_FAST 3 ( um )					  
	if ( not curr_rem and maxSum < sm [ i ] ) :	      14 STORE_FAST 5 ( maxSum )				    14 STORE_FAST 4 ( curr_rem )				  
	    maxSum = sm [ i ]				      								    16 STORE_FAST 5 ( maxSum )					  
	elif ( not curr_rem in um ) :			      3 16 LOAD_CONST 1 ( 0 )					    								  
	    um [ curr_rem ] = i				      18 BUILD_LIST 1						    3 18 LOAD_CONST 1 ( 0 )					  
	elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) 20 LOAD_FAST 1 ( n )					    20 BUILD_LIST 1						  
	    maxSum = sm [ i ] - sm [ um [ curr_rem ] ]	      22 BINARY_MULTIPLY					    22 LOAD_FAST 1 ( n )					  
    return maxSum // k					      24 STORE_FAST 6 ( sm )					    24 BINARY_MULTIPLY						  
							      								    26 STORE_FAST 6 ( sm )					  
							      4 26 LOAD_FAST 0 ( arr )					    								  
							      28 LOAD_CONST 1 ( 0 )					    4 28 LOAD_FAST 0 ( arr )					  
							      30 BINARY_SUBSCR						    30 LOAD_CONST 1 ( 0 )					  
							      32 LOAD_FAST 6 ( sm )					    32 BINARY_SUBSCR						  
							      34 LOAD_CONST 1 ( 0 )					    34 LOAD_FAST 6 ( sm )					  
							      36 STORE_SUBSCR						    36 LOAD_CONST 1 ( 0 )					  
							      								    38 STORE_SUBSCR						  
							      5 38 SETUP_LOOP 42 ( to 82 )				    								  
							      40 LOAD_GLOBAL 0 ( range )				    5 40 SETUP_LOOP 32 ( to 74 )				  
							      42 LOAD_CONST 2 ( 1 )					    42 LOAD_GLOBAL 0 ( range )					  
							      44 LOAD_FAST 1 ( n )					    44 LOAD_CONST 2 ( 1 )					  
							      46 CALL_FUNCTION 2					    46 LOAD_FAST 1 ( n )					  
							      48 GET_ITER						    48 CALL_FUNCTION 2						  
							      >> 50 FOR_ITER 28 ( to 80 )				    50 GET_ITER							  
							      52 STORE_FAST 7 ( i )					    >> 52 FOR_ITER 20 ( to 72 )					  
							      								    54 STORE_FAST 7 ( i )					  
							      6 54 LOAD_FAST 6 ( sm )					    								  
							      56 LOAD_FAST 7 ( i )					    6 56 LOAD_FAST 6 ( sm )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_FAST 7 ( i )					  
							      60 BINARY_SUBTRACT					    60 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBTRACT						  
							      64 LOAD_FAST 0 ( arr )					    64 BINARY_SUBSCR						  
							      66 LOAD_FAST 7 ( i )					    66 LOAD_FAST 0 ( arr )					  
							      68 BINARY_SUBSCR						    68 LOAD_FAST 7 ( i )					  
							      70 BINARY_ADD						    70 STORE_SUBSCR						  
							      72 LOAD_FAST 6 ( sm )					    >> 72 JUMP_ABSOLUTE 52					  
							      74 LOAD_FAST 7 ( i )					    >> 74 POP_BLOCK						  
							      76 STORE_SUBSCR						    								  
							      78 JUMP_ABSOLUTE 50					    7 >> 76 SETUP_LOOP 132 ( to 244 )				  
							      >> 80 POP_BLOCK						    78 LOAD_GLOBAL 0 ( range )					  
							      								    80 LOAD_FAST 1 ( n )					  
							      7 >> 82 SETUP_LOOP 116 ( to 200 )				    82 CALL_FUNCTION 1						  
							      84 LOAD_GLOBAL 0 ( range )				    84 GET_ITER							  
							      86 LOAD_FAST 1 ( n )					    >> 86 FOR_ITER 124 ( to 242 )				  
							      88 CALL_FUNCTION 1					    88 STORE_FAST 7 ( i )					  
							      90 GET_ITER						    								  
							      >> 92 FOR_ITER 104 ( to 198 )				    8 90 LOAD_FAST 6 ( sm )					  
							      94 STORE_FAST 7 ( i )					    92 LOAD_FAST 7 ( i )					  
							      								    94 BINARY_SUBSCR						  
							      8 96 LOAD_FAST 6 ( sm )					    96 LOAD_FAST 2 ( k )					  
							      98 LOAD_FAST 7 ( i )					    98 BINARY_MODULO						  
							      100 BINARY_SUBSCR						    100 STORE_FAST 8 ( curr_rem )				  
							      102 LOAD_FAST 2 ( k )					    								  
							      104 BINARY_MODULO						    9 102 LOAD_FAST 8 ( curr_rem )				  
							      106 STORE_FAST 4 ( curr_rem )				    104 POP_JUMP_IF_TRUE 116					  
							      								    106 LOAD_FAST 5 ( maxSum )					  
							      9 108 LOAD_FAST 4 ( curr_rem )				    108 LOAD_FAST 6 ( sm )					  
							      110 POP_JUMP_IF_TRUE 134					    110 LOAD_FAST 7 ( i )					  
							      112 LOAD_FAST 5 ( maxSum )				    112 BINARY_SUBSCR						  
							      114 LOAD_FAST 6 ( sm )					    114 COMPARE_OP 0 ( < )					  
							      116 LOAD_FAST 7 ( i )					    >> 116 POP_JUMP_IF_FALSE 116				  
							      118 BINARY_SUBSCR						    								  
							      120 COMPARE_OP 0 ( < )					    10 118 LOAD_FAST 6 ( sm )					  
							      122 POP_JUMP_IF_FALSE 134					    120 LOAD_FAST 7 ( i )					  
							      								    122 BINARY_SUBSCR						  
							      10 124 LOAD_FAST 6 ( sm )					    124 STORE_FAST 5 ( maxSum )					  
							      126 LOAD_FAST 7 ( i )					    126 JUMP_FORWARD 46 ( to 152 )				  
							      128 BINARY_SUBSCR						    								  
							      130 STORE_FAST 5 ( maxSum )				    11 >> 128 LOAD_FAST 8 ( curr_rem )				  
							      132 JUMP_ABSOLUTE 92					    130 LOAD_FAST 3 ( um )					  
							      								    132 COMPARE_OP 6 ( in )					  
							      11 >> 134 LOAD_FAST 4 ( curr_rem )			    134 POP_JUMP_IF_FALSE 152					  
							      136 LOAD_FAST 3 ( um )					    								  
							      138 COMPARE_OP 7 ( not in )				    12 136 LOAD_FAST 7 ( i )					  
							      140 POP_JUMP_IF_FALSE 152					    138 LOAD_FAST 6 ( sm )					  
							      								    140 LOAD_FAST 8 ( curr_rem )				  
							      12 142 LOAD_FAST 7 ( i )					    142 STORE_SUBSCR						  
							      144 LOAD_FAST 3 ( um )					    144 JUMP_ABSOLUTE 86					  
							      146 LOAD_FAST 4 ( curr_rem )				    								  
							      148 STORE_SUBSCR						    13 >> 146 LOAD_FAST 5 ( maxSum )				  
							      150 JUMP_ABSOLUTE 92					    148 LOAD_FAST 6 ( sm )					  
							      								    150 COMPARE_OP 7 ( not in )					  
							      13 >> 152 LOAD_FAST 5 ( maxSum )				    152 POP_JUMP_IF_FALSE 162					  
							      154 LOAD_FAST 6 ( sm )					    								  
							      156 LOAD_FAST 7 ( i )					    14 154 LOAD_FAST 7 ( i )					  
							      158 BINARY_SUBSCR						    156 LOAD_FAST 6 ( sm )					  
							      160 LOAD_FAST 6 ( sm )					    158 LOAD_FAST 8 ( curr_rem )				  
							      162 LOAD_FAST 3 ( um )					    160 STORE_SUBSCR						  
							      164 LOAD_FAST 4 ( curr_rem )				    								  
							      166 BINARY_SUBSCR						    15 >> 162 LOAD_FAST 5 ( maxSum )				  
							      168 BINARY_SUBSCR						    164 LOAD_FAST 7 ( i )					  
							      170 BINARY_SUBTRACT					    166 BINARY_SUBSCR						  
							      172 COMPARE_OP 0 ( < )					    168 LOAD_FAST 6 ( sm )					  
							      174 POP_JUMP_IF_FALSE 92					    170 LOAD_FAST 3 ( um )					  
							      								    172 LOAD_FAST 8 ( curr_rem )				  
							      14 176 LOAD_FAST 6 ( sm )					    174 BINARY_SUBSCR						  
							      178 LOAD_FAST 7 ( i )					    176 BINARY_SUBTRACT						  
							      180 BINARY_SUBSCR						    178 COMPARE_OP 0 ( < )					  
							      182 LOAD_FAST 6 ( sm )					    180 POP_JUMP_IF_FALSE 200					  
							      184 LOAD_FAST 3 ( um )					    								  
							      186 LOAD_FAST 4 ( curr_rem )				    16 182 LOAD_FAST 6 ( sm )					  
							      188 BINARY_SUBSCR						    184 LOAD_FAST 7 ( i )					  
							      190 BINARY_SUBSCR						    186 BINARY_SUBSCR						  
							      192 BINARY_SUBTRACT					    188 LOAD_FAST 6 ( sm )					  
							      194 STORE_FAST 5 ( maxSum )				    190 LOAD_FAST 8 ( curr_rem )				  
							      196 JUMP_ABSOLUTE 92					    192 BINARY_SUBSCR						  
							      >> 198 POP_BLOCK						    194 BINARY_SUBTRACT						  
							      								    196 STORE_FAST 5 ( maxSum )					  
							      15 >> 200 LOAD_FAST 5 ( maxSum )				    198 JUMP_ABSOLUTE 86					  
							      202 LOAD_FAST 2 ( k )					    >> 200 POP_BLOCK						  
							      204 BINARY_FLOOR_DIVIDE					    								  
							      206 RETURN_VALUE NEW_LINE					    17 >> 202 LOAD_FAST 5 ( maxSum )				  
							      								    204 LOAD_FAST 2 ( k )					  
							      								    206 BINARY_FLOOR_DIVIDE					  
							      								    208 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	      CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	    CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	  CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS
--							      --							    --								  --
def HalfDiagonalSums ( mat , n ) :			      Disassembly of <code object HalfDiagonalSums at 0x7f33e2653ed Disassembly of <code object HalfDiagonalSums at 0x7f2b0163966 timeout : None
    diag1_left = 0					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    diag1_right = 0					      2 STORE_FAST 2 ( diag1_left )				    2 STORE_FAST 2 ( diag1_right )				  
    diag2_left = 0					      								    								  
    diag2_right = 0					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
    i = 0						      6 STORE_FAST 3 ( diag1_right )				    6 STORE_FAST 3 ( diag2_left )				  
    j = n - 1						      								    								  
    while i < n :					      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 1 ( 0 )					  
	if ( i < n // 2 ) :				      10 STORE_FAST 4 ( diag2_left )				    10 STORE_FAST 4 ( diag2_right )				  
	    diag1_left += mat [ i ] [ i ]		      								    								  
	    diag2_left += mat [ j ] [ i ]		      5 12 LOAD_CONST 1 ( 0 )					    5 12 LOAD_CONST 1 ( 0 )					  
	elif ( i > n // 2 ) :				      14 STORE_FAST 5 ( diag2_right )				    14 STORE_FAST 5 ( diag2_right )				  
	    diag1_right += mat [ i ] [ i ]		      								    								  
	    diag2_right += mat [ j ] [ i ]		      6 16 LOAD_CONST 1 ( 0 )					    6 16 LOAD_CONST 1 ( 0 )					  
	i += 1						      18 STORE_FAST 6 ( i )					    18 STORE_FAST 6 ( i )					  
	j -= 1						      								    								  
    return ( diag1_left == diag2_right and diag2_right == dia 7 20 LOAD_FAST 1 ( n )					    7 20 LOAD_FAST 1 ( n )					  
							      22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 2 ( 1 )					  
							      24 BINARY_SUBTRACT					    24 BINARY_SUBTRACT						  
							      26 STORE_FAST 7 ( j )					    26 STORE_FAST 7 ( j )					  
							      								    								  
							      8 28 SETUP_LOOP 118 ( to 148 )				    8 28 SETUP_LOOP 68 ( to 106 )				  
							      >> 30 LOAD_FAST 6 ( i )					    >> 30 LOAD_FAST 6 ( i )					  
							      32 LOAD_FAST 1 ( n )					    32 LOAD_FAST 1 ( n )					  
							      34 COMPARE_OP 0 ( < )					    34 COMPARE_OP 0 ( < )					  
							      36 POP_JUMP_IF_FALSE 146					    36 POP_JUMP_IF_FALSE 104					  
							      								    								  
							      9 38 LOAD_FAST 6 ( i )					    9 38 LOAD_FAST 6 ( i )					  
							      40 LOAD_FAST 1 ( n )					    40 LOAD_FAST 1 ( n )					  
							      42 LOAD_CONST 3 ( 2 )					    42 LOAD_CONST 3 ( 2 )					  
							      44 BINARY_FLOOR_DIVIDE					    44 BINARY_FLOOR_DIVIDE					  
							      46 COMPARE_OP 0 ( < )					    46 COMPARE_OP 0 ( < )					  
							      48 POP_JUMP_IF_FALSE 84					    48 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      10 50 LOAD_FAST 2 ( diag1_left )				    10 50 LOAD_FAST 3 ( diag1_left )				  
							      52 LOAD_FAST 0 ( mat )					    52 LOAD_FAST 0 ( mat )					  
							      54 LOAD_FAST 6 ( i )					    54 LOAD_FAST 6 ( i )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 6 ( i )					    58 LOAD_FAST 6 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 INPLACE_ADD						    62 INPLACE_ADD						  
							      64 STORE_FAST 2 ( diag1_left )				    64 STORE_FAST 3 ( diag1_left )				  
							      								    								  
							      11 66 LOAD_FAST 4 ( diag2_left )				    11 66 LOAD_FAST 4 ( diag2_left )				  
							      68 LOAD_FAST 0 ( mat )					    68 LOAD_FAST 0 ( mat )					  
							      70 LOAD_FAST 7 ( j )					    70 LOAD_FAST 7 ( j )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_FAST 6 ( i )					    74 LOAD_FAST 6 ( i )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 INPLACE_ADD						    78 INPLACE_ADD						  
							      80 STORE_FAST 4 ( diag2_left )				    80 STORE_FAST 4 ( diag2_left )				  
							      82 JUMP_FORWARD 44 ( to 128 )				    82 JUMP_ABSOLUTE 30						  
							      								    								  
							      12 >> 84 LOAD_FAST 6 ( i )				    12 >> 84 LOAD_FAST 6 ( i )					  
							      86 LOAD_FAST 1 ( n )					    86 LOAD_FAST 1 ( n )					  
							      88 LOAD_CONST 3 ( 2 )					    88 LOAD_CONST 3 ( 2 )					  
							      90 BINARY_FLOOR_DIVIDE					    90 BINARY_FLOOR_DIVIDE					  
							      92 COMPARE_OP 4 ( > )					    92 COMPARE_OP 4 ( > )					  
							      94 POP_JUMP_IF_FALSE 128					    94 POP_JUMP_IF_FALSE 140					  
							      								    								  
							      13 96 LOAD_FAST 3 ( diag1_right )				    13 96 LOAD_FAST 3 ( diag1_right )				  
							      98 LOAD_FAST 0 ( mat )					    98 LOAD_FAST 0 ( mat )					  
							      100 LOAD_FAST 6 ( i )					    100 LOAD_FAST 6 ( i )					  
							      102 BINARY_SUBSCR						    102 BINARY_SUBSCR						  
							      104 LOAD_FAST 6 ( i )					    104 LOAD_FAST 6 ( i )					  
							      106 BINARY_SUBSCR						    106 BINARY_SUBSCR						  
							      108 INPLACE_ADD						    108 INPLACE_ADD						  
							      110 STORE_FAST 3 ( diag1_right )				    110 STORE_FAST 3 ( diag2_right )				  
							      								    								  
							      14 112 LOAD_FAST 5 ( diag2_right )			    14 112 LOAD_FAST 3 ( diag2_right )				  
							      114 LOAD_FAST 0 ( mat )					    114 LOAD_FAST 0 ( mat )					  
							      116 LOAD_FAST 7 ( j )					    116 LOAD_FAST 7 ( j )					  
							      118 BINARY_SUBSCR						    118 BINARY_SUBSCR						  
							      120 LOAD_FAST 6 ( i )					    120 LOAD_FAST 6 ( i )					  
							      122 BINARY_SUBSCR						    122 BINARY_SUBSCR						  
							      124 INPLACE_ADD						    124 INPLACE_ADD						  
							      126 STORE_FAST 5 ( diag2_right )				    126 STORE_FAST 3 ( diag2_right )				  
							      								    128 JUMP_ABSOLUTE 30					  
							      15 >> 128 LOAD_FAST 6 ( i )				    								  
							      130 LOAD_CONST 2 ( 1 )					    15 >> 130 LOAD_FAST 6 ( i )					  
							      132 INPLACE_ADD						    132 LOAD_CONST 2 ( 1 )					  
							      134 STORE_FAST 6 ( i )					    134 INPLACE_ADD						  
							      								    136 STORE_FAST 6 ( i )					  
							      16 136 LOAD_FAST 7 ( j )					    								  
							      138 LOAD_CONST 2 ( 1 )					    16 138 LOAD_FAST 7 ( j )					  
							      140 INPLACE_SUBTRACT					    140 LOAD_CONST 2 ( 1 )					  
							      142 STORE_FAST 7 ( j )					    142 INPLACE_SUBTRACT					  
							      144 JUMP_ABSOLUTE 30					    144 STORE_FAST 7 ( j )					  
							      >> 146 POP_BLOCK						    								  
							      								    17 146 LOAD_FAST 7 ( j )					  
							      17 >> 148 LOAD_FAST 2 ( diag1_left )			    148 LOAD_CONST 2 ( 1 )					  
							      150 LOAD_FAST 5 ( diag2_right )				    150 INPLACE_SUBTRACT					  
							      152 COMPARE_OP 2 ( == )					    152 STORE_FAST 7 ( j )					  
							      154 JUMP_IF_FALSE_OR_POP 194				    								  
							      156 LOAD_FAST 5 ( diag2_right )				    18 >> 154 LOAD_FAST 7 ( j )					  
							      158 LOAD_FAST 4 ( diag2_left )				    156 LOAD_CONST 2 ( 1 )					  
							      160 COMPARE_OP 2 ( == )					    158 INPLACE_SUBTRACT					  
							      162 JUMP_IF_FALSE_OR_POP 194				    160 STORE_FAST 7 ( j )					  
							      164 LOAD_FAST 3 ( diag1_right )				    								  
							      166 LOAD_FAST 4 ( diag2_left )				    19 162 LOAD_FAST 7 ( j )					  
							      168 COMPARE_OP 2 ( == )					    164 LOAD_CONST 2 ( 1 )					  
							      170 JUMP_IF_FALSE_OR_POP 194				    166 INPLACE_SUBTRACT					  
							      172 LOAD_FAST 5 ( diag2_right )				    168 STORE_FAST 7 ( j )					  
							      174 LOAD_FAST 0 ( mat )					    170 JUMP_ABSOLUTE 30					  
							      176 LOAD_FAST 1 ( n )					    >> 172 POP_BLOCK						  
							      178 LOAD_CONST 3 ( 2 )					    								  
							      180 BINARY_FLOOR_DIVIDE					    20 >> 174 LOAD_FAST 2 ( diag1_left )			  
							      182 BINARY_SUBSCR						    176 LOAD_FAST 3 ( diag2_right )				  
							      184 LOAD_FAST 1 ( n )					    178 COMPARE_OP 2 ( == )					  
							      186 LOAD_CONST 3 ( 2 )					    180 JUMP_IF_FALSE_OR_POP 192				  
							      188 BINARY_FLOOR_DIVIDE					    182 LOAD_FAST 4 ( diag2_right )				  
							      190 BINARY_SUBSCR						    184 LOAD_FAST 0 ( mat )					  
							      192 COMPARE_OP 2 ( == )					    186 LOAD_FAST 1 ( n )					  
							      >> 194 RETURN_VALUE NEW_LINE				    188 LOAD_CONST 3 ( 2 )					  
							      								    190 BINARY_FLOOR_DIVIDE					  
							      								    192 BINARY_SUBSCR						  
							      								    194 LOAD_FAST 1 ( n )					  
							      								    196 LOAD_CONST 3 ( 2 )					  
							      								    198 BINARY_FLOOR_DIVIDE					  
							      								    200 BINARY_SUBSCR						  
							      								    202 COMPARE_OP 2 ( == )					  
							      								    204 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		      RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		    RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		  RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX
--							      --							    --								  --
def findLeft ( str ) :					      Disassembly of <code object findLeft at 0x7f33e2644930, file  Disassembly of <code object findLeft at 0x7f2b016399c0, file  script_not_found : None
    n = len ( str ) - 1 ;				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    while ( n > 0 ) :					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
	if ( str [ n ] == 'd' ) :			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    str = str [ 0 : n ] + 'c' + str [ n + 1 : ] ;     6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    break ;					      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
	if ( str [ n ] == 'b' ) :			      10 STORE_FAST 1 ( n )					    10 STORE_FAST 1 ( n )					  
	    str = str [ 0 : n ] + 'a' + str [ n + 1 : ] ;     								    								  
	    break ;					      3 12 SETUP_LOOP 202 ( to 216 )				    3 12 SETUP_LOOP 54 ( to 66 )				  
	if ( str [ n ] == 'a' ) :			      >> 14 LOAD_FAST 1 ( n )					    >> 14 LOAD_FAST 1 ( n )					  
	    str = str [ 0 : n ] + 'b' + str [ n + 1 : ] ;     16 LOAD_CONST 2 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
	elif ( str [ n ] == 'c' ) :			      18 COMPARE_OP 4 ( > )					    18 COMPARE_OP 4 ( > )					  
	    str = str [ 0 : n ] + 'd' + str [ n + 1 : ] ;     20 POP_JUMP_IF_FALSE 214					    20 POP_JUMP_IF_FALSE 64					  
	n -= 1 ;					      								    								  
    return str ;					      4 22 LOAD_FAST 0 ( str )					    4 22 LOAD_FAST 0 ( str )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_CONST 3 ( 'd' )					    28 LOAD_CONST 3 ( 'd' )					  
							      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 68					    32 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      5 34 LOAD_FAST 0 ( str )					    5 34 LOAD_FAST 0 ( str )					  
							      36 LOAD_CONST 2 ( 0 )					    36 LOAD_CONST 2 ( 0 )					  
							      38 LOAD_FAST 1 ( n )					    38 LOAD_FAST 1 ( n )					  
							      40 BUILD_SLICE 2						    40 BUILD_SLICE 2						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_CONST 4 ( 'c' )					    44 LOAD_CONST 4 ( 'c' )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 LOAD_FAST 0 ( str )					    48 LOAD_FAST 0 ( str )					  
							      50 LOAD_FAST 1 ( n )					    50 LOAD_FAST 1 ( n )					  
							      52 LOAD_CONST 1 ( 1 )					    52 LOAD_CONST 1 ( 1 )					  
							      54 BINARY_ADD						    54 BINARY_ADD						  
							      56 LOAD_CONST 0 ( None )					    56 LOAD_CONST 0 ( None )					  
							      58 BUILD_SLICE 2						    58 BUILD_SLICE 2						  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 BINARY_ADD						    62 BINARY_ADD						  
							      64 STORE_FAST 0 ( str )					    >> 64 STORE_FAST 0 ( str )					  
							      								    								  
							      6 66 BREAK_LOOP						    6 >> 66 LOAD_FAST 0 ( str )					  
							      								    68 LOAD_FAST 1 ( n )					  
							      7 >> 68 LOAD_FAST 0 ( str )				    70 BINARY_SUBSCR						  
							      70 LOAD_FAST 1 ( n )					    72 LOAD_CONST 5 ( 'b' )					  
							      72 BINARY_SUBSCR						    74 COMPARE_OP 2 ( == )					  
							      74 LOAD_CONST 5 ( 'b' )					    76 POP_JUMP_IF_FALSE 110					  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 114					    7 78 LOAD_FAST 0 ( str )					  
							      								    80 LOAD_CONST 2 ( 0 )					  
							      8 80 LOAD_FAST 0 ( str )					    82 LOAD_FAST 1 ( n )					  
							      82 LOAD_CONST 2 ( 0 )					    84 BUILD_SLICE 2						  
							      84 LOAD_FAST 1 ( n )					    86 BINARY_SUBSCR						  
							      86 BUILD_SLICE 2						    88 LOAD_CONST 6 ( 'a' )					  
							      88 BINARY_SUBSCR						    90 BINARY_ADD						  
							      90 LOAD_CONST 6 ( 'a' )					    92 LOAD_FAST 0 ( str )					  
							      92 BINARY_ADD						    94 LOAD_FAST 1 ( n )					  
							      94 LOAD_FAST 0 ( str )					    96 LOAD_CONST 1 ( 1 )					  
							      96 LOAD_FAST 1 ( n )					    98 BINARY_ADD						  
							      98 LOAD_CONST 1 ( 1 )					    100 LOAD_CONST 0 ( None )					  
							      100 BINARY_ADD						    102 BUILD_SLICE 2						  
							      102 LOAD_CONST 0 ( None )					    104 BINARY_SUBSCR						  
							      104 BUILD_SLICE 2						    106 BINARY_ADD						  
							      106 BINARY_SUBSCR						    108 STORE_FAST 0 ( str )					  
							      108 BINARY_ADD						    								  
							      110 STORE_FAST 0 ( str )					    8 >> 110 BREAK_LOOP						  
							      								    112 JUMP_ABSOLUTE 14					  
							      9 112 BREAK_LOOP						    >> 114 POP_BLOCK						  
							      								    								  
							      10 >> 114 LOAD_FAST 0 ( str )				    9 >> 116 LOAD_FAST 0 ( str )				  
							      116 LOAD_FAST 1 ( n )					    118 LOAD_FAST 1 ( n )					  
							      118 BINARY_SUBSCR						    120 BINARY_SUBSCR						  
							      120 LOAD_CONST 6 ( 'a' )					    122 LOAD_CONST 6 ( 'a' )					  
							      122 COMPARE_OP 2 ( == )					    124 COMPARE_OP 2 ( == )					  
							      124 POP_JUMP_IF_FALSE 160					    126 POP_JUMP_IF_FALSE 166					  
							      								    								  
							      11 126 LOAD_FAST 0 ( str )				    10 128 LOAD_FAST 0 ( str )					  
							      128 LOAD_CONST 2 ( 0 )					    130 LOAD_CONST 2 ( 0 )					  
							      130 LOAD_FAST 1 ( n )					    132 LOAD_FAST 1 ( n )					  
							      132 BUILD_SLICE 2						    134 BUILD_SLICE 2						  
							      134 BINARY_SUBSCR						    136 BINARY_SUBSCR						  
							      136 LOAD_CONST 5 ( 'b' )					    138 LOAD_CONST 5 ( 'b' )					  
							      138 BINARY_ADD						    140 BINARY_ADD						  
							      140 LOAD_FAST 0 ( str )					    142 LOAD_FAST 0 ( str )					  
							      142 LOAD_FAST 1 ( n )					    144 LOAD_FAST 1 ( n )					  
							      144 LOAD_CONST 1 ( 1 )					    146 LOAD_CONST 1 ( 1 )					  
							      146 BINARY_ADD						    148 BINARY_ADD						  
							      148 LOAD_CONST 0 ( None )					    150 LOAD_CONST 0 ( None )					  
							      150 BUILD_SLICE 2						    152 BUILD_SLICE 2						  
							      152 BINARY_SUBSCR						    154 BINARY_SUBSCR						  
							      154 BINARY_ADD						    156 BINARY_ADD						  
							      156 STORE_FAST 0 ( str )					    158 STORE_FAST 0 ( str )					  
							      158 JUMP_FORWARD 44 ( to 204 )				    160 JUMP_FORWARD 40 ( to 184 )				  
							      								    								  
							      12 >> 160 LOAD_FAST 0 ( str )				    11 >> 162 LOAD_FAST 0 ( str )				  
							      162 LOAD_FAST 1 ( n )					    164 LOAD_FAST 1 ( n )					  
							      164 BINARY_SUBSCR						    166 BINARY_SUBSCR						  
							      166 LOAD_CONST 4 ( 'c' )					    168 LOAD_CONST 4 ( 'c' )					  
							      168 COMPARE_OP 2 ( == )					    170 COMPARE_OP 2 ( == )					  
							      170 POP_JUMP_IF_FALSE 204					    172 POP_JUMP_IF_FALSE 184					  
							      								    								  
							      13 172 LOAD_FAST 0 ( str )				    12 174 LOAD_FAST 0 ( str )					  
							      174 LOAD_CONST 2 ( 0 )					    176 LOAD_CONST 2 ( 0 )					  
							      176 LOAD_FAST 1 ( n )					    178 LOAD_FAST 1 ( n )					  
							      178 BUILD_SLICE 2						    180 BUILD_SLICE 2						  
							      180 BINARY_SUBSCR						    182 BINARY_SUBSCR						  
							      182 LOAD_CONST 3 ( 'd' )					    184 LOAD_CONST 3 ( 'd' )					  
							      184 BINARY_ADD						    186 BINARY_ADD						  
							      186 LOAD_FAST 0 ( str )					    188 LOAD_FAST 0 ( str )					  
							      188 LOAD_FAST 1 ( n )					    190 LOAD_FAST 1 ( n )					  
							      190 LOAD_CONST 1 ( 1 )					    192 LOAD_CONST 1 ( 1 )					  
							      192 BINARY_ADD						    194 BINARY_ADD						  
							      194 LOAD_CONST 0 ( None )					    196 LOAD_CONST 0 ( None )					  
							      196 BUILD_SLICE 2						    198 BUILD_SLICE 2						  
							      198 BINARY_SUBSCR						    200 BINARY_SUBSCR						  
							      200 BINARY_ADD						    202 BINARY_ADD						  
							      202 STORE_FAST 0 ( str )					    204 STORE_FAST 0 ( str )					  
							      								    								  
							      14 >> 204 LOAD_FAST 1 ( n )				    13 >> 206 LOAD_FAST 1 ( n )					  
							      206 LOAD_CONST 1 ( 1 )					    208 LOAD_CONST 1 ( 1 )					  
							      208 INPLACE_SUBTRACT					    210 INPLACE_SUBTRACT					  
							      210 STORE_FAST 1 ( n )					    212 STORE_FAST 1 ( n )					  
							      212 JUMP_ABSOLUTE 14					    214 STORE_FAST 1 ( n )					  
							      >> 214 POP_BLOCK						    								  
							      								    14 >> 216 LOAD_FAST 0 ( str )				  
							      15 >> 216 LOAD_FAST 0 ( str )				    218 RETURN_VALUE NEW_LINE					  
							      218 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAGICAL_INDICES_ARRAY					      MAGICAL_INDICES_ARRAY					    MAGICAL_INDICES_ARRAY					  MAGICAL_INDICES_ARRAY
--							      --							    --								  --
def solve ( A , n ) :					      Disassembly of <code object solve at 0x7f33e2653ed0, file "<d Disassembly of <code object solve at 0x7f2b0164d270, file "<d error : /bin/bash: line 1:  5148 Segmentation faul
    cnt = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    parent = [ None ] * ( n + 1 )			      2 STORE_FAST 2 ( cnt )					    2 STORE_FAST 2 ( cnt )					  ataset/bin/python XLM/dis_script.py --script_path
    vis = [ None ] * ( n + 1 )				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( 0 , n + 1 ) :			      3 4 LOAD_CONST 0 ( None )					    3 4 LOAD_CONST 0 ( None )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/MAGICA
	parent [ i ] = - 1				      6 BUILD_LIST 1						    6 BUILD_LIST 1						  L_INDICES_ARRAY.dis
	vis [ i ] = 0					      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
    for i in range ( 0 , n ) :				      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
	j = i						      12 BINARY_ADD						    12 BINARY_ADD						  
	if ( parent [ j ] == - 1 ) :			      14 BINARY_MULTIPLY					    14 BINARY_MULTIPLY						  
	    while ( parent [ j ] == - 1 ) :		      16 STORE_FAST 3 ( parent )				    16 STORE_FAST 3 ( parent )					  
		parent [ j ] = i			      								    								  
		j = ( j + A [ j ] + 1 ) % n		      4 18 LOAD_CONST 0 ( None )				    4 18 LOAD_CONST 0 ( None )					  
	    if ( parent [ j ] == i ) :			      20 BUILD_LIST 1						    20 BUILD_LIST 1						  
		while ( vis [ j ] == 0 ) :		      22 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
		    vis [ j ] = 1			      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
		    cnt = cnt + 1			      26 BINARY_ADD						    26 BINARY_ADD						  
		    j = ( j + A [ j ] + 1 ) % n		      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
    return cnt						      30 STORE_FAST 4 ( vis )					    30 STORE_FAST 4 ( vis )					  
							      								    								  
							      5 32 SETUP_LOOP 38 ( to 72 )				    5 32 SETUP_LOOP 40 ( to 74 )				  
							      34 LOAD_GLOBAL 0 ( range )				    34 LOAD_GLOBAL 0 ( range )					  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 LOAD_FAST 1 ( n )					    38 LOAD_FAST 1 ( n )					  
							      40 LOAD_CONST 2 ( 1 )					    40 LOAD_CONST 2 ( 1 )					  
							      42 BINARY_ADD						    42 BINARY_ADD						  
							      44 CALL_FUNCTION 2					    44 CALL_FUNCTION 2						  
							      46 GET_ITER						    46 GET_ITER							  
							      >> 48 FOR_ITER 20 ( to 70 )				    >> 48 FOR_ITER 24 ( to 72 )					  
							      50 STORE_FAST 5 ( i )					    50 STORE_FAST 5 ( i )					  
							      								    								  
							      6 52 LOAD_CONST 3 ( - 1 )					    6 52 LOAD_CONST 3 ( - 1 )					  
							      54 LOAD_FAST 3 ( parent )					    54 LOAD_FAST 3 ( parent )					  
							      56 LOAD_FAST 5 ( i )					    56 LOAD_FAST 5 ( i )					  
							      58 STORE_SUBSCR						    58 STORE_SUBSCR						  
							      								    								  
							      7 60 LOAD_CONST 1 ( 0 )					    7 60 LOAD_CONST 1 ( 0 )					  
							      62 LOAD_FAST 4 ( vis )					    62 STORE_FAST 4 ( vis )					  
							      64 LOAD_FAST 5 ( i )					    64 JUMP_ABSOLUTE 48						  
							      66 STORE_SUBSCR						    >> 66 POP_BLOCK						  
							      68 JUMP_ABSOLUTE 48					    								  
							      >> 70 POP_BLOCK						    8 >> 68 SETUP_LOOP 136 ( to 244 )				  
							      								    70 LOAD_GLOBAL 0 ( range )					  
							      8 >> 72 SETUP_LOOP 146 ( to 220 )				    72 LOAD_CONST 1 ( 0 )					  
							      74 LOAD_GLOBAL 0 ( range )				    74 LOAD_FAST 1 ( n )					  
							      76 LOAD_CONST 1 ( 0 )					    76 CALL_FUNCTION 2						  
							      78 LOAD_FAST 1 ( n )					    78 GET_ITER							  
							      80 CALL_FUNCTION 2					    >> 80 FOR_ITER 124 ( to 242 )				  
							      82 GET_ITER						    82 STORE_FAST 5 ( i )					  
							      >> 84 FOR_ITER 132 ( to 218 )				    								  
							      86 STORE_FAST 5 ( i )					    9 84 LOAD_FAST 5 ( i )					  
							      								    86 STORE_FAST 6 ( j )					  
							      9 88 LOAD_FAST 5 ( i )					    								  
							      90 STORE_FAST 6 ( j )					    10 88 LOAD_FAST 3 ( parent )				  
							      								    90 LOAD_FAST 6 ( j )					  
							      10 92 LOAD_FAST 3 ( parent )				    92 BINARY_SUBSCR						  
							      94 LOAD_FAST 6 ( j )					    94 LOAD_CONST 3 ( - 1 )					  
							      96 BINARY_SUBSCR						    96 COMPARE_OP 2 ( == )					  
							      98 LOAD_CONST 3 ( - 1 )					    98 POP_JUMP_IF_FALSE 136					  
							      100 COMPARE_OP 2 ( == )					    								  
							      102 POP_JUMP_IF_FALSE 84					    11 100 SETUP_LOOP 118 ( to 244 )				  
							      								    >> 102 SETUP_LOOP 118 ( to 244 )				  
							      11 104 SETUP_LOOP 44 ( to 150 )				    104 LOAD_FAST 3 ( parent )					  
							      >> 106 LOAD_FAST 3 ( parent )				    106 LOAD_FAST 6 ( j )					  
							      108 LOAD_FAST 6 ( j )					    108 BINARY_SUBSCR						  
							      110 BINARY_SUBSCR						    110 LOAD_CONST 3 ( - 1 )					  
							      112 LOAD_CONST 3 ( - 1 )					    112 COMPARE_OP 2 ( == )					  
							      114 COMPARE_OP 2 ( == )					    114 POP_JUMP_IF_FALSE 242					  
							      116 POP_JUMP_IF_FALSE 148					    								  
							      								    12 116 LOAD_FAST 5 ( i )					  
							      12 118 LOAD_FAST 5 ( i )					    118 LOAD_FAST 3 ( parent )					  
							      120 LOAD_FAST 3 ( parent )				    120 LOAD_FAST 6 ( j )					  
							      122 LOAD_FAST 6 ( j )					    122 STORE_SUBSCR						  
							      124 STORE_SUBSCR						    								  
							      								    13 124 LOAD_FAST 6 ( j )					  
							      13 126 LOAD_FAST 6 ( j )					    126 LOAD_FAST 0 ( A )					  
							      128 LOAD_FAST 0 ( A )					    128 LOAD_FAST 6 ( j )					  
							      130 LOAD_FAST 6 ( j )					    130 BINARY_SUBSCR						  
							      132 BINARY_SUBSCR						    132 BINARY_ADD						  
							      134 BINARY_ADD						    134 LOAD_CONST 2 ( 1 )					  
							      136 LOAD_CONST 2 ( 1 )					    136 BINARY_ADD						  
							      138 BINARY_ADD						    138 LOAD_FAST 1 ( n )					  
							      140 LOAD_FAST 1 ( n )					    140 BINARY_MODULO						  
							      142 BINARY_MODULO						    142 STORE_FAST 6 ( j )					  
							      144 STORE_FAST 6 ( j )					    144 JUMP_ABSOLUTE 102					  
							      146 JUMP_ABSOLUTE 106					    >> 146 POP_BLOCK						  
							      >> 148 POP_BLOCK						    								  
							      								    14 >> 148 LOAD_FAST 3 ( parent )				  
							      14 >> 150 LOAD_FAST 3 ( parent )				    150 LOAD_FAST 6 ( j )					  
							      152 LOAD_FAST 6 ( j )					    152 BINARY_SUBSCR						  
							      154 BINARY_SUBSCR						    154 LOAD_FAST 5 ( i )					  
							      156 LOAD_FAST 5 ( i )					    156 COMPARE_OP 2 ( == )					  
							      158 COMPARE_OP 2 ( == )					    158 POP_JUMP_IF_FALSE 194					  
							      160 POP_JUMP_IF_FALSE 84					    								  
							      								    15 160 SETUP_LOOP 54 ( to 194 )				  
							      15 162 SETUP_LOOP 52 ( to 216 )				    >> 162 LOAD_FAST 4 ( vis )					  
							      >> 164 LOAD_FAST 4 ( vis )				    164 LOAD_FAST 6 ( j )					  
							      166 LOAD_FAST 6 ( j )					    166 BINARY_SUBSCR						  
							      168 BINARY_SUBSCR						    168 LOAD_CONST 1 ( 0 )					  
							      170 LOAD_CONST 1 ( 0 )					    170 COMPARE_OP 2 ( == )					  
							      172 COMPARE_OP 2 ( == )					    172 POP_JUMP_IF_FALSE 192					  
							      174 POP_JUMP_IF_FALSE 214					    								  
							      								    16 174 SETUP_LOOP 46 ( to 192 )				  
							      16 176 LOAD_CONST 2 ( 1 )					    >> 176 LOAD_FAST 4 ( vis )					  
							      178 LOAD_FAST 4 ( vis )					    178 LOAD_FAST 6 ( j )					  
							      180 LOAD_FAST 6 ( j )					    180 BINARY_SUBSCR						  
							      182 STORE_SUBSCR						    182 LOAD_CONST 1 ( 0 )					  
							      								    184 COMPARE_OP 2 ( == )					  
							      17 184 LOAD_FAST 2 ( cnt )				    186 POP_JUMP_IF_FALSE 190					  
							      186 LOAD_CONST 2 ( 1 )					    								  
							      188 BINARY_ADD						    17 188 LOAD_CONST 2 ( 1 )					  
							      190 STORE_FAST 2 ( cnt )					    190 LOAD_FAST 4 ( vis )					  
							      								    192 LOAD_FAST 6 ( j )					  
							      18 192 LOAD_FAST 6 ( j )					    194 STORE_SUBSCR						  
							      194 LOAD_FAST 0 ( A )					    								  
							      196 LOAD_FAST 6 ( j )					    18 196 LOAD_FAST 2 ( cnt )					  
							      198 BINARY_SUBSCR						    198 LOAD_CONST 2 ( 1 )					  
							      200 BINARY_ADD						    200 BINARY_ADD						  
							      202 LOAD_CONST 2 ( 1 )					    202 STORE_FAST 2 ( cnt )					  
							      204 BINARY_ADD						    								  
							      206 LOAD_FAST 1 ( n )					    19 204 LOAD_FAST 6 ( j )					  
							      208 BINARY_MODULO						    206 LOAD_FAST 0 ( A )					  
							      210 STORE_FAST 6 ( j )					    208 LOAD_FAST 6 ( j )					  
							      212 JUMP_ABSOLUTE 164					    210 BINARY_SUBSCR						  
							      >> 214 POP_BLOCK						    212 BINARY_ADD						  
							      >> 216 JUMP_ABSOLUTE 84					    214 LOAD_CONST 2 ( 1 )					  
							      >> 218 POP_BLOCK						    216 BINARY_ADD						  
							      								    218 LOAD_FAST 1 ( n )					  
							      19 >> 220 LOAD_FAST 2 ( cnt )				    220 BINARY_MODULO						  
							      222 RETURN_VALUE NEW_LINE					    222 STORE_FAST 6 ( j )					  
							      								    224 JUMP_ABSOLUTE 176					  
							      								    >> 226 POP_BLOCK						  
							      								    >> 228 JUMP_ABSOLUTE 80					  
							      								    >> 230 POP_BLOCK						  
							      								    								  
							      								    20 >> 232 LOAD_FAST 2 ( cnt )				  
							      								    234 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI			      REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI			    REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI				  REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI
--							      --							    --								  --
def rearrangeArr ( arr , n ) :				      Disassembly of <code object rearrangeArr at 0x7f33e2644930, f Disassembly of <code object rearrangeArr at 0x7f2b01639f60, f script_not_found : None
    evenPos = int ( n / 2 )				      2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  
    oddPos = n - evenPos				      2 LOAD_FAST 1 ( n )					    2 LOAD_FAST 1 ( n )						  
    tempArr = np.empty ( n , dtype = object )		      4 LOAD_CONST 1 ( 2 )					    4 LOAD_CONST 1 ( 2 )					  
    for i in range ( 0 , n ) :				      6 BINARY_TRUE_DIVIDE					    6 BINARY_TRUE_DIVIDE					  
	tempArr [ i ] = arr [ i ]			      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
    tempArr.sort ( )					      10 STORE_FAST 2 ( evenPos )				    10 STORE_FAST 2 ( evenPos )					  
    j = oddPos - 1					      								    								  
    for i in range ( 0 , n , 2 ) :			      3 12 LOAD_FAST 1 ( n )					    3 12 LOAD_FAST 1 ( n )					  
	arr [ i ] = tempArr [ j ]			      14 LOAD_FAST 2 ( evenPos )				    14 LOAD_FAST 2 ( evenPos )					  
	j = j - 1					      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
    j = oddPos						      18 STORE_FAST 3 ( oddPos )				    18 STORE_FAST 3 ( oddPos )					  
    for i in range ( 1 , n , 2 ) :			      								    								  
	arr [ i ] = tempArr [ j ]			      4 20 LOAD_GLOBAL 1 ( np )					    4 20 LOAD_GLOBAL 1 ( np )					  
	j = j + 1					      22 LOAD_ATTR 2 ( empty )					    22 LOAD_ATTR 2 ( empty )					  
    for i in range ( 0 , n ) :				      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
	print ( arr [ i ] , end = ' ' )			      26 LOAD_GLOBAL 3 ( object )				    26 LOAD_GLOBAL 3 ( object )					  
							      28 LOAD_CONST 2 ( ( 'dtype' , ) )				    28 LOAD_CONST 2 ( ( 'dtype' , ) )				  
							      30 CALL_FUNCTION_KW 2					    30 CALL_FUNCTION_KW 2					  
							      32 STORE_FAST 4 ( tempArr )				    32 STORE_FAST 4 ( tempArr )					  
							      								    								  
							      5 34 SETUP_LOOP 30 ( to 66 )				    5 34 SETUP_LOOP 26 ( to 60 )				  
							      36 LOAD_GLOBAL 4 ( range )				    36 LOAD_GLOBAL 4 ( range )					  
							      38 LOAD_CONST 3 ( 0 )					    38 LOAD_CONST 3 ( 0 )					  
							      40 LOAD_FAST 1 ( n )					    40 LOAD_FAST 1 ( n )					  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 16 ( to 64 )				    >> 46 FOR_ITER 12 ( to 58 )					  
							      48 STORE_FAST 5 ( i )					    48 STORE_FAST 5 ( i )					  
							      								    								  
							      6 50 LOAD_FAST 0 ( arr )					    6 50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 5 ( i )					    52 LOAD_FAST 5 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 4 ( tempArr )				    56 LOAD_FAST 4 ( tempArr )					  
							      58 LOAD_FAST 5 ( i )					    58 LOAD_FAST 5 ( i )					  
							      60 STORE_SUBSCR						    60 STORE_SUBSCR						  
							      62 JUMP_ABSOLUTE 46					    62 JUMP_ABSOLUTE 46						  
							      >> 64 POP_BLOCK						    >> 64 POP_BLOCK						  
							      								    								  
							      7 >> 66 LOAD_FAST 4 ( tempArr )				    7 >> 66 LOAD_FAST 4 ( tempArr )				  
							      68 LOAD_METHOD 5 ( sort )					    68 LOAD_METHOD 5 ( sort )					  
							      70 CALL_METHOD 0						    70 CALL_METHOD 0						  
							      72 POP_TOP						    72 POP_TOP							  
							      								    								  
							      8 74 LOAD_FAST 3 ( oddPos )				    8 74 LOAD_FAST 3 ( oddPos )					  
							      76 LOAD_CONST 4 ( 1 )					    76 LOAD_CONST 4 ( 1 )					  
							      78 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      80 STORE_FAST 6 ( j )					    80 STORE_FAST 6 ( j )					  
							      								    								  
							      9 82 SETUP_LOOP 40 ( to 124 )				    9 82 SETUP_LOOP 40 ( to 126 )				  
							      84 LOAD_GLOBAL 4 ( range )				    84 LOAD_GLOBAL 4 ( range )					  
							      86 LOAD_CONST 3 ( 0 )					    86 LOAD_CONST 3 ( 0 )					  
							      88 LOAD_FAST 1 ( n )					    88 LOAD_FAST 1 ( n )					  
							      90 LOAD_CONST 1 ( 2 )					    90 LOAD_CONST 1 ( 2 )					  
							      92 CALL_FUNCTION 3					    92 CALL_FUNCTION 3						  
							      94 GET_ITER						    94 GET_ITER							  
							      >> 96 FOR_ITER 24 ( to 122 )				    >> 96 FOR_ITER 12 ( to 124 )				  
							      98 STORE_FAST 5 ( i )					    98 STORE_FAST 5 ( i )					  
							      								    								  
							      10 100 LOAD_FAST 4 ( tempArr )				    10 100 LOAD_FAST 4 ( tempArr )				  
							      102 LOAD_FAST 6 ( j )					    102 LOAD_FAST 6 ( j )					  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 LOAD_FAST 0 ( arr )					    106 LOAD_FAST 0 ( arr )					  
							      108 LOAD_FAST 5 ( i )					    108 LOAD_FAST 5 ( i )					  
							      110 STORE_SUBSCR						    110 STORE_SUBSCR						  
							      								    								  
							      11 112 LOAD_FAST 6 ( j )					    11 112 LOAD_FAST 6 ( j )					  
							      114 LOAD_CONST 4 ( 1 )					    114 LOAD_CONST 4 ( 1 )					  
							      116 BINARY_SUBTRACT					    116 BINARY_SUBTRACT						  
							      118 STORE_FAST 6 ( j )					    118 STORE_FAST 6 ( j )					  
							      120 JUMP_ABSOLUTE 96					    122 JUMP_ABSOLUTE 96					  
							      >> 122 POP_BLOCK						    >> 124 POP_BLOCK						  
							      								    								  
							      12 >> 124 LOAD_FAST 3 ( oddPos )				    12 >> 126 LOAD_FAST 3 ( oddPos )				  
							      126 STORE_FAST 6 ( j )					    128 STORE_FAST 6 ( j )					  
							      								    								  
							      13 128 SETUP_LOOP 40 ( to 170 )				    13 130 SETUP_LOOP 40 ( to 162 )				  
							      130 LOAD_GLOBAL 4 ( range )				    132 LOAD_GLOBAL 4 ( range )					  
							      132 LOAD_CONST 4 ( 1 )					    134 LOAD_CONST 4 ( 1 )					  
							      134 LOAD_FAST 1 ( n )					    136 LOAD_FAST 1 ( n )					  
							      136 LOAD_CONST 1 ( 2 )					    138 LOAD_CONST 1 ( 2 )					  
							      138 CALL_FUNCTION 3					    140 CALL_FUNCTION 3						  
							      140 GET_ITER						    142 GET_ITER						  
							      >> 142 FOR_ITER 24 ( to 168 )				    >> 144 FOR_ITER 12 ( to 160 )				  
							      144 STORE_FAST 5 ( i )					    146 STORE_FAST 5 ( i )					  
							      								    								  
							      14 146 LOAD_FAST 4 ( tempArr )				    14 148 LOAD_FAST 4 ( tempArr )				  
							      148 LOAD_FAST 6 ( j )					    150 LOAD_FAST 6 ( j )					  
							      150 BINARY_SUBSCR						    152 BINARY_SUBSCR						  
							      152 LOAD_FAST 0 ( arr )					    154 LOAD_FAST 0 ( arr )					  
							      154 LOAD_FAST 5 ( i )					    156 LOAD_FAST 5 ( i )					  
							      156 STORE_SUBSCR						    158 STORE_SUBSCR						  
							      								    								  
							      15 158 LOAD_FAST 6 ( j )					    15 160 LOAD_FAST 6 ( j )					  
							      160 LOAD_CONST 4 ( 1 )					    162 LOAD_CONST 4 ( 1 )					  
							      162 BINARY_ADD						    164 BINARY_ADD						  
							      164 STORE_FAST 6 ( j )					    166 STORE_FAST 6 ( j )					  
							      166 JUMP_ABSOLUTE 142					    168 JUMP_ABSOLUTE 144					  
							      >> 168 POP_BLOCK						    >> 170 POP_BLOCK						  
							      								    								  
							      16 >> 170 SETUP_LOOP 34 ( to 206 )			    16 >> 172 SETUP_LOOP 40 ( to 206 )				  
							      172 LOAD_GLOBAL 4 ( range )				    174 LOAD_GLOBAL 4 ( range )					  
							      174 LOAD_CONST 3 ( 0 )					    176 LOAD_CONST 3 ( 0 )					  
							      176 LOAD_FAST 1 ( n )					    178 LOAD_FAST 1 ( n )					  
							      178 CALL_FUNCTION 2					    180 CALL_FUNCTION 2						  
							      180 GET_ITER						    182 GET_ITER						  
							      >> 182 FOR_ITER 20 ( to 204 )				    >> 184 FOR_ITER 28 ( to 204 )				  
							      184 STORE_FAST 5 ( i )					    186 STORE_FAST 5 ( i )					  
							      								    								  
							      17 186 LOAD_GLOBAL 6 ( print )				    17 188 LOAD_GLOBAL 6 ( print )				  
							      188 LOAD_FAST 0 ( arr )					    190 LOAD_FAST 0 ( arr )					  
							      190 LOAD_FAST 5 ( i )					    192 LOAD_FAST 5 ( i )					  
							      192 BINARY_SUBSCR						    194 BINARY_SUBSCR						  
							      194 LOAD_CONST 5 ( ' ' )					    196 LOAD_CONST 5 ( ' ' )					  
							      196 LOAD_CONST 6 ( ( 'end' , ) )				    198 LOAD_CONST 6 ( ( ( 'end' , ) )				  
							      198 CALL_FUNCTION_KW 2					    200 CALL_FUNCTION_KW 2					  
							      200 POP_TOP						    202 POP_TOP							  
							      202 JUMP_ABSOLUTE 182					    >> 204 LOAD_CONST 0 ( None )				  
							      >> 204 POP_BLOCK						    206 RETURN_VALUE NEW_LINE					  
							      >> 206 LOAD_CONST 0 ( None )				    								  
							      208 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K
--							      --							    --								  --
def minStringValue ( str , k ) :			      Disassembly of <code object minStringValue at 0x7f33e2644f60, Disassembly of <code object minStringValue at 0x7f2b0163dc90, script_not_found : None
    l = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    if ( k >= l ) :					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
	return 0					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    frequency = [ 0 ] * MAX_CHAR			      6 STORE_FAST 2 ( l )					    6 STORE_FAST 2 ( l )					  
    for i in range ( 0 , l ) :				      								    								  
	frequency [ ord ( str [ i ] ) - 97 ] += 1	      3 8 LOAD_FAST 1 ( k )					    3 8 LOAD_FAST 1 ( k )					  
    q = PriorityQueue ( )				      10 LOAD_FAST 2 ( l )					    10 LOAD_FAST 2 ( l )					  
    for i in range ( 0 , MAX_CHAR ) :			      12 COMPARE_OP 5 ( >= )					    12 COMPARE_OP 5 ( >= )					  
	q.put ( - frequency [ i ] )			      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
    while ( k > 0 ) :					      								    								  
	temp = q.get ( )				      4 16 LOAD_CONST 1 ( 0 )					    4 16 LOAD_CONST 1 ( 0 )					  
	temp = temp + 1					      18 RETURN_VALUE						    18 RETURN_VALUE						  
	q.put ( temp , temp )				      								    								  
	k = k - 1					      5 >> 20 LOAD_CONST 1 ( 0 )				    5 >> 20 LOAD_CONST 1 ( 0 )					  
    result = 0 ;					      22 BUILD_LIST 1						    22 BUILD_LIST 1						  
    while not q.empty ( ) :				      24 LOAD_GLOBAL 1 ( MAX_CHAR )				    24 LOAD_GLOBAL 1 ( MAX_CHAR )				  
	temp = q.get ( )				      26 BINARY_MULTIPLY					    26 BINARY_MULTIPLY						  
	temp = temp * ( - 1 )				      28 STORE_FAST 3 ( frequency )				    28 STORE_FAST 3 ( frequency )				  
	result += temp * temp				      								    								  
    return result					      6 30 SETUP_LOOP 46 ( to 78 )				    6 30 SETUP_LOOP 46 ( to 78 )				  
							      32 LOAD_GLOBAL 2 ( range )				    32 LOAD_GLOBAL 2 ( range )					  
							      34 LOAD_CONST 1 ( 0 )					    34 LOAD_CONST 1 ( 0 )					  
							      36 LOAD_FAST 2 ( l )					    36 LOAD_FAST 2 ( l )					  
							      38 CALL_FUNCTION 2					    38 CALL_FUNCTION 2						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 32 ( to 76 )				    >> 42 FOR_ITER 30 ( to 76 )					  
							      44 STORE_FAST 4 ( i )					    44 STORE_FAST 4 ( i )					  
							      								    								  
							      7 46 LOAD_FAST 3 ( frequency )				    7 46 LOAD_FAST 3 ( frequency )				  
							      48 LOAD_GLOBAL 3 ( ord )					    48 LOAD_GLOBAL 3 ( ord )					  
							      50 LOAD_FAST 0 ( str )					    50 LOAD_FAST 0 ( str )					  
							      52 LOAD_FAST 4 ( i )					    52 LOAD_FAST 4 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 CALL_FUNCTION 1					    56 CALL_FUNCTION 1						  
							      58 LOAD_CONST 2 ( 97 )					    58 LOAD_CONST 2 ( 97 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 DUP_TOP_TWO						    62 DUP_TOP_TWO						  
							      64 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      66 LOAD_CONST 3 ( 1 )					    66 LOAD_CONST 3 ( 1 )					  
							      68 INPLACE_ADD						    68 INPLACE_ADD						  
							      70 ROT_THREE						    70 ROT_THREE						  
							      72 STORE_SUBSCR						    72 STORE_SUBSCR						  
							      74 JUMP_ABSOLUTE 42					    74 JUMP_ABSOLUTE 42						  
							      >> 76 POP_BLOCK						    >> 76 POP_BLOCK						  
							      								    								  
							      8 >> 78 LOAD_GLOBAL 4 ( PriorityQueue )			    8 >> 78 LOAD_GLOBAL 4 ( PriorityQueue )			  
							      80 CALL_FUNCTION 0					    80 CALL_FUNCTION 0						  
							      82 STORE_FAST 5 ( q )					    82 STORE_FAST 5 ( q )					  
							      								    								  
							      9 84 SETUP_LOOP 34 ( to 120 )				    9 84 SETUP_LOOP 28 ( to 106 )				  
							      86 LOAD_GLOBAL 2 ( range )				    86 LOAD_GLOBAL 2 ( range )					  
							      88 LOAD_CONST 1 ( 0 )					    88 LOAD_CONST 1 ( 0 )					  
							      90 LOAD_GLOBAL 1 ( MAX_CHAR )				    90 LOAD_GLOBAL 1 ( MAX_CHAR )				  
							      92 CALL_FUNCTION 2					    92 CALL_FUNCTION 2						  
							      94 GET_ITER						    94 GET_ITER							  
							      >> 96 FOR_ITER 20 ( to 118 )				    >> 96 FOR_ITER 18 ( to 104 )				  
							      98 STORE_FAST 4 ( i )					    98 STORE_FAST 4 ( i )					  
							      								    								  
							      10 100 LOAD_FAST 5 ( q )					    10 100 LOAD_FAST 5 ( q )					  
							      102 LOAD_METHOD 5 ( put )					    102 LOAD_METHOD 5 ( put )					  
							      104 LOAD_FAST 3 ( frequency )				    104 LOAD_FAST 3 ( frequency )				  
							      106 LOAD_FAST 4 ( i )					    106 LOAD_FAST 4 ( i )					  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 UNARY_NEGATIVE					    110 UNARY_NEGATIVE						  
							      112 CALL_METHOD 1						    112 CALL_METHOD 1						  
							      114 POP_TOP						    114 POP_TOP							  
							      116 JUMP_ABSOLUTE 96					    116 JUMP_ABSOLUTE 96					  
							      >> 118 POP_BLOCK						    >> 118 POP_BLOCK						  
							      								    								  
							      11 >> 120 SETUP_LOOP 48 ( to 170 )			    11 >> 120 SETUP_LOOP 46 ( to 162 )				  
							      >> 122 LOAD_FAST 1 ( k )					    >> 122 LOAD_FAST 1 ( k )					  
							      124 LOAD_CONST 1 ( 0 )					    124 LOAD_CONST 1 ( 0 )					  
							      126 COMPARE_OP 4 ( > )					    126 COMPARE_OP 4 ( > )					  
							      128 POP_JUMP_IF_FALSE 168					    128 POP_JUMP_IF_FALSE 160					  
							      								    								  
							      12 130 LOAD_FAST 5 ( q )					    12 130 LOAD_FAST 5 ( q )					  
							      132 LOAD_METHOD 6 ( get )					    132 LOAD_METHOD 6 ( get )					  
							      134 CALL_METHOD 0						    134 CALL_METHOD 0						  
							      136 STORE_FAST 6 ( temp )					    136 STORE_FAST 6 ( temp )					  
							      								    								  
							      13 138 LOAD_FAST 6 ( temp )				    13 138 LOAD_FAST 6 ( temp )					  
							      140 LOAD_CONST 3 ( 1 )					    140 LOAD_CONST 3 ( 1 )					  
							      142 BINARY_ADD						    142 BINARY_ADD						  
							      144 STORE_FAST 6 ( temp )					    144 STORE_FAST 6 ( temp )					  
							      								    								  
							      14 146 LOAD_FAST 5 ( q )					    14 146 LOAD_FAST 5 ( q )					  
							      148 LOAD_METHOD 5 ( put )					    148 LOAD_METHOD 5 ( put )					  
							      150 LOAD_FAST 6 ( temp )					    150 LOAD_FAST 6 ( temp )					  
							      152 LOAD_FAST 6 ( temp )					    152 LOAD_FAST 6 ( temp )					  
							      154 CALL_METHOD 2						    154 CALL_METHOD 2						  
							      156 POP_TOP						    156 POP_TOP							  
							      								    								  
							      15 158 LOAD_FAST 1 ( k )					    15 158 LOAD_FAST 1 ( k )					  
							      160 LOAD_CONST 3 ( 1 )					    160 LOAD_CONST 3 ( 1 )					  
							      162 BINARY_SUBTRACT					    162 BINARY_SUBTRACT						  
							      164 STORE_FAST 1 ( k )					    164 STORE_FAST 1 ( k )					  
							      166 JUMP_ABSOLUTE 122					    166 JUMP_ABSOLUTE 122					  
							      >> 168 POP_BLOCK						    >> 168 POP_BLOCK						  
							      								    								  
							      16 >> 170 LOAD_CONST 1 ( 0 )				    16 >> 170 LOAD_CONST 1 ( 0 )				  
							      172 STORE_FAST 7 ( result )				    172 STORE_FAST 7 ( result )					  
							      								    								  
							      17 174 SETUP_LOOP 40 ( to 216 )				    17 174 SETUP_LOOP 46 ( to 206 )				  
							      >> 176 LOAD_FAST 5 ( q )					    >> 176 LOAD_FAST 5 ( q )					  
							      178 LOAD_METHOD 7 ( empty )				    178 LOAD_METHOD 7 ( empty )					  
							      180 CALL_METHOD 0						    180 CALL_METHOD 0						  
							      182 POP_JUMP_IF_TRUE 214					    182 POP_JUMP_IF_TRUE 204					  
							      								    								  
							      18 184 LOAD_FAST 5 ( q )					    18 184 LOAD_FAST 5 ( q )					  
							      186 LOAD_METHOD 6 ( get )					    186 LOAD_METHOD 6 ( get )					  
							      188 CALL_METHOD 0						    188 CALL_METHOD 0						  
							      190 STORE_FAST 6 ( temp )					    190 STORE_FAST 6 ( temp )					  
							      								    								  
							      19 192 LOAD_FAST 6 ( temp )				    19 192 LOAD_FAST 6 ( temp )					  
							      194 LOAD_CONST 4 ( - 1 )					    194 LOAD_CONST 4 ( - 1 )					  
							      196 BINARY_MULTIPLY					    196 BINARY_MULTIPLY						  
							      198 STORE_FAST 6 ( temp )					    198 STORE_FAST 6 ( temp )					  
							      								    								  
							      20 200 LOAD_FAST 7 ( result )				    20 200 LOAD_FAST 7 ( result )				  
							      202 LOAD_FAST 6 ( temp )					    202 LOAD_FAST 6 ( temp )					  
							      204 LOAD_FAST 6 ( temp )					    204 BINARY_MULTIPLY						  
							      206 BINARY_MULTIPLY					    206 INPLACE_ADD						  
							      208 INPLACE_ADD						    208 STORE_FAST 7 ( result )					  
							      210 STORE_FAST 7 ( result )				    210 JUMP_ABSOLUTE 176					  
							      212 JUMP_ABSOLUTE 176					    >> 212 POP_BLOCK						  
							      >> 214 POP_BLOCK						    								  
							      								    21 >> 214 LOAD_FAST 7 ( result )				  
							      21 >> 216 LOAD_FAST 7 ( result )				    216 RETURN_VALUE NEW_LINE					  
							      218 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			      SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			    SUM_AREA_RECTANGLES_POSSIBLE_ARRAY				  SUM_AREA_RECTANGLES_POSSIBLE_ARRAY
--							      --							    --								  --
def MaxTotalRectangleArea ( a , n ) :			      Disassembly of <code object MaxTotalRectangleArea at 0x7f33e2 Disassembly of <code object MaxTotalRectangleArea at 0x7f2b01 script_not_found : None
    a.sort ( reverse = True )				      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    sum = 0						      2 LOAD_ATTR 0 ( sort )					    2 LOAD_ATTR 0 ( sort )					  
    flag = False					      4 LOAD_CONST 1 ( True )					    4 LOAD_CONST 1 ( True )					  
    len = 0						      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 LOAD_CONST 2 ( ( 'reverse' , ) )				  
    i = 0						      8 CALL_FUNCTION_KW 1					    8 CALL_FUNCTION_KW 1					  
    while ( i < n - 1 ) :				      10 POP_TOP						    10 POP_TOP							  
	if ( i != 0 ) :					      								    								  
	    i = i + 1					      3 12 LOAD_CONST 3 ( 0 )					    3 12 LOAD_CONST 3 ( 0 )					  
	if ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i + 1  14 STORE_FAST 2 ( sum )					    14 STORE_FAST 2 ( sum )					  
	    flag = True					      								    								  
	    len = a [ i + 1 ]				      4 16 LOAD_CONST 4 ( False )				    4 16 LOAD_CONST 4 ( False )					  
	    i = i + 1					      18 STORE_FAST 3 ( flag )					    18 STORE_FAST 3 ( flag )					  
	elif ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i +  								    								  
	    sum = sum + a [ i + 1 ] * len		      5 20 LOAD_CONST 3 ( 0 )					    5 20 LOAD_CONST 3 ( 0 )					  
	    flag = False				      22 STORE_FAST 4 ( len )					    22 STORE_FAST 4 ( len )					  
	    i = i + 1					      								    								  
    return sum						      6 24 LOAD_CONST 3 ( 0 )					    6 24 LOAD_CONST 3 ( 0 )					  
							      26 STORE_FAST 5 ( i )					    26 STORE_FAST 5 ( i )					  
							      								    								  
							      7 28 SETUP_LOOP 194 ( to 224 )				    7 28 SETUP_LOOP 140 ( to 180 )				  
							      >> 30 LOAD_FAST 5 ( i )					    >> 30 LOAD_FAST 5 ( i )					  
							      32 LOAD_FAST 1 ( n )					    32 LOAD_FAST 2 ( n )					  
							      34 LOAD_CONST 5 ( 1 )					    34 LOAD_CONST 5 ( 1 )					  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBTRACT						  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 0 ( < )					  
							      40 POP_JUMP_IF_FALSE 222					    40 POP_JUMP_IF_FALSE 178					  
							      								    								  
							      8 42 LOAD_FAST 5 ( i )					    8 42 LOAD_FAST 5 ( i )					  
							      44 LOAD_CONST 3 ( 0 )					    44 LOAD_CONST 5 ( 1 )					  
							      46 COMPARE_OP 3 ( != )					    46 BINARY_ADD						  
							      48 POP_JUMP_IF_FALSE 58					    48 STORE_FAST 5 ( i )					  
							      								    50 JUMP_ABSOLUTE 30						  
							      9 50 LOAD_FAST 5 ( i )					    52 POP_BLOCK						  
							      52 LOAD_CONST 5 ( 1 )					    								  
							      54 BINARY_ADD						    9 >> 54 LOAD_FAST 0 ( a )					  
							      56 STORE_FAST 5 ( i )					    56 LOAD_FAST 5 ( i )					  
							      								    58 BINARY_SUBSCR						  
							      10 >> 58 LOAD_FAST 0 ( a )				    60 LOAD_FAST 0 ( a )					  
							      60 LOAD_FAST 5 ( i )					    62 LOAD_FAST 5 ( i )					  
							      62 BINARY_SUBSCR						    64 LOAD_CONST 5 ( 1 )					  
							      64 LOAD_FAST 0 ( a )					    66 BINARY_ADD						  
							      66 LOAD_FAST 5 ( i )					    68 BINARY_SUBSCR						  
							      68 LOAD_CONST 5 ( 1 )					    70 COMPARE_OP 2 ( == )					  
							      70 BINARY_ADD						    72 POP_JUMP_IF_TRUE 116					  
							      72 BINARY_SUBSCR						    74 LOAD_FAST 0 ( a )					  
							      74 COMPARE_OP 2 ( == )					    76 LOAD_FAST 5 ( i )					  
							      76 POP_JUMP_IF_TRUE 102					    78 BINARY_SUBSCR						  
							      78 LOAD_FAST 0 ( a )					    80 LOAD_FAST 0 ( a )					  
							      80 LOAD_FAST 5 ( i )					    82 LOAD_FAST 5 ( i )					  
							      82 BINARY_SUBSCR						    84 LOAD_CONST 5 ( 1 )					  
							      84 LOAD_FAST 0 ( a )					    86 BINARY_ADD						  
							      86 LOAD_FAST 5 ( i )					    88 BINARY_SUBSCR						  
							      88 LOAD_CONST 5 ( 1 )					    90 BINARY_SUBTRACT						  
							      90 BINARY_ADD						    92 LOAD_CONST 5 ( 1 )					  
							      92 BINARY_SUBSCR						    94 COMPARE_OP 2 ( == )					  
							      94 BINARY_SUBTRACT					    96 POP_JUMP_IF_FALSE 146					  
							      96 LOAD_CONST 5 ( 1 )					    98 LOAD_FAST 3 ( flag )					  
							      98 COMPARE_OP 2 ( == )					    100 LOAD_CONST 4 ( False )					  
							      100 POP_JUMP_IF_FALSE 136					    102 COMPARE_OP 2 ( == )					  
							      >> 102 LOAD_FAST 3 ( flag )				    104 POP_JUMP_IF_FALSE 146					  
							      104 LOAD_CONST 4 ( False )				    								  
							      106 COMPARE_OP 2 ( == )					    10 106 LOAD_CONST 1 ( True )				  
							      108 POP_JUMP_IF_FALSE 136					    108 STORE_FAST 3 ( flag )					  
							      								    								  
							      11 110 LOAD_CONST 1 ( True )				    11 110 LOAD_FAST 0 ( a )					  
							      112 STORE_FAST 3 ( flag )					    112 LOAD_FAST 5 ( i )					  
							      								    114 LOAD_CONST 5 ( 1 )					  
							      12 114 LOAD_FAST 0 ( a )					    116 BINARY_ADD						  
							      116 LOAD_FAST 5 ( i )					    118 BINARY_SUBSCR						  
							      118 LOAD_CONST 5 ( 1 )					    120 STORE_FAST 4 ( len )					  
							      120 BINARY_ADD						    								  
							      122 BINARY_SUBSCR						    12 122 LOAD_FAST 0 ( a )					  
							      124 STORE_FAST 4 ( len )					    124 LOAD_FAST 5 ( i )					  
							      								    126 LOAD_CONST 5 ( 1 )					  
							      13 126 LOAD_FAST 5 ( i )					    128 BINARY_ADD						  
							      128 LOAD_CONST 5 ( 1 )					    130 BINARY_SUBSCR						  
							      130 BINARY_ADD						    132 STORE_FAST 4 ( len )					  
							      132 STORE_FAST 5 ( i )					    								  
							      134 JUMP_ABSOLUTE 30					    13 134 LOAD_FAST 5 ( i )					  
							      								    136 LOAD_CONST 5 ( 1 )					  
							      14 >> 136 LOAD_FAST 0 ( a )				    138 BINARY_ADD						  
							      138 LOAD_FAST 5 ( i )					    140 STORE_FAST 5 ( i )					  
							      140 BINARY_SUBSCR						    142 JUMP_FORWARD 52 ( to 194 )				  
							      142 LOAD_FAST 0 ( a )					    								  
							      144 LOAD_FAST 5 ( i )					    14 >> 144 LOAD_FAST 0 ( a )					  
							      146 LOAD_CONST 5 ( 1 )					    146 LOAD_FAST 5 ( i )					  
							      148 BINARY_ADD						    148 BINARY_SUBSCR						  
							      150 BINARY_SUBSCR						    150 LOAD_FAST 0 ( a )					  
							      152 COMPARE_OP 2 ( == )					    152 LOAD_FAST 5 ( i )					  
							      154 POP_JUMP_IF_TRUE 180					    154 LOAD_CONST 5 ( 1 )					  
							      156 LOAD_FAST 0 ( a )					    156 BINARY_ADD						  
							      158 LOAD_FAST 5 ( i )					    158 BINARY_SUBSCR						  
							      160 BINARY_SUBSCR						    160 COMPARE_OP 2 ( == )					  
							      162 LOAD_FAST 0 ( a )					    162 POP_JUMP_IF_TRUE 162					  
							      164 LOAD_FAST 5 ( i )					    164 LOAD_FAST 0 ( a )					  
							      166 LOAD_CONST 5 ( 1 )					    166 LOAD_FAST 5 ( i )					  
							      168 BINARY_ADD						    168 BINARY_SUBSCR						  
							      170 BINARY_SUBSCR						    170 LOAD_FAST 0 ( a )					  
							      172 BINARY_SUBTRACT					    172 LOAD_FAST 5 ( i )					  
							      174 LOAD_CONST 5 ( 1 )					    174 LOAD_CONST 5 ( 1 )					  
							      176 COMPARE_OP 2 ( == )					    176 BINARY_ADD						  
							      178 POP_JUMP_IF_FALSE 30					    178 BINARY_SUBSCR						  
							      >> 180 LOAD_FAST 3 ( flag )				    180 BINARY_SUBTRACT						  
							      182 LOAD_CONST 1 ( True )					    182 LOAD_CONST 5 ( 1 )					  
							      184 COMPARE_OP 2 ( == )					    184 COMPARE_OP 2 ( == )					  
							      186 POP_JUMP_IF_FALSE 30					    186 POP_JUMP_IF_FALSE 194					  
							      								    								  
							      15 188 LOAD_FAST 2 ( sum )				    15 >> 188 LOAD_FAST 2 ( sum )				  
							      190 LOAD_FAST 0 ( a )					    190 LOAD_FAST 0 ( a )					  
							      192 LOAD_FAST 5 ( i )					    192 LOAD_FAST 5 ( i )					  
							      194 LOAD_CONST 5 ( 1 )					    194 LOAD_CONST 5 ( 1 )					  
							      196 BINARY_ADD						    196 BINARY_ADD						  
							      198 BINARY_SUBSCR						    198 BINARY_SUBSCR						  
							      200 LOAD_FAST 4 ( len )					    200 LOAD_FAST 4 ( len )					  
							      202 BINARY_MULTIPLY					    202 BINARY_MULTIPLY						  
							      204 BINARY_ADD						    204 BINARY_ADD						  
							      206 STORE_FAST 2 ( sum )					    206 STORE_FAST 2 ( sum )					  
							      								    								  
							      16 208 LOAD_CONST 4 ( False )				    16 208 LOAD_CONST 4 ( False )				  
							      210 STORE_FAST 3 ( flag )					    210 STORE_FAST 3 ( flag )					  
							      								    								  
							      17 212 LOAD_FAST 5 ( i )					    17 212 LOAD_FAST 5 ( i )					  
							      214 LOAD_CONST 5 ( 1 )					    214 LOAD_CONST 5 ( 1 )					  
							      216 BINARY_ADD						    216 BINARY_ADD						  
							      218 STORE_FAST 5 ( i )					    218 STORE_FAST 5 ( i )					  
							      220 JUMP_ABSOLUTE 30					    								  
							      >> 222 POP_BLOCK						    18 >> 220 LOAD_FAST 2 ( sum )				  
							      								    222 RETURN_VALUE NEW_LINE					  
							      18 >> 224 LOAD_FAST 2 ( sum )				    								  
							      226 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			      K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			    K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			  K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
def kthLargestSum ( arr , n , k ) :			      Disassembly of <code object kthLargestSum at 0x7f33e2653f60,  Disassembly of <code object kthLargestSum at 0x7f2b0163dc90,  error : /bin/bash: line 1:  5158 Segmentation faul
    sum = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    sum.append ( 0 )					      2 STORE_FAST 3 ( sum )					    2 STORE_FAST 3 ( sum )					  ataset/bin/python XLM/dis_script.py --script_path
    sum.append ( arr [ 0 ] )				      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( 2 , n + 1 ) :			      3 4 LOAD_FAST 3 ( sum )					    3 4 LOAD_FAST 3 ( sum )					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/K_TH_L
	sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )	      6 LOAD_METHOD 0 ( append )				    6 LOAD_METHOD 0 ( append )					  ARGEST_SUM_CONTIGUOUS_SUBARRAY.dis
    Q = [ ]						      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 0 )					  
    heapq.heapify ( Q )					      10 CALL_METHOD 1						    10 CALL_METHOD 1						  
    for i in range ( 1 , n + 1 ) :			      12 POP_TOP						    12 POP_TOP							  
	for j in range ( i , n + 1 ) :			      								    								  
	    x = sum [ j ] - sum [ i - 1 ]		      4 14 LOAD_FAST 3 ( sum )					    4 14 LOAD_FAST 3 ( sum )					  
	    if len ( Q ) < k :				      16 LOAD_METHOD 0 ( append )				    16 LOAD_METHOD 0 ( append )					  
		heapq.heappush ( Q , x )		      18 LOAD_FAST 0 ( arr )					    18 LOAD_FAST 0 ( arr )					  
	    else :					      20 LOAD_CONST 1 ( 0 )					    20 LOAD_CONST 1 ( 0 )					  
		if Q [ 0 ] < x :			      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
		    heapq.heappop ( Q )			      24 CALL_METHOD 1						    24 CALL_METHOD 1						  
		    heapq.heappush ( Q , x )		      26 POP_TOP						    26 POP_TOP							  
    return Q [ 0 ]					      								    								  
							      5 28 SETUP_LOOP 52 ( to 82 )				    5 28 SETUP_LOOP 46 ( to 78 )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_GLOBAL 1 ( range )					  
							      32 LOAD_CONST 2 ( 2 )					    32 LOAD_CONST 2 ( 2 )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 LOAD_CONST 3 ( 1 )					    36 LOAD_CONST 3 ( 1 )					  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 CALL_FUNCTION 2					    40 CALL_FUNCTION 2						  
							      42 GET_ITER						    42 GET_ITER							  
							      >> 44 FOR_ITER 34 ( to 80 )				    >> 44 FOR_ITER 30 ( to 76 )					  
							      46 STORE_FAST 4 ( i )					    46 STORE_FAST 4 ( i )					  
							      								    								  
							      6 48 LOAD_FAST 3 ( sum )					    6 48 LOAD_FAST 3 ( sum )					  
							      50 LOAD_METHOD 0 ( append )				    50 LOAD_METHOD 0 ( append )					  
							      52 LOAD_FAST 3 ( sum )					    52 LOAD_FAST 3 ( sum )					  
							      54 LOAD_FAST 4 ( i )					    54 LOAD_FAST 4 ( i )					  
							      56 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 3 ( 1 )					  
							      58 BINARY_SUBTRACT					    58 BINARY_SUBTRACT						  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 0 ( arr )					  
							      64 LOAD_FAST 4 ( i )					    64 LOAD_FAST 4 ( i )					  
							      66 LOAD_CONST 3 ( 1 )					    66 LOAD_CONST 3 ( 1 )					  
							      68 BINARY_SUBTRACT					    68 BINARY_SUBTRACT						  
							      70 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      72 BINARY_ADD						    72 BINARY_ADD						  
							      74 CALL_METHOD 1						    74 CALL_METHOD 1						  
							      76 POP_TOP						    >> 76 POP_TOP						  
							      78 JUMP_ABSOLUTE 44					    78 JUMP_ABSOLUTE 44						  
							      >> 80 POP_BLOCK						    >> 80 POP_BLOCK						  
							      								    								  
							      7 >> 82 BUILD_LIST 0					    7 >> 82 BUILD_LIST 0					  
							      84 STORE_FAST 5 ( Q )					    84 STORE_FAST 5 ( Q )					  
							      								    								  
							      8 86 LOAD_GLOBAL 2 ( heapq )				    8 86 LOAD_GLOBAL 2 ( heapq )				  
							      88 LOAD_METHOD 3 ( heapify )				    88 LOAD_METHOD 3 ( heapify )				  
							      90 LOAD_FAST 5 ( Q )					    90 LOAD_FAST 5 ( Q )					  
							      92 CALL_METHOD 1						    92 CALL_METHOD 1						  
							      94 POP_TOP						    94 POP_TOP							  
							      								    								  
							      9 96 SETUP_LOOP 126 ( to 224 )				    9 96 SETUP_LOOP 90 ( to 234 )				  
							      98 LOAD_GLOBAL 1 ( range )				    98 LOAD_GLOBAL 1 ( range )					  
							      100 LOAD_CONST 3 ( 1 )					    100 LOAD_CONST 3 ( 1 )					  
							      102 LOAD_FAST 1 ( n )					    102 LOAD_FAST 1 ( n )					  
							      104 LOAD_CONST 3 ( 1 )					    104 LOAD_CONST 3 ( 1 )					  
							      106 BINARY_ADD						    106 BINARY_ADD						  
							      108 CALL_FUNCTION 2					    108 CALL_FUNCTION 2						  
							      110 GET_ITER						    110 GET_ITER						  
							      >> 112 FOR_ITER 108 ( to 222 )				    >> 112 FOR_ITER 78 ( to 232 )				  
							      114 STORE_FAST 4 ( i )					    114 STORE_FAST 4 ( i )					  
							      								    								  
							      10 116 SETUP_LOOP 102 ( to 220 )				    10 116 SETUP_LOOP 78 ( to 230 )				  
							      118 LOAD_GLOBAL 1 ( range )				    118 LOAD_GLOBAL 1 ( range )					  
							      120 LOAD_FAST 4 ( i )					    120 LOAD_FAST 4 ( i )					  
							      122 LOAD_FAST 1 ( n )					    122 LOAD_FAST 1 ( n )					  
							      124 LOAD_CONST 3 ( 1 )					    124 LOAD_CONST 3 ( 1 )					  
							      126 BINARY_ADD						    126 BINARY_ADD						  
							      128 CALL_FUNCTION 2					    128 CALL_FUNCTION 2						  
							      130 GET_ITER						    130 GET_ITER						  
							      >> 132 FOR_ITER 84 ( to 218 )				    >> 132 FOR_ITER 58 ( to 228 )				  
							      134 STORE_FAST 6 ( j )					    134 STORE_FAST 6 ( j )					  
							      								    								  
							      11 136 LOAD_FAST 3 ( sum )				    11 136 LOAD_FAST 3 ( sum )					  
							      138 LOAD_FAST 6 ( j )					    138 LOAD_FAST 6 ( j )					  
							      140 BINARY_SUBSCR						    140 BINARY_SUBSCR						  
							      142 LOAD_FAST 3 ( sum )					    142 LOAD_FAST 3 ( sum )					  
							      144 LOAD_FAST 4 ( i )					    144 LOAD_FAST 4 ( i )					  
							      146 LOAD_CONST 3 ( 1 )					    146 LOAD_CONST 3 ( 1 )					  
							      148 BINARY_SUBTRACT					    148 BINARY_SUBTRACT						  
							      150 BINARY_SUBSCR						    150 BINARY_SUBSCR						  
							      152 BINARY_SUBTRACT					    152 BINARY_SUBTRACT						  
							      154 STORE_FAST 7 ( x )					    154 STORE_FAST 7 ( x )					  
							      								    								  
							      12 156 LOAD_GLOBAL 4 ( len )				    12 156 LOAD_GLOBAL 4 ( len )				  
							      158 LOAD_FAST 5 ( Q )					    158 LOAD_FAST 5 ( Q )					  
							      160 CALL_FUNCTION 1					    160 CALL_FUNCTION 1						  
							      162 LOAD_FAST 2 ( k )					    162 LOAD_FAST 2 ( k )					  
							      164 COMPARE_OP 0 ( < )					    164 COMPARE_OP 0 ( < )					  
							      166 POP_JUMP_IF_FALSE 182					    166 POP_JUMP_IF_FALSE 174					  
							      								    								  
							      13 168 LOAD_GLOBAL 2 ( heapq )				    13 168 LOAD_GLOBAL 2 ( heapq )				  
							      170 LOAD_METHOD 5 ( heappush )				    170 LOAD_METHOD 5 ( heapp)					  
							      172 LOAD_FAST 5 ( Q )					    172 LOAD_FAST 5 ( Q )					  
							      174 LOAD_FAST 7 ( x )					    174 LOAD_FAST 7 ( x )					  
							      176 CALL_METHOD 2						    176 CALL_METHOD 2						  
							      178 POP_TOP						    178 POP_TOP							  
							      180 JUMP_ABSOLUTE 132					    180 JUMP_ABSOLUTE 132					  
							      								    								  
							      15 >> 182 LOAD_FAST 5 ( Q )				    15 >> 182 LOAD_FAST 5 ( Q )					  
							      184 LOAD_CONST 1 ( 0 )					    184 LOAD_CONST 1 ( 0 )					  
							      186 BINARY_SUBSCR						    186 BINARY_SUBSCR						  
							      188 LOAD_FAST 7 ( x )					    188 LOAD_FAST 7 ( x )					  
							      190 COMPARE_OP 0 ( < )					    190 COMPARE_OP 0 ( < )					  
							      192 POP_JUMP_IF_FALSE 132					    192 POP_JUMP_IF_FALSE 194					  
							      								    								  
							      16 194 LOAD_GLOBAL 2 ( heapq )				    16 194 LOAD_GLOBAL 2 ( heapq )				  
							      196 LOAD_METHOD 6 ( heappop )				    196 LOAD_METHOD 3 ( heappop )				  
							      198 LOAD_FAST 5 ( Q )					    198 LOAD_FAST 5 ( Q )					  
							      200 CALL_METHOD 1						    200 CALL_METHOD 1						  
							      202 POP_TOP						    202 POP_TOP							  
							      								    								  
							      17 204 LOAD_GLOBAL 2 ( heapq )				    17 204 LOAD_GLOBAL 2 ( heapq )				  
							      206 LOAD_METHOD 5 ( heappush )				    206 LOAD_METHOD 5 ( heapp)					  
							      208 LOAD_FAST 5 ( Q )					    208 LOAD_FAST 5 ( Q )					  
							      210 LOAD_FAST 7 ( x )					    210 LOAD_FAST 7 ( x )					  
							      212 CALL_METHOD 2						    212 CALL_METHOD 2						  
							      214 POP_TOP						    214 POP_TOP							  
							      216 JUMP_ABSOLUTE 132					    216 JUMP_ABSOLUTE 132					  
							      >> 218 POP_BLOCK						    >> 218 POP_BLOCK						  
							      >> 220 JUMP_ABSOLUTE 112					    >> 220 JUMP_ABSOLUTE 112					  
							      >> 222 POP_BLOCK						    >> 222 POP_BLOCK						  
							      								    								  
							      18 >> 224 LOAD_FAST 5 ( Q )				    18 >> 224 LOAD_FAST 5 ( Q )					  
							      226 LOAD_CONST 1 ( 0 )					    226 LOAD_CONST 1 ( 0 )					  
							      228 BINARY_SUBSCR						    228 BINARY_SUBSCR						  
							      230 RETURN_VALUE NEW_LINE					    230 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS		      MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS		    MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS		  MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS
--							      --							    --								  --
def subsetDifference ( n ) :				      Disassembly of <code object subsetDifference at 0x7f33e2653ed Disassembly of <code object subsetDifference at 0x7f2b0163dc9 script_not_found : None
    s = int ( n * ( n + 1 ) / 2 )			      2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  
    if n % 4 == 0 :					      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
	print ( "First subset sum = " , int ( s / 2 ) )	      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
	print ( "Second subset sum = " , int ( s / 2 ) )      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	print ( "Difference = " , 0 )			      8 BINARY_ADD						    8 BINARY_ADD						  
    else :						      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
	if n % 4 == 1 or n % 4 == 2 :			      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 2 ( 2 )					  
	    print ( "First subset sum = " , int ( s / 2 ) )   14 BINARY_TRUE_DIVIDE					    14 BINARY_TRUE_DIVIDE					  
	    print ( "Second subset sum = " , int ( s / 2 ) +  16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
	    print ( "Difference = " , 1 )		      18 STORE_FAST 1 ( s )					    18 STORE_FAST 1 ( s )					  
	else :						      								    								  
	    print ( "First subset sum = " , int ( s / 2 ) )   3 20 LOAD_FAST 0 ( n )					    3 20 LOAD_FAST 0 ( n )					  
	    print ( "Second subset sum = " , int ( s / 2 ) )  22 LOAD_CONST 3 ( 4 )					    22 LOAD_CONST 3 ( 4 )					  
	    print ( "Difference = " , 0 )		      24 BINARY_MODULO						    24 BINARY_MODULO						  
							      26 LOAD_CONST 4 ( 0 )					    26 LOAD_CONST 4 ( 0 )					  
							      28 COMPARE_OP 2 ( == )					    28 COMPARE_OP 2 ( == )					  
							      30 POP_JUMP_IF_FALSE 80					    30 POP_JUMP_IF_FALSE 62					  
							      								    								  
							      4 32 LOAD_GLOBAL 1 ( print )				    4 32 LOAD_GLOBAL 1 ( print )				  
							      34 LOAD_CONST 5 ( 'First subset sum = ' )			    34 LOAD_CONST 5 ( 'First subset sum = ' )			  
							      36 LOAD_GLOBAL 0 ( int )					    36 LOAD_GLOBAL 0 ( int )					  
							      38 LOAD_FAST 1 ( s )					    38 LOAD_FAST 1 ( s )					  
							      40 LOAD_CONST 2 ( 2 )					    40 LOAD_CONST 2 ( 2 )					  
							      42 BINARY_TRUE_DIVIDE					    42 BINARY_TRUE_DIVIDE					  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 CALL_FUNCTION 2					    46 CALL_FUNCTION 2						  
							      48 POP_TOP						    48 POP_TOP							  
							      								    								  
							      5 50 LOAD_GLOBAL 1 ( print )				    5 50 LOAD_GLOBAL 1 ( print )				  
							      52 LOAD_CONST 6 ( 'Second subset sum = ' )		    52 LOAD_CONST 6 ( 'Second subset sum = ' )			  
							      54 LOAD_GLOBAL 0 ( int )					    54 LOAD_GLOBAL 0 ( int )					  
							      56 LOAD_FAST 1 ( s )					    56 LOAD_FAST 1 ( s )					  
							      58 LOAD_CONST 2 ( 2 )					    58 LOAD_CONST 2 ( 2 )					  
							      60 BINARY_TRUE_DIVIDE					    60 BINARY_TRUE_DIVIDE					  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 CALL_FUNCTION 2					    64 CALL_FUNCTION 2						  
							      66 POP_TOP						    66 POP_TOP							  
							      								    								  
							      6 68 LOAD_GLOBAL 1 ( print )				    6 68 LOAD_GLOBAL 1 ( print )				  
							      70 LOAD_CONST 7 ( 'Difference = ' )			    70 LOAD_CONST 7 ( 'Difference = ' )				  
							      72 LOAD_CONST 4 ( 0 )					    72 LOAD_CONST 4 ( 0 )					  
							      74 CALL_FUNCTION 2					    74 CALL_FUNCTION 2						  
							      76 POP_TOP						    76 POP_TOP							  
							      78 JUMP_FORWARD 122 ( to 202 )				    78 JUMP_FORWARD 74 ( to 124 )				  
							      								    								  
							      8 >> 80 LOAD_FAST 0 ( n )					    8 >> 80 LOAD_FAST 0 ( n )					  
							      82 LOAD_CONST 3 ( 4 )					    82 LOAD_CONST 3 ( 4 )					  
							      84 BINARY_MODULO						    84 BINARY_MODULO						  
							      86 LOAD_CONST 1 ( 1 )					    86 LOAD_CONST 1 ( 1 )					  
							      88 COMPARE_OP 2 ( == )					    88 COMPARE_OP 2 ( == )					  
							      90 POP_JUMP_IF_TRUE 104					    90 POP_JUMP_IF_TRUE 104					  
							      92 LOAD_FAST 0 ( n )					    92 LOAD_FAST 0 ( n )					  
							      94 LOAD_CONST 3 ( 4 )					    94 LOAD_CONST 3 ( 4 )					  
							      96 BINARY_MODULO						    96 BINARY_MODULO						  
							      98 LOAD_CONST 2 ( 2 )					    98 LOAD_CONST 2 ( 2 )					  
							      100 COMPARE_OP 2 ( == )					    100 COMPARE_OP 2 ( == )					  
							      102 POP_JUMP_IF_FALSE 156					    102 POP_JUMP_IF_FALSE 124					  
							      								    								  
							      9 >> 104 LOAD_GLOBAL 1 ( print )				    9 >> 104 LOAD_GLOBAL 1 ( print )				  
							      106 LOAD_CONST 5 ( 'First subset sum = ' )		    106 LOAD_CONST 5 ( 'First subset sum = ' )			  
							      108 LOAD_GLOBAL 0 ( int )					    108 LOAD_GLOBAL 0 ( int )					  
							      110 LOAD_FAST 1 ( s )					    110 LOAD_FAST 1 ( s )					  
							      112 LOAD_CONST 2 ( 2 )					    112 LOAD_CONST 2 ( 2 )					  
							      114 BINARY_TRUE_DIVIDE					    114 BINARY_TRUE_DIVIDE					  
							      116 CALL_FUNCTION 1					    116 CALL_FUNCTION 1						  
							      118 CALL_FUNCTION 2					    118 CALL_FUNCTION 2						  
							      120 POP_TOP						    120 POP_TOP							  
							      								    								  
							      10 122 LOAD_GLOBAL 1 ( print )				    10 122 LOAD_GLOBAL 1 ( print )				  
							      124 LOAD_CONST 6 ( 'Second subset sum = ' )		    124 LOAD_CONST 8 ( 'Second subset sum = ' )			  
							      126 LOAD_GLOBAL 0 ( int )					    126 LOAD_GLOBAL 0 ( int )					  
							      128 LOAD_FAST 1 ( s )					    128 LOAD_FAST 1 ( s )					  
							      130 LOAD_CONST 2 ( 2 )					    130 LOAD_CONST 2 ( 2 )					  
							      132 BINARY_TRUE_DIVIDE					    132 BINARY_TRUE_DIVIDE					  
							      134 CALL_FUNCTION 1					    134 CALL_FUNCTION 1						  
							      136 LOAD_CONST 1 ( 1 )					    136 LOAD_CONST 1 ( 1 )					  
							      138 BINARY_ADD						    138 BINARY_ADD						  
							      140 CALL_FUNCTION 2					    140 CALL_FUNCTION 2						  
							      142 POP_TOP						    142 POP_TOP							  
							      								    								  
							      11 144 LOAD_GLOBAL 1 ( print )				    11 144 LOAD_GLOBAL 1 ( print )				  
							      146 LOAD_CONST 7 ( 'Difference = ' )			    146 LOAD_CONST 9 ( 'Difference = ' )			  
							      148 LOAD_CONST 1 ( 1 )					    148 LOAD_CONST 1 ( 1 )					  
							      150 CALL_FUNCTION 2					    150 CALL_FUNCTION 2						  
							      152 POP_TOP						    152 POP_TOP							  
							      154 JUMP_FORWARD 46 ( to 202 )				    154 JUMP_FORWARD 46 ( to 218 )				  
							      								    								  
							      13 >> 156 LOAD_GLOBAL 1 ( print )				    13 >> 156 LOAD_GLOBAL 1 ( print )				  
							      158 LOAD_CONST 5 ( 'First subset sum = ' )		    158 LOAD_CONST 10 ( 'First subset sum = ' )			  
							      160 LOAD_GLOBAL 0 ( int )					    160 LOAD_GLOBAL 0 ( int )					  
							      162 LOAD_FAST 1 ( s )					    162 LOAD_FAST 1 ( s )					  
							      164 LOAD_CONST 2 ( 2 )					    164 LOAD_CONST 2 ( 2 )					  
							      166 BINARY_TRUE_DIVIDE					    166 BINARY_TRUE_DIVIDE					  
							      168 CALL_FUNCTION 1					    168 CALL_FUNCTION 1						  
							      170 CALL_FUNCTION 2					    170 CALL_FUNCTION 2						  
							      172 POP_TOP						    172 POP_TOP							  
							      								    								  
							      14 174 LOAD_GLOBAL 1 ( print )				    14 174 LOAD_GLOBAL 1 ( print )				  
							      176 LOAD_CONST 6 ( 'Second subset sum = ' )		    176 LOAD_CONST 11 ( 'Second subset sum = ' )		  
							      178 LOAD_GLOBAL 0 ( int )					    178 LOAD_GLOBAL 0 ( int )					  
							      180 LOAD_FAST 1 ( s )					    180 LOAD_FAST 1 ( s )					  
							      182 LOAD_CONST 2 ( 2 )					    182 LOAD_CONST 2 ( 2 )					  
							      184 BINARY_TRUE_DIVIDE					    184 BINARY_TRUE_DIVIDE					  
							      186 CALL_FUNCTION 1					    186 CALL_FUNCTION 1						  
							      188 CALL_FUNCTION 2					    188 CALL_FUNCTION 2						  
							      190 POP_TOP						    190 POP_TOP							  
							      								    								  
							      15 192 LOAD_GLOBAL 1 ( print )				    15 192 LOAD_GLOBAL 1 ( print )				  
							      194 LOAD_CONST 7 ( 'Difference = ' )			    194 LOAD_CONST 12 ( 'Difference = ' )			  
							      196 LOAD_CONST 4 ( 0 )					    196 LOAD_CONST 4 ( 0 )					  
							      198 CALL_FUNCTION 2					    198 CALL_FUNCTION 2						  
							      200 POP_TOP						    200 POP_TOP							  
							      >> 202 LOAD_CONST 0 ( None )				    >> 202 LOAD_CONST 0 ( None )				  
							      204 RETURN_VALUE NEW_LINE					    204 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT
--							      --							    --								  --
def generateGrayarr ( n ) :				      Disassembly of <code object generateGrayarr at 0x7f33e26494b0 Disassembly of <code object generateGrayarr at 0x7f2b0163dc90 script_not_found : None
    if ( n <= 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    arr = list ( )					      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    arr.append ( "0" )					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    arr.append ( "1" )					      								    								  
    i = 2						      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_CONST 0 ( None )					  
    j = 0						      10 RETURN_VALUE						    10 RETURN_VALUE						  
    while ( True ) :					      								    								  
	if i >= 1 << n :				      4 >> 12 LOAD_GLOBAL 0 ( list )				    4 >> 12 LOAD_GLOBAL 0 ( list )				  
	    break					      14 CALL_FUNCTION 0					    14 CALL_FUNCTION 0						  
	for j in range ( i - 1 , - 1 , - 1 ) :		      16 STORE_FAST 1 ( arr )					    16 STORE_FAST 1 ( arr )					  
	    arr.append ( arr [ j ] )			      								    								  
	for j in range ( i ) :				      5 18 LOAD_FAST 1 ( arr )					    5 18 LOAD_FAST 1 ( arr )					  
	    arr [ j ] = "0" + arr [ j ]			      20 LOAD_METHOD 1 ( append )				    20 LOAD_METHOD 1 ( append )					  
	for j in range ( i , 2 * i ) :			      22 LOAD_CONST 2 ( '0' )					    22 LOAD_CONST 2 ( '0' )					  
	    arr [ j ] = "1" + arr [ j ]			      24 CALL_METHOD 1						    24 CALL_METHOD 1						  
	i = i << 1					      26 POP_TOP						    26 POP_TOP							  
    for i in range ( len ( arr ) ) :			      								    								  
	print ( arr [ i ] )				      6 28 LOAD_FAST 1 ( arr )					    6 28 LOAD_FAST 1 ( arr )					  
							      30 LOAD_METHOD 1 ( append )				    30 LOAD_METHOD 1 ( append )					  
							      32 LOAD_CONST 3 ( '1' )					    32 LOAD_CONST 2 ( '0' )					  
							      34 CALL_METHOD 1						    34 CALL_METHOD 1						  
							      36 POP_TOP						    36 POP_TOP							  
							      								    								  
							      7 38 LOAD_CONST 4 ( 2 )					    7 38 LOAD_CONST 3 ( 2 )					  
							      40 STORE_FAST 2 ( i )					    40 STORE_FAST 2 ( i )					  
							      								    								  
							      8 42 LOAD_CONST 1 ( 0 )					    8 42 LOAD_CONST 1 ( 0 )					  
							      44 STORE_FAST 3 ( j )					    44 STORE_FAST 3 ( j )					  
							      								    								  
							      9 46 SETUP_LOOP 140 ( to 188 )				    9 46 SETUP_LOOP 32 ( to 78 )				  
							      								    								  
							      10 >> 48 LOAD_FAST 2 ( i )				    10 >> 48 LOAD_FAST 2 ( i )					  
							      50 LOAD_CONST 5 ( 1 )					    50 LOAD_CONST 4 ( 1 )					  
							      52 LOAD_FAST 0 ( n )					    52 COMPARE_OP 5 ( >= )					  
							      54 BINARY_LSHIFT						    54 POP_JUMP_IF_FALSE 70					  
							      56 COMPARE_OP 5 ( >= )					    								  
							      58 POP_JUMP_IF_FALSE 62					    11 56 BREAK_LOOP						  
							      								    58 JUMP_ABSOLUTE 48						  
							      11 60 BREAK_LOOP						    >> 60 POP_BLOCK						  
							      								    								  
							      12 >> 62 SETUP_LOOP 38 ( to 102 )				    12 62 SETUP_LOOP 32 ( to 96 )				  
							      64 LOAD_GLOBAL 2 ( range )				    64 LOAD_GLOBAL 2 ( range )					  
							      66 LOAD_FAST 2 ( i )					    66 LOAD_FAST 2 ( i )					  
							      68 LOAD_CONST 5 ( 1 )					    68 LOAD_CONST 4 ( 1 )					  
							      70 BINARY_SUBTRACT					    70 BINARY_SUBTRACT						  
							      72 LOAD_CONST 6 ( - 1 )					    72 LOAD_CONST 5 ( - 1 )					  
							      74 LOAD_CONST 6 ( - 1 )					    74 LOAD_CONST 5 ( - 1 )					  
							      76 CALL_FUNCTION 3					    76 CALL_FUNCTION 3						  
							      78 GET_ITER						    78 GET_ITER							  
							      >> 80 FOR_ITER 18 ( to 100 )				    >> 80 FOR_ITER 18 ( to 94 )					  
							      82 STORE_FAST 3 ( j )					    82 STORE_FAST 4 ( j )					  
							      								    								  
							      13 84 LOAD_FAST 1 ( arr )					    13 84 LOAD_FAST 1 ( arr )					  
							      86 LOAD_METHOD 1 ( append )				    86 LOAD_METHOD 1 ( append )					  
							      88 LOAD_FAST 1 ( arr )					    88 LOAD_FAST 1 ( arr )					  
							      90 LOAD_FAST 3 ( j )					    90 LOAD_FAST 4 ( j )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 CALL_METHOD 1						    94 CALL_METHOD 1						  
							      96 POP_TOP						    96 POP_TOP							  
							      98 JUMP_ABSOLUTE 80					    98 JUMP_ABSOLUTE 80						  
							      >> 100 POP_BLOCK						    >> 100 POP_BLOCK						  
							      								    								  
							      14 >> 102 SETUP_LOOP 32 ( to 136 )			    14 >> 102 SETUP_LOOP 32 ( to 132 )				  
							      104 LOAD_GLOBAL 2 ( range )				    104 LOAD_GLOBAL 2 ( range )					  
							      106 LOAD_FAST 2 ( i )					    106 LOAD_FAST 2 ( i )					  
							      108 CALL_FUNCTION 1					    108 CALL_FUNCTION 1						  
							      110 GET_ITER						    110 GET_ITER						  
							      >> 112 FOR_ITER 20 ( to 134 )				    >> 112 FOR_ITER 18 ( to 130 )				  
							      114 STORE_FAST 3 ( j )					    114 STORE_FAST 4 ( j )					  
							      								    								  
							      15 116 LOAD_CONST 2 ( '0' )				    15 116 LOAD_CONST 2 ( '0' )					  
							      118 LOAD_FAST 1 ( arr )					    118 LOAD_FAST 1 ( arr )					  
							      120 LOAD_FAST 3 ( j )					    120 LOAD_FAST 4 ( j )					  
							      122 BINARY_SUBSCR						    122 BINARY_SUBSCR						  
							      124 BINARY_ADD						    124 BINARY_ADD						  
							      126 LOAD_FAST 1 ( arr )					    126 LOAD_FAST 1 ( arr )					  
							      128 LOAD_FAST 3 ( j )					    128 LOAD_FAST 4 ( j )					  
							      130 STORE_SUBSCR						    130 STORE_SUBSCR						  
							      132 JUMP_ABSOLUTE 112					    132 JUMP_ABSOLUTE 112					  
							      >> 134 POP_BLOCK						    >> 134 POP_BLOCK						  
							      								    								  
							      16 >> 136 SETUP_LOOP 38 ( to 176 )			    16 >> 136 SETUP_LOOP 40 ( to 162 )				  
							      138 LOAD_GLOBAL 2 ( range )				    138 LOAD_GLOBAL 2 ( range )					  
							      140 LOAD_FAST 2 ( i )					    140 LOAD_FAST 2 ( i )					  
							      142 LOAD_CONST 4 ( 2 )					    142 LOAD_CONST 3 ( 2 )					  
							      144 LOAD_FAST 2 ( i )					    144 LOAD_FAST 2 ( i )					  
							      146 BINARY_MULTIPLY					    146 BINARY_MULTIPLY						  
							      148 CALL_FUNCTION 2					    148 CALL_FUNCTION 1						  
							      150 GET_ITER						    150 GET_ITER						  
							      >> 152 FOR_ITER 20 ( to 174 )				    >> 152 FOR_ITER 18 ( to 160 )				  
							      154 STORE_FAST 3 ( j )					    154 STORE_FAST 4 ( j )					  
							      								    								  
							      17 156 LOAD_CONST 3 ( '1' )				    17 156 LOAD_CONST 2 ( '0' )					  
							      158 LOAD_FAST 1 ( arr )					    158 LOAD_FAST 1 ( arr )					  
							      160 LOAD_FAST 3 ( j )					    160 LOAD_FAST 4 ( j )					  
							      162 BINARY_SUBSCR						    162 BINARY_SUBSCR						  
							      164 BINARY_ADD						    164 BINARY_ADD						  
							      166 LOAD_FAST 1 ( arr )					    166 LOAD_FAST 1 ( arr )					  
							      168 LOAD_FAST 3 ( j )					    168 LOAD_FAST 4 ( j )					  
							      170 STORE_SUBSCR						    170 STORE_SUBSCR						  
							      172 JUMP_ABSOLUTE 152					    172 JUMP_ABSOLUTE 152					  
							      >> 174 POP_BLOCK						    >> 174 POP_BLOCK						  
							      								    								  
							      18 >> 176 LOAD_FAST 2 ( i )				    18 >> 176 LOAD_FAST 2 ( i )					  
							      178 LOAD_CONST 5 ( 1 )					    178 LOAD_CONST 4 ( 1 )					  
							      180 BINARY_LSHIFT						    180 BINARY_LSHIFT						  
							      182 STORE_FAST 2 ( i )					    182 STORE_FAST 2 ( i )					  
							      184 JUMP_ABSOLUTE 48					    184 JUMP_ABSOLUTE 152					  
							      186 POP_BLOCK						    >> 186 POP_BLOCK						  
							      								    								  
							      19 >> 188 SETUP_LOOP 32 ( to 222 )			    19 >> 188 SETUP_LOOP 40 ( to 206 )				  
							      190 LOAD_GLOBAL 2 ( range )				    190 LOAD_GLOBAL 2 ( range )					  
							      192 LOAD_GLOBAL 3 ( len )					    192 LOAD_GLOBAL 3 ( len )					  
							      194 LOAD_FAST 1 ( arr )					    194 LOAD_FAST 1 ( arr )					  
							      196 CALL_FUNCTION 1					    196 CALL_FUNCTION 1						  
							      198 CALL_FUNCTION 1					    198 CALL_FUNCTION 1						  
							      200 GET_ITER						    200 GET_ITER						  
							      >> 202 FOR_ITER 16 ( to 220 )				    >> 202 FOR_ITER 18 ( to 204 )				  
							      204 STORE_FAST 2 ( i )					    204 STORE_FAST 2 ( i )					  
							      								    								  
							      20 206 LOAD_GLOBAL 4 ( print )				    20 206 LOAD_GLOBAL 4 ( print )				  
							      208 LOAD_FAST 1 ( arr )					    208 LOAD_FAST 1 ( arr )					  
							      210 LOAD_FAST 2 ( i )					    210 LOAD_FAST 2 ( i )					  
							      212 BINARY_SUBSCR						    212 BINARY_SUBSCR						  
							      214 CALL_FUNCTION 1					    214 CALL_FUNCTION 1						  
							      216 POP_TOP						    216 POP_TOP							  
							      218 JUMP_ABSOLUTE 202					    218 JUMP_ABSOLUTE 202					  
							      >> 220 POP_BLOCK						    >> 220 POP_BLOCK						  
							      >> 222 LOAD_CONST 0 ( None )				    >> 222 LOAD_CONST 0 ( None )				  
							      224 RETURN_VALUE NEW_LINE					    224 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	      LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	    LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	  LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS
--							      --							    --								  --
def findLIS ( A , n ) :					      Disassembly of <code object findLIS at 0x7f33e2653f60, file " Disassembly of <code object findLIS at 0x7f2b0163dc90, file " script_not_found : None
    hash = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    LIS_size , LIS_index = 1 , 0			      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    hash [ A [ 0 ] ] = 1				      4 STORE_FAST 2 ( hash )					    4 STORE_FAST 2 ( hash )					  
    for i in range ( 1 , n ) :				      								    								  
	if A [ i ] - 1 not in hash :			      3 6 LOAD_CONST 1 ( ( 1 , 0 ) )				    3 6 LOAD_CONST 1 ( ( 1 , 0 ) )				  
	    hash [ A [ i ] - 1 ] = 0			      8 UNPACK_SEQUENCE 2					    8 UNPACK_SEQUENCE 2						  
	hash [ A [ i ] ] = hash [ A [ i ] - 1 ] + 1	      10 STORE_FAST 3 ( LIS_size )				    10 STORE_FAST 3 ( LIS_size )				  
	if LIS_size < hash [ A [ i ] ] :		      12 STORE_FAST 4 ( LIS_index )				    12 STORE_FAST 4 ( LIS_index )				  
	    LIS_size = hash [ A [ i ] ]			      								    								  
	    LIS_index = A [ i ]				      4 14 LOAD_CONST 2 ( 1 )					    4 14 LOAD_CONST 1 ( ( 1 , 0 ) )				  
    print ( "LIS_size =" , LIS_size )			      16 LOAD_FAST 2 ( hash )					    16 UNPACK_SEQUENCE 2					  
    print ( "LIS : " , end = "" )			      18 LOAD_FAST 0 ( A )					    18 STORE_FAST 2 ( hash )					  
    start = LIS_index - LIS_size + 1			      20 LOAD_CONST 3 ( 0 )					    20 STORE_FAST 5 ( LIS_index )				  
    while start <= LIS_index :				      22 BINARY_SUBSCR						    								  
	print ( start , end = " " )			      24 STORE_SUBSCR						    5 22 LOAD_CONST 1 ( ( 1 , ) )				  
	start += 1					      								    24 LOAD_FAST 2 ( hash )					  
							      5 26 SETUP_LOOP 114 ( to 142 )				    26 LOAD_FAST 0 ( A )					  
							      28 LOAD_GLOBAL 1 ( range )				    28 LOAD_CONST 2 ( 0 )					  
							      30 LOAD_CONST 2 ( 1 )					    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 1 ( n )					    32 STORE_SUBSCR						  
							      34 CALL_FUNCTION 2					    								  
							      36 GET_ITER						    6 34 SETUP_LOOP 46 ( to 88 )				  
							      >> 38 FOR_ITER 100 ( to 140 )				    >> 36 LOAD_GLOBAL 1 ( range )				  
							      40 STORE_FAST 5 ( i )					    38 LOAD_CONST 1 ( 1 )					  
							      								    40 LOAD_FAST 1 ( n )					  
							      6 42 LOAD_FAST 0 ( A )					    42 CALL_FUNCTION 2						  
							      44 LOAD_FAST 5 ( i )					    44 GET_ITER							  
							      46 BINARY_SUBSCR						    >> 46 FOR_ITER 30 ( to 86 )					  
							      48 LOAD_CONST 2 ( 1 )					    48 STORE_FAST 6 ( i )					  
							      50 BINARY_SUBTRACT					    								  
							      52 LOAD_FAST 2 ( hash )					    7 50 LOAD_FAST 0 ( A )					  
							      54 COMPARE_OP 7 ( not in )				    52 LOAD_FAST 6 ( i )					  
							      56 POP_JUMP_IF_FALSE 74					    54 BINARY_SUBSCR						  
							      								    56 LOAD_CONST 1 ( 1 )					  
							      7 58 LOAD_CONST 3 ( 0 )					    58 BINARY_SUBTRACT						  
							      60 LOAD_FAST 2 ( hash )					    60 LOAD_FAST 2 ( hash )					  
							      62 LOAD_FAST 0 ( A )					    62 COMPARE_OP 7 ( not in )					  
							      64 LOAD_FAST 5 ( i )					    64 POP_JUMP_IF_FALSE 70					  
							      66 BINARY_SUBSCR						    								  
							      68 LOAD_CONST 2 ( 1 )					    8 66 LOAD_CONST 2 ( 0 )					  
							      70 BINARY_SUBTRACT					    68 LOAD_FAST 2 ( hash )					  
							      72 STORE_SUBSCR						    70 LOAD_FAST 0 ( A )					  
							      								    72 LOAD_FAST 6 ( i )					  
							      8 >> 74 LOAD_FAST 2 ( hash )				    74 BINARY_SUBSCR						  
							      76 LOAD_FAST 0 ( A )					    76 LOAD_CONST 1 ( 1 )					  
							      78 LOAD_FAST 5 ( i )					    78 BINARY_SUBTRACT						  
							      80 BINARY_SUBSCR						    80 STORE_SUBSCR						  
							      82 LOAD_CONST 2 ( 1 )					    82 JUMP_ABSOLUTE 46						  
							      84 BINARY_SUBTRACT					    >> 84 POP_BLOCK						  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_CONST 2 ( 1 )					    9 86 LOAD_FAST 2 ( hash )					  
							      90 BINARY_ADD						    88 LOAD_FAST 0 ( A )					  
							      92 LOAD_FAST 2 ( hash )					    90 LOAD_FAST 6 ( i )					  
							      94 LOAD_FAST 0 ( A )					    92 BINARY_SUBSCR						  
							      96 LOAD_FAST 5 ( i )					    94 LOAD_CONST 1 ( 1 )					  
							      98 BINARY_SUBSCR						    96 BINARY_SUBTRACT						  
							      100 STORE_SUBSCR						    98 BINARY_SUBSCR						  
							      								    100 LOAD_CONST 1 ( 1 )					  
							      9 102 LOAD_FAST 3 ( LIS_size )				    102 BINARY_ADD						  
							      104 LOAD_FAST 2 ( hash )					    104 LOAD_FAST 2 ( hash )					  
							      106 LOAD_FAST 0 ( A )					    106 LOAD_FAST 0 ( A )					  
							      108 LOAD_FAST 5 ( i )					    108 LOAD_FAST 6 ( i )					  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 BINARY_SUBSCR						    112 STORE_SUBSCR						  
							      114 COMPARE_OP 0 ( < )					    								  
							      116 POP_JUMP_IF_FALSE 38					    10 114 LOAD_FAST 3 ( LIS_size )				  
							      								    116 LOAD_FAST 2 ( hash )					  
							      10 118 LOAD_FAST 2 ( hash )				    118 LOAD_FAST 0 ( A )					  
							      120 LOAD_FAST 0 ( A )					    120 LOAD_FAST 6 ( i )					  
							      122 LOAD_FAST 5 ( i )					    122 BINARY_SUBSCR						  
							      124 BINARY_SUBSCR						    124 BINARY_SUBSCR						  
							      126 BINARY_SUBSCR						    126 COMPARE_OP 0 ( < )					  
							      128 STORE_FAST 3 ( LIS_size )				    128 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      11 130 LOAD_FAST 0 ( A )					    11 130 LOAD_FAST 2 ( hash )					  
							      132 LOAD_FAST 5 ( i )					    132 LOAD_FAST 0 ( A )					  
							      134 BINARY_SUBSCR						    134 LOAD_FAST 6 ( i )					  
							      136 STORE_FAST 4 ( LIS_index )				    136 BINARY_SUBSCR						  
							      138 JUMP_ABSOLUTE 38					    138 STORE_FAST 3 ( LIS_size )				  
							      >> 140 POP_BLOCK						    								  
							      								    12 140 LOAD_FAST 0 ( A )					  
							      12 >> 142 LOAD_GLOBAL 2 ( print )				    142 LOAD_FAST 6 ( i )					  
							      144 LOAD_CONST 4 ( 'LIS_size =' )				    144 BINARY_SUBSCR						  
							      146 LOAD_FAST 3 ( LIS_size )				    146 STORE_FAST 3 ( LIS_index )				  
							      148 CALL_FUNCTION 2					    148 JUMP_FORWARD 10 ( to 154 )				  
							      150 POP_TOP						    								  
							      								    13 >> 150 LOAD_GLOBAL 2 ( print )				  
							      13 152 LOAD_GLOBAL 2 ( print )				    152 LOAD_CONST 3 ( 'LIS_size =' )				  
							      154 LOAD_CONST 5 ( 'LIS : ' )				    154 LOAD_FAST 3 ( LIS_size )				  
							      156 LOAD_CONST 6 ( '' )					    156 LOAD_CONST 4 ( ( 'end' , ) )				  
							      158 LOAD_CONST 7 ( ( 'end' , ) )				    158 CALL_FUNCTION_KW 2					  
							      160 CALL_FUNCTION_KW 2					    160 POP_TOP							  
							      162 POP_TOP						    								  
							      								    14 162 LOAD_GLOBAL 2 ( print )				  
							      14 164 LOAD_FAST 4 ( LIS_index )				    164 LOAD_CONST 5 ( 'LIS : ' )				  
							      166 LOAD_FAST 3 ( LIS_size )				    166 LOAD_CONST 6 ( '' )					  
							      168 BINARY_SUBTRACT					    168 LOAD_CONST 6 ( ( 'end' , ) )				  
							      170 LOAD_CONST 2 ( 1 )					    170 CALL_FUNCTION_KW 2					  
							      172 BINARY_ADD						    172 POP_TOP							  
							      174 STORE_FAST 6 ( start )				    								  
							      								    15 174 LOAD_FAST 3 ( LIS_index )				  
							      15 176 SETUP_LOOP 32 ( to 210 )				    176 LOAD_FAST 4 ( LIS_size )				  
							      >> 178 LOAD_FAST 6 ( start )				    178 BINARY_SUBTRACT						  
							      180 LOAD_FAST 4 ( LIS_index )				    180 LOAD_CONST 1 ( 1 )					  
							      182 COMPARE_OP 1 ( <= )					    182 BINARY_ADD						  
							      184 POP_JUMP_IF_FALSE 208					    184 STORE_FAST 7 ( start )					  
							      								    								  
							      16 186 LOAD_GLOBAL 2 ( print )				    16 186 SETUP_LOOP 32 ( to 212 )				  
							      188 LOAD_FAST 6 ( start )					    >> 188 LOAD_FAST 7 ( start )				  
							      190 LOAD_CONST 8 ( ' ' )					    190 LOAD_FAST 3 ( LIS_index )				  
							      192 LOAD_CONST 7 ( ( 'end' , ) )				    192 COMPARE_OP 1 ( <= )					  
							      194 CALL_FUNCTION_KW 2					    194 POP_JUMP_IF_FALSE 210					  
							      196 POP_TOP						    								  
							      								    17 196 LOAD_GLOBAL 2 ( print )				  
							      17 198 LOAD_FAST 6 ( start )				    198 LOAD_FAST 7 ( start )					  
							      200 LOAD_CONST 2 ( 1 )					    200 LOAD_CONST 6 ( ' ' )					  
							      202 INPLACE_ADD						    202 LOAD_CONST 6 ( ( ( 'end' , ) )				  
							      204 STORE_FAST 6 ( start )				    204 CALL_FUNCTION_KW 2					  
							      206 JUMP_ABSOLUTE 178					    206 POP_TOP							  
							      >> 208 POP_BLOCK						    								  
							      >> 210 LOAD_CONST 0 ( None )				    18 208 LOAD_FAST 7 ( start )				  
							      212 RETURN_VALUE NEW_LINE					    210 LOAD_CONST 1 ( 1 )					  
							      								    212 INPLACE_ADD						  
							      								    214 STORE_FAST 7 ( start )					  
							      								    216 JUMP_ABSOLUTE 188					  
							      								    >> 218 POP_BLOCK						  
							      								    >> 220 LOAD_CONST 0 ( None )				  
							      								    222 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N		      COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N		    COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N			  COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N
--							      --							    --								  --
def sumOfDigitsFrom1ToN ( n ) :				      Disassembly of <code object sumOfDigitsFrom1ToN at 0x7f33e265 Disassembly of <code object sumOfDigitsFrom1ToN at 0x7f2b0163 error : Traceback (most recent call last):   File
    if ( n < 10 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return ( n * ( n + 1 ) / 2 )			      2 LOAD_CONST 1 ( 10 )					    2 LOAD_CONST 1 ( 10 )					  (item)   File "main.py", line 40, in <module>	  Fi
    d = ( int ) ( math.log10 ( n ) )			      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  le "<dis>", line 2, in sumOfDigitsFrom1ToN TypeErr
    a = [ 0 ] * ( d + 1 )				      6 POP_JUMP_IF_FALSE 24					    6 POP_JUMP_IF_FALSE 24					  or: pow() takes exactly 2 arguments (1 given)
    a [ 0 ] = 0						      								    								  
    a [ 1 ] = 45					      3 8 LOAD_FAST 0 ( n )					    3 8 LOAD_FAST 0 ( n )					  
    for i in range ( 2 , d + 1 ) :			      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
	a [ i ] = a [ i - 1 ] * 10 + 45 * ( int ) ( math.ceil 12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
    p = ( int ) ( math.ceil ( math.pow ( 10 , d ) ) )	      14 BINARY_ADD						    14 BINARY_ADD						  
    msd = n // p					      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
    return ( int ) ( msd * a [ d ] + ( msd * ( msd - 1 ) // 2 18 LOAD_CONST 3 ( 2 )					    18 LOAD_CONST 3 ( 2 )					  
							      20 BINARY_TRUE_DIVIDE					    20 BINARY_TRUE_DIVIDE					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      4 >> 24 LOAD_GLOBAL 0 ( int )				    4 >> 24 LOAD_GLOBAL 0 ( int )				  
							      26 LOAD_GLOBAL 1 ( math )					    26 LOAD_GLOBAL 1 ( math )					  
							      28 LOAD_METHOD 2 ( log10 )				    28 LOAD_METHOD 2 ( log10 )					  
							      30 LOAD_FAST 0 ( n )					    30 LOAD_FAST 0 ( n )					  
							      32 CALL_METHOD 1						    32 CALL_METHOD 1						  
							      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 STORE_FAST 1 ( d )					    36 STORE_FAST 1 ( d )					  
							      								    								  
							      5 38 LOAD_CONST 4 ( 0 )					    5 38 LOAD_CONST 4 ( 0 )					  
							      40 BUILD_LIST 1						    40 BUILD_LIST 1						  
							      42 LOAD_FAST 1 ( d )					    42 LOAD_FAST 1 ( d )					  
							      44 LOAD_CONST 2 ( 1 )					    44 LOAD_CONST 2 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_ADD						  
							      48 BINARY_MULTIPLY					    48 BINARY_MULTIPLY						  
							      50 STORE_FAST 2 ( a )					    50 STORE_FAST 2 ( a )					  
							      								    								  
							      6 52 LOAD_CONST 4 ( 0 )					    6 52 LOAD_CONST 4 ( 0 )					  
							      54 LOAD_FAST 2 ( a )					    54 LOAD_FAST 2 ( a )					  
							      56 LOAD_CONST 4 ( 0 )					    56 LOAD_CONST 4 ( 0 )					  
							      58 STORE_SUBSCR						    58 STORE_SUBSCR						  
							      								    								  
							      7 60 LOAD_CONST 5 ( 45 )					    7 60 LOAD_CONST 5 ( 45 )					  
							      62 LOAD_FAST 2 ( a )					    62 LOAD_FAST 2 ( a )					  
							      64 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      66 STORE_SUBSCR						    66 STORE_SUBSCR						  
							      								    								  
							      8 68 SETUP_LOOP 72 ( to 142 )				    8 68 SETUP_LOOP 76 ( to 144 )				  
							      70 LOAD_GLOBAL 3 ( range )				    70 LOAD_GLOBAL 3 ( range )					  
							      72 LOAD_CONST 3 ( 2 )					    72 LOAD_CONST 3 ( 2 )					  
							      74 LOAD_FAST 1 ( d )					    74 LOAD_FAST 1 ( d )					  
							      76 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_ADD						    78 BINARY_ADD						  
							      80 CALL_FUNCTION 2					    80 CALL_FUNCTION 2						  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 54 ( to 140 )				    >> 84 FOR_ITER 60 ( to 142 )				  
							      86 STORE_FAST 3 ( i )					    86 STORE_FAST 3 ( i )					  
							      								    								  
							      9 88 LOAD_FAST 2 ( a )					    9 88 LOAD_FAST 2 ( a )					  
							      90 LOAD_FAST 3 ( i )					    90 LOAD_FAST 3 ( i )					  
							      92 LOAD_CONST 2 ( 1 )					    92 LOAD_CONST 2 ( 1 )					  
							      94 BINARY_SUBTRACT					    94 BINARY_SUBTRACT						  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_CONST 1 ( 10 )					    98 LOAD_CONST 1 ( 10 )					  
							      100 BINARY_MULTIPLY					    100 BINARY_MULTIPLY						  
							      102 LOAD_CONST 5 ( 45 )					    102 LOAD_CONST 5 ( 45 )					  
							      104 LOAD_GLOBAL 0 ( int )					    104 LOAD_GLOBAL 0 ( int )					  
							      106 LOAD_GLOBAL 1 ( math )				    106 LOAD_METHOD 4 ( ceil )					  
							      108 LOAD_METHOD 4 ( ceil )				    108 LOAD_GLOBAL 1 ( math )					  
							      110 LOAD_GLOBAL 1 ( math )				    110 LOAD_METHOD 4 ( pow )					  
							      112 LOAD_METHOD 5 ( pow )					    112 LOAD_CONST 1 ( 10 )					  
							      114 LOAD_CONST 1 ( 10 )					    114 LOAD_FAST 3 ( i )					  
							      116 LOAD_FAST 3 ( i )					    116 LOAD_CONST 2 ( 1 )					  
							      118 LOAD_CONST 2 ( 1 )					    118 BINARY_SUBTRACT						  
							      120 BINARY_SUBTRACT					    120 CALL_METHOD 2						  
							      122 CALL_METHOD 2						    122 CALL_METHOD 1						  
							      124 CALL_METHOD 1						    124 BINARY_MULTIPLY						  
							      126 CALL_FUNCTION 1					    126 BINARY_ADD						  
							      128 BINARY_MULTIPLY					    128 LOAD_FAST 2 ( a )					  
							      130 BINARY_ADD						    130 LOAD_FAST 3 ( i )					  
							      132 LOAD_FAST 2 ( a )					    132 STORE_SUBSCR						  
							      134 LOAD_FAST 3 ( i )					    134 JUMP_ABSOLUTE 84					  
							      136 STORE_SUBSCR						    >> 136 POP_BLOCK						  
							      138 JUMP_ABSOLUTE 84					    								  
							      >> 140 POP_BLOCK						    10 >> 138 LOAD_GLOBAL 0 ( int )				  
							      								    140 CALL_FUNCTION 1						  
							      10 >> 142 LOAD_GLOBAL 0 ( int )				    142 LOAD_GLOBAL 1 ( math )					  
							      144 LOAD_GLOBAL 1 ( math )				    144 LOAD_METHOD 4 ( ceil )					  
							      146 LOAD_METHOD 4 ( ceil )				    146 LOAD_GLOBAL 1 ( math )					  
							      148 LOAD_GLOBAL 1 ( math )				    148 LOAD_METHOD 4 ( pow )					  
							      150 LOAD_METHOD 5 ( pow )					    150 LOAD_CONST 1 ( 10 )					  
							      152 LOAD_CONST 1 ( 10 )					    152 LOAD_FAST 1 ( d )					  
							      154 LOAD_FAST 1 ( d )					    154 CALL_METHOD 2						  
							      156 CALL_METHOD 2						    156 CALL_METHOD 1						  
							      158 CALL_METHOD 1						    158 CALL_METHOD 1						  
							      160 CALL_FUNCTION 1					    160 CALL_FUNCTION 1						  
							      162 STORE_FAST 4 ( p )					    162 STORE_FAST 4 ( p )					  
							      								    								  
							      11 164 LOAD_FAST 0 ( n )					    11 164 LOAD_FAST 0 ( n )					  
							      166 LOAD_FAST 4 ( p )					    166 LOAD_FAST 4 ( p )					  
							      168 BINARY_FLOOR_DIVIDE					    168 BINARY_FLOOR_DIVIDE					  
							      170 STORE_FAST 5 ( msd )					    170 STORE_FAST 5 ( msd )					  
							      								    								  
							      12 172 LOAD_GLOBAL 0 ( int )				    12 172 LOAD_FAST 2 ( a )					  
							      174 LOAD_FAST 5 ( msd )					    174 LOAD_FAST 4 ( p )					  
							      176 LOAD_FAST 2 ( a )					    176 BINARY_FLOOR_DIVIDE					  
							      178 LOAD_FAST 1 ( d )					    178 STORE_FAST 6 ( msd )					  
							      180 BINARY_SUBSCR						    								  
							      182 BINARY_MULTIPLY					    13 180 LOAD_GLOBAL 0 ( int )				  
							      184 LOAD_FAST 5 ( msd )					    182 CALL_FUNCTION 1						  
							      186 LOAD_FAST 5 ( msd )					    184 LOAD_FAST 5 ( msd )					  
							      188 LOAD_CONST 2 ( 1 )					    186 LOAD_FAST 2 ( a )					  
							      190 BINARY_SUBTRACT					    188 LOAD_FAST 1 ( d )					  
							      192 BINARY_MULTIPLY					    190 BINARY_SUBSCR						  
							      194 LOAD_CONST 3 ( 2 )					    192 LOAD_FAST 6 ( msd )					  
							      196 BINARY_FLOOR_DIVIDE					    194 LOAD_FAST 1 ( d )					  
							      198 LOAD_FAST 4 ( p )					    196 LOAD_CONST 2 ( 1 )					  
							      200 BINARY_MULTIPLY					    198 BINARY_SUBTRACT						  
							      202 BINARY_ADD						    200 BINARY_SUBTRACT						  
							      204 LOAD_FAST 5 ( msd )					    202 LOAD_CONST 3 ( 2 )					  
							      206 LOAD_CONST 2 ( 1 )					    204 BINARY_FLOOR_DIVIDE					  
							      208 LOAD_FAST 0 ( n )					    206 BINARY_MULTIPLY						  
							      210 LOAD_FAST 4 ( p )					    208 LOAD_FAST 4 ( p )					  
							      212 BINARY_MODULO						    210 BINARY_MULTIPLY						  
							      214 BINARY_ADD						    212 BINARY_ADD						  
							      216 BINARY_MULTIPLY					    214 LOAD_FAST 6 ( msd )					  
							      218 BINARY_ADD						    216 LOAD_CONST 2 ( 1 )					  
							      220 LOAD_GLOBAL 6 ( sumOfDigitsFrom1ToN )			    218 LOAD_FAST 0 ( n )					  
							      222 LOAD_FAST 0 ( n )					    220 LOAD_FAST 4 ( p )					  
							      224 LOAD_FAST 4 ( p )					    222 BINARY_MODULO						  
							      226 BINARY_MODULO						    224 BINARY_ADD						  
							      228 CALL_FUNCTION 1					    226 LOAD_GLOBAL 5 ( sumOfsFromitsFrom1ToN )			  
							      230 BINARY_ADD						    228 LOAD_FAST 0 ( n )					  
							      232 CALL_FUNCTION 1					    230 LOAD_FAST 4 ( p )					  
							      234 RETURN_VALUE NEW_LINE					    232 BINARY_MODULO						  
							      								    234 CALL_FUNCTION 1						  
							      								    236 BINARY_ADD						  
							      								    238 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS	      K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS	    K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS	  K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS
--							      --							    --								  --
def kmax ( arr , k , n ) :				      Disassembly of <code object kmax at 0x7f33e2644930, file "<di Disassembly of <code object kmax at 0x7f2b0163dc90, file "<di script_not_found : None
    for c in range ( k ) :				      2 0 SETUP_LOOP 182 ( to 184 )				    2 0 SETUP_LOOP 134 ( to 136 )				  
	max_so_far = - float ( "inf" )			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	max_here = 0					      4 LOAD_FAST 1 ( k )					    4 LOAD_FAST 1 ( k )						  
	start = 0					      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
	end = 0						      8 GET_ITER						    8 GET_ITER							  
	s = 0						      >> 10 FOR_ITER 170 ( to 182 )				    >> 10 FOR_ITER 118 ( to 134 )				  
	for i in range ( n ) :				      12 STORE_FAST 3 ( c )					    12 STORE_FAST 3 ( c )					  
	    max_here += arr [ i ]			      								    								  
	    if ( max_so_far < max_here ) :		      3 14 LOAD_GLOBAL 1 ( float )				    3 14 LOAD_GLOBAL 1 ( float )				  
		max_so_far = max_here			      16 LOAD_CONST 1 ( 'inf' )					    16 LOAD_CONST 1 ( 'inf' )					  
		start = s				      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
		end = i					      20 UNARY_NEGATIVE						    20 UNARY_NEGATIVE						  
	    if ( max_here < 0 ) :			      22 STORE_FAST 4 ( max_so_far )				    22 STORE_FAST 4 ( max_so_far )				  
		max_here = 0				      								    								  
		s = i + 1				      4 24 LOAD_CONST 2 ( 0 )					    4 24 LOAD_CONST 2 ( 0 )					  
	print ( "Maximum non-overlapping sub-array sum" , c + 26 STORE_FAST 5 ( max_here )				    26 STORE_FAST 5 ( max_here )				  
	for l in range ( start , end + 1 ) :		      								    								  
	    arr [ l ] = - float ( "inf" )		      5 28 LOAD_CONST 2 ( 0 )					    5 28 LOAD_CONST 2 ( 0 )					  
    print ( )						      30 STORE_FAST 6 ( start )					    30 STORE_FAST 6 ( start )					  
							      								    								  
							      6 32 LOAD_CONST 2 ( 0 )					    6 32 LOAD_CONST 2 ( 0 )					  
							      34 STORE_FAST 7 ( end )					    34 STORE_FAST 7 ( end )					  
							      								    								  
							      7 36 LOAD_CONST 2 ( 0 )					    7 36 LOAD_CONST 2 ( 0 )					  
							      38 STORE_FAST 8 ( s )					    38 STORE_FAST 8 ( s )					  
							      								    								  
							      8 40 SETUP_LOOP 68 ( to 110 )				    8 40 SETUP_LOOP 40 ( to 82 )				  
							      42 LOAD_GLOBAL 0 ( range )				    42 LOAD_GLOBAL 0 ( range )					  
							      44 LOAD_FAST 2 ( n )					    44 LOAD_FAST 2 ( n )					  
							      46 CALL_FUNCTION 1					    46 CALL_FUNCTION 1						  
							      48 GET_ITER						    48 GET_ITER							  
							      >> 50 FOR_ITER 56 ( to 108 )				    >> 50 FOR_ITER 28 ( to 80 )					  
							      52 STORE_FAST 9 ( i )					    52 STORE_FAST 9 ( i )					  
							      								    								  
							      9 54 LOAD_FAST 5 ( max_here )				    9 54 LOAD_FAST 5 ( max_here )				  
							      56 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 0 ( arr )					  
							      58 LOAD_FAST 9 ( i )					    58 LOAD_FAST 9 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 INPLACE_ADD						    62 INPLACE_ADD						  
							      64 STORE_FAST 5 ( max_here )				    64 STORE_FAST 5 ( max_here )				  
							      								    								  
							      10 66 LOAD_FAST 4 ( max_so_far )				    10 66 LOAD_FAST 4 ( max_so_far )				  
							      68 LOAD_FAST 5 ( max_here )				    68 LOAD_FAST 5 ( max_here )					  
							      70 COMPARE_OP 0 ( < )					    70 COMPARE_OP 0 ( < )					  
							      72 POP_JUMP_IF_FALSE 86					    72 POP_JUMP_IF_FALSE 50					  
							      								    								  
							      11 74 LOAD_FAST 5 ( max_here )				    11 74 LOAD_FAST 5 ( max_here )				  
							      76 STORE_FAST 4 ( max_so_far )				    76 STORE_FAST 6 ( max_so_far )				  
							      								    								  
							      12 78 LOAD_FAST 8 ( s )					    12 78 LOAD_FAST 8 ( s )					  
							      80 STORE_FAST 6 ( start )					    80 STORE_FAST 6 ( start )					  
							      								    82 JUMP_ABSOLUTE 50						  
							      13 82 LOAD_FAST 9 ( i )					    >> 84 POP_BLOCK						  
							      84 STORE_FAST 7 ( end )					    								  
							      								    13 >> 86 LOAD_FAST 6 ( max_here )				  
							      14 >> 86 LOAD_FAST 5 ( max_here )				    88 LOAD_CONST 2 ( 0 )					  
							      88 LOAD_CONST 2 ( 0 )					    90 COMPARE_OP 0 ( < )					  
							      90 COMPARE_OP 0 ( < )					    92 POP_JUMP_IF_FALSE 10					  
							      92 POP_JUMP_IF_FALSE 50					    								  
							      								    14 94 LOAD_CONST 2 ( 0 )					  
							      15 94 LOAD_CONST 2 ( 0 )					    96 STORE_FAST 5 ( max_here )				  
							      96 STORE_FAST 5 ( max_here )				    								  
							      								    15 98 LOAD_FAST 9 ( i )					  
							      16 98 LOAD_FAST 9 ( i )					    100 LOAD_CONST 3 ( 1 )					  
							      100 LOAD_CONST 3 ( 1 )					    102 BINARY_ADD						  
							      102 BINARY_ADD						    104 STORE_FAST 8 ( s )					  
							      104 STORE_FAST 8 ( s )					    106 JUMP_ABSOLUTE 10					  
							      106 JUMP_ABSOLUTE 50					    108 POP_BLOCK						  
							      >> 108 POP_BLOCK						    								  
							      								    16 >> 110 LOAD_GLOBAL 2 ( print )				  
							      17 >> 110 LOAD_GLOBAL 2 ( print )				    112 LOAD_CONST 4 ( 'Maximum non-overlapping sub-array sum' )  
							      112 LOAD_CONST 4 ( 'Maximum non-overlapping sub-array sum' )  114 LOAD_FAST 3 ( c )					  
							      114 LOAD_FAST 3 ( c )					    116 LOAD_CONST 3 ( 1 )					  
							      116 LOAD_CONST 3 ( 1 )					    118 BINARY_ADD						  
							      118 BINARY_ADD						    120 LOAD_CONST 5 ( ': ' )					  
							      120 LOAD_CONST 5 ( ': ' )					    122 LOAD_FAST 5 ( max_so_far )				  
							      122 LOAD_FAST 4 ( max_so_far )				    124 LOAD_CONST 6 ( ', starting index: ' )			  
							      124 LOAD_CONST 6 ( ', starting index: ' )			    126 LOAD_FAST 6 ( start )					  
							      126 LOAD_FAST 6 ( start )					    128 LOAD_CONST 7 ( ', ending index: ' )			  
							      128 LOAD_CONST 7 ( ', ending index: ' )			    130 LOAD_FAST 7 ( end )					  
							      130 LOAD_FAST 7 ( end )					    132 LOAD_CONST 8 ( '.' )					  
							      132 LOAD_CONST 8 ( '.' )					    134 LOAD_CONST 9 ( ( 'sep' , ) )				  
							      134 LOAD_CONST 9 ( '' )					    136 CALL_FUNCTION_KW 7					  
							      136 LOAD_CONST 10 ( ( 'sep' , ) )				    138 POP_TOP							  
							      138 CALL_FUNCTION_KW 10					    								  
							      140 POP_TOP						    17 140 SETUP_LOOP 30 ( to 166 )				  
							      								    142 LOAD_GLOBAL 0 ( range )					  
							      18 142 SETUP_LOOP 36 ( to 180 )				    144 LOAD_FAST 6 ( start )					  
							      144 LOAD_GLOBAL 0 ( range )				    146 LOAD_FAST 7 ( end )					  
							      146 LOAD_FAST 6 ( start )					    148 LOAD_CONST 3 ( 1 )					  
							      148 LOAD_FAST 7 ( end )					    150 BINARY_ADD						  
							      150 LOAD_CONST 3 ( 1 )					    152 CALL_FUNCTION 2						  
							      152 BINARY_ADD						    154 GET_ITER						  
							      154 CALL_FUNCTION 2					    >> 156 FOR_ITER 18 ( to 164 )				  
							      156 GET_ITER						    158 STORE_FAST 10 ( l )					  
							      >> 158 FOR_ITER 18 ( to 178 )				    								  
							      160 STORE_FAST 10 ( l )					    18 160 LOAD_GLOBAL 1 ( float )				  
							      								    162 LOAD_CONST 1 ( 'inf' )					  
							      19 162 LOAD_GLOBAL 1 ( float )				    164 CALL_FUNCTION 1						  
							      164 LOAD_CONST 1 ( 'inf' )				    166 LOAD_FAST 0 ( arr )					  
							      166 CALL_FUNCTION 1					    168 LOAD_FAST 10 ( l )					  
							      168 UNARY_NEGATIVE					    170 STORE_SUBSCR						  
							      170 LOAD_FAST 0 ( arr )					    172 JUMP_ABSOLUTE 156					  
							      172 LOAD_FAST 10 ( l )					    >> 174 POP_BLOCK						  
							      174 STORE_SUBSCR						    								  
							      176 JUMP_ABSOLUTE 158					    19 >> 176 LOAD_GLOBAL 2 ( print )				  
							      >> 178 POP_BLOCK						    178 CALL_FUNCTION 0						  
							      >> 180 JUMP_ABSOLUTE 10					    180 POP_TOP							  
							      >> 182 POP_BLOCK						    182 LOAD_CONST 0 ( None )					  
							      								    184 RETURN_VALUE NEW_LINE					  
							      20 >> 184 LOAD_GLOBAL 2 ( print )				    								  
							      186 CALL_FUNCTION 0					    								  
							      188 POP_TOP						    								  
							      190 LOAD_CONST 0 ( None )					    								  
							      192 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS
--							      --							    --								  --
def maximumNumberDistinctPrimeRange ( m , n ) :		      Disassembly of <code object maximumNumberDistinctPrimeRange a Disassembly of <code object maximumNumberDistinctPrimeRange a script_not_found : None
    factorCount = [ 0 ] * ( n + 1 )			      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    prime = [ False ] * ( n + 1 )			      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
    for i in range ( n + 1 ) :				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
	factorCount [ i ] = 0				      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
	prime [ i ] = True				      8 BINARY_ADD						    8 BINARY_ADD						  
    for i in range ( 2 , n + 1 ) :			      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
	if ( prime [ i ] == True ) :			      12 STORE_FAST 2 ( factorCount )				    12 STORE_FAST 2 ( factorCount )				  
	    factorCount [ i ] = 1			      								    								  
	    for j in range ( i * 2 , n + 1 , i ) :	      3 14 LOAD_CONST 3 ( False )				    3 14 LOAD_CONST 3 ( False )					  
		factorCount [ j ] += 1			      16 BUILD_LIST 1						    16 BUILD_LIST 1						  
		prime [ j ] = False			      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
    max = factorCount [ m ]				      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 2 ( 1 )					  
    num = m						      22 BINARY_ADD						    22 BINARY_ADD						  
    for i in range ( m , n + 1 ) :			      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
	if ( factorCount [ i ] > max ) :		      26 STORE_FAST 3 ( prime )					    26 STORE_FAST 3 ( prime )					  
	    max = factorCount [ i ]			      								    								  
	    num = i					      4 28 SETUP_LOOP 36 ( to 66 )				    4 28 SETUP_LOOP 36 ( to 66 )				  
    return num						      30 LOAD_GLOBAL 0 ( range )				    30 LOAD_GLOBAL 0 ( range )					  
							      32 LOAD_FAST 1 ( n )					    32 LOAD_FAST 1 ( n )					  
							      34 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 CALL_FUNCTION 1					    38 CALL_FUNCTION 1						  
							      40 GET_ITER						    40 GET_ITER							  
							      >> 42 FOR_ITER 20 ( to 64 )				    >> 42 FOR_ITER 24 ( to 64 )					  
							      44 STORE_FAST 4 ( i )					    44 STORE_FAST 4 ( i )					  
							      								    								  
							      5 46 LOAD_CONST 1 ( 0 )					    5 46 LOAD_CONST 1 ( 0 )					  
							      48 LOAD_FAST 2 ( factorCount )				    48 LOAD_FAST 2 ( factorCount )				  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 4 ( i )					  
							      52 STORE_SUBSCR						    52 STORE_SUBSCR						  
							      								    								  
							      6 54 LOAD_CONST 4 ( True )				    6 54 LOAD_CONST 4 ( True )					  
							      56 LOAD_FAST 3 ( prime )					    56 STORE_FAST 3 ( prime )					  
							      58 LOAD_FAST 4 ( i )					    62 JUMP_ABSOLUTE 42						  
							      60 STORE_SUBSCR						    >> 64 POP_BLOCK						  
							      62 JUMP_ABSOLUTE 42					    								  
							      >> 64 POP_BLOCK						    7 >> 66 SETUP_LOOP 108 ( to 176 )				  
							      								    68 LOAD_GLOBAL 0 ( range )					  
							      7 >> 66 SETUP_LOOP 96 ( to 164 )				    70 LOAD_CONST 5 ( 2 )					  
							      68 LOAD_GLOBAL 0 ( range )				    72 LOAD_FAST 1 ( n )					  
							      70 LOAD_CONST 5 ( 2 )					    74 LOAD_CONST 2 ( 1 )					  
							      72 LOAD_FAST 1 ( n )					    76 BINARY_ADD						  
							      74 LOAD_CONST 2 ( 1 )					    78 CALL_FUNCTION 2						  
							      76 BINARY_ADD						    80 GET_ITER							  
							      78 CALL_FUNCTION 2					    >> 82 FOR_ITER 96 ( to 174 )				  
							      80 GET_ITER						    84 STORE_FAST 4 ( i )					  
							      >> 82 FOR_ITER 78 ( to 162 )				    								  
							      84 STORE_FAST 4 ( i )					    8 86 LOAD_FAST 3 ( prime )					  
							      								    88 LOAD_FAST 4 ( i )					  
							      8 86 LOAD_FAST 3 ( prime )				    90 BINARY_SUBSCR						  
							      88 LOAD_FAST 4 ( i )					    92 LOAD_CONST 4 ( True )					  
							      90 BINARY_SUBSCR						    94 COMPARE_OP 2 ( == )					  
							      92 LOAD_CONST 4 ( True )					    96 POP_JUMP_IF_FALSE 124					  
							      94 COMPARE_OP 2 ( == )					    								  
							      96 POP_JUMP_IF_FALSE 82					    9 98 LOAD_CONST 2 ( 1 )					  
							      								    100 LOAD_FAST 2 ( factorCount )				  
							      9 98 LOAD_CONST 2 ( 1 )					    102 LOAD_FAST 4 ( i )					  
							      100 LOAD_FAST 2 ( factorCount )				    104 STORE_SUBSCR						  
							      102 LOAD_FAST 4 ( i )					    								  
							      104 STORE_SUBSCR						    10 106 SETUP_LOOP 52 ( to 172 )				  
							      								    108 LOAD_GLOBAL 0 ( range )					  
							      10 106 SETUP_LOOP 52 ( to 160 )				    110 LOAD_FAST 4 ( i )					  
							      108 LOAD_GLOBAL 0 ( range )				    112 LOAD_CONST 5 ( 2 )					  
							      110 LOAD_FAST 4 ( i )					    114 BINARY_MULTIPLY						  
							      112 LOAD_CONST 5 ( 2 )					    116 LOAD_FAST 1 ( n )					  
							      114 BINARY_MULTIPLY					    118 LOAD_CONST 2 ( 1 )					  
							      116 LOAD_FAST 1 ( n )					    120 BINARY_ADD						  
							      118 LOAD_CONST 2 ( 1 )					    122 LOAD_FAST 4 ( i )					  
							      120 BINARY_ADD						    124 CALL_FUNCTION 2						  
							      122 LOAD_FAST 4 ( i )					    126 GET_ITER						  
							      124 CALL_FUNCTION 3					    >> 128 FOR_ITER 32 ( to 170 )				  
							      126 GET_ITER						    130 STORE_FAST 5 ( j )					  
							      >> 128 FOR_ITER 28 ( to 158 )				    								  
							      130 STORE_FAST 5 ( j )					    11 132 LOAD_FAST 2 ( factorCount )				  
							      								    134 LOAD_FAST 5 ( j )					  
							      11 132 LOAD_FAST 2 ( factorCount )			    136 DUP_TOP_TWO						  
							      134 LOAD_FAST 5 ( j )					    138 BINARY_SUBSCR						  
							      136 DUP_TOP_TWO						    140 LOAD_CONST 2 ( 1 )					  
							      138 BINARY_SUBSCR						    142 INPLACE_ADD						  
							      140 LOAD_CONST 2 ( 1 )					    144 ROT_THREE						  
							      142 INPLACE_ADD						    146 STORE_SUBSCR						  
							      144 ROT_THREE						    								  
							      146 STORE_SUBSCR						    12 148 LOAD_CONST 3 ( False )				  
							      								    150 LOAD_FAST 3 ( prime )					  
							      12 148 LOAD_CONST 3 ( False )				    152 LOAD_FAST 5 ( j )					  
							      150 LOAD_FAST 3 ( prime )					    154 STORE_SUBSCR						  
							      152 LOAD_FAST 5 ( j )					    								  
							      154 STORE_SUBSCR						    13 156 LOAD_CONST 3 ( False )				  
							      156 JUMP_ABSOLUTE 128					    158 LOAD_FAST 3 ( prime )					  
							      >> 158 POP_BLOCK						    160 LOAD_FAST 5 ( j )					  
							      >> 160 JUMP_ABSOLUTE 82					    162 STORE_SUBSCR						  
							      >> 162 POP_BLOCK						    164 JUMP_ABSOLUTE 128					  
							      								    >> 166 POP_BLOCK						  
							      13 >> 164 LOAD_FAST 2 ( factorCount )			    >> 168 JUMP_ABSOLUTE 82					  
							      166 LOAD_FAST 0 ( m )					    >> 170 POP_BLOCK						  
							      168 BINARY_SUBSCR						    								  
							      170 STORE_FAST 6 ( max )					    14 >> 172 LOAD_FAST 2 ( factorCount )			  
							      								    174 LOAD_FAST 0 ( m )					  
							      14 172 LOAD_FAST 0 ( m )					    176 BINARY_SUBSCR						  
							      174 STORE_FAST 7 ( num )					    178 STORE_FAST 6 ( max )					  
							      								    								  
							      15 176 SETUP_LOOP 46 ( to 224 )				    15 180 SETUP_LOOP 54 ( to 206 )				  
							      178 LOAD_GLOBAL 0 ( range )				    182 LOAD_GLOBAL 0 ( range )					  
							      180 LOAD_FAST 0 ( m )					    184 LOAD_FAST 0 ( m )					  
							      182 LOAD_FAST 1 ( n )					    186 LOAD_FAST 1 ( n )					  
							      184 LOAD_CONST 2 ( 1 )					    188 LOAD_CONST 2 ( 1 )					  
							      186 BINARY_ADD						    190 BINARY_ADD						  
							      188 CALL_FUNCTION 2					    192 CALL_FUNCTION 2						  
							      190 GET_ITER						    194 GET_ITER						  
							      >> 192 FOR_ITER 28 ( to 222 )				    >> 196 FOR_ITER 32 ( to 204 )				  
							      194 STORE_FAST 4 ( i )					    198 STORE_FAST 4 ( i )					  
							      								    								  
							      16 196 LOAD_FAST 2 ( factorCount )			    16 200 LOAD_FAST 2 ( factorCount )				  
							      198 LOAD_FAST 4 ( i )					    202 LOAD_FAST 4 ( i )					  
							      200 BINARY_SUBSCR						    204 BINARY_SUBSCR						  
							      202 LOAD_FAST 6 ( max )					    206 LOAD_FAST 6 ( max )					  
							      204 COMPARE_OP 4 ( > )					    208 COMPARE_OP 4 ( > )					  
							      206 POP_JUMP_IF_FALSE 192					    210 POP_JUMP_IF_FALSE 196					  
							      								    								  
							      17 208 LOAD_FAST 2 ( factorCount )			    17 212 LOAD_FAST 2 ( factorCount )				  
							      210 LOAD_FAST 4 ( i )					    214 LOAD_FAST 4 ( i )					  
							      212 BINARY_SUBSCR						    216 BINARY_SUBSCR						  
							      214 STORE_FAST 6 ( max )					    218 STORE_FAST 6 ( max )					  
							      								    								  
							      18 216 LOAD_FAST 4 ( i )					    18 220 LOAD_FAST 4 ( i )					  
							      218 STORE_FAST 7 ( num )					    222 STORE_FAST 6 ( max )					  
							      220 JUMP_ABSOLUTE 192					    								  
							      >> 222 POP_BLOCK						    19 >> 224 LOAD_FAST 4 ( i )					  
							      								    226 STORE_FAST 6 ( num )					  
							      19 >> 224 LOAD_FAST 7 ( num )				    228 JUMP_ABSOLUTE 196					  
							      226 RETURN_VALUE NEW_LINE					    >> 230 POP_BLOCK						  
							      								    								  
							      								    20 >> 232 LOAD_FAST 6 ( num )				  
							      								    234 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		      CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		    CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		  CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1
--							      --							    --								  --
def checkReverse ( arr , n ) :				      Disassembly of <code object checkReverse at 0x7f33e2649150, f Disassembly of <code object checkReverse at 0x7f2b0163dc90, f error : /bin/bash: line 1:  5177 Segmentation faul
    if ( n == 1 ) :					      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return True					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    i = 1						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
    for i in range ( 1 , n ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  nnsvsdt/eval_scripts/python_sa-dis_sa.valid/CHECK_
	if arr [ i - 1 ] < arr [ i ] :			      								    								  REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1.dis
	    if ( i == n ) :				      3 8 LOAD_CONST 2 ( True )					    3 8 LOAD_CONST 2 ( True )					  
		return True				      10 RETURN_VALUE						    10 RETURN_VALUE						  
    j = i						      								    								  
    while ( arr [ j ] < arr [ j - 1 ] ) :		      4 >> 12 LOAD_CONST 1 ( 1 )				    4 >> 12 LOAD_CONST 1 ( 1 )					  
	if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) :	      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
	    return False				      								    								  
	j += 1						      5 16 SETUP_LOOP 50 ( to 68 )				    5 16 SETUP_LOOP 48 ( to 66 )				  
    if ( j == n ) :					      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_GLOBAL 0 ( range )					  
	return True					      20 LOAD_CONST 1 ( 1 )					    20 LOAD_CONST 1 ( 1 )					  
    k = j						      22 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
    if ( arr [ k ] < arr [ i - 1 ] ) :			      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
	return False					      26 GET_ITER						    26 GET_ITER							  
    while ( k > 1 and k < n ) :				      >> 28 FOR_ITER 36 ( to 66 )				    >> 28 FOR_ITER 36 ( to 64 )					  
	if ( arr [ k ] < arr [ k - 1 ] ) :		      30 STORE_FAST 2 ( i )					    30 STORE_FAST 2 ( i )					  
	    return False				      								    								  
	k += 1						      6 32 LOAD_FAST 0 ( arr )					    6 32 LOAD_FAST 0 ( arr )					  
    return True						      34 LOAD_FAST 2 ( i )					    34 LOAD_FAST 2 ( i )					  
							      36 LOAD_CONST 1 ( 1 )					    36 LOAD_CONST 1 ( 1 )					  
							      38 BINARY_SUBTRACT					    38 BINARY_SUBTRACT						  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 2 ( i )					    44 LOAD_FAST 2 ( i )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 COMPARE_OP 0 ( < )					    48 COMPARE_OP 0 ( < )					  
							      50 POP_JUMP_IF_FALSE 28					    50 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      7 52 LOAD_FAST 2 ( i )					    7 52 LOAD_FAST 2 ( i )					  
							      54 LOAD_FAST 1 ( n )					    54 LOAD_FAST 1 ( n )					  
							      56 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_FALSE 28					    58 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      8 60 LOAD_CONST 2 ( True )				    8 60 LOAD_CONST 2 ( True )					  
							      62 RETURN_VALUE						    62 RETURN_VALUE						  
							      64 JUMP_ABSOLUTE 28					    >> 64 JUMP_ABSOLUTE 28					  
							      >> 66 POP_BLOCK						    >> 66 POP_BLOCK						  
							      								    								  
							      9 >> 68 LOAD_FAST 2 ( i )					    9 >> 68 LOAD_FAST 2 ( i )					  
							      70 STORE_FAST 3 ( j )					    70 STORE_FAST 3 ( j )					  
							      								    								  
							      10 72 SETUP_LOOP 64 ( to 138 )				    10 72 SETUP_LOOP 52 ( to 116 )				  
							      >> 74 LOAD_FAST 0 ( arr )					    >> 74 LOAD_FAST 0 ( arr )					  
							      76 LOAD_FAST 3 ( j )					    76 LOAD_FAST 3 ( j )					  
							      78 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      80 LOAD_FAST 0 ( arr )					    80 LOAD_FAST 0 ( arr )					  
							      82 LOAD_FAST 3 ( j )					    82 LOAD_FAST 3 ( j )					  
							      84 LOAD_CONST 1 ( 1 )					    84 LOAD_CONST 1 ( 1 )					  
							      86 BINARY_SUBTRACT					    86 BINARY_SUBTRACT						  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 COMPARE_OP 0 ( < )					    90 COMPARE_OP 0 ( < )					  
							      92 POP_JUMP_IF_FALSE 136					    92 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      11 94 LOAD_FAST 2 ( i )					    11 94 LOAD_FAST 2 ( i )					  
							      96 LOAD_CONST 1 ( 1 )					    96 LOAD_CONST 1 ( 1 )					  
							      98 COMPARE_OP 4 ( > )					    98 COMPARE_OP 4 ( > )					  
							      100 POP_JUMP_IF_FALSE 126					    100 POP_JUMP_IF_FALSE 106					  
							      102 LOAD_FAST 0 ( arr )					    102 LOAD_FAST 0 ( arr )					  
							      104 LOAD_FAST 3 ( j )					    104 LOAD_FAST 3 ( j )					  
							      106 BINARY_SUBSCR						    106 BINARY_SUBSCR						  
							      108 LOAD_FAST 0 ( arr )					    108 LOAD_FAST 0 ( arr )					  
							      110 LOAD_FAST 2 ( i )					    110 LOAD_FAST 2 ( i )					  
							      112 LOAD_CONST 3 ( 2 )					    112 LOAD_CONST 3 ( 2 )					  
							      114 BINARY_SUBTRACT					    114 BINARY_SUBTRACT						  
							      116 BINARY_SUBSCR						    116 BINARY_SUBSCR						  
							      118 COMPARE_OP 0 ( < )					    118 COMPARE_OP 0 ( < )					  
							      120 POP_JUMP_IF_FALSE 126					    120 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      12 122 LOAD_CONST 4 ( False )				    12 122 LOAD_CONST 4 ( False )				  
							      124 RETURN_VALUE						    124 RETURN_VALUE						  
							      								    								  
							      13 >> 126 LOAD_FAST 3 ( j )				    13 >> 126 LOAD_FAST 3 ( j )					  
							      128 LOAD_CONST 1 ( 1 )					    128 LOAD_CONST 1 ( 1 )					  
							      130 INPLACE_ADD						    130 INPLACE_ADD						  
							      132 STORE_FAST 3 ( j )					    132 STORE_FAST 3 ( j )					  
							      134 JUMP_ABSOLUTE 74					    								  
							      >> 136 POP_BLOCK						    14 >> 134 LOAD_FAST 3 ( j )					  
							      								    136 LOAD_FAST 1 ( n )					  
							      14 >> 138 LOAD_FAST 3 ( j )				    138 COMPARE_OP 2 ( == )					  
							      140 LOAD_FAST 1 ( n )					    140 POP_JUMP_IF_FALSE 144					  
							      142 COMPARE_OP 2 ( == )					    								  
							      144 POP_JUMP_IF_FALSE 150					    15 142 LOAD_CONST 2 ( True )				  
							      								    144 RETURN_VALUE						  
							      15 146 LOAD_CONST 2 ( True )				    								  
							      148 RETURN_VALUE						    16 >> 146 LOAD_FAST 3 ( j )					  
							      								    148 STORE_FAST 4 ( k )					  
							      16 >> 150 LOAD_FAST 3 ( j )				    								  
							      152 STORE_FAST 4 ( k )					    17 150 LOAD_FAST 0 ( arr )					  
							      								    152 LOAD_FAST 4 ( k )					  
							      17 154 LOAD_FAST 0 ( arr )				    154 BINARY_SUBSCR						  
							      156 LOAD_FAST 4 ( k )					    156 LOAD_FAST 0 ( arr )					  
							      158 BINARY_SUBSCR						    158 LOAD_FAST 2 ( i )					  
							      160 LOAD_FAST 0 ( arr )					    160 LOAD_CONST 1 ( 1 )					  
							      162 LOAD_FAST 2 ( i )					    162 BINARY_SUBTRACT						  
							      164 LOAD_CONST 1 ( 1 )					    164 BINARY_SUBSCR						  
							      166 BINARY_SUBTRACT					    166 COMPARE_OP 0 ( < )					  
							      168 BINARY_SUBSCR						    168 POP_JUMP_IF_FALSE 174					  
							      170 COMPARE_OP 0 ( < )					    								  
							      172 POP_JUMP_IF_FALSE 178					    18 170 LOAD_CONST 2 ( False )				  
							      								    172 RETURN_VALUE						  
							      18 174 LOAD_CONST 4 ( False )				    								  
							      176 RETURN_VALUE						    19 >> 174 SETUP_LOOP 64 ( to 218 )				  
							      								    >> 176 LOAD_FAST 4 ( k )					  
							      19 >> 178 SETUP_LOOP 52 ( to 232 )			    178 LOAD_CONST 1 ( 1 )					  
							      >> 180 LOAD_FAST 4 ( k )					    180 COMPARE_OP 4 ( > )					  
							      182 LOAD_CONST 1 ( 1 )					    182 POP_JUMP_IF_FALSE 216					  
							      184 COMPARE_OP 4 ( > )					    184 LOAD_FAST 4 ( k )					  
							      186 POP_JUMP_IF_FALSE 230					    186 LOAD_FAST 1 ( n )					  
							      188 LOAD_FAST 4 ( k )					    188 COMPARE_OP 0 ( < )					  
							      190 LOAD_FAST 1 ( n )					    190 POP_JUMP_IF_FALSE 216					  
							      192 COMPARE_OP 0 ( < )					    								  
							      194 POP_JUMP_IF_FALSE 230					    20 192 LOAD_FAST 0 ( arr )					  
							      								    194 LOAD_FAST 4 ( k )					  
							      20 196 LOAD_FAST 0 ( arr )				    196 BINARY_SUBSCR						  
							      198 LOAD_FAST 4 ( k )					    198 LOAD_FAST 0 ( arr )					  
							      200 BINARY_SUBSCR						    200 LOAD_FAST 4 ( k )					  
							      202 LOAD_FAST 0 ( arr )					    202 LOAD_CONST 1 ( 1 )					  
							      204 LOAD_FAST 4 ( k )					    204 BINARY_SUBTRACT						  
							      206 LOAD_CONST 1 ( 1 )					    206 BINARY_SUBSCR						  
							      208 BINARY_SUBTRACT					    208 COMPARE_OP 0 ( < )					  
							      210 BINARY_SUBSCR						    210 POP_JUMP_IF_FALSE 216					  
							      212 COMPARE_OP 0 ( < )					    								  
							      214 POP_JUMP_IF_FALSE 220					    21 212 LOAD_CONST 4 ( False )				  
							      								    214 RETURN_VALUE						  
							      21 216 LOAD_CONST 4 ( False )				    								  
							      218 RETURN_VALUE						    22 >> 216 LOAD_FAST 4 ( k )					  
							      								    218 LOAD_CONST 1 ( 1 )					  
							      22 >> 220 LOAD_FAST 4 ( k )				    220 INPLACE_ADD						  
							      222 LOAD_CONST 1 ( 1 )					    222 STORE_FAST 4 ( k )					  
							      224 INPLACE_ADD						    224 JUMP_ABSOLUTE 176					  
							      226 STORE_FAST 4 ( k )					    >> 226 POP_BLOCK						  
							      228 JUMP_ABSOLUTE 180					    								  
							      >> 230 POP_BLOCK						    23 >> 228 LOAD_CONST 2 ( True )				  
							      								    230 RETURN_VALUE NEW_LINE					  
							      23 >> 232 LOAD_CONST 2 ( True )				    								  
							      234 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			      PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			    PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			  PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN
--							      --							    --								  --
def printPath ( str ) :					      Disassembly of <code object printPath at 0x7f33e2644f60, file Disassembly of <code object printPath at 0x7f2b0163dc90, file script_not_found : None
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    curX = 0						      2 STORE_FAST 1 ( i )					    2 STORE_FAST 1 ( i )					  
    curY = 0						      								    								  
    while ( i < len ( str ) ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	nextX = int ( ( ord ( str [ i ] ) - ord ( 'A' ) ) / 5 6 STORE_FAST 2 ( curX )					    6 STORE_FAST 2 ( curX )					  
	nextY = ( ord ( str [ i ] ) - ord ( 'B' ) + 1 ) % 5   								    								  
	while ( curX > nextX ) :			      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 1 ( 0 )					  
	    print ( "Move Up" )				      10 STORE_FAST 3 ( curY )					    10 STORE_FAST 3 ( curY )					  
	    curX -= 1					      								    								  
	while ( curY > nextY ) :			      5 12 SETUP_LOOP 208 ( to 222 )				    5 12 SETUP_LOOP 180 ( to 188 )				  
	    print ( "Move Left" )			      >> 14 LOAD_FAST 1 ( i )					    >> 14 LOAD_FAST 1 ( i )					  
	    curY -= 1					      16 LOAD_GLOBAL 0 ( len )					    16 LOAD_GLOBAL 0 ( len )					  
	while ( curX < nextX ) :			      18 LOAD_FAST 0 ( str )					    18 LOAD_FAST 0 ( str )					  
	    print ( "Move Down" )			      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
	    curX += 1					      22 COMPARE_OP 0 ( < )					    22 COMPARE_OP 0 ( < )					  
	while ( curY < nextY ) :			      24 POP_JUMP_IF_FALSE 220					    24 POP_JUMP_IF_FALSE 186					  
	    print ( "Move Right" )			      								    								  
	    curY += 1					      6 26 LOAD_GLOBAL 1 ( int )				    6 26 LOAD_GLOBAL 1 ( int )					  
	print ( "Press OK" )				      28 LOAD_GLOBAL 2 ( ord )					    28 LOAD_GLOBAL 2 ( ord )					  
	i += 1						      30 LOAD_FAST 0 ( str )					    30 LOAD_FAST 0 ( str )					  
							      32 LOAD_FAST 1 ( i )					    32 LOAD_FAST 1 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 LOAD_GLOBAL 2 ( ord )					    38 LOAD_GLOBAL 2 ( ord )					  
							      40 LOAD_CONST 2 ( 'A' )					    40 LOAD_CONST 2 ( 'A' )					  
							      42 CALL_FUNCTION 1					    42 CALL_FUNCTION 1						  
							      44 BINARY_SUBTRACT					    44 BINARY_SUBTRACT						  
							      46 LOAD_CONST 3 ( 5 )					    46 LOAD_CONST 3 ( 5 )					  
							      48 BINARY_TRUE_DIVIDE					    48 BINARY_TRUE_DIVIDE					  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 STORE_FAST 4 ( nextX )					    52 STORE_FAST 4 ( nextX )					  
							      								    								  
							      7 54 LOAD_GLOBAL 2 ( ord )				    7 54 LOAD_GLOBAL 2 ( ord )					  
							      56 LOAD_FAST 0 ( str )					    56 LOAD_FAST 0 ( str )					  
							      58 LOAD_FAST 1 ( i )					    58 LOAD_FAST 1 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 LOAD_GLOBAL 2 ( ord )					    64 LOAD_GLOBAL 2 ( ord )					  
							      66 LOAD_CONST 4 ( 'B' )					    66 LOAD_CONST 4 ( 'B' )					  
							      68 CALL_FUNCTION 1					    68 CALL_FUNCTION 1						  
							      70 BINARY_SUBTRACT					    70 BINARY_SUBTRACT						  
							      72 LOAD_CONST 5 ( 1 )					    72 LOAD_CONST 5 ( 1 )					  
							      74 BINARY_ADD						    74 BINARY_ADD						  
							      76 LOAD_CONST 3 ( 5 )					    76 LOAD_CONST 3 ( 5 )					  
							      78 BINARY_MODULO						    78 BINARY_MODULO						  
							      80 STORE_FAST 5 ( nextY )					    80 STORE_FAST 5 ( nextY )					  
							      								    								  
							      8 82 SETUP_LOOP 28 ( to 112 )				    8 82 SETUP_LOOP 30 ( to 120 )				  
							      >> 84 LOAD_FAST 2 ( curX )				    >> 84 LOAD_FAST 2 ( curX )					  
							      86 LOAD_FAST 4 ( nextX )					    86 LOAD_FAST 4 ( nextX )					  
							      88 COMPARE_OP 4 ( > )					    88 COMPARE_OP 4 ( > )					  
							      90 POP_JUMP_IF_FALSE 110					    90 POP_JUMP_IF_FALSE 118					  
							      								    								  
							      9 92 LOAD_GLOBAL 3 ( print )				    9 92 LOAD_GLOBAL 3 ( print )				  
							      94 LOAD_CONST 6 ( 'Move Up' )				    94 LOAD_CONST 6 ( 'Move Up' )				  
							      96 CALL_FUNCTION 1					    96 CALL_FUNCTION 1						  
							      98 POP_TOP						    98 POP_TOP							  
							      								    								  
							      10 100 LOAD_FAST 2 ( curX )				    10 100 LOAD_FAST 3 ( curX )					  
							      102 LOAD_CONST 5 ( 1 )					    102 LOAD_CONST 5 ( 1 )					  
							      104 INPLACE_SUBTRACT					    104 INPLACE_SUBTRACT					  
							      106 STORE_FAST 2 ( curX )					    106 STORE_FAST 3 ( curX )					  
							      108 JUMP_ABSOLUTE 84					    108 JUMP_ABSOLUTE 84					  
							      >> 110 POP_BLOCK						    >> 110 POP_BLOCK						  
							      								    								  
							      11 >> 112 SETUP_LOOP 28 ( to 142 )			    11 >> 112 SETUP_LOOP 34 ( to 156 )				  
							      >> 114 LOAD_FAST 3 ( curY )				    >> 114 LOAD_FAST 3 ( curY )					  
							      116 LOAD_FAST 5 ( nextY )					    116 LOAD_FAST 5 ( nextY )					  
							      118 COMPARE_OP 4 ( > )					    118 COMPARE_OP 4 ( > )					  
							      120 POP_JUMP_IF_FALSE 140					    120 POP_JUMP_IF_FALSE 154					  
							      								    								  
							      12 122 LOAD_GLOBAL 3 ( print )				    12 122 LOAD_GLOBAL 3 ( print )				  
							      124 LOAD_CONST 7 ( 'Move Left' )				    124 LOAD_CONST 7 ( 'Move Left' )				  
							      126 CALL_FUNCTION 1					    126 CALL_FUNCTION 1						  
							      128 POP_TOP						    128 POP_TOP							  
							      								    								  
							      13 130 LOAD_FAST 3 ( curY )				    13 130 LOAD_FAST 2 ( curY )					  
							      132 LOAD_CONST 5 ( 1 )					    132 LOAD_CONST 5 ( 1 )					  
							      134 INPLACE_SUBTRACT					    134 INPLACE_SUBTRACT					  
							      136 STORE_FAST 3 ( curY )					    136 STORE_FAST 2 ( curY )					  
							      138 JUMP_ABSOLUTE 114					    138 JUMP_ABSOLUTE 114					  
							      >> 140 POP_BLOCK						    >> 140 POP_BLOCK						  
							      								    								  
							      14 >> 142 SETUP_LOOP 28 ( to 172 )			    14 >> 142 SETUP_LOOP 30 ( to 162 )				  
							      >> 144 LOAD_FAST 2 ( curX )				    >> 144 LOAD_FAST 3 ( curX )					  
							      146 LOAD_FAST 4 ( nextX )					    146 LOAD_FAST 5 ( nextY )					  
							      148 COMPARE_OP 0 ( < )					    148 COMPARE_OP 0 ( < )					  
							      150 POP_JUMP_IF_FALSE 170					    150 POP_JUMP_IF_FALSE 160					  
							      								    								  
							      15 152 LOAD_GLOBAL 3 ( print )				    15 152 LOAD_GLOBAL 3 ( print )				  
							      154 LOAD_CONST 8 ( 'Move Down' )				    154 LOAD_CONST 8 ( 'Move Down' )				  
							      156 CALL_FUNCTION 1					    156 CALL_FUNCTION 1						  
							      158 POP_TOP						    158 POP_TOP							  
							      								    								  
							      16 160 LOAD_FAST 2 ( curX )				    16 160 LOAD_FAST 2 ( curX )					  
							      162 LOAD_CONST 5 ( 1 )					    162 LOAD_CONST 5 ( 1 )					  
							      164 INPLACE_ADD						    164 INPLACE_ADD						  
							      166 STORE_FAST 2 ( curX )					    166 STORE_FAST 2 ( curX )					  
							      168 JUMP_ABSOLUTE 144					    168 JUMP_ABSOLUTE 144					  
							      >> 170 POP_BLOCK						    >> 170 POP_BLOCK						  
							      								    								  
							      17 >> 172 SETUP_LOOP 28 ( to 202 )			    17 >> 172 SETUP_LOOP 30 ( to 186 )				  
							      >> 174 LOAD_FAST 3 ( curY )				    >> 174 LOAD_FAST 2 ( curX )					  
							      176 LOAD_FAST 5 ( nextY )					    176 LOAD_FAST 5 ( nextY )					  
							      178 COMPARE_OP 0 ( < )					    178 COMPARE_OP 0 ( < )					  
							      180 POP_JUMP_IF_FALSE 200					    180 POP_JUMP_IF_FALSE 184					  
							      								    								  
							      18 182 LOAD_GLOBAL 3 ( print )				    18 182 LOAD_GLOBAL 3 ( print )				  
							      184 LOAD_CONST 9 ( 'Move Right' )				    184 LOAD_CONST 9 ( 'Move Right' )				  
							      186 CALL_FUNCTION 1					    186 CALL_FUNCTION 1						  
							      188 POP_TOP						    188 POP_TOP							  
							      								    								  
							      19 190 LOAD_FAST 3 ( curY )				    19 190 LOAD_FAST 2 ( curX )					  
							      192 LOAD_CONST 5 ( 1 )					    192 LOAD_CONST 5 ( 1 )					  
							      194 INPLACE_ADD						    194 INPLACE_ADD						  
							      196 STORE_FAST 3 ( curY )					    196 STORE_FAST 2 ( curY )					  
							      198 JUMP_ABSOLUTE 174					    198 JUMP_ABSOLUTE 174					  
							      >> 200 POP_BLOCK						    >> 200 POP_BLOCK						  
							      								    								  
							      20 >> 202 LOAD_GLOBAL 3 ( print )				    20 >> 202 LOAD_GLOBAL 3 ( print )				  
							      204 LOAD_CONST 10 ( 'Press OK' )				    204 LOAD_CONST 10 ( 'Press OK' )				  
							      206 CALL_FUNCTION 1					    206 CALL_FUNCTION 1						  
							      208 POP_TOP						    208 POP_TOP							  
							      								    								  
							      21 210 LOAD_FAST 1 ( i )					    21 210 LOAD_FAST 1 ( i )					  
							      212 LOAD_CONST 5 ( 1 )					    212 LOAD_CONST 5 ( 1 )					  
							      214 INPLACE_ADD						    214 INPLACE_ADD						  
							      216 STORE_FAST 1 ( i )					    216 STORE_FAST 1 ( i )					  
							      218 JUMP_ABSOLUTE 14					    218 JUMP_ABSOLUTE 14					  
							      >> 220 POP_BLOCK						    >> 220 POP_BLOCK						  
							      >> 222 LOAD_CONST 0 ( None )				    >> 222 LOAD_CONST 0 ( None )				  
							      224 RETURN_VALUE NEW_LINE					    224 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		      FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		    FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1			  FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1
--							      --							    --								  --
def findFourElements ( arr , n ) :			      Disassembly of <code object findFourElements at 0x7f33e2653ed Disassembly of <code object findFourElements at 0x7f2b0163dc9 error : XXX lineno: 2, opcode: 0 Traceback (most r
    mp = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  ecent call last):   File "XLM/dis_script.py", line
    for i in range ( n - 1 ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						   60, in <module>     exec(item)   File "main.py",
	for j in range ( i + 1 , n ) :			      4 STORE_FAST 2 ( mp )					    4 STORE_FAST 2 ( mp )					  line 40, in <module>	 File "<dis>", line 2, in fi
	    mp [ arr [ i ] + arr [ j ] ] = ( i , j )	      								    								  ndFourElements SystemError: unknown opcode
    d = - 10 ** 9					      3 6 SETUP_LOOP 68 ( to 76 )				    3 6 SETUP_LOOP 68 ( to 80 )					  
    for i in range ( n - 1 ) :				      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	for j in range ( i + 1 , n ) :			      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
	    abs_diff = abs ( arr [ i ] - arr [ j ] )	      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
	    if abs_diff in mp.keys ( ) :		      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
		p = mp [ abs_diff ]			      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
		if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1  18 GET_ITER						    18 GET_ITER							  
		    d = max ( d , max ( arr [ i ] , arr [ j ] >> 20 FOR_ITER 52 ( to 74 )				    >> 20 FOR_ITER 52 ( to 78 )					  
    return d						      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 SETUP_LOOP 46 ( to 72 )				    4 24 SETUP_LOOP 44 ( to 76 )				  
							      26 LOAD_GLOBAL 1 ( range )				    26 LOAD_GLOBAL 1 ( range )					  
							      28 LOAD_FAST 3 ( i )					    28 LOAD_FAST 3 ( i )					  
							      30 LOAD_CONST 1 ( 1 )					    30 LOAD_CONST 1 ( 1 )					  
							      32 BINARY_ADD						    32 BINARY_ADD						  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 1 ( n )					  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 28 ( to 70 )				    >> 40 FOR_ITER 24 ( to 74 )					  
							      42 STORE_FAST 4 ( j )					    42 STORE_FAST 4 ( j )					  
							      								    								  
							      5 44 LOAD_FAST 3 ( i )					    5 44 LOAD_FAST 3 ( i )					  
							      46 LOAD_FAST 4 ( j )					    46 LOAD_FAST 4 ( j )					  
							      48 BUILD_TUPLE 2						    48 BUILD_TUPLE 2						  
							      50 LOAD_FAST 2 ( mp )					    50 LOAD_FAST 2 ( mp )					  
							      52 LOAD_FAST 0 ( arr )					    52 LOAD_FAST 0 ( arr )					  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_FAST 3 ( i )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 0 ( arr )					    58 LOAD_FAST 0 ( arr )					  
							      60 LOAD_FAST 4 ( j )					    60 LOAD_FAST 4 ( j )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 STORE_SUBSCR						    66 STORE_SUBSCR						  
							      68 JUMP_ABSOLUTE 40					    68 JUMP_ABSOLUTE 40						  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      >> 72 JUMP_ABSOLUTE 20					    >> 72 JUMP_ABSOLUTE 20					  
							      >> 74 POP_BLOCK						    >> 74 POP_BLOCK						  
							      								    								  
							      6 >> 76 LOAD_CONST 2 ( - 1000000000 )			    6 >> 76 LOAD_CONST 2 ( - 10 )				  
							      78 STORE_FAST 5 ( d )					    78 LOAD_CONST 3 ( 9 )					  
							      								    80 BINARY_POWER						  
							      7 80 SETUP_LOOP 156 ( to 238 )				    82 STORE_FAST 5 ( d )					  
							      82 LOAD_GLOBAL 1 ( range )				    								  
							      84 LOAD_FAST 1 ( n )					    7 84 SETUP_LOOP 158 ( to 252 )				  
							      86 LOAD_CONST 1 ( 1 )					    86 LOAD_GLOBAL 1 ( range )					  
							      88 BINARY_SUBTRACT					    88 LOAD_FAST 1 ( n )					  
							      90 CALL_FUNCTION 1					    90 LOAD_CONST 1 ( 1 )					  
							      92 GET_ITER						    92 BINARY_ADD						  
							      >> 94 FOR_ITER 140 ( to 236 )				    94 LOAD_FAST 1 ( n )					  
							      96 STORE_FAST 3 ( i )					    96 CALL_FUNCTION 2						  
							      								    98 GET_ITER							  
							      8 98 SETUP_LOOP 134 ( to 234 )				    >> 100 FOR_ITER 144 ( to 254 )				  
							      100 LOAD_GLOBAL 1 ( range )				    102 STORE_FAST 3 ( i )					  
							      102 LOAD_FAST 3 ( i )					    								  
							      104 LOAD_CONST 1 ( 1 )					    8 104 SETUP_LOOP 112 ( to 252 )				  
							      106 BINARY_ADD						    106 LOAD_GLOBAL 1 ( range )					  
							      108 LOAD_FAST 1 ( n )					    108 LOAD_FAST 3 ( i )					  
							      110 CALL_FUNCTION 2					    110 LOAD_CONST 1 ( 1 )					  
							      112 GET_ITER						    112 BINARY_ADD						  
							      >> 114 FOR_ITER 116 ( to 232 )				    114 LOAD_FAST 1 ( n )					  
							      116 STORE_FAST 4 ( j )					    116 CALL_FUNCTION 2						  
							      								    118 GET_ITER						  
							      9 118 LOAD_GLOBAL 2 ( abs )				    >> 120 FOR_ITER 104 ( to 250 )				  
							      120 LOAD_FAST 0 ( arr )					    122 STORE_FAST 4 ( j )					  
							      122 LOAD_FAST 3 ( i )					    								  
							      124 BINARY_SUBSCR						    9 124 LOAD_GLOBAL 2 ( abs )					  
							      126 LOAD_FAST 0 ( arr )					    126 LOAD_FAST 0 ( arr )					  
							      128 LOAD_FAST 4 ( j )					    128 LOAD_FAST 3 ( i )					  
							      130 BINARY_SUBSCR						    130 BINARY_SUBSCR						  
							      132 BINARY_SUBTRACT					    132 LOAD_FAST 0 ( arr )					  
							      134 CALL_FUNCTION 1					    134 LOAD_FAST 4 ( j )					  
							      136 STORE_FAST 6 ( abs_diff )				    136 BINARY_SUBSCR						  
							      								    138 BINARY_SUBTRACT						  
							      10 138 LOAD_FAST 6 ( abs_diff )				    140 CALL_FUNCTION 1						  
							      140 LOAD_FAST 2 ( mp )					    142 STORE_FAST 6 ( abs_)					  
							      142 LOAD_METHOD 3 ( keys )				    								  
							      144 CALL_METHOD 0						    10 144 LOAD_FAST 6 ( abs_diff )				  
							      146 COMPARE_OP 6 ( in )					    146 LOAD_FAST 2 ( mp )					  
							      148 POP_JUMP_IF_FALSE 114					    148 LOAD_METHOD 3 ( keys )					  
							      								    150 CALL_METHOD 0						  
							      11 150 LOAD_FAST 2 ( mp )					    152 COMPARE_OP 6 ( in )					  
							      152 LOAD_FAST 6 ( abs_diff )				    154 POP_JUMP_IF_FALSE 120					  
							      154 BINARY_SUBSCR						    								  
							      156 STORE_FAST 7 ( p )					    11 156 LOAD_FAST 2 ( mp )					  
							      								    158 LOAD_FAST 6 ( abs_)					  
							      12 158 LOAD_FAST 7 ( p )					    160 BINARY_SUBSCR						  
							      160 LOAD_CONST 3 ( 0 )					    162 STORE_FAST 7 ( p )					  
							      162 BINARY_SUBSCR						    								  
							      164 LOAD_FAST 3 ( i )					    12 164 LOAD_FAST 7 ( p )					  
							      166 COMPARE_OP 3 ( != )					    166 LOAD_CONST 4 ( 0 )					  
							      168 POP_JUMP_IF_FALSE 114					    168 BINARY_SUBSCR						  
							      170 LOAD_FAST 7 ( p )					    170 LOAD_FAST 3 ( i )					  
							      172 LOAD_CONST 3 ( 0 )					    172 COMPARE_OP 3 ( != )					  
							      174 BINARY_SUBSCR						    174 POP_JUMP_IF_FALSE 120					  
							      176 LOAD_FAST 4 ( j )					    176 LOAD_FAST 7 ( p )					  
							      178 COMPARE_OP 3 ( != )					    178 LOAD_CONST 4 ( 0 )					  
							      180 POP_JUMP_IF_FALSE 114					    180 BINARY_SUBSCR						  
							      182 LOAD_FAST 7 ( p )					    182 LOAD_FAST 4 ( j )					  
							      184 LOAD_CONST 1 ( 1 )					    184 COMPARE_OP 3 ( != )					  
							      186 BINARY_SUBSCR						    186 POP_JUMP_IF_FALSE 120					  
							      188 LOAD_FAST 3 ( i )					    188 LOAD_FAST 7 ( p )					  
							      190 COMPARE_OP 3 ( != )					    190 LOAD_CONST 1 ( 1 )					  
							      192 POP_JUMP_IF_FALSE 114					    192 BINARY_SUBSCR						  
							      194 LOAD_FAST 7 ( p )					    194 LOAD_FAST 3 ( i )					  
							      196 LOAD_CONST 1 ( 1 )					    196 COMPARE_OP 3 ( != )					  
							      198 BINARY_SUBSCR						    198 POP_JUMP_IF_FALSE 120					  
							      200 LOAD_FAST 4 ( j )					    200 LOAD_FAST 7 ( p )					  
							      202 COMPARE_OP 3 ( != )					    202 LOAD_CONST 1 ( 1 )					  
							      204 POP_JUMP_IF_FALSE 114					    204 BINARY_SUBSCR						  
							      								    206 LOAD_FAST 4 ( j )					  
							      13 206 LOAD_GLOBAL 4 ( max )				    208 COMPARE_OP 3 ( != )					  
							      208 LOAD_FAST 5 ( d )					    210 POP_JUMP_IF_FALSE 120					  
							      210 LOAD_GLOBAL 4 ( max )					    								  
							      212 LOAD_FAST 0 ( arr )					    13 212 LOAD_GLOBAL 4 ( max )				  
							      214 LOAD_FAST 3 ( i )					    214 LOAD_FAST 5 ( d )					  
							      216 BINARY_SUBSCR						    216 LOAD_GLOBAL 4 ( max )					  
							      218 LOAD_FAST 0 ( arr )					    218 LOAD_FAST 0 ( arr )					  
							      220 LOAD_FAST 4 ( j )					    220 LOAD_FAST 3 ( i )					  
							      222 BINARY_SUBSCR						    222 BINARY_SUBSCR						  
							      224 CALL_FUNCTION 2					    224 LOAD_FAST 0 ( arr )					  
							      226 CALL_FUNCTION 2					    226 LOAD_FAST 4 ( j )					  
							      228 STORE_FAST 5 ( d )					    228 BINARY_SUBSCR						  
							      230 JUMP_ABSOLUTE 114					    230 CALL_FUNCTION 2						  
							      >> 232 POP_BLOCK						    232 STORE_FAST 5 ( d )					  
							      >> 234 JUMP_ABSOLUTE 94					    								  
							      >> 236 POP_BLOCK						    14 >> 234 LOAD_FAST 5 ( d )					  
							      								    236 RETURN_VALUE NEW_LINE					  
							      14 >> 238 LOAD_FAST 5 ( d )				    								  
							      240 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_PATH_2D_MATRIX				      CHECK_POSSIBLE_PATH_2D_MATRIX				    CHECK_POSSIBLE_PATH_2D_MATRIX				  CHECK_POSSIBLE_PATH_2D_MATRIX
--							      --							    --								  --
def isPath ( arr ) :					      Disassembly of <code object isPath at 0x7f33e2644930, file "< Disassembly of <code object isPath at 0x7f2b0163dc90, file "< script_not_found : None
    arr [ 0 ] [ 0 ] = 1					      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    for i in range ( 1 , row ) :			      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
	if ( arr [ i ] [ 0 ] != - 1 ) :			      4 LOAD_CONST 2 ( 0 )					    4 LOAD_CONST 2 ( 0 )					  
	    arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ]	      6 BINARY_SUBSCR						    6 BINARY_SUBSCR						  
    for j in range ( 1 , col ) :			      8 LOAD_CONST 2 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
	if ( arr [ 0 ] [ j ] != - 1 ) :			      10 STORE_SUBSCR						    10 STORE_SUBSCR						  
	    arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ]	      								    								  
    for i in range ( 1 , row ) :			      3 12 SETUP_LOOP 58 ( to 72 )				    3 12 SETUP_LOOP 56 ( to 66 )				  
	for j in range ( 1 , col ) :			      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
	    if ( arr [ i ] [ j ] != - 1 ) :		      16 LOAD_CONST 1 ( 1 )					    16 LOAD_CONST 1 ( 1 )					  
		arr [ i ] [ j ] = max ( arr [ i ] [ j - 1 ] , 18 LOAD_GLOBAL 1 ( row )					    18 LOAD_GLOBAL 1 ( row )					  
    return ( arr [ row - 1 ] [ col - 1 ] == 1 )		      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 44 ( to 70 )				    >> 24 FOR_ITER 44 ( to 64 )					  
							      26 STORE_FAST 1 ( i )					    26 STORE_FAST 1 ( i )					  
							      								    								  
							      4 28 LOAD_FAST 0 ( arr )					    4 28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 1 ( i )					    30 LOAD_FAST 1 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_CONST 2 ( 0 )					    34 LOAD_CONST 2 ( 0 )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_CONST 3 ( - 1 )					    38 LOAD_CONST 3 ( - 1 )					  
							      40 COMPARE_OP 3 ( != )					    40 COMPARE_OP 3 ( != )					  
							      42 POP_JUMP_IF_FALSE 24					    42 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 44 LOAD_FAST 0 ( arr )					    5 44 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 1 ( i )					    46 LOAD_FAST 1 ( i )					  
							      48 LOAD_CONST 1 ( 1 )					    48 LOAD_CONST 1 ( 1 )					  
							      50 BINARY_SUBTRACT					    50 BINARY_SUBTRACT						  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 LOAD_CONST 2 ( 0 )					    54 LOAD_CONST 2 ( 0 )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 0 ( arr )					    58 LOAD_FAST 0 ( arr )					  
							      60 LOAD_FAST 1 ( i )					    60 LOAD_FAST 1 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_CONST 2 ( 0 )					    64 LOAD_CONST 2 ( 0 )					  
							      66 STORE_SUBSCR						    66 STORE_SUBSCR						  
							      68 JUMP_ABSOLUTE 24					    >> 68 JUMP_ABSOLUTE 24					  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      								    								  
							      6 >> 72 SETUP_LOOP 58 ( to 132 )				    6 >> 72 SETUP_LOOP 54 ( to 120 )				  
							      74 LOAD_GLOBAL 0 ( range )				    74 LOAD_GLOBAL 0 ( range )					  
							      76 LOAD_CONST 1 ( 1 )					    76 LOAD_CONST 1 ( 1 )					  
							      78 LOAD_GLOBAL 2 ( col )					    78 LOAD_GLOBAL 2 ( col )					  
							      80 CALL_FUNCTION 2					    80 CALL_FUNCTION 2						  
							      82 GET_ITER						    82 GET_ITER							  
							      >> 84 FOR_ITER 44 ( to 130 )				    >> 84 FOR_ITER 46 ( to 118 )				  
							      86 STORE_FAST 2 ( j )					    86 STORE_FAST 2 ( j )					  
							      								    								  
							      7 88 LOAD_FAST 0 ( arr )					    7 88 LOAD_FAST 0 ( arr )					  
							      90 LOAD_CONST 2 ( 0 )					    90 LOAD_CONST 2 ( 0 )					  
							      92 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      94 LOAD_FAST 2 ( j )					    94 LOAD_FAST 2 ( j )					  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_CONST 3 ( - 1 )					    98 LOAD_CONST 3 ( - 1 )					  
							      100 COMPARE_OP 3 ( != )					    100 COMPARE_OP 3 ( != )					  
							      102 POP_JUMP_IF_FALSE 84					    102 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      8 104 LOAD_FAST 0 ( arr )					    8 104 LOAD_FAST 0 ( arr )					  
							      106 LOAD_CONST 2 ( 0 )					    106 LOAD_CONST 2 ( 0 )					  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 LOAD_FAST 2 ( j )					    110 LOAD_FAST 2 ( j )					  
							      112 LOAD_CONST 1 ( 1 )					    112 LOAD_CONST 1 ( 1 )					  
							      114 BINARY_SUBTRACT					    114 BINARY_SUBTRACT						  
							      116 BINARY_SUBSCR						    116 BINARY_SUBSCR						  
							      118 LOAD_FAST 0 ( arr )					    118 LOAD_FAST 0 ( arr )					  
							      120 LOAD_CONST 2 ( 0 )					    120 LOAD_CONST 2 ( 0 )					  
							      122 BINARY_SUBSCR						    122 BINARY_SUBSCR						  
							      124 LOAD_FAST 2 ( j )					    124 LOAD_FAST 2 ( j )					  
							      126 STORE_SUBSCR						    126 STORE_SUBSCR						  
							      128 JUMP_ABSOLUTE 84					    128 JUMP_ABSOLUTE 84					  
							      >> 130 POP_BLOCK						    >> 130 POP_BLOCK						  
							      								    								  
							      9 >> 132 SETUP_LOOP 96 ( to 230 )				    9 >> 132 SETUP_LOOP 92 ( to 194 )				  
							      134 LOAD_GLOBAL 0 ( range )				    134 LOAD_GLOBAL 0 ( range )					  
							      136 LOAD_CONST 1 ( 1 )					    136 LOAD_CONST 1 ( 1 )					  
							      138 LOAD_GLOBAL 1 ( row )					    138 LOAD_FAST 1 ( row )					  
							      140 CALL_FUNCTION 2					    140 CALL_FUNCTION 2						  
							      142 GET_ITER						    142 GET_ITER						  
							      >> 144 FOR_ITER 82 ( to 228 )				    >> 144 FOR_ITER 80 ( to 192 )				  
							      146 STORE_FAST 1 ( i )					    146 STORE_FAST 1 ( i )					  
							      								    								  
							      10 148 SETUP_LOOP 76 ( to 226 )				    10 148 SETUP_LOOP 62 ( to 190 )				  
							      150 LOAD_GLOBAL 0 ( range )				    150 LOAD_GLOBAL 0 ( range )					  
							      152 LOAD_CONST 1 ( 1 )					    152 LOAD_CONST 1 ( 1 )					  
							      154 LOAD_GLOBAL 2 ( col )					    154 LOAD_FAST 2 ( col )					  
							      156 CALL_FUNCTION 2					    156 CALL_FUNCTION 2						  
							      158 GET_ITER						    158 GET_ITER						  
							      >> 160 FOR_ITER 62 ( to 224 )				    >> 160 FOR_ITER 46 ( to 192 )				  
							      162 STORE_FAST 2 ( j )					    162 STORE_FAST 2 ( j )					  
							      								    								  
							      11 164 LOAD_FAST 0 ( arr )				    11 164 SETUP_LOOP 44 ( to 190 )				  
							      166 LOAD_FAST 1 ( i )					    166 LOAD_GLOBAL 0 ( range )					  
							      168 BINARY_SUBSCR						    168 LOAD_CONST 1 ( 1 )					  
							      170 LOAD_FAST 2 ( j )					    170 LOAD_FAST 2 ( col )					  
							      172 BINARY_SUBSCR						    172 CALL_FUNCTION 2						  
							      174 LOAD_CONST 3 ( - 1 )					    174 GET_ITER						  
							      176 COMPARE_OP 3 ( != )					    >> 176 FOR_ITER 32 ( to 188 )				  
							      178 POP_JUMP_IF_FALSE 160					    178 STORE_FAST 2 ( j )					  
							      								    								  
							      12 180 LOAD_GLOBAL 3 ( max )				    12 180 LOAD_FAST 0 ( arr )					  
							      182 LOAD_FAST 0 ( arr )					    182 LOAD_FAST 1 ( i )					  
							      184 LOAD_FAST 1 ( i )					    184 BINARY_SUBSCR						  
							      186 BINARY_SUBSCR						    186 LOAD_FAST 2 ( j )					  
							      188 LOAD_FAST 2 ( j )					    188 BINARY_SUBSCR						  
							      190 LOAD_CONST 1 ( 1 )					    190 LOAD_CONST 3 ( - 1 )					  
							      192 BINARY_SUBTRACT					    192 COMPARE_OP 3 ( != )					  
							      194 BINARY_SUBSCR						    194 POP_JUMP_IF_FALSE 176					  
							      196 LOAD_FAST 0 ( arr )					    								  
							      198 LOAD_FAST 1 ( i )					    13 196 LOAD_GLOBAL 3 ( max )				  
							      200 LOAD_CONST 1 ( 1 )					    198 LOAD_FAST 0 ( arr )					  
							      202 BINARY_SUBTRACT					    200 LOAD_FAST 1 ( i )					  
							      204 BINARY_SUBSCR						    202 BINARY_SUBSCR						  
							      206 LOAD_FAST 2 ( j )					    204 LOAD_FAST 2 ( j )					  
							      208 BINARY_SUBSCR						    206 LOAD_CONST 1 ( 1 )					  
							      210 CALL_FUNCTION 2					    208 BINARY_SUBTRACT						  
							      212 LOAD_FAST 0 ( arr )					    210 BINARY_SUBSCR						  
							      214 LOAD_FAST 1 ( i )					    212 LOAD_FAST 0 ( arr )					  
							      216 BINARY_SUBSCR						    214 LOAD_FAST 1 ( i )					  
							      218 LOAD_FAST 2 ( j )					    216 BINARY_SUBSCR						  
							      220 STORE_SUBSCR						    218 LOAD_FAST 2 ( j )					  
							      222 JUMP_ABSOLUTE 160					    220 BINARY_SUBSCR						  
							      >> 224 POP_BLOCK						    222 CALL_FUNCTION 2						  
							      >> 226 JUMP_ABSOLUTE 144					    224 LOAD_FAST 0 ( arr )					  
							      >> 228 POP_BLOCK						    226 LOAD_FAST 1 ( i )					  
							      								    228 BINARY_SUBSCR						  
							      13 >> 230 LOAD_FAST 0 ( arr )				    230 LOAD_FAST 2 ( j )					  
							      232 LOAD_GLOBAL 1 ( row )					    232 STORE_SUBSCR						  
							      234 LOAD_CONST 1 ( 1 )					    228 JUMP_ABSOLUTE 176					  
							      236 BINARY_SUBTRACT					    >> 234 POP_BLOCK						  
							      238 BINARY_SUBSCR						    >> 232 JUMP_ABSOLUTE 144					  
							      240 LOAD_GLOBAL 2 ( col )					    >> 234 POP_BLOCK						  
							      242 LOAD_CONST 1 ( 1 )					    								  
							      244 BINARY_SUBTRACT					    14 >> 236 LOAD_FAST 0 ( arr )				  
							      246 BINARY_SUBSCR						    238 LOAD_FAST 1 ( row )					  
							      248 LOAD_CONST 1 ( 1 )					    240 LOAD_CONST 1 ( 1 )					  
							      250 COMPARE_OP 2 ( == )					    242 BINARY_SUBTRACT						  
							      252 RETURN_VALUE NEW_LINE					    244 BINARY_SUBSCR						  
							      								    246 LOAD_FAST 2 ( j )					  
							      								    248 LOAD_CONST 1 ( 1 )					  
							      								    250 BINARY_SUBTRACT						  
							      								    252 BUILD_SLICE 2						  
							      								    254 BINARY_SUBSCR						  
							      								    256 LOAD_CONST 1 ( 1 )					  
							      								    258 COMPARE_OP 2 ( == )					  
							      								    258 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS     NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	    NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	  NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS
--							      --							    --								  --
def waysToArrange ( N , K , k ) :			      Disassembly of <code object waysToArrange at 0x7f33e2644f60,  Disassembly of <code object waysToArrange at 0x7f2b0163dc90,  script_not_found : None
    C = np.zeros ( ( N + 1 , N + 1 ) )			      2 0 LOAD_GLOBAL 0 ( np )					    2 0 LOAD_GLOBAL 0 ( np )					  
    for i in range ( N + 1 ) :				      2 LOAD_METHOD 1 ( zeros )					    2 LOAD_METHOD 1 ( zeros )					  
	for j in range ( i + 1 ) :			      4 LOAD_FAST 0 ( N )					    4 LOAD_FAST 0 ( N )						  
	    if ( j == 0 or j == i ) :			      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
		C [ i ] [ j ] = 1			      8 BINARY_ADD						    8 BINARY_ADD						  
	    else :					      10 LOAD_FAST 0 ( N )					    10 LOAD_FAST 0 ( N )					  
		C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ 12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
    dp = np.zeros ( ( K + 1 ) )				      14 BINARY_ADD						    14 BINARY_ADD						  
    count = 0						      16 BUILD_TUPLE 2						    16 BUILD_TUPLE 2						  
    dp [ 0 ] = 1					      18 CALL_METHOD 1						    18 CALL_METHOD 1						  
    for i in range ( K ) :				      20 STORE_FAST 3 ( C )					    20 STORE_FAST 3 ( C )					  
	dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] 								    								  
	count += k [ i ]				      3 22 SETUP_LOOP 116 ( to 140 )				    3 22 SETUP_LOOP 110 ( to 126 )				  
    return dp [ K ]					      24 LOAD_GLOBAL 2 ( range )				    24 LOAD_GLOBAL 2 ( range )					  
							      26 LOAD_FAST 0 ( N )					    26 LOAD_FAST 0 ( N )					  
							      28 LOAD_CONST 1 ( 1 )					    28 LOAD_CONST 1 ( 1 )					  
							      30 BINARY_ADD						    30 BINARY_ADD						  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 1						  
							      34 GET_ITER						    34 GET_ITER							  
							      >> 36 FOR_ITER 100 ( to 138 )				    >> 36 FOR_ITER 98 ( to 124 )				  
							      38 STORE_FAST 4 ( i )					    38 STORE_FAST 4 ( i )					  
							      								    								  
							      4 40 SETUP_LOOP 94 ( to 136 )				    4 40 SETUP_LOOP 86 ( to 122 )				  
							      42 LOAD_GLOBAL 2 ( range )				    42 LOAD_GLOBAL 2 ( range )					  
							      44 LOAD_FAST 4 ( i )					    44 LOAD_FAST 4 ( i )					  
							      46 LOAD_CONST 1 ( 1 )					    46 LOAD_CONST 1 ( 1 )					  
							      48 BINARY_ADD						    48 BINARY_ADD						  
							      50 CALL_FUNCTION 1					    50 CALL_FUNCTION 1						  
							      52 GET_ITER						    52 GET_ITER							  
							      >> 54 FOR_ITER 78 ( to 134 )				    >> 54 FOR_ITER 72 ( to 120 )				  
							      56 STORE_FAST 5 ( j )					    56 STORE_FAST 5 ( j )					  
							      								    								  
							      5 58 LOAD_FAST 5 ( j )					    5 58 LOAD_FAST 5 ( j )					  
							      60 LOAD_CONST 2 ( 0 )					    60 LOAD_CONST 2 ( 0 )					  
							      62 COMPARE_OP 2 ( == )					    62 COMPARE_OP 2 ( == )					  
							      64 POP_JUMP_IF_TRUE 74					    64 POP_JUMP_IF_TRUE 80					  
							      66 LOAD_FAST 5 ( j )					    66 LOAD_FAST 5 ( j )					  
							      68 LOAD_FAST 4 ( i )					    68 LOAD_FAST 4 ( i )					  
							      70 COMPARE_OP 2 ( == )					    70 COMPARE_OP 2 ( == )					  
							      72 POP_JUMP_IF_FALSE 88					    72 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      6 >> 74 LOAD_CONST 1 ( 1 )				    6 74 LOAD_CONST 1 ( 1 )					  
							      76 LOAD_FAST 3 ( C )					    76 LOAD_FAST 3 ( C )					  
							      78 LOAD_FAST 4 ( i )					    78 LOAD_FAST 4 ( i )					  
							      80 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      82 LOAD_FAST 5 ( j )					    82 LOAD_FAST 5 ( j )					  
							      84 STORE_SUBSCR						    84 STORE_SUBSCR						  
							      86 JUMP_ABSOLUTE 54					    86 JUMP_ABSOLUTE 54						  
							      								    								  
							      8 >> 88 LOAD_FAST 3 ( C )					    8 >> 88 LOAD_FAST 3 ( C )					  
							      90 LOAD_FAST 4 ( i )					    90 LOAD_FAST 4 ( i )					  
							      92 LOAD_CONST 1 ( 1 )					    92 LOAD_CONST 1 ( 1 )					  
							      94 BINARY_SUBTRACT					    94 BINARY_SUBTRACT						  
							      96 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      98 LOAD_FAST 5 ( j )					    98 LOAD_FAST 5 ( j )					  
							      100 LOAD_CONST 1 ( 1 )					    100 LOAD_CONST 1 ( 1 )					  
							      102 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      104 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      106 LOAD_FAST 3 ( C )					    106 LOAD_FAST 3 ( C )					  
							      108 LOAD_FAST 4 ( i )					    108 LOAD_FAST 4 ( i )					  
							      110 LOAD_CONST 1 ( 1 )					    110 LOAD_CONST 1 ( 1 )					  
							      112 BINARY_SUBTRACT					    112 BINARY_SUBTRACT						  
							      114 BINARY_SUBSCR						    114 BINARY_SUBSCR						  
							      116 LOAD_FAST 5 ( j )					    116 LOAD_FAST 5 ( j )					  
							      118 BINARY_SUBSCR						    118 BINARY_SUBSCR						  
							      120 BINARY_ADD						    120 BINARY_ADD						  
							      122 LOAD_FAST 3 ( C )					    122 LOAD_FAST 5 ( j )					  
							      124 LOAD_FAST 4 ( i )					    124 BINARY_SUBSCR						  
							      126 BINARY_SUBSCR						    126 BINARY_ADD						  
							      128 LOAD_FAST 5 ( j )					    128 LOAD_FAST 3 ( C )					  
							      130 STORE_SUBSCR						    130 LOAD_FAST 4 ( i )					  
							      132 JUMP_ABSOLUTE 54					    132 BINARY_SUBSCR						  
							      >> 134 POP_BLOCK						    134 LOAD_FAST 5 ( j )					  
							      >> 136 JUMP_ABSOLUTE 36					    136 STORE_SUBSCR						  
							      >> 138 POP_BLOCK						    138 JUMP_ABSOLUTE 54					  
							      								    >> 140 POP_BLOCK						  
							      9 >> 140 LOAD_GLOBAL 0 ( np )				    >> 142 JUMP_ABSOLUTE 36					  
							      142 LOAD_METHOD 1 ( zeros )				    >> 144 POP_BLOCK						  
							      144 LOAD_FAST 1 ( K )					    								  
							      146 LOAD_CONST 1 ( 1 )					    9 >> 146 LOAD_GLOBAL 0 ( np )				  
							      148 BINARY_ADD						    148 LOAD_METHOD 1 ( zeros )					  
							      150 CALL_METHOD 1						    150 LOAD_FAST 1 ( K )					  
							      152 STORE_FAST 6 ( dp )					    152 LOAD_CONST 1 ( 1 )					  
							      								    154 BINARY_ADD						  
							      10 154 LOAD_CONST 2 ( 0 )					    156 CALL_METHOD 1						  
							      156 STORE_FAST 7 ( count )				    158 STORE_FAST 6 ( dp )					  
							      								    								  
							      11 158 LOAD_CONST 1 ( 1 )					    10 160 LOAD_CONST 2 ( 0 )					  
							      160 LOAD_FAST 6 ( dp )					    162 STORE_FAST 7 ( count )					  
							      162 LOAD_CONST 2 ( 0 )					    								  
							      164 STORE_SUBSCR						    11 164 LOAD_FAST 6 ( dp )					  
							      								    166 LOAD_CONST 2 ( 0 )					  
							      12 166 SETUP_LOOP 76 ( to 244 )				    168 STORE_SUBSCR						  
							      168 LOAD_GLOBAL 2 ( range )				    								  
							      170 LOAD_FAST 1 ( K )					    12 170 SETUP_LOOP 72 ( to 206 )				  
							      172 CALL_FUNCTION 1					    172 LOAD_GLOBAL 2 ( range )					  
							      174 GET_ITER						    174 LOAD_FAST 1 ( K )					  
							      >> 176 FOR_ITER 64 ( to 242 )				    176 CALL_FUNCTION 1						  
							      178 STORE_FAST 4 ( i )					    178 GET_ITER						  
							      								    >> 180 FOR_ITER 56 ( to 204 )				  
							      13 180 LOAD_FAST 6 ( dp )					    182 STORE_FAST 4 ( i )					  
							      182 LOAD_FAST 4 ( i )					    								  
							      184 BINARY_SUBSCR						    13 184 LOAD_FAST 6 ( dp )					  
							      186 LOAD_FAST 3 ( C )					    186 LOAD_FAST 4 ( i )					  
							      188 LOAD_FAST 7 ( count )					    188 BINARY_SUBSCR						  
							      190 LOAD_FAST 2 ( k )					    190 LOAD_FAST 3 ( C )					  
							      192 LOAD_FAST 4 ( i )					    192 LOAD_FAST 7 ( count )					  
							      194 BINARY_SUBSCR						    194 LOAD_FAST 5 ( k )					  
							      196 BINARY_ADD						    196 LOAD_FAST 4 ( i )					  
							      198 LOAD_CONST 1 ( 1 )					    198 BINARY_SUBSCR						  
							      200 BINARY_SUBTRACT					    200 LOAD_CONST 1 ( 1 )					  
							      202 BINARY_SUBSCR						    202 BINARY_SUBTRACT						  
							      204 LOAD_FAST 2 ( k )					    204 BINARY_SUBSCR						  
							      206 LOAD_FAST 4 ( i )					    206 LOAD_FAST 5 ( k )					  
							      208 BINARY_SUBSCR						    208 LOAD_FAST 4 ( i )					  
							      210 LOAD_CONST 1 ( 1 )					    210 BINARY_SUBSCR						  
							      212 BINARY_SUBTRACT					    212 LOAD_CONST 1 ( 1 )					  
							      214 BINARY_SUBSCR						    214 BINARY_SUBTRACT						  
							      216 BINARY_MULTIPLY					    216 BINARY_SUBSCR						  
							      218 LOAD_FAST 6 ( dp )					    218 BINARY_MULTIPLY						  
							      220 LOAD_FAST 4 ( i )					    220 LOAD_FAST 6 ( dp )					  
							      222 LOAD_CONST 1 ( 1 )					    222 LOAD_FAST 4 ( i )					  
							      224 BINARY_ADD						    224 BINARY_SUBSCR						  
							      226 STORE_SUBSCR						    226 LOAD_CONST 1 ( 1 )					  
							      								    228 BINARY_SUBTRACT						  
							      14 228 LOAD_FAST 7 ( count )				    230 STORE_SUBSCR						  
							      230 LOAD_FAST 2 ( k )					    								  
							      232 LOAD_FAST 4 ( i )					    14 232 LOAD_FAST 7 ( count )				  
							      234 BINARY_SUBSCR						    234 LOAD_FAST 5 ( k )					  
							      236 INPLACE_ADD						    236 LOAD_FAST 4 ( i )					  
							      238 STORE_FAST 7 ( count )				    238 BINARY_SUBSCR						  
							      240 JUMP_ABSOLUTE 176					    240 INPLACE_ADD						  
							      >> 242 POP_BLOCK						    242 STORE_FAST 7 ( count )					  
							      								    >> 244 LOAD_FAST 6 ( dp )					  
							      15 >> 244 LOAD_FAST 6 ( dp )				    246 LOAD_FAST 1 ( K )					  
							      246 LOAD_FAST 1 ( K )					    248 BINARY_SUBSCR						  
							      248 BINARY_SUBSCR						    250 RETURN_VALUE NEW_LINE					  
							      250 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES      PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	    PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	  PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES
--							      --							    --								  --
def constructTree ( n , d , h ) :			      Disassembly of <code object constructTree at 0x7f33e26494b0,  Disassembly of <code object constructTree at 0x7f2b0163dc90,  script_not_found : None
    if d == 1 :						      2 0 LOAD_FAST 1 ( d )					    2 0 LOAD_FAST 1 ( d )					  
	if n == 2 and h == 1 :				      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
	    print ( "1 2" )				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	    return 0					      6 POP_JUMP_IF_FALSE 48					    6 POP_JUMP_IF_FALSE 38					  
	print ( "-1" )					      								    								  
	return 0					      3 8 LOAD_FAST 0 ( n )					    3 8 LOAD_FAST 0 ( n )					  
    if d > 2 * h :					      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
	print ( "-1" )					      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	return 0					      14 POP_JUMP_IF_FALSE 36					    14 POP_JUMP_IF_FALSE 38					  
    for i in range ( 1 , h + 1 ) :			      16 LOAD_FAST 2 ( h )					    16 LOAD_FAST 2 ( h )					  
	print ( i , " " , i + 1 )			      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
    if d > h :						      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
	print ( 1 , "  " , h + 2 )			      22 POP_JUMP_IF_FALSE 36					    22 POP_JUMP_IF_FALSE 38					  
	for i in range ( h + 2 , d + 1 ) :		      								    								  
	    print ( i , " " , i + 1 )			      4 24 LOAD_GLOBAL 0 ( print )				    4 24 LOAD_GLOBAL 0 ( print )				  
    for i in range ( d + 1 , n ) :			      26 LOAD_CONST 3 ( '1 2' )					    26 LOAD_CONST 3 ( "1 2" )					  
	k = 1						      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
	if d == h :					      30 POP_TOP						    30 POP_TOP							  
	    k = 2					      								    								  
	print ( k , " " , i + 1 )			      5 32 LOAD_CONST 4 ( 0 )					    5 32 LOAD_CONST 4 ( 0 )					  
							      34 RETURN_VALUE						    34 RETURN_VALUE						  
							      								    								  
							      6 >> 36 LOAD_GLOBAL 0 ( print )				    6 >> 36 LOAD_GLOBAL 0 ( print )				  
							      38 LOAD_CONST 5 ( '-1' )					    38 LOAD_CONST 5 ( '-1' )					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 POP_TOP						    42 POP_TOP							  
							      								    								  
							      7 44 LOAD_CONST 4 ( 0 )					    7 44 LOAD_CONST 4 ( 0 )					  
							      46 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      8 >> 48 LOAD_FAST 1 ( d )					    8 >> 48 LOAD_FAST 1 ( d )					  
							      50 LOAD_CONST 2 ( 2 )					    50 LOAD_CONST 2 ( 2 )					  
							      52 LOAD_FAST 2 ( h )					    52 LOAD_FAST 2 ( h )					  
							      54 BINARY_MULTIPLY					    54 BINARY_MULTIPLY						  
							      56 COMPARE_OP 4 ( > )					    56 COMPARE_OP 4 ( > )					  
							      58 POP_JUMP_IF_FALSE 72					    58 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      9 60 LOAD_GLOBAL 0 ( print )				    9 60 LOAD_GLOBAL 0 ( print )				  
							      62 LOAD_CONST 5 ( '-1' )					    62 LOAD_CONST 6 ( '-1' )					  
							      64 CALL_FUNCTION 1					    64 CALL_FUNCTION 1						  
							      66 POP_TOP						    66 POP_TOP							  
							      								    								  
							      10 68 LOAD_CONST 4 ( 0 )					    10 68 LOAD_CONST 4 ( 0 )					  
							      70 RETURN_VALUE						    70 RETURN_VALUE						  
							      								    								  
							      11 >> 72 SETUP_LOOP 38 ( to 112 )				    11 >> 72 SETUP_LOOP 32 ( to 108 )				  
							      74 LOAD_GLOBAL 1 ( range )				    74 LOAD_GLOBAL 1 ( range )					  
							      76 LOAD_CONST 1 ( 1 )					    76 LOAD_CONST 1 ( 1 )					  
							      78 LOAD_FAST 2 ( h )					    78 LOAD_FAST 2 ( h )					  
							      80 LOAD_CONST 1 ( 1 )					    80 LOAD_CONST 1 ( 1 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 CALL_FUNCTION 2					    84 CALL_FUNCTION 2						  
							      86 GET_ITER						    86 GET_ITER							  
							      >> 88 FOR_ITER 20 ( to 110 )				    >> 88 FOR_ITER 18 ( to 106 )				  
							      90 STORE_FAST 3 ( i )					    90 STORE_FAST 3 ( i )					  
							      								    								  
							      12 92 LOAD_GLOBAL 0 ( print )				    12 92 LOAD_GLOBAL 0 ( print )				  
							      94 LOAD_FAST 3 ( i )					    94 LOAD_FAST 3 ( i )					  
							      96 LOAD_CONST 6 ( ' ' )					    96 LOAD_CONST 7 ( ' ' )					  
							      98 LOAD_FAST 3 ( i )					    98 LOAD_FAST 3 ( i )					  
							      100 LOAD_CONST 1 ( 1 )					    100 LOAD_CONST 1 ( 1 )					  
							      102 BINARY_ADD						    102 BINARY_ADD						  
							      104 CALL_FUNCTION 3					    104 CALL_FUNCTION 3						  
							      106 POP_TOP						    106 POP_TOP							  
							      108 JUMP_ABSOLUTE 88					    108 JUMP_ABSOLUTE 88					  
							      >> 110 POP_BLOCK						    >> 110 POP_BLOCK						  
							      								    								  
							      13 >> 112 LOAD_FAST 1 ( d )				    13 >> 112 LOAD_FAST 1 ( d )					  
							      114 LOAD_FAST 2 ( h )					    114 LOAD_FAST 2 ( h )					  
							      116 COMPARE_OP 4 ( > )					    116 COMPARE_OP 4 ( > )					  
							      118 POP_JUMP_IF_FALSE 180					    118 POP_JUMP_IF_FALSE 174					  
							      								    								  
							      14 120 LOAD_GLOBAL 0 ( print )				    14 120 LOAD_GLOBAL 0 ( print )				  
							      122 LOAD_CONST 1 ( 1 )					    122 LOAD_CONST 1 ( 1 )					  
							      124 LOAD_CONST 7 ( '  ' )					    124 LOAD_CONST 7 ( '  ' )					  
							      126 LOAD_FAST 2 ( h )					    126 LOAD_FAST 2 ( h )					  
							      128 LOAD_CONST 2 ( 2 )					    128 LOAD_CONST 2 ( 2 )					  
							      130 BINARY_ADD						    130 BINARY_ADD						  
							      132 CALL_FUNCTION 3					    132 CALL_FUNCTION 3						  
							      134 POP_TOP						    134 POP_TOP							  
							      								    								  
							      15 136 SETUP_LOOP 42 ( to 180 )				    15 136 SETUP_LOOP 32 ( to 166 )				  
							      138 LOAD_GLOBAL 1 ( range )				    138 LOAD_GLOBAL 1 ( range )					  
							      140 LOAD_FAST 2 ( h )					    140 LOAD_FAST 2 ( h )					  
							      142 LOAD_CONST 2 ( 2 )					    142 LOAD_CONST 2 ( 2 )					  
							      144 BINARY_ADD						    144 BINARY_ADD						  
							      146 LOAD_FAST 1 ( d )					    146 LOAD_FAST 1 ( d )					  
							      148 LOAD_CONST 1 ( 1 )					    148 LOAD_CONST 1 ( 1 )					  
							      150 BINARY_ADD						    150 BINARY_ADD						  
							      152 CALL_FUNCTION 2					    152 CALL_FUNCTION 2						  
							      154 GET_ITER						    154 GET_ITER						  
							      >> 156 FOR_ITER 20 ( to 178 )				    >> 156 FOR_ITER 18 ( to 164 )				  
							      158 STORE_FAST 3 ( i )					    158 STORE_FAST 3 ( i )					  
							      								    								  
							      16 160 LOAD_GLOBAL 0 ( print )				    16 160 LOAD_GLOBAL 0 ( print )				  
							      162 LOAD_FAST 3 ( i )					    162 LOAD_FAST 3 ( i )					  
							      164 LOAD_CONST 6 ( ' ' )					    164 LOAD_CONST 7 ( ' ' )					  
							      166 LOAD_FAST 3 ( i )					    166 LOAD_FAST 3 ( i )					  
							      168 LOAD_CONST 1 ( 1 )					    168 LOAD_CONST 1 ( 1 )					  
							      170 BINARY_ADD						    170 BINARY_ADD						  
							      172 CALL_FUNCTION 3					    172 CALL_FUNCTION 3						  
							      174 POP_TOP						    174 POP_TOP							  
							      176 JUMP_ABSOLUTE 156					    176 JUMP_ABSOLUTE 156					  
							      >> 178 POP_BLOCK						    >> 178 POP_BLOCK						  
							      								    								  
							      17 >> 180 SETUP_LOOP 54 ( to 236 )			    17 >> 180 SETUP_LOOP 24 ( to 186 )				  
							      182 LOAD_GLOBAL 1 ( range )				    182 LOAD_GLOBAL 1 ( range )					  
							      184 LOAD_FAST 1 ( d )					    184 LOAD_FAST 1 ( d )					  
							      186 LOAD_CONST 1 ( 1 )					    186 LOAD_CONST 1 ( 1 )					  
							      188 BINARY_ADD						    188 BINARY_ADD						  
							      190 LOAD_FAST 0 ( n )					    190 LOAD_FAST 0 ( n )					  
							      192 CALL_FUNCTION 2					    192 CALL_FUNCTION 2						  
							      194 GET_ITER						    194 GET_ITER						  
							      >> 196 FOR_ITER 36 ( to 234 )				    >> 196 FOR_ITER 18 ( to 184 )				  
							      198 STORE_FAST 3 ( i )					    198 STORE_FAST 3 ( i )					  
							      								    								  
							      18 200 LOAD_CONST 1 ( 1 )					    18 200 LOAD_CONST 1 ( 1 )					  
							      202 STORE_FAST 4 ( k )					    202 STORE_FAST 4 ( k )					  
							      								    								  
							      19 204 LOAD_FAST 1 ( d )					    19 204 LOAD_FAST 1 ( d )					  
							      206 LOAD_FAST 2 ( h )					    206 LOAD_FAST 2 ( h )					  
							      208 COMPARE_OP 2 ( == )					    208 COMPARE_OP 2 ( == )					  
							      210 POP_JUMP_IF_FALSE 216					    210 POP_JUMP_IF_FALSE 216					  
							      								    								  
							      20 212 LOAD_CONST 2 ( 2 )					    20 212 LOAD_CONST 2 ( 2 )					  
							      214 STORE_FAST 4 ( k )					    214 STORE_FAST 4 ( k )					  
							      								    								  
							      21 >> 216 LOAD_GLOBAL 0 ( print )				    21 >> 216 LOAD_GLOBAL 0 ( print )				  
							      218 LOAD_FAST 4 ( k )					    218 LOAD_FAST 4 ( k )					  
							      220 LOAD_CONST 6 ( ' ' )					    220 LOAD_CONST 7 ( ' ' )					  
							      222 LOAD_FAST 3 ( i )					    222 LOAD_FAST 3 ( i )					  
							      224 LOAD_CONST 1 ( 1 )					    224 LOAD_CONST 1 ( 1 )					  
							      226 BINARY_ADD						    226 BINARY_ADD						  
							      228 CALL_FUNCTION 3					    228 CALL_FUNCTION 3						  
							      230 POP_TOP						    230 POP_TOP							  
							      232 JUMP_ABSOLUTE 196					    232 JUMP_ABSOLUTE 196					  
							      >> 234 POP_BLOCK						    >> 234 POP_BLOCK						  
							      >> 236 LOAD_CONST 0 ( None )				    >> 236 LOAD_CONST 0 ( None )				  
							      238 RETURN_VALUE NEW_LINE					    238 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	      EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	    EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING		  EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING
--							      --							    --								  --
def evaluateBoolExpr ( s ) :				      Disassembly of <code object evaluateBoolExpr at 0x7f33e2653f6 Disassembly of <code object evaluateBoolExpr at 0x7f2b0163dc9 script_not_found : None
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for i in range ( 0 , n - 2 , 2 ) :			      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  
	if ( s [ i + 1 ] == "A" ) :			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    if ( s [ i + 2 ] == "0" or s [ i ] == "0" ) :     6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
		s [ i + 2 ] = "0"			      								    								  
	    else :					      3 8 SETUP_LOOP 214 ( to 224 )				    3 8 SETUP_LOOP 162 ( to 172 )				  
		s [ i + 2 ] = "1"			      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
	elif ( s [ i + 1 ] == "B" ) :			      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
	    if ( s [ i + 2 ] == "1" or s [ i ] == "1" ) :     14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
		s [ i + 2 ] = "1"			      16 LOAD_CONST 2 ( 2 )					    16 LOAD_CONST 2 ( 2 )					  
	    else :					      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
		s [ i + 2 ] = "0"			      20 LOAD_CONST 2 ( 2 )					    20 LOAD_CONST 2 ( 2 )					  
	else :						      22 CALL_FUNCTION 3					    22 CALL_FUNCTION 3						  
	    if ( s [ i + 2 ] == s [ i ] ) :		      24 GET_ITER						    24 GET_ITER							  
		s [ i + 2 ] = "0"			      >> 26 FOR_ITER 194 ( to 222 )				    >> 26 FOR_ITER 138 ( to 170 )				  
	    else :					      28 STORE_FAST 2 ( i )					    28 STORE_FAST 2 ( i )					  
		s [ i + 2 ] = "1"			      								    								  
    return ord ( s [ n - 1 ] ) - ord ( "0" )		      4 30 LOAD_FAST 0 ( s )					    4 30 LOAD_FAST 0 ( s )					  
							      32 LOAD_FAST 2 ( i )					    32 LOAD_FAST 2 ( i )					  
							      34 LOAD_CONST 3 ( 1 )					    34 LOAD_CONST 3 ( 1 )					  
							      36 BINARY_ADD						    36 BINARY_ADD						  
							      38 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      40 LOAD_CONST 4 ( 'A' )					    40 LOAD_CONST 4 ( 'A' )					  
							      42 COMPARE_OP 2 ( == )					    42 COMPARE_OP 2 ( == )					  
							      44 POP_JUMP_IF_FALSE 102					    44 POP_JUMP_IF_FALSE 98					  
							      								    								  
							      5 46 LOAD_FAST 0 ( s )					    5 46 LOAD_FAST 0 ( s )					  
							      48 LOAD_FAST 2 ( i )					    48 LOAD_FAST 2 ( i )					  
							      50 LOAD_CONST 2 ( 2 )					    50 LOAD_CONST 2 ( 2 )					  
							      52 BINARY_ADD						    52 BINARY_ADD						  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 5 ( '0' )					    56 LOAD_CONST 5 ( '0' )					  
							      58 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_TRUE 74					    60 POP_JUMP_IF_TRUE 74					  
							      62 LOAD_FAST 0 ( s )					    62 LOAD_FAST 0 ( s )					  
							      64 LOAD_FAST 2 ( i )					    64 LOAD_FAST 2 ( i )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_CONST 5 ( '0' )					    68 LOAD_CONST 5 ( '0' )					  
							      70 COMPARE_OP 2 ( == )					    70 COMPARE_OP 2 ( == )					  
							      72 POP_JUMP_IF_FALSE 88					    72 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      6 >> 74 LOAD_CONST 5 ( '0' )				    6 >> 74 LOAD_CONST 5 ( '0' )				  
							      76 LOAD_FAST 0 ( s )					    76 LOAD_FAST 0 ( s )					  
							      78 LOAD_FAST 2 ( i )					    78 LOAD_FAST 2 ( i )					  
							      80 LOAD_CONST 2 ( 2 )					    80 LOAD_CONST 2 ( 2 )					  
							      82 BINARY_ADD						    82 BINARY_ADD						  
							      84 STORE_SUBSCR						    84 STORE_SUBSCR						  
							      86 JUMP_ABSOLUTE 220					    86 JUMP_ABSOLUTE 26						  
							      								    								  
							      8 >> 88 LOAD_CONST 6 ( '1' )				    8 >> 88 LOAD_CONST 5 ( '0' )				  
							      90 LOAD_FAST 0 ( s )					    90 LOAD_FAST 0 ( s )					  
							      92 LOAD_FAST 2 ( i )					    92 LOAD_FAST 2 ( i )					  
							      94 LOAD_CONST 2 ( 2 )					    94 LOAD_CONST 2 ( 2 )					  
							      96 BINARY_ADD						    96 BINARY_ADD						  
							      98 STORE_SUBSCR						    98 STORE_SUBSCR						  
							      100 JUMP_ABSOLUTE 26					    100 JUMP_ABSOLUTE 26					  
							      								    								  
							      9 >> 102 LOAD_FAST 0 ( s )				    9 >> 102 LOAD_FAST 0 ( s )					  
							      104 LOAD_FAST 2 ( i )					    104 LOAD_FAST 2 ( i )					  
							      106 LOAD_CONST 3 ( 1 )					    106 LOAD_CONST 3 ( 1 )					  
							      108 BINARY_ADD						    108 BINARY_ADD						  
							      110 BINARY_SUBSCR						    110 BINARY_SUBSCR						  
							      112 LOAD_CONST 7 ( 'B' )					    112 LOAD_CONST 6 ( 'B' )					  
							      114 COMPARE_OP 2 ( == )					    114 COMPARE_OP 2 ( == )					  
							      116 POP_JUMP_IF_FALSE 174					    116 POP_JUMP_IF_FALSE 166					  
							      								    								  
							      10 118 LOAD_FAST 0 ( s )					    10 118 LOAD_FAST 0 ( s )					  
							      120 LOAD_FAST 2 ( i )					    120 LOAD_FAST 2 ( i )					  
							      122 LOAD_CONST 2 ( 2 )					    122 LOAD_CONST 2 ( 2 )					  
							      124 BINARY_ADD						    124 BINARY_ADD						  
							      126 BINARY_SUBSCR						    126 BINARY_SUBSCR						  
							      128 LOAD_CONST 6 ( '1' )					    128 LOAD_CONST 5 ( '1' )					  
							      130 COMPARE_OP 2 ( == )					    130 COMPARE_OP 2 ( == )					  
							      132 POP_JUMP_IF_TRUE 146					    132 POP_JUMP_IF_TRUE 138					  
							      134 LOAD_FAST 0 ( s )					    134 LOAD_FAST 0 ( s )					  
							      136 LOAD_FAST 2 ( i )					    136 LOAD_FAST 2 ( i )					  
							      138 BINARY_SUBSCR						    138 BINARY_SUBSCR						  
							      140 LOAD_CONST 6 ( '1' )					    140 LOAD_CONST 5 ( '1' )					  
							      142 COMPARE_OP 2 ( == )					    142 COMPARE_OP 2 ( == )					  
							      144 POP_JUMP_IF_FALSE 160					    144 POP_JUMP_IF_FALSE 158					  
							      								    								  
							      11 >> 146 LOAD_CONST 6 ( '1' )				    11 >> 146 LOAD_CONST 5 ( '1' )				  
							      148 LOAD_FAST 0 ( s )					    148 LOAD_FAST 0 ( s )					  
							      150 LOAD_FAST 2 ( i )					    150 LOAD_FAST 2 ( i )					  
							      152 LOAD_CONST 2 ( 2 )					    152 LOAD_CONST 2 ( 2 )					  
							      154 BINARY_ADD						    154 BINARY_ADD						  
							      156 STORE_SUBSCR						    156 STORE_SUBSCR						  
							      158 JUMP_ABSOLUTE 220					    								  
							      								    12 158 LOAD_CONST 5 ( '0' )					  
							      13 >> 160 LOAD_CONST 5 ( '0' )				    160 LOAD_FAST 0 ( s )					  
							      162 LOAD_FAST 0 ( s )					    162 LOAD_FAST 2 ( i )					  
							      164 LOAD_FAST 2 ( i )					    164 LOAD_CONST 2 ( 2 )					  
							      166 LOAD_CONST 2 ( 2 )					    166 BINARY_ADD						  
							      168 BINARY_ADD						    168 STORE_SUBSCR						  
							      170 STORE_SUBSCR						    164 JUMP_ABSOLUTE 26					  
							      172 JUMP_ABSOLUTE 26					    								  
							      								    14 >> 166 LOAD_CONST 5 ( '0' )				  
							      15 >> 174 LOAD_FAST 0 ( s )				    168 LOAD_FAST 0 ( s )					  
							      176 LOAD_FAST 2 ( i )					    170 LOAD_FAST 2 ( i )					  
							      178 LOAD_CONST 2 ( 2 )					    172 LOAD_CONST 2 ( 2 )					  
							      180 BINARY_ADD						    174 BINARY_ADD						  
							      182 BINARY_SUBSCR						    176 STORE_SUBSCR						  
							      184 LOAD_FAST 0 ( s )					    >> 178 JUMP_ABSOLUTE 26					  
							      186 LOAD_FAST 2 ( i )					    180 POP_BLOCK						  
							      188 BINARY_SUBSCR						    								  
							      190 COMPARE_OP 2 ( == )					    16 >> 182 LOAD_FAST 0 ( s )					  
							      192 POP_JUMP_IF_FALSE 208					    184 LOAD_FAST 2 ( i )					  
							      								    186 LOAD_CONST 2 ( 2 )					  
							      16 194 LOAD_CONST 5 ( '0' )				    188 BINARY_ADD						  
							      196 LOAD_FAST 0 ( s )					    190 BINARY_SUBSCR						  
							      198 LOAD_FAST 2 ( i )					    192 LOAD_FAST 0 ( s )					  
							      200 LOAD_CONST 2 ( 2 )					    194 LOAD_FAST 2 ( i )					  
							      202 BINARY_ADD						    196 BINARY_SUBSCR						  
							      204 STORE_SUBSCR						    198 COMPARE_OP 2 ( == )					  
							      206 JUMP_ABSOLUTE 26					    200 POP_JUMP_IF_FALSE 210					  
							      								    								  
							      18 >> 208 LOAD_CONST 6 ( '1' )				    17 202 LOAD_CONST 5 ( '0' )					  
							      210 LOAD_FAST 0 ( s )					    204 LOAD_FAST 0 ( s )					  
							      212 LOAD_FAST 2 ( i )					    206 LOAD_FAST 2 ( i )					  
							      214 LOAD_CONST 2 ( 2 )					    208 LOAD_CONST 2 ( 2 )					  
							      216 BINARY_ADD						    210 BINARY_ADD						  
							      218 STORE_SUBSCR						    212 STORE_SUBSCR						  
							      >> 220 JUMP_ABSOLUTE 26					    								  
							      >> 222 POP_BLOCK						    18 214 LOAD_CONST 5 ( '0' )					  
							      								    216 LOAD_FAST 0 ( s )					  
							      19 >> 224 LOAD_GLOBAL 2 ( ord )				    218 LOAD_FAST 2 ( i )					  
							      226 LOAD_FAST 0 ( s )					    220 LOAD_CONST 2 ( 2 )					  
							      228 LOAD_FAST 1 ( n )					    222 BINARY_ADD						  
							      230 LOAD_CONST 3 ( 1 )					    224 STORE_SUBSCR						  
							      232 BINARY_SUBTRACT					    								  
							      234 BINARY_SUBSCR						    19 226 LOAD_CONST 5 ( '1' )					  
							      236 CALL_FUNCTION 1					    228 LOAD_FAST 0 ( s )					  
							      238 LOAD_GLOBAL 2 ( ord )					    230 LOAD_FAST 2 ( i )					  
							      240 LOAD_CONST 5 ( '0' )					    232 LOAD_CONST 2 ( 2 )					  
							      242 CALL_FUNCTION 1					    234 BINARY_ADD						  
							      244 BINARY_SUBTRACT					    236 STORE_SUBSCR						  
							      246 RETURN_VALUE NEW_LINE					    								  
							      								    20 >> 238 LOAD_GLOBAL 2 ( ord )				  
							      								    240 LOAD_FAST 0 ( s )					  
							      								    242 LOAD_FAST 1 ( n )					  
							      								    244 LOAD_CONST 3 ( 1 )					  
							      								    246 BINARY_ADD						  
							      								    248 BINARY_SUBSCR						  
							      								    250 CALL_FUNCTION 1						  
							      								    252 LOAD_GLOBAL 2 ( ord )					  
							      								    254 LOAD_CONST 5 ( '0' )					  
							      								    256 CALL_FUNCTION 1						  
							      								    258 BINARY_SUBTRACT						  
							      								    260 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			      MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			    MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY				  MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY
--							      --							    --								  --
def largestSumOfAverages ( A , K ) :			      Disassembly of <code object largestSumOfAverages at 0x7f33e26 Disassembly of <code object largestSumOfAverages at 0x7f2b016 error : Traceback (most recent call last):   File
    n = len ( A ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    pre_sum = [ 0 ] * ( n + 1 ) ;			      2 LOAD_FAST 0 ( A )					    2 LOAD_FAST 0 ( A )						  (item)   File "main.py", line 41, in <module> Type
    pre_sum [ 0 ] = 0 ;					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  Error: bad operand type for abs(): 'NoneType'
    for i in range ( n ) :				      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  
	pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;	      								    								  
    dp = [ 0 ] * n ;					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
    sum = 0 ;						      10 BUILD_LIST 1						    10 BUILD_LIST 1						  
    for i in range ( n ) :				      12 LOAD_FAST 2 ( n )					    12 LOAD_FAST 2 ( n )					  
	dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n -  14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
    for k in range ( K - 1 ) :				      16 BINARY_ADD						    16 BINARY_ADD						  
	for i in range ( n ) :				      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
	    for j in range ( i + 1 , n ) :		      20 STORE_FAST 3 ( pre_sum )				    20 STORE_FAST 3 ( pre_sum )					  
		dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - 								    								  
    return int ( dp [ 0 ] ) ;				      4 22 LOAD_CONST 1 ( 0 )					    4 22 LOAD_CONST 1 ( 0 )					  
							      24 LOAD_FAST 3 ( pre_sum )				    24 LOAD_FAST 3 ( pre_sum )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 STORE_SUBSCR						    28 STORE_SUBSCR						  
							      								    								  
							      5 30 SETUP_LOOP 40 ( to 72 )				    5 30 SETUP_LOOP 40 ( to 74 )				  
							      32 LOAD_GLOBAL 1 ( range )				    32 LOAD_GLOBAL 1 ( range )					  
							      34 LOAD_FAST 2 ( n )					    34 LOAD_FAST 2 ( n )					  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 28 ( to 70 )				    >> 40 FOR_ITER 28 ( to 72 )					  
							      42 STORE_FAST 4 ( i )					    42 STORE_FAST 4 ( i )					  
							      								    								  
							      6 44 LOAD_FAST 3 ( pre_sum )				    6 44 LOAD_FAST 3 ( pre_sum )				  
							      46 LOAD_FAST 4 ( i )					    46 LOAD_FAST 4 ( i )					  
							      48 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 0 ( A )					    50 LOAD_FAST 0 ( A )					  
							      52 LOAD_FAST 4 ( i )					    52 LOAD_FAST 4 ( i )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 BINARY_ADD						    56 BINARY_ADD						  
							      58 LOAD_FAST 3 ( pre_sum )				    58 LOAD_FAST 3 ( pre_sum )					  
							      60 LOAD_FAST 4 ( i )					    60 LOAD_FAST 4 ( i )					  
							      62 LOAD_CONST 2 ( 1 )					    62 LOAD_CONST 2 ( 1 )					  
							      64 BINARY_ADD						    64 BINARY_ADD						  
							      66 STORE_SUBSCR						    66 STORE_SUBSCR						  
							      68 JUMP_ABSOLUTE 40					    68 JUMP_ABSOLUTE 40						  
							      >> 70 POP_BLOCK						    70 POP_BLOCK						  
							      								    >> 72 LOAD_CONST 0 ( None )					  
							      7 >> 72 LOAD_CONST 1 ( 0 )				    >> 74 RETURN_VALUE NEW_LINE					  
							      74 BUILD_LIST 1						    								  
							      76 LOAD_FAST 2 ( n )					    								  
							      78 BINARY_MULTIPLY					    								  
							      80 STORE_FAST 5 ( dp )					    								  
							      								    								  
							      8 82 LOAD_CONST 1 ( 0 )					    								  
							      84 STORE_FAST 6 ( sum )					    								  
							      								    								  
							      9 86 SETUP_LOOP 44 ( to 132 )				    								  
							      88 LOAD_GLOBAL 1 ( range )				    								  
							      90 LOAD_FAST 2 ( n )					    								  
							      92 CALL_FUNCTION 1					    								  
							      94 GET_ITER						    								  
							      >> 96 FOR_ITER 32 ( to 130 )				    								  
							      98 STORE_FAST 4 ( i )					    								  
							      								    								  
							      10 100 LOAD_FAST 3 ( pre_sum )				    								  
							      102 LOAD_FAST 2 ( n )					    								  
							      104 BINARY_SUBSCR						    								  
							      106 LOAD_FAST 3 ( pre_sum )				    								  
							      108 LOAD_FAST 4 ( i )					    								  
							      110 BINARY_SUBSCR						    								  
							      112 BINARY_SUBTRACT					    								  
							      114 LOAD_FAST 2 ( n )					    								  
							      116 LOAD_FAST 4 ( i )					    								  
							      118 BINARY_SUBTRACT					    								  
							      120 BINARY_TRUE_DIVIDE					    								  
							      122 LOAD_FAST 5 ( dp )					    								  
							      124 LOAD_FAST 4 ( i )					    								  
							      126 STORE_SUBSCR						    								  
							      128 JUMP_ABSOLUTE 96					    								  
							      >> 130 POP_BLOCK						    								  
							      								    								  
							      11 >> 132 SETUP_LOOP 108 ( to 242 )			    								  
							      134 LOAD_GLOBAL 1 ( range )				    								  
							      136 LOAD_FAST 1 ( K )					    								  
							      138 LOAD_CONST 2 ( 1 )					    								  
							      140 BINARY_SUBTRACT					    								  
							      142 CALL_FUNCTION 1					    								  
							      144 GET_ITER						    								  
							      >> 146 FOR_ITER 92 ( to 240 )				    								  
							      148 STORE_FAST 7 ( k )					    								  
							      								    								  
							      12 150 SETUP_LOOP 86 ( to 238 )				    								  
							      152 LOAD_GLOBAL 1 ( range )				    								  
							      154 LOAD_FAST 2 ( n )					    								  
							      156 CALL_FUNCTION 1					    								  
							      158 GET_ITER						    								  
							      >> 160 FOR_ITER 74 ( to 236 )				    								  
							      162 STORE_FAST 4 ( i )					    								  
							      								    								  
							      13 164 SETUP_LOOP 68 ( to 234 )				    								  
							      166 LOAD_GLOBAL 1 ( range )				    								  
							      168 LOAD_FAST 4 ( i )					    								  
							      170 LOAD_CONST 2 ( 1 )					    								  
							      172 BINARY_ADD						    								  
							      174 LOAD_FAST 2 ( n )					    								  
							      176 CALL_FUNCTION 2					    								  
							      178 GET_ITER						    								  
							      >> 180 FOR_ITER 50 ( to 232 )				    								  
							      182 STORE_FAST 8 ( j )					    								  
							      								    								  
							      14 184 LOAD_GLOBAL 2 ( max )				    								  
							      186 LOAD_FAST 5 ( dp )					    								  
							      188 LOAD_FAST 4 ( i )					    								  
							      190 BINARY_SUBSCR						    								  
							      192 LOAD_FAST 3 ( pre_sum )				    								  
							      194 LOAD_FAST 8 ( j )					    								  
							      196 BINARY_SUBSCR						    								  
							      198 LOAD_FAST 3 ( pre_sum )				    								  
							      200 LOAD_FAST 4 ( i )					    								  
							      202 BINARY_SUBSCR						    								  
							      204 BINARY_SUBTRACT					    								  
							      206 LOAD_FAST 8 ( j )					    								  
							      208 LOAD_FAST 4 ( i )					    								  
							      210 BINARY_SUBTRACT					    								  
							      212 BINARY_TRUE_DIVIDE					    								  
							      214 LOAD_FAST 5 ( dp )					    								  
							      216 LOAD_FAST 8 ( j )					    								  
							      218 BINARY_SUBSCR						    								  
							      220 BINARY_ADD						    								  
							      222 CALL_FUNCTION 2					    								  
							      224 LOAD_FAST 5 ( dp )					    								  
							      226 LOAD_FAST 4 ( i )					    								  
							      228 STORE_SUBSCR						    								  
							      230 JUMP_ABSOLUTE 180					    								  
							      >> 232 POP_BLOCK						    								  
							      >> 234 JUMP_ABSOLUTE 160					    								  
							      >> 236 POP_BLOCK						    								  
							      >> 238 JUMP_ABSOLUTE 146					    								  
							      >> 240 POP_BLOCK						    								  
							      								    								  
							      15 >> 242 LOAD_GLOBAL 3 ( int )				    								  
							      244 LOAD_FAST 5 ( dp )					    								  
							      246 LOAD_CONST 1 ( 0 )					    								  
							      248 BINARY_SUBSCR						    								  
							      250 CALL_FUNCTION 1					    								  
							      252 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY      COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY	    COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY	  COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY
--							      --							    --								  --
def countDistictSubarray ( arr , n ) :			      Disassembly of <code object countDistictSubarray at 0x7f33e26 Disassembly of <code object countDistictSubarray at 0x7f2b016 script_not_found : None
    vis = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	vis [ arr [ i ] ] = 1				      4 STORE_FAST 2 ( vis )					    4 STORE_FAST 2 ( vis )					  
    k = len ( vis )					      								    								  
    vid = dict ( )					      3 6 SETUP_LOOP 28 ( to 36 )				    3 6 SETUP_LOOP 26 ( to 36 )					  
    ans = 0						      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
    right = 0						      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 1 ( n )					  
    window = 0						      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
    for left in range ( n ) :				      14 GET_ITER						    14 GET_ITER							  
	while ( right < n and window < k ) :		      >> 16 FOR_ITER 16 ( to 34 )				    >> 16 FOR_ITER 12 ( to 34 )					  
	    if arr [ right ] in vid.keys ( ) :		      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
		vid [ arr [ right ] ] += 1		      								    								  
	    else :					      4 20 LOAD_CONST 1 ( 1 )					    4 20 LOAD_CONST 1 ( 1 )					  
		vid [ arr [ right ] ] = 1		      22 LOAD_FAST 2 ( vis )					    22 LOAD_FAST 2 ( vis )					  
	    if ( vid [ arr [ right ] ] == 1 ) :		      24 LOAD_FAST 0 ( arr )					    24 LOAD_FAST 0 ( arr )					  
		window += 1				      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
	    right += 1					      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
	if ( window == k ) :				      30 STORE_SUBSCR						    30 STORE_SUBSCR						  
	    ans += ( n - right + 1 )			      32 JUMP_ABSOLUTE 16					    32 JUMP_ABSOLUTE 16						  
	vid [ arr [ left ] ] -= 1			      >> 34 POP_BLOCK						    >> 34 POP_BLOCK						  
	if ( vid [ arr [ left ] ] == 0 ) :		      								    								  
	    window -= 1					      5 >> 36 LOAD_GLOBAL 2 ( len )				    5 >> 36 LOAD_GLOBAL 2 ( len )				  
    return ans						      38 LOAD_FAST 2 ( vis )					    38 LOAD_FAST 2 ( vis )					  
							      40 CALL_FUNCTION 1					    40 CALL_FUNCTION 1						  
							      42 STORE_FAST 4 ( k )					    42 STORE_FAST 4 ( k )					  
							      								    								  
							      6 44 LOAD_GLOBAL 0 ( dict )				    6 44 LOAD_GLOBAL 0 ( dict )					  
							      46 CALL_FUNCTION 0					    46 CALL_FUNCTION 0						  
							      48 STORE_FAST 5 ( vid )					    48 STORE_FAST 5 ( vid )					  
							      								    								  
							      7 50 LOAD_CONST 2 ( 0 )					    7 50 LOAD_CONST 2 ( 0 )					  
							      52 STORE_FAST 6 ( ans )					    52 STORE_FAST 6 ( right )					  
							      								    								  
							      8 54 LOAD_CONST 2 ( 0 )					    8 54 LOAD_CONST 2 ( 0 )					  
							      56 STORE_FAST 7 ( right )					    56 STORE_FAST 7 ( window )					  
							      								    								  
							      9 58 LOAD_CONST 2 ( 0 )					    9 58 SETUP_LOOP 142 ( to 194 )				  
							      60 STORE_FAST 8 ( window )				    60 LOAD_GLOBAL 1 ( range )					  
							      								    62 LOAD_FAST 1 ( n )					  
							      10 62 SETUP_LOOP 188 ( to 252 )				    64 CALL_FUNCTION 1						  
							      64 LOAD_GLOBAL 1 ( range )				    66 GET_ITER							  
							      66 LOAD_FAST 1 ( n )					    >> 68 FOR_ITER 126 ( to 192 )				  
							      68 CALL_FUNCTION 1					    70 STORE_FAST 8 ( left )					  
							      70 GET_ITER						    								  
							      >> 72 FOR_ITER 176 ( to 250 )				    10 72 SETUP_LOOP 122 ( to 190 )				  
							      74 STORE_FAST 9 ( left )					    >> 74 LOAD_FAST 6 ( right )					  
							      								    76 LOAD_FAST 1 ( n )					  
							      11 76 SETUP_LOOP 102 ( to 180 )				    78 COMPARE_OP 0 ( < )					  
							      >> 78 LOAD_FAST 7 ( right )				    80 POP_JUMP_IF_FALSE 188					  
							      80 LOAD_FAST 1 ( n )					    82 LOAD_FAST 7 ( window )					  
							      82 COMPARE_OP 0 ( < )					    84 LOAD_FAST 4 ( k )					  
							      84 POP_JUMP_IF_FALSE 178					    86 COMPARE_OP 0 ( < )					  
							      86 LOAD_FAST 8 ( window )					    88 POP_JUMP_IF_TRUE 188					  
							      88 LOAD_FAST 4 ( k )					    90 LOAD_FAST 6 ( right )					  
							      90 COMPARE_OP 0 ( < )					    92 COMPARE_OP 0 ( < )					  
							      92 POP_JUMP_IF_FALSE 178					    94 POP_JUMP_IF_FALSE 188					  
							      								    								  
							      12 94 LOAD_FAST 0 ( arr )					    11 96 LOAD_FAST 0 ( arr )					  
							      96 LOAD_FAST 7 ( right )					    98 LOAD_FAST 6 ( right )					  
							      98 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      100 LOAD_FAST 5 ( vid )					    102 LOAD_FAST 5 ( vid )					  
							      102 LOAD_METHOD 3 ( keys )				    104 LOAD_METHOD 3 ( keys )					  
							      104 CALL_METHOD 0						    106 CALL_METHOD 0						  
							      106 COMPARE_OP 6 ( in )					    108 COMPARE_OP 6 ( in )					  
							      108 POP_JUMP_IF_FALSE 132					    110 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      13 110 LOAD_FAST 5 ( vid )				    12 112 LOAD_FAST 5 ( vid )					  
							      112 LOAD_FAST 0 ( arr )					    114 LOAD_FAST 0 ( arr )					  
							      114 LOAD_FAST 7 ( right )					    116 LOAD_FAST 6 ( right )					  
							      116 BINARY_SUBSCR						    118 BINARY_SUBSCR						  
							      118 DUP_TOP_TWO						    120 DUP_TOP_TWO						  
							      120 BINARY_SUBSCR						    122 BINARY_SUBSCR						  
							      122 LOAD_CONST 1 ( 1 )					    124 LOAD_CONST 1 ( 1 )					  
							      124 INPLACE_ADD						    126 INPLACE_ADD						  
							      126 ROT_THREE						    128 ROT_THREE						  
							      128 STORE_SUBSCR						    130 STORE_SUBSCR						  
							      130 JUMP_FORWARD 12 ( to 144 )				    132 JUMP_ABSOLUTE 74					  
							      								    								  
							      15 >> 132 LOAD_CONST 1 ( 1 )				    14 >> 134 LOAD_CONST 1 ( 1 )				  
							      134 LOAD_FAST 5 ( vid )					    136 LOAD_FAST 5 ( vid )					  
							      136 LOAD_FAST 0 ( arr )					    138 LOAD_FAST 0 ( arr )					  
							      138 LOAD_FAST 7 ( right )					    140 LOAD_FAST 6 ( right )					  
							      140 BINARY_SUBSCR						    142 BINARY_SUBSCR						  
							      142 STORE_SUBSCR						    144 STORE_SUBSCR						  
							      								    								  
							      16 >> 144 LOAD_FAST 5 ( vid )				    15 146 LOAD_FAST 5 ( vid )					  
							      146 LOAD_FAST 0 ( arr )					    148 LOAD_FAST 0 ( arr )					  
							      148 LOAD_FAST 7 ( right )					    150 LOAD_FAST 6 ( right )					  
							      150 BINARY_SUBSCR						    152 BINARY_SUBSCR						  
							      152 BINARY_SUBSCR						    154 LOAD_CONST 1 ( 1 )					  
							      154 LOAD_CONST 1 ( 1 )					    156 COMPARE_OP 2 ( == )					  
							      156 COMPARE_OP 2 ( == )					    158 POP_JUMP_IF_FALSE 168					  
							      158 POP_JUMP_IF_FALSE 168					    								  
							      								    16 160 LOAD_FAST 7 ( window )				  
							      17 160 LOAD_FAST 8 ( window )				    162 LOAD_CONST 1 ( 1 )					  
							      162 LOAD_CONST 1 ( 1 )					    164 INPLACE_ADD						  
							      164 INPLACE_ADD						    166 STORE_FAST 7 ( window )					  
							      166 STORE_FAST 8 ( window )				    								  
							      								    17 >> 168 LOAD_FAST 6 ( right )				  
							      18 >> 168 LOAD_FAST 7 ( right )				    170 LOAD_CONST 1 ( 1 )					  
							      170 LOAD_CONST 1 ( 1 )					    172 INPLACE_ADD						  
							      172 INPLACE_ADD						    174 STORE_FAST 6 ( right )					  
							      174 STORE_FAST 7 ( right )				    176 JUMP_ABSOLUTE 74					  
							      176 JUMP_ABSOLUTE 78					    >> 178 POP_BLOCK						  
							      >> 178 POP_BLOCK						    								  
							      								    18 >> 180 LOAD_FAST 7 ( window )				  
							      19 >> 180 LOAD_FAST 8 ( window )				    182 LOAD_FAST 4 ( k )					  
							      182 LOAD_FAST 4 ( k )					    184 COMPARE_OP 2 ( == )					  
							      184 COMPARE_OP 2 ( == )					    186 POP_JUMP_IF_TRUE 192					  
							      186 POP_JUMP_IF_FALSE 204					    								  
							      								    19 188 LOAD_FAST 2 ( vis )					  
							      20 188 LOAD_FAST 6 ( ans )				    190 LOAD_FAST 1 ( n )					  
							      190 LOAD_FAST 1 ( n )					    192 LOAD_FAST 6 ( right )					  
							      192 LOAD_FAST 7 ( right )					    194 BINARY_SUBTRACT						  
							      194 BINARY_SUBTRACT					    196 LOAD_CONST 1 ( 1 )					  
							      196 LOAD_CONST 1 ( 1 )					    198 BINARY_ADD						  
							      198 BINARY_ADD						    200 INPLACE_ADD						  
							      200 INPLACE_ADD						    202 STORE_FAST 2 ( vis )					  
							      202 STORE_FAST 6 ( ans )					    								  
							      								    20 >> 204 LOAD_FAST 5 ( vid )				  
							      21 >> 204 LOAD_FAST 5 ( vid )				    206 LOAD_FAST 0 ( arr )					  
							      206 LOAD_FAST 0 ( arr )					    208 LOAD_FAST 8 ( left )					  
							      208 LOAD_FAST 9 ( left )					    210 BINARY_SUBSCR						  
							      210 BINARY_SUBSCR						    212 LOAD_CONST 1 ( 1 )					  
							      212 DUP_TOP_TWO						    214 INPLACE_SUBTRACT					  
							      214 BINARY_SUBSCR						    216 STORE_FAST 7 ( window )					  
							      216 LOAD_CONST 1 ( 1 )					    								  
							      218 INPLACE_SUBTRACT					    21 218 LOAD_FAST 5 ( vid )					  
							      220 ROT_THREE						    220 LOAD_FAST 0 ( arr )					  
							      222 STORE_SUBSCR						    222 LOAD_FAST 8 ( left )					  
							      								    224 BINARY_SUBSCR						  
							      22 224 LOAD_FAST 5 ( vid )				    226 LOAD_CONST 2 ( 0 )					  
							      226 LOAD_FAST 0 ( arr )					    228 COMPARE_OP 2 ( < )					  
							      228 LOAD_FAST 9 ( left )					    230 POP_JUMP_IF_FALSE 68					  
							      230 BINARY_SUBSCR						    								  
							      232 BINARY_SUBSCR						    22 232 LOAD_FAST 7 ( window )				  
							      234 LOAD_CONST 2 ( 0 )					    234 LOAD_CONST 1 ( 1 )					  
							      236 COMPARE_OP 2 ( == )					    236 INPLACE_SUBTRACT					  
							      238 POP_JUMP_IF_FALSE 72					    238 STORE_FAST 7 ( window )					  
							      								    240 JUMP_ABSOLUTE 74					  
							      23 240 LOAD_FAST 8 ( window )				    >> 242 POP_BLOCK						  
							      242 LOAD_CONST 1 ( 1 )					    								  
							      244 INPLACE_SUBTRACT					    23 >> 244 LOAD_FAST 2 ( vis )				  
							      246 STORE_FAST 8 ( window )				    246 RETURN_VALUE NEW_LINE					  
							      248 JUMP_ABSOLUTE 72					    								  
							      >> 250 POP_BLOCK						    								  
							      								    								  
							      24 >> 252 LOAD_FAST 6 ( ans )				    								  
							      254 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PR<unk> CT_SUBSET_ARRAY				      MINIMUM_PR<unk> CT_SUBSET_ARRAY				    MINIMUM_PR<unk> CT_SUBSET_ARRAY				  MINIMUM_PR<unk> CT_SUBSET_ARRAY
--							      --							    --								  --
def minProductSubset ( a , n ) :			      Disassembly of <code object minProductSubset at 0x7f33e2644f6 Disassembly of <code object minProductSubset at 0x7f2b0163dc9 script_not_found : None
    if ( n == 1 ) :					      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
	return a [ 0 ]					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    max_neg = float ( '-inf' )				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    min_pos = float ( 'inf' )				      6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 16					  
    count_neg = 0					      								    								  
    count_zero = 0					      3 8 LOAD_FAST 0 ( a )					    3 8 LOAD_FAST 0 ( a )					  
    prod = 1						      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 0 )					  
    for i in range ( 0 , n ) :				      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
	if ( a [ i ] == 0 ) :				      14 RETURN_VALUE						    14 RETURN_VALUE						  
	    count_zero = count_zero + 1			      								    								  
	    continue					      4 >> 16 LOAD_GLOBAL 0 ( float )				    4 >> 16 LOAD_GLOBAL 0 ( float )				  
	if ( a [ i ] < 0 ) :				      18 LOAD_CONST 3 ( '-inf' )				    18 LOAD_CONST 3 ( '-inf' )					  
	    count_neg = count_neg + 1			      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
	    max_neg = max ( max_neg , a [ i ] )		      22 STORE_FAST 2 ( max_neg )				    22 STORE_FAST 2 ( max_neg )					  
	if ( a [ i ] > 0 ) :				      								    								  
	    min_pos = min ( min_pos , a [ i ] )		      5 24 LOAD_GLOBAL 0 ( float )				    5 24 LOAD_GLOBAL 0 ( float )				  
	prod = prod * a [ i ]				      26 LOAD_CONST 4 ( 'inf' )					    26 LOAD_CONST 4 ( 'inf' )					  
    if ( count_zero == n or ( count_neg == 0 and count_zero > 28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
	return 0 ;					      30 STORE_FAST 3 ( min_pos )				    30 STORE_FAST 3 ( min_pos )					  
    if ( count_neg == 0 ) :				      								    								  
	return min_pos					      6 32 LOAD_CONST 2 ( 0 )					    6 32 LOAD_CONST 2 ( 0 )					  
    if ( ( count_neg & 1 ) == 0 and count_neg != 0 ) :	      34 STORE_FAST 4 ( count_neg )				    34 STORE_FAST 4 ( count_neg )				  
	prod = int ( prod / max_neg )			      								    								  
    return prod ;					      7 36 LOAD_CONST 2 ( 0 )					    7 36 LOAD_CONST 2 ( 0 )					  
							      38 STORE_FAST 5 ( count_zero )				    38 STORE_FAST 5 ( count_zero )				  
							      								    								  
							      8 40 LOAD_CONST 1 ( 1 )					    8 40 LOAD_CONST 2 ( 0 )					  
							      42 STORE_FAST 6 ( prod )					    42 STORE_FAST 6 ( count_zero )				  
							      								    								  
							      9 44 SETUP_LOOP 112 ( to 158 )				    9 44 LOAD_CONST 1 ( 1 )					  
							      46 LOAD_GLOBAL 1 ( range )				    46 STORE_FAST 7 ( prod )					  
							      48 LOAD_CONST 2 ( 0 )					    								  
							      50 LOAD_FAST 1 ( n )					    10 48 SETUP_LOOP 56 ( to 106 )				  
							      52 CALL_FUNCTION 2					    50 LOAD_GLOBAL 1 ( range )					  
							      54 GET_ITER						    52 LOAD_CONST 2 ( 0 )					  
							      >> 56 FOR_ITER 98 ( to 156 )				    54 LOAD_FAST 1 ( n )					  
							      58 STORE_FAST 7 ( i )					    56 CALL_FUNCTION 2						  
							      								    58 GET_ITER							  
							      10 60 LOAD_FAST 0 ( a )					    >> 60 FOR_ITER 44 ( to 104 )				  
							      62 LOAD_FAST 7 ( i )					    62 STORE_FAST 8 ( i )					  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_CONST 2 ( 0 )					    11 64 LOAD_FAST 0 ( a )					  
							      68 COMPARE_OP 2 ( == )					    66 LOAD_FAST 8 ( i )					  
							      70 POP_JUMP_IF_FALSE 82					    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 2 ( 0 )					  
							      11 72 LOAD_FAST 5 ( count_zero )				    72 COMPARE_OP 2 ( == )					  
							      74 LOAD_CONST 1 ( 1 )					    74 POP_JUMP_IF_FALSE 80					  
							      76 BINARY_ADD						    								  
							      78 STORE_FAST 5 ( count_zero )				    12 76 LOAD_FAST 4 ( count_zero )				  
							      								    78 LOAD_CONST 1 ( 1 )					  
							      12 80 JUMP_ABSOLUTE 56					    80 BINARY_ADD						  
							      								    82 STORE_FAST 5 ( count_zero )				  
							      13 >> 82 LOAD_FAST 0 ( a )				    								  
							      84 LOAD_FAST 7 ( i )					    13 84 JUMP_ABSOLUTE 60					  
							      86 BINARY_SUBSCR						    >> 86 POP_BLOCK						  
							      88 LOAD_CONST 2 ( 0 )					    								  
							      90 COMPARE_OP 0 ( < )					    14 >> 88 LOAD_FAST 0 ( a )					  
							      92 POP_JUMP_IF_FALSE 116					    90 LOAD_FAST 8 ( i )					  
							      								    92 BINARY_SUBSCR						  
							      14 94 LOAD_FAST 4 ( count_neg )				    94 LOAD_CONST 2 ( 0 )					  
							      96 LOAD_CONST 1 ( 1 )					    96 COMPARE_OP 0 ( < )					  
							      98 BINARY_ADD						    98 POP_JUMP_IF_FALSE 112					  
							      100 STORE_FAST 4 ( count_neg )				    								  
							      								    15 100 LOAD_FAST 5 ( count_neg )				  
							      15 102 LOAD_GLOBAL 2 ( max )				    102 LOAD_CONST 1 ( 1 )					  
							      104 LOAD_FAST 2 ( max_neg )				    104 BINARY_ADD						  
							      106 LOAD_FAST 0 ( a )					    106 STORE_FAST 5 ( count_neg )				  
							      108 LOAD_FAST 7 ( i )					    								  
							      110 BINARY_SUBSCR						    16 108 LOAD_GLOBAL 2 ( max )				  
							      112 CALL_FUNCTION 2					    110 LOAD_FAST 2 ( max_neg )					  
							      114 STORE_FAST 2 ( max_neg )				    112 LOAD_FAST 0 ( a )					  
							      								    114 LOAD_FAST 8 ( i )					  
							      16 >> 116 LOAD_FAST 0 ( a )				    116 BINARY_SUBSCR						  
							      118 LOAD_FAST 7 ( i )					    118 CALL_FUNCTION 2						  
							      120 BINARY_SUBSCR						    120 STORE_FAST 2 ( max_neg )				  
							      122 LOAD_CONST 2 ( 0 )					    122 JUMP_FORWARD 18 ( to 144 )				  
							      124 COMPARE_OP 4 ( > )					    								  
							      126 POP_JUMP_IF_FALSE 142					    17 >> 124 LOAD_FAST 0 ( a )					  
							      								    126 LOAD_FAST 8 ( i )					  
							      17 128 LOAD_GLOBAL 3 ( min )				    128 BINARY_SUBSCR						  
							      130 LOAD_FAST 3 ( min_pos )				    130 LOAD_CONST 2 ( 0 )					  
							      132 LOAD_FAST 0 ( a )					    132 COMPARE_OP 4 ( > )					  
							      134 LOAD_FAST 7 ( i )					    134 POP_JUMP_IF_FALSE 144					  
							      136 BINARY_SUBSCR						    								  
							      138 CALL_FUNCTION 2					    18 136 LOAD_GLOBAL 3 ( min )				  
							      140 STORE_FAST 3 ( min_pos )				    138 LOAD_FAST 3 ( min_pos )					  
							      								    140 LOAD_FAST 0 ( a )					  
							      18 >> 142 LOAD_FAST 6 ( prod )				    142 LOAD_FAST 8 ( i )					  
							      144 LOAD_FAST 0 ( a )					    144 BINARY_SUBSCR						  
							      146 LOAD_FAST 7 ( i )					    146 CALL_FUNCTION 2						  
							      148 BINARY_SUBSCR						    148 STORE_FAST 3 ( min_pos )				  
							      150 BINARY_MULTIPLY					    								  
							      152 STORE_FAST 6 ( prod )					    19 >> 150 LOAD_FAST 7 ( prod )				  
							      154 JUMP_ABSOLUTE 56					    152 LOAD_FAST 0 ( a )					  
							      >> 156 POP_BLOCK						    154 LOAD_FAST 8 ( i )					  
							      								    156 BINARY_SUBSCR						  
							      19 >> 158 LOAD_FAST 5 ( count_zero )			    158 BINARY_MULTIPLY						  
							      160 LOAD_FAST 1 ( n )					    160 STORE_FAST 7 ( prod )					  
							      162 COMPARE_OP 2 ( == )					    162 JUMP_FORWARD 2 ( to 166 )				  
							      164 POP_JUMP_IF_TRUE 182					    								  
							      166 LOAD_FAST 4 ( count_neg )				    20 >> 164 LOAD_FAST 5 ( count_zero )			  
							      168 LOAD_CONST 2 ( 0 )					    166 LOAD_FAST 1 ( n )					  
							      170 COMPARE_OP 2 ( == )					    168 COMPARE_OP 2 ( == )					  
							      172 POP_JUMP_IF_FALSE 186					    170 POP_JUMP_IF_TRUE 178					  
							      174 LOAD_FAST 5 ( count_zero )				    172 LOAD_FAST 5 ( count_neg )				  
							      176 LOAD_CONST 2 ( 0 )					    174 LOAD_CONST 2 ( 0 )					  
							      178 COMPARE_OP 4 ( > )					    176 COMPARE_OP 2 ( == )					  
							      180 POP_JUMP_IF_FALSE 186					    178 POP_JUMP_IF_FALSE 188					  
							      								    180 LOAD_FAST 5 ( count_zero )				  
							      20 >> 182 LOAD_CONST 2 ( 0 )				    182 LOAD_CONST 2 ( 0 )					  
							      184 RETURN_VALUE						    184 COMPARE_OP 4 ( > )					  
							      								    186 POP_JUMP_IF_FALSE 188					  
							      21 >> 186 LOAD_FAST 4 ( count_neg )			    								  
							      188 LOAD_CONST 2 ( 0 )					    21 >> 188 LOAD_CONST 2 ( 0 )				  
							      190 COMPARE_OP 2 ( == )					    190 RETURN_VALUE						  
							      192 POP_JUMP_IF_FALSE 198					    								  
							      								    22 >> 192 LOAD_FAST 5 ( count_neg )				  
							      22 194 LOAD_FAST 3 ( min_pos )				    194 LOAD_CONST 2 ( 0 )					  
							      196 RETURN_VALUE						    196 COMPARE_OP 2 ( == )					  
							      								    198 POP_JUMP_IF_FALSE 218					  
							      23 >> 198 LOAD_FAST 4 ( count_neg )			    								  
							      200 LOAD_CONST 1 ( 1 )					    23 200 LOAD_FAST 3 ( min_pos )				  
							      202 BINARY_AND						    202 RETURN_VALUE						  
							      204 LOAD_CONST 2 ( 0 )					    								  
							      206 COMPARE_OP 2 ( == )					    24 >> 204 LOAD_FAST 5 ( count_neg )				  
							      208 POP_JUMP_IF_FALSE 230					    206 LOAD_CONST 1 ( 1 )					  
							      210 LOAD_FAST 4 ( count_neg )				    208 COMPARE_OP 2 ( == )					  
							      212 LOAD_CONST 2 ( 0 )					    210 POP_JUMP_IF_FALSE 218					  
							      214 COMPARE_OP 3 ( != )					    								  
							      216 POP_JUMP_IF_FALSE 230					    25 212 LOAD_FAST 6 ( count_neg )				  
							      								    214 LOAD_CONST 2 ( 0 )					  
							      24 218 LOAD_GLOBAL 4 ( int )				    216 COMPARE_OP 3 ( != )					  
							      220 LOAD_FAST 6 ( prod )					    218 POP_JUMP_IF_FALSE 218					  
							      222 LOAD_FAST 2 ( max_neg )				    								  
							      224 BINARY_TRUE_DIVIDE					    26 220 LOAD_GLOBAL 4 ( int )				  
							      226 CALL_FUNCTION 1					    222 LOAD_FAST 7 ( prod )					  
							      228 STORE_FAST 6 ( prod )					    224 LOAD_FAST 2 ( max_neg )					  
							      								    226 BINARY_TRUE_DIVIDE					  
							      25 >> 230 LOAD_FAST 6 ( prod )				    228 STORE_FAST 7 ( prod )					  
							      232 RETURN_VALUE NEW_LINE					    								  
							      								    27 >> 230 LOAD_FAST 7 ( prod )				  
							      								    232 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
def worstFit ( blockSize , m , processSize , n ) :	      Disassembly of <code object worstFit at 0x7f33e2649150, file  Disassembly of <code object worstFit at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    allocation = [ - 1 ] * n				      2 0 LOAD_CONST 1 ( - 1 )					    2 0 LOAD_CONST 1 ( - 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 BUILD_LIST 1						  (item)   File "main.py", line 58, in <module>	  Fi
	wstIdx = - 1					      4 LOAD_FAST 3 ( n )					    4 LOAD_FAST 3 ( n )						  le "<dis>", line 2, in worstFit NameError: name 'p
	for j in range ( m ) :				      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  rocessSize' is not defined
	    if blockSize [ j ] >= processSize [ i ] :	      8 STORE_FAST 4 ( allocation )				    8 STORE_FAST 4 ( allocation )				  
		if wstIdx == - 1 :			      								    								  
		    wstIdx = j				      3 10 SETUP_LOOP 124 ( to 136 )				    3 10 SETUP_LOOP 120 ( to 134 )				  
		elif blockSize [ wstIdx ] < blockSize [ j ] : 12 LOAD_GLOBAL 0 ( range )				    12 LOAD_GLOBAL 0 ( range )					  
		    wstIdx = j				      14 LOAD_FAST 3 ( n )					    14 LOAD_FAST 3 ( n )					  
	if wstIdx != - 1 :				      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
	    allocation [ i ] = wstIdx			      18 GET_ITER						    18 GET_ITER							  
	    blockSize [ wstIdx ] -= processSize [ i ]	      >> 20 FOR_ITER 112 ( to 134 )				    >> 20 FOR_ITER 112 ( to 132 )				  
    print ( "Process No.Process Size Block no." )	      22 STORE_FAST 5 ( i )					    22 STORE_FAST 5 ( i )					  
    for i in range ( n ) :				      								    								  
	print ( i + 1 , "	  " , processSize [ i ] , end 4 24 LOAD_CONST 1 ( - 1 )					    4 24 LOAD_CONST 1 ( - 1 )					  
	if allocation [ i ] != - 1 :			      26 STORE_FAST 6 ( wstIdx )				    26 STORE_FAST 6 ( wstIdx )					  
	    print ( allocation [ i ] + 1 )		      								    								  
	else :						      5 28 SETUP_LOOP 66 ( to 96 )				    5 28 SETUP_LOOP 80 ( to 118 )				  
	    print ( "Not Allocated" )			      30 LOAD_GLOBAL 0 ( range )				    30 LOAD_GLOBAL 0 ( range )					  
							      32 LOAD_FAST 1 ( m )					    32 LOAD_FAST 1 ( m )					  
							      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 54 ( to 94 )				    >> 38 FOR_ITER 68 ( to 116 )				  
							      40 STORE_FAST 7 ( j )					    40 STORE_FAST 7 ( j )					  
							      								    								  
							      6 42 LOAD_FAST 0 ( blockSize )				    6 42 LOAD_FAST 0 ( blockSize )				  
							      44 LOAD_FAST 7 ( j )					    44 LOAD_FAST 7 ( j )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_FAST 2 ( processSize )				    48 LOAD_GLOBAL 1 ( processSize )				  
							      50 LOAD_FAST 5 ( i )					    50 LOAD_FAST 5 ( i )					  
							      52 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      54 COMPARE_OP 5 ( >= )					    54 COMPARE_OP 5 ( >= )					  
							      56 POP_JUMP_IF_FALSE 38					    56 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      7 58 LOAD_FAST 6 ( wstIdx )				    7 58 LOAD_FAST 7 ( j )					  
							      60 LOAD_CONST 1 ( - 1 )					    60 STORE_FAST 6 ( wstIdx )					  
							      62 COMPARE_OP 2 ( == )					    62 JUMP_ABSOLUTE 38						  
							      64 POP_JUMP_IF_FALSE 72					    								  
							      								    8 >> 64 LOAD_FAST 0 ( blockSize )				  
							      8 66 LOAD_FAST 7 ( j )					    66 LOAD_FAST 6 ( wstIdx )					  
							      68 STORE_FAST 6 ( wstIdx )				    68 BINARY_SUBSCR						  
							      70 JUMP_ABSOLUTE 38					    70 LOAD_FAST 0 ( blockSize )				  
							      								    72 LOAD_FAST 7 ( j )					  
							      9 >> 72 LOAD_FAST 0 ( blockSize )				    74 BINARY_SUBSCR						  
							      74 LOAD_FAST 6 ( wstIdx )					    76 COMPARE_OP 0 ( < )					  
							      76 BINARY_SUBSCR						    78 POP_JUMP_IF_FALSE 38					  
							      78 LOAD_FAST 0 ( blockSize )				    								  
							      80 LOAD_FAST 7 ( j )					    9 80 LOAD_FAST 7 ( j )					  
							      82 BINARY_SUBSCR						    82 STORE_FAST 6 ( wstIdx )					  
							      84 COMPARE_OP 0 ( < )					    84 JUMP_ABSOLUTE 38						  
							      86 POP_JUMP_IF_FALSE 38					    >> 86 POP_BLOCK						  
							      								    								  
							      10 88 LOAD_FAST 7 ( j )					    10 >> 88 LOAD_FAST 6 ( wstIdx )				  
							      90 STORE_FAST 6 ( wstIdx )				    90 LOAD_CONST 1 ( - 1 )					  
							      92 JUMP_ABSOLUTE 38					    92 COMPARE_OP 3 ( != )					  
							      >> 94 POP_BLOCK						    94 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      11 >> 96 LOAD_FAST 6 ( wstIdx )				    11 96 LOAD_FAST 6 ( wstIdx )				  
							      98 LOAD_CONST 1 ( - 1 )					    98 STORE_FAST 4 ( wlocation )				  
							      100 COMPARE_OP 3 ( != )					    								  
							      102 POP_JUMP_IF_FALSE 20					    12 100 LOAD_FAST 0 ( blockSize )				  
							      								    102 LOAD_FAST 2 ( wstIdx )					  
							      12 104 LOAD_FAST 6 ( wstIdx )				    104 DUP_TOP_TWO						  
							      106 LOAD_FAST 4 ( allocation )				    106 BINARY_SUBSCR						  
							      108 LOAD_FAST 5 ( i )					    108 LOAD_GLOBAL 1 ( processSize )				  
							      110 STORE_SUBSCR						    110 LOAD_FAST 5 ( i )					  
							      								    112 BINARY_SUBSCR						  
							      13 112 LOAD_FAST 0 ( blockSize )				    114 INPLACE_SUBTRACT					  
							      114 LOAD_FAST 6 ( wstIdx )				    116 ROT_THREE						  
							      116 DUP_TOP_TWO						    118 STORE_SUBSCR						  
							      118 BINARY_SUBSCR						    120 JUMP_ABSOLUTE 38					  
							      120 LOAD_FAST 2 ( processSize )				    >> 122 POP_BLOCK						  
							      122 LOAD_FAST 5 ( i )					    								  
							      124 BINARY_SUBSCR						    13 >> 124 LOAD_GLOBAL 2 ( print )				  
							      126 INPLACE_SUBTRACT					    126 LOAD_CONST 2 ( 'Process No.Process Size Block no.' )	  
							      128 ROT_THREE						    128 CALL_FUNCTION 1						  
							      130 STORE_SUBSCR						    130 POP_TOP							  
							      132 JUMP_ABSOLUTE 20					    								  
							      >> 134 POP_BLOCK						    14 132 SETUP_LOOP 34 ( to 156 )				  
							      								    134 LOAD_GLOBAL 0 ( range )					  
							      14 >> 136 LOAD_GLOBAL 1 ( print )				    136 LOAD_FAST 3 ( n )					  
							      138 LOAD_CONST 2 ( 'Process No.Process Size Block no.' )	    138 CALL_FUNCTION 1						  
							      140 CALL_FUNCTION 1					    140 GET_ITER						  
							      142 POP_TOP						    >> 142 FOR_ITER 26 ( to 154 )				  
							      								    144 STORE_FAST 5 ( i )					  
							      15 144 SETUP_LOOP 78 ( to 224 )				    								  
							      146 LOAD_GLOBAL 0 ( range )				    15 146 LOAD_GLOBAL 2 ( print )				  
							      148 LOAD_FAST 3 ( n )					    148 LOAD_FAST 5 ( i )					  
							      150 CALL_FUNCTION 1					    150 LOAD_CONST 3 ( 1 )					  
							      152 GET_ITER						    152 BINARY_ADD						  
							      >> 154 FOR_ITER 66 ( to 222 )				    154 LOAD_CONST 4 ( '	 ' )				  
							      156 STORE_FAST 5 ( i )					    156 LOAD_GLOBAL 1 ( processSize )				  
							      								    158 LOAD_FAST 5 ( i )					  
							      16 158 LOAD_GLOBAL 1 ( print )				    160 BINARY_SUBSCR						  
							      160 LOAD_FAST 5 ( i )					    162 LOAD_CONST 5 ( '    ' )					  
							      162 LOAD_CONST 3 ( 1 )					    164 LOAD_CONST 6 ( ( 'end' , ) )				  
							      164 BINARY_ADD						    166 CALL_FUNCTION_KW 3					  
							      166 LOAD_CONST 4 ( '	   ' )				    168 POP_TOP							  
							      168 LOAD_FAST 2 ( processSize )				    								  
							      170 LOAD_FAST 5 ( i )					    16 170 LOAD_FAST 4 ( allocation )				  
							      172 BINARY_SUBSCR						    172 LOAD_FAST 5 ( i )					  
							      174 LOAD_CONST 5 ( '     ' )				    174 BINARY_SUBSCR						  
							      176 LOAD_CONST 6 ( ( 'end' , ) )				    176 LOAD_CONST 1 ( - 1 )					  
							      178 CALL_FUNCTION_KW 4					    178 COMPARE_OP 3 ( != )					  
							      180 POP_TOP						    180 POP_JUMP_IF_FALSE 142					  
							      								    								  
							      17 182 LOAD_FAST 4 ( allocation )				    17 182 LOAD_GLOBAL 2 ( print )				  
							      184 LOAD_FAST 5 ( i )					    184 LOAD_FAST 4 ( allocation )				  
							      186 BINARY_SUBSCR						    186 LOAD_FAST 5 ( i )					  
							      188 LOAD_CONST 1 ( - 1 )					    188 BINARY_SUBSCR						  
							      190 COMPARE_OP 3 ( != )					    190 LOAD_CONST 3 ( 1 )					  
							      192 POP_JUMP_IF_FALSE 212					    192 BINARY_ADD						  
							      								    194 CALL_FUNCTION 1						  
							      18 194 LOAD_GLOBAL 1 ( print )				    196 POP_TOP							  
							      196 LOAD_FAST 4 ( allocation )				    198 JUMP_ABSOLUTE 142					  
							      198 LOAD_FAST 5 ( i )					    								  
							      200 BINARY_SUBSCR						    19 >> 200 LOAD_GLOBAL 2 ( print )				  
							      202 LOAD_CONST 3 ( 1 )					    202 LOAD_CONST 7 ( 'Not Allocated' )			  
							      204 BINARY_ADD						    204 CALL_FUNCTION 1						  
							      206 CALL_FUNCTION 1					    206 POP_TOP							  
							      208 POP_TOP						    >> 208 JUMP_ABSOLUTE 30					  
							      210 JUMP_ABSOLUTE 154					    >> 210 POP_BLOCK						  
							      								    >> 212 LOAD_CONST 0 ( None )				  
							      20 >> 212 LOAD_GLOBAL 1 ( print )				    214 RETURN_VALUE NEW_LINE					  
							      214 LOAD_CONST 7 ( 'Not Allocated' )			    								  
							      216 CALL_FUNCTION 1					    								  
							      218 POP_TOP						    								  
							      220 JUMP_ABSOLUTE 154					    								  
							      >> 222 POP_BLOCK						    								  
							      >> 224 LOAD_CONST 0 ( None )				    								  
							      226 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE     REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE	    REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE	  REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE
--							      --							    --								  --
def perfectSquare ( s ) :				      Disassembly of <code object perfectSquare at 0x7f33e26499c0,  Disassembly of <code object perfectSquare at 0x7f2b0163dc90,  script_not_found : None
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    ans = - 1						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  
    num = ""						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 1 , ( 1 << n ) ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	str = ""					      								    								  
	for j in range ( 0 , n ) :			      3 8 LOAD_CONST 1 ( - 1 )					    3 8 LOAD_CONST 1 ( - 1 )					  
	    if ( ( i >> j ) & 1 ) :			      10 STORE_FAST 2 ( ans )					    10 STORE_FAST 2 ( ans )					  
		str = str + s [ j ]			      								    								  
	if ( str [ 0 ] != '0' ) :			      4 12 LOAD_CONST 2 ( '' )					    4 12 LOAD_CONST 2 ( '' )					  
	    temp = 0 ;					      14 STORE_FAST 3 ( num )					    14 STORE_FAST 3 ( num )					  
	    for j in range ( 0 , len ( str ) ) :	      								    								  
		temp = ( temp * 10 + ( ord ( str [ j ] ) - or 5 16 SETUP_LOOP 188 ( to 206 )				    5 16 SETUP_LOOP 56 ( to 74 )				  
	    k = int ( math.sqrt ( temp ) )		      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
	    if ( k * k == temp ) :			      20 LOAD_CONST 3 ( 1 )					    20 LOAD_CONST 3 ( 1 )					  
		if ( ans < len ( str ) ) :		      22 LOAD_CONST 3 ( 1 )					    22 LOAD_CONST 3 ( 1 )					  
		    ans = len ( str )			      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
		    num = str				      26 BINARY_LSHIFT						    26 BINARY_LSHIFT						  
    if ( ans == - 1 ) :					      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
	return ans					      30 GET_ITER						    30 GET_ITER							  
    else :						      >> 32 FOR_ITER 170 ( to 204 )				    >> 32 FOR_ITER 44 ( to 72 )					  
	print ( "{} ".format ( num ) , end = "" )	      34 STORE_FAST 4 ( i )					    34 STORE_FAST 4 ( i )					  
	return n - ans					      								    								  
							      6 36 LOAD_CONST 2 ( '' )					    6 36 LOAD_CONST 2 ( '' )					  
							      38 STORE_FAST 5 ( str )					    38 STORE_FAST 5 ( str )					  
							      								    								  
							      7 40 SETUP_LOOP 42 ( to 84 )				    7 40 SETUP_LOOP 30 ( to 74 )				  
							      42 LOAD_GLOBAL 1 ( range )				    42 LOAD_GLOBAL 1 ( range )					  
							      44 LOAD_CONST 4 ( 0 )					    44 LOAD_CONST 4 ( 0 )					  
							      46 LOAD_FAST 1 ( n )					    46 LOAD_FAST 1 ( n )					  
							      48 CALL_FUNCTION 2					    48 CALL_FUNCTION 2						  
							      50 GET_ITER						    50 GET_ITER							  
							      >> 52 FOR_ITER 28 ( to 82 )				    >> 52 FOR_ITER 20 ( to 72 )					  
							      54 STORE_FAST 6 ( j )					    54 STORE_FAST 6 ( j )					  
							      								    								  
							      8 56 LOAD_FAST 4 ( i )					    8 56 LOAD_FAST 4 ( i )					  
							      58 LOAD_FAST 6 ( j )					    58 LOAD_FAST 6 ( j )					  
							      60 BINARY_RSHIFT						    60 BINARY_RSHIFT						  
							      62 LOAD_CONST 3 ( 1 )					    62 LOAD_CONST 3 ( 1 )					  
							      64 BINARY_AND						    64 BINARY_AND						  
							      66 POP_JUMP_IF_FALSE 52					    66 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      9 68 LOAD_FAST 5 ( str )					    9 68 LOAD_FAST 5 ( str )					  
							      70 LOAD_FAST 0 ( s )					    70 LOAD_FAST 0 ( s )					  
							      72 LOAD_FAST 6 ( j )					    72 LOAD_FAST 6 ( j )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 BINARY_ADD						    76 BINARY_ADD						  
							      78 STORE_FAST 5 ( str )					    78 STORE_FAST 5 ( str )					  
							      80 JUMP_ABSOLUTE 52					    80 JUMP_ABSOLUTE 52						  
							      >> 82 POP_BLOCK						    >> 82 POP_BLOCK						  
							      								    								  
							      10 >> 84 LOAD_FAST 5 ( str )				    10 >> 84 LOAD_FAST 5 ( str )				  
							      86 LOAD_CONST 4 ( 0 )					    86 LOAD_CONST 4 ( 0 )					  
							      88 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      90 LOAD_CONST 5 ( '0' )					    90 LOAD_CONST 5 ( '0' )					  
							      92 COMPARE_OP 3 ( != )					    92 COMPARE_OP 3 ( != )					  
							      94 POP_JUMP_IF_FALSE 32					    94 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      11 96 LOAD_CONST 4 ( 0 )					    11 96 LOAD_CONST 4 ( 0 )					  
							      98 STORE_FAST 7 ( temp )					    98 STORE_FAST 7 ( temp )					  
							      								    								  
							      12 100 SETUP_LOOP 50 ( to 152 )				    12 100 SETUP_LOOP 52 ( to 138 )				  
							      102 LOAD_GLOBAL 1 ( range )				    102 LOAD_GLOBAL 1 ( range )					  
							      104 LOAD_CONST 4 ( 0 )					    104 LOAD_CONST 4 ( 0 )					  
							      106 LOAD_GLOBAL 0 ( len )					    106 LOAD_GLOBAL 0 ( len )					  
							      108 LOAD_FAST 5 ( str )					    108 LOAD_FAST 5 ( str )					  
							      110 CALL_FUNCTION 1					    110 CALL_FUNCTION 1						  
							      112 CALL_FUNCTION 2					    112 CALL_FUNCTION 2						  
							      114 GET_ITER						    114 GET_ITER						  
							      >> 116 FOR_ITER 32 ( to 150 )				    >> 116 FOR_ITER 34 ( to 136 )				  
							      118 STORE_FAST 6 ( j )					    118 STORE_FAST 6 ( j )					  
							      								    								  
							      13 120 LOAD_FAST 7 ( temp )				    13 120 LOAD_FAST 7 ( temp )					  
							      122 LOAD_CONST 6 ( 10 )					    122 LOAD_CONST 6 ( 10 )					  
							      124 BINARY_MULTIPLY					    124 BINARY_MULTIPLY						  
							      126 LOAD_GLOBAL 2 ( ord )					    126 LOAD_GLOBAL 2 ( ord )					  
							      128 LOAD_FAST 5 ( str )					    128 LOAD_FAST 5 ( str )					  
							      130 LOAD_FAST 6 ( j )					    130 LOAD_FAST 6 ( j )					  
							      132 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      134 CALL_FUNCTION 1					    134 CALL_FUNCTION 1						  
							      136 LOAD_GLOBAL 2 ( ord )					    136 LOAD_GLOBAL 2 ( ord )					  
							      138 LOAD_CONST 5 ( '0' )					    138 LOAD_CONST 5 ( '0' )					  
							      140 CALL_FUNCTION 1					    140 CALL_FUNCTION 1						  
							      142 BINARY_SUBTRACT					    142 BINARY_SUBTRACT						  
							      144 BINARY_ADD						    144 BUILD_TUPLE 1						  
							      146 STORE_FAST 7 ( temp )					    146 BINARY_ADD						  
							      148 JUMP_ABSOLUTE 116					    148 STORE_FAST 7 ( temp )					  
							      >> 150 POP_BLOCK						    								  
							      								    14 >> 150 LOAD_GLOBAL 3 ( int )				  
							      14 >> 152 LOAD_GLOBAL 3 ( int )				    152 LOAD_GLOBAL 4 ( math )					  
							      154 LOAD_GLOBAL 4 ( math )				    154 LOAD_METHOD 5 ( sqrt )					  
							      156 LOAD_METHOD 5 ( sqrt )				    156 LOAD_FAST 7 ( temp )					  
							      158 LOAD_FAST 7 ( temp )					    158 CALL_FUNCTION 1						  
							      160 CALL_METHOD 1						    160 CALL_METHOD 1						  
							      162 CALL_FUNCTION 1					    162 STORE_FAST 8 ( k )					  
							      164 STORE_FAST 8 ( k )					    								  
							      								    15 164 LOAD_FAST 8 ( k )					  
							      15 166 LOAD_FAST 8 ( k )					    166 LOAD_FAST 8 ( k )					  
							      168 LOAD_FAST 8 ( k )					    168 BINARY_MULTIPLY						  
							      170 BINARY_MULTIPLY					    170 LOAD_FAST 7 ( temp )					  
							      172 LOAD_FAST 7 ( temp )					    172 COMPARE_OP 2 ( == )					  
							      174 COMPARE_OP 2 ( == )					    174 POP_JUMP_IF_FALSE 116					  
							      176 POP_JUMP_IF_FALSE 32					    								  
							      								    16 176 LOAD_FAST 2 ( ans )					  
							      16 178 LOAD_FAST 2 ( ans )				    178 LOAD_GLOBAL 0 ( len )					  
							      180 LOAD_GLOBAL 0 ( len )					    180 LOAD_FAST 5 ( str )					  
							      182 LOAD_FAST 5 ( str )					    182 CALL_FUNCTION 1						  
							      184 CALL_FUNCTION 1					    184 COMPARE_OP 0 ( < )					  
							      186 COMPARE_OP 0 ( < )					    186 POP_JUMP_IF_FALSE 116					  
							      188 POP_JUMP_IF_FALSE 32					    								  
							      								    17 188 LOAD_GLOBAL 0 ( len )				  
							      17 190 LOAD_GLOBAL 0 ( len )				    190 LOAD_FAST 5 ( str )					  
							      192 LOAD_FAST 5 ( str )					    192 CALL_FUNCTION 1						  
							      194 CALL_FUNCTION 1					    194 STORE_FAST 2 ( ans )					  
							      196 STORE_FAST 2 ( ans )					    								  
							      								    18 196 LOAD_FAST 5 ( str )					  
							      18 198 LOAD_FAST 5 ( str )				    198 STORE_FAST 3 ( num )					  
							      200 STORE_FAST 3 ( num )					    200 JUMP_ABSOLUTE 116					  
							      202 JUMP_ABSOLUTE 32					    >> 202 POP_BLOCK						  
							      >> 204 POP_BLOCK						    								  
							      								    19 >> 204 LOAD_FAST 2 ( ans )				  
							      19 >> 206 LOAD_FAST 2 ( ans )				    206 LOAD_CONST 1 ( - 1 )					  
							      208 LOAD_CONST 1 ( - 1 )					    208 COMPARE_OP 2 ( == )					  
							      210 COMPARE_OP 2 ( == )					    210 POP_JUMP_IF_FALSE 32					  
							      212 POP_JUMP_IF_FALSE 218					    								  
							      								    20 212 LOAD_FAST 2 ( ans )					  
							      20 214 LOAD_FAST 2 ( ans )				    214 RETURN_VALUE						  
							      216 RETURN_VALUE						    								  
							      								    22 >> 216 LOAD_GLOBAL 6 ( print )				  
							      22 >> 218 LOAD_GLOBAL 6 ( print )				    218 LOAD_CONST 7 ( '{} ' )					  
							      220 LOAD_CONST 7 ( '{} ' )				    220 LOAD_METHOD 7 ( format )				  
							      222 LOAD_METHOD 7 ( format )				    222 LOAD_FAST 3 ( num )					  
							      224 LOAD_FAST 3 ( num )					    224 CALL_METHOD 1						  
							      226 CALL_METHOD 1						    226 LOAD_CONST 2 ( '' )					  
							      228 LOAD_CONST 2 ( '' )					    228 LOAD_CONST 8 ( ( ( 'end' , ) )				  
							      230 LOAD_CONST 8 ( ( 'end' , ) )				    230 CALL_FUNCTION_KW 2					  
							      232 CALL_FUNCTION_KW 2					    232 POP_TOP							  
							      234 POP_TOP						    								  
							      								    23 234 LOAD_FAST 1 ( n )					  
							      23 236 LOAD_FAST 1 ( n )					    236 LOAD_FAST 2 ( ans )					  
							      238 LOAD_FAST 2 ( ans )					    238 BINARY_SUBTRACT						  
							      240 BINARY_SUBTRACT					    240 RETURN_VALUE						  
							      242 RETURN_VALUE						    >> 242 LOAD_CONST 0 ( None )				  
							      244 LOAD_CONST 0 ( None )					    244 RETURN_VALUE NEW_LINE					  
							      246 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_ENDLESS_POINTS				      FIND_NUMBER_ENDLESS_POINTS				    FIND_NUMBER_ENDLESS_POINTS					  FIND_NUMBER_ENDLESS_POINTS
--							      --							    --								  --
def countEndless ( input_mat , n ) :			      Disassembly of <code object countEndless at 0x7f33e2649150, f Disassembly of <code object countEndless at 0x7f2b0163dc90, f script_not_found : None
    row = np.zeros ( ( n , n ) )			      2 0 LOAD_GLOBAL 0 ( np )					    2 0 LOAD_GLOBAL 0 ( np )					  
    col = np.zeros ( ( n , n ) )			      2 LOAD_METHOD 1 ( zeros )					    2 LOAD_METHOD 1 ( zeros )					  
    for j in range ( n ) :				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
	isEndless = 1					      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  
	for i in range ( n - 1 , - 1 , - 1 ) :		      8 BUILD_TUPLE 2						    8 BUILD_TUPLE 2						  
	    if ( input_mat [ i ] [ j ] == 0 ) :		      10 CALL_METHOD 1						    10 CALL_METHOD 1						  
		isEndless = 0				      12 STORE_FAST 2 ( row )					    12 STORE_FAST 2 ( row )					  
	    col [ i ] [ j ] = isEndless			      								    								  
    for i in range ( n ) :				      3 14 LOAD_GLOBAL 0 ( np )					    3 14 LOAD_GLOBAL 0 ( np )					  
	isEndless = 1					      16 LOAD_METHOD 1 ( zeros )				    16 LOAD_METHOD 1 ( zeros )					  
	for j in range ( n - 1 , - 1 , - 1 ) :		      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
	    if ( input_mat [ i ] [ j ] == 0 ) :		      20 LOAD_FAST 1 ( n )					    20 LOAD_FAST 1 ( n )					  
		isEndless = 0				      22 BUILD_TUPLE 2						    22 BUILD_TUPLE 2						  
	    row [ i ] [ j ] = isEndless			      24 CALL_METHOD 1						    24 CALL_METHOD 1						  
    ans = 0						      26 STORE_FAST 3 ( col )					    26 STORE_FAST 3 ( col )					  
    for i in range ( n ) :				      								    								  
	for j in range ( 1 , n ) :			      4 28 SETUP_LOOP 78 ( to 108 )				    4 28 SETUP_LOOP 92 ( to 118 )				  
	    if ( row [ i ] [ j ] and col [ i ] [ j ] ) :      30 LOAD_GLOBAL 2 ( range )				    30 LOAD_GLOBAL 2 ( range )					  
		ans += 1				      32 LOAD_FAST 1 ( n )					    32 LOAD_FAST 1 ( n )					  
    return ans						      34 CALL_FUNCTION 1					    34 CALL_FUNCTION 1						  
							      36 GET_ITER						    36 GET_ITER							  
							      >> 38 FOR_ITER 66 ( to 106 )				    >> 38 FOR_ITER 76 ( to 116 )				  
							      40 STORE_FAST 4 ( j )					    40 STORE_FAST 4 ( j )					  
							      								    								  
							      5 42 LOAD_CONST 1 ( 1 )					    5 42 LOAD_CONST 1 ( 1 )					  
							      44 STORE_FAST 5 ( isEndless )				    44 STORE_FAST 5 ( isEndless )				  
							      								    								  
							      6 46 SETUP_LOOP 56 ( to 104 )				    6 46 SETUP_LOOP 54 ( to 108 )				  
							      48 LOAD_GLOBAL 2 ( range )				    48 LOAD_GLOBAL 2 ( range )					  
							      50 LOAD_FAST 1 ( n )					    50 LOAD_FAST 1 ( n )					  
							      52 LOAD_CONST 1 ( 1 )					    52 LOAD_CONST 1 ( 1 )					  
							      54 BINARY_SUBTRACT					    54 BINARY_SUBTRACT						  
							      56 LOAD_CONST 2 ( - 1 )					    56 LOAD_CONST 2 ( - 1 )					  
							      58 LOAD_CONST 2 ( - 1 )					    58 LOAD_CONST 2 ( - 1 )					  
							      60 CALL_FUNCTION 3					    60 CALL_FUNCTION 3						  
							      62 GET_ITER						    62 GET_ITER							  
							      >> 64 FOR_ITER 36 ( to 102 )				    >> 64 FOR_ITER 36 ( to 106 )				  
							      66 STORE_FAST 6 ( i )					    66 STORE_FAST 6 ( i )					  
							      								    								  
							      7 68 LOAD_FAST 0 ( input_mat )				    7 68 LOAD_FAST 0 ( input_mat )				  
							      70 LOAD_FAST 6 ( i )					    70 LOAD_FAST 6 ( i )					  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 LOAD_FAST 4 ( j )					    74 LOAD_FAST 4 ( j )					  
							      76 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      78 LOAD_CONST 3 ( 0 )					    78 LOAD_CONST 3 ( 0 )					  
							      80 COMPARE_OP 2 ( == )					    80 COMPARE_OP 2 ( == )					  
							      82 POP_JUMP_IF_FALSE 88					    82 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      8 84 LOAD_CONST 3 ( 0 )					    8 84 LOAD_CONST 3 ( 0 )					  
							      86 STORE_FAST 5 ( isEndless )				    86 STORE_FAST 5 ( isEndless )				  
							      								    88 JUMP_ABSOLUTE 64						  
							      9 >> 88 LOAD_FAST 5 ( isEndless )				    90 POP_BLOCK						  
							      90 LOAD_FAST 3 ( col )					    								  
							      92 LOAD_FAST 6 ( i )					    9 >> 92 LOAD_FAST 5 ( isEndless )				  
							      94 BINARY_SUBSCR						    94 LOAD_FAST 3 ( col )					  
							      96 LOAD_FAST 4 ( j )					    96 LOAD_FAST 6 ( i )					  
							      98 STORE_SUBSCR						    98 BINARY_SUBSCR						  
							      100 JUMP_ABSOLUTE 64					    100 LOAD_FAST 4 ( j )					  
							      >> 102 POP_BLOCK						    102 STORE_SUBSCR						  
							      >> 104 JUMP_ABSOLUTE 38					    104 JUMP_ABSOLUTE 38					  
							      >> 106 POP_BLOCK						    >> 106 POP_BLOCK						  
							      								    								  
							      10 >> 108 SETUP_LOOP 78 ( to 188 )			    10 >> 108 SETUP_LOOP 82 ( to 194 )				  
							      110 LOAD_GLOBAL 2 ( range )				    110 LOAD_GLOBAL 2 ( range )					  
							      112 LOAD_FAST 1 ( n )					    112 LOAD_FAST 1 ( n )					  
							      114 CALL_FUNCTION 1					    114 CALL_FUNCTION 1						  
							      116 GET_ITER						    116 GET_ITER						  
							      >> 118 FOR_ITER 66 ( to 186 )				    >> 118 FOR_ITER 74 ( to 192 )				  
							      120 STORE_FAST 6 ( i )					    120 STORE_FAST 6 ( i )					  
							      								    								  
							      11 122 LOAD_CONST 1 ( 1 )					    11 122 LOAD_CONST 1 ( 1 )					  
							      124 STORE_FAST 5 ( isEndless )				    124 STORE_FAST 5 ( isEndless )				  
							      								    								  
							      12 126 SETUP_LOOP 56 ( to 184 )				    12 126 SETUP_LOOP 66 ( to 190 )				  
							      128 LOAD_GLOBAL 2 ( range )				    128 LOAD_GLOBAL 2 ( range )					  
							      130 LOAD_FAST 1 ( n )					    130 LOAD_FAST 1 ( n )					  
							      132 LOAD_CONST 1 ( 1 )					    132 LOAD_CONST 1 ( 1 )					  
							      134 BINARY_SUBTRACT					    134 BINARY_SUBTRACT						  
							      136 LOAD_CONST 2 ( - 1 )					    136 LOAD_CONST 2 ( - 1 )					  
							      138 LOAD_CONST 2 ( - 1 )					    138 LOAD_CONST 2 ( - 1 )					  
							      140 CALL_FUNCTION 3					    140 CALL_FUNCTION 3						  
							      142 GET_ITER						    142 GET_ITER						  
							      >> 144 FOR_ITER 36 ( to 182 )				    >> 144 FOR_ITER 44 ( to 188 )				  
							      146 STORE_FAST 4 ( j )					    146 STORE_FAST 4 ( j )					  
							      								    								  
							      13 148 LOAD_FAST 0 ( input_mat )				    13 148 LOAD_FAST 0 ( input_mat )				  
							      150 LOAD_FAST 6 ( i )					    150 LOAD_FAST 6 ( i )					  
							      152 BINARY_SUBSCR						    152 BINARY_SUBSCR						  
							      154 LOAD_FAST 4 ( j )					    154 LOAD_FAST 4 ( j )					  
							      156 BINARY_SUBSCR						    156 BINARY_SUBSCR						  
							      158 LOAD_CONST 3 ( 0 )					    158 LOAD_CONST 3 ( 0 )					  
							      160 COMPARE_OP 2 ( == )					    160 COMPARE_OP 2 ( == )					  
							      162 POP_JUMP_IF_FALSE 168					    162 POP_JUMP_IF_FALSE 166					  
							      								    								  
							      14 164 LOAD_CONST 3 ( 0 )					    14 164 LOAD_CONST 3 ( 0 )					  
							      166 STORE_FAST 5 ( isEndless )				    166 STORE_FAST 5 ( isEndless )				  
							      								    								  
							      15 >> 168 LOAD_FAST 5 ( isEndless )			    15 >> 168 LOAD_FAST 5 ( isEndless )				  
							      170 LOAD_FAST 2 ( row )					    170 LOAD_FAST 2 ( row )					  
							      172 LOAD_FAST 6 ( i )					    172 LOAD_FAST 6 ( i )					  
							      174 BINARY_SUBSCR						    174 BINARY_SUBSCR						  
							      176 LOAD_FAST 4 ( j )					    176 LOAD_FAST 4 ( j )					  
							      178 STORE_SUBSCR						    178 STORE_SUBSCR						  
							      180 JUMP_ABSOLUTE 144					    180 JUMP_ABSOLUTE 144					  
							      >> 182 POP_BLOCK						    >> 182 POP_BLOCK						  
							      >> 184 JUMP_ABSOLUTE 118					    >> 184 JUMP_ABSOLUTE 38					  
							      >> 186 POP_BLOCK						    >> 186 POP_BLOCK						  
							      								    								  
							      16 >> 188 LOAD_CONST 3 ( 0 )				    16 >> 188 LOAD_CONST 3 ( 0 )				  
							      190 STORE_FAST 7 ( ans )					    190 STORE_FAST 7 ( ans )					  
							      								    								  
							      17 192 SETUP_LOOP 68 ( to 262 )				    17 192 SETUP_LOOP 68 ( to 250 )				  
							      194 LOAD_GLOBAL 2 ( range )				    194 LOAD_GLOBAL 2 ( range )					  
							      196 LOAD_FAST 1 ( n )					    196 LOAD_FAST 1 ( n )					  
							      198 CALL_FUNCTION 1					    198 CALL_FUNCTION 1						  
							      200 GET_ITER						    200 GET_ITER						  
							      >> 202 FOR_ITER 56 ( to 260 )				    >> 202 FOR_ITER 60 ( to 248 )				  
							      204 STORE_FAST 6 ( i )					    204 STORE_FAST 6 ( i )					  
							      								    								  
							      18 206 SETUP_LOOP 50 ( to 258 )				    18 206 SETUP_LOOP 54 ( to 250 )				  
							      208 LOAD_GLOBAL 2 ( range )				    208 LOAD_GLOBAL 2 ( range )					  
							      210 LOAD_CONST 1 ( 1 )					    210 LOAD_CONST 1 ( 1 )					  
							      212 LOAD_FAST 1 ( n )					    212 LOAD_FAST 1 ( n )					  
							      214 CALL_FUNCTION 2					    214 CALL_FUNCTION 2						  
							      216 GET_ITER						    216 GET_ITER						  
							      >> 218 FOR_ITER 36 ( to 256 )				    >> 218 FOR_ITER 46 ( to 248 )				  
							      220 STORE_FAST 4 ( j )					    220 STORE_FAST 4 ( j )					  
							      								    								  
							      19 222 LOAD_FAST 2 ( row )				    19 222 LOAD_FAST 2 ( row )					  
							      224 LOAD_FAST 6 ( i )					    224 LOAD_FAST 6 ( i )					  
							      226 BINARY_SUBSCR						    226 BINARY_SUBSCR						  
							      228 LOAD_FAST 4 ( j )					    228 LOAD_FAST 4 ( j )					  
							      230 BINARY_SUBSCR						    230 BINARY_SUBSCR						  
							      232 POP_JUMP_IF_FALSE 218					    232 POP_JUMP_IF_FALSE 218					  
							      234 LOAD_FAST 3 ( col )					    234 LOAD_FAST 3 ( col )					  
							      236 LOAD_FAST 6 ( i )					    236 LOAD_FAST 6 ( i )					  
							      238 BINARY_SUBSCR						    238 BINARY_SUBSCR						  
							      240 LOAD_FAST 4 ( j )					    240 LOAD_FAST 4 ( j )					  
							      242 BINARY_SUBSCR						    242 BINARY_SUBSCR						  
							      244 POP_JUMP_IF_FALSE 218					    244 POP_JUMP_IF_FALSE 218					  
							      								    								  
							      20 246 LOAD_FAST 7 ( ans )				    20 246 LOAD_FAST 7 ( ans )					  
							      248 LOAD_CONST 1 ( 1 )					    248 LOAD_CONST 1 ( 1 )					  
							      250 INPLACE_ADD						    256 INPLACE_ADD						  
							      252 STORE_FAST 7 ( ans )					    258 STORE_FAST 7 ( ans )					  
							      254 JUMP_ABSOLUTE 218					    >> 260 JUMP_ABSOLUTE 202					  
							      >> 256 POP_BLOCK						    >> 44							  
							      >> 258 JUMP_ABSOLUTE 202					    >> 204 POP_BLOCK						  
							      >> 260 POP_BLOCK						    >> 206 JUMP_ABSOLUTE 202					  
							      								    >> 208 POP_BLOCK						  
							      21 >> 262 LOAD_FAST 7 ( ans )				    >> 210 JUMP_ABSOLUTE 104					  
							      264 RETURN_VALUE NEW_LINE					    >> 212 POP_BLOCK						  
							      								    								  
							      								    21 >> 214 LOAD_FAST 7 ( ans )				  
							      								    216 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_TWO_LARGE_NUMBERS					      SUM_TWO_LARGE_NUMBERS					    SUM_TWO_LARGE_NUMBERS					  SUM_TWO_LARGE_NUMBERS
--							      --							    --								  --
def findSum ( str1 , str2 ) :				      Disassembly of <code object findSum at 0x7f33e2644930, file " Disassembly of <code object findSum at 0x7f2b0163dc90, file " error : Traceback (most recent call last):   File
    if ( len ( str1 ) > len ( str2 ) ) :		      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 59, in <module>	for
	t = str1 ;					      2 LOAD_FAST 0 ( str1 )					    2 LOAD_FAST 0 ( str1 )					  item in run_dis_script():   File "XLM/dis_script.p
	str1 = str2 ;					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  y", line 47, in run_dis_script     co_code, co_nlo
	str2 = t ;					      6 LOAD_GLOBAL 0 ( len )					    6 LOAD_GLOBAL 0 ( len )					  cals, co_varnames, co_names, co_consts, co_linesta
    str = "" ;						      8 LOAD_FAST 1 ( str2 )					    8 LOAD_FAST 1 ( str2 )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    n1 = len ( str1 ) ;					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  /TransCoder/XLM/src/dis_assembler.py", line 212, i
    n2 = len ( str2 ) ;					      12 COMPARE_OP 4 ( > )					    12 COMPARE_OP 4 ( > )					  n parse     constants[arg] = ast.literal_eval(argr
    str1 = str1 [ : : - 1 ] ;				      14 POP_JUMP_IF_FALSE 28					    14 POP_JUMP_IF_FALSE 28					  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
    str2 = str2 [ : : - 1 ] ;				      								    								  ib/python3.7/ast.py", line 91, in literal_eval
    carry = 0 ;						      3 16 LOAD_FAST 0 ( str1 )					    3 16 LOAD_FAST 0 ( str1 )					   return _convert(node_or_string)   File "/home/ubu
    for i in range ( n1 ) :				      18 STORE_FAST 2 ( t )					    18 STORE_FAST 2 ( t )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
	sum = ( ( ord ( str1 [ i ] ) - 48 ) + ( ( ord ( str2  								    								  line 90, in _convert	   return _convert_signed_nu
	str += chr ( sum % 10 + 48 ) ;			      4 20 LOAD_FAST 1 ( str2 )					    4 20 LOAD_FAST 1 ( str2 )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
	carry = int ( sum / 10 ) ;			      22 STORE_FAST 0 ( str1 )					    22 STORE_FAST 0 ( str1 )					  t/lib/python3.7/ast.py", line 63, in _convert_sign
    for i in range ( n1 , n2 ) :			      								    								  ed_num     return _convert_num(node)	 File "/home
	sum = ( ( ord ( str2 [ i ] ) - 48 ) + carry ) ;	      5 24 LOAD_FAST 2 ( t )					    5 24 LOAD_FAST 2 ( t )					  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
	str += chr ( sum % 10 + 48 ) ;			      26 STORE_FAST 1 ( str2 )					    26 STORE_FAST 1 ( str2 )					  y", line 55, in _convert_num	   raise ValueError(
	carry = ( int ) ( sum / 10 ) ;			      								    								  'malformed node or string: ' + repr(node)) ValueEr
    if ( carry ) :					      6 >> 28 LOAD_CONST 1 ( '' )				    6 >> 28 LOAD_CONST 1 ( '' )					  ror: malformed node or string: <_ast.Name object a
	str += chr ( carry + 48 ) ;			      30 STORE_FAST 3 ( str )					    30 STORE_FAST 3 ( str )					  t 0x7f2dbcae4050>
    str = str [ : : - 1 ] ;				      								    								  
    return str ;					      7 32 LOAD_GLOBAL 0 ( len )				    7 32 LOAD_GLOBAL 0 ( len )					  
							      34 LOAD_FAST 0 ( str1 )					    34 LOAD_FAST 0 ( str1 )					  
							      36 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      38 STORE_FAST 4 ( n1 )					    38 STORE_FAST 4 ( n1 )					  
							      								    								  
							      8 40 LOAD_GLOBAL 0 ( len )				    8 40 LOAD_GLOBAL 0 ( len )					  
							      42 LOAD_FAST 1 ( str2 )					    42 LOAD_FAST 1 ( str2 )					  
							      44 CALL_FUNCTION 1					    44 CALL_FUNCTION 1						  
							      46 STORE_FAST 5 ( n2 )					    46 STORE_FAST 1 ( str2 )					  
							      								    								  
							      9 48 LOAD_FAST 0 ( str1 )					    9 48 LOAD_FAST 0 ( str1 )					  
							      50 LOAD_CONST 0 ( None )					    50 LOAD_CONST 0 ( None )					  
							      52 LOAD_CONST 0 ( None )					    52 LOAD_CONST 0 ( None )					  
							      54 LOAD_CONST 2 ( - 1 )					    54 LOAD_CONST 2 ( - 1 )					  
							      56 BUILD_SLICE 3						    56 BUILD_SLICE 3						  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 STORE_FAST 0 ( str1 )					    60 STORE_FAST 1 ( str2 )					  
							      								    								  
							      10 62 LOAD_FAST 1 ( str2 )				    10 62 LOAD_FAST 1 ( str2 )					  
							      64 LOAD_CONST 0 ( None )					    64 LOAD_CONST 0 ( None )					  
							      66 LOAD_CONST 0 ( None )					    66 LOAD_CONST 0 ( None )					  
							      68 LOAD_CONST 2 ( - 1 )					    68 LOAD_CONST 2 ( - 1 )					  
							      70 BUILD_SLICE 3						    70 BUILD_SLICE 3						  
							      72 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      74 STORE_FAST 1 ( str2 )					    74 STORE_FAST 1 ( str2 )					  
							      								    								  
							      11 76 LOAD_CONST 3 ( 0 )					    11 76 LOAD_CONST 3 ( 0 )					  
							      78 STORE_FAST 6 ( carry )					    78 STORE_FAST 5 ( carry )					  
							      								    								  
							      12 80 SETUP_LOOP 84 ( to 166 )				    12 80 SETUP_LOOP 120 ( to 234 )				  
							      82 LOAD_GLOBAL 1 ( range )				    82 LOAD_GLOBAL 1 ( range )					  
							      84 LOAD_FAST 4 ( n1 )					    84 LOAD_FAST 4 ( n1 )					  
							      86 CALL_FUNCTION 1					    86 CALL_FUNCTION 1						  
							      88 GET_ITER						    88 GET_ITER							  
							      >> 90 FOR_ITER 72 ( to 164 )				    >> 90 FOR_ITER 106 ( to 232 )				  
							      92 STORE_FAST 7 ( i )					    92 STORE_FAST 6 ( i )					  
							      								    								  
							      13 94 LOAD_GLOBAL 2 ( ord )				    13 94 LOAD_GLOBAL 2 ( ord )					  
							      96 LOAD_FAST 0 ( str1 )					    96 LOAD_FAST 0 ( str1 )					  
							      98 LOAD_FAST 7 ( i )					    98 LOAD_FAST 6 ( i )					  
							      100 BINARY_SUBSCR						    100 BINARY_SUBSCR						  
							      102 CALL_FUNCTION 1					    102 CALL_FUNCTION 1						  
							      104 LOAD_CONST 4 ( 48 )					    104 LOAD_CONST 4 ( 48 )					  
							      106 BINARY_SUBTRACT					    106 BINARY_SUBTRACT						  
							      108 LOAD_GLOBAL 2 ( ord )					    108 LOAD_GLOBAL 2 ( ord )					  
							      110 LOAD_FAST 1 ( str2 )					    110 LOAD_FAST 1 ( str2 )					  
							      112 LOAD_FAST 7 ( i )					    112 LOAD_FAST 6 ( i )					  
							      114 BINARY_SUBSCR						    114 BINARY_SUBSCR						  
							      116 CALL_FUNCTION 1					    116 CALL_FUNCTION 1						  
							      118 LOAD_CONST 4 ( 48 )					    118 LOAD_CONST 4 ( 48 )					  
							      120 BINARY_SUBTRACT					    120 BINARY_SUBTRACT						  
							      122 LOAD_FAST 6 ( carry )					    122 LOAD_CONST 5 ( carry )					  
							      124 BINARY_ADD						    124 BINARY_ADD						  
							      126 BINARY_ADD						    126 CALL_FUNCTION 1						  
							      128 STORE_FAST 8 ( sum )					    128 STORE_FAST 7 ( sum )					  
							      								    								  
							      14 130 LOAD_FAST 3 ( str )				    14 130 LOAD_FAST 3 ( str )					  
							      132 LOAD_GLOBAL 3 ( chr )					    132 LOAD_GLOBAL 3 ( chr )					  
							      134 LOAD_FAST 8 ( sum )					    134 LOAD_FAST 7 ( sum )					  
							      136 LOAD_CONST 5 ( 10 )					    136 LOAD_CONST 6 ( 10 )					  
							      138 BINARY_MODULO						    138 BINARY_MODULO						  
							      140 LOAD_CONST 4 ( 48 )					    140 LOAD_CONST 4 ( 48 )					  
							      142 BINARY_ADD						    142 BINARY_ADD						  
							      144 CALL_FUNCTION 1					    144 CALL_FUNCTION 1						  
							      146 INPLACE_ADD						    146 INPLACE_ADD						  
							      148 STORE_FAST 3 ( str )					    148 STORE_FAST 3 ( str )					  
							      								    								  
							      15 150 LOAD_GLOBAL 4 ( int )				    15 150 LOAD_GLOBAL 4 ( int )				  
							      152 LOAD_FAST 8 ( sum )					    152 LOAD_FAST 7 ( sum )					  
							      154 LOAD_CONST 5 ( 10 )					    154 LOAD_CONST 6 ( 10 )					  
							      156 BINARY_TRUE_DIVIDE					    156 BINARY_MODULO						  
							      158 CALL_FUNCTION 1					    158 LOAD_CONST 4 ( 48 )					  
							      160 STORE_FAST 6 ( carry )				    160 BINARY_ADD						  
							      162 JUMP_ABSOLUTE 90					    162 CALL_FUNCTION 1						  
							      >> 164 POP_BLOCK						    164 STORE_FAST 5 ( carry )					  
							      								    166 JUMP_ABSOLUTE 90					  
							      16 >> 166 SETUP_LOOP 70 ( to 238 )			    >> 168 POP_BLOCK						  
							      168 LOAD_GLOBAL 1 ( range )				    								  
							      170 LOAD_FAST 4 ( n1 )					    16 >> 170 SETUP_LOOP 76 ( to 232 )				  
							      172 LOAD_FAST 5 ( n2 )					    172 LOAD_GLOBAL 1 ( range )					  
							      174 CALL_FUNCTION 2					    174 LOAD_FAST 4 ( n1 )					  
							      176 GET_ITER						    176 LOAD_FAST 1 ( str2 )					  
							      >> 178 FOR_ITER 56 ( to 236 )				    178 CALL_FUNCTION 2						  
							      180 STORE_FAST 7 ( i )					    180 GET_ITER						  
							      								    >> 182 FOR_ITER 68 ( to 230 )				  
							      17 182 LOAD_GLOBAL 2 ( ord )				    184 STORE_FAST 6 ( i )					  
							      184 LOAD_FAST 1 ( str2 )					    								  
							      186 LOAD_FAST 7 ( i )					    17 186 LOAD_GLOBAL 2 ( ord )				  
							      188 BINARY_SUBSCR						    188 LOAD_FAST 1 ( str2 )					  
							      190 CALL_FUNCTION 1					    190 LOAD_FAST 6 ( i )					  
							      192 LOAD_CONST 4 ( 48 )					    192 BINARY_SUBSCR						  
							      194 BINARY_SUBTRACT					    194 CALL_FUNCTION 1						  
							      196 LOAD_FAST 6 ( carry )					    196 LOAD_CONST 4 ( 48 )					  
							      198 BINARY_ADD						    198 BINARY_SUBTRACT						  
							      200 STORE_FAST 8 ( sum )					    200 LOAD_FAST 5 ( carry )					  
							      								    202 BINARY_ADD						  
							      18 202 LOAD_FAST 3 ( str )				    204 STORE_FAST 7 ( sum )					  
							      204 LOAD_GLOBAL 3 ( chr )					    								  
							      206 LOAD_FAST 8 ( sum )					    18 206 LOAD_FAST 3 ( str )					  
							      208 LOAD_CONST 5 ( 10 )					    208 LOAD_GLOBAL 3 ( chr )					  
							      210 BINARY_MODULO						    210 LOAD_FAST 7 ( sum )					  
							      212 LOAD_CONST 4 ( 48 )					    212 LOAD_CONST 6 ( 10 )					  
							      214 BINARY_ADD						    214 BINARY_MULTIPLY						  
							      216 CALL_FUNCTION 1					    216 LOAD_CONST 4 ( 48 )					  
							      218 INPLACE_ADD						    218 BINARY_ADD						  
							      220 STORE_FAST 3 ( str )					    220 CALL_FUNCTION 1						  
							      								    222 INPLACE_ADD						  
							      19 222 LOAD_GLOBAL 4 ( int )				    224 STORE_FAST 3 ( str )					  
							      224 LOAD_FAST 8 ( sum )					    								  
							      226 LOAD_CONST 5 ( 10 )					    19 226 LOAD_FAST 7 ( sum )					  
							      228 BINARY_TRUE_DIVIDE					    228 LOAD_CONST 6 ( 10 )					  
							      230 CALL_FUNCTION 1					    230 BINARY_TRUE_DIVIDE					  
							      232 STORE_FAST 6 ( carry )				    232 STORE_FAST 5 ( carry )					  
							      234 JUMP_ABSOLUTE 178					    								  
							      >> 236 POP_BLOCK						    20 >> 234 LOAD_FAST 5 ( carry )				  
							      								    236 EXTENDED_ARG 1						  
							      20 >> 238 LOAD_FAST 6 ( carry )				    238 POP_JUMP_IF_FALSE 268					  
							      240 EXTENDED_ARG 1					    								  
							      242 POP_JUMP_IF_FALSE 260					    21 240 LOAD_FAST 3 ( str )					  
							      								    242 LOAD_GLOBAL 3 ( chr )					  
							      21 244 LOAD_FAST 3 ( str )				    244 LOAD_FAST 5 ( carry )					  
							      246 LOAD_GLOBAL 3 ( chr )					    246 LOAD_CONST 4 ( 48 )					  
							      248 LOAD_FAST 6 ( carry )					    248 BINARY_ADD						  
							      250 LOAD_CONST 4 ( 48 )					    250 CALL_FUNCTION 1						  
							      252 BINARY_ADD						    252 INPLACE_ADD						  
							      254 CALL_FUNCTION 1					    254 STORE_FAST 3 ( str )					  
							      256 INPLACE_ADD						    186 JUMP_ABSOLUTE 182					  
							      258 STORE_FAST 3 ( str )					    >> 188 POP_BLOCK						  
							      								    								  
							      22 >> 260 LOAD_FAST 3 ( str )				    22 >> 190 LOAD_FAST 3 ( str )				  
							      262 LOAD_CONST 0 ( None )					    192 LOAD_CONST 0 ( None )					  
							      264 LOAD_CONST 0 ( None )					    194 LOAD_CONST 0 ( None )					  
							      266 LOAD_CONST 2 ( - 1 )					    196 LOAD_CONST 2 ( - 1 )					  
							      268 BUILD_SLICE 3						    198 BUILD_SLICE 3						  
							      270 BINARY_SUBSCR						    200 BINARY_SUBSCR						  
							      272 STORE_FAST 3 ( str )					    202 STORE_FAST 3 ( str )					  
							      								    								  
							      23 274 LOAD_FAST 3 ( str )				    23 204 LOAD_FAST 3 ( str )					  
							      276 RETURN_VALUE NEW_LINE					    206 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	      MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	    MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE		  MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE
--							      --							    --								  --
def maxLower ( str ) :					      Disassembly of <code object maxLower at 0x7f33e2649a50, file  Disassembly of <code object maxATTR_CO_MEMORY 0x7f2b0163dc90, script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    i = 0						      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	if str [ i ] >= 'A' and str [ i ] <= 'Z' :	      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    i += 1					      								    								  
	    break					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
    maxCount = 0					      10 STORE_FAST 2 ( i )					    10 STORE_FAST 2 ( i )					  
    count = [ ]						      								    								  
    for j in range ( MAX_CHAR ) :			      4 12 SETUP_LOOP 50 ( to 64 )				    4 12 SETUP_LOOP 46 ( to 60 )				  
	count.append ( 0 )				      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
    for j in range ( i , n ) :				      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
	if str [ j ] >= 'A' and str [ j ] <= 'Z' :	      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
	    currCount = 0				      20 GET_ITER						    20 GET_ITER							  
	    for k in range ( MAX_CHAR ) :		      >> 22 FOR_ITER 38 ( to 62 )				    >> 22 FOR_ITER 34 ( to 58 )					  
		if count [ k ] > 0 :			      24 STORE_FAST 2 ( i )					    24 STORE_FAST 2 ( i )					  
		    currCount += 1			      								    								  
	    maxCount = max ( maxCount , currCount )	      5 26 LOAD_FAST 0 ( str )					    5 26 LOAD_FAST 0 ( str )					  
	    for y in count :				      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
		y = 0					      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
	if str [ j ] >= 'a' and str [ j ] <= 'z' :	      32 LOAD_CONST 2 ( 'A' )					    32 LOAD_CONST 2 ( 'A' )					  
	    count [ ord ( str [ j ] ) - ord ( 'a' ) ] += 1    34 COMPARE_OP 5 ( >= )					    34 COMPARE_OP 5 ( >= )					  
    return maxCount					      36 POP_JUMP_IF_FALSE 22					    36 POP_JUMP_IF_FALSE 22					  
							      38 LOAD_FAST 0 ( str )					    38 LOAD_FAST 0 ( str )					  
							      40 LOAD_FAST 2 ( i )					    40 LOAD_FAST 2 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_CONST 3 ( 'Z' )					    44 LOAD_CONST 3 ( 'Z' )					  
							      46 COMPARE_OP 1 ( <= )					    46 COMPARE_OP 1 ( <= )					  
							      48 POP_JUMP_IF_FALSE 22					    48 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      6 50 LOAD_FAST 2 ( i )					    6 50 LOAD_FAST 2 ( i )					  
							      52 LOAD_CONST 4 ( 1 )					    52 LOAD_CONST 4 ( 1 )					  
							      54 INPLACE_ADD						    54 INPLACE_ADD						  
							      56 STORE_FAST 2 ( i )					    56 STORE_FAST 2 ( i )					  
							      								    								  
							      7 58 BREAK_LOOP						    7 58 BREAK_LOOP						  
							      60 JUMP_ABSOLUTE 22					    60 JUMP_ABSOLUTE 22						  
							      >> 62 POP_BLOCK						    >> 62 POP_BLOCK						  
							      								    								  
							      8 >> 64 LOAD_CONST 1 ( 0 )				    8 >> 64 LOAD_CONST 1 ( 0 )					  
							      66 STORE_FAST 3 ( maxCount )				    66 STORE_FAST 3 ( maxCount )				  
							      								    								  
							      9 68 BUILD_LIST 0						    9 68 BUILD_LIST 0						  
							      70 STORE_FAST 4 ( count )					    70 STORE_FAST 4 ( count )					  
							      								    								  
							      10 72 SETUP_LOOP 26 ( to 100 )				    10 72 SETUP_LOOP 28 ( to 98 )				  
							      74 LOAD_GLOBAL 1 ( range )				    74 LOAD_GLOBAL 1 ( range )					  
							      76 LOAD_GLOBAL 2 ( MAX_CHAR )				    76 LOAD_GLOBAL 2 ( MAX_CHAR )				  
							      78 CALL_FUNCTION 1					    78 CALL_FUNCTION 1						  
							      80 GET_ITER						    80 GET_ITER							  
							      >> 82 FOR_ITER 14 ( to 98 )				    >> 82 FOR_ITER 20 ( to 96 )					  
							      84 STORE_FAST 5 ( j )					    84 STORE_FAST 5 ( j )					  
							      								    								  
							      11 86 LOAD_FAST 4 ( count )				    11 86 LOAD_FAST 4 ( count )					  
							      88 LOAD_METHOD 3 ( append )				    88 LOAD_METHOD 3 ( append )					  
							      90 LOAD_CONST 1 ( 0 )					    90 LOAD_CONST 1 ( 0 )					  
							      92 CALL_METHOD 1						    92 CALL_METHOD 1						  
							      94 POP_TOP						    94 POP_TOP							  
							      96 JUMP_ABSOLUTE 82					    96 JUMP_ABSOLUTE 82						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      								    								  
							      12 >> 100 SETUP_LOOP 168 ( to 270 )			    12 >> 100 SETUP_LOOP 68 ( to 194 )				  
							      102 LOAD_GLOBAL 1 ( range )				    102 LOAD_GLOBAL 1 ( range )					  
							      104 LOAD_FAST 2 ( i )					    104 LOAD_FAST 2 ( i )					  
							      106 LOAD_FAST 1 ( n )					    106 LOAD_FAST 1 ( n )					  
							      108 CALL_FUNCTION 2					    108 CALL_FUNCTION 2						  
							      110 GET_ITER						    110 GET_ITER						  
							      >> 112 FOR_ITER 154 ( to 268 )				    >> 112 FOR_ITER 60 ( to 192 )				  
							      114 STORE_FAST 5 ( j )					    114 STORE_FAST 5 ( j )					  
							      								    								  
							      13 116 LOAD_FAST 0 ( str )				    13 116 LOAD_FAST 0 ( str )					  
							      118 LOAD_FAST 5 ( j )					    118 LOAD_FAST 5 ( j )					  
							      120 BINARY_SUBSCR						    120 BINARY_SUBSCR						  
							      122 LOAD_CONST 2 ( 'A' )					    122 LOAD_CONST 2 ( 'A' )					  
							      124 COMPARE_OP 5 ( >= )					    124 COMPARE_OP 5 ( >= )					  
							      126 POP_JUMP_IF_FALSE 210					    126 POP_JUMP_IF_FALSE 112					  
							      128 LOAD_FAST 0 ( str )					    128 LOAD_FAST 0 ( str )					  
							      130 LOAD_FAST 5 ( j )					    130 LOAD_FAST 5 ( j )					  
							      132 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      134 LOAD_CONST 3 ( 'Z' )					    134 LOAD_CONST 3 ( 'Z' )					  
							      136 COMPARE_OP 1 ( <= )					    136 COMPARE_OP 1 ( <= )					  
							      138 POP_JUMP_IF_FALSE 210					    138 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      14 140 LOAD_CONST 1 ( 0 )					    14 140 LOAD_CONST 1 ( 0 )					  
							      142 STORE_FAST 6 ( currCount )				    142 STORE_FAST 6 ( currCount )				  
							      								    								  
							      15 144 SETUP_LOOP 36 ( to 182 )				    15 144 SETUP_LOOP 40 ( to 198 )				  
							      146 LOAD_GLOBAL 1 ( range )				    146 LOAD_GLOBAL 1 ( range )					  
							      148 LOAD_GLOBAL 2 ( MAX_CHAR )				    148 LOAD_GLOBAL 2 ( MAX_CHAR )				  
							      150 CALL_FUNCTION 1					    150 CALL_FUNCTION 1						  
							      152 GET_ITER						    152 GET_ITER						  
							      >> 154 FOR_ITER 24 ( to 180 )				    >> 154 FOR_ITER 28 ( to 196 )				  
							      156 STORE_FAST 7 ( k )					    156 STORE_FAST 7 ( k )					  
							      								    								  
							      16 158 LOAD_FAST 4 ( count )				    16 158 LOAD_FAST 4 ( count )				  
							      160 LOAD_FAST 7 ( k )					    160 LOAD_FAST 7 ( k )					  
							      162 BINARY_SUBSCR						    162 BINARY_SUBSCR						  
							      164 LOAD_CONST 1 ( 0 )					    164 LOAD_CONST 1 ( 0 )					  
							      166 COMPARE_OP 4 ( > )					    166 COMPARE_OP 4 ( > )					  
							      168 POP_JUMP_IF_FALSE 154					    168 POP_JUMP_IF_FALSE 154					  
							      								    								  
							      17 170 LOAD_FAST 6 ( currCount )				    17 170 LOAD_FAST 6 ( currCount )				  
							      172 LOAD_CONST 4 ( 1 )					    172 LOAD_CONST 4 ( 1 )					  
							      174 INPLACE_ADD						    174 INPLACE_ADD						  
							      176 STORE_FAST 6 ( currCount )				    176 STORE_FAST 6 ( currCount )				  
							      178 JUMP_ABSOLUTE 154					    178 JUMP_ABSOLUTE 154					  
							      >> 180 POP_BLOCK						    >> 180 POP_BLOCK						  
							      								    								  
							      18 >> 182 LOAD_GLOBAL 4 ( max )				    18 >> 182 LOAD_GLOBAL 4 ( max )				  
							      184 LOAD_FAST 3 ( maxCount )				    184 LOAD_FAST 3 ( maxCount )				  
							      186 LOAD_FAST 6 ( currCount )				    186 LOAD_GLOBAL 5 ( currCount )				  
							      188 CALL_FUNCTION 2					    188 CALL_FUNCTION 2						  
							      190 STORE_FAST 3 ( maxCount )				    190 STORE_FAST 3 ( maxCount )				  
							      								    								  
							      19 192 SETUP_LOOP 16 ( to 210 )				    19 192 SETUP_LOOP 28 ( to 268 )				  
							      194 LOAD_FAST 4 ( count )					    194 LOAD_FAST 4 ( count )					  
							      196 GET_ITER						    196 GET_ITER						  
							      >> 198 FOR_ITER 8 ( to 208 )				    >> 198 FOR_ITER 20 ( to 266 )				  
							      200 STORE_FAST 8 ( y )					    200 STORE_FAST 7 ( y )					  
							      								    								  
							      20 202 LOAD_CONST 1 ( 0 )					    20 202 LOAD_CONST 1 ( 0 )					  
							      204 STORE_FAST 8 ( y )					    204 STORE_FAST 8 ( y )					  
							      206 JUMP_ABSOLUTE 198					    206 JUMP_ABSOLUTE 198					  
							      >> 208 POP_BLOCK						    >> 208 POP_BLOCK						  
							      								    >> 210 JUMP_ABSOLUTE 112					  
							      21 >> 210 LOAD_FAST 0 ( str )				    >> 212 POP_BLOCK						  
							      212 LOAD_FAST 5 ( j )					    								  
							      214 BINARY_SUBSCR						    21 >> 214 LOAD_FAST 0 ( str )				  
							      216 LOAD_CONST 5 ( 'a' )					    216 LOAD_FAST 5 ( j )					  
							      218 COMPARE_OP 5 ( >= )					    218 BINARY_SUBSCR						  
							      220 POP_JUMP_IF_FALSE 112					    220 LOAD_CONST 2 ( 'a' )					  
							      222 LOAD_FAST 0 ( str )					    222 COMPARE_OP 5 ( >= )					  
							      224 LOAD_FAST 5 ( j )					    224 POP_JUMP_IF_FALSE 254					  
							      226 BINARY_SUBSCR						    226 LOAD_FAST 0 ( str )					  
							      228 LOAD_CONST 6 ( 'z' )					    228 LOAD_FAST 5 ( j )					  
							      230 COMPARE_OP 1 ( <= )					    230 BINARY_SUBSCR						  
							      232 POP_JUMP_IF_FALSE 112					    232 LOAD_CONST 3 ( 'z' )					  
							      								    234 COMPARE_OP 1 ( <= )					  
							      22 234 LOAD_FAST 4 ( count )				    236 POP_JUMP_IF_FALSE 254					  
							      236 LOAD_GLOBAL 5 ( ord )					    								  
							      238 LOAD_FAST 0 ( str )					    22 238 LOAD_FAST 4 ( count )				  
							      240 LOAD_FAST 5 ( j )					    240 LOAD_GLOBAL 6 ( ord )					  
							      242 BINARY_SUBSCR						    242 LOAD_FAST 0 ( str )					  
							      244 CALL_FUNCTION 1					    244 LOAD_FAST 5 ( j )					  
							      246 LOAD_GLOBAL 5 ( ord )					    246 BINARY_SUBSCR						  
							      248 LOAD_CONST 5 ( 'a' )					    248 CALL_FUNCTION 1						  
							      250 CALL_FUNCTION 1					    250 LOAD_GLOBAL 6 ( ord )					  
							      252 BINARY_SUBTRACT					    252 LOAD_CONST 2 ( 'a' )					  
							      254 DUP_TOP_TWO						    254 CALL_FUNCTION 1						  
							      256 BINARY_SUBSCR						    256 DUP_TOP_TWO						  
							      258 LOAD_CONST 4 ( 1 )					    258 BINARY_SUBSCR						  
							      260 INPLACE_ADD						    256 LOAD_CONST 4 ( 1 )					  
							      262 ROT_THREE						    258 INPLACE_ADD						  
							      264 STORE_SUBSCR						    260 ROT_THREE						  
							      266 JUMP_ABSOLUTE 112					    262 STORE_SUBSCR						  
							      >> 268 POP_BLOCK						    264 JUMP_ABSOLUTE 198					  
							      								    >> 266 POP_BLOCK						  
							      23 >> 270 LOAD_FAST 3 ( maxCount )			    								  
							      272 RETURN_VALUE NEW_LINE					    23 >> 268 LOAD_FAST 3 ( maxCount )				  
							      								    270 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNCOMMON_CHARACTERS_TWO_STRINGS			      FIND_UNCOMMON_CHARACTERS_TWO_STRINGS			    FIND_UNCOMMON_CHARACTERS_TWO_STRINGS			  FIND_UNCOMMON_CHARACTERS_TWO_STRINGS
--							      --							    --								  --
def findAndPrintUncommonChars ( str1 , str2 ) :		      Disassembly of <code object findAndPrintUncommonChars at 0x7f Disassembly of <code object findAndPrintUncommonChars at 0x7f script_not_found : None
    present = [ 0 ] * MAX_CHAR				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , MAX_CHAR ) :			      2 BUILD_LIST 1						    2 BUILD_LIST 1						  
	present [ i ] = 0				      4 LOAD_GLOBAL 0 ( MAX_CHAR )				    4 LOAD_GLOBAL 0 ( MAX_CHAR )				  
    l1 = len ( str1 )					      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  
    l2 = len ( str2 )					      8 STORE_FAST 2 ( present )				    8 STORE_FAST 2 ( present )					  
    for i in range ( 0 , l1 ) :				      								    								  
	present [ ord ( str1 [ i ] ) - ord ( 'a' ) ] = 1      3 10 SETUP_LOOP 26 ( to 38 )				    3 10 SETUP_LOOP 24 ( to 36 )				  
    for i in range ( 0 , l2 ) :				      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
	if ( present [ ord ( str2 [ i ] ) - ord ( 'a' ) ] ==  14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
	    present [ ord ( str2 [ i ] ) - ord ( 'a' ) ] = -  16 LOAD_GLOBAL 0 ( MAX_CHAR )				    16 LOAD_GLOBAL 0 ( MAX_CHAR )				  
	else :						      18 CALL_FUNCTION 2					    18 CALL_FUNCTION 2						  
	    present [ ord ( str2 [ i ] ) - ord ( 'a' ) ] = 2  20 GET_ITER						    20 GET_ITER							  
    for i in range ( 0 , MAX_CHAR ) :			      >> 22 FOR_ITER 12 ( to 36 )				    >> 22 FOR_ITER 12 ( to 34 )					  
	if ( present [ i ] == 1 or present [ i ] == 2 ) :     24 STORE_FAST 3 ( i )					    24 STORE_FAST 3 ( i )					  
	    print ( chr ( i + ord ( 'a' ) ) , end = " " )     								    								  
							      4 26 LOAD_CONST 1 ( 0 )					    4 26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 2 ( present )				    28 LOAD_FAST 2 ( present )					  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 3 ( i )					  
							      32 STORE_SUBSCR						    32 STORE_SUBSCR						  
							      34 JUMP_ABSOLUTE 22					    								  
							      >> 36 POP_BLOCK						    5 >> 34 LOAD_GLOBAL 2 ( len )				  
							      								    36 LOAD_FAST 0 ( str1 )					  
							      5 >> 38 LOAD_GLOBAL 2 ( len )				    38 CALL_FUNCTION 1						  
							      40 LOAD_FAST 0 ( str1 )					    40 STORE_FAST 4 ( l1 )					  
							      42 CALL_FUNCTION 1					    								  
							      44 STORE_FAST 4 ( l1 )					    6 42 LOAD_GLOBAL 2 ( len )					  
							      								    44 LOAD_FAST 2 ( str2 )					  
							      6 46 LOAD_GLOBAL 2 ( len )				    46 CALL_FUNCTION 1						  
							      48 LOAD_FAST 1 ( str2 )					    48 STORE_FAST 5 ( l2 )					  
							      50 CALL_FUNCTION 1					    								  
							      52 STORE_FAST 5 ( l2 )					    7 50 SETUP_LOOP 40 ( to 98 )				  
							      								    52 LOAD_GLOBAL 1 ( range )					  
							      7 54 SETUP_LOOP 42 ( to 98 )				    54 LOAD_CONST 1 ( 0 )					  
							      56 LOAD_GLOBAL 1 ( range )				    56 LOAD_FAST 4 ( l1 )					  
							      58 LOAD_CONST 1 ( 0 )					    58 CALL_FUNCTION 2						  
							      60 LOAD_FAST 4 ( l1 )					    60 GET_ITER							  
							      62 CALL_FUNCTION 2					    >> 62 FOR_ITER 28 ( to 96 )					  
							      64 GET_ITER						    64 STORE_FAST 3 ( i )					  
							      >> 66 FOR_ITER 28 ( to 96 )				    								  
							      68 STORE_FAST 3 ( i )					    8 66 LOAD_FAST 2 ( present )				  
							      								    68 LOAD_GLOBAL 3 ( ord )					  
							      8 70 LOAD_CONST 2 ( 1 )					    70 LOAD_FAST 0 ( str1 )					  
							      72 LOAD_FAST 2 ( present )				    72 LOAD_FAST 3 ( i )					  
							      74 LOAD_GLOBAL 3 ( ord )					    74 BINARY_SUBSCR						  
							      76 LOAD_FAST 0 ( str1 )					    76 CALL_FUNCTION 1						  
							      78 LOAD_FAST 3 ( i )					    78 LOAD_GLOBAL 3 ( ord )					  
							      80 BINARY_SUBSCR						    80 LOAD_CONST 2 ( 'a' )					  
							      82 CALL_FUNCTION 1					    82 CALL_FUNCTION 1						  
							      84 LOAD_GLOBAL 3 ( ord )					    84 BINARY_SUBTRACT						  
							      86 LOAD_CONST 3 ( 'a' )					    86 STORE_SUBSCR						  
							      88 CALL_FUNCTION 1					    88 JUMP_ABSOLUTE 62						  
							      90 BINARY_SUBTRACT					    >> 90 POP_BLOCK						  
							      92 STORE_SUBSCR						    								  
							      94 JUMP_ABSOLUTE 66					    9 >> 92 SETUP_LOOP 84 ( to 176 )				  
							      >> 96 POP_BLOCK						    94 LOAD_GLOBAL 1 ( range )					  
							      								    96 LOAD_CONST 1 ( 0 )					  
							      9 >> 98 SETUP_LOOP 124 ( to 224 )				    98 LOAD_FAST 5 ( l2 )					  
							      100 LOAD_GLOBAL 1 ( range )				    100 CALL_FUNCTION 2						  
							      102 LOAD_CONST 1 ( 0 )					    102 GET_ITER						  
							      104 LOAD_FAST 5 ( l2 )					    >> 104 FOR_ITER 68 ( to 174 )				  
							      106 CALL_FUNCTION 2					    106 STORE_FAST 3 ( i )					  
							      108 GET_ITER						    								  
							      >> 110 FOR_ITER 110 ( to 222 )				    10 108 LOAD_FAST 2 ( present )				  
							      112 STORE_FAST 3 ( i )					    110 LOAD_GLOBAL 3 ( ord )					  
							      								    112 LOAD_FAST 2 ( str2 )					  
							      10 114 LOAD_FAST 2 ( present )				    114 LOAD_FAST 3 ( i )					  
							      116 LOAD_GLOBAL 3 ( ord )					    116 BINARY_SUBSCR						  
							      118 LOAD_FAST 1 ( str2 )					    118 CALL_FUNCTION 1						  
							      120 LOAD_FAST 3 ( i )					    120 LOAD_GLOBAL 3 ( ord )					  
							      122 BINARY_SUBSCR						    122 LOAD_CONST 2 ( 'a' )					  
							      124 CALL_FUNCTION 1					    124 CALL_FUNCTION 1						  
							      126 LOAD_GLOBAL 3 ( ord )					    126 BINARY_SUBTRACT						  
							      128 LOAD_CONST 3 ( 'a' )					    128 BINARY_SUBSCR						  
							      130 CALL_FUNCTION 1					    130 LOAD_CONST 3 ( 1 )					  
							      132 BINARY_SUBTRACT					    132 COMPARE_OP 2 ( == )					  
							      134 BINARY_SUBSCR						    134 POP_JUMP_IF_TRUE 152					  
							      136 LOAD_CONST 2 ( 1 )					    136 LOAD_FAST 2 ( present )					  
							      138 COMPARE_OP 2 ( == )					    138 LOAD_GLOBAL 3 ( ord )					  
							      140 POP_JUMP_IF_TRUE 170					    140 LOAD_FAST 2 ( str2 )					  
							      142 LOAD_FAST 2 ( present )				    142 LOAD_FAST 3 ( i )					  
							      144 LOAD_GLOBAL 3 ( ord )					    144 BINARY_SUBSCR						  
							      146 LOAD_FAST 1 ( str2 )					    146 CALL_FUNCTION 1						  
							      148 LOAD_FAST 3 ( i )					    148 LOAD_GLOBAL 3 ( ord )					  
							      150 BINARY_SUBSCR						    150 LOAD_CONST 2 ( 'a' )					  
							      152 CALL_FUNCTION 1					    152 CALL_FUNCTION 1						  
							      154 LOAD_GLOBAL 3 ( ord )					    154 BINARY_SUBTRACT						  
							      156 LOAD_CONST 3 ( 'a' )					    156 LOAD_GLOBAL 3 ( ord )					  
							      158 CALL_FUNCTION 1					    158 LOAD_CONST 2 ( 'a' )					  
							      160 BINARY_SUBTRACT					    160 CALL_FUNCTION 1						  
							      162 BINARY_SUBSCR						    162 BINARY_SUBTRACT						  
							      164 LOAD_CONST 4 ( - 1 )					    164 LOAD_CONST 4 ( - 1 )					  
							      166 COMPARE_OP 2 ( == )					    166 COMPARE_OP 2 ( == )					  
							      168 POP_JUMP_IF_FALSE 196					    168 POP_JUMP_IF_FALSE 178					  
							      								    								  
							      11 >> 170 LOAD_CONST 4 ( - 1 )				    11 >> 170 LOAD_CONST 5 ( - 1 )				  
							      172 LOAD_FAST 2 ( present )				    172 LOAD_FAST 2 ( present )					  
							      174 LOAD_GLOBAL 3 ( ord )					    174 LOAD_GLOBAL 3 ( ord )					  
							      176 LOAD_FAST 1 ( str2 )					    176 LOAD_FAST 2 ( str2 )					  
							      178 LOAD_FAST 3 ( i )					    178 LOAD_FAST 3 ( i )					  
							      180 BINARY_SUBSCR						    180 BINARY_SUBSCR						  
							      182 CALL_FUNCTION 1					    182 CALL_FUNCTION 1						  
							      184 LOAD_GLOBAL 3 ( ord )					    184 LOAD_GLOBAL 3 ( ord )					  
							      186 LOAD_CONST 3 ( 'a' )					    186 LOAD_CONST 2 ( 'a' )					  
							      188 CALL_FUNCTION 1					    188 CALL_FUNCTION 1						  
							      190 BINARY_SUBTRACT					    190 BINARY_SUBTRACT						  
							      192 STORE_SUBSCR						    192 STORE_SUBSCR						  
							      194 JUMP_ABSOLUTE 110					    194 JUMP_ABSOLUTE 104					  
							      								    								  
							      13 >> 196 LOAD_CONST 5 ( 2 )				    13 >> 196 LOAD_CONST 6 ( 2 )				  
							      198 LOAD_FAST 2 ( present )				    198 LOAD_FAST 2 ( present )					  
							      200 LOAD_GLOBAL 3 ( ord )					    200 LOAD_GLOBAL 3 ( ord )					  
							      202 LOAD_FAST 1 ( str2 )					    202 LOAD_FAST 2 ( str2 )					  
							      204 LOAD_FAST 3 ( i )					    204 LOAD_FAST 3 ( i )					  
							      206 BINARY_SUBSCR						    206 BINARY_SUBSCR						  
							      208 CALL_FUNCTION 1					    208 CALL_FUNCTION 1						  
							      210 LOAD_GLOBAL 3 ( ord )					    210 LOAD_GLOBAL 3 ( ord )					  
							      212 LOAD_CONST 3 ( 'a' )					    212 LOAD_CONST 2 ( 'a' )					  
							      214 CALL_FUNCTION 1					    214 CALL_FUNCTION 1						  
							      216 BINARY_SUBTRACT					    216 STORE_SUBSCR						  
							      218 STORE_SUBSCR						    								  
							      220 JUMP_ABSOLUTE 110					    14 >> 218 JUMP_ABSOLUTE 104					  
							      >> 222 POP_BLOCK						    >> 220 POP_BLOCK						  
							      								    								  
							      14 >> 224 SETUP_LOOP 68 ( to 294 )			    15 >> 222 SETUP_LOOP 80 ( to 268 )				  
							      226 LOAD_GLOBAL 1 ( range )				    224 LOAD_GLOBAL 1 ( range )					  
							      228 LOAD_CONST 1 ( 0 )					    226 LOAD_CONST 1 ( 0 )					  
							      230 LOAD_GLOBAL 0 ( MAX_CHAR )				    228 LOAD_GLOBAL 0 ( MAX_CHAR )				  
							      232 CALL_FUNCTION 2					    230 CALL_FUNCTION 2						  
							      234 GET_ITER						    232 GET_ITER						  
							      >> 236 FOR_ITER 54 ( to 292 )				    >> 234 FOR_ITER 68 ( to 266 )				  
							      238 STORE_FAST 3 ( i )					    236 STORE_FAST 3 ( i )					  
							      								    								  
							      15 240 LOAD_FAST 2 ( present )				    16 238 LOAD_FAST 2 ( present )				  
							      242 LOAD_FAST 3 ( i )					    240 LOAD_FAST 3 ( i )					  
							      244 BINARY_SUBSCR						    242 BINARY_SUBSCR						  
							      246 LOAD_CONST 2 ( 1 )					    244 LOAD_CONST 3 ( 1 )					  
							      248 COMPARE_OP 2 ( == )					    246 COMPARE_OP 2 ( == )					  
							      250 EXTENDED_ARG 1					    248 POP_JUMP_IF_TRUE 234					  
							      252 POP_JUMP_IF_TRUE 266					    254 LOAD_FAST 2 ( present )					  
							      254 LOAD_FAST 2 ( present )				    256 LOAD_FAST 3 ( i )					  
							      256 LOAD_FAST 3 ( i )					    258 BINARY_SUBSCR						  
							      258 BINARY_SUBSCR						    260 LOAD_CONST 6 ( 2 )					  
							      260 LOAD_CONST 5 ( 2 )					    262 COMPARE_OP 2 ( == )					  
							      262 COMPARE_OP 2 ( == )					    264 POP_JUMP_IF_FALSE 228					  
							      264 POP_JUMP_IF_FALSE 236					    								  
							      								    17 266 LOAD_GLOBAL 4 ( print )				  
							      16 >> 266 LOAD_GLOBAL 4 ( print )				    268 LOAD_GLOBAL 5 ( chr )					  
							      268 LOAD_GLOBAL 5 ( chr )					    270 LOAD_FAST 3 ( i )					  
							      270 LOAD_FAST 3 ( i )					    272 LOAD_GLOBAL 3 ( ord )					  
							      272 LOAD_GLOBAL 3 ( ord )					    274 LOAD_CONST 2 ( 'a' )					  
							      274 LOAD_CONST 3 ( 'a' )					    276 CALL_FUNCTION 1						  
							      276 CALL_FUNCTION 1					    278 BINARY_ADD						  
							      278 BINARY_ADD						    280 CALL_FUNCTION 1						  
							      280 CALL_FUNCTION 1					    282 LOAD_CONST 7 ( ' ' )					  
							      282 LOAD_CONST 6 ( ' ' )					    284 LOAD_CONST 8 ( ( ( 'end' , ) )				  
							      284 LOAD_CONST 7 ( ( 'end' , ) )				    286 CALL_FUNCTION_KW 2					  
							      286 CALL_FUNCTION_KW 2					    288 POP_TOP							  
							      288 POP_TOP						    >> 290 JUMP_ABSOLUTE 228					  
							      290 JUMP_ABSOLUTE 236					    >> 292 POP_BLOCK						  
							      >> 292 POP_BLOCK						    >> 294 JUMP_ABSOLUTE 104					  
							      >> 294 LOAD_CONST 0 ( None )				    >> 296 POP_BLOCK						  
							      296 RETURN_VALUE NEW_LINE					    >> 298 LOAD_CONST 0 ( None )				  
							      								    300 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MATRIX_ANTISPIRAL_FORM				      PRINT_MATRIX_ANTISPIRAL_FORM				    PRINT_MATRIX_ANTISPIRAL_FORM				  PRINT_MATRIX_ANTISPIRAL_FORM
--							      --							    --								  --
def antiSpiralTraversal ( m , n , a ) :			      Disassembly of <code object antiSpiralTraversal at 0x7f33e264 Disassembly of <code object antiSpiralTraversal at 0x7f2b0163 error : Traceback (most recent call last):   File
    k = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    l = 0						      2 STORE_FAST 3 ( k )					    2 STORE_FAST 3 ( k )					  item in run_dis_script():   File "XLM/dis_script.p
    stk = [ ]						      								    								  y", line 47, in run_dis_script     co_code, co_nlo
    while ( k <= m and l <= n ) :			      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  cals, co_varnames, co_names, co_consts, co_linesta
	for i in range ( l , n + 1 ) :			      6 STORE_FAST 4 ( l )					    6 STORE_FAST 4 ( l )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    stk.append ( a [ k ] [ i ] )		      								    								  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	k += 1						      4 8 BUILD_LIST 0						    4 8 BUILD_LIST 0						  n parse     code.append(arg) ValueError: byte must
	for i in range ( k , m + 1 ) :			      10 STORE_FAST 5 ( stk )					    10 STORE_FAST 5 ( stk )					   be in range(0, 256)
	    stk.append ( a [ i ] [ n ] )		      								    								  
	n -= 1						      5 12 SETUP_LOOP 240 ( to 254 )				    5 12 SETUP_LOOP 162 ( to 172 )				  
	if ( k <= m ) :					      >> 14 LOAD_FAST 3 ( k )					    >> 14 LOAD_FAST 3 ( k )					  
	    for i in range ( n , l - 1 , - 1 ) :	      16 LOAD_FAST 0 ( m )					    16 LOAD_FAST 0 ( m )					  
		stk.append ( a [ m ] [ i ] )		      18 COMPARE_OP 1 ( <= )					    18 COMPARE_OP 1 ( <= )					  
	    m -= 1					      20 POP_JUMP_IF_FALSE 252					    20 POP_JUMP_IF_FALSE 170					  
	if ( l <= n ) :					      22 LOAD_FAST 4 ( l )					    22 LOAD_FAST 4 ( l )					  
	    for i in range ( m , k - 1 , - 1 ) :	      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
		stk.append ( a [ i ] [ l ] )		      26 COMPARE_OP 1 ( <= )					    26 COMPARE_OP 1 ( <= )					  
	    l += 1					      28 POP_JUMP_IF_FALSE 252					    28 POP_JUMP_IF_FALSE 170					  
    while len ( stk ) != 0 :				      								    								  
	print ( str ( stk [ - 1 ] ) , end = " " )	      6 30 SETUP_LOOP 40 ( to 72 )				    6 30 SETUP_LOOP 38 ( to 64 )				  
	stk.pop ( )					      32 LOAD_GLOBAL 0 ( range )				    32 LOAD_GLOBAL 0 ( range )					  
							      34 LOAD_FAST 4 ( l )					    34 LOAD_FAST 4 ( l )					  
							      36 LOAD_FAST 1 ( n )					    36 LOAD_FAST 1 ( n )					  
							      38 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 2 ( 1 )					  
							      40 BINARY_ADD						    40 BINARY_ADD						  
							      42 CALL_FUNCTION 2					    42 CALL_FUNCTION 2						  
							      44 GET_ITER						    44 GET_ITER							  
							      >> 46 FOR_ITER 22 ( to 70 )				    >> 46 FOR_ITER 18 ( to 62 )					  
							      48 STORE_FAST 6 ( i )					    48 STORE_FAST 6 ( i )					  
							      								    								  
							      7 50 LOAD_FAST 5 ( stk )					    7 50 LOAD_FAST 5 ( stk )					  
							      52 LOAD_METHOD 1 ( append )				    52 LOAD_METHOD 1 ( append )					  
							      54 LOAD_FAST 2 ( a )					    54 LOAD_FAST 2 ( a )					  
							      56 LOAD_FAST 3 ( k )					    56 LOAD_FAST 3 ( k )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_FAST 6 ( i )					    60 LOAD_FAST 6 ( i )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 CALL_METHOD 1						    64 CALL_METHOD 1						  
							      66 POP_TOP						    66 POP_TOP							  
							      68 JUMP_ABSOLUTE 46					    68 JUMP_ABSOLUTE 46						  
							      >> 70 POP_BLOCK						    >> 70 POP_BLOCK						  
							      								    								  
							      8 >> 72 LOAD_FAST 3 ( k )					    8 >> 72 LOAD_FAST 3 ( k )					  
							      74 LOAD_CONST 2 ( 1 )					    74 LOAD_CONST 2 ( 1 )					  
							      76 INPLACE_ADD						    76 INPLACE_ADD						  
							      78 STORE_FAST 3 ( k )					    78 STORE_FAST 3 ( k )					  
							      								    								  
							      9 80 SETUP_LOOP 40 ( to 122 )				    9 80 SETUP_LOOP 34 ( to 126 )				  
							      82 LOAD_GLOBAL 0 ( range )				    82 LOAD_GLOBAL 0 ( range )					  
							      84 LOAD_FAST 3 ( k )					    84 LOAD_FAST 3 ( k )					  
							      86 LOAD_FAST 0 ( m )					    86 LOAD_FAST 0 ( m )					  
							      88 LOAD_CONST 2 ( 1 )					    88 LOAD_CONST 2 ( 1 )					  
							      90 BINARY_ADD						    90 BINARY_ADD						  
							      92 CALL_FUNCTION 2					    92 CALL_FUNCTION 2						  
							      94 GET_ITER						    94 GET_ITER							  
							      >> 96 FOR_ITER 22 ( to 120 )				    >> 96 FOR_ITER 18 ( to 124 )				  
							      98 STORE_FAST 6 ( i )					    98 STORE_FAST 6 ( i )					  
							      								    								  
							      10 100 LOAD_FAST 5 ( stk )				    10 100 LOAD_FAST 5 ( stk )					  
							      102 LOAD_METHOD 1 ( append )				    102 LOAD_METHOD 1 ( append )				  
							      104 LOAD_FAST 2 ( a )					    104 LOAD_FAST 2 ( a )					  
							      106 LOAD_FAST 6 ( i )					    106 LOAD_FAST 6 ( i )					  
							      108 BINARY_SUBSCR						    108 BINARY_SUBSCR						  
							      110 LOAD_FAST 1 ( n )					    110 LOAD_FAST 1 ( n )					  
							      112 BINARY_SUBSCR						    112 BINARY_SUBSCR						  
							      114 CALL_METHOD 1						    114 CALL_METHOD 1						  
							      116 POP_TOP						    116 POP_TOP							  
							      118 JUMP_ABSOLUTE 96					    118 JUMP_ABSOLUTE 96					  
							      >> 120 POP_BLOCK						    >> 120 POP_BLOCK						  
							      								    								  
							      11 >> 122 LOAD_FAST 1 ( n )				    11 >> 122 LOAD_FAST 1 ( n )					  
							      124 LOAD_CONST 2 ( 1 )					    124 LOAD_CONST 2 ( 1 )					  
							      126 INPLACE_SUBTRACT					    126 INPLACE_SUBTRACT					  
							      128 STORE_FAST 1 ( n )					    128 STORE_FAST 1 ( n )					  
							      								    								  
							      12 130 LOAD_FAST 3 ( k )					    12 130 LOAD_FAST 3 ( k )					  
							      132 LOAD_FAST 0 ( m )					    132 LOAD_FAST 0 ( m )					  
							      134 COMPARE_OP 1 ( <= )					    134 COMPARE_OP 1 ( <= )					  
							      136 POP_JUMP_IF_FALSE 190					    136 POP_JUMP_IF_FALSE 170					  
							      								    								  
							      13 138 SETUP_LOOP 42 ( to 182 )				    13 138 SETUP_LOOP 34 ( to 166 )				  
							      140 LOAD_GLOBAL 0 ( range )				    140 LOAD_GLOBAL 0 ( range )					  
							      142 LOAD_FAST 1 ( n )					    142 LOAD_FAST 1 ( n )					  
							      144 LOAD_FAST 4 ( l )					    144 LOAD_FAST 4 ( l )					  
							      146 LOAD_CONST 2 ( 1 )					    146 LOAD_CONST 2 ( 1 )					  
							      148 BINARY_SUBTRACT					    148 BINARY_SUBTRACT						  
							      150 LOAD_CONST 3 ( - 1 )					    150 LOAD_CONST 3 ( - 1 )					  
							      152 CALL_FUNCTION 3					    152 CALL_FUNCTION 3						  
							      154 GET_ITER						    154 GET_ITER						  
							      >> 156 FOR_ITER 22 ( to 180 )				    >> 156 FOR_ITER 18 ( to 164 )				  
							      158 STORE_FAST 6 ( i )					    158 STORE_FAST 6 ( i )					  
							      								    								  
							      14 160 LOAD_FAST 5 ( stk )				    14 160 LOAD_FAST 5 ( stk )					  
							      162 LOAD_METHOD 1 ( append )				    162 LOAD_METHOD 1 ( append )				  
							      164 LOAD_FAST 2 ( a )					    164 LOAD_FAST 2 ( a )					  
							      166 LOAD_FAST 0 ( m )					    166 LOAD_FAST 0 ( m )					  
							      168 BINARY_SUBSCR						    168 BINARY_SUBSCR						  
							      170 LOAD_FAST 6 ( i )					    170 LOAD_FAST 6 ( i )					  
							      172 BINARY_SUBSCR						    172 BINARY_SUBSCR						  
							      174 CALL_METHOD 1						    174 CALL_METHOD 1						  
							      176 POP_TOP						    176 POP_TOP							  
							      178 JUMP_ABSOLUTE 156					    178 JUMP_ABSOLUTE 156					  
							      >> 180 POP_BLOCK						    >> 180 POP_BLOCK						  
							      								    								  
							      15 >> 182 LOAD_FAST 0 ( m )				    15 >> 182 LOAD_FAST 0 ( m )					  
							      184 LOAD_CONST 2 ( 1 )					    184 LOAD_CONST 2 ( 1 )					  
							      186 INPLACE_SUBTRACT					    186 INPLACE_SUBTRACT					  
							      188 STORE_FAST 0 ( m )					    188 STORE_FAST 0 ( m )					  
							      								    190 JUMP_ABSOLUTE 14					  
							      16 >> 190 LOAD_FAST 4 ( l )				    >> 192 POP_BLOCK						  
							      192 LOAD_FAST 1 ( n )					    								  
							      194 COMPARE_OP 1 ( <= )					    16 >> 194 LOAD_FAST 4 ( l )					  
							      196 POP_JUMP_IF_FALSE 14					    196 LOAD_FAST 1 ( n )					  
							      								    198 COMPARE_OP 1 ( <= )					  
							      17 198 SETUP_LOOP 42 ( to 242 )				    200 POP_JUMP_IF_FALSE 192					  
							      200 LOAD_GLOBAL 0 ( range )				    								  
							      202 LOAD_FAST 0 ( m )					    17 202 SETUP_LOOP 38 ( to 206 )				  
							      204 LOAD_FAST 3 ( k )					    204 LOAD_GLOBAL 0 ( range )					  
							      206 LOAD_CONST 2 ( 1 )					    206 LOAD_FAST 0 ( m )					  
							      208 BINARY_SUBTRACT					    208 LOAD_FAST 3 ( k )					  
							      210 LOAD_CONST 3 ( - 1 )					    210 LOAD_CONST 2 ( 1 )					  
							      212 CALL_FUNCTION 3					    212 BINARY_SUBTRACT						  
							      214 GET_ITER						    214 LOAD_CONST 3 ( - 1 )					  
							      >> 216 FOR_ITER 22 ( to 240 )				    216 CALL_FUNCTION 3						  
							      218 STORE_FAST 6 ( i )					    218 GET_ITER						  
							      								    >> 220 FOR_ITER 18 ( to 204 )				  
							      18 220 LOAD_FAST 5 ( stk )				    222 STORE_FAST 6 ( i )					  
							      222 LOAD_METHOD 1 ( append )				    								  
							      224 LOAD_FAST 2 ( a )					    18 226 LOAD_FAST 5 ( stk )					  
							      226 LOAD_FAST 6 ( i )					    228 LOAD_METHOD 1 ( append )				  
							      228 BINARY_SUBSCR						    230 LOAD_FAST 2 ( a )					  
							      230 LOAD_FAST 4 ( l )					    232 LOAD_FAST 6 ( i )					  
							      232 BINARY_SUBSCR						    234 BINARY_SUBSCR						  
							      234 CALL_METHOD 1						    236 LOAD_FAST 4 ( l )					  
							      236 POP_TOP						    238 BINARY_SUBSCR						  
							      238 JUMP_ABSOLUTE 216					    240 CALL_METHOD 1						  
							      >> 240 POP_BLOCK						    242 POP_TOP							  
							      								    								  
							      19 >> 242 LOAD_FAST 4 ( l )				    19 >> 244 LOAD_FAST 4 ( l )					  
							      244 LOAD_CONST 2 ( 1 )					    246 LOAD_CONST 2 ( 1 )					  
							      246 INPLACE_ADD						    248 INPLACE_ADD						  
							      248 STORE_FAST 4 ( l )					    250 STORE_FAST 4 ( l )					  
							      250 JUMP_ABSOLUTE 14					    252 JUMP_ABSOLUTE 220					  
							      >> 252 POP_BLOCK						    >> 254 POP_BLOCK						  
							      								    >> 256 JUMP_ABSOLUTE 14					  
							      20 >> 254 SETUP_LOOP 48 ( to 304 )			    >> 258 POP_BLOCK						  
							      >> 256 LOAD_GLOBAL 2 ( len )				    								  
							      258 LOAD_FAST 5 ( stk )					    20 >> 260 SETUP_LOOP 46 ( to 266 )				  
							      260 CALL_FUNCTION 1					    262 LOAD_GLOBAL 2 ( len )					  
							      262 LOAD_CONST 1 ( 0 )					    264 LOAD_FAST 5 ( stk )					  
							      264 COMPARE_OP 3 ( != )					    266 CALL_FUNCTION 1						  
							      266 EXTENDED_ARG 1					    268 LOAD_CONST 1 ( 0 )					  
							      268 POP_JUMP_IF_FALSE 302					    270 COMPARE_OP 3 ( != )					  
							      								    272 EXTENDED_ARG 1						  
							      21 270 LOAD_GLOBAL 3 ( print )				    274 POP_JUMP_IF_FALSE 264					  
							      272 LOAD_GLOBAL 4 ( str )					    								  
							      274 LOAD_FAST 5 ( stk )					    21 276 LOAD_GLOBAL 3 ( print )				  
							      276 LOAD_CONST 3 ( - 1 )					    278 LOAD_GLOBAL 4 ( str )					  
							      278 BINARY_SUBSCR						    280 LOAD_FAST 5 ( stk )					  
							      280 CALL_FUNCTION 1					    282 LOAD_CONST 3 ( - 1 )					  
							      282 LOAD_CONST 4 ( ' ' )					    284 BINARY_SUBSCR						  
							      284 LOAD_CONST 5 ( ( 'end' , ) )				    286 CALL_FUNCTION 1						  
							      286 CALL_FUNCTION_KW 2					    288 LOAD_CONST 4 ( ' ' )					  
							      288 POP_TOP						    290 LOAD_CONST 5 ( ( ( 'end' , ) ) )			  
							      								    292 CALL_FUNCTION_KW 2					  
							      22 290 LOAD_FAST 5 ( stk )				    294 POP_TOP							  
							      292 LOAD_METHOD 5 ( pop )					    								  
							      294 CALL_METHOD 0						    22 296 LOAD_FAST 5 ( stk )					  
							      296 POP_TOP						    298 LOAD_METHOD 5 ( pop )					  
							      298 EXTENDED_ARG 1					    300 CALL_METHOD 0						  
							      300 JUMP_ABSOLUTE 256					    302 POP_TOP							  
							      >> 302 POP_BLOCK						    >> 300 LOAD_CONST 0 ( None )				  
							      >> 304 LOAD_CONST 0 ( None )				    302 RETURN_VALUE NEW_LINE					  
							      306 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_FREQUENCY_ELEMENT				      NEXT_GREATER_FREQUENCY_ELEMENT				    NEXT_GREATER_FREQUENCY_ELEMENT				  NEXT_GREATER_FREQUENCY_ELEMENT
--							      --							    --								  --
def NFG ( a , n ) :					      Disassembly of <code object NFG at 0x7f33e2649a50, file "<dis Disassembly of <code object NFG at 0x7f2b0163dc90, file "<dis script_not_found : None
    if ( n <= 0 ) :					      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  
	print ( "List empty" )				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
	return [ ]					      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    stack = [ 0 ] * n					      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 20					  
    freq = { }						      								    								  
    for i in a :					      3 8 LOAD_GLOBAL 0 ( print )				    3 8 LOAD_GLOBAL 0 ( print )					  
	freq [ a [ i ] ] = 0				      10 LOAD_CONST 2 ( 'List empty' )				    10 LOAD_CONST 2 ( 'List empty' )				  
    for i in a :					      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	freq [ a [ i ] ] += 1				      14 POP_TOP						    14 POP_TOP							  
    res = [ 0 ] * n					      								    								  
    top = - 1						      4 16 BUILD_LIST 0						    4 16 BUILD_LIST 0						  
    top += 1						      18 RETURN_VALUE						    18 RETURN_VALUE						  
    stack [ top ] = 0					      								    								  
    for i in range ( 1 , n ) :				      5 >> 20 LOAD_CONST 1 ( 0 )				    5 >> 20 LOAD_CONST 1 ( 0 )					  
	if ( freq [ a [ stack [ top ] ] ] > freq [ a [ i ] ]  22 BUILD_LIST 1						    22 BUILD_LIST 1						  
	    top += 1					      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
	    stack [ top ] = i				      26 BINARY_MULTIPLY					    26 BINARY_MULTIPLY						  
	else :						      28 STORE_FAST 2 ( stack )					    28 STORE_FAST 2 ( stack )					  
	    while ( top > - 1 and freq [ a [ stack [ top ] ]  								    								  
		res [ stack [ top ] ] = a [ i ]		      6 30 BUILD_MAP 0						    6 30 BUILD_MAP 0						  
		top -= 1				      32 STORE_FAST 3 ( freq )					    32 STORE_FAST 3 ( freq )					  
	    top += 1					      								    								  
	    stack [ top ] = i				      7 34 SETUP_LOOP 24 ( to 60 )				    7 34 BUILD_MAP 0						  
    while ( top > - 1 ) :				      36 LOAD_FAST 0 ( a )					    36 STORE_FAST 4 ( freq )					  
	res [ stack [ top ] ] = - 1			      38 GET_ITER						    								  
	top -= 1					      >> 40 FOR_ITER 16 ( to 58 )				    8 38 SETUP_LOOP 32 ( to 70 )				  
    return res						      42 STORE_FAST 4 ( i )					    40 LOAD_FAST 0 ( a )					  
							      								    42 GET_ITER							  
							      8 44 LOAD_CONST 1 ( 0 )					    >> 44 FOR_ITER 24 ( to 68 )					  
							      46 LOAD_FAST 3 ( freq )					    46 STORE_FAST 5 ( i )					  
							      48 LOAD_FAST 0 ( a )					    								  
							      50 LOAD_FAST 4 ( i )					    9 48 LOAD_FAST 3 ( freq )					  
							      52 BINARY_SUBSCR						    50 LOAD_FAST 0 ( a )					  
							      54 STORE_SUBSCR						    52 LOAD_FAST 5 ( i )					  
							      56 JUMP_ABSOLUTE 40					    54 BINARY_SUBSCR						  
							      >> 58 POP_BLOCK						    56 DUP_TOP_TWO						  
							      								    58 BINARY_SUBSCR						  
							      9 >> 60 SETUP_LOOP 32 ( to 94 )				    60 LOAD_CONST 3 ( 1 )					  
							      62 LOAD_FAST 0 ( a )					    62 INPLACE_ADD						  
							      64 GET_ITER						    64 ROT_THREE						  
							      >> 66 FOR_ITER 24 ( to 92 )				    66 STORE_SUBSCR						  
							      68 STORE_FAST 4 ( i )					    >> 68 JUMP_ABSOLUTE 44					  
							      								    >> 70 POP_BLOCK						  
							      10 70 LOAD_FAST 3 ( freq )				    								  
							      72 LOAD_FAST 0 ( a )					    10 >> 72 LOAD_CONST 1 ( 0 )					  
							      74 LOAD_FAST 4 ( i )					    74 BUILD_LIST 1						  
							      76 BINARY_SUBSCR						    76 LOAD_FAST 1 ( n )					  
							      78 DUP_TOP_TWO						    78 BINARY_MULTIPLY						  
							      80 BINARY_SUBSCR						    80 STORE_FAST 6 ( res )					  
							      82 LOAD_CONST 3 ( 1 )					    								  
							      84 INPLACE_ADD						    11 82 LOAD_CONST 4 ( - 1 )					  
							      86 ROT_THREE						    84 STORE_FAST 7 ( top )					  
							      88 STORE_SUBSCR						    								  
							      90 JUMP_ABSOLUTE 66					    12 86 LOAD_FAST 2 ( stack )					  
							      >> 92 POP_BLOCK						    88 LOAD_CONST 1 ( 0 )					  
							      								    90 INPLACE_ADD						  
							      11 >> 94 LOAD_CONST 1 ( 0 )				    92 STORE_FAST 2 ( top )					  
							      96 BUILD_LIST 1						    								  
							      98 LOAD_FAST 1 ( n )					    13 94 LOAD_FAST 7 ( top )					  
							      100 BINARY_MULTIPLY					    96 LOAD_CONST 3 ( 1 )					  
							      102 STORE_FAST 5 ( res )					    98 INPLACE_ADD						  
							      								    100 STORE_FAST 7 ( top )					  
							      12 104 LOAD_CONST 4 ( - 1 )				    								  
							      106 STORE_FAST 6 ( top )					    14 102 LOAD_CONST 1 ( 0 )					  
							      								    104 STORE_FAST 8 ( top )					  
							      13 108 LOAD_FAST 6 ( top )				    								  
							      110 LOAD_CONST 3 ( 1 )					    15 106 SETUP_LOOP 88 ( to 182 )				  
							      112 INPLACE_ADD						    108 LOAD_GLOBAL 1 ( range )					  
							      114 STORE_FAST 6 ( top )					    110 LOAD_CONST 3 ( 1 )					  
							      								    112 LOAD_FAST 1 ( n )					  
							      14 116 LOAD_CONST 1 ( 0 )					    114 CALL_FUNCTION 2						  
							      118 LOAD_FAST 2 ( stack )					    116 GET_ITER						  
							      120 LOAD_FAST 6 ( top )					    >> 118 FOR_ITER 76 ( to 180 )				  
							      122 STORE_SUBSCR						    120 STORE_FAST 5 ( i )					  
							      								    								  
							      15 124 SETUP_LOOP 146 ( to 272 )				    16 122 LOAD_FAST 4 ( freq )					  
							      126 LOAD_GLOBAL 1 ( range )				    124 LOAD_FAST 0 ( a )					  
							      128 LOAD_CONST 3 ( 1 )					    126 LOAD_FAST 2 ( stack )					  
							      130 LOAD_FAST 1 ( n )					    128 LOAD_FAST 7 ( top )					  
							      132 CALL_FUNCTION 2					    130 BINARY_SUBSCR						  
							      134 GET_ITER						    132 BINARY_SUBSCR						  
							      >> 136 FOR_ITER 132 ( to 270 )				    134 BINARY_SUBSCR						  
							      138 STORE_FAST 4 ( i )					    136 LOAD_FAST 4 ( freq )					  
							      								    138 LOAD_FAST 0 ( a )					  
							      16 140 LOAD_FAST 3 ( freq )				    140 LOAD_FAST 5 ( i )					  
							      142 LOAD_FAST 0 ( a )					    142 BINARY_SUBSCR						  
							      144 LOAD_FAST 2 ( stack )					    144 BINARY_SUBSCR						  
							      146 LOAD_FAST 6 ( top )					    146 COMPARE_OP 4 ( > )					  
							      148 BINARY_SUBSCR						    148 POP_JUMP_IF_FALSE 164					  
							      150 BINARY_SUBSCR						    								  
							      152 BINARY_SUBSCR						    17 150 LOAD_FAST 7 ( top )					  
							      154 LOAD_FAST 3 ( freq )					    152 LOAD_CONST 3 ( 1 )					  
							      156 LOAD_FAST 0 ( a )					    154 INPLACE_ADD						  
							      158 LOAD_FAST 4 ( i )					    156 STORE_FAST 7 ( top )					  
							      160 BINARY_SUBSCR						    								  
							      162 BINARY_SUBSCR						    18 158 LOAD_FAST 5 ( i )					  
							      164 COMPARE_OP 4 ( > )					    160 LOAD_FAST 2 ( stack )					  
							      166 POP_JUMP_IF_FALSE 186					    162 LOAD_FAST 7 ( top )					  
							      								    164 STORE_SUBSCR						  
							      17 168 LOAD_FAST 6 ( top )				    162 JUMP_ABSOLUTE 118					  
							      170 LOAD_CONST 3 ( 1 )					    								  
							      172 INPLACE_ADD						    20 >> 164 SETUP_LOOP 76 ( to 210 )				  
							      174 STORE_FAST 6 ( top )					    >> 166 LOAD_FAST 7 ( top )					  
							      								    168 LOAD_CONST 5 ( - 1 )					  
							      18 176 LOAD_FAST 4 ( i )					    170 COMPARE_OP 4 ( > )					  
							      178 LOAD_FAST 2 ( stack )					    172 POP_JUMP_IF_FALSE 208					  
							      180 LOAD_FAST 6 ( top )					    174 LOAD_FAST 4 ( freq )					  
							      182 STORE_SUBSCR						    176 LOAD_FAST 0 ( a )					  
							      184 JUMP_ABSOLUTE 136					    178 LOAD_FAST 2 ( stack )					  
							      								    180 BINARY_SUBSCR						  
							      20 >> 186 SETUP_LOOP 64 ( to 252 )			    182 BINARY_SUBSCR						  
							      >> 188 LOAD_FAST 6 ( top )				    184 LOAD_FAST 4 ( freq )					  
							      190 LOAD_CONST 4 ( - 1 )					    186 LOAD_FAST 0 ( a )					  
							      192 COMPARE_OP 4 ( > )					    188 LOAD_FAST 5 ( i )					  
							      194 POP_JUMP_IF_FALSE 250					    190 BINARY_SUBSCR						  
							      196 LOAD_FAST 3 ( freq )					    192 COMPARE_OP 0 ( < )					  
							      198 LOAD_FAST 0 ( a )					    194 POP_JUMP_IF_FALSE 208					  
							      200 LOAD_FAST 2 ( stack )					    								  
							      202 LOAD_FAST 6 ( top )					    21 196 LOAD_FAST 0 ( a )					  
							      204 BINARY_SUBSCR						    198 LOAD_FAST 5 ( i )					  
							      206 BINARY_SUBSCR						    200 BINARY_SUBSCR						  
							      208 BINARY_SUBSCR						    202 LOAD_FAST 6 ( res )					  
							      210 LOAD_FAST 3 ( freq )					    204 LOAD_FAST 2 ( top )					  
							      212 LOAD_FAST 0 ( a )					    206 BINARY_SUBSCR						  
							      214 LOAD_FAST 4 ( i )					    208 STORE_SUBSCR						  
							      216 BINARY_SUBSCR						    								  
							      218 BINARY_SUBSCR						    22 210 LOAD_FAST 7 ( top )					  
							      220 COMPARE_OP 0 ( < )					    212 LOAD_CONST 3 ( 1 )					  
							      222 POP_JUMP_IF_FALSE 250					    214 INPLACE_SUBTRACT					  
							      								    216 STORE_FAST 7 ( top )					  
							      21 224 LOAD_FAST 0 ( a )					    218 JUMP_ABSOLUTE 166					  
							      226 LOAD_FAST 4 ( i )					    >> 220 POP_BLOCK						  
							      228 BINARY_SUBSCR						    								  
							      230 LOAD_FAST 5 ( res )					    23 >> 222 LOAD_FAST 7 ( top )				  
							      232 LOAD_FAST 2 ( stack )					    224 LOAD_CONST 3 ( 1 )					  
							      234 LOAD_FAST 6 ( top )					    226 INPLACE_ADD						  
							      236 BINARY_SUBSCR						    228 STORE_FAST 7 ( top )					  
							      238 STORE_SUBSCR						    								  
							      								    24 230 LOAD_FAST 5 ( i )					  
							      22 240 LOAD_FAST 6 ( top )				    232 LOAD_FAST 2 ( stack )					  
							      242 LOAD_CONST 3 ( 1 )					    234 LOAD_FAST 7 ( top )					  
							      244 INPLACE_SUBTRACT					    236 STORE_SUBSCR						  
							      246 STORE_FAST 6 ( top )					    238 JUMP_ABSOLUTE 44					  
							      248 JUMP_ABSOLUTE 188					    >> 240 POP_BLOCK						  
							      >> 250 POP_BLOCK						    								  
							      								    25 >> 242 SETUP_LOOP 48 ( to 268 )				  
							      23 >> 252 LOAD_FAST 6 ( top )				    >> 244 LOAD_FAST 7 ( top )					  
							      254 LOAD_CONST 3 ( 1 )					    246 LOAD_CONST 6 ( - 1 )					  
							      256 INPLACE_ADD						    248 COMPARE_OP 4 ( > )					  
							      258 STORE_FAST 6 ( top )					    250 EXTENDED_ARG 1						  
							      								    252 POP_JUMP_IF_FALSE 270					  
							      24 260 LOAD_FAST 4 ( i )					    								  
							      262 LOAD_FAST 2 ( stack )					    26 254 LOAD_CONST 4 ( - 1 )					  
							      264 LOAD_FAST 6 ( top )					    256 INPLACE_SUBTRACT					  
							      266 STORE_SUBSCR						    258 STORE_FAST 7 ( top )					  
							      268 JUMP_ABSOLUTE 136					    								  
							      >> 270 POP_BLOCK						    27 260 LOAD_FAST 7 ( top )					  
							      								    262 LOAD_CONST 3 ( 1 )					  
							      25 >> 272 SETUP_LOOP 36 ( to 310 )			    264 INPLACE_SUBTRACT					  
							      >> 274 LOAD_FAST 6 ( top )				    266 STORE_FAST 7 ( top )					  
							      276 LOAD_CONST 4 ( - 1 )					    								  
							      278 COMPARE_OP 4 ( > )					    28 268 LOAD_FAST 7 ( top )					  
							      280 EXTENDED_ARG 1					    270 LOAD_CONST 3 ( 1 )					  
							      282 POP_JUMP_IF_FALSE 308					    272 INPLACE_SUBTRACT					  
							      								    274 STORE_FAST 7 ( top )					  
							      26 284 LOAD_CONST 4 ( - 1 )				    								  
							      286 LOAD_FAST 5 ( res )					    29 276 LOAD_FAST 7 ( top )					  
							      288 LOAD_FAST 2 ( stack )					    278 LOAD_CONST 3 ( 1 )					  
							      290 LOAD_FAST 6 ( top )					    280 INPLACE_SUBTRACT					  
							      292 BINARY_SUBSCR						    282 STORE_FAST 7 ( top )					  
							      294 STORE_SUBSCR						    								  
							      								    29 >> 284 LOAD_FAST 8 ( top )				  
							      27 296 LOAD_FAST 6 ( top )				    286 LOAD_CONST 3 ( 1 )					  
							      298 LOAD_CONST 3 ( 1 )					    288 INPLACE_SUBTRACT					  
							      300 INPLACE_SUBTRACT					    290 STORE_FAST 7 ( top )					  
							      302 STORE_FAST 6 ( top )					    								  
							      304 EXTENDED_ARG 1					    30 >> 292 LOAD_FAST 6 ( res )				  
							      306 JUMP_ABSOLUTE 274					    280 RETURN_VALUE NEW_LINE					  
							      >> 308 POP_BLOCK						    								  
							      								    								  
							      28 >> 310 LOAD_FAST 5 ( res )				    								  
							      312 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX	      MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX	    MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX		  MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX
--							      --							    --								  --
def FindMaxProduct ( arr , n ) :			      Disassembly of <code object FindMaxProduct at 0x7f33e26494b0, Disassembly of <code object FindMaxProduct at 0x7f2b0163dc90, script_not_found : None
    max = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( max )					    2 STORE_FAST 2 ( max )					  
	for j in range ( n ) :				      								    								  
	    if ( ( j - 3 ) >= 0 ) :			      3 4 EXTENDED_ARG 1					    3 4 SETUP_LOOP 190 ( to 200 )				  
		result = ( arr [ i ] [ j ] * arr [ i ] [ j -  6 SETUP_LOOP 316 ( to 324 )				    6 LOAD_GLOBAL 0 ( range )					  
		if ( max < result ) :			      8 LOAD_GLOBAL 0 ( range )					    8 LOAD_FAST 1 ( n )						  
		    max = result			      10 LOAD_FAST 1 ( n )					    10 CALL_FUNCTION 1						  
	    if ( ( i - 3 ) >= 0 ) :			      12 CALL_FUNCTION 1					    12 GET_ITER							  
		result = ( arr [ i ] [ j ] * arr [ i - 1 ] [  14 GET_ITER						    >> 14 FOR_ITER 190 ( to 198 )				  
		if ( max < result ) :			      >> 16 EXTENDED_ARG 1					    16 STORE_FAST 3 ( i )					  
		    max = result			      18 FOR_ITER 302 ( to 322 )				    								  
	    if ( ( i - 3 ) >= 0 and ( j - 3 ) >= 0 ) :	      20 STORE_FAST 3 ( i )					    4 18 SETUP_LOOP 180 ( to 196 )				  
		result = ( arr [ i ] [ j ] * arr [ i - 1 ] [  								    20 LOAD_GLOBAL 0 ( range )					  
		if ( max < result ) :			      4 22 EXTENDED_ARG 1					    22 LOAD_FAST 1 ( n )					  
		    max = result			      24 SETUP_LOOP 294 ( to 320 )				    24 CALL_FUNCTION 1						  
    return max						      26 LOAD_GLOBAL 0 ( range )				    26 GET_ITER							  
							      28 LOAD_FAST 1 ( n )					    >> 28 FOR_ITER 148 ( to 194 )				  
							      30 CALL_FUNCTION 1					    30 STORE_FAST 4 ( j )					  
							      32 GET_ITER						    								  
							      >> 34 EXTENDED_ARG 1					    5 32 LOAD_FAST 4 ( j )					  
							      36 FOR_ITER 280 ( to 318 )				    34 LOAD_CONST 2 ( 3 )					  
							      38 STORE_FAST 4 ( j )					    36 BINARY_SUBTRACT						  
							      								    38 LOAD_CONST 1 ( 0 )					  
							      5 40 LOAD_FAST 4 ( j )					    40 COMPARE_OP 5 ( >= )					  
							      42 LOAD_CONST 2 ( 3 )					    42 POP_JUMP_IF_FALSE 28					  
							      44 BINARY_SUBTRACT					    								  
							      46 LOAD_CONST 1 ( 0 )					    6 44 LOAD_FAST 0 ( arr )					  
							      48 COMPARE_OP 5 ( >= )					    46 LOAD_FAST 3 ( i )					  
							      50 POP_JUMP_IF_FALSE 124					    48 BINARY_SUBSCR						  
							      								    50 LOAD_FAST 4 ( j )					  
							      6 52 LOAD_FAST 0 ( arr )					    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_FAST 0 ( arr )					  
							      56 BINARY_SUBSCR						    56 LOAD_FAST 3 ( i )					  
							      58 LOAD_FAST 4 ( j )					    58 BINARY_SUBSCR						  
							      60 BINARY_SUBSCR						    60 LOAD_FAST 4 ( j )					  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_CONST 3 ( 1 )					  
							      64 LOAD_FAST 3 ( i )					    64 BINARY_SUBTRACT						  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 4 ( j )					    68 BINARY_MULTIPLY						  
							      70 LOAD_CONST 3 ( 1 )					    70 LOAD_FAST 0 ( arr )					  
							      72 BINARY_SUBTRACT					    72 LOAD_FAST 3 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 BINARY_MULTIPLY					    76 LOAD_FAST 4 ( j )					  
							      78 LOAD_FAST 0 ( arr )					    78 LOAD_CONST 2 ( 3 )					  
							      80 LOAD_FAST 3 ( i )					    80 BINARY_SUBTRACT						  
							      82 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 4 ( j )					    84 BINARY_MULTIPLY						  
							      86 LOAD_CONST 4 ( 2 )					    86 STORE_FAST 5 ( result )					  
							      88 BINARY_SUBTRACT					    								  
							      90 BINARY_SUBSCR						    7 88 LOAD_FAST 2 ( max )					  
							      92 BINARY_MULTIPLY					    90 LOAD_FAST 5 ( result )					  
							      94 LOAD_FAST 0 ( arr )					    92 COMPARE_OP 0 ( < )					  
							      96 LOAD_FAST 3 ( i )					    94 POP_JUMP_IF_FALSE 28					  
							      98 BINARY_SUBSCR						    								  
							      100 LOAD_FAST 4 ( j )					    8 96 LOAD_FAST 5 ( result )					  
							      102 LOAD_CONST 2 ( 3 )					    98 STORE_FAST 2 ( max )					  
							      104 BINARY_SUBTRACT					    100 JUMP_ABSOLUTE 28					  
							      106 BINARY_SUBSCR						    >> 102 POP_BLOCK						  
							      108 BINARY_MULTIPLY					    								  
							      110 STORE_FAST 5 ( result )				    9 >> 104 LOAD_FAST 3 ( i )					  
							      								    106 LOAD_CONST 2 ( 3 )					  
							      7 112 LOAD_FAST 2 ( max )					    108 BINARY_SUBTRACT						  
							      114 LOAD_FAST 5 ( result )				    110 LOAD_CONST 1 ( 0 )					  
							      116 COMPARE_OP 0 ( < )					    112 COMPARE_OP 5 ( >= )					  
							      118 POP_JUMP_IF_FALSE 124					    114 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      8 120 LOAD_FAST 5 ( result )				    10 116 LOAD_FAST 0 ( arr )					  
							      122 STORE_FAST 2 ( max )					    118 LOAD_FAST 0 ( arr )					  
							      								    120 LOAD_FAST 3 ( i )					  
							      9 >> 124 LOAD_FAST 3 ( i )				    122 BINARY_SUBSCR						  
							      126 LOAD_CONST 2 ( 3 )					    124 LOAD_FAST 4 ( j )					  
							      128 BINARY_SUBTRACT					    126 BINARY_SUBSCR						  
							      130 LOAD_CONST 1 ( 0 )					    128 LOAD_FAST 0 ( arr )					  
							      132 COMPARE_OP 5 ( >= )					    130 LOAD_FAST 3 ( i )					  
							      134 POP_JUMP_IF_FALSE 208					    132 LOAD_CONST 2 ( 3 )					  
							      								    134 BINARY_SUBTRACT						  
							      10 136 LOAD_FAST 0 ( arr )				    136 BINARY_SUBSCR						  
							      138 LOAD_FAST 3 ( i )					    138 LOAD_FAST 4 ( j )					  
							      140 BINARY_SUBSCR						    140 BINARY_SUBSCR						  
							      142 LOAD_FAST 4 ( j )					    142 LOAD_FAST 0 ( arr )					  
							      144 BINARY_SUBSCR						    144 LOAD_FAST 3 ( i )					  
							      146 LOAD_FAST 0 ( arr )					    146 LOAD_CONST 2 ( 3 )					  
							      148 LOAD_FAST 3 ( i )					    148 BINARY_SUBTRACT						  
							      150 LOAD_CONST 3 ( 1 )					    150 BINARY_SUBSCR						  
							      152 BINARY_SUBTRACT					    152 LOAD_FAST 4 ( j )					  
							      154 BINARY_SUBSCR						    154 BINARY_SUBSCR						  
							      156 LOAD_FAST 4 ( j )					    156 LOAD_FAST 0 ( arr )					  
							      158 BINARY_SUBSCR						    158 LOAD_FAST 3 ( i )					  
							      160 BINARY_MULTIPLY					    160 LOAD_CONST 2 ( 3 )					  
							      162 LOAD_FAST 0 ( arr )					    162 BINARY_SUBTRACT						  
							      164 LOAD_FAST 3 ( i )					    164 BINARY_SUBSCR						  
							      166 LOAD_CONST 4 ( 2 )					    166 LOAD_FAST 4 ( j )					  
							      168 BINARY_SUBTRACT					    168 BINARY_SUBSCR						  
							      170 BINARY_SUBSCR						    170 BINARY_MULTIPLY						  
							      172 LOAD_FAST 4 ( j )					    172 LOAD_FAST 0 ( arr )					  
							      174 BINARY_SUBSCR						    174 LOAD_FAST 3 ( i )					  
							      176 BINARY_MULTIPLY					    176 LOAD_CONST 2 ( 3 )					  
							      178 LOAD_FAST 0 ( arr )					    178 BINARY_SUBTRACT						  
							      180 LOAD_FAST 3 ( i )					    180 BINARY_SUBSCR						  
							      182 LOAD_CONST 2 ( 3 )					    182 LOAD_FAST 4 ( j )					  
							      184 BINARY_SUBTRACT					    184 BINARY_SUBSCR						  
							      186 BINARY_SUBSCR						    186 BINARY_MULTIPLY						  
							      188 LOAD_FAST 4 ( j )					    188 LOAD_FAST 0 ( arr )					  
							      190 BINARY_SUBSCR						    190 LOAD_FAST 3 ( i )					  
							      192 BINARY_MULTIPLY					    192 LOAD_CONST 2 ( 3 )					  
							      194 STORE_FAST 5 ( result )				    194 BINARY_SUBTRACT						  
							      								    196 BINARY_SUBSCR						  
							      11 196 LOAD_FAST 2 ( max )				    198 BINARY_MULTIPLY						  
							      198 LOAD_FAST 5 ( result )				    200 LOAD_FAST 4 ( j )					  
							      200 COMPARE_OP 0 ( < )					    202 BINARY_SUBSCR						  
							      202 POP_JUMP_IF_FALSE 208					    204 BINARY_MULTIPLY						  
							      								    206 STORE_FAST 5 ( result )					  
							      12 204 LOAD_FAST 5 ( result )				    								  
							      206 STORE_FAST 2 ( max )					    11 208 LOAD_FAST 2 ( max )					  
							      								    210 LOAD_FAST 5 ( result )					  
							      13 >> 208 LOAD_FAST 3 ( i )				    212 COMPARE_OP 0 ( < )					  
							      210 LOAD_CONST 2 ( 3 )					    214 POP_JUMP_IF_FALSE 28					  
							      212 BINARY_SUBTRACT					    								  
							      214 LOAD_CONST 1 ( 0 )					    12 216 LOAD_FAST 5 ( result )				  
							      216 COMPARE_OP 5 ( >= )					    218 STORE_FAST 2 ( max )					  
							      218 POP_JUMP_IF_FALSE 34					    >> 220 JUMP_ABSOLUTE 28					  
							      220 LOAD_FAST 4 ( j )					    >> 222 POP_BLOCK						  
							      222 LOAD_CONST 2 ( 3 )					    								  
							      224 BINARY_SUBTRACT					    13 >> 224 LOAD_FAST 3 ( i )					  
							      226 LOAD_CONST 1 ( 0 )					    226 LOAD_CONST 2 ( 3 )					  
							      228 COMPARE_OP 5 ( >= )					    228 BINARY_SUBTRACT						  
							      230 POP_JUMP_IF_FALSE 34					    230 LOAD_CONST 1 ( 0 )					  
							      								    232 COMPARE_OP 5 ( >= )					  
							      14 232 LOAD_FAST 0 ( arr )				    234 POP_JUMP_IF_FALSE 28					  
							      234 LOAD_FAST 3 ( i )					    236 LOAD_FAST 4 ( j )					  
							      236 BINARY_SUBSCR						    238 LOAD_CONST 2 ( 3 )					  
							      238 LOAD_FAST 4 ( j )					    240 BINARY_SUBTRACT						  
							      240 BINARY_SUBSCR						    242 LOAD_CONST 1 ( 0 )					  
							      242 LOAD_FAST 0 ( arr )					    244 COMPARE_OP 5 ( >= )					  
							      244 LOAD_FAST 3 ( i )					    246 POP_JUMP_IF_FALSE 28					  
							      246 LOAD_CONST 3 ( 1 )					    								  
							      248 BINARY_SUBTRACT					    29 248 LOAD_FAST 0 ( arr )					  
							      250 BINARY_SUBSCR						    250 LOAD_FAST 3 ( i )					  
							      252 LOAD_FAST 4 ( j )					    252 BINARY_SUBSCR						  
							      254 LOAD_CONST 3 ( 1 )					    254 LOAD_FAST 4 ( j )					  
							      256 BINARY_SUBTRACT					    256 BINARY_SUBSCR						  
							      258 BINARY_SUBSCR						    258 LOAD_FAST 0 ( arr )					  
							      260 BINARY_MULTIPLY					    260 LOAD_FAST 3 ( i )					  
							      262 LOAD_FAST 0 ( arr )					    262 LOAD_CONST 3 ( 1 )					  
							      264 LOAD_FAST 3 ( i )					    264 BINARY_SUBTRACT						  
							      266 LOAD_CONST 4 ( 2 )					    266 BINARY_SUBSCR						  
							      268 BINARY_SUBTRACT					    268 BINARY_MULTIPLY						  
							      270 BINARY_SUBSCR						    270 LOAD_FAST 4 ( j )					  
							      272 LOAD_FAST 4 ( j )					    272 LOAD_CONST 3 ( 1 )					  
							      274 LOAD_CONST 4 ( 2 )					    274 BINARY_SUBTRACT						  
							      276 BINARY_SUBTRACT					    276 BINARY_SUBSCR						  
							      278 BINARY_SUBSCR						    278 BINARY_MULTIPLY						  
							      280 BINARY_MULTIPLY					    280 LOAD_FAST 0 ( arr )					  
							      282 LOAD_FAST 0 ( arr )					    282 LOAD_FAST 3 ( i )					  
							      284 LOAD_FAST 3 ( i )					    284 LOAD_CONST 2 ( 2 )					  
							      286 LOAD_CONST 2 ( 3 )					    286 BINARY_SUBTRACT						  
							      288 BINARY_SUBTRACT					    288 BINARY_SUBSCR						  
							      290 BINARY_SUBSCR						    290 BINARY_MULTIPLY						  
							      292 LOAD_FAST 4 ( j )					    292 LOAD_FAST 4 ( j )					  
							      294 LOAD_CONST 2 ( 3 )					    294 LOAD_CONST 2 ( 3 )					  
							      296 BINARY_SUBTRACT					    296 BINARY_SUBTRACT						  
							      298 BINARY_SUBSCR						    298 BINARY_SUBSCR						  
							      300 BINARY_MULTIPLY					    300 BINARY_MULTIPLY						  
							      302 STORE_FAST 5 ( result )				    302 STORE_FAST 5 ( result )					  
							      								    								  
							      15 304 LOAD_FAST 2 ( max )				    30 304 LOAD_FAST 2 ( max )					  
							      306 LOAD_FAST 5 ( result )				    306 LOAD_FAST 5 ( result )					  
							      308 COMPARE_OP 0 ( < )					    308 COMPARE_OP 0 ( < )					  
							      310 POP_JUMP_IF_FALSE 34					    304 EXTENDED_ARG 1						  
							      								    306 POP_JUMP_IF_FALSE 28					  
							      16 312 LOAD_FAST 5 ( result )				    31 302 LOAD_FAST 5 ( result )				  
							      314 STORE_FAST 2 ( max )					    304 STORE_FAST 2 ( max )					  
							      316 JUMP_ABSOLUTE 34					    >> 306 JUMP_ABSOLUTE 28					  
							      >> 318 POP_BLOCK						    >> 308 POP_BLOCK						  
							      >> 320 JUMP_ABSOLUTE 16					    >> 304 JUMP_ABSOLUTE 28					  
							      >> 322 POP_BLOCK						    >> 306 POP_BLOCK						  
							      								    								  
							      17 >> 324 LOAD_FAST 2 ( max )				    32 >> 302 LOAD_FAST 2 ( max )				  
							      326 RETURN_VALUE NEW_LINE					    304 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS	      FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS		    FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS		  FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS
--							      --							    --								  --
def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :      Disassembly of <code object maxSum at 0x7f33e2649a50, file "< Disassembly of <code object maxSum at 0x7f2b0163dc90, file "< script_not_found : None
    sum1 , sum2 , sum3 = 0 , 0 , 0			      2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 ) )			    2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 ) )				  
    for i in range ( n1 ) :				      2 UNPACK_SEQUENCE 3					    2 UNPACK_SEQUENCE 3						  
	sum1 += stack1 [ i ]				      4 STORE_FAST 6 ( sum1 )					    4 STORE_FAST 5 ( sum1 )					  
    for i in range ( n2 ) :				      6 STORE_FAST 7 ( sum2 )					    6 STORE_FAST 6 ( sum2 )					  
	sum2 += stack2 [ i ]				      8 STORE_FAST 8 ( sum3 )					    8 STORE_FAST 7 ( sum3 )					  
    for i in range ( n3 ) :				      								    								  
	sum3 += stack3 [ i ]				      3 10 SETUP_LOOP 28 ( to 40 )				    3 10 SETUP_LOOP 32 ( to 46 )				  
    top1 , top2 , top3 = 0 , 0 , 0			      12 LOAD_GLOBAL 0 ( range )				    12 LOAD_GLOBAL 0 ( range )					  
    ans = 0						      14 LOAD_FAST 3 ( n1 )					    14 LOAD_FAST 3 ( n1 )					  
    while ( 1 ) :					      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
	if ( top1 == n1 or top2 == n2 or top3 == n3 ) :	      18 GET_ITER						    18 GET_ITER							  
	    return 0					      >> 20 FOR_ITER 16 ( to 38 )				    >> 20 FOR_ITER 20 ( to 44 )					  
	if ( sum1 == sum2 and sum2 == sum3 ) :		      22 STORE_FAST 9 ( i )					    22 STORE_FAST 8 ( i )					  
	    return sum1					      								    								  
	if ( sum1 >= sum2 and sum1 >= sum3 ) :		      4 24 LOAD_FAST 6 ( sum1 )					    4 24 LOAD_FAST 6 ( sum1 )					  
	    sum1 -= stack1 [ top1 ]			      26 LOAD_FAST 0 ( stack1 )					    26 LOAD_FAST 0 ( stack1 )					  
	    top1 = top1 + 1				      28 LOAD_FAST 9 ( i )					    28 LOAD_FAST 8 ( i )					  
	elif ( sum2 >= sum3 and sum2 >= sum3 ) :	      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
	    sum2 -= stack2 [ top2 ]			      32 INPLACE_ADD						    32 INPLACE_ADD						  
	    top2 = top2 + 1				      34 STORE_FAST 6 ( sum1 )					    34 STORE_FAST 6 ( sum1 )					  
	elif ( sum3 >= sum2 and sum3 >= sum1 ) :	      36 JUMP_ABSOLUTE 20					    36 JUMP_ABSOLUTE 20						  
	    sum3 -= stack3 [ top3 ]			      >> 38 POP_BLOCK						    >> 38 POP_BLOCK						  
	    top3 = top3 + 1				      								    								  
							      5 >> 40 SETUP_LOOP 28 ( to 70 )				    5 >> 40 SETUP_LOOP 30 ( to 70 )				  
							      42 LOAD_GLOBAL 0 ( range )				    42 LOAD_GLOBAL 0 ( range )					  
							      44 LOAD_FAST 4 ( n2 )					    44 LOAD_FAST 4 ( n2 )					  
							      46 CALL_FUNCTION 1					    46 CALL_FUNCTION 1						  
							      48 GET_ITER						    48 GET_ITER							  
							      >> 50 FOR_ITER 16 ( to 68 )				    >> 50 FOR_ITER 20 ( to 68 )					  
							      52 STORE_FAST 9 ( i )					    52 STORE_FAST 8 ( i )					  
							      								    								  
							      6 54 LOAD_FAST 7 ( sum2 )					    6 54 LOAD_FAST 6 ( sum2 )					  
							      56 LOAD_FAST 1 ( stack2 )					    56 LOAD_FAST 0 ( stack1 )					  
							      58 LOAD_FAST 9 ( i )					    58 LOAD_FAST 8 ( i )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 INPLACE_ADD						    62 INPLACE_ADD						  
							      64 STORE_FAST 7 ( sum2 )					    64 STORE_FAST 6 ( sum3 )					  
							      66 JUMP_ABSOLUTE 50					    66 JUMP_ABSOLUTE 50						  
							      >> 68 POP_BLOCK						    >> 68 POP_BLOCK						  
							      								    								  
							      7 >> 70 SETUP_LOOP 28 ( to 100 )				    7 >> 70 SETUP_LOOP 30 ( to 108 )				  
							      72 LOAD_GLOBAL 0 ( range )				    72 LOAD_GLOBAL 0 ( range )					  
							      74 LOAD_FAST 5 ( n3 )					    74 LOAD_FAST 5 ( n3 )					  
							      76 CALL_FUNCTION 1					    76 CALL_FUNCTION 1						  
							      78 GET_ITER						    78 GET_ITER							  
							      >> 80 FOR_ITER 16 ( to 98 )				    >> 80 FOR_ITER 12 ( to 106 )				  
							      82 STORE_FAST 9 ( i )					    82 STORE_FAST 8 ( i )					  
							      								    								  
							      8 84 LOAD_FAST 8 ( sum3 )					    8 84 LOAD_FAST 6 ( sum3 )					  
							      86 LOAD_FAST 2 ( stack3 )					    86 LOAD_FAST 0 ( stack1 )					  
							      88 LOAD_FAST 9 ( i )					    88 LOAD_FAST 8 ( i )					  
							      90 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      92 INPLACE_ADD						    92 INPLACE_ADD						  
							      94 STORE_FAST 8 ( sum3 )					    94 STORE_FAST 6 ( sum3 )					  
							      96 JUMP_ABSOLUTE 80					    96 JUMP_ABSOLUTE 80						  
							      >> 98 POP_BLOCK						    >> 98 POP_BLOCK						  
							      								    								  
							      9 >> 100 LOAD_CONST 1 ( ( 0 , 0 , 0 ) )			    9 >> 100 SETUP_LOOP 74 ( to 194 )				  
							      102 UNPACK_SEQUENCE 3					    >> 102 LOAD_FAST 7 ( sum3 )					  
							      104 STORE_FAST 10 ( top1 )				    104 UNPACK_SEQUENCE 3					  
							      106 STORE_FAST 11 ( top2 )				    106 STORE_FAST 9 ( top1 )					  
							      108 STORE_FAST 12 ( top3 )				    108 STORE_FAST 10 ( top2 )					  
							      								    110 STORE_FAST 11 ( top3 )					  
							      10 110 LOAD_CONST 2 ( 0 )					    								  
							      112 STORE_FAST 13 ( ans )					    10 112 LOAD_CONST 1 ( 0 )					  
							      								    114 STORE_FAST 12 ( ans )					  
							      11 114 SETUP_LOOP 164 ( to 280 )				    								  
							      								    11 116 SETUP_LOOP 40 ( to 156 )				  
							      12 >> 116 LOAD_FAST 10 ( top1 )				    >> 118 LOAD_FAST 9 ( 1 )					  
							      118 LOAD_FAST 3 ( n1 )					    120 POP_JUMP_IF_FALSE 154					  
							      120 COMPARE_OP 2 ( == )					    								  
							      122 POP_JUMP_IF_TRUE 140					    12 122 LOAD_FAST 9 ( top1 )					  
							      124 LOAD_FAST 11 ( top2 )					    124 LOAD_FAST 3 ( n1 )					  
							      126 LOAD_FAST 4 ( n2 )					    126 COMPARE_OP 2 ( == )					  
							      128 COMPARE_OP 2 ( == )					    128 POP_JUMP_IF_TRUE 146					  
							      130 POP_JUMP_IF_TRUE 140					    130 LOAD_FAST 10 ( top2 )					  
							      132 LOAD_FAST 12 ( top3 )					    132 LOAD_FAST 4 ( n2 )					  
							      134 LOAD_FAST 5 ( n3 )					    134 COMPARE_OP 2 ( == )					  
							      136 COMPARE_OP 2 ( == )					    136 POP_JUMP_IF_TRUE 146					  
							      138 POP_JUMP_IF_FALSE 144					    138 LOAD_FAST 10 ( top3 )					  
							      								    140 LOAD_FAST 5 ( n3 )					  
							      13 >> 140 LOAD_CONST 2 ( 0 )				    142 COMPARE_OP 2 ( == )					  
							      142 RETURN_VALUE						    144 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      14 >> 144 LOAD_FAST 6 ( sum1 )				    13 >> 146 LOAD_CONST 1 ( 0 )				  
							      146 LOAD_FAST 7 ( sum2 )					    148 RETURN_VALUE						  
							      148 COMPARE_OP 2 ( == )					    								  
							      150 POP_JUMP_IF_FALSE 164					    14 >> 150 LOAD_FAST 6 ( sum1 )				  
							      152 LOAD_FAST 7 ( sum2 )					    152 LOAD_FAST 7 ( sum2 )					  
							      154 LOAD_FAST 8 ( sum3 )					    154 COMPARE_OP 2 ( == )					  
							      156 COMPARE_OP 2 ( == )					    156 POP_JUMP_IF_FALSE 176					  
							      158 POP_JUMP_IF_FALSE 164					    158 LOAD_FAST 7 ( sum3 )					  
							      								    160 LOAD_FAST 7 ( sum3 )					  
							      15 160 LOAD_FAST 6 ( sum1 )				    162 COMPARE_OP 5 ( >= )					  
							      162 RETURN_VALUE						    164 POP_JUMP_IF_FALSE 176					  
							      								    								  
							      16 >> 164 LOAD_FAST 6 ( sum1 )				    15 166 LOAD_FAST 7 ( sum3 )					  
							      166 LOAD_FAST 7 ( sum2 )					    168 RETURN_VALUE						  
							      168 COMPARE_OP 5 ( >= )					    								  
							      170 POP_JUMP_IF_FALSE 202					    16 >> 170 LOAD_FAST 6 ( sum1 )				  
							      172 LOAD_FAST 6 ( sum1 )					    172 LOAD_FAST 6 ( sum2 )					  
							      174 LOAD_FAST 8 ( sum3 )					    174 LOAD_FAST 7 ( sum3 )					  
							      176 COMPARE_OP 5 ( >= )					    176 COMPARE_OP 5 ( >= )					  
							      178 POP_JUMP_IF_FALSE 202					    178 POP_JUMP_IF_FALSE 206					  
							      								    								  
							      17 180 LOAD_FAST 6 ( sum1 )				    17 180 LOAD_FAST 6 ( sum1 )					  
							      182 LOAD_FAST 0 ( stack1 )				    182 LOAD_FAST 6 ( sum1 )					  
							      184 LOAD_FAST 10 ( top1 )					    184 LOAD_FAST 9 ( top1 )					  
							      186 BINARY_SUBSCR						    186 DUP_TOP_TWO						  
							      188 INPLACE_SUBTRACT					    188 LOAD_FAST 9 ( top1 )					  
							      190 STORE_FAST 6 ( sum1 )					    190 BINARY_SUBSCR						  
							      								    192 INPLACE_SUBTRACT					  
							      18 192 LOAD_FAST 10 ( top1 )				    194 STORE_FAST 6 ( sum1 )					  
							      194 LOAD_CONST 3 ( 1 )					    								  
							      196 BINARY_ADD						    18 196 LOAD_FAST 10 ( top1 )				  
							      198 STORE_FAST 10 ( top1 )				    198 LOAD_CONST 2 ( 1 )					  
							      200 JUMP_ABSOLUTE 116					    200 BINARY_ADD						  
							      								    202 STORE_FAST 10 ( top1 )					  
							      19 >> 202 LOAD_FAST 7 ( sum2 )				    204 JUMP_ABSOLUTE 118					  
							      204 LOAD_FAST 8 ( sum3 )					    								  
							      206 COMPARE_OP 5 ( >= )					    19 >> 206 LOAD_FAST 6 ( sum2 )				  
							      208 POP_JUMP_IF_FALSE 240					    208 LOAD_FAST 7 ( sum3 )					  
							      210 LOAD_FAST 7 ( sum2 )					    210 COMPARE_OP 5 ( >= )					  
							      212 LOAD_FAST 8 ( sum3 )					    212 POP_JUMP_IF_FALSE 218					  
							      214 COMPARE_OP 5 ( >= )					    214 LOAD_FAST 7 ( sum3 )					  
							      216 POP_JUMP_IF_FALSE 240					    216 LOAD_FAST 7 ( sum3 )					  
							      								    218 LOAD_FAST 6 ( sum3 )					  
							      20 218 LOAD_FAST 7 ( sum2 )				    220 LOAD_FAST 10 ( top2 )					  
							      220 LOAD_FAST 1 ( stack2 )				    222 BINARY_SUBSCR						  
							      222 LOAD_FAST 11 ( top2 )					    224 INPLACE_SUBTRACT					  
							      224 BINARY_SUBSCR						    226 STORE_FAST 6 ( sum2 )					  
							      226 INPLACE_SUBTRACT					    								  
							      228 STORE_FAST 7 ( sum2 )					    20 228 LOAD_FAST 10 ( top2 )				  
							      								    230 LOAD_CONST 2 ( 1 )					  
							      21 230 LOAD_FAST 11 ( top2 )				    232 BINARY_ADD						  
							      232 LOAD_CONST 3 ( 1 )					    234 STORE_FAST 10 ( top2 )					  
							      234 BINARY_ADD						    236 JUMP_ABSOLUTE 102					  
							      236 STORE_FAST 11 ( top2 )				    								  
							      238 JUMP_ABSOLUTE 116					    21 >> 238 LOAD_FAST 6 ( sum3 ( sum3 )			  
							      								    240 LOAD_FAST 8 ( top3 )					  
							      22 >> 240 LOAD_FAST 8 ( sum3 )				    242 DUP_TOP_TWO						  
							      242 LOAD_FAST 7 ( sum2 )					    244 BINARY_SUBSCR						  
							      244 COMPARE_OP 5 ( >= )					    246 STORE_FAST 9 ( top1 )					  
							      246 POP_JUMP_IF_FALSE 116					    								  
							      248 LOAD_FAST 8 ( sum3 )					    22 248 LOAD_FAST 10 ( top3 )				  
							      250 LOAD_FAST 6 ( sum1 )					    250 LOAD_CONST 2 ( 1 )					  
							      252 COMPARE_OP 5 ( >= )					    252 BINARY_ADD						  
							      254 POP_JUMP_IF_FALSE 116					    254 STORE_FAST 10 ( top3 )					  
							      								    256 JUMP_ABSOLUTE 102					  
							      23 256 LOAD_FAST 8 ( sum3 )				    >> 258 POP_BLOCK						  
							      258 LOAD_FAST 2 ( stack3 )				    >> 260 LOAD_CONST 0 ( None )				  
							      260 LOAD_FAST 12 ( top3 )					    262 RETURN_VALUE NEW_LINE					  
							      262 BINARY_SUBSCR						    								  
							      264 INPLACE_SUBTRACT					    								  
							      266 STORE_FAST 8 ( sum3 )					    								  
							      								    								  
							      24 268 LOAD_FAST 12 ( top3 )				    								  
							      270 LOAD_CONST 3 ( 1 )					    								  
							      272 BINARY_ADD						    								  
							      274 STORE_FAST 12 ( top3 )				    								  
							      276 JUMP_ABSOLUTE 116					    								  
							      278 POP_BLOCK						    								  
							      >> 280 LOAD_CONST 0 ( None )				    								  
							      282 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		      POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		    POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS			  POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS
--							      --							    --								  --
def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :	      Disassembly of <code object pointClip at 0x7f33e2653f60, file Disassembly of <code object pointClip at 0x7f2b0163dc90, file error : Traceback (most recent call last):   File
    print ( "Point inside the viewing pane:" )		      2 0 LOAD_GLOBAL 0 ( print )				    2 0 LOAD_GLOBAL 0 ( print )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 LOAD_CONST 1 ( 'Point inside the viewing pane:' )	    2 LOAD_CONST 1 ( 'Point inside the viewing pane:' )		  (item)   File "main.py", line 50, in <module>	  Fi
	if ( ( XY [ i ] [ 0 ] >= Xmin ) and ( XY [ i ] [ 0 ]  4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in pointClip TypeError: 'int'
	    if ( ( XY [ i ] [ 1 ] >= Ymin ) and ( XY [ i ] [  6 POP_TOP							    6 POP_TOP							  object is not subscriptable
		print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i  								    								  
    print ( "\n\nPoint outside the viewing pane:" )	      3 8 SETUP_LOOP 118 ( to 128 )				    3 8 SETUP_LOOP 112 ( to 126 )				  
    for i in range ( n ) :				      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
	if ( ( XY [ i ] [ 0 ] < Xmin ) or ( XY [ i ] [ 0 ] >  12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
	    print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i ] [  14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
	if ( ( XY [ i ] [ 1 ] < Ymin ) or ( XY [ i ] [ 1 ] >  16 GET_ITER						    16 GET_ITER							  
	    print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i ] [  >> 18 FOR_ITER 106 ( to 126 )				    >> 18 FOR_ITER 104 ( to 124 )				  
							      20 STORE_FAST 6 ( i )					    20 STORE_FAST 5 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( XY )					    4 22 LOAD_FAST 0 ( XY )					  
							      24 LOAD_FAST 6 ( i )					    24 LOAD_FAST 5 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_CONST 2 ( 0 )					    28 LOAD_CONST 2 ( 0 )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 2 ( Xmin )					    32 LOAD_FAST 2 ( Xmin )					  
							      34 COMPARE_OP 5 ( >= )					    34 COMPARE_OP 5 ( >= )					  
							      36 POP_JUMP_IF_FALSE 18					    36 POP_JUMP_IF_FALSE 18					  
							      38 LOAD_FAST 0 ( XY )					    38 LOAD_FAST 0 ( XY )					  
							      40 LOAD_FAST 6 ( i )					    40 LOAD_FAST 5 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_CONST 2 ( 0 )					    44 LOAD_CONST 2 ( 0 )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_FAST 4 ( Xmax )					    48 LOAD_FAST 2 ( Xmax )					  
							      50 COMPARE_OP 1 ( <= )					    50 COMPARE_OP 1 ( <= )					  
							      52 POP_JUMP_IF_FALSE 18					    52 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      5 54 LOAD_FAST 0 ( XY )					    5 54 LOAD_FAST 0 ( XY )					  
							      56 LOAD_FAST 6 ( i )					    56 LOAD_FAST 5 ( i )					  
							      58 BINARY_SUBSCR						    58 BINARY_SUBSCR						  
							      60 LOAD_CONST 3 ( 1 )					    60 LOAD_CONST 3 ( 1 )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 LOAD_FAST 3 ( Ymin )					    64 LOAD_FAST 3 ( Ymin )					  
							      66 COMPARE_OP 5 ( >= )					    66 COMPARE_OP 5 ( >= )					  
							      68 POP_JUMP_IF_FALSE 18					    68 POP_JUMP_IF_FALSE 18					  
							      70 LOAD_FAST 0 ( XY )					    70 LOAD_FAST 0 ( XY )					  
							      72 LOAD_FAST 6 ( i )					    72 LOAD_FAST 5 ( i )					  
							      74 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      76 LOAD_CONST 3 ( 1 )					    76 LOAD_CONST 3 ( 1 )					  
							      78 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      80 LOAD_FAST 5 ( Ymax )					    80 LOAD_FAST 3 ( Ymin )					  
							      82 COMPARE_OP 1 ( <= )					    82 COMPARE_OP 1 ( <= )					  
							      84 POP_JUMP_IF_FALSE 18					    84 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      6 86 LOAD_GLOBAL 0 ( print )				    6 86 LOAD_GLOBAL 0 ( print )				  
							      88 LOAD_CONST 4 ( '[' )					    88 LOAD_CONST 4 ( '[' )					  
							      90 LOAD_FAST 0 ( XY )					    90 LOAD_FAST 0 ( XY )					  
							      92 LOAD_FAST 6 ( i )					    92 LOAD_FAST 5 ( i )					  
							      94 BINARY_SUBSCR						    94 BINARY_SUBSCR						  
							      96 LOAD_CONST 2 ( 0 )					    96 LOAD_CONST 2 ( 0 )					  
							      98 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      100 LOAD_CONST 5 ( ', ' )					    100 LOAD_CONST 5 ( ', ' )					  
							      102 LOAD_FAST 0 ( XY )					    102 LOAD_CONST 6 ( '' )					  
							      104 LOAD_FAST 6 ( i )					    104 LOAD_CONST 7 ( ' ' )					  
							      106 BINARY_SUBSCR						    106 LOAD_CONST 8 ( ( 'sep' , 'end' , 'end' ) )		  
							      108 LOAD_CONST 3 ( 1 )					    108 CALL_FUNCTION_KW 5					  
							      110 BINARY_SUBSCR						    110 POP_TOP							  
							      112 LOAD_CONST 6 ( ']' )					    112 JUMP_ABSOLUTE 18					  
							      114 LOAD_CONST 7 ( '' )					    >> 114 POP_BLOCK						  
							      116 LOAD_CONST 7 ( '' )					    								  
							      118 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			    7 >> 116 LOAD_GLOBAL 0 ( print )				  
							      120 CALL_FUNCTION_KW 7					    118 LOAD_CONST 9 ( '\nPoint outside the viewing pane:' )	  
							      122 POP_TOP						    120 CALL_FUNCTION 1						  
							      124 JUMP_ABSOLUTE 18					    122 POP_TOP							  
							      >> 126 POP_BLOCK						    								  
							      								    8 124 SETUP_LOOP 76 ( to 184 )				  
							      7 >> 128 LOAD_GLOBAL 0 ( print )				    126 LOAD_GLOBAL 1 ( range )					  
							      130 LOAD_CONST 9 ( '\n\nPoint outside the viewing pane:' )    128 LOAD_FAST 1 ( n )					  
							      132 CALL_FUNCTION 1					    130 CALL_FUNCTION 1						  
							      134 POP_TOP						    132 GET_ITER						  
							      								    >> 134 FOR_ITER 60 ( to 182 )				  
							      8 136 SETUP_LOOP 156 ( to 294 )				    136 STORE_FAST 5 ( i )					  
							      138 LOAD_GLOBAL 1 ( range )				    								  
							      140 LOAD_FAST 1 ( n )					    9 138 LOAD_FAST 0 ( XY )					  
							      142 CALL_FUNCTION 1					    140 LOAD_FAST 5 ( i )					  
							      144 GET_ITER						    142 BINARY_SUBSCR						  
							      >> 146 FOR_ITER 144 ( to 292 )				    144 LOAD_CONST 2 ( 0 )					  
							      148 STORE_FAST 6 ( i )					    146 BINARY_SUBSCR						  
							      								    148 LOAD_FAST 2 ( Xmin )					  
							      9 150 LOAD_FAST 0 ( XY )					    150 COMPARE_OP 0 ( < )					  
							      152 LOAD_FAST 6 ( i )					    152 POP_JUMP_IF_TRUE 158					  
							      154 BINARY_SUBSCR						    154 LOAD_FAST 0 ( XY )					  
							      156 LOAD_CONST 2 ( 0 )					    156 LOAD_FAST 5 ( i )					  
							      158 BINARY_SUBSCR						    158 BINARY_SUBSCR						  
							      160 LOAD_FAST 2 ( Xmin )					    160 LOAD_CONST 2 ( 0 )					  
							      162 COMPARE_OP 0 ( < )					    162 BINARY_SUBSCR						  
							      164 POP_JUMP_IF_TRUE 182					    164 LOAD_FAST 2 ( Xmax )					  
							      166 LOAD_FAST 0 ( XY )					    166 COMPARE_OP 4 ( > )					  
							      168 LOAD_FAST 6 ( i )					    168 POP_JUMP_IF_FALSE 134					  
							      170 BINARY_SUBSCR						    								  
							      172 LOAD_CONST 2 ( 0 )					    10 170 LOAD_GLOBAL 0 ( print )				  
							      174 BINARY_SUBSCR						    172 LOAD_CONST 4 ( '[' )					  
							      176 LOAD_FAST 4 ( Xmax )					    174 LOAD_FAST 0 ( XY )					  
							      178 COMPARE_OP 4 ( > )					    176 LOAD_FAST 5 ( i )					  
							      180 POP_JUMP_IF_FALSE 220					    178 BINARY_SUBSCR						  
							      								    180 LOAD_CONST 2 ( 0 )					  
							      10 >> 182 LOAD_GLOBAL 0 ( print )				    182 BINARY_SUBSCR						  
							      184 LOAD_CONST 4 ( '[' )					    184 LOAD_FAST 2 ( Xmax )					  
							      186 LOAD_FAST 0 ( XY )					    186 COMPARE_OP 0 ( < )					  
							      188 LOAD_FAST 6 ( i )					    188 POP_JUMP_IF_FALSE 134					  
							      190 BINARY_SUBSCR						    								  
							      192 LOAD_CONST 2 ( 0 )					    11 190 LOAD_GLOBAL 0 ( print )				  
							      194 BINARY_SUBSCR						    192 LOAD_CONST 4 ( '[' )					  
							      196 LOAD_CONST 5 ( ', ' )					    194 LOAD_FAST 0 ( XY )					  
							      198 LOAD_FAST 0 ( XY )					    196 LOAD_FAST 5 ( i )					  
							      200 LOAD_FAST 6 ( i )					    198 BINARY_SUBSCR						  
							      202 BINARY_SUBSCR						    200 LOAD_CONST 2 ( 0 )					  
							      204 LOAD_CONST 3 ( 1 )					    202 BINARY_SUBSCR						  
							      206 BINARY_SUBSCR						    204 LOAD_FAST 2 ( Xmax )					  
							      208 LOAD_CONST 6 ( ']' )					    206 COMPARE_OP 1 ( <= )					  
							      210 LOAD_CONST 7 ( '' )					    208 POP_JUMP_IF_FALSE 134					  
							      212 LOAD_CONST 7 ( '' )					    								  
							      214 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			    12 >> 210 LOAD_GLOBAL 0 ( print )				  
							      216 CALL_FUNCTION_KW 7					    212 LOAD_CONST 4 ( '[' )					  
							      218 POP_TOP						    214 LOAD_FAST 0 ( XY )					  
							      								    216 LOAD_FAST 5 ( i )					  
							      11 >> 220 LOAD_FAST 0 ( XY )				    218 BINARY_SUBSCR						  
							      222 LOAD_FAST 6 ( i )					    220 LOAD_CONST 3 ( 1 )					  
							      224 BINARY_SUBSCR						    222 BINARY_SUBSCR						  
							      226 LOAD_CONST 3 ( 1 )					    224 LOAD_CONST 5 ( ',' , 'sep' )				  
							      228 BINARY_SUBSCR						    226 CALL_FUNCTION_KW 3					  
							      230 LOAD_FAST 3 ( Ymin )					    228 POP_TOP							  
							      232 COMPARE_OP 0 ( < )					    								  
							      234 POP_JUMP_IF_TRUE 252					    13 >> 230 LOAD_FAST 0 ( XY )				  
							      236 LOAD_FAST 0 ( XY )					    232 LOAD_FAST 5 ( i )					  
							      238 LOAD_FAST 6 ( i )					    234 BINARY_SUBSCR						  
							      240 BINARY_SUBSCR						    236 LOAD_CONST 3 ( 1 )					  
							      242 LOAD_CONST 3 ( 1 )					    238 BINARY_SUBSCR						  
							      244 BINARY_SUBSCR						    240 LOAD_FAST 3 ( Ymin )					  
							      246 LOAD_FAST 5 ( Ymax )					    242 COMPARE_OP 0 ( < )					  
							      248 COMPARE_OP 4 ( > )					    244 POP_JUMP_IF_TRUE 248					  
							      250 POP_JUMP_IF_FALSE 146					    246 LOAD_FAST 0 ( XY )					  
							      								    248 LOAD_FAST 5 ( i )					  
							      12 >> 252 LOAD_GLOBAL 0 ( print )				    250 BINARY_SUBSCR						  
							      254 LOAD_CONST 4 ( '[' )					    252 LOAD_CONST 3 ( 1 )					  
							      256 LOAD_FAST 0 ( XY )					    254 BINARY_SUBSCR						  
							      258 LOAD_FAST 6 ( i )					    256 LOAD_CONST 5 ( ',' )					  
							      260 BINARY_SUBSCR						    258 CALL_FUNCTION_KW 3					  
							      262 LOAD_CONST 2 ( 0 )					    256 POP_TOP							  
							      264 BINARY_SUBSCR						    258 JUMP_ABSOLUTE 134					  
							      266 LOAD_CONST 5 ( ', ' )					    >> 260 POP_BLOCK						  
							      268 LOAD_FAST 0 ( XY )					    >> 262 LOAD_CONST 0 ( None )				  
							      270 LOAD_FAST 6 ( i )					    264 RETURN_VALUE NEW_LINE					  
							      272 BINARY_SUBSCR						    								  
							      274 LOAD_CONST 3 ( 1 )					    								  
							      276 BINARY_SUBSCR						    								  
							      278 LOAD_CONST 6 ( ']' )					    								  
							      280 LOAD_CONST 7 ( '' )					    								  
							      282 LOAD_CONST 7 ( '' )					    								  
							      284 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			    								  
							      286 CALL_FUNCTION_KW 7					    								  
							      288 POP_TOP						    								  
							      290 JUMP_ABSOLUTE 146					    								  
							      >> 292 POP_BLOCK						    								  
							      >> 294 LOAD_CONST 0 ( None )				    								  
							      296 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
