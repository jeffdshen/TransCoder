========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
Disassembly of <code object addOne at 0x7fbac0e8d540, file "< def addOne ( x ) :					    def addOne ( x ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( x )					      	  return ( - ( ~ x ) ) ;				    	return - ( x )						  
2 UNARY_INVERT						      								    								  
4 UNARY_NEGATIVE					      								    								  
6 RETURN_VALUE NEW_LINE					      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
Disassembly of <code object intersection at 0x7fbac0e8d540, f def intersection ( n ) :					    def intersection ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  return n * ( n - 1 ) ;				    	return n * ( n - 1 )					  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_SUBTRACT					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
Disassembly of <code object areaSquare at 0x7fbac0e8bc90, fil def areaSquare ( side ) :					    def areaSquare ( side ) :					  success : identical to gold
2 0 LOAD_FAST 0 ( side )				      	  area = side * side					    	area = side * side					  
2 LOAD_FAST 0 ( side )					      	  return area						    	return area						  
4 BINARY_MULTIPLY					      								    								  
6 STORE_FAST 1 ( area )					      								    								  
							      								    								  
3 8 LOAD_FAST 1 ( area )				      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object kthgroupsum at 0x7fbac0e8bc90, fi def kthgroupsum ( k ) :					    def kthgroupsum ( k = 3 ) :					  success : None
2 0 LOAD_FAST 0 ( k )					      	  return k * k * k					    	return k * k * k					  
2 LOAD_FAST 0 ( k )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( k )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
Disassembly of <code object circumference at 0x7fbac0e8bc90,  def circumference ( r ) :					    def circumference ( r ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * PI * r )					    	return 2 * PI * r					  
2 LOAD_GLOBAL 0 ( PI )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( r )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUMSCRIBED_CIRCLE			      AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				    AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				  AREA_SQUARE_CIRCUMSCRIBED_CIRCLE
--							      --							    --								  --
Disassembly of <code object find_Area at 0x7fbac0e8bc90, file def find_Area ( r ) :					    def find_Area ( r ) :					  success : None
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * r * r )					    	return 2 * r * r					  
2 LOAD_FAST 0 ( r )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( r )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> INIS_IDENTITY					      <unk> INIS_IDENTITY					    <unk> INIS_IDENTITY						  <unk> INIS_IDENTITY
--							      --							    --								  --
Disassembly of <code object cassini at 0x7fbac0e8d540, file " def cassini ( n ) :					    def cassini ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  return - 1 if ( n & 1 ) else 1			    	return - 1 if n & 1 else 1				  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 BINARY_AND						      								    								  
6 POP_JUMP_IF_FALSE 12					      								    								  
8 LOAD_CONST 2 ( - 1 )					      								    								  
10 RETURN_VALUE						      								    								  
>> 12 LOAD_CONST 1 ( 1 )				      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_TO_<unk> Y_WITH_7				      EFFICIENT_WAY_TO_<unk> Y_WITH_7				    EFFICIENT_WAY_TO_<unk> Y_WITH_7				  EFFICIENT_WAY_TO_<unk> Y_WITH_7
--							      --							    --								  --
Disassembly of <code object multiplyBySeven at 0x7fbac0e8de40 def multiplyBySeven ( n ) :				    def multiplyBySeven ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  return ( ( n << 3 ) - n )				    	return n << 3 - n					  
2 LOAD_CONST 1 ( 3 )					      								    								  
4 BINARY_LSHIFT						      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 BINARY_SUBTRACT					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
Disassembly of <code object isEven at 0x7fbac0e8d540, file "< def isEven ( n ) :					    def isEven ( n ) :						  success : None
2 0 LOAD_FAST 0 ( n )					      	  return ( n % 2 == 0 )					    	return n % 2 == 0					  
2 LOAD_CONST 1 ( 2 )					      								    								  
4 BINARY_MODULO						      								    								  
6 LOAD_CONST 2 ( 0 )					      								    								  
8 COMPARE_OP 2 ( == )					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
Disassembly of <code object getModulo at 0x7fbac0e8de40, file def getModulo ( n , d ) :					    def getModulo ( n , d ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  return ( n & ( d - 1 ) )				    	return n & ( d - 1 )					  
2 LOAD_FAST 1 ( d )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_SUBTRACT					      								    								  
8 BINARY_AND						      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8de40, file "<d def check ( n ) :						    def check ( n ) :						  success : identical to gold
2 0 LOAD_CONST 1 ( 1162261467 )				      	  return 1162261467 % n == 0				    	return 1162261467 % n == 0				  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MODULO						      								    								  
6 LOAD_CONST 2 ( 0 )					      								    								  
8 COMPARE_OP 2 ( == )					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
Disassembly of <code object Circumference at 0x7fbac0e89d20,  def Circumference ( a ) :					    def Circumference ( a , x ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 4 )					      	  return ( 4 * a )					    	return 4 * a						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( a )					      								    								  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/PYTHON
4 BINARY_MULTIPLY					      								    								  _PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTA
6 RETURN_VALUE NEW_LINE					      								    								  NGLE.py", line 40, in <module>     if f_filled(*pa
							      								    								  rameters_set) == f_gold(*parameters_set): TypeErro
							      								    								  r: f_filled() missing 1 required positional argume
							      								    								  nt: 'x'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
Disassembly of <code object yMod at 0x7fbac0e8d540, file "<di def yMod ( y , x ) :					    def yMod ( y , x ) :					  success : None
2 0 LOAD_FAST 0 ( y )					      	  return ( y % pow ( 2 , x ) )				    	return y % pow ( 2 , x )				  
2 LOAD_GLOBAL 0 ( pow )					      								    								  
4 LOAD_CONST 1 ( 2 )					      								    								  
6 LOAD_FAST 1 ( x )					      								    								  
8 CALL_FUNCTION 2					      								    								  
10 BINARY_MODULO					      								    								  
12 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object rangeGCD at 0x7fbac0e8de40, file  def rangeGCD ( n , m ) :					    def rangeGCD ( n , m ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  return n if ( n == m ) else 1				    	return n if n == m else 1				  
2 LOAD_FAST 1 ( m )					      								    								  
4 COMPARE_OP 2 ( == )					      								    								  
6 POP_JUMP_IF_FALSE 12					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 RETURN_VALUE						      								    								  
>> 12 LOAD_CONST 1 ( 1 )				      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
Disassembly of <code object oppositeSigns at 0x7fbac0e8de40,  def oppositeSigns ( x , y ) :				    def oppositeSigns ( x , y ) :				  success : None
2 0 LOAD_FAST 0 ( x )					      	  return ( ( x ^ y ) < 0 ) ;				    	return ( x ^ y ) < 0					  
2 LOAD_FAST 1 ( y )					      								    								  
4 BINARY_XOR						      								    								  
6 LOAD_CONST 1 ( 0 )					      								    								  
8 COMPARE_OP 0 ( < )					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
Disassembly of <code object compute_average at 0x7fbac0e8d540 def compute_average ( a , b ) :				    def compute_average ( a , b ) :				  success : identical to gold
2 0 LOAD_GLOBAL 0 ( floor )				      	  return floor ( ( a + b ) / 2 )			    	return floor ( ( a + b ) / 2 )				  
2 LOAD_FAST 0 ( a )					      								    								  
4 LOAD_FAST 1 ( b )					      								    								  
6 BINARY_ADD						      								    								  
8 LOAD_CONST 1 ( 2 )					      								    								  
10 BINARY_TRUE_DIVIDE					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
Disassembly of <code object numberOfSticks at 0x7fbac0e8bc90, def numberOfSticks ( x ) :				    def numberOfSticks ( x ) :					  success : None
2 0 LOAD_CONST 1 ( 3 )					      	  return ( 3 * x * ( x + 1 ) ) / 2			    	return 3 * x * ( x + 1 ) / 2				  
2 LOAD_FAST 0 ( x )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( x )					      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 BINARY_ADD						      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_CONST 3 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT				      POSITION_OF_RIGHTMOST_SET_BIT				    POSITION_OF_RIGHTMOST_SET_BIT				  POSITION_OF_RIGHTMOST_SET_BIT
--							      --							    --								  --
Disassembly of <code object getFirstSetBitPos at 0x7fbac0e8bc def getFirstSetBitPos ( n ) :				    def getFirstSetBitPos ( n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.log2 ( n & - n ) + 1			    	return math.log2 ( n - n ) + 1				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_METHOD 1 ( log2 )				      								    								  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/POSITI
4 LOAD_FAST 0 ( n )					      								    								  ON_OF_RIGHTMOST_SET_BIT.py", line 42, in <module>
6 LOAD_FAST 0 ( n )					      								    								      if f_filled(*parameters_set) == f_gold(*parame
8 UNARY_NEGATIVE					      								    								  ters_set):   File "/home/ubuntu/TransCoder/models/
10 BINARY_AND						      								    								  eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-pyt
12 CALL_METHOD 1					      								    								  hon_sa.test/POSITION_OF_RIGHTMOST_SET_BIT.py", lin
14 LOAD_CONST 1 ( 1 )					      								    								  e 24, in f_filled	return math.log2 ( n - n ) +
16 BINARY_ADD						      								    								   1 ValueError: math domain error
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
Disassembly of <code object reverse at 0x7fbac0e89d20, file " def reverse ( string ) :					    def reverse ( string ) :					  success : identical to gold
2 0 LOAD_FAST 0 ( string )				      	  string = string [ : : - 1 ]				    	string = string [ : : - 1 ]				  
2 LOAD_CONST 0 ( None )					      	  return string						    	return string						  
4 LOAD_CONST 0 ( None )					      								    								  
6 LOAD_CONST 1 ( - 1 )					      								    								  
8 BUILD_SLICE 3						      								    								  
10 BINARY_SUBSCR					      								    								  
12 STORE_FAST 0 ( string )				      								    								  
							      								    								  
3 14 LOAD_FAST 0 ( string )				      								    								  
16 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_NUMBER_USING_LOG				      SQUARE_ROOT_NUMBER_USING_LOG				    SQUARE_ROOT_NUMBER_USING_LOG				  SQUARE_ROOT_NUMBER_USING_LOG
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7fbac0e89d20, fil def squareRoot ( n ) :					    def squareRoot ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( pow )				      	  return pow ( 2 , 0.5 * math.log2 ( n ) )		    	return pow ( 2 * 0.5 * math.log2 ( n ) )		  
2 LOAD_CONST 1 ( 2 )					      								    								  
4 LOAD_CONST 2 ( 0.5 )					      								    								  
6 LOAD_GLOBAL 1 ( math )				      								    								  
8 LOAD_METHOD 2 ( log2 )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 CALL_METHOD 1					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_CIRCUMSCRIBED_CIRCLE_SQUARE			      AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				    AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				  AREA_CIRCUMSCRIBED_CIRCLE_SQUARE
--							      --							    --								  --
Disassembly of <code object areacircum<<unk>> bed at 0x7fbac0 def areacircum<<unk>> bed ( a ) :				    def areacircum156 ( a , b ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  return ( a * a * ( PI / 2 ) )				    	return a * a * PI / 2					  
2 LOAD_FAST 0 ( a )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_GLOBAL 0 ( PI )					      								    								  
8 LOAD_CONST 1 ( 2 )					      								    								  
10 BINARY_TRUE_DIVIDE					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
Disassembly of <code object pentagonalNum at 0x7fbac0e8d540,  def pentagonalNum ( n ) :					    def pentagonalNum ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 3 )					      	  return ( 3 * n * n - n ) / 2				    	return 3 * n * n - n / 2				  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 LOAD_CONST 2 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
Disassembly of <code object slope at 0x7fbac0e8de40, file "<d def slope ( x1 , y1 , x2 , y2 ) :				    def slope ( x1 , y1 , x2 , y2 ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( float )				      	  return ( float ) ( y2 - y1 ) / ( x2 - x1 )		    	return float ( y2 - y1 ) / x2 - x1			  
2 LOAD_FAST 3 ( y2 )					      								    								  
4 LOAD_FAST 1 ( y1 )					      								    								  
6 BINARY_SUBTRACT					      								    								  
8 CALL_FUNCTION 1					      								    								  
10 LOAD_FAST 2 ( x2 )					      								    								  
12 LOAD_FAST 0 ( x1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_FACTORIALS_TWO_NUMBERS				      GCD_FACTORIALS_TWO_NUMBERS				    GCD_FACTORIALS_TWO_NUMBERS					  GCD_FACTORIALS_TWO_NUMBERS
--							      --							    --								  --
Disassembly of <code object gcdOfFactorial at 0x7fbac0e8d540, def gcdOfFactorial ( m , n ) :				    def gcdOfFactorial ( m , n ) :				  success : identical to gold
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.factorial ( min ( m , n ) )		    	return math.factorial ( min ( m , n ) )			  
2 LOAD_METHOD 1 ( factorial )				      								    								  
4 LOAD_GLOBAL 2 ( min )					      								    								  
6 LOAD_FAST 0 ( m )					      								    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 2					      								    								  
12 CALL_METHOD 1					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			      MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			    MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			  MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA
--							      --							    --								  --
Disassembly of <code object minHeight at 0x7fbac0e89d20, file def minHeight ( area , base ) :				    def minHeight ( area , base ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.ceil ( ( 2 * area ) / base )		    	return math.ceil ( 2 * area / base )			  
2 LOAD_METHOD 1 ( ceil )				      								    								  
4 LOAD_CONST 1 ( 2 )					      								    								  
6 LOAD_FAST 0 ( area )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_FAST 1 ( base )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 CALL_METHOD 1					      								    								  
16 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_<unk> E_10  EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_<unk> E_10  EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_<unk> E_10  EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_<unk> E_10
--							      --							    --								  --
Disassembly of <code object isMultipleOf10 at 0x7fbac0e8d540, def isMultipleOf10 ( n ) :				    def isMultipleOf10 ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  return ( n % 15 == 0 )				    	return n % 15 == 0					  
2 LOAD_CONST 1 ( 15 )					      								    								  
4 BINARY_MODULO						      								    								  
6 LOAD_CONST 2 ( 0 )					      								    								  
8 COMPARE_OP 2 ( == )					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM	      PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		    PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		  PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM
--							      --							    --								  --
Disassembly of <code object findVolume at 0x7fbac0e8de40, fil def findVolume ( l , b , h ) :				    def findVolume ( l , b , h ) :				  success : None
2 0 LOAD_FAST 0 ( l )					      	  return ( ( l * b * h ) / 2 )				    	return ( l * b * h ) / 2				  
2 LOAD_FAST 1 ( b )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 2 ( h )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_CONST 1 ( 2 )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
Disassembly of <code object getRemainder at 0x7fbac0e8de40, f def getRemainder ( num , divisor ) :			    def getRemainder ( num , divisor ) :			  success : None
2 0 LOAD_FAST 0 ( num )					      	  return ( num - divisor * ( num // divisor ) )		    	return num - divisor * ( num // divisor )		  
2 LOAD_FAST 1 ( divisor )				      								    								  
4 LOAD_FAST 0 ( num )					      								    								  
6 LOAD_FAST 1 ( divisor )				      								    								  
8 BINARY_FLOOR_DIVIDE					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE
--							      --							    --								  --
Disassembly of <code object areaOfIn<<unk>> bedCircle at 0x7f def areaOfIn<<unk>> bedCircle ( a ) :			    def areaOfInapplication_bedCircle ( a ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( PI )				      	  return ( PI / 4 ) * a * a				    	return PI / 4 * a * a					  
2 LOAD_CONST 1 ( 4 )					      								    								  
4 BINARY_TRUE_DIVIDE					      								    								  
6 LOAD_FAST 0 ( a )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_FAST 0 ( a )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_HEXAGON					      AREA_OF_A_HEXAGON						    AREA_OF_A_HEXAGON						  AREA_OF_A_HEXAGON
--							      --							    --								  --
Disassembly of <code object hexagonArea at 0x7fbac0e8de40, fi def hexagonArea ( s ) :					    def hexagonArea ( s ) :					  success : None
2 0 LOAD_CONST 1 ( 3 )					      	  return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	    	return 3 * math.sqrt ( 3 ) * s * s / 2			  
2 LOAD_GLOBAL 0 ( math )				      								    								  
4 LOAD_METHOD 1 ( sqrt )				      								    								  
6 LOAD_CONST 1 ( 3 )					      								    								  
8 CALL_METHOD 1						      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 0 ( s )					      								    								  
14 LOAD_FAST 0 ( s )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
Disassembly of <code object isPowerOfTwo at 0x7fbac0e8d540, f def isPowerOfTwo ( x ) :					    def isPowerOfTwo ( x ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  return ( x and ( not ( x & ( x - 1 ) ) ) )		    	return not x and x & ( 1 - 1 ) )			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 JUMP_IF_FALSE_OR_POP 16				      								    								  _sa.test/WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER
4 LOAD_FAST 0 ( x )					      								    								  _A_NO_IS_POWER_OF_TWO_1.py", line 22	   return no
6 LOAD_FAST 0 ( x )					      								    								  t x and x & ( 1 - 1 ) )
8 LOAD_CONST 1 ( 1 )					      								    								  	   ^ SyntaxError: invalid syntax
10 BINARY_SUBTRACT					      								    								  
12 BINARY_AND						      								    								  
14 UNARY_NOT						      								    								  
>> 16 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_<unk> RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_<unk> RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_<unk> RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_<unk> RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
Disassembly of <code object procal at 0x7fbac0e8d540, file "< def procal ( n ) :					    def procal ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 3.0 )				      	  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )		    	return 3.0 * n / ( 4.0 * n * ( n * n ) - 1 ) )		  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_CONST 2 ( 4.0 )					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 3 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
Disassembly of <code object rectCount at 0x7fbac0e8de40, file def rectCount ( n , m ) :					    def rectCount ( n , m ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 1 ( m )					      	  return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4		    	return m * n * ( n + 1 ) // ( m + 1 ) // 4		  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_ADD						      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_FAST 1 ( m )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 2 ( 4 )					      								    								  
24 BINARY_FLOOR_DIVIDE					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION						      TAIL_RECURSION						    TAIL_RECURSION						  TAIL_RECURSION
--							      --							    --								  --
Disassembly of <code object fact at 0x7fbac0e8de40, file "<di def fact ( n ) :						    def fact ( n ) :						  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return n * fact ( n - 1 )				    	return n * fact ( n - 1 )				  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_CONST 2 ( 1 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_GLOBAL 0 ( fact )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
Disassembly of <code object surface_area_octahedron at 0x7fba def surface_area_octahedron ( side ) :			    def surface_area_octahedron ( side ) :			  success : None
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )	    	return 2 * math.sqrt ( 3 ) * side * side		  
2 LOAD_GLOBAL 0 ( math )				      								    								  
4 LOAD_METHOD 1 ( sqrt )				      								    								  
6 LOAD_CONST 2 ( 3 )					      								    								  
8 CALL_METHOD 1						      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 0 ( side )					      								    								  
14 LOAD_FAST 0 ( side )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SEQUENCE_2_22_222					      SUM_SEQUENCE_2_22_222					    SUM_SEQUENCE_2_22_222					  SUM_SEQUENCE_2_22_222
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7fbac0e8bc90, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  success : None
2 0 LOAD_CONST 1 ( 0.0246 )				      	  return 0.0246 * ( math.pow ( 10 , n ) - 1 - ( 9 * n ) )   	return 0.0246 * math.pow ( 10 , n ) - 1 * n		  
2 LOAD_GLOBAL 0 ( math )				      								    								  
4 LOAD_METHOD 1 ( pow )					      								    								  
6 LOAD_CONST 2 ( 10 )					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 CALL_METHOD 2					      								    								  
12 LOAD_CONST 3 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 LOAD_CONST 4 ( 9 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
Disassembly of <code object countNonEmptySubstr at 0x7fbac0e8 def countNonEmptySubstr ( str ) :				    def countNonEmptySubstr ( str ) :				  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str ) ;					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  return int ( n * ( n + 1 ) / 2 ) ;			    	return int ( n * ( n + 1 ) / 2 )			  
4 CALL_FUNCTION 1					      								    								  
6 STORE_FAST 1 ( n )					      								    								  
							      								    								  
3 8 LOAD_GLOBAL 1 ( int )				      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
Disassembly of <code object minSum at 0x7fbac0e8d540, file "< def minSum ( A ) :					    def minSum ( A ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( min )				      	  min_val = min ( A ) ;					    	min_val = min ( A )					  
2 LOAD_FAST 0 ( A )					      	  return min_val * ( len ( A ) - 1 )			    	return ( min_val * len ( A ) - 1 )			  
4 CALL_FUNCTION 1					      								    								  
6 STORE_FAST 1 ( min_val )				      								    								  
							      								    								  
3 8 LOAD_FAST 1 ( min_val )				      								    								  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( A )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7fbac0e8d540, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0.666 )				      	  return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ;	    	return 0.666 * ( 1 / ( 1 / pow ( 10 , n ) ) )		  
2 LOAD_CONST 2 ( 1 )					      								    								  
4 LOAD_CONST 2 ( 1 )					      								    								  
6 LOAD_GLOBAL 0 ( pow )					      								    								  
8 LOAD_CONST 3 ( 10 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N_1	      NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N_1		    NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N_1		  NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N_1
--							      --							    --								  --
Disassembly of <code object countIntegralSolutions at 0x7fbac def countIntegralSolutions ( n ) :			    def countIntegralSolutions ( n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )		    	return int ( ( n + 1 ) * ( n + 2 ) / 2 )		  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_ADD						      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 2 )					      								    								  
12 BINARY_ADD						      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_TRUE_DIVIDE					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2
--							      --							    --								  --
Disassembly of <code object singleNumber at 0x7fbac0e8de40, f def singleNumber ( nums ) :				    def singleNumber ( nums ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 3 )					      	  return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2    	return 3 * sum ( set ( nums ) ) / ( sum ( nums ) ) / 2	  
2 LOAD_GLOBAL 0 ( sum )					      								    								  
4 LOAD_GLOBAL 1 ( set )					      								    								  
6 LOAD_FAST 0 ( nums )					      								    								  
8 CALL_FUNCTION 1					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_GLOBAL 0 ( sum )				      								    								  
16 LOAD_FAST 0 ( nums )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
Disassembly of <code object Resources at 0x7fbac0e89d20, file def Resources ( process , need ) :			    def Resources ( process , need ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  minResources = 0					    	minResources = 0					  
2 STORE_FAST 2 ( minResources )				      	  minResources = process * ( need - 1 ) + 1		    	minResources = process * ( need - 1 ) + 1		  
							      	  return minResources					    	return minResources					  
3 4 LOAD_FAST 0 ( process )				      								    								  
6 LOAD_FAST 1 ( need )					      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_ADD						      								    								  
18 STORE_FAST 2 ( minResources )			      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( minResources )			      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_<unk> ASING_SUBSEQUENCE				      LONGEST_<unk> ASING_SUBSEQUENCE				    LONGEST_<unk> ASING_SUBSEQUENCE				  LONGEST_<unk> ASING_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lis at 0x7fbac0e8de40, file "<dis def lis ( arr ) :						    def lis ( arr ) :						  script_not_found : None
3 0 LOAD_GLOBAL 0 ( len )				      	  global maximum					    	global maximum						  
2 LOAD_FAST 0 ( arr )					      	  n = len ( arr )					    	n = len ( arr )						  
4 CALL_FUNCTION 1					      	  maximum = 1						    	maximum = 1						  
6 STORE_FAST 1 ( n )					      	  _lis ( arr , n )					    	_lis ( arr , n )					  
							      	  return maximum					    	return maximum						  
4 8 LOAD_CONST 1 ( 1 )					      								    								  
10 STORE_GLOBAL 1 ( maximum )				      								    								  
							      								    								  
5 12 LOAD_GLOBAL 2 ( _lis )				      								    								  
14 LOAD_FAST 0 ( arr )					      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 2					      								    								  
20 POP_TOP						      								    								  
							      								    								  
6 22 LOAD_GLOBAL 1 ( maximum )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
Disassembly of <code object gcd at 0x7fbac0e8de40, file "<dis def gcd ( a , b ) :					    def gcd ( a , b ) :						  success : identical to gold
2 0 LOAD_FAST 0 ( a )					      	  if a == 0 :						    	if a == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return b						    	    return b						  
4 COMPARE_OP 2 ( == )					      	  return gcd ( b % a , a )				    	return gcd ( b % a , a )				  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_FAST 1 ( b )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_GLOBAL 0 ( gcd )				      								    								  
14 LOAD_FAST 1 ( b )					      								    								  
16 LOAD_FAST 0 ( a )					      								    								  
18 BINARY_MODULO					      								    								  
20 LOAD_FAST 0 ( a )					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_MID_POINT_LINE				      PROGRAM_FIND_MID_POINT_LINE				    PROGRAM_FIND_MID_POINT_LINE					  PROGRAM_FIND_MID_POINT_LINE
--							      --							    --								  --
Disassembly of <code object midpoint at 0x7fbac0e8de40, file  def midpoint ( x1 , x2 , y1 , y2 ) :			    def midpoint ( x1 , x2 , y1 , y2 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( ( x1 + x2 ) // 2 , " , " , ( y1 + y2 ) // 2 )	    	print ( x1 + x2 + 2 , ' , ' + y1 + y2 // 2 )		  
2 LOAD_FAST 0 ( x1 )					      								    								  
4 LOAD_FAST 1 ( x2 )					      								    								  
6 BINARY_ADD						      								    								  
8 LOAD_CONST 1 ( 2 )					      								    								  
10 BINARY_FLOOR_DIVIDE					      								    								  
12 LOAD_CONST 2 ( ' , ' )				      								    								  
14 LOAD_FAST 2 ( y1 )					      								    								  
16 LOAD_FAST 3 ( y2 )					      								    								  
18 BINARY_ADD						      								    								  
20 LOAD_CONST 1 ( 2 )					      								    								  
22 BINARY_FLOOR_DIVIDE					      								    								  
24 CALL_FUNCTION 3					      								    								  
26 POP_TOP						      								    								  
28 LOAD_CONST 0 ( None )				      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
Disassembly of <code object sortit at 0x7fbac0e89d20, file "< def sortit ( arr , n ) :					    def sortit ( arr , n ) :					  success : identical to gold
2 0 SETUP_LOOP 28 ( to 30 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      arr [ i ] = i + 1					    	    arr [ i ] = i + 1					  
4 LOAD_FAST 1 ( n )					      								    								  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 16 ( to 28 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 2 ( i )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 LOAD_FAST 0 ( arr )					      								    								  
22 LOAD_FAST 2 ( i )					      								    								  
24 STORE_SUBSCR						      								    								  
26 JUMP_ABSOLUTE 10					      								    								  
>> 28 POP_BLOCK						      								    								  
>> 30 LOAD_CONST 0 ( None )				      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
Disassembly of <code object isPossible at 0x7fbac0e8de40, fil def isPossible ( str , n ) :				    def isPossible ( str , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( str )					    	l = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  if ( l >= n ) :					    	if l >= n :						  
4 CALL_FUNCTION 1					      	      return True					    	    return True						  
6 STORE_FAST 2 ( l )					      	  return False						    	return False						  
							      								    								  
3 8 LOAD_FAST 2 ( l )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 COMPARE_OP 5 ( >= )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
4 16 LOAD_CONST 1 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_CONST 2 ( False )				      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
Disassembly of <code object factorial at 0x7fbac0e8de40, file def factorial ( n ) :					    def factorial ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( 1 ) if n == 1 or n == 0 ) else ( n * factorial ( l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      								    								  _sa.test/C_PROGRAM_FACTORIAL_NUMBER.py", line 22
4 COMPARE_OP 2 ( == )					      								    								     return ( 1 ) if n == 1 or n == 0 ) else ( n * f
6 POP_JUMP_IF_TRUE 16					      								    								  _filled ( n - 1 ) )
8 LOAD_FAST 0 ( n )					      								    								  	 ^ SyntaxError: invalid syntax
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
>> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_AREA_TETRAHEDRON				      CALCULATE_AREA_TETRAHEDRON				    CALCULATE_AREA_TETRAHEDRON					  CALCULATE_AREA_TETRAHEDRON
--							      --							    --								  --
Disassembly of <code object vol_tetra at 0x7fbac0e8bc90, file def vol_tetra ( side ) :					    def vol_tetra ( side ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( side )				      	  volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )	    	volume = side ** 3 / 6 * math.sqrt ( 2 )		  
2 LOAD_CONST 1 ( 3 )					      	  return round ( volume , 2 )				    	return round ( volume , 2 )				  
4 BINARY_POWER						      								    								  
6 LOAD_CONST 2 ( 6 )					      								    								  
8 LOAD_GLOBAL 0 ( math )				      								    								  
10 LOAD_METHOD 1 ( sqrt )				      								    								  
12 LOAD_CONST 3 ( 2 )					      								    								  
14 CALL_METHOD 1					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_TRUE_DIVIDE					      								    								  
20 STORE_FAST 1 ( volume )				      								    								  
							      								    								  
3 22 LOAD_GLOBAL 2 ( round )				      								    								  
24 LOAD_FAST 1 ( volume )				      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_<unk> UTE_VALUE_ABS_WITHOUT_BRANCHING     COMPUTE_THE_INTEGER_<unk> UTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_<unk> UTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_<unk> UTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
Disassembly of <code object getAbs at 0x7fbac0e89d20, file "< def getAbs ( n ) :					    def getAbs ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;		    	mask = n | SIZE_INT * CHARBIT - 1			  
2 LOAD_GLOBAL 0 ( SIZE_INT )				      	  return ( ( n + mask ) ^ mask ) ;			    	return n + mask ^ mask					  
4 LOAD_GLOBAL 1 ( CHARBIT )				      								    								  
6 BINARY_MULTIPLY					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 BINARY_RSHIFT					      								    								  
14 STORE_FAST 1 ( mask )				      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_FAST 1 ( mask )					      								    								  
20 BINARY_ADD						      								    								  
22 LOAD_FAST 1 ( mask )					      								    								  
24 BINARY_XOR						      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2
--							      --							    --								  --
Disassembly of <code object getRemainder at 0x7fbac0e89d20, f def getRemainder ( num , divisor ) :			    def getRemainder ( num , divisor ) :			  success : None
2 0 SETUP_LOOP 20 ( to 22 )				      	  while ( num >= divisor ) :				    	while num >= divisor :					  
>> 2 LOAD_FAST 0 ( num )				      	      num -= divisor ;					    	    num -= divisor					  
4 LOAD_FAST 1 ( divisor )				      	  return num ;						    	return num						  
6 COMPARE_OP 5 ( >= )					      								    								  
8 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 10 LOAD_FAST 0 ( num )				      								    								  
12 LOAD_FAST 1 ( divisor )				      								    								  
14 INPLACE_SUBTRACT					      								    								  
16 STORE_FAST 0 ( num )					      								    								  
18 JUMP_ABSOLUTE 2					      								    								  
>> 20 POP_BLOCK						      								    								  
							      								    								  
4 >> 22 LOAD_FAST 0 ( num )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1
--							      --							    --								  --
Disassembly of <code object MaximumHeight at 0x7fbac0e8de40,  def MaximumHeight ( a , n ) :				    def MaximumHeight ( label , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1 )				      	  return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2 	return - 1 + int ( math.sqrt ( 1 + 8 * n ) ) ) // 2	  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( int )					      								    								  _sa.test/MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_
4 LOAD_GLOBAL 1 ( math )				      								    								  OF_ARRAY_VALUES_1.py", line 24     return - 1 + in
6 LOAD_METHOD 2 ( sqrt )				      								    								  t ( math.sqrt ( 1 + 8 * n ) ) ) // 2
8 LOAD_CONST 2 ( 1 )					      								    								  				      ^ SyntaxError:
10 LOAD_CONST 3 ( 8 )					      								    								   invalid syntax
12 LOAD_FAST 1 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 BINARY_ADD						      								    								  
18 CALL_METHOD 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 BINARY_ADD						      								    								  
24 LOAD_CONST 4 ( 2 )					      								    								  
26 BINARY_FLOOR_DIVIDE					      								    								  
28 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A<unk> ULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A<unk> ULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A<unk> ULAR_BIT_IN_A_NUMBER			  HOW_TO_TURN_OFF_A<unk> ULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
Disassembly of <code object turnOffK at 0x7fbac0e8bc90, file  def turnOffK ( n , k ) :					    def turnOffK ( n , k ) :					  script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k <= 0 ) :					    	if k <= 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return n						    	    return n						  
4 COMPARE_OP 1 ( <= )					      	  return ( n & ~ ( 1 << ( k - 1 ) ) )			    	return n & ( 1 << ( k - 1 ) )				  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_FAST 0 ( n )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 LOAD_FAST 1 ( k )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_LSHIFT					      								    								  
24 UNARY_INVERT						      								    								  
26 BINARY_AND						      								    								  
28 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE     DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lis at 0x7fbac0e8de40, file "<dis def lis ( arr ) :						    def lis ( arr ) :						  script_not_found : None
3 0 LOAD_GLOBAL 0 ( len )				      	  global maximum					    	global maximum						  
2 LOAD_FAST 0 ( arr )					      	  n = len ( arr )					    	n = len ( arr )						  
4 CALL_FUNCTION 1					      	  maximum = 1						    	maximum = 1						  
6 STORE_FAST 1 ( n )					      	  _lis ( arr , n )					    	_lis ( arr , n )					  
							      	  return maximum					    	return maximum						  
4 8 LOAD_CONST 1 ( 1 )					      								    								  
10 STORE_GLOBAL 1 ( maximum )				      								    								  
							      								    								  
5 12 LOAD_GLOBAL 2 ( _lis )				      								    								  
14 LOAD_FAST 0 ( arr )					      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 2					      								    								  
20 POP_TOP						      								    								  
							      								    								  
6 22 LOAD_GLOBAL 1 ( maximum )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12_1				      SUM_SERIES_12_32_52_2N_12_1				    SUM_SERIES_12_32_52_2N_12_1					  SUM_SERIES_12_32_52_2N_12_1
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7fbac0e8d540, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  success : None
2 0 LOAD_GLOBAL 0 ( int )				      	  return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )  	return int ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) / 3 )	  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 2 )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 1 ( 2 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_CONST 3 ( 3 )					      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POWER_POWER_MOD_PRIME				      FIND_POWER_POWER_MOD_PRIME				    FIND_POWER_POWER_MOD_PRIME					  FIND_POWER_POWER_MOD_PRIME
--							      --							    --								  --
Disassembly of <code object calculate at 0x7fbac0e8de40, file def calculate ( A , B , C , M ) :				    def calculate ( A , B , C , M ) :				  success : identical to gold
2 0 LOAD_GLOBAL 0 ( pow )				      	  res = pow ( B , C , M - 1 )				    	res = pow ( B , C , M - 1 )				  
2 LOAD_FAST 1 ( B )					      	  ans = pow ( A , res , M )				    	ans = pow ( A , res , M )				  
4 LOAD_FAST 2 ( C )					      	  return ans						    	return ans						  
6 LOAD_FAST 3 ( M )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 CALL_FUNCTION 3					      								    								  
14 STORE_FAST 4 ( res )					      								    								  
							      								    								  
3 16 LOAD_GLOBAL 0 ( pow )				      								    								  
18 LOAD_FAST 0 ( A )					      								    								  
20 LOAD_FAST 4 ( res )					      								    								  
22 LOAD_FAST 3 ( M )					      								    								  
24 CALL_FUNCTION 3					      								    								  
26 STORE_FAST 5 ( ans )					      								    								  
							      								    								  
4 28 LOAD_FAST 5 ( ans )				      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1
--							      --							    --								  --
Disassembly of <code object compute_average at 0x7fbac0e8d540 def compute_average ( a , b ) :				    def compute_average ( a , b ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( a )					      	  return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 	return ( a // 2 + ( b // 2 ) // ( a % 2 ) // ( b % 2 ) )  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 2 )					      								    								  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/COMPUT
4 BINARY_FLOOR_DIVIDE					      								    								  E_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1.py", line
6 LOAD_FAST 1 ( b )					      								    								   40, in <module>     if f_filled(*parameters_set)
8 LOAD_CONST 1 ( 2 )					      								    								  == f_gold(*parameters_set):	File "/home/ubuntu/T
10 BINARY_FLOOR_DIVIDE					      								    								  ransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_s
12 BINARY_ADD						      								    								  cripts/dis_sa-python_sa.test/COMPUTE_AVERAGE_TWO_N
14 LOAD_FAST 0 ( a )					      								    								  UMBERS_WITHOUT_OVERFLOW_1.py", line 22, in f_fille
16 LOAD_CONST 1 ( 2 )					      								    								  d	return ( a // 2 + ( b // 2 ) // ( a % 2 ) //
18 BINARY_MODULO					      								    								   ( b % 2 ) ) ZeroDivisionError: integer division o
20 LOAD_FAST 1 ( b )					      								    								  r modulo by zero
22 LOAD_CONST 1 ( 2 )					      								    								  
24 BINARY_MODULO					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_CONST 1 ( 2 )					      								    								  
30 BINARY_FLOOR_DIVIDE					      								    								  
32 BINARY_ADD						      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		      ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		    ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER			  ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
Disassembly of <code object factorial at 0x7fbac0e8d540, file def factorial ( n ) :					    def factorial ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( 1 ) if n == 1 or n == 0 ) else ( n * factorial ( l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      								    								  _sa.test/ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMB
4 COMPARE_OP 2 ( == )					      								    								  ER.py", line 22     return ( 1 ) if n == 1 or n ==
6 POP_JUMP_IF_TRUE 16					      								    								   0 ) else ( n * f_filled ( n - 1 ) )
8 LOAD_FAST 0 ( n )					      								    								  			  ^ SyntaxError: invalid syn
10 LOAD_CONST 2 ( 0 )					      								    								  tax
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
>> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL					      DOUBLE_FACTORIAL						    DOUBLE_FACTORIAL						  DOUBLE_FACTORIAL
--							      --							    --								  --
Disassembly of <code object doublefactorial at 0x7fbac0e8bc90 def doublefactorial ( n ) :				    def doublefactorial ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1 ;					    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return n * doublefactorial ( n - 2 ) ;		    	return n * doublefactorial ( n - 2 )			  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_GLOBAL 0 ( doublefactorial )			      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
Disassembly of <code object getOddOccurrence at 0x7fbac0e8bc9 def getOddOccurrence ( arr ) :				    def getOddOccurrence ( arr ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 1 ( res )					      	  for element in arr :					    	for element in arr :					  
							      	      res = res ^ element				    	    res = ( res ^ element )				  
3 4 SETUP_LOOP 20 ( to 26 )				      	  return res						    	return res						  
6 LOAD_FAST 0 ( arr )					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 12 ( to 24 )				      								    								  
12 STORE_FAST 2 ( element )				      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( res )				      								    								  
16 LOAD_FAST 2 ( element )				      								    								  
18 BINARY_XOR						      								    								  
20 STORE_FAST 1 ( res )					      								    								  
22 JUMP_ABSOLUTE 10					      								    								  
>> 24 POP_BLOCK						      								    								  
							      								    								  
5 >> 26 LOAD_FAST 1 ( res )				      								    								  
28 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7fbac0e8bc90, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
6 POP_JUMP_IF_FALSE 12					      	      return ( n & 1 ) + countSetBits ( n >> 1 )	    	    return n - 1 + countSetBits ( n >> 1 )		  
							      								    								  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
5 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_AND						      								    								  
18 LOAD_GLOBAL 0 ( countSetBits )			      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_RSHIFT					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 BINARY_ADD						      								    								  
30 RETURN_VALUE						      								    								  
32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER				      COUNT_SET_BITS_IN_AN_INTEGER				    COUNT_SET_BITS_IN_AN_INTEGER				  COUNT_SET_BITS_IN_AN_INTEGER
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7fbac0e8ddb0, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  while ( n ) :						    	while n :						  
							      	      count += n & 1					    	    count += n & 1					  
3 4 SETUP_LOOP 28 ( to 34 )				      	      n >>= 1						    	    n >>= 1						  
>> 6 LOAD_FAST 0 ( n )					      	  return count						    	return count						  
8 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
4 10 LOAD_FAST 1 ( count )				      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_AND						      								    								  
18 INPLACE_ADD						      								    								  
20 STORE_FAST 1 ( count )				      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 INPLACE_RSHIFT					      								    								  
28 STORE_FAST 0 ( n )					      								    								  
30 JUMP_ABSOLUTE 6					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 LOAD_FAST 1 ( count )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
Disassembly of <code object myCopy at 0x7fbac0e8d540, file "< def myCopy ( s1 , s2 ) :					    def myCopy ( s1 , s2 ) :					  script_not_found : None
2 0 SETUP_LOOP 32 ( to 34 )				      	  for i in range ( len ( s1 ) ) :			    	for i in range ( len ( s1 ) ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      s2 [ i ] = s1 [ i ] ;				    	    s2 [ i ] = s1 [ i ]					  
4 LOAD_GLOBAL 1 ( len )					      								    								  
6 LOAD_FAST 0 ( s1 )					      								    								  
8 CALL_FUNCTION 1					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 16 ( to 32 )				      								    								  
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 0 ( s1 )					      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 1 ( s2 )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 STORE_SUBSCR						      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
>> 34 LOAD_CONST 0 ( None )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI
--							      --							    --								  --
Disassembly of <code object numberOfSquares at 0x7fbac0e89d20 def numberOfSquares ( base ) :				    def numberOfSquares ( ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( base )				      	  base = ( base - 2 )					    	base = base - 2						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 2 )					      	  base = base / 2					    	base = base / 2						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/MAXIMU
4 BINARY_SUBTRACT					      	  return base * ( base + 1 ) / 2			    	return base * ( base + 1 ) / 2				  M_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELE
6 STORE_FAST 0 ( base )					      								    								  S_TRIANGLE.py", line 44, in <module>	   if f_fill
							      								    								  ed(*parameters_set) == f_gold(*parameters_set): Ty
3 8 LOAD_FAST 0 ( base )				      								    								  peError: f_filled() takes 0 positional arguments b
10 LOAD_CONST 1 ( 2 )					      								    								  ut 1 was given
12 BINARY_TRUE_DIVIDE					      								    								  
14 STORE_FAST 0 ( base )				      								    								  
							      								    								  
4 16 LOAD_FAST 0 ( base )				      								    								  
18 LOAD_FAST 0 ( base )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_CONST 1 ( 2 )					      								    								  
28 BINARY_TRUE_DIVIDE					      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object CountSquares at 0x7fbac0e89d20, f def CountSquares ( a , b ) :				    def CountSquares ( a , b ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 	return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 
2 LOAD_METHOD 1 ( floor )				      								    								  
4 LOAD_GLOBAL 0 ( math )				      								    								  
6 LOAD_METHOD 2 ( sqrt )				      								    								  
8 LOAD_FAST 1 ( b )					      								    								  
10 CALL_METHOD 1					      								    								  
12 CALL_METHOD 1					      								    								  
14 LOAD_GLOBAL 0 ( math )				      								    								  
16 LOAD_METHOD 3 ( ceil )				      								    								  
18 LOAD_GLOBAL 0 ( math )				      								    								  
20 LOAD_METHOD 2 ( sqrt )				      								    								  
22 LOAD_FAST 0 ( a )					      								    								  
24 CALL_METHOD 1					      								    								  
26 CALL_METHOD 1					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8bc90, file "< def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  script_not_found : None
2 0 SETUP_LOOP 34 ( to 36 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  
4 LOAD_CONST 1 ( 0 )					      		  return i ;					    		return i					  
6 LOAD_FAST 1 ( n )					      	  return - 1 ;						    	return - 1						  
8 CALL_FUNCTION 2					      								    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 20 ( to 34 )				      								    								  
14 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arr )				      								    								  
18 LOAD_FAST 3 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_FAST 2 ( x )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 28 LOAD_FAST 3 ( i )					      								    								  
30 RETURN_VALUE						      								    								  
32 JUMP_ABSOLUTE 12					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 LOAD_CONST 2 ( - 1 )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
Disassembly of <code object repeat at 0x7fbac0e8de40, file "< def repeat ( s , n ) :					    def repeat ( s , n ) :					  success : identical to gold
2 0 LOAD_FAST 0 ( s )					      	  s1 = s						    	s1 = s							  
2 STORE_FAST 2 ( s1 )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
							      	      s += s1						    	    s += s1						  
3 4 SETUP_LOOP 26 ( to 32 )				      	  return s						    	return s						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 12 ( to 30 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( s )					      								    								  
22 LOAD_FAST 2 ( s1 )					      								    								  
24 INPLACE_ADD						      								    								  
26 STORE_FAST 0 ( s )					      								    								  
28 JUMP_ABSOLUTE 16					      								    								  
>> 30 POP_BLOCK						      								    								  
							      								    								  
5 >> 32 LOAD_FAST 0 ( s )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
Disassembly of <code object maxTripletSum at 0x7fbac0e8bc90,  def maxTripletSum ( arr , n ) :				    def maxTripletSum ( arr , n ) :				  success : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] )  	return ( arr [ n - 1 ] + arr [ n - 2 ] ) + arr [ n - 3 ]  
4 CALL_METHOD 0						      								    								  
6 POP_TOP						      								    								  
							      								    								  
3 8 LOAD_FAST 0 ( arr )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_SUBSCR					      								    								  
18 LOAD_FAST 0 ( arr )					      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_CONST 3 ( 3 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER	  WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER
--							      --							    --								  --
Disassembly of <code object getParity at 0x7fbac0e89d20, file def getParity ( n ) :					    def getParity ( n ) :					  failure : #Results: 5, 10
2 0 LOAD_CONST 1 ( 0 )					      	  parity = 0						    	parity = 0						  
2 STORE_FAST 1 ( parity )				      	  while n :						    	while n :						  
							      	      parity = ~ parity					    	    parity = parity					  
3 4 SETUP_LOOP 26 ( to 32 )				      	      n = n & ( n - 1 )					    	    n = n & ( n - 1 )					  
>> 6 LOAD_FAST 0 ( n )					      	  return parity						    	return parity						  
8 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
4 10 LOAD_FAST 1 ( parity )				      								    								  
12 UNARY_INVERT						      								    								  
14 STORE_FAST 1 ( parity )				      								    								  
							      								    								  
5 16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_AND						      								    								  
26 STORE_FAST 0 ( n )					      								    								  
28 JUMP_ABSOLUTE 6					      								    								  
>> 30 POP_BLOCK						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 1 ( parity )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y				    FIND_UNIT_DIGIT_X_RAISED_POWER_Y				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y
--							      --							    --								  --
Disassembly of <code object unitDigitXRaisedY at 0x7fbac0e8d5 def unitDigitXRaisedY ( x , y ) :				    def unitDigitXRaisedY ( x , y ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = 1							  
2 STORE_FAST 2 ( res )					      	  for i in range ( y ) :				    	for i in range ( y ) :					  
							      	      res = ( res * x ) % 10				    	    res = ( res * x ) % 10				  
3 4 SETUP_LOOP 28 ( to 34 )				      	  return res						    	return res						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_FAST 1 ( y )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 16 ( to 32 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( res )				      								    								  
20 LOAD_FAST 0 ( x )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 2 ( 10 )					      								    								  
26 BINARY_MODULO					      								    								  
28 STORE_FAST 2 ( res )					      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_FAST 2 ( res )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		  SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object findElement at 0x7fbac0e8d540, fi def findElement ( arr , n , key ) :			    def findElement ( arr , n , key ) :				  success : None
2 0 SETUP_LOOP 32 ( to 34 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] == key ) :				    	    if arr [ i ] == key :				  
4 LOAD_FAST 1 ( n )					      		  return i					    		return i					  
6 CALL_FUNCTION 1					      	  return - 1						    	return - 1						  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 20 ( to 32 )				      								    								  
12 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 3 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( key )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
4 26 LOAD_FAST 3 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
30 JUMP_ABSOLUTE 10					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_CONST 1 ( - 1 )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
Disassembly of <code object getMissingNo at 0x7fbac0e8de40, f def getMissingNo ( A ) :					    def getMissingNo ( A ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( A )						    	n = len ( A )						  
2 LOAD_FAST 0 ( A )					      	  total = ( n + 1 ) * ( n + 2 ) / 2			    	total = ( n + 1 ) * ( n + 2 ) / 2			  
4 CALL_FUNCTION 1					      	  sum_of_A = sum ( A )					    	sum_of_A = sum ( A )					  
6 STORE_FAST 1 ( n )					      	  return total - sum_of_A				    	return total - sum_of_A					  
							      								    								  
3 8 LOAD_FAST 1 ( n )					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_ADD						      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 STORE_FAST 2 ( total )				      								    								  
							      								    								  
4 28 LOAD_GLOBAL 1 ( sum )				      								    								  
30 LOAD_FAST 0 ( A )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 STORE_FAST 3 ( sum_of_A )				      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( total )				      								    								  
38 LOAD_FAST 3 ( sum_of_A )				      								    								  
40 BINARY_SUBTRACT					      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	      SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7fbac0e8bc90, f def calculateSum ( n ) :					    def calculateSum ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  for row in range ( n ) :				    	for row in range ( n ) :				  
							      	      sum = sum + ( 1 << row )				    	    sum = ( sum + 1 )					  
3 4 SETUP_LOOP 28 ( to 34 )				      	  return sum						    	return sum						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 16 ( to 32 )				      								    								  
16 STORE_FAST 2 ( row )					      								    								  
							      								    								  
4 18 LOAD_FAST 1 ( sum )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 2 ( row )					      								    								  
24 BINARY_LSHIFT					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 1 ( sum )					      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_FAST 1 ( sum )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
Disassembly of <code object divisibleBy20 at 0x7fbac0e89d20,  def divisibleBy20 ( num ) :				    def divisibleBy20 ( num ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  lastTwoDigits = int ( num [ - 2 : ] )			    	lastTwoDigits = int ( num [ - 2 : ] )			  
2 LOAD_FAST 0 ( num )					      	  return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 = 	return lastTwoDigits % 5 == 0 and lastTwoDigits % 4 == 0  
4 LOAD_CONST 1 ( - 2 )					      								    								  
6 LOAD_CONST 0 ( None )					      								    								  
8 BUILD_SLICE 2						      								    								  
10 BINARY_SUBSCR					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 STORE_FAST 1 ( lastTwoDigits )			      								    								  
							      								    								  
3 16 LOAD_FAST 1 ( lastTwoDigits )			      								    								  
18 LOAD_CONST 2 ( 5 )					      								    								  
20 BINARY_MODULO					      								    								  
22 LOAD_CONST 3 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 JUMP_IF_FALSE_OR_POP 38				      								    								  
28 LOAD_FAST 1 ( lastTwoDigits )			      								    								  
30 LOAD_CONST 4 ( 4 )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 3 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
>> 38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
Disassembly of <code object isNumber at 0x7fbac0e8bc90, file  def isNumber ( s ) :					    def isNumber ( s ) :					  success : identical to gold
2 0 SETUP_LOOP 40 ( to 42 )				      	  for i in range ( len ( s ) ) :			    	for i in range ( len ( s ) ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if s [ i ].isdigit ( ) != True :			    	    if s [ i ].isdigit ( ) != True :			  
4 LOAD_GLOBAL 1 ( len )					      		  return False					    		return False					  
6 LOAD_FAST 0 ( s )					      	  return True						    	return True						  
8 CALL_FUNCTION 1					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 24 ( to 40 )				      								    								  
16 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 0 ( s )					      								    								  
20 LOAD_FAST 1 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_METHOD 2 ( isdigit )				      								    								  
26 CALL_METHOD 0					      								    								  
28 LOAD_CONST 1 ( True )				      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
4 34 LOAD_CONST 2 ( False )				      								    								  
36 RETURN_VALUE						      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 LOAD_CONST 1 ( True )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_1				      POSITION_OF_RIGHTMOST_SET_BIT_1				    POSITION_OF_RIGHTMOST_SET_BIT_1				  POSITION_OF_RIGHTMOST_SET_BIT_1
--							      --							    --								  --
Disassembly of <code object PositionRightmostSetbit at 0x7fba def PositionRightmostSetbit ( n ) :			    def PositionRightmostSetbit ( n ) :				  success : None
2 0 LOAD_CONST 1 ( 1 )					      	  position = 1						    	position = 1						  
2 STORE_FAST 1 ( position )				      	  m = 1							    	m = 1							  
							      	  while ( not ( n & m ) ) :				    	while not n & m :					  
3 4 LOAD_CONST 1 ( 1 )					      	      m = m << 1					    	    m = m << 1						  
6 STORE_FAST 2 ( m )					      	      position += 1					    	    position += 1					  
							      	  return position					    	return position						  
4 8 SETUP_LOOP 28 ( to 38 )				      								    								  
>> 10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 2 ( m )					      								    								  
14 BINARY_AND						      								    								  
16 POP_JUMP_IF_TRUE 36					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( m )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_LSHIFT					      								    								  
24 STORE_FAST 2 ( m )					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( position )				      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( position )				      								    								  
34 JUMP_ABSOLUTE 10					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
7 >> 38 LOAD_FAST 1 ( position )			      								    								  
40 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8de40, file "<d def check ( degree , n ) :				    def check ( degree , n ) :					  success : None
2 0 LOAD_GLOBAL 0 ( sum )				      	  deg_sum = sum ( degree )				    	deg_sum = sum ( degree )				  
2 LOAD_FAST 0 ( degree )				      	  if ( 2 * ( n - 1 ) == deg_sum ) :			    	if 2 * ( n - 1 ) == deg_sum :				  
4 CALL_FUNCTION 1					      	      return True					    	    return True						  
6 STORE_FAST 2 ( deg_sum )				      	  else :						    	else :							  
							      	      return False					    	    return False					  
3 8 LOAD_CONST 1 ( 2 )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 2 ( deg_sum )				      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 24 LOAD_CONST 3 ( True )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_CONST 4 ( False )				      								    								  
30 RETURN_VALUE						      								    								  
32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
Disassembly of <code object printNos at 0x7fbac0e8d540, file  def printNos ( n ) :					    def printNos ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n > 0 :						    	if n > 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      printNos ( n - 1 )				    	    printNos ( n - 1 )					  
4 COMPARE_OP 4 ( > )					      	      print ( n , end = ' ' )				    	    print ( n , end = " " )				  
6 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
3 8 LOAD_GLOBAL 0 ( printNos )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 3 ( ' ' )					      								    								  
26 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
28 CALL_FUNCTION_KW 2					      								    								  
30 POP_TOP						      								    								  
>> 32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
Disassembly of <code object smallest at 0x7fbac0e8bc90, file  def smallest ( x , y , z ) :				    def smallest ( x , y , z ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( y )					      	  if ( not ( y / x ) ) :				    	if not y / x :						  
2 LOAD_FAST 0 ( x )					      	      return y if ( not ( y / z ) ) else z		    	    return y / z					  
4 BINARY_TRUE_DIVIDE					      	  return x if ( not ( x / z ) ) else z			    	return ( x / z ) if x / z else ( x / z ) )		  
6 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
3 8 LOAD_FAST 1 ( y )					      								    								  
10 LOAD_FAST 2 ( z )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 POP_JUMP_IF_TRUE 20					      								    								  
16 LOAD_FAST 1 ( y )					      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 2 ( z )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( x )				      								    								  
26 LOAD_FAST 2 ( z )					      								    								  
28 BINARY_TRUE_DIVIDE					      								    								  
30 POP_JUMP_IF_TRUE 36					      								    								  
32 LOAD_FAST 0 ( x )					      								    								  
34 RETURN_VALUE						      								    								  
>> 36 LOAD_FAST 2 ( z )					      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION_FIBONACCI				      TAIL_RECURSION_FIBONACCI					    TAIL_RECURSION_FIBONACCI					  TAIL_RECURSION_FIBONACCI
--							      --							    --								  --
Disassembly of <code object fib at 0x7fbac0e8bc90, file "<dis def fib ( n , a = 0 , b = 1 ) :				    def fib ( n , a , b ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 0 :						    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return a						    	    return a						  
4 COMPARE_OP 2 ( == )					      	  if n == 1 :						    	if n == 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return b						    	    return b						  
							      	  return fib ( n - 1 , b , a + b ) ;			    	return fib ( n - 1 , b , a + b )			  
3 8 LOAD_FAST 1 ( a )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_FAST 2 ( b )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_GLOBAL 0 ( fib )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_FAST 2 ( b )					      								    								  
34 LOAD_FAST 1 ( a )					      								    								  
36 LOAD_FAST 2 ( b )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 3					      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_ARRII					      MAXIMIZE_SUM_ARRII					    MAXIMIZE_SUM_ARRII						  MAXIMIZE_SUM_ARRII
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7fbac0e89d20, file "< def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  success : identical to gold
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  sum = 0						    	sum = 0							  
4 CALL_METHOD 0						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 POP_TOP						      	      sum += arr [ i ] * i				    	    sum += arr [ i ] * i				  
							      	  return sum						    	return sum						  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
4 12 SETUP_LOOP 32 ( to 46 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( sum )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( sum )					      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 2 ( sum )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
Disassembly of <code object compute at 0x7fbac0e89d20, file " def compute ( a , b ) :					    def compute ( a , b ) :					  success : None
2 0 LOAD_FAST 0 ( a )					      	  AM = ( a + b ) / 2					    	AM = ( a + b ) / 2					  
2 LOAD_FAST 1 ( b )					      	  GM = math.sqrt ( a * b )				    	GM = math.sqrt ( a * b )				  
4 BINARY_ADD						      	  HM = ( GM * GM ) / AM					    	HM = GM * GM / AM					  
6 LOAD_CONST 1 ( 2 )					      	  return HM						    	return HM						  
8 BINARY_TRUE_DIVIDE					      								    								  
10 STORE_FAST 2 ( AM )					      								    								  
							      								    								  
3 12 LOAD_GLOBAL 0 ( math )				      								    								  
14 LOAD_METHOD 1 ( sqrt )				      								    								  
16 LOAD_FAST 0 ( a )					      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 CALL_METHOD 1					      								    								  
24 STORE_FAST 3 ( GM )					      								    								  
							      								    								  
4 26 LOAD_FAST 3 ( GM )					      								    								  
28 LOAD_FAST 3 ( GM )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 2 ( AM )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 4 ( HM )					      								    								  
							      								    								  
5 38 LOAD_FAST 4 ( HM )					      								    								  
40 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
Disassembly of <code object countPaths at 0x7fbac0e8bc90, fil def countPaths ( n , m ) :				    def countPaths ( n , m ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or m == 0 ) :				    	if n == 0 or m == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  	return countPaths ( n - 1 , m ) + countPaths ( n , m - 1  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 1 ( m )					      								    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( countPaths )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( m )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 LOAD_GLOBAL 0 ( countPaths )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
Disassembly of <code object arcLength at 0x7fbac0e8de40, file def arcLength ( diameter , angle ) :			    def arcLength ( diameter , angle ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( angle )				      	  if angle >= 360 :					    	if angle >= 360 :					  
2 LOAD_CONST 1 ( 360 )					      	      print ( "Angle cannot be formed" )		    	    print ( "Angle cannot be formed" )			  
4 COMPARE_OP 5 ( >= )					      	      return 0						    	    return 0						  
6 POP_JUMP_IF_FALSE 20					      	  else :						    	else :							  
							      	      arc = ( 3.142857142857143 * diameter ) * ( angle / 36 	    arc = 3.142857142857143 * diameter * angle / 360.0	  
3 8 LOAD_GLOBAL 0 ( print )				      	      return arc					    	    return arc						  
10 LOAD_CONST 2 ( 'Angle cannot be formed' )		      								    								  
12 CALL_FUNCTION 1					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_CONST 3 ( 0 )					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
6 >> 20 LOAD_CONST 4 ( 3.142857142857143 )		      								    								  
22 LOAD_FAST 0 ( diameter )				      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 1 ( angle )				      								    								  
28 LOAD_CONST 5 ( 360.0 )				      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 STORE_FAST 2 ( arc )					      								    								  
							      								    								  
7 36 LOAD_FAST 2 ( arc )				      								    								  
38 RETURN_VALUE						      								    								  
40 LOAD_CONST 0 ( None )				      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_ALL_ODD_AND_EVEN_BITS				      SWAP_ALL_ODD_AND_EVEN_BITS				    SWAP_ALL_ODD_AND_EVEN_BITS					  SWAP_ALL_ODD_AND_EVEN_BITS
--							      --							    --								  --
Disassembly of <code object swapBits at 0x7fbac0e8de40, file  def swapBits ( x ) :					    def swapBits ( x ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  even_bits = x & 0xAAAAAAAA				    	even_bits = x & 28POP_JUMP_IF_TRUE 1is			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 2863311530 )				      	  odd_bits = x & 0x55555555				    	odd_bits = x & 1431655765				  _sa.test/SWAP_ALL_ODD_AND_EVEN_BITS.py", line 26
4 BINARY_AND						      	  even_bits >>= 1					    	even_bits -= 1						     even_bits = x & 28POP_JUMP_IF_TRUE 1is
6 STORE_FAST 1 ( even_bits )				      	  odd_bits <<= 1					    	odd_bits = odd_E_L					  			       ^ SyntaxError: invali
							      	  return ( even_bits | odd_bits )			    	return even_bits | odd_bits				  d syntax
3 8 LOAD_FAST 0 ( x )					      								    								  
10 LOAD_CONST 2 ( 1431655765 )				      								    								  
12 BINARY_AND						      								    								  
14 STORE_FAST 2 ( odd_bits )				      								    								  
							      								    								  
4 16 LOAD_FAST 1 ( even_bits )				      								    								  
18 LOAD_CONST 3 ( 1 )					      								    								  
20 INPLACE_RSHIFT					      								    								  
22 STORE_FAST 1 ( even_bits )				      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( odd_bits )				      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 INPLACE_LSHIFT					      								    								  
30 STORE_FAST 2 ( odd_bits )				      								    								  
							      								    								  
6 32 LOAD_FAST 1 ( even_bits )				      								    								  
34 LOAD_FAST 2 ( odd_bits )				      								    								  
36 BINARY_OR						      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN_1			      COUNTS_PATHS_POINT_REACH_ORIGIN_1				    COUNTS_PATHS_POINT_REACH_ORIGIN_1				  COUNTS_PATHS_POINT_REACH_ORIGIN_1
--							      --							    --								  --
Disassembly of <code object countPaths at 0x7fbac0e8de40, fil def countPaths ( n , m ) :				    def countPaths ( n , m ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or m == 0 ) :				    	if n == 0 or m == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  	return countPaths ( n - 1 , m ) + countPaths ( n , m - 1  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 1 ( m )					      								    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( countPaths )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( m )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 LOAD_GLOBAL 0 ( countPaths )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
Disassembly of <code object horner at 0x7fbac0e8d540, file "< def horner ( poly , n , x ) :				    def horner ( poly , n , x ) :				  success : identical to gold
2 0 LOAD_FAST 0 ( poly )				      	  result = poly [ 0 ]					    	result = poly [ 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
4 BINARY_SUBSCR						      	      result = result * x + poly [ i ]			    	    result = result * x + poly [ i ]			  
6 STORE_FAST 3 ( result )				      	  return result						    	return result						  
							      								    								  
3 8 SETUP_LOOP 34 ( to 44 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( result )				      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 0 ( poly )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 3 ( result )				      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_FAST 3 ( result )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7fbac0e8d540, file " def isPrime ( n ) :					    def isPrime ( n ) :						  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return False					    	    return False					  
4 COMPARE_OP 1 ( <= )					      	  for i in range ( 2 , n ) :				    	for i in range ( 2 , n ) :				  
6 POP_JUMP_IF_FALSE 12					      	      if ( n % i == 0 ) :				    	    if n % i == 0 :					  
							      		  return False					    		return False					  
3 8 LOAD_CONST 2 ( False )				      	  return True						    	return True						  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 3 ( 2 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 4 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
6 40 LOAD_CONST 2 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
7 >> 48 LOAD_CONST 5 ( True )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIR<unk> USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIR<unk> USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIR<unk> USING_ENDPOINTS_DIAMETER		  FIND_CENTER_CIR<unk> USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
Disassembly of <code object center at 0x7fbac0e8de40, file "< def center ( x1 , x2 , y1 , y2 ) :			    def center ( x1 , x2 , y1 , y2 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( int ( ( x1 + x2 ) / 2 ) , end = "" )		    	print ( int ( x1 + x2 / 2 ) , end = '' )		  
2 LOAD_GLOBAL 1 ( int )					      	  print ( "," , int ( ( y1 + y2 ) / 2 ) )		    	print ( ',' , int ( y1 + y2 ) / 2 ) )			  
4 LOAD_FAST 0 ( x1 )					      								    								  
6 LOAD_FAST 1 ( x2 )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_CONST 1 ( 2 )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 LOAD_CONST 2 ( '' )					      								    								  
18 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
20 CALL_FUNCTION_KW 2					      								    								  
22 POP_TOP						      								    								  
							      								    								  
3 24 LOAD_GLOBAL 0 ( print )				      								    								  
26 LOAD_CONST 4 ( ',' )					      								    								  
28 LOAD_GLOBAL 1 ( int )				      								    								  
30 LOAD_FAST 2 ( y1 )					      								    								  
32 LOAD_FAST 3 ( y2 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 POP_TOP						      								    								  
46 LOAD_CONST 0 ( None )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN<unk> TH_PALINDROME				      NTH_EVEN<unk> TH_PALINDROME				    NTH_EVEN<unk> TH_PALINDROME					  NTH_EVEN<unk> TH_PALINDROME
--							      --							    --								  --
Disassembly of <code object evenlength at 0x7fbac0e89d20, fil def evenlength ( n ) :					    def evenlength ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  res = n						    	res = n							  
2 STORE_FAST 1 ( res )					      	  for j in range ( len ( n ) - 1 , - 1 , - 1 ) :	    	for j in range ( len ( n ) - 1 , - 1 , - 1 ) :		  
							      	      res += n [ j ]					    	    res += n [ j ]					  
3 4 SETUP_LOOP 40 ( to 46 )				      	  return res						    	return res						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_GLOBAL 1 ( len )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 LOAD_CONST 2 ( - 1 )					      								    								  
20 LOAD_CONST 2 ( - 1 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 16 ( to 44 )				      								    								  
28 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( res )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 1 ( res )					      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_FAST 1 ( res )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			    FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1
--							      --							    --								  --
Disassembly of <code object unitnumber at 0x7fbac0e8d540, fil def unitnumber ( x , y ) :				    def unitnumber ( x , y ) :					  success : None
2 0 LOAD_FAST 0 ( x )					      	  x = x % 10						    	x = x % 10						  
2 LOAD_CONST 1 ( 10 )					      	  if y != 0 :						    	if y != 0 :						  
4 BINARY_MODULO						      	      y = y % 4 + 4					    	    y = y % 4 + 4					  
6 STORE_FAST 0 ( x )					      	  return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )	    	return int ( math.pow ( x , y ) ) % 10			  
							      								    								  
3 8 LOAD_FAST 1 ( y )					      								    								  
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 3 ( != )					      								    								  
14 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 16 LOAD_FAST 1 ( y )					      								    								  
18 LOAD_CONST 3 ( 4 )					      								    								  
20 BINARY_MODULO					      								    								  
22 LOAD_CONST 3 ( 4 )					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 1 ( y )					      								    								  
							      								    								  
5 >> 28 LOAD_GLOBAL 0 ( int )				      								    								  
30 LOAD_GLOBAL 1 ( math )				      								    								  
32 LOAD_METHOD 2 ( pow )				      								    								  
34 LOAD_FAST 0 ( x )					      								    								  
36 LOAD_FAST 1 ( y )					      								    								  
38 CALL_METHOD 2					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_CONST 1 ( 10 )					      								    								  
44 BINARY_MODULO					      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object findLastIndex at 0x7fbac0e8d540,  def findLastIndex ( str , x ) :				    def findLastIndex ( str , x ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  index = - 1						    	index = - 1						  
2 STORE_FAST 2 ( index )				      	  for i in range ( 0 , len ( str ) ) :			    	for i in range ( 0 , len ( str ) ) :			  
							      	      if str [ i ] == x :				    	    if str [ i ] == x :					  
3 4 SETUP_LOOP 38 ( to 44 )				      		  index = i					    		index = i					  
6 LOAD_GLOBAL 0 ( range )				      	  return index						    	return index						  
8 LOAD_CONST 2 ( 0 )					      								    								  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( str )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( str )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( x )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( i )					      								    								  
38 STORE_FAST 2 ( index )				      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_FAST 2 ( index )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  p = 1							    	p = 1							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( p )					      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and n & ( n - 1 ) :				  _sa.test/NEXT_POWER_OF_2_1.py", line 31     p = p
							      	      return n						    	    return n						  LOAD_CONST 1 ( 1 )			^ SyntaxErro
3 4 LOAD_FAST 0 ( n )					      	  while ( p < n ) :					    	while p < n :						  r: invalid syntax
6 POP_JUMP_IF_FALSE 24					      	      p <<= 1						    	    p = p LOAD_CONST 1 ( 1 )				  
8 LOAD_FAST 0 ( n )					      	  return p ;						    	return p						  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 20 ( to 46 )				      								    								  
>> 26 LOAD_FAST 1 ( p )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( p )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 INPLACE_LSHIFT					      								    								  
40 STORE_FAST 1 ( p )					      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_FAST 1 ( p )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
Disassembly of <code object PowerOFPINnfactorial at 0x7fbac0e def PowerOFPINnfactorial ( n , p ) :			    def PowerOFPINnfactorial ( n , p ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	ans = 0							  
2 STORE_FAST 2 ( ans )					      	  temp = p ;						    	temp = p						  
							      	  while ( temp <= n ) :					    	while temp <= n :					  
3 4 LOAD_FAST 1 ( p )					      	      ans += n / temp ;					    	    ans += ( n / temp )					  
6 STORE_FAST 3 ( temp )					      	      temp = temp * p ;					    	    temp = temp * p					  
							      	  return ans ;						    	return ans						  
4 8 SETUP_LOOP 32 ( to 42 )				      								    								  
>> 10 LOAD_FAST 3 ( temp )				      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( ans )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 3 ( temp )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
6 30 LOAD_FAST 3 ( temp )				      								    								  
32 LOAD_FAST 1 ( p )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 3 ( temp )				      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 2 ( ans )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE_1			      SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				    SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				  SQUARE_ROOT_OF_A_PERFECT_SQUARE_1
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7fbac0e8de40, fil def squareRoot ( n ) :					    def squareRoot ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  x = n ;						    	x = n							  
2 STORE_FAST 1 ( x )					      	  y = 1 ;						    	y = 1							  
							      	  while ( x > y ) :					    	while x > y :						  
3 4 LOAD_CONST 1 ( 1 )					      	      x = ( x + y ) / 2 ;				    	    x = ( x + y ) / 2					  
6 STORE_FAST 2 ( y )					      	      y = n / x ;					    	    y = n / x						  
							      	  return x ;						    	return x						  
4 8 SETUP_LOOP 32 ( to 42 )				      								    								  
>> 10 LOAD_FAST 1 ( x )					      								    								  
12 LOAD_FAST 2 ( y )					      								    								  
14 COMPARE_OP 4 ( > )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( x )					      								    								  
20 LOAD_FAST 2 ( y )					      								    								  
22 BINARY_ADD						      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_TRUE_DIVIDE					      								    								  
28 STORE_FAST 1 ( x )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_FAST 1 ( x )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 2 ( y )					      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 1 ( x )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING		      LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			    LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			  LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING
--							      --							    --								  --
Disassembly of <code object LexicographicalMaxString at 0x7fb def LexicographicalMaxString ( str ) :			    def LexicographicalMaxString ( str ) :			  success : identical to gold
2 0 LOAD_CONST 1 ( '' )					      	  mx = ""						    	mx = ""							  
2 STORE_FAST 1 ( mx )					      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
							      	      mx = max ( mx , str [ i : ] )			    	    mx = max ( mx , str [ i : ] )			  
3 4 SETUP_LOOP 38 ( to 44 )				      	  return mx						    	return mx						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_GLOBAL 1 ( len )					      								    								  
10 LOAD_FAST 0 ( str )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 22 ( to 42 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_GLOBAL 2 ( max )				      								    								  
24 LOAD_FAST 1 ( mx )					      								    								  
26 LOAD_FAST 0 ( str )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_CONST 0 ( None )				      								    								  
32 BUILD_SLICE 2					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 STORE_FAST 1 ( mx )					      								    								  
40 JUMP_ABSOLUTE 18					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_FAST 1 ( mx )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
Disassembly of <code object checkValidity at 0x7fbac0e8d540,  def checkValidity ( a , b , c ) :				    def checkcontains ( a , b , c ) :				  success : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a + b <= c ) or ( a + c <= b ) or ( b + c <= a ) :   	if a + b <= c or a + c <= b or b + c <= a :		  
2 LOAD_FAST 1 ( b )					      	      return False					    	    return False					  
4 BINARY_ADD						      	  else :						    	else :							  
6 LOAD_FAST 2 ( c )					      	      return True					    	    return True						  
8 COMPARE_OP 1 ( <= )					      								    								  
10 POP_JUMP_IF_TRUE 36					      								    								  
12 LOAD_FAST 0 ( a )					      								    								  
14 LOAD_FAST 2 ( c )					      								    								  
16 BINARY_ADD						      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 COMPARE_OP 1 ( <= )					      								    								  
22 POP_JUMP_IF_TRUE 36					      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 LOAD_FAST 2 ( c )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 COMPARE_OP 1 ( <= )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
3 >> 36 LOAD_CONST 1 ( False )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
5 >> 40 LOAD_CONST 2 ( True )				      								    								  
42 RETURN_VALUE						      								    								  
44 LOAD_CONST 0 ( None )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8bc90, file "< def search ( arr , x ) :					    def search ( arr , x ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  for j in range ( 0 , n ) :				    	for j in range ( 0 , n ) :				  
4 CALL_FUNCTION 1					      	      if ( x == arr [ j ] ) :				    	    if x == arr [ j ] :					  
6 STORE_FAST 2 ( n )					      		  return j					    		return j					  
							      	  return - 1						    	return - 1						  
3 8 SETUP_LOOP 34 ( to 44 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 2 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( x )					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 3 ( j )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( j )					      								    								  
38 RETURN_VALUE						      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_CONST 2 ( - 1 )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
Disassembly of <code object Right_most_setbit at 0x7fbac0e89d def Right_most_setbit ( num ) :				    def Right_most_setbit ( num ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  pos = 1						    	pos = 1							  
2 STORE_FAST 1 ( pos )					      	  for i in range ( INT_SIZE ) :				    	for i in range ( INT_SIZE ) :				  
							      	      if not ( num & ( 1 << i ) ) :			    	    if not num & ( 1 << i ) :				  
3 4 SETUP_LOOP 40 ( to 46 )				      		  pos += 1					    		pos += 1					  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    break						  
8 LOAD_GLOBAL 1 ( INT_SIZE )				      		  break						    	return pos						  
10 CALL_FUNCTION 1					      	  return pos						    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 28 ( to 44 )				      								    								  
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( num )				      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_FAST 2 ( i )					      								    								  
24 BINARY_LSHIFT					      								    								  
26 BINARY_AND						      								    								  
28 POP_JUMP_IF_TRUE 40					      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( pos )				      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 1 ( pos )					      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
7 >> 40 BREAK_LOOP					      								    								  
42 JUMP_ABSOLUTE 14					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
8 >> 46 LOAD_FAST 1 ( pos )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
Disassembly of <code object findLastIndex at 0x7fbac0e8bc90,  def findLastIndex ( str , x ) :				    def findLastIndex ( str , x ) :				  script_not_found : None
2 0 SETUP_LOOP 44 ( to 46 )				      	  for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	    	for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	  
2 LOAD_GLOBAL 0 ( range )				      	      if ( str [ i ] == x ) :				    	    if str [ i ] == x :					  
4 LOAD_GLOBAL 1 ( len )					      		  return i					    		return i					  
6 LOAD_FAST 0 ( str )					      	  return - 1						    	return - 1						  
8 CALL_FUNCTION 1					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 LOAD_CONST 2 ( - 1 )					      								    								  
16 LOAD_CONST 2 ( - 1 )					      								    								  
18 CALL_FUNCTION 3					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 26 LOAD_FAST 0 ( str )				      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( x )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
4 38 LOAD_FAST 2 ( i )					      								    								  
40 RETURN_VALUE						      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_CONST 2 ( - 1 )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
Disassembly of <code object spiralDiaSum at 0x7fbac0e8bc90, f def spiralDiaSum ( n ) :					    def spiralDiaSum ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 1 :						    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) 	return ( 4 * n * n - 6 * n ) + 6 * n + 6 * spiralDiaSum ( 
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_CONST 1 ( 1 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 4 )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 3 ( 6 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_CONST 3 ( 6 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_GLOBAL 0 ( spiralDiaSum )			      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 4 ( 2 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
Disassembly of <code object numberOfPaths at 0x7fbac0e89d20,  def numberOfPaths ( m , n ) :				    def numberOfPaths ( m , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( m )					      	  if ( m == 1 or n == 1 ) :				    	if m == 1 or n == 1 :					  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m ,  	return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m ,  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( numberOfPaths )			      								    								  
22 LOAD_FAST 0 ( m )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 LOAD_GLOBAL 0 ( numberOfPaths )			      								    								  
34 LOAD_FAST 0 ( m )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> CATIVE_INVERSE_UNDER_MODULO_M			      <unk> CATIVE_INVERSE_UNDER_MODULO_M			    <unk> CATIVE_INVERSE_UNDER_MODULO_M				  <unk> CATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
Disassembly of <code object modInverse at 0x7fbac0e8d540, fil def modInverse ( a , m ) :				    def modInverse ( a , m ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a = a % m ;						    	a = a % m						  
2 LOAD_FAST 1 ( m )					      	  for x in range ( 1 , m ) :				    	for x in range ( 1 , m ) :				  
4 BINARY_MODULO						      	      if ( ( a * x ) % m == 1 ) :			    	    if a * x % m == 1 :					  
6 STORE_FAST 0 ( a )					      		  return x					    		return x					  
							      	  return 1						    	return 1						  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 1 ( m )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( a )					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 1 ( m )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_FAST 2 ( x )					      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_CONST 1 ( 1 )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
Disassembly of <code object sequence at 0x7fbac0e8de40, file  def sequence ( n ) :					    def sequence ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 1 or n == 2 :					    	if n == 1 or n == 2 :					  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
6 POP_JUMP_IF_TRUE 16					      	      return sequence ( sequence ( n - 1 ) ) + sequence ( n 	    return sequence ( sequence ( n - 1 ) ) - sequence ( n 
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 2 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_GLOBAL 0 ( sequence )			      								    								  
22 LOAD_GLOBAL 0 ( sequence )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_GLOBAL 0 ( sequence )				      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_GLOBAL 0 ( sequence )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_ADD						      								    								  
54 RETURN_VALUE						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
Disassembly of <code object PowerOFPINnfactorial at 0x7fbac0e def PowerOFPINnfactorial ( n , p ) :			    def PowerOFPINnfactorial ( n , p ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  
2 STORE_FAST 2 ( ans )					      	  temp = p						    	temp = p						  
							      	  while ( temp <= n ) :					    	while temp <= n :					  
3 4 LOAD_FAST 1 ( p )					      	      ans += n / temp					    	    ans += ( n / temp )					  
6 STORE_FAST 3 ( temp )					      	      temp = temp * p					    	    temp = temp * p					  
							      	  return int ( ans )					    	return int ( ans )					  
4 8 SETUP_LOOP 32 ( to 42 )				      								    								  
>> 10 LOAD_FAST 3 ( temp )				      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( ans )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 3 ( temp )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
6 30 LOAD_FAST 3 ( temp )				      								    								  
32 LOAD_FAST 1 ( p )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 3 ( temp )				      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_GLOBAL 0 ( int )				      								    								  
44 LOAD_FAST 2 ( ans )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_1	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_1	    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_1		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object findElements at 0x7fbac0e8d540, f def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  for i in range ( 0 , n - 2 ) :			    	for i in range ( 0 , n - 2 ) :				  
4 CALL_METHOD 0						      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] , end = " " )			  
6 POP_TOP						      								    								  
							      								    								  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 2 ( print )				      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( ' ' )					      								    								  
38 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
40 CALL_FUNCTION_KW 2					      								    								  
42 POP_TOP						      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
>> 48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8de40, file "< def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 3 ( i )					      	  for i in range ( i , n ) :				    	for i in range ( i , n ) :				  
							      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  
3 4 SETUP_LOOP 34 ( to 40 )				      		  return i					    		return i					  
6 LOAD_GLOBAL 0 ( range )				      	  return - 1						    	return - 1						  
8 LOAD_FAST 3 ( i )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 20 ( to 38 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 LOAD_FAST 3 ( i )					      								    								  
34 RETURN_VALUE						      								    								  
36 JUMP_ABSOLUTE 16					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
6 >> 40 LOAD_CONST 2 ( - 1 )				      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
Disassembly of <code object largest at 0x7fbac0e8d540, file " def largest ( arr , n ) :					    def largest ( arr , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  max = arr [ 0 ]					    	max = arr [ 0 ]						  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
4 BINARY_SUBSCR						      	      if arr [ i ] > max :				    	    if arr [ i ] > max :				  
6 STORE_FAST 2 ( max )					      		  max = arr [ i ]				    		max = arr [ i ]					  
							      	  return max						    	return max						  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 2 ( max )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 STORE_FAST 2 ( max )					      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 2 ( max )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
Disassembly of <code object evenFib at 0x7fbac0e8d540, file " def evenFib ( n ) :					    def evenFib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 1 ) :					    	if n < 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return n						    	    return n						  
4 COMPARE_OP 0 ( < )					      	  if ( n == 1 ) :					    	if n == 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 2						    	    return 2						  
							      	  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )  	return 4 * evenFib ( n - 1 ) + evenFib ( n - 2 )	  
3 8 LOAD_FAST 0 ( n )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 2 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_CONST 3 ( 4 )				      								    								  
26 LOAD_GLOBAL 0 ( evenFib )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_GLOBAL 0 ( evenFib )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_ADD						      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object countOccurrences at 0x7fbac0e89d2 def countOccurrences ( arr , n , x ) :			    def countOccurrences ( arr , n , x ) :			  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 3 ( res )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if x == arr [ i ] :				    	    if x == arr [ i ] :					  
3 4 SETUP_LOOP 36 ( to 42 )				      		  res += 1					    		res += 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return res						    	return res						  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 24 ( to 40 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( x )					      								    								  
20 LOAD_FAST 0 ( arr )					      								    								  
22 LOAD_FAST 4 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 COMPARE_OP 2 ( == )					      								    								  
28 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 30 LOAD_FAST 3 ( res )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 3 ( res )					      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
6 >> 42 LOAD_FAST 3 ( res )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_<unk> E_LEFT_ROTATIONS_OF_AN_ARRAY		      QUICKLY_FIND_<unk> E_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_<unk> E_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_<unk> E_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object leftRotate at 0x7fbac0e8de40, fil def leftRotate ( arr , n , k ) :				    def leftRotate ( arr , n , k = 0 ) :			  script_not_found : None
2 0 SETUP_LOOP 46 ( to 48 )				      	  for i in range ( k , k + n ) :			    	for i in range ( k , k + n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      print ( str ( arr [ i % n ] ) , end = " " )	    	    print ( str ( arr [ i % n ] ) , end = " " )		  
4 LOAD_FAST 2 ( k )					      								    								  
6 LOAD_FAST 2 ( k )					      								    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 BINARY_ADD						      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 28 ( to 46 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_GLOBAL 2 ( str )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 BINARY_MODULO					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 LOAD_CONST 1 ( ' ' )					      								    								  
38 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
40 CALL_FUNCTION_KW 2					      								    								  
42 POP_TOP						      								    								  
44 JUMP_ABSOLUTE 16					      								    								  
>> 46 POP_BLOCK						      								    								  
>> 48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
Disassembly of <code object maxArea at 0x7fbac0e89d20, file " def maxArea ( a , b , c , d ) :				    def maxArea ( a , b , c , d ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  semiperimeter = ( a + b + c + d ) / 2			    	semi= ( a + b + c + d ) / 2				  
2 LOAD_FAST 1 ( b )					      	  return math.sqrt ( ( semiperimeter - a ) * ( semiperimete 	return math.sqrt ( semiperimeter - a * ( semiperimeter -  
4 BINARY_ADD						      								    								  
6 LOAD_FAST 2 ( c )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_FAST 3 ( d )					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_CONST 1 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 STORE_FAST 4 ( semiperimeter )			      								    								  
							      								    								  
3 20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 1 ( sqrt )				      								    								  
24 LOAD_FAST 4 ( semiperimeter )			      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_FAST 4 ( semiperimeter )			      								    								  
32 LOAD_FAST 1 ( b )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_FAST 4 ( semiperimeter )			      								    								  
40 LOAD_FAST 2 ( c )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 4 ( semiperimeter )			      								    								  
48 LOAD_FAST 3 ( d )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 CALL_METHOD 1					      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
Disassembly of <code object checkcircle at 0x7fbac0e8d540, fi def checkcircle ( r , R , r1 , x1 , y1 ) :		    def checkcircle ( r , R , r1 , x1 , y1 ) :			  success : None
2 0 LOAD_GLOBAL 0 ( int )				      	  dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )		    	dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )		  
2 LOAD_GLOBAL 1 ( math )				      	  return ( dis - r1 >= R and dis + r1 <= r )		    	return dis - r1 >= R and dis + r1 <= r			  
4 LOAD_METHOD 2 ( sqrt )				      								    								  
6 LOAD_FAST 3 ( x1 )					      								    								  
8 LOAD_FAST 3 ( x1 )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 4 ( y1 )					      								    								  
14 LOAD_FAST 4 ( y1 )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_METHOD 1					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 STORE_FAST 5 ( dis )					      								    								  
							      								    								  
3 26 LOAD_FAST 5 ( dis )				      								    								  
28 LOAD_FAST 2 ( r1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_FAST 1 ( R )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 JUMP_IF_FALSE_OR_POP 48				      								    								  
38 LOAD_FAST 5 ( dis )					      								    								  
40 LOAD_FAST 2 ( r1 )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 0 ( r )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
>> 48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object first at 0x7fbac0e8bc90, file "<d def first ( str , i ) :					    def first ( str , i ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( str )					      	  if ( str [ i ] == '\0' ) :				    	if str [ i ] == "\32" :					  
2 LOAD_FAST 1 ( i )					      	      return 0						    	    return 0						  
4 BINARY_SUBSCR						      	  if ( str [ i ].isupper ( ) ) :			    	if str [ i ].isupper ( ) :				  
6 LOAD_CONST 1 ( '\x00' )				      	      return str [ i ]					    	    return str [ i ]					  
8 COMPARE_OP 2 ( == )					      	  return first ( str , i + 1 )				    	return first ( str , i + 1 )				  
10 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
3 12 LOAD_CONST 2 ( 0 )					      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( str )				      								    								  
18 LOAD_FAST 1 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_METHOD 0 ( isupper )				      								    								  
24 CALL_METHOD 0					      								    								  
26 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_GLOBAL 1 ( first )				      								    								  
38 LOAD_FAST 0 ( str )					      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 LOAD_CONST 3 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 CALL_FUNCTION 2					      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
Disassembly of <code object maxvolume at 0x7fbac0e8d540, file def maxvolume ( s ) :					    def maxvolume ( s ) :					  success : identical to gold
2 0 LOAD_GLOBAL 0 ( int )				      	  length = int ( s / 3 )				    	length = int ( s / 3 )					  
2 LOAD_FAST 0 ( s )					      	  s -= length						    	s -= length						  
4 LOAD_CONST 1 ( 3 )					      	  breadth = s / 2					    	breadth = s / 2						  
6 BINARY_TRUE_DIVIDE					      	  height = s - breadth					    	height = s - breadth					  
8 CALL_FUNCTION 1					      	  return int ( length * breadth * height )		    	return int ( length * breadth * height )		  
10 STORE_FAST 1 ( length )				      								    								  
							      								    								  
3 12 LOAD_FAST 0 ( s )					      								    								  
14 LOAD_FAST 1 ( length )				      								    								  
16 INPLACE_SUBTRACT					      								    								  
18 STORE_FAST 0 ( s )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( s )					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 STORE_FAST 2 ( breadth )				      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( s )					      								    								  
30 LOAD_FAST 2 ( breadth )				      								    								  
32 BINARY_SUBTRACT					      								    								  
34 STORE_FAST 3 ( height )				      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 1 ( length )				      								    								  
40 LOAD_FAST 2 ( breadth )				      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_FAST 3 ( height )				      								    								  
46 BINARY_MULTIPLY					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD	      PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD	    PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD	  PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7fbac0e8d540, file " def isPrime ( n ) :					    def isPrime ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n <= 1 :						    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return False					    	    return False					  
4 COMPARE_OP 1 ( <= )					      	  for i in range ( 2 , n ) :				    	for i in range ( 2 , n ) :				  
6 POP_JUMP_IF_FALSE 12					      	      if n % i == 0 :					    	    if n % i == 0 :					  
							      		  return False ;				    		return False					  
3 8 LOAD_CONST 2 ( False )				      	  return True						    	return True						  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 3 ( 2 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 4 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
6 40 LOAD_CONST 2 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
7 >> 48 LOAD_CONST 5 ( True )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
Disassembly of <code object isPower at 0x7fbac0e8bc90, file " def isPower ( x , y ) :					    def isPower ( x , y ) :					  success : None
2 0 LOAD_FAST 0 ( x )					      	  if ( x == 1 ) :					    	if x == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return ( y == 1 )					    	    return y == 1					  
4 COMPARE_OP 2 ( == )					      	  pow = 1						    	pow = 1							  
6 POP_JUMP_IF_FALSE 16					      	  while ( pow < y ) :					    	while pow < y :						  
							      	      pow = pow * x					    	    pow = pow * x					  
3 8 LOAD_FAST 1 ( y )					      	  return ( pow == y )					    	return pow == y						  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 STORE_FAST 2 ( pow )					      								    								  
							      								    								  
5 20 SETUP_LOOP 20 ( to 42 )				      								    								  
>> 22 LOAD_FAST 2 ( pow )				      								    								  
24 LOAD_FAST 1 ( y )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 30 LOAD_FAST 2 ( pow )				      								    								  
32 LOAD_FAST 0 ( x )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 2 ( pow )					      								    								  
38 JUMP_ABSOLUTE 22					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 2 ( pow )				      								    								  
44 LOAD_FAST 1 ( y )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
Disassembly of <code object printFun at 0x7fbac0e8d540, file  def printFun ( test ) :					    def printis_italic ( test ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( test )				      	  if ( test < 1 ) :					    	if test < 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return						    	    return						  
4 COMPARE_OP 0 ( < )					      	  else :						    	print ( test , end = " " )				  
6 POP_JUMP_IF_FALSE 12					      	      print ( test , end = " " )			    	printplain ( test - 1 )					  
							      	      printFun ( test - 1 )				    	print ( test , end = " " )				  
3 8 LOAD_CONST 0 ( None )				      	      print ( test , end = " " )			    	return							  
10 RETURN_VALUE						      	      return						    								  
							      								    								  
5 >> 12 LOAD_GLOBAL 0 ( print )				      								    								  
14 LOAD_FAST 0 ( test )					      								    								  
16 LOAD_CONST 2 ( ' ' )					      								    								  
18 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
20 CALL_FUNCTION_KW 2					      								    								  
22 POP_TOP						      								    								  
							      								    								  
6 24 LOAD_GLOBAL 1 ( printFun )				      								    								  
26 LOAD_FAST 0 ( test )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 POP_TOP						      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 0 ( test )					      								    								  
40 LOAD_CONST 2 ( ' ' )					      								    								  
42 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_
--							      --							    --								  --
Disassembly of <code object isPossibleToMakeDivisible at 0x7f def isPossibleToMakeDivisible ( arr , n ) :		    def isPossibleToMakeDivisible ( arr , n ) :			  failure : #Results: 7, 10
2 0 LOAD_CONST 1 ( 0 )					      	  remainder = 0						    	remainder = 0						  
2 STORE_FAST 2 ( remainder )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      remainder = ( remainder + arr [ i ] ) % 3		    	    remainder = remainder + arr [ i ] % 3		  
3 4 SETUP_LOOP 34 ( to 40 )				      	  return ( remainder == 0 )				    	return remainder == 0					  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 20 ( to 38 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( remainder )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_CONST 2 ( 3 )					      								    								  
32 BINARY_MODULO					      								    								  
34 STORE_FAST 2 ( remainder )				      								    								  
36 JUMP_ABSOLUTE 16					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_FAST 2 ( remainder )			      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1
--							      --							    --								  --
Disassembly of <code object transpose at 0x7fbac0e8bc90, file def transpose ( A , B ) :					    def transpose ( A , B ) :					  script_not_found : None
2 0 SETUP_LOOP 54 ( to 56 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( M ) :				    	    for j in range ( M ) :				  
4 LOAD_GLOBAL 1 ( N )					      		  B [ i ] [ j ] = A [ j ] [ i ]			    		B [ i ] [ j ] = A [ j ] [ i ]			  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 42 ( to 54 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 36 ( to 52 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 2 ( M )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 24 ( to 50 )				      								    								  
26 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( j )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 24					      								    								  
>> 50 POP_BLOCK						      								    								  
>> 52 JUMP_ABSOLUTE 10					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8bc90, file "<d def check ( num ) :					    def check ( num ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  digitSum = 0						    	digitSum = 0						  
2 STORE_FAST 1 ( digitSum )				      	  while num > 0 :					    	while num > 0 :						  
							      	      rem = num % 10					    	    rem = ( num % 10 )					  
3 4 SETUP_LOOP 36 ( to 42 )				      	      digitSum = digitSum + rem				    	    digitSum = digitSum + rem				  
>> 6 LOAD_FAST 0 ( num )				      	      num = num / 10					    	    num = num / 10					  
8 LOAD_CONST 1 ( 0 )					      	  return ( digitSum % 3 == 0 )				    	return digitSum % 3 == 0				  
10 COMPARE_OP 4 ( > )					      								    								  
12 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( num )				      								    								  
16 LOAD_CONST 2 ( 10 )					      								    								  
18 BINARY_MODULO					      								    								  
20 STORE_FAST 2 ( rem )					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( digitSum )				      								    								  
24 LOAD_FAST 2 ( rem )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 1 ( digitSum )				      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( num )				      								    								  
32 LOAD_CONST 2 ( 10 )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 0 ( num )					      								    								  
38 JUMP_ABSOLUTE 6					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 1 ( digitSum )			      								    								  
44 LOAD_CONST 3 ( 3 )					      								    								  
46 BINARY_MODULO					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
Disassembly of <code object playGame at 0x7fbac0e89d20, file  def playGame ( arr , n ) :				    def playGame ( arr , n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( s )					      	      s.add ( arr [ i ] )				    	    s.add ( arr [ i ] )					  
							      	  return 1 if len ( s ) % 2 == 0 else 2			    	return 1 if len ( s ) % 2 == 0 else 2			  
3 6 SETUP_LOOP 30 ( to 38 )				      								    								  
8 LOAD_GLOBAL 1 ( range )				      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 18 ( to 36 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( s )					      								    								  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_GLOBAL 3 ( len )				      								    								  
40 LOAD_FAST 2 ( s )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_CONST 1 ( 2 )					      								    								  
46 BINARY_MODULO					      								    								  
48 LOAD_CONST 2 ( 0 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 RETURN_VALUE						      								    								  
>> 58 LOAD_CONST 1 ( 2 )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			      NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			    NUMBER_DAYS_TANK_WILL_BECOME_EMPTY				  NUMBER_DAYS_TANK_WILL_BECOME_EMPTY
--							      --							    --								  --
Disassembly of <code object minDaysToEmpty at 0x7fbac0e8de40, def minDaysToEmpty ( C , l ) :				    def minDaysToEmpty ( C , l ) :				  failure : #Results: 7, 10
2 0 LOAD_FAST 1 ( l )					      	  if ( l >= C ) : return C				    	if l >= C : return C					  
2 LOAD_FAST 0 ( C )					      	  eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2	    	eq_root = math.sqrt ( 1 + 8 * C ) - 1 / 2		  
4 COMPARE_OP 5 ( >= )					      	  return math.ceil ( eq_root ) + l			    	return math.ceil ( eq_root ) + l			  
6 POP_JUMP_IF_FALSE 12					      								    								  
8 LOAD_FAST 0 ( C )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
3 >> 12 LOAD_GLOBAL 0 ( math )				      								    								  
14 LOAD_METHOD 1 ( sqrt )				      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 LOAD_CONST 2 ( 8 )					      								    								  
20 LOAD_FAST 0 ( C )					      								    								  
22 LOAD_FAST 1 ( l )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_METHOD 1					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 STORE_FAST 2 ( eq_root )				      								    								  
							      								    								  
4 42 LOAD_GLOBAL 0 ( math )				      								    								  
44 LOAD_METHOD 2 ( ceil )				      								    								  
46 LOAD_FAST 2 ( eq_root )				      								    								  
48 CALL_METHOD 1					      								    								  
50 LOAD_FAST 1 ( l )					      								    								  
52 BINARY_ADD						      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
Disassembly of <code object getSum at 0x7fbac0e8de40, file "< def getSum ( n ) :					    def getSum ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  while ( n > 0 ) :					    	while n > 0 :						  
							      	      sum += int ( n % 10 )				    	    sum += int ( n % 10 )				  
3 4 SETUP_LOOP 40 ( to 46 )				      	      n = int ( n / 10 )				    	    n = int ( n / 10 )					  
>> 6 LOAD_FAST 0 ( n )					      	  return sum						    	return sum						  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 COMPARE_OP 4 ( > )					      								    								  
12 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( sum )				      								    								  
16 LOAD_GLOBAL 0 ( int )				      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 10 )					      								    								  
22 BINARY_MODULO					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 30 LOAD_GLOBAL 0 ( int )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_CONST 2 ( 10 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 0 ( n )					      								    								  
42 JUMP_ABSOLUTE 6					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 1 ( sum )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
Disassembly of <code object getSum at 0x7fbac0e8d540, file "< def getSum ( n ) :					    def getSum ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  while ( n != 0 ) :					    	while n != 0 :						  
							      	      sum = sum + int ( n % 10 )			    	    sum = sum + int ( n % 10 )				  
3 4 SETUP_LOOP 40 ( to 46 )				      	      n = int ( n / 10 )				    	    n = int ( n / 10 )					  
>> 6 LOAD_FAST 0 ( n )					      	  return sum						    	return sum						  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 COMPARE_OP 3 ( != )					      								    								  
12 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( sum )				      								    								  
16 LOAD_GLOBAL 0 ( int )				      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 10 )					      								    								  
22 BINARY_MODULO					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 30 LOAD_GLOBAL 0 ( int )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_CONST 2 ( 10 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 0 ( n )					      								    								  
42 JUMP_ABSOLUTE 6					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 1 ( sum )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
Disassembly of <code object sumBetweenTwoKth at 0x7fbac0e89d2 def sumBetweenTwoKth ( arr , n , k1 , k2 ) :		    def sumBetweenTwoKth ( arr , th , k1 , k2 ) :		  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  result = 0						    	result = 0						  
4 CALL_METHOD 0						      	  for i in range ( k1 , k2 - 1 ) :			    	for i in range ( k1 , k2 - 1 ) :			  
6 POP_TOP						      	      result += arr [ i ]				    	    result += arr [ i ]					  
							      	  return result						    	return result						  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 STORE_FAST 4 ( result )				      								    								  
							      								    								  
4 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( k1 )					      								    								  
18 LOAD_FAST 3 ( k2 )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 16 ( to 46 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 4 ( result )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 5 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 4 ( result )				      								    								  
44 JUMP_ABSOLUTE 28					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 4 ( result )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
Disassembly of <code object numberOfWays at 0x7fbac0e8bc90, f def numberOfWays ( x ) :					    def numberOfWays ( x ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  if x == 0 or x == 1 :					    	if x == 0 or x == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
6 POP_JUMP_IF_TRUE 16					      	      return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	    return numberOfWays ( x - 1 ) * ( x - 1 ) * numberOfW 
8 LOAD_FAST 0 ( x )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_GLOBAL 0 ( numberOfWays )			      								    								  
22 LOAD_FAST 0 ( x )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 LOAD_FAST 0 ( x )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_GLOBAL 0 ( numberOfWays )			      								    								  
38 LOAD_FAST 0 ( x )					      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 BINARY_ADD						      								    								  
50 RETURN_VALUE						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIR<unk> TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIR<unk> TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIR<unk> TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIR<unk> TARGET
--							      --							    --								  --
Disassembly of <code object minRevolutions at 0x7fbac0e8d540, def minRevolutions ( r , x1 , y1 , x2 , y2 ) :		    def minRevolutions ( r , x1 , y1 , y2 , y2 ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 	d = math.sqrt ( x1 - x2 ) * ( x1 - x2 ) + y1 - y2 * y1 -  
2 LOAD_METHOD 1 ( sqrt )				      	  return math.ceil ( d // ( 2 * r ) )			    	return math.ceil ( d // 2 * r )				  
4 LOAD_FAST 1 ( x1 )					      								    								  
6 LOAD_FAST 3 ( x2 )					      								    								  
8 BINARY_SUBTRACT					      								    								  
10 LOAD_FAST 1 ( x1 )					      								    								  
12 LOAD_FAST 3 ( x2 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 2 ( y1 )					      								    								  
20 LOAD_FAST 4 ( y2 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 LOAD_FAST 2 ( y1 )					      								    								  
26 LOAD_FAST 4 ( y2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_METHOD 1					      								    								  
36 STORE_FAST 5 ( d )					      								    								  
							      								    								  
3 38 LOAD_GLOBAL 0 ( math )				      								    								  
40 LOAD_METHOD 2 ( ceil )				      								    								  
42 LOAD_FAST 5 ( d )					      								    								  
44 LOAD_CONST 1 ( 2 )					      								    								  
46 LOAD_FAST 0 ( r )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 BINARY_FLOOR_DIVIDE					      								    								  
52 CALL_METHOD 1					      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
Disassembly of <code object findFrequency at 0x7fbac0e8bc90,  def findFrequency ( arr , n , left , right , element ) :	    def findFrequency ( arr , 0x7ac0e8bc90 , right , element ) :  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 5 ( count )				      	  for i in range ( left - 1 , right ) :			    	for i in range ( left - 1 , right ) :			  
							      	      if ( arr [ i ] == element ) :			    	    if arr [ i ] == element :				  
3 4 SETUP_LOOP 42 ( to 48 )				      		  count += 1					    		count += 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return count						    	return count						  
8 LOAD_FAST 2 ( left )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 LOAD_FAST 3 ( right )				      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 6 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 6 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 4 ( element )				      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 36 LOAD_FAST 5 ( count )				      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 5 ( count )				      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 5 ( count )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7fbac0e8bc90, fil def squareRoot ( n ) :					    def squareRoot ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  x = n							    	x = n							  
2 STORE_FAST 1 ( x )					      	  y = 1							    	y = 1							  
							      	  e = 0.000001						    	e = 1e-6						  
3 4 LOAD_CONST 1 ( 1 )					      	  while ( x - y > e ) :					    	while x - y > e :					  
6 STORE_FAST 2 ( y )					      	      x = ( x + y ) / 2					    	    x = ( x + y ) / 2					  
							      	      y = n / x						    	    y = n / x						  
4 8 LOAD_CONST 2 ( 1e-06 )				      	  return x						    	return x						  
10 STORE_FAST 3 ( e )					      								    								  
							      								    								  
5 12 SETUP_LOOP 36 ( to 50 )				      								    								  
>> 14 LOAD_FAST 1 ( x )					      								    								  
16 LOAD_FAST 2 ( y )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_FAST 3 ( e )					      								    								  
22 COMPARE_OP 4 ( > )					      								    								  
24 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( x )					      								    								  
28 LOAD_FAST 2 ( y )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 1 ( x )					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_FAST 1 ( x )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 STORE_FAST 2 ( y )					      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 1 ( x )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_N_UNDER_MODULO_P				      COMPUTE_N_UNDER_MODULO_P					    COMPUTE_N_UNDER_MODULO_P					  COMPUTE_N_UNDER_MODULO_P
--							      --							    --								  --
Disassembly of <code object modFact at 0x7fbac0e8de40, file " def modFact ( n , p ) :					    def modFact ( n , p ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if n >= p :						    	if n >= p :						  
2 LOAD_FAST 1 ( p )					      	      return 0						    	    return 0						  
4 COMPARE_OP 5 ( >= )					      	  result = 1						    	result = 1						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
							      	      result = ( result * i ) % p			    	    result = result * i % p				  
3 8 LOAD_CONST 1 ( 0 )					      	  return result						    	return result						  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 1 )				      								    								  
14 STORE_FAST 2 ( result )				      								    								  
							      								    								  
5 16 SETUP_LOOP 34 ( to 52 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 16 ( to 50 )				      								    								  
34 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 2 ( result )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 1 ( p )					      								    								  
44 BINARY_MODULO					      								    								  
46 STORE_FAST 2 ( result )				      								    								  
48 JUMP_ABSOLUTE 32					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 LOAD_FAST 2 ( result )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM
--							      --							    --								  --
Disassembly of <code object summingSeries at 0x7fbac0e8de40,  def summingSeries ( n ) :					    def summingSeries ( n ) :					  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  S = 0							    	S = 0							  
2 STORE_FAST 1 ( S )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
							      	      S += i * i - ( i - 1 ) * ( i - 1 )		    	    S += i * i - ( i - 1 ) * ( i - 1 )			  
3 4 SETUP_LOOP 50 ( to 56 )				      	  return S						    	return S						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( S )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 1 ( S )					      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
5 >> 56 LOAD_FAST 1 ( S )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
Disassembly of <code object numberOfPaths at 0x7fbac0e89d20,  def numberOfPaths ( m , n ) :				    def numberOfPaths ( m , n ) :				  script_not_found : None
2 0 SETUP_LOOP 50 ( to 52 )				      	  for i in range ( n , ( m + n - 1 ) ) :		    	for i in range ( n , m + n - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      path *= i ;					    	    path *= i						  
4 LOAD_FAST 1 ( n )					      	      path //= ( i - n + 1 ) ;				    	    path = path | ( i - n + 1 )				  
6 LOAD_FAST 0 ( m )					      	  return path ;						    	return path						  
8 LOAD_FAST 1 ( n )					      								    								  
10 BINARY_ADD						      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 28 ( to 50 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 24 LOAD_FAST 3 ( path )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 INPLACE_MULTIPLY					      								    								  
30 STORE_FAST 3 ( path )				      								    								  
							      								    								  
4 32 LOAD_FAST 3 ( path )				      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 INPLACE_FLOOR_DIVIDE					      								    								  
46 STORE_FAST 3 ( path )				      								    								  
48 JUMP_ABSOLUTE 20					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_FAST 3 ( path )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
Disassembly of <code object isPower at 0x7fbac0e8d540, file " def isPower ( x , y ) :					    def isPower ( x , y ) :					  success : None
2 0 LOAD_GLOBAL 0 ( math )				      	  res1 = math.log ( y ) / math.log ( x ) ;		    	res1 = math.log ( y ) / math.log ( x )			  
2 LOAD_METHOD 1 ( log )					      	  res2 = math.log ( y ) / math.log ( x ) ;		    	res2 = math.log ( y ) / math.log ( x )			  
4 LOAD_FAST 1 ( y )					      	  return 1 if ( res1 == res2 ) else 0 ;			    	return 1 if res1 == res2 else 0				  
6 CALL_METHOD 1						      								    								  
8 LOAD_GLOBAL 0 ( math )				      								    								  
10 LOAD_METHOD 1 ( log )				      								    								  
12 LOAD_FAST 0 ( x )					      								    								  
14 CALL_METHOD 1					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 STORE_FAST 2 ( res1 )				      								    								  
							      								    								  
3 20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 1 ( log )				      								    								  
24 LOAD_FAST 1 ( y )					      								    								  
26 CALL_METHOD 1					      								    								  
28 LOAD_GLOBAL 0 ( math )				      								    								  
30 LOAD_METHOD 1 ( log )				      								    								  
32 LOAD_FAST 0 ( x )					      								    								  
34 CALL_METHOD 1					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 STORE_FAST 3 ( res2 )				      								    								  
							      								    								  
4 40 LOAD_FAST 2 ( res1 )				      								    								  
42 LOAD_FAST 3 ( res2 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 RETURN_VALUE						      								    								  
>> 52 LOAD_CONST 2 ( 0 )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object answer_query at 0x7fbac0e89d20, f def answer_query ( a , n , l , r ) :			    def answer_query ( a , B , l , r ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 4 ( count )				      	  for i in range ( l , r ) :				    	for i in range ( l , r ) :				  
							      	      if ( a [ i ] == a [ i + 1 ] ) :			    	    if a [ i ] == a [ i + 1 ] :				  
3 4 SETUP_LOOP 46 ( to 52 )				      		  count += 1					    		count += 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return count						    	return count						  
8 LOAD_FAST 2 ( l )					      								    								  
10 LOAD_FAST 3 ( r )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( a )					      								    								  
22 LOAD_FAST 5 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_FAST 5 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 40 LOAD_FAST 4 ( count )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 4 ( count )				      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 LOAD_FAST 4 ( count )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS_1			      NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS_1			    NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS_1			  NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object countDigits at 0x7fbac0e8bc90, fi def countDigits ( a , b ) :				    def countDigits ( a , b ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a == 0 or b == 0 ) :				    	if a == 0 or b == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return math.floor ( math.log10 ( abs ( a ) ) + math.log10 	return math.floor ( math.log10 ( abs ( a ) ) + math.log10 
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 1 ( b )					      								    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 1 ( floor )				      								    								  
24 LOAD_GLOBAL 0 ( math )				      								    								  
26 LOAD_METHOD 2 ( log10 )				      								    								  
28 LOAD_GLOBAL 3 ( abs )				      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 CALL_METHOD 1					      								    								  
36 LOAD_GLOBAL 0 ( math )				      								    								  
38 LOAD_METHOD 2 ( log10 )				      								    								  
40 LOAD_GLOBAL 3 ( abs )				      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 CALL_METHOD 1					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_METHOD 1					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
Disassembly of <code object binomialCoeff at 0x7fbac0e89d20,  def binomialCoeff ( n , k ) :				    def binomialCoeff ( n , k = 0 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if k == 0 or k == n :					    	if k == 0 or k == n :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff (  	return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff (  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 1 ( k )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( binomialCoeff )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( k )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 LOAD_GLOBAL 0 ( binomialCoeff )			      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 BINARY_ADD						      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
Disassembly of <code object exponential at 0x7fbac0e8de40, fi def exponential ( n , x ) :				    def exponential ( n , x ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1.0 )				      	  sum = 1.0						    	sum = 1.						  
2 STORE_FAST 2 ( sum )					      	  for i in range ( n , 0 , - 1 ) :			    	for i in range ( n , 0 , - 1 ) :			  
							      	      sum = 1 + x * sum / i				    	    sum = ( 1 + x * sum ) / i				  
3 4 SETUP_LOOP 36 ( to 42 )				      	  print ( "e^x =" , sum )				    	print ( "e^x =" , sum )					  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 0 )					      								    								  
12 LOAD_CONST 3 ( - 1 )					      								    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 20 ( to 40 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 LOAD_CONST 4 ( 1 )					      								    								  
24 LOAD_FAST 1 ( x )					      								    								  
26 LOAD_FAST 2 ( sum )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 2 ( sum )					      								    								  
38 JUMP_ABSOLUTE 18					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 LOAD_GLOBAL 1 ( print )				      								    								  
44 LOAD_CONST 5 ( 'e^x =' )				      								    								  
46 LOAD_FAST 2 ( sum )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 POP_TOP						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH      COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	    COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	  COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH
--							      --							    --								  --
Disassembly of <code object compute at 0x7fbac0e8de40, file " def compute ( graph , N ) :				    def compute ( graph , N ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  
							      	      if ( len ( graph [ i ] ) == 0 ) :			    	    if len ( graph [ i ] ) == 0 :			  
3 4 SETUP_LOOP 46 ( to 52 )				      		  count += 1					    		count += 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return count						    	return count						  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 1 ( N )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 28 ( to 50 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_GLOBAL 1 ( len )				      								    								  
26 LOAD_FAST 0 ( graph )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_FAST 2 ( count )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 2 ( count )				      								    								  
48 JUMP_ABSOLUTE 20					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 LOAD_FAST 2 ( count )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE
--							      --							    --								  --
Disassembly of <code object printCountRec at 0x7fbac0e8bc90,  def printCountRec ( dist ) :				    def printCountRec ( dist ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( dist )				      	  if dist < 0 :						    	if dist < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if dist == 0 :					    	if dist == 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 1						    	    return 1						  
							      	  return ( printCountRec ( dist - 1 ) + printCountRec ( dis 	return printCountRec ( dist - 1 ) + printCountRec ( dist  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( dist )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_GLOBAL 0 ( printCountRec )			      								    								  
26 LOAD_FAST 0 ( dist )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_GLOBAL 0 ( printCountRec )			      								    								  
36 LOAD_FAST 0 ( dist )					      								    								  
38 LOAD_CONST 3 ( 2 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_GLOBAL 0 ( printCountRec )			      								    								  
48 LOAD_FAST 0 ( dist )					      								    								  
50 LOAD_CONST 4 ( 3 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 BINARY_ADD						      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
Disassembly of <code object swap at 0x7fbac0e8bc90, file "<di def swap ( xp , yp ) :					    def swap ( xp ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( xp )					      	  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]				  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/SWAP_T
4 BINARY_SUBSCR						      	  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]				  WO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE.py", l
6 LOAD_FAST 1 ( yp )					      								    								  ine 56, in <module>	  f_filled(*(filled_function
8 LOAD_CONST 1 ( 0 )					      								    								  _param[i])) TypeError: f_filled() takes 1 position
10 BINARY_SUBSCR					      								    								  al argument but 2 were given
12 BINARY_XOR						      								    								  
14 LOAD_FAST 0 ( xp )					      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_SUBSCR						      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( xp )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( yp )					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_XOR						      								    								  
34 LOAD_FAST 1 ( yp )					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 STORE_SUBSCR						      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( xp )					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 1 ( yp )					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_XOR						      								    								  
54 LOAD_FAST 0 ( xp )					      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 STORE_SUBSCR						      								    								  
60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SCALAR_<unk> CATION_OF_A_MATRIX		      PROGRAM_FOR_SCALAR_<unk> CATION_OF_A_MATRIX		    PROGRAM_FOR_SCALAR_<unk> CATION_OF_A_MATRIX			  PROGRAM_FOR_SCALAR_<unk> CATION_OF_A_MATRIX
--							      --							    --								  --
Disassembly of <code object scalarProductMat at 0x7fbac0e8d54 def scalarProductMat ( mat , k ) :			    def scalarProductMat ( mat , k ) :				  script_not_found : None
2 0 SETUP_LOOP 58 ( to 60 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
4 LOAD_GLOBAL 1 ( N )					      		  mat [ i ] [ j ] = mat [ i ] [ j ] * k		    		mat [ i ] [ j ] = mat [ i ] [ j ] * k		  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 46 ( to 58 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 40 ( to 56 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 28 ( to 54 )				      								    								  
26 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( mat )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( k )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 STORE_SUBSCR						      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 JUMP_ABSOLUTE 10					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
Disassembly of <code object findTrailingZeros at 0x7fbac0e89d def findTrailingZeros ( n ) :				    def findTrailingZeros ( n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  i = 5							    	i = 5							  
							      	  while ( n / i >= 1 ) :				    	while n / i >= 1 :					  
3 4 LOAD_CONST 2 ( 5 )					      	      count += int ( n / i )				    	    count += int ( n / i )				  
6 STORE_FAST 2 ( i )					      	      i *= 5						    	    i *= 5						  
							      	  return int ( count )					    	return int ( count )					  
4 8 SETUP_LOOP 40 ( to 50 )				      								    								  
>> 10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 2 ( i )					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 LOAD_CONST 3 ( 1 )					      								    								  
18 COMPARE_OP 5 ( >= )					      								    								  
20 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( count )				      								    								  
24 LOAD_GLOBAL 0 ( int )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 1 ( count )				      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 2 ( 5 )					      								    								  
42 INPLACE_MULTIPLY					      								    								  
44 STORE_FAST 2 ( i )					      								    								  
46 JUMP_ABSOLUTE 10					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
7 >> 50 LOAD_GLOBAL 0 ( int )				      								    								  
52 LOAD_FAST 1 ( count )				      								    								  
54 CALL_FUNCTION 1					      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( count )				      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and n & ( n - 1 ) ) :				  _sa.test/NEXT_POWER_OF_2.py", line 29	    if n and
							      	      return n						    	    return n						   n & ( n - 1 ) ) :				^ Sy
3 4 LOAD_FAST 0 ( n )					      	  while ( n != 0 ) :					    	while n != 0 :						  ntaxError: invalid syntax
6 POP_JUMP_IF_FALSE 24					      	      n >>= 1						    	    n >>= 1						  
8 LOAD_FAST 0 ( n )					      	      count += 1					    	    count += 1						  
10 LOAD_FAST 0 ( n )					      	  return 1 << count ;					    	return 1 << count					  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 28 ( to 54 )				      								    								  
>> 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_RSHIFT					      								    								  
40 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 42 LOAD_FAST 1 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 1 ( count )				      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
8 >> 54 LOAD_CONST 2 ( 1 )				      								    								  
56 LOAD_FAST 1 ( count )				      								    								  
58 BINARY_LSHIFT					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
Disassembly of <code object printFactorialNums at 0x7fbac0e89 def printFactorialNums ( n ) :				    def printFactorialalNums ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  fact = 1						    	fact = 1						  
2 STORE_FAST 1 ( fact )					      	  x = 2							    	x = 2							  
							      	  while fact <= n :					    	while fact <= n :					  
3 4 LOAD_CONST 2 ( 2 )					      	      print ( fact , end = " " )			    	    print ( fact , end = " " )				  
6 STORE_FAST 2 ( x )					      	      fact = fact * x					    	    fact = fact * x					  
							      	      x += 1						    	    x += 1						  
4 8 SETUP_LOOP 40 ( to 50 )				      								    								  
>> 10 LOAD_FAST 1 ( fact )				      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 18 LOAD_GLOBAL 0 ( print )				      								    								  
20 LOAD_FAST 1 ( fact )					      								    								  
22 LOAD_CONST 3 ( ' ' )					      								    								  
24 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
26 CALL_FUNCTION_KW 2					      								    								  
28 POP_TOP						      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( fact )				      								    								  
32 LOAD_FAST 2 ( x )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 1 ( fact )				      								    								  
							      								    								  
7 38 LOAD_FAST 2 ( x )					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 2 ( x )					      								    								  
46 JUMP_ABSOLUTE 10					      								    								  
>> 48 POP_BLOCK						      								    								  
>> 50 LOAD_CONST 0 ( None )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_<unk>      EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_<unk>	    EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_<unk>	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_<unk>
--							      --							    --								  --
Disassembly of <code object squareRootExists at 0x7fbac0e8d54 def squareRootExists ( n , p ) :				    def squareRootExists ( n , p ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  n = n % p						    	n = n % p						  
2 LOAD_FAST 1 ( p )					      	  for x in range ( 2 , p , 1 ) :			    	for x in range ( 2 , p , 1 ) :				  
4 BINARY_MODULO						      	      if ( ( x * x ) % p == n ) :			    	    if x * x % p == n :					  
6 STORE_FAST 0 ( n )					      		  return True					    		return True					  
							      	  return False						    	return False						  
3 8 SETUP_LOOP 40 ( to 50 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 2 )					      								    								  
14 LOAD_FAST 1 ( p )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 CALL_FUNCTION 3					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 24 ( to 48 )				      								    								  
24 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( x )					      								    								  
28 LOAD_FAST 2 ( x )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 1 ( p )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
5 42 LOAD_CONST 3 ( True )				      								    								  
44 RETURN_VALUE						      								    								  
46 JUMP_ABSOLUTE 22					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
6 >> 50 LOAD_CONST 4 ( False )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
Disassembly of <code object query at 0x7fbac0e89d20, file "<d def query ( s , i , j ) :					    def query ( s , i , j ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  i %= n						    	i *= n							  
4 CALL_FUNCTION 1					      	  j %= n						    	j = n							  
6 STORE_FAST 3 ( n )					      	  print ( "Yes" ) if s [ i ] == s [ j ] else print ( "No" ) 	n INPLACE_MODULO MM					  
							      								    	if s [ i ] == s [ j ] else print ( "No" )		  
3 8 LOAD_FAST 1 ( i )					      								    								  
10 LOAD_FAST 3 ( n )					      								    								  
12 INPLACE_MODULO					      								    								  
14 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 16 LOAD_FAST 2 ( j )					      								    								  
18 LOAD_FAST 3 ( n )					      								    								  
20 INPLACE_MODULO					      								    								  
22 STORE_FAST 2 ( j )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 48					      								    								  
40 LOAD_GLOBAL 1 ( print )				      								    								  
42 LOAD_CONST 1 ( 'Yes' )				      								    								  
44 CALL_FUNCTION 1					      								    								  
46 JUMP_FORWARD 6 ( to 54 )				      								    								  
>> 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 2 ( 'No' )				      								    								  
52 CALL_FUNCTION 1					      								    								  
>> 54 POP_TOP						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
Disassembly of <code object isPowerOfFour at 0x7fbac0e89d20,  def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 2 ( == )					      	  while ( n != 1 ) :					    	while n != 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      if ( n % 4 != 0 ) :				    	    if n % 4 != 0 :					  
							      		  return False					    		return False					  
3 8 LOAD_CONST 2 ( False )				      	      n = n // 4					    	    n = n // 4						  
10 RETURN_VALUE						      	  return True						    	return True						  
							      								    								  
4 >> 12 SETUP_LOOP 36 ( to 50 )				      								    								  
>> 14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 3 ( 1 )					      								    								  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 4 ( 4 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 34 LOAD_CONST 2 ( False )				      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
7 >> 38 LOAD_FAST 0 ( n )				      								    								  
40 LOAD_CONST 4 ( 4 )					      								    								  
42 BINARY_FLOOR_DIVIDE					      								    								  
44 STORE_FAST 0 ( n )					      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_CONST 5 ( True )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object countRotations at 0x7fbac0e89d20, def countRotations ( arr , n ) :				    def countRotations ( arr , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  min = arr [ 0 ]					    	min = arr [ 0 ]						  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 BINARY_SUBSCR						      	      if ( min > arr [ i ] ) :				    	    if min > arr [ i ] :				  
6 STORE_FAST 2 ( min )					      		  min = arr [ i ]				    		min = arr [ i ]					  
							      		  min_index = i					    		min_index = i					  
3 8 SETUP_LOOP 42 ( to 52 )				      	  return min_index ;					    	return min_index					  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 28 ( to 50 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( min )				      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 STORE_FAST 2 ( min )					      								    								  
							      								    								  
6 44 LOAD_FAST 3 ( i )					      								    								  
46 STORE_FAST 4 ( min_index )				      								    								  
48 JUMP_ABSOLUTE 20					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 LOAD_FAST 4 ( min_index )			      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	      FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	    FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	  FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object findSmallest at 0x7fbac0e8d540, f def findSmallest ( arr , n ) :				    def findSmallest ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = 1							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  _sa.test/FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSE
							      	      if arr [ i ] <= res :				    	    if arr [ i ] <= res :				  T_GIVEN_ARRAY.py", line 33	 return res	^ Sy
3 4 SETUP_LOOP 46 ( to 52 )				      		  res = res + arr [ i ]				    		res = res + arr [ i ]				  ntaxError: 'return' outside function
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    break						  
8 LOAD_CONST 2 ( 0 )					      		  break						    return res							  
10 LOAD_FAST 1 ( n )					      	  return res						    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( res )					      								    								  
28 COMPARE_OP 1 ( <= )					      								    								  
30 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( res )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 2 ( res )					      								    								  
44 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 46 BREAK_LOOP					      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
8 >> 52 LOAD_FAST 2 ( res )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_SECTOR					      AREA_OF_A_SECTOR						    AREA_OF_A_SECTOR						  AREA_OF_A_SECTOR
--							      --							    --								  --
Disassembly of <code object SectorArea at 0x7fbac0e8bc90, fil def SectorArea ( radius , angle ) :			    def SectorArea ( radius , angle ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 3.142857142857143 )			      	  pi = 22 / 7						    	pi = 3.142857142857143					  
2 STORE_FAST 2 ( pi )					      	  if angle >= 360 :					    	if angle >= 360 :					  
							      	      print ( "Angle not possible" )			    	    print ( "Angle not possible" )			  
3 4 LOAD_FAST 1 ( angle )				      	      return						    	    return						  
6 LOAD_CONST 2 ( 360 )					      	  else :						    	sector = pi * radius ** 2 * angle / ( angle / 360 )	  
8 COMPARE_OP 5 ( >= )					      	      sector = ( pi * radius ** 2 ) * ( angle / 360 )	    	print ( sector )					  
10 POP_JUMP_IF_FALSE 24					      	      print ( sector )					    	return							  
							      	      return						    								  
4 12 LOAD_GLOBAL 0 ( print )				      								    								  
14 LOAD_CONST 3 ( 'Angle not possible' )		      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 LOAD_CONST 0 ( None )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
7 >> 24 LOAD_FAST 2 ( pi )				      								    								  
26 LOAD_FAST 0 ( radius )				      								    								  
28 LOAD_CONST 4 ( 2 )					      								    								  
30 BINARY_POWER						      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_FAST 1 ( angle )				      								    								  
36 LOAD_CONST 2 ( 360 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 STORE_FAST 3 ( sector )				      								    								  
							      								    								  
8 44 LOAD_GLOBAL 0 ( print )				      								    								  
46 LOAD_FAST 3 ( sector )				      								    								  
48 CALL_FUNCTION 1					      								    								  
50 POP_TOP						      								    								  
							      								    								  
9 52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8bc90, file "<d def check ( st ) :					    def check ( st ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    	n = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  digitSum = 0						    	digitSum = 0						  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 1 ( n )					      	      digitSum = digitSum + ( int ) ( st [ i ] )	    	    digitSum = digitSum + int ( st [ i ] )		  
							      	  return ( digitSum % 9 == 0 )				    	return digitSum % 9 == 0				  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 STORE_FAST 2 ( digitSum )				      								    								  
							      								    								  
4 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( digitSum )				      								    								  
30 LOAD_GLOBAL 2 ( int )				      								    								  
32 LOAD_FAST 0 ( st )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 2 ( digitSum )				      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 2 ( digitSum )			      								    								  
50 LOAD_CONST 2 ( 9 )					      								    								  
52 BINARY_MODULO					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
Disassembly of <code object isPerfectSquare at 0x7fbac0e89d20 def isPerfectSquare ( n ) :				    def isPerfectSquare ( n ) :					  success : identical to gold
2 0 LOAD_CONST 1 ( 1 )					      	  i = 1							    	i = 1							  
2 STORE_FAST 1 ( i )					      	  the_sum = 0						    	the_sum = 0						  
							      	  while the_sum < n :					    	while the_sum < n :					  
3 4 LOAD_CONST 2 ( 0 )					      	      the_sum += i					    	    the_sum += i					  
6 STORE_FAST 2 ( the_sum )				      	      if the_sum == n :					    	    if the_sum == n :					  
							      		  return True					    		return True					  
4 8 SETUP_LOOP 40 ( to 50 )				      	      i += 2						    	    i += 2						  
>> 10 LOAD_FAST 2 ( the_sum )				      	  return False						    	return False						  
12 LOAD_FAST 0 ( n )					      								    								  
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( the_sum )				      								    								  
20 LOAD_FAST 1 ( i )					      								    								  
22 INPLACE_ADD						      								    								  
24 STORE_FAST 2 ( the_sum )				      								    								  
							      								    								  
6 26 LOAD_FAST 2 ( the_sum )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
7 34 LOAD_CONST 3 ( True )				      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
8 >> 38 LOAD_FAST 1 ( i )				      								    								  
40 LOAD_CONST 4 ( 2 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( i )					      								    								  
46 JUMP_ABSOLUTE 10					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
9 >> 50 LOAD_CONST 5 ( False )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
Disassembly of <code object countSubStr at 0x7fbac0e8de40, fi def countSubStr ( st , n ) :				    def countSubStr ( st , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  m = 0							    	m = 0							  
2 STORE_FAST 2 ( m )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if ( st [ i ] == '1' ) :				    	    if st [ i ] == '1' :				  
3 4 SETUP_LOOP 38 ( to 44 )				      		  m = m + 1					    		m = m + 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return m * ( m - 1 ) // 2				    	return m * ( m - 1 ) // 2				  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 24 ( to 42 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( st )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 2 ( '1' )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( m )					      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 2 ( m )					      								    								  
40 JUMP_ABSOLUTE 16					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_FAST 2 ( m )				      								    								  
46 LOAD_FAST 2 ( m )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 LOAD_CONST 4 ( 2 )					      								    								  
56 BINARY_FLOOR_DIVIDE					      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
Disassembly of <code object kthgroupsum at 0x7fbac0e8d540, fi def kthgroupsum ( k ) :					    def kthgroupsum ( k ) :					  success : identical to gold
2 0 LOAD_GLOBAL 0 ( int )				      	  cur = int ( ( k * ( k - 1 ) ) + 1 )			    	cur = int ( ( k * ( k - 1 ) ) + 1 )			  
2 LOAD_FAST 0 ( k )					      	  sum = 0						    	sum = 0							  
4 LOAD_FAST 0 ( k )					      	  while k :						    	while k :						  
6 LOAD_CONST 1 ( 1 )					      	      sum += cur					    	    sum += cur						  
8 BINARY_SUBTRACT					      	      cur += 2						    	    cur += 2						  
10 BINARY_MULTIPLY					      	      k = k - 1						    	    k = k - 1						  
12 LOAD_CONST 1 ( 1 )					      	  return sum						    	return sum						  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 1					      								    								  
18 STORE_FAST 1 ( cur )					      								    								  
							      								    								  
3 20 LOAD_CONST 2 ( 0 )					      								    								  
22 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
4 24 SETUP_LOOP 32 ( to 58 )				      								    								  
>> 26 LOAD_FAST 0 ( k )					      								    								  
28 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( sum )				      								    								  
32 LOAD_FAST 1 ( cur )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
6 38 LOAD_FAST 1 ( cur )				      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( cur )					      								    								  
							      								    								  
7 46 LOAD_FAST 0 ( k )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 STORE_FAST 0 ( k )					      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 2 ( sum )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
Disassembly of <code object isDivBy9 at 0x7fbac0e8bc90, file  def isDivBy9 ( n ) :					    def isDivBy9 ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 9 ) :				    	if n == 0 or n == 9 :					  
2 LOAD_CONST 1 ( 0 )					      	      return True					    	    return True						  
4 COMPARE_OP 2 ( == )					      	  if ( n < 9 ) :					    	if n < 9 :						  
6 POP_JUMP_IF_TRUE 16					      	      return False					    	    return False					  
8 LOAD_FAST 0 ( n )					      	  return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 )  	return isDivBy9 ( int ( n >> 3 ) - int ( n & 0x7 ) )	  
10 LOAD_CONST 2 ( 9 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 3 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_CONST 2 ( 9 )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 4 ( False )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( isDivBy9 )			      								    								  
34 LOAD_GLOBAL 1 ( int )				      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 5 ( 3 )					      								    								  
40 BINARY_RSHIFT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_GLOBAL 1 ( int )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 6 ( 7 )					      								    								  
50 BINARY_AND						      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object countInRange at 0x7fbac0e8bc90, f def countInRange ( arr , n , x , y ) :			    def countInRange ( arr , n , x , y ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  
2 STORE_FAST 4 ( count )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if ( arr [ i ] >= x and arr [ i ] <= y ) :	    	    if arr [ i ] >= x and arr [ i ] <= y :		  
3 4 SETUP_LOOP 48 ( to 54 )				      		  count += 1					    		count += 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return count						    	return count						  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 36 ( to 52 )				      								    								  
16 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 5 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 2 ( x )					      								    								  
26 COMPARE_OP 5 ( >= )					      								    								  
28 POP_JUMP_IF_FALSE 14					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( y )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 42 LOAD_FAST 4 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( count )				      								    								  
50 JUMP_ABSOLUTE 14					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
6 >> 54 LOAD_FAST 4 ( count )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE		  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
--							      --							    --								  --
Disassembly of <code object arraySortedOrNot at 0x7fbac0e8d54 def arraySortedOrNot ( arr ) :				    def arraySortedOrNot ( arr ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  if n == 1 or n == 0 :					    	if n == 1 or n == 0 :					  
4 CALL_FUNCTION 1					      	      return True					    	    return True						  
6 STORE_FAST 1 ( n )					      	  return arr [ 0 ] <= arr [ 1 ] and arraySortedOrNot ( arr  	return arr [ 0 ] <= arr [ 1 ] and arraySortedOrNot ( arr  
							      								    								  
3 8 LOAD_FAST 1 ( n )					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_TRUE 24					      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 >> 24 LOAD_CONST 3 ( True )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
5 >> 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 1 ( <= )					      								    								  
42 JUMP_IF_FALSE_OR_POP 58				      								    								  
44 LOAD_GLOBAL 1 ( arraySortedOrNot )			      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 LOAD_CONST 0 ( None )				      								    								  
52 BUILD_SLICE 2					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
>> 58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
Disassembly of <code object minSum at 0x7fbac0e8bc90, file "< def minSum ( n ) :					    def minSum ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0 ;						    	sum = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( sum )					      	  while ( n > 0 ) :					    	while n > 0 :						  _sa.test/MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUC
							      	      sum += ( n % 10 ) ;				    	    sum += n % 10					  H_THAT_A_B_N.py", line 31	n //= = n ** 10
3 4 SETUP_LOOP 32 ( to 38 )				      	      n //= 10 ;					    	    n //= = n ** 10					  	^ SyntaxError: invalid syntax
>> 6 LOAD_FAST 0 ( n )					      	  if ( sum == 1 ) :					    	if sum == 1 :						  
8 LOAD_CONST 1 ( 0 )					      	      return 10 ;					    	    return 10						  
10 COMPARE_OP 4 ( > )					      	  return sum ;						    	return sum						  
12 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( sum )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 10 )					      								    								  
20 BINARY_MODULO					      								    								  
22 INPLACE_ADD						      								    								  
24 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 2 ( 10 )					      								    								  
30 INPLACE_FLOOR_DIVIDE					      								    								  
32 STORE_FAST 0 ( n )					      								    								  
34 JUMP_ABSOLUTE 6					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 1 ( sum )				      								    								  
40 LOAD_CONST 3 ( 1 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_CONST 2 ( 10 )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 1 ( sum )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
Disassembly of <code object sumNodes at 0x7fbac0e8de40, file  def sumNodes ( l ) :					    def sumNodes ( l ) :					  success : None
2 0 LOAD_GLOBAL 0 ( math )				      	  leafNodeCount = math.pow ( 2 , l - 1 ) ;		    	leafNodeCount = math.pow ( 2 , l - 1 )			  
2 LOAD_METHOD 1 ( pow )					      	  sumLastLevel = 0 ;					    	sumLastLevel = 0					  
4 LOAD_CONST 1 ( 2 )					      	  sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 )  	sumLastLevel = leafNodeCount * ( leafNodeCount + 1 ) / 2  
6 LOAD_FAST 0 ( l )					      	  sum = sumLastLevel * l ;				    	sum = sumLastLevel * l					  
8 LOAD_CONST 2 ( 1 )					      	  return int ( sum ) ;					    	return int ( sum )					  
10 BINARY_SUBTRACT					      								    								  
12 CALL_METHOD 2					      								    								  
14 STORE_FAST 1 ( leafNodeCount )			      								    								  
							      								    								  
3 16 LOAD_CONST 3 ( 0 )					      								    								  
18 STORE_FAST 2 ( sumLastLevel )			      								    								  
							      								    								  
4 20 LOAD_FAST 1 ( leafNodeCount )			      								    								  
22 LOAD_FAST 1 ( leafNodeCount )			      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 1 ( 2 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 STORE_FAST 2 ( sumLastLevel )			      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( sumLastLevel )			      								    								  
38 LOAD_FAST 0 ( l )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 2 ( int )				      								    								  
46 LOAD_FAST 3 ( sum )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
Disassembly of <code object firstFactorialDivisibleNumber at  def firstFactorialDivisibleNumber ( x ) :			    def firstFactorialalDiibleNumber ( x ) :			  success : None
2 0 LOAD_CONST 1 ( 1 )					      	  i = 1 ;						    	i = 1							  
2 STORE_FAST 1 ( i )					      	  fact = 1 ;						    	fact = 1						  
							      	  for i in range ( 1 , x ) :				    	for i in range ( 1 , x ) :				  
3 4 LOAD_CONST 1 ( 1 )					      	      fact = fact * i					    	    fact = fact * i					  
6 STORE_FAST 2 ( fact )					      	      if ( fact % x == 0 ) :				    	    if fact % x == 0 :					  
							      		  break						    		break						  
4 8 SETUP_LOOP 40 ( to 50 )				      	  return i						    	return i						  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 0 ( x )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 26 ( to 48 )				      								    								  
22 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( fact )				      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 STORE_FAST 2 ( fact )				      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( fact )				      								    								  
34 LOAD_FAST 0 ( x )					      								    								  
36 BINARY_MODULO					      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
7 44 BREAK_LOOP						      								    								  
46 JUMP_ABSOLUTE 20					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 1 ( i )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
Disassembly of <code object add at 0x7fbac0e89d20, file "<dis def add ( A , B , C ) :					    def add ( A , B , C ) :					  script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
4 LOAD_GLOBAL 1 ( N )					      		  C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]	    		C [ i ] [ j ] = A [ i ] [ j ] + C [ i ] [ j ]	  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 54 ( to 66 )				      								    								  
12 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 48 ( to 64 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 4 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 2 ( C )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( j )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2					      SORT_ARRAY_WAVE_FORM_2					    SORT_ARRAY_WAVE_FORM_2					  SORT_ARRAY_WAVE_FORM_2
--							      --							    --								  --
Disassembly of <code object sortInWave at 0x7fbac0e8d540, fil def sortInWave ( arr , n ) :				    def sortInWave ( arr , n ) :				  success : identical to gold
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  for i in range ( 0 , n - 1 , 2 ) :			    	for i in range ( 0 , n - 1 , 2 ) :			  
4 CALL_METHOD 0						      	      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] 	    arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] 
6 POP_TOP						      								    								  
							      								    								  
3 8 SETUP_LOOP 58 ( to 68 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_CONST 3 ( 2 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 38 ( to 66 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 ROT_TWO						      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 26					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
Disassembly of <code object multiply at 0x7fbac0e8d540, file  def multiply ( A , B , C ) :				    def multiply ( A , B , C ) :				  script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
4 LOAD_GLOBAL 1 ( N )					      		  C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]	    		C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]	  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 54 ( to 66 )				      								    								  
12 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 48 ( to 64 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 4 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 2 ( C )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( j )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN	      SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		    SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		  SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN
--							      --							    --								  --
Disassembly of <code object minTime at 0x7fbac0e8bc90, file " def minTime ( n , k , a ) :				    def minTime ( n , k , a ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( a )					      	  a.sort ( reverse = True ) ;				    	a.sort ( reverse = True )				  
2 LOAD_ATTR 0 ( sort )					      	  minTime = 0 ;						    	minTime = 0						  
4 LOAD_CONST 1 ( True )					      	  for i in range ( 0 , n , k ) :			    	for i in range ( 0 , n , k ) :				  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	      minTime += ( 2 * a [ i ] ) ;			    	    minTime += 2 * a [ i ]				  
8 CALL_FUNCTION_KW 1					      	  return minTime ;					    	return minTime						  
10 POP_TOP						      								    								  
							      								    								  
3 12 LOAD_CONST 3 ( 0 )					      								    								  
14 STORE_FAST 3 ( minTime )				      								    								  
							      								    								  
4 16 SETUP_LOOP 36 ( to 54 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 3 ( 0 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_FAST 1 ( k )					      								    								  
26 CALL_FUNCTION 3					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 20 ( to 52 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 3 ( minTime )				      								    								  
36 LOAD_CONST 4 ( 2 )					      								    								  
38 LOAD_FAST 2 ( a )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( minTime )				      								    								  
50 JUMP_ABSOLUTE 30					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
6 >> 54 LOAD_FAST 3 ( minTime )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_2				      FIND_REPETITIVE_ELEMENT_1_N_1_2				    FIND_REPETITIVE_ELEMENT_1_N_1_2				  FIND_REPETITIVE_ELEMENT_1_N_1_2
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7fbac0e8bc90,  def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
							      	      res = res ^ ( i + 1 ) ^ arr [ i ]			    	    res = ( res ^ i + 1 ) ^ ( arr [ i ] )		  
3 4 SETUP_LOOP 42 ( to 48 )				      	  res = res ^ arr [ n - 1 ]				    	res = res ^ arr [ n - 1 ]				  
6 LOAD_GLOBAL 0 ( range )				      	  return res						    	return res						  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( res )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 BINARY_XOR						      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_XOR						      								    								  
42 STORE_FAST 2 ( res )					      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 LOAD_FAST 2 ( res )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_XOR						      								    								  
62 STORE_FAST 2 ( res )					      								    								  
							      								    								  
6 64 LOAD_FAST 2 ( res )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
Disassembly of <code object catalan at 0x7fbac0e8d540, file " def catalan ( n ) :					    def catalan ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n <= 1 :						    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 1 ( <= )					      	  res = 0						    	res = 0							  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      res += catalan ( i ) * catalan ( n - i - 1 )	    	    res += catalan ( i ) * catalan ( n - i - 1 )	  
3 8 LOAD_CONST 1 ( 1 )					      	  return res						    	return res						  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 0 )				      								    								  
14 STORE_FAST 1 ( res )					      								    								  
							      								    								  
5 16 SETUP_LOOP 44 ( to 62 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 32 ( to 60 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( res )				      								    								  
32 LOAD_GLOBAL 1 ( catalan )				      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 LOAD_GLOBAL 1 ( catalan )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 1 ( res )					      								    								  
58 JUMP_ABSOLUTE 26					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 1 ( res )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac0e8d540, file " def findSum ( N , K ) :					    def findSum ( N , K ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	ans = 0							  
2 STORE_FAST 2 ( ans )					      	  y = N / K ;						    	y = N / K						  
							      	  x = N % K ;						    	x = N % K						  
3 4 LOAD_FAST 0 ( N )					      	  ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 	ans = ( K * ( K - 1 ) / 2 ) * y + x * ( x + 1 ) / 2	  
6 LOAD_FAST 1 ( K )					      	  return int ( ans ) ;					    	return int ( ans )					  
8 BINARY_TRUE_DIVIDE					      								    								  
10 STORE_FAST 3 ( y )					      								    								  
							      								    								  
4 12 LOAD_FAST 0 ( N )					      								    								  
14 LOAD_FAST 1 ( K )					      								    								  
16 BINARY_MODULO					      								    								  
18 STORE_FAST 4 ( x )					      								    								  
							      								    								  
5 20 LOAD_FAST 1 ( K )					      								    								  
22 LOAD_FAST 1 ( K )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 3 ( 2 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 LOAD_FAST 3 ( y )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_FAST 4 ( x )					      								    								  
40 LOAD_FAST 4 ( x )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_CONST 3 ( 2 )					      								    								  
50 BINARY_TRUE_DIVIDE					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
6 56 LOAD_GLOBAL 0 ( int )				      								    								  
58 LOAD_FAST 2 ( ans )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
Disassembly of <code object isCornerPresent at 0x7fbac0e89d20 def isCornerPresent ( str , corner ) :			    def isCornerPresent ( str , corner ) :			  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  cl = len ( corner )					    	cl = len ( corner )					  
4 CALL_FUNCTION 1					      	  if ( n < cl ) :					    	if n < cl :						  
6 STORE_FAST 2 ( n )					      	      return False					    	    return False					  
							      	  return ( ( str [ : cl ] == corner ) and ( str [ n - cl :  	return str [ : cl ] == corner and ( str [ n - cl : ] == c 
3 8 LOAD_GLOBAL 0 ( len )				      								    								  
10 LOAD_FAST 1 ( corner )				      								    								  
12 CALL_FUNCTION 1					      								    								  
14 STORE_FAST 3 ( cl )					      								    								  
							      								    								  
4 16 LOAD_FAST 2 ( n )					      								    								  
18 LOAD_FAST 3 ( cl )					      								    								  
20 COMPARE_OP 0 ( < )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( False )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_CONST 0 ( None )				      								    								  
32 LOAD_FAST 3 ( cl )					      								    								  
34 BUILD_SLICE 2					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( corner )				      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 JUMP_IF_FALSE_OR_POP 62				      								    								  
44 LOAD_FAST 0 ( str )					      								    								  
46 LOAD_FAST 2 ( n )					      								    								  
48 LOAD_FAST 3 ( cl )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 BUILD_SLICE 2					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 1 ( corner )				      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
>> 62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
Disassembly of <code object gcd at 0x7fbac0e8bc90, file "<dis def gcd ( a , b ) :					    def gcd ( a , b ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a < b ) :					    	if a < b :						  
2 LOAD_FAST 1 ( b )					      	      return gcd ( b , a )				    	    return gcd ( b , a )				  
4 COMPARE_OP 0 ( < )					      	  if ( abs ( b ) < 0.001 ) :				    	if abs ( b ) < 0.001 :					  
6 POP_JUMP_IF_FALSE 18					      	      return a						    	    return a						  
							      	  else :						    	else :							  
3 8 LOAD_GLOBAL 0 ( gcd )				      	      return ( gcd ( b , a - math.floor ( a / b ) * b ) )   	    return gcd ( b , a - math.floor ( a / b ) * b )	  
10 LOAD_FAST 1 ( b )					      								    								  
12 LOAD_FAST 0 ( a )					      								    								  
14 CALL_FUNCTION 2					      								    								  
16 RETURN_VALUE						      								    								  
							      								    								  
4 >> 18 LOAD_GLOBAL 1 ( abs )				      								    								  
20 LOAD_FAST 1 ( b )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 LOAD_CONST 1 ( 0.001 )				      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( a )					      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
7 >> 34 LOAD_GLOBAL 0 ( gcd )				      								    								  
36 LOAD_FAST 1 ( b )					      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_GLOBAL 2 ( math )				      								    								  
42 LOAD_METHOD 3 ( floor )				      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 1 ( b )					      								    								  
48 BINARY_TRUE_DIVIDE					      								    								  
50 CALL_METHOD 1					      								    								  
52 LOAD_FAST 1 ( b )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 RETURN_VALUE						      								    								  
62 LOAD_CONST 0 ( None )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT
--							      --							    --								  --
Disassembly of <code object countToMake0lternate at 0x7fbac0e def countToMake0lternate ( s ) :				    def countToMake0lternate ( s ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  for i in range ( len ( s ) - 1 ) :			    	for i in range ( len ( s ) - 1 ) :			  
							      	      if ( s [ i ] == s [ i + 1 ] ) :			    	    if s [ i ] == s [ i + 1 ] :				  
3 4 SETUP_LOOP 52 ( to 58 )				      		  result += 1					    		result += 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return result						    	return result						  
8 LOAD_GLOBAL 1 ( len )					      								    								  
10 LOAD_FAST 0 ( s )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 32 ( to 56 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( s )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
5 46 LOAD_FAST 1 ( result )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( result )				      								    								  
54 JUMP_ABSOLUTE 22					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
6 >> 58 LOAD_FAST 1 ( result )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT				      CHECK_TWO_GIVEN_SETS_DISJOINT				    CHECK_TWO_GIVEN_SETS_DISJOINT				  CHECK_TWO_GIVEN_SETS_DISJOINT
--							      --							    --								  --
Disassembly of <code object areDisjoint at 0x7fbac0e8d540, fi def areDisjoint ( set1 , set2 , m , n ) :			    def areDisjoint ( set1 , set2 , m , n = 5 ) :		  script_not_found : None
2 0 SETUP_LOOP 58 ( to 60 )				      	  for i in range ( 0 , m ) :				    	for i in range ( 0 , m ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
4 LOAD_CONST 1 ( 0 )					      		  if ( set1 [ i ] == set2 [ j ] ) :		    		if set1 [ i ] == set2 [ j ] :			  
6 LOAD_FAST 2 ( m )					      		      return False				    		    return False				  
8 CALL_FUNCTION 2					      	  return True						    return True							  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 44 ( to 58 )				      								    								  
14 STORE_FAST 4 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 38 ( to 56 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 24 ( to 54 )				      								    								  
30 STORE_FAST 5 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( set1 )				      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( set2 )					      								    								  
40 LOAD_FAST 5 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 48 LOAD_CONST 2 ( False )				      								    								  
50 RETURN_VALUE						      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 JUMP_ABSOLUTE 12					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
6 >> 60 LOAD_CONST 3 ( True )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac0e8d8a0, file " def findSum ( N ) :					    def findSum ( N ) :						  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  
2 STORE_FAST 1 ( ans )					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  
							      	      for j in range ( 1 , N + 1 ) :			    	    for j in range ( 1 , N + 1 ) :			  
3 4 SETUP_LOOP 58 ( to 64 )				      		  ans += i // j					    		ans += i // j					  
6 LOAD_GLOBAL 0 ( range )				      	  return ans						    	return ans						  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 0 ( N )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 40 ( to 62 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 34 ( to 60 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 0 ( N )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 16 ( to 58 )				      								    								  
42 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 1 ( ans )				      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 BINARY_FLOOR_DIVIDE					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 1 ( ans )					      								    								  
56 JUMP_ABSOLUTE 40					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 JUMP_ABSOLUTE 20					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 1 ( ans )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS			      NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS			    NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS			  NUMBER_DIGITS_PR<unk> CT_TWO_NUMBERS
--							      --							    --								  --
Disassembly of <code object countDigits at 0x7fbac0e8de40, fi def countDigits ( a , b ) :				    def countDigits ( a , b ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  p = abs ( a * b )					    	p = abs ( a * b )					  
							      	  if ( p == 0 ) :					    	if p == 0 :						  
3 4 LOAD_GLOBAL 0 ( abs )				      	      return 1						    	    return 1						  
6 LOAD_FAST 0 ( a )					      	  while ( p > 0 ) :					    	while p > 0 :						  
8 LOAD_FAST 1 ( b )					      	      count = count + 1					    	    count = count + 1					  
10 BINARY_MULTIPLY					      	      p = p // 10					    	    p = p // 10						  
12 CALL_FUNCTION 1					      	  return count						    	return count						  
14 STORE_FAST 3 ( p )					      								    								  
							      								    								  
4 16 LOAD_FAST 3 ( p )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 24 LOAD_CONST 2 ( 1 )					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 SETUP_LOOP 28 ( to 58 )				      								    								  
>> 30 LOAD_FAST 3 ( p )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 38 LOAD_FAST 2 ( count )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 2 ( count )				      								    								  
							      								    								  
8 46 LOAD_FAST 3 ( p )					      								    								  
48 LOAD_CONST 3 ( 10 )					      								    								  
50 BINARY_FLOOR_DIVIDE					      								    								  
52 STORE_FAST 3 ( p )					      								    								  
54 JUMP_ABSOLUTE 30					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
9 >> 58 LOAD_FAST 2 ( count )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER						      DELANNOY_NUMBER						    DELANNOY_NUMBER						  DELANNOY_NUMBER
--							      --							    --								  --
Disassembly of <code object dealnnoy at 0x7fbac0e8de40, file  def dealnnoy ( n , m ) :					    def dealnnoy ( n , m ) :					  script_not_found : None
2 0 LOAD_FAST 1 ( m )					      	  if ( m == 0 or n == 0 ) :				    	if m == 0 or n == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  	return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( dealnnoy )			      								    								  
22 LOAD_FAST 1 ( m )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 LOAD_GLOBAL 0 ( dealnnoy )				      								    								  
34 LOAD_FAST 1 ( m )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_GLOBAL 0 ( dealnnoy )				      								    								  
52 LOAD_FAST 1 ( m )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 BINARY_ADD						      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_<unk> UTE_DIFFERENCE_PAIRS_TWO_<unk> YS	      MINIMUM_SUM_<unk> UTE_DIFFERENCE_PAIRS_TWO_<unk> YS	    MINIMUM_SUM_<unk> UTE_DIFFERENCE_PAIRS_TWO_<unk> YS		  MINIMUM_SUM_<unk> UTE_DIFFERENCE_PAIRS_TWO_<unk> YS
--							      --							    --								  --
Disassembly of <code object findMinSum at 0x7fbac0e8d540, fil def findMinSum ( a , b , n ) :				    def findMinSum ( a , b , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( )						    	a.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  b.sort ( )						    	b.sort ( )						  
4 CALL_METHOD 0						      	  sum = 0						    	sum = 0							  
6 POP_TOP						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      sum = sum + abs ( a [ i ] - b [ i ] )		    	    sum = sum + abs ( a [ i ] - b [ i ] )		  
3 8 LOAD_FAST 1 ( b )					      	  return sum						    	return sum						  
10 LOAD_METHOD 0 ( sort )				      								    								  
12 CALL_METHOD 0					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
5 20 SETUP_LOOP 40 ( to 62 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 28 ( to 60 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( sum )				      								    								  
36 LOAD_GLOBAL 2 ( abs )				      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( b )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( sum )					      								    								  
58 JUMP_ABSOLUTE 30					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 3 ( sum )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		      PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		    PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER			  PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER
--							      --							    --								  --
Disassembly of <code object Print at 0x7fbac0e8de40, file "<d def Print ( n , k ) :					    def Print ( n , k = 0 ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  rem = 1						    	rem = 1							  
2 STORE_FAST 2 ( rem )					      	  for i in range ( 0 , k ) :				    	for i in range ( 0 , k ) :				  
							      	      print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = " 	    print ( math.floor ( 10 * rem / n ) , end = '' )	  
3 4 SETUP_LOOP 56 ( to 62 )				      	      rem = ( 10 * rem ) % n				    	    rem = 10 * rem % n					  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 2 ( 0 )					      								    								  
10 LOAD_FAST 1 ( k )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 42 ( to 60 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_GLOBAL 2 ( math )				      								    								  
24 LOAD_METHOD 3 ( floor )				      								    								  
26 LOAD_CONST 3 ( 10 )					      								    								  
28 LOAD_FAST 2 ( rem )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 CALL_METHOD 1					      								    								  
38 LOAD_CONST 4 ( '' )					      								    								  
40 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
42 CALL_FUNCTION_KW 2					      								    								  
44 POP_TOP						      								    								  
							      								    								  
5 46 LOAD_CONST 3 ( 10 )				      								    								  
48 LOAD_FAST 2 ( rem )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 2 ( rem )					      								    								  
58 JUMP_ABSOLUTE 16					      								    								  
>> 60 POP_BLOCK						      								    								  
>> 62 LOAD_CONST 0 ( None )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7fbac0e89d20,  def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( s )					      	      if arr [ i ] in s :				    	    if arr [ i ] in s :					  
							      		  return arr [ i ]				    		return arr [ i ]				  
3 6 SETUP_LOOP 50 ( to 58 )				      	      s.add ( arr [ i ] )				    	    s.add ( arr [ i ] )					  
8 LOAD_GLOBAL 1 ( range )				      	  rteurn - 1						    	rteurn - 1						  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 38 ( to 56 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( s )					      								    								  
28 COMPARE_OP 6 ( in )					      								    								  
30 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 2 ( s )				      								    								  
42 LOAD_METHOD 2 ( add )				      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_METHOD 1					      								    								  
52 POP_TOP						      								    								  
54 JUMP_ABSOLUTE 16					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 LOAD_GLOBAL 3 ( rteurn )			      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
Disassembly of <code object printSquares at 0x7fbac0e8bc90, f def printSquares ( n ) :					    def printSquares ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  square = 0						    	square = 0						  
2 STORE_FAST 1 ( square )				      	  odd = 1						    	odd = 1							  
							      	  for x in range ( 0 , n ) :				    	for x in range ( 0 , n ) :				  
3 4 LOAD_CONST 2 ( 1 )					      	      print ( square , end = " " )			    	    print ( square , end = " " )			  
6 STORE_FAST 2 ( odd )					      	      square = square + odd				    	    square = square + odd				  
							      	      odd = odd + 2					    	    odd = odd + 2					  
4 8 SETUP_LOOP 46 ( to 56 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 3 ( x )					      								    								  
							      								    								  
5 24 LOAD_GLOBAL 1 ( print )				      								    								  
26 LOAD_FAST 1 ( square )				      								    								  
28 LOAD_CONST 3 ( ' ' )					      								    								  
30 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
32 CALL_FUNCTION_KW 2					      								    								  
34 POP_TOP						      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( square )				      								    								  
38 LOAD_FAST 2 ( odd )					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 1 ( square )				      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( odd )				      								    								  
46 LOAD_CONST 5 ( 2 )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 2 ( odd )					      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
Disassembly of <code object mirrorImage at 0x7fbac0e89d20, fi def mirrorImage ( a , b , c , x1 , y1 ) :			    def mirrorImage ( a , b , c , x1 , y1 , y2 ) :		  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( - 2 )				      	  temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )  	temp = ( - 2 * a + b * y1 + c ) / ( a * a + b * b )	  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( a )					      	  x = temp * a + x1					    	x = temp * a + x1					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/FIND_M
4 LOAD_FAST 3 ( x1 )					      	  y = temp * b + y1					    	y = temp * b + y1					  IRROR_IMAGE_POINT_2_D_PLANE.py", line 46, in <modu
6 BINARY_MULTIPLY					      	  return ( x , y )					    	return ( x , y )					  le>	  if f_filled(*parameters_set) == f_gold(*pa
8 LOAD_FAST 1 ( b )					      								    								  rameters_set): TypeError: f_filled() missing 1 req
10 LOAD_FAST 4 ( y1 )					      								    								  uired positional argument: 'y2'
12 BINARY_MULTIPLY					      								    								  
14 BINARY_ADD						      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 BINARY_ADD						      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_FAST 0 ( a )					      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_FAST 1 ( b )					      								    								  
30 LOAD_FAST 1 ( b )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 BINARY_ADD						      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 STORE_FAST 5 ( temp )				      								    								  
							      								    								  
3 40 LOAD_FAST 5 ( temp )				      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 3 ( x1 )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 6 ( x )					      								    								  
							      								    								  
4 52 LOAD_FAST 5 ( temp )				      								    								  
54 LOAD_FAST 1 ( b )					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 LOAD_FAST 4 ( y1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 7 ( y )					      								    								  
							      								    								  
5 64 LOAD_FAST 6 ( x )					      								    								  
66 LOAD_FAST 7 ( y )					      								    								  
68 BUILD_TUPLE 2					      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_<unk> CATION_METHOD_WITHOUT_USING_<unk> CATION_OPERATOR_ FAST_<unk> CATION_METHOD_WITHOUT_USING_<unk> CATION_OPERATOR_ FAST_<unk> CATION_METHOD_WITHOUT_USING_<unk> CATION_OPERATOR_ FAST_<unk> CATION_METHOD_WITHOUT_USING_<unk> CATION_OPERATOR_
--							      --							    --								  --
Disassembly of <code object russianPeasant at 0x7fbac0e8de40, def russianPeasant ( a , b ) :				    def russianPeasant ( a , b ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  while ( b > 0 ) :					    	while b > 0 :						  
							      	      if ( b & 1 ) :					    	    if b & 1 :						  
3 4 SETUP_LOOP 44 ( to 50 )				      		  res = res + a					    		res = res + a					  
>> 6 LOAD_FAST 1 ( b )					      	      a = a << 1					    	    a = a << 1						  
8 LOAD_CONST 1 ( 0 )					      	      b = b >> 1					    	    b = b >> 1						  
10 COMPARE_OP 4 ( > )					      	  return res						    	return res						  
12 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( b )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_AND						      								    								  
20 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( res )				      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 2 ( res )					      								    								  
							      								    								  
6 >> 30 LOAD_FAST 0 ( a )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_LSHIFT					      								    								  
36 STORE_FAST 0 ( a )					      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( b )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_RSHIFT					      								    								  
44 STORE_FAST 1 ( b )					      								    								  
46 JUMP_ABSOLUTE 6					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 2 ( res )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
Disassembly of <code object isSymmetric at 0x7fbac0e8bc90, fi def isSymmetric ( mat , N ) :				    def isSymmetric ( mat , N ) :				  success : None
2 0 SETUP_LOOP 62 ( to 64 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
4 LOAD_FAST 1 ( N )					      		  if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :	    		if mat [ i ] [ j ] != mat [ j ] [ i ] :		  
6 CALL_FUNCTION 1					      		      return False				    		    return False				  
8 GET_ITER						      	  return True						    	return True						  
>> 10 FOR_ITER 50 ( to 62 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 44 ( to 60 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 32 ( to 58 )				      								    								  
26 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( mat )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( mat )					      								    								  
40 LOAD_FAST 3 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 52 LOAD_CONST 1 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 JUMP_ABSOLUTE 10					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_CONST 2 ( True )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8de40, file "< def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 3 ( i )					      	  while ( i <= n - 1 ) :				    	while i <= n - 1 :					  
							      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  
3 4 SETUP_LOOP 52 ( to 58 )				      		  return i					    		return i					  
>> 6 LOAD_FAST 3 ( i )					      	      i += abs ( arr [ i ] - x )			    	    i += abs ( arr [ i ] - x )				  
8 LOAD_FAST 1 ( n )					      	  return - 1						    	return - 1						  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 2 ( x )					      								    								  
26 COMPARE_OP 2 ( == )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
5 30 LOAD_FAST 3 ( i )					      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
6 >> 34 LOAD_FAST 3 ( i )				      								    								  
36 LOAD_GLOBAL 0 ( abs )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( x )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 3 ( i )					      								    								  
54 JUMP_ABSOLUTE 6					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 LOAD_CONST 3 ( - 1 )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
Disassembly of <code object countCommon at 0x7fbac0e89d20, fi def countCommon ( mat , n ) :				    def countCommon ( mat , n ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	    	    if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	  
3 4 SETUP_LOOP 56 ( to 62 )				      		  res = res + 1					    		res = res + 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return res						    	return res						  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 44 ( to 60 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( mat )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 0 ( mat )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 50 LOAD_FAST 2 ( res )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( res )					      								    								  
58 JUMP_ABSOLUTE 14					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_FAST 2 ( res )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
Disassembly of <code object printSquares at 0x7fbac0e8d540, f def printSquares ( n ) :					    def printSquares ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  square = 0 ; prev_x = 0 ;				    	square = 0						  
2 STORE_FAST 1 ( square )				      	  for x in range ( 0 , n ) :				    	prev_x = 0						  
4 LOAD_CONST 1 ( 0 )					      	      square = ( square + x + prev_x )			    	for x in range ( 0 , n ) :				  
6 STORE_FAST 2 ( prev_x )				      	      print ( square , end = " " )			    	    square = ( square + x ) + prev_x			  
							      	      prev_x = x					    	    print ( square , end = " " )			  
3 8 SETUP_LOOP 46 ( to 56 )				      								    	    prev_x = x						  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 3 ( x )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( square )				      								    								  
26 LOAD_FAST 3 ( x )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 2 ( prev_x )				      								    								  
32 BINARY_ADD						      								    								  
34 STORE_FAST 1 ( square )				      								    								  
							      								    								  
5 36 LOAD_GLOBAL 1 ( print )				      								    								  
38 LOAD_FAST 1 ( square )				      								    								  
40 LOAD_CONST 2 ( ' ' )					      								    								  
42 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( x )					      								    								  
50 STORE_FAST 2 ( prev_x )				      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		      SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		    SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		  SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO
--							      --							    --								  --
Disassembly of <code object section at 0x7fbac0e8d540, file " def section ( x1 , x2 , y1 , y2 , m , n ) :		    def section ( x1 , x2 , y1 , y2 , m , n ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( float )				      	  x = ( float ) ( ( n * x1 ) + ( m * x2 ) ) / ( m + n )	    	x = float ( n * x1 + m * x2 ) / ( m + n )		  
2 LOAD_FAST 5 ( n )					      	  y = ( float ) ( ( n * y1 ) + ( m * y2 ) ) / ( m + n )	    	y = float ( n * y1 + m * y2 ) / ( m + n )		  
4 LOAD_FAST 0 ( x1 )					      	  print ( x , y )					    	print ( x , y )						  
6 BINARY_MULTIPLY					      								    								  
8 LOAD_FAST 4 ( m )					      								    								  
10 LOAD_FAST 1 ( x2 )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 1					      								    								  
18 LOAD_FAST 4 ( m )					      								    								  
20 LOAD_FAST 5 ( n )					      								    								  
22 BINARY_ADD						      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 STORE_FAST 6 ( x )					      								    								  
							      								    								  
3 28 LOAD_GLOBAL 0 ( float )				      								    								  
30 LOAD_FAST 5 ( n )					      								    								  
32 LOAD_FAST 2 ( y1 )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 4 ( m )					      								    								  
38 LOAD_FAST 3 ( y2 )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 1					      								    								  
46 LOAD_FAST 4 ( m )					      								    								  
48 LOAD_FAST 5 ( n )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 STORE_FAST 7 ( y )					      								    								  
							      								    								  
4 56 LOAD_GLOBAL 1 ( print )				      								    								  
58 LOAD_FAST 6 ( x )					      								    								  
60 LOAD_FAST 7 ( y )					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
Disassembly of <code object findRotations at 0x7fbac0e8de40,  def findRotations ( str ) :				    def findRotations ( str ) :					  failure : #Results: 9, 10
2 0 LOAD_FAST 0 ( str )					      	  tmp = str + str					    	tmp = str + str						  
2 LOAD_FAST 0 ( str )					      	  n = len ( str )					    	n = len ( str )						  
4 BINARY_ADD						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
6 STORE_FAST 1 ( tmp )					      	      substring = tmp [ i : n ]				    	    substring = tmp [ i : n ]				  
							      	      if ( str == substring ) :				    	    if str == substring :				  
3 8 LOAD_GLOBAL 0 ( len )				      		  return i					    		return i					  
10 LOAD_FAST 0 ( str )					      	  return n						    	return n						  
12 CALL_FUNCTION 1					      								    								  
14 STORE_FAST 2 ( n )					      								    								  
							      								    								  
4 16 SETUP_LOOP 46 ( to 64 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_FAST 2 ( n )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 36 LOAD_FAST 1 ( tmp )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 LOAD_FAST 2 ( n )					      								    								  
42 BUILD_SLICE 2					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_FAST 4 ( substring )				      								    								  
							      								    								  
6 48 LOAD_FAST 0 ( str )				      								    								  
50 LOAD_FAST 4 ( substring )				      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
7 56 LOAD_FAST 3 ( i )					      								    								  
58 RETURN_VALUE						      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
8 >> 64 LOAD_FAST 2 ( n )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_2		      <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_2		    <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_2		  <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
Disassembly of <code object middleOfThree at 0x7fbac0e8d540,  def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , c ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  x = a - b						    	x = a - b						  
2 LOAD_FAST 1 ( b )					      	  y = b - c						    	y = b - c						  
4 BINARY_SUBTRACT					      	  z = a - c						    	z = a - c						  
6 STORE_FAST 3 ( x )					      	  if x * y > 0 :					    	if x * y > 0 :						  
							      	      return b						    	    return b						  
3 8 LOAD_FAST 1 ( b )					      	  elif ( x * z > 0 ) :					    	if x * z > 0 :						  
10 LOAD_FAST 2 ( c )					      	      return						    	    return None						  
12 BINARY_SUBTRACT					      	  else :						    	else :							  
14 STORE_FAST 4 ( y )					      	      return a						    	    return a						  
							      								    								  
4 16 LOAD_FAST 0 ( a )					      								    								  
18 LOAD_FAST 2 ( c )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 5 ( z )					      								    								  
							      								    								  
5 24 LOAD_FAST 3 ( x )					      								    								  
26 LOAD_FAST 4 ( y )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( b )					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
7 >> 40 LOAD_FAST 3 ( x )				      								    								  
42 LOAD_FAST 5 ( z )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
8 52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
10 >> 56 LOAD_FAST 0 ( a )				      								    								  
58 RETURN_VALUE						      								    								  
60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object randomize at 0x7fbac0e8d540, file def randomize ( arr , n ) :				    def randomize ( arr , n ) :					  success : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( n - 1 , 0 , - 1 ) :			    	for i in range ( n - 1 , 0 , - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      j = random.randint ( 0 , i + 1 )			    	    j = random.randint ( 0 , i + 1 )			  
4 LOAD_FAST 1 ( n )					      	      arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	    	    arr [ i ] = arr [ j ] , arr [ i ]			  
6 LOAD_CONST 1 ( 1 )					      	  return arr						    	return arr						  
8 BINARY_SUBTRACT					      								    								  
10 LOAD_CONST 2 ( 0 )					      								    								  
12 LOAD_CONST 3 ( - 1 )					      								    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 46 ( to 66 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 22 LOAD_GLOBAL 1 ( random )				      								    								  
24 LOAD_METHOD 2 ( randint )				      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_METHOD 2					      								    								  
36 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 3 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 ROT_TWO						      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 18					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
5 >> 68 LOAD_FAST 0 ( arr )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7fbac0e89d20, file " def isPrime ( n , i = 2 ) :				    def isPrime ( n , i ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 2 ) :					    	if n <= 2 :						  
2 LOAD_CONST 1 ( 2 )					      	      return True if ( n == 2 ) else False		    	    return True if n == 2 else False			  
4 COMPARE_OP 1 ( <= )					      	  if ( n % i == 0 ) :					    	if n % i == 0 :						  
6 POP_JUMP_IF_FALSE 24					      	      return False					    	    return False					  
							      	  if ( i * i > n ) :					    	if i * i > n :						  
3 8 LOAD_FAST 0 ( n )					      	      return true					    	    return true						  
10 LOAD_CONST 1 ( 2 )					      	  return isPrime ( n , i + 1 )				    	return isPrime ( n , i + 1 )				  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
16 LOAD_CONST 2 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_CONST 3 ( False )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 4 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 36 LOAD_CONST 3 ( False )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 1 ( i )				      								    								  
42 LOAD_FAST 1 ( i )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 52 LOAD_GLOBAL 0 ( true )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 LOAD_GLOBAL 1 ( isPrime )			      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_FAST 1 ( i )					      								    								  
62 LOAD_CONST 5 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 2					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
Disassembly of <code object selectRandom at 0x7fbac0e8bc90, f def selectRandom ( x ) :					    def selectRandom ( x ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0 ;						    	res = 0							  
2 STORE_FAST 1 ( res )					      	  count = 0 ;						    	count = 0						  
							      	  count += 1 ;						    	count += 1						  
3 4 LOAD_CONST 1 ( 0 )					      	  if ( count == 1 ) :					    	if count == 1 :						  
6 STORE_FAST 2 ( count )				      	      res = x ;						    	    res = x						  
							      	  else :						    	else :							  
4 8 LOAD_FAST 2 ( count )				      	      i = random.randrange ( count ) ;			    	    i = random.randrange ( count )			  
10 LOAD_CONST 2 ( 1 )					      	      if ( i == count - 1 ) :				    	    if i == count - 1 :					  
12 INPLACE_ADD						      		  res = x ;					    		res = x						  
14 STORE_FAST 2 ( count )				      	  return res ;						    	return res						  
							      								    								  
5 16 LOAD_FAST 2 ( count )				      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 24 LOAD_FAST 0 ( x )					      								    								  
26 STORE_FAST 1 ( res )					      								    								  
28 JUMP_FORWARD 26 ( to 56 )				      								    								  
							      								    								  
8 >> 30 LOAD_GLOBAL 0 ( random )			      								    								  
32 LOAD_METHOD 1 ( randrange )				      								    								  
34 LOAD_FAST 2 ( count )				      								    								  
36 CALL_METHOD 1					      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 40 LOAD_FAST 3 ( i )					      								    								  
42 LOAD_FAST 2 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
10 52 LOAD_FAST 0 ( x )					      								    								  
54 STORE_FAST 1 ( res )					      								    								  
							      								    								  
11 >> 56 LOAD_FAST 1 ( res )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_<unk> ASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_<unk> ASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_<unk> ASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_<unk> ASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
Disassembly of <code object countNonDecreasing at 0x7fbac0e89 def countNonDecreasing ( n ) :				    def countNonDecreasing ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 10 )					      	  N = 10						    	N = 10							  
2 STORE_FAST 1 ( N )					      	  count = 1						    	count = 1						  
							      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
3 4 LOAD_CONST 2 ( 1 )					      	      count = int ( count * ( N + i - 1 ) )		    	    count = int ( count * ( N + i ) - 1 ) )		  
6 STORE_FAST 2 ( count )				      	      count = int ( count / i )				    	    count = int ( count / i )				  
							      	  return count						    	return count						  
4 8 SETUP_LOOP 54 ( to 64 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_GLOBAL 1 ( int )				      								    								  
30 LOAD_FAST 2 ( count )				      								    								  
32 LOAD_FAST 1 ( N )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 2 ( count )				      								    								  
							      								    								  
6 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_FAST 2 ( count )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 STORE_FAST 2 ( count )				      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 2 ( count )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> Y_TWO_NUMBERS_WITHOUT_USING_<unk> Y_DIVISION_BITWISE_OP <unk> Y_TWO_NUMBERS_WITHOUT_USING_<unk> Y_DIVISION_BITWISE_OP <unk> Y_TWO_NUMBERS_WITHOUT_USING_<unk> Y_DIVISION_BITWISE_OP <unk> Y_TWO_NUMBERS_WITHOUT_USING_<unk> Y_DIVISION_BITWISE_OP
--							      --							    --								  --
Disassembly of <code object multiply at 0x7fbac0e8d540, file  def multiply ( x , y ) :					    def multiply ( x , y ) :					  script_not_found : None
2 0 LOAD_FAST 1 ( y )					      	  if ( y == 0 ) :					    	if y == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( y > 0 ) :					    	if y > 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return ( x + multiply ( x , y - 1 ) )		    	    return x + multiply ( x , y - 1 )			  
							      	  if ( y < 0 ) :					    	if y < 0 :						  
3 8 LOAD_CONST 1 ( 0 )					      	      return - multiply ( x , - y )			    	    return - multiply ( x , y )				  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 1 ( y )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 4 ( > )					      								    								  
18 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
5 20 LOAD_FAST 0 ( x )					      								    								  
22 LOAD_GLOBAL 0 ( multiply )				      								    								  
24 LOAD_FAST 0 ( x )					      								    								  
26 LOAD_FAST 1 ( y )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 BINARY_ADD						      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 1 ( y )				      								    								  
40 LOAD_CONST 1 ( 0 )					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 46 LOAD_GLOBAL 0 ( multiply )				      								    								  
48 LOAD_FAST 0 ( x )					      								    								  
50 LOAD_FAST 1 ( y )					      								    								  
52 UNARY_NEGATIVE					      								    								  
54 CALL_FUNCTION 2					      								    								  
56 UNARY_NEGATIVE					      								    								  
58 RETURN_VALUE						      								    								  
>> 60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
Disassembly of <code object minimum_cost at 0x7fbac0e8de40, f def minimum_cost ( a , n ) :				    def minimum_cost ( a : str , n : int ) -> List [ str ] :	  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( sys )				      	  mn = sys.maxsize					    	mn = sys.maxsize					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_ATTR 1 ( maxsize )				      	  sum = 0						    	sum = 0							  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/MINIMU
4 STORE_FAST 2 ( mn )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  M_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY.py
							      	      mn = min ( a [ i ] , mn )				    	    mn = min ( a [ i ] , mn )				  ", line 28, in <module>     def f_filled ( a : str
3 6 LOAD_CONST 1 ( 0 )					      	      sum += a [ i ]					    	    sum += a [ i ]					   , n : int ) -> List [ str ] : NameError: name 'Li
8 STORE_FAST 3 ( sum )					      	  return mn * ( sum - mn )				    	return mn * sum - mn					  st' is not defined
							      								    								  
4 10 SETUP_LOOP 42 ( to 54 )				      								    								  
12 LOAD_GLOBAL 2 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 30 ( to 52 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_GLOBAL 3 ( min )				      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 2 ( mn )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 STORE_FAST 2 ( mn )					      								    								  
							      								    								  
6 38 LOAD_FAST 3 ( sum )				      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( sum )					      								    								  
50 JUMP_ABSOLUTE 20					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_FAST 2 ( mn )				      								    								  
56 LOAD_FAST 3 ( sum )					      								    								  
58 LOAD_FAST 2 ( mn )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac0e8d540, file " def findSum ( n ) :					    def findSum ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  multiTerms = n * ( n + 1 ) // 2			    	multiTerms = ( n * ( n + 1 ) ) // 2			  
2 LOAD_FAST 0 ( n )					      	  sm = multiTerms					    	sm = multiTerms						  
4 LOAD_CONST 1 ( 1 )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
6 BINARY_ADD						      	      multiTerms = multiTerms - ( i - 1 )		    	    multiTerms = multiTerms - i - 1			  
8 BINARY_MULTIPLY					      	      sm = sm + multiTerms * i				    	    sm = sm + multiTerms * i				  
10 LOAD_CONST 2 ( 2 )					      	  return sm						    	return sm						  
12 BINARY_FLOOR_DIVIDE					      								    								  
14 STORE_FAST 1 ( multiTerms )				      								    								  
							      								    								  
3 16 LOAD_FAST 1 ( multiTerms )				      								    								  
18 STORE_FAST 2 ( sm )					      								    								  
							      								    								  
4 20 SETUP_LOOP 46 ( to 68 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 28 ( to 66 )				      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 40 LOAD_FAST 1 ( multiTerms )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 STORE_FAST 1 ( multiTerms )				      								    								  
							      								    								  
6 52 LOAD_FAST 2 ( sm )					      								    								  
54 LOAD_FAST 1 ( multiTerms )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 2 ( sm )					      								    								  
64 JUMP_ABSOLUTE 36					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 2 ( sm )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> ENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS   <unk> ENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS   <unk> ENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	  <unk> ENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS
--							      --							    --								  --
Disassembly of <code object getTotalNumberOfSequences at 0x7f def getTotalNumberOfSequences ( m , n ) :			    def getTotalNumberOfSequ( m , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( m )					      	  if m < n :						    	if m < n :						  
2 LOAD_FAST 1 ( n )					      	      return 0						    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if n == 0 :						    	if n == 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 1						    	    return 1						  
							      	  res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTota 	res = getTotalNumberOfSequ( m - 1 , n ) + getTotalNumberO 
3 8 LOAD_CONST 1 ( 0 )					      	  return res						    	return res						  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 1 ( n )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_GLOBAL 0 ( getTotalNumberOfSequences )	      								    								  
26 LOAD_FAST 0 ( m )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 LOAD_GLOBAL 0 ( getTotalNumberOfSequences )		      								    								  
38 LOAD_FAST 0 ( m )					      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 BINARY_FLOOR_DIVIDE					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 2 ( res )					      								    								  
							      								    								  
7 56 LOAD_FAST 2 ( res )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac0e8de40, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  failure : #Results: 8, 10
2 0 LOAD_FAST 0 ( n )					      	  n -= 1						    	n -= 1							  
2 LOAD_CONST 1 ( 1 )					      	  n |= n >> 1						    	n |= ( n >> 1 )						  
4 INPLACE_SUBTRACT					      	  n |= n >> 2						    	n |= ( n >> 2 )						  
6 STORE_FAST 0 ( n )					      	  n |= n >> 4						    	n |= ( n >> 4 )						  
							      	  n |= n >> 8						    	n |= ( n >> 8 )						  
3 8 LOAD_FAST 0 ( n )					      	  n |= n >> 16						    	n |= n | 16						  
10 LOAD_FAST 0 ( n )					      	  n += 1						    	n += 1							  
12 LOAD_CONST 1 ( 1 )					      	  return n						    	return n						  
14 BINARY_RSHIFT					      								    								  
16 INPLACE_OR						      								    								  
18 STORE_FAST 0 ( n )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_RSHIFT					      								    								  
28 INPLACE_OR						      								    								  
30 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 3 ( 4 )					      								    								  
38 BINARY_RSHIFT					      								    								  
40 INPLACE_OR						      								    								  
42 STORE_FAST 0 ( n )					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 4 ( 8 )					      								    								  
50 BINARY_RSHIFT					      								    								  
52 INPLACE_OR						      								    								  
54 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_CONST 5 ( 16 )					      								    								  
62 BINARY_RSHIFT					      								    								  
64 INPLACE_OR						      								    								  
66 STORE_FAST 0 ( n )					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 0 ( n )					      								    								  
							      								    								  
9 76 LOAD_FAST 0 ( n )					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_<unk> YS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_<unk> YS_SUM_EVERY_PAIR_GREATER_EQUAL_K	    PERMUTE_TWO_<unk> YS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_<unk> YS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
Disassembly of <code object isPossible at 0x7fbac0e8d540, fil def isPossible ( a , b , n , k ) :			    def isPossible ( a , b , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( reverse = True )				    	a.sort ( reverse = True )				  
2 LOAD_ATTR 0 ( sort )					      	  b.sort ( )						    	b.sort ( )						  
4 LOAD_CONST 1 ( True )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	      if ( a [ i ] + b [ i ] < k ) :			    	    if a [ i ] + b [ i ] < k :				  
8 CALL_FUNCTION_KW 1					      		  return False					    		return False					  
10 POP_TOP						      	  return True						    	return True						  
							      								    								  
3 12 LOAD_FAST 1 ( b )					      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 20 SETUP_LOOP 40 ( to 62 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 28 ( to 60 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( a )					      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 1 ( b )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 3 ( k )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 54 LOAD_CONST 3 ( False )				      								    								  
56 RETURN_VALUE						      								    								  
58 JUMP_ABSOLUTE 30					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_CONST 1 ( True )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
Disassembly of <code object getInvCount at 0x7fbac0e8bc90, fi def getInvCount ( arr , n ) :				    def getInvCount ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  inv_count = 0						    	inv_count = 0						  
2 STORE_FAST 2 ( inv_count )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 64 ( to 70 )				      		  if ( arr [ i ] > arr [ j ] ) :		    		if arr [ i ] > arr [ j ] :			  
6 LOAD_GLOBAL 0 ( range )				      		      inv_count += 1				    		    inv_count += 1				  
8 LOAD_FAST 1 ( n )					      	  return inv_count					    return inv_count						  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 52 ( to 68 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 46 ( to 66 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 28 ( to 64 )				      								    								  
36 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 54 LOAD_FAST 2 ( inv_count )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( inv_count )				      								    								  
62 JUMP_ABSOLUTE 34					      								    								  
>> 64 POP_BLOCK						      								    								  
>> 66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
7 >> 70 LOAD_FAST 2 ( inv_count )			      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				      EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				    EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				  EQUILIBRIUM_INDEX_OF_AN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object equilibrium at 0x7fbac0e8de40, fi def equilibrium ( arr ) :					    def equilibrium ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sum )				      	  total_sum = sum ( arr )				    	total_sum = sum ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  leftsum = 0						    	leftsum = 0						  
4 CALL_FUNCTION 1					      	  for i , num in enumerate ( arr ) :			    	for i , num in enumerate ( arr ) :			  
6 STORE_FAST 1 ( total_sum )				      	      total_sum -= num					    	    total_sum -= num					  
							      	      if leftsum == total_sum :				    	    if leftsum == total_sum :				  
3 8 LOAD_CONST 1 ( 0 )					      		  return i					    		return i					  
10 STORE_FAST 2 ( leftsum )				      	      leftsum += num					    	    leftsum += num					  
							      	  return - 1						    	return - 1						  
4 12 SETUP_LOOP 48 ( to 62 )				      								    								  
14 LOAD_GLOBAL 1 ( enumerate )				      								    								  
16 LOAD_FAST 0 ( arr )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 36 ( to 60 )				      								    								  
24 UNPACK_SEQUENCE 2					      								    								  
26 STORE_FAST 3 ( i )					      								    								  
28 STORE_FAST 4 ( num )					      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( total_sum )				      								    								  
32 LOAD_FAST 4 ( num )					      								    								  
34 INPLACE_SUBTRACT					      								    								  
36 STORE_FAST 1 ( total_sum )				      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( leftsum )				      								    								  
40 LOAD_FAST 1 ( total_sum )				      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( i )					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 2 ( leftsum )				      								    								  
52 LOAD_FAST 4 ( num )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 2 ( leftsum )				      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
9 >> 62 LOAD_CONST 2 ( - 1 )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRA<unk> AL_NUMBER_SUM_SQUARES			      SQUARE_PYRA<unk> AL_NUMBER_SUM_SQUARES			    SQUARE_PYRA<unk> AL_NUMBER_SUM_SQUARES			  SQUARE_PYRA<unk> AL_NUMBER_SUM_SQUARES
--							      --							    --								  --
Disassembly of <code object findS at 0x7fbac0e8de40, file "<d def findS ( s ) :						    def findS ( s ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  _sum = 0						    	_sum = 0						  
2 STORE_FAST 1 ( _sum )					      	  n = 1							    	n = 1							  
							      	  while ( _sum < s ) :					    	while _sum < s :					  
3 4 LOAD_CONST 2 ( 1 )					      	      _sum += n * n					    	    _sum += n * n					  
6 STORE_FAST 2 ( n )					      	      n += 1						    	    n += 1						  
							      	  n -= 1						    	n -= 1							  
4 8 SETUP_LOOP 32 ( to 42 )				      	  if _sum == s :					    	if _sum == s :						  
>> 10 LOAD_FAST 1 ( _sum )				      	      return n						    	    return n						  
12 LOAD_FAST 0 ( s )					      	  return - 1						    	return - 1						  
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( _sum )				      								    								  
20 LOAD_FAST 2 ( n )					      								    								  
22 LOAD_FAST 2 ( n )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 1 ( _sum )				      								    								  
							      								    								  
6 30 LOAD_FAST 2 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 2 ( n )					      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 2 ( n )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_SUBTRACT					      								    								  
48 STORE_FAST 2 ( n )					      								    								  
							      								    								  
8 50 LOAD_FAST 1 ( _sum )				      								    								  
52 LOAD_FAST 0 ( s )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
9 58 LOAD_FAST 2 ( n )					      								    								  
60 RETURN_VALUE						      								    								  
							      								    								  
10 >> 62 LOAD_CONST 3 ( - 1 )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
Disassembly of <code object shuffle at 0x7fbac0e8d540, file " def shuffle ( card , n ) :				    def shuffle ( card , n ) :					  script_not_found : None
2 0 SETUP_LOOP 68 ( to 70 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )    	    r = i + random.randint ( 0 , 55 ) % ( 52 - i )	  
4 LOAD_FAST 1 ( n )					      	      tmp = card [ i ]					    	    tmp = card [ i ]					  
6 CALL_FUNCTION 1					      	      card [ i ] = card [ r ]				    	    card [ i ] = card [ r ]				  
8 GET_ITER						      	      card [ r ] = tmp					    	    card [ r ] = tmp					  
>> 10 FOR_ITER 56 ( to 68 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 2 ( i )					      								    								  
16 LOAD_GLOBAL 1 ( random )				      								    								  
18 LOAD_METHOD 2 ( randint )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_CONST 2 ( 55 )					      								    								  
24 CALL_METHOD 2					      								    								  
26 LOAD_CONST 3 ( 52 )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 BINARY_MODULO					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 3 ( r )					      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( card )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 STORE_FAST 4 ( tmp )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( card )				      								    								  
48 LOAD_FAST 3 ( r )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( card )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
6 58 LOAD_FAST 4 ( tmp )				      								    								  
60 LOAD_FAST 0 ( card )					      								    								  
62 LOAD_FAST 3 ( r )					      								    								  
64 STORE_SUBSCR						      								    								  
66 JUMP_ABSOLUTE 10					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> Y_LARGE_INTEGERS_UNDER_LARGE_MODULO		      <unk> Y_LARGE_INTEGERS_UNDER_LARGE_MODULO			    <unk> Y_LARGE_INTEGERS_UNDER_LARGE_MODULO			  <unk> Y_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
Disassembly of <code object moduloMultiplication at 0x7fbac0e def moduloMultiplication ( a , b , mod ) :		    def moduloMultiplication ( a , b , mod ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0 ;						    	res = 0							  
2 STORE_FAST 3 ( res )					      	  a = a % mod ;						    	a = a % mod						  
							      	  while ( b ) :						    	while b :						  
3 4 LOAD_FAST 0 ( a )					      	      if ( b & 1 ) :					    	    if b & 1 :						  
6 LOAD_FAST 2 ( mod )					      		  res = ( res + a ) % mod ;			    		res = ( res + a ) % mod				  
8 BINARY_MODULO						      	      a = ( 2 * a ) % mod ;				    	    a = ( 2 * a ) % mod					  
10 STORE_FAST 0 ( a )					      	      b >>= 1 ;						    	    b >>= 1						  
							      	  return res ;						    	return res						  
4 12 SETUP_LOOP 48 ( to 62 )				      								    								  
>> 14 LOAD_FAST 1 ( b )					      								    								  
16 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( b )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_AND						      								    								  
24 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( res )				      								    								  
28 LOAD_FAST 0 ( a )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_FAST 2 ( mod )					      								    								  
34 BINARY_MODULO					      								    								  
36 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 38 LOAD_CONST 3 ( 2 )				      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_FAST 2 ( mod )					      								    								  
46 BINARY_MODULO					      								    								  
48 STORE_FAST 0 ( a )					      								    								  
							      								    								  
8 50 LOAD_FAST 1 ( b )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 INPLACE_RSHIFT					      								    								  
56 STORE_FAST 1 ( b )					      								    								  
58 JUMP_ABSOLUTE 14					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
9 >> 62 LOAD_FAST 3 ( res )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object arraySortedOrNot at 0x7fbac0e8d54 def arraySortedOrNot ( arr , n ) :			    def arraySortedOrNot ( arr , n ) :				  success : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return True					    	    return True						  
4 COMPARE_OP 2 ( == )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
6 POP_JUMP_IF_TRUE 16					      	      if ( arr [ i - 1 ] > arr [ i ] ) :		    	    if arr [ i - 1 ] > arr [ i ] :			  
8 LOAD_FAST 1 ( n )					      		  return False					    		return False					  
10 LOAD_CONST 2 ( 1 )					      	  return True						    	return True						  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 3 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 4 ( > )					      								    								  
54 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 56 LOAD_CONST 4 ( False )				      								    								  
58 RETURN_VALUE						      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_CONST 3 ( True )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
Disassembly of <code object isInorder at 0x7fbac0e8de40, file def isInorder ( arr , n ) :				    def isInorder ( arr , n ) :					  success : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return True					    	    return True						  
4 COMPARE_OP 2 ( == )					      	  for i in range ( 1 , n , 1 ) :			    	for i in range ( 1 , n , 1 ) :				  
6 POP_JUMP_IF_TRUE 16					      	      if ( arr [ i - 1 ] > arr [ i ] ) :		    	    if arr [ i - 1 ] > arr [ i ] :			  
8 LOAD_FAST 1 ( n )					      		  return False					    		return False					  
10 LOAD_CONST 2 ( 1 )					      	  return True						    	return True						  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 3 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 SETUP_LOOP 44 ( to 66 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 CALL_FUNCTION 3					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 28 ( to 64 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 58 LOAD_CONST 4 ( False )				      								    								  
60 RETURN_VALUE						      								    								  
62 JUMP_ABSOLUTE 34					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
7 >> 66 LOAD_CONST 3 ( True )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM
--							      --							    --								  --
Disassembly of <code object findFlips at 0x7fbac0e8de40, file def findFlips ( str , n ) :				    def findFlips ( str , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( ' ' )				      	  last = ' '						    	last = " "						  
2 STORE_FAST 2 ( last )					      	  res = 0						    	res = 0							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 2 ( 0 )					      	      if ( last != str [ i ] ) :			    	    if last != str [ i ] :				  
6 STORE_FAST 3 ( res )					      		  res += 1					    		res += 1					  
							      	      last = str [ i ]					    	    last = str [ i ]					  
4 8 SETUP_LOOP 44 ( to 54 )				      	  return res // 2					    	return res // 2						  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 32 ( to 52 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( last )				      								    								  
24 LOAD_FAST 0 ( str )					      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( res )				      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( str )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_FAST 2 ( last )				      								    								  
50 JUMP_ABSOLUTE 18					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 3 ( res )				      								    								  
56 LOAD_CONST 4 ( 2 )					      								    								  
58 BINARY_FLOOR_DIVIDE					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTED_<unk> INTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	      SORTED_<unk> INTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	    SORTED_<unk> INTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	  SORTED_<unk> INTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST
--							      --							    --								  --
Disassembly of <code object printSorted at 0x7fbac0e8d540, fi def printSorted ( arr , start , end ) :			    def printSorted ( arr , start = end , end = ' ' ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( start )				      	  if start > end :					    	if start > end :					  
2 LOAD_FAST 2 ( end )					      	      return						    	    return						  
4 COMPARE_OP 4 ( > )					      	  printSorted ( arr , start * 2 + 1 , end )		    	printSorted ( arr , start * 2 + 1 , end )		  
6 POP_JUMP_IF_FALSE 12					      	  print ( arr [ start ] , end = " " )			    	print ( arr [ start ] , end = ' ' )			  
							      	  printSorted ( arr , start * 2 + 2 , end )		    	printSorted ( arr , start * 2 + 2 , end )		  
3 8 LOAD_CONST 0 ( None )				      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_GLOBAL 0 ( printSorted )			      								    								  
14 LOAD_FAST 0 ( arr )					      								    								  
16 LOAD_FAST 1 ( start )				      								    								  
18 LOAD_CONST 1 ( 2 )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 LOAD_FAST 2 ( end )					      								    								  
28 CALL_FUNCTION 3					      								    								  
30 POP_TOP						      								    								  
							      								    								  
5 32 LOAD_GLOBAL 1 ( print )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 1 ( start )				      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 48 LOAD_GLOBAL 0 ( printSorted )			      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 1 ( start )				      								    								  
54 LOAD_CONST 1 ( 2 )					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 LOAD_CONST 1 ( 2 )					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_FAST 2 ( end )					      								    								  
64 CALL_FUNCTION 3					      								    								  
66 POP_TOP						      								    								  
68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			      CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			    CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			  CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT
--							      --							    --								  --
Disassembly of <code object check_duck at 0x7fbac0e89d20, fil def check_duck ( num ) :					    def check_duck ( num ) :					  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( num )					    	l = len ( num )						  
2 LOAD_FAST 0 ( num )					      	  count_zero = 0					    	count_zero = 0						  
4 CALL_FUNCTION 1					      	  i = 1							    	i = 1							  
6 STORE_FAST 1 ( l )					      	  while i < l :						    	while i < l :						  
							      	      ch = num [ i ]					    	    ch = num [ i ]					  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( ch == "0" ) :				    	    if ch == '0' :					  
10 STORE_FAST 2 ( count_zero )				      		  count_zero = count_zero + 1			    		count_zero = count_zero + 1			  
							      	      i = i + 1						    	    i = i + 1						  
4 12 LOAD_CONST 2 ( 1 )					      	  return count_zero					    	return count_zero					  
14 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 16 SETUP_LOOP 44 ( to 62 )				      								    								  
>> 18 LOAD_FAST 3 ( i )					      								    								  
20 LOAD_FAST 1 ( l )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( num )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 STORE_FAST 4 ( ch )					      								    								  
							      								    								  
7 34 LOAD_FAST 4 ( ch )					      								    								  
36 LOAD_CONST 3 ( '0' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( count_zero )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 2 ( count_zero )				      								    								  
							      								    								  
9 >> 50 LOAD_FAST 3 ( i )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( i )					      								    								  
58 JUMP_ABSOLUTE 18					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
10 >> 62 LOAD_FAST 2 ( count_zero )			      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIR<unk> SIZE_N_STARTING_K_TH_POSITION   DISTRIBUTING_M_ITEMS_CIR<unk> SIZE_N_STARTING_K_TH_POSITION   DISTRIBUTING_M_ITEMS_CIR<unk> SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIR<unk> SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
Disassembly of <code object lastPosition at 0x7fbac0e8de40, f def lastPosition ( n , m , k ) :				    def lastPosition ( n , m , k ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( m )					      	  if ( m <= n - k + 1 ) :				    	if m <= ( n - k ) + 1 :					  
2 LOAD_FAST 0 ( n )					      	      return m + k - 1					    	    return m + k - 1					  
4 LOAD_FAST 2 ( k )					      	  m = m - ( n - k + 1 )					    	m = m - ( n - k ) + 1					  
6 BINARY_SUBTRACT					      	  if ( m % n == 0 ) :					    	if m % n == 0 :						  
8 LOAD_CONST 1 ( 1 )					      	      return n						    	    return n						  
10 BINARY_ADD						      	  else :						    	else :							  
12 COMPARE_OP 1 ( <= )					      	      return m % n					    	    return m % n					  
14 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 16 LOAD_FAST 1 ( m )					      								    								  
18 LOAD_FAST 2 ( k )					      								    								  
20 BINARY_ADD						      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_FAST 1 ( m )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_FAST 2 ( k )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 BINARY_SUBTRACT					      								    								  
42 STORE_FAST 1 ( m )					      								    								  
							      								    								  
5 44 LOAD_FAST 1 ( m )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 2 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( n )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
8 >> 60 LOAD_FAST 1 ( m )				      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 BINARY_MODULO					      								    								  
66 RETURN_VALUE						      								    								  
68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
Disassembly of <code object fib at 0x7fbac0e89d20, file "<dis def fib ( n , lookup ) :					    def fib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 0 or n == 1 :					    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      lookup [ n ] = n					    	    lookup [ n ] = n					  
4 COMPARE_OP 2 ( == )					      	  if lookup [ n ] is None :				    	if lookup [ n ] is None :				  
6 POP_JUMP_IF_TRUE 16					      	      lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , 	    lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , 
8 LOAD_FAST 0 ( n )					      	  return lookup [ n ]					    	return lookup [ n ]					  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
3 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_FAST 1 ( lookup )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 STORE_SUBSCR						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 1 ( lookup )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 0 ( None )				      								    								  
32 COMPARE_OP 8 ( is )					      								    								  
34 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 36 LOAD_GLOBAL 0 ( fib )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 1 ( lookup )				      								    								  
46 CALL_FUNCTION 2					      								    								  
48 LOAD_GLOBAL 0 ( fib )				      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_CONST 3 ( 2 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_FAST 1 ( lookup )				      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_FAST 1 ( lookup )				      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 STORE_SUBSCR						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 1 ( lookup )				      								    								  
70 LOAD_FAST 0 ( n )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
Disassembly of <code object minTime at 0x7fbac0e8de40, file " def minTime ( arr , n , m ) :				    def minTime ( arr , n , m ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  t = 0							    	t = 0							  
2 STORE_FAST 3 ( t )					      	  while ( 1 ) :						    	while True :						  
							      	      items = 0						    	    items = 0						  
3 4 SETUP_LOOP 62 ( to 68 )				      	      for i in range ( n ) :				    	    for i in range ( n ) :				  
							      		  items += ( t // arr [ i ] )			    		items += t // arr [ i ]				  
4 >> 6 LOAD_CONST 1 ( 0 )				      	      if ( items >= m ) :				    	    if items >= m :					  
8 STORE_FAST 4 ( items )				      		  return t					    		return t					  
							      	      t += 1						    	    t += 1						  
5 10 SETUP_LOOP 32 ( to 44 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 24 LOAD_FAST 4 ( items )				      								    								  
26 LOAD_FAST 3 ( t )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_FLOOR_DIVIDE					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 4 ( items )				      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
7 >> 44 LOAD_FAST 4 ( items )				      								    								  
46 LOAD_FAST 2 ( m )					      								    								  
48 COMPARE_OP 5 ( >= )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
8 52 LOAD_FAST 3 ( t )					      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
9 >> 56 LOAD_FAST 3 ( t )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( t )					      								    								  
64 JUMP_ABSOLUTE 6					      								    								  
66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PR<unk> CT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	      MINIMUM_PR<unk> CT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	    MINIMUM_PR<unk> CT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	  MINIMUM_PR<unk> CT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS
--							      --							    --								  --
Disassembly of <code object minProduct at 0x7fbac0e8d540, fil def minProduct ( arr , n , k ) :				    def minProduct ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( heapq )				      	  heapq.heapify ( arr )					    	heapq.heapify ( arr )					  
2 LOAD_METHOD 1 ( heapify )				      	  count = 0						    	count = 0						  
4 LOAD_FAST 0 ( arr )					      	  ans = 1						    	ans = 1							  
6 CALL_METHOD 1						      	  while ( arr ) and count < k :				    	while arr and count < k :				  
8 POP_TOP						      	      x = heapq.heappop ( arr )				    	    x = heapq.heappop ( arr )				  
							      	      ans = ans * x					    	    ans = ans * x					  
3 10 LOAD_CONST 1 ( 0 )					      	      count = count + 1					    	    count = count + 1					  
12 STORE_FAST 3 ( count )				      	  return ans ;						    	return ans						  
							      								    								  
4 14 LOAD_CONST 2 ( 1 )					      								    								  
16 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
5 18 SETUP_LOOP 42 ( to 62 )				      								    								  
>> 20 LOAD_FAST 0 ( arr )				      								    								  
22 POP_JUMP_IF_FALSE 60					      								    								  
24 LOAD_FAST 3 ( count )				      								    								  
26 LOAD_FAST 2 ( k )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 32 LOAD_GLOBAL 0 ( heapq )				      								    								  
34 LOAD_METHOD 2 ( heappop )				      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 CALL_METHOD 1					      								    								  
40 STORE_FAST 5 ( x )					      								    								  
							      								    								  
7 42 LOAD_FAST 4 ( ans )				      								    								  
44 LOAD_FAST 5 ( x )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( count )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( count )				      								    								  
58 JUMP_ABSOLUTE 20					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
9 >> 62 LOAD_FAST 4 ( ans )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
Disassembly of <code object countDer at 0x7fbac0e8d540, file  def countDer ( n ) :					    def countonly ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 1 ) : return 0				    	if n == 1 : return 0					  
2 LOAD_CONST 1 ( 1 )					      	  if ( n == 0 ) : return 1				    	if n == 0 : return 1					  
4 COMPARE_OP 2 ( == )					      	  if ( n == 2 ) : return 1				    	if n == 2 : return 1					  
6 POP_JUMP_IF_FALSE 12					      	  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  	return ( n - 1 ) * countSPACETOKEN ( n - 1 ) + countSPACE 
8 LOAD_CONST 2 ( 0 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
3 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 0 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
5 >> 36 LOAD_FAST 0 ( n )				      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 LOAD_GLOBAL 0 ( countDer )				      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 LOAD_GLOBAL 0 ( countDer )				      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 3 ( 2 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_MULTIPLY					      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
Disassembly of <code object construc<<unk>> at 0x7fbac0e89d20 def construc<<unk>> ( arr , pair , n ) :			    def construc156 ( arr , pair , n ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( pair )				      	  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] )  	arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] ) - ( pair [ n - 1  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
4 BINARY_SUBSCR						      	      arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		    	    arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		  
6 LOAD_FAST 1 ( pair )					      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 BINARY_SUBSCR					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_FAST 1 ( pair )					      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_SUBSCR					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_FLOOR_DIVIDE					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
3 36 SETUP_LOOP 42 ( to 80 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 2 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 28 ( to 78 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 52 LOAD_FAST 1 ( pair )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 48					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
Disassembly of <code object maximizecube at 0x7fbac0e89d20, f def maximizecube ( l , b , h ) :				    def maximizecube ( l , b , h ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( gcd )				      	  side = gcd ( l , gcd ( b , h ) )			    	side = gcd ( l , gcd ( b , h ) )			  
2 LOAD_FAST 0 ( l )					      	  num = int ( l / side )				    	num = int ( l / side )					  
4 LOAD_GLOBAL 0 ( gcd )					      	  num = int ( num * b / side )				    	num = int ( num * b / side )				  
6 LOAD_FAST 1 ( b )					      	  num = int ( num * h / side )				    	num = int ( num * h / side )				  
8 LOAD_FAST 2 ( h )					      	  print ( side , num )					    	print ( side , num )					  
10 CALL_FUNCTION 2					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 STORE_FAST 3 ( side )				      								    								  
							      								    								  
3 16 LOAD_GLOBAL 1 ( int )				      								    								  
18 LOAD_FAST 0 ( l )					      								    								  
20 LOAD_FAST 3 ( side )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 STORE_FAST 4 ( num )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 1 ( int )				      								    								  
30 LOAD_FAST 4 ( num )					      								    								  
32 LOAD_FAST 1 ( b )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 3 ( side )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 4 ( num )					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 1 ( int )				      								    								  
46 LOAD_FAST 4 ( num )					      								    								  
48 LOAD_FAST 2 ( h )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_FAST 3 ( side )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 STORE_FAST 4 ( num )					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 2 ( print )				      								    								  
62 LOAD_FAST 3 ( side )					      								    								  
64 LOAD_FAST 4 ( num )					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 POP_TOP						      								    								  
70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
Disassembly of <code object swapDiagonal at 0x7fbac0e8d540, f def swapDiagonal ( matrix ) :				    def swapDiagonal ( matrix ) :				  script_not_found : None
2 0 SETUP_LOOP 74 ( to 76 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \   	    matrix [ i ] [ i ] = matrix [ i ] , N - i - 1 ] , mat 
4 LOAD_GLOBAL 1 ( N )					      		  matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]   	    matrix [ i ] [ N - i - 1 ] = matrix [ i ]		  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 62 ( to 74 )				      								    								  
12 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( matrix )				      								    								  
16 LOAD_FAST 1 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_GLOBAL 1 ( N )					      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( matrix )				      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 ROT_TWO						      								    								  
44 LOAD_FAST 0 ( matrix )				      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
54 LOAD_FAST 0 ( matrix )				      								    								  
56 LOAD_FAST 1 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_GLOBAL 1 ( N )					      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_SUBSCR						      								    								  
72 JUMP_ABSOLUTE 10					      								    								  
>> 74 POP_BLOCK						      								    								  
>> 76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	      K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	    K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	  K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED
--							      --							    --								  --
Disassembly of <code object minDiff at 0x7fbac0e8de40, file " def minDiff ( arr , n , k ) :				    def minDiff ( arr , n , k ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 2147483647 )				      	  result = + 2147483647					    	result = ( 2147483647 )					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 3 ( result )				      	  arr.sort ( )						    	arr.sort ( )						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/K_NUMB
							      	  for i in range ( n - k + 1 ) :			    	for i in range ( n - k + 1 ) :				  ERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED.
3 4 LOAD_FAST 0 ( arr )					      	      result = int ( min ( result , arr [ i + k - 1 ] - arr 	    result = int ( min ( result [ arr : i + k - 1 ] , arr py", line 48, in <module>	if f_filled(*paramet
6 LOAD_METHOD 0 ( sort )				      	  return result						    	return result						  ers_set) == f_gold(*parameters_set):	 File "/home
8 CALL_METHOD 0						      								    								  /ubuntu/TransCoder/models/eval/mt_sa_1000/tx8nnsvs
10 POP_TOP						      								    								  dt/eval_scripts/dis_sa-python_sa.test/K_NUMBERS_DI
							      								    								  FFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED.py", l
4 12 SETUP_LOOP 58 ( to 72 )				      								    								  ine 29, in f_filled	  result = int ( min ( resul
14 LOAD_GLOBAL 1 ( range )				      								    								  t [ arr : i + k - 1 ] , arr [ i ] ) ) TypeError: '
16 LOAD_FAST 1 ( n )					      								    								  int' object is not subscriptable
18 LOAD_FAST 2 ( k )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 38 ( to 70 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_GLOBAL 2 ( int )				      								    								  
36 LOAD_GLOBAL 3 ( min )				      								    								  
38 LOAD_FAST 3 ( result )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_FAST 2 ( k )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 STORE_FAST 3 ( result )				      								    								  
68 JUMP_ABSOLUTE 30					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_FAST 3 ( result )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
Disassembly of <code object isDiagonalMatrix at 0x7fbac0e8d8a def isDiagonalMatrix ( mat ) :				    def isDiagonalMatrix ( mat ) :				  script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , N ) :			    	    for j in range ( 0 , N ) :				  
4 LOAD_CONST 1 ( 0 )					      		  if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  		if i != j and mat [ i ] [ j ] != 0 :		  
6 LOAD_GLOBAL 1 ( N )					      		      return False				    		    return False				  
8 CALL_FUNCTION 2					      	  return True						    	return True						  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 52 ( to 66 )				      								    								  
14 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 46 ( to 64 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_GLOBAL 1 ( N )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( i )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 28					      								    								  
40 LOAD_FAST 0 ( mat )					      								    								  
42 LOAD_FAST 1 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 56 LOAD_CONST 2 ( False )				      								    								  
58 RETURN_VALUE						      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 12					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 LOAD_CONST 3 ( True )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	      DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	    DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	  DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST
--							      --							    --								  --
Disassembly of <code object dfs at 0x7fbac0e8de40, file "<dis def dfs ( List , node , arrival ) :			    def dfs ( List , node , arrival ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( node )					    	print ( node )						  
2 LOAD_FAST 1 ( node )					      	  for i in range ( len ( List [ node ] ) ) :		    	for i in range ( len ( List [ node ] ) ) :		  
4 CALL_FUNCTION 1					      	      if ( List [ node ] [ i ] != arrival ) :		    	    if List [ node ] [ i ] != arrival :			  
6 POP_TOP						      		  dfs ( List , List [ node ] [ i ] , node )	    		dfs ( List [ List [ node ] [ i ] , node )	  
							      								    								  
3 8 SETUP_LOOP 60 ( to 70 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_GLOBAL 2 ( len )				      								    								  
14 LOAD_FAST 0 ( List )					      								    								  
16 LOAD_FAST 1 ( node )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 40 ( to 68 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 0 ( List )				      								    								  
32 LOAD_FAST 1 ( node )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( arrival )				      								    								  
42 COMPARE_OP 3 ( != )					      								    								  
44 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 3 ( dfs )				      								    								  
48 LOAD_FAST 0 ( List )					      								    								  
50 LOAD_FAST 0 ( List )					      								    								  
52 LOAD_FAST 1 ( node )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( node )					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 POP_TOP						      								    								  
66 JUMP_ABSOLUTE 26					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
Disassembly of <code object decimalToBinary at 0x7fbac0e8de40 def decimalToBinary ( N ) :				    def decimalToBinary ( N ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  B_Number = 0						    	B_Number = 0						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 1 ( B_Number )				      	  cnt = 0						    	cnt = 0							  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/PROGRA
							      	  while ( N != 0 ) :					    	while N != 0 :						  M_DECIMAL_BINARY_CONVERSION_2.py", line 56, in <mo
3 4 LOAD_CONST 1 ( 0 )					      	      rem = N % 2					    	    rem = N % 2						  dule>	    if f_filled(*parameters_set) == f_gold(*
6 STORE_FAST 2 ( cnt )					      	      c = pow ( 10 , cnt )				    	    c = pow ( 10 , cnt )				  parameters_set):   File "/home/ubuntu/TransCoder/m
							      	      B_Number += rem * c				    	    B_Number += rem * c					  odels/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_
4 8 SETUP_LOOP 58 ( to 68 )				      	      N //= 2						    	    N += 2						  sa-python_sa.test/PROGRAM_DECIMAL_BINARY_CONVERSIO
>> 10 LOAD_FAST 0 ( N )					      	      cnt += 1						    	    cnt += 1						  N_2.py", line 34, in f_filled	    c = pow ( 10 , c
12 LOAD_CONST 1 ( 0 )					      	  return B_Number					    	return B_Number						  nt ) OverflowError: math range error
14 COMPARE_OP 3 ( != )					      								    								  
16 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
5 18 LOAD_FAST 0 ( N )					      								    								  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_MODULO					      								    								  
24 STORE_FAST 3 ( rem )					      								    								  
							      								    								  
6 26 LOAD_GLOBAL 0 ( pow )				      								    								  
28 LOAD_CONST 3 ( 10 )					      								    								  
30 LOAD_FAST 2 ( cnt )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 STORE_FAST 4 ( c )					      								    								  
							      								    								  
7 36 LOAD_FAST 1 ( B_Number )				      								    								  
38 LOAD_FAST 3 ( rem )					      								    								  
40 LOAD_FAST 4 ( c )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 1 ( B_Number )				      								    								  
							      								    								  
8 48 LOAD_FAST 0 ( N )					      								    								  
50 LOAD_CONST 2 ( 2 )					      								    								  
52 INPLACE_FLOOR_DIVIDE					      								    								  
54 STORE_FAST 0 ( N )					      								    								  
							      								    								  
9 56 LOAD_FAST 2 ( cnt )				      								    								  
58 LOAD_CONST 4 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( cnt )					      								    								  
64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
10 >> 68 LOAD_FAST 1 ( B_Number )			      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
Disassembly of <code object isPossibleTriangle at 0x7fbac0e8b def isPossibleTriangle ( arr , N ) :			    def isPossibleTriangle ( arr , N ) :			  success : identical to gold
2 0 LOAD_FAST 1 ( N )					      	  if N < 3 :						    	if N < 3 :						  
2 LOAD_CONST 1 ( 3 )					      	      return False					    	    return False					  
4 COMPARE_OP 0 ( < )					      	  arr.sort ( )						    	arr.sort ( )						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( N - 2 ) :				    	for i in range ( N - 2 ) :				  
							      	      if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	    	    if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	  
3 8 LOAD_CONST 2 ( False )				      		  return True					    		return True					  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( arr )				      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 SETUP_LOOP 56 ( to 78 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 1 ( N )					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 40 ( to 76 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_CONST 4 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_CONST 3 ( 2 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
7 70 LOAD_CONST 5 ( True )				      								    								  
72 RETURN_VALUE						      								    								  
74 JUMP_ABSOLUTE 34					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1
--							      --							    --								  --
Disassembly of <code object isSubSequence at 0x7fbac0e8bc90,  def isSubSequence ( str1 , str2 , m , n ) :		    def isSubSequence ( str1 , str2 , m , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  j = 0							    	j = 0							  
2 STORE_FAST 4 ( j )					      	  i = 0							    	i = 0							  
							      	  while j < m and i < n :				    	while j < m and i < n :					  
3 4 LOAD_CONST 1 ( 0 )					      	      if str1 [ j ] == str2 [ i ] :			    	    if str1 [ j ] == str2 [ i ] :			  
6 STORE_FAST 5 ( i )					      		  j = j + 1					    		j = j + 1					  
							      	      i = i + 1						    	    i = i + 1						  
4 8 SETUP_LOOP 52 ( to 62 )				      	  return j == m						    return j == m						  
>> 10 LOAD_FAST 4 ( j )					      								    								  
12 LOAD_FAST 2 ( m )					      								    								  
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 60					      								    								  
18 LOAD_FAST 5 ( i )					      								    								  
20 LOAD_FAST 3 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( str1 )				      								    								  
28 LOAD_FAST 4 ( j )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( str2 )					      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
6 42 LOAD_FAST 4 ( j )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 >> 50 LOAD_FAST 5 ( i )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 5 ( i )					      								    								  
58 JUMP_ABSOLUTE 10					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
8 >> 62 LOAD_FAST 4 ( j )				      								    								  
64 LOAD_FAST 2 ( m )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		      ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		    ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		  ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION
--							      --							    --								  --
Disassembly of <code object concatenate at 0x7fbac0e89d20, fi def concatenate ( a , b , c , n1 , n2 ) :			    def concatenate ( a , b , c , n1 , n2 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  i = - 1						    	i = - 1							  
2 STORE_FAST 5 ( i )					      	  for i in range ( n1 ) :				    	for i in range ( n1 ) :					  
							      	      c [ i ] = a [ i ]					    	    c [ i ] = a [ i ]					  
3 4 SETUP_LOOP 28 ( to 34 )				      	  for j in range ( n2 ) :				    	for j in range ( n2 ) :					  
6 LOAD_GLOBAL 0 ( range )				      	      c [ i ] = b [ j ]					    	    c [ i ] = b [ j ]					  
8 LOAD_FAST 3 ( n1 )					      	      i += 1						    	    i += 1						  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 16 ( to 32 )				      								    								  
16 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( a )					      								    								  
20 LOAD_FAST 5 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 2 ( c )					      								    								  
26 LOAD_FAST 5 ( i )					      								    								  
28 STORE_SUBSCR						      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 SETUP_LOOP 36 ( to 72 )				      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_FAST 4 ( n2 )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 24 ( to 70 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 1 ( b )					      								    								  
50 LOAD_FAST 6 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 2 ( c )					      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
7 60 LOAD_FAST 5 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 5 ( i )					      								    								  
68 JUMP_ABSOLUTE 44					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 LOAD_CONST 0 ( None )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT
--							      --							    --								  --
Disassembly of <code object countNegative at 0x7fbac0e89d20,  def countNegative ( M , n , m ) :				    def countNegative ( M , n , m ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 3 ( count )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
3 4 SETUP_LOOP 62 ( to 68 )				      		  if M [ i ] [ j ] < 0 :			    		if M [ i ] [ j ] < 0 :				  
6 LOAD_GLOBAL 0 ( range )				      		      count += 1				    		    count += 1					  
8 LOAD_FAST 1 ( n )					      		  else :					    		else :						  
10 CALL_FUNCTION 1					      		      break					    		    break					  
12 GET_ITER						      	  return count						    	return count						  
>> 14 FOR_ITER 50 ( to 66 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 44 ( to 64 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 2 ( m )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( M )					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 5 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( count )				      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 3 ( count )				      								    								  
56 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 58 BREAK_LOOP					      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 3 ( count )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		      COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		    COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		  COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME
--							      --							    --								  --
Disassembly of <code object countFibs at 0x7fbac0e8bc90, file def countFibs ( low , high ) :				    def countFibs ( low , high ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( ( 0 , 1 , 1 ) )			      	  f1 , f2 , f3 = 0 , 1 , 1				    	f1 , f2 , f3 = 0 , 1 , 1				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 UNPACK_SEQUENCE 3					      	  result = 0						    	result = 0						  _sa.test/COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_T
4 STORE_FAST 2 ( f1 )					      	  while ( f1 <= high ) :				    	while f1 <= high :					  IME.py", line 38     return result	 ^ SyntaxErr
6 STORE_FAST 3 ( f2 )					      	      if ( f1 >= low ) :				    	    if f1 >= low :					  or: 'return' outside function
8 STORE_FAST 4 ( f3 )					      		  result += 1					    		result += 1					  
							      	      f1 = f2						    	    f1 = f2						  
3 10 LOAD_CONST 2 ( 0 )					      	      f2 = f3						    	    f2 = f3 + f2					  
12 STORE_FAST 5 ( result )				      	      f3 = f1 + f2					    	    f3 = f1 + f2					  
							      	  return result						    return result						  
4 14 SETUP_LOOP 44 ( to 60 )				      								    								  
>> 16 LOAD_FAST 2 ( f1 )				      								    								  
18 LOAD_FAST 1 ( high )					      								    								  
20 COMPARE_OP 1 ( <= )					      								    								  
22 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( f1 )					      								    								  
26 LOAD_FAST 0 ( low )					      								    								  
28 COMPARE_OP 5 ( >= )					      								    								  
30 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 32 LOAD_FAST 5 ( result )				      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 5 ( result )				      								    								  
							      								    								  
7 >> 40 LOAD_FAST 3 ( f2 )				      								    								  
42 STORE_FAST 2 ( f1 )					      								    								  
							      								    								  
8 44 LOAD_FAST 4 ( f3 )					      								    								  
46 STORE_FAST 3 ( f2 )					      								    								  
							      								    								  
9 48 LOAD_FAST 2 ( f1 )					      								    								  
50 LOAD_FAST 3 ( f2 )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 4 ( f3 )					      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
10 >> 60 LOAD_FAST 5 ( result )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object maxProduct at 0x7fbac0e89d20, fil def maxProduct ( arr , n ) :				    def maxProduct ( arr , n ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if n < 3 :						    	if n < 3 :						  
2 LOAD_CONST 1 ( 3 )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 0 ( < )					      	  arr.sort ( )						    	arr.sort ( )						  
6 POP_JUMP_IF_FALSE 12					      	  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr  	return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] * arr  
							      								    								  
3 8 LOAD_CONST 2 ( - 1 )				      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( arr )				      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 LOAD_GLOBAL 1 ( max )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_CONST 3 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_CONST 4 ( 1 )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 4 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_CONST 4 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 LOAD_CONST 5 ( 2 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 LOAD_CONST 1 ( 3 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 CALL_FUNCTION 2					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
Disassembly of <code object findMod at 0x7fbac0e8de40, file " def findMod ( a , b ) :					    def findMod ( a , b ) :					  success : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a < 0 ) :					    	if a < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      a = - a						    	    a = - a						  
4 COMPARE_OP 0 ( < )					      	  if ( b < 0 ) :					    	if b < 0 :						  
6 POP_JUMP_IF_FALSE 14					      	      b = - b						    	    b = - b						  
							      	  mod = a						    	mod = a							  
3 8 LOAD_FAST 0 ( a )					      	  while ( mod >= b ) :					    	while mod >= b :					  
10 UNARY_NEGATIVE					      	      mod = mod - b					    	    mod = mod - b					  
12 STORE_FAST 0 ( a )					      	  if ( a < 0 ) :					    	if a < 0 :						  
							      	      return - mod					    	    return - mod					  
4 >> 14 LOAD_FAST 1 ( b )				      	  return mod						    	return mod						  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 0 ( < )					      								    								  
20 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( b )					      								    								  
24 UNARY_NEGATIVE					      								    								  
26 STORE_FAST 1 ( b )					      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( a )				      								    								  
30 STORE_FAST 2 ( mod )					      								    								  
							      								    								  
7 32 SETUP_LOOP 20 ( to 54 )				      								    								  
>> 34 LOAD_FAST 2 ( mod )				      								    								  
36 LOAD_FAST 1 ( b )					      								    								  
38 COMPARE_OP 5 ( >= )					      								    								  
40 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( mod )				      								    								  
44 LOAD_FAST 1 ( b )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 2 ( mod )					      								    								  
50 JUMP_ABSOLUTE 34					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
9 >> 54 LOAD_FAST 0 ( a )				      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
10 62 LOAD_FAST 2 ( mod )				      								    								  
64 UNARY_NEGATIVE					      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
11 >> 68 LOAD_FAST 2 ( mod )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_<unk> VAL_FROM_ARRAY_WHEN_<unk> VAL_TIME_WAITING_TIME MAXIMUM_<unk> VAL_FROM_ARRAY_WHEN_<unk> VAL_TIME_WAITING_TIME MAXIMUM_<unk> VAL_FROM_ARRAY_WHEN_<unk> VAL_TIME_WAITING_TIME MAXIMUM_<unk> VAL_FROM_ARRAY_WHEN_<unk> VAL_TIME_WAITING_TIME
--							      --							    --								  --
Disassembly of <code object maxRemoval at 0x7fbac0e8de40, fil def maxRemoval ( arr , n ) :				    def maxRemoval ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  cummulative_sum = 0					    	cummulative_sum = 0					  
							      	  arr.sort ( )						    	arr.sort ( )						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 3 ( cummulative_sum )			      	      if arr [ i ] >= cummulative_sum :			    	    if arr [ i ] >= cummulative_sum :			  
							      		  count += 1					    		count += 1					  
4 8 LOAD_FAST 0 ( arr )					      		  cummulative_sum += arr [ i ]			    		cummulative_sum += arr [ i ]			  
10 LOAD_METHOD 0 ( sort )				      	  return count						    	return count						  
12 CALL_METHOD 0					      								    								  
14 POP_TOP						      								    								  
							      								    								  
5 16 SETUP_LOOP 48 ( to 66 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 36 ( to 64 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( cummulative_sum )			      								    								  
38 COMPARE_OP 5 ( >= )					      								    								  
40 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
7 42 LOAD_FAST 2 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 2 ( count )				      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( cummulative_sum )			      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( cummulative_sum )			      								    								  
62 JUMP_ABSOLUTE 26					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_FAST 2 ( count )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PADOVAN_SEQUENCE					      PADOVAN_SEQUENCE						    PADOVAN_SEQUENCE						  PADOVAN_SEQUENCE
--							      --							    --								  --
Disassembly of <code object pad at 0x7fbac0e8de40, file "<dis def pad ( n ) :						    def pad ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( ( 1 , 1 , 1 , 1 ) )			      	  pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	    	pPrevPrev , pPrev , pPrev , pNext = 1 , 1 , 1		  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 UNPACK_SEQUENCE 4					      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 , n + 1 ) :				  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/PADOVA
4 STORE_FAST 1 ( pPrevPrev )				      	      pNext = pPrevPrev + pPrev				    	    pNext = pPrevPrev + pPrev				  N_SEQUENCE.py", line 52, in <module>	   if f_fill
6 STORE_FAST 2 ( pPrev )				      	      pPrevPrev = pPrev					    	    pPrevPrev = pPrev					  ed(*parameters_set) == f_gold(*parameters_set):
8 STORE_FAST 3 ( pCurr )				      	      pPrev = pCurr					    	    pPrev = pCurr					  File "/home/ubuntu/TransCoder/models/eval/mt_sa_10
10 STORE_FAST 4 ( pNext )				      	      pCurr = pNext					    	    pCurr = pNext					  00/tx8nnsvsdt/eval_scripts/dis_sa-python_sa.test/P
							      	  return pNext ;					    	return pNext						  ADOVAN_SEQUENCE.py", line 28, in f_filled	pPre
3 12 SETUP_LOOP 42 ( to 56 )				      								    								  vPrev , pPrev , pPrev , pNext = 1 , 1 , 1 ValueErr
14 LOAD_GLOBAL 0 ( range )				      								    								  or: not enough values to unpack (expected 4, got 3
16 LOAD_CONST 2 ( 3 )					      								    								  )
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 24 ( to 54 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( pPrevPrev )				      								    								  
34 LOAD_FAST 2 ( pPrev )				      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 4 ( pNext )				      								    								  
							      								    								  
5 40 LOAD_FAST 2 ( pPrev )				      								    								  
42 STORE_FAST 1 ( pPrevPrev )				      								    								  
							      								    								  
6 44 LOAD_FAST 3 ( pCurr )				      								    								  
46 STORE_FAST 2 ( pPrev )				      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( pNext )				      								    								  
50 STORE_FAST 3 ( pCurr )				      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 4 ( pNext )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
Disassembly of <code object eulerian at 0x7fbac0e8d540, file  def eulerian ( n , m ) :					    def eulerian ( n , m ) :					  script_not_found : None
2 0 LOAD_FAST 1 ( m )					      	  if ( m >= n or n == 0 ) :				    	if m >= n or n == 0 :					  
2 LOAD_FAST 0 ( n )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 5 ( >= )					      	  if ( m == 0 ) :					    	if m == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	      return 1 ;					    	    return 1						  
8 LOAD_FAST 0 ( n )					      	  return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 	return ( n - m ) * eulerian ( n - 1 , m - 1 ) ) * ( m + 1 
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( m )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 2 ( 1 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 0 ( n )				      								    								  
34 LOAD_FAST 1 ( m )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_GLOBAL 0 ( eulerian )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_FAST 1 ( m )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_FAST 1 ( m )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_GLOBAL 0 ( eulerian )				      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 1 ( m )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 BINARY_ADD						      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
Disassembly of <code object numofsubset at 0x7fbac0e8de40, fi def numofsubset ( arr , n ) :				    def numofsubset ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sorted )				      	  x = sorted ( arr )					    	x = sorted ( arr )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( arr )					      	  count = 1						    	count = 1						  _sa.test/COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  _CONSECUTIVE_NUMBERS.py", line 32	return count
6 STORE_FAST 2 ( x )					      	      if ( x [ i ] + 1 != x [ i + 1 ] ) :		    	    if x [ i ] + 1 != x [ i + 1 ] :			       ^ SyntaxError: 'return' outside function
							      		  count = count + 1				    		count = count + 1				  
3 8 LOAD_CONST 1 ( 1 )					      	  return count						    return count						  
10 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 12 SETUP_LOOP 54 ( to 68 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 2 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( x )					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 2 ( x )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
6 56 LOAD_FAST 3 ( count )				      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 3 ( count )				      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 3 ( count )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
Disassembly of <code object isPalindrome at 0x7fbac0e8bc90, f def isPalindrome ( string ) :				    def isPalindrome ( string ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  l = 0							    	l = 0							  
2 STORE_FAST 1 ( l )					      	  h = len ( string ) - 1				    	h = len ( string ) - 1					  
							      	  while h > l :						    	while h > l :						  
3 4 LOAD_GLOBAL 0 ( len )				      	      l += 1						    	    l += 1						  
6 LOAD_FAST 0 ( string )				      	      h -= 1						    	    h -= 1						  
8 CALL_FUNCTION 1					      	      if string [ l - 1 ] != string [ h + 1 ] :		    	    if string [ l - 1 ] != string [ h + 1 ] :		  
10 LOAD_CONST 2 ( 1 )					      		  return False					    		return False					  
12 BINARY_SUBTRACT					      	  return True						    	return True						  
14 STORE_FAST 2 ( h )					      								    								  
							      								    								  
4 16 SETUP_LOOP 56 ( to 74 )				      								    								  
>> 18 LOAD_FAST 2 ( h )					      								    								  
20 LOAD_FAST 1 ( l )					      								    								  
22 COMPARE_OP 4 ( > )					      								    								  
24 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
5 26 LOAD_FAST 1 ( l )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( l )					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( h )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_SUBTRACT					      								    								  
40 STORE_FAST 2 ( h )					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( string )				      								    								  
44 LOAD_FAST 1 ( l )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( string )				      								    								  
54 LOAD_FAST 2 ( h )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 3 ( != )					      								    								  
64 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
8 66 LOAD_CONST 3 ( False )				      								    								  
68 RETURN_VALUE						      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_CONST 4 ( True )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION			      PROGRAM_BINARY_DECIMAL_CONVERSION				    PROGRAM_BINARY_DECIMAL_CONVERSION				  PROGRAM_BINARY_DECIMAL_CONVERSION
--							      --							    --								  --
Disassembly of <code object binaryToDecimal at 0x7fbac0e89d20 def binaryToDecimal ( n ) :				    def binaryToDecimal ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  num = n ;						    	num = n							  
2 STORE_FAST 1 ( num )					      	  dec_value = 0 ;					    	dec_value = 0						  
							      	  base = 1 ;						    	base = 1						  
3 4 LOAD_CONST 1 ( 0 )					      	  temp = num ;						    	temp = num						  
6 STORE_FAST 2 ( dec_value )				      	  while ( temp ) :					    	while temp :						  
							      	      last_digit = temp % 10 ;				    	    last_digit = temp % 10				  
4 8 LOAD_CONST 2 ( 1 )					      	      temp = int ( temp / 10 ) ;			    	    temp = int ( temp / 10 )				  
10 STORE_FAST 3 ( base )				      	      dec_value += last_digit * base ;			    	    dec_value += last_digit * base			  
							      	      base = base * 2 ;					    	    base = base * 2					  
5 12 LOAD_FAST 1 ( num )				      	  return dec_value ;					    	return dec_value					  
14 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
6 16 SETUP_LOOP 48 ( to 66 )				      								    								  
>> 18 LOAD_FAST 4 ( temp )				      								    								  
20 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 22 LOAD_FAST 4 ( temp )				      								    								  
24 LOAD_CONST 3 ( 10 )					      								    								  
26 BINARY_MODULO					      								    								  
28 STORE_FAST 5 ( last_digit )				      								    								  
							      								    								  
8 30 LOAD_GLOBAL 0 ( int )				      								    								  
32 LOAD_FAST 4 ( temp )					      								    								  
34 LOAD_CONST 3 ( 10 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
9 42 LOAD_FAST 2 ( dec_value )				      								    								  
44 LOAD_FAST 5 ( last_digit )				      								    								  
46 LOAD_FAST 3 ( base )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 2 ( dec_value )				      								    								  
							      								    								  
10 54 LOAD_FAST 3 ( base )				      								    								  
56 LOAD_CONST 4 ( 2 )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 STORE_FAST 3 ( base )				      								    								  
62 JUMP_ABSOLUTE 18					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
11 >> 66 LOAD_FAST 2 ( dec_value )			      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac0e8de40, f def binarySearch ( arr , l , r , x ) :			    def binarySearch ( arr , l , r ) :				  script_not_found : None
2 0 SETUP_LOOP 74 ( to 76 )				      	  while l <= r :					    	while l <= r :						  
>> 2 LOAD_FAST 1 ( l )					      	      mid = l + ( r - l ) // 2 ;			    	    mid = ( l + ( r - l ) ) // 2			  
4 LOAD_FAST 2 ( r )					      	      if arr [ mid ] == x :				    	    if arr [ mid ] == x :				  
6 COMPARE_OP 1 ( <= )					      		  return mid					    		return mid					  
8 POP_JUMP_IF_FALSE 74					      	      elif arr [ mid ] < x :				    	    if arr [ mid ] < x :				  
							      		  l = mid + 1					    		l = mid + 1					  
3 10 LOAD_FAST 1 ( l )					      	      else :						    	    else :						  
12 LOAD_FAST 2 ( r )					      		  r = mid - 1					    		r = mid - 1					  
14 LOAD_FAST 1 ( l )					      	  return - 1						    	return - 1						  
16 BINARY_SUBTRACT					      								    								  
18 LOAD_CONST 1 ( 2 )					      								    								  
20 BINARY_FLOOR_DIVIDE					      								    								  
22 BINARY_ADD						      								    								  
24 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( arr )				      								    								  
28 LOAD_FAST 4 ( mid )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 3 ( x )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
5 38 LOAD_FAST 4 ( mid )				      								    								  
40 RETURN_VALUE						      								    								  
							      								    								  
6 >> 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( mid )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 3 ( x )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 54 LOAD_FAST 4 ( mid )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 1 ( l )					      								    								  
62 JUMP_ABSOLUTE 2					      								    								  
							      								    								  
9 >> 64 LOAD_FAST 4 ( mid )				      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_FAST 2 ( r )					      								    								  
72 JUMP_ABSOLUTE 2					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
10 >> 76 LOAD_CONST 3 ( - 1 )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  n -= 1						    	n -= 1							  
2 LOAD_CONST 1 ( 1 )					      	  n |= n >> 1						    	n |= ( n >> 1 )						  
4 INPLACE_SUBTRACT					      	  n |= n >> 2						    	n |= ( n >> 2 )						  
6 STORE_FAST 0 ( n )					      	  n |= n >> 4						    	n |= ( n >> 4 )						  
							      	  n |= n >> 8						    	n |= ( n >> 8 )						  
3 8 LOAD_FAST 0 ( n )					      	  n |= n >> 16						    	n |= n | 16						  
10 LOAD_FAST 0 ( n )					      	  n += 1						    	n += 1							  
12 LOAD_CONST 1 ( 1 )					      	  return n						    	return n						  
14 BINARY_RSHIFT					      								    								  
16 INPLACE_OR						      								    								  
18 STORE_FAST 0 ( n )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_RSHIFT					      								    								  
28 INPLACE_OR						      								    								  
30 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 3 ( 4 )					      								    								  
38 BINARY_RSHIFT					      								    								  
40 INPLACE_OR						      								    								  
42 STORE_FAST 0 ( n )					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 4 ( 8 )					      								    								  
50 BINARY_RSHIFT					      								    								  
52 INPLACE_OR						      								    								  
54 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_CONST 5 ( 16 )					      								    								  
62 BINARY_RSHIFT					      								    								  
64 INPLACE_OR						      								    								  
66 STORE_FAST 0 ( n )					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 0 ( n )					      								    								  
							      								    								  
9 76 LOAD_FAST 0 ( n )					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A
--							      --							    --								  --
Disassembly of <code object countSeq at 0x7fbac0e8d540, file  def countSeq ( n ) :					    def countSeq ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  nCr = 1						    	nCr = 1							  
2 STORE_FAST 1 ( nCr )					      	  res = 1						    	res = 1							  
							      	  for r in range ( 1 , n + 1 ) :			    	for r in range ( 1 , n + 1 ) :				  
3 4 LOAD_CONST 1 ( 1 )					      	      nCr = ( nCr * ( n + 1 - r ) ) / r ;		    	    nCr = ( nCr * ( n + 1 - r ) ) / r			  
6 STORE_FAST 2 ( res )					      	      res += nCr * nCr ;				    	    res += nCr * nCr					  
							      	  return res ;						    	return res						  
4 8 SETUP_LOOP 54 ( to 64 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 3 ( r )					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( nCr )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_FAST 3 ( r )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 3 ( r )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 STORE_FAST 1 ( nCr )					      								    								  
							      								    								  
6 48 LOAD_FAST 2 ( res )				      								    								  
50 LOAD_FAST 1 ( nCr )					      								    								  
52 LOAD_FAST 1 ( nCr )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( res )					      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 2 ( res )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
Disassembly of <code object minLexRotation at 0x7fbac0e8bc90, def minLexRotation ( str_ ) :				    def minLexRotation ( str_ ) :				  success : identical to gold
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str_ )					    	n = len ( str_ )					  
2 LOAD_FAST 0 ( str_ )					      	  arr = [ 0 ] * n					    	arr = [ 0 ] * n						  
4 CALL_FUNCTION 1					      	  concat = str_ + str_					    	concat = str_ + str_					  
6 STORE_FAST 1 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      arr [ i ] = concat [ i : n + i ]			    	    arr [ i ] = concat [ i : n + i ]			  
3 8 LOAD_CONST 1 ( 0 )					      	  arr.sort ( )						    	arr.sort ( )						  
10 BUILD_LIST 1						      	  return arr [ 0 ]					    	return arr [ 0 ]					  
12 LOAD_FAST 1 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 STORE_FAST 2 ( arr )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( str_ )				      								    								  
20 LOAD_FAST 0 ( str_ )					      								    								  
22 BINARY_ADD						      								    								  
24 STORE_FAST 3 ( concat )				      								    								  
							      								    								  
5 26 SETUP_LOOP 36 ( to 64 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 24 ( to 62 )				      								    								  
38 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( concat )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_ADD						      								    								  
50 BUILD_SLICE 2					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 2 ( arr )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 36					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 2 ( arr )				      								    								  
66 LOAD_METHOD 2 ( sort )				      								    								  
68 CALL_METHOD 0					      								    								  
70 POP_TOP						      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( arr )				      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
Disassembly of <code object splitArr at 0x7fbac0e8de40, file  def splitArr ( arr , n , k ) :				    def splitArr ( arr , n , k ) :				  success : identical to gold
2 0 SETUP_LOOP 78 ( to 80 )				      	  for i in range ( 0 , k ) :				    	for i in range ( 0 , k ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      x = arr [ 0 ]					    	    x = arr [ 0 ]					  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n - 1 ) :			    	    for j in range ( 0 , n - 1 ) :			  
6 LOAD_FAST 2 ( k )					      		  arr [ j ] = arr [ j + 1 ]			    		arr [ j ] = arr [ j + 1 ]			  
8 CALL_FUNCTION 2					      	      arr [ n - 1 ] = x					    	    arr [ n - 1 ] = x					  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 64 ( to 78 )				      								    								  
14 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arr )				      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 STORE_FAST 4 ( x )					      								    								  
							      								    								  
4 24 SETUP_LOOP 38 ( to 64 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 20 ( to 62 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 40					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 4 ( x )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 12					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM				      COUNT_PAIRS_WITH_GIVEN_SUM				    COUNT_PAIRS_WITH_GIVEN_SUM					  COUNT_PAIRS_WITH_GIVEN_SUM
--							      --							    --								  --
Disassembly of <code object getPairsCount at 0x7fbac0e8d540,  def getPairsCount ( arr , n , sum ) :			    def getPairsCount ( arr , n , sum = 2 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 3 ( count )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 70 ( to 76 )				      		  if arr [ i ] + arr [ j ] == sum :		    		if arr [ i ] + arr [ j ] == sum :		  
6 LOAD_GLOBAL 0 ( range )				      		      count += 1				    		    count += 1					  
8 LOAD_CONST 1 ( 0 )					      	  return count						    	return count						  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 56 ( to 74 )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 50 ( to 72 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 32 ( to 70 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 5 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( sum )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 60 LOAD_FAST 3 ( count )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 3 ( count )				      								    								  
68 JUMP_ABSOLUTE 36					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 JUMP_ABSOLUTE 16					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
7 >> 76 LOAD_FAST 3 ( count )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
Disassembly of <code object transpose at 0x7fbac0e89d20, file def transpose ( A ) :					    def transpose ( A ) :					  script_not_found : None
2 0 SETUP_LOOP 82 ( to 84 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i + 1 , N ) :			    	    for j in range ( i + 1 , N ) :			  
4 LOAD_GLOBAL 1 ( N )					      		  A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A 		A [ i ] [ j ] = A [ j ] [ i ] , A [ i ] [ j ]	  
6 CALL_FUNCTION 1					      								    		A [ j ] [ i ] = A [ j ] [ i ]			  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 70 ( to 82 )				      								    								  
12 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 64 ( to 80 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( i )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 LOAD_GLOBAL 1 ( N )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 46 ( to 78 )				      								    								  
32 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 34 LOAD_FAST 0 ( A )					      								    								  
36 LOAD_FAST 2 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( A )					      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 2 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 ROT_TWO						      								    								  
56 LOAD_FAST 0 ( A )					      								    								  
58 LOAD_FAST 1 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( j )					      								    								  
64 STORE_SUBSCR						      								    								  
66 LOAD_FAST 0 ( A )					      								    								  
68 LOAD_FAST 2 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 1 ( i )					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 30					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 JUMP_ABSOLUTE 10					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1
--							      --							    --								  --
Disassembly of <code object difference at 0x7fbac0e8d540, fil def difference ( arr , n ) :				    def difference ( arr , n ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  d1 = 0						    	d1 = 0							  
2 STORE_FAST 2 ( d1 )					      	  d2 = 0						    	d2 = 0							  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      d1 = d1 + arr [ i ] [ i ]				    	    d1 = d1 + arr [ i ] [ i ]				  
6 STORE_FAST 3 ( d2 )					      	      d2 = d2 + arr [ i ] [ n - i - 1 ]			    	    d2 = d2 + arr [ i ] [ n - i - 1 ]			  
							      	  return abs ( d1 - d2 )				    	return abs ( d1 - d2 )					  
4 8 SETUP_LOOP 58 ( to 68 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 44 ( to 66 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( d1 )					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 2 ( d1 )					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( d2 )					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 3 ( d2 )					      								    								  
64 JUMP_ABSOLUTE 20					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 1 ( abs )				      								    								  
70 LOAD_FAST 2 ( d1 )					      								    								  
72 LOAD_FAST 3 ( d2 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_<unk> AL_DECIMAL_CONVERSION			      PROGRAM_<unk> AL_DECIMAL_CONVERSION			    PROGRAM_<unk> AL_DECIMAL_CONVERSION				  PROGRAM_<unk> AL_DECIMAL_CONVERSION
--							      --							    --								  --
Disassembly of <code object octalToDecimal at 0x7fbac0e8de40, def octalToDecimal ( n ) :				    def octalToDecimal ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  num = n ;						    	num = n							  
2 STORE_FAST 1 ( num )					      	  dec_value = 0 ;					    	dec_value = 0						  
							      	  base = 1 ;						    	base = 1						  
3 4 LOAD_CONST 1 ( 0 )					      	  temp = num ;						    	temp = num						  
6 STORE_FAST 2 ( dec_value )				      	  while ( temp ) :					    	while temp :						  
							      	      last_digit = temp % 10 ;				    	    last_digit = temp % 10				  
4 8 LOAD_CONST 2 ( 1 )					      	      temp = int ( temp / 10 ) ;			    	    temp = int ( temp / 10 )				  
10 STORE_FAST 3 ( base )				      	      dec_value += last_digit * base ;			    	    dec_value += last_digit * base			  
							      	      base = base * 8 ;					    	    base = base * 8					  
5 12 LOAD_FAST 1 ( num )				      	  return dec_value ;					    	return dec_value					  
14 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
6 16 SETUP_LOOP 48 ( to 66 )				      								    								  
>> 18 LOAD_FAST 4 ( temp )				      								    								  
20 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 22 LOAD_FAST 4 ( temp )				      								    								  
24 LOAD_CONST 3 ( 10 )					      								    								  
26 BINARY_MODULO					      								    								  
28 STORE_FAST 5 ( last_digit )				      								    								  
							      								    								  
8 30 LOAD_GLOBAL 0 ( int )				      								    								  
32 LOAD_FAST 4 ( temp )					      								    								  
34 LOAD_CONST 3 ( 10 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
9 42 LOAD_FAST 2 ( dec_value )				      								    								  
44 LOAD_FAST 5 ( last_digit )				      								    								  
46 LOAD_FAST 3 ( base )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 2 ( dec_value )				      								    								  
							      								    								  
10 54 LOAD_FAST 3 ( base )				      								    								  
56 LOAD_CONST 4 ( 8 )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 STORE_FAST 3 ( base )				      								    								  
62 JUMP_ABSOLUTE 18					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
11 >> 66 LOAD_FAST 2 ( dec_value )			      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		      FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		    FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		  FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object maxSubarrayXOR at 0x7fbac0e8de40, def maxSubarrayXOR ( arr , n ) :				    def maxSubarrayXOR ( arr , n ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( - 2147483648 )			      	  ans = - 2147483648					    	ans = - 2147483648					  
2 STORE_FAST 2 ( ans )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      curr_xor = 0					    	    curr_xor = 0					  
3 4 SETUP_LOOP 62 ( to 68 )				      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
6 LOAD_GLOBAL 0 ( range )				      		  curr_xor = curr_xor ^ arr [ j ]		    		curr_xor = curr_xor ^ arr [ j ]			  
8 LOAD_FAST 1 ( n )					      		  ans = max ( ans , curr_xor )			    		ans = max ( ans , curr_xor )			  
10 CALL_FUNCTION 1					      	  return ans						    	return ans						  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 50 ( to 66 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_CONST 2 ( 0 )					      								    								  
20 STORE_FAST 4 ( curr_xor )				      								    								  
							      								    								  
5 22 SETUP_LOOP 40 ( to 64 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 26 ( to 62 )				      								    								  
36 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( curr_xor )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_XOR						      								    								  
48 STORE_FAST 4 ( curr_xor )				      								    								  
							      								    								  
7 50 LOAD_GLOBAL 1 ( max )				      								    								  
52 LOAD_FAST 2 ( ans )					      								    								  
54 LOAD_FAST 4 ( curr_xor )				      								    								  
56 CALL_FUNCTION 2					      								    								  
58 STORE_FAST 2 ( ans )					      								    								  
60 JUMP_ABSOLUTE 34					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
8 >> 68 LOAD_FAST 2 ( ans )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SUM_FACTORS_NUMBER				      FIND_MINIMUM_SUM_FACTORS_NUMBER				    FIND_MINIMUM_SUM_FACTORS_NUMBER				  FIND_MINIMUM_SUM_FACTORS_NUMBER
--							      --							    --								  --
Disassembly of <code object findMinSum at 0x7fbac0e8d540, fil def findMinSum ( num ) :					    def findMinSum ( num ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  i = 2							    	i = 2							  
							      	  while ( i * i <= num ) :				    	while i * i <= num :					  
3 4 LOAD_CONST 2 ( 2 )					      	      while ( num % i == 0 ) :				    	    while num % i == 0 :				  
6 STORE_FAST 2 ( i )					      		  sum += i					    		sum += i					  
							      		  num /= i					    		num /= i					  
4 8 SETUP_LOOP 58 ( to 68 )				      	      i += 1						    	    i += 1						  
>> 10 LOAD_FAST 2 ( i )					      	  sum += num						    	sum += num						  
12 LOAD_FAST 2 ( i )					      	  return sum						    	return sum						  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 0 ( num )					      								    								  
18 COMPARE_OP 1 ( <= )					      								    								  
20 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
5 22 SETUP_LOOP 32 ( to 56 )				      								    								  
>> 24 LOAD_FAST 0 ( num )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( sum )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( num )				      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 INPLACE_TRUE_DIVIDE					      								    								  
50 STORE_FAST 0 ( num )					      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( i )				      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( i )					      								    								  
64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 1 ( sum )				      								    								  
70 LOAD_FAST 0 ( num )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
10 76 LOAD_FAST 1 ( sum )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_<unk> E_NUMBER_FIBONACCI_SERIES			      NTH_<unk> E_NUMBER_FIBONACCI_SERIES			    NTH_<unk> E_NUMBER_FIBONACCI_SERIES				  NTH_<unk> E_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
Disassembly of <code object findPosition at 0x7fbac0e89d20, f def findPosition ( k , n ) :				    def findPosition ( k , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  f1 = 0						    	f1 = 0							  
2 STORE_FAST 2 ( f1 )					      	  f2 = 1						    	f2 = 1							  
							      	  i = 2 ;						    	i = 2							  
3 4 LOAD_CONST 2 ( 1 )					      	  while i != 0 :					    	while i != 0 :						  
6 STORE_FAST 3 ( f2 )					      	      f3 = f1 + f2 ;					    	    f3 = f1 + f2					  
							      	      f1 = f2 ;						    	    f1 = f2						  
4 8 LOAD_CONST 3 ( 2 )					      	      f2 = f3 ;						    	    f2 = f3						  
10 STORE_FAST 4 ( i )					      	      if f2 % k == 0 :					    	    if f2 % k == 0 :					  
							      		  return n * i					    		return n * i					  
5 12 SETUP_LOOP 56 ( to 70 )				      	      i += 1						    	    else :						  
>> 14 LOAD_FAST 4 ( i )					      	  return						    		i += 1						  
16 LOAD_CONST 1 ( 0 )					      								    	return None						  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 22 LOAD_FAST 2 ( f1 )					      								    								  
24 LOAD_FAST 3 ( f2 )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 5 ( f3 )					      								    								  
							      								    								  
7 30 LOAD_FAST 3 ( f2 )					      								    								  
32 STORE_FAST 2 ( f1 )					      								    								  
							      								    								  
8 34 LOAD_FAST 5 ( f3 )					      								    								  
36 STORE_FAST 3 ( f2 )					      								    								  
							      								    								  
9 38 LOAD_FAST 3 ( f2 )					      								    								  
40 LOAD_FAST 0 ( k )					      								    								  
42 BINARY_MODULO					      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
10 50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
11 >> 58 LOAD_FAST 4 ( i )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( i )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
12 >> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI
--							      --							    --								  --
Disassembly of <code object isLucky at 0x7fbac0e8d540, file " def isLucky ( n ) :					    def isLucky ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ar = [ 0 ] * 10					    	ar = [ 0 ] * 10						  
2 BUILD_LIST 1						      	  while ( n > 0 ) :					    	while n > 0 :						  
4 LOAD_CONST 2 ( 10 )					      	      digit = math.floor ( n % 10 )			    	    digit = math.floor ( n % 10 )			  
6 BINARY_MULTIPLY					      	      if ( ar [ digit ] ) :				    	    if ar [ digit ] :					  
8 STORE_FAST 1 ( ar )					      		  return 0					    		return 0					  
							      	      ar [ digit ] = 1					    	    ar [ digit ] = 1					  
3 10 SETUP_LOOP 54 ( to 66 )				      	      n = n / 10					    	    n = n / 10						  
>> 12 LOAD_FAST 0 ( n )					      	  return 1						    	return 1						  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 4 ( > )					      								    								  
18 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
4 20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 1 ( floor )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 10 )					      								    								  
28 BINARY_MODULO					      								    								  
30 CALL_METHOD 1					      								    								  
32 STORE_FAST 2 ( digit )				      								    								  
							      								    								  
5 34 LOAD_FAST 1 ( ar )					      								    								  
36 LOAD_FAST 2 ( digit )				      								    								  
38 BINARY_SUBSCR					      								    								  
40 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 42 LOAD_CONST 1 ( 0 )					      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
7 >> 46 LOAD_CONST 3 ( 1 )				      								    								  
48 LOAD_FAST 1 ( ar )					      								    								  
50 LOAD_FAST 2 ( digit )				      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
8 54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 10 )					      								    								  
58 BINARY_TRUE_DIVIDE					      								    								  
60 STORE_FAST 0 ( n )					      								    								  
62 JUMP_ABSOLUTE 12					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_CONST 3 ( 1 )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
Disassembly of <code object countFriendsPairings at 0x7fbac0e def countFriendsPairings ( n ) :				    def countFriendsPairings ( n ) :				  success : None
2 0 LOAD_CONST 1 ( ( 1 , 2 , 0 ) )			      	  a , b , c = 1 , 2 , 0 ;				    	a , b , c = 1 , 2 , 0					  
2 UNPACK_SEQUENCE 3					      	  if ( n <= 2 ) :					    	if n <= 2 :						  
4 STORE_FAST 1 ( a )					      	      return n ;					    	    return n						  
6 STORE_FAST 2 ( b )					      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 , n + 1 ) :				  
8 STORE_FAST 3 ( c )					      	      c = b + ( i - 1 ) * a ;				    	    c = b + ( i - 1 ) * a				  
							      	      a = b ;						    	    a = b						  
3 10 LOAD_FAST 0 ( n )					      	      b = c ;						    	    b = c						  
12 LOAD_CONST 2 ( 2 )					      	  return c ;						    	return c						  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( n )					      								    								  
20 RETURN_VALUE						      								    								  
							      								    								  
5 >> 22 SETUP_LOOP 46 ( to 70 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_CONST 3 ( 3 )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 4 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( b )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 LOAD_CONST 4 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 1 ( a )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( c )					      								    								  
							      								    								  
7 58 LOAD_FAST 2 ( b )					      								    								  
60 STORE_FAST 1 ( a )					      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( c )					      								    								  
64 STORE_FAST 2 ( b )					      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 3 ( c )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
Disassembly of <code object power at 0x7fbac0e8de40, file "<d def power ( x , y , p ) :					    def power ( x , y , p ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = 1							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( res )					      	  x = x % p						    	x = x % p						  _sa.test/MODULAR_EXPONENTIATION_POWER_IN_MODULAR_A
							      	  while ( y > 0 ) :					    	while y > 0 :						  RITHMETIC.py", line 33     res = ( res * x ) )
3 4 LOAD_FAST 0 ( x )					      	      if ( ( y & 1 ) == 1 ) :				    	    if y & 1 == 1 :					  		     ^ SyntaxError: invalid syntax
6 LOAD_FAST 2 ( p )					      		  res = ( res * x ) % p				    		res = ( res * x ) )				  
8 BINARY_MODULO						      	      y = y >> 1					    	    y = ( y >> 1 )					  
10 STORE_FAST 0 ( x )					      	      x = ( x * x ) % p					    	    x = ( x * x ) % p					  
							      	  return res						    	return res						  
4 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 1 ( y )					      								    								  
16 LOAD_CONST 2 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( y )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_AND						      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( res )				      								    								  
36 LOAD_FAST 0 ( x )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 LOAD_FAST 2 ( p )					      								    								  
42 BINARY_MODULO					      								    								  
44 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 46 LOAD_FAST 1 ( y )				      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_RSHIFT					      								    								  
52 STORE_FAST 1 ( y )					      								    								  
							      								    								  
8 54 LOAD_FAST 0 ( x )					      								    								  
56 LOAD_FAST 0 ( x )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_FAST 2 ( p )					      								    								  
62 BINARY_MODULO					      								    								  
64 STORE_FAST 0 ( x )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 3 ( res )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
Disassembly of <code object findIndex at 0x7fbac0e8d540, file def findIndex ( n ) :					    def findIndex ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 1 )					      	      return n						    	    return n						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/FIND_I
4 COMPARE_OP 1 ( <= )					      	  a = 0							    	a = 0							  NDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME.py", lin
6 POP_JUMP_IF_FALSE 12					      	  b = 1							    	b = 1							  e 60, in <module>	if f_filled(*parameters_set)
							      	  c = 1							    	c = 1							   == f_gold(*parameters_set):	 File "/home/ubuntu/
3 8 LOAD_FAST 0 ( n )					      	  res = 1						    	while c < n :						  TransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_
10 RETURN_VALUE						      	  while ( c < n ) :					    	    c = a + b						  scripts/dis_sa-python_sa.test/FIND_INDEX_GIVEN_FIB
							      	      c = a + b						    	    res = res + 1					  ONACCI_NUMBER_CONSTANT_TIME.py", line 40, in f_fil
4 >> 12 LOAD_CONST 2 ( 0 )				      	      res = res + 1					    	    b = c						  led	  res = res + 1 UnboundLocalError: local var
14 STORE_FAST 1 ( a )					      	      a = b						    	return res						  iable 'res' referenced before assignment
							      	      b = c						    								  
5 16 LOAD_CONST 1 ( 1 )					      	  return res						    								  
18 STORE_FAST 2 ( b )					      								    								  
							      								    								  
6 20 LOAD_CONST 1 ( 1 )					      								    								  
22 STORE_FAST 3 ( c )					      								    								  
							      								    								  
7 24 LOAD_CONST 1 ( 1 )					      								    								  
26 STORE_FAST 4 ( res )					      								    								  
							      								    								  
8 28 SETUP_LOOP 36 ( to 66 )				      								    								  
>> 30 LOAD_FAST 3 ( c )					      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
9 38 LOAD_FAST 1 ( a )					      								    								  
40 LOAD_FAST 2 ( b )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 3 ( c )					      								    								  
							      								    								  
10 46 LOAD_FAST 4 ( res )				      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 4 ( res )					      								    								  
							      								    								  
11 54 LOAD_FAST 2 ( b )					      								    								  
56 STORE_FAST 1 ( a )					      								    								  
							      								    								  
12 58 LOAD_FAST 3 ( c )					      								    								  
60 STORE_FAST 2 ( b )					      								    								  
62 JUMP_ABSOLUTE 30					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
13 >> 66 LOAD_FAST 4 ( res )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
Disassembly of <code object CountPairs at 0x7fbac0e8bc90, fil def CountPairs ( n ) :					    def CountPairs ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  k = n							    	k = n							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( k )					      	  imin = 1						    	imin = 1						  _sa.test/COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B.py", lin
							      	  ans = 0						    	ans = 0							  e 33	   while imin n :		 ^ SyntaxErr
3 4 LOAD_CONST 1 ( 1 )					      	  while ( imin <= n ) :					    	while imin n :						  or: invalid syntax
6 STORE_FAST 2 ( imin )					      	      imax = n / k					    	    imax = n / k					  
							      	      ans += k * ( imax - imin + 1 )			    	    ans += ( k - imax - imin + 1 )			  
4 8 LOAD_CONST 2 ( 0 )					      	      imin = imax + 1					    	    imin = imax + 1					  
10 STORE_FAST 3 ( ans )					      	      k = n / imin					    	    k = n / imin					  
							      	  return ans						    	return ans						  
5 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 2 ( imin )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 COMPARE_OP 1 ( <= )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_FAST 1 ( k )					      								    								  
26 BINARY_TRUE_DIVIDE					      								    								  
28 STORE_FAST 4 ( imax )				      								    								  
							      								    								  
7 30 LOAD_FAST 3 ( ans )				      								    								  
32 LOAD_FAST 1 ( k )					      								    								  
34 LOAD_FAST 4 ( imax )					      								    								  
36 LOAD_FAST 2 ( imin )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 BINARY_MULTIPLY					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
8 50 LOAD_FAST 4 ( imax )				      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( imin )				      								    								  
							      								    								  
9 58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_FAST 2 ( imin )					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 STORE_FAST 1 ( k )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 3 ( ans )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUM_CONTIGUOUS_SUBARRAY_2			      LARGEST_SUM_CONTIGUOUS_SUBARRAY_2				    LARGEST_SUM_CONTIGUOUS_SUBARRAY_2				  LARGEST_SUM_CONTIGUOUS_SUBARRAY_2
--							      --							    --								  --
Disassembly of <code object maxSubArraySum at 0x7fbac0e8bc90, def maxSubArraySum ( a , size ) :				    def maxSubArraySum ( a , size ) :				  success : identical to gold
2 0 LOAD_FAST 0 ( a )					      	  max_so_far = a [ 0 ]					    	max_so_far = a [ 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  curr_max = a [ 0 ]					    	curr_max = a [ 0 ]					  
4 BINARY_SUBSCR						      	  for i in range ( 1 , size ) :				    	for i in range ( 1 , size ) :				  
6 STORE_FAST 2 ( max_so_far )				      	      curr_max = max ( a [ i ] , curr_max + a [ i ] )	    	    curr_max = max ( a [ i ] , curr_max + a [ i ] )	  
							      	      max_so_far = max ( max_so_far , curr_max )	    	    max_so_far = max ( max_so_far , curr_max )		  
3 8 LOAD_FAST 0 ( a )					      	  return max_so_far					    	return max_so_far					  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 STORE_FAST 3 ( curr_max )				      								    								  
							      								    								  
4 16 SETUP_LOOP 50 ( to 68 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 1 ( size )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_GLOBAL 1 ( max )				      								    								  
34 LOAD_FAST 0 ( a )					      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 3 ( curr_max )				      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 STORE_FAST 3 ( curr_max )				      								    								  
							      								    								  
6 54 LOAD_GLOBAL 1 ( max )				      								    								  
56 LOAD_FAST 2 ( max_so_far )				      								    								  
58 LOAD_FAST 3 ( curr_max )				      								    								  
60 CALL_FUNCTION 2					      								    								  
62 STORE_FAST 2 ( max_so_far )				      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 2 ( max_so_far )			      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OPERATIONS_MAKE_STRINGAB_FREE			      COUNT_OPERATIONS_MAKE_STRINGAB_FREE			    COUNT_OPERATIONS_MAKE_STRINGAB_FREE				  COUNT_OPERATIONS_MAKE_STRINGAB_FREE
--							      --							    --								  --
Disassembly of <code object abFree at 0x7fbac0e8d540, file "< def abFree ( s ) :					    def abFree ( s ) :						  failure : #Results: 8, 10
2 0 LOAD_CONST 1 ( 0 )					      	  b_count = 0						    	b_count = 0						  
2 STORE_FAST 1 ( b_count )				      	  res = 0						    	res = 0							  
							      	  for i in range ( len ( s ) ) :			    	for i in range ( len ( s ) ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      if s [ ~ i ] == 'a' :				    	    if s [ i ] == 'a' :					  
6 STORE_FAST 2 ( res )					      		  res = ( res + b_count )			    		res = res + b_count				  
							      		  b_count = ( b_count * 2 )			    		b_count = b_count * 2				  
4 8 SETUP_LOOP 60 ( to 70 )				      	      else :						    	    else :						  
10 LOAD_GLOBAL 0 ( range )				      		  b_count += 1					    		b_count += 1					  
12 LOAD_GLOBAL 1 ( len )				      	  return res						    	return res						  
14 LOAD_FAST 0 ( s )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 44 ( to 68 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 UNARY_INVERT						      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 2 ( 'a' )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 40 LOAD_FAST 2 ( res )				      								    								  
42 LOAD_FAST 1 ( b_count )				      								    								  
44 BINARY_ADD						      								    								  
46 STORE_FAST 2 ( res )					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( b_count )				      								    								  
50 LOAD_CONST 3 ( 2 )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 STORE_FAST 1 ( b_count )				      								    								  
56 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
9 >> 58 LOAD_FAST 1 ( b_count )				      								    								  
60 LOAD_CONST 4 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 1 ( b_count )				      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 2 ( res )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
Disassembly of <code object leonardo at 0x7fbac0e8bc90, file  def leonardo ( n ) :					    def leonardo ( n ) :					  success : None
2 0 BUILD_LIST 0					      	  dp = [ ] ;						    	dp = [ ]						  
2 STORE_FAST 1 ( dp )					      	  dp.append ( 1 ) ;					    	dp.append ( 1 )						  
							      	  dp.append ( 1 ) ;					    	dp.append ( 1 )						  
3 4 LOAD_FAST 1 ( dp )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
6 LOAD_METHOD 0 ( append )				      	      dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ;	    	    dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 )	  
8 LOAD_CONST 1 ( 1 )					      	  return dp [ n ] ;					    	return dp [ n ]						  
10 CALL_METHOD 1					      								    								  
12 POP_TOP						      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( dp )					      								    								  
16 LOAD_METHOD 0 ( append )				      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 CALL_METHOD 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
5 24 SETUP_LOOP 56 ( to 82 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 38 ( to 80 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 44 LOAD_FAST 1 ( dp )					      								    								  
46 LOAD_METHOD 0 ( append )				      								    								  
48 LOAD_FAST 1 ( dp )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 1 ( dp )					      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 2 ( 2 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_METHOD 1					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 40					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
7 >> 82 LOAD_FAST 1 ( dp )				      								    								  
84 LOAD_FAST 0 ( n )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
Disassembly of <code object isPowerOfFour at 0x7fbac0e8de40,  def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( count )				      	  if ( n and ( not ( n & ( n - 1 ) ) ) ) :		    	if n and not n & ( n - 1 ) ) :				  _sa.test/FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF
							      	      while ( n > 1 ) :					    	    while n > 1 :					  _4_OR_NOT_1.py", line 31     if n and not n & ( n
3 4 LOAD_FAST 0 ( n )					      		  n >>= 1					    		n >>= 1						  - 1 ) ) :				   ^ SyntaxE
6 POP_JUMP_IF_FALSE 70					      		  count += 1					    		count += 1					  rror: invalid syntax
8 LOAD_FAST 0 ( n )					      	      if ( count % 2 == 0 ) :				    	if count % 2 == 0 :					  
10 LOAD_FAST 0 ( n )					      		  return True					    	    return True						  
12 LOAD_CONST 2 ( 1 )					      	      else :						    	else :							  
14 BINARY_SUBTRACT					      		  return False					    	    return False					  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 70					      								    								  
							      								    								  
4 20 SETUP_LOOP 28 ( to 50 )				      								    								  
>> 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 COMPARE_OP 4 ( > )					      								    								  
28 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 INPLACE_RSHIFT					      								    								  
36 STORE_FAST 0 ( n )					      								    								  
							      								    								  
6 38 LOAD_FAST 1 ( count )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( count )				      								    								  
46 JUMP_ABSOLUTE 22					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
7 >> 50 LOAD_FAST 1 ( count )				      								    								  
52 LOAD_CONST 3 ( 2 )					      								    								  
54 BINARY_MODULO					      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 62 LOAD_CONST 4 ( True )				      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
10 >> 66 LOAD_CONST 5 ( False )				      								    								  
68 RETURN_VALUE						      								    								  
>> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		      CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		    CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		  CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD
--							      --							    --								  --
Disassembly of <code object isPowerOfK at 0x7fbac0e8bc90, fil def isPowerOfK ( n , k ) :				    def isPowerOfK ( n , k ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( False )				      	  oneSeen = False					    	oneSeen = False						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 2 ( oneSeen )				      	  while ( n > 0 ) :					    	while n > 0 :						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/CHECK_
							      	      digit = n % k					    	    digit = n % k					  NUMBER_POWER_K_USING_BASE_CHANGING_METHOD.py", lin
3 4 SETUP_LOOP 60 ( to 66 )				      	      if ( digit > 1 ) :				    	    if digit > 1 :					  e 60, in <module>	if f_filled(*parameters_set)
>> 6 LOAD_FAST 0 ( n )					      		  return False					    		return False					   == f_gold(*parameters_set):	 File "/home/ubuntu/
8 LOAD_CONST 2 ( 0 )					      	      if ( digit == 1 ) :				    	    if digit == 1 :					  TransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_
10 COMPARE_OP 4 ( > )					      		  if ( oneSeen ) :				    		if oneSeen :					  scripts/dis_sa-python_sa.test/CHECK_NUMBER_POWER_K
12 POP_JUMP_IF_FALSE 64					      		      return False				    		    return False				  _USING_BASE_CHANGING_METHOD.py", line 41, in f_fil
							      		  oneSeen = True				    		oneSeen = True					  led	  n //= INPLACE_FLOOR_DIVIDE NameError: name
4 14 LOAD_FAST 0 ( n )					      	      n //= k						    	    n //= INPLACE_FLOOR_DIVIDE				   'INPLACE_FLOOR_DIVIDE' is not defined
16 LOAD_FAST 1 ( k )					      	  return True						    	return True						  
18 BINARY_MODULO					      								    								  
20 STORE_FAST 3 ( digit )				      								    								  
							      								    								  
5 22 LOAD_FAST 3 ( digit )				      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 COMPARE_OP 4 ( > )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 30 LOAD_CONST 1 ( False )				      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
7 >> 34 LOAD_FAST 3 ( digit )				      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( oneSeen )				      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
9 46 LOAD_CONST 1 ( False )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
10 >> 50 LOAD_CONST 4 ( True )				      								    								  
52 STORE_FAST 2 ( oneSeen )				      								    								  
							      								    								  
11 >> 54 LOAD_FAST 0 ( n )				      								    								  
56 LOAD_FAST 1 ( k )					      								    								  
58 INPLACE_FLOOR_DIVIDE					      								    								  
60 STORE_FAST 0 ( n )					      								    								  
62 JUMP_ABSOLUTE 6					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
12 >> 66 LOAD_CONST 4 ( True )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION_1		      EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION_1
--							      --							    --								  --
Disassembly of <code object exponentiation at 0x7fbac0e8bc90, def exponentiation ( bas , exp ) :			    def exponentiation ( bas , exp ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  t = 1 ;						    	t = 1							  
2 STORE_FAST 2 ( t )					      	  while ( exp > 0 ) :					    	while exp > 0 :						  
							      	      if ( exp % 2 != 0 ) :				    	    if exp % 2 != 0 :					  
3 4 SETUP_LOOP 60 ( to 66 )				      		  t = ( t * bas ) % N ;				    		t = t * bas % N					  
>> 6 LOAD_FAST 1 ( exp )				      	      bas = ( bas * bas ) % N ;				    	    bas = bas * bas * bas :				  
8 LOAD_CONST 2 ( 0 )					      	      exp = int ( exp / 2 ) ;				    		bas = int ( exp / 2 )				  
10 COMPARE_OP 4 ( > )					      	  return t % N ;					    		exp = int ( exp / 2 )				  
12 POP_JUMP_IF_FALSE 64					      								    	return t % N						  
							      								    								  
4 14 LOAD_FAST 1 ( exp )				      								    								  
16 LOAD_CONST 3 ( 2 )					      								    								  
18 BINARY_MODULO					      								    								  
20 LOAD_CONST 2 ( 0 )					      								    								  
22 COMPARE_OP 3 ( != )					      								    								  
24 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( t )					      								    								  
28 LOAD_FAST 0 ( bas )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_GLOBAL 0 ( N )					      								    								  
34 BINARY_MODULO					      								    								  
36 STORE_FAST 2 ( t )					      								    								  
							      								    								  
6 >> 38 LOAD_FAST 0 ( bas )				      								    								  
40 LOAD_FAST 0 ( bas )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_GLOBAL 0 ( N )					      								    								  
46 BINARY_MODULO					      								    								  
48 STORE_FAST 0 ( bas )					      								    								  
							      								    								  
7 50 LOAD_GLOBAL 1 ( int )				      								    								  
52 LOAD_FAST 1 ( exp )					      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 BINARY_TRUE_DIVIDE					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 STORE_FAST 1 ( exp )					      								    								  
62 JUMP_ABSOLUTE 6					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
8 >> 66 LOAD_FAST 2 ( t )				      								    								  
68 LOAD_GLOBAL 0 ( N )					      								    								  
70 BINARY_MODULO					      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		      FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		    FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		  FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac0e8de40, file " def findSum ( arr , n ) :					    def findSum ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  sum = 0						    	sum = 0							  _sa.test/FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  ARRAY.py", line 36	 return sum	^ SyntaxErro
							      	      if arr [ i ] not in s :				    	    if arr [ i ] not in s :				  r: 'return' outside function
3 6 LOAD_CONST 1 ( 0 )					      		  s.add ( arr [ i ] )				    		s.add ( arr [ i ] )				  
8 STORE_FAST 3 ( sum )					      	  for i in s :						    	for i in s :						  
							      	      sum = sum + i					    	    sum = sum + i					  
4 10 SETUP_LOOP 42 ( to 54 )				      	  return sum						    return sum							  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 30 ( to 52 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 2 ( s )					      								    								  
32 COMPARE_OP 7 ( not in )				      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 36 LOAD_FAST 2 ( s )					      								    								  
38 LOAD_METHOD 2 ( add )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_METHOD 1					      								    								  
48 POP_TOP						      								    								  
50 JUMP_ABSOLUTE 20					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 SETUP_LOOP 20 ( to 76 )				      								    								  
56 LOAD_FAST 2 ( s )					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 12 ( to 74 )				      								    								  
62 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 64 LOAD_FAST 3 ( sum )				      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 3 ( sum )					      								    								  
72 JUMP_ABSOLUTE 60					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_FAST 3 ( sum )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object printFibonacciNumbers at 0x7fbac0 def printFibonacciNumbers ( n ) :				    def printFibonacciNumNum( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  f1 = 0						    	f1 = 0							  
2 STORE_FAST 1 ( f1 )					      	  f2 = 1						    	f2 = 1							  
							      	  if ( n < 1 ) :					    	if n < 1 :						  
3 4 LOAD_CONST 2 ( 1 )					      	      return						    	    return None						  
6 STORE_FAST 2 ( f2 )					      	  for x in range ( 0 , n ) :				    	for x in range ( 0 , n ) :				  
							      	      print ( f2 , end = " " )				    	    print ( f2 , end = " " )				  
4 8 LOAD_FAST 0 ( n )					      	      next = f1 + f2					    	    next = f1 + f2					  
10 LOAD_CONST 2 ( 1 )					      	      f1 = f2						    	    f1 = f2						  
12 COMPARE_OP 0 ( < )					      	      f2 = next						    	    f2 = next						  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 16 LOAD_CONST 0 ( None )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
6 >> 20 SETUP_LOOP 46 ( to 68 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 32 ( to 66 )				      								    								  
34 STORE_FAST 3 ( x )					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 1 ( print )				      								    								  
38 LOAD_FAST 2 ( f2 )					      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 48 LOAD_FAST 1 ( f1 )					      								    								  
50 LOAD_FAST 2 ( f2 )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 4 ( next )				      								    								  
							      								    								  
9 56 LOAD_FAST 2 ( f2 )					      								    								  
58 STORE_FAST 1 ( f1 )					      								    								  
							      								    								  
10 60 LOAD_FAST 4 ( next )				      								    								  
62 STORE_FAST 2 ( f2 )					      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_ELEMENT_STABLE_SORT				      POSITION_ELEMENT_STABLE_SORT				    POSITION_ELEMENT_STABLE_SORT				  POSITION_ELEMENT_STABLE_SORT
--							      --							    --								  --
Disassembly of <code object getIndexInSortedArray at 0x7fbac0 def getIndexInSortedArray ( arr , n , idx ) :		    def getIndexInSortedArray ( arr , n , idx ) :		  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 3 ( result )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if ( arr [ i ] < arr [ idx ] ) :			    	    if arr [ i ] < arr [ idx ] :			  
3 4 SETUP_LOOP 72 ( to 78 )				      		  result += 1					    		result += 1					  
6 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] == arr [ idx ] and i < idx ) :	    	    if arr [ i ] == arr [ idx ] and i < idx :		  
8 LOAD_FAST 1 ( n )					      		  result += 1					    		result += 1					  
10 CALL_FUNCTION 1					      	  return result ;					    	return result						  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 60 ( to 76 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 4 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 2 ( idx )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
5 34 LOAD_FAST 3 ( result )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 3 ( result )				      								    								  
							      								    								  
6 >> 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( idx )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 14					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 LOAD_FAST 2 ( idx )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
7 66 LOAD_FAST 3 ( result )				      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 3 ( result )				      								    								  
74 JUMP_ABSOLUTE 14					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 3 ( result )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_YOU_O<unk> POWER_WITHOUT_USING_<unk> CATION_AND_DIVISIO WRITE_YOU_O<unk> POWER_WITHOUT_USING_<unk> CATION_AND_DIVISIO WRITE_YOU_O<unk> POWER_WITHOUT_USING_<unk> CATION_AND_DIVISIO WRITE_YOU_O<unk> POWER_WITHOUT_USING_<unk> CATION_AND_DIVISIO
--							      --							    --								  --
Disassembly of <code object pow at 0x7fbac0e8d540, file "<dis def pow ( a , b ) :					    def pow ( a , b ) :						  script_not_found : None
2 0 LOAD_FAST 1 ( b )					      	  if ( b == 0 ) :					    	if ( b == 0 ) :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  answer = a						    	answer = a						  
6 POP_JUMP_IF_FALSE 12					      	  increment = a						    	increment = a						  
							      	  for i in range ( 1 , b ) :				    	for i in range ( 1 , b ) :				  
3 8 LOAD_CONST 2 ( 1 )					      	      for j in range ( 1 , a ) :			    	    for j in range ( 1 , a ) :				  
10 RETURN_VALUE						      		  answer += increment				    		answer += increment				  
							      	      increment = answer				    	    increment = answer					  
4 >> 12 LOAD_FAST 0 ( a )				      	  return answer						    	return answer						  
14 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
5 16 LOAD_FAST 0 ( a )					      								    								  
18 STORE_FAST 3 ( increment )				      								    								  
							      								    								  
6 20 SETUP_LOOP 50 ( to 72 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 1 ( b )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 36 ( to 70 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 36 SETUP_LOOP 26 ( to 64 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 12 ( to 62 )				      								    								  
50 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 52 LOAD_FAST 2 ( answer )				      								    								  
54 LOAD_FAST 3 ( increment )				      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( answer )				      								    								  
60 JUMP_ABSOLUTE 48					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
9 >> 64 LOAD_FAST 2 ( answer )				      								    								  
66 STORE_FAST 3 ( increment )				      								    								  
68 JUMP_ABSOLUTE 32					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
10 >> 72 LOAD_FAST 2 ( answer )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_<unk> CATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_<unk> CATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_<unk> CATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_<unk> CATION
--							      --							    --								  --
Disassembly of <code object mulmod at 0x7fbac0e8d540, file "< def mulmod ( a , b , mod ) :				    def mulmod ( a , b , mod ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0 ;						    	res = 0							  
2 STORE_FAST 3 ( res )					      	  a = a % mod ;						    	a = a % mod						  
							      	  while ( b > 0 ) :					    	while b > 0 :						  
3 4 LOAD_FAST 0 ( a )					      	      if ( b % 2 == 1 ) :				    	    if b % 2 == 1 :					  
6 LOAD_FAST 2 ( mod )					      		  res = ( res + a ) % mod ;			    		res = ( res + a ) % mod				  
8 BINARY_MODULO						      	      a = ( a * 2 ) % mod ;				    	    a = ( a * 2 ) % mod					  
10 STORE_FAST 0 ( a )					      	      b //= 2 ;						    	    b //= 1 = b						  
							      	  return res % mod ;					    return res % mod						  
4 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 1 ( b )					      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( b )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 3 ( 1 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( res )				      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_FAST 2 ( mod )					      								    								  
42 BINARY_MODULO					      								    								  
44 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 46 LOAD_FAST 0 ( a )				      								    								  
48 LOAD_CONST 2 ( 2 )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_FAST 2 ( mod )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 0 ( a )					      								    								  
							      								    								  
8 58 LOAD_FAST 1 ( b )					      								    								  
60 LOAD_CONST 2 ( 2 )					      								    								  
62 INPLACE_FLOOR_DIVIDE					      								    								  
64 STORE_FAST 1 ( b )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 3 ( res )				      								    								  
72 LOAD_FAST 2 ( mod )					      								    								  
74 BINARY_MODULO					      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
Disassembly of <code object findHeight at 0x7fbac0e89d20, fil def findHeight ( parent , n ) :				    def findHeight ( parent , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      p = i						    	    p = i						  
3 4 SETUP_LOOP 68 ( to 74 )				      	      current = 1					    	    current = 1						  
6 LOAD_GLOBAL 0 ( range )				      	      while ( parent [ p ] != - 1 ) :			    	    while parent [ p ] != - 1 :				  
8 LOAD_FAST 1 ( n )					      		  current += 1					    		current += 1					  
10 CALL_FUNCTION 1					      		  p = parent [ p ]				    		p = parent [ p ]				  
12 GET_ITER						      	      res = max ( res , current )			    	    res = max ( res , current )				  
>> 14 FOR_ITER 56 ( to 72 )				      	  return res						    	return res						  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 3 ( i )					      								    								  
20 STORE_FAST 4 ( p )					      								    								  
							      								    								  
5 22 LOAD_CONST 2 ( 1 )					      								    								  
24 STORE_FAST 5 ( current )				      								    								  
							      								    								  
6 26 SETUP_LOOP 32 ( to 60 )				      								    								  
>> 28 LOAD_FAST 0 ( parent )				      								    								  
30 LOAD_FAST 4 ( p )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 3 ( - 1 )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 40 LOAD_FAST 5 ( current )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 5 ( current )				      								    								  
							      								    								  
8 48 LOAD_FAST 0 ( parent )				      								    								  
50 LOAD_FAST 4 ( p )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 4 ( p )					      								    								  
56 JUMP_ABSOLUTE 28					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
9 >> 60 LOAD_GLOBAL 1 ( max )				      								    								  
62 LOAD_FAST 2 ( res )					      								    								  
64 LOAD_FAST 5 ( current )				      								    								  
66 CALL_FUNCTION 2					      								    								  
68 STORE_FAST 2 ( res )					      								    								  
70 JUMP_ABSOLUTE 14					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_FAST 2 ( res )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
Disassembly of <code object nearestSmallerEqFib at 0x7fbac0e8 def nearestSmallerEqFib ( n ) :				    def & SmallerEqFib ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0 )					      	      return n						    	    return n						  _sa.test/ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBO
4 COMPARE_OP 2 ( == )					      	  f1 , f2 , f3 = 0 , 1 , 1				    	f1 , f2 , f3 = 0 , 1 , 1				  NACCI_REPRESENTATION.py", line 28	def f_filled
6 POP_JUMP_IF_TRUE 16					      	  while ( f3 <= n ) :					    	while f3 <= n :						   SmallerEqFib ( n ) :
8 LOAD_FAST 0 ( n )					      	      f1 = f2 ;						    	    f1 = f2						  ^ SyntaxError: invalid syntax
10 LOAD_CONST 2 ( 1 )					      	      f2 = f3 ;						    	    f2 = f3						  
12 COMPARE_OP 2 ( == )					      	      f3 = f1 + f2 ;					    	    f3 = f1 + f2					  
14 POP_JUMP_IF_FALSE 20					      	  return f2 ;						    	return f2						  
							      								    								  
3 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 3 ( ( 0 , 1 , 1 ) )			      								    								  
22 UNPACK_SEQUENCE 3					      								    								  
24 STORE_FAST 1 ( f1 )					      								    								  
26 STORE_FAST 2 ( f2 )					      								    								  
28 STORE_FAST 3 ( f3 )					      								    								  
							      								    								  
5 30 SETUP_LOOP 28 ( to 60 )				      								    								  
>> 32 LOAD_FAST 3 ( f3 )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 40 LOAD_FAST 2 ( f2 )					      								    								  
42 STORE_FAST 1 ( f1 )					      								    								  
							      								    								  
7 44 LOAD_FAST 3 ( f3 )					      								    								  
46 STORE_FAST 2 ( f2 )					      								    								  
							      								    								  
8 48 LOAD_FAST 1 ( f1 )					      								    								  
50 LOAD_FAST 2 ( f2 )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 3 ( f3 )					      								    								  
56 JUMP_ABSOLUTE 32					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 2 ( f2 )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE_1				      C_PROGRAM_FIND_AREA_TRIANGLE_1				    C_PROGRAM_FIND_AREA_TRIANGLE_1				  C_PROGRAM_FIND_AREA_TRIANGLE_1
--							      --							    --								  --
Disassembly of <code object polygonArea at 0x7fbac0e8d540, fi def polygonArea ( X , Y , n ) :				    def polygonArea ( X , Y , n = 5 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0.0 )				      	  area = 0.0						    	area = 0.0						  
2 STORE_FAST 3 ( area )					      	  j = n - 1						    	j = n - 1						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_FAST 2 ( n )					      	      area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ 	    area = area [ X [ j ] + X [ i ] * Y [ j ] - Y [ i ] ] 
6 LOAD_CONST 2 ( 1 )					      	      j = i						    	    j = i						  
8 BINARY_SUBTRACT					      	  return abs ( area // 2.0 )				    	return abs ( area // 2.0 )				  
10 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 12 SETUP_LOOP 58 ( to 72 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 3 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 44 ( to 70 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( area )				      								    								  
30 LOAD_FAST 0 ( X )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( X )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 1 ( Y )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 3 ( area )				      								    								  
							      								    								  
6 64 LOAD_FAST 5 ( i )					      								    								  
66 STORE_FAST 4 ( j )					      								    								  
68 JUMP_ABSOLUTE 24					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_GLOBAL 1 ( abs )				      								    								  
74 LOAD_FAST 3 ( area )					      								    								  
76 LOAD_CONST 4 ( 2.0 )					      								    								  
78 BINARY_FLOOR_DIVIDE					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIN_<unk> ING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	      BIN_<unk> ING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	    BIN_<unk> ING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		  BIN_<unk> ING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS
--							      --							    --								  --
Disassembly of <code object nextfit at 0x7fbac0e8bc90, file " def nextfit ( weight , c ) :				    def nextfit ( weight , c ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  rem = c						    	rem = c							  
							      	  for _ in range ( len ( weight ) ) :			    	for _ in range ( len ( weight ) ) :			  
3 4 LOAD_FAST 1 ( c )					      	      if rem >= weight [ _ ] :				    	    if rem >= weight [ _ ] :				  
6 STORE_FAST 3 ( rem )					      		  rem = rem - weight [ _ ]			    		rem = rem - weight [ _ ]			  
							      	      else :						    	    else :						  
4 8 SETUP_LOOP 66 ( to 76 )				      		  res += 1					    		res += 1					  
10 LOAD_GLOBAL 0 ( range )				      		  rem = c - weight [ _ ]			    		rem = c - weight [ _ ]				  
12 LOAD_GLOBAL 1 ( len )				      	  return res						    	return res						  
14 LOAD_FAST 0 ( weight )				      								    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 50 ( to 74 )				      								    								  
24 STORE_FAST 4 ( _ )					      								    								  
							      								    								  
5 26 LOAD_FAST 3 ( rem )				      								    								  
28 LOAD_FAST 0 ( weight )				      								    								  
30 LOAD_FAST 4 ( _ )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 38 LOAD_FAST 3 ( rem )				      								    								  
40 LOAD_FAST 0 ( weight )				      								    								  
42 LOAD_FAST 4 ( _ )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 3 ( rem )					      								    								  
50 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
8 >> 52 LOAD_FAST 2 ( res )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( res )					      								    								  
							      								    								  
9 60 LOAD_FAST 1 ( c )					      								    								  
62 LOAD_FAST 0 ( weight )				      								    								  
64 LOAD_FAST 4 ( _ )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_FAST 3 ( rem )					      								    								  
72 JUMP_ABSOLUTE 22					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 2 ( res )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1		      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1
--							      --							    --								  --
Disassembly of <code object gcdExtended at 0x7fbac0e8d8a0, fi def gcdExtended ( a , b , x , y ) :			    def gcdExtended ( a , b ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( a )					      	  if a == 0 :						    	if a == 0 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	      x = 0						    	    x = 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/BASIC_
4 COMPARE_OP 2 ( == )					      	      y = 1						    	    y = 1						  AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1.py", line 58,
6 POP_JUMP_IF_FALSE 20					      	      return b						    	    return b						  in <module>	  if f_filled(*parameters_set) == f_
							      	  x1 = 1						    	x1 = 1							  gold(*parameters_set): TypeError: f_filled() takes
3 8 LOAD_CONST 1 ( 0 )					      	  y1 = 1						    	y1 = 1							   2 positional arguments but 4 were given
10 STORE_FAST 2 ( x )					      	  gcd = gcdExtended ( b % a , a , x1 , y1 )		    	gcd = gcdExtended ( b % a , a , x1 , y1 )		  
							      	  x = y1 - ( b / a ) * x1				    	x = y1 - b / a * x1					  
4 12 LOAD_CONST 2 ( 1 )					      	  y = x1						    	y = x1							  
14 STORE_FAST 3 ( y )					      	  return gcd						    	return gcd						  
							      								    								  
5 16 LOAD_FAST 1 ( b )					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
6 >> 20 LOAD_CONST 2 ( 1 )				      								    								  
22 STORE_FAST 4 ( x1 )					      								    								  
							      								    								  
7 24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 5 ( y1 )					      								    								  
							      								    								  
8 28 LOAD_GLOBAL 0 ( gcdExtended )			      								    								  
30 LOAD_FAST 1 ( b )					      								    								  
32 LOAD_FAST 0 ( a )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 4 ( x1 )					      								    								  
40 LOAD_FAST 5 ( y1 )					      								    								  
42 CALL_FUNCTION 4					      								    								  
44 STORE_FAST 6 ( gcd )					      								    								  
							      								    								  
9 46 LOAD_FAST 5 ( y1 )					      								    								  
48 LOAD_FAST 1 ( b )					      								    								  
50 LOAD_FAST 0 ( a )					      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 LOAD_FAST 4 ( x1 )					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 STORE_FAST 2 ( x )					      								    								  
							      								    								  
10 62 LOAD_FAST 4 ( x1 )				      								    								  
64 STORE_FAST 3 ( y )					      								    								  
							      								    								  
11 66 LOAD_FAST 6 ( gcd )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_1		      <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_1		    <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_1		  <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS_1
--							      --							    --								  --
Disassembly of <code object middleOfThree at 0x7fbac0e89d20,  def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , c ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if a > b :						    	if a > b :						  
2 LOAD_FAST 1 ( b )					      	      if ( b > c ) :					    	    if b > c :						  
4 COMPARE_OP 4 ( > )					      		  return b					    		return b					  
6 POP_JUMP_IF_FALSE 38					      	      elif ( a > c ) :					    	    if a > c :						  
							      		  return c					    		return c					  
3 8 LOAD_FAST 1 ( b )					      	      else :						    	    else :						  
10 LOAD_FAST 2 ( c )					      		  return a					    		return a					  
12 COMPARE_OP 4 ( > )					      	  else :						    	else :							  
14 POP_JUMP_IF_FALSE 20					      	      if ( a > c ) :					    	    if a > c :						  
							      		  return a					    		return a					  
4 16 LOAD_FAST 1 ( b )					      	      elif ( b > c ) :					    	    if b > c :						  
18 RETURN_VALUE						      		  return c					    		return c					  
							      	      else :						    	    else :						  
5 >> 20 LOAD_FAST 0 ( a )				      		  return b					    		return b					  
22 LOAD_FAST 2 ( c )					      								    								  
24 COMPARE_OP 4 ( > )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 28 LOAD_FAST 2 ( c )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
8 >> 32 LOAD_FAST 0 ( a )				      								    								  
34 RETURN_VALUE						      								    								  
36 JUMP_FORWARD 28 ( to 66 )				      								    								  
							      								    								  
10 >> 38 LOAD_FAST 0 ( a )				      								    								  
40 LOAD_FAST 2 ( c )					      								    								  
42 COMPARE_OP 4 ( > )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
11 46 LOAD_FAST 0 ( a )					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
12 >> 50 LOAD_FAST 1 ( b )				      								    								  
52 LOAD_FAST 2 ( c )					      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
13 58 LOAD_FAST 2 ( c )					      								    								  
60 RETURN_VALUE						      								    								  
							      								    								  
15 >> 62 LOAD_FAST 1 ( b )				      								    								  
64 RETURN_VALUE						      								    								  
>> 66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
Disassembly of <code object decToBin at 0x7fbac0e8de40, file  def decToBin ( n ) :					    def decToBin ( n ) :					  timeout : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return "0" ;					    	    return '0'						  
4 COMPARE_OP 2 ( == )					      	  bin = "" ;						    	bin = ''						  
6 POP_JUMP_IF_FALSE 12					      	  while ( n > 0 ) :					    	while n > 0 :						  
							      	      if ( n & 1 == 0 ) :				    	    if n & 1 == 0 :					  
3 8 LOAD_CONST 2 ( '0' )				      		  bin = '0' + bin ;				    		bin = '0' + bin					  
10 RETURN_VALUE						      	      else :						    	    else :						  
							      		  bin = '1' + bin ;				    		bin = '1' + bin					  
4 >> 12 LOAD_CONST 3 ( '' )				      	      n = n >> 1 ;					    	    n = n | 1						  
14 STORE_FAST 1 ( bin )					      	  return bin ;						    	return bin						  
							      								    								  
5 16 SETUP_LOOP 50 ( to 68 )				      								    								  
>> 18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 COMPARE_OP 4 ( > )					      								    								  
24 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 4 ( 1 )					      								    								  
30 BINARY_AND						      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 38 LOAD_CONST 2 ( '0' )				      								    								  
40 LOAD_FAST 1 ( bin )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 1 ( bin )					      								    								  
46 JUMP_FORWARD 8 ( to 56 )				      								    								  
							      								    								  
9 >> 48 LOAD_CONST 5 ( '1' )				      								    								  
50 LOAD_FAST 1 ( bin )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 1 ( bin )					      								    								  
							      								    								  
10 >> 56 LOAD_FAST 0 ( n )				      								    								  
58 LOAD_CONST 4 ( 1 )					      								    								  
60 BINARY_RSHIFT					      								    								  
62 STORE_FAST 0 ( n )					      								    								  
64 JUMP_ABSOLUTE 18					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
11 >> 68 LOAD_FAST 1 ( bin )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X	      GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X		    GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X		  GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X
--							      --							    --								  --
Disassembly of <code object findPairs at 0x7fbac0e8bc90, file def findPairs ( arr1 , arr2 , n , m , x ) :		    def findPairs ( arr1 , arr2 , n , m , x = None ) :		  script_not_found : None
2 0 SETUP_LOOP 76 ( to 78 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , m ) :			    	    for j in range ( 0 , m ) :				  
4 LOAD_CONST 1 ( 0 )					      		  if ( arr1 [ i ] + arr2 [ j ] == x ) :		    		if arr1 [ i ] + arr2 [ j ] == x :		  
6 LOAD_FAST 2 ( n )					      		      print ( arr1 [ i ] , arr2 [ j ] )		    		    print ( arr1 [ i ] , arr2 [ j ] )		  
8 CALL_FUNCTION 2					      								    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 62 ( to 76 )				      								    								  
14 STORE_FAST 5 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 56 ( to 74 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( m )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 42 ( to 72 )				      								    								  
30 STORE_FAST 6 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( arr1 )				      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( arr2 )					      								    								  
40 LOAD_FAST 6 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 4 ( x )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 52 LOAD_GLOBAL 1 ( print )				      								    								  
54 LOAD_FAST 0 ( arr1 )					      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( arr2 )					      								    								  
62 LOAD_FAST 6 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 POP_TOP						      								    								  
70 JUMP_ABSOLUTE 28					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 JUMP_ABSOLUTE 12					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
Disassembly of <code object minPerimeter at 0x7fbac0e8de40, f def minPerimeter ( n ) :					    def minPerimeter ( n ) :					  failure : #Results: 4, 10
2 0 LOAD_GLOBAL 0 ( math )				      	  l = math.sqrt ( n )					    	l = math.sqrt ( n )					  
2 LOAD_METHOD 1 ( sqrt )				      	  sq = l * l						    	sq = l * l						  
4 LOAD_FAST 0 ( n )					      	  if ( sq == n ) :					    	if sq == n :						  
6 CALL_METHOD 1						      	      return l * 4					    	    return l * 4					  
8 STORE_FAST 1 ( l )					      	  else :						    	row = n / l						  
							      	      row = n / l					    	perimeter = 2 * l + row					  
3 10 LOAD_FAST 1 ( l )					      	      perimeter = 2 * ( l + row )			    	if n % l != 0 :						  
12 LOAD_FAST 1 ( l )					      	      if ( n % l != 0 ) :				    	    perimeter += 2					  
14 BINARY_MULTIPLY					      		  perimeter += 2				    	return perimeter					  
16 STORE_FAST 2 ( sq )					      	      return perimeter					    								  
							      								    								  
4 18 LOAD_FAST 2 ( sq )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
5 26 LOAD_FAST 1 ( l )					      								    								  
28 LOAD_CONST 1 ( 4 )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
7 >> 34 LOAD_FAST 0 ( n )				      								    								  
36 LOAD_FAST 1 ( l )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 STORE_FAST 3 ( row )					      								    								  
							      								    								  
8 42 LOAD_CONST 2 ( 2 )					      								    								  
44 LOAD_FAST 1 ( l )					      								    								  
46 LOAD_FAST 3 ( row )					      								    								  
48 BINARY_ADD						      								    								  
50 BINARY_MULTIPLY					      								    								  
52 STORE_FAST 4 ( perimeter )				      								    								  
							      								    								  
9 54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_FAST 1 ( l )					      								    								  
58 BINARY_MODULO					      								    								  
60 LOAD_CONST 3 ( 0 )					      								    								  
62 COMPARE_OP 3 ( != )					      								    								  
64 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
10 66 LOAD_FAST 4 ( perimeter )				      								    								  
68 LOAD_CONST 2 ( 2 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 4 ( perimeter )				      								    								  
							      								    								  
11 >> 74 LOAD_FAST 4 ( perimeter )			      								    								  
76 RETURN_VALUE						      								    								  
78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	      FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	    FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	  FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1
--							      --							    --								  --
Disassembly of <code object isSubset at 0x7fbac0e89d20, file  def isSubset ( arr1 , arr2 , m , n ) :			    def isSubset ( arr1 , arr2 , m , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 4 ( i )					      	  j = 0							    	j = 0							  _sa.test/FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHE
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  R_ARRAY_SET_1.py", line 38	 return 1     ^ Synt
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( m ) :				    	    for j in range ( m ) :				  axError: 'return' outside function
6 STORE_FAST 5 ( j )					      		  if ( arr2 [ i ] == arr1 [ j ] ) :		    		if arr2 [ i ] == arr1 [ j ] :			  
							      		      break					    		    break					  
4 8 SETUP_LOOP 64 ( to 74 )				      	      if ( j == m ) :					    	if j == m :						  
10 LOAD_GLOBAL 0 ( range )				      		  return 0					    	    return 0						  
12 LOAD_FAST 3 ( n )					      	  return 1						    return 1							  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 52 ( to 72 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 SETUP_LOOP 34 ( to 58 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 2 ( m )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 22 ( to 56 )				      								    								  
34 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( arr2 )				      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr1 )					      								    								  
44 LOAD_FAST 5 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
7 52 BREAK_LOOP						      								    								  
54 JUMP_ABSOLUTE 32					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 5 ( j )				      								    								  
60 LOAD_FAST 2 ( m )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
9 66 LOAD_CONST 1 ( 0 )					      								    								  
68 RETURN_VALUE						      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_CONST 2 ( 1 )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
Disassembly of <code object isDivisibleBy7 at 0x7fbac0e8d540, def isDivisibleBy7 ( num ) :				    def isDivisibleBy7 ( num ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( num )					      	  if num < 0 :						    	if num < 0 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	      return isDivisibleBy7 ( - num )			    	    return isDivisibleBy7 ( - num )			  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/DIVISI
4 COMPARE_OP 0 ( < )					      	  if ( num == 0 or num == 7 ) :				    	if num == 0 or num == 7 :				  BILITY_BY_7.py", line 52, in <module>	    if f_fil
6 POP_JUMP_IF_FALSE 18					      	      return True					    	    return True						  led(*parameters_set) == f_gold(*parameters_set):
							      	  if ( num < 10 ) :					    	if num < 10 :						   File "/home/ubuntu/TransCoder/models/eval/mt_sa_1
3 8 LOAD_GLOBAL 0 ( isDivisibleBy7 )			      	      return False					    	    return False					  000/tx8nnsvsdt/eval_scripts/dis_sa-python_sa.test/
10 LOAD_FAST 0 ( num )					      	  return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 	return isDivisibleBy7 ( num / 10 , 2 * ( num / 10 ) * 10  DIVISIBILITY_BY_7.py", line 29, in f_filled	  re
12 UNARY_NEGATIVE					      								    								  turn f_filled ( - num )   File "/home/ubuntu/Trans
14 CALL_FUNCTION 1					      								    								  Coder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scrip
16 RETURN_VALUE						      								    								  ts/dis_sa-python_sa.test/DIVISIBILITY_BY_7.py", li
							      								    								  ne 34, in f_filled	 return f_filled ( num / 10
4 >> 18 LOAD_FAST 0 ( num )				      								    								  , 2 * ( num / 10 ) * 10 ) TypeError: f_filled() ta
20 LOAD_CONST 1 ( 0 )					      								    								  kes 1 positional argument but 2 were given
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_TRUE 34					      								    								  
26 LOAD_FAST 0 ( num )					      								    								  
28 LOAD_CONST 2 ( 7 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
5 >> 34 LOAD_CONST 3 ( True )				      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 0 ( num )				      								    								  
40 LOAD_CONST 4 ( 10 )					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_CONST 5 ( False )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_GLOBAL 0 ( isDivisibleBy7 )		      								    								  
52 LOAD_FAST 0 ( num )					      								    								  
54 LOAD_CONST 4 ( 10 )					      								    								  
56 BINARY_TRUE_DIVIDE					      								    								  
58 LOAD_CONST 6 ( 2 )					      								    								  
60 LOAD_FAST 0 ( num )					      								    								  
62 LOAD_FAST 0 ( num )					      								    								  
64 LOAD_CONST 4 ( 10 )					      								    								  
66 BINARY_TRUE_DIVIDE					      								    								  
68 LOAD_CONST 4 ( 10 )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_SPARSE_NOT				      CHECK_GIVEN_MATRIX_SPARSE_NOT				    CHECK_GIVEN_MATRIX_SPARSE_NOT				  CHECK_GIVEN_MATRIX_SPARSE_NOT
--							      --							    --								  --
Disassembly of <code object isSparse at 0x7fbac0e89d20, file  def isSparse ( array , m , n ) :				    def isSparse ( array , m , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  counter = 0						    	counter = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( counter )				      	  for i in range ( 0 , m ) :				    	for i in range ( 0 , m ) :				  _sa.test/CHECK_GIVEN_MATRIX_SPARSE_NOT.py", line 3
							      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  2	return counter > m * n // 2	^ SyntaxErro
3 4 SETUP_LOOP 62 ( to 68 )				      		  if ( array [ i ] [ j ] == 0 ) :		    		if array [ i ] [ j ] == 0 :			  r: 'return' outside function
6 LOAD_GLOBAL 0 ( range )				      		      counter = counter + 1			    		    counter = counter + 1			  
8 LOAD_CONST 1 ( 0 )					      	  return ( counter > ( ( m * n ) // 2 ) )		    return counter > m * n // 2					  
10 LOAD_FAST 1 ( m )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 48 ( to 66 )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( array )				      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( counter )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 3 ( counter )				      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 16					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 3 ( counter )				      								    								  
70 LOAD_FAST 1 ( m )					      								    								  
72 LOAD_FAST 2 ( n )					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 BINARY_FLOOR_DIVIDE					      								    								  
80 COMPARE_OP 4 ( > )					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		      COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		    COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS			  COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS
--							      --							    --								  --
Disassembly of <code object findCount at 0x7fbac0e8de40, file def findCount ( str ) :					    def findCount ( str ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
							      	      if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i  	    if i == ord ( str [ i ] ) - ord ( 'a' ) or i == ord ( 
3 4 SETUP_LOOP 76 ( to 82 )				      		  result += 1					    		result += 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return result						    	return result						  
8 LOAD_GLOBAL 1 ( len )					      								    								  
10 LOAD_FAST 0 ( str )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 60 ( to 80 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_GLOBAL 2 ( ord )				      								    								  
26 LOAD_FAST 0 ( str )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_GLOBAL 2 ( ord )				      								    								  
36 LOAD_CONST 2 ( 'a' )					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_TRUE 70					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_GLOBAL 2 ( ord )				      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_GLOBAL 2 ( ord )				      								    								  
60 LOAD_CONST 3 ( 'A' )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 >> 70 LOAD_FAST 1 ( result )				      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 1 ( result )				      								    								  
78 JUMP_ABSOLUTE 18					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
6 >> 82 LOAD_FAST 1 ( result )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS		      <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS		    <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS		  <unk> DLE_OF_<unk> USING_MINIMUM_COMPARISONS
--							      --							    --								  --
Disassembly of <code object middleOfThree at 0x7fbac0e89d20,  def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , c ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( ( a < b and b < c ) or ( c < b and b < a ) ) :	    	if a < b and b < c or b < a :				  
2 LOAD_FAST 1 ( b )					      	      return b ;					    	    return b						  
4 COMPARE_OP 0 ( < )					      	  if ( ( b < a and a < c ) or ( c < a and a < b ) ) :	    	if b < a and a < c or b < a :				  
6 POP_JUMP_IF_FALSE 16					      	      return a ;					    	    return a < b					  
8 LOAD_FAST 1 ( b )					      	  else :						    	else :							  
10 LOAD_FAST 2 ( c )					      	      return c						    	    return c						  
12 COMPARE_OP 0 ( < )					      								    								  
14 POP_JUMP_IF_TRUE 32					      								    								  
>> 16 LOAD_FAST 2 ( c )					      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 COMPARE_OP 0 ( < )					      								    								  
22 POP_JUMP_IF_FALSE 36					      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
3 >> 32 LOAD_FAST 1 ( b )				      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
4 >> 36 LOAD_FAST 1 ( b )				      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 52					      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 2 ( c )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_TRUE 68					      								    								  
>> 52 LOAD_FAST 2 ( c )					      								    								  
54 LOAD_FAST 0 ( a )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 72					      								    								  
60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 1 ( b )					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
5 >> 68 LOAD_FAST 0 ( a )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 2 ( c )				      								    								  
74 RETURN_VALUE						      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
Disassembly of <code object findCombinations at 0x7fbac0e89d2 def findCombinations ( string , index , out ) :		    def findCombinations ( string , index , out ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( index )				      	  if index == len ( string ) :				    	if index == len ( string ) :				  
2 LOAD_GLOBAL 0 ( len )					      	      print ( out )					    	    print ( out )					  
4 LOAD_FAST 0 ( string )				      	  for i in range ( index , len ( string ) , 1 ) :	    	for i in range ( index , len ( string ) , 1 ) :		  
6 CALL_FUNCTION 1					      	      findCombinations ( string , i + 1 , out + "(" + strin 	    findCombinations ( string [ i + 1 : out + "(" + strin 
8 COMPARE_OP 2 ( == )					      								    								  
10 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 12 LOAD_GLOBAL 1 ( print )				      								    								  
14 LOAD_FAST 2 ( out )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 SETUP_LOOP 64 ( to 86 )				      								    								  
22 LOAD_GLOBAL 2 ( range )				      								    								  
24 LOAD_FAST 1 ( index )				      								    								  
26 LOAD_GLOBAL 0 ( len )				      								    								  
28 LOAD_FAST 0 ( string )				      								    								  
30 CALL_FUNCTION 1					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 CALL_FUNCTION 3					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 44 ( to 84 )				      								    								  
40 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 42 LOAD_GLOBAL 3 ( findCombinations )			      								    								  
44 LOAD_FAST 0 ( string )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 2 ( out )					      								    								  
54 LOAD_CONST 2 ( '(' )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 0 ( string )				      								    								  
60 LOAD_FAST 1 ( index )				      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 BUILD_SLICE 2					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_CONST 3 ( ')' )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 3					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 38					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
Disassembly of <code object minXOR at 0x7fbac0e8d540, file "< def minXOR ( arr , n ) :					    def minXOR ( arr , n ) :					  success : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  minXor = int ( sys.float_info.max )			    	minXor = int ( sys.float_info.max )			  
4 CALL_METHOD 0						      	  val = 0						    	val = 0							  
6 POP_TOP						      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
							      	      val = arr [ i ] ^ arr [ i + 1 ] ;			    	    val = arr [ i ] ^ arr [ i + 1 ]			  
3 8 LOAD_GLOBAL 1 ( int )				      	      minXor = min ( minXor , val ) ;			    	    minXor = min ( minXor , val )			  
10 LOAD_GLOBAL 2 ( sys )				      	  return minXor						    	return minXor						  
12 LOAD_ATTR 3 ( float_info )				      								    								  
14 LOAD_ATTR 4 ( max )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 STORE_FAST 2 ( minXor )				      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 3 ( val )					      								    								  
							      								    								  
5 24 SETUP_LOOP 52 ( to 78 )				      								    								  
26 LOAD_GLOBAL 5 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 34 ( to 76 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_XOR						      								    								  
62 STORE_FAST 3 ( val )					      								    								  
							      								    								  
7 64 LOAD_GLOBAL 6 ( min )				      								    								  
66 LOAD_FAST 2 ( minXor )				      								    								  
68 LOAD_FAST 3 ( val )					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 STORE_FAST 2 ( minXor )				      								    								  
74 JUMP_ABSOLUTE 40					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 2 ( minXor )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW      DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW	    DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW	  DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW
--							      --							    --								  --
Disassembly of <code object find_difference at 0x7fbac0e8bc90 def find_difference ( arr , n , m ) :			    def find_difference ( arr , n , m ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  max = 0 ; min = 0					    	max = 0							  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 3 ( max )					      	  arr.sort ( ) ;					    	arr.sort ( )						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/DIFFER
4 LOAD_CONST 1 ( 0 )					      	  j = n - 1						    	j = n - 1						  ENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW
6 STORE_FAST 4 ( min )					      	  for i in range ( m ) :				    	for i in range ( m ) :					  .py", line 54, in <module>	 if f_filled(*parame
							      	      min += arr [ i ]					    	    min += arr [ i ]					  ters_set) == f_gold(*parameters_set):	  File "/hom
3 8 LOAD_FAST 0 ( arr )					      	      max += arr [ j ]					    	    max += arr [ j ]					  e/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8nnsv
10 LOAD_METHOD 0 ( sort )				      	      j = j - 1						    	    j = j - 1						  sdt/eval_scripts/dis_sa-python_sa.test/DIFFERENCE_
12 CALL_METHOD 0					      	  return ( max - min )					    	return max - min					  MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW.py",
14 POP_TOP						      								    								   line 33, in f_filled	    min += arr [ i ] Unbound
							      								    								  LocalError: local variable 'min' referenced before
4 16 LOAD_FAST 1 ( n )					      								    								   assignment
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 24 SETUP_LOOP 48 ( to 74 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_FAST 2 ( m )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 36 ( to 72 )				      								    								  
36 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( min )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 6 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( min )					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( max )				      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 5 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( max )					      								    								  
							      								    								  
8 62 LOAD_FAST 5 ( j )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 STORE_FAST 5 ( j )					      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 3 ( max )				      								    								  
76 LOAD_FAST 4 ( min )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			      DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			    DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			  DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE
--							      --							    --								  --
Disassembly of <code object count at 0x7fbac0e89d20, file "<d def count ( S , m , n ) :					    def count ( S , m , n ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( n < 0 ) :					    	if n < 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 0 ;					    	    return 0						  
							      	  if ( m <= 0 and n >= 1 ) :				    	if m <= 0 and n >= 1 :					  
3 8 LOAD_CONST 2 ( 1 )					      	      return 0						    	    return 0						  
10 RETURN_VALUE						      	  return count ( S , m - 1 , n ) + count ( S , m , n - S [  	return count ( S , m - 1 , n ) , count ( S , m , n - 1 ]  
							      								    								  
4 >> 12 LOAD_FAST 2 ( n )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 0 ( < )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 1 ( 0 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_FAST 1 ( m )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 1 ( <= )					      								    								  
30 POP_JUMP_IF_FALSE 44					      								    								  
32 LOAD_FAST 2 ( n )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 COMPARE_OP 5 ( >= )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 40 LOAD_CONST 1 ( 0 )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
8 >> 44 LOAD_GLOBAL 0 ( count )				      								    								  
46 LOAD_FAST 0 ( S )					      								    								  
48 LOAD_FAST 1 ( m )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 2 ( n )					      								    								  
56 CALL_FUNCTION 3					      								    								  
58 LOAD_GLOBAL 0 ( count )				      								    								  
60 LOAD_FAST 0 ( S )					      								    								  
62 LOAD_FAST 1 ( m )					      								    								  
64 LOAD_FAST 2 ( n )					      								    								  
66 LOAD_FAST 0 ( S )					      								    								  
68 LOAD_FAST 1 ( m )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 CALL_FUNCTION 3					      								    								  
80 BINARY_ADD						      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND
--							      --							    --								  --
Disassembly of <code object findMissing at 0x7fbac0e8bc90, fi def findMissing ( a , b , n , m ) :			    def findMissing ( a , b , n , m ) :				  script_not_found : None
2 0 SETUP_LOOP 80 ( to 82 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
4 LOAD_FAST 2 ( n )					      		  if ( a [ i ] == b [ j ] ) :			    		if a [ i ] == b [ j ] :				  
6 CALL_FUNCTION 1					      		      break					    		    break					  
8 GET_ITER						      	      if ( j == m - 1 ) :				    	if j == m - 1 :						  
>> 10 FOR_ITER 68 ( to 80 )				      		  print ( a [ i ] , end = " " )			    	    print ( a [ i ] , end = " " )			  
12 STORE_FAST 4 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 34 ( to 50 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 3 ( m )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 22 ( to 48 )				      								    								  
26 STORE_FAST 5 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( a )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( b )					      								    								  
36 LOAD_FAST 5 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 44 BREAK_LOOP						      								    								  
46 JUMP_ABSOLUTE 24					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
6 >> 50 LOAD_FAST 5 ( j )				      								    								  
52 LOAD_FAST 3 ( m )					      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
7 62 LOAD_GLOBAL 1 ( print )				      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 2 ( ' ' )					      								    								  
72 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
74 CALL_FUNCTION_KW 2					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 10					      								    								  
>> 80 POP_BLOCK						      								    								  
>> 82 LOAD_CONST 0 ( None )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		      MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		    MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		  MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY
--							      --							    --								  --
Disassembly of <code object maxDistance at 0x7fbac0e8de40, fi def maxDistance ( arr , n ) :				    def maxDistance ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_MAP 0						      	  mp = { }						    	mp = { }						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( mp )					      	  maxDict = 0						    	maxDict = 0						  _sa.test/MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  ARRAY.py", line 35	 maxDict = max ( maxDict , i
3 4 LOAD_CONST 1 ( 0 )					      	      if arr [ i ] not in mp.keys ( ) :			    	    if arr [ i ] not in mp.keys ( ) :			   [ mp [ arr [ i ] ] )
6 STORE_FAST 3 ( maxDict )				      		  mp [ arr [ i ] ] = i				    		mp [ arr [ i ] ] = i				  			 ^ SyntaxError: invalid synt
							      	      else :						    	    else :						  ax
4 8 SETUP_LOOP 68 ( to 78 )				      		  maxDict = max ( maxDict , i - mp [ arr [ i ] ] )  		maxDict = max ( maxDict , i [ mp [ arr [ i ] ] )  
10 LOAD_GLOBAL 0 ( range )				      	  return maxDict					    	return maxDict						  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 56 ( to 76 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( arr )				      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 2 ( mp )					      								    								  
30 LOAD_METHOD 1 ( keys )				      								    								  
32 CALL_METHOD 0					      								    								  
34 COMPARE_OP 7 ( not in )				      								    								  
36 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( i )					      								    								  
40 LOAD_FAST 2 ( mp )					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_SUBSCR						      								    								  
50 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 52 LOAD_GLOBAL 2 ( max )				      								    								  
54 LOAD_FAST 3 ( maxDict )				      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 LOAD_FAST 2 ( mp )					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 STORE_FAST 3 ( maxDict )				      								    								  
74 JUMP_ABSOLUTE 18					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_FAST 3 ( maxDict )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_ZEROES_END_ARRAY					      MOVE_ZEROES_END_ARRAY					    MOVE_ZEROES_END_ARRAY					  MOVE_ZEROES_END_ARRAY
--							      --							    --								  --
Disassembly of <code object pushZerosToEnd at 0x7fbac0e89d20, def pushZerosToEnd ( arr , n ) :				    def pushZerosToEnd ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if arr [ i ] != 0 :				    	    if arr [ i ] != 0 :					  
3 4 SETUP_LOOP 48 ( to 54 )				      		  arr [ count ] = arr [ i ]			    		arr [ count ] = arr [ i ]			  
6 LOAD_GLOBAL 0 ( range )				      		  count += 1					    		count += 1					  
8 LOAD_FAST 1 ( n )					      	  while count < n :					    	while count < n :					  
10 CALL_FUNCTION 1					      	      arr [ count ] = 0					    	    arr [ count ] = 0					  
12 GET_ITER						      	      count += 1					    	    count += 1						  
>> 14 FOR_ITER 36 ( to 52 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 3 ( != )					      								    								  
28 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 2 ( count )				      								    								  
40 STORE_SUBSCR						      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 2 ( count )				      								    								  
50 JUMP_ABSOLUTE 14					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 SETUP_LOOP 28 ( to 84 )				      								    								  
>> 56 LOAD_FAST 2 ( count )				      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
8 64 LOAD_CONST 1 ( 0 )					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 2 ( count )				      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
9 72 LOAD_FAST 2 ( count )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 2 ( count )				      								    								  
80 JUMP_ABSOLUTE 56					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
Disassembly of <code object solve at 0x7fbac0e89d20, file "<d def solve ( arr , n ) :					    def solve ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_METHOD 0 ( sort )				      	  a = 0 ; b = 0						    	a = 0							  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/MINIMU
4 CALL_METHOD 0						      	  for i in range ( n ) :				    	for i in range ( n ) :					  M_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY.py", line 54
6 POP_TOP						      	      if ( i % 2 != 0 ) :				    	    if i % 2 != 0 :					  , in <module>	    if f_filled(*parameters_set) ==
							      		  a = a * 10 + arr [ i ]			    		a = a * 10 + arr [ i ]				  f_gold(*parameters_set):   File "/home/ubuntu/Tran
3 8 LOAD_CONST 1 ( 0 )					      	      else :						    	    else :						  sCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scri
10 STORE_FAST 2 ( a )					      		  b = b * 10 + arr [ i ]			    		b = b * 10 + arr [ i ]				  pts/dis_sa-python_sa.test/MINIMUM_SUM_TWO_NUMBERS_
12 LOAD_CONST 1 ( 0 )					      	  return a + b						    	return a + b						  FORMED_DIGITS_ARRAY.py", line 35, in f_filled
14 STORE_FAST 3 ( b )					      								    								  b = b * 10 + arr [ i ] UnboundLocalError: local va
							      								    								  riable 'b' referenced before assignment
4 16 SETUP_LOOP 62 ( to 80 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 50 ( to 78 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 4 ( i )					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 COMPARE_OP 3 ( != )					      								    								  
40 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( a )					      								    								  
44 LOAD_CONST 3 ( 10 )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( a )					      								    								  
58 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 60 LOAD_FAST 3 ( b )				      								    								  
62 LOAD_CONST 3 ( 10 )					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( b )					      								    								  
76 JUMP_ABSOLUTE 26					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_FAST 2 ( a )				      								    								  
82 LOAD_FAST 3 ( b )					      								    								  
84 BINARY_ADD						      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS	      PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS	    PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS		  PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS
--							      --							    --								  --
Disassembly of <code object printNumbers at 0x7fbac0e8de40, f def printNumbers ( numbers ) :				    def printNumbers ( numbers ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( map )				      	  numbers = map ( str , numbers )			    	numbers = map ( str , numbers )				  
2 LOAD_GLOBAL 1 ( str )					      	  result = [ ]						    	result = [ ]						  
4 LOAD_FAST 0 ( numbers )				      	  for num in numbers :					    	for num in numbers :					  
6 CALL_FUNCTION 2					      	      if ( '1' in num and '2' in num and '3' in num ) :	    	    if '1' in num and '2' in num and '3' in num :	  
8 STORE_FAST 0 ( numbers )				      		  result.append ( num )				    		result.append ( num )				  
							      	  if not result :					    	if not result :						  
3 10 BUILD_LIST 0					      	      result = [ '-1' ]					    	    result = [ '-1' ]					  
12 STORE_FAST 1 ( result )				      	  return sorted ( result ) ;				    return sorted ( result )					  
							      								    								  
4 14 SETUP_LOOP 46 ( to 62 )				      								    								  
16 LOAD_FAST 0 ( numbers )				      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 38 ( to 60 )				      								    								  
22 STORE_FAST 2 ( num )					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( '1' )				      								    								  
26 LOAD_FAST 2 ( num )					      								    								  
28 COMPARE_OP 6 ( in )					      								    								  
30 POP_JUMP_IF_FALSE 20					      								    								  
32 LOAD_CONST 2 ( '2' )					      								    								  
34 LOAD_FAST 2 ( num )					      								    								  
36 COMPARE_OP 6 ( in )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
40 LOAD_CONST 3 ( '3' )					      								    								  
42 LOAD_FAST 2 ( num )					      								    								  
44 COMPARE_OP 6 ( in )					      								    								  
46 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 48 LOAD_FAST 1 ( result )				      								    								  
50 LOAD_METHOD 2 ( append )				      								    								  
52 LOAD_FAST 2 ( num )					      								    								  
54 CALL_METHOD 1					      								    								  
56 POP_TOP						      								    								  
58 JUMP_ABSOLUTE 20					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 1 ( result )				      								    								  
64 POP_JUMP_IF_TRUE 72					      								    								  
							      								    								  
8 66 LOAD_CONST 4 ( '-1' )				      								    								  
68 BUILD_LIST 1						      								    								  
70 STORE_FAST 1 ( result )				      								    								  
							      								    								  
9 >> 72 LOAD_GLOBAL 3 ( sorted )			      								    								  
74 LOAD_FAST 1 ( result )				      								    								  
76 CALL_FUNCTION 1					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
Disassembly of <code object nonFibonacci at 0x7fbac0e8de40, f def nonFibonacci ( n ) :					    def nonFibonacci ( n ) :					  timeout : None
2 0 LOAD_CONST 1 ( 1 )					      	  prevPrev = 1						    	prevPrev = 1						  
2 STORE_FAST 1 ( prevPrev )				      	  prev = 2						    	prev = 2						  
							      	  curr = 3						    	curr = 3						  
3 4 LOAD_CONST 2 ( 2 )					      	  while n > 0 :						    	while n > 0 :						  
6 STORE_FAST 2 ( prev )					      	      prevPrev = prev					    	    prevPrev = prev					  
							      	      prev = curr					    	    prev = prevPrev + prev				  
4 8 LOAD_CONST 3 ( 3 )					      	      curr = prevPrev + prev				    	    n = n - ( curr - prev ) - 1				  
10 STORE_FAST 3 ( curr )				      	      n = n - ( curr - prev - 1 )			    	n = n + ( curr - prev ) - 1				  
							      	  n = n + ( curr - prev - 1 )				    	return prev + n						  
5 12 SETUP_LOOP 44 ( to 58 )				      	  return prev + n					    								  
>> 14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 22 LOAD_FAST 2 ( prev )				      								    								  
24 STORE_FAST 1 ( prevPrev )				      								    								  
							      								    								  
7 26 LOAD_FAST 3 ( curr )				      								    								  
28 STORE_FAST 2 ( prev )				      								    								  
							      								    								  
8 30 LOAD_FAST 1 ( prevPrev )				      								    								  
32 LOAD_FAST 2 ( prev )					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 3 ( curr )				      								    								  
							      								    								  
9 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_FAST 3 ( curr )					      								    								  
42 LOAD_FAST 2 ( prev )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 STORE_FAST 0 ( n )					      								    								  
54 JUMP_ABSOLUTE 14					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
10 >> 58 LOAD_FAST 0 ( n )				      								    								  
60 LOAD_FAST 3 ( curr )					      								    								  
62 LOAD_FAST 2 ( prev )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 0 ( n )					      								    								  
							      								    								  
11 74 LOAD_FAST 2 ( prev )				      								    								  
76 LOAD_FAST 0 ( n )					      								    								  
78 BINARY_ADD						      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX				      PROGRAM_PRINT_IDENTITY_MATRIX				    PROGRAM_PRINT_IDENTITY_MATRIX				  PROGRAM_PRINT_IDENTITY_MATRIX
--							      --							    --								  --
Disassembly of <code object Identity at 0x7fbac0e89d20, file  def Identity ( size ) :					    def Identity ( size ) :					  script_not_found : None
2 0 SETUP_LOOP 78 ( to 80 )				      	  for row in range ( 0 , size ) :			    	for row in range ( 0 , size ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for col in range ( 0 , size ) :			    	    for col in range ( 0 , size ) :			  
4 LOAD_CONST 1 ( 0 )					      		  if ( row == col ) :				    		if row == col :					  
6 LOAD_FAST 0 ( size )					      		      print ( "1 " , end = " " )		    		    print ( '1 ' , end = ' ' )			  
8 CALL_FUNCTION 2					      		  else :					    		else :						  
10 GET_ITER						      		      print ( "0 " , end = " " )		    		    print ( '0 ' , end = ' ' )			  
>> 12 FOR_ITER 64 ( to 78 )				      	      print ( )						    	    print ( )						  
14 STORE_FAST 1 ( row )					      								    								  
							      								    								  
3 16 SETUP_LOOP 52 ( to 70 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 0 ( size )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 38 ( to 68 )				      								    								  
30 STORE_FAST 2 ( col )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( row )				      								    								  
34 LOAD_FAST 2 ( col )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
5 40 LOAD_GLOBAL 1 ( print )				      								    								  
42 LOAD_CONST 2 ( '1 ' )				      								    								  
44 LOAD_CONST 3 ( ' ' )					      								    								  
46 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
48 CALL_FUNCTION_KW 2					      								    								  
50 POP_TOP						      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( print )				      								    								  
56 LOAD_CONST 5 ( '0 ' )				      								    								  
58 LOAD_CONST 3 ( ' ' )					      								    								  
60 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
62 CALL_FUNCTION_KW 2					      								    								  
64 POP_TOP						      								    								  
66 JUMP_ABSOLUTE 28					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
8 >> 70 LOAD_GLOBAL 1 ( print )				      								    								  
72 CALL_FUNCTION 0					      								    								  
74 POP_TOP						      								    								  
76 JUMP_ABSOLUTE 12					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN
--							      --							    --								  --
Disassembly of <code object minJumps at 0x7fbac0e8de40, file  def minJumps ( a , b , d ) :				    def minJumps ( a , b , d ) :				  success : None
2 0 LOAD_FAST 0 ( a )					      	  temp = a						    	temp = a						  
2 STORE_FAST 3 ( temp )					      	  a = min ( a , b )					    	a = min ( a , b )					  
							      	  b = max ( temp , b )					    	b = max ( temp , b )					  
3 4 LOAD_GLOBAL 0 ( min )				      	  if ( d >= b ) :					    	if d >= b :						  
6 LOAD_FAST 0 ( a )					      	      return ( d + b - 1 ) / b				    	    return ( d + b - 1 ) / b				  
8 LOAD_FAST 1 ( b )					      	  if ( d == 0 ) :					    	if d == 0 :						  
10 CALL_FUNCTION 2					      	      return 0						    	    return 0						  
12 STORE_FAST 0 ( a )					      	  if ( d == a ) :					    	if d == a :						  
							      	      return 1						    	    return 1						  
4 14 LOAD_GLOBAL 1 ( max )				      	  return 2						    	return 2						  
16 LOAD_FAST 3 ( temp )					      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 STORE_FAST 1 ( b )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( d )					      								    								  
26 LOAD_FAST 1 ( b )					      								    								  
28 COMPARE_OP 5 ( >= )					      								    								  
30 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( d )					      								    								  
34 LOAD_FAST 1 ( b )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
7 >> 48 LOAD_FAST 2 ( d )				      								    								  
50 LOAD_CONST 2 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_CONST 2 ( 0 )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 2 ( d )				      								    								  
62 LOAD_FAST 0 ( a )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
10 68 LOAD_CONST 1 ( 1 )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
11 >> 72 LOAD_CONST 3 ( 2 )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_MAJORITY_ELEMENT				      CHECK_ARRAY_MAJORITY_ELEMENT				    CHECK_ARRAY_MAJORITY_ELEMENT				  CHECK_ARRAY_MAJORITY_ELEMENT
--							      --							    --								  --
Disassembly of <code object isMajority at 0x7fbac0e8de40, fil def isMajority ( a ) :					    def isMajority ( a ) :					  script_not_found : None
2 0 BUILD_MAP 0						      	  mp = { }						    	mp = { }						  
2 STORE_FAST 1 ( mp )					      	  for i in a :						    	for i in a :						  
							      	      if i in mp : mp [ i ] += 1			    	    if i in mp : mp [ i ] += 1				  
3 4 SETUP_LOOP 46 ( to 52 )				      	      else : mp [ i ] = 1				    	    else : mp [ i ] = 1					  
6 LOAD_FAST 0 ( a )					      	  for x in mp :						    	for x in mp :						  
8 GET_ITER						      	      if mp [ x ] >= len ( a ) // 2 :			    	    if mp [ x ] >= len ( a ) // 2 :			  
>> 10 FOR_ITER 38 ( to 50 )				      		  return True					    		return True					  
12 STORE_FAST 2 ( i )					      	  return False						    	return False						  
							      								    								  
4 14 LOAD_FAST 2 ( i )					      								    								  
16 LOAD_FAST 1 ( mp )					      								    								  
18 COMPARE_OP 6 ( in )					      								    								  
20 POP_JUMP_IF_FALSE 40					      								    								  
22 LOAD_FAST 1 ( mp )					      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 DUP_TOP_TWO						      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 INPLACE_ADD						      								    								  
34 ROT_THREE						      								    								  
36 STORE_SUBSCR						      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
5 >> 40 LOAD_CONST 1 ( 1 )				      								    								  
42 LOAD_FAST 1 ( mp )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 10					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 SETUP_LOOP 36 ( to 90 )				      								    								  
54 LOAD_FAST 1 ( mp )					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 28 ( to 88 )				      								    								  
60 STORE_FAST 3 ( x )					      								    								  
							      								    								  
7 62 LOAD_FAST 1 ( mp )					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_GLOBAL 0 ( len )				      								    								  
70 LOAD_FAST 0 ( a )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 LOAD_CONST 2 ( 2 )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 COMPARE_OP 5 ( >= )					      								    								  
80 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
8 82 LOAD_CONST 3 ( True )				      								    								  
84 RETURN_VALUE						      								    								  
86 JUMP_ABSOLUTE 58					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
9 >> 90 LOAD_CONST 4 ( False )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES
--							      --							    --								  --
Disassembly of <code object countSol at 0x7fbac0e8d540, file  def countSol ( coeff , start , end , rhs ) :		    def countSol ( coeff , start , end , rhs ) :		  script_not_found : None
2 0 LOAD_FAST 3 ( rhs )					      	  if ( rhs == 0 ) :					    	if rhs == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  result = 0						    	result = 0						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( start , end + 1 ) :			    	for i in range ( start , end + 1 ) :			  
							      	      if ( coeff [ i ] <= rhs ) :			    	    if coeff [ i ] <= rhs :				  
3 8 LOAD_CONST 2 ( 1 )					      		  result += countSol ( coeff , i , end , rhs - coef 		result += countSol ( coeff , i , end , rhs - coef 
10 RETURN_VALUE						      	  return result						    return result						  
							      								    								  
4 >> 12 LOAD_CONST 1 ( 0 )				      								    								  
14 STORE_FAST 4 ( result )				      								    								  
							      								    								  
5 16 SETUP_LOOP 60 ( to 78 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 1 ( start )				      								    								  
22 LOAD_FAST 2 ( end )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 42 ( to 76 )				      								    								  
34 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 0 ( coeff )				      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( rhs )					      								    								  
44 COMPARE_OP 1 ( <= )					      								    								  
46 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( result )				      								    								  
50 LOAD_GLOBAL 1 ( countSol )				      								    								  
52 LOAD_FAST 0 ( coeff )				      								    								  
54 LOAD_FAST 5 ( i )					      								    								  
56 LOAD_FAST 2 ( end )					      								    								  
58 LOAD_FAST 3 ( rhs )					      								    								  
60 LOAD_FAST 0 ( coeff )				      								    								  
62 LOAD_FAST 5 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 CALL_FUNCTION 4					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 4 ( result )				      								    								  
74 JUMP_ABSOLUTE 32					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 4 ( result )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE
--							      --							    --								  --
Disassembly of <code object checkCount at 0x7fbac0e8de40, fil def checkCount ( arr , n , k ) :				    def checkCount ( arr , n , k ) :				  success : identical to gold
2 0 SETUP_LOOP 78 ( to 80 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    	    count = 0						  
4 LOAD_FAST 1 ( n )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
6 CALL_FUNCTION 1					      		  if arr [ j ] == arr [ i ] :			    		if arr [ j ] == arr [ i ] :			  
8 GET_ITER						      		      count += 1				    		    count += 1					  
>> 10 FOR_ITER 66 ( to 78 )				      		  if count > 2 * k :				    		if count > 2 * k :				  
12 STORE_FAST 3 ( i )					      		      return False				    		    return False				  
							      	  return True						    	return True						  
3 14 LOAD_CONST 1 ( 0 )					      								    								  
16 STORE_FAST 4 ( count )				      								    								  
							      								    								  
4 18 SETUP_LOOP 56 ( to 76 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 44 ( to 74 )				      								    								  
30 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( count )				      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 4 ( count )				      								    								  
							      								    								  
7 >> 56 LOAD_FAST 4 ( count )				      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 LOAD_FAST 2 ( k )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
8 68 LOAD_CONST 4 ( False )				      								    								  
70 RETURN_VALUE						      								    								  
72 JUMP_ABSOLUTE 28					      								    								  
>> 74 POP_BLOCK						      								    								  
>> 76 JUMP_ABSOLUTE 10					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_CONST 5 ( True )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			      SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			    SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			  SUM_MANHATTAN_DISTANCES_PAIRS_POINTS
--							      --							    --								  --
Disassembly of <code object distancesum at 0x7fbac0e8d540, fi def distancesum ( x , y , n ) :				    def distancesum ( x , y , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( sum )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.test/SUM_MANHATTAN_DISTANCES_PAIRS_POINTS.py",
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			   line 30     return sum     ^ SyntaxError: 'return
3 4 SETUP_LOOP 84 ( to 90 )				      		  sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i  		sum += abs ( x [ i ] - x [ j ] ) + abs ( y [ i ]  ' outside function
6 LOAD_GLOBAL 0 ( range )				      	  return sum						    return sum							  
8 LOAD_FAST 2 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 72 ( to 88 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 66 ( to 86 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 4 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 2 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 48 ( to 84 )				      								    								  
36 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 3 ( sum )				      								    								  
40 LOAD_GLOBAL 1 ( abs )				      								    								  
42 LOAD_FAST 0 ( x )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( x )					      								    								  
50 LOAD_FAST 5 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_GLOBAL 1 ( abs )				      								    								  
60 LOAD_FAST 1 ( y )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( y )					      								    								  
68 LOAD_FAST 5 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_ADD						      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 3 ( sum )					      								    								  
82 JUMP_ABSOLUTE 34					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 JUMP_ABSOLUTE 14					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
6 >> 90 LOAD_FAST 3 ( sum )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES			  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES
--							      --							    --								  --
Disassembly of <code object reorder at 0x7fbac0e8de40, file " def reorder ( arr , index , n ) :				    def reorder ( arr , index , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  temp = [ 0 ] * n ;					    	temp = [ 0 ] * n					  
2 BUILD_LIST 1						      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 LOAD_FAST 2 ( n )					      	      temp [ index [ i ] ] = arr [ i ]			    	    temp [ index [ i ] ] = arr [ i ]			  
6 BINARY_MULTIPLY					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
8 STORE_FAST 3 ( temp )					      	      arr [ i ] = temp [ i ]				    	    arr [ i ] = temp [ i ]				  
							      	      index [ i ] = i					    	    index [ i ] = i					  
3 10 SETUP_LOOP 34 ( to 46 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 CALL_FUNCTION 2					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( arr )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 3 ( temp )					      								    								  
34 LOAD_FAST 1 ( index )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 STORE_SUBSCR						      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 SETUP_LOOP 38 ( to 86 )				      								    								  
48 LOAD_GLOBAL 0 ( range )				      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 LOAD_FAST 2 ( n )					      								    								  
54 CALL_FUNCTION 2					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 24 ( to 84 )				      								    								  
60 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 62 LOAD_FAST 3 ( temp )				      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
7 74 LOAD_FAST 4 ( i )					      								    								  
76 LOAD_FAST 1 ( index )				      								    								  
78 LOAD_FAST 4 ( i )					      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 58					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
Disassembly of <code object rotateMatrix at 0x7fbac0e8d540, f def rotateMatrix ( mat ) :				    def rotateMatrix ( mat ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( N )					      	  i = N - 1 ;						    	i = N - 1						  
2 LOAD_CONST 1 ( 1 )					      	  while ( i >= 0 ) :					    	while i >= 0 :						  
4 BINARY_SUBTRACT					      	      j = N - 1 ;					    	    j = N - 1						  
6 STORE_FAST 1 ( i )					      	      while ( j >= 0 ) :				    	    while j >= 0 :					  
							      		  print ( mat [ i ] [ j ] , end = " " ) ;	    		print ( mat [ i ] [ j ] , end = ' ' )		  
3 8 SETUP_LOOP 76 ( to 86 )				      		  j = j - 1 ;					    		j - 1						  
>> 10 LOAD_FAST 1 ( i )					      	      print ( ) ;					    	    print ( )						  
12 LOAD_CONST 2 ( 0 )					      	      i = i - 1 ;					    	    i = i - 1						  
14 COMPARE_OP 5 ( >= )					      								    								  
16 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
4 18 LOAD_GLOBAL 0 ( N )				      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 STORE_FAST 2 ( j )					      								    								  
							      								    								  
5 26 SETUP_LOOP 40 ( to 68 )				      								    								  
>> 28 LOAD_FAST 2 ( j )					      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 COMPARE_OP 5 ( >= )					      								    								  
34 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
6 36 LOAD_GLOBAL 1 ( print )				      								    								  
38 LOAD_FAST 0 ( mat )					      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 3 ( ' ' )					      								    								  
50 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
52 CALL_FUNCTION_KW 2					      								    								  
54 POP_TOP						      								    								  
							      								    								  
7 56 LOAD_FAST 2 ( j )					      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 STORE_FAST 2 ( j )					      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
8 >> 68 LOAD_GLOBAL 1 ( print )				      								    								  
70 CALL_FUNCTION 0					      								    								  
72 POP_TOP						      								    								  
							      								    								  
9 74 LOAD_FAST 1 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 STORE_FAST 1 ( i )					      								    								  
82 JUMP_ABSOLUTE 10					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_FUNCTIONS					      RECURSIVE_FUNCTIONS					    RECURSIVE_FUNCTIONS						  RECURSIVE_FUNCTIONS
--							      --							    --								  --
Disassembly of <code object tower at 0x7fbac0e89d20, file "<d def tower ( n , sourcePole , destinationPole , auxiliaryPole  def tower ( n , sourcePole , destinationPoPoPoPoPoPoPoPoPoPoP script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  if ( 0 == n ) :					    	print ( "Move the disk" , sourcePole , destinationPole )  
2 LOAD_FAST 0 ( n )					      	      return						    	print ( "Move the disk" , sourcePole , "from" , sourcePol 
4 COMPARE_OP 2 ( == )					      	  tower ( n - 1 , sourcePole , auxiliaryPole , destinationP 	tower ( n - 1 , auxiliaryPoPole , destinationPoPole , des 
6 POP_JUMP_IF_FALSE 12					      	  print ( "Move the disk" , sourcePole , "from" , sourcePol 								  
							      	  tower ( n - 1 , auxiliaryPole , destinationPole , sourceP 								  
3 8 LOAD_CONST 0 ( None )				      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_GLOBAL 0 ( tower )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_FAST 1 ( sourcePole )				      								    								  
22 LOAD_FAST 3 ( auxiliaryPole )			      								    								  
24 LOAD_FAST 2 ( destinationPole )			      								    								  
26 CALL_FUNCTION 4					      								    								  
28 POP_TOP						      								    								  
							      								    								  
5 30 LOAD_GLOBAL 1 ( print )				      								    								  
32 LOAD_CONST 3 ( 'Move the disk' )			      								    								  
34 LOAD_FAST 1 ( sourcePole )				      								    								  
36 LOAD_CONST 4 ( 'from' )				      								    								  
38 LOAD_FAST 1 ( sourcePole )				      								    								  
40 LOAD_CONST 5 ( 'to' )				      								    								  
42 LOAD_FAST 2 ( destinationPole )			      								    								  
44 CALL_FUNCTION 6					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 48 LOAD_GLOBAL 0 ( tower )				      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_FAST 3 ( auxiliaryPole )			      								    								  
58 LOAD_FAST 2 ( destinationPole )			      								    								  
60 LOAD_FAST 1 ( sourcePole )				      								    								  
62 CALL_FUNCTION 4					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
Disassembly of <code object firstNonRepeating at 0x7fbac0e8d5 def firstNonRepeating ( arr , n ) :			    def firstNonRepeating ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 84 ( to 86 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      j = 0						    	    j = 0						  _sa.test/NON_REPEATING_ELEMENT.py", line 38	  re
4 LOAD_FAST 1 ( n )					      	      while ( j < n ) :					    	    while j < n :					  turn - 1     ^ SyntaxError: 'return' outside funct
6 CALL_FUNCTION 1					      		  if ( i != j and arr [ i ] == arr [ j ] ) :	    		if i != j and arr [ i ] == arr [ j ] :		  ion
8 GET_ITER						      		      break					    		    break					  
>> 10 FOR_ITER 72 ( to 84 )				      		  j += 1					    		j += 1						  
12 STORE_FAST 2 ( i )					      	      if ( j == n ) :					    	if j == n :						  
							      		  return arr [ i ]				    	    return arr [ i ]					  
3 14 LOAD_CONST 1 ( 0 )					      	  return - 1						    return - 1							  
16 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 18 SETUP_LOOP 46 ( to 66 )				      								    								  
>> 20 LOAD_FAST 3 ( j )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_FAST 3 ( j )					      								    								  
32 COMPARE_OP 3 ( != )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 52 BREAK_LOOP						      								    								  
							      								    								  
7 >> 54 LOAD_FAST 3 ( j )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( j )					      								    								  
62 JUMP_ABSOLUTE 20					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
8 >> 66 LOAD_FAST 3 ( j )				      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
9 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 RETURN_VALUE						      								    								  
82 JUMP_ABSOLUTE 10					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_CONST 3 ( - 1 )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES
--							      --							    --								  --
Disassembly of <code object maxvolume at 0x7fbac0e8d540, file def maxvolume ( s ) :					    def maxvolume ( s ) :					  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  maxvalue = 0						    	maxvalue = 0						  
2 STORE_FAST 1 ( maxvalue )				      	  i = 1							    	i = 1							  
							      	  for i in range ( s - 1 ) :				    	for i in range ( s - 1 ) :				  
3 4 LOAD_CONST 2 ( 1 )					      	      j = 1						    	    j = 1						  
6 STORE_FAST 2 ( i )					      	      for j in range ( s ) :				    	    for j in range ( s ) :				  
							      		  k = s - i - j					    		k = s - i - j					  
4 8 SETUP_LOOP 72 ( to 82 )				      		  maxvalue = max ( maxvalue , i * j * k )	    		maxvalue = max ( maxvalue , i * j * k )		  
10 LOAD_GLOBAL 0 ( range )				      	  return maxvalue					    	return maxvalue						  
12 LOAD_FAST 0 ( s )					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 56 ( to 80 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 30 SETUP_LOOP 46 ( to 78 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 0 ( s )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 34 ( to 76 )				      								    								  
42 STORE_FAST 3 ( j )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( s )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 3 ( j )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 STORE_FAST 4 ( k )					      								    								  
							      								    								  
8 56 LOAD_GLOBAL 1 ( max )				      								    								  
58 LOAD_FAST 1 ( maxvalue )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_FAST 3 ( j )					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_FAST 4 ( k )					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 STORE_FAST 1 ( maxvalue )				      								    								  
74 JUMP_ABSOLUTE 40					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 JUMP_ABSOLUTE 22					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
9 >> 82 LOAD_FAST 1 ( maxvalue )			      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object checkIsAP at 0x7fbac0e89d20, file def checkIsAP ( arr , n ) :				    def checkIsAP ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 1 ) : return True				    	if n == 1 : return True					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      	  arr.sort ( )						    	arr.sort ( )						  _sa.test/CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_
4 COMPARE_OP 2 ( == )					      	  d = arr [ 1 ] - arr [ 0 ]				    	d = arr [ 1 ] - arr [ 0 ]				  FORMED_GIVEN_ARRAY.py", line 34     return True
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 2 , n ) :				    	for i in range ( 2 , n ) :				    ^ SyntaxError: 'return' outside function
8 LOAD_CONST 2 ( True )					      	      if ( arr [ i ] - arr [ i - 1 ] != d ) :		    	    if arr [ i ] - arr [ i - 1 ] != d :			  
10 RETURN_VALUE						      		  return False					    		return False					  
							      	  return True						    return True							  
3 >> 12 LOAD_FAST 0 ( arr )				      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_CONST 3 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 STORE_FAST 2 ( d )					      								    								  
							      								    								  
5 36 SETUP_LOOP 46 ( to 84 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_CONST 4 ( 2 )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 32 ( to 82 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 2 ( d )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 76 LOAD_CONST 5 ( False )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 48					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
8 >> 84 LOAD_CONST 2 ( True )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN
--							      --							    --								  --
Disassembly of <code object checkDuplicatesWithinK at 0x7fbac def checkDuplicatesWithinK ( arr , n , k ) :		    def checkDuplicatesWithinK ( arr , n , k ) :		  script_not_found : None
2 0 BUILD_LIST 0					      	  myset = [ ]						    	myset = [ ]						  
2 STORE_FAST 3 ( myset )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if arr [ i ] in myset :				    	    if arr [ i ] in myset :				  
3 4 SETUP_LOOP 72 ( to 78 )				      		  return True					    		return True					  
6 LOAD_GLOBAL 0 ( range )				      	      myset.append ( arr [ i ] )			    	    myset.append ( arr [ i ] )				  
8 LOAD_FAST 1 ( n )					      	      if ( i >= k ) :					    	    if i >= k :						  
10 CALL_FUNCTION 1					      		  myset.remove ( arr [ i - k ] )		    		myset.remove ( arr [ i - k ] )			  
12 GET_ITER						      	  return False						    	return False						  
>> 14 FOR_ITER 60 ( to 76 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 4 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 3 ( myset )				      								    								  
26 COMPARE_OP 6 ( in )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
5 30 LOAD_CONST 1 ( True )				      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
6 >> 34 LOAD_FAST 3 ( myset )				      								    								  
36 LOAD_METHOD 1 ( append )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( i )					      								    								  
50 LOAD_FAST 2 ( k )					      								    								  
52 COMPARE_OP 5 ( >= )					      								    								  
54 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
8 56 LOAD_FAST 3 ( myset )				      								    								  
58 LOAD_METHOD 2 ( remove )				      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 LOAD_FAST 2 ( k )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 CALL_METHOD 1					      								    								  
72 POP_TOP						      								    								  
74 JUMP_ABSOLUTE 14					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_CONST 2 ( False )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS	  GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS
--							      --							    --								  --
Disassembly of <code object generate at 0x7fbac0e8de40, file  def generate ( ones , zeroes , str , len1 ) :		    def generate ( ones , zeroes , str , start = 2 ) :		  script_not_found : None
2 0 LOAD_FAST 3 ( len1 )				      	  if ( len1 == len ( str ) ) :				    	if not ( 46 == len ( str ) ) :				  
2 LOAD_GLOBAL 0 ( len )					      	      print ( str , end = " " )				    	    print ( str , end = " " )				  
4 LOAD_FAST 2 ( str )					      	      return						    	    return						  
6 CALL_FUNCTION 1					      	  generate ( ones + 1 , zeroes , str + "1" , len1 )	    	generate ( ones + 1 , zeroes , str + "1" , != != zeroes ) 
8 COMPARE_OP 2 ( == )					      	  if ( ones > zeroes ) :				    	if ones > zeroes :					  
10 POP_JUMP_IF_FALSE 28					      	      generate ( ones , zeroes + 1 , str + "0" , len1 )	    	    generate ( ones , zeroes + 1 , str + '0' , 172 )	  
							      								    								  
3 12 LOAD_GLOBAL 1 ( print )				      								    								  
14 LOAD_FAST 2 ( str )					      								    								  
16 LOAD_CONST 1 ( ' ' )					      								    								  
18 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
20 CALL_FUNCTION_KW 2					      								    								  
22 POP_TOP						      								    								  
							      								    								  
4 24 LOAD_CONST 0 ( None )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
5 >> 28 LOAD_GLOBAL 2 ( generate )			      								    								  
30 LOAD_FAST 0 ( ones )					      								    								  
32 LOAD_CONST 3 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_FAST 1 ( zeroes )				      								    								  
38 LOAD_FAST 2 ( str )					      								    								  
40 LOAD_CONST 4 ( '1' )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 3 ( len1 )					      								    								  
46 CALL_FUNCTION 4					      								    								  
48 POP_TOP						      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( ones )				      								    								  
52 LOAD_FAST 1 ( zeroes )				      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
7 58 LOAD_GLOBAL 2 ( generate )				      								    								  
60 LOAD_FAST 0 ( ones )					      								    								  
62 LOAD_FAST 1 ( zeroes )				      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 2 ( str )					      								    								  
70 LOAD_CONST 5 ( '0' )					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_FAST 3 ( len1 )					      								    								  
76 CALL_FUNCTION 4					      								    								  
78 POP_TOP						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_FIRST_MISSING_NUMBER				      FIND_THE_FIRST_MISSING_NUMBER				    FIND_THE_FIRST_MISSING_NUMBER				  FIND_THE_FIRST_MISSING_NUMBER
--							      --							    --								  --
Disassembly of <code object findFirstMissing at 0x7fbac0e8de4 def findFirstMissing ( array , start , end ) :		    def findFirstMissing ( array , start = end , end = None ) :	  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( start )				      	  if ( start > end ) :					    	if start > end :					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 2 ( end )					      	      return end + 1					    	    return end + 1					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/FIND_T
4 COMPARE_OP 4 ( > )					      	  if ( start != array [ start ] ) :			    	if start != array [ start ] :				  HE_FIRST_MISSING_NUMBER.py", line 28, in <module>
6 POP_JUMP_IF_FALSE 16					      	      return start ;					    	    return start					      def f_filled ( array , start = end , end = Non
							      	  mid = int ( ( start + end ) / 2 )			    	mid = int ( start + end + 2 )				  e ) : NameError: name 'end' is not defined
3 8 LOAD_FAST 2 ( end )					      	  if ( array [ mid ] == mid ) :				    	if array [ mid ] == mid :				  
10 LOAD_CONST 1 ( 1 )					      	      return findFirstMissing ( array , mid + 1 , end )	    	    return findFirstMissing ( array , mid + 1 , end )	  
12 BINARY_ADD						      	  return findFirstMissing ( array , start , mid )	    	return findFirstMissing ( array , start , mid )		  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 1 ( start )				      								    								  
18 LOAD_FAST 0 ( array )				      								    								  
20 LOAD_FAST 1 ( start )				      								    								  
22 BINARY_SUBSCR					      								    								  
24 COMPARE_OP 3 ( != )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( start )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( int )				      								    								  
34 LOAD_FAST 1 ( start )				      								    								  
36 LOAD_FAST 2 ( end )					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( array )				      								    								  
50 LOAD_FAST 3 ( mid )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 3 ( mid )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 60 LOAD_GLOBAL 1 ( findFirstMissing )			      								    								  
62 LOAD_FAST 0 ( array )				      								    								  
64 LOAD_FAST 3 ( mid )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 2 ( end )					      								    								  
72 CALL_FUNCTION 3					      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
9 >> 76 LOAD_GLOBAL 1 ( findFirstMissing )		      								    								  
78 LOAD_FAST 0 ( array )				      								    								  
80 LOAD_FAST 1 ( start )				      								    								  
82 LOAD_FAST 3 ( mid )					      								    								  
84 CALL_FUNCTION 3					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE				  FIND_THE_ELEMENT_THAT_APPEARS_ONCE
--							      --							    --								  --
Disassembly of <code object getSingle at 0x7fbac0e8bc90, file def getSingle ( arr , n ) :				    def getSingle ( arr , n ) :					  failure : #Results: 2, 10
2 0 LOAD_CONST 1 ( 0 )					      	  ones = 0						    	ones = 0						  
2 STORE_FAST 2 ( ones )					      	  twos = 0						    	twos = 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      twos = twos | ( ones & arr [ i ] )		    	    twos = twos | ones | arr [ i ]			  
6 STORE_FAST 3 ( twos )					      	      ones = ones ^ arr [ i ]				    	    ones = ones | arr [ i ]				  
							      	      common_bit_mask = ~ ( ones & twos )		    	    common_bit_mask = ones & twos			  
4 8 SETUP_LOOP 70 ( to 80 )				      	      ones &= common_bit_mask				    	    ones &= common_bit_mask				  
10 LOAD_GLOBAL 0 ( range )				      	      twos &= common_bit_mask				    	    twos = twos | common_bit_mask			  
12 LOAD_FAST 1 ( n )					      	  return ones						    	return ones						  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 58 ( to 78 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 3 ( twos )				      								    								  
24 LOAD_FAST 2 ( ones )					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_AND						      								    								  
34 BINARY_OR						      								    								  
36 STORE_FAST 3 ( twos )				      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( ones )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_XOR						      								    								  
48 STORE_FAST 2 ( ones )				      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( ones )				      								    								  
52 LOAD_FAST 3 ( twos )					      								    								  
54 BINARY_AND						      								    								  
56 UNARY_INVERT						      								    								  
58 STORE_FAST 5 ( common_bit_mask )			      								    								  
							      								    								  
8 60 LOAD_FAST 2 ( ones )				      								    								  
62 LOAD_FAST 5 ( common_bit_mask )			      								    								  
64 INPLACE_AND						      								    								  
66 STORE_FAST 2 ( ones )				      								    								  
							      								    								  
9 68 LOAD_FAST 3 ( twos )				      								    								  
70 LOAD_FAST 5 ( common_bit_mask )			      								    								  
72 INPLACE_AND						      								    								  
74 STORE_FAST 3 ( twos )				      								    								  
76 JUMP_ABSOLUTE 18					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
10 >> 80 LOAD_FAST 2 ( ones )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object insertSorted at 0x7fbac0e89d20, f def insertSorted ( arr , n , key , capacity ) :		    def insertSorted ( arr , n , key , capacity ) :		  success : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n >= capacity ) :				    	if n >= capacity :					  
2 LOAD_FAST 3 ( capacity )				      	      return n						    	    return n						  
4 COMPARE_OP 5 ( >= )					      	  i = n - 1						    	i = n - 1						  
6 POP_JUMP_IF_FALSE 12					      	  while i >= 0 and arr [ i ] > key :			    	while i >= 0 and arr [ i ] > key :			  
							      	      arr [ i + 1 ] = arr [ i ]				    	    arr [ i + 1 ] = arr [ i ]				  
3 8 LOAD_FAST 1 ( n )					      	      i -= 1						    	    i -= 1						  
10 RETURN_VALUE						      	  arr [ i + 1 ] = key					    	arr [ i + 1 ] = key					  
							      	  return ( n + 1 )					    	return n + 1						  
4 >> 12 LOAD_FAST 1 ( n )				      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 20 SETUP_LOOP 48 ( to 70 )				      								    								  
>> 22 LOAD_FAST 4 ( i )					      								    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 COMPARE_OP 5 ( >= )					      								    								  
28 POP_JUMP_IF_FALSE 68					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 2 ( key )					      								    								  
38 COMPARE_OP 4 ( > )					      								    								  
40 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
7 58 LOAD_FAST 4 ( i )					      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 INPLACE_SUBTRACT					      								    								  
64 STORE_FAST 4 ( i )					      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
8 >> 70 LOAD_FAST 2 ( key )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_SUBSCR						      								    								  
							      								    								  
9 82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_CONST 1 ( 1 )					      								    								  
86 BINARY_ADD						      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			      CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			    CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			  CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT
--							      --							    --								  --
Disassembly of <code object circle at 0x7fbac0e89d20, file "< def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :		    def circle ( x1 , y1 , x2 , y2 , y2 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x1 )					      	  distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - 	distSq = x1 - x2 * x1 - y1 - y2 * ( y1 - y2 ) + y1 - y2 ) l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 2 ( x2 )					      	  radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		    	radSumSq = r1 + r2 * r1 + r1 + r2			  _sa.test/CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT.p
4 BINARY_SUBTRACT					      	  if ( distSq == radSumSq ) :				    	if distSq == radSumSq :					  y", line 29	  distSq = x1 - x2 * x1 - y1 - y2 *
6 LOAD_FAST 0 ( x1 )					      	      return 1						    	    return 1						  ( y1 - y2 ) + y1 - y2 )
8 LOAD_FAST 2 ( x2 )					      	  elif ( distSq > radSumSq ) :				    	if distSq > radSumSq :					  				    ^ SyntaxError: i
10 BINARY_SUBTRACT					      	      return - 1					    	    return - 1						  nvalid syntax
12 BINARY_MULTIPLY					      	  else :						    	else :							  
14 LOAD_FAST 1 ( y1 )					      	      return 0						    	    return 0						  
16 LOAD_FAST 3 ( y2 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_FAST 1 ( y1 )					      								    								  
22 LOAD_FAST 3 ( y2 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 BINARY_ADD						      								    								  
30 STORE_FAST 6 ( distSq )				      								    								  
							      								    								  
3 32 LOAD_FAST 4 ( r1 )					      								    								  
34 LOAD_FAST 5 ( r2 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 4 ( r1 )					      								    								  
40 LOAD_FAST 5 ( r2 )					      								    								  
42 BINARY_ADD						      								    								  
44 BINARY_MULTIPLY					      								    								  
46 STORE_FAST 7 ( radSumSq )				      								    								  
							      								    								  
4 48 LOAD_FAST 6 ( distSq )				      								    								  
50 LOAD_FAST 7 ( radSumSq )				      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 56 LOAD_CONST 1 ( 1 )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
6 >> 60 LOAD_FAST 6 ( distSq )				      								    								  
62 LOAD_FAST 7 ( radSumSq )				      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 68 LOAD_CONST 2 ( - 1 )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
9 >> 72 LOAD_CONST 3 ( 0 )				      								    								  
74 RETURN_VALUE						      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY_1      INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY_1	    INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY_1	  INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findInteger at 0x7fbac0e8bc90, fi def findInteger ( arr , n ) :				    def findInteger ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  neg = 0						    	neg = 0							  
2 STORE_FAST 2 ( neg )					      	  pos = 0						    	pos = 0							  
							      	  sum = 0						    	sum = 0							  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 3 ( pos )					      	      sum += arr [ i ]					    	    sum += arr [ i ]					  
							      	      if ( arr [ i ] < 0 ) :				    	    if arr [ i ] < 0 :					  
4 8 LOAD_CONST 1 ( 0 )					      		  neg += 1					    		neg += 1					  
10 STORE_FAST 4 ( sum )					      	      else :						    	    else :						  
							      		  pos += 1					    		pos += 1					  
5 12 SETUP_LOOP 60 ( to 74 )				      	  return ( sum / abs ( neg - pos ) )			    	return ( sum / abs ( neg - pos ) )			  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 46 ( to 72 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 4 ( sum )				      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
7 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 52 LOAD_FAST 2 ( neg )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( neg )					      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
10 >> 62 LOAD_FAST 3 ( pos )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( pos )					      								    								  
70 JUMP_ABSOLUTE 24					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
11 >> 74 LOAD_FAST 4 ( sum )				      								    								  
76 LOAD_GLOBAL 1 ( abs )				      								    								  
78 LOAD_FAST 2 ( neg )					      								    								  
80 LOAD_FAST 3 ( pos )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SINK_NODES_GRAPH					      NUMBER_SINK_NODES_GRAPH					    NUMBER_SINK_NODES_GRAPH					  NUMBER_SINK_NODES_GRAPH
--							      --							    --								  --
Disassembly of <code object countSink at 0x7fbac0e89d20, file def countSink ( n , m , edgeFrom , edgeTo ) :		    def countSink ( n , m , edgeFrom , edgeFrom ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  mark = [ 0 ] * ( n + 1 )				    	mark = [ 0 ] * n + 1					  
2 BUILD_LIST 1						      	  for i in range ( m ) :				    	for i in range ( m ) :					  
4 LOAD_FAST 0 ( n )					      	      mark [ edgeFrom [ i ] ] = 1			    	    mark [ edgeFrom [ i ] ] = 1				  
6 LOAD_CONST 2 ( 1 )					      	  count = 0						    	count = 0						  
8 BINARY_ADD						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
10 BINARY_MULTIPLY					      	      if ( not mark [ i ] ) :				    	    if not mark [ i ] :					  
12 STORE_FAST 4 ( mark )				      		  count += 1					    		count += 1					  
							      	  return count						    	return count						  
3 14 SETUP_LOOP 28 ( to 44 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( m )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 16 ( to 42 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 4 ( mark )					      								    								  
32 LOAD_FAST 2 ( edgeFrom )				      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 STORE_SUBSCR						      								    								  
40 JUMP_ABSOLUTE 24					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_CONST 1 ( 0 )				      								    								  
46 STORE_FAST 6 ( count )				      								    								  
							      								    								  
6 48 SETUP_LOOP 38 ( to 88 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 20 ( to 86 )				      								    								  
66 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 68 LOAD_FAST 4 ( mark )				      								    								  
70 LOAD_FAST 5 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 POP_JUMP_IF_TRUE 64					      								    								  
							      								    								  
8 76 LOAD_FAST 6 ( count )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 6 ( count )				      								    								  
84 JUMP_ABSOLUTE 64					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 6 ( count )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1
--							      --							    --								  --
Disassembly of <code object findMissing at 0x7fbac0e8d540, fi def findMissing ( a , b , n , m ) :			    def findMissing ( a , b , n , m ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  s = dict ( )						    	s = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( m ) :				    	for i in range ( m ) :					  
4 STORE_FAST 4 ( s )					      	      s [ b [ i ] ] = 1					    	    s [ b [ i ] ] = 1					  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 6 SETUP_LOOP 28 ( to 36 )				      	      if a [ i ] not in s.keys ( ) :			    	    if a [ i ] not in s.keys ( ) :			  
8 LOAD_GLOBAL 1 ( range )				      		  print ( a [ i ] , end = " " )			    		print ( a [ i ] , end = " " )			  
10 LOAD_FAST 3 ( m )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 16 ( to 34 )				      								    								  
18 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_FAST 4 ( s )					      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 LOAD_FAST 5 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 STORE_SUBSCR						      								    								  
32 JUMP_ABSOLUTE 16					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 SETUP_LOOP 48 ( to 86 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_FAST 2 ( n )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 36 ( to 84 )				      								    								  
48 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( s )					      								    								  
58 LOAD_METHOD 2 ( keys )				      								    								  
60 CALL_METHOD 0					      								    								  
62 COMPARE_OP 7 ( not in )				      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 66 LOAD_GLOBAL 3 ( print )				      								    								  
68 LOAD_FAST 0 ( a )					      								    								  
70 LOAD_FAST 5 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 2 ( ' ' )					      								    								  
76 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
78 CALL_FUNCTION_KW 2					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 46					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN
--							      --							    --								  --
Disassembly of <code object FirstRepeated at 0x7fbac0e89d20,  def FirstRepeated ( string ) :				    def FirstRepeated ( string ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  checker = 0						    	checker = 0						  
2 STORE_FAST 1 ( checker )				      	  pos = 0						    	pos = 0							  
							      	  for i in string :					    	for i in string :					  
3 4 LOAD_CONST 1 ( 0 )					      	      val = ord ( i ) - ord ( 'a' ) ;			    	    val = ord ( i ) - ord ( 'a' )			  
6 STORE_FAST 2 ( pos )					      	      if ( ( checker & ( 1 << val ) ) > 0 ) :		    	    if checker > ( 1 << val ) & 0 :			  
							      		  return pos					    		return pos					  
4 8 SETUP_LOOP 68 ( to 78 )				      	      checker |= ( 1 << val )				    	    checker += 1 << val					  
10 LOAD_FAST 0 ( string )				      	      pos += 1						    	    pos += 1						  
12 GET_ITER						      	  return - 1						    	return - 1						  
>> 14 FOR_ITER 60 ( to 76 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 18 LOAD_GLOBAL 0 ( ord )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 LOAD_GLOBAL 0 ( ord )				      								    								  
26 LOAD_CONST 2 ( 'a' )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 STORE_FAST 4 ( val )					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( checker )				      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 LOAD_FAST 4 ( val )					      								    								  
40 BINARY_LSHIFT					      								    								  
42 BINARY_AND						      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( pos )				      								    								  
52 RETURN_VALUE						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 1 ( checker )				      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 LOAD_FAST 4 ( val )					      								    								  
60 BINARY_LSHIFT					      								    								  
62 INPLACE_OR						      								    								  
64 STORE_FAST 1 ( checker )				      								    								  
							      								    								  
9 66 LOAD_FAST 2 ( pos )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( pos )					      								    								  
74 JUMP_ABSOLUTE 14					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
10 >> 78 LOAD_CONST 4 ( - 1 )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT     DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	    DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT
--							      --							    --								  --
Disassembly of <code object maxProd at 0x7fbac0e8bc90, file " def maxProd ( n ) :					    def maxProd ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  max_val = 0						    	max_val = 0						  
6 POP_JUMP_IF_TRUE 16					      	  for i in range ( 1 , n - 1 ) :			    	for i in range ( 1 , n - 1 ) :				  
8 LOAD_FAST 0 ( n )					      	      max_val = max ( max_val , max ( i * ( n - i ) , maxPr 	    max_val = max ( max_val * max ( i * n - i ) , maxProd 
10 LOAD_CONST 2 ( 1 )					      	  return max_val ;					    	return max_val						  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 1 ( 0 )				      								    								  
22 STORE_FAST 1 ( max_val )				      								    								  
							      								    								  
5 24 SETUP_LOOP 58 ( to 84 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 40 ( to 82 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 1 ( max )				      								    								  
46 LOAD_FAST 1 ( max_val )				      								    								  
48 LOAD_GLOBAL 1 ( max )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_GLOBAL 2 ( maxProd )				      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 CALL_FUNCTION 2					      								    								  
78 STORE_FAST 1 ( max_val )				      								    								  
80 JUMP_ABSOLUTE 40					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
7 >> 84 LOAD_FAST 1 ( max_val )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7fbac0e8bc90,  def printDistinct ( arr , n ) :				    def printDistinct ( arr , n ) :				  script_not_found : None
2 0 SETUP_LOOP 84 ( to 86 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      d = 0						    	    d = 0						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , i ) :			    	    for j in range ( 0 , i ) :				  
6 LOAD_FAST 1 ( n )					      		  if ( arr [ i ] == arr [ j ] ) :		    		if arr [ i ] == arr [ j ] :			  
8 CALL_FUNCTION 2					      		      d = 1					    		    d = 1					  
10 GET_ITER						      		      break					    		    break					  
>> 12 FOR_ITER 70 ( to 84 )				      	      if ( d == 0 ) :					    	    if d == 0 :						  
14 STORE_FAST 2 ( i )					      		  print ( arr [ i ] )				    		print ( arr [ i ] )				  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( d )					      								    								  
							      								    								  
4 20 SETUP_LOOP 40 ( to 62 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 26 ( to 60 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_CONST 2 ( 1 )					      								    								  
54 STORE_FAST 3 ( d )					      								    								  
							      								    								  
7 56 BREAK_LOOP						      								    								  
58 JUMP_ABSOLUTE 32					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
8 >> 62 LOAD_FAST 3 ( d )				      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
9 70 LOAD_GLOBAL 1 ( print )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 12					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		      FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		    FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		  FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING
--							      --							    --								  --
Disassembly of <code object findRepeatFirstN2 at 0x7fbac0e8d5 def findRepeatFirstN2 ( s ) :				    def findRepeatFirstN2 ( s ) :				  success : None
2 0 LOAD_CONST 1 ( - 1 )				      	  p = - 1						    	p = - 1							  
2 STORE_FAST 1 ( p )					      	  for i in range ( len ( s ) ) :			    	for i in range ( len ( s ) ) :				  
							      	      for j in range ( i + 1 , len ( s ) ) :		    	    for j in range ( i + 1 , len ( s ) ) :		  
3 4 SETUP_LOOP 80 ( to 86 )				      		  if ( s [ i ] == s [ j ] ) :			    		if s [ i ] == s [ j ] :				  
6 LOAD_GLOBAL 0 ( range )				      		      p = i					    		    p = i					  
8 LOAD_GLOBAL 1 ( len )					      		      break					    		    break					  
10 LOAD_FAST 0 ( s )					      	      if ( p != - 1 ) :					    	    if p != - 1 :					  
12 CALL_FUNCTION 1					      		  break						    		break						  
14 CALL_FUNCTION 1					      	  return p						    	return p						  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 64 ( to 84 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 48 ( to 72 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_GLOBAL 1 ( len )				      								    								  
34 LOAD_FAST 0 ( s )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 26 ( to 70 )				      								    								  
44 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( s )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( s )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 62 LOAD_FAST 2 ( i )					      								    								  
64 STORE_FAST 1 ( p )					      								    								  
							      								    								  
7 66 BREAK_LOOP						      								    								  
68 JUMP_ABSOLUTE 42					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
8 >> 72 LOAD_FAST 1 ( p )				      								    								  
74 LOAD_CONST 1 ( - 1 )					      								    								  
76 COMPARE_OP 3 ( != )					      								    								  
78 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
9 80 BREAK_LOOP						      								    								  
82 JUMP_ABSOLUTE 18					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 1 ( p )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX
--							      --							    --								  --
Disassembly of <code object countSolutions at 0x7fbac0e8bc90, def countSolutions ( n ) :				    def countSolutions ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 1 ( res )					      	  x = 0							    	x = 0							  
							      	  while ( x * x < n ) :					    	while x * x < n :					  
3 4 LOAD_CONST 1 ( 0 )					      	      y = 0						    	    y = 0						  
6 STORE_FAST 2 ( x )					      	      while ( x * x + y * y < n ) :			    	    while x * x + y * y < n :				  
							      		  res = res + 1					    		res = res + 1					  
4 8 SETUP_LOOP 70 ( to 80 )				      		  y = y + 1					    		y = y + 1					  
>> 10 LOAD_FAST 2 ( x )					      	      x = x + 1						    	    x = x + 1						  
12 LOAD_FAST 2 ( x )					      	  return res						    	return res						  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 COMPARE_OP 0 ( < )					      								    								  
20 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 3 ( y )					      								    								  
							      								    								  
6 26 SETUP_LOOP 40 ( to 68 )				      								    								  
>> 28 LOAD_FAST 2 ( x )					      								    								  
30 LOAD_FAST 2 ( x )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_FAST 3 ( y )					      								    								  
36 LOAD_FAST 3 ( y )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 0 ( n )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( res )				      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 1 ( res )					      								    								  
							      								    								  
8 56 LOAD_FAST 3 ( y )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 3 ( y )					      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 2 ( x )				      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 2 ( x )					      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
10 >> 80 LOAD_FAST 1 ( res )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR				      FIND_MINIMUM_DIFFERENCE_PAIR				    FIND_MINIMUM_DIFFERENCE_PAIR				  FIND_MINIMUM_DIFFERENCE_PAIR
--							      --							    --								  --
Disassembly of <code object findMinDiff at 0x7fbac0e8de40, fi def findMinDiff ( arr , n ) :				    def findMinDiff ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( 100000000000000000000 )		      	  diff = 10 ** 20					    	diff = 100000000000000000000				  
2 STORE_FAST 2 ( diff )					      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 88 ( to 94 )				      		  if abs ( arr [ i ] - arr [ j ] ) < diff :	    		if abs ( arr [ i ] - arr [ j ] ) < diff :	  
6 LOAD_GLOBAL 0 ( range )				      		      diff = abs ( arr [ i ] - arr [ j ] )	    		    diff = abs ( arr [ i ] - arr [ j ] )	  
8 LOAD_FAST 1 ( n )					      	  return diff						    	return diff						  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 72 ( to 92 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 66 ( to 90 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 48 ( to 88 )				      								    								  
40 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 42 LOAD_GLOBAL 1 ( abs )				      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_FAST 2 ( diff )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 66 LOAD_GLOBAL 1 ( abs )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 4 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 STORE_FAST 2 ( diff )				      								    								  
86 JUMP_ABSOLUTE 38					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 JUMP_ABSOLUTE 18					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
7 >> 94 LOAD_FAST 2 ( diff )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
Disassembly of <code object CountSquares at 0x7fbac0e8bc90, f def CountSquares ( a , b ) :				    def CountSquares ( a , b ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  cnt = 0						    	cnt = 0							  
2 STORE_FAST 2 ( cnt )					      	  for i in range ( a , b + 1 ) :			    	for i in range ( a , b + 1 ) :				  
							      	      j = 1 ;						    	    j = 1						  
3 4 SETUP_LOOP 80 ( to 86 )				      	      while j * j <= i :				    	    while j * j <= i :					  
6 LOAD_GLOBAL 0 ( range )				      		  if j * j == i :				    		if j * j == i :					  
8 LOAD_FAST 0 ( a )					      		      cnt = cnt + 1				    		    cnt = cnt + 1				  
10 LOAD_FAST 1 ( b )					      		  j = j + 1					    		j = j + 1					  
12 LOAD_CONST 2 ( 1 )					      	      i = i + 1						    	    i = i + 1						  
14 BINARY_ADD						      	  return cnt						    	return cnt						  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 62 ( to 84 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 28 SETUP_LOOP 44 ( to 74 )				      								    								  
>> 30 LOAD_FAST 4 ( j )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 42 LOAD_FAST 4 ( j )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( cnt )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 2 ( cnt )					      								    								  
							      								    								  
8 >> 62 LOAD_FAST 4 ( j )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 STORE_FAST 4 ( j )					      								    								  
70 JUMP_ABSOLUTE 30					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 3 ( i )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 3 ( i )					      								    								  
82 JUMP_ABSOLUTE 20					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 2 ( cnt )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT COUNT_<unk> TIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MAT
--							      --							    --								  --
Disassembly of <code object countNegative at 0x7fbac0e8de40,  def countNegative ( M , n , m ) :				    def countNegative ( M , n , m ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 3 ( count )				      	  i = 0							    	i = 0							  
							      	  j = m - 1						    	j = m - 1						  
3 4 LOAD_CONST 1 ( 0 )					      	  while j >= 0 and i < n :				    	while j >= 0 and i < n :				  
6 STORE_FAST 4 ( i )					      	      if M [ i ] [ j ] < 0 :				    	    if M [ i ] [ j ] < 0 :				  
							      		  count += ( j + 1 )				    		count += j + 1					  
4 8 LOAD_FAST 2 ( m )					      		  i += 1					    		i += 1						  
10 LOAD_CONST 2 ( 1 )					      	      else :						    	    else :						  
12 BINARY_SUBTRACT					      		  j -= 1					    		j -= 1						  
14 STORE_FAST 5 ( j )					      	  return count						    return count						  
							      								    								  
5 16 SETUP_LOOP 66 ( to 84 )				      								    								  
>> 18 LOAD_FAST 5 ( j )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 COMPARE_OP 5 ( >= )					      								    								  
24 POP_JUMP_IF_FALSE 82					      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( M )					      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 5 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( count )				      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( count )				      								    								  
							      								    								  
8 62 LOAD_FAST 4 ( i )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 4 ( i )					      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
10 >> 72 LOAD_FAST 5 ( j )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 INPLACE_SUBTRACT					      								    								  
78 STORE_FAST 5 ( j )					      								    								  
80 JUMP_ABSOLUTE 18					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
11 >> 84 LOAD_FAST 3 ( count )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
Disassembly of <code object isIdentity at 0x7fbac0e8de40, fil def isIdentity ( mat , N ) :				    def isIdentity ( mat , N ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 90 ( to 92 )				      	  for row in range ( N ) :				    	for row in range ( N ) :				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      for col in range ( N ) :				    	    for col in range ( N ) :				  _sa.test/PROGRAM_PRINT_IDENTITY_MATRIX_1.py", line
4 LOAD_FAST 1 ( N )					      		  if ( row == col and mat [ row ] [ col ] != 1 ) :  		if row == col and mat [ row ] [ col ] != 1 :	   32	  if row != col : if row != row [ row ] [ co
6 CALL_FUNCTION 1					      		      return False ;				    		    return False				  l ] != 0 :			  ^ SyntaxError: inv
8 GET_ITER						      		  elif ( row != col and mat [ row ] [ col ] != 0 )  		if row != col : if row != row [ row ] [ col ] !=  alid syntax
>> 10 FOR_ITER 78 ( to 90 )				      		      return False ;				    		    return False				  
12 STORE_FAST 2 ( row )					      	  return True ;						    return True							  
							      								    								  
3 14 SETUP_LOOP 72 ( to 88 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 60 ( to 86 )				      								    								  
26 STORE_FAST 3 ( col )					      								    								  
							      								    								  
4 28 LOAD_FAST 2 ( row )				      								    								  
30 LOAD_FAST 3 ( col )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 56					      								    								  
36 LOAD_FAST 0 ( mat )					      								    								  
38 LOAD_FAST 2 ( row )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( col )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 52 LOAD_CONST 2 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
6 >> 56 LOAD_FAST 2 ( row )				      								    								  
58 LOAD_FAST 3 ( col )					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 24					      								    								  
64 LOAD_FAST 0 ( mat )					      								    								  
66 LOAD_FAST 2 ( row )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 3 ( col )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 3 ( 0 )					      								    								  
76 COMPARE_OP 3 ( != )					      								    								  
78 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
7 80 LOAD_CONST 2 ( False )				      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 24					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 10					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
8 >> 92 LOAD_CONST 4 ( True )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			      COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			    COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			  COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N
--							      --							    --								  --
Disassembly of <code object countOfBinaryNumberLessThanN at 0 def countOfBinaryNumberLessThanN ( N ) :			    def countOfBinaryNumbersThanN ( N ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( deque )				      	  q = deque ( )						    	q = deque ( )						  
2 CALL_FUNCTION 0					      	  q.append ( 1 )					    	q.append ( 1 )						  
4 STORE_FAST 1 ( q )					      	  cnt = 0						    	cnt = 0							  
							      	  while ( q ) :						    	while q :						  
3 6 LOAD_FAST 1 ( q )					      	      t = q.popleft ( )					    	    t = q.popleft ( )					  
8 LOAD_METHOD 1 ( append )				      	      if ( t <= N ) :					    	    if t <= N :						  
10 LOAD_CONST 1 ( 1 )					      		  cnt = cnt + 1					    		cnt = cnt + 1					  
12 CALL_METHOD 1					      		  q.append ( t * 10 )				    		q.append ( t * 10 )				  
14 POP_TOP						      		  q.append ( t * 10 + 1 )			    		q.append ( t * 10 + 1 )				  
							      	  return cnt						    	return cnt						  
4 16 LOAD_CONST 2 ( 0 )					      								    								  
18 STORE_FAST 2 ( cnt )					      								    								  
							      								    								  
5 20 SETUP_LOOP 64 ( to 86 )				      								    								  
>> 22 LOAD_FAST 1 ( q )					      								    								  
24 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( q )					      								    								  
28 LOAD_METHOD 2 ( popleft )				      								    								  
30 CALL_METHOD 0					      								    								  
32 STORE_FAST 3 ( t )					      								    								  
							      								    								  
7 34 LOAD_FAST 3 ( t )					      								    								  
36 LOAD_FAST 0 ( N )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( cnt )				      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 2 ( cnt )					      								    								  
							      								    								  
9 50 LOAD_FAST 1 ( q )					      								    								  
52 LOAD_METHOD 1 ( append )				      								    								  
54 LOAD_FAST 3 ( t )					      								    								  
56 LOAD_CONST 3 ( 10 )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 CALL_METHOD 1					      								    								  
62 POP_TOP						      								    								  
							      								    								  
10 64 LOAD_FAST 1 ( q )					      								    								  
66 LOAD_METHOD 1 ( append )				      								    								  
68 LOAD_FAST 3 ( t )					      								    								  
70 LOAD_CONST 3 ( 10 )					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_METHOD 1					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 22					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_FAST 2 ( cnt )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS			      COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS			    COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS				  COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS
--							      --							    --								  --
Disassembly of <code object countSubSets at 0x7fbac0e8ddb0, f def countSubSets ( arr , n ) :				    def countSubSets ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  us = set ( )						    	us = set ( )						  
2 CALL_FUNCTION 0					      	  even_count = 0					    	even_count = 0						  
4 STORE_FAST 2 ( us )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if arr [ i ] % 2 == 0 :				    	    if arr [ i ] % 2 == 0 :				  
3 6 LOAD_CONST 1 ( 0 )					      		  us.add ( arr [ i ] )				    		us.add ( arr [ i ] )				  
8 STORE_FAST 3 ( even_count )				      	  for i in us :						    	for i in us :						  
							      	      even_count += 1					    	    even_count += 1					  
4 10 SETUP_LOOP 46 ( to 58 )				      	  return pow ( 2 , even_count ) - 1			    return pow ( 2 , even_count ) - 1				  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 34 ( to 56 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( 2 )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 40 LOAD_FAST 2 ( us )					      								    								  
42 LOAD_METHOD 2 ( add )				      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_METHOD 1					      								    								  
52 POP_TOP						      								    								  
54 JUMP_ABSOLUTE 20					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 SETUP_LOOP 20 ( to 80 )				      								    								  
60 LOAD_FAST 2 ( us )					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 12 ( to 78 )				      								    								  
66 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 68 LOAD_FAST 3 ( even_count )				      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 3 ( even_count )				      								    								  
76 JUMP_ABSOLUTE 64					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_GLOBAL 3 ( pow )				      								    								  
82 LOAD_CONST 2 ( 2 )					      								    								  
84 LOAD_FAST 3 ( even_count )				      								    								  
86 CALL_FUNCTION 2					      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_C<unk> WORD_ASTERISKS_SENTENCE			      PROGRAM_C<unk> WORD_ASTERISKS_SENTENCE			    PROGRAM_C<unk> WORD_ASTERISKS_SENTENCE			  PROGRAM_C<unk> WORD_ASTERISKS_SENTENCE
--							      --							    --								  --
Disassembly of <code object censor at 0x7fbac0e89d20, file "< def censor ( text , word ) :				    def censor ( text , word ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( text )				      	  word_list = text.split ( )				    	word_list = text.split ( )				  
2 LOAD_METHOD 0 ( split )				      	  result = ''						    	result = ""						  
4 CALL_METHOD 0						      	  stars = '*' * len ( word )				    	stars = "*" * len ( word )				  
6 STORE_FAST 2 ( word_list )				      	  count = 0						    	count = 0						  
							      	  index = 0 ;						    	index = 0						  
3 8 LOAD_CONST 1 ( '' )					      	  for i in word_list :					    	for i in word_list :					  
10 STORE_FAST 3 ( result )				      	      if i == word :					    	    if i == word :					  
							      		  word_list [ index ] = stars			    		word_list [ index ] = stars			  
4 12 LOAD_CONST 2 ( '*' )				      	      index += 1					    	    index += 1						  
14 LOAD_GLOBAL 1 ( len )				      	  result = ' '.join ( word_list )			    result = " ".join ( word_list )				  
16 LOAD_FAST 1 ( word )					      	  return result						    return result						  
18 CALL_FUNCTION 1					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 STORE_FAST 4 ( stars )				      								    								  
							      								    								  
5 24 LOAD_CONST 3 ( 0 )					      								    								  
26 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 28 LOAD_CONST 3 ( 0 )					      								    								  
30 STORE_FAST 6 ( index )				      								    								  
							      								    								  
7 32 SETUP_LOOP 36 ( to 70 )				      								    								  
34 LOAD_FAST 2 ( word_list )				      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 7 ( i )					      								    								  
							      								    								  
8 42 LOAD_FAST 7 ( i )					      								    								  
44 LOAD_FAST 1 ( word )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
9 50 LOAD_FAST 4 ( stars )				      								    								  
52 LOAD_FAST 2 ( word_list )				      								    								  
54 LOAD_FAST 6 ( index )				      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
10 >> 58 LOAD_FAST 6 ( index )				      								    								  
60 LOAD_CONST 4 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 6 ( index )				      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
11 >> 70 LOAD_CONST 5 ( ' ' )				      								    								  
72 LOAD_METHOD 2 ( join )				      								    								  
74 LOAD_FAST 2 ( word_list )				      								    								  
76 CALL_METHOD 1					      								    								  
78 STORE_FAST 3 ( result )				      								    								  
							      								    								  
12 80 LOAD_FAST 3 ( result )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE	  CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE
--							      --							    --								  --
Disassembly of <code object printSequence at 0x7fbac0e8de40,  def printSequence ( arr , input ) :			    def printSequence ( arr , input ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( input )					    	n = len ( input )					  
2 LOAD_FAST 1 ( input )					      	  output = ""						    	output = ""						  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 2 ( n )					      	      if ( input [ i ] == ' ' ) :			    	    if input [ i ] == " " :				  
							      		  output = output + "0"				    		output = output + "0"				  
3 8 LOAD_CONST 1 ( '' )					      	      else :						    	    else :						  
10 STORE_FAST 3 ( output )				      		  position = ord ( input [ i ] ) - ord ( 'A' )	    		position = ord ( input [ i ] ) - ord ( "A" )	  
							      		  output = output + arr [ position ]		    		output = output + arr [ position ]		  
4 12 SETUP_LOOP 70 ( to 84 )				      	  return output						    	return output						  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 58 ( to 82 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 1 ( input )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( ' ' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 38 LOAD_FAST 3 ( output )				      								    								  
40 LOAD_CONST 3 ( '0' )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 3 ( output )				      								    								  
46 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
8 >> 48 LOAD_GLOBAL 2 ( ord )				      								    								  
50 LOAD_FAST 1 ( input )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_GLOBAL 2 ( ord )				      								    								  
60 LOAD_CONST 4 ( 'A' )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 STORE_FAST 5 ( position )				      								    								  
							      								    								  
9 68 LOAD_FAST 3 ( output )				      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 5 ( position )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 3 ( output )				      								    								  
80 JUMP_ABSOLUTE 22					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 3 ( output )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1   REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1   REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1	  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7fbac0e8d540, file def rearrange ( arr , n ) :				    def rearrange ( arr , n ) :					  success : identical to gold
2 0 LOAD_FAST 0 ( arr )					      	  max_ele = arr [ n - 1 ]				    	max_ele = arr [ n - 1 ]					  
2 LOAD_FAST 1 ( n )					      	  min_ele = arr [ 0 ]					    	min_ele = arr [ 0 ]					  
4 LOAD_CONST 1 ( 1 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 BINARY_SUBTRACT					      	      if i % 2 == 0 :					    	    if i % 2 == 0 :					  
8 BINARY_SUBSCR						      		  arr [ i ] = max_ele				    		arr [ i ] = max_ele				  
10 STORE_FAST 2 ( max_ele )				      		  max_ele -= 1					    		max_ele -= 1					  
							      	      else :						    	    else :						  
3 12 LOAD_FAST 0 ( arr )				      		  arr [ i ] = min_ele				    		arr [ i ] = min_ele				  
14 LOAD_CONST 2 ( 0 )					      		  min_ele += 1					    		min_ele += 1					  
16 BINARY_SUBSCR					      								    								  
18 STORE_FAST 3 ( min_ele )				      								    								  
							      								    								  
4 20 SETUP_LOOP 62 ( to 84 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 50 ( to 82 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 4 ( i )					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_MODULO					      								    								  
40 LOAD_CONST 2 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
6 46 LOAD_FAST 2 ( max_ele )				      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( max_ele )				      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 INPLACE_SUBTRACT					      								    								  
60 STORE_FAST 2 ( max_ele )				      								    								  
62 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
9 >> 64 LOAD_FAST 3 ( min_ele )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
10 72 LOAD_FAST 3 ( min_ele )				      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 3 ( min_ele )				      								    								  
80 JUMP_ABSOLUTE 30					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8d540, fil def countPairs ( arr1 , arr2 , m , n , x ) :		    def countPairs ( arr1 , arr2 , m , n , n ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 5 ( count )				      	  us = set ( )						    	us = set ( )						  _sa.test/COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_E
							      	  for i in range ( m ) :				    	for i in range ( m ) :					  QUAL_GIVEN_VALUE_X_1.py", line 28	def f_filled
3 4 LOAD_GLOBAL 0 ( set )				      	      us.add ( arr1 [ i ] )				    	    us.add ( arr1 [ i ] )				   ( arr1 , arr2 , m , n , n ) :     ^ SyntaxError:
6 CALL_FUNCTION 0					      	  for j in range ( n ) :				    	for j in range ( n ) :					  duplicate argument 'n' in function definition
8 STORE_FAST 6 ( us )					      	      if x - arr2 [ j ] in us :				    	    if x - arr2 [ j ] in us :				  
							      		  count += 1					    		count += 1					  
4 10 SETUP_LOOP 30 ( to 42 )				      	  return count						    return count						  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 2 ( m )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 18 ( to 40 )				      								    								  
22 STORE_FAST 7 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 6 ( us )					      								    								  
26 LOAD_METHOD 2 ( add )				      								    								  
28 LOAD_FAST 0 ( arr1 )					      								    								  
30 LOAD_FAST 7 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
38 JUMP_ABSOLUTE 20					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
6 >> 42 SETUP_LOOP 40 ( to 84 )				      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 3 ( n )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 28 ( to 82 )				      								    								  
54 STORE_FAST 8 ( j )					      								    								  
							      								    								  
7 56 LOAD_FAST 4 ( x )					      								    								  
58 LOAD_FAST 1 ( arr2 )					      								    								  
60 LOAD_FAST 8 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_FAST 6 ( us )					      								    								  
68 COMPARE_OP 6 ( in )					      								    								  
70 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
8 72 LOAD_FAST 5 ( count )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 5 ( count )				      								    								  
80 JUMP_ABSOLUTE 52					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
9 >> 84 LOAD_FAST 5 ( count )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUM_CONTIGUOUS_SUBARRAY				      LARGEST_SUM_CONTIGUOUS_SUBARRAY				    LARGEST_SUM_CONTIGUOUS_SUBARRAY				  LARGEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
Disassembly of <code object maxSubArraySum at 0x7fbac0e8de40, def maxSubArraySum ( a , size ) :				    def maxSubArraySum ( a , size ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( maxint )				      	  max_so_far = - maxint - 1				    	max_so_far = - maxint - 1				  
2 UNARY_NEGATIVE					      	  max_ending_here = 0					    	max_ending_here = 0					  
4 LOAD_CONST 1 ( 1 )					      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
6 BINARY_SUBTRACT					      	      max_ending_here = max_ending_here + a [ i ]	    	    max_ending_here = max_ending_here + a [ i ]		  
8 STORE_FAST 2 ( max_so_far )				      	      if ( max_so_far < max_ending_here ) :		    	    if max_so_far < max_ending_here :			  
							      		  max_so_far = max_ending_here			    		max_so_far = max_ending_here			  
3 10 LOAD_CONST 2 ( 0 )					      	      if max_ending_here < 0 :				    	    if max_ending_here < 0 :				  
12 STORE_FAST 3 ( max_ending_here )			      		  max_ending_here = 0				    		max_ending_here = 0				  
							      	  return max_so_far					    return max_so_far						  
4 14 SETUP_LOOP 54 ( to 70 )				      								    								  
16 LOAD_GLOBAL 1 ( range )				      								    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 LOAD_FAST 1 ( size )					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 40 ( to 68 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 3 ( max_ending_here )			      								    								  
32 LOAD_FAST 0 ( a )					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 3 ( max_ending_here )			      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( max_so_far )				      								    								  
44 LOAD_FAST 3 ( max_ending_here )			      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( max_ending_here )			      								    								  
52 STORE_FAST 2 ( max_so_far )				      								    								  
							      								    								  
8 >> 54 LOAD_FAST 3 ( max_ending_here )			      								    								  
56 LOAD_CONST 2 ( 0 )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
9 62 LOAD_CONST 2 ( 0 )					      								    								  
64 STORE_FAST 3 ( max_ending_here )			      								    								  
66 JUMP_ABSOLUTE 26					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 2 ( max_so_far )			      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS		      COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS		    COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS			  COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS
--							      --							    --								  --
Disassembly of <code object countWays at 0x7fbac0e89d20, file def countWays ( N ) :					    def countWays ( N ) :					  success : None
2 0 LOAD_FAST 0 ( N )					      	  if ( N == 1 ) :					    	if N == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 4						    	    return 4						  
4 COMPARE_OP 2 ( == )					      	  countB = 1						    	countB = 1						  
6 POP_JUMP_IF_FALSE 12					      	  countS = 1						    	countS = 1						  
							      	  for i in range ( 2 , N + 1 ) :			    	for i in range ( 2 , N + 1 ) :				  
3 8 LOAD_CONST 2 ( 4 )					      	      prev_countB = countB				    	    prev_countB = countB				  
10 RETURN_VALUE						      	      prev_countS = countS				    	    prev_countS = countS				  
							      	      countS = prev_countB + prev_countS		    	    countS = prev_countB + prev_countS			  
4 >> 12 LOAD_CONST 1 ( 1 )				      	      countB = prev_countS				    	    countB = prev_countS				  
14 STORE_FAST 1 ( countB )				      	  result = countS + countB				    	result = countS + countB				  
							      	  return ( result * result )				    	return result * result					  
5 16 LOAD_CONST 1 ( 1 )					      								    								  
18 STORE_FAST 2 ( countS )				      								    								  
							      								    								  
6 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 3 ( 2 )					      								    								  
26 LOAD_FAST 0 ( N )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 24 ( to 62 )				      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 40 LOAD_FAST 1 ( countB )				      								    								  
42 STORE_FAST 4 ( prev_countB )				      								    								  
							      								    								  
8 44 LOAD_FAST 2 ( countS )				      								    								  
46 STORE_FAST 5 ( prev_countS )				      								    								  
							      								    								  
9 48 LOAD_FAST 4 ( prev_countB )			      								    								  
50 LOAD_FAST 5 ( prev_countS )				      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 2 ( countS )				      								    								  
							      								    								  
10 56 LOAD_FAST 5 ( prev_countS )			      								    								  
58 STORE_FAST 1 ( countB )				      								    								  
60 JUMP_ABSOLUTE 36					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
11 >> 64 LOAD_FAST 2 ( countS )				      								    								  
66 LOAD_FAST 1 ( countB )				      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 6 ( result )				      								    								  
							      								    								  
12 72 LOAD_FAST 6 ( result )				      								    								  
74 LOAD_FAST 6 ( result )				      								    								  
76 BINARY_MULTIPLY					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7	      FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		    FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		  FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7
--							      --							    --								  --
Disassembly of <code object findpos at 0x7fbac0e89d20, file " def findpos ( n ) :					    def findpos ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 1 ( i )					      	  j = len ( n )						    	j = len ( n )						  
							      	  pos = 0						    	pos = 0							  
3 4 LOAD_GLOBAL 0 ( len )				      	  while ( i < j ) :					    	while i < j :						  
6 LOAD_FAST 0 ( n )					      	      if ( n [ i ] == '4' ) :				    	    if n [ i ] == '4' :					  
8 CALL_FUNCTION 1					      		  pos = pos * 2 + 1				    		pos = pos * 2 + 1				  
10 STORE_FAST 2 ( j )					      	      if ( n [ i ] == '7' ) :				    	    if n [ i ] == '7' :					  
							      		  pos = pos * 2 + 2				    		pos = pos * 2 + 2				  
4 12 LOAD_CONST 1 ( 0 )					      	      i = i + 1						    	    i = i + 1						  
14 STORE_FAST 3 ( pos )					      	  return pos						    	return pos						  
							      								    								  
5 16 SETUP_LOOP 68 ( to 86 )				      								    								  
>> 18 LOAD_FAST 1 ( i )					      								    								  
20 LOAD_FAST 2 ( j )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( '4' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 38 LOAD_FAST 3 ( pos )				      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_CONST 4 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 3 ( pos )					      								    								  
							      								    								  
8 >> 50 LOAD_FAST 0 ( n )				      								    								  
52 LOAD_FAST 1 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 5 ( '7' )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 62 LOAD_FAST 3 ( pos )				      								    								  
64 LOAD_CONST 3 ( 2 )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_CONST 3 ( 2 )					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 3 ( pos )					      								    								  
							      								    								  
10 >> 74 LOAD_FAST 1 ( i )				      								    								  
76 LOAD_CONST 4 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 1 ( i )					      								    								  
82 JUMP_ABSOLUTE 18					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_FAST 3 ( pos )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
Disassembly of <code object countDi<<unk>> les at 0x7fbac0e8b def countDi<<unk>> les ( arr , n ) :			    def countDi<unk> les ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 90 ( to 96 )				      		  if ( arr [ i ] % arr [ j ] == 0 or arr [ j ] % ar 		if arr [ i ] % arr [ j ] == 0 or arr [ j ] % arr  
6 LOAD_GLOBAL 0 ( range )				      		      res += 1					    		    res += 1					  
8 LOAD_CONST 1 ( 0 )					      	  return res						    return res							  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 76 ( to 94 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 70 ( to 92 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 52 ( to 90 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_MODULO					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_TRUE 80					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 4 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 >> 80 LOAD_FAST 2 ( res )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 2 ( res )					      								    								  
88 JUMP_ABSOLUTE 36					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 JUMP_ABSOLUTE 16					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
7 >> 96 LOAD_FAST 2 ( res )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			      FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			    FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			  FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE
--							      --							    --								  --
Disassembly of <code object dayofweek at 0x7fbac0e8d540, file def dayofweek ( d , m , y ) :				    def dayofweek ( d , m , y ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]	    	t = [ 0 , 3 , 2 , 5 , 0 , 3 , 1 , 4 , 6 , 2 , 7 ]	  
2 LOAD_CONST 2 ( 3 )					      	  y -= m < 3						    	y -= m < 3						  
4 LOAD_CONST 3 ( 2 )					      	  return ( ( y + int ( y / 4 ) - int ( y / 100 ) + int ( y  	return y + int ( y / 4 ) - int ( y / 4 ) + int ( y / 100  
6 LOAD_CONST 4 ( 5 )					      								    								  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 LOAD_CONST 2 ( 3 )					      								    								  
12 LOAD_CONST 4 ( 5 )					      								    								  
14 LOAD_CONST 5 ( 1 )					      								    								  
16 LOAD_CONST 6 ( 4 )					      								    								  
18 LOAD_CONST 7 ( 6 )					      								    								  
20 LOAD_CONST 3 ( 2 )					      								    								  
22 LOAD_CONST 6 ( 4 )					      								    								  
24 BUILD_LIST 12					      								    								  
26 STORE_FAST 3 ( t )					      								    								  
							      								    								  
3 28 LOAD_FAST 2 ( y )					      								    								  
30 LOAD_FAST 1 ( m )					      								    								  
32 LOAD_CONST 2 ( 3 )					      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 INPLACE_SUBTRACT					      								    								  
38 STORE_FAST 2 ( y )					      								    								  
							      								    								  
4 40 LOAD_FAST 2 ( y )					      								    								  
42 LOAD_GLOBAL 0 ( int )				      								    								  
44 LOAD_FAST 2 ( y )					      								    								  
46 LOAD_CONST 6 ( 4 )					      								    								  
48 BINARY_TRUE_DIVIDE					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_GLOBAL 0 ( int )				      								    								  
56 LOAD_FAST 2 ( y )					      								    								  
58 LOAD_CONST 8 ( 100 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_GLOBAL 0 ( int )				      								    								  
68 LOAD_FAST 2 ( y )					      								    								  
70 LOAD_CONST 9 ( 400 )					      								    								  
72 BINARY_TRUE_DIVIDE					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 3 ( t )					      								    								  
80 LOAD_FAST 1 ( m )					      								    								  
82 LOAD_CONST 5 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 0 ( d )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_CONST 10 ( 7 )					      								    								  
96 BINARY_MODULO					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	      MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	    MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	  MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME
--							      --							    --								  --
Disassembly of <code object findLength at 0x7fbac0e8de40, fil def findLength ( string , n ) :				    def findLength ( string , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  current_sum = 0					    	current_sum = 0						  
2 STORE_FAST 2 ( current_sum )				      	  max_sum = 0						    	max_sum = 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      current_sum += ( 1 if string [ i ] == '0' else - 1 )  	    current_sum += ( string [ i ] == '0' ) * ( 1 if curre 
6 STORE_FAST 3 ( max_sum )				      	      if current_sum < 0 :				    	    if current_sum < 0 :				  
							      		  current_sum = 0				    		current_sum = 0					  
4 8 SETUP_LOOP 62 ( to 72 )				      	      max_sum = max ( current_sum , max_sum )		    	    max_sum = max ( current_sum , max_sum )		  
10 LOAD_GLOBAL 0 ( range )				      	  return max_sum if max_sum else 0			    	return max_sum if max_sum else 0			  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 50 ( to 70 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( current_sum )			      								    								  
24 LOAD_FAST 0 ( string )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( '0' )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 JUMP_FORWARD 2 ( to 42 )				      								    								  
>> 40 LOAD_CONST 4 ( - 1 )				      								    								  
>> 42 INPLACE_ADD					      								    								  
44 STORE_FAST 2 ( current_sum )				      								    								  
							      								    								  
6 46 LOAD_FAST 2 ( current_sum )			      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 54 LOAD_CONST 1 ( 0 )					      								    								  
56 STORE_FAST 2 ( current_sum )				      								    								  
							      								    								  
8 >> 58 LOAD_GLOBAL 1 ( max )				      								    								  
60 LOAD_FAST 2 ( current_sum )				      								    								  
62 LOAD_FAST 3 ( max_sum )				      								    								  
64 CALL_FUNCTION 2					      								    								  
66 STORE_FAST 3 ( max_sum )				      								    								  
68 JUMP_ABSOLUTE 18					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
9 >> 72 LOAD_FAST 3 ( max_sum )				      								    								  
74 POP_JUMP_IF_FALSE 80					      								    								  
76 LOAD_FAST 3 ( max_sum )				      								    								  
78 RETURN_VALUE						      								    								  
>> 80 LOAD_CONST 1 ( 0 )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
Disassembly of <code object maxLen at 0x7fbac0e8de40, file "< def maxLen ( arr ) :					    def maxLen ( arr ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  max_len = 0						    	max_len = 0						  
2 STORE_FAST 1 ( max_len )				      	  for i in range ( len ( arr ) ) :			    	for i in range ( len ( arr ) ) :			  
							      	      curr_sum = 0					    	    curr_sum = 0					  
3 4 SETUP_LOOP 86 ( to 92 )				      	      for j in range ( i , len ( arr ) ) :		    	    for j in range ( i , len ( arr ) ) :		  
6 LOAD_GLOBAL 0 ( range )				      		  curr_sum += arr [ j ]				    		curr_sum += arr [ j ]				  
8 LOAD_GLOBAL 1 ( len )					      		  if curr_sum == 0 :				    		if curr_sum == 0 :				  
10 LOAD_FAST 0 ( arr )					      		      max_len = max ( max_len , j - i + 1 )	    		    max_len = max ( max_len , j - i + 1 )	  
12 CALL_FUNCTION 1					      	  return max_len					    	return max_len						  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 70 ( to 90 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
5 26 SETUP_LOOP 60 ( to 88 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 LOAD_GLOBAL 1 ( len )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 42 ( to 86 )				      								    								  
44 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 46 LOAD_FAST 3 ( curr_sum )				      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
7 58 LOAD_FAST 3 ( curr_sum )				      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
8 66 LOAD_GLOBAL 2 ( max )				      								    								  
68 LOAD_FAST 1 ( max_len )				      								    								  
70 LOAD_FAST 4 ( j )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 2					      								    								  
82 STORE_FAST 1 ( max_len )				      								    								  
84 JUMP_ABSOLUTE 42					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 18					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
9 >> 92 LOAD_FAST 1 ( max_len )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI
--							      --							    --								  --
Disassembly of <code object canRepresentBST at 0x7fbac0e8bc90 def canRepresentBST ( pre ) :				    def cancreated_entBST ( pre ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  s = [ ]						    	s = [ ]							  
2 STORE_FAST 1 ( s )					      	  root = INT_MIN					    	root = INT_MIN						  
							      	  for value in pre :					    	for value in pre :					  
3 4 LOAD_GLOBAL 0 ( INT_MIN )				      	      if value < root :					    	    if value < root :					  
6 STORE_FAST 2 ( root )					      		  return False					    		return False					  
							      	      while ( len ( s ) > 0 and s [ - 1 ] < value ) :	    	    while len ( s ) > 0 and s [ - 1 ] < value :		  
4 8 SETUP_LOOP 72 ( to 82 )				      		  root = s.pop ( )				    		root = s.pop ( )				  
10 LOAD_FAST 0 ( pre )					      	      s.append ( value )				    	s.append ( value )					  
12 GET_ITER						      	  return True						    return True							  
>> 14 FOR_ITER 64 ( to 80 )				      								    								  
16 STORE_FAST 3 ( value )				      								    								  
							      								    								  
5 18 LOAD_FAST 3 ( value )				      								    								  
20 LOAD_FAST 2 ( root )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 26 LOAD_CONST 1 ( False )				      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
7 >> 30 SETUP_LOOP 36 ( to 68 )				      								    								  
>> 32 LOAD_GLOBAL 1 ( len )				      								    								  
34 LOAD_FAST 1 ( s )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 COMPARE_OP 4 ( > )					      								    								  
42 POP_JUMP_IF_FALSE 66					      								    								  
44 LOAD_FAST 1 ( s )					      								    								  
46 LOAD_CONST 3 ( - 1 )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( value )				      								    								  
52 COMPARE_OP 0 ( < )					      								    								  
54 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 56 LOAD_FAST 1 ( s )					      								    								  
58 LOAD_METHOD 2 ( pop )				      								    								  
60 CALL_METHOD 0					      								    								  
62 STORE_FAST 2 ( root )				      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 1 ( s )				      								    								  
70 LOAD_METHOD 3 ( append )				      								    								  
72 LOAD_FAST 3 ( value )				      								    								  
74 CALL_METHOD 1					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 14					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 LOAD_CONST 4 ( True )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION		      DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			    DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			  DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION
--							      --							    --								  --
Disassembly of <code object distributingBalls at 0x7fbac0e8bc def distributingBalls ( k , n , string ) :		    def distributingBalls ( k , n , string ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * MAX_CHAR					    	a = [ 0 ] * MAX_CHAR					  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      a [ ord ( string [ i ] ) - ord ( 'a' ) ] += 1	    	    a [ ord ( string [ i ] ) - ord ( "a" ) ] += 1	  
6 BINARY_MULTIPLY					      	  for i in range ( MAX_CHAR ) :				    	for i in range ( MAX_CHAR ) :				  
8 STORE_FAST 3 ( a )					      	      if ( a [ i ] > k ) :				    	    if a [ i ] > k :					  
							      		  return False					    		return False					  
3 10 SETUP_LOOP 48 ( to 60 )				      	  return True						    	return True						  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 36 ( to 58 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( a )					      								    								  
26 LOAD_GLOBAL 2 ( ord )				      								    								  
28 LOAD_FAST 2 ( string )				      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 LOAD_GLOBAL 2 ( ord )				      								    								  
38 LOAD_CONST 2 ( 'a' )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 20					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
5 >> 60 SETUP_LOOP 32 ( to 94 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
66 CALL_FUNCTION 1					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 20 ( to 92 )				      								    								  
72 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 74 LOAD_FAST 3 ( a )					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( k )					      								    								  
82 COMPARE_OP 4 ( > )					      								    								  
84 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 86 LOAD_CONST 4 ( False )				      								    								  
88 RETURN_VALUE						      								    								  
90 JUMP_ABSOLUTE 70					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
8 >> 94 LOAD_CONST 5 ( True )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_<unk> TIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
Disassembly of <code object countIntegralSolutions at 0x7fbac def countIntegralSolutions ( n ) :			    def countIntegralSolutions ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  for i in range ( n + 1 ) :				    	for i in range ( n + 1 ) :				  
							      	      for j in range ( n + 1 ) :			    	    for j in range ( n + 1 ) :				  
3 4 SETUP_LOOP 88 ( to 94 )				      		  for k in range ( n + 1 ) :			    		for k in range ( n + 1 ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      if i + j + k == n :			    		    if i + j + k == n :				  
8 LOAD_FAST 0 ( n )					      			  result += 1				    			result += 1				  
10 LOAD_CONST 2 ( 1 )					      	  return result						    	return result						  
12 BINARY_ADD						      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 72 ( to 92 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 66 ( to 90 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 50 ( to 88 )				      								    								  
38 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 40 SETUP_LOOP 44 ( to 86 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 28 ( to 84 )				      								    								  
56 STORE_FAST 4 ( k )					      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 BINARY_ADD						      								    								  
64 LOAD_FAST 4 ( k )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 0 ( n )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 74 LOAD_FAST 1 ( result )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 1 ( result )				      								    								  
82 JUMP_ABSOLUTE 54					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 JUMP_ABSOLUTE 36					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 JUMP_ABSOLUTE 18					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
8 >> 94 LOAD_FAST 1 ( result )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
Disassembly of <code object minXOR at 0x7fbac0e8de40, file "< def minXOR ( arr , n ) :					    def minXOR ( arr , n ) :					  success : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( ) ;					    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  min_xor = 999999					    	min_xor = 999999					  
4 CALL_METHOD 0						      	  val = 0						    	val = 0							  
6 POP_TOP						      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
							      	      for j in range ( i + 1 , n - 1 ) :		    	    for j in range ( i + 1 , n - 1 ) :			  
3 8 LOAD_CONST 1 ( 999999 )				      		  val = arr [ i ] ^ arr [ j ]			    		val = arr [ i ] ^ arr [ j ]			  
10 STORE_FAST 2 ( min_xor )				      		  min_xor = min ( min_xor , val )		    		min_xor = min ( min_xor , val )			  
							      	  return min_xor					    	return min_xor						  
4 12 LOAD_CONST 2 ( 0 )					      								    								  
14 STORE_FAST 3 ( val )					      								    								  
							      								    								  
5 16 SETUP_LOOP 76 ( to 94 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 2 ( 0 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 58 ( to 92 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 SETUP_LOOP 52 ( to 90 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_CONST 3 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 30 ( to 88 )				      								    								  
58 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 5 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_XOR						      								    								  
74 STORE_FAST 3 ( val )					      								    								  
							      								    								  
8 76 LOAD_GLOBAL 2 ( min )				      								    								  
78 LOAD_FAST 2 ( min_xor )				      								    								  
80 LOAD_FAST 3 ( val )					      								    								  
82 CALL_FUNCTION 2					      								    								  
84 STORE_FAST 2 ( min_xor )				      								    								  
86 JUMP_ABSOLUTE 56					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 JUMP_ABSOLUTE 32					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
9 >> 94 LOAD_FAST 2 ( min_xor )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SURVIVAL						      SURVIVAL							    SURVIVAL							  SURVIVAL
--							      --							    --								  --
Disassembly of <code object survival at 0x7fbac0e8d540, file  def survival ( S , N , M ) :				    def survival ( S , N , M ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( N )					      	  if ( ( ( N * 6 ) < ( M * 7 ) and S > 6 ) or M > N ) :	    	if N * 6 < M * 7 and S > 6 or M > N :			  
2 LOAD_CONST 1 ( 6 )					      	      print ( "No" )					    	    print ( "No" )					  
4 BINARY_MULTIPLY					      	  else :						    	else :							  
6 LOAD_FAST 2 ( M )					      	      days = ( M * S ) / N				    	    days = M * S / N					  
8 LOAD_CONST 2 ( 7 )					      	      if ( ( ( M * S ) % N ) != 0 ) :			    	    if M * S % N != 0 :					  
10 BINARY_MULTIPLY					      		  days += 1					    		days += 1					  
12 COMPARE_OP 0 ( < )					      	      print ( "Yes " ) ,				    	    print ( "Yes " )					  
14 POP_JUMP_IF_FALSE 24					      	      print ( days )					    	    print ( days )					  
16 LOAD_FAST 0 ( S )					      								    								  
18 LOAD_CONST 1 ( 6 )					      								    								  
20 COMPARE_OP 4 ( > )					      								    								  
22 POP_JUMP_IF_TRUE 32					      								    								  
>> 24 LOAD_FAST 2 ( M )					      								    								  
26 LOAD_FAST 1 ( N )					      								    								  
28 COMPARE_OP 4 ( > )					      								    								  
30 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
3 >> 32 LOAD_GLOBAL 0 ( print )				      								    								  
34 LOAD_CONST 3 ( 'No' )				      								    								  
36 CALL_FUNCTION 1					      								    								  
38 POP_TOP						      								    								  
40 JUMP_FORWARD 54 ( to 96 )				      								    								  
							      								    								  
5 >> 42 LOAD_FAST 2 ( M )				      								    								  
44 LOAD_FAST 0 ( S )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 1 ( N )					      								    								  
50 BINARY_TRUE_DIVIDE					      								    								  
52 STORE_FAST 3 ( days )				      								    								  
							      								    								  
6 54 LOAD_FAST 2 ( M )					      								    								  
56 LOAD_FAST 0 ( S )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_FAST 1 ( N )					      								    								  
62 BINARY_MODULO					      								    								  
64 LOAD_CONST 4 ( 0 )					      								    								  
66 COMPARE_OP 3 ( != )					      								    								  
68 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
7 70 LOAD_FAST 3 ( days )				      								    								  
72 LOAD_CONST 5 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 3 ( days )				      								    								  
							      								    								  
8 >> 78 LOAD_GLOBAL 0 ( print )				      								    								  
80 LOAD_CONST 6 ( 'Yes ' )				      								    								  
82 CALL_FUNCTION 1					      								    								  
84 BUILD_TUPLE 1					      								    								  
86 POP_TOP						      								    								  
							      								    								  
9 88 LOAD_GLOBAL 0 ( print )				      								    								  
90 LOAD_FAST 3 ( days )					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 POP_TOP						      								    								  
>> 96 LOAD_CONST 0 ( None )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_3				      FIND_REPETITIVE_ELEMENT_1_N_1_3				    FIND_REPETITIVE_ELEMENT_1_N_1_3				  FIND_REPETITIVE_ELEMENT_1_N_1_3
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7fbac0e8d540,  def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  missingElement = 0					    	missingElement = 0					  
2 STORE_FAST 2 ( missingElement )			      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      element = arr [ abs ( arr [ i ] ) ]		    	    element = arr [ abs ( arr [ i ] ) ]			  
3 4 SETUP_LOOP 82 ( to 88 )				      	      if ( element < 0 ) :				    	    if element < 0 :					  
6 LOAD_GLOBAL 0 ( range )				      		  missingElement = arr [ i ]			    		missingElement = arr [ i ]			  
8 LOAD_CONST 1 ( 0 )					      		  break						    		break						  
10 LOAD_FAST 1 ( n )					      	      arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) 	    arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) 
12 CALL_FUNCTION 2					      	  return abs ( missingElement )				    return abs ( missingElement )				  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 68 ( to 86 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_GLOBAL 1 ( abs )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 4 ( element )				      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( element )				      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 STORE_FAST 2 ( missingElement )			      								    								  
							      								    								  
7 52 BREAK_LOOP						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_GLOBAL 1 ( abs )				      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 BINARY_SUBSCR					      								    								  
68 UNARY_NEGATIVE					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_GLOBAL 1 ( abs )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_SUBSCR						      								    								  
84 JUMP_ABSOLUTE 16					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_GLOBAL 1 ( abs )				      								    								  
90 LOAD_FAST 2 ( missingElement )			      								    								  
92 CALL_FUNCTION 1					      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES
--							      --							    --								  --
Disassembly of <code object firstLetterWord at 0x7fbac0e89d20 def firstLetterWord ( str ) :				    def firstLetterWord ( str ) :				  success : None
2 0 LOAD_CONST 1 ( '' )					      	  result = ""						    	result = ""						  
2 STORE_FAST 1 ( result )				      	  v = True						    	v = True						  
							      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
3 4 LOAD_CONST 2 ( True )				      	      if ( str [ i ] == ' ' ) :				    	    if str [ i ] == " " :				  
6 STORE_FAST 2 ( v )					      		  v = True					    		v = True					  
							      	      elif ( str [ i ] != ' ' and v == True ) :		    	    elif str [ i ] != " " and v == True :		  
4 8 SETUP_LOOP 74 ( to 84 )				      		  result += ( str [ i ] )			    		result += str [ i ]				  
10 LOAD_GLOBAL 0 ( range )				      		  v = False					    		v = False					  
12 LOAD_GLOBAL 1 ( len )				      	  return result						    	return result						  
14 LOAD_FAST 0 ( str )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 58 ( to 82 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( str )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 3 ( ' ' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 38 LOAD_CONST 2 ( True )				      								    								  
40 STORE_FAST 2 ( v )					      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
7 >> 44 LOAD_FAST 0 ( str )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( ' ' )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 22					      								    								  
56 LOAD_FAST 2 ( v )					      								    								  
58 LOAD_CONST 2 ( True )				      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
8 64 LOAD_FAST 1 ( result )				      								    								  
66 LOAD_FAST 0 ( str )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 1 ( result )				      								    								  
							      								    								  
9 76 LOAD_CONST 4 ( False )				      								    								  
78 STORE_FAST 2 ( v )					      								    								  
80 JUMP_ABSOLUTE 22					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 1 ( result )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_<unk> PARTS				      BREAK_NUMBER_<unk> PARTS					    BREAK_NUMBER_<unk> PARTS					  BREAK_NUMBER_<unk> PARTS
--							      --							    --								  --
Disassembly of <code object count_of_ways at 0x7fbac0e8d540,  def count_of_ways ( n ) :					    def count_of_ways ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  for i in range ( 0 , n + 1 ) :			    	for i in range ( 0 , n + 1 ) :				  
							      	      for j in range ( 0 , n + 1 ) :			    	    for j in range ( 0 , n + 1 ) :			  
3 4 SETUP_LOOP 94 ( to 100 )				      		  for k in range ( 0 , n + 1 ) :		    		for k in range ( 0 , n + 1 ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      if ( i + j + k == n ) :			    		    if i + j + k == n :				  
8 LOAD_CONST 1 ( 0 )					      			  count = count + 1			    			count = count + 1			  
10 LOAD_FAST 0 ( n )					      	  return count						    return count						  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 76 ( to 98 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 70 ( to 96 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 52 ( to 94 )				      								    								  
42 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 44 SETUP_LOOP 46 ( to 92 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 28 ( to 90 )				      								    								  
62 STORE_FAST 4 ( k )					      								    								  
							      								    								  
6 64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_FAST 3 ( j )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 4 ( k )					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 80 LOAD_FAST 1 ( count )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 1 ( count )				      								    								  
88 JUMP_ABSOLUTE 60					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 JUMP_ABSOLUTE 40					      								    								  
>> 94 POP_BLOCK						      								    								  
>> 96 JUMP_ABSOLUTE 20					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
8 >> 100 LOAD_FAST 1 ( count )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	      WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	    WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	  WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO
--							      --							    --								  --
Disassembly of <code object xorZero at 0x7fbac0e8de40, file " def xorZero ( str ) :					    def xorZero ( str ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  one_count = 0						    	one_count = 0						  
2 STORE_FAST 1 ( one_count )				      	  zero_count = 0					    	zero_count = 0						  
							      	  n = len ( str )					    	n = len ( str )						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n , 1 ) :			    	for i in range ( 0 , n , 1 ) :				  
6 STORE_FAST 2 ( zero_count )				      	      if ( str [ i ] == '1' ) :				    	    if str [ i ] == '1' :				  
							      		  one_count += 1				    		one_count += 1					  
4 8 LOAD_GLOBAL 0 ( len )				      	      else :						    	    else :						  
10 LOAD_FAST 0 ( str )					      		  zero_count += 1				    		zero_count += 1					  
12 CALL_FUNCTION 1					      	  if ( one_count % 2 == 0 ) :				    	if one_count % 2 == 0 :					  
14 STORE_FAST 3 ( n )					      	      return zero_count					    	    return zero_count					  
							      	  return one_count					    	return one_count					  
5 16 SETUP_LOOP 50 ( to 68 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 CALL_FUNCTION 3					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 34 ( to 66 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( str )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( '1' )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 46 LOAD_FAST 1 ( one_count )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( one_count )				      								    								  
54 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
9 >> 56 LOAD_FAST 2 ( zero_count )			      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( zero_count )				      								    								  
64 JUMP_ABSOLUTE 30					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
10 >> 68 LOAD_FAST 1 ( one_count )			      								    								  
70 LOAD_CONST 4 ( 2 )					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
11 80 LOAD_FAST 2 ( zero_count )			      								    								  
82 RETURN_VALUE						      								    								  
							      								    								  
12 >> 84 LOAD_FAST 1 ( one_count )			      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_CIR<unk> RESIDE_BOUNDARY_MAINTAINED_OUTER CHECK_WHETHER_GIVEN_CIR<unk> RESIDE_BOUNDARY_MAINTAINED_OUTER CHECK_WHETHER_GIVEN_CIR<unk> RESIDE_BOUNDARY_MAINTAINED_OUTER CHECK_WHETHER_GIVEN_CIR<unk> RESIDE_BOUNDARY_MAINTAINED_OUTER
--							      --							    --								  --
Disassembly of <code object fitOrNotFit at 0x7fbac0e8de40, fi def fitOrNotFit ( R , r , x , y , rad ) :			    def fitOrNotFit ( R , r , x , y , val ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) 	val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) 
2 LOAD_METHOD 1 ( sqrt )				      	  if ( val + rad <= R and val - rad >= R - r ) :	    	if val + rad <= R and ( val - rad <= R - r ) :		  
4 LOAD_GLOBAL 0 ( math )				      	      print ( "Fits\n" )				    	    print ( "Fit\n" )					  
6 LOAD_METHOD 2 ( pow )					      	  else :						    	else :							  
8 LOAD_FAST 2 ( x )					      	      print ( "Doesn't Fit" )				    	    print ( "Doesn't Fit" )				  
10 LOAD_CONST 1 ( 2 )					      								    								  
12 CALL_METHOD 2					      								    								  
14 LOAD_GLOBAL 0 ( math )				      								    								  
16 LOAD_METHOD 2 ( pow )				      								    								  
18 LOAD_FAST 3 ( y )					      								    								  
20 LOAD_CONST 1 ( 2 )					      								    								  
22 CALL_METHOD 2					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_METHOD 1					      								    								  
28 STORE_FAST 5 ( val )					      								    								  
							      								    								  
3 30 LOAD_FAST 5 ( val )				      								    								  
32 LOAD_FAST 4 ( rad )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_FAST 0 ( R )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 68					      								    								  
42 LOAD_FAST 5 ( val )					      								    								  
44 LOAD_FAST 4 ( rad )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 0 ( R )					      								    								  
50 LOAD_FAST 1 ( r )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 COMPARE_OP 5 ( >= )					      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
4 58 LOAD_GLOBAL 3 ( print )				      								    								  
60 LOAD_CONST 2 ( 'Fits\n' )				      								    								  
62 CALL_FUNCTION 1					      								    								  
64 POP_TOP						      								    								  
66 JUMP_FORWARD 8 ( to 76 )				      								    								  
							      								    								  
6 >> 68 LOAD_GLOBAL 3 ( print )				      								    								  
70 LOAD_CONST 3 ( "Doesn't Fit" )			      								    								  
72 CALL_FUNCTION 1					      								    								  
74 POP_TOP						      								    								  
>> 76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION     MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	    MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	  MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION
--							      --							    --								  --
Disassembly of <code object maxSubArraySumRepeated at 0x7fbac def maxSubArraySumRepeated ( a , n , k ) :		    def maxSubArraySumeated ( a , n , k = 0 ) :			  success : None
2 0 LOAD_CONST 1 ( - 2147483648 )			      	  max_so_far = - 2147483648				    	max_so_far = - 2147483648				  
2 STORE_FAST 3 ( max_so_far )				      	  max_ending_here = 0					    	max_ending_here = 0					  
							      	  for i in range ( n * k ) :				    	for i in range ( n * k ) :				  
3 4 LOAD_CONST 2 ( 0 )					      	      max_ending_here = max_ending_here + a [ i % n ]	    	    max_ending_here = max_ending_here + a [ i % n ]	  
6 STORE_FAST 4 ( max_ending_here )			      	      if ( max_so_far < max_ending_here ) :		    	    if max_so_far < max_ending_here :			  
							      		  max_so_far = max_ending_here			    		max_so_far = max_ending_here			  
4 8 SETUP_LOOP 60 ( to 70 )				      	      if ( max_ending_here < 0 ) :			    	    if max_ending_here < 0 :				  
10 LOAD_GLOBAL 0 ( range )				      		  max_ending_here = 0				    		max_ending_here = 0				  
12 LOAD_FAST 1 ( n )					      	  return max_so_far					    	return max_so_far					  
14 LOAD_FAST 2 ( k )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 44 ( to 68 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 4 ( max_ending_here )			      								    								  
28 LOAD_FAST 0 ( a )					      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 BINARY_MODULO					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 4 ( max_ending_here )			      								    								  
							      								    								  
6 42 LOAD_FAST 3 ( max_so_far )				      								    								  
44 LOAD_FAST 4 ( max_ending_here )			      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 50 LOAD_FAST 4 ( max_ending_here )			      								    								  
52 STORE_FAST 3 ( max_so_far )				      								    								  
							      								    								  
8 >> 54 LOAD_FAST 4 ( max_ending_here )			      								    								  
56 LOAD_CONST 2 ( 0 )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
9 62 LOAD_CONST 2 ( 0 )					      								    								  
64 STORE_FAST 4 ( max_ending_here )			      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 3 ( max_so_far )			      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			      CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			    CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			  CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT
--							      --							    --								  --
Disassembly of <code object isAnBn at 0x7fbac0e89d20, file "< def isAnBn ( str ) :					    def isAnBn ( str ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( str )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.test/CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT.py"
4 CALL_FUNCTION 1					      	      if ( str [ i ] != 'a' ) :				    	    if str [ i ] != "a" :				  , line 40	return True	^ SyntaxError: 'retu
6 STORE_FAST 1 ( n )					      		  break						    		break						  rn' outside function
							      	  if ( i * 2 != n ) :					    	if i * 2 != n :						  
3 8 SETUP_LOOP 30 ( to 40 )				      	      return False					    	    return False					  
10 LOAD_GLOBAL 1 ( range )				      	  for j in range ( i , n ) :				    	for j in range ( i , n ) :				  
12 LOAD_FAST 1 ( n )					      	      if ( str [ j ] != 'b' ) :				    	    if str [ j ] != "b" :				  
14 CALL_FUNCTION 1					      		  return False					    		return False					  
16 GET_ITER						      	  return True						    return True							  
>> 18 FOR_ITER 18 ( to 38 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( str )				      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 1 ( 'a' )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 34 BREAK_LOOP						      								    								  
36 JUMP_ABSOLUTE 18					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 2 ( i )				      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 52 LOAD_CONST 3 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 SETUP_LOOP 34 ( to 92 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 20 ( to 90 )				      								    								  
70 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 72 LOAD_FAST 0 ( str )				      								    								  
74 LOAD_FAST 3 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( 'b' )					      								    								  
80 COMPARE_OP 3 ( != )					      								    								  
82 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
10 84 LOAD_CONST 3 ( False )				      								    								  
86 RETURN_VALUE						      								    								  
88 JUMP_ABSOLUTE 68					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
11 >> 92 LOAD_CONST 5 ( True )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
Disassembly of <code object nobleInteger at 0x7fbac0e8bc90, f def nobleInteger ( arr , size ) :				    def nobleInteger ( arr , size = ( 16 , 16 ) ) :		  script_not_found : None
2 0 SETUP_LOOP 86 ( to 88 )				      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    	    count = 0						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , size ) :			    	    for j in range ( 0 , size ) :			  
6 LOAD_FAST 1 ( size )					      		  if ( arr [ i ] < arr [ j ] ) :		    		if arr [ i ] < arr [ j ] :			  
8 CALL_FUNCTION 2					      		      count += 1				    		    count += 1					  
10 GET_ITER						      	      if ( count == arr [ i ] ) :			    	if count == arr [ i ] :					  
>> 12 FOR_ITER 72 ( to 86 )				      		  return arr [ i ]				    	    return arr [ i ]					  
14 STORE_FAST 2 ( i )					      	  return - 1						    return - 1							  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( size )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( count )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( count )				      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 3 ( count )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 12					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_CONST 3 ( - 1 )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object printRepeating at 0x7fbac0e8bc90, def printRepeating ( arr , size ) :			    def printRepeating ( arr , size ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Repeating elements are " , end = '' )	    	print ( "Repeating elements are " , end = "" )		  
2 LOAD_CONST 1 ( 'Repeating elements are ' )		      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
4 LOAD_CONST 2 ( '' )					      	      for j in range ( i + 1 , size ) :			    	    for j in range ( i + 1 , size ) :			  
6 LOAD_CONST 3 ( ( 'end' , ) )				      		  if arr [ i ] == arr [ j ] :			    		if arr [ i ] == arr [ j ] :			  
8 CALL_FUNCTION_KW 2					      		      print ( arr [ i ] , end = ' ' )		    		    print ( arr [ i ] , end = " " )		  
10 POP_TOP						      								    								  
							      								    								  
3 12 SETUP_LOOP 74 ( to 88 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 LOAD_FAST 1 ( size )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 60 ( to 86 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 SETUP_LOOP 54 ( to 84 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 5 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( size )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 36 ( to 82 )				      								    								  
46 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 3 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 0 ( print )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 6 ( ' ' )					      								    								  
74 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
76 CALL_FUNCTION_KW 2					      								    								  
78 POP_TOP						      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 JUMP_ABSOLUTE 24					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 LOAD_CONST 0 ( None )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e89d20, file "<d def check ( st ) :					    def check ( st ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    	n = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  if ( n == 0 ) :					    	if n == 0 :						  
4 CALL_FUNCTION 1					      	      return False					    	    return False					  
6 STORE_FAST 1 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
							      	      return ( ( st [ 0 ] - '0' ) % 4 == 0 )		    	    return ( st [ 0 ] - '0' ) % 4 == 0 ) % 0		  
3 8 LOAD_FAST 1 ( n )					      	  last = ( int ) ( st [ n - 1 ] )			    	last = int ( st [ n - 1 ] )				  
10 LOAD_CONST 1 ( 0 )					      	  second_last = ( int ) ( st [ n - 2 ] )		    	second_last = int ( st [ n - 2 ] )			  
12 COMPARE_OP 2 ( == )					      	  return ( ( second_last * 10 + last ) % 4 == 0 )	    	return second_last * 10 + last % 4 == 0			  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
4 16 LOAD_CONST 2 ( False )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_FAST 1 ( n )				      								    								  
22 LOAD_CONST 3 ( 1 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( st )					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 4 ( '0' )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 5 ( 4 )					      								    								  
40 BINARY_MODULO					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
7 >> 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_FAST 0 ( st )					      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 STORE_FAST 2 ( last )				      								    								  
							      								    								  
8 64 LOAD_GLOBAL 1 ( int )				      								    								  
66 LOAD_FAST 0 ( st )					      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 LOAD_CONST 6 ( 2 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 STORE_FAST 3 ( second_last )				      								    								  
							      								    								  
9 80 LOAD_FAST 3 ( second_last )			      								    								  
82 LOAD_CONST 7 ( 10 )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 LOAD_FAST 2 ( last )					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_CONST 5 ( 4 )					      								    								  
92 BINARY_MODULO					      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_X_Y_SATISFYING_AX_N				      FIND_X_Y_SATISFYING_AX_N					    FIND_X_Y_SATISFYING_AX_N					  FIND_X_Y_SATISFYING_AX_N
--							      --							    --								  --
Disassembly of <code object solution at 0x7fbac0e8bc90, file  def solution ( a , b , n ) :				    def solution ( a , b , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 3 ( i )					      	  while i * a <= n :					    	while i * a <= n :					  
							      	      if ( n - ( i * a ) ) % b == 0 :			    	    if n - i * a % b == b :				  
3 4 SETUP_LOOP 78 ( to 84 )				      		  print ( "x = " , i , ", y = " , int ( ( n - ( i * 		print ( "x = " , i , ", y = " , int ( n - i * a ) 
>> 6 LOAD_FAST 3 ( i )					      		  return 0					    		return 0					  
8 LOAD_FAST 0 ( a )					      	      i = i + 1						    	    i = i + 1						  
10 BINARY_MULTIPLY					      	  print ( "No solution" )				    	print ( "No solution" )					  
12 LOAD_FAST 2 ( n )					      								    								  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( n )					      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 LOAD_FAST 0 ( a )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( b )					      								    								  
30 BINARY_MODULO					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
5 38 LOAD_GLOBAL 0 ( print )				      								    								  
40 LOAD_CONST 2 ( 'x = ' )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_CONST 3 ( ', y = ' )				      								    								  
46 LOAD_GLOBAL 1 ( int )				      								    								  
48 LOAD_FAST 2 ( n )					      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 LOAD_FAST 0 ( a )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 1 ( b )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 CALL_FUNCTION 4					      								    								  
66 POP_TOP						      								    								  
							      								    								  
6 68 LOAD_CONST 1 ( 0 )					      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 3 ( i )				      								    								  
74 LOAD_CONST 4 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 3 ( i )					      								    								  
80 JUMP_ABSOLUTE 6					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
8 >> 84 LOAD_GLOBAL 0 ( print )				      								    								  
86 LOAD_CONST 5 ( 'No solution' )			      								    								  
88 CALL_FUNCTION 1					      								    								  
90 POP_TOP						      								    								  
92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN
--							      --							    --								  --
Disassembly of <code object findNth at 0x7fbac0e8d540, file " def findNth ( n ) :					    def findNth ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  for curr in itertools.count ( ) :			    	for curr in itertools.count ( ) :			  
							      	      sum = 0						    	    sum = 0						  
3 4 SETUP_LOOP 82 ( to 88 )				      	      x = curr						    	    x = curr						  
6 LOAD_GLOBAL 0 ( itertools )				      	      while ( x ) :					    	    while x :						  
8 LOAD_METHOD 1 ( count )				      		  sum = sum + x % 10				    		sum = sum + ( x % 10 )				  
10 CALL_METHOD 0					      		  x = x // 10					    		x = x // 10					  
12 GET_ITER						      	      if ( sum == 10 ) :				    	    if sum == 10 :					  
>> 14 FOR_ITER 70 ( to 86 )				      		  count = count + 1				    		count = count + 1				  
16 STORE_FAST 2 ( curr )				      	      if ( count == n ) :				    	    if count == n :					  
							      		  return curr					    		return curr					  
4 18 LOAD_CONST 1 ( 0 )					      	  return - 1						    	return - 1						  
20 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( curr )				      								    								  
24 STORE_FAST 4 ( x )					      								    								  
							      								    								  
6 26 SETUP_LOOP 28 ( to 56 )				      								    								  
>> 28 LOAD_FAST 4 ( x )					      								    								  
30 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 32 LOAD_FAST 3 ( sum )				      								    								  
34 LOAD_FAST 4 ( x )					      								    								  
36 LOAD_CONST 2 ( 10 )					      								    								  
38 BINARY_MODULO					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
8 44 LOAD_FAST 4 ( x )					      								    								  
46 LOAD_CONST 2 ( 10 )					      								    								  
48 BINARY_FLOOR_DIVIDE					      								    								  
50 STORE_FAST 4 ( x )					      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
9 >> 56 LOAD_FAST 3 ( sum )				      								    								  
58 LOAD_CONST 2 ( 10 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
10 64 LOAD_FAST 1 ( count )				      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 1 ( count )				      								    								  
							      								    								  
11 >> 72 LOAD_FAST 1 ( count )				      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
12 80 LOAD_FAST 2 ( curr )				      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 14					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
13 >> 88 LOAD_CONST 4 ( - 1 )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			      CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			    CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			  CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE
--							      --							    --								  --
Disassembly of <code object checkCollision at 0x7fbac0e8d540, def checkCollision ( a , b , c , x , y , radius ) :	    def checkCollision ( a , b , c , x , y , radius ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( abs )				      	  dist = ( ( abs ( a * x + b * y + c ) ) / math.sqrt ( a *  	dist = abs ( a * x + ( b * y + c ) ) / math.sqrt ( a * a  
2 LOAD_FAST 0 ( a )					      	  if ( radius == dist ) :				    	if radius == dist :					  
4 LOAD_FAST 3 ( x )					      	      print ( "Touch" )					    	    print ( "Touch" )					  
6 BINARY_MULTIPLY					      	  elif ( radius > dist ) :				    	elif radius > dist :					  
8 LOAD_FAST 1 ( b )					      	      print ( "Intersect" )				    	    print ( "Intersect" )				  
10 LOAD_FAST 4 ( y )					      	  else :						    	else :							  
12 BINARY_MULTIPLY					      	      print ( "Outside" )				    	    print ( "Outside" )					  
14 BINARY_ADD						      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_GLOBAL 1 ( math )				      								    								  
24 LOAD_METHOD 2 ( sqrt )				      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_FAST 0 ( a )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 1 ( b )					      								    								  
34 LOAD_FAST 1 ( b )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_METHOD 1					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 STORE_FAST 6 ( dist )				      								    								  
							      								    								  
3 46 LOAD_FAST 5 ( radius )				      								    								  
48 LOAD_FAST 6 ( dist )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
4 54 LOAD_GLOBAL 3 ( print )				      								    								  
56 LOAD_CONST 1 ( 'Touch' )				      								    								  
58 CALL_FUNCTION 1					      								    								  
60 POP_TOP						      								    								  
62 JUMP_FORWARD 26 ( to 90 )				      								    								  
							      								    								  
5 >> 64 LOAD_FAST 5 ( radius )				      								    								  
66 LOAD_FAST 6 ( dist )					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
6 72 LOAD_GLOBAL 3 ( print )				      								    								  
74 LOAD_CONST 2 ( 'Intersect' )				      								    								  
76 CALL_FUNCTION 1					      								    								  
78 POP_TOP						      								    								  
80 JUMP_FORWARD 8 ( to 90 )				      								    								  
							      								    								  
8 >> 82 LOAD_GLOBAL 3 ( print )				      								    								  
84 LOAD_CONST 3 ( 'Outside' )				      								    								  
86 CALL_FUNCTION 1					      								    								  
88 POP_TOP						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_IN_A_GIVEN_STRING				      COUNT_WORDS_IN_A_GIVEN_STRING				    COUNT_WORDS_IN_A_GIVEN_STRING				  COUNT_WORDS_IN_A_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object countWords at 0x7fbac0e8bc90, fil def countWords ( string ) :				    def countWords ( string ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( OUT )				      	  state = OUT						    	state = OUT						  
2 STORE_FAST 1 ( state )				      	  wc = 0						    	wc = 0							  
							      	  for i in range ( len ( string ) ) :			    	for i in range ( len ( string ) ) :			  
3 4 LOAD_CONST 1 ( 0 )					      	      if ( string [ i ] == ' ' or string [ i ] == '\n' or s 	    if ( string [ i ] == ' ' or string [ i ] == '\n' or s 
6 STORE_FAST 2 ( wc )					      		  state = OUT					    		state = OUT					  
							      	      elif state == OUT :				    	    elif state == OUT :					  
4 8 SETUP_LOOP 82 ( to 92 )				      		  state = IN					    		state = IN					  
10 LOAD_GLOBAL 1 ( range )				      		  wc += 1					    		wc += 1						  
12 LOAD_GLOBAL 2 ( len )				      	  return wc						    	return wc						  
14 LOAD_FAST 0 ( string )				      								    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 66 ( to 90 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( string )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( ' ' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_TRUE 62					      								    								  
38 LOAD_FAST 0 ( string )				      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 3 ( '\n' )				      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_TRUE 62					      								    								  
50 LOAD_FAST 0 ( string )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 4 ( '\t' )				      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 >> 62 LOAD_GLOBAL 0 ( OUT )				      								    								  
64 STORE_FAST 1 ( state )				      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
7 >> 68 LOAD_FAST 1 ( state )				      								    								  
70 LOAD_GLOBAL 0 ( OUT )				      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
8 76 LOAD_GLOBAL 3 ( IN )				      								    								  
78 STORE_FAST 1 ( state )				      								    								  
							      								    								  
9 80 LOAD_FAST 2 ( wc )					      								    								  
82 LOAD_CONST 5 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 2 ( wc )					      								    								  
88 JUMP_ABSOLUTE 22					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 2 ( wc )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_<unk> E_K		      MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_<unk> E_K		    MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_<unk> E_K			  MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_<unk> E_K
--							      --							    --								  --
Disassembly of <code object MinOperation at 0x7fbac0e8de40, f def MinOperation ( a , n , k ) :				    def MinOperation ( a , n , k ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 3 ( result )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if ( a [ i ] != 1 and a [ i ] > k ) :		    	    if a [ i ] != 1 and a [ i ] > k :			  
3 4 SETUP_LOOP 92 ( to 98 )				      		  result = ( result + min ( a [ i ] % k , k - a [ i 		result = result + min ( a [ i ] % k , k - a [ i ] 
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    else :						  
8 LOAD_FAST 1 ( n )					      		  result = result + k - a [ i ]			    		result = result + k - a [ i ]			  
10 CALL_FUNCTION 1					      	  return result						    	return result						  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 80 ( to 96 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( a )					      								    								  
20 LOAD_FAST 4 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 COMPARE_OP 3 ( != )					      								    								  
28 POP_JUMP_IF_FALSE 78					      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 2 ( k )					      								    								  
38 COMPARE_OP 4 ( > )					      								    								  
40 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
5 42 LOAD_FAST 3 ( result )				      								    								  
44 LOAD_GLOBAL 1 ( min )				      								    								  
46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 2 ( k )					      								    								  
54 BINARY_MODULO					      								    								  
56 LOAD_FAST 2 ( k )					      								    								  
58 LOAD_FAST 0 ( a )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 2 ( k )					      								    								  
66 BINARY_MODULO					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( result )				      								    								  
76 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
7 >> 78 LOAD_FAST 3 ( result )				      								    								  
80 LOAD_FAST 2 ( k )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_FAST 0 ( a )					      								    								  
86 LOAD_FAST 4 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 STORE_FAST 3 ( result )				      								    								  
94 JUMP_ABSOLUTE 14					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
8 >> 98 LOAD_FAST 3 ( result )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1	      EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1	    EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1		  EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1
--							      --							    --								  --
Disassembly of <code object printDiagonalSums at 0x7fbac0e8bc def printDiagonalSums ( mat , n ) :			    def printDiagonalSums ( mat , n ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  principal = 0						    	principal = 0						  
2 STORE_FAST 2 ( principal )				      	  secondary = 0						    	secondary = 0						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      principal += mat [ i ] [ i ]			    	    principal += mat [ i ] [ i ]			  
6 STORE_FAST 3 ( secondary )				      	      secondary += mat [ i ] [ n - i - 1 ]		    	    secondary += mat [ i ] [ n - i - 1 ]		  
							      	  print ( "Principal Diagonal:" , principal )		    	print ( "Principal Diagonal:" , principal )		  
4 8 SETUP_LOOP 58 ( to 68 )				      	  print ( "Secondary Diagonal:" , secondary )		    	print ( "Secondary Diagonal:" , secondary )		  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 44 ( to 66 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( principal )				      								    								  
26 LOAD_FAST 0 ( mat )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 2 ( principal )				      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( secondary )				      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( secondary )				      								    								  
64 JUMP_ABSOLUTE 20					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 1 ( print )				      								    								  
70 LOAD_CONST 3 ( 'Principal Diagonal:' )		      								    								  
72 LOAD_FAST 2 ( principal )				      								    								  
74 CALL_FUNCTION 2					      								    								  
76 POP_TOP						      								    								  
							      								    								  
8 78 LOAD_GLOBAL 1 ( print )				      								    								  
80 LOAD_CONST 4 ( 'Secondary Diagonal:' )		      								    								  
82 LOAD_FAST 3 ( secondary )				      								    								  
84 CALL_FUNCTION 2					      								    								  
86 POP_TOP						      								    								  
88 LOAD_CONST 0 ( None )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1
--							      --							    --								  --
Disassembly of <code object getSingle at 0x7fbac0e8ddb0, file def getSingle ( arr , n ) :				    def getSingle ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 2 ( result )				      	  for i in range ( 0 , INT_SIZE ) :			    	for i in range ( 0 , INT_SIZE ) :			  
							      	      sm = 0						    	    sm = 0						  
3 4 SETUP_LOOP 86 ( to 92 )				      	      x = ( 1 << i )					    	    x = 1 << i						  
6 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
8 LOAD_CONST 1 ( 0 )					      		  if ( arr [ j ] & x ) :			    		if arr [ j ] & x :				  
10 LOAD_GLOBAL 1 ( INT_SIZE )				      		      sm = sm + 1				    		    sm = sm + 1					  
12 CALL_FUNCTION 2					      	      if ( sm % 3 ) :					    	    if sm % 3 :						  
14 GET_ITER						      		  result = result | x				    		result = result | x				  
>> 16 FOR_ITER 72 ( to 90 )				      	  return result						    	return result						  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 4 ( sm )					      								    								  
							      								    								  
5 24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_LSHIFT					      								    								  
30 STORE_FAST 5 ( x )					      								    								  
							      								    								  
6 32 SETUP_LOOP 38 ( to 72 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 24 ( to 70 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 6 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 5 ( x )					      								    								  
56 BINARY_AND						      								    								  
58 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 60 LOAD_FAST 4 ( sm )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 4 ( sm )					      								    								  
68 JUMP_ABSOLUTE 44					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
9 >> 72 LOAD_FAST 4 ( sm )				      								    								  
74 LOAD_CONST 3 ( 3 )					      								    								  
76 BINARY_MODULO					      								    								  
78 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
10 80 LOAD_FAST 2 ( result )				      								    								  
82 LOAD_FAST 5 ( x )					      								    								  
84 BINARY_OR						      								    								  
86 STORE_FAST 2 ( result )				      								    								  
88 JUMP_ABSOLUTE 16					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
11 >> 92 LOAD_FAST 2 ( result )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T
--							      --							    --								  --
Disassembly of <code object subArray at 0x7fbac0e8d540, file  def subArray ( arr , n ) :				    def subArray ( arr , n ) :					  script_not_found : None
2 0 SETUP_LOOP 90 ( to 92 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
4 LOAD_CONST 1 ( 0 )					      		  for k in range ( i , j + 1 ) :		    		for k in range ( i , j + 1 ) :			  
6 LOAD_FAST 1 ( n )					      		      print ( arr [ k ] , end = "" )		    		    print ( arr [ k ] , end = "" )		  
8 CALL_FUNCTION 2					      		  print ( "\n" , end = "" )			    	    print ( "\n" , end = "" )				  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 76 ( to 90 )				      								    								  
14 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 70 ( to 88 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 56 ( to 86 )				      								    								  
30 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 32 SETUP_LOOP 38 ( to 72 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 LOAD_FAST 3 ( j )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 20 ( to 70 )				      								    								  
50 STORE_FAST 4 ( k )					      								    								  
							      								    								  
5 52 LOAD_GLOBAL 1 ( print )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 4 ( k )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 3 ( '' )					      								    								  
62 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
64 CALL_FUNCTION_KW 2					      								    								  
66 POP_TOP						      								    								  
68 JUMP_ABSOLUTE 48					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_GLOBAL 1 ( print )				      								    								  
74 LOAD_CONST 5 ( '\n' )				      								    								  
76 LOAD_CONST 3 ( '' )					      								    								  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 2					      								    								  
82 POP_TOP						      								    								  
84 JUMP_ABSOLUTE 28					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 12					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	      K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	    K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	  K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS
--							      --							    --								  --
Disassembly of <code object ksmallest at 0x7fbac0e8d540, file def ksmallest ( arr , n , k ) :				    def ksmallest ( arr , n , k ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  b = [ 0 ] * MAX ;					    	b = [ 0 ] * MAX						  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_GLOBAL 0 ( MAX )					      	      b [ arr [ i ] ] = 1 ;				    	    b [ arr [ i ] ] = 1					  
6 BINARY_MULTIPLY					      	  for j in range ( 1 , MAX ) :				    	for j in range ( 1 , MAX ) :				  
8 STORE_FAST 3 ( b )					      	      if ( b [ j ] != 1 ) :				    	    if b [ j ] != 1 :					  
							      		  k -= 1 ;					    		k -= 1						  
3 10 SETUP_LOOP 28 ( to 40 )				      	      if ( k is not 1 ) :				    	    if k is not 1 :					  
12 LOAD_GLOBAL 1 ( range )				      		  return j ;					    		return j					  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 16 ( to 38 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 3 ( b )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 50 ( to 92 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_GLOBAL 0 ( MAX )				      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 36 ( to 90 )				      								    								  
54 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 56 LOAD_FAST 3 ( b )					      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
7 68 LOAD_FAST 2 ( k )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 INPLACE_SUBTRACT					      								    								  
74 STORE_FAST 2 ( k )					      								    								  
							      								    								  
8 >> 76 LOAD_FAST 2 ( k )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 COMPARE_OP 9 ( is not )				      								    								  
82 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
9 84 LOAD_FAST 5 ( j )					      								    								  
86 RETURN_VALUE						      								    								  
88 JUMP_ABSOLUTE 52					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_<unk> HER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS	      NEXT_<unk> HER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS	    NEXT_<unk> HER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		  NEXT_<unk> HER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS
--							      --							    --								  --
Disassembly of <code object snoob at 0x7fbac0e8de40, file "<d def snoob ( x ) :						    def snoob ( x ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  next = 0						    	next = 0						  
2 STORE_FAST 1 ( next )					      	  if ( x ) :						    	if x :							  
							      	      rightOne = x & - ( x )				    	    rightOne = ( x - x )				  
3 4 LOAD_FAST 0 ( x )					      	      nextHigherOneBit = x + int ( rightOne )		    	    nextHigherOneBit = ( x + int ( rightOne ) )		  
6 POP_JUMP_IF_FALSE 78					      	      rightOnesPattern = x ^ int ( nextHigherOneBit )	    	    rightOnesPattern = ( x ^ int ( nextHigherOneBit ) )	  
							      	      rightOnesPattern = ( int ( rightOnesPattern ) / int ( 	    rightOnesPattern = ( int ( rightOnesPattern ) / int ( 
4 8 LOAD_FAST 0 ( x )					      	      rightOnesPattern = int ( rightOnesPattern ) >> 2	    	    next = ( int ( rightOnesPattern ) << 2 )		  
10 LOAD_FAST 0 ( x )					      	      next = nextHigherOneBit | rightOnesPattern	    	return next						  
12 UNARY_NEGATIVE					      	  return next						    								  
14 BINARY_AND						      								    								  
16 STORE_FAST 2 ( rightOne )				      								    								  
							      								    								  
5 18 LOAD_FAST 0 ( x )					      								    								  
20 LOAD_GLOBAL 0 ( int )				      								    								  
22 LOAD_FAST 2 ( rightOne )				      								    								  
24 CALL_FUNCTION 1					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 3 ( nextHigherOneBit )			      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( x )					      								    								  
32 LOAD_GLOBAL 0 ( int )				      								    								  
34 LOAD_FAST 3 ( nextHigherOneBit )			      								    								  
36 CALL_FUNCTION 1					      								    								  
38 BINARY_XOR						      								    								  
40 STORE_FAST 4 ( rightOnesPattern )			      								    								  
							      								    								  
7 42 LOAD_GLOBAL 0 ( int )				      								    								  
44 LOAD_FAST 4 ( rightOnesPattern )			      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_GLOBAL 0 ( int )				      								    								  
50 LOAD_FAST 2 ( rightOne )				      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 STORE_FAST 4 ( rightOnesPattern )			      								    								  
							      								    								  
8 58 LOAD_GLOBAL 0 ( int )				      								    								  
60 LOAD_FAST 4 ( rightOnesPattern )			      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_CONST 2 ( 2 )					      								    								  
66 BINARY_RSHIFT					      								    								  
68 STORE_FAST 4 ( rightOnesPattern )			      								    								  
							      								    								  
9 70 LOAD_FAST 3 ( nextHigherOneBit )			      								    								  
72 LOAD_FAST 4 ( rightOnesPattern )			      								    								  
74 BINARY_OR						      								    								  
76 STORE_FAST 1 ( next )				      								    								  
							      								    								  
10 >> 78 LOAD_FAST 1 ( next )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	      PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	    PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	  PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER
--							      --							    --								  --
Disassembly of <code object printStringAlternate at 0x7fbac0e def printStringAlternate ( string ) :			    def printStringAlternate ( string ) :			  script_not_found : None
2 0 BUILD_MAP 0						      	  occ = { }						    	occ = { }						  
2 STORE_FAST 1 ( occ )					      	  for i in range ( 0 , len ( string ) ) :		    	for i in range ( 0 , len ( string ) ) :			  
							      	      temp = string [ i ].lower ( )			    	    temp = string [ i ].lower ( )			  
3 4 SETUP_LOOP 82 ( to 88 )				      	      occ [ temp ] = occ.get ( temp , 0 ) + 1		    	    occ [ temp ] = occ.get ( temp , 0 ) + 1		  
6 LOAD_GLOBAL 0 ( range )				      	      if occ [ temp ] & 1 :				    	    if occ [ temp ] & 1 :				  
8 LOAD_CONST 1 ( 0 )					      		  print ( string [ i ] , end = "" )		    		print ( string [ i ] , end = "" )		  
10 LOAD_GLOBAL 1 ( len )				      	  print ( )						    	print ( )						  
12 LOAD_FAST 0 ( string )				      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 64 ( to 86 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( string )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_METHOD 2 ( lower )				      								    								  
32 CALL_METHOD 0					      								    								  
34 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
5 36 LOAD_FAST 1 ( occ )				      								    								  
38 LOAD_METHOD 3 ( get )				      								    								  
40 LOAD_FAST 3 ( temp )					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 CALL_METHOD 2					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 1 ( occ )					      								    								  
52 LOAD_FAST 3 ( temp )					      								    								  
54 STORE_SUBSCR						      								    								  
							      								    								  
6 56 LOAD_FAST 1 ( occ )				      								    								  
58 LOAD_FAST 3 ( temp )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_AND						      								    								  
66 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 4 ( print )				      								    								  
70 LOAD_FAST 0 ( string )				      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 3 ( '' )					      								    								  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 2					      								    								  
82 POP_TOP						      								    								  
84 JUMP_ABSOLUTE 20					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
8 >> 88 LOAD_GLOBAL 4 ( print )				      								    								  
90 CALL_FUNCTION 0					      								    								  
92 POP_TOP						      								    								  
94 LOAD_CONST 0 ( None )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1
--							      --							    --								  --
Disassembly of <code object getRemainder at 0x7fbac0e8bc90, f def getRemainder ( num , divisor ) :			    def getRemainder ( num , divisor ) :			  failure : #Results: 0, 10
2 0 LOAD_FAST 1 ( divisor )				      	  if ( divisor == 0 ) :					    	if divisor == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 2 ( == )					      	  if ( divisor < 0 ) :					    	if divisor < 0 :					  
6 POP_JUMP_IF_FALSE 12					      	      divisor = - divisor				    	    divisor = - divisor					  
							      	  if ( num < 0 ) :					    	if num < 0 :						  
3 8 LOAD_CONST 2 ( False )				      	      num = - num					    	    num = - num						  
10 RETURN_VALUE						      	  i = 1							    	i = 1							  
							      	  product = 0						    	product = 0						  
4 >> 12 LOAD_FAST 1 ( divisor )				      	  while ( product <= num ) :				    	while product <= num :					  
14 LOAD_CONST 1 ( 0 )					      	      product = divisor * i				    	    product = divisor * i				  
16 COMPARE_OP 0 ( < )					      	      i += 1						    	    i += 1						  
18 POP_JUMP_IF_FALSE 26					      	  return num - ( product - divisor )			    	return num - product - product				  
							      								    								  
5 20 LOAD_FAST 1 ( divisor )				      								    								  
22 UNARY_NEGATIVE					      								    								  
24 STORE_FAST 1 ( divisor )				      								    								  
							      								    								  
6 >> 26 LOAD_FAST 0 ( num )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
7 34 LOAD_FAST 0 ( num )				      								    								  
36 UNARY_NEGATIVE					      								    								  
38 STORE_FAST 0 ( num )					      								    								  
							      								    								  
8 >> 40 LOAD_CONST 3 ( 1 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 44 LOAD_CONST 1 ( 0 )					      								    								  
46 STORE_FAST 3 ( product )				      								    								  
							      								    								  
10 48 SETUP_LOOP 28 ( to 78 )				      								    								  
>> 50 LOAD_FAST 3 ( product )				      								    								  
52 LOAD_FAST 0 ( num )					      								    								  
54 COMPARE_OP 1 ( <= )					      								    								  
56 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
11 58 LOAD_FAST 1 ( divisor )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 STORE_FAST 3 ( product )				      								    								  
							      								    								  
12 66 LOAD_FAST 2 ( i )					      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( i )					      								    								  
74 JUMP_ABSOLUTE 50					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
13 >> 78 LOAD_FAST 0 ( num )				      								    								  
80 LOAD_FAST 3 ( product )				      								    								  
82 LOAD_FAST 1 ( divisor )				      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSEQUENCE_GCD_GREATER_1			      LARGEST_SUBSEQUENCE_GCD_GREATER_1				    LARGEST_SUBSEQUENCE_GCD_GREATER_1				  LARGEST_SUBSEQUENCE_GCD_GREATER_1
--							      --							    --								  --
Disassembly of <code object largestGCDSubsequence at 0x7fbac0 def largestGCDSubsequence ( arr , n ) :			    def largestGCDSubsequence ( arr , n ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  
2 STORE_FAST 2 ( ans )					      	  maxele = max ( arr )					    	maxele = max ( arr )					  
							      	  for i in range ( 2 , maxele + 1 ) :			    	for i in range ( 2 , maxele + 1 ) :			  
3 4 LOAD_GLOBAL 0 ( max )				      	      count = 0						    	    count = 0						  
6 LOAD_FAST 0 ( arr )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
8 CALL_FUNCTION 1					      		  if ( arr [ j ] % i == 0 ) :			    		if arr [ j ] % i == 0 :				  
10 STORE_FAST 3 ( maxele )				      		      count += 1				    		    count += 1					  
							      	      ans = max ( ans , count )				    	    ans = max ( ans , count )				  
4 12 SETUP_LOOP 78 ( to 92 )				      	  return ans						    	return ans						  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 LOAD_FAST 3 ( maxele )				      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 60 ( to 90 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_CONST 1 ( 0 )					      								    								  
34 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 36 SETUP_LOOP 40 ( to 78 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 28 ( to 76 )				      								    								  
48 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 6 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_MODULO					      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
8 66 LOAD_FAST 5 ( count )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 5 ( count )				      								    								  
74 JUMP_ABSOLUTE 46					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_GLOBAL 0 ( max )				      								    								  
80 LOAD_FAST 2 ( ans )					      								    								  
82 LOAD_FAST 5 ( count )				      								    								  
84 CALL_FUNCTION 2					      								    								  
86 STORE_FAST 2 ( ans )					      								    								  
88 JUMP_ABSOLUTE 28					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 2 ( ans )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		      SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		    SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		  SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER
--							      --							    --								  --
Disassembly of <code object divSum at 0x7fbac0e89d20, file "< def divSum ( num ) :					    def divSum ( num ) :					  timeout : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  i = 2							    	i = 2							  
							      	  while i <= ( math.sqrt ( num ) ) :			    	while i <= math.sqrt ( num ) :				  
3 4 LOAD_CONST 2 ( 2 )					      	      if ( num % i == 0 ) :				    	    if num % i == 0 :					  
6 STORE_FAST 2 ( i )					      		  if ( i == ( num / i ) ) :			    		if i == num / i :				  
							      		      result = result + i ;			    		    result = result + i				  
4 8 SETUP_LOOP 76 ( to 86 )				      		  else :					    		else :						  
>> 10 LOAD_FAST 2 ( i )					      		      result = result + ( i + num / i ) ;	    		    result = result + i				  
12 LOAD_GLOBAL 0 ( math )				      	      i = i + 1						    		i = i + 1					  
14 LOAD_METHOD 1 ( sqrt )				      	  return ( result + 1 ) ;				    	return result + 1					  
16 LOAD_FAST 0 ( num )					      								    								  
18 CALL_METHOD 1					      								    								  
20 COMPARE_OP 1 ( <= )					      								    								  
22 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( num )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
6 36 LOAD_FAST 2 ( i )					      								    								  
38 LOAD_FAST 0 ( num )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( result )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 1 ( result )				      								    								  
56 JUMP_FORWARD 16 ( to 74 )				      								    								  
							      								    								  
9 >> 58 LOAD_FAST 1 ( result )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_FAST 0 ( num )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_TRUE_DIVIDE					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 1 ( result )				      								    								  
							      								    								  
10 >> 74 LOAD_FAST 2 ( i )				      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 2 ( i )					      								    								  
82 JUMP_ABSOLUTE 10					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_FAST 1 ( result )				      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH
--							      --							    --								  --
Disassembly of <code object findTriplet at 0x7fbac0e89d20, fi def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :	    def findTriplet ( a1 , a2 , a3 , n1 , n2 ) :		  script_not_found : None
2 0 SETUP_LOOP 90 ( to 92 )				      	  for i in range ( 0 , n1 ) :				    	for i in range ( 0 , n1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , n2 ) :			    	    for j in range ( 0 , n2 ) :				  
4 LOAD_CONST 1 ( 0 )					      		  for k in range ( 0 , n3 ) :			    		for k in range ( 0 , n3 ) :			  
6 LOAD_FAST 3 ( n1 )					      		      if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum )  		    if a1 [ i ] + a2 [ j ] == a3 [ j ] :	  
8 CALL_FUNCTION 2					      			  return True				    			return True				  
10 GET_ITER						      	  return False						    	return False						  
>> 12 FOR_ITER 76 ( to 90 )				      								    								  
14 STORE_FAST 7 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 70 ( to 88 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 4 ( n2 )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 56 ( to 86 )				      								    								  
30 STORE_FAST 8 ( j )					      								    								  
							      								    								  
4 32 SETUP_LOOP 50 ( to 84 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 5 ( n3 )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 36 ( to 82 )				      								    								  
46 STORE_FAST 9 ( k )					      								    								  
							      								    								  
5 48 LOAD_FAST 0 ( a1 )					      								    								  
50 LOAD_FAST 7 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 1 ( a2 )					      								    								  
56 LOAD_FAST 8 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_FAST 2 ( a3 )					      								    								  
64 LOAD_FAST 9 ( k )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 6 ( sum )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 76 LOAD_CONST 2 ( True )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 JUMP_ABSOLUTE 28					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 12					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
7 >> 92 LOAD_CONST 3 ( False )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		      MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		    MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		  MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object maximumChars at 0x7fbac0e8de40, f def maximumChars ( str ) :				    def maximumChars ( str ) :					  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  res = - 1						    	res = - 1						  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
6 STORE_FAST 1 ( n )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
							      		  if ( str [ i ] == str [ j ] ) :		    		if str [ i ] == str [ j ] :			  
3 8 LOAD_CONST 1 ( - 1 )				      		      res = max ( res , abs ( j - i - 1 ) )	    		    res = max ( res , abs ( j - i - 1 ) )	  
10 STORE_FAST 2 ( res )					      	  return res						    	return res						  
							      								    								  
4 12 SETUP_LOOP 84 ( to 98 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 2 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 66 ( to 96 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 SETUP_LOOP 60 ( to 94 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 42 ( to 92 )				      								    								  
50 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( str )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( str )					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 2 ( max )				      								    								  
70 LOAD_FAST 2 ( res )					      								    								  
72 LOAD_GLOBAL 3 ( abs )				      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 3 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 STORE_FAST 2 ( res )					      								    								  
90 JUMP_ABSOLUTE 48					      								    								  
>> 92 POP_BLOCK						      								    								  
>> 94 JUMP_ABSOLUTE 28					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
8 >> 98 LOAD_FAST 2 ( res )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY			  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac0e8de40, f def binarySearch ( arr , low , high , key ) :		    def binarySearch ( arr , low , high , key = ' ' ) :		  success : None
2 0 LOAD_FAST 2 ( high )				      	  if ( high < low ) :					    	if high < low :						  
2 LOAD_FAST 1 ( low )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 0 ( < )					      	  mid = ( low + high ) / 2				    	mid = ( low + high ) / 2				  
6 POP_JUMP_IF_FALSE 12					      	  if ( key == arr [ int ( mid ) ] ) :			    	if key == arr [ int ( mid ) ] :				  
							      	      return mid					    	    return mid						  
3 8 LOAD_CONST 1 ( - 1 )				      	  if ( key > arr [ int ( mid ) ] ) :			    	if key > arr [ int ( mid ) ] :				  
10 RETURN_VALUE						      	      return binarySearch ( arr , ( mid + 1 ) , high , key  	    return binarySearch ( arr , mid + 1 , high , key )	  
							      	  return ( binarySearch ( arr , low , ( mid - 1 ) , key ) ) 	return binarySearch ( arr , low , mid - 1 , key )	  
4 >> 12 LOAD_FAST 1 ( low )				      								    								  
14 LOAD_FAST 2 ( high )					      								    								  
16 BINARY_ADD						      								    								  
18 LOAD_CONST 2 ( 2 )					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
5 24 LOAD_FAST 3 ( key )				      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_GLOBAL 0 ( int )				      								    								  
30 LOAD_FAST 4 ( mid )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 40 LOAD_FAST 4 ( mid )				      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
7 >> 44 LOAD_FAST 3 ( key )				      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_GLOBAL 0 ( int )				      								    								  
50 LOAD_FAST 4 ( mid )					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 4 ( > )					      								    								  
58 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
8 60 LOAD_GLOBAL 1 ( binarySearch )			      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( mid )					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 2 ( high )					      								    								  
72 LOAD_FAST 3 ( key )					      								    								  
74 CALL_FUNCTION 4					      								    								  
76 RETURN_VALUE						      								    								  
							      								    								  
9 >> 78 LOAD_GLOBAL 1 ( binarySearch )			      								    								  
80 LOAD_FAST 0 ( arr )					      								    								  
82 LOAD_FAST 1 ( low )					      								    								  
84 LOAD_FAST 4 ( mid )					      								    								  
86 LOAD_CONST 3 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 3 ( key )					      								    								  
92 CALL_FUNCTION 4					      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LAST_NON_ZERO_DIGIT_FACTORIAL				      LAST_NON_ZERO_DIGIT_FACTORIAL				    LAST_NON_ZERO_DIGIT_FACTORIAL				  LAST_NON_ZERO_DIGIT_FACTORIAL
--							      --							    --								  --
Disassembly of <code object lastNon0Digit at 0x7fbac0e8d540,  def lastNon0Digit ( n ) :					    def lastNon0Digit ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 10 ) :					    	if n < 10 :						  
2 LOAD_CONST 1 ( 10 )					      	      return dig [ n ]					    	    return dig [ n ]					  
4 COMPARE_OP 0 ( < )					      	  if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :		    	if n // 10 ** 2 == 0 :					  
6 POP_JUMP_IF_FALSE 16					      	      return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10  	    return 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ]  
							      	  else :						    	return 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] % 10 
3 8 LOAD_GLOBAL 0 ( dig )				      	      return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10  return 0							  
10 LOAD_FAST 0 ( n )					      	  return 0						    								  
12 BINARY_SUBSCR					      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_CONST 1 ( 10 )					      								    								  
20 BINARY_FLOOR_DIVIDE					      								    								  
22 LOAD_CONST 1 ( 10 )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 3 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 36 LOAD_CONST 4 ( 6 )					      								    								  
38 LOAD_GLOBAL 1 ( lastNon0Digit )			      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 5 ( 5 )					      								    								  
44 BINARY_FLOOR_DIVIDE					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_GLOBAL 0 ( dig )				      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 1 ( 10 )					      								    								  
56 BINARY_MODULO					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 LOAD_CONST 1 ( 10 )					      								    								  
64 BINARY_MODULO					      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
7 >> 68 LOAD_CONST 6 ( 4 )				      								    								  
70 LOAD_GLOBAL 1 ( lastNon0Digit )			      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 LOAD_CONST 5 ( 5 )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_GLOBAL 0 ( dig )				      								    								  
84 LOAD_FAST 0 ( n )					      								    								  
86 LOAD_CONST 1 ( 10 )					      								    								  
88 BINARY_MODULO					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 LOAD_CONST 1 ( 10 )					      								    								  
96 BINARY_MODULO					      								    								  
98 RETURN_VALUE						      								    								  
							      								    								  
8 100 LOAD_CONST 3 ( 0 )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS
--							      --							    --								  --
Disassembly of <code object subset at 0x7fbac0e8de40, file "< def subset ( ar , n ) :					    def subset ( ar , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( res )					      	  ar.sort ( )						    	ar.sort ( )						  _sa.test/MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS.
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  py", line 42	   return res	  ^ SyntaxError: 're
3 4 LOAD_FAST 0 ( ar )					      	      count = 1						    	    count = 1						  turn' outside function
6 LOAD_METHOD 0 ( sort )				      	      for i in range ( n - 1 ) :			    	    for i in range ( n - 1 ) :				  
8 CALL_METHOD 0						      		  if ar [ i ] == ar [ i + 1 ] :			    		if ar [ i ] == ar [ i + 1 ] :			  
10 POP_TOP						      		      count += 1				    		    count += 1					  
							      		  else :					    		else :						  
4 12 SETUP_LOOP 86 ( to 100 )				      		      break					    		    break					  
14 LOAD_GLOBAL 1 ( range )				      	      res = max ( res , count )				    	res = max ( res , count )				  
16 LOAD_CONST 1 ( 0 )					      	  return res						    return res							  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 72 ( to 98 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_CONST 2 ( 1 )					      								    								  
30 STORE_FAST 4 ( count )				      								    								  
							      								    								  
6 32 SETUP_LOOP 52 ( to 86 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 36 ( to 84 )				      								    								  
48 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( ar )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( ar )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 70 LOAD_FAST 4 ( count )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 4 ( count )				      								    								  
78 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
10 >> 80 BREAK_LOOP					      								    								  
82 JUMP_ABSOLUTE 46					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_GLOBAL 2 ( max )				      								    								  
88 LOAD_FAST 2 ( res )					      								    								  
90 LOAD_FAST 4 ( count )				      								    								  
92 CALL_FUNCTION 2					      								    								  
94 STORE_FAST 2 ( res )					      								    								  
96 JUMP_ABSOLUTE 24					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
12 >> 100 LOAD_FAST 2 ( res )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_1				      FRIENDS_PAIRING_PROBLEM_1					    FRIENDS_PAIRING_PROBLEM_1					  FRIENDS_PAIRING_PROBLEM_1
--							      --							    --								  --
Disassembly of <code object countFriendsPairings at 0x7fbac0e def countFriendsPairings ( n ) :				    def countFriendsPairings ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  dp = [ - 1 ] * 100					    	dp = [ - 1 ] * 100					  
2 BUILD_LIST 1						      	  if ( dp [ n ] != - 1 ) :				    	if dp [ n ] != - 1 :					  
4 LOAD_CONST 2 ( 100 )					      	      return dp [ n ]					    	    return dp [ n ]					  
6 BINARY_MULTIPLY					      	  if ( n > 2 ) :					    	elif n > 2 :						  
8 STORE_FAST 1 ( dp )					      	      dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 	    dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) 
							      	      return dp [ n ]					    	    return dp [ n ]					  
3 10 LOAD_FAST 1 ( dp )					      	  else :						    	else :							  
12 LOAD_FAST 0 ( n )					      	      dp [ n ] = n					    	    dp [ n ] = n					  
14 BINARY_SUBSCR					      	      return dp [ n ]					    	    return dp [ n ]					  
16 LOAD_CONST 1 ( - 1 )					      								    								  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
4 22 LOAD_FAST 1 ( dp )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
5 >> 30 LOAD_FAST 0 ( n )				      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
6 38 LOAD_GLOBAL 0 ( countFriendsPairings )		      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 4 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_FAST 0 ( n )					      								    								  
50 LOAD_CONST 4 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_GLOBAL 0 ( countFriendsPairings )		      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 1 ( dp )					      								    								  
70 LOAD_FAST 0 ( n )					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
7 74 LOAD_FAST 1 ( dp )					      								    								  
76 LOAD_FAST 0 ( n )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 RETURN_VALUE						      								    								  
							      								    								  
9 >> 82 LOAD_FAST 0 ( n )				      								    								  
84 LOAD_FAST 1 ( dp )					      								    								  
86 LOAD_FAST 0 ( n )					      								    								  
88 STORE_SUBSCR						      								    								  
							      								    								  
10 90 LOAD_FAST 1 ( dp )				      								    								  
92 LOAD_FAST 0 ( n )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 RETURN_VALUE						      								    								  
98 LOAD_CONST 0 ( None )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_COMMON_SUPERSEQUENCE				      SHORTEST_COMMON_SUPERSEQUENCE				    SHORTEST_COMMON_SUPERSEQUENCE				  SHORTEST_COMMON_SUPERSEQUENCE
--							      --							    --								  --
Disassembly of <code object superSeq at 0x7fbac0e8ddb0, file  def superSeq ( X , Y , m , n ) :				    def superSeq ( X , Y , m , n = 2 ) :			  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if ( not m ) : return n				    	if not m : return n					  
2 POP_JUMP_IF_TRUE 8					      	  if ( not n ) : return m				    	if not n : return m					  
4 LOAD_FAST 3 ( n )					      	  if ( X [ m - 1 ] == Y [ n - 1 ] ) :			    	if X [ m - 1 ] == Y [ n - 1 ] :				  
6 RETURN_VALUE						      	      return 1 + superSeq ( X , Y , m - 1 , n - 1 )	    	    return 1 + superSeq ( X , Y , m - 1 , n - 1 )	  
							      	  return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSe 	return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSe 
3 >> 8 LOAD_FAST 3 ( n )				      								    								  
10 POP_JUMP_IF_TRUE 16					      								    								  
12 LOAD_FAST 2 ( m )					      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( X )				      								    								  
18 LOAD_FAST 2 ( m )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( Y )					      								    								  
28 LOAD_FAST 3 ( n )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
5 40 LOAD_CONST 1 ( 1 )					      								    								  
42 LOAD_GLOBAL 0 ( superSeq )				      								    								  
44 LOAD_FAST 0 ( X )					      								    								  
46 LOAD_FAST 1 ( Y )					      								    								  
48 LOAD_FAST 2 ( m )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 3 ( n )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 4					      								    								  
62 BINARY_ADD						      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
6 >> 66 LOAD_CONST 1 ( 1 )				      								    								  
68 LOAD_GLOBAL 1 ( min )				      								    								  
70 LOAD_GLOBAL 0 ( superSeq )				      								    								  
72 LOAD_FAST 0 ( X )					      								    								  
74 LOAD_FAST 1 ( Y )					      								    								  
76 LOAD_FAST 2 ( m )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 3 ( n )					      								    								  
84 CALL_FUNCTION 4					      								    								  
86 LOAD_GLOBAL 0 ( superSeq )				      								    								  
88 LOAD_FAST 0 ( X )					      								    								  
90 LOAD_FAST 1 ( Y )					      								    								  
92 LOAD_FAST 2 ( m )					      								    								  
94 LOAD_FAST 3 ( n )					      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 CALL_FUNCTION 4					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 BINARY_ADD						      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		      NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		    NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		  NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER
--							      --							    --								  --
Disassembly of <code object minimumBox at 0x7fbac0e8d540, fil def minimumBox ( arr , n ) :				    def minimumBox ( arr , n ) :				  success : None
2 0 LOAD_GLOBAL 0 ( collections )			      	  q = collections.deque ( [ ] )				    	q = collections.deque ( [ ] )				  
2 LOAD_METHOD 1 ( deque )				      	  arr.sort ( )						    	arr.sort ( )						  
4 BUILD_LIST 0						      	  q.append ( arr [ 0 ] )				    	q.append ( arr [ 0 ] )					  
6 CALL_METHOD 1						      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 STORE_FAST 2 ( q )					      	      now = q [ 0 ]					    	    now = q [ 0 ]					  
							      	      if ( arr [ i ] >= 2 * now ) :			    	    if arr [ i ] >= 2 * now :				  
3 10 LOAD_FAST 0 ( arr )				      		  q.popleft ( )					    		q.popleft ( )					  
12 LOAD_METHOD 2 ( sort )				      	      q.append ( arr [ i ] )				    	    q.append ( arr [ i ] )				  
14 CALL_METHOD 0					      	  return len ( q )					    	return len ( q )					  
16 POP_TOP						      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( q )					      								    								  
20 LOAD_METHOD 3 ( append )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 CALL_METHOD 1					      								    								  
30 POP_TOP						      								    								  
							      								    								  
5 32 SETUP_LOOP 64 ( to 98 )				      								    								  
34 LOAD_GLOBAL 4 ( range )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 50 ( to 96 )				      								    								  
46 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 48 LOAD_FAST 2 ( q )					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 4 ( now )					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( 2 )					      								    								  
64 LOAD_FAST 4 ( now )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 COMPARE_OP 5 ( >= )					      								    								  
70 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( q )					      								    								  
74 LOAD_METHOD 5 ( popleft )				      								    								  
76 CALL_METHOD 0					      								    								  
78 POP_TOP						      								    								  
							      								    								  
9 >> 80 LOAD_FAST 2 ( q )				      								    								  
82 LOAD_METHOD 3 ( append )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_METHOD 1					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 44					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
10 >> 98 LOAD_GLOBAL 6 ( len )				      								    								  
100 LOAD_FAST 2 ( q )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	      FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	    FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	  FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE
--							      --							    --								  --
Disassembly of <code object printDuplicates at 0x7fbac0e8d540 def printDuplicates ( arr ) :				    def printDuplicates ( arr ) :				  script_not_found : None
2 0 BUILD_MAP 0						      	  dict = { }						    	dict = { }						  
2 STORE_FAST 1 ( dict )					      	  for ele in arr :					    	for ele in arr :					  
							      	      try :						    	    try :						  
3 4 SETUP_LOOP 54 ( to 60 )				      		  dict [ ele ] += 1				    		dict [ ele ] += 1				  
6 LOAD_FAST 0 ( arr )					      	      except :						    	    except :						  
8 GET_ITER						      		  dict [ ele ] = 1				    		dict [ ele ] = 1				  
>> 10 FOR_ITER 46 ( to 58 )				      	  for item in dict :					    	for item in dict :					  
12 STORE_FAST 2 ( ele )					      	      if ( dict [ item ] > 1 ) :			    	    if dict [ item ] > 1 :				  
							      		  print ( item , end = " " )			    		print ( item , end = " " )			  
4 14 SETUP_EXCEPT 20 ( to 36 )				      	  print ( "\n" )					    	print ( "\n" )						  
							      								    								  
5 16 LOAD_FAST 1 ( dict )				      								    								  
18 LOAD_FAST 2 ( ele )					      								    								  
20 DUP_TOP_TWO						      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 INPLACE_ADD						      								    								  
28 ROT_THREE						      								    								  
30 STORE_SUBSCR						      								    								  
32 POP_BLOCK						      								    								  
34 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
6 >> 36 POP_TOP						      								    								  
38 POP_TOP						      								    								  
40 POP_TOP						      								    								  
							      								    								  
7 42 LOAD_CONST 1 ( 1 )					      								    								  
44 LOAD_FAST 1 ( dict )					      								    								  
46 LOAD_FAST 2 ( ele )					      								    								  
48 STORE_SUBSCR						      								    								  
50 POP_EXCEPT						      								    								  
52 JUMP_ABSOLUTE 10					      								    								  
54 END_FINALLY						      								    								  
56 JUMP_ABSOLUTE 10					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 36 ( to 98 )				      								    								  
62 LOAD_FAST 1 ( dict )					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 28 ( to 96 )				      								    								  
68 STORE_FAST 3 ( item )				      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( dict )				      								    								  
72 LOAD_FAST 3 ( item )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 COMPARE_OP 4 ( > )					      								    								  
80 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
10 82 LOAD_GLOBAL 0 ( print )				      								    								  
84 LOAD_FAST 3 ( item )					      								    								  
86 LOAD_CONST 2 ( ' ' )					      								    								  
88 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
90 CALL_FUNCTION_KW 2					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 66					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
11 >> 98 LOAD_GLOBAL 0 ( print )			      								    								  
100 LOAD_CONST 4 ( '\n' )				      								    								  
102 CALL_FUNCTION 1					      								    								  
104 POP_TOP						      								    								  
106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	      RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	    RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	  RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING
--							      --							    --								  --
Disassembly of <code object getMaxOccuringChar at 0x7fbac0e8d def getMaxOccuringChar ( str ) :				    def getMaxOccuringChar ( str ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * ASCII_SIZE				    	count = [ 0 ] * ASCII_SIZE				  
2 BUILD_LIST 1						      	  max = - 1						    	max = - 1						  
4 LOAD_GLOBAL 0 ( ASCII_SIZE )				      	  c = ''						    	c = ""							  
6 BINARY_MULTIPLY					      	  for i in str :					    	for i in str :						  
8 STORE_FAST 1 ( count )				      	      count [ ord ( i ) ] += 1 ;			    	    count += ord ( i ) ] += 1				  
							      	  for i in str :					    	for i in str :						  
3 10 LOAD_CONST 2 ( - 1 )				      	      if max < count [ ord ( i ) ] :			    	    if max < count [ ord ( i ) ] :			  
12 STORE_FAST 2 ( max )					      		  max = count [ ord ( i ) ]			    		max = count [ ord ( i ) ]			  
							      		  c = i						    		c = i						  
4 14 LOAD_CONST 3 ( '' )				      	  return c						    	return c						  
16 STORE_FAST 3 ( c )					      								    								  
							      								    								  
5 18 SETUP_LOOP 32 ( to 52 )				      								    								  
20 LOAD_FAST 0 ( str )					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 24 ( to 50 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 1 ( count )				      								    								  
30 LOAD_GLOBAL 1 ( ord )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 DUP_TOP_TWO						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 4 ( 1 )					      								    								  
42 INPLACE_ADD						      								    								  
44 ROT_THREE						      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 24					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 SETUP_LOOP 44 ( to 98 )				      								    								  
54 LOAD_FAST 0 ( str )					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 36 ( to 96 )				      								    								  
60 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 62 LOAD_FAST 2 ( max )				      								    								  
64 LOAD_FAST 1 ( count )				      								    								  
66 LOAD_GLOBAL 1 ( ord )				      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
9 78 LOAD_FAST 1 ( count )				      								    								  
80 LOAD_GLOBAL 1 ( ord )				      								    								  
82 LOAD_FAST 4 ( i )					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_SUBSCR					      								    								  
88 STORE_FAST 2 ( max )					      								    								  
							      								    								  
10 90 LOAD_FAST 4 ( i )					      								    								  
92 STORE_FAST 3 ( c )					      								    								  
94 JUMP_ABSOLUTE 58					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
11 >> 98 LOAD_FAST 3 ( c )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	      SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	    SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1		  SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1
--							      --							    --								  --
Disassembly of <code object KnapSack at 0x7fbac0e8de40, file  def KnapSack ( val , wt , n , W ) :			    def KnapSack ( val , wt = 1.0 , n = 50 , W = 1.0 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( W + 1 ) ;				    	dp = [ 0 ] * ( W + 1 )					  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_FAST 3 ( W )					      	      for j in range ( W , wt [ i ] , - 1 ) :		    	    for j in range ( W , wt [ i ] , - 1 ) :		  
6 LOAD_CONST 2 ( 1 )					      		  dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j -  		dp [ j ] = max ( dp [ j ] + val [ i ] , dp [ j -  
8 BINARY_ADD						      	  return dp [ W ] ;					    	return dp [ W ]						  
10 BINARY_MULTIPLY					      								    								  
12 STORE_FAST 4 ( dp )					      								    								  
							      								    								  
3 14 SETUP_LOOP 80 ( to 96 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 68 ( to 94 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 28 SETUP_LOOP 62 ( to 92 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 3 ( W )					      								    								  
34 LOAD_FAST 1 ( wt )					      								    								  
36 LOAD_FAST 5 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( - 1 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 42 ( to 90 )				      								    								  
48 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 50 LOAD_GLOBAL 1 ( max )				      								    								  
52 LOAD_FAST 4 ( dp )					      								    								  
54 LOAD_FAST 6 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( val )					      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 4 ( dp )					      								    								  
66 LOAD_FAST 6 ( j )					      								    								  
68 LOAD_FAST 1 ( wt )					      								    								  
70 LOAD_FAST 5 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 2					      								    								  
82 LOAD_FAST 4 ( dp )					      								    								  
84 LOAD_FAST 6 ( j )					      								    								  
86 STORE_SUBSCR						      								    								  
88 JUMP_ABSOLUTE 46					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 JUMP_ABSOLUTE 24					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
6 >> 96 LOAD_FAST 4 ( dp )				      								    								  
98 LOAD_FAST 3 ( W )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS		  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8de40, fil def countPairs ( str1 ) :					    def countPairs ( str1 ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  n = len ( str1 )					    	n = len ( str1 )					  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_GLOBAL 0 ( len )				      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
6 LOAD_FAST 0 ( str1 )					      		  if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ]  		if abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ] )  
8 CALL_FUNCTION 1					      		      result += 1 ;				    		    result += 1					  
10 STORE_FAST 2 ( n )					      	  return result ;					    	return result						  
							      								    								  
4 12 SETUP_LOOP 90 ( to 104 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 76 ( to 102 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 SETUP_LOOP 70 ( to 100 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 52 ( to 98 )				      								    								  
46 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 48 LOAD_GLOBAL 2 ( abs )				      								    								  
50 LOAD_GLOBAL 3 ( ord )				      								    								  
52 LOAD_FAST 0 ( str1 )					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_GLOBAL 3 ( ord )				      								    								  
62 LOAD_FAST 0 ( str1 )					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 LOAD_GLOBAL 2 ( abs )				      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 LOAD_FAST 4 ( j )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 88 LOAD_FAST 1 ( result )				      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 1 ( result )				      								    								  
96 JUMP_ABSOLUTE 44					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 24					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
8 >> 104 LOAD_FAST 1 ( result )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		      MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		    MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		  MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX
--							      --							    --								  --
Disassembly of <code object maxDecimalValue at 0x7fbac0e8de40 def maxDecimalValue ( mat , i , j , p ) :			    def maxDecimalValue ( mat , i , j , p ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( i )					      	  if i >= N or j >= N :					    	if i >= N or j >= N :					  
2 LOAD_GLOBAL 0 ( N )					      	      return 0						    	    return 0						  
4 COMPARE_OP 5 ( >= )					      	  result = max ( maxDecimalValue ( mat , i , j + 1 , p + 1  	result = max ( maxDecimalValue ( mat , i , j + 1 , p + 1  
6 POP_JUMP_IF_TRUE 16					      	  if mat [ i ] [ j ] == 1 :				    	if mat [ i ] [ j ] == 1 :				  
8 LOAD_FAST 2 ( j )					      	      return pow ( 2 , p ) + result			    	    return pow ( 2 , p ) + result			  
10 LOAD_GLOBAL 0 ( N )					      	  else :						    	else :							  
12 COMPARE_OP 5 ( >= )					      	      return result					    	    return result					  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 1 ( max )				      								    								  
22 LOAD_GLOBAL 2 ( maxDecimalValue )			      								    								  
24 LOAD_FAST 0 ( mat )					      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 LOAD_FAST 2 ( j )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 3 ( p )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 4					      								    								  
42 LOAD_GLOBAL 2 ( maxDecimalValue )			      								    								  
44 LOAD_FAST 0 ( mat )					      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 2 ( j )					      								    								  
54 LOAD_FAST 3 ( p )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 4					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 STORE_FAST 4 ( result )				      								    								  
							      								    								  
5 66 LOAD_FAST 0 ( mat )				      								    								  
68 LOAD_FAST 1 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 2 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
6 82 LOAD_GLOBAL 3 ( pow )				      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 LOAD_FAST 3 ( p )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 LOAD_FAST 4 ( result )				      								    								  
92 BINARY_ADD						      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
8 >> 96 LOAD_FAST 4 ( result )				      								    								  
98 RETURN_VALUE						      								    								  
100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS
--							      --							    --								  --
Disassembly of <code object countGroups at 0x7fbac0e8d540, fi def countGroups ( position , previous_sum , length , num ) :  def countGroups ( position , previous_sum , length , num ) :  script_not_found : None
2 0 LOAD_FAST 0 ( position )				      	  if ( position == length ) :				    	if position == length :					  
2 LOAD_FAST 2 ( length )				      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  res = 0						    	res = 0							  
6 POP_JUMP_IF_FALSE 12					      	  sum = 0						    	sum = 0							  
							      	  for i in range ( position , length ) :		    	for i in range ( position , length ) :			  
3 8 LOAD_CONST 1 ( 1 )					      	      sum = sum + int ( num [ i ] )			    	    sum = sum + int ( num [ i ] )			  
10 RETURN_VALUE						      	      if ( sum >= previous_sum ) :			    	    if sum >= previous_sum :				  
							      		  res = res + countGroups ( i + 1 , sum , length ,  		res = res + countGroups ( i + 1 , sum , length ,  
4 >> 12 LOAD_CONST 2 ( 0 )				      	  return res						    	return res						  
14 STORE_FAST 4 ( res )					      								    								  
							      								    								  
5 16 LOAD_CONST 2 ( 0 )					      								    								  
18 STORE_FAST 5 ( sum )					      								    								  
							      								    								  
6 20 SETUP_LOOP 64 ( to 86 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 0 ( position )				      								    								  
26 LOAD_FAST 2 ( length )				      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 50 ( to 84 )				      								    								  
34 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 36 LOAD_FAST 5 ( sum )				      								    								  
38 LOAD_GLOBAL 1 ( int )				      								    								  
40 LOAD_FAST 3 ( num )					      								    								  
42 LOAD_FAST 6 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 5 ( sum )					      								    								  
							      								    								  
8 52 LOAD_FAST 5 ( sum )				      								    								  
54 LOAD_FAST 1 ( previous_sum )				      								    								  
56 COMPARE_OP 5 ( >= )					      								    								  
58 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
9 60 LOAD_FAST 4 ( res )				      								    								  
62 LOAD_GLOBAL 2 ( countGroups )			      								    								  
64 LOAD_FAST 6 ( i )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 5 ( sum )					      								    								  
72 LOAD_FAST 2 ( length )				      								    								  
74 LOAD_FAST 3 ( num )					      								    								  
76 CALL_FUNCTION 4					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 4 ( res )					      								    								  
82 JUMP_ABSOLUTE 32					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 4 ( res )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_PLUS_PERFECT_NUMBER			      PROGRAM_CHECK_PLUS_PERFECT_NUMBER				    PROGRAM_CHECK_PLUS_PERFECT_NUMBER				  PROGRAM_CHECK_PLUS_PERFECT_NUMBER
--							      --							    --								  --
Disassembly of <code object checkplusperfect at 0x7fbac0e8d54 def checkplusperfect ( x ) :				    def checkplusperffect ( x ) :				  success : None
2 0 LOAD_FAST 0 ( x )					      	  temp = x						    	temp = x						  
2 STORE_FAST 1 ( temp )					      	  n = 0							    	n = 0							  
							      	  while ( x != 0 ) :					    	while x != 0 :						  
3 4 LOAD_CONST 1 ( 0 )					      	      x = x // 10					    	    x = x // 10						  
6 STORE_FAST 2 ( n )					      	      n = n + 1						    	    n = n + 1						  
							      	  x = temp						    	x = temp						  
4 8 SETUP_LOOP 28 ( to 38 )				      	  sm = 0						    	sm = 0							  
>> 10 LOAD_FAST 0 ( x )					      	  while ( x != 0 ) :					    	while x != 0 :						  
12 LOAD_CONST 1 ( 0 )					      	      sm = sm + ( int ) ( math.pow ( x % 10 , n ) )	    	    sm = sm + int ( math.pow ( x % 10 , n ) )		  
14 COMPARE_OP 3 ( != )					      	      x = x // 10					    	    x = x // 10						  
16 POP_JUMP_IF_FALSE 36					      	  return ( sm == temp )					    	return sm == temp					  
							      								    								  
5 18 LOAD_FAST 0 ( x )					      								    								  
20 LOAD_CONST 2 ( 10 )					      								    								  
22 BINARY_FLOOR_DIVIDE					      								    								  
24 STORE_FAST 0 ( x )					      								    								  
							      								    								  
6 26 LOAD_FAST 2 ( n )					      								    								  
28 LOAD_CONST 3 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 STORE_FAST 2 ( n )					      								    								  
34 JUMP_ABSOLUTE 10					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
7 >> 38 LOAD_FAST 1 ( temp )				      								    								  
40 STORE_FAST 0 ( x )					      								    								  
							      								    								  
8 42 LOAD_CONST 1 ( 0 )					      								    								  
44 STORE_FAST 3 ( sm )					      								    								  
							      								    								  
9 46 SETUP_LOOP 44 ( to 92 )				      								    								  
>> 48 LOAD_FAST 0 ( x )					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
10 56 LOAD_FAST 3 ( sm )				      								    								  
58 LOAD_GLOBAL 0 ( int )				      								    								  
60 LOAD_GLOBAL 1 ( math )				      								    								  
62 LOAD_METHOD 2 ( pow )				      								    								  
64 LOAD_FAST 0 ( x )					      								    								  
66 LOAD_CONST 2 ( 10 )					      								    								  
68 BINARY_MODULO					      								    								  
70 LOAD_FAST 2 ( n )					      								    								  
72 CALL_METHOD 2					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 3 ( sm )					      								    								  
							      								    								  
11 80 LOAD_FAST 0 ( x )					      								    								  
82 LOAD_CONST 2 ( 10 )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 STORE_FAST 0 ( x )					      								    								  
88 JUMP_ABSOLUTE 48					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
12 >> 92 LOAD_FAST 3 ( sm )				      								    								  
94 LOAD_FAST 1 ( temp )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			      DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			    DELETE_CONSECUTIVE_WORDS_SEQUENCE_1				  DELETE_CONSECUTIVE_WORDS_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object removeConsecutiveSame at 0x7fbac0 def removeConsecutiveSame ( v ) :				    def removeConsecutiveSame ( v ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  st = [ ]						    	st = [ ]						  
2 STORE_FAST 1 ( st )					      	  for i in range ( len ( v ) ) :			    	for i in range ( len ( v ) ) :				  
							      	      if ( len ( st ) == 0 ) :				    	    if len ( st ) == 0 :				  
3 4 SETUP_LOOP 92 ( to 98 )				      		  st.append ( v [ i ] )				    		st.append ( v [ i ] )				  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    else :						  
8 LOAD_GLOBAL 1 ( len )					      		  Str = st [ - 1 ]				    		Str = st [ - 1 ]				  
10 LOAD_FAST 0 ( v )					      		  if ( Str == v [ i ] ) :			    		if Str == v [ i ] :				  
12 CALL_FUNCTION 1					      		      st.pop ( )				    		    st.pop ( )					  
14 CALL_FUNCTION 1					      		  else :					    		else :						  
16 GET_ITER						      		      st.append ( v [ i ] )			    		    st.append ( v [ i ] )			  
>> 18 FOR_ITER 76 ( to 96 )				      	  return len ( st )					    	return len ( st )					  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_GLOBAL 1 ( len )				      								    								  
24 LOAD_FAST 1 ( st )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
5 34 LOAD_FAST 1 ( st )					      								    								  
36 LOAD_METHOD 2 ( append )				      								    								  
38 LOAD_FAST 0 ( v )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
48 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
7 >> 50 LOAD_FAST 1 ( st )				      								    								  
52 LOAD_CONST 2 ( - 1 )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 3 ( Str )					      								    								  
							      								    								  
8 58 LOAD_FAST 3 ( Str )				      								    								  
60 LOAD_FAST 0 ( v )					      								    								  
62 LOAD_FAST 2 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( st )					      								    								  
72 LOAD_METHOD 3 ( pop )				      								    								  
74 CALL_METHOD 0					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 1 ( st )				      								    								  
82 LOAD_METHOD 2 ( append )				      								    								  
84 LOAD_FAST 0 ( v )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_METHOD 1					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 18					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
12 >> 98 LOAD_GLOBAL 1 ( len )				      								    								  
100 LOAD_FAST 1 ( st )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PR<unk> CT    NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PR<unk> CT    NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PR<unk> CT	  NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PR<unk> CT
--							      --							    --								  --
Disassembly of <code object sumEqualProduct at 0x7fbac0e8d540 def sumEqualProduct ( a , n ) :				    def sumEqualProduct ( a , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  zero = 0						    	zero = 0						  
2 STORE_FAST 2 ( zero )					      	  two = 0						    	two = 0							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      if a [ i ] == 0 :					    	    if a [ i ] == 0 :					  
6 STORE_FAST 3 ( two )					      		  zero += 1					    		zero += 1					  
							      	      if a [ i ] == 2 :					    	    if a [ i ] == 2 :					  
4 8 SETUP_LOOP 56 ( to 66 )				      		  two += 1					    		two += 1					  
10 LOAD_GLOBAL 0 ( range )				      	  cnt = ( zero * ( zero - 1 ) ) // 2 + \		    	cnt = ( zero * ( zero - 1 ) ) // 2			  
12 LOAD_FAST 1 ( n )					      	      ( two * ( two - 1 ) ) // 2			    	cnt = ( two * ( two - 1 ) ) // 2			  
14 CALL_FUNCTION 1					      	  return cnt						    	return cnt						  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 44 ( to 64 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( a )					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( zero )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( zero )				      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( a )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 3 ( 2 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
8 54 LOAD_FAST 3 ( two )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( two )					      								    								  
62 JUMP_ABSOLUTE 18					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_FAST 2 ( zero )				      								    								  
68 LOAD_FAST 2 ( zero )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 BINARY_FLOOR_DIVIDE					      								    								  
							      								    								  
10 80 LOAD_FAST 3 ( two )				      								    								  
82 LOAD_FAST 3 ( two )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 BINARY_FLOOR_DIVIDE					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 5 ( cnt )					      								    								  
							      								    								  
11 98 LOAD_FAST 5 ( cnt )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object findGreatest at 0x7fbac0e8de40, f def findGreatest ( arr , n ) :				    def findGreatest ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( - 1 )				      	  result = - 1						    	result = - 1						  
2 STORE_FAST 2 ( result )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( n - 1 ) :			    	    for j in range ( n - 1 ) :				  
3 4 SETUP_LOOP 100 ( to 106 )				      		  for k in range ( j + 1 , n ) :		    		for k in range ( j + 1 , n ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      if ( arr [ j ] * arr [ k ] == arr [ i ] ) :   		    if arr [ j ] * arr [ k ] == arr [ i ] :	  
8 LOAD_FAST 1 ( n )					      			  result = max ( result , arr [ i ] )	    			result = max ( result , arr [ i ] )	  
10 CALL_FUNCTION 1					      	  return result						    	return result						  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 88 ( to 104 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 82 ( to 102 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 66 ( to 100 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 SETUP_LOOP 60 ( to 98 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 4 ( j )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 42 ( to 96 )				      								    								  
54 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 5 ( k )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 80 LOAD_GLOBAL 1 ( max )				      								    								  
82 LOAD_FAST 2 ( result )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 STORE_FAST 2 ( result )				      								    								  
94 JUMP_ABSOLUTE 52					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 JUMP_ABSOLUTE 32					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 JUMP_ABSOLUTE 14					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
8 >> 106 LOAD_FAST 2 ( result )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_ELEMENT_MOVED_K_USING_SINGLE_<unk> S		      ARRAY_ELEMENT_MOVED_K_USING_SINGLE_<unk> S		    ARRAY_ELEMENT_MOVED_K_USING_SINGLE_<unk> S			  ARRAY_ELEMENT_MOVED_K_USING_SINGLE_<unk> S
--							      --							    --								  --
Disassembly of <code object winner at 0x7fbac0e8d540, file "< def winner ( a , n , k ) :				    def winner ( a , n , k ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( k )					      	  if k >= n - 1 :					    	if k >= n - 1 :						  
2 LOAD_FAST 1 ( n )					      	      return n						    	    return n						  
4 LOAD_CONST 1 ( 1 )					      	  best = 0						    	best = 0						  
6 BINARY_SUBTRACT					      	  times = 0						    	times = 0						  
8 COMPARE_OP 5 ( >= )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
10 POP_JUMP_IF_FALSE 16					      	      if a [ i ] > best :				    	    if a [ i ] > best :					  
							      		  best = a [ i ]				    		best = a [ i ]					  
3 12 LOAD_FAST 1 ( n )					      		  if i == True :				    		if i == True :					  
14 RETURN_VALUE						      		      times = 1					    		    times = 1					  
							      	      else :						    		else :						  
4 >> 16 LOAD_CONST 2 ( 0 )				      		  times += 1					    		    times += 1					  
18 STORE_FAST 3 ( best )				      	      if times >= k :					    	    if times >= k :					  
							      		  return best					    		return best					  
5 20 LOAD_CONST 2 ( 0 )					      	  return best						    	return best						  
22 STORE_FAST 4 ( times )				      								    								  
							      								    								  
6 24 SETUP_LOOP 70 ( to 96 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 58 ( to 94 )				      								    								  
36 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 5 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 3 ( best )					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 3 ( best )				      								    								  
							      								    								  
9 58 LOAD_FAST 5 ( i )					      								    								  
60 LOAD_CONST 3 ( True )				      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 66 LOAD_CONST 1 ( 1 )				      								    								  
68 STORE_FAST 4 ( times )				      								    								  
70 JUMP_FORWARD 8 ( to 80 )				      								    								  
							      								    								  
12 >> 72 LOAD_FAST 4 ( times )				      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 4 ( times )				      								    								  
							      								    								  
13 >> 80 LOAD_FAST 4 ( times )				      								    								  
82 LOAD_FAST 2 ( k )					      								    								  
84 COMPARE_OP 5 ( >= )					      								    								  
86 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
14 88 LOAD_FAST 3 ( best )				      								    								  
90 RETURN_VALUE						      								    								  
92 JUMP_ABSOLUTE 34					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
15 >> 96 LOAD_FAST 3 ( best )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP	  GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP
--							      --							    --								  --
Disassembly of <code object isMinHeap at 0x7fbac0e8de40, file def isMinHeap ( level , n ) :				    def isMinHeap ( level , n ) :				  script_not_found : None
2 0 SETUP_LOOP 104 ( to 106 )				      	  for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :	    	for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :	  
2 LOAD_GLOBAL 0 ( range )				      	      if level [ i ] > level [ 2 * i + 1 ] :		    	    if level [ i ] > level [ 2 * i + 1 ] :		  
4 LOAD_GLOBAL 1 ( int )					      		  return False					    		return False					  
6 LOAD_FAST 1 ( n )					      	      if 2 * i + 2 < n :				    	    if 2 * i + 2 < n :					  
8 LOAD_CONST 1 ( 2 )					      		  if level [ i ] > level [ 2 * i + 2 ] :	    		if level [ i ] > level [ 2 * i + 2 ] :		  
10 BINARY_TRUE_DIVIDE					      		      return False				    		    return False				  
12 CALL_FUNCTION 1					      	  return True						    	return True						  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 LOAD_CONST 3 ( - 1 )					      								    								  
20 LOAD_CONST 3 ( - 1 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 76 ( to 104 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 30 LOAD_FAST 0 ( level )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( level )				      								    								  
38 LOAD_CONST 1 ( 2 )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
4 54 LOAD_CONST 4 ( False )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
5 >> 58 LOAD_CONST 1 ( 2 )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_CONST 1 ( 2 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 COMPARE_OP 0 ( < )					      								    								  
72 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 74 LOAD_FAST 0 ( level )				      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( level )				      								    								  
82 LOAD_CONST 1 ( 2 )					      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 BINARY_MULTIPLY					      								    								  
88 LOAD_CONST 1 ( 2 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
7 98 LOAD_CONST 4 ( False )				      								    								  
100 RETURN_VALUE					      								    								  
102 JUMP_ABSOLUTE 26					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
8 >> 106 LOAD_CONST 5 ( True )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		      MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		    MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		  MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7fbac0e8d540, file "< def maxSum ( grid , n ) :					    def maxSum ( grid , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( max )				      	  incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )	    	cx = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )	  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( grid )					      	  excl = 0						    	excl = 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/MAXIMU
4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  M_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT.py", lin
6 BINARY_SUBSCR						      	      excl_new = max ( excl , incl )			    	    excl_new = max ( excl , 52 )			  e 52, in <module>	if f_filled(*parameters_set)
8 LOAD_CONST 1 ( 0 )					      	      incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i 	    timezone = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ]  == f_gold(*parameters_set):	 File "/home/ubuntu/
10 BINARY_SUBSCR					      	      excl = excl_new					    	    excl = excl_new					  TransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_
12 LOAD_FAST 0 ( grid )					      	  return max ( excl , incl )				    	return max ( excl , tree_)				  scripts/dis_sa-python_sa.test/MAXIMUM_SUM_2_X_N_GR
14 LOAD_CONST 2 ( 1 )					      								    								  ID_NO_TWO_ELEMENTS_ADJACENT.py", line 34, in f_fil
16 BINARY_SUBSCR					      								    								  led	  return max ( excl , tree_) NameError: name
18 LOAD_CONST 1 ( 0 )					      								    								   'tree_' is not defined
20 BINARY_SUBSCR					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 STORE_FAST 2 ( incl )				      								    								  
							      								    								  
3 26 LOAD_CONST 1 ( 0 )					      								    								  
28 STORE_FAST 3 ( excl )				      								    								  
							      								    								  
4 30 SETUP_LOOP 62 ( to 94 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 48 ( to 92 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 0 ( max )				      								    								  
48 LOAD_FAST 3 ( excl )					      								    								  
50 LOAD_FAST 2 ( incl )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 STORE_FAST 5 ( excl_new )				      								    								  
							      								    								  
6 56 LOAD_FAST 3 ( excl )				      								    								  
58 LOAD_GLOBAL 0 ( max )				      								    								  
60 LOAD_FAST 0 ( grid )					      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( grid )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 2 ( incl )				      								    								  
							      								    								  
7 86 LOAD_FAST 5 ( excl_new )				      								    								  
88 STORE_FAST 3 ( excl )				      								    								  
90 JUMP_ABSOLUTE 42					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
8 >> 94 LOAD_GLOBAL 0 ( max )				      								    								  
96 LOAD_FAST 3 ( excl )					      								    								  
98 LOAD_FAST 2 ( incl )					      								    								  
100 CALL_FUNCTION 2					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		      FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		    FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		  FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S
--							      --							    --								  --
Disassembly of <code object findMax at 0x7fbac0e8bc90, file " def findMax ( arr ) :					    def findMax ( arr ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  row = 0						    	row = 0							  
2 STORE_FAST 1 ( row )					      	  j = N - 1						    	j = N - 1						  
							      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
3 4 LOAD_GLOBAL 0 ( N )					      	      while ( arr [ i ] [ j ] == 1 and j >= 0 ) :	    	    while arr [ i ] [ j ] == 1 and j >= 0 :		  
6 LOAD_CONST 2 ( 1 )					      		  row = i					    		row = i						  
8 BINARY_SUBTRACT					      		  j -= 1					    		j -= 1						  
10 STORE_FAST 2 ( j )					      	  print ( "Row number = " , row + 1 , ", MaxCount = " , N - 	print ( "Row number = " , row + 1 , ", MaxCount = " , N - 
							      								    								  
4 12 SETUP_LOOP 60 ( to 74 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_GLOBAL 0 ( N )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 46 ( to 72 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 SETUP_LOOP 40 ( to 70 )				      								    								  
>> 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 2 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 68					      								    								  
46 LOAD_FAST 2 ( j )					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 5 ( >= )					      								    								  
52 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 54 LOAD_FAST 3 ( i )					      								    								  
56 STORE_FAST 1 ( row )					      								    								  
							      								    								  
7 58 LOAD_FAST 2 ( j )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_SUBTRACT					      								    								  
64 STORE_FAST 2 ( j )					      								    								  
66 JUMP_ABSOLUTE 30					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 JUMP_ABSOLUTE 24					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_GLOBAL 2 ( print )				      								    								  
76 LOAD_CONST 3 ( 'Row number = ' )			      								    								  
78 LOAD_FAST 1 ( row )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_CONST 4 ( ', MaxCount = ' )			      								    								  
86 LOAD_GLOBAL 0 ( N )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_FAST 2 ( j )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 4					      								    								  
98 POP_TOP						      								    								  
100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_<unk> ENCE_LENGTH   NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_<unk> ENCE_LENGTH   NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_<unk> ENCE_LENGTH	  NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_<unk> ENCE_LENGTH
--							      --							    --								  --
Disassembly of <code object countTrees at 0x7fbac0e8d540, fil def countTrees ( n ) :					    def countTrees ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  BT = [ 0 ] * ( n + 1 )				    	BT = [ 0 ] * ( n + 1 )					  
2 BUILD_LIST 1						      	  BT [ 0 ] = BT [ 1 ] = 1				    	BT [ 0 ] = BT [ 1 ] = 1					  
4 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
6 LOAD_CONST 2 ( 1 )					      	      for j in range ( i ) :				    	    for j in range ( i ) :				  
8 BINARY_ADD						      		  BT [ i ] += BT [ j ] * BT [ i - j - 1 ]	    		BT [ i ] += BT [ j ] * BT [ i - j - 1 ]		  
10 BINARY_MULTIPLY					      	  return BT [ n ]					    return BT [ n ]						  
12 STORE_FAST 1 ( BT )					      								    								  
							      								    								  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 DUP_TOP						      								    								  
18 LOAD_FAST 1 ( BT )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_SUBSCR						      								    								  
24 LOAD_FAST 1 ( BT )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
4 30 SETUP_LOOP 76 ( to 108 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 58 ( to 106 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 50 SETUP_LOOP 52 ( to 104 )				      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 40 ( to 102 )				      								    								  
62 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 64 LOAD_FAST 1 ( BT )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 DUP_TOP_TWO						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 1 ( BT )					      								    								  
74 LOAD_FAST 3 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 1 ( BT )					      								    								  
80 LOAD_FAST 2 ( i )					      								    								  
82 LOAD_FAST 3 ( j )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 INPLACE_ADD						      								    								  
96 ROT_THREE						      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 60					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 46					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
7 >> 108 LOAD_FAST 1 ( BT )				      								    								  
110 LOAD_FAST 0 ( n )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GNOME_SORT_A_STUPID_ONE					      GNOME_SORT_A_STUPID_ONE					    GNOME_SORT_A_STUPID_ONE					  GNOME_SORT_A_STUPID_ONE
--							      --							    --								  --
Disassembly of <code object gnomeSort at 0x7fbac0e8de40, file def gnomeSort ( arr , n ) :				    def gnomeSort ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  index = 0						    	index = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( index )				      	  while index < n :					    	while index < n :					  _sa.test/GNOME_SORT_A_STUPID_ONE.py", line 40
							      	      if index == 0 :					    	    if index == 0 :					  return arr	 ^ SyntaxError: 'return' outside fun
3 4 SETUP_LOOP 100 ( to 106 )				      		  index = index + 1				    		index = ( index + 1 )				  ction
>> 6 LOAD_FAST 2 ( index )				      	      if arr [ index ] >= arr [ index - 1 ] :		    	    if arr [ index ] >= arr [ index - 1 ] :		  
8 LOAD_FAST 1 ( n )					      		  index = index + 1				    		index = ( index + 1 )				  
10 COMPARE_OP 0 ( < )					      	      else :						    	    else :						  
12 POP_JUMP_IF_FALSE 104				      		  arr [ index ] , arr [ index - 1 ] = arr [ index - 		arr [ index ] , arr [ index - 1 ] = arr [ index - 
							      		  index = index - 1				    		index = index - 1				  
4 14 LOAD_FAST 2 ( index )				      	  return arr						    return arr							  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 2 ( == )					      								    								  
20 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( index )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 2 ( index )				      								    								  
							      								    								  
6 >> 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 2 ( index )				      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 2 ( index )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 5 ( >= )					      								    								  
48 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( index )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( index )				      								    								  
58 JUMP_ABSOLUTE 6					      								    								  
							      								    								  
9 >> 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 2 ( index )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 2 ( index )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 ROT_TWO						      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 2 ( index )				      								    								  
82 STORE_SUBSCR						      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 2 ( index )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
10 94 LOAD_FAST 2 ( index )				      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 STORE_FAST 2 ( index )				      								    								  
102 JUMP_ABSOLUTE 6					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
11 >> 106 LOAD_FAST 0 ( arr )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ALTERNATIVE_SORTING					      ALTERNATIVE_SORTING					    ALTERNATIVE_SORTING						  ALTERNATIVE_SORTING
--							      --							    --								  --
Disassembly of <code object alternateSort at 0x7fbac0e8d540,  def alternateSort ( arr , n ) :				    def alternateSort ( arr , n ) :				  success : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  i = 0							    	i = 0							  
4 CALL_METHOD 0						      	  j = n - 1						    	j = n - 1						  
6 POP_TOP						      	  while ( i < j ) :					    	while i < j :						  
							      	      print ( arr [ j ] , end = " " )			    	    print ( arr [ j ] , end = " " )			  
3 8 LOAD_CONST 1 ( 0 )					      	      j -= 1						    	    j -= 1						  
10 STORE_FAST 2 ( i )					      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] , end = " " )			  
							      	      i += 1						    	    i += 1						  
4 12 LOAD_FAST 1 ( n )					      	  if ( n % 2 != 0 ) :					    	if n % 2 != 0 :						  
14 LOAD_CONST 2 ( 1 )					      	      print ( arr [ i ] )				    	    print ( arr [ i ] )					  
16 BINARY_SUBTRACT					      								    								  
18 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 20 SETUP_LOOP 60 ( to 82 )				      								    								  
>> 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_FAST 3 ( j )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
6 30 LOAD_GLOBAL 1 ( print )				      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 3 ( ' ' )					      								    								  
40 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
42 CALL_FUNCTION_KW 2					      								    								  
44 POP_TOP						      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( j )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 STORE_FAST 3 ( j )					      								    								  
							      								    								  
8 54 LOAD_GLOBAL 1 ( print )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( ' ' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
							      								    								  
9 70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 2 ( i )					      								    								  
78 JUMP_ABSOLUTE 22					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 LOAD_FAST 1 ( n )				      								    								  
84 LOAD_CONST 5 ( 2 )					      								    								  
86 BINARY_MODULO					      								    								  
88 LOAD_CONST 1 ( 0 )					      								    								  
90 COMPARE_OP 3 ( != )					      								    								  
92 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
11 94 LOAD_GLOBAL 1 ( print )				      								    								  
96 LOAD_FAST 0 ( arr )					      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 POP_TOP						      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
Disassembly of <code object countNum at 0x7fbac0e8de40, file  def countNum ( arr , n ) :				    def countNum ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( count )				      	  arr.sort ( )						    	arr.sort ( )						  _sa.test/ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS
							      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  _OF_A_RANGE_ARE_PRESENT_IN_ARRAY.py", line 32
3 4 LOAD_FAST 0 ( arr )					      	      if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr  	    if arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [  return count	   ^ SyntaxError: 'return' outside f
6 LOAD_METHOD 0 ( sort )				      		  count += arr [ i + 1 ] - arr [ i ] - 1 ;	    		count += arr [ i + 1 ] - arr [ i ] - 1		  unction
8 CALL_METHOD 0						      	  return count						    return count						  
10 POP_TOP						      								    								  
							      								    								  
4 12 SETUP_LOOP 94 ( to 108 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 76 ( to 106 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 28					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
6 76 LOAD_FAST 2 ( count )				      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 2 ( count )				      								    								  
104 JUMP_ABSOLUTE 28					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
7 >> 108 LOAD_FAST 2 ( count )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8de40, file "<d def check ( st ) :					    def check ( st ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    	n = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  oddDigSum = 0						    	oddDigSum = 0						  
4 CALL_FUNCTION 1					      	  evenDigSum = 0					    	evenDigSum = 0						  
6 STORE_FAST 1 ( n )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if ( i % 2 == 0 ) :				    	    if i % 2 == 0 :					  
3 8 LOAD_CONST 1 ( 0 )					      		  oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )  		oddDigSum = oddDigSum + int ( st [ i ] )	  
10 STORE_FAST 2 ( oddDigSum )				      	      else :						    	    else :						  
							      		  evenDigSum = evenDigSum + ( ( int ) ( st [ i ] )  		evenDigSum = evenDigSum + int ( st [ i ] )	  
4 12 LOAD_CONST 1 ( 0 )					      	  return ( ( oddDigSum - evenDigSum ) % 11 == 0 )	    	return oddDigSum - evenDigSum % 11 == 0			  
14 STORE_FAST 3 ( evenDigSum )				      								    								  
							      								    								  
5 16 SETUP_LOOP 64 ( to 82 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 50 ( to 80 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_CONST 2 ( 2 )					      								    								  
36 BINARY_MODULO					      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( oddDigSum )				      								    								  
46 LOAD_GLOBAL 2 ( int )				      								    								  
48 LOAD_FAST 0 ( st )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 2 ( oddDigSum )				      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
9 >> 62 LOAD_FAST 3 ( evenDigSum )			      								    								  
64 LOAD_GLOBAL 2 ( int )				      								    								  
66 LOAD_FAST 0 ( st )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_FAST 3 ( evenDigSum )				      								    								  
78 JUMP_ABSOLUTE 28					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 LOAD_FAST 2 ( oddDigSum )			      								    								  
84 LOAD_FAST 3 ( evenDigSum )				      								    								  
86 BINARY_SUBTRACT					      								    								  
88 LOAD_CONST 3 ( 11 )					      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 1 ( 0 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE				      LONGEST_COMMON_SUBSEQUENCE				    LONGEST_COMMON_SUBSEQUENCE					  LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lcs at 0x7fbac0e8d540, file "<dis def lcs ( X , Y , m , n ) :				    def lcs ( X , Y , m , n ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if m == 0 or n == 0 :					    	if m == 0 or n == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  elif X [ m - 1 ] == Y [ n - 1 ] :			    	if X [ m - 1 ] == Y [ n - 1 ] :				  
6 POP_JUMP_IF_TRUE 16					      	      return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	    	    return 1 + lcs ( X , Y , m - 1 , n - 1 )		  
8 LOAD_FAST 3 ( n )					      	  else :						    	else :							  
10 LOAD_CONST 1 ( 0 )					      	      return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  	    return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( X )				      								    								  
22 LOAD_FAST 2 ( m )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( Y )					      								    								  
32 LOAD_FAST 3 ( n )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
5 44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_GLOBAL 0 ( lcs )				      								    								  
48 LOAD_FAST 0 ( X )					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 2 ( m )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 4					      								    								  
66 BINARY_ADD						      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
7 >> 70 LOAD_GLOBAL 1 ( max )				      								    								  
72 LOAD_GLOBAL 0 ( lcs )				      								    								  
74 LOAD_FAST 0 ( X )					      								    								  
76 LOAD_FAST 1 ( Y )					      								    								  
78 LOAD_FAST 2 ( m )					      								    								  
80 LOAD_FAST 3 ( n )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 4					      								    								  
88 LOAD_GLOBAL 0 ( lcs )				      								    								  
90 LOAD_FAST 0 ( X )					      								    								  
92 LOAD_FAST 1 ( Y )					      								    								  
94 LOAD_FAST 2 ( m )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 LOAD_FAST 3 ( n )					      								    								  
102 CALL_FUNCTION 4					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 RETURN_VALUE					      								    								  
108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STERN_BROCOT_SEQUENCE					      STERN_BROCOT_SEQUENCE					    STERN_BROCOT_SEQUENCE					  STERN_BROCOT_SEQUENCE
--							      --							    --								  --
Disassembly of <code object SternSequenceFunc at 0x7fbac0e8d5 def SternSequenceFunc ( BrocotSequence , n ) :		    def SternSequenceFunc ( BrocotSequence , n ) :		  script_not_found : None
2 0 SETUP_LOOP 62 ( to 64 )				      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      considered_element = BrocotSequence [ i ]		    	    considered_element = BrocotSequence [ i ]		  
4 LOAD_CONST 1 ( 1 )					      	      <<unk>> dent = BrocotSequence [ i - 1 ]		    	    test_data dent = BrocotSequence [ i - 1 ]		  
6 LOAD_FAST 1 ( n )					      	      BrocotSequence.append ( considered_element + <<unk>>  	    BrocotSequence.append ( considered_element + ValueErr 
8 CALL_FUNCTION 2					      	      BrocotSequence.append ( considered_element )	    	for i in range ( 0 , 15 ) :				  
10 GET_ITER						      	  for i in range ( 0 , 15 ) :				    	    print ( BrocotSequence [ i ] , end = " " )		  
>> 12 FOR_ITER 48 ( to 62 )				      	      print ( BrocotSequence [ i ] , end = " " )	    								  
14 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( BrocotSequence )			      								    								  
18 LOAD_FAST 2 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 STORE_FAST 3 ( considered_element )			      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( BrocotSequence )			      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 4 ( <<unk>> dent )			      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( BrocotSequence )			      								    								  
38 LOAD_METHOD 1 ( append )				      								    								  
40 LOAD_FAST 3 ( considered_element )			      								    								  
42 LOAD_FAST 4 ( <<unk>> dent )				      								    								  
44 BINARY_ADD						      								    								  
46 CALL_METHOD 1					      								    								  
48 POP_TOP						      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( BrocotSequence )			      								    								  
52 LOAD_METHOD 1 ( append )				      								    								  
54 LOAD_FAST 3 ( considered_element )			      								    								  
56 CALL_METHOD 1					      								    								  
58 POP_TOP						      								    								  
60 JUMP_ABSOLUTE 12					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 SETUP_LOOP 34 ( to 100 )			      								    								  
66 LOAD_GLOBAL 0 ( range )				      								    								  
68 LOAD_CONST 2 ( 0 )					      								    								  
70 LOAD_CONST 3 ( 15 )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 20 ( to 98 )				      								    								  
78 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 80 LOAD_GLOBAL 2 ( print )				      								    								  
82 LOAD_FAST 0 ( BrocotSequence )			      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 4 ( ' ' )					      								    								  
90 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
92 CALL_FUNCTION_KW 2					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 76					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8de40, fil def countPairs ( arr , n ) :				    def countPairs ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 2 ( result )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 100 ( to 106 )				      		  product = arr [ i ] * arr [ j ] ;		    		product = arr [ i ] * arr [ j ]			  
6 LOAD_GLOBAL 0 ( range )				      		  for k in range ( 0 , n ) :			    		for k in range ( 0 , n ) :			  
8 LOAD_CONST 1 ( 0 )					      		      if ( arr [ k ] == product ) :		    		    if arr [ k ] == product :			  
10 LOAD_FAST 1 ( n )					      			  result = result + 1 ;			    			result = result + 1			  
12 CALL_FUNCTION 2					      			  break ;				    			break					  
14 GET_ITER						      	  return result ;					    	return result						  
>> 16 FOR_ITER 86 ( to 104 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 80 ( to 102 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 62 ( to 100 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 STORE_FAST 5 ( product )				      								    								  
							      								    								  
6 56 SETUP_LOOP 40 ( to 98 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 26 ( to 96 )				      								    								  
70 STORE_FAST 6 ( k )					      								    								  
							      								    								  
7 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 6 ( k )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 5 ( product )				      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 84 LOAD_FAST 2 ( result )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_ADD						      								    								  
90 STORE_FAST 2 ( result )				      								    								  
							      								    								  
9 92 BREAK_LOOP						      								    								  
94 JUMP_ABSOLUTE 68					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 JUMP_ABSOLUTE 36					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 JUMP_ABSOLUTE 16					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 LOAD_FAST 2 ( result )			      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT_1				      CHECK_TWO_GIVEN_SETS_DISJOINT_1				    CHECK_TWO_GIVEN_SETS_DISJOINT_1				  CHECK_TWO_GIVEN_SETS_DISJOINT_1
--							      --							    --								  --
Disassembly of <code object areDisjoint at 0x7fbac0e8de40, fi def areDisjoint ( set1 , set2 , m , n ) :			    def areDisjoint ( set1 , set2 , m , n ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( set1 )				      	  set1.sort ( )						    	set1.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  set2.sort ( )						    	set2.sort ( )						  
4 CALL_METHOD 0						      	  i = 0 ; j = 0						    	i = 0							  
6 POP_TOP						      	  while ( i < m and j < n ) :				    	while i < m and j < n :					  
							      	      if ( set1 [ i ] < set2 [ j ] ) :			    	    if set1 [ i ] < set2 [ j ] :			  
3 8 LOAD_FAST 1 ( set2 )				      		  i += 1					    		i += 1						  
10 LOAD_METHOD 0 ( sort )				      	      elif ( set2 [ j ] < set1 [ i ] ) :		    	elif set2 [ j ] < set1 [ i ] :				  
12 CALL_METHOD 0					      		  j += 1					    	    j += 1						  
14 POP_TOP						      	      else :						    	else :							  
							      		  return False					    	    return False					  
4 16 LOAD_CONST 1 ( 0 )					      	  return True						    return True							  
18 STORE_FAST 4 ( i )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 24 SETUP_LOOP 76 ( to 102 )				      								    								  
>> 26 LOAD_FAST 4 ( i )					      								    								  
28 LOAD_FAST 2 ( m )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 100				      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 LOAD_FAST 3 ( n )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( set1 )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( set2 )					      								    								  
50 LOAD_FAST 5 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 0 ( < )					      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
7 58 LOAD_FAST 4 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( i )					      								    								  
66 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 68 LOAD_FAST 1 ( set2 )				      								    								  
70 LOAD_FAST 5 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( set1 )					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
9 84 LOAD_FAST 5 ( j )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 5 ( j )					      								    								  
92 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 94 LOAD_CONST 3 ( False )				      								    								  
96 RETURN_VALUE						      								    								  
98 JUMP_ABSOLUTE 26					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
12 >> 102 LOAD_CONST 4 ( True )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		      COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		    COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		  COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION
--							      --							    --								  --
Disassembly of <code object countPair at 0x7fbac0e8de40, file def countPair ( a , b ) :					    def countPair ( a , b ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( str )				      	  s = str ( b )						    	s = str ( b )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 1 ( b )					      	  i = 0							    	i = 0							  _sa.test/COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDI
4 CALL_FUNCTION 1					      	  while i < ( len ( s ) ) :				    	while i < len ( s ) :					  TION.py", line 44	return result	  ^ SyntaxEr
6 STORE_FAST 2 ( s )					      	      if ( s [ i ] != '9' ) :				    	    if s [ i ] != '9' :					  ror: 'return' outside function
							      		  break						    		break						  
3 8 LOAD_CONST 1 ( 0 )					      	      i += 1						    	    i += 1						  
10 STORE_FAST 3 ( i )					      	  result = 0						    	result = 0						  
							      	  if ( i == len ( s ) ) :				    	if i == len ( s ) :					  
4 12 SETUP_LOOP 38 ( to 52 )				      	      result = a * len ( s )				    	    result = a * len ( s )				  
>> 14 LOAD_FAST 3 ( i )					      	  else :						    	else :							  
16 LOAD_GLOBAL 1 ( len )				      	      result = a * ( len ( s ) - 1 )			    	    result = a * len ( s ) - 1				  
18 LOAD_FAST 2 ( s )					      	  return result						    return result						  
20 CALL_FUNCTION 1					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( s )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( '9' )					      								    								  
34 COMPARE_OP 3 ( != )					      								    								  
36 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 38 BREAK_LOOP						      								    								  
							      								    								  
7 >> 40 LOAD_FAST 3 ( i )				      								    								  
42 LOAD_CONST 3 ( 1 )					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 3 ( i )					      								    								  
48 JUMP_ABSOLUTE 14					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
8 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 4 ( result )				      								    								  
							      								    								  
9 56 LOAD_FAST 3 ( i )					      								    								  
58 LOAD_GLOBAL 1 ( len )				      								    								  
60 LOAD_FAST 2 ( s )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 68 LOAD_FAST 0 ( a )					      								    								  
70 LOAD_GLOBAL 1 ( len )				      								    								  
72 LOAD_FAST 2 ( s )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 STORE_FAST 4 ( result )				      								    								  
80 JUMP_FORWARD 16 ( to 98 )				      								    								  
							      								    								  
12 >> 82 LOAD_FAST 0 ( a )				      								    								  
84 LOAD_GLOBAL 1 ( len )				      								    								  
86 LOAD_FAST 2 ( s )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 STORE_FAST 4 ( result )				      								    								  
							      								    								  
13 >> 98 LOAD_FAST 4 ( result )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			      MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			    MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			  MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1
--							      --							    --								  --
Disassembly of <code object calculateEnergy at 0x7fbac0e89d20 def calculateEnergy ( mat , n ) :				    def calculateEnergy ( mat , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  tot_energy = 0					    	tot_energy = 0						  
2 STORE_FAST 2 ( tot_energy )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
3 4 SETUP_LOOP 102 ( to 108 )				      		  q = mat [ i ] [ j ] // n			    		q = mat [ i ] [ j ] // n			  
6 LOAD_GLOBAL 0 ( range )				      		  i_des = q					    		i_des = q					  
8 LOAD_FAST 1 ( n )					      		  j_des = mat [ i ] [ j ] - ( n * q )		    		j_des = mat [ i ] [ j ] - n * q			  
10 CALL_FUNCTION 1					      		  tot_energy += ( abs ( i_des - i ) + abs ( j_des - 		tot_energy += abs ( i_des - i ) + abs ( j_des - j 
12 GET_ITER						      	  return tot_energy					    	return tot_energy					  
>> 14 FOR_ITER 90 ( to 106 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 84 ( to 104 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 72 ( to 102 )				      								    								  
30 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( mat )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 4 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 BINARY_FLOOR_DIVIDE					      								    								  
46 STORE_FAST 5 ( q )					      								    								  
							      								    								  
6 48 LOAD_FAST 5 ( q )					      								    								  
50 STORE_FAST 6 ( i_des )				      								    								  
							      								    								  
7 52 LOAD_FAST 0 ( mat )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 LOAD_FAST 5 ( q )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_FAST 7 ( j_des )				      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( tot_energy )				      								    								  
74 LOAD_GLOBAL 1 ( abs )				      								    								  
76 LOAD_FAST 6 ( i_des )				      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 LOAD_GLOBAL 1 ( abs )				      								    								  
86 LOAD_FAST 7 ( j_des )				      								    								  
88 LOAD_FAST 4 ( j )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 BINARY_ADD						      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 2 ( tot_energy )				      								    								  
100 JUMP_ABSOLUTE 28					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 14					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
9 >> 108 LOAD_FAST 2 ( tot_energy )			      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_ELEMENT					      NEXT_GREATER_ELEMENT					    NEXT_GREATER_ELEMENT					  NEXT_GREATER_ELEMENT
--							      --							    --								  --
Disassembly of <code object printNGE at 0x7fbac0e89d20, file  def printNGE ( arr ) :					    def printNGE ( arr ) :					  script_not_found : None
2 0 SETUP_LOOP 112 ( to 114 )				      	  for i in range ( 0 , len ( arr ) , 1 ) :		    	for i in range ( 0 , len ( arr ) , 1 ) :		  
2 LOAD_GLOBAL 0 ( range )				      	      next = - 1					    	    next = - 1						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( i + 1 , len ( arr ) , 1 ) :	    	    for j in range ( i + 1 , len ( arr ) , 1 ) :	  
6 LOAD_GLOBAL 1 ( len )					      		  if arr [ i ] < arr [ j ] :			    		if arr [ i ] < arr [ j ] :			  
8 LOAD_FAST 0 ( arr )					      		      next = arr [ j ]				    		    next = arr [ j ]				  
10 CALL_FUNCTION 1					      		      break					    		    break					  
12 LOAD_CONST 2 ( 1 )					      	      print ( str ( arr [ i ] ) + " -- " + str ( next ) )   	print ( str ( arr [ i ] ) + " -- " + str ( next ) )	  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 92 ( to 112 )				      								    								  
20 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 22 LOAD_CONST 3 ( - 1 )				      								    								  
24 STORE_FAST 2 ( next )				      								    								  
							      								    								  
4 26 SETUP_LOOP 54 ( to 82 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_GLOBAL 1 ( len )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 CALL_FUNCTION 3					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 30 ( to 80 )				      								    								  
50 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 1 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 STORE_FAST 2 ( next )				      								    								  
							      								    								  
7 76 BREAK_LOOP						      								    								  
78 JUMP_ABSOLUTE 48					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
8 >> 82 LOAD_GLOBAL 2 ( print )				      								    								  
84 LOAD_GLOBAL 3 ( str )				      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 1 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_CONST 4 ( ' -- ' )				      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_GLOBAL 3 ( str )				      								    								  
100 LOAD_FAST 2 ( next )				      								    								  
102 CALL_FUNCTION 1					      								    								  
104 BINARY_ADD						      								    								  
106 CALL_FUNCTION 1					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 18					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_<unk> AL_CONVERSION			      PROGRAM_DECIMAL_<unk> AL_CONVERSION			    PROGRAM_DECIMAL_<unk> AL_CONVERSION				  PROGRAM_DECIMAL_<unk> AL_CONVERSION
--							      --							    --								  --
Disassembly of <code object decToOctal at 0x7fbac0e8bc90, fil def decToOctal ( n ) :					    def decToOctal ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  octalNum = [ 0 ] * 100 ;				    	octalNum = [ 0 ] * 100					  
2 BUILD_LIST 1						      	  i = 0 ;						    	i = 0							  
4 LOAD_CONST 2 ( 100 )					      	  while ( n != 0 ) :					    	while n != 0 :						  
6 BINARY_MULTIPLY					      	      octalNum [ i ] = n % 8 ;				    	    octalNum [ i ] = n % 8				  
8 STORE_FAST 1 ( octalNum )				      	      n = int ( n / 8 ) ;				    	    n = int ( n / 8 )					  
							      	      i += 1 ;						    	    i += 1						  
3 10 LOAD_CONST 1 ( 0 )					      	  for j in range ( i - 1 , - 1 , - 1 ) :		    	for j in range ( i - 1 , - 1 , - 1 ) :			  
12 STORE_FAST 2 ( i )					      	      print ( octalNum [ j ] , end = "" ) ;		    	    print ( octalNum [ j ] , end = '' )			  
							      								    								  
4 14 SETUP_LOOP 44 ( to 60 )				      								    								  
>> 16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 3 ( != )					      								    								  
22 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 8 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_FAST 1 ( octalNum )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 3 ( 8 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 4 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 2 ( i )					      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 40 ( to 102 )			      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_CONST 5 ( - 1 )					      								    								  
72 LOAD_CONST 5 ( - 1 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 20 ( to 100 )				      								    								  
80 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 82 LOAD_GLOBAL 2 ( print )				      								    								  
84 LOAD_FAST 1 ( octalNum )				      								    								  
86 LOAD_FAST 3 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 6 ( '' )					      								    								  
92 LOAD_CONST 7 ( ( 'end' , ) )				      								    								  
94 CALL_FUNCTION_KW 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 78					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH FIND_<unk> ELEMENT_FROM_DIFFERENT_THREE_<unk> YS_SUCH_THAT_TH
--							      --							    --								  --
Disassembly of <code object findTriplet at 0x7fbac0e8de40, fi def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :	    def findTriplet ( a1 , a2 , a3 , n1 , n2 ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n1 ) :				    	for i in range ( n1 ) :					  
4 STORE_FAST 7 ( s )					      	      s.add ( a1 [ i ] )				    	    s.add ( a1 [ i ] )					  
							      	  for i in range ( n2 ) :				    	for i in range ( n2 ) :					  
3 6 SETUP_LOOP 30 ( to 38 )				      	      for j in range ( n3 ) :				    	    for j in range ( n3 ) :				  
8 LOAD_GLOBAL 1 ( range )				      		  if sum - a2 [ i ] - a3 [ j ] in s :		    		if sum ( a2 [ i ] - a3 [ j ] in s :		  
10 LOAD_FAST 3 ( n1 )					      		      return True				    		    return True					  
12 CALL_FUNCTION 1					      	  return False						    return False						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 18 ( to 36 )				      								    								  
18 STORE_FAST 8 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 7 ( s )					      								    								  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( a1 )					      								    								  
26 LOAD_FAST 8 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 SETUP_LOOP 62 ( to 102 )			      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 4 ( n2 )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 50 ( to 100 )				      								    								  
50 STORE_FAST 8 ( i )					      								    								  
							      								    								  
6 52 SETUP_LOOP 44 ( to 98 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_FAST 5 ( n3 )					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 32 ( to 96 )				      								    								  
64 STORE_FAST 9 ( j )					      								    								  
							      								    								  
7 66 LOAD_FAST 6 ( sum )				      								    								  
68 LOAD_FAST 1 ( a2 )					      								    								  
70 LOAD_FAST 8 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_FAST 2 ( a3 )					      								    								  
78 LOAD_FAST 9 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_FAST 7 ( s )					      								    								  
86 COMPARE_OP 6 ( in )					      								    								  
88 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 90 LOAD_CONST 1 ( True )				      								    								  
92 RETURN_VALUE						      								    								  
94 JUMP_ABSOLUTE 62					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 JUMP_ABSOLUTE 48					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
9 >> 102 LOAD_CONST 2 ( False )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printRepeating at 0x7fbac0e8d540, def printRepeating ( arr , size ) :			    def printRepeating ( arr , size ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * size					    	count = [ 0 ] * size					  
2 BUILD_LIST 1						      	  print ( " Repeating elements are " , end = "" )	    	print ( " Repeating elements are " , end = "" )		  
4 LOAD_FAST 1 ( size )					      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
6 BINARY_MULTIPLY					      	      if ( count [ arr [ i ] ] == 1 ) :			    	    if count [ arr [ i ] ] == 1 :			  
8 STORE_FAST 2 ( count )				      		  print ( arr [ i ] , end = " " )		    		print ( arr [ i ] , end = " " )			  
							      	      else :						    	    else :						  
3 10 LOAD_GLOBAL 0 ( print )				      		  count [ arr [ i ] ] = count [ arr [ i ] ] + 1	    		count [ arr [ i ] ] = count [ arr [ i ] ] + 1	  
12 LOAD_CONST 2 ( ' Repeating elements are ' )		      								    								  
14 LOAD_CONST 3 ( '' )					      								    								  
16 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
18 CALL_FUNCTION_KW 2					      								    								  
20 POP_TOP						      								    								  
							      								    								  
4 22 SETUP_LOOP 76 ( to 100 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 1 ( size )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 62 ( to 98 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 2 ( count )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 5 ( 1 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 54 LOAD_GLOBAL 0 ( print )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 6 ( ' ' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
8 >> 72 LOAD_FAST 2 ( count )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 5 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( count )				      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 34					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1
--							      --							    --								  --
Disassembly of <code object findNth at 0x7fbac0e89d20, file " def findNth ( n ) :					    def findNth ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  curr = 19 ;						    	curr = 19						  
							      	  while ( True ) :					    	while True :						  
3 4 LOAD_CONST 2 ( 19 )					      	      sum = 0 ;						    	    sum = 0						  
6 STORE_FAST 2 ( curr )					      	      x = curr ;					    	    x = curr						  
							      	      while ( x > 0 ) :					    	    while x > 0 :					  
4 8 SETUP_LOOP 86 ( to 96 )				      		  sum = sum + x % 10 ;				    		sum = sum + ( x % 10 )				  
							      		  x = int ( x / 10 ) ;				    		x = int ( x / 10 )				  
5 >> 10 LOAD_CONST 1 ( 0 )				      	      if ( sum == 10 ) :				    	    if sum == 10 :					  
12 STORE_FAST 3 ( sum )					      		  count += 1 ;					    		count += 1					  
							      	      if ( count == n ) :				    	    if count == n :					  
6 14 LOAD_FAST 2 ( curr )				      		  return curr ;					    		return curr					  
16 STORE_FAST 4 ( x )					      	      curr += 9 ;					    	    curr += 9						  
							      	  return - 1 ;						    	return - 1						  
7 18 SETUP_LOOP 36 ( to 56 )				      								    								  
>> 20 LOAD_FAST 4 ( x )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 4 ( > )					      								    								  
26 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
8 28 LOAD_FAST 3 ( sum )				      								    								  
30 LOAD_FAST 4 ( x )					      								    								  
32 LOAD_CONST 3 ( 10 )					      								    								  
34 BINARY_MODULO					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
9 40 LOAD_GLOBAL 0 ( int )				      								    								  
42 LOAD_FAST 4 ( x )					      								    								  
44 LOAD_CONST 3 ( 10 )					      								    								  
46 BINARY_TRUE_DIVIDE					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 STORE_FAST 4 ( x )					      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
10 >> 56 LOAD_FAST 3 ( sum )				      								    								  
58 LOAD_CONST 3 ( 10 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
11 64 LOAD_FAST 1 ( count )				      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 1 ( count )				      								    								  
							      								    								  
12 >> 72 LOAD_FAST 1 ( count )				      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
13 80 LOAD_FAST 2 ( curr )				      								    								  
82 RETURN_VALUE						      								    								  
							      								    								  
14 >> 84 LOAD_FAST 2 ( curr )				      								    								  
86 LOAD_CONST 5 ( 9 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 2 ( curr )				      								    								  
92 JUMP_ABSOLUTE 10					      								    								  
94 POP_BLOCK						      								    								  
							      								    								  
15 >> 96 LOAD_CONST 6 ( - 1 )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIRROR_CHARACTERS_STRING				      MIRROR_CHARACTERS_STRING					    MIRROR_CHARACTERS_STRING					  MIRROR_CHARACTERS_STRING
--							      --							    --								  --
Disassembly of <code object compute at 0x7fbac0e8d540, file " def compute ( st , n ) :					    def compute ( st , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 'zyxwvutsrqponmlkjihgfedcba' )	      	  reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba"	    	reverseAlphabet = "zyxwvvponmlkjihgfedcba"		  
2 STORE_FAST 2 ( reverseAlphabet )			      	  l = len ( st )					    	l = len ( st )						  
							      	  answer = ""						    	answer = ""						  
3 4 LOAD_GLOBAL 0 ( len )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 LOAD_FAST 0 ( st )					      	      answer = answer + st [ i ] ;			    	    answer = answer + st [ i ]				  
8 CALL_FUNCTION 1					      	  for i in range ( n , l ) :				    	for i in range ( n , l ) :				  
10 STORE_FAST 3 ( l )					      	      answer = ( answer + reverseAlphabet [ ord ( st [ i ]  	    answer = answer + reverseAlphabet [ ord ( st [ i ] )  
							      	  return answer ;					    	return answer						  
4 12 LOAD_CONST 2 ( '' )				      								    								  
14 STORE_FAST 4 ( answer )				      								    								  
							      								    								  
5 16 SETUP_LOOP 30 ( to 48 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 3 ( 0 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 16 ( to 46 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 4 ( answer )				      								    								  
34 LOAD_FAST 0 ( st )					      								    								  
36 LOAD_FAST 5 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 4 ( answer )				      								    								  
44 JUMP_ABSOLUTE 28					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
7 >> 48 SETUP_LOOP 46 ( to 96 )				      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_FAST 3 ( l )					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 32 ( to 94 )				      								    								  
62 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 64 LOAD_FAST 4 ( answer )				      								    								  
66 LOAD_FAST 2 ( reverseAlphabet )			      								    								  
68 LOAD_GLOBAL 2 ( ord )				      								    								  
70 LOAD_FAST 0 ( st )					      								    								  
72 LOAD_FAST 5 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_GLOBAL 2 ( ord )				      								    								  
80 LOAD_CONST 4 ( 'a' )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 STORE_FAST 4 ( answer )				      								    								  
92 JUMP_ABSOLUTE 60					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
9 >> 96 LOAD_FAST 4 ( answer )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POWER_SET						      POWER_SET							    POWER_SET							  POWER_SET
--							      --							    --								  --
Disassembly of <code object printPowerSet at 0x7fbac0e8de40,  def printPowerSet ( set , set_size ) :			    def printPowerSet ( set , set_size ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  pow_set_size = ( int ) ( math.pow ( 2 , set_size ) ) ;    	pow_set_size = int ( math.pow ( 2 , set_size ) )	  
2 LOAD_GLOBAL 1 ( math )				      	  counter = 0 ;						    	counter = 0						  
4 LOAD_METHOD 2 ( pow )					      	  j = 0 ;						    	j = 0							  
6 LOAD_CONST 1 ( 2 )					      	  for counter in range ( 0 , pow_set_size ) :		    	for counter in range ( 0 , pow_set_size ) :		  
8 LOAD_FAST 1 ( set_size )				      	      for j in range ( 0 , set_size ) :			    	    for j in range ( 0 , set_size ) :			  
10 CALL_METHOD 2					      		  if ( ( counter & ( 1 << j ) ) > 0 ) :		    		if ( counter & 1 ) << j > 0 :			  
12 CALL_FUNCTION 1					      		      print ( set [ j ] , end = "" ) ;		    		    print ( set [ j ] , end = "" )		  
14 STORE_FAST 2 ( pow_set_size )			      	      print ( "" ) ;					    	print ( "" )						  
							      								    								  
3 16 LOAD_CONST 2 ( 0 )					      								    								  
18 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
4 20 LOAD_CONST 2 ( 0 )					      								    								  
22 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 24 SETUP_LOOP 78 ( to 104 )				      								    								  
26 LOAD_GLOBAL 3 ( range )				      								    								  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 LOAD_FAST 2 ( pow_set_size )				      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 64 ( to 102 )				      								    								  
38 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
6 40 SETUP_LOOP 50 ( to 92 )				      								    								  
42 LOAD_GLOBAL 3 ( range )				      								    								  
44 LOAD_CONST 2 ( 0 )					      								    								  
46 LOAD_FAST 1 ( set_size )				      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 36 ( to 90 )				      								    								  
54 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 56 LOAD_FAST 3 ( counter )				      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 BINARY_LSHIFT					      								    								  
64 BINARY_AND						      								    								  
66 LOAD_CONST 2 ( 0 )					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
8 72 LOAD_GLOBAL 4 ( print )				      								    								  
74 LOAD_FAST 0 ( set )					      								    								  
76 LOAD_FAST 4 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_CONST 4 ( '' )					      								    								  
82 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
88 JUMP_ABSOLUTE 52					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
9 >> 92 LOAD_GLOBAL 4 ( print )				      								    								  
94 LOAD_CONST 4 ( '' )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 POP_TOP						      								    								  
100 JUMP_ABSOLUTE 36					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG
--							      --							    --								  --
Disassembly of <code object generate at 0x7fbac0e8bc90, file  def generate ( st , s ) :					    def generate ( st , s ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  if len ( s ) == 0 :					    	if len ( s ) == 0 :					  
2 LOAD_FAST 1 ( s )					      	      return						    	    return None						  
4 CALL_FUNCTION 1					      	  if s not in st :					    	if s not in st :					  
6 LOAD_CONST 1 ( 0 )					      	      st.add ( s )					    	    st.add ( s )					  
8 COMPARE_OP 2 ( == )					      	      for i in range ( len ( s ) ) :			    	    for i in range ( len ( s ) ) :			  
10 POP_JUMP_IF_FALSE 16					      		  t = list ( s ).copy ( )			    		t = list ( s ).copy ( )				  
							      		  t.remove ( s [ i ] )				    		t.remove ( s [ i ] )				  
3 12 LOAD_CONST 0 ( None )				      		  t = ''.join ( t )				    		t = ''.join ( t )				  
14 RETURN_VALUE						      		  generate ( st , t )				    		generate ( st , t )				  
							      	  return						    	return None						  
4 >> 16 LOAD_FAST 1 ( s )				      								    								  
18 LOAD_FAST 0 ( st )					      								    								  
20 COMPARE_OP 7 ( not in )				      								    								  
22 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( st )					      								    								  
26 LOAD_METHOD 1 ( add )				      								    								  
28 LOAD_FAST 1 ( s )					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
							      								    								  
6 34 SETUP_LOOP 66 ( to 102 )				      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_GLOBAL 0 ( len )				      								    								  
40 LOAD_FAST 1 ( s )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 50 ( to 100 )				      								    								  
50 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 52 LOAD_GLOBAL 3 ( list )				      								    								  
54 LOAD_FAST 1 ( s )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_METHOD 4 ( copy )				      								    								  
60 CALL_METHOD 0					      								    								  
62 STORE_FAST 3 ( t )					      								    								  
							      								    								  
8 64 LOAD_FAST 3 ( t )					      								    								  
66 LOAD_METHOD 5 ( remove )				      								    								  
68 LOAD_FAST 1 ( s )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_METHOD 1					      								    								  
76 POP_TOP						      								    								  
							      								    								  
9 78 LOAD_CONST 2 ( '' )				      								    								  
80 LOAD_METHOD 6 ( join )				      								    								  
82 LOAD_FAST 3 ( t )					      								    								  
84 CALL_METHOD 1					      								    								  
86 STORE_FAST 3 ( t )					      								    								  
							      								    								  
10 88 LOAD_GLOBAL 7 ( generate )			      								    								  
90 LOAD_FAST 0 ( st )					      								    								  
92 LOAD_FAST 3 ( t )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 48					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	      DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lcs at 0x7fbac0e8d540, file "<dis def lcs ( X , Y , m , n ) :				    def lcs ( X , Y , m , n ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if m == 0 or n == 0 :					    	if m == 0 or n == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  elif X [ m - 1 ] == Y [ n - 1 ] :			    	if X [ m - 1 ] == Y [ n - 1 ] :				  
6 POP_JUMP_IF_TRUE 16					      	      return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	    	    return 1 + lcs ( X , Y , m - 1 , n - 1 )		  
8 LOAD_FAST 3 ( n )					      	  else :						    	else :							  
10 LOAD_CONST 1 ( 0 )					      	      return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  	    return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( X )				      								    								  
22 LOAD_FAST 2 ( m )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( Y )					      								    								  
32 LOAD_FAST 3 ( n )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
5 44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_GLOBAL 0 ( lcs )				      								    								  
48 LOAD_FAST 0 ( X )					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 2 ( m )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 4					      								    								  
66 BINARY_ADD						      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
7 >> 70 LOAD_GLOBAL 1 ( max )				      								    								  
72 LOAD_GLOBAL 0 ( lcs )				      								    								  
74 LOAD_FAST 0 ( X )					      								    								  
76 LOAD_FAST 1 ( Y )					      								    								  
78 LOAD_FAST 2 ( m )					      								    								  
80 LOAD_FAST 3 ( n )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 4					      								    								  
88 LOAD_GLOBAL 0 ( lcs )				      								    								  
90 LOAD_FAST 0 ( X )					      								    								  
92 LOAD_FAST 1 ( Y )					      								    								  
94 LOAD_FAST 2 ( m )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 LOAD_FAST 3 ( n )					      								    								  
102 CALL_FUNCTION 4					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 RETURN_VALUE					      								    								  
108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_XOR_VALUE_MATRIX				      MAXIMUM_XOR_VALUE_MATRIX					    MAXIMUM_XOR_VALUE_MATRIX					  MAXIMUM_XOR_VALUE_MATRIX
--							      --							    --								  --
Disassembly of <code object maxXOR at 0x7fbac0e8d540, file "< def maxXOR ( mat , N ) :					    def maxXOR ( mat , N ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  max_xor = 0						    	max_xor = 0						  
2 STORE_FAST 2 ( max_xor )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
							      	      r_xor = 0						    	    r_xor = 0						  
3 4 SETUP_LOOP 98 ( to 104 )				      	      c_xor = 0						    	    c_xor = 0						  
6 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
8 LOAD_FAST 1 ( N )					      		  r_xor = r_xor ^ mat [ i ] [ j ]		    		r_xor = r_xor ^ mat [ i ] [ j ]			  
10 CALL_FUNCTION 1					      		  c_xor = c_xor ^ mat [ j ] [ i ]		    		c_xor = c_xor ^ mat [ j ] [ i ]			  
12 GET_ITER						      	      if ( max_xor < max ( r_xor , c_xor ) ) :		    	    if max_xor < max ( r_xor , c_xor ) :		  
>> 14 FOR_ITER 86 ( to 102 )				      		  max_xor = max ( r_xor , c_xor )		    		max_xor = max ( r_xor , c_xor )			  
16 STORE_FAST 3 ( i )					      	  return max_xor					    	return max_xor						  
							      								    								  
4 18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_FAST 4 ( r_xor )				      								    								  
							      								    								  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 5 ( c_xor )				      								    								  
							      								    								  
6 26 SETUP_LOOP 48 ( to 76 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 1 ( N )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 36 ( to 74 )				      								    								  
38 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 40 LOAD_FAST 4 ( r_xor )				      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_XOR						      								    								  
54 STORE_FAST 4 ( r_xor )				      								    								  
							      								    								  
8 56 LOAD_FAST 5 ( c_xor )				      								    								  
58 LOAD_FAST 0 ( mat )					      								    								  
60 LOAD_FAST 6 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_XOR						      								    								  
70 STORE_FAST 5 ( c_xor )				      								    								  
72 JUMP_ABSOLUTE 36					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_FAST 2 ( max_xor )				      								    								  
78 LOAD_GLOBAL 1 ( max )				      								    								  
80 LOAD_FAST 4 ( r_xor )				      								    								  
82 LOAD_FAST 5 ( c_xor )				      								    								  
84 CALL_FUNCTION 2					      								    								  
86 COMPARE_OP 0 ( < )					      								    								  
88 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
10 90 LOAD_GLOBAL 1 ( max )				      								    								  
92 LOAD_FAST 4 ( r_xor )				      								    								  
94 LOAD_FAST 5 ( c_xor )				      								    								  
96 CALL_FUNCTION 2					      								    								  
98 STORE_FAST 2 ( max_xor )				      								    								  
100 JUMP_ABSOLUTE 14					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
11 >> 104 LOAD_FAST 2 ( max_xor )			      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FIBONACCI_NUMBERS					      SUM_FIBONACCI_NUMBERS					    SUM_FIBONACCI_NUMBERS					  SUM_FIBONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7fbac0e8d540, f def calculateSum ( n ) :					    def calculateSum ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/SUM_FI
4 COMPARE_OP 1 ( <= )					      	  fibo = [ 0 ] * ( n + 1 )				    	fibo = [ 0 ] * n + 1					  BONACCI_NUMBERS.py", line 56, in <module>	if f
6 POP_JUMP_IF_FALSE 12					      	  fibo [ 1 ] = 1					    	fibo [ 1 ] = 1						  _filled(*parameters_set) == f_gold(*parameters_set
							      	  sm = fibo [ 0 ] + fibo [ 1 ]				    	sm = fibo [ 0 ] + fibo [ 1 ]				  ):   File "/home/ubuntu/TransCoder/models/eval/mt_
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python_sa.t
10 RETURN_VALUE						      	      fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]	    	    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]	  est/SUM_FIBONACCI_NUMBERS.py", line 32, in f_fille
							      	      sm = sm + fibo [ i ]				    	    sm = sm + fibo [ i ]				  d	fibo = [ 0 ] * n + 1 TypeError: can only con
4 >> 12 LOAD_CONST 1 ( 0 )				      	  return sm						    	return sm						  catenate list (not "int") to list
14 BUILD_LIST 1						      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 BINARY_MULTIPLY					      								    								  
24 STORE_FAST 1 ( fibo )				      								    								  
							      								    								  
5 26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_FAST 1 ( fibo )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 STORE_SUBSCR						      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( fibo )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 1 ( fibo )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 2 ( sm )					      								    								  
							      								    								  
7 50 SETUP_LOOP 62 ( to 114 )				      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 44 ( to 112 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 70 LOAD_FAST 1 ( fibo )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( fibo )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 1 ( fibo )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 STORE_SUBSCR						      								    								  
							      								    								  
9 98 LOAD_FAST 2 ( sm )					      								    								  
100 LOAD_FAST 1 ( fibo )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 2 ( sm )					      								    								  
110 JUMP_ABSOLUTE 66					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
10 >> 114 LOAD_FAST 2 ( sm )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_1S_SORTED_BINARY_ARRAY				      COUNT_1S_SORTED_BINARY_ARRAY				    COUNT_1S_SORTED_BINARY_ARRAY				  COUNT_1S_SORTED_BINARY_ARRAY
--							      --							    --								  --
Disassembly of <code object countOnes at 0x7fbac0e8de40, file def countOnes ( arr , low , high ) :			    def countOnes ( arr , low , high ) :			  script_not_found : None
2 0 LOAD_FAST 2 ( high )				      	  if high >= low :					    	if high >= low :					  
2 LOAD_FAST 1 ( low )					      	      mid = low + ( high - low ) / 2			    	    mid = low + ( high - low ) / 2			  
4 COMPARE_OP 5 ( >= )					      	      if ( ( mid == high or arr [ mid + 1 ] == 0 ) and ( ar 	    if mid == high or arr [ mid + 1 ] == 0 :		  
6 POP_JUMP_IF_FALSE 112					      		  return mid + 1				    		return mid + 1					  
							      	      if arr [ mid ] == 1 :				    	    if arr [ mid ] == 1 :				  
3 8 LOAD_FAST 1 ( low )					      		  return countOnes ( arr , ( mid + 1 ) , high )	    		return countOnes ( arr , mid + 1 , high )	  
10 LOAD_FAST 2 ( high )					      	      return countOnes ( arr , low , mid - 1 )		    	    return countOnes ( arr , low , mid - 1 )		  
12 LOAD_FAST 1 ( low )					      	  return 0						    	return 0						  
14 BINARY_SUBTRACT					      								    								  
16 LOAD_CONST 1 ( 2 )					      								    								  
18 BINARY_TRUE_DIVIDE					      								    								  
20 BINARY_ADD						      								    								  
22 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( mid )				      								    								  
26 LOAD_FAST 2 ( high )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_TRUE 48					      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 3 ( mid )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 3 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 68					      								    								  
>> 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 3 ( mid )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 60 LOAD_FAST 3 ( mid )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( mid )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
7 80 LOAD_GLOBAL 0 ( countOnes )			      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( mid )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 2 ( high )					      								    								  
92 CALL_FUNCTION 3					      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
8 >> 96 LOAD_GLOBAL 0 ( countOnes )			      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 1 ( low )					      								    								  
102 LOAD_FAST 3 ( mid )					      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 3					      								    								  
110 RETURN_VALUE					      								    								  
							      								    								  
9 >> 112 LOAD_CONST 3 ( 0 )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	      SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	    SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	  SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8d540, file "< def search ( pat , txt ) :				    def search ( pat , txt ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  M = len ( pat )					    	M = len ( pat )						  
2 LOAD_FAST 0 ( pat )					      	  N = len ( txt )					    	N = len ( txt )						  
4 CALL_FUNCTION 1					      	  for i in range ( N - M + 1 ) :			    	for i in range ( N - M + 1 ) :				  
6 STORE_FAST 2 ( M )					      	      j = 0						    	    j = 0						  
							      	      while ( j < M ) :					    	    while j < M :					  
3 8 LOAD_GLOBAL 0 ( len )				      		  if ( txt [ i + j ] != pat [ j ] ) :		    		if txt [ i + j ] != pat [ j ] :			  
10 LOAD_FAST 1 ( txt )					      		      break					    		    break					  
12 CALL_FUNCTION 1					      		  j += 1					    		j += 1						  
14 STORE_FAST 3 ( N )					      	      if ( j == M ) :					    	if j == M :						  
							      		  print ( "Pattern found at index " , i )	    	    print ( "Pattern found at index " , i )		  
4 16 SETUP_LOOP 90 ( to 108 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 3 ( N )					      								    								  
22 LOAD_FAST 2 ( M )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 70 ( to 106 )				      								    								  
36 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 38 LOAD_CONST 2 ( 0 )					      								    								  
40 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 42 SETUP_LOOP 42 ( to 86 )				      								    								  
>> 44 LOAD_FAST 5 ( j )					      								    								  
46 LOAD_FAST 2 ( M )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
7 52 LOAD_FAST 1 ( txt )				      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_ADD						      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( pat )					      								    								  
64 LOAD_FAST 5 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 3 ( != )					      								    								  
70 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
8 72 BREAK_LOOP						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 5 ( j )				      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( j )					      								    								  
82 JUMP_ABSOLUTE 44					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 5 ( j )				      								    								  
88 LOAD_FAST 2 ( M )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
11 94 LOAD_GLOBAL 2 ( print )				      								    								  
96 LOAD_CONST 3 ( 'Pattern found at index ' )		      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 CALL_FUNCTION 2					      								    								  
102 POP_TOP						      								    								  
104 JUMP_ABSOLUTE 34					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_REACHING_POINT_2_3_STEPS_TIME		      PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			    PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			  PROBABILITY_REACHING_POINT_2_3_STEPS_TIME
--							      --							    --								  --
Disassembly of <code object find_prob at 0x7fbac0e8d540, file def find_prob ( N , P ) :					    def find_prob ( N , P ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( n + 1 )				    	dp = [ 0 ] * n + 1					  
2 BUILD_LIST 1						      	  dp [ 0 ] = 1						    	dp [ 0 ] = 1						  
4 LOAD_GLOBAL 0 ( n )					      	  dp [ 1 ] = 0						    	dp [ 1 ] = 0						  
6 LOAD_CONST 2 ( 1 )					      	  dp [ 2 ] = P						    	dp [ 2 ] = P						  
8 BINARY_ADD						      	  dp [ 3 ] = 1 - P					    	dp [ 3 ] = 1 - P					  
10 BINARY_MULTIPLY					      	  for i in range ( 4 , N + 1 ) :			    	for i in range ( 4 , N + 1 ) :				  
12 STORE_FAST 2 ( dp )					      	      dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i  	    dp [ i ] = P * dp [ dp [ i - 2 ] ] + 1 - P [ i - 3 ]  
							      	  return dp [ N ]					    	return dp [ N ]						  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 LOAD_FAST 2 ( dp )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 2 ( dp )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( P )					      								    								  
32 LOAD_FAST 2 ( dp )					      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 STORE_SUBSCR						      								    								  
							      								    								  
6 38 LOAD_CONST 2 ( 1 )					      								    								  
40 LOAD_FAST 1 ( P )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 2 ( dp )					      								    								  
46 LOAD_CONST 4 ( 3 )					      								    								  
48 STORE_SUBSCR						      								    								  
							      								    								  
7 50 SETUP_LOOP 62 ( to 114 )				      								    								  
52 LOAD_GLOBAL 1 ( range )				      								    								  
54 LOAD_CONST 5 ( 4 )					      								    								  
56 LOAD_FAST 0 ( N )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 44 ( to 112 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 70 LOAD_FAST 1 ( P )					      								    								  
72 LOAD_FAST 2 ( dp )					      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_MULTIPLY					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 LOAD_FAST 1 ( P )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 2 ( dp )					      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 LOAD_CONST 4 ( 3 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 BINARY_ADD						      								    								  
104 LOAD_FAST 2 ( dp )					      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 STORE_SUBSCR					      								    								  
110 JUMP_ABSOLUTE 66					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
9 >> 114 LOAD_FAST 2 ( dp )				      								    								  
116 LOAD_FAST 0 ( N )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_<unk> DLE_ROW_COLUMN_MATRIX				      SUM_<unk> DLE_ROW_COLUMN_MATRIX				    SUM_<unk> DLE_ROW_COLUMN_MATRIX				  SUM_<unk> DLE_ROW_COLUMN_MATRIX
--							      --							    --								  --
Disassembly of <code object middlesum at 0x7fbac0e8de40, file def middlesum ( mat , n ) :				    def middlesum ( mat , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  row_sum = 0						    	row_sum = 0						  
2 STORE_FAST 2 ( row_sum )				      	  col_sum = 0						    	col_sum = 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      row_sum += mat [ n // 2 ] [ i ]			    	    row_sum += mat [ n // 2 ] [ i ]			  
6 STORE_FAST 3 ( col_sum )				      	  print ( "Sum of middle row = " , row_sum )		    	print ( "Sum of middle row = " , row_sum )		  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 8 SETUP_LOOP 36 ( to 46 )				      	      col_sum += mat [ i ] [ n // 2 ]			    	    col_sum += mat [ i ] [ n // 2 ]			  
10 LOAD_GLOBAL 0 ( range )				      	  print ( "Sum of middle column = " , col_sum )		    	print ( "Sum of middle column = " , col_sum )		  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 24 ( to 44 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( row_sum )				      								    								  
24 LOAD_FAST 0 ( mat )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 BINARY_FLOOR_DIVIDE					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( row_sum )				      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_GLOBAL 1 ( print )				      								    								  
48 LOAD_CONST 3 ( 'Sum of middle row = ' )		      								    								  
50 LOAD_FAST 2 ( row_sum )				      								    								  
52 CALL_FUNCTION 2					      								    								  
54 POP_TOP						      								    								  
							      								    								  
7 56 SETUP_LOOP 36 ( to 94 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 24 ( to 92 )				      								    								  
68 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 70 LOAD_FAST 3 ( col_sum )				      								    								  
72 LOAD_FAST 0 ( mat )					      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 LOAD_CONST 2 ( 2 )					      								    								  
82 BINARY_FLOOR_DIVIDE					      								    								  
84 BINARY_SUBSCR					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 3 ( col_sum )				      								    								  
90 JUMP_ABSOLUTE 66					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
9 >> 94 LOAD_GLOBAL 1 ( print )				      								    								  
96 LOAD_CONST 4 ( 'Sum of middle column = ' )		      								    								  
98 LOAD_FAST 3 ( col_sum )				      								    								  
100 CALL_FUNCTION 2					      								    								  
102 POP_TOP						      								    								  
104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS
--							      --							    --								  --
Disassembly of <code object difference at 0x7fbac0e8bc90, fil def difference ( arr , n ) :				    def difference ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  d1 = 0						    	d1 = 0							  
2 STORE_FAST 2 ( d1 )					      	  d2 = 0						    	d2 = 0							  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
6 STORE_FAST 3 ( d2 )					      		  if ( i == j ) :				    		if i == j :					  
							      		      d1 += arr [ i ] [ j ]			    		    d1 += arr [ i ] [ j ]			  
4 8 SETUP_LOOP 94 ( to 104 )				      		  if ( i == n - j - 1 ) :			    		if i == n - j - 1 :				  
10 LOAD_GLOBAL 0 ( range )				      		      d2 += arr [ i ] [ j ]			    		    d2 += arr [ i ] [ j ]			  
12 LOAD_CONST 1 ( 0 )					      	  return abs ( d1 - d2 ) ;				    	return abs ( d1 - d2 )					  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 80 ( to 102 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 74 ( to 100 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 60 ( to 98 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( d1 )					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( d1 )					      								    								  
							      								    								  
8 >> 64 LOAD_FAST 4 ( i )				      								    								  
66 LOAD_FAST 1 ( n )					      								    								  
68 LOAD_FAST 5 ( j )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
9 80 LOAD_FAST 3 ( d2 )					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 3 ( d2 )					      								    								  
96 JUMP_ABSOLUTE 36					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 20					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
10 >> 104 LOAD_GLOBAL 1 ( abs )				      								    								  
106 LOAD_FAST 2 ( d1 )					      								    								  
108 LOAD_FAST 3 ( d2 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS	  REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS
--							      --							    --								  --
Disassembly of <code object <<unk>> edoBinary at 0x7fbac0e8d5 def <<unk>> edoBinary ( n ) :				    def <unk> edoBinary ( n ) :					  script_not_found : None
2 0 SETUP_LOOP 98 ( to 100 )				      	  while ( n > 0 ) :					    	while n > 0 :						  
>> 2 LOAD_FAST 0 ( n )					      	      temp = n ;					    	    temp = n						  
4 LOAD_CONST 1 ( 0 )					      	      m = 0 ;						    	    m = 0						  
6 COMPARE_OP 4 ( > )					      	      p = 1 ;						    	    p = 1						  
8 POP_JUMP_IF_FALSE 98					      	      while ( temp ) :					    	    while temp :					  
							      		  rem = temp % 10 ;				    		rem = temp % 10					  
3 10 LOAD_FAST 0 ( n )					      		  temp = int ( temp / 10 ) ;			    		temp = int ( temp / 10 )			  
12 STORE_FAST 1 ( temp )				      		  if ( rem != 0 ) :				    		if rem != 0 :					  
							      		      m += p ;					    		    m += p					  
4 14 LOAD_CONST 1 ( 0 )					      		  p *= 10 ;					    		p *= 10						  
16 STORE_FAST 2 ( m )					      	      print ( m , end = " " ) ;				    	    print ( m , end = ' ' )				  
							      	      n = n - m ;					    	    n = n - m						  
5 18 LOAD_CONST 2 ( 1 )					      								    								  
20 STORE_FAST 3 ( p )					      								    								  
							      								    								  
6 22 SETUP_LOOP 52 ( to 76 )				      								    								  
>> 24 LOAD_FAST 1 ( temp )				      								    								  
26 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
7 28 LOAD_FAST 1 ( temp )				      								    								  
30 LOAD_CONST 3 ( 10 )					      								    								  
32 BINARY_MODULO					      								    								  
34 STORE_FAST 4 ( rem )					      								    								  
							      								    								  
8 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 1 ( temp )					      								    								  
40 LOAD_CONST 3 ( 10 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 1 ( temp )				      								    								  
							      								    								  
9 48 LOAD_FAST 4 ( rem )				      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
10 56 LOAD_FAST 2 ( m )					      								    								  
58 LOAD_FAST 3 ( p )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( m )					      								    								  
							      								    								  
11 >> 64 LOAD_FAST 3 ( p )				      								    								  
66 LOAD_CONST 3 ( 10 )					      								    								  
68 INPLACE_MULTIPLY					      								    								  
70 STORE_FAST 3 ( p )					      								    								  
72 JUMP_ABSOLUTE 24					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
12 >> 76 LOAD_GLOBAL 1 ( print )			      								    								  
78 LOAD_FAST 2 ( m )					      								    								  
80 LOAD_CONST 4 ( ' ' )					      								    								  
82 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
							      								    								  
13 88 LOAD_FAST 0 ( n )					      								    								  
90 LOAD_FAST 2 ( m )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 STORE_FAST 0 ( n )					      								    								  
96 JUMP_ABSOLUTE 2					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT	      STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT	    STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT		  STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT
--							      --							    --								  --
Disassembly of <code object findString at 0x7fbac0e8bc90, fil def findString ( n , k ) :				    def findString ( n , k ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( '' )					      	  res = ""						    	res = ""						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( res )					      	  for i in range ( k ) :				    	for i in range ( k ) :					  _sa.test/STRING_K_DISTINCT_CHARACTERS_NO_CHARACTER
							      	      res = res + chr ( ord ( 'a' ) + i )		    	    res = res + chr ( ord ( "a" ) + i )			  S_ADJACENT.py", line 40     return res     ^ Synta
3 4 SETUP_LOOP 36 ( to 42 )				      	  count = 0						    	count = 0						  xError: 'return' outside function
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( n - k ) :				    	for i in range ( n - k ) :				  
8 LOAD_FAST 1 ( k )					      	      res = res + chr ( ord ( 'a' ) + count )		    	    res = res + chr ( ord ( "a" ) + count )		  
10 CALL_FUNCTION 1					      	      count += 1					    	    count += 1						  
12 GET_ITER						      	      if ( count == k ) :				    	    if count == k :					  
>> 14 FOR_ITER 24 ( to 40 )				      		  count = 0 ;					    		count = 0					  
16 STORE_FAST 3 ( i )					      	  return res						    return res							  
							      								    								  
4 18 LOAD_FAST 2 ( res )				      								    								  
20 LOAD_GLOBAL 1 ( chr )				      								    								  
22 LOAD_GLOBAL 2 ( ord )				      								    								  
24 LOAD_CONST 2 ( 'a' )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 1					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 2 ( res )					      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 LOAD_CONST 3 ( 0 )				      								    								  
44 STORE_FAST 4 ( count )				      								    								  
							      								    								  
6 46 SETUP_LOOP 60 ( to 108 )				      								    								  
48 LOAD_GLOBAL 0 ( range )				      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_FAST 1 ( k )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 44 ( to 106 )				      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( res )				      								    								  
66 LOAD_GLOBAL 1 ( chr )				      								    								  
68 LOAD_GLOBAL 2 ( ord )				      								    								  
70 LOAD_CONST 2 ( 'a' )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 LOAD_FAST 4 ( count )				      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 1					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 2 ( res )					      								    								  
							      								    								  
8 84 LOAD_FAST 4 ( count )				      								    								  
86 LOAD_CONST 4 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 4 ( count )				      								    								  
							      								    								  
9 92 LOAD_FAST 4 ( count )				      								    								  
94 LOAD_FAST 1 ( k )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
10 100 LOAD_CONST 3 ( 0 )				      								    								  
102 STORE_FAST 4 ( count )				      								    								  
104 JUMP_ABSOLUTE 60					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 2 ( res )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_NEXT_NUMBER			      BINARY_REPRESENTATION_OF_NEXT_NUMBER			    BINARY_REPRESENTATION_OF_NEXT_NUMBER			  BINARY_REPRESENTATION_OF_NEXT_NUMBER
--							      --							    --								  --
Disassembly of <code object nextGreater at 0x7fbac0e8bc90, fi def nextGreater ( num1 ) :				    def nextGreater ( num1 ) :					  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( num1 ) ;					    	l = len ( num1 )					  
2 LOAD_FAST 0 ( num1 )					      	  num = list ( num1 ) ;					    	num = list ( num1 )					  
4 CALL_FUNCTION 1					      	  i = l - 1 ;						    	i = l - 1						  
6 STORE_FAST 1 ( l )					      	  while ( i >= 0 ) :					    	while i >= 0 :						  
							      	      if ( num [ i ] == '0' ) :				    	    if num [ i ] == '0' :				  
3 8 LOAD_GLOBAL 1 ( list )				      		  num [ i ] = '1' ;				    		num [ i ] = '1'					  
10 LOAD_FAST 0 ( num1 )					      		  break ;					    		break						  
12 CALL_FUNCTION 1					      	      else :						    	    else :						  
14 STORE_FAST 2 ( num )					      		  num [ i ] = '0' ;				    		num [ i ] = '0'					  
							      	      i -= 1 ;						    	    i -= 1						  
4 16 LOAD_FAST 1 ( l )					      	  num1 = ''.join ( num ) ;				    	num1 = ''.join ( num )					  
18 LOAD_CONST 1 ( 1 )					      	  if ( i < 0 ) :					    	if i < 0 :						  
20 BINARY_SUBTRACT					      	      num1 = '1' + num1 ;				    	    num1 = '1' + num1					  
22 STORE_FAST 3 ( i )					      	  return num1 ;						    	return num1						  
							      								    								  
5 24 SETUP_LOOP 52 ( to 78 )				      								    								  
>> 26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 COMPARE_OP 5 ( >= )					      								    								  
32 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( num )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( '0' )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 46 LOAD_CONST 4 ( '1' )				      								    								  
48 LOAD_FAST 2 ( num )					      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
8 54 BREAK_LOOP						      								    								  
56 JUMP_FORWARD 8 ( to 66 )				      								    								  
							      								    								  
10 >> 58 LOAD_CONST 3 ( '0' )				      								    								  
60 LOAD_FAST 2 ( num )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 STORE_SUBSCR						      								    								  
							      								    								  
11 >> 66 LOAD_FAST 3 ( i )				      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 3 ( i )					      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
12 >> 78 LOAD_CONST 5 ( '' )				      								    								  
80 LOAD_METHOD 2 ( join )				      								    								  
82 LOAD_FAST 2 ( num )					      								    								  
84 CALL_METHOD 1					      								    								  
86 STORE_FAST 0 ( num1 )				      								    								  
							      								    								  
13 88 LOAD_FAST 3 ( i )					      								    								  
90 LOAD_CONST 2 ( 0 )					      								    								  
92 COMPARE_OP 0 ( < )					      								    								  
94 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
14 96 LOAD_CONST 4 ( '1' )				      								    								  
98 LOAD_FAST 0 ( num1 )					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_FAST 0 ( num1 )				      								    								  
							      								    								  
15 >> 104 LOAD_FAST 0 ( num1 )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1
--							      --							    --								  --
Disassembly of <code object reorder at 0x7fbac0e8bc90, file " def reorder ( arr , index , n ) :				    def reorder ( arr , index , n ) :				  script_not_found : None
2 0 SETUP_LOOP 108 ( to 110 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      while ( index [ i ] != i ) :			    	    while index [ i ] != i :				  
4 LOAD_CONST 1 ( 0 )					      		  oldTargetI = index [ index [ i ] ]		    		oldTargetI = index [ index ]			  
6 LOAD_FAST 2 ( n )					      		  oldTargetE = arr [ index [ i ] ]		    		oldTargetE = arr [ index [ i ] ]		  
8 CALL_FUNCTION 2					      		  arr [ index [ i ] ] = arr [ i ]		    		arr [ index [ i ] ] = arr [ i ]			  
10 GET_ITER						      		  index [ index [ i ] ] = index [ i ]		    		index [ i ] = index [ i ]			  
>> 12 FOR_ITER 94 ( to 108 )				      		  index [ i ] = oldTargetI			    		index [ i ] = oldTargetI			  
14 STORE_FAST 3 ( i )					      		  arr [ i ] = oldTargetE			    		arr [ i ] = oldTargetE				  
							      								    								  
3 16 SETUP_LOOP 88 ( to 106 )				      								    								  
>> 18 LOAD_FAST 1 ( index )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 COMPARE_OP 3 ( != )					      								    								  
28 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( index )				      								    								  
32 LOAD_FAST 1 ( index )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_SUBSCR					      								    								  
40 STORE_FAST 4 ( oldTargetI )				      								    								  
							      								    								  
5 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 1 ( index )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_SUBSCR					      								    								  
52 STORE_FAST 5 ( oldTargetE )				      								    								  
							      								    								  
6 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 1 ( index )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
							      								    								  
7 70 LOAD_FAST 1 ( index )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 1 ( index )				      								    								  
78 LOAD_FAST 1 ( index )				      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 STORE_SUBSCR						      								    								  
							      								    								  
8 86 LOAD_FAST 4 ( oldTargetI )				      								    								  
88 LOAD_FAST 1 ( index )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
9 94 LOAD_FAST 5 ( oldTargetE )				      								    								  
96 LOAD_FAST 0 ( arr )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 STORE_SUBSCR					      								    								  
102 JUMP_ABSOLUTE 18					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 12					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8bc90, fil def countPairs ( str1 ) :					    def countPairs ( str1 ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  n = len ( str1 )					    	n = len ( str1 )					  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_GLOBAL 0 ( len )				      	      for j in range ( 1 , MAX_CHAR + 1 ) :		    	    for j in range ( 1 , MAX_CHAR + 1 ) :		  
6 LOAD_FAST 0 ( str1 )					      		  if ( ( i + j ) < n ) :			    		if i + j < n :					  
8 CALL_FUNCTION 1					      		      if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( s 		    if abs ( ord ( str1 [ i + j ] ) - ord ( str1  
10 STORE_FAST 2 ( n )					      			  result += 1 ;				    			result += 1				  
							      	  return result						    	return result						  
4 12 SETUP_LOOP 98 ( to 112 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 84 ( to 110 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 LOAD_GLOBAL 2 ( MAX_CHAR )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 60 ( to 106 )				      								    								  
46 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( n )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 60 LOAD_GLOBAL 3 ( abs )				      								    								  
62 LOAD_GLOBAL 4 ( ord )				      								    								  
64 LOAD_FAST 0 ( str1 )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 LOAD_FAST 4 ( j )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 LOAD_GLOBAL 4 ( ord )				      								    								  
78 LOAD_FAST 0 ( str1 )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 96 LOAD_FAST 1 ( result )				      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 1 ( result )				      								    								  
104 JUMP_ABSOLUTE 44					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 JUMP_ABSOLUTE 24					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
9 >> 112 LOAD_FAST 1 ( result )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1
--							      --							    --								  --
Disassembly of <code object fib at 0x7fbac0e8d540, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = 0							    	a = 0							  
2 STORE_FAST 1 ( a )					      	  b = 1							    	b = 1							  
							      	  if ( n >= 0 ) :					    	if n >= 0 :						  
3 4 LOAD_CONST 2 ( 1 )					      	      print ( a , end = ' ' )				    	    print ( a , end = " " )				  
6 STORE_FAST 2 ( b )					      	  if ( n >= 1 ) :					    	if n >= 1 :						  
							      	      print ( b , end = ' ' )				    	    print ( b , end = " " )				  
4 8 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
10 LOAD_CONST 1 ( 0 )					      	      print ( a + b , end = ' ' )			    	    print ( a + b , end = " " )				  
12 COMPARE_OP 5 ( >= )					      	      b = a + b						    	    b = a + b						  
14 POP_JUMP_IF_FALSE 28					      	      a = b - a						    	    a = b - a						  
							      								    								  
5 16 LOAD_GLOBAL 0 ( print )				      								    								  
18 LOAD_FAST 1 ( a )					      								    								  
20 LOAD_CONST 3 ( ' ' )					      								    								  
22 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
24 CALL_FUNCTION_KW 2					      								    								  
26 POP_TOP						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( n )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 5 ( >= )					      								    								  
34 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 2 ( b )					      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 >> 48 SETUP_LOOP 54 ( to 104 )			      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 5 ( 2 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 36 ( to 102 )				      								    								  
66 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 68 LOAD_GLOBAL 0 ( print )				      								    								  
70 LOAD_FAST 1 ( a )					      								    								  
72 LOAD_FAST 2 ( b )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_CONST 3 ( ' ' )					      								    								  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 2					      								    								  
82 POP_TOP						      								    								  
							      								    								  
10 84 LOAD_FAST 1 ( a )					      								    								  
86 LOAD_FAST 2 ( b )					      								    								  
88 BINARY_ADD						      								    								  
90 STORE_FAST 2 ( b )					      								    								  
							      								    								  
11 92 LOAD_FAST 2 ( b )					      								    								  
94 LOAD_FAST 1 ( a )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 1 ( a )					      								    								  
100 JUMP_ABSOLUTE 64					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3
--							      --							    --								  --
Disassembly of <code object printRepeating at 0x7fbac0e8de40, def printRepeating ( arr , size ) :			    def printRepeating ( arr , size ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( " The repeating elements are" , end = " " )	    	print ( " The test_set_yating elements are" , end = " " ) 
2 LOAD_CONST 1 ( ' The repeating elements are' )	      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
4 LOAD_CONST 2 ( ' ' )					      	      if ( arr [ abs ( arr [ i ] ) ] > 0 ) :		    	    if arr [ abs ( arr [ i ] ) ] > 0 :			  
6 LOAD_CONST 3 ( ( 'end' , ) )				      		  arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( 		arr [ abs ( arr [ i ] ) ] = - 1 * arr [ abs ( arr 
8 CALL_FUNCTION_KW 2					      	      else :						    	    else :						  
10 POP_TOP						      		  print ( abs ( arr [ i ] ) , end = " " )	    		print ( abs ( arr [ i ] ) , end = " " )		  
							      								    								  
3 12 SETUP_LOOP 92 ( to 106 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 LOAD_FAST 1 ( size )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 78 ( to 104 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_GLOBAL 2 ( abs )				      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 4 ( 0 )					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
5 48 LOAD_CONST 5 ( - 1 )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_GLOBAL 2 ( abs )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 BINARY_SUBSCR					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_GLOBAL 2 ( abs )				      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 STORE_SUBSCR						      								    								  
80 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
7 >> 82 LOAD_GLOBAL 0 ( print )				      								    								  
84 LOAD_GLOBAL 2 ( abs )				      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_CONST 2 ( ' ' )					      								    								  
96 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
98 CALL_FUNCTION_KW 2					      								    								  
100 POP_TOP						      								    								  
102 JUMP_ABSOLUTE 24					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY	      K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY	    K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY		  K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object printKDistinct at 0x7fbac0e8d540, def printKDistinct ( arr , n , k ) :			    def printKDistinct ( arr , n , k ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  dist_count = 0					    	dist_count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( dist_count )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.test/K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN
							      	      j = 0						    	    j = 0						  _AN_ARRAY.py", line 44     return - 1	    ^ Syntax
3 4 SETUP_LOOP 100 ( to 106 )				      	      while j < n :					    	    while j < n :					  Error: 'return' outside function
6 LOAD_GLOBAL 0 ( range )				      		  if ( i != j and arr [ j ] == arr [ i ] ) :	    		if i != j and arr [ j ] == arr [ i ] :		  
8 LOAD_FAST 1 ( n )					      		      break					    		    break					  
10 CALL_FUNCTION 1					      		  j += 1					    		j += 1						  
12 GET_ITER						      	      if ( j == n ) :					    	if j == n :						  
>> 14 FOR_ITER 88 ( to 104 )				      		  dist_count += 1				    	    dist_count += 1					  
16 STORE_FAST 4 ( i )					      	      if ( dist_count == k ) :				    	if dist_count == k :					  
							      		  return arr [ i ]				    	    return arr [ i ]					  
4 18 LOAD_CONST 1 ( 0 )					      	  return - 1						    return - 1							  
20 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 22 SETUP_LOOP 46 ( to 70 )				      								    								  
>> 24 LOAD_FAST 5 ( j )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 56 BREAK_LOOP						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 5 ( j )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 5 ( j )					      								    								  
66 JUMP_ABSOLUTE 24					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 5 ( j )				      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
10 78 LOAD_FAST 3 ( dist_count )			      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 3 ( dist_count )				      								    								  
							      								    								  
11 >> 86 LOAD_FAST 3 ( dist_count )			      								    								  
88 LOAD_FAST 2 ( k )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
12 94 LOAD_FAST 0 ( arr )				      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 RETURN_VALUE					      								    								  
102 JUMP_ABSOLUTE 14					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
13 >> 106 LOAD_CONST 3 ( - 1 )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		      COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		    COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		  COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7fbac0e89d20, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 1 ( i )					      	  ans = 0						    	ans = 0							  
							      	  while ( ( 1 << i ) <= n ) :				    	while 1 <= i <= n :					  
3 4 LOAD_CONST 1 ( 0 )					      	      k = 0						    	    k = 0						  
6 STORE_FAST 2 ( ans )					      	      change = 1 << i					    	    change = 1 << i					  
							      	      for j in range ( 0 , n + 1 ) :			    	    for j in range ( 0 , n + 1 ) :			  
4 8 SETUP_LOOP 100 ( to 110 )				      		  ans += k					    		ans += k					  
>> 10 LOAD_CONST 2 ( 1 )				      		  if change == 1 :				    		if change == 1 :				  
12 LOAD_FAST 1 ( i )					      		      k = not k					    		    k = not k					  
14 BINARY_LSHIFT					      		      change = 1 << i				    		    change = 1 << i				  
16 LOAD_FAST 0 ( n )					      		  else :					    		else :						  
18 COMPARE_OP 1 ( <= )					      		      change -= 1				    		    change -= 1					  
20 POP_JUMP_IF_FALSE 108				      	      i += 1						    	    i += 1						  
							      	  return ans						    	return ans						  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 3 ( k )					      								    								  
							      								    								  
6 26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_LSHIFT					      								    								  
32 STORE_FAST 4 ( change )				      								    								  
							      								    								  
7 34 SETUP_LOOP 62 ( to 98 )				      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 CALL_FUNCTION 2					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 44 ( to 96 )				      								    								  
52 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 54 LOAD_FAST 2 ( ans )				      								    								  
56 LOAD_FAST 3 ( k )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
9 62 LOAD_FAST 4 ( change )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
10 70 LOAD_FAST 3 ( k )					      								    								  
72 UNARY_NOT						      								    								  
74 STORE_FAST 3 ( k )					      								    								  
							      								    								  
11 76 LOAD_CONST 2 ( 1 )				      								    								  
78 LOAD_FAST 1 ( i )					      								    								  
80 BINARY_LSHIFT					      								    								  
82 STORE_FAST 4 ( change )				      								    								  
84 JUMP_ABSOLUTE 50					      								    								  
							      								    								  
13 >> 86 LOAD_FAST 4 ( change )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 INPLACE_SUBTRACT					      								    								  
92 STORE_FAST 4 ( change )				      								    								  
94 JUMP_ABSOLUTE 50					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
14 >> 98 LOAD_FAST 1 ( i )				      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 1 ( i )					      								    								  
106 JUMP_ABSOLUTE 10					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
15 >> 110 LOAD_FAST 2 ( ans )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGOREAN_TRIPLETS				      GENERATE_PYTHAGOREAN_TRIPLETS				    GENERATE_PYTHAGOREAN_TRIPLETS				  GENERATE_PYTHAGOREAN_TRIPLETS
--							      --							    --								  --
Disassembly of <code object pythagoreanTriplets at 0x7fbac0e8 def pythagoreanTriplets ( limits ) :			    def pythagoreanTriplets ( limits ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 2 ) )				      	  c , m = 0 , 2						    	c , m = 0 , 2						  
2 UNPACK_SEQUENCE 2					      	  while c < limits :					    	while c < limits :					  
4 STORE_FAST 1 ( c )					      	      for n in range ( 1 , m ) :			    	    for n in range ( 1 , m ) :				  
6 STORE_FAST 2 ( m )					      		  a = m * m - n * n				    		a = m * m - n * n				  
							      		  b = 2 * m * n					    		b = 2 * m * n					  
3 8 SETUP_LOOP 106 ( to 116 )				      		  c = m * m + n * n				    		c = m * m + n * n				  
>> 10 LOAD_FAST 1 ( c )					      		  if c > limits :				    		if c > limits :					  
12 LOAD_FAST 0 ( limits )				      		      break					    		    break					  
14 COMPARE_OP 0 ( < )					      		  print ( a , b , c )				    		print ( a , b , c )				  
16 POP_JUMP_IF_FALSE 114				      	      m = m + 1						    	m = m + 1						  
							      								    								  
4 18 SETUP_LOOP 84 ( to 104 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 2 ( m )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 70 ( to 102 )				      								    								  
32 STORE_FAST 3 ( n )					      								    								  
							      								    								  
5 34 LOAD_FAST 2 ( m )					      								    								  
36 LOAD_FAST 2 ( m )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 LOAD_FAST 3 ( n )					      								    								  
42 LOAD_FAST 3 ( n )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 4 ( a )					      								    								  
							      								    								  
6 50 LOAD_CONST 3 ( 2 )					      								    								  
52 LOAD_FAST 2 ( m )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_FAST 3 ( n )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 STORE_FAST 5 ( b )					      								    								  
							      								    								  
7 62 LOAD_FAST 2 ( m )					      								    								  
64 LOAD_FAST 2 ( m )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_FAST 3 ( n )					      								    								  
70 LOAD_FAST 3 ( n )					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_FAST 1 ( c )					      								    								  
							      								    								  
8 78 LOAD_FAST 1 ( c )					      								    								  
80 LOAD_FAST 0 ( limits )				      								    								  
82 COMPARE_OP 4 ( > )					      								    								  
84 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
9 86 BREAK_LOOP						      								    								  
							      								    								  
10 >> 88 LOAD_GLOBAL 1 ( print )			      								    								  
90 LOAD_FAST 4 ( a )					      								    								  
92 LOAD_FAST 5 ( b )					      								    								  
94 LOAD_FAST 1 ( c )					      								    								  
96 CALL_FUNCTION 3					      								    								  
98 POP_TOP						      								    								  
100 JUMP_ABSOLUTE 30					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
11 >> 104 LOAD_FAST 2 ( m )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 2 ( m )					      								    								  
112 JUMP_ABSOLUTE 10					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_23_45_67_89_UPTO_N_TERMS			      SUM_SERIES_23_45_67_89_UPTO_N_TERMS			    SUM_SERIES_23_45_67_89_UPTO_N_TERMS				  SUM_SERIES_23_45_67_89_UPTO_N_TERMS
--							      --							    --								  --
Disassembly of <code object seriesSum at 0x7fbac0e8d540, file def seriesSum ( n ) :					    def seriesSum ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 1 )					      	  i = 1 ;						    	i = 1							  
2 STORE_FAST 1 ( i )					      	  res = 0.0 ;						    	res = 0.						  
							      	  sign = True ;						    	sign = True						  
3 4 LOAD_CONST 2 ( 0.0 )				      	  while ( n > 0 ) :					    	while n > 0 :						  
6 STORE_FAST 2 ( res )					      	      n = n - 1 ;					    	    n = n - 1						  
							      	      if ( sign ) :					    	    if sign :						  
4 8 LOAD_CONST 3 ( True )				      		  sign = False ;				    		sign = False					  
10 STORE_FAST 3 ( sign )				      		  res = res + ( i + 1 ) / ( i + 2 ) ;		    		res = res + i / ( i + 2 )			  
							      		  i = i + 2 ;					    		i = i + 2					  
5 12 SETUP_LOOP 90 ( to 104 )				      	      else :						    	    else :						  
>> 14 LOAD_FAST 0 ( n )					      		  sign = True ;					    		sign = True					  
16 LOAD_CONST 4 ( 0 )					      		  res = res - ( i + 1 ) / ( i + 2 ) ;		    		res = res + i / ( i + 2 )			  
18 COMPARE_OP 4 ( > )					      		  i = i + 2 ;					    		i = i + 2					  
20 POP_JUMP_IF_FALSE 102				      	  return res ;						    	return res						  
							      								    								  
6 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 30 LOAD_FAST 3 ( sign )				      								    								  
32 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 34 LOAD_CONST 5 ( False )				      								    								  
36 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
9 38 LOAD_FAST 2 ( res )				      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_CONST 6 ( 2 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( res )					      								    								  
							      								    								  
10 58 LOAD_FAST 1 ( i )					      								    								  
60 LOAD_CONST 6 ( 2 )					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 1 ( i )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
12 >> 68 LOAD_CONST 3 ( True )				      								    								  
70 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
13 72 LOAD_FAST 2 ( res )				      								    								  
74 LOAD_FAST 1 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 1 ( i )					      								    								  
82 LOAD_CONST 6 ( 2 )					      								    								  
84 BINARY_ADD						      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 STORE_FAST 2 ( res )					      								    								  
							      								    								  
14 92 LOAD_FAST 1 ( i )					      								    								  
94 LOAD_CONST 6 ( 2 )					      								    								  
96 BINARY_ADD						      								    								  
98 STORE_FAST 1 ( i )					      								    								  
100 JUMP_ABSOLUTE 14					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
15 >> 104 LOAD_FAST 2 ( res )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_WITH_CONSECUTIVE_1S			      COUNT_STRINGS_WITH_CONSECUTIVE_1S				    COUNT_STRINGS_WITH_CONSECUTIVE_1S				  COUNT_STRINGS_WITH_CONSECUTIVE_1S
--							      --							    --								  --
Disassembly of <code object countStrings at 0x7fbac0e8de40, f def countStrings ( n ) :					    def countStrings ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * n						    	a = [ 0 ] * n						  
2 BUILD_LIST 1						      	  b = [ 0 ] * n						    	b = [ 0 ] * n						  
4 LOAD_FAST 0 ( n )					      	  a [ 0 ] = b [ 0 ] = 1					    	a [ 0 ] = b [ 0 ] = 1					  
6 BINARY_MULTIPLY					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 STORE_FAST 1 ( a )					      	      a [ i ] = a [ i - 1 ] + b [ i - 1 ]		    	    a [ i ] = a [ i - 1 ] + b [ i - 1 ]			  
							      	      b [ i ] = a [ i - 1 ]				    	    b [ i ] = a [ i - 1 ]				  
3 10 LOAD_CONST 1 ( 0 )					      	  return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]		    	return ( 1 << n ) - ( a [ n - 1 ] - b [ n - 1 ] )	  
12 BUILD_LIST 1						      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 STORE_FAST 2 ( b )					      								    								  
							      								    								  
4 20 LOAD_CONST 2 ( 1 )					      								    								  
22 DUP_TOP						      								    								  
24 LOAD_FAST 1 ( a )					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 STORE_SUBSCR						      								    								  
30 LOAD_FAST 2 ( b )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
5 36 SETUP_LOOP 62 ( to 100 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 0 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 48 ( to 98 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 52 LOAD_FAST 1 ( a )					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( b )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_FAST 1 ( a )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 STORE_SUBSCR						      								    								  
							      								    								  
7 80 LOAD_FAST 1 ( a )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 2 ( b )					      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 48					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
8 >> 100 LOAD_CONST 2 ( 1 )				      								    								  
102 LOAD_FAST 0 ( n )					      								    								  
104 BINARY_LSHIFT					      								    								  
106 LOAD_FAST 1 ( a )					      								    								  
108 LOAD_FAST 0 ( n )					      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 BINARY_SUBSCR					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 LOAD_FAST 2 ( b )					      								    								  
120 LOAD_FAST 0 ( n )					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_SUBTRACT					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8bc90, fil def countPairs ( arr , n ) :				    def countPairs ( arr , n ) :				  failure : #Results: 5, 10
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 2 ( result )				      	  Hash = set ( )					    	Hash = set ( )						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_GLOBAL 0 ( set )				      	      Hash.add ( arr [ i ] )				    	    Hash.add ( arr [ i ] )				  
6 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
8 STORE_FAST 3 ( Hash )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( n + 1 , n ) :			  
							      		  product = arr [ i ] * arr [ j ]		    		product = arr [ i ] * arr [ j ]			  
4 10 SETUP_LOOP 30 ( to 42 )				      		  if product in ( Hash ) :			    		if product in Hash :				  
12 LOAD_GLOBAL 1 ( range )				      		      result += 1				    		    result += 1					  
14 LOAD_FAST 1 ( n )					      	  return result						    	return result						  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 18 ( to 40 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 3 ( Hash )				      								    								  
26 LOAD_METHOD 2 ( add )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
38 JUMP_ABSOLUTE 20					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
6 >> 42 SETUP_LOOP 72 ( to 116 )			      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 60 ( to 114 )				      								    								  
54 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 56 SETUP_LOOP 54 ( to 112 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_FAST 1 ( n )					      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 36 ( to 110 )				      								    								  
74 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 4 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 5 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 STORE_FAST 6 ( product )				      								    								  
							      								    								  
9 92 LOAD_FAST 6 ( product )				      								    								  
94 LOAD_FAST 3 ( Hash )					      								    								  
96 COMPARE_OP 6 ( in )					      								    								  
98 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
10 100 LOAD_FAST 2 ( result )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( result )				      								    								  
108 JUMP_ABSOLUTE 72					      								    								  
>> 110 POP_BLOCK					      								    								  
>> 112 JUMP_ABSOLUTE 52					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
11 >> 116 LOAD_FAST 2 ( result )			      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K		      FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K		    FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K		  FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K
--							      --							    --								  --
Disassembly of <code object printFirstNegativeInteger at 0x7f def printFirstNegativeInteger ( arr , n , k ) :		    def printFirstNegativeInteger ( arr , n , k = 0 ) :		  script_not_found : None
2 0 SETUP_LOOP 108 ( to 110 )				      	  for i in range ( 0 , ( n - k + 1 ) ) :		    	for i in range ( 0 , n - k + 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      flag = False					    	    flag = False					  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , k ) :			    	    for j in range ( 0 , k ) :				  
6 LOAD_FAST 1 ( n )					      		  if ( arr [ i + j ] < 0 ) :			    		if arr [ i + j ] < 0 :				  
8 LOAD_FAST 2 ( k )					      		      print ( arr [ i + j ] , end = " " )	    		    print ( arr [ i + j ] , end = " " )		  
10 BINARY_SUBTRACT					      		      flag = True				    		    flag = True					  
12 LOAD_CONST 2 ( 1 )					      		      break					    		    break					  
14 BINARY_ADD						      	      if ( not ( flag ) ) :				    	    if not flag :					  
16 CALL_FUNCTION 2					      		  print ( "0" , end = " " )			    		print ( "0" , end = " " )			  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 86 ( to 108 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 24 LOAD_CONST 3 ( False )				      								    								  
26 STORE_FAST 4 ( flag )				      								    								  
							      								    								  
4 28 SETUP_LOOP 60 ( to 90 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 LOAD_FAST 2 ( k )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 46 ( to 88 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_FAST 5 ( j )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 1 ( print )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 LOAD_FAST 5 ( j )					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 4 ( ' ' )					      								    								  
74 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
76 CALL_FUNCTION_KW 2					      								    								  
78 POP_TOP						      								    								  
							      								    								  
7 80 LOAD_CONST 6 ( True )				      								    								  
82 STORE_FAST 4 ( flag )				      								    								  
							      								    								  
8 84 BREAK_LOOP						      								    								  
86 JUMP_ABSOLUTE 40					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
9 >> 90 LOAD_FAST 4 ( flag )				      								    								  
92 POP_JUMP_IF_TRUE 20					      								    								  
							      								    								  
10 94 LOAD_GLOBAL 1 ( print )				      								    								  
96 LOAD_CONST 7 ( '0' )					      								    								  
98 LOAD_CONST 4 ( ' ' )					      								    								  
100 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
102 CALL_FUNCTION_KW 2					      								    								  
104 POP_TOP						      								    								  
106 JUMP_ABSOLUTE 20					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_B_ARRAY_B_K					      FIND_PAIRS_B_ARRAY_B_K					    FIND_PAIRS_B_ARRAY_B_K					  FIND_PAIRS_B_ARRAY_B_K
--							      --							    --								  --
Disassembly of <code object printPairs at 0x7fbac0e8de40, fil def printPairs ( arr , n , k ) :				    def printPairs ( arr , n , k ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( True )				      	  isPairFound = True					    	isPairFound = True					  
2 STORE_FAST 3 ( isPairFound )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
3 4 SETUP_LOOP 100 ( to 106 )				      		  if ( i != j and arr [ i ] % arr [ j ] == k ) :    		if i != j and arr [ i ] % arr [ j ] == k :	  
6 LOAD_GLOBAL 0 ( range )				      		      print ( "(" , arr [ i ] , ", " , arr [ j ] ,  		    print ( "(" , arr [ i ] , ", " , arr [ j ] ,  
8 LOAD_CONST 2 ( 0 )					      		      isPairFound = True			    		    isPairFound = True				  
10 LOAD_FAST 1 ( n )					      	  return isPairFound					    	return isPairFound					  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 86 ( to 104 )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 80 ( to 102 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 66 ( to 100 )				      								    								  
34 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( i )					      								    								  
38 LOAD_FAST 5 ( j )					      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 32					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_MODULO					      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 1 ( print )				      								    								  
66 LOAD_CONST 3 ( '(' )					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 4 ( ', ' )				      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 5 ( ')' )					      								    								  
84 LOAD_CONST 6 ( '' )					      								    								  
86 LOAD_CONST 7 ( ' ' )					      								    								  
88 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			      								    								  
90 CALL_FUNCTION_KW 7					      								    								  
92 POP_TOP						      								    								  
							      								    								  
7 94 LOAD_CONST 1 ( True )				      								    								  
96 STORE_FAST 3 ( isPairFound )				      								    								  
98 JUMP_ABSOLUTE 32					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 JUMP_ABSOLUTE 16					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
8 >> 106 LOAD_FAST 3 ( isPairFound )			      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_NEXT_STRING				      LEXICOGRAPHICALLY_NEXT_STRING				    LEXICOGRAPHICALLY_NEXT_STRING				  LEXICOGRAPHICALLY_NEXT_STRING
--							      --							    --								  --
Disassembly of <code object nextWord at 0x7fbac0e8d540, file  def nextWord ( s ) :					    def nextWord ( s ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( s )					      	  if ( s == " " ) :					    	if s == ' ' :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( ' ' )					      	      return "a"					    	    return 'a'						  _sa.test/LEXICOGRAPHICALLY_NEXT_STRING.py", line 4
4 COMPARE_OP 2 ( == )					      	  i = len ( s ) - 1					    	i = len ( s ) - 1					  0	return s     ^ SyntaxError: 'return' outside
6 POP_JUMP_IF_FALSE 12					      	  while ( s [ i ] == 'z' and i >= 0 ) :			    	while s [ i ] == 'z' and i >= 0 :			   function
							      	      i -= 1						    	    i -= 1						  
3 8 LOAD_CONST 2 ( 'a' )				      	  if ( i == - 1 ) :					    	if i == - 1 :						  
10 RETURN_VALUE						      	      s = s + 'a'					    	    s = s + 'a'						  
							      	  else :						    	else :							  
4 >> 12 LOAD_GLOBAL 0 ( len )				      	      s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) 	    s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) 
14 LOAD_FAST 0 ( s )					      	  return s						    return s							  
16 CALL_FUNCTION 1					      								    								  
18 LOAD_CONST 3 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 32 ( to 58 )				      								    								  
>> 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 4 ( 'z' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 56					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 LOAD_CONST 5 ( 0 )					      								    								  
42 COMPARE_OP 5 ( >= )					      								    								  
44 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 STORE_FAST 1 ( i )					      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 LOAD_FAST 1 ( i )				      								    								  
60 LOAD_CONST 6 ( - 1 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( s )					      								    								  
68 LOAD_CONST 2 ( 'a' )					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 0 ( s )					      								    								  
74 JUMP_FORWARD 34 ( to 110 )				      								    								  
							      								    								  
10 >> 76 LOAD_FAST 0 ( s )				      								    								  
78 LOAD_METHOD 1 ( replace )				      								    								  
80 LOAD_FAST 0 ( s )					      								    								  
82 LOAD_FAST 1 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_GLOBAL 2 ( chr )				      								    								  
88 LOAD_GLOBAL 3 ( ord )				      								    								  
90 LOAD_FAST 0 ( s )					      								    								  
92 LOAD_FAST 1 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 LOAD_CONST 3 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 CALL_METHOD 3					      								    								  
108 STORE_FAST 0 ( s )					      								    								  
							      								    								  
11 >> 110 LOAD_FAST 0 ( s )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		      SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		    SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM			  SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM
--							      --							    --								  --
Disassembly of <code object computeLPSArray at 0x7fbac0e8d540 def computeLPSArray ( pat , M , lps ) :			    def computeLPSArray ( pat , M , lps ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  len = 0						    	len = 0							  
2 STORE_FAST 3 ( len )					      	  lps [ 0 ]						    	lps [ 0 ]						  
							      	  i = 1							    	i = 1							  
3 4 LOAD_FAST 2 ( lps )					      	  while i < M :						    	while i < M :						  
6 LOAD_CONST 1 ( 0 )					      	      if pat [ i ] == pat [ len ] :			    	    if pat [ i ] == pat [ len ] :			  
8 BINARY_SUBSCR						      		  len += 1					    		len += 1					  
10 POP_TOP						      		  lps [ i ] = len				    		lps [ i ] = len					  
							      		  i += 1					    		i += 1						  
4 12 LOAD_CONST 2 ( 1 )					      	      else :						    	    else :						  
14 STORE_FAST 4 ( i )					      		  if len != 0 :					    		if len != 0 :					  
							      		      len = lps [ len - 1 ]			    		    len = lps [ len - 1 ]			  
5 16 SETUP_LOOP 92 ( to 110 )				      		  else :					    		else :						  
>> 18 LOAD_FAST 4 ( i )					      		      lps [ i ] = 0				    		    lps [ i ] = 0				  
20 LOAD_FAST 1 ( M )					      		      i += 1					    		    i += 1					  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( pat )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( pat )					      								    								  
34 LOAD_FAST 3 ( len )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
7 42 LOAD_FAST 3 ( len )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( len )					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( len )				      								    								  
52 LOAD_FAST 2 ( lps )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
9 58 LOAD_FAST 4 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( i )					      								    								  
66 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
11 >> 68 LOAD_FAST 3 ( len )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
12 76 LOAD_FAST 2 ( lps )				      								    								  
78 LOAD_FAST 3 ( len )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 BINARY_SUBSCR					      								    								  
86 STORE_FAST 3 ( len )					      								    								  
88 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
14 >> 90 LOAD_CONST 1 ( 0 )				      								    								  
92 LOAD_FAST 2 ( lps )					      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 STORE_SUBSCR						      								    								  
							      								    								  
15 98 LOAD_FAST 4 ( i )					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 4 ( i )					      								    								  
106 JUMP_ABSOLUTE 18					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1		      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8d540, fil def countPairs ( arr , n ) :				    def countPairs ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  mp = dict ( )						    	mp = dict ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.test/COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1.
4 STORE_FAST 2 ( mp )					      	      if arr [ i ] in mp.keys ( ) :			    	    if arr [ i ] in mp.keys ( ) :			  py", line 41	   ans += count * ( count - 1 ) ) //
							      		  mp [ arr [ i ] ] += 1				    		mp [ arr [ i ] ] += 1				   2				      ^ SyntaxError:
3 6 SETUP_LOOP 66 ( to 74 )				      	      else :						    	    else :						   invalid syntax
8 LOAD_GLOBAL 1 ( range )				      		  mp [ arr [ i ] ] = 1				    		mp [ arr [ i ] ] = 1				  
10 LOAD_FAST 1 ( n )					      	  ans = 0						    	ans = 0							  
12 CALL_FUNCTION 1					      	  for it in mp :					    	for it in mp :						  
14 GET_ITER						      	      count = mp [ it ]					    	    count = mp [ it ]					  
>> 16 FOR_ITER 54 ( to 72 )				      	      ans += ( count * ( count - 1 ) ) // 2		    	    ans += count * ( count - 1 ) ) // 2			  
18 STORE_FAST 3 ( i )					      	  return ans						    	return ans						  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( mp )					      								    								  
28 LOAD_METHOD 2 ( keys )				      								    								  
30 CALL_METHOD 0					      								    								  
32 COMPARE_OP 6 ( in )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( mp )					      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 58 LOAD_CONST 1 ( 1 )				      								    								  
60 LOAD_FAST 2 ( mp )					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 16					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_CONST 2 ( 0 )				      								    								  
76 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
9 78 SETUP_LOOP 40 ( to 120 )				      								    								  
80 LOAD_FAST 2 ( mp )					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 32 ( to 118 )				      								    								  
86 STORE_FAST 5 ( it )					      								    								  
							      								    								  
10 88 LOAD_FAST 2 ( mp )				      								    								  
90 LOAD_FAST 5 ( it )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 STORE_FAST 6 ( count )				      								    								  
							      								    								  
11 96 LOAD_FAST 4 ( ans )				      								    								  
98 LOAD_FAST 6 ( count )				      								    								  
100 LOAD_FAST 6 ( count )				      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_MULTIPLY					      								    								  
108 LOAD_CONST 3 ( 2 )					      								    								  
110 BINARY_FLOOR_DIVIDE					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( ans )				      								    								  
116 JUMP_ABSOLUTE 84					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
12 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object sortedAfterSwap at 0x7fbac0e8bc90 def sortedAfterSwap ( A , B , n ) :			    def sortedAfterSwap ( A , B , n ) :				  script_not_found : None
2 0 SETUP_LOOP 80 ( to 82 )				      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if B [ i ] :					    	    if B [ i ] :					  
4 LOAD_CONST 1 ( 0 )					      		  if A [ i ] != i + 1 :				    		if A [ i ] != i + 1 :				  
6 LOAD_FAST 2 ( n )					      		      A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ] 		    A [ i ] , A [ i ] = A [ i + 1 ] , A [ i ]	  
8 LOAD_CONST 2 ( 1 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
10 BINARY_SUBTRACT					      	      if A [ i ] != i + 1 :				    	    if A [ i ] != i + 1 :				  
12 CALL_FUNCTION 2					      		  return False					    		return False					  
14 GET_ITER						      	  return True						    return True							  
>> 16 FOR_ITER 62 ( to 80 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 1 ( B )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( A )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( A )					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 ROT_TWO						      								    								  
62 LOAD_FAST 0 ( A )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 STORE_SUBSCR						      								    								  
68 LOAD_FAST 0 ( A )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 16					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
6 >> 82 SETUP_LOOP 36 ( to 120 )			      								    								  
84 LOAD_GLOBAL 0 ( range )				      								    								  
86 LOAD_FAST 2 ( n )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 24 ( to 118 )				      								    								  
94 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 96 LOAD_FAST 0 ( A )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 COMPARE_OP 3 ( != )					      								    								  
110 POP_JUMP_IF_FALSE 92				      								    								  
							      								    								  
8 112 LOAD_CONST 3 ( False )				      								    								  
114 RETURN_VALUE					      								    								  
116 JUMP_ABSOLUTE 92					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
9 >> 120 LOAD_CONST 4 ( True )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER		      CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER		    CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER			  CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER
--							      --							    --								  --
Disassembly of <code object checkIfAllTo<<unk>> at 0x7fbac0e8 def checkIfAllTo<<unk>> ( s , c ) :			    def checkIfAllTo156 ( s , c ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( False )				      	  oneSeen = False					    	oneSeen = False						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( oneSeen )				      	  i = 0							    	i = 0							  _sa.test/CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETH
							      	  n = len ( s )						    	n = len ( s )						  ER.py", line 44     return True     ^ SyntaxError:
3 4 LOAD_CONST 2 ( 0 )					      	  while ( i < n ) :					    	while i < n :						   'return' outside function
6 STORE_FAST 3 ( i )					      	      if ( s [ i ] == c ) :				    	    if s [ i ] == c :					  
							      		  if ( oneSeen == True ) :			    		if oneSeen == True :				  
4 8 LOAD_GLOBAL 0 ( len )				      		      return False				    		    return False				  
10 LOAD_FAST 0 ( s )					      		  while ( i < n and s [ i ] == c ) :		    	    while i < n and s [ i ] == c :			  
12 CALL_FUNCTION 1					      		      i = i + 1					    		i = i + 1					  
14 STORE_FAST 4 ( n )					      		  oneSeen = True				    	oneSeen = True						  
							      	      else :						    return True							  
5 16 SETUP_LOOP 84 ( to 102 )				      		  i = i + 1					    								  
>> 18 LOAD_FAST 3 ( i )					      	  return True						    								  
20 LOAD_FAST 4 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( c )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
7 38 LOAD_FAST 2 ( oneSeen )				      								    								  
40 LOAD_CONST 3 ( True )				      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 46 LOAD_CONST 1 ( False )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
9 >> 50 SETUP_LOOP 32 ( to 84 )				      								    								  
>> 52 LOAD_FAST 3 ( i )					      								    								  
54 LOAD_FAST 4 ( n )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 82					      								    								  
60 LOAD_FAST 0 ( s )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( c )					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 72 LOAD_FAST 3 ( i )					      								    								  
74 LOAD_CONST 4 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 3 ( i )					      								    								  
80 JUMP_ABSOLUTE 52					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
11 >> 84 LOAD_CONST 3 ( True )				      								    								  
86 STORE_FAST 2 ( oneSeen )				      								    								  
88 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
13 >> 90 LOAD_FAST 3 ( i )				      								    								  
92 LOAD_CONST 4 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 3 ( i )					      								    								  
98 JUMP_ABSOLUTE 18					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
14 >> 102 LOAD_CONST 3 ( True )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE		      FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE			    FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE			  FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac0e8de40, f def binarySearch ( arr , left , right ) :			    def binarySearch ( arr , left , right ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( left )				      	  if ( left <= right ) :				    	if left <= right :					  
2 LOAD_FAST 2 ( right )					      	      mid = ( left + right ) // 2 ;			    	    mid = ( left + right ) // 2				  
4 COMPARE_OP 1 ( <= )					      	      if ( arr [ mid - 1 ] < arr [ mid ] and arr [ mid ] >  	    if arr [ mid - 1 ] < arr [ mid ] and arr [ mid + 1 ]  
6 POP_JUMP_IF_FALSE 116					      		  return mid ;					    		return mid					  
							      	      if ( arr [ mid ] < arr [ mid + 1 ] ) :		    	    if arr [ mid ] < arr [ mid + 1 ] :			  
3 8 LOAD_FAST 1 ( left )				      		  return binarySearch ( arr , mid + 1 , right ) ;   		return binarySearch ( arr , mid + 1 , right )	  
10 LOAD_FAST 2 ( right )				      	      else :						    	    else :						  
12 BINARY_ADD						      		  return binarySearch ( arr , left , mid - 1 ) ;    		return binarySearch ( arr , left , mid - 1 )	  
14 LOAD_CONST 1 ( 2 )					      	  return - 1 ;						    	return - 1						  
16 BINARY_FLOOR_DIVIDE					      								    								  
18 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( mid )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 3 ( mid )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 0 ( < )					      								    								  
38 POP_JUMP_IF_FALSE 64					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( mid )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 3 ( mid )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 4 ( > )					      								    								  
58 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 60 LOAD_FAST 3 ( mid )				      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 3 ( mid )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 3 ( mid )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 BINARY_SUBSCR					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
7 84 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 3 ( mid )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 2 ( right )				      								    								  
96 CALL_FUNCTION 3					      								    								  
98 RETURN_VALUE						      								    								  
							      								    								  
9 >> 100 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 1 ( left )				      								    								  
106 LOAD_FAST 3 ( mid )					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 CALL_FUNCTION 3					      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
10 >> 116 LOAD_CONST 3 ( - 1 )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		      NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		    NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		  NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES
--							      --							    --								  --
Disassembly of <code object countOccurrences at 0x7fbac0e8bc9 def countOccurrences ( s , K ) :				    def countOccurrences ( s , K ) :				  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  c1 = 0						    	c1 = 0							  
4 CALL_FUNCTION 1					      	  c2 = 0						    	c2 = 0							  
6 STORE_FAST 2 ( n )					      	  C = 0							    	C = 0							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_CONST 1 ( 0 )					      	      if s [ i ] == 'a' :				    	    if s [ i ] == 'a' :					  
10 STORE_FAST 3 ( c1 )					      		  c1 += 1					    		c1 += 1						  
							      	      if s [ i ] == 'b' :				    	    if s [ i ] == 'b' :					  
4 12 LOAD_CONST 1 ( 0 )					      		  c2 += 1					    		c2 += 1						  
14 STORE_FAST 4 ( c2 )					      		  C += c1					    		C += c1						  
							      	  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2	    	return C * K + ( K * ( K - 1 ) / 2 * c1 * c2 )		  
5 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 5 ( C )					      								    								  
							      								    								  
6 20 SETUP_LOOP 64 ( to 86 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 52 ( to 84 )				      								    								  
32 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 34 LOAD_FAST 0 ( s )					      								    								  
36 LOAD_FAST 6 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 2 ( 'a' )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
8 46 LOAD_FAST 3 ( c1 )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 3 ( c1 )					      								    								  
							      								    								  
9 >> 54 LOAD_FAST 0 ( s )				      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 4 ( 'b' )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
10 66 LOAD_FAST 4 ( c2 )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 4 ( c2 )					      								    								  
							      								    								  
11 74 LOAD_FAST 5 ( C )					      								    								  
76 LOAD_FAST 3 ( c1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( C )					      								    								  
82 JUMP_ABSOLUTE 30					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
12 >> 86 LOAD_FAST 5 ( C )				      								    								  
88 LOAD_FAST 1 ( K )					      								    								  
90 BINARY_MULTIPLY					      								    								  
92 LOAD_FAST 1 ( K )					      								    								  
94 LOAD_FAST 1 ( K )					      								    								  
96 LOAD_CONST 3 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_CONST 5 ( 2 )					      								    								  
104 BINARY_TRUE_DIVIDE					      								    								  
106 LOAD_FAST 3 ( c1 )					      								    								  
108 BINARY_MULTIPLY					      								    								  
110 LOAD_FAST 4 ( c2 )					      								    								  
112 BINARY_MULTIPLY					      								    								  
114 BINARY_ADD						      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS			      LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS			    LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS			  LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS
--							      --							    --								  --
Disassembly of <code object longestCommonSum at 0x7fbac0e89d2 def longestCommonSum ( arr1 , arr2 , n ) :		    def longestCommonSum ( arr1 , arr2 , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxLen = 0						    	global 42						  
2 STORE_FAST 3 ( maxLen )				      	  for i in range ( 0 , n ) :				    	46 = 0							  
							      	      sum1 = 0						    	for i in range ( 0 , n ) :				  
3 4 SETUP_LOOP 102 ( to 108 )				      	      sum2 = 0						    	    sum1 = 0						  
6 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i , n ) :			    	    sum2 = 0						  
8 LOAD_CONST 1 ( 0 )					      		  sum1 += arr1 [ j ]				    	    for j in range ( i , n ) :				  
10 LOAD_FAST 2 ( n )					      		  sum2 += arr2 [ j ]				    		sum1 += arr1 [ j ]				  
12 CALL_FUNCTION 2					      		  if ( sum1 == sum2 ) :				    		sum2 += arr2 [ j ]				  
14 GET_ITER						      		      len = j - i + 1				    		if sum1 == sum2 :				  
>> 16 FOR_ITER 88 ( to 106 )				      		      if ( len > maxLen ) :			    		    len = j - i + 1				  
18 STORE_FAST 4 ( i )					      			  maxLen = len				    		    if len > seek :				  
							      	  return maxLen						    			else :					  
4 20 LOAD_CONST 1 ( 0 )					      								    			    return len				  
22 STORE_FAST 5 ( sum1 )				      								    	return ( inp )						  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 6 ( sum2 )				      								    								  
							      								    								  
6 28 SETUP_LOOP 74 ( to 104 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 60 ( to 102 )				      								    								  
42 STORE_FAST 7 ( j )					      								    								  
							      								    								  
7 44 LOAD_FAST 5 ( sum1 )				      								    								  
46 LOAD_FAST 0 ( arr1 )					      								    								  
48 LOAD_FAST 7 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 5 ( sum1 )				      								    								  
							      								    								  
8 56 LOAD_FAST 6 ( sum2 )				      								    								  
58 LOAD_FAST 1 ( arr2 )					      								    								  
60 LOAD_FAST 7 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 6 ( sum2 )				      								    								  
							      								    								  
9 68 LOAD_FAST 5 ( sum1 )				      								    								  
70 LOAD_FAST 6 ( sum2 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
10 76 LOAD_FAST 7 ( j )					      								    								  
78 LOAD_FAST 4 ( i )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 8 ( len )					      								    								  
							      								    								  
11 88 LOAD_FAST 8 ( len )				      								    								  
90 LOAD_FAST 3 ( maxLen )				      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
12 96 LOAD_FAST 8 ( len )				      								    								  
98 STORE_FAST 3 ( maxLen )				      								    								  
100 JUMP_ABSOLUTE 40					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 16					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
13 >> 108 LOAD_FAST 3 ( maxLen )			      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
Disassembly of <code object sumAtKthLevel at 0x7fbac0e89d20,  def sumAtKthLevel ( tree , k ) :				    def sumAtKthLevel ( tree , k ) :				  success : None
2 0 LOAD_CONST 1 ( - 1 )				      	  level = - 1						    	level = - 1						  
2 STORE_FAST 2 ( level )				      	  sum = 0						    	sum = 0							  
							      	  n = len ( tree )					    	n = len ( tree )					  
3 4 LOAD_CONST 2 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 3 ( sum )					      	      if ( tree [ i ] == '(' ) :			    	    if tree [ i ] == '(' :				  
							      		  level += 1					    		level += 1					  
4 8 LOAD_GLOBAL 0 ( len )				      	      elif ( tree [ i ] == ')' ) :			    	    elif tree [ i ] == ')' :				  
10 LOAD_FAST 0 ( tree )					      		  level -= 1					    		level -= 1					  
12 CALL_FUNCTION 1					      	      else :						    	    elif level == k :					  
14 STORE_FAST 4 ( n )					      		  if ( level == k ) :				    		sum += ord ( tree [ i ] ) - ord ( '0' )		  
							      		      sum += ( ord ( tree [ i ] ) - ord ( '0' ) )   	return sum						  
5 16 SETUP_LOOP 92 ( to 110 )				      	  return sum						    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 4 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 80 ( to 108 )				      								    								  
28 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( tree )				      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( '(' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 42 LOAD_FAST 2 ( level )				      								    								  
44 LOAD_CONST 4 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 2 ( level )				      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 52 LOAD_FAST 0 ( tree )				      								    								  
54 LOAD_FAST 5 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 5 ( ')' )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 64 LOAD_FAST 2 ( level )				      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 INPLACE_SUBTRACT					      								    								  
70 STORE_FAST 2 ( level )				      								    								  
72 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 74 LOAD_FAST 2 ( level )				      								    								  
76 LOAD_FAST 1 ( k )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
12 82 LOAD_FAST 3 ( sum )				      								    								  
84 LOAD_GLOBAL 2 ( ord )				      								    								  
86 LOAD_FAST 0 ( tree )					      								    								  
88 LOAD_FAST 5 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_GLOBAL 2 ( ord )				      								    								  
96 LOAD_CONST 6 ( '0' )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 3 ( sum )				      								    								  
106 JUMP_ABSOLUTE 26					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
13 >> 110 LOAD_FAST 3 ( sum )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY				      MAXIMUM_TRIPLET_SUM_ARRAY					    MAXIMUM_TRIPLET_SUM_ARRAY					  MAXIMUM_TRIPLET_SUM_ARRAY
--							      --							    --								  --
Disassembly of <code object maxTripletSum at 0x7fbac0e8bc90,  def maxTripletSum ( arr , n ) :				    def maxTripletSum ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1000000 )				      	  sm = - 1000000					    	sm = - 1						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( sm )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  _sa.test/MAXIMUM_TRIPLET_SUM_ARRAY.py", line 34
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			    return sm	  ^ SyntaxError: 'return' outside fu
3 4 SETUP_LOOP 118 ( to 124 )				      		  for k in range ( j + 1 , n ) :		    		for k in range ( j + 1 , n ) :			  nction
6 LOAD_GLOBAL 0 ( range )				      		      if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] 		    if sm < arr [ i ] + arr [ j ] + arr [ k ] :	  
8 LOAD_CONST 2 ( 0 )					      			  sm = arr [ i ] + arr [ j ] + arr [ k ]    			sm = arr [ i ] + arr [ j ] + arr [ k ]	  
10 LOAD_FAST 1 ( n )					      	  return sm						    return sm							  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 104 ( to 122 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 98 ( to 120 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 80 ( to 118 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 SETUP_LOOP 74 ( to 116 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 56 ( to 114 )				      								    								  
58 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 60 LOAD_FAST 2 ( sm )					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( k )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_ADD						      								    								  
84 COMPARE_OP 0 ( < )					      								    								  
86 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 4 ( j )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 5 ( k )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 2 ( sm )					      								    								  
112 JUMP_ABSOLUTE 56					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 36					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 16					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
8 >> 124 LOAD_FAST 2 ( sm )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEGREGATE_EVEN_ODD_NUMBERS_SET_3			      SEGREGATE_EVEN_ODD_NUMBERS_SET_3				    SEGREGATE_EVEN_ODD_NUMBERS_SET_3				  SEGREGATE_EVEN_ODD_NUMBERS_SET_3
--							      --							    --								  --
Disassembly of <code object arrayEvenAndOdd at 0x7fbac0e8bc90 def arrayEvenAndOdd ( arr , n ) :				    def arrayEvenAndOdd ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( - 1 )				      	  i = - 1						    	i = - 1							  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 2 ( i )					      	  j = 0							    	j = 0							  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/SEGREG
							      	  while ( j != n ) :					    	while j != n :						  ATE_EVEN_ODD_NUMBERS_SET_3.py", line 37, in <modul
3 4 LOAD_CONST 2 ( 0 )					      	      if ( arr [ j ] % 2 == 0 ) :			    	    if arr [ j ] % 2 == 0 :				  e>	 for i in arr : NameError: name 'arr' is not
6 STORE_FAST 3 ( j )					      		  i = i + 1					    		i = i + 1					   defined
							      		  arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	    		arr [ i ] , arr [ i ] = arr [ j ] , arr [ i ]	  
4 8 SETUP_LOOP 70 ( to 80 )				      	      j = j + 1						    	    j = j + 1						  
>> 10 LOAD_FAST 3 ( j )					      	  for i in arr :					    for i in arr :						  
12 LOAD_FAST 1 ( n )					      	      print ( str ( i ) + " " , end = '' )		    	print ( str ( i ) + "" , end = "" )			  
14 COMPARE_OP 3 ( != )					      								    								  
16 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
5 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 3 ( j )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 3 ( 2 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_CONST 4 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 ROT_TWO						      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( j )					      								    								  
66 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 68 LOAD_FAST 3 ( j )				      								    								  
70 LOAD_CONST 4 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( j )					      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 SETUP_LOOP 32 ( to 114 )			      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 24 ( to 112 )				      								    								  
88 STORE_FAST 2 ( i )					      								    								  
							      								    								  
10 90 LOAD_GLOBAL 0 ( print )				      								    								  
92 LOAD_GLOBAL 1 ( str )				      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 LOAD_CONST 5 ( ' ' )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_CONST 6 ( '' )					      								    								  
104 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 86					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT_1						      BUBBLE_SORT_1						    BUBBLE_SORT_1						  BUBBLE_SORT_1
--							      --							    --								  --
Disassembly of <code object bubbleSort at 0x7fbac0e8d540, fil def bubbleSort ( arr ) :					    def bubbleSort ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 CALL_FUNCTION 1					      	      swapped = False					    	    swapped = False					  
6 STORE_FAST 1 ( n )					      	      for j in range ( 0 , n - i - 1 ) :		    	    for j in range ( 0 , n - i - 1 ) :			  
							      		  if arr [ j ] > arr [ j + 1 ] :		    		if arr [ j ] > arr [ j + 1 ] :			  
3 8 SETUP_LOOP 116 ( to 126 )				      		      arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 		    arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 
10 LOAD_GLOBAL 1 ( range )				      		      swapped = True				    		    swapped = True				  
12 LOAD_FAST 1 ( n )					      	      if swapped == False :				    	if swapped == False :					  
14 CALL_FUNCTION 1					      		  break						    	    break						  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 104 ( to 124 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_CONST 1 ( False )				      								    								  
24 STORE_FAST 3 ( swapped )				      								    								  
							      								    								  
5 26 SETUP_LOOP 84 ( to 112 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 62 ( to 110 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 4 ( j )					      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( arr )					      								    								  
82 LOAD_FAST 4 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 ROT_TWO						      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 STORE_SUBSCR						      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 4 ( j )					      								    								  
98 LOAD_CONST 3 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_SUBSCR					      								    								  
							      								    								  
8 104 LOAD_CONST 4 ( True )				      								    								  
106 STORE_FAST 3 ( swapped )				      								    								  
108 JUMP_ABSOLUTE 46					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
9 >> 112 LOAD_FAST 3 ( swapped )			      								    								  
114 LOAD_CONST 1 ( False )				      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 18				      								    								  
							      								    								  
10 120 BREAK_LOOP					      								    								  
122 JUMP_ABSOLUTE 18					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
0_1_KNAPSACK_PROBLEM_DP_10				      0_1_KNAPSACK_PROBLEM_DP_10				    0_1_KNAPSACK_PROBLEM_DP_10					  0_1_KNAPSACK_PROBLEM_DP_10
--							      --							    --								  --
Disassembly of <code object knapSack at 0x7fbac0e8d540, file  def knapSack ( W , wt , val , n ) :			    def knapSack ( W , wt , val ) :				  script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if n == 0 or W == 0 :					    	if n == 0 or W == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( wt [ n - 1 ] > W ) :				    	if wt [ n - 1 ] > W :					  
6 POP_JUMP_IF_TRUE 16					      	      return knapSack ( W , wt , val , n - 1 )		    	    return knapSack ( W , wt , val , n - 1 )		  
8 LOAD_FAST 0 ( W )					      	  else :						    	else :							  
10 LOAD_CONST 1 ( 0 )					      	      return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  	    return max ( val [ n - 1 ] , knapSack ( W , wt [ n -  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( wt )				      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( W )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
5 36 LOAD_GLOBAL 0 ( knapSack )				      								    								  
38 LOAD_FAST 0 ( W )					      								    								  
40 LOAD_FAST 1 ( wt )					      								    								  
42 LOAD_FAST 2 ( val )					      								    								  
44 LOAD_FAST 3 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 4					      								    								  
52 RETURN_VALUE						      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( max )				      								    								  
56 LOAD_FAST 2 ( val )					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_GLOBAL 0 ( knapSack )				      								    								  
68 LOAD_FAST 0 ( W )					      								    								  
70 LOAD_FAST 1 ( wt )					      								    								  
72 LOAD_FAST 3 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 1 ( wt )					      								    								  
84 LOAD_FAST 2 ( val )					      								    								  
86 LOAD_FAST 3 ( n )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 CALL_FUNCTION 4					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_GLOBAL 0 ( knapSack )				      								    								  
98 LOAD_FAST 0 ( W )					      								    								  
100 LOAD_FAST 1 ( wt )					      								    								  
102 LOAD_FAST 2 ( val )					      								    								  
104 LOAD_FAST 3 ( n )					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 4					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 RETURN_VALUE					      								    								  
116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1
--							      --							    --								  --
Disassembly of <code object maxDiff at 0x7fbac0e89d20, file " def maxDiff ( arr , n ) :					    def maxDiff ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 2 ( result )				      	  arr.sort ( )						    	arr.sort ( )						  
							      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  
3 4 LOAD_FAST 0 ( arr )					      	      if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :   	    if abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) :	  
6 LOAD_METHOD 0 ( sort )				      		  result += abs ( arr [ i ] )			    		result += abs ( arr [ i ] )			  
8 CALL_METHOD 0						      	      else :						    	    else :						  
10 POP_TOP						      		  pass						    		continue					  
							      	  if ( arr [ n - 2 ] != arr [ n - 1 ] ) :		    	if arr [ n - 2 ] != arr [ n - 1 ] :			  
4 12 SETUP_LOOP 66 ( to 80 )				      	      result += abs ( arr [ n - 1 ] )			    	    result += abs ( arr [ n - 1 ] )			  
14 LOAD_GLOBAL 1 ( range )				      	  return result						    	return result						  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 50 ( to 78 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_GLOBAL 2 ( abs )				      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 LOAD_GLOBAL 2 ( abs )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 BINARY_SUBSCR					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 COMPARE_OP 3 ( != )					      								    								  
56 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( result )				      								    								  
60 LOAD_GLOBAL 2 ( abs )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( result )				      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 76 JUMP_ABSOLUTE 26					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 1 ( n )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
10 104 LOAD_FAST 2 ( result )				      								    								  
106 LOAD_GLOBAL 2 ( abs )				      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 1 ( n )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 INPLACE_ADD						      								    								  
122 STORE_FAST 2 ( result )				      								    								  
							      								    								  
11 >> 124 LOAD_FAST 2 ( result )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A COUNT_EVEN_LENGTH_BINARY_<unk> ENCES_WITH_SAME_SUM_OF_FIRST_A
--							      --							    --								  --
Disassembly of <code object countSeq at 0x7fbac0e8bc90, file  def countSeq ( n , diff ) :				    def countSeq ( n , diff ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( abs )				      	  if ( abs ( diff ) > n ) :				    	if abs ( diff ) > n :					  
2 LOAD_FAST 1 ( diff )					      	      return 0						    	    return 0						  
4 CALL_FUNCTION 1					      	  if ( n == 1 and diff == 0 ) :				    	if n == 1 and diff == 0 :				  
6 LOAD_FAST 0 ( n )					      	      return 2						    	    return 2						  
8 COMPARE_OP 4 ( > )					      	  if ( n == 1 and abs ( diff ) == 1 ) :			    	if n == 1 and abs ( diff ) == 1 :			  
10 POP_JUMP_IF_FALSE 16					      	      return 1						    	    return 1						  
							      	  res = ( countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n  	res = countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n -  
3 12 LOAD_CONST 1 ( 0 )					      	  return res						    	return res						  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 36					      								    								  
24 LOAD_FAST 1 ( diff )					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 32 LOAD_CONST 3 ( 2 )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_FAST 0 ( n )				      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 60					      								    								  
44 LOAD_GLOBAL 0 ( abs )				      								    								  
46 LOAD_FAST 1 ( diff )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 56 LOAD_CONST 2 ( 1 )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
8 >> 60 LOAD_GLOBAL 1 ( countSeq )			      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_FAST 1 ( diff )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_FUNCTION 2					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 LOAD_GLOBAL 1 ( countSeq )				      								    								  
80 LOAD_FAST 0 ( n )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_FAST 1 ( diff )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 BINARY_MULTIPLY					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_GLOBAL 1 ( countSeq )				      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_FAST 1 ( diff )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 BINARY_ADD						      								    								  
112 STORE_FAST 2 ( res )				      								    								  
							      								    								  
9 114 LOAD_FAST 2 ( res )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		      EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		    EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		  EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7fbac0e8de40, f def calculateSum ( arr , n ) :				    def calculateSum ( arr , n ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  s = arr [ 0 ]						    	s = arr [ 0 ]						  
6 POP_JUMP_IF_FALSE 12					      	  value = int ( s )					    	value = int ( s )					  
							      	  sum = value						    	sum = value						  
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 2 , n , 2 ) :			    	for i in range ( 2 , n , 2 ) :				  
10 RETURN_VALUE						      	      s = arr [ i ]					    	    s = arr [ i ]					  
							      	      value = int ( s )					    	    value = int ( s )					  
4 >> 12 LOAD_FAST 0 ( arr )				      	      operation = arr [ i - 1 ] [ 0 ]			    	    operation = arr [ i - 1 ] [ 0 ]			  
14 LOAD_CONST 1 ( 0 )					      	      if ( operation == '+' ) :				    	    if operation == "+" :				  
16 BINARY_SUBSCR					      		  sum += value					    		sum += value					  
18 STORE_FAST 2 ( s )					      	      else :						    	    else :						  
							      		  sum -= value					    		sum -= value					  
5 20 LOAD_GLOBAL 0 ( int )				      	  return sum						    	return sum						  
22 LOAD_FAST 2 ( s )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 STORE_FAST 3 ( value )				      								    								  
							      								    								  
6 28 LOAD_FAST 3 ( value )				      								    								  
30 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
7 32 SETUP_LOOP 78 ( to 112 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_CONST 2 ( 2 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 62 ( to 110 )				      								    								  
48 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 2 ( s )					      								    								  
							      								    								  
9 58 LOAD_GLOBAL 0 ( int )				      								    								  
60 LOAD_FAST 2 ( s )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 STORE_FAST 3 ( value )				      								    								  
							      								    								  
10 66 LOAD_FAST 0 ( arr )				      								    								  
68 LOAD_FAST 5 ( i )					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 1 ( 0 )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 6 ( operation )				      								    								  
							      								    								  
11 82 LOAD_FAST 6 ( operation )				      								    								  
84 LOAD_CONST 4 ( '+' )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
12 90 LOAD_FAST 4 ( sum )				      								    								  
92 LOAD_FAST 3 ( value )				      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 4 ( sum )					      								    								  
98 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
14 >> 100 LOAD_FAST 4 ( sum )				      								    								  
102 LOAD_FAST 3 ( value )				      								    								  
104 INPLACE_SUBTRACT					      								    								  
106 STORE_FAST 4 ( sum )				      								    								  
108 JUMP_ABSOLUTE 46					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
15 >> 112 LOAD_FAST 4 ( sum )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object maxRepeating at 0x7fbac0e8bc90, f def maxRepeating ( str ) :				    def maxRepeating ( str ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( str )					    	l = len ( str )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( str )					      	  count = 0						    	count = 0						  _sa.test/MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_S
4 CALL_FUNCTION 1					      	  res = str [ 0 ]					    	res = str [ 0 ]						  TRING.py", line 46	 return res	^ SyntaxErro
6 STORE_FAST 1 ( l )					      	  for i in range ( l ) :				    	for i in range ( l ) :					  r: 'return' outside function
							      	      cur_count = 1					    	    cur_count = 1					  
3 8 LOAD_CONST 1 ( 0 )					      	      for j in range ( i + 1 , l ) :			    	    for j in range ( i + 1 , l ) :			  
10 STORE_FAST 2 ( count )				      		  if ( str [ i ] != str [ j ] ) :		    		if str [ i ] != str [ j ] :			  
							      		      break					    		    break					  
4 12 LOAD_FAST 0 ( str )				      		  cur_count += 1				    		cur_count += 1					  
14 LOAD_CONST 1 ( 0 )					      	      if cur_count > count :				    	if cur_count > count :					  
16 BINARY_SUBSCR					      		  count = cur_count				    	    count = cur_count					  
18 STORE_FAST 3 ( res )					      		  res = str [ i ]				    	    res = str [ i ]					  
							      	  return res						    return res							  
5 20 SETUP_LOOP 90 ( to 112 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 1 ( l )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 78 ( to 110 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_CONST 2 ( 1 )					      								    								  
36 STORE_FAST 5 ( cur_count )				      								    								  
							      								    								  
7 38 SETUP_LOOP 48 ( to 88 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 1 ( l )					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 30 ( to 86 )				      								    								  
56 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 58 LOAD_FAST 0 ( str )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( str )					      								    								  
66 LOAD_FAST 6 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 3 ( != )					      								    								  
72 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 74 BREAK_LOOP						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 5 ( cur_count )			      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 5 ( cur_count )				      								    								  
84 JUMP_ABSOLUTE 54					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
11 >> 88 LOAD_FAST 5 ( cur_count )			      								    								  
90 LOAD_FAST 2 ( count )				      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
12 96 LOAD_FAST 5 ( cur_count )				      								    								  
98 STORE_FAST 2 ( count )				      								    								  
							      								    								  
13 100 LOAD_FAST 0 ( str )				      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 STORE_FAST 3 ( res )				      								    								  
108 JUMP_ABSOLUTE 30					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
14 >> 112 LOAD_FAST 3 ( res )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K_1			      COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				    COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				  COUNT_PAIRS_DIFFERENCE_EQUAL_K_1
--							      --							    --								  --
Disassembly of <code object countPairsWithDiffK at 0x7fbac0e8 def countPairsWithDiffK ( arr , n , k ) :			    def countPairsWithDiffK ( arr , n , k ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( count )				      	  arr.sort ( )						    	arr.sort ( )						  _sa.test/COUNT_PAIRS_DIFFERENCE_EQUAL_K_1.py", lin
							      	  l = 0							    	l = 0							  e 48	   return count	    ^ SyntaxError: 'return'
3 4 LOAD_FAST 0 ( arr )					      	  r = 0							    	r = 0							  outside function
6 LOAD_METHOD 0 ( sort )				      	  while r < n :						    	while r < n :						  
8 CALL_METHOD 0						      	      if arr [ r ] - arr [ l ] == k :			    	    if arr [ r ] - arr [ l ] == k :			  
10 POP_TOP						      		  count += 1					    		count += 1					  
							      		  l += 1					    		l += 1						  
4 12 LOAD_CONST 1 ( 0 )					      		  r += 1					    		r += 1						  
14 STORE_FAST 4 ( l )					      	      elif arr [ r ] - arr [ l ] > k :			    	    elif arr [ r ] - arr [ l ] > k :			  
							      		  l += 1					    		l += 1						  
5 16 LOAD_CONST 1 ( 0 )					      	      else :						    	    else :						  
18 STORE_FAST 5 ( r )					      		  r += 1					    		r += 1						  
							      	  return count						    return count						  
6 20 SETUP_LOOP 96 ( to 118 )				      								    								  
>> 22 LOAD_FAST 5 ( r )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
7 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 5 ( r )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 4 ( l )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 2 ( k )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( count )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 3 ( count )				      								    								  
							      								    								  
9 58 LOAD_FAST 4 ( l )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( l )					      								    								  
							      								    								  
10 66 LOAD_FAST 5 ( r )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 5 ( r )					      								    								  
74 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
11 >> 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 5 ( r )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 4 ( l )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 2 ( k )					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
12 96 LOAD_FAST 4 ( l )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 4 ( l )					      								    								  
104 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
14 >> 106 LOAD_FAST 5 ( r )				      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 5 ( r )					      								    								  
114 JUMP_ABSOLUTE 22					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
15 >> 118 LOAD_FAST 3 ( count )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		      FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		    FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		  FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS
--							      --							    --								  --
Disassembly of <code object minDist at 0x7fbac0e89d20, file " def minDist ( arr , n , x , y ) :				    def minDist ( arr , n , x , y ) :				  failure : #Results: 4, 10
2 0 LOAD_CONST 1 ( 99999999 )				      	  min_dist = 99999999					    	min_dist = 99999999					  
2 STORE_FAST 4 ( min_dist )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 118 ( to 124 )				      		  if ( x == arr [ i ] and y == arr [ j ] or y == ar 		if x == arr [ i ] and y == arr [ j ] or y == arr  
6 LOAD_GLOBAL 0 ( range )				      		      min_dist = abs ( i - j )			    		    min_dist = abs ( i - j )			  
8 LOAD_FAST 1 ( n )					      	      return min_dist					    	return min_dist						  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
14 FOR_ITER 106 ( to 122 )				      								    								  
16 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 98 ( to 118 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 5 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 80 ( to 116 )				      								    								  
36 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 2 ( x )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 62					      								    								  
50 LOAD_FAST 3 ( y )					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 6 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_TRUE 86					      								    								  
>> 62 LOAD_FAST 3 ( y )					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 34					      								    								  
74 LOAD_FAST 2 ( x )					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 6 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 COMPARE_OP 2 ( == )					      								    								  
84 POP_JUMP_IF_FALSE 34					      								    								  
>> 86 LOAD_FAST 4 ( min_dist )				      								    								  
88 LOAD_GLOBAL 1 ( abs )				      								    								  
90 LOAD_FAST 5 ( i )					      								    								  
92 LOAD_FAST 6 ( j )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 34				      								    								  
							      								    								  
6 102 LOAD_GLOBAL 1 ( abs )				      								    								  
104 LOAD_FAST 5 ( i )					      								    								  
106 LOAD_FAST 6 ( j )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 STORE_FAST 4 ( min_dist )				      								    								  
114 JUMP_ABSOLUTE 34					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
7 >> 118 LOAD_FAST 4 ( min_dist )			      								    								  
120 RETURN_VALUE					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			      COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			    COUNT_GFG_SUBSEQUENCES_GIVEN_STRING				  COUNT_GFG_SUBSEQUENCES_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object countSubsequence at 0x7fbac0e8de4 def countSubsequence ( s , n ) :				    def countSubsequence ( s , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  cntG = 0						    	cntG = 0						  
2 STORE_FAST 2 ( cntG )					      	  cntF = 0						    	cntF = 0						  
							      	  result = 0						    	result = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  C = 0							    	C = 0							  
6 STORE_FAST 3 ( cntF )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      if ( s [ i ] == 'G' ) :				    	    if s [ i ] == 'G' :					  
4 8 LOAD_CONST 1 ( 0 )					      		  cntG += 1					    		cntG += 1					  
10 STORE_FAST 4 ( result )				      		  result += C					    		result += C					  
							      		  continue					    		continue					  
5 12 LOAD_CONST 1 ( 0 )					      	      if ( s [ i ] == 'F' ) :				    	    if s [ i ] == 'F' :					  
14 STORE_FAST 5 ( C )					      		  cntF += 1					    		cntF += 1					  
							      		  C += cntG					    		C += cntG					  
6 16 SETUP_LOOP 80 ( to 98 )				      		  continue					    		continue					  
18 LOAD_GLOBAL 0 ( range )				      	      else :						    	print ( result )					  
20 LOAD_FAST 1 ( n )					      		  continue					    								  
22 CALL_FUNCTION 1					      	  print ( result )					    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 68 ( to 96 )				      								    								  
28 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 6 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 2 ( 'G' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( cntG )				      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 2 ( cntG )				      								    								  
							      								    								  
9 50 LOAD_FAST 4 ( result )				      								    								  
52 LOAD_FAST 5 ( C )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 4 ( result )				      								    								  
							      								    								  
10 58 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 60 LOAD_FAST 0 ( s )				      								    								  
62 LOAD_FAST 6 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_CONST 4 ( 'F' )					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
12 72 LOAD_FAST 3 ( cntF )				      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 3 ( cntF )				      								    								  
							      								    								  
13 80 LOAD_FAST 5 ( C )					      								    								  
82 LOAD_FAST 2 ( cntG )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 5 ( C )					      								    								  
							      								    								  
14 88 JUMP_ABSOLUTE 26					      								    								  
90 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
16 92 JUMP_ABSOLUTE 26					      								    								  
94 JUMP_ABSOLUTE 26					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
17 >> 98 LOAD_GLOBAL 1 ( print )			      								    								  
100 LOAD_FAST 4 ( result )				      								    								  
102 CALL_FUNCTION 1					      								    								  
104 POP_TOP						      								    								  
106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_<unk>		      POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_<unk>		    POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_<unk>		  POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_<unk>
--							      --							    --								  --
Disassembly of <code object isPresent at 0x7fbac0e8bc90, file def isPresent ( s , q ) :					    def isPresent ( s , q ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  freq = [ 0 ] * MAX_CHAR				    	freq = [ 0 ] * MAX_CHAR					  
2 BUILD_LIST 1						      	  for i in range ( 0 , len ( s ) ) :			    	for i in range ( 0 , len ( s ) ) :			  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      freq [ ord ( s [ i ] ) ] += 1			    	    freq [ ord ( s [ i ] ) ] += 1			  
6 BINARY_MULTIPLY					      	  for i in range ( 0 , len ( q ) ) :			    	for i in range ( 0 , len ( q ) ) :			  
8 STORE_FAST 2 ( freq )					      	      freq [ ord ( q [ i ] ) ] -= 1			    	    freq [ ord ( q [ i ] ) ] -= 1			  
							      	      if ( freq [ ord ( q [ i ] ) ] < 0 ) :		    	    if freq [ ord ( q [ i ] ) ] < 0 :			  
3 10 SETUP_LOOP 46 ( to 58 )				      		  return False					    		return False					  
12 LOAD_GLOBAL 1 ( range )				      	  return True						    return True							  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 LOAD_GLOBAL 2 ( len )				      								    								  
18 LOAD_FAST 0 ( s )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 28 ( to 56 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 2 ( freq )				      								    								  
32 LOAD_GLOBAL 3 ( ord )				      								    								  
34 LOAD_FAST 0 ( s )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 DUP_TOP_TWO						      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 ROT_THREE						      								    								  
52 STORE_SUBSCR						      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
5 >> 58 SETUP_LOOP 70 ( to 130 )			      								    								  
60 LOAD_GLOBAL 1 ( range )				      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 LOAD_GLOBAL 2 ( len )				      								    								  
66 LOAD_FAST 1 ( q )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 52 ( to 128 )				      								    								  
76 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 78 LOAD_FAST 2 ( freq )				      								    								  
80 LOAD_GLOBAL 3 ( ord )				      								    								  
82 LOAD_FAST 1 ( q )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 DUP_TOP_TWO						      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 INPLACE_SUBTRACT					      								    								  
98 ROT_THREE						      								    								  
100 STORE_SUBSCR					      								    								  
							      								    								  
7 102 LOAD_FAST 2 ( freq )				      								    								  
104 LOAD_GLOBAL 3 ( ord )				      								    								  
106 LOAD_FAST 1 ( q )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 1 ( 0 )					      								    								  
118 COMPARE_OP 0 ( < )					      								    								  
120 POP_JUMP_IF_FALSE 74				      								    								  
							      								    								  
8 122 LOAD_CONST 3 ( False )				      								    								  
124 RETURN_VALUE					      								    								  
126 JUMP_ABSOLUTE 74					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
9 >> 130 LOAD_CONST 4 ( True )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1    PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1    PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	  PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1
--							      --							    --								  --
Disassembly of <code object isProduct at 0x7fbac0e8de40, file def isProduct ( arr , n , x ) :				    def isProduct ( arr , n , x ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if n < 2 :						    	if n < 2 :						  
2 LOAD_CONST 1 ( 2 )					      	      return False					    	    return False					  
4 COMPARE_OP 0 ( < )					      	  s = set ( )						    	s = set ( )						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if arr [ i ] == 0 :				    	    if arr [ i ] == 0 :					  
3 8 LOAD_CONST 2 ( False )				      		  if x == 0 :					    		if x == 0 :					  
10 RETURN_VALUE						      		      return True				    		    return True					  
							      		  else :					    		else :						  
4 >> 12 LOAD_GLOBAL 0 ( set )				      		      continue					    		    continue					  
14 CALL_FUNCTION 0					      	      if x % arr [ i ] == 0 :				    	    if x % arr [ i ] == 0 :				  
16 STORE_FAST 3 ( s )					      		  if x // arr [ i ] in s :			    		if x in arr [ i ] // s :			  
							      		      return True				    		    return True					  
5 18 SETUP_LOOP 94 ( to 114 )				      		  s.add ( arr [ i ] )				    		s.add ( arr [ i ] )				  
20 LOAD_GLOBAL 1 ( range )				      	  return False						    return False						  
22 LOAD_CONST 3 ( 0 )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 80 ( to 112 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 46 LOAD_FAST 2 ( x )					      								    								  
48 LOAD_CONST 3 ( 0 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
8 54 LOAD_CONST 4 ( True )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
10 58 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
11 >> 60 LOAD_FAST 2 ( x )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_MODULO					      								    								  
70 LOAD_CONST 3 ( 0 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
12 76 LOAD_FAST 2 ( x )					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 LOAD_FAST 3 ( s )					      								    								  
88 COMPARE_OP 6 ( in )					      								    								  
90 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
13 92 LOAD_CONST 4 ( True )				      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
14 >> 96 LOAD_FAST 3 ( s )				      								    								  
98 LOAD_METHOD 2 ( add )				      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_METHOD 1					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 30					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
15 >> 114 LOAD_CONST 2 ( False )			      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY_1				      FREQUENT_ELEMENT_ARRAY_1					    FREQUENT_ELEMENT_ARRAY_1					  FREQUENT_ELEMENT_ARRAY_1
--							      --							    --								  --
Disassembly of <code object mostFrequent at 0x7fbac0e89d20, f def mostFrequent ( arr , n ) :				    def mostFrequent ( arr , n ) :				  success : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  Hash = dict ( )					    	Hash = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( Hash )					      	      if arr [ i ] in Hash.keys ( ) :			    	    if arr [ i ] in Hash.keys ( ) :			  
							      		  Hash [ arr [ i ] ] += 1			    		Hash [ arr [ i ] ] += 1				  
3 6 SETUP_LOOP 66 ( to 74 )				      	      else :						    	    else :						  
8 LOAD_GLOBAL 1 ( range )				      		  Hash [ arr [ i ] ] = 1			    		Hash [ arr [ i ] ] = 1				  
10 LOAD_FAST 1 ( n )					      	  max_count = 0						    	max_count = 0						  
12 CALL_FUNCTION 1					      	  res = - 1						    	res = - 1						  
14 GET_ITER						      	  for i in Hash :					    	for i in Hash :						  
>> 16 FOR_ITER 54 ( to 72 )				      	      if ( max_count < Hash [ i ] ) :			    	    if max_count < Hash [ i ] :				  
18 STORE_FAST 3 ( i )					      		  res = i					    		res = i						  
							      		  max_count = Hash [ i ]			    		max_count = Hash [ i ]				  
4 20 LOAD_FAST 0 ( arr )				      	  return res						    	return res						  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( Hash )					      								    								  
28 LOAD_METHOD 2 ( keys )				      								    								  
30 CALL_METHOD 0					      								    								  
32 COMPARE_OP 6 ( in )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( Hash )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 58 LOAD_CONST 1 ( 1 )				      								    								  
60 LOAD_FAST 2 ( Hash )					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 16					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_CONST 2 ( 0 )				      								    								  
76 STORE_FAST 4 ( max_count )				      								    								  
							      								    								  
9 78 LOAD_CONST 3 ( - 1 )				      								    								  
80 STORE_FAST 5 ( res )					      								    								  
							      								    								  
10 82 SETUP_LOOP 36 ( to 120 )				      								    								  
84 LOAD_FAST 2 ( Hash )					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 28 ( to 118 )				      								    								  
90 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 92 LOAD_FAST 4 ( max_count )				      								    								  
94 LOAD_FAST 2 ( Hash )					      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 88				      								    								  
							      								    								  
12 104 LOAD_FAST 3 ( i )				      								    								  
106 STORE_FAST 5 ( res )				      								    								  
							      								    								  
13 108 LOAD_FAST 2 ( Hash )				      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 STORE_FAST 4 ( max_count )				      								    								  
116 JUMP_ABSOLUTE 88					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_FAST 5 ( res )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2	      PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		    PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		  PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2
--							      --							    --								  --
Disassembly of <code object printSubsequences at 0x7fbac0e8bc def printSubsequences ( str ) :				    def printSubsequences ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  opsize = int ( pow ( 2 , n - 1 ) )			    	opsize = int ( pow ( 2 , n - 1 ) )			  
4 CALL_FUNCTION 1					      	  for counter in range ( opsize ) :			    	for counter in range ( opsize ) :			  
6 STORE_FAST 1 ( n )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
							      		  print ( str [ j ] , end = "" )		    		print ( str [ j ] , end = "" )			  
3 8 LOAD_GLOBAL 1 ( int )				      		  if ( counter & ( 1 << j ) ) :			    		if counter & ( 1 << j ) :			  
10 LOAD_GLOBAL 2 ( pow )				      		      print ( "" , end = "" )			    		    print ( "" , end = "" )			  
12 LOAD_CONST 1 ( 2 )					      	      print ( "\n" , end = "" )				    	    print ( "\n" , end = "" )				  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 STORE_FAST 2 ( opsize )				      								    								  
							      								    								  
4 26 SETUP_LOOP 86 ( to 114 )				      								    								  
28 LOAD_GLOBAL 3 ( range )				      								    								  
30 LOAD_FAST 2 ( opsize )				      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 74 ( to 112 )				      								    								  
38 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
5 40 SETUP_LOOP 56 ( to 98 )				      								    								  
42 LOAD_GLOBAL 3 ( range )				      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 44 ( to 96 )				      								    								  
52 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 54 LOAD_GLOBAL 4 ( print )				      								    								  
56 LOAD_FAST 0 ( str )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( '' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
							      								    								  
7 70 LOAD_FAST 3 ( counter )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_LSHIFT					      								    								  
78 BINARY_AND						      								    								  
80 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 82 LOAD_GLOBAL 4 ( print )				      								    								  
84 LOAD_CONST 3 ( '' )					      								    								  
86 LOAD_CONST 3 ( '' )					      								    								  
88 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
90 CALL_FUNCTION_KW 2					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 50					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
9 >> 98 LOAD_GLOBAL 4 ( print )				      								    								  
100 LOAD_CONST 5 ( '\n' )				      								    								  
102 LOAD_CONST 3 ( '' )					      								    								  
104 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 36					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_UNIQUE_ROWS					      PRINT_UNIQUE_ROWS						    PRINT_UNIQUE_ROWS						  PRINT_UNIQUE_ROWS
--							      --							    --								  --
Disassembly of <code object printArray at 0x7fbac0e89d20, fil def printArray ( matrix ) :				    def printArray ( matrix ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  rowCount = len ( matrix )				    	rowCount = len ( matrix )				  
2 LOAD_FAST 0 ( matrix )				      	  if rowCount == 0 :					    	if rowCount == 0 :					  
4 CALL_FUNCTION 1					      	      return						    	    return						  
6 STORE_FAST 1 ( rowCount )				      	  columnCount = len ( matrix [ 0 ] )			    	columnCount = len ( matrix [ 0 ] )			  
							      	  if columnCount == 0 :					    	if columnCount == 0 :					  
3 8 LOAD_FAST 1 ( rowCount )				      	      return						    	    return						  
10 LOAD_CONST 1 ( 0 )					      	  row_output_format = " ".join ( [ "%s" ] * columnCount )   	row_output_format = ' '.join ( [ '%s' ] * columnCount )	  
12 COMPARE_OP 2 ( == )					      	  printed = { }						    	printed = { }						  
14 POP_JUMP_IF_FALSE 20					      	  for row in matrix :					    	for row in matrix :					  
							      	      routput = row_output_format % tuple ( row )	    	    routput = row_output_format % tuple ( row )		  
4 16 LOAD_CONST 0 ( None )				      	      if routput not in printed :			    	    if routput not in printed :				  
18 RETURN_VALUE						      		  printed [ routput ] = True			    		printed [ routput ] = True			  
							      		  print ( routput )				    		print ( routput )				  
5 >> 20 LOAD_GLOBAL 0 ( len )				      								    								  
22 LOAD_FAST 0 ( matrix )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 STORE_FAST 2 ( columnCount )				      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( columnCount )			      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 40 LOAD_CONST 0 ( None )				      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
8 >> 44 LOAD_CONST 2 ( ' ' )				      								    								  
46 LOAD_METHOD 1 ( join )				      								    								  
48 LOAD_CONST 3 ( '%s' )				      								    								  
50 BUILD_LIST 1						      								    								  
52 LOAD_FAST 2 ( columnCount )				      								    								  
54 BINARY_MULTIPLY					      								    								  
56 CALL_METHOD 1					      								    								  
58 STORE_FAST 3 ( row_output_format )			      								    								  
							      								    								  
9 60 BUILD_MAP 0					      								    								  
62 STORE_FAST 4 ( printed )				      								    								  
							      								    								  
10 64 SETUP_LOOP 48 ( to 114 )				      								    								  
66 LOAD_FAST 0 ( matrix )				      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 40 ( to 112 )				      								    								  
72 STORE_FAST 5 ( row )					      								    								  
							      								    								  
11 74 LOAD_FAST 3 ( row_output_format )			      								    								  
76 LOAD_GLOBAL 2 ( tuple )				      								    								  
78 LOAD_FAST 5 ( row )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 BINARY_MODULO					      								    								  
84 STORE_FAST 6 ( routput )				      								    								  
							      								    								  
12 86 LOAD_FAST 6 ( routput )				      								    								  
88 LOAD_FAST 4 ( printed )				      								    								  
90 COMPARE_OP 7 ( not in )				      								    								  
92 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
13 94 LOAD_CONST 4 ( True )				      								    								  
96 LOAD_FAST 4 ( printed )				      								    								  
98 LOAD_FAST 6 ( routput )				      								    								  
100 STORE_SUBSCR					      								    								  
							      								    								  
14 102 LOAD_GLOBAL 3 ( print )				      								    								  
104 LOAD_FAST 6 ( routput )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 70					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		      FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		    FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS			  FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS
--							      --							    --								  --
Disassembly of <code object printFirstRepeating at 0x7fbac0e8 def printFirstRepeating ( arr , n ) :			    def printFirstRepeating ( arr , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  Min = - 1						    	Min = - 1						  
2 STORE_FAST 2 ( Min )					      	  myset = dict ( )					    	myset = dict ( )					  
							      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
3 4 LOAD_GLOBAL 0 ( dict )				      	      if arr [ i ] in myset.keys ( ) :			    	    if arr [ i ] in myset.keys ( ) :			  
6 CALL_FUNCTION 0					      		  Min = i					    		Min = i						  
8 STORE_FAST 3 ( myset )				      	      else :						    	    else :						  
							      		  myset [ arr [ i ] ] = 1			    		myset [ arr [ i ] ] = 1				  
4 10 SETUP_LOOP 58 ( to 70 )				      	  if ( Min != - 1 ) :					    	if Min != - 1 :						  
12 LOAD_GLOBAL 1 ( range )				      	      print ( "The first repeating element is" , arr [ Min  	    print ( "The first site_ating element is" , arr [ Min 
14 LOAD_FAST 1 ( n )					      	  else :						    	else :							  
16 LOAD_CONST 2 ( 1 )					      	      print ( "There are no repeating elements" )	    	    print ( "There are no spinating elements" )		  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_CONST 1 ( - 1 )					      								    								  
22 LOAD_CONST 1 ( - 1 )					      								    								  
24 CALL_FUNCTION 3					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 38 ( to 68 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 3 ( myset )				      								    								  
40 LOAD_METHOD 2 ( keys )				      								    								  
42 CALL_METHOD 0					      								    								  
44 COMPARE_OP 6 ( in )					      								    								  
46 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( i )					      								    								  
50 STORE_FAST 2 ( Min )					      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 54 LOAD_CONST 2 ( 1 )				      								    								  
56 LOAD_FAST 3 ( myset )				      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 STORE_SUBSCR						      								    								  
66 JUMP_ABSOLUTE 28					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 2 ( Min )				      								    								  
72 LOAD_CONST 1 ( - 1 )					      								    								  
74 COMPARE_OP 3 ( != )					      								    								  
76 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
10 78 LOAD_GLOBAL 3 ( print )				      								    								  
80 LOAD_CONST 3 ( 'The first repeating element is' )	      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 2 ( Min )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 POP_TOP						      								    								  
92 JUMP_FORWARD 8 ( to 102 )				      								    								  
							      								    								  
12 >> 94 LOAD_GLOBAL 3 ( print )			      								    								  
96 LOAD_CONST 4 ( 'There are no repeating elements' )	      								    								  
98 CALL_FUNCTION 1					      								    								  
100 POP_TOP						      								    								  
>> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_MAXIMUM_SUM_COMBINATIONS_TWO_<unk> YS			      K_MAXIMUM_SUM_COMBINATIONS_TWO_<unk> YS			    K_MAXIMUM_SUM_COMBINATIONS_TWO_<unk> YS			  K_MAXIMUM_SUM_COMBINATIONS_TWO_<unk> YS
--							      --							    --								  --
Disassembly of <code object KMaxCombinations at 0x7fbac0e8d54 def KMaxCombinations ( A , B , N , K ) :			    def KMaxCombinations ( A , B , N , K ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( PriorityQueue )			      	  pq = PriorityQueue ( )				    	pq = PriorityQueue ( )					  
2 CALL_FUNCTION 0					      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
4 STORE_FAST 4 ( pq )					      	      for j in range ( 0 , N ) :			    	    for j in range ( 0 , N ) :				  
							      		  a = A [ i ] + B [ j ]				    		a = A [ i ] + B [ j ]				  
3 6 SETUP_LOOP 70 ( to 78 )				      		  pq.put ( ( - a , a ) )			    		pq.put ( - a , a )				  
8 LOAD_GLOBAL 1 ( range )				      	  count = 0						    	count = 0						  
10 LOAD_CONST 1 ( 0 )					      	  while ( count < K ) :					    	while count < K :					  
12 LOAD_FAST 2 ( N )					      	      print ( pq.get ( ) [ 1 ] )			    	    print ( pq.get ( ) [ 1 ] )				  
14 CALL_FUNCTION 2					      	      count = count + 1					    	    count = count + 1					  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 56 ( to 76 )				      								    								  
20 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 50 ( to 74 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 2 ( N )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 36 ( to 72 )				      								    								  
36 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( A )					      								    								  
40 LOAD_FAST 5 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( B )					      								    								  
46 LOAD_FAST 6 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 7 ( a )					      								    								  
							      								    								  
6 54 LOAD_FAST 4 ( pq )					      								    								  
56 LOAD_METHOD 2 ( put )				      								    								  
58 LOAD_FAST 7 ( a )					      								    								  
60 UNARY_NEGATIVE					      								    								  
62 LOAD_FAST 7 ( a )					      								    								  
64 BUILD_TUPLE 2					      								    								  
66 CALL_METHOD 1					      								    								  
68 POP_TOP						      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 JUMP_ABSOLUTE 18					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
7 >> 78 LOAD_CONST 1 ( 0 )				      								    								  
80 STORE_FAST 8 ( count )				      								    								  
							      								    								  
8 82 SETUP_LOOP 36 ( to 120 )				      								    								  
>> 84 LOAD_FAST 8 ( count )				      								    								  
86 LOAD_FAST 3 ( K )					      								    								  
88 COMPARE_OP 0 ( < )					      								    								  
90 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
9 92 LOAD_GLOBAL 3 ( print )				      								    								  
94 LOAD_FAST 4 ( pq )					      								    								  
96 LOAD_METHOD 4 ( get )				      								    								  
98 CALL_METHOD 0					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 POP_TOP						      								    								  
							      								    								  
10 108 LOAD_FAST 8 ( count )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 8 ( count )				      								    								  
116 JUMP_ABSOLUTE 84					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 LOAD_CONST 0 ( None )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES	  CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES
--							      --							    --								  --
Disassembly of <code object isRotated at 0x7fbac0e89d20, file def isRotated ( str1 , str2 ) :				    def isRotated ( str1 , str2 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  if ( len ( str1 ) != len ( str2 ) ) :			    	if len ( str1 ) != len ( str2 ) :			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( str1 )					      	      return False					    	    return False					  _sa.test/CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHE
4 CALL_FUNCTION 1					      	  clock_rot = ""					    	clock_rot = ""						  R_STRING_2_PLACES.py", line 36     return str1 ==
6 LOAD_GLOBAL 0 ( len )					      	  anticlock_rot = ""					    	anticlock_rot = ""					  clock_or str1 == anticlock_rot
8 LOAD_FAST 1 ( str2 )					      	  l = len ( str2 )					    	l = len ( str2 )					  	      ^ SyntaxError: invalid syntax
10 CALL_FUNCTION 1					      	  anticlock_rot = ( anticlock_rot + str2 [ l - 2 : ] + str2 	anticlock_rot = anticlock_rot + str2 [ l - 2 : ] + str2 [ 
12 COMPARE_OP 3 ( != )					      	  clock_rot = clock_rot + str2 [ 2 : ] + str2 [ 0 : 2 ]	    	clock_rot = clock_+ str2 [ 2 : ] + str2 [ 0 : 2 ]	  
14 POP_JUMP_IF_FALSE 20					      	  return ( str1 == clock_rot or str1 == anticlock_rot )	    	return str1 == clock_or str1 == anticlock_rot		  
							      								    								  
3 16 LOAD_CONST 1 ( False )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 2 ( '' )				      								    								  
22 STORE_FAST 2 ( clock_rot )				      								    								  
							      								    								  
5 24 LOAD_CONST 2 ( '' )				      								    								  
26 STORE_FAST 3 ( anticlock_rot )			      								    								  
							      								    								  
6 28 LOAD_GLOBAL 0 ( len )				      								    								  
30 LOAD_FAST 1 ( str2 )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 STORE_FAST 4 ( l )					      								    								  
							      								    								  
7 36 LOAD_FAST 3 ( anticlock_rot )			      								    								  
38 LOAD_FAST 1 ( str2 )					      								    								  
40 LOAD_FAST 4 ( l )					      								    								  
42 LOAD_CONST 3 ( 2 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 0 ( None )				      								    								  
48 BUILD_SLICE 2					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( str2 )					      								    								  
56 LOAD_CONST 4 ( 0 )					      								    								  
58 LOAD_FAST 4 ( l )					      								    								  
60 LOAD_CONST 3 ( 2 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BUILD_SLICE 2					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 3 ( anticlock_rot )			      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( clock_rot )				      								    								  
74 LOAD_FAST 1 ( str2 )					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 LOAD_CONST 0 ( None )				      								    								  
80 BUILD_SLICE 2					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 1 ( str2 )					      								    								  
88 LOAD_CONST 4 ( 0 )					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 BUILD_SLICE 2					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 STORE_FAST 2 ( clock_rot )				      								    								  
							      								    								  
9 100 LOAD_FAST 0 ( str1 )				      								    								  
102 LOAD_FAST 2 ( clock_rot )				      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 JUMP_IF_TRUE_OR_POP 114				      								    								  
108 LOAD_FAST 0 ( str1 )				      								    								  
110 LOAD_FAST 3 ( anticlock_rot )			      								    								  
112 COMPARE_OP 2 ( == )					      								    								  
>> 114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING	      PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
Disassembly of <code object productAtKthLevel at 0x7fbac0e8bc def productAtKthLevel ( tree , k ) :			    def productAtKthLevel ( tree , k ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1 )				      	  level = - 1						    	level = - 1						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( level )				      	  product = 1						    	product = 1						  _sa.test/PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED
							      	  n = len ( tree )					    	n = len ( tree )					  _STRING.py", line 43	   return product     ^ Synt
3 4 LOAD_CONST 2 ( 1 )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  axError: 'return' outside function
6 STORE_FAST 3 ( product )				      	      if ( tree [ i ] == '(' ) :			    	    if tree [ i ] == "(" :				  
							      		  level += 1					    		level += 1					  
4 8 LOAD_GLOBAL 0 ( len )				      	      elif ( tree [ i ] == ')' ) :			    	    elif tree [ i ] == ")" :				  
10 LOAD_FAST 0 ( tree )					      		  level -= 1					    		level -= 1					  
12 CALL_FUNCTION 1					      	      else :						    	    elif level == k :					  
14 STORE_FAST 4 ( n )					      		  if ( level == k ) :				    		product *= int ( tree [ i ] ) - int ( '0' )	  
							      		      product *= ( int ( tree [ i ] ) - int ( '0' ) return product						  
5 16 SETUP_LOOP 94 ( to 112 )				      	  return product					    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 3 ( 0 )					      								    								  
22 LOAD_FAST 4 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 80 ( to 110 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 0 ( tree )				      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 4 ( '(' )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( level )				      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 2 ( level )				      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 54 LOAD_FAST 0 ( tree )				      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 5 ( ')' )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 66 LOAD_FAST 2 ( level )				      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 2 ( level )				      								    								  
74 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
11 >> 76 LOAD_FAST 2 ( level )				      								    								  
78 LOAD_FAST 1 ( k )					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
12 84 LOAD_FAST 3 ( product )				      								    								  
86 LOAD_GLOBAL 2 ( int )				      								    								  
88 LOAD_FAST 0 ( tree )					      								    								  
90 LOAD_FAST 5 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 LOAD_GLOBAL 2 ( int )				      								    								  
98 LOAD_CONST 6 ( '0' )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 INPLACE_MULTIPLY					      								    								  
106 STORE_FAST 3 ( product )				      								    								  
108 JUMP_ABSOLUTE 28					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
13 >> 112 LOAD_FAST 3 ( product )			      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		      DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		    DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		  DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM
--							      --							    --								  --
Disassembly of <code object knapSack at 0x7fbac0e8de40, file  def knapSack ( W , wt , val , n ) :			    def knapSack ( W , wt , val , n ) :				  script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if n == 0 or W == 0 :					    	if n == 0 or W == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( wt [ n - 1 ] > W ) :				    	if wt [ n - 1 ] > W :					  
6 POP_JUMP_IF_TRUE 16					      	      return knapSack ( W , wt , val , n - 1 )		    	    return knapSack ( W , wt , val , n - 1 )		  
8 LOAD_FAST 0 ( W )					      	  else :						    	else :							  
10 LOAD_CONST 1 ( 0 )					      	      return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  	    return max ( val [ n - 1 ] , knapSack ( W , wt [ n -  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( wt )				      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( W )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
5 36 LOAD_GLOBAL 0 ( knapSack )				      								    								  
38 LOAD_FAST 0 ( W )					      								    								  
40 LOAD_FAST 1 ( wt )					      								    								  
42 LOAD_FAST 2 ( val )					      								    								  
44 LOAD_FAST 3 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 4					      								    								  
52 RETURN_VALUE						      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( max )				      								    								  
56 LOAD_FAST 2 ( val )					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_GLOBAL 0 ( knapSack )				      								    								  
68 LOAD_FAST 0 ( W )					      								    								  
70 LOAD_FAST 1 ( wt )					      								    								  
72 LOAD_FAST 3 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 1 ( wt )					      								    								  
84 LOAD_FAST 2 ( val )					      								    								  
86 LOAD_FAST 3 ( n )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 CALL_FUNCTION 4					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_GLOBAL 0 ( knapSack )				      								    								  
98 LOAD_FAST 0 ( W )					      								    								  
100 LOAD_FAST 1 ( wt )					      								    								  
102 LOAD_FAST 2 ( val )					      								    								  
104 LOAD_FAST 3 ( n )					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 4					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 RETURN_VALUE					      								    								  
116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER_1					      SUM_FACTORS_NUMBER_1					    SUM_FACTORS_NUMBER_1					  SUM_FACTORS_NUMBER_1
--							      --							    --								  --
Disassembly of <code object sumofFactors at 0x7fbac0e89d20, f def sumofFactors ( n ) :					    def sumofFactors ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = 1							  
2 STORE_FAST 1 ( res )					      	  for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :	    	for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :	  
							      	      curr_sum = 1					    	    curr_sum = 1					  
3 4 SETUP_LOOP 90 ( to 96 )				      	      curr_term = 1					    	    curr_term = 1					  
6 LOAD_GLOBAL 0 ( range )				      	      while n % i == 0 :				    	    while n % i == 0 :					  
8 LOAD_CONST 2 ( 2 )					      		  n = n / i ;					    		n = n / i					  
10 LOAD_GLOBAL 1 ( int )				      		  curr_term = curr_term * i ;			    		curr_term = curr_term * i			  
12 LOAD_GLOBAL 2 ( m )					      		  curr_sum += curr_term ;			    		curr_sum += curr_term				  
14 LOAD_METHOD 3 ( sqrt )				      	      res = res * curr_sum				    	    res = res * curr_sum				  
16 LOAD_FAST 0 ( n )					      	  if n > 2 :						    	if n > 2 :						  
18 CALL_METHOD 1					      	      res = res * ( 1 + n )				    	    res = res * ( 1 + n )				  
20 LOAD_CONST 1 ( 1 )					      	  return res ;						    	return res						  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 1					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 62 ( to 94 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 34 LOAD_CONST 1 ( 1 )					      								    								  
36 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
5 38 LOAD_CONST 1 ( 1 )					      								    								  
40 STORE_FAST 4 ( curr_term )				      								    								  
							      								    								  
6 42 SETUP_LOOP 40 ( to 84 )				      								    								  
>> 44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 3 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 STORE_FAST 0 ( n )					      								    								  
							      								    								  
8 64 LOAD_FAST 4 ( curr_term )				      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 STORE_FAST 4 ( curr_term )				      								    								  
							      								    								  
9 72 LOAD_FAST 3 ( curr_sum )				      								    								  
74 LOAD_FAST 4 ( curr_term )				      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 3 ( curr_sum )				      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 1 ( res )				      								    								  
86 LOAD_FAST 3 ( curr_sum )				      								    								  
88 BINARY_MULTIPLY					      								    								  
90 STORE_FAST 1 ( res )					      								    								  
92 JUMP_ABSOLUTE 30					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
11 >> 96 LOAD_FAST 0 ( n )				      								    								  
98 LOAD_CONST 2 ( 2 )					      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
12 104 LOAD_FAST 1 ( res )				      								    								  
106 LOAD_CONST 1 ( 1 )					      								    								  
108 LOAD_FAST 0 ( n )					      								    								  
110 BINARY_ADD						      								    								  
112 BINARY_MULTIPLY					      								    								  
114 STORE_FAST 1 ( res )				      								    								  
							      								    								  
13 >> 116 LOAD_FAST 1 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI
--							      --							    --								  --
Disassembly of <code object maxOnesIndex at 0x7fbac0e8de40, f def maxOnesIndex ( arr , n ) :				    def maxOnesIndex ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  max_count = 0						    	max_count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( max_count )				      	  max_index = 0						    	max_index = 0						  _sa.test/FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTI
							      	  prev_zero = - 1					    	prev_zero = - 1						  NUOUS_SEQUENCE_1S_BINARY_ARRAY.py", line 48	  re
3 4 LOAD_CONST 1 ( 0 )					      	  prev_prev_zero = - 1					    	prev_prev_zero = - 1					  turn max_index     ^ SyntaxError: 'return' outside
6 STORE_FAST 3 ( max_index )				      	  for curr in range ( n ) :				    	for curr in range ( n ) :				   function
							      	      if ( arr [ curr ] == 0 ) :			    	    if arr [ curr ] == 0 :				  
4 8 LOAD_CONST 2 ( - 1 )				      		  if ( curr - prev_prev_zero > max_count ) :	    		if curr [ prev_prev_zero ] > max_count :	  
10 STORE_FAST 4 ( prev_zero )				      		      max_count = curr - prev_prev_zero		    		    max_count = curr - prev_prev_zero		  
							      		      max_index = prev_zero			    		    max_index = prev_zero			  
5 12 LOAD_CONST 2 ( - 1 )				      		  prev_prev_zero = prev_zero			    		    prev_prev_zero = prev_zero			  
14 STORE_FAST 5 ( prev_prev_zero )			      		  prev_zero = curr				    		    prev_prev_zero = curr			  
							      	  if ( n - prev_prev_zero > max_count ) :		    	if n - prev_prev_zero > max_count :			  
6 16 SETUP_LOOP 60 ( to 78 )				      	      max_index = prev_zero				    	    max_index = prev_zero				  
18 LOAD_GLOBAL 0 ( range )				      	  return max_index					    return max_index						  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 48 ( to 76 )				      								    								  
28 STORE_FAST 6 ( curr )				      								    								  
							      								    								  
7 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 6 ( curr )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
8 42 LOAD_FAST 6 ( curr )				      								    								  
44 LOAD_FAST 5 ( prev_prev_zero )			      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 2 ( max_count )				      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
9 54 LOAD_FAST 6 ( curr )				      								    								  
56 LOAD_FAST 5 ( prev_prev_zero )			      								    								  
58 BINARY_SUBTRACT					      								    								  
60 STORE_FAST 2 ( max_count )				      								    								  
							      								    								  
10 62 LOAD_FAST 4 ( prev_zero )				      								    								  
64 STORE_FAST 3 ( max_index )				      								    								  
							      								    								  
11 >> 66 LOAD_FAST 4 ( prev_zero )			      								    								  
68 STORE_FAST 5 ( prev_prev_zero )			      								    								  
							      								    								  
12 70 LOAD_FAST 6 ( curr )				      								    								  
72 STORE_FAST 4 ( prev_zero )				      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
13 >> 78 LOAD_FAST 1 ( n )				      								    								  
80 LOAD_FAST 5 ( prev_prev_zero )			      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_FAST 2 ( max_count )				      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
14 90 LOAD_FAST 4 ( prev_zero )				      								    								  
92 STORE_FAST 3 ( max_index )				      								    								  
							      								    								  
15 >> 94 LOAD_FAST 3 ( max_index )			      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		      FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		    FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		  FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object count at 0x7fbac0e89d20, file "<d def count ( a , b , m , n ) :				    def count ( a , b , m , n ) :				  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if ( ( m == 0 and n == 0 ) or n == 0 ) :		    	if m == 0 and n == 0 or n == 0 :			  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( m == 0 ) :					    	if m == 0 :						  
6 POP_JUMP_IF_FALSE 16					      	      return 0						    	    return 0						  
8 LOAD_FAST 3 ( n )					      	  if ( a [ m - 1 ] == b [ n - 1 ] ) :			    	if a [ m - 1 ] == b [ n - 1 ] :				  
10 LOAD_CONST 1 ( 0 )					      	      return ( count ( a , b , m - 1 , n - 1 ) + count ( a  	    return count ( a , b , m - 1 , n - 1 ) + count ( a ,  
12 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
14 POP_JUMP_IF_TRUE 24					      	      return count ( a , b , m - 1 , n )		    	    return count ( a , b , m - 1 , n )			  
>> 16 LOAD_FAST 3 ( n )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 >> 24 LOAD_CONST 2 ( 1 )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_FAST 2 ( m )				      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 36 LOAD_CONST 1 ( 0 )					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 0 ( a )				      								    								  
42 LOAD_FAST 2 ( m )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( b )					      								    								  
52 LOAD_FAST 3 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
7 64 LOAD_GLOBAL 0 ( count )				      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 1 ( b )					      								    								  
70 LOAD_FAST 2 ( m )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_FAST 3 ( n )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 CALL_FUNCTION 4					      								    								  
84 LOAD_GLOBAL 0 ( count )				      								    								  
86 LOAD_FAST 0 ( a )					      								    								  
88 LOAD_FAST 1 ( b )					      								    								  
90 LOAD_FAST 2 ( m )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_FAST 3 ( n )					      								    								  
98 CALL_FUNCTION 4					      								    								  
100 BINARY_ADD						      								    								  
102 RETURN_VALUE					      								    								  
							      								    								  
9 >> 104 LOAD_GLOBAL 0 ( count )			      								    								  
106 LOAD_FAST 0 ( a )					      								    								  
108 LOAD_FAST 1 ( b )					      								    								  
110 LOAD_FAST 2 ( m )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 LOAD_FAST 3 ( n )					      								    								  
118 CALL_FUNCTION 4					      								    								  
120 RETURN_VALUE					      								    								  
122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING
--							      --							    --								  --
Disassembly of <code object shuffleArray at 0x7fbac0e89d20, f def shuffleArray ( a , n ) :				    def ( a , n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  i , q , k = 0 , 1 , n					    	i , q , k = 0 , 1 , n					  
2 LOAD_CONST 2 ( 1 )					      	  while ( i < n ) :					    	while i < n :						  
4 LOAD_FAST 1 ( n )					      	      j = k						    	    j = k						  
6 ROT_THREE						      	      while ( j > i + q ) :				    	    while j > ( i + q ) :				  
8 ROT_TWO						      		  a [ j - 1 ] , a [ j ] = a [ j ] , a [ j - 1 ]	    		a [ j - 1 ] , a [ j - 1 ] = a [ j ] , a [ j - 1 ] 
10 STORE_FAST 2 ( i )					      		  j -= 1					    		j -= 1						  
12 STORE_FAST 3 ( q )					      	      i += 1						    	    i += 1						  
14 STORE_FAST 4 ( k )					      	      k += 1						    	    k += 1						  
							      	      q += 1						    	    q += 1						  
3 16 SETUP_LOOP 100 ( to 118 )				      								    								  
>> 18 LOAD_FAST 2 ( i )					      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
4 26 LOAD_FAST 4 ( k )					      								    								  
28 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 30 SETUP_LOOP 58 ( to 90 )				      								    								  
>> 32 LOAD_FAST 5 ( j )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_FAST 3 ( q )					      								    								  
38 BINARY_ADD						      								    								  
40 COMPARE_OP 4 ( > )					      								    								  
42 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 ROT_TWO						      								    								  
62 LOAD_FAST 0 ( a )					      								    								  
64 LOAD_FAST 5 ( j )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_SUBSCR						      								    								  
72 LOAD_FAST 0 ( a )					      								    								  
74 LOAD_FAST 5 ( j )					      								    								  
76 STORE_SUBSCR						      								    								  
							      								    								  
7 78 LOAD_FAST 5 ( j )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_SUBTRACT					      								    								  
84 STORE_FAST 5 ( j )					      								    								  
86 JUMP_ABSOLUTE 32					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
8 >> 90 LOAD_FAST 2 ( i )				      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 98 LOAD_FAST 4 ( k )					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 4 ( k )					      								    								  
							      								    								  
10 106 LOAD_FAST 3 ( q )				      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 3 ( q )					      								    								  
114 JUMP_ABSOLUTE 18					      								    								  
>> 116 POP_BLOCK					      								    								  
>> 118 LOAD_CONST 0 ( None )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	      SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	    SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	  SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER
--							      --							    --								  --
Disassembly of <code object sumOfSubstrings at 0x7fbac0e89d20 def sumOfSubstrings ( num ) :				    def sumOfSubstrings ( num ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( num )					    	n = len ( num )						  
2 LOAD_FAST 0 ( num )					      	  sumofdigit = [ ]					    	sumofdigit = [ ]					  
4 CALL_FUNCTION 1					      	  sumofdigit.append ( int ( num [ 0 ] ) )		    	sumofdigit.append ( int ( num [ 0 ] ) )			  
6 STORE_FAST 1 ( n )					      	  res = sumofdigit [ 0 ]				    	res = sumofdigit [ 0 ]					  
							      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
3 8 BUILD_LIST 0					      	      numi = int ( num [ i ] )				    	    numi = int ( num [ i ] )				  
10 STORE_FAST 2 ( sumofdigit )				      	      sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigi 	    sumofdigit.append ( i + 1 * numi + 10 * sumofdigit [  
							      	      res += sumofdigit [ i ]				    	    res += sumofdigit [ i ]				  
4 12 LOAD_FAST 2 ( sumofdigit )				      	  return res						    	return res						  
14 LOAD_METHOD 1 ( append )				      								    								  
16 LOAD_GLOBAL 2 ( int )				      								    								  
18 LOAD_FAST 0 ( num )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 CALL_METHOD 1					      								    								  
28 POP_TOP						      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( sumofdigit )				      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 STORE_FAST 3 ( res )					      								    								  
							      								    								  
6 38 SETUP_LOOP 76 ( to 116 )				      								    								  
40 LOAD_GLOBAL 3 ( range )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 62 ( to 114 )				      								    								  
52 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 54 LOAD_GLOBAL 2 ( int )				      								    								  
56 LOAD_FAST 0 ( num )					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 STORE_FAST 5 ( numi )				      								    								  
							      								    								  
8 66 LOAD_FAST 2 ( sumofdigit )				      								    								  
68 LOAD_METHOD 1 ( append )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 5 ( numi )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 LOAD_CONST 3 ( 10 )					      								    								  
82 LOAD_FAST 2 ( sumofdigit )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 BINARY_ADD						      								    								  
96 CALL_METHOD 1					      								    								  
98 POP_TOP						      								    								  
							      								    								  
9 100 LOAD_FAST 3 ( res )				      								    								  
102 LOAD_FAST 2 ( sumofdigit )				      								    								  
104 LOAD_FAST 4 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 3 ( res )				      								    								  
112 JUMP_ABSOLUTE 50					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
10 >> 116 LOAD_FAST 3 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK			      NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK				    NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK				  NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK
--							      --							    --								  --
Disassembly of <code object countSubsequences at 0x7fbac0e8bc def countSubsequences ( s ) :				    def countSubsequences ( s ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  aCount = 0						    	aCount = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( aCount )				      	  bCount = 0						    	bCount = 0						  _sa.test/NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK.py", li
							      	  cCount = 0						    	cCount = 0						  ne 43	    return cCount     ^ SyntaxError: 'return
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( len ( s ) ) :			    	cCount = 0						  ' outside function
6 STORE_FAST 2 ( bCount )				      	      if ( s [ i ] == 'a' ) :				    	for i in range ( len ( s ) ) :				  
							      		  aCount = ( 1 + 2 * aCount )			    	    if s [ i ] == 'a' :					  
4 8 LOAD_CONST 1 ( 0 )					      	      elif ( s [ i ] == 'b' ) :				    		aCount = 1 + 2 * aCount				  
10 STORE_FAST 3 ( cCount )				      		  bCount = ( aCount + 2 * bCount )		    	    elif s [ i ] == 'b' :				  
							      	      elif ( s [ i ] == 'c' ) :				    		bCount = aCount + 2 * bCount			  
5 12 SETUP_LOOP 96 ( to 110 )				      		  cCount = ( bCount + 2 * cCount )		    	    elif s [ i ] == 'c' :				  
14 LOAD_GLOBAL 0 ( range )				      	  return cCount						    		cCount = bCount + 2 * cCount			  
16 LOAD_GLOBAL 1 ( len )				      								    return cCount						  
18 LOAD_FAST 0 ( s )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 80 ( to 108 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 2 ( 'a' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 42 LOAD_CONST 3 ( 1 )					      								    								  
44 LOAD_CONST 4 ( 2 )					      								    								  
46 LOAD_FAST 1 ( aCount )				      								    								  
48 BINARY_MULTIPLY					      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 1 ( aCount )				      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 56 LOAD_FAST 0 ( s )				      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 5 ( 'b' )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
9 68 LOAD_FAST 1 ( aCount )				      								    								  
70 LOAD_CONST 4 ( 2 )					      								    								  
72 LOAD_FAST 2 ( bCount )				      								    								  
74 BINARY_MULTIPLY					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 2 ( bCount )				      								    								  
80 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
10 >> 82 LOAD_FAST 0 ( s )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 6 ( 'c' )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
11 94 LOAD_FAST 2 ( bCount )				      								    								  
96 LOAD_CONST 4 ( 2 )					      								    								  
98 LOAD_FAST 3 ( cCount )				      								    								  
100 BINARY_MULTIPLY					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 3 ( cCount )				      								    								  
106 JUMP_ABSOLUTE 26					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
12 >> 110 LOAD_FAST 3 ( cCount )			      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY
--							      --							    --								  --
Disassembly of <code object findArea at 0x7fbac0e8de40, file  def findArea ( arr , n ) :				    def findArea ( arr , n ) :					  success : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( reverse = True )				    	arr.sort ( reverse = True )				  
2 LOAD_ATTR 0 ( sort )					      	  dimension = [ 0 , 0 ]					    	dimension = [ 0 , 0 ]					  
4 LOAD_CONST 1 ( True )					      	  i = 0							    	i = 0							  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	  j = 0							    	j = 0							  
8 CALL_FUNCTION_KW 1					      	  while ( i < n - 1 and j < 2 ) :			    	while i < n - 1 and j < 2 :				  
10 POP_TOP						      	      if ( arr [ i ] == arr [ i + 1 ] ) :		    	    if arr [ i ] == arr [ i + 1 ] :			  
							      		  dimension [ j ] = arr [ i ]			    		dimension [ j ] = arr [ i ]			  
3 12 LOAD_CONST 3 ( 0 )					      		  j += 1					    		j += 1						  
14 LOAD_CONST 3 ( 0 )					      		  i += 1					    		i += 1						  
16 BUILD_LIST 2						      	      i += 1						    	    i += 1						  
18 STORE_FAST 2 ( dimension )				      	  return ( dimension [ 0 ] * dimension [ 1 ] )		    	return dimension [ 0 ] * dimension [ 1 ]		  
							      								    								  
4 20 LOAD_CONST 3 ( 0 )					      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 24 LOAD_CONST 3 ( 0 )					      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 28 SETUP_LOOP 80 ( to 110 )				      								    								  
>> 30 LOAD_FAST 3 ( i )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_CONST 4 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 108				      								    								  
42 LOAD_FAST 4 ( j )					      								    								  
44 LOAD_CONST 5 ( 2 )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 LOAD_CONST 4 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
8 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 2 ( dimension )				      								    								  
78 LOAD_FAST 4 ( j )					      								    								  
80 STORE_SUBSCR						      								    								  
							      								    								  
9 82 LOAD_FAST 4 ( j )					      								    								  
84 LOAD_CONST 4 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 4 ( j )					      								    								  
							      								    								  
10 90 LOAD_FAST 3 ( i )					      								    								  
92 LOAD_CONST 4 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 >> 98 LOAD_FAST 3 ( i )				      								    								  
100 LOAD_CONST 4 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 3 ( i )					      								    								  
106 JUMP_ABSOLUTE 30					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
12 >> 110 LOAD_FAST 2 ( dimension )			      								    								  
112 LOAD_CONST 3 ( 0 )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 2 ( dimension )				      								    								  
118 LOAD_CONST 4 ( 1 )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY		      COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY		    COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY		  COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY
--							      --							    --								  --
Disassembly of <code object getInvCount at 0x7fbac0e89d20, fi def getInvCount ( arr ) :					    def getInvCount ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  invcount = 0						    	invcount = 0						  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
6 STORE_FAST 1 ( n )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
							      		  if arr [ i ] > arr [ j ] :			    		if arr [ i ] > arr [ j ] :			  
3 8 LOAD_CONST 1 ( 0 )					      		      for k in range ( j + 1 , n ) :		    		    for k in range ( j + 1 , n ) :		  
10 STORE_FAST 2 ( invcount )				      			  if arr [ j ] > arr [ k ] :		    			if arr [ j ] > arr [ k ] :		  
							      			      invcount += 1			    			    invcount += 1			  
4 12 SETUP_LOOP 110 ( to 124 )				      	  return invcount					    return invcount						  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 92 ( to 122 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 SETUP_LOOP 86 ( to 120 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 68 ( to 118 )				      								    								  
50 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 68 SETUP_LOOP 46 ( to 116 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 4 ( j )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 28 ( to 114 )				      								    								  
86 STORE_FAST 5 ( k )					      								    								  
							      								    								  
8 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 5 ( k )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
9 104 LOAD_FAST 2 ( invcount )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 2 ( invcount )				      								    								  
112 JUMP_ABSOLUTE 84					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 48					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 28					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
10 >> 124 LOAD_FAST 2 ( invcount )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_INSERTION_POINT					      LOWER_INSERTION_POINT					    LOWER_INSERTION_POINT					  LOWER_INSERTION_POINT
--							      --							    --								  --
Disassembly of <code object LowerInsertionPoint at 0x7fbac0e8 def LowerInsertionPoint ( arr , n , X ) :			    def LowerInsertionPoint ( arr , n , X ) :			  success : None
2 0 LOAD_FAST 2 ( X )					      	  if ( X < arr [ 0 ] ) :				    	if X < arr [ 0 ] :					  
2 LOAD_FAST 0 ( arr )					      	      return 0 ;					    	    return 0						  
4 LOAD_CONST 1 ( 0 )					      	  elif ( X > arr [ n - 1 ] ) :				    	if X > arr [ n - 1 ] :					  
6 BINARY_SUBSCR						      	      return n						    	    return n						  
8 COMPARE_OP 0 ( < )					      	  lowerPnt = 0						    	lowerPnt = 0						  
10 POP_JUMP_IF_FALSE 16					      	  i = 1							    	i = 1							  
							      	  while ( i < n and arr [ i ] < X ) :			    	while i < n and arr [ i ] < X :				  
3 12 LOAD_CONST 1 ( 0 )					      	      lowerPnt = i					    	    lowerPnt = i					  
14 RETURN_VALUE						      	      i = i * 2						    	    i = i * 2						  
							      	  while ( lowerPnt < n and arr [ lowerPnt ] < X ) :	    	while lowerPnt < n and arr [ lowerPnt ] < X :		  
4 >> 16 LOAD_FAST 2 ( X )				      	      lowerPnt += 1					    	    lowerPnt += 1					  
18 LOAD_FAST 0 ( arr )					      	  return lowerPnt					    	return lowerPnt						  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 BINARY_SUBSCR					      								    								  
28 COMPARE_OP 4 ( > )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 32 LOAD_FAST 1 ( n )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_CONST 1 ( 0 )				      								    								  
38 STORE_FAST 3 ( lowerPnt )				      								    								  
							      								    								  
7 40 LOAD_CONST 2 ( 1 )					      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 44 SETUP_LOOP 36 ( to 82 )				      								    								  
>> 46 LOAD_FAST 4 ( i )					      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 80					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 2 ( X )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
9 66 LOAD_FAST 4 ( i )					      								    								  
68 STORE_FAST 3 ( lowerPnt )				      								    								  
							      								    								  
10 70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 STORE_FAST 4 ( i )					      								    								  
78 JUMP_ABSOLUTE 46					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
11 >> 82 SETUP_LOOP 32 ( to 116 )			      								    								  
>> 84 LOAD_FAST 3 ( lowerPnt )				      								    								  
86 LOAD_FAST 1 ( n )					      								    								  
88 COMPARE_OP 0 ( < )					      								    								  
90 POP_JUMP_IF_FALSE 114				      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( lowerPnt )				      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 2 ( X )					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
12 104 LOAD_FAST 3 ( lowerPnt )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 3 ( lowerPnt )				      								    								  
112 JUMP_ABSOLUTE 84					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
13 >> 116 LOAD_FAST 3 ( lowerPnt )			      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PARTITION_INTO_TWO_SUB<unk> YS_OF<unk> THS_K_AND_N_K_SUCH_THA PARTITION_INTO_TWO_SUB<unk> YS_OF<unk> THS_K_AND_N_K_SUCH_THA PARTITION_INTO_TWO_SUB<unk> YS_OF<unk> THS_K_AND_N_K_SUCH_THA PARTITION_INTO_TWO_SUB<unk> YS_OF<unk> THS_K_AND_N_K_SUCH_THA
--							      --							    --								  --
Disassembly of <code object maxDifference at 0x7fbac0e8de40,  def maxDifference ( arr , N , k ) :			    def maxDifference ( arr , N , k = 0 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  S = 0							    	S = 0							  
2 STORE_FAST 3 ( S )					      	  S1 = 0						    	S1 = 0							  
							      	  max_difference = 0					    	max_difference = 0					  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
6 STORE_FAST 4 ( S1 )					      	      S += arr [ i ]					    	    S += arr [ i ]					  
							      	  arr.sort ( reverse = True )				    	arr.sort ( reverse = True )				  
4 8 LOAD_CONST 1 ( 0 )					      	  M = max ( k , N - k )					    	M = max ( k , N - k )					  
10 STORE_FAST 5 ( max_difference )			      	  for i in range ( M ) :				    	for i in range ( M ) :					  
							      	      S1 += arr [ i ]					    	    S1 += arr [ i ]					  
5 12 SETUP_LOOP 28 ( to 42 )				      	  max_difference = S1 - ( S - S1 )			    	max_difference = S1 - S - S1				  
14 LOAD_GLOBAL 0 ( range )				      	  return max_difference					    	return max_difference					  
16 LOAD_FAST 1 ( N )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 16 ( to 40 )				      								    								  
24 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( S )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 6 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 3 ( S )					      								    								  
38 JUMP_ABSOLUTE 22					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_ATTR 1 ( sort )					      								    								  
46 LOAD_CONST 2 ( True )				      								    								  
48 LOAD_CONST 3 ( ( 'reverse' , ) )			      								    								  
50 CALL_FUNCTION_KW 1					      								    								  
52 POP_TOP						      								    								  
							      								    								  
8 54 LOAD_GLOBAL 2 ( max )				      								    								  
56 LOAD_FAST 2 ( k )					      								    								  
58 LOAD_FAST 1 ( N )					      								    								  
60 LOAD_FAST 2 ( k )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 STORE_FAST 7 ( M )					      								    								  
							      								    								  
9 68 SETUP_LOOP 28 ( to 98 )				      								    								  
70 LOAD_GLOBAL 0 ( range )				      								    								  
72 LOAD_FAST 7 ( M )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 16 ( to 96 )				      								    								  
80 STORE_FAST 6 ( i )					      								    								  
							      								    								  
10 82 LOAD_FAST 4 ( S1 )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 6 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 4 ( S1 )					      								    								  
94 JUMP_ABSOLUTE 78					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
11 >> 98 LOAD_FAST 4 ( S1 )				      								    								  
100 LOAD_FAST 3 ( S )					      								    								  
102 LOAD_FAST 4 ( S1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 5 ( max_difference )			      								    								  
							      								    								  
12 110 LOAD_FAST 5 ( max_difference )			      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_<unk> E_OF_ WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_<unk> E_OF_ WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_<unk> E_OF_ WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_<unk> E_OF_
--							      --							    --								  --
Disassembly of <code object isMultipleOf3 at 0x7fbac0e8bc90,  def isMultipleOf3 ( n ) :					    def isMultipleOf3 ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  odd_count = 0						    	odd_count = 0						  
2 STORE_FAST 1 ( odd_count )				      	  even_count = 0					    	even_count = 0						  
							      	  if ( n < 0 ) :					    	if n < 0 :						  
3 4 LOAD_CONST 1 ( 0 )					      	      n = - n						    	    n = - n						  
6 STORE_FAST 2 ( even_count )				      	  if ( n == 0 ) :					    	if n == 0 :						  
							      	      return 1						    	    return 1						  
4 8 LOAD_FAST 0 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
10 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
12 COMPARE_OP 0 ( < )					      	  while ( n ) :						    	while n :						  
14 POP_JUMP_IF_FALSE 22					      	      if ( n & 1 ) :					    	    if n & 1 :						  
							      		  odd_count += 1				    		odd_count += 1					  
5 16 LOAD_FAST 0 ( n )					      	      if ( n & 2 ) :					    	    if n & 2 :						  
18 UNARY_NEGATIVE					      		  even_count += 1				    		even_count += 1					  
20 STORE_FAST 0 ( n )					      	      n = n >> 2					    	    n = n // 2						  
							      	  return isMultipleOf3 ( abs ( odd_count - even_count ) )   return isMultipleOf3 ( abs ( odd_count - even_count ) )	  
6 >> 22 LOAD_FAST 0 ( n )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 2 ( == )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
7 30 LOAD_CONST 2 ( 1 )					      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
8 >> 34 LOAD_FAST 0 ( n )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
9 42 LOAD_CONST 1 ( 0 )					      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
10 >> 46 SETUP_LOOP 48 ( to 96 )			      								    								  
>> 48 LOAD_FAST 0 ( n )					      								    								  
50 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
11 52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_AND						      								    								  
58 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
12 60 LOAD_FAST 1 ( odd_count )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 1 ( odd_count )				      								    								  
							      								    								  
13 >> 68 LOAD_FAST 0 ( n )				      								    								  
70 LOAD_CONST 3 ( 2 )					      								    								  
72 BINARY_AND						      								    								  
74 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
14 76 LOAD_FAST 2 ( even_count )			      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 2 ( even_count )				      								    								  
							      								    								  
15 >> 84 LOAD_FAST 0 ( n )				      								    								  
86 LOAD_CONST 3 ( 2 )					      								    								  
88 BINARY_RSHIFT					      								    								  
90 STORE_FAST 0 ( n )					      								    								  
92 JUMP_ABSOLUTE 48					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
16 >> 96 LOAD_GLOBAL 0 ( isMultipleOf3 )		      								    								  
98 LOAD_GLOBAL 1 ( abs )				      								    								  
100 LOAD_FAST 1 ( odd_count )				      								    								  
102 LOAD_FAST 2 ( even_count )				      								    								  
104 BINARY_SUBTRACT					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			      FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			    FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE				  FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE
--							      --							    --								  --
Disassembly of <code object Dragon_Curve_Sequence at 0x7fbac0 def Dragon_Curve_Sequence ( n ) :				    def Dragon_Curve_Sequence ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( '1' )				      	  s = "1"						    	s = '1'							  
2 STORE_FAST 1 ( s )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
							      	      temp = "1"					    	    temp = '1'						  
3 4 SETUP_LOOP 110 ( to 116 )				      	      prev = '1'					    	    prev = '0'						  
6 LOAD_GLOBAL 0 ( range )				      	      zero = '0'					    	    one = '1'						  
8 LOAD_CONST 2 ( 2 )					      	      one = '1'						    	    for j in range ( len ( s ) ) :			  
10 LOAD_FAST 0 ( n )					      	      for j in range ( len ( s ) ) :			    		temp += s [ j ]					  
12 LOAD_CONST 3 ( 1 )					      		  temp += s [ j ]				    		if prev == '0' :				  
14 BINARY_ADD						      		  if ( prev == '0' ) :				    		    temp += one					  
16 CALL_FUNCTION 2					      		      temp += one				    		    prev = one					  
18 GET_ITER						      		      prev = one				    		else :						  
>> 20 FOR_ITER 92 ( to 114 )				      		  else :					    		    temp += zero				  
22 STORE_FAST 2 ( i )					      		      temp += zero				    		    prev = zero					  
							      		      prev = zero				    	    s = temp						  
4 24 LOAD_CONST 1 ( '1' )				      	      s = temp						    	return s						  
26 STORE_FAST 3 ( temp )				      	  return s						    								  
							      								    								  
5 28 LOAD_CONST 1 ( '1' )				      								    								  
30 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
6 32 LOAD_CONST 4 ( '0' )				      								    								  
34 STORE_FAST 5 ( zero )				      								    								  
							      								    								  
7 36 LOAD_CONST 1 ( '1' )				      								    								  
38 STORE_FAST 6 ( one )					      								    								  
							      								    								  
8 40 SETUP_LOOP 66 ( to 108 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_GLOBAL 1 ( len )				      								    								  
46 LOAD_FAST 1 ( s )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 50 ( to 106 )				      								    								  
56 STORE_FAST 7 ( j )					      								    								  
							      								    								  
9 58 LOAD_FAST 3 ( temp )				      								    								  
60 LOAD_FAST 1 ( s )					      								    								  
62 LOAD_FAST 7 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
10 70 LOAD_FAST 4 ( prev )				      								    								  
72 LOAD_CONST 4 ( '0' )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
11 78 LOAD_FAST 3 ( temp )				      								    								  
80 LOAD_FAST 6 ( one )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
12 86 LOAD_FAST 6 ( one )				      								    								  
88 STORE_FAST 4 ( prev )				      								    								  
90 JUMP_ABSOLUTE 54					      								    								  
							      								    								  
14 >> 92 LOAD_FAST 3 ( temp )				      								    								  
94 LOAD_FAST 5 ( zero )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
15 100 LOAD_FAST 5 ( zero )				      								    								  
102 STORE_FAST 4 ( prev )				      								    								  
104 JUMP_ABSOLUTE 54					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
16 >> 108 LOAD_FAST 3 ( temp )				      								    								  
110 STORE_FAST 1 ( s )					      								    								  
112 JUMP_ABSOLUTE 20					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
17 >> 116 LOAD_FAST 1 ( s )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTISTAGE_GRAPH_SHORTEST_PATH				      MULTISTAGE_GRAPH_SHORTEST_PATH				    MULTISTAGE_GRAPH_SHORTEST_PATH				  MULTISTAGE_GRAPH_SHORTEST_PATH
--							      --							    --								  --
Disassembly of <code object shortestDist at 0x7fbac0e8bc90, f def shortestDist ( graph ) :				    def shortestDist ( graph ) :				  script_not_found : None
3 0 LOAD_CONST 1 ( 0 )					      	  global INF						    	global N						  
2 BUILD_LIST 1						      	  dist = [ 0 ] * N					    	dist = [ 0 ] * N					  
4 LOAD_GLOBAL 0 ( N )					      	  dist [ N - 1 ] = 0					    	dist [ N - 1 ] = 0					  
6 BINARY_MULTIPLY					      	  for i in range ( N - 2 , - 1 , - 1 ) :		    	for i in range ( N - 2 , - 1 , - 1 ) :			  
8 STORE_FAST 1 ( dist )					      	      dist [ i ] = INF					    	    dist [ i ] = INF					  
							      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
4 10 LOAD_CONST 1 ( 0 )					      		  if graph [ i ] [ j ] == INF :			    		if graph [ i ] [ j ] == INF :			  
12 LOAD_FAST 1 ( dist )					      		      continue					    		    continue					  
14 LOAD_GLOBAL 0 ( N )					      		  dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] 		dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] 
16 LOAD_CONST 2 ( 1 )					      	  return dist [ 0 ]					    return dist [ 0 ]						  
18 BINARY_SUBTRACT					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
5 22 SETUP_LOOP 102 ( to 126 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_GLOBAL 0 ( N )					      								    								  
28 LOAD_CONST 3 ( 2 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_CONST 4 ( - 1 )					      								    								  
34 LOAD_CONST 4 ( - 1 )					      								    								  
36 CALL_FUNCTION 3					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 82 ( to 124 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 2 ( INF )				      								    								  
46 LOAD_FAST 1 ( dist )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
							      								    								  
7 52 SETUP_LOOP 68 ( to 122 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_GLOBAL 0 ( N )					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 56 ( to 120 )				      								    								  
64 STORE_FAST 3 ( j )					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( graph )				      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 3 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_GLOBAL 2 ( INF )				      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
9 82 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
10 >> 84 LOAD_GLOBAL 3 ( min )				      								    								  
86 LOAD_FAST 1 ( dist )					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 0 ( graph )				      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 3 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 1 ( dist )				      								    								  
104 LOAD_FAST 3 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 CALL_FUNCTION 2					      								    								  
112 LOAD_FAST 1 ( dist )				      								    								  
114 LOAD_FAST 2 ( i )					      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 62					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 40					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
11 >> 126 LOAD_FAST 1 ( dist )				      								    								  
128 LOAD_CONST 1 ( 0 )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SORT_STRING_DESCENDING_ORDER			      PROGRAM_SORT_STRING_DESCENDING_ORDER			    PROGRAM_SORT_STRING_DESCENDING_ORDER			  PROGRAM_SORT_STRING_DESCENDING_ORDER
--							      --							    --								  --
Disassembly of <code object sortString at 0x7fbac0e8bc90, fil def sortString ( str ) :					    def sortString ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  charCount = [ 0 ] * MAX_CHAR ;			    	charCount = [ 0 ] * MAX_CHAR				  
2 BUILD_LIST 1						      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      charCount [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1 ;  	    charCount [ ord ( str [ i ] ) - ord ( "a" ) ] += 1	  
6 BINARY_MULTIPLY					      	  for i in range ( MAX_CHAR - 1 , - 1 , - 1 ) :		    	for i in range ( MAX_CHAR - 1 , - 1 , - 1 ) :		  
8 STORE_FAST 1 ( charCount )				      	      for j in range ( charCount [ i ] ) :		    	    for j in range ( charCount [ i ] ) :		  
							      		  print ( chr ( 97 + i ) , end = "" ) ;		    		print ( chr ( 97 + i ) , end = "" )		  
3 10 SETUP_LOOP 52 ( to 64 )				      								    								  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_GLOBAL 2 ( len )				      								    								  
16 LOAD_FAST 0 ( str )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 1 ( charCount )				      								    								  
30 LOAD_GLOBAL 3 ( ord )				      								    								  
32 LOAD_FAST 0 ( str )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 LOAD_GLOBAL 3 ( ord )				      								    								  
42 LOAD_CONST 2 ( 'a' )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 DUP_TOP_TWO						      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_CONST 3 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 ROT_THREE						      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
5 >> 64 SETUP_LOOP 66 ( to 132 )			      								    								  
66 LOAD_GLOBAL 1 ( range )				      								    								  
68 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_CONST 4 ( - 1 )					      								    								  
76 LOAD_CONST 4 ( - 1 )					      								    								  
78 CALL_FUNCTION 3					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 46 ( to 130 )				      								    								  
84 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 86 SETUP_LOOP 40 ( to 128 )				      								    								  
88 LOAD_GLOBAL 1 ( range )				      								    								  
90 LOAD_FAST 1 ( charCount )				      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 24 ( to 126 )				      								    								  
102 STORE_FAST 3 ( j )					      								    								  
							      								    								  
7 104 LOAD_GLOBAL 4 ( print )				      								    								  
106 LOAD_GLOBAL 5 ( chr )				      								    								  
108 LOAD_CONST 5 ( 97 )					      								    								  
110 LOAD_FAST 2 ( i )					      								    								  
112 BINARY_ADD						      								    								  
114 CALL_FUNCTION 1					      								    								  
116 LOAD_CONST 6 ( '' )					      								    								  
118 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 POP_TOP						      								    								  
124 JUMP_ABSOLUTE 100					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 JUMP_ABSOLUTE 82					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIZE_SUBARRAY_MAXIMUM_SUM				      SIZE_SUBARRAY_MAXIMUM_SUM					    SIZE_SUBARRAY_MAXIMUM_SUM					  SIZE_SUBARRAY_MAXIMUM_SUM
--							      --							    --								  --
Disassembly of <code object maxSubArraySum at 0x7fbac0e8d540, def maxSubArraySum ( a , size ) :				    def maxSubArraySum ( a , size ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( maxsize )				      	  max_so_far = - maxsize - 1				    	max_so_far = - maxsize - 1				  
2 UNARY_NEGATIVE					      	  max_ending_here = 0					    	max_ending_here = 0					  
4 LOAD_CONST 1 ( 1 )					      	  start = 0						    	start = 0						  
6 BINARY_SUBTRACT					      	  end = 0						    	end = 0							  
8 STORE_FAST 2 ( max_so_far )				      	  s = 0							    	s = 0							  
							      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
3 10 LOAD_CONST 2 ( 0 )					      	      max_ending_here += a [ i ]			    	    max_ending_here += a [ i ]				  
12 STORE_FAST 3 ( max_ending_here )			      	      if max_so_far < max_ending_here :			    	    if max_so_far < max_ending_here :			  
							      		  max_so_far = max_ending_here			    		max_so_far = max_ending_here			  
4 14 LOAD_CONST 2 ( 0 )					      		  start = s					    		start = s					  
16 STORE_FAST 4 ( start )				      		  end = i					    		end = i						  
							      	      if max_ending_here < 0 :				    	    if max_ending_here < 0 :				  
5 18 LOAD_CONST 2 ( 0 )					      		  max_ending_here = 0				    		max_ending_here = 0				  
20 STORE_FAST 5 ( end )					      		  s = i + 1					    		s = i + 1					  
							      	  return ( end - start + 1 )				    	return ( end - start ) + 1				  
6 22 LOAD_CONST 2 ( 0 )					      								    								  
24 STORE_FAST 6 ( s )					      								    								  
							      								    								  
7 26 SETUP_LOOP 70 ( to 98 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 LOAD_FAST 1 ( size )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 56 ( to 96 )				      								    								  
40 STORE_FAST 7 ( i )					      								    								  
							      								    								  
8 42 LOAD_FAST 3 ( max_ending_here )			      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 7 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 3 ( max_ending_here )			      								    								  
							      								    								  
9 54 LOAD_FAST 2 ( max_so_far )				      								    								  
56 LOAD_FAST 3 ( max_ending_here )			      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
10 62 LOAD_FAST 3 ( max_ending_here )			      								    								  
64 STORE_FAST 2 ( max_so_far )				      								    								  
							      								    								  
11 66 LOAD_FAST 6 ( s )					      								    								  
68 STORE_FAST 4 ( start )				      								    								  
							      								    								  
12 70 LOAD_FAST 7 ( i )					      								    								  
72 STORE_FAST 5 ( end )					      								    								  
							      								    								  
13 >> 74 LOAD_FAST 3 ( max_ending_here )		      								    								  
76 LOAD_CONST 2 ( 0 )					      								    								  
78 COMPARE_OP 0 ( < )					      								    								  
80 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
14 82 LOAD_CONST 2 ( 0 )				      								    								  
84 STORE_FAST 3 ( max_ending_here )			      								    								  
							      								    								  
15 86 LOAD_FAST 7 ( i )					      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 6 ( s )					      								    								  
94 JUMP_ABSOLUTE 38					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
16 >> 98 LOAD_FAST 5 ( end )				      								    								  
100 LOAD_FAST 4 ( start )				      								    								  
102 BINARY_SUBTRACT					      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DISTANCE_TWO_POINTS_EARTH			      PROGRAM_DISTANCE_TWO_POINTS_EARTH				    PROGRAM_DISTANCE_TWO_POINTS_EARTH				  PROGRAM_DISTANCE_TWO_POINTS_EARTH
--							      --							    --								  --
Disassembly of <code object distance at 0x7fbac0e8de40, file  def distance ( lat1 , lat2 , lon1 , lon2 ) :		    def distance ( lat1 , lat2 , lon1 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( radians )				      	  lon1 = radians ( lon1 )				    	lon1 = radians ( lon1 )					  
2 LOAD_FAST 2 ( lon1 )					      	  lon2 = radians ( lon2 )				    	lon2 = radians ( lon2 )					  
4 CALL_FUNCTION 1					      	  lat1 = radians ( lat1 )				    	lat1 = radians ( lat1 )					  
6 STORE_FAST 2 ( lon1 )					      	  lat2 = radians ( lat2 )				    	lat2 = radians ( lat2 )					  
							      	  dlon = lon2 - lon1					    	dlon = lon2 - lon1					  
3 8 LOAD_GLOBAL 0 ( radians )				      	  dlat = lat2 - lat1					    	dlat = lat2 - lat1					  
10 LOAD_FAST 3 ( lon2 )					      	  a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * 	a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( dlon / 2 
12 CALL_FUNCTION 1					      	  c = 2 * asin ( sqrt ( a ) )				    	c = 2 * asin ( sqrt ( a ) )				  
14 STORE_FAST 3 ( lon2 )				      	  r = 6371						    	r = 6371						  
							      	  return ( c * r )					    	return c * r						  
4 16 LOAD_GLOBAL 0 ( radians )				      								    								  
18 LOAD_FAST 0 ( lat1 )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 STORE_FAST 0 ( lat1 )				      								    								  
							      								    								  
5 24 LOAD_GLOBAL 0 ( radians )				      								    								  
26 LOAD_FAST 1 ( lat2 )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 STORE_FAST 1 ( lat2 )				      								    								  
							      								    								  
6 32 LOAD_FAST 3 ( lon2 )				      								    								  
34 LOAD_FAST 2 ( lon1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 STORE_FAST 4 ( dlon )				      								    								  
							      								    								  
7 40 LOAD_FAST 1 ( lat2 )				      								    								  
42 LOAD_FAST 0 ( lat1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_FAST 5 ( dlat )				      								    								  
							      								    								  
8 48 LOAD_GLOBAL 1 ( sin )				      								    								  
50 LOAD_FAST 5 ( dlat )					      								    								  
52 LOAD_CONST 1 ( 2 )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 1 ( 2 )					      								    								  
60 BINARY_POWER						      								    								  
62 LOAD_GLOBAL 2 ( cos )				      								    								  
64 LOAD_FAST 0 ( lat1 )					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_GLOBAL 2 ( cos )				      								    								  
70 LOAD_FAST 1 ( lat2 )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_GLOBAL 1 ( sin )				      								    								  
78 LOAD_FAST 4 ( dlon )					      								    								  
80 LOAD_CONST 1 ( 2 )					      								    								  
82 BINARY_TRUE_DIVIDE					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 LOAD_CONST 1 ( 2 )					      								    								  
88 BINARY_POWER						      								    								  
90 BINARY_MULTIPLY					      								    								  
92 BINARY_ADD						      								    								  
94 STORE_FAST 6 ( a )					      								    								  
							      								    								  
9 96 LOAD_CONST 1 ( 2 )					      								    								  
98 LOAD_GLOBAL 3 ( asin )				      								    								  
100 LOAD_GLOBAL 4 ( sqrt )				      								    								  
102 LOAD_FAST 6 ( a )					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_MULTIPLY					      								    								  
110 STORE_FAST 7 ( c )					      								    								  
							      								    								  
10 112 LOAD_CONST 2 ( 6371 )				      								    								  
114 STORE_FAST 8 ( r )					      								    								  
							      								    								  
11 116 LOAD_FAST 7 ( c )				      								    								  
118 LOAD_FAST 8 ( r )					      								    								  
120 BINARY_MULTIPLY					      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac0e8d8a0, file " def findSum ( n ) :					    def findSum ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ; temp = 0 ;					    	ans = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( ans )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  _sa.test/SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISI
4 LOAD_CONST 1 ( 0 )					      	      if temp < n :					    	    if temp < n :					  ON_ROW_COLUMN_1.py", line 46	   return ans	  ^
6 STORE_FAST 2 ( temp )					      		  temp = i - 1					    		temp = i - 1					  SyntaxError: 'return' outside function
							      		  num = 1					    		num = 1						  
3 8 SETUP_LOOP 114 ( to 124 )				      		  while temp < n :				    		while temp < n :				  
10 LOAD_GLOBAL 0 ( range )				      		      if temp + i <= n :			    		    if temp + i <= n :				  
12 LOAD_CONST 2 ( 1 )					      			  ans += i * num			    			ans += i * num				  
14 LOAD_FAST 0 ( n )					      		      else :					    		else :						  
16 LOAD_CONST 2 ( 1 )					      			  ans += ( n - temp ) * num		    		    ans += ( n - temp ) * num			  
18 BINARY_ADD						      		      temp += i					    	    temp += i						  
20 CALL_FUNCTION 2					      		      num += 1					    	    num += 1						  
22 GET_ITER						      	  return ans						    return ans							  
>> 24 FOR_ITER 96 ( to 122 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 2 ( temp )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
6 44 LOAD_CONST 2 ( 1 )					      								    								  
46 STORE_FAST 4 ( num )					      								    								  
							      								    								  
7 48 SETUP_LOOP 70 ( to 120 )				      								    								  
>> 50 LOAD_FAST 2 ( temp )				      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 COMPARE_OP 0 ( < )					      								    								  
56 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
8 58 LOAD_FAST 2 ( temp )				      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_ADD						      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 COMPARE_OP 1 ( <= )					      								    								  
68 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( ans )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 LOAD_FAST 4 ( num )					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 1 ( ans )					      								    								  
82 JUMP_FORWARD 16 ( to 100 )				      								    								  
							      								    								  
11 >> 84 LOAD_FAST 1 ( ans )				      								    								  
86 LOAD_FAST 0 ( n )					      								    								  
88 LOAD_FAST 2 ( temp )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_FAST 4 ( num )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 1 ( ans )					      								    								  
							      								    								  
12 >> 100 LOAD_FAST 2 ( temp )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
13 108 LOAD_FAST 4 ( num )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( num )				      								    								  
116 JUMP_ABSOLUTE 50					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 24					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
14 >> 124 LOAD_FAST 1 ( ans )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING	      MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		    MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		  MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING
--							      --							    --								  --
Disassembly of <code object maxDP at 0x7fbac0e8de40, file "<d def maxDP ( n ) :						    def maxDP ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( list )				      	  res = list ( )					    	res = list ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  res.append ( 0 )					    	res.append ( 0 )					  _sa.test/MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONS
4 STORE_FAST 1 ( res )					      	  res.append ( 1 )					    	res.append ( 1 )					  IDERING.py", line 35	   i = i + 1	 ^ SyntaxErr
							      	  i = 2							    	i = 2							  or: invalid syntax
3 6 LOAD_FAST 1 ( res )					      	  while i < n + 1 :					    	while i < n + 1 :					  
8 LOAD_METHOD 1 ( append )				      	      res.append ( max ( i , ( res [ int ( i / 2 ) ] + res  	    res.append ( max ( i [ res : int ( i / 2 ) ] + res [  
10 LOAD_CONST 1 ( 0 )					      	      i = i + 1						    	    i = i + 1						  
12 CALL_METHOD 1					      	  return res [ n ]					    	return res [ n ]					  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_FAST 1 ( res )				      								    								  
18 LOAD_METHOD 1 ( append )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 CALL_METHOD 1					      								    								  
24 POP_TOP						      								    								  
							      								    								  
5 26 LOAD_CONST 3 ( 2 )					      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 30 SETUP_LOOP 100 ( to 132 )				      								    								  
>> 32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
7 44 LOAD_FAST 1 ( res )				      								    								  
46 LOAD_METHOD 1 ( append )				      								    								  
48 LOAD_GLOBAL 2 ( max )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 LOAD_FAST 1 ( res )					      								    								  
54 LOAD_GLOBAL 3 ( int )				      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( res )					      								    								  
68 LOAD_GLOBAL 3 ( int )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 4 ( 3 )					      								    								  
74 BINARY_TRUE_DIVIDE					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 1 ( res )					      								    								  
84 LOAD_GLOBAL 3 ( int )				      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 5 ( 4 )					      								    								  
90 BINARY_TRUE_DIVIDE					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 1 ( res )					      								    								  
100 LOAD_GLOBAL 3 ( int )				      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 LOAD_CONST 6 ( 5 )					      								    								  
106 BINARY_TRUE_DIVIDE					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 BINARY_SUBSCR					      								    								  
112 BINARY_ADD						      								    								  
114 CALL_FUNCTION 2					      								    								  
116 CALL_METHOD 1					      								    								  
118 POP_TOP						      								    								  
							      								    								  
8 120 LOAD_FAST 2 ( i )					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 2 ( i )					      								    								  
128 JUMP_ABSOLUTE 32					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
9 >> 132 LOAD_FAST 1 ( res )				      								    								  
134 LOAD_FAST 0 ( n )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL
--							      --							    --								  --
Disassembly of <code object findMinimumAngle at 0x7fbac0e89d2 def findMinimumAngle ( arr , n ) :			    def findMinimumAngle ( arr , n ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  l = 0							    	l = 0							  
2 STORE_FAST 2 ( l )					      	  _sum = 0						    	_sum = 0						  
							      	  ans = 360						    	ans = 360						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 3 ( _sum )					      	      _sum += arr [ i ]					    	    _sum += arr [ i ]					  
							      	      while _sum >= 180 :				    	    while _sum >= 180 :					  
4 8 LOAD_CONST 2 ( 360 )				      		  ans = min ( ans , 2 * abs ( 180 - _sum ) )	    		ans = min ( ans , 2 * abs ( 180 - _sum ) )	  
10 STORE_FAST 4 ( ans )					      		  _sum -= arr [ l ]				    		_sum -= arr [ l ]				  
							      		  l += 1					    		l += 1						  
5 12 SETUP_LOOP 106 ( to 120 )				      	      ans = min ( ans , 2 * abs ( 180 - _sum ) )	    	    ans = min ( ans , 2 * abs ( 180 - _sum ) )		  
14 LOAD_GLOBAL 0 ( range )				      	  return ans						    	return ans						  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 94 ( to 118 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( _sum )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 3 ( _sum )				      								    								  
							      								    								  
7 38 SETUP_LOOP 54 ( to 94 )				      								    								  
>> 40 LOAD_FAST 3 ( _sum )				      								    								  
42 LOAD_CONST 3 ( 180 )					      								    								  
44 COMPARE_OP 5 ( >= )					      								    								  
46 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
8 48 LOAD_GLOBAL 1 ( min )				      								    								  
50 LOAD_FAST 4 ( ans )					      								    								  
52 LOAD_CONST 4 ( 2 )					      								    								  
54 LOAD_GLOBAL 2 ( abs )				      								    								  
56 LOAD_CONST 3 ( 180 )					      								    								  
58 LOAD_FAST 3 ( _sum )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
9 70 LOAD_FAST 3 ( _sum )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 2 ( l )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 INPLACE_SUBTRACT					      								    								  
80 STORE_FAST 3 ( _sum )				      								    								  
							      								    								  
10 82 LOAD_FAST 2 ( l )					      								    								  
84 LOAD_CONST 5 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 2 ( l )					      								    								  
90 JUMP_ABSOLUTE 40					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 LOAD_GLOBAL 1 ( min )				      								    								  
96 LOAD_FAST 4 ( ans )					      								    								  
98 LOAD_CONST 4 ( 2 )					      								    								  
100 LOAD_GLOBAL 2 ( abs )				      								    								  
102 LOAD_CONST 3 ( 180 )				      								    								  
104 LOAD_FAST 3 ( _sum )				      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 BINARY_MULTIPLY					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 STORE_FAST 4 ( ans )				      								    								  
116 JUMP_ABSOLUTE 22					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
12 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY		      MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			    MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			  MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY
--							      --							    --								  --
Disassembly of <code object findLongestConseqSubseq at 0x7fba def findLongestConseqSubseq ( arr , n ) :			    def findLongestConseqSubseq ( arr , n ) :			  success : None
2 0 LOAD_GLOBAL 0 ( set )				      	  S = set ( ) ;						    	S = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( S )					      	      S.add ( arr [ i ] ) ;				    	    S.add ( arr [ i ] )					  
							      	  ans = 0 ;						    	ans = 0							  
3 6 SETUP_LOOP 30 ( to 38 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
8 LOAD_GLOBAL 1 ( range )				      	      if S.__contains__ ( arr [ i ] ) :			    	    if S.__contains__ ( arr [ i ] ) :			  
10 LOAD_FAST 1 ( n )					      		  j = arr [ i ] ;				    		j = arr [ i ]					  
12 CALL_FUNCTION 1					      		  while ( S.__contains__ ( j ) ) :		    		while S.__contains__ ( j ) :			  
14 GET_ITER						      		      j += 1 ;					    		    j += 1					  
>> 16 FOR_ITER 18 ( to 36 )				      		  ans = max ( ans , j - arr [ i ] ) ;		    	    ans = max ( ans , j - arr [ i ] )			  
18 STORE_FAST 3 ( i )					      	  return ans ;						    	return ans						  
							      								    								  
4 20 LOAD_FAST 2 ( S )					      								    								  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_CONST 1 ( 0 )				      								    								  
40 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
6 42 SETUP_LOOP 80 ( to 124 )				      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 68 ( to 122 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 56 LOAD_FAST 2 ( S )					      								    								  
58 LOAD_METHOD 3 ( __contains__ )			      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_METHOD 1					      								    								  
68 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
8 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 78 SETUP_LOOP 22 ( to 102 )				      								    								  
>> 80 LOAD_FAST 2 ( S )					      								    								  
82 LOAD_METHOD 3 ( __contains__ )			      								    								  
84 LOAD_FAST 5 ( j )					      								    								  
86 CALL_METHOD 1					      								    								  
88 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
10 90 LOAD_FAST 5 ( j )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 5 ( j )					      								    								  
98 JUMP_ABSOLUTE 80					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_GLOBAL 4 ( max )				      								    								  
104 LOAD_FAST 4 ( ans )					      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 CALL_FUNCTION 2					      								    								  
118 STORE_FAST 4 ( ans )				      								    								  
120 JUMP_ABSOLUTE 52					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
12 >> 124 LOAD_FAST 4 ( ans )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	      COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	    COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	  COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES
--							      --							    --								  --
Disassembly of <code object countwalks at 0x7fbac0e8bc90, fil def countwalks ( graph , u , v , k ) :			    def countwalks ( graph , u , v , k ) :			  script_not_found : None
2 0 LOAD_FAST 3 ( k )					      	  if ( k == 0 and u == v ) :				    	if k == 0 and u == v :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( k == 1 and graph [ u ] [ v ] ) :			    	if k == 1 and graph [ u ] [ v ] :			  
6 POP_JUMP_IF_FALSE 20					      	      return 1						    	    return 1						  
8 LOAD_FAST 1 ( u )					      	  if ( k <= 0 ) :					    	if k <= 0 :						  
10 LOAD_FAST 2 ( v )					      	      return 0						    	    return 0						  
12 COMPARE_OP 2 ( == )					      	  count = 0						    	count = 0						  
14 POP_JUMP_IF_FALSE 20					      	  for i in range ( 0 , V ) :				    	for i in range ( 0 , V ) :				  
							      	      if ( graph [ u ] [ i ] == 1 ) :			    	    if graph [ u ] [ i ] == 1 :				  
3 16 LOAD_CONST 2 ( 1 )					      		  count += countwalks ( graph , i , v , k - 1 )	    		count += countwalks ( graph , i , v , k - 1 )	  
18 RETURN_VALUE						      	  return count						    	return count						  
							      								    								  
4 >> 20 LOAD_FAST 3 ( k )				      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 44					      								    								  
28 LOAD_FAST 0 ( graph )				      								    								  
30 LOAD_FAST 1 ( u )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( v )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
5 40 LOAD_CONST 2 ( 1 )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
6 >> 44 LOAD_FAST 3 ( k )				      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 1 ( <= )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 52 LOAD_CONST 1 ( 0 )					      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 LOAD_CONST 1 ( 0 )				      								    								  
58 STORE_FAST 4 ( count )				      								    								  
							      								    								  
9 60 SETUP_LOOP 56 ( to 118 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 LOAD_GLOBAL 1 ( V )					      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 42 ( to 116 )				      								    								  
74 STORE_FAST 5 ( i )					      								    								  
							      								    								  
10 76 LOAD_FAST 0 ( graph )				      								    								  
78 LOAD_FAST 1 ( u )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 5 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
11 92 LOAD_FAST 4 ( count )				      								    								  
94 LOAD_GLOBAL 2 ( countwalks )				      								    								  
96 LOAD_FAST 0 ( graph )				      								    								  
98 LOAD_FAST 5 ( i )					      								    								  
100 LOAD_FAST 2 ( v )					      								    								  
102 LOAD_FAST 3 ( k )					      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 4					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 4 ( count )				      								    								  
114 JUMP_ABSOLUTE 72					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 4 ( count )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_REVERSE_STRING_REMOVING_VOWELS			      PRINT_REVERSE_STRING_REMOVING_VOWELS			    PRINT_REVERSE_STRING_REMOVING_VOWELS			  PRINT_REVERSE_STRING_REMOVING_VOWELS
--							      --							    --								  --
Disassembly of <code object replaceOriginal at 0x7fbac0e8bc90 def replaceOriginal ( s , n ) :				    def replaceOriginal ( s , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( ' ' )				      	  r = [ ' ' ] * n					    	r = [ "" ] * n						  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_FAST 1 ( n )					      	      r [ i ] = s [ n - 1 - i ]				    	    r [ i ] = s [ n - 1 - i ]				  
6 BINARY_MULTIPLY					      	      if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] != 	    if s [ i ] != "a" and s [ i ] != "e" and s [ i ] != " 
8 STORE_FAST 2 ( r )					      		  print ( r [ i ] , end = "" )			    		print ( r [ i ] , end = "" )			  
							      	  print ( )						    	print ( )						  
3 10 SETUP_LOOP 112 ( to 124 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 100 ( to 122 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 2 ( r )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 STORE_SUBSCR						      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( s )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 'a' )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 20					      								    								  
56 LOAD_FAST 0 ( s )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 4 ( 'e' )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 20					      								    								  
68 LOAD_FAST 0 ( s )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 5 ( 'i' )					      								    								  
76 COMPARE_OP 3 ( != )					      								    								  
78 POP_JUMP_IF_FALSE 20					      								    								  
80 LOAD_FAST 0 ( s )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 6 ( 'o' )					      								    								  
88 COMPARE_OP 3 ( != )					      								    								  
90 POP_JUMP_IF_FALSE 20					      								    								  
92 LOAD_FAST 0 ( s )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 7 ( 'u' )					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 20				      								    								  
							      								    								  
6 104 LOAD_GLOBAL 1 ( print )				      								    								  
106 LOAD_FAST 2 ( r )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 8 ( '' )					      								    								  
114 LOAD_CONST 9 ( ( 'end' , ) )			      								    								  
116 CALL_FUNCTION_KW 2					      								    								  
118 POP_TOP						      								    								  
120 JUMP_ABSOLUTE 20					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
7 >> 124 LOAD_GLOBAL 1 ( print )			      								    								  
126 CALL_FUNCTION 0					      								    								  
128 POP_TOP						      								    								  
130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS
--							      --							    --								  --
Disassembly of <code object countStr at 0x7fbac0e8de40, file  def countStr ( n , bCount , cCount ) :			    def countStr ( n , bCount , cCount ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( bCount )				      	  if ( bCount < 0 or cCount < 0 ) :			    	if ( bCount < 0 or cCount < 0 ) :			  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if ( n == 0 ) :					    	if n == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	      return 1						    	    return 1						  
8 LOAD_FAST 2 ( cCount )				      	  if ( bCount == 0 and cCount == 0 ) :			    	if bCount == 0 and cCount == 0 :			  
10 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
12 COMPARE_OP 0 ( < )					      	  res = countStr ( n - 1 , bCount , cCount )		    	res = countStr ( n - 1 , bCount , cCount )		  
14 POP_JUMP_IF_FALSE 20					      	  res += countStr ( n - 1 , bCount - 1 , cCount )	    	res += countStr ( n - 1 , bCount - 1 , cCount )		  
							      	  res += countStr ( n - 1 , bCount , cCount - 1 )	    	res += countStr ( n - 1 , bCount , cCount - 1 )		  
3 >> 16 LOAD_CONST 1 ( 0 )				      	  return res						    	return res						  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 2 ( 1 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 1 ( bCount )				      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 52					      								    								  
40 LOAD_FAST 2 ( cCount )				      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 48 LOAD_CONST 2 ( 1 )					      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_GLOBAL 0 ( countStr )			      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_FAST 1 ( bCount )				      								    								  
62 LOAD_FAST 2 ( cCount )				      								    								  
64 CALL_FUNCTION 3					      								    								  
66 STORE_FAST 3 ( res )					      								    								  
							      								    								  
9 68 LOAD_FAST 3 ( res )				      								    								  
70 LOAD_GLOBAL 0 ( countStr )				      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 LOAD_FAST 1 ( bCount )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_FAST 2 ( cCount )				      								    								  
86 CALL_FUNCTION 3					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 3 ( res )					      								    								  
							      								    								  
10 92 LOAD_FAST 3 ( res )				      								    								  
94 LOAD_GLOBAL 0 ( countStr )				      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_FAST 1 ( bCount )				      								    								  
104 LOAD_FAST 2 ( cCount )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 3					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 3 ( res )				      								    								  
							      								    								  
11 116 LOAD_FAST 3 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE	      COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		    COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		  COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE
--							      --							    --								  --
Disassembly of <code object countIslands at 0x7fbac0e8de40, f def countIslands ( mat ) :				    def countIslands ( mat ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  for i in range ( 0 , M ) :				    	for i in range ( 0 , M ) :				  
							      	      for j in range ( 0 , N ) :			    	    for j in range ( 0 , N ) :				  
3 4 SETUP_LOOP 118 ( to 124 )				      		  if ( mat [ i ] [ j ] == 'X' ) :		    		if mat [ i ] [ j ] == 'X' :			  
6 LOAD_GLOBAL 0 ( range )				      		      if ( ( i == 0 or mat [ i - 1 ] [ j ] == 'O' ) 		    if i == 0 or mat [ i - 1 ] [ j ] == 'O' :	  
8 LOAD_CONST 1 ( 0 )					      			  count = count + 1			    			if j == 0 or mat [ i ] [ j - 1 ] == 'O' : 
10 LOAD_GLOBAL 1 ( M )					      	  return count						    			    count = count + 1			  
12 CALL_FUNCTION 2					      								    return count						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 104 ( to 122 )				      								    								  
18 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 98 ( to 120 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_GLOBAL 2 ( N )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 84 ( to 118 )				      								    								  
34 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( mat )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 2 ( 'X' )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_TRUE 80					      								    								  
60 LOAD_FAST 0 ( mat )					      								    								  
62 LOAD_FAST 2 ( i )					      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 4 ( 'O' )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 32					      								    								  
>> 80 LOAD_FAST 3 ( j )					      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_TRUE 108					      								    								  
88 LOAD_FAST 0 ( mat )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 3 ( j )					      								    								  
96 LOAD_CONST 3 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 4 ( 'O' )				      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 32				      								    								  
							      								    								  
7 >> 108 LOAD_FAST 1 ( count )				      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 1 ( count )				      								    								  
116 JUMP_ABSOLUTE 32					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 16					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
8 >> 124 LOAD_FAST 1 ( count )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	      COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	    COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	  COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R
--							      --							    --								  --
Disassembly of <code object answerQuery at 0x7fbac0e8bc90, fi def answerQuery ( a , n , l , r ) :			    def answerQuery ( a , l , l , r ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 4 ( count )				      	  l = l - 1						    	l = l - 1						  
							      	  for i in range ( l , r , 1 ) :			    	for i in range ( l , r , 1 ) :				  
3 4 LOAD_FAST 2 ( l )					      	      element = a [ i ]					    	    element = a [ i ]					  
6 LOAD_CONST 2 ( 1 )					      	      divisors = 0					    	    divisors = 0					  
8 BINARY_SUBTRACT					      	      for j in range ( l , r , 1 ) :			    	    for j in range ( l , r , 1 ) :			  
10 STORE_FAST 2 ( l )					      		  if ( a [ j ] % a [ i ] == 0 ) :		    		if a [ j ] % a [ i ] == 0 :			  
							      		      divisors += 1				    		    divisors += 1				  
4 12 SETUP_LOOP 106 ( to 120 )				      		  else :					    		else :						  
14 LOAD_GLOBAL 0 ( range )				      		      break					    		    break					  
16 LOAD_FAST 2 ( l )					      	      if ( divisors == ( r - l ) ) :			    	    if divisors ( r - l ) :				  
18 LOAD_FAST 3 ( r )					      		  count += 1					    		count += 1					  
20 LOAD_CONST 2 ( 1 )					      	  return count						    	return count						  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 90 ( to 118 )				      								    								  
28 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( a )					      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 STORE_FAST 6 ( element )				      								    								  
							      								    								  
6 38 LOAD_CONST 1 ( 0 )					      								    								  
40 STORE_FAST 7 ( divisors )				      								    								  
							      								    								  
7 42 SETUP_LOOP 52 ( to 96 )				      								    								  
44 LOAD_GLOBAL 0 ( range )				      								    								  
46 LOAD_FAST 2 ( l )					      								    								  
48 LOAD_FAST 3 ( r )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 CALL_FUNCTION 3					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 36 ( to 94 )				      								    								  
58 STORE_FAST 8 ( j )					      								    								  
							      								    								  
8 60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 8 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 5 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
9 80 LOAD_FAST 7 ( divisors )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 7 ( divisors )				      								    								  
88 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
11 >> 90 BREAK_LOOP					      								    								  
92 JUMP_ABSOLUTE 56					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
12 >> 96 LOAD_FAST 7 ( divisors )			      								    								  
98 LOAD_FAST 3 ( r )					      								    								  
100 LOAD_FAST 2 ( l )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 26				      								    								  
							      								    								  
13 108 LOAD_FAST 4 ( count )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( count )				      								    								  
116 JUMP_ABSOLUTE 26					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_FAST 4 ( count )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME
--							      --							    --								  --
Disassembly of <code object canFormPalindrome at 0x7fbac0e8d5 def canFormPalindrome ( st ) :				    def canFormPalindrome ( st ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * ( NO_OF_CHARS )			    	count = [ 0 ] * NO_OF_CHARS				  
2 BUILD_LIST 1						      	  for i in range ( 0 , len ( st ) ) :			    	for i in range ( 0 , len ( st ) ) :			  
4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				      	      count [ ord ( st [ i ] ) ] = count [ ord ( st [ i ] ) 	    count [ ord ( st [ i ] ) ] = count [ ord ( st [ i ] ) 
6 BINARY_MULTIPLY					      	  odd = 0						    	odd = 0							  
8 STORE_FAST 1 ( count )				      	  for i in range ( 0 , NO_OF_CHARS ) :			    	for i in range ( 0 , NO_OF_CHARS ) :			  
							      	      if ( count [ i ] & 1 ) :				    	    if count [ i ] & 1 :				  
3 10 SETUP_LOOP 54 ( to 66 )				      		  odd = odd + 1					    		odd = odd + 1					  
12 LOAD_GLOBAL 1 ( range )				      	      if ( odd > 1 ) :					    	    if odd > 1 :					  
14 LOAD_CONST 1 ( 0 )					      		  return False					    		return False					  
16 LOAD_GLOBAL 2 ( len )				      	  return True						    return True							  
18 LOAD_FAST 0 ( st )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 36 ( to 64 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( count )				      								    								  
32 LOAD_GLOBAL 3 ( ord )				      								    								  
34 LOAD_FAST 0 ( st )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 1 ( count )				      								    								  
50 LOAD_GLOBAL 3 ( ord )				      								    								  
52 LOAD_FAST 0 ( st )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 26					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
5 >> 66 LOAD_CONST 1 ( 0 )				      								    								  
68 STORE_FAST 3 ( odd )					      								    								  
							      								    								  
6 70 SETUP_LOOP 50 ( to 122 )				      								    								  
72 LOAD_GLOBAL 1 ( range )				      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 LOAD_GLOBAL 0 ( NO_OF_CHARS )			      								    								  
78 CALL_FUNCTION 2					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 36 ( to 120 )				      								    								  
84 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 86 LOAD_FAST 1 ( count )				      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_AND						      								    								  
96 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
8 98 LOAD_FAST 3 ( odd )				      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 3 ( odd )				      								    								  
							      								    								  
9 >> 106 LOAD_FAST 3 ( odd )				      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 COMPARE_OP 4 ( > )					      								    								  
112 POP_JUMP_IF_FALSE 82				      								    								  
							      								    								  
10 114 LOAD_CONST 3 ( False )				      								    								  
116 RETURN_VALUE					      								    								  
118 JUMP_ABSOLUTE 82					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
11 >> 122 LOAD_CONST 4 ( True )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROOTS_OF_UNITY						      ROOTS_OF_UNITY						    ROOTS_OF_UNITY						  ROOTS_OF_UNITY
--							      --							    --								  --
Disassembly of <code object printRoots at 0x7fbac0e8de40, fil def printRoots ( n ) :					    def printRoots ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  theta = math.pi * 2 / n				    	theta = math.pi * 2 / n					  
2 LOAD_ATTR 1 ( pi )					      	  for k in range ( 0 , n ) :				    	for k in range ( 0 , n ) :				  
4 LOAD_CONST 1 ( 2 )					      	      real = math.cos ( k * theta )			    	    real = math.cos ( k * theta )			  
6 BINARY_MULTIPLY					      	      img = math.sin ( k * theta )			    	    img = math.sin ( k * theta )			  
8 LOAD_FAST 0 ( n )					      	      print ( real , end = " " )			    	    print ( real , end = ' ' )				  
10 BINARY_TRUE_DIVIDE					      	      if ( img >= 0 ) :					    	    if img >= 0 :					  
12 STORE_FAST 1 ( theta )				      		  print ( " + i " , end = " " )			    		print ( " + i " , end = ' ' )			  
							      	      else :						    	    else :						  
3 14 SETUP_LOOP 104 ( to 120 )				      		  print ( " - i " , end = " " )			    		print ( " - i " , end = ' ' )			  
16 LOAD_GLOBAL 2 ( range )				      	      print ( abs ( img ) )				    	print ( abs ( img ) )					  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 90 ( to 118 )				      								    								  
28 STORE_FAST 2 ( k )					      								    								  
							      								    								  
4 30 LOAD_GLOBAL 0 ( math )				      								    								  
32 LOAD_METHOD 3 ( cos )				      								    								  
34 LOAD_FAST 2 ( k )					      								    								  
36 LOAD_FAST 1 ( theta )				      								    								  
38 BINARY_MULTIPLY					      								    								  
40 CALL_METHOD 1					      								    								  
42 STORE_FAST 3 ( real )				      								    								  
							      								    								  
5 44 LOAD_GLOBAL 0 ( math )				      								    								  
46 LOAD_METHOD 4 ( sin )				      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 LOAD_FAST 1 ( theta )				      								    								  
52 BINARY_MULTIPLY					      								    								  
54 CALL_METHOD 1					      								    								  
56 STORE_FAST 4 ( img )					      								    								  
							      								    								  
6 58 LOAD_GLOBAL 5 ( print )				      								    								  
60 LOAD_FAST 3 ( real )					      								    								  
62 LOAD_CONST 3 ( ' ' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
							      								    								  
7 70 LOAD_FAST 4 ( img )				      								    								  
72 LOAD_CONST 2 ( 0 )					      								    								  
74 COMPARE_OP 5 ( >= )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
8 78 LOAD_GLOBAL 5 ( print )				      								    								  
80 LOAD_CONST 5 ( ' + i ' )				      								    								  
82 LOAD_CONST 3 ( ' ' )					      								    								  
84 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
86 CALL_FUNCTION_KW 2					      								    								  
88 POP_TOP						      								    								  
90 JUMP_FORWARD 12 ( to 104 )				      								    								  
							      								    								  
10 >> 92 LOAD_GLOBAL 5 ( print )			      								    								  
94 LOAD_CONST 6 ( ' - i ' )				      								    								  
96 LOAD_CONST 3 ( ' ' )					      								    								  
98 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
100 CALL_FUNCTION_KW 2					      								    								  
102 POP_TOP						      								    								  
							      								    								  
11 >> 104 LOAD_GLOBAL 5 ( print )			      								    								  
106 LOAD_GLOBAL 6 ( abs )				      								    								  
108 LOAD_FAST 4 ( img )					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 POP_TOP						      								    								  
116 JUMP_ABSOLUTE 26					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 LOAD_CONST 0 ( None )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_SUM<unk> ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE  MAXIMUM_POSSIBLE_SUM<unk> ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE  MAXIMUM_POSSIBLE_SUM<unk> ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE  MAXIMUM_POSSIBLE_SUM<unk> ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE
--							      --							    --								  --
Disassembly of <code object returnMaxSum at 0x7fbac0e8de40, f def returnMaxSum ( A , B , n ) :				    def returnMaxSum ( A , B , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  mp = set ( )						    	mp = set ( )						  
2 CALL_FUNCTION 0					      	  result = 0						    	result = 0						  
4 STORE_FAST 3 ( mp )					      	  curr_sum = curr_begin = 0				    	curr_sum = curr_begin = 0				  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 6 LOAD_CONST 1 ( 0 )					      	      while A [ i ] in mp :				    	    while A [ i ] in mp :				  
8 STORE_FAST 4 ( result )				      		  mp.remove ( A [ curr_begin ] )		    		mp.remove ( A [ curr_begin ] )			  
							      		  curr_sum -= B [ curr_begin ]			    		curr_sum -= B [ curr_begin ]			  
4 10 LOAD_CONST 1 ( 0 )					      		  curr_begin += 1				    		curr_begin += 1					  
12 DUP_TOP						      	      mp.add ( A [ i ] )				    	    mp.add ( A [ i ] )					  
14 STORE_FAST 5 ( curr_sum )				      	      curr_sum += B [ i ]				    	    curr_sum += B [ i ]					  
16 STORE_FAST 6 ( curr_begin )				      	      result = max ( result , curr_sum )		    	    result = max ( result , curr_sum )			  
							      	  return result						    return result						  
5 18 SETUP_LOOP 106 ( to 126 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 92 ( to 124 )				      								    								  
32 STORE_FAST 7 ( i )					      								    								  
							      								    								  
6 34 SETUP_LOOP 50 ( to 86 )				      								    								  
>> 36 LOAD_FAST 0 ( A )					      								    								  
38 LOAD_FAST 7 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( mp )					      								    								  
44 COMPARE_OP 6 ( in )					      								    								  
46 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( mp )					      								    								  
50 LOAD_METHOD 2 ( remove )				      								    								  
52 LOAD_FAST 0 ( A )					      								    								  
54 LOAD_FAST 6 ( curr_begin )				      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_METHOD 1					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_FAST 5 ( curr_sum )				      								    								  
64 LOAD_FAST 1 ( B )					      								    								  
66 LOAD_FAST 6 ( curr_begin )				      								    								  
68 BINARY_SUBSCR					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
9 74 LOAD_FAST 6 ( curr_begin )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 6 ( curr_begin )				      								    								  
82 JUMP_ABSOLUTE 36					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 3 ( mp )				      								    								  
88 LOAD_METHOD 3 ( add )				      								    								  
90 LOAD_FAST 0 ( A )					      								    								  
92 LOAD_FAST 7 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_METHOD 1					      								    								  
98 POP_TOP						      								    								  
							      								    								  
11 100 LOAD_FAST 5 ( curr_sum )				      								    								  
102 LOAD_FAST 1 ( B )					      								    								  
104 LOAD_FAST 7 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
12 112 LOAD_GLOBAL 4 ( max )				      								    								  
114 LOAD_FAST 4 ( result )				      								    								  
116 LOAD_FAST 5 ( curr_sum )				      								    								  
118 CALL_FUNCTION 2					      								    								  
120 STORE_FAST 4 ( result )				      								    								  
122 JUMP_ABSOLUTE 30					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 4 ( result )			      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS   FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS   FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS	  FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS
--							      --							    --								  --
Disassembly of <code object maxLevel at 0x7fbac0e8de40, file  def maxLevel ( boxes , n ) :				    def maxLevel ( boxes , n ) :				  failure : #Results: 3, 10
2 0 LOAD_FAST 0 ( boxes )				      	  boxes.sort ( )					    	boxes.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  ans = 1						    	ans = 1							  
4 CALL_METHOD 0						      	  prev_width = boxes [ 0 ]				    	prev_width = boxes [ 0 ]				  
6 POP_TOP						      	  prev_count = 1					    	prev_count = 1						  
							      	  curr_count = 0					    	curr_count = 0						  
3 8 LOAD_CONST 1 ( 1 )					      	  curr_width = 0					    	curr_width = 0						  
10 STORE_FAST 2 ( ans )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
							      	      curr_width += boxes [ i ]				    	    curr_width += boxes [ i ]				  
4 12 LOAD_FAST 0 ( boxes )				      	      curr_count += 1					    	    curr_count += 1					  
14 LOAD_CONST 2 ( 0 )					      	      if ( curr_width > prev_width and curr_count > prev_co 	    if curr_width > prev_width and curr_count > prev_coun 
16 BINARY_SUBSCR					      		  prev_width = curr_width			    		prev_width = curr_width				  
18 STORE_FAST 3 ( prev_width )				      		  prev_count = curr_count			    		curr_count = curr_count				  
							      		  curr_count = 0				    		curr_width = 0					  
5 20 LOAD_CONST 1 ( 1 )					      		  curr_width = 0				    		ans += 1					  
22 STORE_FAST 4 ( prev_count )				      		  ans += 1					    	return ans						  
							      	  return ans						    								  
6 24 LOAD_CONST 2 ( 0 )					      								    								  
26 STORE_FAST 5 ( curr_count )				      								    								  
							      								    								  
7 28 LOAD_CONST 2 ( 0 )					      								    								  
30 STORE_FAST 6 ( curr_width )				      								    								  
							      								    								  
8 32 SETUP_LOOP 78 ( to 112 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 64 ( to 110 )				      								    								  
46 STORE_FAST 7 ( i )					      								    								  
							      								    								  
9 48 LOAD_FAST 6 ( curr_width )				      								    								  
50 LOAD_FAST 0 ( boxes )				      								    								  
52 LOAD_FAST 7 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 6 ( curr_width )				      								    								  
							      								    								  
10 60 LOAD_FAST 5 ( curr_count )			      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 5 ( curr_count )				      								    								  
							      								    								  
11 68 LOAD_FAST 6 ( curr_width )			      								    								  
70 LOAD_FAST 3 ( prev_width )				      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 44					      								    								  
76 LOAD_FAST 5 ( curr_count )				      								    								  
78 LOAD_FAST 4 ( prev_count )				      								    								  
80 COMPARE_OP 4 ( > )					      								    								  
82 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
12 84 LOAD_FAST 6 ( curr_width )			      								    								  
86 STORE_FAST 3 ( prev_width )				      								    								  
							      								    								  
13 88 LOAD_FAST 5 ( curr_count )			      								    								  
90 STORE_FAST 4 ( prev_count )				      								    								  
							      								    								  
14 92 LOAD_CONST 2 ( 0 )				      								    								  
94 STORE_FAST 5 ( curr_count )				      								    								  
							      								    								  
15 96 LOAD_CONST 2 ( 0 )				      								    								  
98 STORE_FAST 6 ( curr_width )				      								    								  
							      								    								  
16 100 LOAD_FAST 2 ( ans )				      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( ans )				      								    								  
108 JUMP_ABSOLUTE 44					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
17 >> 112 LOAD_FAST 2 ( ans )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT	      FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT		    FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT		  FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT
--							      --							    --								  --
Disassembly of <code object countCurrency at 0x7fbac0e8de40,  def countCurrency ( amount ) :				    def countCurrency ( amount ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 2000 )				      	  notes = [ 2000 , 500 , 200 , 100 , 50 , 20 , 10 , 5 , 1 ] 	notes = [ 2000 , 500 , 200 , 100 , 50 , 20 , 60 , 10 , 5  
2 LOAD_CONST 2 ( 500 )					      	  noteCounter = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]	    	noteCounter = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]	  
4 LOAD_CONST 3 ( 200 )					      	  print ( "Currency Count -> " )			    	print ( "Currency Count -> " )				  
6 LOAD_CONST 4 ( 100 )					      	  for i , j in zip ( notes , noteCounter ) :		    	for i , j in zip ( notes , noteCounter ) :		  
8 LOAD_CONST 5 ( 50 )					      	      if amount >= i :					    	    if amount >= i :					  
10 LOAD_CONST 6 ( 20 )					      		  j = amount // i				    		j = amount // i					  
12 LOAD_CONST 7 ( 10 )					      		  amount = amount - j * i			    		amount = amount - j * i				  
14 LOAD_CONST 8 ( 5 )					      		  print ( i , " : " , j )			    		print ( i , " : " , j )				  
16 LOAD_CONST 9 ( 1 )					      								    								  
18 BUILD_LIST 9						      								    								  
20 STORE_FAST 1 ( notes )				      								    								  
							      								    								  
3 22 LOAD_CONST 10 ( 0 )				      								    								  
24 LOAD_CONST 10 ( 0 )					      								    								  
26 LOAD_CONST 10 ( 0 )					      								    								  
28 LOAD_CONST 10 ( 0 )					      								    								  
30 LOAD_CONST 10 ( 0 )					      								    								  
32 LOAD_CONST 10 ( 0 )					      								    								  
34 LOAD_CONST 10 ( 0 )					      								    								  
36 LOAD_CONST 10 ( 0 )					      								    								  
38 LOAD_CONST 10 ( 0 )					      								    								  
40 BUILD_LIST 9						      								    								  
42 STORE_FAST 2 ( noteCounter )				      								    								  
							      								    								  
4 44 LOAD_GLOBAL 0 ( print )				      								    								  
46 LOAD_CONST 11 ( 'Currency Count -> ' )		      								    								  
48 CALL_FUNCTION 1					      								    								  
50 POP_TOP						      								    								  
							      								    								  
5 52 SETUP_LOOP 62 ( to 116 )				      								    								  
54 LOAD_GLOBAL 1 ( zip )				      								    								  
56 LOAD_FAST 1 ( notes )				      								    								  
58 LOAD_FAST 2 ( noteCounter )				      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 48 ( to 114 )				      								    								  
66 UNPACK_SEQUENCE 2					      								    								  
68 STORE_FAST 3 ( i )					      								    								  
70 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 72 LOAD_FAST 0 ( amount )				      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 COMPARE_OP 5 ( >= )					      								    								  
78 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 80 LOAD_FAST 0 ( amount )				      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 88 LOAD_FAST 0 ( amount )				      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 0 ( amount )				      								    								  
							      								    								  
9 100 LOAD_GLOBAL 0 ( print )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 LOAD_CONST 12 ( ' : ' )				      								    								  
106 LOAD_FAST 4 ( j )					      								    								  
108 CALL_FUNCTION 3					      								    								  
110 POP_TOP						      								    								  
112 JUMP_ABSOLUTE 64					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			      MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			    MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			  MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM
--							      --							    --								  --
Disassembly of <code object maximumSumSubarray at 0x7fbac0e89 def maximumSumSubarray ( arr , n ) :			    def maximumSumSubarray ( arr , n ) :			  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  min_prefix_sum = 0					    	min_prefix_sum = 0					  
2 STORE_FAST 2 ( min_prefix_sum )			      	  res = - math.inf					    	res = - math.inf					  
							      	  prefix_sum = [ ]					    	prefix_sum = [ ]					  
3 4 LOAD_GLOBAL 0 ( math )				      	  prefix_sum.append ( arr [ 0 ] )			    	prefix_sum.append ( arr [ 0 ] )				  
6 LOAD_ATTR 1 ( inf )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 UNARY_NEGATIVE					      	      prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ]  	    prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ]  
10 STORE_FAST 3 ( res )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      res = max ( res , prefix_sum [ i ] - min_prefix_sum ) 	    res = max ( res , prefix_sum [ i ] - min_prefix_sum ) 
4 12 BUILD_LIST 0					      	      min_prefix_sum = min ( min_prefix_sum , prefix_sum [  	    min_prefix_sum = min ( min_prefix_sum , prefix_sum [  
14 STORE_FAST 4 ( prefix_sum )				      	  return res						    	return res						  
							      								    								  
5 16 LOAD_FAST 4 ( prefix_sum )				      								    								  
18 LOAD_METHOD 2 ( append )				      								    								  
20 LOAD_FAST 0 ( arr )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 CALL_METHOD 1					      								    								  
28 POP_TOP						      								    								  
							      								    								  
6 30 SETUP_LOOP 44 ( to 76 )				      								    								  
32 LOAD_GLOBAL 3 ( range )				      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 30 ( to 74 )				      								    								  
44 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 46 LOAD_FAST 4 ( prefix_sum )				      								    								  
48 LOAD_METHOD 2 ( append )				      								    								  
50 LOAD_FAST 4 ( prefix_sum )				      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 5 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_ADD						      								    								  
68 CALL_METHOD 1					      								    								  
70 POP_TOP						      								    								  
72 JUMP_ABSOLUTE 42					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 SETUP_LOOP 48 ( to 126 )			      								    								  
78 LOAD_GLOBAL 3 ( range )				      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 36 ( to 124 )				      								    								  
88 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 90 LOAD_GLOBAL 4 ( max )				      								    								  
92 LOAD_FAST 3 ( res )					      								    								  
94 LOAD_FAST 4 ( prefix_sum )				      								    								  
96 LOAD_FAST 5 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 2 ( min_prefix_sum )			      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 STORE_FAST 3 ( res )				      								    								  
							      								    								  
10 108 LOAD_GLOBAL 5 ( min )				      								    								  
110 LOAD_FAST 2 ( min_prefix_sum )			      								    								  
112 LOAD_FAST 4 ( prefix_sum )				      								    								  
114 LOAD_FAST 5 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 2					      								    								  
120 STORE_FAST 2 ( min_prefix_sum )			      								    								  
122 JUMP_ABSOLUTE 86					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
11 >> 126 LOAD_FAST 3 ( res )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8d540, fil def countPairs ( arr1 , arr2 , m , n , x ) :		    def countPairs ( arr1 , arr2 , m , n , x , y , x ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count , l , r = 0 , 0 , n - 1				    	count , l , r = 0 , 0 , 0 , n - 1			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0 )					      	  while ( l < m and r >= 0 ) :				    	while l < m and r >= 0 :				  _sa.test/COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_E
4 LOAD_FAST 3 ( n )					      	      if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) :		    	    if arr1 [ l ] + arr2 [ r ] == x :			  QUAL_GIVEN_VALUE_X_2.py", line 31	def f_filled
6 LOAD_CONST 2 ( 1 )					      		  l += 1					    		l += 1						   ( arr1 , arr2 , m , n , x , y , x ) :     ^ Synta
8 BINARY_SUBTRACT					      		  r -= 1					    		r -= 1						  xError: duplicate argument 'x' in function definit
10 ROT_THREE						      		  count += 1					    		count += 1					  ion
12 ROT_TWO						      	      elif ( ( arr1 [ l ] + arr2 [ r ] ) < x ) :	    	    elif arr1 [ l ] + arr2 [ r ] < x :			  
14 STORE_FAST 5 ( count )				      		  l += 1					    		l += 1						  
16 STORE_FAST 6 ( l )					      	      else :						    	    else :						  
18 STORE_FAST 7 ( r )					      		  r -= 1					    		r -= 1						  
							      	  return count						    	return count						  
3 20 SETUP_LOOP 104 ( to 126 )				      								    								  
>> 22 LOAD_FAST 6 ( l )					      								    								  
24 LOAD_FAST 2 ( m )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 124				      								    								  
30 LOAD_FAST 7 ( r )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( arr1 )				      								    								  
40 LOAD_FAST 6 ( l )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( arr2 )					      								    								  
46 LOAD_FAST 7 ( r )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 4 ( x )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
5 58 LOAD_FAST 6 ( l )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 6 ( l )					      								    								  
							      								    								  
6 66 LOAD_FAST 7 ( r )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 7 ( r )					      								    								  
							      								    								  
7 74 LOAD_FAST 5 ( count )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( count )				      								    								  
82 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
8 >> 84 LOAD_FAST 0 ( arr1 )				      								    								  
86 LOAD_FAST 6 ( l )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 1 ( arr2 )					      								    								  
92 LOAD_FAST 7 ( r )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 4 ( x )					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
9 104 LOAD_FAST 6 ( l )					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 6 ( l )					      								    								  
112 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
11 >> 114 LOAD_FAST 7 ( r )				      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 INPLACE_SUBTRACT					      								    								  
120 STORE_FAST 7 ( r )					      								    								  
122 JUMP_ABSOLUTE 22					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
12 >> 126 LOAD_FAST 5 ( count )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_
--							      --							    --								  --
Disassembly of <code object longestSubseqWithK at 0x7fbac0e8d def longestSubseqWithK ( str , k ) :			    def longestSubseqWithK ( str , k = 0 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  freq = [ 0 ] * MAX_CHARS				    	freq = [ 0 ] * MAX_CHARS				  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 2 ( n )					      	      freq [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	    	    freq [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( freq [ ord ( str [ i ] ) - ord ( 'a' ) ] >= k )  	    if freq [ ord ( str [ i ] ) - ord ( 'a' ) ] >= k :	  
10 BUILD_LIST 1						      		  print ( str [ i ] , end = "" )		    		print ( str [ i ] , end = "" )			  
12 LOAD_GLOBAL 1 ( MAX_CHARS )				      								    								  
14 BINARY_MULTIPLY					      								    								  
16 STORE_FAST 3 ( freq )				      								    								  
							      								    								  
4 18 SETUP_LOOP 48 ( to 68 )				      								    								  
20 LOAD_GLOBAL 2 ( range )				      								    								  
22 LOAD_FAST 2 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 3 ( freq )				      								    								  
34 LOAD_GLOBAL 3 ( ord )				      								    								  
36 LOAD_FAST 0 ( str )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_GLOBAL 3 ( ord )				      								    								  
46 LOAD_CONST 2 ( 'a' )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 DUP_TOP_TWO						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 ROT_THREE						      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 SETUP_LOOP 60 ( to 130 )			      								    								  
70 LOAD_GLOBAL 2 ( range )				      								    								  
72 LOAD_FAST 2 ( n )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 48 ( to 128 )				      								    								  
80 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 82 LOAD_FAST 3 ( freq )				      								    								  
84 LOAD_GLOBAL 3 ( ord )				      								    								  
86 LOAD_FAST 0 ( str )					      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_GLOBAL 3 ( ord )				      								    								  
96 LOAD_CONST 2 ( 'a' )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 1 ( k )					      								    								  
106 COMPARE_OP 5 ( >= )					      								    								  
108 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
8 110 LOAD_GLOBAL 4 ( print )				      								    								  
112 LOAD_FAST 0 ( str )					      								    								  
114 LOAD_FAST 4 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 4 ( '' )					      								    								  
120 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
122 CALL_FUNCTION_KW 2					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 78					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY					      FREQUENT_ELEMENT_ARRAY					    FREQUENT_ELEMENT_ARRAY					  FREQUENT_ELEMENT_ARRAY
--							      --							    --								  --
Disassembly of <code object mostFrequent at 0x7fbac0e8bc90, f def mostFrequent ( arr , n ) :				    def mostFrequent ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_METHOD 0 ( sort )				      	  max_count = 1 ; res = arr [ 0 ] ; curr_count = 1	    	max_count = 1						  _sa.test/FREQUENT_ELEMENT_ARRAY.py", line 51	   r
4 CALL_METHOD 0						      	  for i in range ( 1 , n ) :				    	res = 1							  eturn res	^ SyntaxError: 'return' outside func
6 POP_TOP						      	      if ( arr [ i ] == arr [ i - 1 ] ) :		    	for i in range ( 1 , n ) :				  tion
							      		  curr_count += 1				    	    if arr [ i ] == arr [ i - 1 ] :			  
3 8 LOAD_CONST 1 ( 1 )					      	      else :						    		curr_count += 1					  
10 STORE_FAST 2 ( max_count )				      		  if ( curr_count > max_count ) :		    	    elif curr_count > max_count :			  
12 LOAD_FAST 0 ( arr )					      		      max_count = curr_count			    		max_count = curr_count				  
14 LOAD_CONST 2 ( 0 )					      		      res = arr [ i - 1 ]			    		res = arr [ i - 1 ]				  
16 BINARY_SUBSCR					      		  curr_count = 1				    	if curr_count > max_count :				  
18 STORE_FAST 3 ( res )					      	  if ( curr_count > max_count ) :			    	    max_count = curr_count				  
20 LOAD_CONST 1 ( 1 )					      	      max_count = curr_count				    	    res = arr [ n - 1 ]					  
22 STORE_FAST 4 ( curr_count )				      	      res = arr [ n - 1 ]				    	curr_count = 1						  
							      	  return res						    if curr_count > max_count :					  
4 24 SETUP_LOOP 76 ( to 102 )				      								    	max_count = curr_count					  
26 LOAD_GLOBAL 1 ( range )				      								    	res = arr [ n - 1 ]					  
28 LOAD_CONST 1 ( 1 )					      								    return res							  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 62 ( to 100 )				      								    								  
38 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
6 60 LOAD_FAST 4 ( curr_count )				      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 4 ( curr_count )				      								    								  
68 JUMP_ABSOLUTE 36					      								    								  
							      								    								  
8 >> 70 LOAD_FAST 4 ( curr_count )			      								    								  
72 LOAD_FAST 2 ( max_count )				      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
9 78 LOAD_FAST 4 ( curr_count )				      								    								  
80 STORE_FAST 2 ( max_count )				      								    								  
							      								    								  
10 82 LOAD_FAST 0 ( arr )				      								    								  
84 LOAD_FAST 5 ( i )					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 STORE_FAST 3 ( res )					      								    								  
							      								    								  
11 >> 94 LOAD_CONST 1 ( 1 )				      								    								  
96 STORE_FAST 4 ( curr_count )				      								    								  
98 JUMP_ABSOLUTE 36					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
12 >> 102 LOAD_FAST 4 ( curr_count )			      								    								  
104 LOAD_FAST 2 ( max_count )				      								    								  
106 COMPARE_OP 4 ( > )					      								    								  
108 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
13 110 LOAD_FAST 4 ( curr_count )			      								    								  
112 STORE_FAST 2 ( max_count )				      								    								  
							      								    								  
14 114 LOAD_FAST 0 ( arr )				      								    								  
116 LOAD_FAST 1 ( n )					      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BINARY_SUBSCR					      								    								  
124 STORE_FAST 3 ( res )				      								    								  
							      								    								  
15 >> 126 LOAD_FAST 3 ( res )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX COUNT_DISTINCT_NON_<unk> TIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX
--							      --							    --								  --
Disassembly of <code object countSolutions at 0x7fbac0e8d540, def countSolutions ( n ) :				    def countSolutions ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  x = 0							    	x = 0							  
2 STORE_FAST 1 ( x )					      	  res = 0						    	res = 0							  
							      	  yCount = 0						    	yCount = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  while ( yCount * yCount < n ) :			    	while yCount < yCount < n :				  
6 STORE_FAST 2 ( res )					      	      yCount = yCount + 1				    	    yCount = yCount + 1					  
							      	  while ( yCount != 0 ) :				    	while yCount != 0 :					  
4 8 LOAD_CONST 1 ( 0 )					      	      res = res + yCount				    	    res = res + yCount					  
10 STORE_FAST 3 ( yCount )				      	      x = x + 1						    	    x = x + 1						  
							      	      while ( yCount != 0 and ( x * x + ( yCount - 1 ) * (  	    while yCount != 0 and x * x + ( yCount - 1 ) * ( yCou 
5 12 SETUP_LOOP 24 ( to 38 )				      		  yCount = yCount - 1				    		yCount = yCount - 1				  
>> 14 LOAD_FAST 3 ( yCount )				      	  return res						    return res							  
16 LOAD_FAST 3 ( yCount )				      								    								  
18 BINARY_MULTIPLY					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( yCount )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 STORE_FAST 3 ( yCount )				      								    								  
34 JUMP_ABSOLUTE 14					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
7 >> 38 SETUP_LOOP 78 ( to 118 )			      								    								  
>> 40 LOAD_FAST 3 ( yCount )				      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 3 ( != )					      								    								  
46 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
8 48 LOAD_FAST 2 ( res )				      								    								  
50 LOAD_FAST 3 ( yCount )				      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 2 ( res )					      								    								  
							      								    								  
9 56 LOAD_FAST 1 ( x )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 1 ( x )					      								    								  
							      								    								  
10 64 SETUP_LOOP 48 ( to 114 )				      								    								  
>> 66 LOAD_FAST 3 ( yCount )				      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 3 ( != )					      								    								  
72 POP_JUMP_IF_FALSE 112				      								    								  
74 LOAD_FAST 1 ( x )					      								    								  
76 LOAD_FAST 1 ( x )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 LOAD_FAST 3 ( yCount )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_FAST 3 ( yCount )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 COMPARE_OP 5 ( >= )					      								    								  
100 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
11 102 LOAD_FAST 3 ( yCount )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 3 ( yCount )				      								    								  
110 JUMP_ABSOLUTE 66					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 JUMP_ABSOLUTE 40					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 2 ( res )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR
--							      --							    --								  --
Disassembly of <code object alternateSubarray at 0x7fbac0e89d def alternateSubarray ( arr , n ) :			    def alternateSubarray ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  count = 1						    	count = 1						  
2 STORE_FAST 2 ( count )				      	  prev = arr [ 0 ]					    	prev = arr [ 0 ]					  
							      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
3 4 LOAD_FAST 0 ( arr )					      	      if ( ( arr [ i ] ^ prev ) == 0 ) :		    	    if arr [ i ] ^ prev == 0 :				  
6 LOAD_CONST 2 ( 0 )					      		  while ( count ) :				    		while count :					  
8 BINARY_SUBSCR						      		      print ( count , end = " " )		    		    print ( count , end = ' ' )			  
10 STORE_FAST 3 ( prev )				      		      count -= 1				    		    count -= 1					  
							      	      count += 1					    	    count += 1						  
4 12 SETUP_LOOP 80 ( to 94 )				      	      prev = arr [ i ]					    	    prev = arr [ i ]					  
14 LOAD_GLOBAL 0 ( range )				      	  while ( count ) :					    	while count :						  
16 LOAD_CONST 1 ( 1 )					      	      print ( count , end = " " )			    	    print ( count , end = ' ' )				  
18 LOAD_FAST 1 ( n )					      	      count -= 1					    	    count -= 1						  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 66 ( to 92 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( prev )					      								    								  
36 BINARY_XOR						      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
6 44 SETUP_LOOP 28 ( to 74 )				      								    								  
>> 46 LOAD_FAST 2 ( count )				      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 50 LOAD_GLOBAL 1 ( print )				      								    								  
52 LOAD_FAST 2 ( count )				      								    								  
54 LOAD_CONST 3 ( ' ' )					      								    								  
56 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
58 CALL_FUNCTION_KW 2					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_FAST 2 ( count )				      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 INPLACE_SUBTRACT					      								    								  
68 STORE_FAST 2 ( count )				      								    								  
70 JUMP_ABSOLUTE 46					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 2 ( count )				      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 2 ( count )				      								    								  
							      								    								  
10 82 LOAD_FAST 0 ( arr )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 STORE_FAST 3 ( prev )				      								    								  
90 JUMP_ABSOLUTE 24					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 SETUP_LOOP 28 ( to 124 )			      								    								  
>> 96 LOAD_FAST 2 ( count )				      								    								  
98 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
12 100 LOAD_GLOBAL 1 ( print )				      								    								  
102 LOAD_FAST 2 ( count )				      								    								  
104 LOAD_CONST 3 ( ' ' )				      								    								  
106 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
108 CALL_FUNCTION_KW 2					      								    								  
110 POP_TOP						      								    								  
							      								    								  
13 112 LOAD_FAST 2 ( count )				      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 INPLACE_SUBTRACT					      								    								  
118 STORE_FAST 2 ( count )				      								    								  
120 JUMP_ABSOLUTE 96					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBERS_THAT_DONT_CONTAIN_3			      COUNT_NUMBERS_THAT_DONT_CONTAIN_3				    COUNT_NUMBERS_THAT_DONT_CONTAIN_3				  COUNT_NUMBERS_THAT_DONT_CONTAIN_3
--							      --							    --								  --
Disassembly of <code object count at 0x7fbac0e89d20, file "<d def count ( n ) :						    def count ( n ) :						  success : None
2 0 LOAD_FAST 0 ( n )					      	  if n < 3 :						    	if n < 3 :						  
2 LOAD_CONST 1 ( 3 )					      	      return n						    	    return n						  
4 COMPARE_OP 0 ( < )					      	  elif n >= 3 and n < 10 :				    	if n >= 3 and n < 10 :					  
6 POP_JUMP_IF_FALSE 12					      	      return n - 1					    	    return n - 1					  
							      	  po = 1						    	po = 1							  
3 8 LOAD_FAST 0 ( n )					      	  while n / po > 9 :					    	while n / po > 9 :					  
10 RETURN_VALUE						      	      po = po * 10					    	    po = po * 10					  
							      	  msd = n / po						    	msd = n / po						  
4 >> 12 LOAD_FAST 0 ( n )				      	  if msd != 3 :						    	if msd != 3 :						  
14 LOAD_CONST 1 ( 3 )					      	      return count ( msd ) * count ( po - 1 ) + count ( msd 	    return count ( msd ) * count ( po - 1 ) + count ( msd 
16 COMPARE_OP 5 ( >= )					      	  else :						    	else :							  
18 POP_JUMP_IF_FALSE 36					      	      return count ( msd * po - 1 )			    	    return count ( msd * po - 1 )			  
20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_CONST 2 ( 10 )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 3 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_CONST 3 ( 1 )				      								    								  
38 STORE_FAST 1 ( po )					      								    								  
							      								    								  
7 40 SETUP_LOOP 24 ( to 66 )				      								    								  
>> 42 LOAD_FAST 0 ( n )					      								    								  
44 LOAD_FAST 1 ( po )					      								    								  
46 BINARY_TRUE_DIVIDE					      								    								  
48 LOAD_CONST 4 ( 9 )					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
8 54 LOAD_FAST 1 ( po )					      								    								  
56 LOAD_CONST 2 ( 10 )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 STORE_FAST 1 ( po )					      								    								  
62 JUMP_ABSOLUTE 42					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_FAST 0 ( n )				      								    								  
68 LOAD_FAST 1 ( po )					      								    								  
70 BINARY_TRUE_DIVIDE					      								    								  
72 STORE_FAST 2 ( msd )					      								    								  
							      								    								  
10 74 LOAD_FAST 2 ( msd )				      								    								  
76 LOAD_CONST 1 ( 3 )					      								    								  
78 COMPARE_OP 3 ( != )					      								    								  
80 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
11 82 LOAD_GLOBAL 0 ( count )				      								    								  
84 LOAD_FAST 2 ( msd )					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 LOAD_GLOBAL 0 ( count )				      								    								  
90 LOAD_FAST 1 ( po )					      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 LOAD_GLOBAL 0 ( count )				      								    								  
102 LOAD_FAST 2 ( msd )					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_GLOBAL 0 ( count )				      								    								  
110 LOAD_FAST 0 ( n )					      								    								  
112 LOAD_FAST 1 ( po )					      								    								  
114 BINARY_MODULO					      								    								  
116 CALL_FUNCTION 1					      								    								  
118 BINARY_ADD						      								    								  
120 RETURN_VALUE					      								    								  
							      								    								  
13 >> 122 LOAD_GLOBAL 0 ( count )			      								    								  
124 LOAD_FAST 2 ( msd )					      								    								  
126 LOAD_FAST 1 ( po )					      								    								  
128 BINARY_MULTIPLY					      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 RETURN_VALUE					      								    								  
138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object minheapify at 0x7fbac0e8d540, fil def minheapify ( a , index ) :				    def minheapify ( a , index ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( index )				      	  small = index						    	small = index						  
2 STORE_FAST 2 ( small )				      	  l = 2 * index + 1					    	l = 2 * index + 1					  
							      	  r = 2 * index + 2					    	r = 2 * index + 2					  
3 4 LOAD_CONST 1 ( 2 )					      	  if ( l < n and a [ l ] < a [ small ] ) :		    	if l < n and a [ l ] < a [ small ] :			  
6 LOAD_FAST 1 ( index )					      	      small = l						    	    small = l						  
8 BINARY_MULTIPLY					      	  if ( r < n and a [ r ] < a [ small ] ) :		    	if r < n and a [ r ] < a [ small ] :			  
10 LOAD_CONST 2 ( 1 )					      	      small = r						    	    small = r						  
12 BINARY_ADD						      	  if ( small != index ) :				    	if small != index :					  
14 STORE_FAST 3 ( l )					      	      ( a [ small ] , a [ index ] ) = ( a [ index ] , a [ s 	    a [ small ] , a [ index ] = a [ index ] , a [ small ] 
							      	      minheapify ( a , small )				    	    minheapify ( a , small )				  
4 16 LOAD_CONST 1 ( 2 )					      								    								  
18 LOAD_FAST 1 ( index )				      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 1 ( 2 )					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 4 ( r )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( l )					      								    								  
30 LOAD_GLOBAL 0 ( n )					      								    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 56					      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 3 ( l )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 LOAD_FAST 2 ( small )				      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( l )					      								    								  
54 STORE_FAST 2 ( small )				      								    								  
							      								    								  
7 >> 56 LOAD_FAST 4 ( r )				      								    								  
58 LOAD_GLOBAL 0 ( n )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 84					      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 LOAD_FAST 4 ( r )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( a )					      								    								  
72 LOAD_FAST 2 ( small )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
8 80 LOAD_FAST 4 ( r )					      								    								  
82 STORE_FAST 2 ( small )				      								    								  
							      								    								  
9 >> 84 LOAD_FAST 2 ( small )				      								    								  
86 LOAD_FAST 1 ( index )				      								    								  
88 COMPARE_OP 3 ( != )					      								    								  
90 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
10 92 LOAD_FAST 0 ( a )					      								    								  
94 LOAD_FAST 1 ( index )				      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( a )					      								    								  
100 LOAD_FAST 2 ( small )				      								    								  
102 BINARY_SUBSCR					      								    								  
104 ROT_TWO						      								    								  
106 LOAD_FAST 0 ( a )					      								    								  
108 LOAD_FAST 2 ( small )				      								    								  
110 STORE_SUBSCR					      								    								  
112 LOAD_FAST 0 ( a )					      								    								  
114 LOAD_FAST 1 ( index )				      								    								  
116 STORE_SUBSCR					      								    								  
							      								    								  
11 118 LOAD_GLOBAL 1 ( minheapify )			      								    								  
120 LOAD_FAST 0 ( a )					      								    								  
122 LOAD_FAST 2 ( small )				      								    								  
124 CALL_FUNCTION 2					      								    								  
126 POP_TOP						      								    								  
>> 128 LOAD_CONST 0 ( None )				      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE				      C_PROGRAM_FIND_AREA_TRIANGLE				    C_PROGRAM_FIND_AREA_TRIANGLE				  C_PROGRAM_FIND_AREA_TRIANGLE
--							      --							    --								  --
Disassembly of <code object findArea at 0x7fbac0e89d20, file  def findArea ( a , b , c ) :				    def findArea ( a , b , c ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a < 0 or b < 0 or c < 0 or ( a + b <= c ) or ( a + c 	if a < 0 or b < 0 or c <= 0 or a + b <= c or ( b + c <= b 
2 LOAD_CONST 1 ( 0 )					      	      print ( 'Not a valid trianglen' )			    	    print ( "Not a valid trianglen" )			  
4 COMPARE_OP 0 ( < )					      	      return						    	    return						  
6 POP_JUMP_IF_TRUE 60					      	  s = ( a + b + c ) / 2					    	s = ( a + b ) / c / 2					  
8 LOAD_FAST 1 ( b )					      	  area = ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ** 0.5   	area = s * ( s - a ) * ( s - b ) * ( s - c ) ) ** 0.5	  
10 LOAD_CONST 1 ( 0 )					      	  print ( 'Area of a traingle is %f' % area )		    	print ( 'Area of a traingle is %f' % area )		  
12 COMPARE_OP 0 ( < )					      								    								  
14 POP_JUMP_IF_TRUE 60					      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 0 ( < )					      								    								  
22 POP_JUMP_IF_TRUE 60					      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 LOAD_FAST 1 ( b )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 2 ( c )					      								    								  
32 COMPARE_OP 1 ( <= )					      								    								  
34 POP_JUMP_IF_TRUE 60					      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 2 ( c )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 COMPARE_OP 1 ( <= )					      								    								  
46 POP_JUMP_IF_TRUE 60					      								    								  
48 LOAD_FAST 1 ( b )					      								    								  
50 LOAD_FAST 2 ( c )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 0 ( a )					      								    								  
56 COMPARE_OP 1 ( <= )					      								    								  
58 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
3 >> 60 LOAD_GLOBAL 0 ( print )				      								    								  
62 LOAD_CONST 2 ( 'Not a valid trianglen' )		      								    								  
64 CALL_FUNCTION 1					      								    								  
66 POP_TOP						      								    								  
							      								    								  
4 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
5 >> 72 LOAD_FAST 0 ( a )				      								    								  
74 LOAD_FAST 1 ( b )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 2 ( c )					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_CONST 3 ( 2 )					      								    								  
84 BINARY_TRUE_DIVIDE					      								    								  
86 STORE_FAST 3 ( s )					      								    								  
							      								    								  
6 88 LOAD_FAST 3 ( s )					      								    								  
90 LOAD_FAST 3 ( s )					      								    								  
92 LOAD_FAST 0 ( a )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_MULTIPLY					      								    								  
98 LOAD_FAST 3 ( s )					      								    								  
100 LOAD_FAST 1 ( b )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_FAST 3 ( s )					      								    								  
108 LOAD_FAST 2 ( c )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 BINARY_MULTIPLY					      								    								  
114 LOAD_CONST 4 ( 0.5 )				      								    								  
116 BINARY_POWER					      								    								  
118 STORE_FAST 4 ( area )				      								    								  
							      								    								  
7 120 LOAD_GLOBAL 0 ( print )				      								    								  
122 LOAD_CONST 5 ( 'Area of a traingle is %f' )		      								    								  
124 LOAD_FAST 4 ( area )				      								    								  
126 BINARY_MODULO					      								    								  
128 CALL_FUNCTION 1					      								    								  
130 POP_TOP						      								    								  
132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS		      POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS		    POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS		  POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7fbac0e89d20, file def rearrange ( a , size ) :				    def rearrange ( a , size ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  positive = 0						    	positive = 0						  
2 STORE_FAST 2 ( positive )				      	  negative = 1						    	negative = 1						  
							      	  while ( True ) :					    	while True :						  
3 4 LOAD_CONST 2 ( 1 )					      	      while ( positive < size and a [ positive ] >= 0 ) :   	    while positive < size and a [ positive ] >= 0 :	  
6 STORE_FAST 3 ( negative )				      		  positive = positive + 2			    		positive = positive + 2				  
							      	      while ( negative < size and a [ negative ] <= 0 ) :   	    while negative < size and a [ negative ] <= 0 :	  
4 8 SETUP_LOOP 120 ( to 130 )				      		  negative = negative + 2			    		negative = negative + 2				  
							      	      if ( positive < size and negative < size ) :	    	if positive < size and negative < size :		  
5 >> 10 SETUP_LOOP 32 ( to 44 )				      		  temp = a [ positive ]				    	    temp = a [ positive ]				  
>> 12 LOAD_FAST 2 ( positive )				      		  a [ positive ] = a [ negative ]		    	    a [ positive ] = a [ negative ]			  
14 LOAD_FAST 1 ( size )					      		  a [ negative ] = temp				    	    a [ negative ] = temp				  
16 COMPARE_OP 0 ( < )					      	      else :						    	else :							  
18 POP_JUMP_IF_FALSE 42					      		  break						    	    break						  
20 LOAD_FAST 0 ( a )					      								    								  
22 LOAD_FAST 2 ( positive )				      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 5 ( >= )					      								    								  
30 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( positive )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 2 ( positive )				      								    								  
40 JUMP_ABSOLUTE 12					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
7 >> 44 SETUP_LOOP 32 ( to 78 )				      								    								  
>> 46 LOAD_FAST 3 ( negative )				      								    								  
48 LOAD_FAST 1 ( size )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 76					      								    								  
54 LOAD_FAST 0 ( a )					      								    								  
56 LOAD_FAST 3 ( negative )				      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 1 ( <= )					      								    								  
64 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 66 LOAD_FAST 3 ( negative )				      								    								  
68 LOAD_CONST 3 ( 2 )					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 3 ( negative )				      								    								  
74 JUMP_ABSOLUTE 46					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_FAST 2 ( positive )			      								    								  
80 LOAD_FAST 1 ( size )					      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 124				      								    								  
86 LOAD_FAST 3 ( negative )				      								    								  
88 LOAD_FAST 1 ( size )					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
10 94 LOAD_FAST 0 ( a )					      								    								  
96 LOAD_FAST 2 ( positive )				      								    								  
98 BINARY_SUBSCR					      								    								  
100 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
11 102 LOAD_FAST 0 ( a )				      								    								  
104 LOAD_FAST 3 ( negative )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( a )					      								    								  
110 LOAD_FAST 2 ( positive )				      								    								  
112 STORE_SUBSCR					      								    								  
							      								    								  
12 114 LOAD_FAST 4 ( temp )				      								    								  
116 LOAD_FAST 0 ( a )					      								    								  
118 LOAD_FAST 3 ( negative )				      								    								  
120 STORE_SUBSCR					      								    								  
122 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
14 >> 124 BREAK_LOOP					      								    								  
126 JUMP_ABSOLUTE 10					      								    								  
128 POP_BLOCK						      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS     CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS	    CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS	  CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS
--							      --							    --								  --
Disassembly of <code object isConvertible at 0x7fbac0e8bc90,  def isConvertible ( str1 , str2 , k ) :			    def isConvertible ( str1 , str2 , k ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  if ( ( len ( str1 ) + len ( str2 ) ) < k ) :		    	if len ( str1 ) + len ( str2 ) < k :			  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( str1 )					      	      return True					    	    return True						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/CONVER
4 CALL_FUNCTION 1					      	  commonLength = 0					    	commonLength = 0					  TING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATION
6 LOAD_GLOBAL 0 ( len )					      	  for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) )  	for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) )  S.py", line 60, in <module>	  if f_filled(*param
8 LOAD_FAST 1 ( str2 )					      	      if ( str1 [ i ] == str2 [ i ] ) :			    	    if str1 [ i ] == str2 [ i ] :			  eters_set) == f_gold(*parameters_set):   File "/ho
10 CALL_FUNCTION 1					      		  commonLength += 1				    		commonLength += 1				  me/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8nns
12 BINARY_ADD						      	      else :						    	    else :						  vsdt/eval_scripts/dis_sa-python_sa.test/CONVERTING
14 LOAD_FAST 2 ( k )					      		  break						    		break						  _ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS.py
16 COMPARE_OP 0 ( < )					      	  if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength 	if ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) ", line 40, in f_filled     if ( k - len ( str1 )
18 POP_JUMP_IF_FALSE 24					      	      return True					    	    return True						  - len ( str2 ) + 2 * commonLength ) % 0 : ZeroDivi
							      	  return False						    	return False						  sionError: integer division or modulo by zero
3 20 LOAD_CONST 1 ( True )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_CONST 2 ( 0 )				      								    								  
26 STORE_FAST 3 ( commonLength )			      								    								  
							      								    								  
5 28 SETUP_LOOP 62 ( to 92 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 LOAD_GLOBAL 2 ( min )				      								    								  
36 LOAD_GLOBAL 0 ( len )				      								    								  
38 LOAD_FAST 0 ( str1 )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_GLOBAL 0 ( len )				      								    								  
44 LOAD_FAST 1 ( str2 )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 CALL_FUNCTION 3					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 32 ( to 90 )				      								    								  
58 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 60 LOAD_FAST 0 ( str1 )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( str2 )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
7 76 LOAD_FAST 3 ( commonLength )			      								    								  
78 LOAD_CONST 3 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 3 ( commonLength )			      								    								  
84 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
9 >> 86 BREAK_LOOP					      								    								  
88 JUMP_ABSOLUTE 56					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 2 ( k )				      								    								  
94 LOAD_GLOBAL 0 ( len )				      								    								  
96 LOAD_FAST 0 ( str1 )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_GLOBAL 0 ( len )				      								    								  
104 LOAD_FAST 1 ( str2 )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 LOAD_CONST 4 ( 2 )					      								    								  
112 LOAD_FAST 3 ( commonLength )			      								    								  
114 BINARY_MULTIPLY					      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_CONST 4 ( 2 )					      								    								  
120 BINARY_MODULO					      								    								  
122 LOAD_CONST 2 ( 0 )					      								    								  
124 COMPARE_OP 2 ( == )					      								    								  
126 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
11 128 LOAD_CONST 1 ( True )				      								    								  
130 RETURN_VALUE					      								    								  
							      								    								  
12 >> 132 LOAD_CONST 5 ( False )			      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			      FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			    FREQUENCY_ELEMENT_UNSORTED_ARRAY_1				  FREQUENCY_ELEMENT_UNSORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object countFreq at 0x7fbac0e89d20, file def countFreq ( a , n ) :					    def countFreq ( a , n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  hm = dict ( )						    	hm = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( hm )					      	      hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	    	    hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1		  
							      	  cumul = 0						    	cumul = 0						  
3 6 SETUP_LOOP 44 ( to 52 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
8 LOAD_GLOBAL 1 ( range )				      	      cumul += hm [ a [ i ] ]				    	    cumul += hm [ a [ i ] ]				  
10 LOAD_FAST 1 ( n )					      	      if ( hm [ a [ i ] ] > 0 ) :			    	    if hm [ a [ i ] ] > 0 :				  
12 CALL_FUNCTION 1					      		  print ( a [ i ] , "->" , cumul )		    		print ( a [ i ] , "->" , cumul )		  
14 GET_ITER						      	      hm [ a [ i ] ] = 0				    	    hm [ a [ i ] ] = 0					  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( hm )					      								    								  
22 LOAD_METHOD 2 ( get )				      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 CALL_METHOD 2					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( hm )					      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 4 ( cumul )				      								    								  
							      								    								  
6 56 SETUP_LOOP 76 ( to 134 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 64 ( to 132 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_FAST 4 ( cumul )				      								    								  
72 LOAD_FAST 2 ( hm )					      								    								  
74 LOAD_FAST 0 ( a )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBSCR					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 4 ( cumul )				      								    								  
							      								    								  
8 86 LOAD_FAST 2 ( hm )					      								    								  
88 LOAD_FAST 0 ( a )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 1 ( 0 )					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
9 102 LOAD_GLOBAL 3 ( print )				      								    								  
104 LOAD_FAST 0 ( a )					      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 3 ( '->' )				      								    								  
112 LOAD_FAST 4 ( cumul )				      								    								  
114 CALL_FUNCTION 3					      								    								  
116 POP_TOP						      								    								  
							      								    								  
10 >> 118 LOAD_CONST 1 ( 0 )				      								    								  
120 LOAD_FAST 2 ( hm )					      								    								  
122 LOAD_FAST 0 ( a )					      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 STORE_SUBSCR					      								    								  
130 JUMP_ABSOLUTE 66					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			      FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			    FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			  FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY
--							      --							    --								  --
Disassembly of <code object firstElement at 0x7fbac0e8de40, f def firstElement ( arr , n , k ) :			    def firstElement ( arr , n , k ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_MAP 0						      	  count_map = { } ;					    	count_map = { }						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( count_map )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  _sa.test/FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY.py"
							      	      if ( arr [ i ] in count_map.keys ( ) ) :		    	    if arr [ i ] in count_map.keys ( ) :		  , line 42	return arr [ i ]	  ^ SyntaxEr
3 4 SETUP_LOOP 76 ( to 82 )				      		  count_map [ arr [ i ] ] += 1			    		count_map [ arr [ i ] ] += 1			  ror: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    else :						  
8 LOAD_CONST 1 ( 0 )					      		  count_map [ arr [ i ] ] = 1			    		count_map [ arr [ i ] ] = 1			  
10 LOAD_FAST 1 ( n )					      	      i += 1						    	    i += 1						  
12 CALL_FUNCTION 2					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
14 GET_ITER						      	      if ( count_map [ arr [ i ] ] == k ) :		    	    if count_map [ arr [ i ] == k :			  
>> 16 FOR_ITER 62 ( to 80 )				      		  return arr [ i ]				    		return arr [ i ]				  
18 STORE_FAST 4 ( i )					      	      i += 1						    	    i += 1						  
							      	  return - 1						    return - 1							  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 4 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 3 ( count_map )				      								    								  
28 LOAD_METHOD 1 ( keys )				      								    								  
30 CALL_METHOD 0					      								    								  
32 COMPARE_OP 6 ( in )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( count_map )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_FORWARD 12 ( to 70 )				      								    								  
							      								    								  
7 >> 58 LOAD_CONST 2 ( 1 )				      								    								  
60 LOAD_FAST 3 ( count_map )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 70 LOAD_FAST 4 ( i )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 4 ( i )					      								    								  
78 JUMP_ABSOLUTE 16					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
9 >> 82 SETUP_LOOP 50 ( to 134 )			      								    								  
84 LOAD_GLOBAL 0 ( range )				      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 LOAD_FAST 1 ( n )					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 36 ( to 132 )				      								    								  
96 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 98 LOAD_FAST 3 ( count_map )				      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 2 ( k )					      								    								  
110 COMPARE_OP 2 ( == )					      								    								  
112 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
11 114 LOAD_FAST 0 ( arr )				      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 RETURN_VALUE					      								    								  
							      								    								  
12 >> 122 LOAD_FAST 4 ( i )				      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 4 ( i )					      								    								  
130 JUMP_ABSOLUTE 94					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
13 >> 134 LOAD_CONST 3 ( - 1 )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI
--							      --							    --								  --
Disassembly of <code object printMinIndexChar at 0x7fbac0e8bc def printMinIndexChar ( Str , patt ) :			    def printMinIndexChar ( Str , patt ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 1000000000 )				      	  minIndex = 10 ** 9					    	minIndex = 1000000000					  
2 STORE_FAST 2 ( minIndex )				      	  m = len ( Str )					    	m = len ( Str )						  
							      	  n = len ( patt )					    	n = len ( patt )					  
3 4 LOAD_GLOBAL 0 ( len )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 LOAD_FAST 0 ( Str )					      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
8 CALL_FUNCTION 1					      		  if ( patt [ i ] == Str [ j ] and j < minIndex ) : 		if patt [ i ] == Str [ j ] and j < minIndex :	  
10 STORE_FAST 3 ( m )					      		      minIndex = j				    		    minIndex = j				  
							      		      break					    		    break					  
4 12 LOAD_GLOBAL 0 ( len )				      	  if ( minIndex != 10 ** 9 ) :				    	if minIndex != 1000000000 :				  
14 LOAD_FAST 1 ( patt )					      	      print ( "Minimum Index Character = " , Str [ minIndex 	    print ( "Minimum Index Character = " [ Str [ minIndex 
16 CALL_FUNCTION 1					      	  else :						    	else :							  
18 STORE_FAST 4 ( n )					      	      print ( "No character present" )			    	    print ( "No character present" )			  
							      								    								  
5 20 SETUP_LOOP 64 ( to 86 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 4 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 52 ( to 84 )				      								    								  
32 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 34 SETUP_LOOP 46 ( to 82 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_FAST 3 ( m )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 34 ( to 80 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( patt )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( Str )					      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
64 LOAD_FAST 6 ( j )					      								    								  
66 LOAD_FAST 2 ( minIndex )				      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 72 LOAD_FAST 6 ( j )					      								    								  
74 STORE_FAST 2 ( minIndex )				      								    								  
							      								    								  
9 76 BREAK_LOOP						      								    								  
78 JUMP_ABSOLUTE 44					      								    								  
>> 80 POP_BLOCK						      								    								  
>> 82 JUMP_ABSOLUTE 30					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 2 ( minIndex )			      								    								  
88 LOAD_CONST 1 ( 1000000000 )				      								    								  
90 COMPARE_OP 3 ( != )					      								    								  
92 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
11 94 LOAD_GLOBAL 2 ( print )				      								    								  
96 LOAD_CONST 2 ( 'Minimum Index Character = ' )	      								    								  
98 LOAD_FAST 0 ( Str )					      								    								  
100 LOAD_FAST 2 ( minIndex )				      								    								  
102 BINARY_SUBSCR					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 POP_TOP						      								    								  
108 JUMP_FORWARD 8 ( to 118 )				      								    								  
							      								    								  
13 >> 110 LOAD_GLOBAL 2 ( print )			      								    								  
112 LOAD_CONST 3 ( 'No character present' )		      								    								  
114 CALL_FUNCTION 1					      								    								  
116 POP_TOP						      								    								  
>> 118 LOAD_CONST 0 ( None )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_2				      MAXIMUM_TRIPLET_SUM_ARRAY_2				    MAXIMUM_TRIPLET_SUM_ARRAY_2					  MAXIMUM_TRIPLET_SUM_ARRAY_2
--							      --							    --								  --
Disassembly of <code object maxTripletSum at 0x7fbac0e8de40,  def maxTripletSum ( arr , n ) :				    def maxTripletSum ( arr , n ) :				  failure : #Results: 2, 10
2 0 LOAD_CONST 1 ( - 100000000 )			      	  maxA = - 100000000					    	maxA = - 100000000					  
2 STORE_FAST 2 ( maxA )					      	  maxB = - 100000000					    	maxB = - 100000000					  
							      	  maxC = - 100000000					    	maxC = - 100000000					  
3 4 LOAD_CONST 1 ( - 100000000 )			      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 3 ( maxB )					      	      if ( arr [ i ] > maxA ) :				    	    if arr [ i ] > maxA :				  
							      		  maxC = maxB					    		maxC = maxB					  
4 8 LOAD_CONST 1 ( - 100000000 )			      		  maxB = maxA					    		maxB = maxA					  
10 STORE_FAST 4 ( maxC )				      		  maxA = arr [ i ]				    		maxB = arr [ i ]				  
							      	      elif ( arr [ i ] > maxB ) :			    		maxA = arr [ i ]				  
5 12 SETUP_LOOP 94 ( to 108 )				      		  maxC = maxB					    	    elif arr [ i ] > maxB :				  
14 LOAD_GLOBAL 0 ( range )				      		  maxB = arr [ i ]				    		maxC = maxB					  
16 LOAD_CONST 2 ( 0 )					      	      elif ( arr [ i ] > maxC ) :			    		maxB = arr [ i ]				  
18 LOAD_FAST 1 ( n )					      		  maxC = arr [ i ]				    	    elif arr [ i ] > maxC :				  
20 CALL_FUNCTION 2					      	  return ( maxA + maxB + maxC )				    		maxC = arr [ i ]				  
22 GET_ITER						      								    	return maxA + maxB + maxC				  
>> 24 FOR_ITER 80 ( to 106 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( maxA )					      								    								  
36 COMPARE_OP 4 ( > )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 40 LOAD_FAST 3 ( maxB )				      								    								  
42 STORE_FAST 4 ( maxC )				      								    								  
							      								    								  
8 44 LOAD_FAST 2 ( maxA )				      								    								  
46 STORE_FAST 3 ( maxB )				      								    								  
							      								    								  
9 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 2 ( maxA )				      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
10 >> 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 3 ( maxB )					      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
11 70 LOAD_FAST 3 ( maxB )				      								    								  
72 STORE_FAST 4 ( maxC )				      								    								  
							      								    								  
12 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 5 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 3 ( maxB )				      								    								  
82 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
13 >> 84 LOAD_FAST 0 ( arr )				      								    								  
86 LOAD_FAST 5 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 4 ( maxC )					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
14 96 LOAD_FAST 0 ( arr )				      								    								  
98 LOAD_FAST 5 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 STORE_FAST 4 ( maxC )				      								    								  
104 JUMP_ABSOLUTE 24					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
15 >> 108 LOAD_FAST 2 ( maxA )				      								    								  
110 LOAD_FAST 3 ( maxB )				      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 4 ( maxC )				      								    								  
116 BINARY_ADD						      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY			      FREQUENCY_ELEMENT_UNSORTED_ARRAY				    FREQUENCY_ELEMENT_UNSORTED_ARRAY				  FREQUENCY_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object countFreq at 0x7fbac0e89d20, file def countFreq ( a , n ) :					    def countFreq ( a , n ) :					  script_not_found : None
2 0 BUILD_MAP 0						      	  hm = { }						    	hm = { }						  
2 STORE_FAST 2 ( hm )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	    	    hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1		  
3 4 SETUP_LOOP 46 ( to 52 )				      	  st = set ( )						    	st = set ( )						  
6 LOAD_GLOBAL 0 ( range )				      	  for x in hm :						    	for x in hm :						  
8 LOAD_CONST 1 ( 0 )					      	      st.add ( ( x , hm [ x ] ) )			    	    st.add ( x , hm [ x ] )				  
10 LOAD_FAST 1 ( n )					      	  cumul = 0						    	cumul = 0						  
12 CALL_FUNCTION 2					      	  for x in sorted ( st ) :				    	for x in sorted ( st ) :				  
14 GET_ITER						      	      cumul += x [ 1 ]					    	    cumul += x [ 1 ]					  
>> 16 FOR_ITER 32 ( to 50 )				      	      print ( x [ 0 ] , cumul )				    	    print ( x [ 0 ] , cumul )				  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( hm )					      								    								  
22 LOAD_METHOD 1 ( get )				      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 CALL_METHOD 2					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( hm )					      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_GLOBAL 2 ( set )				      								    								  
54 CALL_FUNCTION 0					      								    								  
56 STORE_FAST 4 ( st )					      								    								  
							      								    								  
6 58 SETUP_LOOP 30 ( to 90 )				      								    								  
60 LOAD_FAST 2 ( hm )					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 22 ( to 88 )				      								    								  
66 STORE_FAST 5 ( x )					      								    								  
							      								    								  
7 68 LOAD_FAST 4 ( st )					      								    								  
70 LOAD_METHOD 3 ( add )				      								    								  
72 LOAD_FAST 5 ( x )					      								    								  
74 LOAD_FAST 2 ( hm )					      								    								  
76 LOAD_FAST 5 ( x )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BUILD_TUPLE 2					      								    								  
82 CALL_METHOD 1					      								    								  
84 POP_TOP						      								    								  
86 JUMP_ABSOLUTE 64					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
8 >> 90 LOAD_CONST 1 ( 0 )				      								    								  
92 STORE_FAST 6 ( cumul )				      								    								  
							      								    								  
9 94 SETUP_LOOP 42 ( to 138 )				      								    								  
96 LOAD_GLOBAL 4 ( sorted )				      								    								  
98 LOAD_FAST 4 ( st )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 GET_ITER						      								    								  
>> 104 FOR_ITER 30 ( to 136 )				      								    								  
106 STORE_FAST 5 ( x )					      								    								  
							      								    								  
10 108 LOAD_FAST 6 ( cumul )				      								    								  
110 LOAD_FAST 5 ( x )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 6 ( cumul )				      								    								  
							      								    								  
11 120 LOAD_GLOBAL 5 ( print )				      								    								  
122 LOAD_FAST 5 ( x )					      								    								  
124 LOAD_CONST 1 ( 0 )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 6 ( cumul )				      								    								  
130 CALL_FUNCTION 2					      								    								  
132 POP_TOP						      								    								  
134 JUMP_ABSOLUTE 104					      								    								  
>> 136 POP_BLOCK					      								    								  
>> 138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA
--							      --							    --								  --
Disassembly of <code object noAdjacentDup at 0x7fbac0e89d20,  def noAdjacentDup ( s ) :					    def noAdjacentDup ( s ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
4 CALL_FUNCTION 1					      	      if ( s [ i ] == s [ i - 1 ] ) :			    	    if s [ i ] == s [ i - 1 ] :				  
6 STORE_FAST 1 ( n )					      		  s [ i ] = "a"					    		s [ i ] = "a"					  
							      		  while ( s [ i ] == s [ i - 1 ] or ( i + 1 < n and 		while s [ i ] == s [ i - 1 ] or ( i + 1 < n ) and 
3 8 SETUP_LOOP 128 ( to 138 )				      		      s [ i ] += 1				    		    s [ i ] += 1				  
10 LOAD_GLOBAL 1 ( range )				      		  i += 1					    	    i += 1						  
12 LOAD_CONST 1 ( 1 )					      	  return s						    	return s						  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 114 ( to 136 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 44 LOAD_CONST 2 ( 'a' )				      								    								  
46 LOAD_FAST 0 ( s )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
							      								    								  
6 52 SETUP_LOOP 72 ( to 126 )				      								    								  
>> 54 LOAD_FAST 0 ( s )					      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( s )					      								    								  
62 LOAD_FAST 2 ( i )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_TRUE 106					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 124				      								    								  
86 LOAD_FAST 0 ( s )					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 0 ( s )					      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 BINARY_SUBSCR					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
7 >> 106 LOAD_FAST 0 ( s )				      								    								  
108 LOAD_FAST 2 ( i )					      								    								  
110 DUP_TOP_TWO						      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 ROT_THREE						      								    								  
120 STORE_SUBSCR					      								    								  
122 JUMP_ABSOLUTE 54					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
8 >> 126 LOAD_FAST 2 ( i )				      								    								  
128 LOAD_CONST 1 ( 1 )					      								    								  
130 INPLACE_ADD						      								    								  
132 STORE_FAST 2 ( i )					      								    								  
134 JUMP_ABSOLUTE 20					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
9 >> 138 LOAD_FAST 0 ( s )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX			      FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX			    FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX				  FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX
--							      --							    --								  --
Disassembly of <code object permutatedRows at 0x7fbac0e8bc90, def permutatedRows ( mat , m , n , r ) :			    def permutatedRows ( mat , m , n , r ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  for j in range ( n ) :				    	for j in range ( n ) :					  _sa.test/FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX.py",
4 STORE_FAST 4 ( s )					      	      s.add ( mat [ r ] [ j ] )				    	    s.add ( mat [ r ] [ j ] )				  line 45     continue	   ^ SyntaxError: 'continue'
							      	  for i in range ( m ) :				    	for i in range ( m ) :					   not properly in loop
3 6 SETUP_LOOP 34 ( to 42 )				      	      if i == r :					    	    if i == r :						  
8 LOAD_GLOBAL 1 ( range )				      		  continue					    		continue					  
10 LOAD_FAST 2 ( n )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
12 CALL_FUNCTION 1					      		  if mat [ i ] [ j ] not in s :			    		if mat [ i ] [ j ] not in s :			  
14 GET_ITER						      		      j = j - 2					    		    j = j - 2					  
>> 16 FOR_ITER 22 ( to 40 )				      		      break ;					    		    break					  
18 STORE_FAST 5 ( j )					      	      if j + 1 != n :					    	if j + 1 != n :						  
							      		  continue					    	    continue						  
4 20 LOAD_FAST 4 ( s )					      	      print ( i )					    	print ( i )						  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( mat )					      								    								  
26 LOAD_FAST 3 ( r )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 5 ( j )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
38 JUMP_ABSOLUTE 16					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 SETUP_LOOP 92 ( to 136 )			      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 1 ( m )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 80 ( to 134 )				      								    								  
54 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 56 LOAD_FAST 6 ( i )					      								    								  
58 LOAD_FAST 3 ( r )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
7 64 JUMP_ABSOLUTE 52					      								    								  
							      								    								  
8 >> 66 SETUP_LOOP 42 ( to 110 )			      								    								  
68 LOAD_GLOBAL 1 ( range )				      								    								  
70 LOAD_FAST 2 ( n )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 30 ( to 108 )				      								    								  
78 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 80 LOAD_FAST 0 ( mat )				      								    								  
82 LOAD_FAST 6 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 4 ( s )					      								    								  
92 COMPARE_OP 7 ( not in )				      								    								  
94 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
10 96 LOAD_FAST 5 ( j )					      								    								  
98 LOAD_CONST 1 ( 2 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 104 BREAK_LOOP					      								    								  
106 JUMP_ABSOLUTE 76					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
12 >> 110 LOAD_FAST 5 ( j )				      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_FAST 2 ( n )					      								    								  
118 COMPARE_OP 3 ( != )					      								    								  
120 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
13 122 JUMP_ABSOLUTE 52					      								    								  
							      								    								  
14 >> 124 LOAD_GLOBAL 3 ( print )			      								    								  
126 LOAD_FAST 6 ( i )					      								    								  
128 CALL_FUNCTION 1					      								    								  
130 POP_TOP						      								    								  
132 JUMP_ABSOLUTE 52					      								    								  
>> 134 POP_BLOCK					      								    								  
>> 136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ARRANGEMENT_QUEUE_GIVEN_TIME			      FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				    FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				  FIND_ARRANGEMENT_QUEUE_GIVEN_TIME
--							      --							    --								  --
Disassembly of <code object solve at 0x7fbac0e8d540, file "<d def solve ( n , t , p ) :					    def solve ( n , t , p ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  s = list ( p )					    	s = list ( p )						  
2 LOAD_FAST 2 ( p )					      	  for i in range ( 0 , t ) :				    	for i in range ( 0 , t ) :				  
4 CALL_FUNCTION 1					      	      for j in range ( 0 , n - 1 ) :			    	    for j in range ( 0 , n - 1 ) :			  
6 STORE_FAST 3 ( s )					      		  if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :    		if s [ j ] == 'B' and s [ j + 1 ] == 'G' :	  
							      		      temp = s [ j ] ;				    		    temp = s [ j ]				  
3 8 SETUP_LOOP 114 ( to 124 )				      		      s [ j ] = s [ j + 1 ] ;			    		    s [ j ] = s [ j + 1 ]			  
10 LOAD_GLOBAL 1 ( range )				      		      s [ j + 1 ] = temp ;			    		    j = temp					  
12 LOAD_CONST 1 ( 0 )					      		      j = j + 1					    	print ( ''.join ( s ) )					  
14 LOAD_FAST 1 ( t )					      	  print ( ''.join ( s ) )				    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 100 ( to 122 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 94 ( to 120 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 76 ( to 118 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 3 ( s )					      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 'B' )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 40					      								    								  
56 LOAD_FAST 3 ( s )					      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_CONST 4 ( 'G' )					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 72 LOAD_FAST 3 ( s )					      								    								  
74 LOAD_FAST 5 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 STORE_FAST 6 ( temp )				      								    								  
							      								    								  
7 80 LOAD_FAST 3 ( s )					      								    								  
82 LOAD_FAST 5 ( j )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_ADD						      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 3 ( s )					      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 STORE_SUBSCR						      								    								  
							      								    								  
8 96 LOAD_FAST 6 ( temp )				      								    								  
98 LOAD_FAST 3 ( s )					      								    								  
100 LOAD_FAST 5 ( j )					      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_SUBSCR					      								    								  
							      								    								  
9 108 LOAD_FAST 5 ( j )					      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 5 ( j )					      								    								  
116 JUMP_ABSOLUTE 40					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 20					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
10 >> 124 LOAD_GLOBAL 2 ( print )			      								    								  
126 LOAD_CONST 5 ( '' )					      								    								  
128 LOAD_METHOD 3 ( join )				      								    								  
130 LOAD_FAST 3 ( s )					      								    								  
132 CALL_METHOD 1					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 POP_TOP						      								    								  
138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		      FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		    FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		  FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES
--							      --							    --								  --
Disassembly of <code object findSDSFunc at 0x7fbac0e8bc90, fi def findSDSFunc ( n ) :					    def findSDSFunc ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  DP = [ 0 ] * ( n + 1 )				    	DP = [ 0 ] * ( n + 1 ) )				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  DP [ 0 ] = 0						    	DP [ 0 ] = 0						  _sa.test/FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SE
4 LOAD_FAST 0 ( n )					      	  DP [ 1 ] = 1						    	DP [ 1 ] = 1						  RIES.py", line 30	DP = [ 0 ] * ( n + 1 ) )
6 LOAD_CONST 2 ( 1 )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  			  ^ SyntaxError: invalid syn
8 BINARY_ADD						      	      if ( int ( i % 2 ) == 0 ) :			    	    if int ( i % 2 ) == 0 :				  tax
10 BINARY_MULTIPLY					      		  DP [ i ] = DP [ int ( i / 2 ) ]		    		DP [ i ] = DP [ int ( i / 2 ) ]			  
12 STORE_FAST 1 ( DP )					      	      else :						    	    else :						  
							      		  DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [  		DP [ i ] = DP [ int ( i - 1 ) / 2 ) ] + DP [ int  
3 14 LOAD_CONST 1 ( 0 )					      	  return DP [ n ]					    	return DP [ n ]						  
16 LOAD_FAST 1 ( DP )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 1 ( DP )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 SETUP_LOOP 104 ( to 136 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 86 ( to 134 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 50 LOAD_GLOBAL 1 ( int )				      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 BINARY_MODULO					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
7 66 LOAD_FAST 1 ( DP )					      								    								  
68 LOAD_GLOBAL 1 ( int )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 BINARY_TRUE_DIVIDE					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( DP )					      								    								  
82 LOAD_FAST 2 ( i )					      								    								  
84 STORE_SUBSCR						      								    								  
86 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
9 >> 88 LOAD_FAST 1 ( DP )				      								    								  
90 LOAD_GLOBAL 1 ( int )				      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 LOAD_CONST 3 ( 2 )					      								    								  
100 BINARY_TRUE_DIVIDE					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 1 ( DP )					      								    								  
108 LOAD_GLOBAL 1 ( int )				      								    								  
110 LOAD_FAST 2 ( i )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_CONST 3 ( 2 )					      								    								  
118 BINARY_TRUE_DIVIDE					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 BINARY_SUBSCR					      								    								  
124 BINARY_ADD						      								    								  
126 LOAD_FAST 1 ( DP )					      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 STORE_SUBSCR					      								    								  
132 JUMP_ABSOLUTE 46					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
10 >> 136 LOAD_FAST 1 ( DP )				      								    								  
138 LOAD_FAST 0 ( n )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMAINDER_7_LARGE_NUMBERS				      REMAINDER_7_LARGE_NUMBERS					    REMAINDER_7_LARGE_NUMBERS					  REMAINDER_7_LARGE_NUMBERS
--							      --							    --								  --
Disassembly of <code object <<unk>> inderWith7 at 0x7fbac0e8b def <<unk>> inderWith7 ( num ) :				    def <unk> inderWith7 ( num ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ] ;		    	series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]		  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 2 ( 3 )					      	  series_index = 0 ;					    	series_index = 0					  _sa.test/REMAINDER_7_LARGE_NUMBERS.py", line 31
4 LOAD_CONST 3 ( 2 )					      	  result = 0 ;						    	result = 0						    def f_filled inderWith7 ( num ) :
6 LOAD_CONST 4 ( - 1 )					      	  for i in range ( ( len ( num ) - 1 ) , - 1 , - 1 ) :	    	for i in range ( len ( num ) - 1 , - 1 , - 1 ) :	  	      ^ SyntaxError: invalid syntax
8 LOAD_CONST 5 ( - 3 )					      	      digit = ord ( num [ i ] ) - 48 ;			    	    digit = ord ( num [ i ] ) - 48			  
10 LOAD_CONST 6 ( - 2 )					      	      result += digit * series [ series_index ] ;	    	    result += digit * series [ series_index ]		  
12 BUILD_LIST 6						      	      series_index = ( series_index + 1 ) % 6 ;		    	    series_index = series_index + 1 % 6			  
14 STORE_FAST 1 ( series )				      	      result %= 7 ;					    	    result = result + 7					  
							      	  if ( result < 0 ) :					    	if result < 0 :						  
3 16 LOAD_CONST 7 ( 0 )					      	      result = ( result + 7 ) % 7 ;			    	    result = result + 7 + 7				  
18 STORE_FAST 2 ( series_index )			      	  return result ;					    return result						  
							      								    								  
4 20 LOAD_CONST 7 ( 0 )					      								    								  
22 STORE_FAST 3 ( result )				      								    								  
							      								    								  
5 24 SETUP_LOOP 80 ( to 106 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_GLOBAL 1 ( len )				      								    								  
30 LOAD_FAST 0 ( num )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 4 ( - 1 )					      								    								  
40 LOAD_CONST 4 ( - 1 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 56 ( to 104 )				      								    								  
48 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 50 LOAD_GLOBAL 2 ( ord )				      								    								  
52 LOAD_FAST 0 ( num )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_CONST 8 ( 48 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 STORE_FAST 5 ( digit )				      								    								  
							      								    								  
7 66 LOAD_FAST 3 ( result )				      								    								  
68 LOAD_FAST 5 ( digit )				      								    								  
70 LOAD_FAST 1 ( series )				      								    								  
72 LOAD_FAST 2 ( series_index )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 3 ( result )				      								    								  
							      								    								  
8 82 LOAD_FAST 2 ( series_index )			      								    								  
84 LOAD_CONST 1 ( 1 )					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_CONST 9 ( 6 )					      								    								  
90 BINARY_MODULO					      								    								  
92 STORE_FAST 2 ( series_index )			      								    								  
							      								    								  
9 94 LOAD_FAST 3 ( result )				      								    								  
96 LOAD_CONST 10 ( 7 )					      								    								  
98 INPLACE_MODULO					      								    								  
100 STORE_FAST 3 ( result )				      								    								  
102 JUMP_ABSOLUTE 46					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 LOAD_FAST 3 ( result )			      								    								  
108 LOAD_CONST 7 ( 0 )					      								    								  
110 COMPARE_OP 0 ( < )					      								    								  
112 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
11 114 LOAD_FAST 3 ( result )				      								    								  
116 LOAD_CONST 10 ( 7 )					      								    								  
118 BINARY_ADD						      								    								  
120 LOAD_CONST 10 ( 7 )					      								    								  
122 BINARY_MODULO					      								    								  
124 STORE_FAST 3 ( result )				      								    								  
							      								    								  
12 >> 126 LOAD_FAST 3 ( result )			      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_
--							      --							    --								  --
Disassembly of <code object getMinSquares at 0x7fbac0e89d20,  def getMinSquares ( n ) :					    def getMinSquares ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 , 1 , 2 , 3 ]				    	dp = [ 0 , 1 , 2 , 3 ]					  
2 LOAD_CONST 2 ( 1 )					      	  for i in range ( 4 , n + 1 ) :			    	for i in range ( 4 , n + 1 ) :				  
4 LOAD_CONST 3 ( 2 )					      	      dp.append ( i )					    	    dp.append ( i )					  
6 LOAD_CONST 4 ( 3 )					      	      for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1  	    for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1  
8 BUILD_LIST 4						      		  temp = x * x ;				    		temp = x * x					  
10 STORE_FAST 1 ( dp )					      		  if temp > i :					    		if temp > i :					  
							      		      break					    		    break					  
3 12 SETUP_LOOP 118 ( to 132 )				      		  else :					    	    else :						  
14 LOAD_GLOBAL 0 ( range )				      		      dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp 		dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] ) 
16 LOAD_CONST 5 ( 4 )					      	  return dp [ n ]					    return dp [ n ]						  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 100 ( to 130 )				      								    								  
30 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( dp )					      								    								  
34 LOAD_METHOD 1 ( append )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 CALL_METHOD 1					      								    								  
40 POP_TOP						      								    								  
							      								    								  
5 42 SETUP_LOOP 84 ( to 128 )				      								    								  
44 LOAD_GLOBAL 0 ( range )				      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 LOAD_GLOBAL 2 ( int )				      								    								  
50 LOAD_GLOBAL 3 ( ceil )				      								    								  
52 LOAD_GLOBAL 4 ( sqrt )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 2					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 54 ( to 126 )				      								    								  
72 STORE_FAST 3 ( x )					      								    								  
							      								    								  
6 74 LOAD_FAST 3 ( x )					      								    								  
76 LOAD_FAST 3 ( x )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
7 82 LOAD_FAST 4 ( temp )				      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
8 90 BREAK_LOOP						      								    								  
92 JUMP_ABSOLUTE 70					      								    								  
							      								    								  
10 >> 94 LOAD_GLOBAL 5 ( min )				      								    								  
96 LOAD_FAST 1 ( dp )					      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 LOAD_FAST 1 ( dp )					      								    								  
106 LOAD_FAST 2 ( i )					      								    								  
108 LOAD_FAST 4 ( temp )				      								    								  
110 BINARY_SUBTRACT					      								    								  
112 BINARY_SUBSCR					      								    								  
114 BINARY_ADD						      								    								  
116 CALL_FUNCTION 2					      								    								  
118 LOAD_FAST 1 ( dp )					      								    								  
120 LOAD_FAST 2 ( i )					      								    								  
122 STORE_SUBSCR					      								    								  
124 JUMP_ABSOLUTE 70					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 JUMP_ABSOLUTE 28					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
11 >> 132 LOAD_FAST 1 ( dp )				      								    								  
134 LOAD_FAST 0 ( n )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		      NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		    NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		  NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3
--							      --							    --								  --
Disassembly of <code object divisible at 0x7fbac0e89d20, file def divisible ( num ) :					    def divisible ( num ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( num ) ;					    	n = len ( num )						  
2 LOAD_FAST 0 ( num )					      	  sum = 0 ;						    	sum = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 1 ( n )					      	      sum += int ( num [ i ] ) ;			    	    sum += int ( num [ i ] )				  
							      	  if ( sum % 3 == 0 ) :					    	if sum % 3 == 0 :					  
3 8 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
10 STORE_FAST 2 ( sum )					      	  if ( n == 1 ) :					    	if n == 1 :						  
							      	      return - 1 ;					    	    return - 1						  
4 12 SETUP_LOOP 32 ( to 46 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
14 LOAD_GLOBAL 1 ( range )				      	      if ( sum % 3 == int ( num [ i ] ) % 3 ) :		    	    if sum % 3 == int ( num [ i ] ) % 3 :		  
16 LOAD_FAST 1 ( n )					      		  return 1 ;					    		return 1					  
18 CALL_FUNCTION 1					      	  if ( n == 2 ) :					    	if n == 2 :						  
20 GET_ITER						      	      return - 1 ;					    	    return - 1						  
>> 22 FOR_ITER 20 ( to 44 )				      	  return 2 ;						    return 2							  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( sum )				      								    								  
28 LOAD_GLOBAL 2 ( int )				      								    								  
30 LOAD_FAST 0 ( num )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( sum )					      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 2 ( sum )				      								    								  
48 LOAD_CONST 2 ( 3 )					      								    								  
50 BINARY_MODULO					      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 58 LOAD_CONST 1 ( 0 )					      								    								  
60 RETURN_VALUE						      								    								  
							      								    								  
8 >> 62 LOAD_FAST 1 ( n )				      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 70 LOAD_CONST 4 ( - 1 )				      								    								  
72 RETURN_VALUE						      								    								  
							      								    								  
10 >> 74 SETUP_LOOP 44 ( to 120 )			      								    								  
76 LOAD_GLOBAL 1 ( range )				      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 32 ( to 118 )				      								    								  
86 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( sum )				      								    								  
90 LOAD_CONST 2 ( 3 )					      								    								  
92 BINARY_MODULO					      								    								  
94 LOAD_GLOBAL 2 ( int )				      								    								  
96 LOAD_FAST 0 ( num )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_CONST 2 ( 3 )					      								    								  
106 BINARY_MODULO					      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
12 112 LOAD_CONST 3 ( 1 )				      								    								  
114 RETURN_VALUE					      								    								  
116 JUMP_ABSOLUTE 84					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
13 >> 120 LOAD_FAST 1 ( n )				      								    								  
122 LOAD_CONST 5 ( 2 )					      								    								  
124 COMPARE_OP 2 ( == )					      								    								  
126 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
14 128 LOAD_CONST 4 ( - 1 )				      								    								  
130 RETURN_VALUE					      								    								  
							      								    								  
15 >> 132 LOAD_CONST 5 ( 2 )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2_1				      SORT_ARRAY_WAVE_FORM_2_1					    SORT_ARRAY_WAVE_FORM_2_1					  SORT_ARRAY_WAVE_FORM_2_1
--							      --							    --								  --
Disassembly of <code object sortInWave at 0x7fbac0e8de40, fil def sortInWave ( arr , n ) :				    def sortInWave ( arr , n ) :				  failure : #Results: 7, 10
2 0 SETUP_LOOP 148 ( to 150 )				      	  for i in range ( 0 , n , 2 ) :			    	for i in range ( 0 , n , 2 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :	    	    if i > 0 and arr [ i ] < arr [ i - 1 ] :		  
4 LOAD_CONST 1 ( 0 )					      		  arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ 		arr [ i ] , arr [ i ] = arr [ i - 1 ] , arr [ i ] 
6 LOAD_FAST 1 ( n )					      	      if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :	    	    if i < n - 1 and arr [ i ] < arr [ i + 1 ] :	  
8 LOAD_CONST 2 ( 2 )					      		  arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ 		arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ 
10 CALL_FUNCTION 3					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 132 ( to 148 )				      								    								  
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 2 ( i )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 COMPARE_OP 4 ( > )					      								    								  
24 POP_JUMP_IF_FALSE 80					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
4 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 ROT_TWO						      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_SUBSCR						      								    								  
							      								    								  
5 >> 80 LOAD_FAST 2 ( i )				      								    								  
82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_CONST 3 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 COMPARE_OP 0 ( < )					      								    								  
90 POP_JUMP_IF_FALSE 14					      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 2 ( i )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 BINARY_SUBSCR					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 14				      								    								  
							      								    								  
6 112 LOAD_FAST 0 ( arr )				      								    								  
114 LOAD_FAST 2 ( i )					      								    								  
116 LOAD_CONST 3 ( 1 )					      								    								  
118 BINARY_ADD						      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 2 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 ROT_TWO						      								    								  
130 LOAD_FAST 0 ( arr )					      								    								  
132 LOAD_FAST 2 ( i )					      								    								  
134 STORE_SUBSCR					      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 2 ( i )					      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 STORE_SUBSCR					      								    								  
146 JUMP_ABSOLUTE 14					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TILING_WITH_DOMINOES					      TILING_WITH_DOMINOES					    TILING_WITH_DOMINOES					  TILING_WITH_DOMINOES
--							      --							    --								  --
Disassembly of <code object countWays at 0x7fbac0e89d20, file def countWays ( n ) :					    def countWays ( n ) :					  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  A = [ 0 ] * ( n + 1 )					    	A = [ 0 ] * ( n + 1 )					  
2 BUILD_LIST 1						      	  B = [ 0 ] * ( n + 1 )					    	B = [ 0 ] * ( n + 1 )					  
4 LOAD_FAST 0 ( n )					      	  A [ 0 ] = 1						    	A [ 0 ] = 1						  
6 LOAD_CONST 2 ( 1 )					      	  A [ 1 ] = 0						    	A [ 1 ] = 0						  
8 BINARY_ADD						      	  B [ 0 ] = 0						    	B [ 0 ] = 0						  
10 BINARY_MULTIPLY					      	  B [ 1 ] = 1						    	B [ 1 ] = 1						  
12 STORE_FAST 1 ( A )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
							      	      A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]		    	    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]		  
3 14 LOAD_CONST 1 ( 0 )					      	      B [ i ] = A [ i - 1 ] + B [ i - 2 ]		    	    B [ i ] = A [ i - 1 ] + B [ i - 2 ]			  
16 BUILD_LIST 1						      	  return A [ n ]					    	return A [ n ]						  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 BINARY_MULTIPLY					      								    								  
26 STORE_FAST 2 ( B )					      								    								  
							      								    								  
4 28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 1 ( A )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
5 36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 1 ( A )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 STORE_SUBSCR						      								    								  
							      								    								  
6 44 LOAD_CONST 1 ( 0 )					      								    								  
46 LOAD_FAST 2 ( B )					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 STORE_SUBSCR						      								    								  
							      								    								  
7 52 LOAD_CONST 2 ( 1 )					      								    								  
54 LOAD_FAST 2 ( B )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
8 60 SETUP_LOOP 82 ( to 144 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_CONST 3 ( 2 )					      								    								  
66 LOAD_FAST 0 ( n )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 64 ( to 142 )				      								    								  
78 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 80 LOAD_FAST 1 ( A )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 LOAD_FAST 2 ( B )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_MULTIPLY					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 1 ( A )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 STORE_SUBSCR					      								    								  
							      								    								  
10 112 LOAD_FAST 1 ( A )				      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 2 ( B )					      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 LOAD_CONST 3 ( 2 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 BINARY_SUBSCR					      								    								  
132 BINARY_ADD						      								    								  
134 LOAD_FAST 2 ( B )					      								    								  
136 LOAD_FAST 3 ( i )					      								    								  
138 STORE_SUBSCR					      								    								  
140 JUMP_ABSOLUTE 76					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
11 >> 144 LOAD_FAST 1 ( A )				      								    								  
146 LOAD_FAST 0 ( n )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	      LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	    LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	  LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object findFibSubset at 0x7fbac0e8bc90,  def findFibSubset ( arr , n ) :				    def findFibSubset ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  m = max ( arr )					    	m = max ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  a = 0							    	a = 0							  
4 CALL_FUNCTION 1					      	  b = 1							    	b = 1							  
6 STORE_FAST 2 ( m )					      	  hash = [ ]						    	hash = [ ]						  
							      	  hash.append ( a )					    	hash.append ( a )					  
3 8 LOAD_CONST 1 ( 0 )					      	  hash.append ( b )					    	hash.append ( b )					  
10 STORE_FAST 3 ( a )					      	  while ( b < m ) :					    	while b < m :						  
							      	      c = a + b						    	    c = a + b						  
4 12 LOAD_CONST 2 ( 1 )					      	      a = b						    	    a = b						  
14 STORE_FAST 4 ( b )					      	      b = c						    	    b = c						  
							      	      hash.append ( b )					    	    hash = c						  
5 16 BUILD_LIST 0					      	  for i in range ( n ) :				    	    hash.append ( b )					  
18 STORE_FAST 5 ( hash )				      	      if arr [ i ] in hash :				    	for i in range ( n ) :					  
							      		  print ( arr [ i ] , end = " " )		    	    if arr [ i ] in hash :				  
6 20 LOAD_FAST 5 ( hash )				      								    		print ( arr [ i ] , end = " " )			  
22 LOAD_METHOD 1 ( append )				      								    								  
24 LOAD_FAST 3 ( a )					      								    								  
26 CALL_METHOD 1					      								    								  
28 POP_TOP						      								    								  
							      								    								  
7 30 LOAD_FAST 5 ( hash )				      								    								  
32 LOAD_METHOD 1 ( append )				      								    								  
34 LOAD_FAST 4 ( b )					      								    								  
36 CALL_METHOD 1					      								    								  
38 POP_TOP						      								    								  
							      								    								  
8 40 SETUP_LOOP 38 ( to 80 )				      								    								  
>> 42 LOAD_FAST 4 ( b )					      								    								  
44 LOAD_FAST 2 ( m )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
9 50 LOAD_FAST 3 ( a )					      								    								  
52 LOAD_FAST 4 ( b )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 6 ( c )					      								    								  
							      								    								  
10 58 LOAD_FAST 4 ( b )					      								    								  
60 STORE_FAST 3 ( a )					      								    								  
							      								    								  
11 62 LOAD_FAST 6 ( c )					      								    								  
64 STORE_FAST 4 ( b )					      								    								  
							      								    								  
12 66 LOAD_FAST 5 ( hash )				      								    								  
68 LOAD_METHOD 1 ( append )				      								    								  
70 LOAD_FAST 4 ( b )					      								    								  
72 CALL_METHOD 1					      								    								  
74 POP_TOP						      								    								  
76 JUMP_ABSOLUTE 42					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
13 >> 80 SETUP_LOOP 44 ( to 126 )			      								    								  
82 LOAD_GLOBAL 2 ( range )				      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 32 ( to 124 )				      								    								  
92 STORE_FAST 7 ( i )					      								    								  
							      								    								  
14 94 LOAD_FAST 0 ( arr )				      								    								  
96 LOAD_FAST 7 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 5 ( hash )				      								    								  
102 COMPARE_OP 6 ( in )					      								    								  
104 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
15 106 LOAD_GLOBAL 3 ( print )				      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 7 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 3 ( ' ' )				      								    								  
116 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
118 CALL_FUNCTION_KW 2					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 90					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX	      EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX		    EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX		  EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX
--							      --							    --								  --
Disassembly of <code object printDiagonalSums at 0x7fbac0e8d5 def printDiagonalSums ( mat , n ) :			    def printDiagonalSums ( mat , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  principal = 0						    	principal = 0						  
2 STORE_FAST 2 ( principal )				      	  secondary = 0 ;					    	secondary = 0						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
6 STORE_FAST 3 ( secondary )				      		  if ( i == j ) :				    		if i == j :					  
							      		      principal += mat [ i ] [ j ]		    		    principal += mat [ i ] [ j ]		  
4 8 SETUP_LOOP 94 ( to 104 )				      		  if ( ( i + j ) == ( n - 1 ) ) :		    		if i + j == n - 1 :				  
10 LOAD_GLOBAL 0 ( range )				      		      secondary += mat [ i ] [ j ]		    		    secondary += mat [ i ] [ j ]		  
12 LOAD_CONST 1 ( 0 )					      	  print ( "Principal Diagonal:" , principal )		    	print ( "Principal Diagonal:" , principal )		  
14 LOAD_FAST 1 ( n )					      	  print ( "Secondary Diagonal:" , secondary )		    	print ( "Secondary Diagonal:" , secondary )		  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 80 ( to 102 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 74 ( to 100 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 60 ( to 98 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( principal )				      								    								  
50 LOAD_FAST 0 ( mat )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( principal )				      								    								  
							      								    								  
8 >> 64 LOAD_FAST 4 ( i )				      								    								  
66 LOAD_FAST 5 ( j )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
9 80 LOAD_FAST 3 ( secondary )				      								    								  
82 LOAD_FAST 0 ( mat )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 3 ( secondary )				      								    								  
96 JUMP_ABSOLUTE 36					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 20					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
10 >> 104 LOAD_GLOBAL 1 ( print )			      								    								  
106 LOAD_CONST 3 ( 'Principal Diagonal:' )		      								    								  
108 LOAD_FAST 2 ( principal )				      								    								  
110 CALL_FUNCTION 2					      								    								  
112 POP_TOP						      								    								  
							      								    								  
11 114 LOAD_GLOBAL 1 ( print )				      								    								  
116 LOAD_CONST 4 ( 'Secondary Diagonal:' )		      								    								  
118 LOAD_FAST 3 ( secondary )				      								    								  
120 CALL_FUNCTION 2					      								    								  
122 POP_TOP						      								    								  
124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM_1				      COUNT_PAIRS_WITH_GIVEN_SUM_1				    COUNT_PAIRS_WITH_GIVEN_SUM_1				  COUNT_PAIRS_WITH_GIVEN_SUM_1
--							      --							    --								  --
Disassembly of <code object getPairsCount at 0x7fbac0e8d540,  def getPairsCount ( arr , n , sum ) :			    def getPairsCount ( arr , n , sum = 2 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  m = [ 0 ] * 1000					    	m = [ 0 ] * 1000					  
2 BUILD_LIST 1						      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 LOAD_CONST 2 ( 1000 )					      	      m [ arr [ i ] ]					    	    m [ arr [ i ] ]					  
6 BINARY_MULTIPLY					      	      m [ arr [ i ] ] += 1				    	    m += arr [ i ] ] += 1				  
8 STORE_FAST 3 ( m )					      	  twice_count = 0					    	twice_count = 0						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 10 SETUP_LOOP 50 ( to 62 )				      	      twice_count += m [ sum - arr [ i ] ]		    	    twice_count += m [ sum ( arr [ i ] ) ]		  
12 LOAD_GLOBAL 0 ( range )				      	      if ( sum - arr [ i ] == arr [ i ] ) :		    	    if sum ( arr [ i ] == arr [ i ] ) :			  
14 LOAD_CONST 1 ( 0 )					      		  twice_count -= 1				    		twice_count -= 1				  
16 LOAD_FAST 1 ( n )					      	  return int ( twice_count / 2 )			    return int ( twice_count / 2 )				  
18 CALL_FUNCTION 2					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 36 ( to 60 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 3 ( m )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_SUBSCR					      								    								  
36 POP_TOP						      								    								  
							      								    								  
5 38 LOAD_FAST 3 ( m )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 DUP_TOP_TWO						      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 ROT_THREE						      								    								  
56 STORE_SUBSCR						      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_CONST 1 ( 0 )				      								    								  
64 STORE_FAST 5 ( twice_count )				      								    								  
							      								    								  
7 66 SETUP_LOOP 66 ( to 134 )				      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 52 ( to 132 )				      								    								  
80 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 82 LOAD_FAST 5 ( twice_count )			      								    								  
84 LOAD_FAST 3 ( m )					      								    								  
86 LOAD_FAST 2 ( sum )					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 5 ( twice_count )			      								    								  
							      								    								  
9 102 LOAD_FAST 2 ( sum )				      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 4 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 4 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
10 122 LOAD_FAST 5 ( twice_count )			      								    								  
124 LOAD_CONST 3 ( 1 )					      								    								  
126 INPLACE_SUBTRACT					      								    								  
128 STORE_FAST 5 ( twice_count )			      								    								  
130 JUMP_ABSOLUTE 78					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
11 >> 134 LOAD_GLOBAL 1 ( int )				      								    								  
136 LOAD_FAST 5 ( twice_count )				      								    								  
138 LOAD_CONST 4 ( 2 )					      								    								  
140 BINARY_TRUE_DIVIDE					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7fbac0e8de40, file "< def maxSum ( arr ) :					    def maxSum ( arr ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  arrSum = 0						    	arrSum = 0						  
2 STORE_FAST 1 ( arrSum )				      	  currVal = 0						    	currVal = 0						  
							      	  n = len ( arr )					    	n = len ( arr )						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 2 ( currVal )				      	      arrSum = arrSum + arr [ i ]			    	    arrSum = arrSum + arr [ i ]				  
							      	      currVal = currVal + ( i * arr [ i ] )		    	    currVal = currVal + i * arr [ i ]			  
4 8 LOAD_GLOBAL 0 ( len )				      	  maxVal = currVal					    	if currVal :						  
10 LOAD_FAST 0 ( arr )					      	  for j in range ( 1 , n ) :				    	    currVal = currVal + arrSum - n * arr [ n - j ]	  
12 CALL_FUNCTION 1					      	      currVal = currVal + arrSum - n * arr [ n - j ]	    	    if currVal > ParseError :				  
14 STORE_FAST 3 ( n )					      	      if currVal > maxVal :				    		SPACE = currVal					  
							      		  maxVal = currVal				    	return ( 130 )						  
5 16 SETUP_LOOP 46 ( to 64 )				      	  return maxVal						    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 1 ( arrSum )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 1 ( arrSum )				      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( currVal )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 2 ( currVal )				      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
8 >> 64 LOAD_FAST 2 ( currVal )				      								    								  
66 STORE_FAST 5 ( maxVal )				      								    								  
							      								    								  
9 68 SETUP_LOOP 54 ( to 124 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 LOAD_FAST 3 ( n )					      								    								  
76 CALL_FUNCTION 2					      								    								  
78 GET_ITER						      								    								  
>> 80 FOR_ITER 40 ( to 122 )				      								    								  
82 STORE_FAST 6 ( j )					      								    								  
							      								    								  
10 84 LOAD_FAST 2 ( currVal )				      								    								  
86 LOAD_FAST 1 ( arrSum )				      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 3 ( n )					      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( n )					      								    								  
96 LOAD_FAST 6 ( j )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_MULTIPLY					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 STORE_FAST 2 ( currVal )				      								    								  
							      								    								  
11 108 LOAD_FAST 2 ( currVal )				      								    								  
110 LOAD_FAST 5 ( maxVal )				      								    								  
112 COMPARE_OP 4 ( > )					      								    								  
114 POP_JUMP_IF_FALSE 80				      								    								  
							      								    								  
12 116 LOAD_FAST 2 ( currVal )				      								    								  
118 STORE_FAST 5 ( maxVal )				      								    								  
120 JUMP_ABSOLUTE 80					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_FAST 5 ( maxVal )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1
--							      --							    --								  --
Disassembly of <code object findMaxAverage at 0x7fbac0e8de40, def findMaxAverage ( arr , n , k ) :			    def findMaxAverage ( arr , n , k = 0 ) :			  success : None
2 0 LOAD_FAST 2 ( k )					      	  if ( k > n ) :					    	if k > n :						  
2 LOAD_FAST 1 ( n )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 4 ( > )					      	  sum = arr [ 0 ]					    	sum = arr [ 0 ]						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 1 , k ) :				    	for i in range ( 1 , k ) :				  
							      	      sum += arr [ i ]					    	    sum += arr [ i ]					  
3 8 LOAD_CONST 1 ( - 1 )				      	  max_sum = sum						    	max_sum = sum						  
10 RETURN_VALUE						      	  max_end = k - 1					    	max_end = k - 1						  
							      	  for i in range ( k , n ) :				    	for i in range ( k , n ) :				  
4 >> 12 LOAD_FAST 0 ( arr )				      	      sum = sum + arr [ i ] - arr [ i - k ]		    	    sum = sum + arr [ i ] - arr [ i - k ]		  
14 LOAD_CONST 2 ( 0 )					      	      if ( sum > max_sum ) :				    	    if sum > max_sum :					  
16 BINARY_SUBSCR					      		  max_sum = sum					    		max_sum = sum					  
18 STORE_FAST 3 ( sum )					      		  max_end = i					    		max_end = i					  
							      	  return max_end - k + 1				    	return ( max_end - k ) + 1				  
5 20 SETUP_LOOP 30 ( to 52 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 LOAD_FAST 2 ( k )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 16 ( to 50 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( sum )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 3 ( sum )					      								    								  
48 JUMP_ABSOLUTE 32					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 LOAD_FAST 3 ( sum )				      								    								  
54 STORE_FAST 5 ( max_sum )				      								    								  
							      								    								  
8 56 LOAD_FAST 2 ( k )					      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 STORE_FAST 6 ( max_end )				      								    								  
							      								    								  
9 64 SETUP_LOOP 58 ( to 124 )				      								    								  
66 LOAD_GLOBAL 0 ( range )				      								    								  
68 LOAD_FAST 2 ( k )					      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 44 ( to 122 )				      								    								  
78 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 80 LOAD_FAST 3 ( sum )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 4 ( i )					      								    								  
94 LOAD_FAST 2 ( k )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 STORE_FAST 3 ( sum )				      								    								  
							      								    								  
11 104 LOAD_FAST 3 ( sum )				      								    								  
106 LOAD_FAST 5 ( max_sum )				      								    								  
108 COMPARE_OP 4 ( > )					      								    								  
110 POP_JUMP_IF_FALSE 76				      								    								  
							      								    								  
12 112 LOAD_FAST 3 ( sum )				      								    								  
114 STORE_FAST 5 ( max_sum )				      								    								  
							      								    								  
13 116 LOAD_FAST 4 ( i )				      								    								  
118 STORE_FAST 6 ( max_end )				      								    								  
120 JUMP_ABSOLUTE 76					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
14 >> 124 LOAD_FAST 6 ( max_end )			      								    								  
126 LOAD_FAST 2 ( k )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	      HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	    HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	  HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS
--							      --							    --								  --
Disassembly of <code object findoptimal at 0x7fbac0e8d540, fi def findoptimal ( N ) :					    def findoptimal ( N ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( N )					      	  if ( N <= 6 ) :					    	if N <= 6 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 6 )					      	      return N						    	    return N						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/HOW_TO
4 COMPARE_OP 1 ( <= )					      	  screen = [ 0 ] * N					    	screen = [ 0 ] * N					  _PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS.p
6 POP_JUMP_IF_FALSE 12					      	  for n in range ( 1 , 7 ) :				    	for n in range ( 1 , 7 ) :				  y", line 54, in <module>     if f_filled(*paramete
							      	      screen [ n - 1 ] = n				    	    screen [ n - 1 ] = n				  rs_set) == f_gold(*parameters_set):	File "/home/
3 8 LOAD_FAST 0 ( N )					      	  for n in range ( 7 , N + 1 ) :			    	for n in range ( 7 , N + 1 ) :				  ubuntu/TransCoder/models/eval/mt_sa_1000/tx8nnsvsd
10 RETURN_VALUE						      	      screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 	    screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] * max ( t/eval_scripts/dis_sa-python_sa.test/HOW_TO_PRINT_
							      	  return screen [ N - 1 ]				    	return screen [ N - 1 ]					  MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS.py", lin
4 >> 12 LOAD_CONST 2 ( 0 )				      								    								  e 35, in f_filled	screen [ n - 1 ] = max ( 2 *
14 BUILD_LIST 1						      								    								   screen [ n - 4 ] * max ( 3 * screen [ n - 5 ] * 4
16 LOAD_FAST 0 ( N )					      								    								   * screen [ n - 6 ] ) ) TypeError: 'int' object is
18 BINARY_MULTIPLY					      								    								   not iterable
20 STORE_FAST 1 ( screen )				      								    								  
							      								    								  
5 22 SETUP_LOOP 30 ( to 54 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 LOAD_CONST 4 ( 7 )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 16 ( to 52 )				      								    								  
36 STORE_FAST 2 ( n )					      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( n )					      								    								  
40 LOAD_FAST 1 ( screen )				      								    								  
42 LOAD_FAST 2 ( n )					      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_SUBSCR						      								    								  
50 JUMP_ABSOLUTE 34					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 SETUP_LOOP 82 ( to 138 )			      								    								  
56 LOAD_GLOBAL 0 ( range )				      								    								  
58 LOAD_CONST 4 ( 7 )					      								    								  
60 LOAD_FAST 0 ( N )					      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 2					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 64 ( to 136 )				      								    								  
72 STORE_FAST 2 ( n )					      								    								  
							      								    								  
8 74 LOAD_GLOBAL 1 ( max )				      								    								  
76 LOAD_CONST 5 ( 2 )					      								    								  
78 LOAD_FAST 1 ( screen )				      								    								  
80 LOAD_FAST 2 ( n )					      								    								  
82 LOAD_CONST 6 ( 4 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 LOAD_GLOBAL 1 ( max )				      								    								  
92 LOAD_CONST 7 ( 3 )					      								    								  
94 LOAD_FAST 1 ( screen )				      								    								  
96 LOAD_FAST 2 ( n )					      								    								  
98 LOAD_CONST 8 ( 5 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_CONST 6 ( 4 )					      								    								  
108 LOAD_FAST 1 ( screen )				      								    								  
110 LOAD_FAST 2 ( n )					      								    								  
112 LOAD_CONST 1 ( 6 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 BINARY_MULTIPLY					      								    								  
120 CALL_FUNCTION 2					      								    								  
122 CALL_FUNCTION 2					      								    								  
124 LOAD_FAST 1 ( screen )				      								    								  
126 LOAD_FAST 2 ( n )					      								    								  
128 LOAD_CONST 3 ( 1 )					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 STORE_SUBSCR					      								    								  
134 JUMP_ABSOLUTE 70					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
9 >> 138 LOAD_FAST 1 ( screen )				      								    								  
140 LOAD_FAST 0 ( N )					      								    								  
142 LOAD_CONST 3 ( 1 )					      								    								  
144 BINARY_SUBTRACT					      								    								  
146 BINARY_SUBSCR					      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE			      DELETE_CONSECUTIVE_WORDS_SEQUENCE				    DELETE_CONSECUTIVE_WORDS_SEQUENCE				  DELETE_CONSECUTIVE_WORDS_SEQUENCE
--							      --							    --								  --
Disassembly of <code object removeConsecutiveSame at 0x7fbac0 def removeConsecutiveSame ( v ) :				    def removeConsecutiveSame ( v ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( v )						    	n = len ( v )						  
2 LOAD_FAST 0 ( v )					      	  i = 0							    	i = 0							  
4 CALL_FUNCTION 1					      	  while ( i < n - 1 ) :					    	while i < n - 1 :					  
6 STORE_FAST 1 ( n )					      	      if ( ( i + 1 ) < len ( v ) ) and ( v [ i ] == v [ i + 	    if i + 1 < len ( v ) and v [ i ] == v [ i + 1 ] :	  
							      		  v = v [ : i ]					    		v = v [ : i ]					  
3 8 LOAD_CONST 1 ( 0 )					      		  v = v [ : i ]					    		v = v [ : i ]					  
10 STORE_FAST 2 ( i )					      		  if ( i > 0 ) :				    		if i > 0 :					  
							      		      i -= 1					    		    i -= 1					  
4 12 SETUP_LOOP 110 ( to 124 )				      		  n = n - 2					    		n = n - 2					  
>> 14 LOAD_FAST 2 ( i )					      	      else :						    	    else :						  
16 LOAD_FAST 1 ( n )					      		  i += 1					    		i += 1						  
18 LOAD_CONST 2 ( 1 )					      	  return len ( v [ : i - 1 ] )				    	return len ( v [ : i - 1 ] )				  
20 BINARY_SUBTRACT					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( i )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_GLOBAL 0 ( len )				      								    								  
34 LOAD_FAST 0 ( v )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 112				      								    								  
42 LOAD_FAST 0 ( v )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( v )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 BINARY_SUBSCR					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
6 62 LOAD_FAST 0 ( v )					      								    								  
64 LOAD_CONST 0 ( None )				      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 BUILD_SLICE 2					      								    								  
70 BINARY_SUBSCR					      								    								  
72 STORE_FAST 0 ( v )					      								    								  
							      								    								  
7 74 LOAD_FAST 0 ( v )					      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BUILD_SLICE 2					      								    								  
82 BINARY_SUBSCR					      								    								  
84 STORE_FAST 0 ( v )					      								    								  
							      								    								  
8 86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 1 ( 0 )					      								    								  
90 COMPARE_OP 4 ( > )					      								    								  
92 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
9 94 LOAD_FAST 2 ( i )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 INPLACE_SUBTRACT					      								    								  
100 STORE_FAST 2 ( i )					      								    								  
							      								    								  
10 >> 102 LOAD_FAST 1 ( n )				      								    								  
104 LOAD_CONST 3 ( 2 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 1 ( n )					      								    								  
110 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
12 >> 112 LOAD_FAST 2 ( i )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 2 ( i )					      								    								  
120 JUMP_ABSOLUTE 14					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_GLOBAL 0 ( len )				      								    								  
126 LOAD_FAST 0 ( v )					      								    								  
128 LOAD_CONST 0 ( None )				      								    								  
130 LOAD_FAST 2 ( i )					      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 BUILD_SLICE 2					      								    								  
138 BINARY_SUBSCR					      								    								  
140 CALL_FUNCTION 1					      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_TRIANGLE				      MAXIMUM_PATH_SUM_TRIANGLE					    MAXIMUM_PATH_SUM_TRIANGLE					  MAXIMUM_PATH_SUM_TRIANGLE
--							      --							    --								  --
Disassembly of <code object maxPathSum at 0x7fbac0e8d540, fil def maxPathSum ( tri , m , n ) :				    def maxPathSum ( tri , m , n = - 1 ) :			  script_not_found : None
2 0 SETUP_LOOP 152 ( to 154 )				      	  for i in range ( m - 1 , - 1 , - 1 ) :		    	for i in range ( m - 1 , - 1 , - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i + 1 ) :			    	    for j in range ( i + 1 ) :				  
4 LOAD_FAST 1 ( m )					      		  if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1  		if tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ]  
6 LOAD_CONST 1 ( 1 )					      		      tri [ i ] [ j ] += tri [ i + 1 ] [ j ]	    		    tri [ i ] [ j ] += tri [ i + 1 ] [ j ]	  
8 BINARY_SUBTRACT					      		  else :					    		else :						  
10 LOAD_CONST 2 ( - 1 )					      		      tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]    		    tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]	  
12 LOAD_CONST 2 ( - 1 )					      	  return tri [ 0 ] [ 0 ]				    return tri [ 0 ] [ 0 ]					  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 132 ( to 152 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 22 SETUP_LOOP 126 ( to 150 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 110 ( to 148 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( tri )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( tri )					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
5 76 LOAD_FAST 0 ( tri )				      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 4 ( j )					      								    								  
84 DUP_TOP_TWO						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( tri )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 4 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 INPLACE_ADD						      								    								  
104 ROT_THREE						      								    								  
106 STORE_SUBSCR					      								    								  
108 JUMP_ABSOLUTE 36					      								    								  
							      								    								  
7 >> 110 LOAD_FAST 0 ( tri )				      								    								  
112 LOAD_FAST 3 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 4 ( j )					      								    								  
118 DUP_TOP_TWO						      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 0 ( tri )					      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 LOAD_CONST 1 ( 1 )					      								    								  
128 BINARY_ADD						      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 4 ( j )					      								    								  
134 LOAD_CONST 1 ( 1 )					      								    								  
136 BINARY_ADD						      								    								  
138 BINARY_SUBSCR					      								    								  
140 INPLACE_ADD						      								    								  
142 ROT_THREE						      								    								  
144 STORE_SUBSCR					      								    								  
146 JUMP_ABSOLUTE 36					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 JUMP_ABSOLUTE 18					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
8 >> 154 LOAD_FAST 0 ( tri )				      								    								  
156 LOAD_CONST 3 ( 0 )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_CONST 3 ( 0 )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			      REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7fbac0e89d20, file def rearrange ( arr , n ) :				    def rearrange ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( n )					      	  temp = n * [ None ]					    	temp = n * [ None ]					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 0 ( None )					      	  small , large = 0 , n - 1				    	small , large = 0 , n - 1				  _sa.test/REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM.py",
4 BUILD_LIST 1						      	  flag = True						    	flag = True						   line 48     return arr     ^ SyntaxError: 'return
6 BINARY_MULTIPLY					      	  for i in range ( n ) :				    	for i in range ( n ) :					  ' outside function
8 STORE_FAST 2 ( temp )					      	      if flag is True :					    	    if flag is True :					  
							      		  temp [ i ] = arr [ large ]			    		temp [ i ] = arr [ large ]			  
3 10 LOAD_CONST 1 ( 0 )					      		  large -= 1					    		large -= 1					  
12 LOAD_FAST 1 ( n )					      	      else :						    	    else :						  
14 LOAD_CONST 2 ( 1 )					      		  temp [ i ] = arr [ small ]			    		temp [ i ] = arr [ small ]			  
16 BINARY_SUBTRACT					      		  small += 1					    		small += 1					  
18 ROT_TWO						      	      flag = bool ( 1 - flag )				    	    flag = bool ( 1 - flag )				  
20 STORE_FAST 3 ( small )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
22 STORE_FAST 4 ( large )				      	      arr [ i ] = temp [ i ]				    	    arr [ i ] = temp [ i ]				  
							      	  return arr						    return arr							  
4 24 LOAD_CONST 3 ( True )				      								    								  
26 STORE_FAST 5 ( flag )				      								    								  
							      								    								  
5 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 66 ( to 106 )				      								    								  
40 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 5 ( flag )				      								    								  
44 LOAD_CONST 3 ( True )				      								    								  
46 COMPARE_OP 8 ( is )					      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 4 ( large )				      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 2 ( temp )					      								    								  
58 LOAD_FAST 6 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
							      								    								  
8 62 LOAD_FAST 4 ( large )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 INPLACE_SUBTRACT					      								    								  
68 STORE_FAST 4 ( large )				      								    								  
70 JUMP_FORWARD 20 ( to 92 )				      								    								  
							      								    								  
10 >> 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 3 ( small )				      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 2 ( temp )					      								    								  
80 LOAD_FAST 6 ( i )					      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
11 84 LOAD_FAST 3 ( small )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 3 ( small )				      								    								  
							      								    								  
12 >> 92 LOAD_GLOBAL 1 ( bool )				      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 LOAD_FAST 5 ( flag )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 STORE_FAST 5 ( flag )				      								    								  
104 JUMP_ABSOLUTE 38					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
13 >> 108 SETUP_LOOP 28 ( to 138 )			      								    								  
110 LOAD_GLOBAL 0 ( range )				      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 CALL_FUNCTION 1					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 16 ( to 136 )				      								    								  
120 STORE_FAST 6 ( i )					      								    								  
							      								    								  
14 122 LOAD_FAST 2 ( temp )				      								    								  
124 LOAD_FAST 6 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 0 ( arr )					      								    								  
130 LOAD_FAST 6 ( i )					      								    								  
132 STORE_SUBSCR					      								    								  
134 JUMP_ABSOLUTE 118					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
15 >> 138 LOAD_FAST 0 ( arr )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE
--							      --							    --								  --
Disassembly of <code object countWays at 0x7fbac0e8bc90, file def countWays ( n , m ) :					    def countWays ( n , m ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_LIST 0					      	  count = [ ]						    	count = [ ]						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( count )				      	  for i in range ( n + 2 ) :				    	for i in range ( n + 2 ) :				  _sa.test/COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_U
							      	      count.append ( 0 )				    	    count.append ( 0 )					  SING_1_X_M_SIZE_TILES.py", line 44	 return coun
3 4 SETUP_LOOP 30 ( to 36 )				      	  count [ 0 ] = 0					    	count [ 0 ] = 0						  t [ n ]     ^ SyntaxError: 'return' outside functi
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  on
8 LOAD_FAST 0 ( n )					      	      if ( i > m ) :					    	    if i > m :						  
10 LOAD_CONST 1 ( 2 )					      		  count [ i ] = count [ i - 1 ] + count [ i - m ]   		count [ i ] = count [ i - 1 ] + count [ i - m ]	  
12 BINARY_ADD						      	      elif ( i < m ) :					    	    elif i < m :					  
14 CALL_FUNCTION 1					      		  count [ i ] = 1				    		count [ i ] = 1					  
16 GET_ITER						      	      else :						    	    else :						  
>> 18 FOR_ITER 14 ( to 34 )				      		  count [ i ] = 2				    		count [ i ] = 2					  
20 STORE_FAST 3 ( i )					      	  return count [ n ]					    return count [ n ]						  
							      								    								  
4 22 LOAD_FAST 2 ( count )				      								    								  
24 LOAD_METHOD 1 ( append )				      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 CALL_METHOD 1					      								    								  
30 POP_TOP						      								    								  
32 JUMP_ABSOLUTE 18					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 LOAD_CONST 2 ( 0 )				      								    								  
38 LOAD_FAST 2 ( count )				      								    								  
40 LOAD_CONST 2 ( 0 )					      								    								  
42 STORE_SUBSCR						      								    								  
							      								    								  
6 44 SETUP_LOOP 86 ( to 132 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_CONST 3 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 68 ( to 130 )				      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 64 LOAD_FAST 3 ( i )					      								    								  
66 LOAD_FAST 1 ( m )					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( count )				      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 2 ( count )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 LOAD_FAST 1 ( m )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 2 ( count )				      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 60					      								    								  
							      								    								  
9 >> 102 LOAD_FAST 3 ( i )				      								    								  
104 LOAD_FAST 1 ( m )					      								    								  
106 COMPARE_OP 0 ( < )					      								    								  
108 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
10 110 LOAD_CONST 3 ( 1 )				      								    								  
112 LOAD_FAST 2 ( count )				      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 60					      								    								  
							      								    								  
12 >> 120 LOAD_CONST 1 ( 2 )				      								    								  
122 LOAD_FAST 2 ( count )				      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 STORE_SUBSCR					      								    								  
128 JUMP_ABSOLUTE 60					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
13 >> 132 LOAD_FAST 2 ( count )				      								    								  
134 LOAD_FAST 0 ( n )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRAY_SUN_AFTER_K_<unk> TION_OPERATIONS	      MAXIMIZE_ARRAY_SUN_AFTER_K_<unk> TION_OPERATIONS		    MAXIMIZE_ARRAY_SUN_AFTER_K_<unk> TION_OPERATIONS		  MAXIMIZE_ARRAY_SUN_AFTER_K_<unk> TION_OPERATIONS
--							      --							    --								  --
Disassembly of <code object maximumSum at 0x7fbac0e8bc90, fil def maximumSum ( arr , n , k ) :				    def maximumSum ( arr , n , k = 0 ) :			  script_not_found : None
2 0 SETUP_LOOP 96 ( to 98 )				      	  for i in range ( 1 , k + 1 ) :			    	for i in range ( 1 , k + 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      min = + 2147483647				    	    min = ( 2147483647 )				  
4 LOAD_CONST 1 ( 1 )					      	      index = - 1					    	    index = - 1						  
6 LOAD_FAST 2 ( k )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
8 LOAD_CONST 1 ( 1 )					      		  if ( arr [ j ] < min ) :			    		if arr [ j ] < min :				  
10 BINARY_ADD						      		      min = arr [ j ]				    		    min = arr [ j ]				  
12 CALL_FUNCTION 2					      		      index = j					    		    index = j					  
14 GET_ITER						      	      if ( min == 0 ) :					    	    if min == 0 :					  
>> 16 FOR_ITER 78 ( to 96 )				      		  break						    		break						  
18 STORE_FAST 3 ( i )					      	      arr [ index ] = - arr [ index ]			    	    arr [ index ] = - arr [ index ]			  
							      	  sum = 0						    sum = 0							  
3 20 LOAD_CONST 2 ( 2147483647 )			      	  for i in range ( n ) :				    for i in range ( n ) :					  
22 STORE_FAST 4 ( min )					      	      sum += arr [ i ]					    	sum += arr [ i ]					  
							      	  return sum						    return sum							  
4 24 LOAD_CONST 3 ( - 1 )				      								    								  
26 STORE_FAST 5 ( index )				      								    								  
							      								    								  
5 28 SETUP_LOOP 40 ( to 70 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 6 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 4 ( min )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
7 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 STORE_FAST 4 ( min )					      								    								  
							      								    								  
8 62 LOAD_FAST 6 ( j )					      								    								  
64 STORE_FAST 5 ( index )				      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 4 ( min )				      								    								  
72 LOAD_CONST 4 ( 0 )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 78 BREAK_LOOP					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 5 ( index )				      								    								  
84 BINARY_SUBSCR					      								    								  
86 UNARY_NEGATIVE					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 5 ( index )				      								    								  
92 STORE_SUBSCR						      								    								  
94 JUMP_ABSOLUTE 16					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
12 >> 98 LOAD_CONST 4 ( 0 )				      								    								  
100 STORE_FAST 7 ( sum )				      								    								  
							      								    								  
13 102 SETUP_LOOP 28 ( to 132 )				      								    								  
104 LOAD_GLOBAL 0 ( range )				      								    								  
106 LOAD_FAST 1 ( n )					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 16 ( to 130 )				      								    								  
114 STORE_FAST 3 ( i )					      								    								  
							      								    								  
14 116 LOAD_FAST 7 ( sum )				      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 INPLACE_ADD						      								    								  
126 STORE_FAST 7 ( sum )				      								    								  
128 JUMP_ABSOLUTE 112					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
15 >> 132 LOAD_FAST 7 ( sum )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1
--							      --							    --								  --
Disassembly of <code object substringConversions at 0x7fbac0e def substringConversions ( str1 , k , b ) :		    def substringConversions ( str1 , k , b ) :			  script_not_found : None
2 0 SETUP_LOOP 138 ( to 140 )				      	  for i in range ( 0 , len ( str1 ) - k + 1 ) :		    	for i in range ( 0 , len ( str1 ) - k + 1 ) :		  
2 LOAD_GLOBAL 0 ( range )				      	      sub = str1 [ i : k + i ]				    	    sub = str1 [ i : k + i ]				  
4 LOAD_CONST 1 ( 0 )					      	      Sum = 0						    	    Sum = 0						  
6 LOAD_GLOBAL 1 ( len )					      	      counter = 0					    	    counter = 0						  
8 LOAD_FAST 0 ( str1 )					      	      for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :	    	    for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :	  
10 CALL_FUNCTION 1					      		  Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) 		Sum = Sum + ( ord ( sub [ i ] ) - ord ( b , count 
12 LOAD_FAST 1 ( k )					      		  counter += 1					    		counter += 1					  
14 BINARY_SUBTRACT					      	      print ( Sum , end = " " )				    	    print ( Sum , end = " " )				  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 112 ( to 138 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 28 LOAD_FAST 0 ( str1 )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 LOAD_FAST 1 ( k )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_ADD						      								    								  
38 BUILD_SLICE 2					      								    								  
40 BINARY_SUBSCR					      								    								  
42 STORE_FAST 4 ( sub )					      								    								  
							      								    								  
4 44 LOAD_CONST 1 ( 0 )					      								    								  
46 STORE_FAST 5 ( Sum )					      								    								  
							      								    								  
5 48 LOAD_CONST 1 ( 0 )					      								    								  
50 STORE_FAST 6 ( counter )				      								    								  
							      								    								  
6 52 SETUP_LOOP 70 ( to 124 )				      								    								  
54 LOAD_GLOBAL 0 ( range )				      								    								  
56 LOAD_GLOBAL 1 ( len )				      								    								  
58 LOAD_FAST 4 ( sub )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_CONST 3 ( - 1 )					      								    								  
68 LOAD_CONST 3 ( - 1 )					      								    								  
70 CALL_FUNCTION 3					      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 46 ( to 122 )				      								    								  
76 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 78 LOAD_FAST 5 ( Sum )				      								    								  
80 LOAD_GLOBAL 2 ( ord )				      								    								  
82 LOAD_FAST 4 ( sub )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 LOAD_GLOBAL 2 ( ord )				      								    								  
92 LOAD_CONST 4 ( '0' )					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 LOAD_GLOBAL 3 ( pow )				      								    								  
100 LOAD_FAST 2 ( b )					      								    								  
102 LOAD_FAST 6 ( counter )				      								    								  
104 CALL_FUNCTION 2					      								    								  
106 BINARY_MULTIPLY					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 5 ( Sum )				      								    								  
							      								    								  
8 112 LOAD_FAST 6 ( counter )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 6 ( counter )				      								    								  
120 JUMP_ABSOLUTE 74					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
9 >> 124 LOAD_GLOBAL 4 ( print )			      								    								  
126 LOAD_FAST 5 ( Sum )					      								    								  
128 LOAD_CONST 5 ( ' ' )				      								    								  
130 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
136 JUMP_ABSOLUTE 24					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_EQULIBRIUM_SUM_ARRAY				      MAXIMUM_EQULIBRIUM_SUM_ARRAY				    MAXIMUM_EQULIBRIUM_SUM_ARRAY				  MAXIMUM_EQULIBRIUM_SUM_ARRAY
--							      --							    --								  --
Disassembly of <code object findMaxSum at 0x7fbac0e8d540, fil def findMaxSum ( arr , n ) :				    def findMaxSum ( arr , n ) :				  success : None
2 0 LOAD_GLOBAL 0 ( sys )				      	  res = - sys.maxsize - 1				    	res = - sys.maxsize - 1					  
2 LOAD_ATTR 1 ( maxsize )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 UNARY_NEGATIVE					      	      prefix_sum = arr [ i ]				    	    prefix_sum = arr [ i ]				  
6 LOAD_CONST 1 ( 1 )					      	      for j in range ( i ) :				    	    for j in range ( i ) :				  
8 BINARY_SUBTRACT					      		  prefix_sum += arr [ j ]			    		prefix_sum += arr [ j ]				  
10 STORE_FAST 2 ( res )					      	      suffix_sum = arr [ i ]				    	    suffix_sum = arr [ i ]				  
							      	      j = n - 1						    	    j = n - 1						  
3 12 SETUP_LOOP 122 ( to 136 )				      	      while ( j > i ) :					    	    while j > i :					  
14 LOAD_GLOBAL 2 ( range )				      		  suffix_sum += arr [ j ]			    		suffix_sum += arr [ j ]				  
16 LOAD_FAST 1 ( n )					      		  j -= 1					    		j -= 1						  
18 CALL_FUNCTION 1					      	      if ( prefix_sum == suffix_sum ) :			    	    if prefix_sum == suffix_sum :			  
20 GET_ITER						      		  res = max ( res , prefix_sum )		    		res = max ( res , prefix_sum )			  
>> 22 FOR_ITER 110 ( to 134 )				      	  return res						    	return res						  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( arr )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 STORE_FAST 4 ( prefix_sum )				      								    								  
							      								    								  
5 34 SETUP_LOOP 28 ( to 64 )				      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 16 ( to 62 )				      								    								  
46 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( prefix_sum )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 4 ( prefix_sum )				      								    								  
60 JUMP_ABSOLUTE 44					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_FAST 6 ( suffix_sum )				      								    								  
							      								    								  
8 72 LOAD_FAST 1 ( n )					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 80 SETUP_LOOP 32 ( to 114 )				      								    								  
>> 82 LOAD_FAST 5 ( j )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 90 LOAD_FAST 6 ( suffix_sum )			      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 5 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 6 ( suffix_sum )				      								    								  
							      								    								  
11 102 LOAD_FAST 5 ( j )				      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 INPLACE_SUBTRACT					      								    								  
108 STORE_FAST 5 ( j )					      								    								  
110 JUMP_ABSOLUTE 82					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
12 >> 114 LOAD_FAST 4 ( prefix_sum )			      								    								  
116 LOAD_FAST 6 ( suffix_sum )				      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 22				      								    								  
							      								    								  
13 122 LOAD_GLOBAL 3 ( max )				      								    								  
124 LOAD_FAST 2 ( res )					      								    								  
126 LOAD_FAST 4 ( prefix_sum )				      								    								  
128 CALL_FUNCTION 2					      								    								  
130 STORE_FAST 2 ( res )				      								    								  
132 JUMP_ABSOLUTE 22					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
14 >> 136 LOAD_FAST 2 ( res )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS_1			      LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS_1			    LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS_1			  LONGEST_SPAN_SUM_TWO_BINARY_<unk> YS_1
--							      --							    --								  --
Disassembly of <code object longestCommonSum at 0x7fbac0e8bc9 def longestCommonSum ( arr1 , arr2 , n ) :		    def longestCommonSum ( arr1 , arr2 , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxLen = 0						    	global presum1						  
2 STORE_FAST 3 ( maxLen )				      	  presum1 = presum2 = 0					    	presum2 = 0						  
							      	  diff = { }						    	diff = { }						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 DUP_TOP						      	      presum1 += arr1 [ i ]				    	    presum1 += arr1 [ i ]				  
8 STORE_FAST 4 ( presum1 )				      	      presum2 += arr2 [ i ]				    	    presum2 += arr2 [ i ]				  
10 STORE_FAST 5 ( presum2 )				      	      curr_diff = presum1 - presum2			    	    presum2 += arr2 [ i ]				  
							      	      if curr_diff == 0 :				    	    curr_diff = presum1 - presum2			  
4 12 BUILD_MAP 0					      		  maxLen = i + 1				    	    if curr_diff == 0 :					  
14 STORE_FAST 6 ( diff )				      	      elif curr_diff not in diff :			    		seek = i + 1					  
							      		  diff [ curr_diff ] = i			    	    elif curr_diff not in diff :			  
5 16 SETUP_LOOP 106 ( to 124 )				      	      else :						    		diff [ curr_diff ] = i				  
18 LOAD_GLOBAL 0 ( range )				      		  length = i - diff [ curr_diff ]		    	    else :						  
20 LOAD_FAST 2 ( n )					      		  maxLen = max ( maxLen , length )		    		length = i - diff [ curr_diff ]			  
22 CALL_FUNCTION 1					      	  return maxLen						    	return ( hermeadd )					  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 94 ( to 122 )				      								    								  
28 STORE_FAST 7 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 4 ( presum1 )				      								    								  
32 LOAD_FAST 0 ( arr1 )					      								    								  
34 LOAD_FAST 7 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 4 ( presum1 )				      								    								  
							      								    								  
7 42 LOAD_FAST 5 ( presum2 )				      								    								  
44 LOAD_FAST 1 ( arr2 )					      								    								  
46 LOAD_FAST 7 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 5 ( presum2 )				      								    								  
							      								    								  
8 54 LOAD_FAST 4 ( presum1 )				      								    								  
56 LOAD_FAST 5 ( presum2 )				      								    								  
58 BINARY_SUBTRACT					      								    								  
60 STORE_FAST 8 ( curr_diff )				      								    								  
							      								    								  
9 62 LOAD_FAST 8 ( curr_diff )				      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 70 LOAD_FAST 7 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_FAST 3 ( maxLen )				      								    								  
78 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 8 ( curr_diff )			      								    								  
82 LOAD_FAST 6 ( diff )					      								    								  
84 COMPARE_OP 7 ( not in )				      								    								  
86 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
12 88 LOAD_FAST 7 ( i )					      								    								  
90 LOAD_FAST 6 ( diff )					      								    								  
92 LOAD_FAST 8 ( curr_diff )				      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
14 >> 98 LOAD_FAST 7 ( i )				      								    								  
100 LOAD_FAST 6 ( diff )				      								    								  
102 LOAD_FAST 8 ( curr_diff )				      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 9 ( length )				      								    								  
							      								    								  
15 110 LOAD_GLOBAL 1 ( max )				      								    								  
112 LOAD_FAST 3 ( maxLen )				      								    								  
114 LOAD_FAST 9 ( length )				      								    								  
116 CALL_FUNCTION 2					      								    								  
118 STORE_FAST 3 ( maxLen )				      								    								  
120 JUMP_ABSOLUTE 26					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
16 >> 124 LOAD_FAST 3 ( maxLen )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			      PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			    PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP				  PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP
--							      --							    --								  --
Disassembly of <code object printAllAPTriplets at 0x7fbac0e8d def printAllAPTriplets ( arr , n ) :			    def printAllAPTrits ( arr , n ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  s = [ ] ;						    	s = [ ]							  
2 STORE_FAST 2 ( s )					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 116 ( to 122 )				      		  diff = arr [ j ] - arr [ i ] ;		    		diff = arr [ j ] - arr [ i ]			  
6 LOAD_GLOBAL 0 ( range )				      		  if ( ( arr [ i ] - diff ) in arr ) :		    		if arr [ i ] - diff in arr :			  
8 LOAD_CONST 1 ( 0 )					      		      print ( "{} {} {}".format ( ( arr [ i ] - dif 		    print ( "{} {} {}".format ( arr [ i ] - diff  
10 LOAD_FAST 1 ( n )					      	  s.append ( arr [ i ] ) ;				    	s.append ( arr [ i ] )					  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 98 ( to 120 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 92 ( to 118 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 74 ( to 116 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
6 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 5 ( diff )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 COMPARE_OP 6 ( in )					      								    								  
74 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
7 76 LOAD_GLOBAL 1 ( print )				      								    								  
78 LOAD_CONST 3 ( '{} {} {}' )				      								    								  
80 LOAD_METHOD 2 ( format )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 5 ( diff )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 4 ( j )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 CALL_METHOD 3					      								    								  
106 LOAD_CONST 4 ( '\n' )				      								    								  
108 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
110 CALL_FUNCTION_KW 2					      								    								  
112 POP_TOP						      								    								  
114 JUMP_ABSOLUTE 40					      								    								  
>> 116 POP_BLOCK					      								    								  
>> 118 JUMP_ABSOLUTE 20					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
8 >> 122 LOAD_FAST 2 ( s )				      								    								  
124 LOAD_METHOD 3 ( append )				      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 3 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 CALL_METHOD 1					      								    								  
134 POP_TOP						      								    								  
136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES      PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	    PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	  PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES
--							      --							    --								  --
Disassembly of <code object printString at 0x7fbac0e89d20, fi def printString ( str , ch , count ) :			    def printString ( str , ch , count ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				      	  occ , i = 0 , 0					    	occ , i = 0 , 0						  
2 UNPACK_SEQUENCE 2					      	  if ( count == 0 ) :					    	if count == 0 :						  
4 STORE_FAST 3 ( occ )					      	      print ( str )					    	    print ( str )					  
6 STORE_FAST 4 ( i )					      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
							      	      if ( str [ i ] == ch ) :				    	    if str [ i ] == ch :				  
3 8 LOAD_FAST 2 ( count )				      		  occ += 1					    		occ += 1					  
10 LOAD_CONST 2 ( 0 )					      	      if ( occ == count ) :				    	    if occ == count :					  
12 COMPARE_OP 2 ( == )					      		  break						    		break						  
14 POP_JUMP_IF_FALSE 24					      	  if ( i < len ( str ) - 1 ) :				    if i < len ( str ) - 1 :					  
							      	      print ( str [ i + 1 : len ( str ) - i + 2 ] )	    	print ( str [ i + 1 : len ( str ) - i + 2 ] )		  
4 16 LOAD_GLOBAL 0 ( print )				      	  else :						    else :							  
18 LOAD_FAST 0 ( str )					      	      print ( "Empty string" )				    	print ( "Empty string" )				  
20 CALL_FUNCTION 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 50 ( to 76 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_GLOBAL 2 ( len )				      								    								  
30 LOAD_FAST 0 ( str )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 34 ( to 74 )				      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( str )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( ch )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 54 LOAD_FAST 3 ( occ )				      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( occ )					      								    								  
							      								    								  
8 >> 62 LOAD_FAST 3 ( occ )				      								    								  
64 LOAD_FAST 2 ( count )				      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
9 70 BREAK_LOOP						      								    								  
72 JUMP_ABSOLUTE 38					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 4 ( i )				      								    								  
78 LOAD_GLOBAL 2 ( len )				      								    								  
80 LOAD_FAST 0 ( str )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 LOAD_CONST 3 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 COMPARE_OP 0 ( < )					      								    								  
90 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
11 92 LOAD_GLOBAL 0 ( print )				      								    								  
94 LOAD_FAST 0 ( str )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 LOAD_CONST 3 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_GLOBAL 2 ( len )				      								    								  
104 LOAD_FAST 0 ( str )					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_CONST 4 ( 2 )					      								    								  
114 BINARY_ADD						      								    								  
116 BUILD_SLICE 2					      								    								  
118 BINARY_SUBSCR					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 POP_TOP						      								    								  
124 JUMP_FORWARD 8 ( to 134 )				      								    								  
							      								    								  
13 >> 126 LOAD_GLOBAL 0 ( print )			      								    								  
128 LOAD_CONST 5 ( 'Empty string' )			      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_AN_ARRAY_OF_0S_1S_AND_2S				      SORT_AN_ARRAY_OF_0S_1S_AND_2S				    SORT_AN_ARRAY_OF_0S_1S_AND_2S				  SORT_AN_ARRAY_OF_0S_1S_AND_2S
--							      --							    --								  --
Disassembly of <code object sort012 at 0x7fbac0e89d20, file " def sort012 ( a , arr_size ) :				    def sort012 ( a , arr_size ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  lo = 0						    	lo = 0							  
2 STORE_FAST 2 ( lo )					      	  hi = arr_size - 1					    	hi = arr_size - 1					  
							      	  mid = 0						    	mid = 0							  
3 4 LOAD_FAST 1 ( arr_size )				      	  while mid <= hi :					    	while mid <= hi :					  
6 LOAD_CONST 2 ( 1 )					      	      if a [ mid ] == 0 :				    	    if a [ mid ] == 0 :					  
8 BINARY_SUBTRACT					      		  a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]	    		a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]	  
10 STORE_FAST 3 ( hi )					      		  lo = lo + 1					    		lo = lo + 1					  
							      		  mid = mid + 1					    		mid = mid + 1					  
4 12 LOAD_CONST 1 ( 0 )					      	      elif a [ mid ] == 1 :				    	    elif a [ mid ] == 1 :				  
14 STORE_FAST 4 ( mid )					      		  mid = mid + 1					    		mid = mid + 1					  
							      	      else :						    	    else :						  
5 16 SETUP_LOOP 124 ( to 142 )				      		  a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]	    		a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]	  
>> 18 LOAD_FAST 4 ( mid )				      		  hi = hi - 1					    		hi = hi - 1					  
20 LOAD_FAST 3 ( hi )					      								    								  
22 COMPARE_OP 1 ( <= )					      								    								  
24 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_FAST 4 ( mid )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 4 ( mid )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 2 ( lo )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 ROT_TWO						      								    								  
52 LOAD_FAST 0 ( a )					      								    								  
54 LOAD_FAST 2 ( lo )					      								    								  
56 STORE_SUBSCR						      								    								  
58 LOAD_FAST 0 ( a )					      								    								  
60 LOAD_FAST 4 ( mid )					      								    								  
62 STORE_SUBSCR						      								    								  
							      								    								  
8 64 LOAD_FAST 2 ( lo )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 2 ( lo )					      								    								  
							      								    								  
9 72 LOAD_FAST 4 ( mid )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 4 ( mid )					      								    								  
80 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
10 >> 82 LOAD_FAST 0 ( a )				      								    								  
84 LOAD_FAST 4 ( mid )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
11 94 LOAD_FAST 4 ( mid )				      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 STORE_FAST 4 ( mid )				      								    								  
102 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
13 >> 104 LOAD_FAST 0 ( a )				      								    								  
106 LOAD_FAST 3 ( hi )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 0 ( a )					      								    								  
112 LOAD_FAST 4 ( mid )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 ROT_TWO						      								    								  
118 LOAD_FAST 0 ( a )					      								    								  
120 LOAD_FAST 4 ( mid )					      								    								  
122 STORE_SUBSCR					      								    								  
124 LOAD_FAST 0 ( a )					      								    								  
126 LOAD_FAST 3 ( hi )					      								    								  
128 STORE_SUBSCR					      								    								  
							      								    								  
14 130 LOAD_FAST 3 ( hi )				      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 STORE_FAST 3 ( hi )					      								    								  
138 JUMP_ABSOLUTE 18					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 LOAD_CONST 0 ( None )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2		    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2
--							      --							    --								  --
Disassembly of <code object find3Numbers at 0x7fbac0e8de40, f def find3Numbers ( A , arr_size , sum ) :			    def find3Numbers ( A , arr_size , sum ) :			  success : None
2 0 SETUP_LOOP 132 ( to 134 )				      	  for i in range ( 0 , arr_size - 1 ) :			    	for i in range ( 0 , arr_size - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      s = set ( )					    	    s = set ( )						  
4 LOAD_CONST 1 ( 0 )					      	      curr_sum = sum - A [ i ]				    	    curr_sum = ( sum - A [ i ] )			  
6 LOAD_FAST 1 ( arr_size )				      	      for j in range ( i + 1 , arr_size ) :		    	    for j in range ( i + 1 , arr_size ) :		  
8 LOAD_CONST 2 ( 1 )					      		  if ( curr_sum - A [ j ] ) in s :		    		if curr_sum - A [ j ] in s :			  
10 BINARY_SUBTRACT					      		      print ( "Triplet is" , A [ i ] , ", " , A [ j 		    print ( "Triplet is" , A [ i ] , ", " , A [ j 
12 CALL_FUNCTION 2					      		      return True				    		    return True					  
14 GET_ITER						      		  s.add ( A [ j ] )				    		s.add ( A [ j ] )				  
>> 16 FOR_ITER 114 ( to 132 )				      	  return False						    	return False						  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 20 LOAD_GLOBAL 1 ( set )				      								    								  
22 CALL_FUNCTION 0					      								    								  
24 STORE_FAST 4 ( s )					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( sum )				      								    								  
28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
5 38 SETUP_LOOP 90 ( to 130 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 1 ( arr_size )				      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 72 ( to 128 )				      								    								  
56 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 58 LOAD_FAST 5 ( curr_sum )				      								    								  
60 LOAD_FAST 0 ( A )					      								    								  
62 LOAD_FAST 6 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_FAST 4 ( s )					      								    								  
70 COMPARE_OP 6 ( in )					      								    								  
72 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
7 74 LOAD_GLOBAL 2 ( print )				      								    								  
76 LOAD_CONST 3 ( 'Triplet is' )			      								    								  
78 LOAD_FAST 0 ( A )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 4 ( ', ' )				      								    								  
86 LOAD_FAST 0 ( A )					      								    								  
88 LOAD_FAST 6 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 4 ( ', ' )				      								    								  
94 LOAD_FAST 5 ( curr_sum )				      								    								  
96 LOAD_FAST 0 ( A )					      								    								  
98 LOAD_FAST 6 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 6					      								    								  
106 POP_TOP						      								    								  
							      								    								  
8 108 LOAD_CONST 5 ( True )				      								    								  
110 RETURN_VALUE					      								    								  
							      								    								  
9 >> 112 LOAD_FAST 4 ( s )				      								    								  
114 LOAD_METHOD 3 ( add )				      								    								  
116 LOAD_FAST 0 ( A )					      								    								  
118 LOAD_FAST 6 ( j )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 CALL_METHOD 1					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 54					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 JUMP_ABSOLUTE 16					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
10 >> 134 LOAD_CONST 6 ( False )			      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		      FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		    FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		  FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object findLargestSumPair at 0x7fbac0e8d def findLargestSumPair ( arr , n ) :			    def findLargestSumPair ( arr , n ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  if arr [ 0 ] > arr [ 1 ] :				    	if arr [ 0 ] > arr [ 1 ] :				  
2 LOAD_CONST 1 ( 0 )					      	      first = arr [ 0 ]					    	    first = arr [ 0 ]					  
4 BINARY_SUBSCR						      	      second = arr [ 1 ]				    	    second = arr [ 1 ]					  
6 LOAD_FAST 0 ( arr )					      	  else :						    	else :							  
8 LOAD_CONST 2 ( 1 )					      	      first = arr [ 1 ]					    	    first = arr [ 1 ]					  
10 BINARY_SUBSCR					      	      second = arr [ 0 ]				    	    second = arr [ 0 ]					  
12 COMPARE_OP 4 ( > )					      	  for i in range ( 2 , n ) :				    	for i in range ( 2 , n ) :				  
14 POP_JUMP_IF_FALSE 34					      	      if arr [ i ] > first :				    	    if arr [ i ] > first :				  
							      		  second = first				    		second = first					  
3 16 LOAD_FAST 0 ( arr )				      		  first = arr [ i ]				    		first = arr [ i ]				  
18 LOAD_CONST 1 ( 0 )					      	      elif arr [ i ] > second and arr [ i ] != first :	    	    elif arr [ i ] > second and arr [ i ] != first :	  
20 BINARY_SUBSCR					      		  second = arr [ i ]				    		second = arr [ i ]				  
22 STORE_FAST 2 ( first )				      	  return ( first + second )				    return first + second					  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 STORE_FAST 3 ( second )				      								    								  
32 JUMP_FORWARD 16 ( to 50 )				      								    								  
							      								    								  
6 >> 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 STORE_FAST 2 ( first )				      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_FAST 3 ( second )				      								    								  
							      								    								  
8 >> 50 SETUP_LOOP 76 ( to 128 )			      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 LOAD_FAST 1 ( n )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 62 ( to 126 )				      								    								  
64 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 66 LOAD_FAST 0 ( arr )				      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 2 ( first )				      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
10 78 LOAD_FAST 2 ( first )				      								    								  
80 STORE_FAST 3 ( second )				      								    								  
							      								    								  
11 82 LOAD_FAST 0 ( arr )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 STORE_FAST 2 ( first )				      								    								  
90 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
12 >> 92 LOAD_FAST 0 ( arr )				      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 3 ( second )				      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 62				      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 4 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 2 ( first )				      								    								  
112 COMPARE_OP 3 ( != )					      								    								  
114 POP_JUMP_IF_FALSE 62				      								    								  
							      								    								  
13 116 LOAD_FAST 0 ( arr )				      								    								  
118 LOAD_FAST 4 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 STORE_FAST 3 ( second )				      								    								  
124 JUMP_ABSOLUTE 62					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
14 >> 128 LOAD_FAST 2 ( first )				      								    								  
130 LOAD_FAST 3 ( second )				      								    								  
132 BINARY_ADD						      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_<unk> ASING_SUBSEQUENCE_1			      LONGEST_<unk> ASING_SUBSEQUENCE_1				    LONGEST_<unk> ASING_SUBSEQUENCE_1				  LONGEST_<unk> ASING_SUBSEQUENCE_1
--							      --							    --								  --
Disassembly of <code object lis at 0x7fbac0e8de40, file "<dis def lis ( arr ) :						    def lis ( arr ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  lis = [ 1 ] * n					    	lis = [ 1 ] * n						  
4 CALL_FUNCTION 1					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
6 STORE_FAST 1 ( n )					      	      for j in range ( 0 , i ) :			    	    for j in range ( 0 , i ) :				  
							      		  if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  		if arr [ i ] > arr [ j ] and lis [ i ] [ lis [ j  
3 8 LOAD_CONST 1 ( 1 )					      		      lis [ i ] = lis [ j ] + 1			    		    lis [ i ] = lis [ j ] + 1			  
10 BUILD_LIST 1						      	  maximum = 0						    	maximum = 0						  
12 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
14 BINARY_MULTIPLY					      	      maximum = max ( maximum , lis [ i ] )		    	    maximum = max ( maximum , lis [ i ] )		  
16 STORE_FAST 2 ( lis )					      	  return maximum					    	return maximum						  
							      								    								  
4 18 SETUP_LOOP 90 ( to 110 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 76 ( to 108 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 34 SETUP_LOOP 70 ( to 106 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 56 ( to 104 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 4 ( > )					      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
66 LOAD_FAST 2 ( lis )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 2 ( lis )					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 86 LOAD_FAST 2 ( lis )				      								    								  
88 LOAD_FAST 4 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 2 ( lis )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 STORE_SUBSCR					      								    								  
102 JUMP_ABSOLUTE 46					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 30					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
8 >> 110 LOAD_CONST 2 ( 0 )				      								    								  
112 STORE_FAST 5 ( maximum )				      								    								  
							      								    								  
9 114 SETUP_LOOP 30 ( to 146 )				      								    								  
116 LOAD_GLOBAL 1 ( range )				      								    								  
118 LOAD_FAST 1 ( n )					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 18 ( to 144 )				      								    								  
126 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 128 LOAD_GLOBAL 2 ( max )				      								    								  
130 LOAD_FAST 5 ( maximum )				      								    								  
132 LOAD_FAST 2 ( lis )					      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 STORE_FAST 5 ( maximum )				      								    								  
142 JUMP_ABSOLUTE 124					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
11 >> 146 LOAD_FAST 5 ( maximum )			      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1
--							      --							    --								  --
Disassembly of <code object findTriplets at 0x7fbac0e8de40, f def findTriplets ( arr , n ) :				    def findTriplets ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( False )				      	  found = False						    	found = False						  
2 STORE_FAST 2 ( found )				      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  
							      	      s = set ( )					    	    s = set ( )						  
3 4 SETUP_LOOP 116 ( to 122 )				      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
6 LOAD_GLOBAL 0 ( range )				      		  x = - ( arr [ i ] + arr [ j ] )		    		x = - arr [ i ] + arr [ j ]			  
8 LOAD_FAST 1 ( n )					      		  if x in s :					    		if x in s :					  
10 LOAD_CONST 2 ( 1 )					      		      print ( x , arr [ i ] , arr [ j ] )	    		    print ( x , arr [ i ] , arr [ j ] )		  
12 BINARY_SUBTRACT					      		      found = True				    		    found = True				  
14 CALL_FUNCTION 1					      		  else :					    		else :						  
16 GET_ITER						      		      s.add ( arr [ j ] )			    		    s.add ( arr [ j ] )				  
>> 18 FOR_ITER 100 ( to 120 )				      	  if found == False :					    	if found == False :					  
20 STORE_FAST 3 ( i )					      	      print ( "No Triplet Found" )			    	    print ( "No Triplet Found" )			  
							      								    								  
4 22 LOAD_GLOBAL 1 ( set )				      								    								  
24 CALL_FUNCTION 0					      								    								  
26 STORE_FAST 4 ( s )					      								    								  
							      								    								  
5 28 SETUP_LOOP 88 ( to 118 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 70 ( to 116 )				      								    								  
46 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 UNARY_NEGATIVE					      								    								  
64 STORE_FAST 6 ( x )					      								    								  
							      								    								  
7 66 LOAD_FAST 6 ( x )					      								    								  
68 LOAD_FAST 4 ( s )					      								    								  
70 COMPARE_OP 6 ( in )					      								    								  
72 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
8 74 LOAD_GLOBAL 2 ( print )				      								    								  
76 LOAD_FAST 6 ( x )					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_FUNCTION 3					      								    								  
92 POP_TOP						      								    								  
							      								    								  
9 94 LOAD_CONST 3 ( True )				      								    								  
96 STORE_FAST 2 ( found )				      								    								  
98 JUMP_ABSOLUTE 44					      								    								  
							      								    								  
11 >> 100 LOAD_FAST 4 ( s )				      								    								  
102 LOAD_METHOD 3 ( add )				      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 CALL_METHOD 1					      								    								  
112 POP_TOP						      								    								  
114 JUMP_ABSOLUTE 44					      								    								  
>> 116 POP_BLOCK					      								    								  
>> 118 JUMP_ABSOLUTE 18					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
12 >> 122 LOAD_FAST 2 ( found )				      								    								  
124 LOAD_CONST 1 ( False )				      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
13 130 LOAD_GLOBAL 2 ( print )				      								    								  
132 LOAD_CONST 4 ( 'No Triplet Found' )			      								    								  
134 CALL_FUNCTION 1					      								    								  
136 POP_TOP						      								    								  
>> 138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_VALID_SEQUENCE_DIVISIBLE_M			      CHECK_VALID_SEQUENCE_DIVISIBLE_M				    CHECK_VALID_SEQUENCE_DIVISIBLE_M				  CHECK_VALID_SEQUENCE_DIVISIBLE_M
--							      --							    --								  --
Disassembly of <code object isPossible at 0x7fbac0e8bc90, fil def isPossible ( n , index , Sum , M , arr , dp ) :	    def isPossible ( n , index , Sum , M , t , dp ) :		  success : None
3 0 LOAD_FAST 1 ( index )				      	  global MAX						    	global place						  
2 LOAD_FAST 0 ( n )					      	  if index == n :					    	if index == n :						  
4 COMPARE_OP 2 ( == )					      	      if ( Sum % M ) == 0 :				    	    if Sum % M == 0 :					  
6 POP_JUMP_IF_FALSE 28					      		  return True					    		return True					  
							      	      return False					    	    return False					  
4 8 LOAD_FAST 2 ( Sum )					      	  if dp [ index ] [ Sum ] != - 1 :			    	if dp [ index ] [ Sum ] != - 1 :			  
10 LOAD_FAST 3 ( M )					      	      return dp [ index ] [ Sum ]			    	    return dp [ index ] [ Sum ]				  
12 BINARY_MODULO					      	  placeAdd = isPossible ( n , index + 1 , Sum + arr [ index 	placeAdd = isPossible ( n + index + 1 , Sum , arr [ index 
14 LOAD_CONST 1 ( 0 )					      	  placeMinus = isPossible ( n , index + 1 , Sum - arr [ ind 	placeMinus = isPossible ( n + 1 - Sum [ arr [ index ] ] , 
16 COMPARE_OP 2 ( == )					      	  res = placeAdd or placeMinus				    	res = placeAdd or placeMinus				  
18 POP_JUMP_IF_FALSE 24					      	  dp [ index ] [ Sum ] = res				    	dp [ index ] [ Sum ] = res				  
							      	  return res						    	return res						  
5 20 LOAD_CONST 2 ( True )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_CONST 3 ( False )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
7 >> 28 LOAD_FAST 5 ( dp )				      								    								  
30 LOAD_FAST 1 ( index )				      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( Sum )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 4 ( - 1 )					      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
8 44 LOAD_FAST 5 ( dp )					      								    								  
46 LOAD_FAST 1 ( index )				      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 2 ( Sum )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
9 >> 56 LOAD_GLOBAL 0 ( isPossible )			      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_FAST 1 ( index )				      								    								  
62 LOAD_CONST 5 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_FAST 2 ( Sum )					      								    								  
68 LOAD_FAST 4 ( arr )					      								    								  
70 LOAD_FAST 1 ( index )				      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 3 ( M )					      								    								  
78 LOAD_FAST 4 ( arr )					      								    								  
80 LOAD_FAST 5 ( dp )					      								    								  
82 CALL_FUNCTION 6					      								    								  
84 STORE_FAST 6 ( placeAdd )				      								    								  
							      								    								  
10 86 LOAD_GLOBAL 0 ( isPossible )			      								    								  
88 LOAD_FAST 0 ( n )					      								    								  
90 LOAD_FAST 1 ( index )				      								    								  
92 LOAD_CONST 5 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 2 ( Sum )					      								    								  
98 LOAD_FAST 4 ( arr )					      								    								  
100 LOAD_FAST 1 ( index )				      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 LOAD_FAST 3 ( M )					      								    								  
108 LOAD_FAST 4 ( arr )					      								    								  
110 LOAD_FAST 5 ( dp )					      								    								  
112 CALL_FUNCTION 6					      								    								  
114 STORE_FAST 7 ( placeMinus )				      								    								  
							      								    								  
11 116 LOAD_FAST 6 ( placeAdd )				      								    								  
118 JUMP_IF_TRUE_OR_POP 122				      								    								  
120 LOAD_FAST 7 ( placeMinus )				      								    								  
>> 122 STORE_FAST 8 ( res )				      								    								  
							      								    								  
12 124 LOAD_FAST 8 ( res )				      								    								  
126 LOAD_FAST 5 ( dp )					      								    								  
128 LOAD_FAST 1 ( index )				      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 2 ( Sum )					      								    								  
134 STORE_SUBSCR					      								    								  
							      								    								  
13 136 LOAD_FAST 8 ( res )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM				      FIND_SUBARRAY_WITH_GIVEN_SUM				    FIND_SUBARRAY_WITH_GIVEN_SUM				  FIND_SUBARRAY_WITH_GIVEN_SUM
--							      --							    --								  --
Disassembly of <code object subArraySum at 0x7fbac0e8de40, fi def subArraySum ( arr , n , sum ) :			    def subArraySum ( arr , n , sum = 2 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 124 ( to 126 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      curr_sum = arr [ i ]				    	    curr_sum = arr [ i ]				  _sa.test/FIND_SUBARRAY_WITH_GIVEN_SUM.py", line 48
4 LOAD_FAST 1 ( n )					      	      j = i + 1						    	    j = i + 1						       return 0	    ^ SyntaxError: 'return' outside
6 CALL_FUNCTION 1					      	      while j <= n :					    	    while j <= n :					  function
8 GET_ITER						      		  if curr_sum == sum :				    		if curr_sum == sum :				  
>> 10 FOR_ITER 112 ( to 124 )				      		      print ( "Sum found between" )		    		    print ( "Sum found between" )		  
12 STORE_FAST 3 ( i )					      		      print ( "indexes %d and %d" % ( i , j - 1 ) ) 		    print ( "indexes %d and %d" % ( i , j - 1 ) ) 
							      		      return 1					    		    return 1					  
3 14 LOAD_FAST 0 ( arr )				      		  if curr_sum > sum or j == n :			    		if curr_sum > sum or j == n :			  
16 LOAD_FAST 3 ( i )					      		      break					    		    break					  
18 BINARY_SUBSCR					      		  curr_sum = curr_sum + arr [ j ]		    		curr_sum = curr_sum + arr [ j ]			  
20 STORE_FAST 4 ( curr_sum )				      		  j += 1					    		j += 1						  
							      	  print ( "No subarray found" )				    print ( "No subarray found" )				  
4 22 LOAD_FAST 3 ( i )					      	  return 0						    return 0							  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 30 SETUP_LOOP 90 ( to 122 )				      								    								  
>> 32 LOAD_FAST 5 ( j )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
6 40 LOAD_FAST 4 ( curr_sum )				      								    								  
42 LOAD_FAST 2 ( sum )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
7 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 2 ( 'Sum found between' )			      								    								  
52 CALL_FUNCTION 1					      								    								  
54 POP_TOP						      								    								  
							      								    								  
8 56 LOAD_GLOBAL 1 ( print )				      								    								  
58 LOAD_CONST 3 ( 'indexes %d and %d' )			      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 LOAD_FAST 5 ( j )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BUILD_TUPLE 2					      								    								  
70 BINARY_MODULO					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 POP_TOP						      								    								  
							      								    								  
9 76 LOAD_CONST 1 ( 1 )					      								    								  
78 RETURN_VALUE						      								    								  
							      								    								  
10 >> 80 LOAD_FAST 4 ( curr_sum )			      								    								  
82 LOAD_FAST 2 ( sum )					      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_TRUE 96					      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
11 >> 96 BREAK_LOOP					      								    								  
							      								    								  
12 >> 98 LOAD_FAST 4 ( curr_sum )			      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 5 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
13 110 LOAD_FAST 5 ( j )				      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 INPLACE_ADD						      								    								  
116 STORE_FAST 5 ( j )					      								    								  
118 JUMP_ABSOLUTE 32					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 10					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
14 >> 126 LOAD_GLOBAL 1 ( print )			      								    								  
128 LOAD_CONST 4 ( 'No subarray found' )		      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
							      								    								  
15 134 LOAD_CONST 5 ( 0 )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD
--							      --							    --								  --
Disassembly of <code object assign at 0x7fbac0e89d20, file "< def assign ( a , n ) :					    def assign ( a , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( )						    	a.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  ans = [ 0 ] * n					    	ans = [ 0 ] * n						  
4 CALL_METHOD 0						      	  p = 0							    	p = 0							  
6 POP_TOP						      	  q = n - 1						    	q = n - 1						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( i + 1 ) % 2 == 0 :				    	    if ( i + 1 ) % 2 == 0 :				  
10 BUILD_LIST 1						      		  ans [ i ] = a [ q ]				    		ans [ i ] = a [ q ]				  
12 LOAD_FAST 1 ( n )					      		  q = q - 1					    		q = q - 1					  
14 BINARY_MULTIPLY					      	      else :						    	    else :						  
16 STORE_FAST 2 ( ans )					      		  ans [ i ] = a [ p ]				    		ans [ i ] = a [ p ]				  
							      		  p = p + 1					    		p = p + 1					  
4 18 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
20 STORE_FAST 3 ( p )					      	      print ( ans [ i ] , end = " " )			    	    print ( ans [ i ] , end = " " )			  
							      								    								  
5 22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 4 ( q )					      								    								  
							      								    								  
6 30 SETUP_LOOP 74 ( to 106 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 62 ( to 104 )				      								    								  
42 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 44 LOAD_FAST 5 ( i )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_CONST 3 ( 2 )					      								    								  
52 BINARY_MODULO					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
8 60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 4 ( q )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 2 ( ans )					      								    								  
68 LOAD_FAST 5 ( i )					      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
9 72 LOAD_FAST 4 ( q )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 4 ( q )					      								    								  
80 JUMP_ABSOLUTE 40					      								    								  
							      								    								  
11 >> 82 LOAD_FAST 0 ( a )				      								    								  
84 LOAD_FAST 3 ( p )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( ans )					      								    								  
90 LOAD_FAST 5 ( i )					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
12 94 LOAD_FAST 3 ( p )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 STORE_FAST 3 ( p )					      								    								  
102 JUMP_ABSOLUTE 40					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
13 >> 106 SETUP_LOOP 32 ( to 140 )			      								    								  
108 LOAD_GLOBAL 1 ( range )				      								    								  
110 LOAD_FAST 1 ( n )					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 GET_ITER						      								    								  
>> 116 FOR_ITER 20 ( to 138 )				      								    								  
118 STORE_FAST 5 ( i )					      								    								  
							      								    								  
14 120 LOAD_GLOBAL 2 ( print )				      								    								  
122 LOAD_FAST 2 ( ans )					      								    								  
124 LOAD_FAST 5 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_CONST 4 ( ' ' )				      								    								  
130 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
136 JUMP_ABSOLUTE 116					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10
--							      --							    --								  --
Disassembly of <code object calculate at 0x7fbac0e8d540, file def calculate ( N ) :					    def calculate ( N ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  length = len ( N )					    	length = len ( N )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( N )					      	  l = int ( ( length ) / 2 )				    	l = int ( length / 2 )					  _sa.test/BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVIS
4 CALL_FUNCTION 1					      	  count = 0						    	count = 0						  ION_SECOND_POWER_10.py", line 46     except :
6 STORE_FAST 1 ( length )				      	  for i in range ( l + 1 ) :				    	for i in range ( l + 1 ) :				  ^ IndentationError: unexpected unindent
							      	      s = N [ 0 : 0 + i ]				    	    s = N [ 0 : 0 + i ]					  
3 8 LOAD_GLOBAL 1 ( int )				      	      l1 = len ( s )					    	    l1 = len ( s )					  
10 LOAD_FAST 1 ( length )				      	      t = N [ i : l1 + i ]				    	    t = N [ i : l1 + i ]				  
12 LOAD_CONST 1 ( 2 )					      	      try :						    	    try :						  
14 BINARY_TRUE_DIVIDE					      		  if s [ 0 ] == '0' or t [ 0 ] == '0' :		    		if s [ 0 ] == '0' or t [ 0 ] == '0' :		  
16 CALL_FUNCTION 1					      		      continue					    		    continue					  
18 STORE_FAST 2 ( l )					      	      except :						    	except :						  
							      		  continue					    	    continue						  
4 20 LOAD_CONST 2 ( 0 )					      	      if s == t :					    	if s == t :						  
22 STORE_FAST 3 ( count )				      		  count += 1					    	    count += 1						  
							      	  return count						    return count						  
5 24 SETUP_LOOP 122 ( to 148 )				      								    								  
26 LOAD_GLOBAL 2 ( range )				      								    								  
28 LOAD_FAST 2 ( l )					      								    								  
30 LOAD_CONST 3 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 106 ( to 146 )				      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( N )					      								    								  
44 LOAD_CONST 2 ( 0 )					      								    								  
46 LOAD_CONST 2 ( 0 )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_ADD						      								    								  
52 BUILD_SLICE 2					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 5 ( s )					      								    								  
							      								    								  
7 58 LOAD_GLOBAL 0 ( len )				      								    								  
60 LOAD_FAST 5 ( s )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 STORE_FAST 6 ( l1 )					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( N )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 LOAD_FAST 6 ( l1 )					      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_ADD						      								    								  
76 BUILD_SLICE 2					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 7 ( t )					      								    								  
							      								    								  
9 82 SETUP_EXCEPT 30 ( to 114 )				      								    								  
							      								    								  
10 84 LOAD_FAST 5 ( s )					      								    								  
86 LOAD_CONST 2 ( 0 )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 4 ( '0' )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_TRUE 108					      								    								  
96 LOAD_FAST 7 ( t )					      								    								  
98 LOAD_CONST 2 ( 0 )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 4 ( '0' )				      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
11 >> 108 CONTINUE_LOOP 38				      								    								  
>> 110 POP_BLOCK					      								    								  
112 JUMP_FORWARD 14 ( to 128 )				      								    								  
							      								    								  
12 >> 114 POP_TOP					      								    								  
116 POP_TOP						      								    								  
118 POP_TOP						      								    								  
							      								    								  
13 120 CONTINUE_LOOP 38					      								    								  
122 POP_EXCEPT						      								    								  
124 JUMP_FORWARD 2 ( to 128 )				      								    								  
126 END_FINALLY						      								    								  
							      								    								  
14 >> 128 LOAD_FAST 5 ( s )				      								    								  
130 LOAD_FAST 7 ( t )					      								    								  
132 COMPARE_OP 2 ( == )					      								    								  
134 POP_JUMP_IF_FALSE 38				      								    								  
							      								    								  
15 136 LOAD_FAST 3 ( count )				      								    								  
138 LOAD_CONST 3 ( 1 )					      								    								  
140 INPLACE_ADD						      								    								  
142 STORE_FAST 3 ( count )				      								    								  
144 JUMP_ABSOLUTE 38					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
16 >> 148 LOAD_FAST 3 ( count )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	      NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	    NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	  NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS
--							      --							    --								  --
Disassembly of <code object countTriangle at 0x7fbac0e89d20,  def countTriangle ( g , isDirected ) :			    def countTriangle ( g , isDirected = False ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  nodes = len ( g )					    	nodes = len ( g )					  
2 LOAD_FAST 0 ( g )					      	  count_Triangle = 0					    	count_Triangle = 0					  
4 CALL_FUNCTION 1					      	  for i in range ( nodes ) :				    	for i in range ( nodes ) :				  
6 STORE_FAST 2 ( nodes )				      	      for j in range ( nodes ) :			    	    for j in range ( nodes ) :				  
							      		  for k in range ( nodes ) :			    		for k in range ( nodes ) :			  
3 8 LOAD_CONST 1 ( 0 )					      		      if ( i != j and i != k and j != k and g [ i ] 		    if i != j and i != k and g [ i ] [ j ] and g  
10 STORE_FAST 3 ( count_Triangle )			      			  count_Triangle += 1			    			count_Triangle += 1			  
							      	  return count_Triangle / 3 if isDirected else count_Triang 	return ( isDirected ) / ( count_Triangle / 3 ) if isTrian 
4 12 SETUP_LOOP 120 ( to 134 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( nodes )				      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 108 ( to 132 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 26 SETUP_LOOP 102 ( to 130 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_FAST 2 ( nodes )				      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 90 ( to 128 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 40 SETUP_LOOP 84 ( to 126 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_FAST 2 ( nodes )				      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 72 ( to 124 )				      								    								  
52 STORE_FAST 6 ( k )					      								    								  
							      								    								  
7 54 LOAD_FAST 4 ( i )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 COMPARE_OP 3 ( != )					      								    								  
60 POP_JUMP_IF_FALSE 50					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 LOAD_FAST 6 ( k )					      								    								  
66 COMPARE_OP 3 ( != )					      								    								  
68 POP_JUMP_IF_FALSE 50					      								    								  
70 LOAD_FAST 5 ( j )					      								    								  
72 LOAD_FAST 6 ( k )					      								    								  
74 COMPARE_OP 3 ( != )					      								    								  
76 POP_JUMP_IF_FALSE 50					      								    								  
78 LOAD_FAST 0 ( g )					      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 5 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 POP_JUMP_IF_FALSE 50					      								    								  
90 LOAD_FAST 0 ( g )					      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 6 ( k )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 POP_JUMP_IF_FALSE 50				      								    								  
102 LOAD_FAST 0 ( g )					      								    								  
104 LOAD_FAST 6 ( k )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 POP_JUMP_IF_FALSE 50				      								    								  
							      								    								  
8 114 LOAD_FAST 3 ( count_Triangle )			      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 INPLACE_ADD						      								    								  
120 STORE_FAST 3 ( count_Triangle )			      								    								  
122 JUMP_ABSOLUTE 50					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 JUMP_ABSOLUTE 36					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 JUMP_ABSOLUTE 22					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
9 >> 134 LOAD_FAST 1 ( isDirected )			      								    								  
136 POP_JUMP_IF_FALSE 146				      								    								  
138 LOAD_FAST 3 ( count_Triangle )			      								    								  
140 LOAD_CONST 3 ( 3 )					      								    								  
142 BINARY_TRUE_DIVIDE					      								    								  
144 RETURN_VALUE					      								    								  
>> 146 LOAD_FAST 3 ( count_Triangle )			      								    								  
148 LOAD_CONST 4 ( 6 )					      								    								  
150 BINARY_TRUE_DIVIDE					      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		      MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		    MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		  MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE
--							      --							    --								  --
Disassembly of <code object <<unk>> stSubWithSum at 0x7fbac0e def <<unk>> stSubWithSum ( arr , n , x ) :		    def <unk> stSubWithSum ( arr , n , x ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  curr_sum = 0						    	curr_sum = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( curr_sum )				      	  min_len = n + 1					    	min_len = n + 1						  _sa.test/MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN
							      	  start = 0						    	start = 0						  _VALUE.py", line 34	  def f_filled stSubWithSum
3 4 LOAD_FAST 1 ( n )					      	  end = 0						    	end = 0							  ( arr , n , x ) :				^ Sy
6 LOAD_CONST 2 ( 1 )					      	  while ( end < n ) :					    	while end < n :						  ntaxError: invalid syntax
8 BINARY_ADD						      	      while ( curr_sum <= x and end < n ) :		    	    while curr_sum <= x and end < n :			  
10 STORE_FAST 4 ( min_len )				      		  curr_sum += arr [ end ]			    		curr_sum += arr [ end ]				  
							      		  end += 1					    		end += 1					  
4 12 LOAD_CONST 1 ( 0 )					      	      while ( curr_sum > x and start < n ) :		    	while curr_sum > x and start < n :			  
14 STORE_FAST 5 ( start )				      		  if ( end - start < min_len ) :		    	    if end - start < min_len :				  
							      		      min_len = end - start			    		min_len = end - start				  
5 16 LOAD_CONST 1 ( 0 )					      		  curr_sum -= arr [ start ]			    	    curr_sum += arr [ start ]				  
18 STORE_FAST 6 ( end )					      		  start += 1					    	    start += 1						  
							      	  return min_len					    return min_len						  
6 20 SETUP_LOOP 116 ( to 138 )				      								    								  
>> 22 LOAD_FAST 6 ( end )				      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
7 30 SETUP_LOOP 40 ( to 72 )				      								    								  
>> 32 LOAD_FAST 3 ( curr_sum )				      								    								  
34 LOAD_FAST 2 ( x )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 70					      								    								  
40 LOAD_FAST 6 ( end )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
8 48 LOAD_FAST 3 ( curr_sum )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 6 ( end )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
9 60 LOAD_FAST 6 ( end )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 6 ( end )					      								    								  
68 JUMP_ABSOLUTE 32					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
10 >> 72 SETUP_LOOP 60 ( to 134 )			      								    								  
>> 74 LOAD_FAST 3 ( curr_sum )				      								    								  
76 LOAD_FAST 2 ( x )					      								    								  
78 COMPARE_OP 4 ( > )					      								    								  
80 POP_JUMP_IF_FALSE 132				      								    								  
82 LOAD_FAST 5 ( start )				      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 COMPARE_OP 0 ( < )					      								    								  
88 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
11 90 LOAD_FAST 6 ( end )				      								    								  
92 LOAD_FAST 5 ( start )				      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_FAST 4 ( min_len )				      								    								  
98 COMPARE_OP 0 ( < )					      								    								  
100 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
12 102 LOAD_FAST 6 ( end )				      								    								  
104 LOAD_FAST 5 ( start )				      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 4 ( min_len )				      								    								  
							      								    								  
13 >> 110 LOAD_FAST 3 ( curr_sum )			      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 5 ( start )				      								    								  
116 BINARY_SUBSCR					      								    								  
118 INPLACE_SUBTRACT					      								    								  
120 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
14 122 LOAD_FAST 5 ( start )				      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 5 ( start )				      								    								  
130 JUMP_ABSOLUTE 74					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 JUMP_ABSOLUTE 22					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
15 >> 138 LOAD_FAST 4 ( min_len )			      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY	      INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY	    INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY	  INTEGER_POSITIVE_VALUE_POSITIVE_<unk> TIVE_VALUE_ARRAY
--							      --							    --								  --
Disassembly of <code object findInteger at 0x7fbac0e8d540, fi def findInteger ( arr , n ) :				    def findInteger ( arr , 0x7ac0e8d540 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  hash = dict ( )					    	hash = dict ( )						  
2 CALL_FUNCTION 0					      	  maximum = 0						    	maximum = 0						  
4 STORE_FAST 2 ( hash )					      	  for i in arr :					    	for i in arr :						  
							      	      if ( i < 0 ) :					    	    if i < 0 :						  
3 6 LOAD_CONST 1 ( 0 )					      		  if abs ( i ) not in hash.keys ( ) :		    		if abs ( i ) not in hash.keys ( ) :		  
8 STORE_FAST 3 ( maximum )				      		      hash [ abs ( i ) ] = - 1			    		    hash [ abs ( i ) ] = - 1			  
							      		  else :					    		else :						  
4 10 SETUP_LOOP 92 ( to 104 )				      		      hash [ abs ( i ) ] -= 1			    		    hash [ abs ( i ) ] -= 1			  
12 LOAD_FAST 0 ( arr )					      	      else :						    	    else :						  
14 GET_ITER						      		  hash [ i ] = hash.get ( i , 0 ) + 1		    		hash [ i ] = hash.get ( i , 0 ) + 1		  
>> 16 FOR_ITER 84 ( to 102 )				      	  for i in arr :					    	for i in arr :						  
18 STORE_FAST 4 ( i )					      	      if i in hash.keys ( ) and hash [ i ] > 0 :	    	    if i in hash.keys ( ) and hash [ i ] > 0 :		  
							      		  return i					    		return i					  
5 20 LOAD_FAST 4 ( i )					      	  return - 1						    return - 1							  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
6 28 LOAD_GLOBAL 1 ( abs )				      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_FAST 2 ( hash )					      								    								  
36 LOAD_METHOD 2 ( keys )				      								    								  
38 CALL_METHOD 0					      								    								  
40 COMPARE_OP 7 ( not in )				      								    								  
42 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 44 LOAD_CONST 2 ( - 1 )				      								    								  
46 LOAD_FAST 2 ( hash )					      								    								  
48 LOAD_GLOBAL 1 ( abs )				      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 100					      								    								  
							      								    								  
9 >> 58 LOAD_FAST 2 ( hash )				      								    								  
60 LOAD_GLOBAL 1 ( abs )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 DUP_TOP_TWO						      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_SUBTRACT					      								    								  
74 ROT_THREE						      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 2 ( hash )				      								    								  
82 LOAD_METHOD 3 ( get )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 CALL_METHOD 2					      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 2 ( hash )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 STORE_SUBSCR						      								    								  
>> 100 JUMP_ABSOLUTE 16					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
12 >> 104 SETUP_LOOP 40 ( to 146 )			      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 32 ( to 144 )				      								    								  
112 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 114 LOAD_FAST 4 ( i )				      								    								  
116 LOAD_FAST 2 ( hash )				      								    								  
118 LOAD_METHOD 2 ( keys )				      								    								  
120 CALL_METHOD 0					      								    								  
122 COMPARE_OP 6 ( in )					      								    								  
124 POP_JUMP_IF_FALSE 110				      								    								  
126 LOAD_FAST 2 ( hash )				      								    								  
128 LOAD_FAST 4 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 1 ( 0 )					      								    								  
134 COMPARE_OP 4 ( > )					      								    								  
136 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
14 138 LOAD_FAST 4 ( i )				      								    								  
140 RETURN_VALUE					      								    								  
142 JUMP_ABSOLUTE 110					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
15 >> 146 LOAD_CONST 2 ( - 1 )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		      FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		    FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2			  FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2
--							      --							    --								  --
Disassembly of <code object printDivisors at 0x7fbac0e89d20,  def printDivisors ( n ) :					    def printDivisors ( n ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  list = [ ]						    	list = [ ]						  
2 STORE_FAST 1 ( list )					      	  for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :	    	for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :	  
							      	      if ( n % i == 0 ) :				    	    if n % i == 0 :					  
3 4 SETUP_LOOP 100 ( to 106 )				      		  if ( n / i == i ) :				    		if n / i == i :					  
6 LOAD_GLOBAL 0 ( range )				      		      print ( i , end = " " )			    		    print ( i , end = " " )			  
8 LOAD_CONST 1 ( 1 )					      		  else :					    		else :						  
10 LOAD_GLOBAL 1 ( int )				      		      print ( i , end = " " )			    		    print ( i , end = " " )			  
12 LOAD_GLOBAL 2 ( math )				      		      list.append ( int ( n / i ) )		    		    list.append ( int ( n / i ) )		  
14 LOAD_METHOD 3 ( sqrt )				      	  for i in list [ : : - 1 ] :				    	for i in list [ : : - 1 ] :				  
16 LOAD_FAST 0 ( n )					      	      print ( i , end = " " )				    	    print ( i , end = " " )				  
18 CALL_METHOD 1					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 1					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 72 ( to 104 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_MODULO					      								    								  
40 LOAD_CONST 2 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 BINARY_TRUE_DIVIDE					      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 58 LOAD_GLOBAL 4 ( print )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 3 ( ' ' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
70 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
8 >> 72 LOAD_GLOBAL 4 ( print )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 LOAD_CONST 3 ( ' ' )					      								    								  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 2					      								    								  
82 POP_TOP						      								    								  
							      								    								  
9 84 LOAD_FAST 1 ( list )				      								    								  
86 LOAD_METHOD 5 ( append )				      								    								  
88 LOAD_GLOBAL 1 ( int )				      								    								  
90 LOAD_FAST 0 ( n )					      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 BINARY_TRUE_DIVIDE					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 CALL_METHOD 1					      								    								  
100 POP_TOP						      								    								  
102 JUMP_ABSOLUTE 30					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 SETUP_LOOP 34 ( to 142 )			      								    								  
108 LOAD_FAST 1 ( list )				      								    								  
110 LOAD_CONST 0 ( None )				      								    								  
112 LOAD_CONST 0 ( None )				      								    								  
114 LOAD_CONST 5 ( - 1 )				      								    								  
116 BUILD_SLICE 3					      								    								  
118 BINARY_SUBSCR					      								    								  
120 GET_ITER						      								    								  
>> 122 FOR_ITER 16 ( to 140 )				      								    								  
124 STORE_FAST 2 ( i )					      								    								  
							      								    								  
11 126 LOAD_GLOBAL 4 ( print )				      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 LOAD_CONST 3 ( ' ' )				      								    								  
132 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
134 CALL_FUNCTION_KW 2					      								    								  
136 POP_TOP						      								    								  
138 JUMP_ABSOLUTE 122					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 LOAD_CONST 0 ( None )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	      K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	    K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	  K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printKDistinct at 0x7fbac0e8bc90, def printKDistinct ( arr , size , KthIndex ) :		    def printKDistinct ( arr , size , KthIndex ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_MAP 0						      	  dict = { }						    	dict = { }						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( dict )					      	  vect = [ ]						    	vect = [ ]						  _sa.test/K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN
							      	  for i in range ( size ) :				    	for i in range ( size ) :				  _AN_ARRAY_1.py", line 50     return - 1     ^ Synt
3 4 BUILD_LIST 0					      	      if ( arr [ i ] in dict ) :			    	    if arr [ i ] in dict :				  axError: 'return' outside function
6 STORE_FAST 4 ( vect )					      		  dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1	    		dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1	  
							      	      else :						    	    else :						  
4 8 SETUP_LOOP 66 ( to 76 )				      		  dict [ arr [ i ] ] = 1			    		dict [ arr [ i ] ] = 1				  
10 LOAD_GLOBAL 0 ( range )				      	  for i in range ( size ) :				    	for i in range ( size ) :				  
12 LOAD_FAST 1 ( size )					      	      if ( dict [ arr [ i ] ] > 1 ) :			    	    if dict [ arr [ i ] ] > 1 :				  
14 CALL_FUNCTION 1					      		  continue					    		continue					  
16 GET_ITER						      	      else :						    	else :							  
>> 18 FOR_ITER 54 ( to 74 )				      		  KthIndex = KthIndex - 1			    	    KthIndex = KthIndex - 1				  
20 STORE_FAST 5 ( i )					      	      if ( KthIndex == 0 ) :				    	if KthIndex == 0 :					  
							      		  return arr [ i ]				    	    return arr [ i ]					  
5 22 LOAD_FAST 0 ( arr )				      	  return - 1						    return - 1							  
24 LOAD_FAST 5 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 3 ( dict )					      								    								  
30 COMPARE_OP 6 ( in )					      								    								  
32 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( dict )				      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 3 ( dict )					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_SUBSCR						      								    								  
58 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 60 LOAD_CONST 1 ( 1 )				      								    								  
62 LOAD_FAST 3 ( dict )					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_SUBSCR						      								    								  
72 JUMP_ABSOLUTE 18					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 SETUP_LOOP 60 ( to 138 )			      								    								  
78 LOAD_GLOBAL 0 ( range )				      								    								  
80 LOAD_FAST 1 ( size )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 48 ( to 136 )				      								    								  
88 STORE_FAST 5 ( i )					      								    								  
							      								    								  
10 90 LOAD_FAST 3 ( dict )				      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 COMPARE_OP 4 ( > )					      								    								  
104 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
11 106 JUMP_ABSOLUTE 86					      								    								  
108 JUMP_FORWARD 8 ( to 118 )				      								    								  
							      								    								  
13 >> 110 LOAD_FAST 2 ( KthIndex )			      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 STORE_FAST 2 ( KthIndex )				      								    								  
							      								    								  
14 >> 118 LOAD_FAST 2 ( KthIndex )			      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 86				      								    								  
							      								    								  
15 126 LOAD_FAST 0 ( arr )				      								    								  
128 LOAD_FAST 5 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 RETURN_VALUE					      								    								  
134 JUMP_ABSOLUTE 86					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
16 >> 138 LOAD_CONST 3 ( - 1 )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC		  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC
--							      --							    --								  --
Disassembly of <code object minimumflip at 0x7fbac0e8de40, fi def minimumflip ( mat , n ) :				    def minimumflip ( mat , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  transpose = [ [ 0 ] * n ] * n				    	transpose = [ 0 ] * n					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.test/MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_
4 LOAD_FAST 1 ( n )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  SYMMETRIC.py", line 40     return int ( flip / 2 )
6 BINARY_MULTIPLY					      		  transpose [ i ] [ j ] = mat [ j ] [ i ]	    		transpose [ i ] [ j ] = mat [ j ] [ i ]		       ^ SyntaxError: 'return' outside function
8 BUILD_LIST 1						      	  flip = 0						    	flip = 0						  
10 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
12 BINARY_MULTIPLY					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
14 STORE_FAST 2 ( transpose )				      		  if transpose [ i ] [ j ] != mat [ i ] [ j ] :	    		if transpose [ i ] [ j ] != mat [ i ] [ j ] :	  
							      		      flip += 1					    		    flip += 1					  
3 16 SETUP_LOOP 54 ( to 72 )				      	  return int ( flip / 2 )				    return int ( flip / 2 )					  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 42 ( to 70 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 30 SETUP_LOOP 36 ( to 68 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 24 ( to 66 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( mat )				      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 2 ( transpose )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 40					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 JUMP_ABSOLUTE 26					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_CONST 1 ( 0 )				      								    								  
74 STORE_FAST 5 ( flip )				      								    								  
							      								    								  
7 76 SETUP_LOOP 66 ( to 144 )				      								    								  
78 LOAD_GLOBAL 0 ( range )				      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 54 ( to 142 )				      								    								  
88 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 90 SETUP_LOOP 48 ( to 140 )				      								    								  
92 LOAD_GLOBAL 0 ( range )				      								    								  
94 LOAD_FAST 1 ( n )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 36 ( to 138 )				      								    								  
102 STORE_FAST 4 ( j )					      								    								  
							      								    								  
9 104 LOAD_FAST 2 ( transpose )				      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 4 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 3 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 4 ( j )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 COMPARE_OP 3 ( != )					      								    								  
126 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
10 128 LOAD_FAST 5 ( flip )				      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 5 ( flip )				      								    								  
136 JUMP_ABSOLUTE 100					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 JUMP_ABSOLUTE 86					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
11 >> 144 LOAD_GLOBAL 1 ( int )				      								    								  
146 LOAD_FAST 5 ( flip )				      								    								  
148 LOAD_CONST 3 ( 2 )					      								    								  
150 BINARY_TRUE_DIVIDE					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_SPECIFIC_PAIR_IN_MATRIX				      FIND_A_SPECIFIC_PAIR_IN_MATRIX				    FIND_A_SPECIFIC_PAIR_IN_MATRIX				  FIND_A_SPECIFIC_PAIR_IN_MATRIX
--							      --							    --								  --
Disassembly of <code object findMaxValue at 0x7fbac0e8bc90, f def findMaxValue ( mat ) :				    def findMaxValue ( mat ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxValue = 0						    	maxValue = 0						  
2 STORE_FAST 1 ( maxValue )				      	  for a in range ( N - 1 ) :				    	for a in range ( N - 1 ) :				  
							      	      for b in range ( N - 1 ) :			    	    for b in range ( N - 1 ) :				  
3 4 SETUP_LOOP 150 ( to 156 )				      		  for d in range ( a + 1 , N ) :		    		for d in range ( a + 1 , N ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      for e in range ( b + 1 , N ) :		    		    for e in range ( b + 1 , N ) :		  
8 LOAD_GLOBAL 1 ( N )					      			  if maxValue < int ( mat [ d ] [ e ] - mat 			if maxValue < int ( mat [ d ] [ e ] - mat 
10 LOAD_CONST 2 ( 1 )					      			      maxValue = int ( mat [ d ] [ e ] - ma 			    maxValue = int ( mat [ d ] [ e ] - ma 
12 BINARY_SUBTRACT					      	  return maxValue ;					    return maxValue						  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 134 ( to 154 )				      								    								  
20 STORE_FAST 2 ( a )					      								    								  
							      								    								  
4 22 SETUP_LOOP 128 ( to 152 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_GLOBAL 1 ( N )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 112 ( to 150 )				      								    								  
38 STORE_FAST 3 ( b )					      								    								  
							      								    								  
5 40 SETUP_LOOP 106 ( to 148 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 2 ( a )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_GLOBAL 1 ( N )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 88 ( to 146 )				      								    								  
58 STORE_FAST 4 ( d )					      								    								  
							      								    								  
6 60 SETUP_LOOP 82 ( to 144 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_FAST 3 ( b )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_GLOBAL 1 ( N )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 64 ( to 142 )				      								    								  
78 STORE_FAST 5 ( e )					      								    								  
							      								    								  
7 80 LOAD_FAST 1 ( maxValue )				      								    								  
82 LOAD_GLOBAL 2 ( int )				      								    								  
84 LOAD_FAST 0 ( mat )					      								    								  
86 LOAD_FAST 4 ( d )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 5 ( e )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( mat )					      								    								  
96 LOAD_FAST 2 ( a )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 3 ( b )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 76				      								    								  
							      								    								  
8 112 LOAD_GLOBAL 2 ( int )				      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 4 ( d )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 5 ( e )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 0 ( mat )					      								    								  
126 LOAD_FAST 2 ( a )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 3 ( b )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 CALL_FUNCTION 1					      								    								  
138 STORE_FAST 1 ( maxValue )				      								    								  
140 JUMP_ABSOLUTE 76					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 JUMP_ABSOLUTE 56					      								    								  
>> 146 POP_BLOCK					      								    								  
>> 148 JUMP_ABSOLUTE 36					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 JUMP_ABSOLUTE 18					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
9 >> 156 LOAD_FAST 1 ( maxValue )			      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN
--							      --							    --								  --
Disassembly of <code object findMinInsertions at 0x7fbac0e8bc def findMinInsertions ( str , l , h ) :			    def findMinInsertions ( str , l , h ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( l )					      	  if ( l > h ) :					    	if l > h :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 2 ( h )					      	      return sys.maxsize				    	    return sys.maxsize					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/DYNAMI
4 COMPARE_OP 4 ( > )					      	  if ( l == h ) :					    	elif l == h :						  C_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_
6 POP_JUMP_IF_FALSE 14					      	      return 0						    	    return 0						  PALINDROME.py", line 61, in <module>	   if f_fill
							      	  if ( l == h - 1 ) :					    	elif l == h - 1 :					  ed(*parameters_set) == f_gold(*parameters_set):
3 8 LOAD_GLOBAL 0 ( sys )				      	      return 0 if ( str [ l ] == str [ h ] ) else 1	    	    if str [ l ] == str [ h ] : return 0		  File "/home/ubuntu/TransCoder/models/eval/mt_sa_10
10 LOAD_ATTR 1 ( maxsize )				      	  if ( str [ l ] == str [ h ] ) :			    	else :							  00/tx8nnsvsdt/eval_scripts/dis_sa-python_sa.test/D
12 RETURN_VALUE						      	      return findMinInsertions ( str , l + 1 , h - 1 )	    	    if str [ l ] == str [ h ] :				  YNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FO
							      	  else :						    		return findMinInsertions ( str , l + 1 , h - 1 )  RM_A_PALINDROME.py", line 43, in f_filled	retu
4 >> 14 LOAD_FAST 1 ( l )				      	      return ( min ( findMinInsertions ( str , l , h - 1 )  	    else :						  rn min ( f_filled ( str , l , h - 1 ) , f_filled (
16 LOAD_FAST 2 ( h )					      								    		return min ( findMinInsertions ( str , l , h - 1   str , l + 1 , h ) ) + 1   File "/home/ubuntu/Tran
18 COMPARE_OP 2 ( == )					      								    								  sCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scri
20 POP_JUMP_IF_FALSE 26					      								    								  pts/dis_sa-python_sa.test/DYNAMIC_PROGRAMMING_SET_
							      								    								  28_MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME.py", li
5 22 LOAD_CONST 1 ( 0 )					      								    								  ne 43, in f_filled	 return min ( f_filled ( str
24 RETURN_VALUE						      								    								   , l , h - 1 ) , f_filled ( str , l + 1 , h ) ) +
							      								    								  1 TypeError: '<' not supported between instances o
6 >> 26 LOAD_FAST 1 ( l )				      								    								  f 'NoneType' and 'NoneType'
28 LOAD_FAST 2 ( h )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( str )				      								    								  
40 LOAD_FAST 1 ( l )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( str )					      								    								  
46 LOAD_FAST 2 ( h )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 RETURN_VALUE						      								    								  
>> 58 LOAD_CONST 2 ( 1 )				      								    								  
60 RETURN_VALUE						      								    								  
							      								    								  
8 >> 62 LOAD_FAST 0 ( str )				      								    								  
64 LOAD_FAST 1 ( l )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( str )					      								    								  
70 LOAD_FAST 2 ( h )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
9 78 LOAD_GLOBAL 2 ( findMinInsertions )		      								    								  
80 LOAD_FAST 0 ( str )					      								    								  
82 LOAD_FAST 1 ( l )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_FAST 2 ( h )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 CALL_FUNCTION 3					      								    								  
96 RETURN_VALUE						      								    								  
							      								    								  
11 >> 98 LOAD_GLOBAL 3 ( min )				      								    								  
100 LOAD_GLOBAL 2 ( findMinInsertions )			      								    								  
102 LOAD_FAST 0 ( str )					      								    								  
104 LOAD_FAST 1 ( l )					      								    								  
106 LOAD_FAST 2 ( h )					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 CALL_FUNCTION 3					      								    								  
114 LOAD_GLOBAL 2 ( findMinInsertions )			      								    								  
116 LOAD_FAST 0 ( str )					      								    								  
118 LOAD_FAST 1 ( l )					      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 BINARY_ADD						      								    								  
124 LOAD_FAST 2 ( h )					      								    								  
126 CALL_FUNCTION 3					      								    								  
128 CALL_FUNCTION 2					      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 RETURN_VALUE					      								    								  
136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K     GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	    GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	  GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K
--							      --							    --								  --
Disassembly of <code object printSumSimple at 0x7fbac0e89d20, def printSumSimple ( mat , k ) :				    def printSumSimple ( mat , k ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k > n ) :					    	if k > n :						  
2 LOAD_GLOBAL 0 ( n )					      	      return						    	    return						  
4 COMPARE_OP 4 ( > )					      	  for i in range ( n - k + 1 ) :			    	for i in range ( n - k + 1 ) :				  
6 POP_JUMP_IF_FALSE 12					      	      for j in range ( n - k + 1 ) :			    	    for j in range ( n - k + 1 ) :			  
							      		  sum = 0					    		sum = 0						  
3 8 LOAD_CONST 0 ( None )				      		  for p in range ( i , k + i ) :		    		for p in range ( i , k + i ) :			  
10 RETURN_VALUE						      		      for q in range ( j , k + j ) :		    		    for q in range ( j , k + j ) :		  
							      			  sum += mat [ p ] [ q ]		    			sum += mat [ p ] [ q ]			  
4 >> 12 SETUP_LOOP 136 ( to 150 )			      		  print ( sum , end = " " )			    	    print ( sum , end = " " )				  
14 LOAD_GLOBAL 1 ( range )				      	      print ( )						    print ( )							  
16 LOAD_GLOBAL 0 ( n )					      								    								  
18 LOAD_FAST 1 ( k )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 116 ( to 148 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 34 SETUP_LOOP 104 ( to 140 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_GLOBAL 0 ( n )					      								    								  
40 LOAD_FAST 1 ( k )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 84 ( to 138 )				      								    								  
54 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 56 LOAD_CONST 2 ( 0 )					      								    								  
58 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
7 60 SETUP_LOOP 62 ( to 124 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_FAST 1 ( k )					      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_ADD						      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 44 ( to 122 )				      								    								  
78 STORE_FAST 5 ( p )					      								    								  
							      								    								  
8 80 SETUP_LOOP 38 ( to 120 )				      								    								  
82 LOAD_GLOBAL 1 ( range )				      								    								  
84 LOAD_FAST 3 ( j )					      								    								  
86 LOAD_FAST 1 ( k )					      								    								  
88 LOAD_FAST 3 ( j )					      								    								  
90 BINARY_ADD						      								    								  
92 CALL_FUNCTION 2					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 20 ( to 118 )				      								    								  
98 STORE_FAST 6 ( q )					      								    								  
							      								    								  
9 100 LOAD_FAST 4 ( sum )				      								    								  
102 LOAD_FAST 0 ( mat )					      								    								  
104 LOAD_FAST 5 ( p )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 6 ( q )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( sum )				      								    								  
116 JUMP_ABSOLUTE 96					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 76					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
10 >> 124 LOAD_GLOBAL 2 ( print )			      								    								  
126 LOAD_FAST 4 ( sum )					      								    								  
128 LOAD_CONST 3 ( ' ' )				      								    								  
130 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
136 JUMP_ABSOLUTE 52					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
11 >> 140 LOAD_GLOBAL 2 ( print )			      								    								  
142 CALL_FUNCTION 0					      								    								  
144 POP_TOP						      								    								  
146 JUMP_ABSOLUTE 30					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_PRIME_FACTOR_GIVEN_NUMBER				      K_TH_PRIME_FACTOR_GIVEN_NUMBER				    K_TH_PRIME_FACTOR_GIVEN_NUMBER				  K_TH_PRIME_FACTOR_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object kPrimeFactor at 0x7fbac0e8bc90, f def kPrimeFactor ( n , k ) :				    def kPrimeFactor ( n ) :					  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 44 ( to 46 )				      	  while ( n % 2 == 0 ) :				    	while n % 2 == 0 :					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
>> 2 LOAD_FAST 0 ( n )					      	      k = k - 1						    	    k = ( k - 1 )					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/K_TH_P
4 LOAD_CONST 1 ( 2 )					      	      n = n / 2						    	    n = n / 2						  RIME_FACTOR_GIVEN_NUMBER.py", line 72, in <module>
6 BINARY_MODULO						      	      if ( k == 0 ) :					    	    if k == 0 :						       if f_filled(*parameters_set) == f_gold(*param
8 LOAD_CONST 2 ( 0 )					      		  return 2					    		return 2					  eters_set): TypeError: f_filled() takes 1 position
10 COMPARE_OP 2 ( == )					      	  i = 3							    	i = 3							  al argument but 2 were given
12 POP_JUMP_IF_FALSE 44					      	  while i <= math.sqrt ( n ) :				    	while i <= math.sqrt ( n ) :				  
							      	      while ( n % i == 0 ) :				    	    while n % i == 0 :					  
3 14 LOAD_FAST 1 ( k )					      		  if ( k == 1 ) :				    		if k == 1 :					  
16 LOAD_CONST 3 ( 1 )					      		      return i					    		    return i					  
18 BINARY_SUBTRACT					      		  k = k - 1					    		k = ( k - 1 )					  
20 STORE_FAST 1 ( k )					      		  n = n / i					    		n = n / i					  
							      	      i = i + 2						    	    i = ( i + 2 )					  
4 22 LOAD_FAST 0 ( n )					      	  if ( n > 2 and k == 1 ) :				    	if n > 2 and k == 1 :					  
24 LOAD_CONST 1 ( 2 )					      	      return n						    	    return n						  
26 BINARY_TRUE_DIVIDE					      	  return - 1						    	return - 1						  
28 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( k )					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 2					      								    								  
							      								    								  
6 38 LOAD_CONST 1 ( 2 )					      								    								  
40 RETURN_VALUE						      								    								  
42 JUMP_ABSOLUTE 2					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_CONST 4 ( 3 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 50 SETUP_LOOP 72 ( to 124 )				      								    								  
>> 52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_GLOBAL 0 ( math )				      								    								  
56 LOAD_METHOD 1 ( sqrt )				      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 CALL_METHOD 1					      								    								  
62 COMPARE_OP 1 ( <= )					      								    								  
64 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
9 66 SETUP_LOOP 44 ( to 112 )				      								    								  
>> 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 2 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
10 80 LOAD_FAST 1 ( k )					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( i )					      								    								  
90 RETURN_VALUE						      								    								  
							      								    								  
12 >> 92 LOAD_FAST 1 ( k )				      								    								  
94 LOAD_CONST 3 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 1 ( k )					      								    								  
							      								    								  
13 100 LOAD_FAST 0 ( n )				      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 BINARY_TRUE_DIVIDE					      								    								  
106 STORE_FAST 0 ( n )					      								    								  
108 JUMP_ABSOLUTE 68					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
14 >> 112 LOAD_FAST 2 ( i )				      								    								  
114 LOAD_CONST 1 ( 2 )					      								    								  
116 BINARY_ADD						      								    								  
118 STORE_FAST 2 ( i )					      								    								  
120 JUMP_ABSOLUTE 52					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
15 >> 124 LOAD_FAST 0 ( n )				      								    								  
126 LOAD_CONST 1 ( 2 )					      								    								  
128 COMPARE_OP 4 ( > )					      								    								  
130 POP_JUMP_IF_FALSE 144				      								    								  
132 LOAD_FAST 1 ( k )					      								    								  
134 LOAD_CONST 3 ( 1 )					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
16 140 LOAD_FAST 0 ( n )				      								    								  
142 RETURN_VALUE					      								    								  
							      								    								  
17 >> 144 LOAD_CONST 5 ( - 1 )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE					      RECAMANS_SEQUENCE						    RECAMANS_SEQUENCE						  RECAMANS_SEQUENCE
--							      --							    --								  --
Disassembly of <code object recaman at 0x7fbac0e8bc90, file " def recaman ( n ) :					    def recaman ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  arr = [ 0 ] * n					    	arr = [ 0 ] * n						  
2 BUILD_LIST 1						      	  arr [ 0 ] = 0						    	arr [ 0 ] = 0						  
4 LOAD_FAST 0 ( n )					      	  print ( arr [ 0 ] , end = ", " )			    	print ( arr [ 0 ] , end = ', ' )			  
6 BINARY_MULTIPLY					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 STORE_FAST 1 ( arr )					      	      curr = arr [ i - 1 ] - i				    	    curr = arr [ i - 1 ] - i				  
							      	      for j in range ( 0 , i ) :			    	    for j in range ( 0 , i ) :				  
3 10 LOAD_CONST 1 ( 0 )					      		  if ( ( arr [ j ] == curr ) or curr < 0 ) :	    		if arr [ j ] == curr or curr < 0 :		  
12 LOAD_FAST 1 ( arr )					      		      curr = arr [ i - 1 ] + i			    		    curr = arr [ i - 1 ] + i			  
14 LOAD_CONST 1 ( 0 )					      		      break					    		    break					  
16 STORE_SUBSCR						      	      arr [ i ] = curr					    	arr [ i ] = curr					  
							      	      print ( arr [ i ] , end = ", " )			    	print ( arr [ i ] , end = ', ' )			  
4 18 LOAD_GLOBAL 0 ( print )				      								    								  
20 LOAD_FAST 1 ( arr )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 2 ( ', ' )				      								    								  
28 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
30 CALL_FUNCTION_KW 2					      								    								  
32 POP_TOP						      								    								  
							      								    								  
5 34 SETUP_LOOP 116 ( to 152 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 102 ( to 150 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 50 LOAD_FAST 1 ( arr )				      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_CONST 4 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 STORE_FAST 3 ( curr )				      								    								  
							      								    								  
7 66 SETUP_LOOP 56 ( to 124 )				      								    								  
68 LOAD_GLOBAL 1 ( range )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 42 ( to 122 )				      								    								  
80 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 82 LOAD_FAST 1 ( arr )				      								    								  
84 LOAD_FAST 4 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 3 ( curr )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_TRUE 102					      								    								  
94 LOAD_FAST 3 ( curr )					      								    								  
96 LOAD_CONST 1 ( 0 )					      								    								  
98 COMPARE_OP 0 ( < )					      								    								  
100 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
9 >> 102 LOAD_FAST 1 ( arr )				      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 LOAD_CONST 4 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 2 ( i )					      								    								  
114 BINARY_ADD						      								    								  
116 STORE_FAST 3 ( curr )				      								    								  
							      								    								  
10 118 BREAK_LOOP					      								    								  
120 JUMP_ABSOLUTE 78					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
11 >> 124 LOAD_FAST 3 ( curr )				      								    								  
126 LOAD_FAST 1 ( arr )					      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
12 132 LOAD_GLOBAL 0 ( print )				      								    								  
134 LOAD_FAST 1 ( arr )					      								    								  
136 LOAD_FAST 2 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_CONST 2 ( ', ' )				      								    								  
142 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
144 CALL_FUNCTION_KW 2					      								    								  
146 POP_TOP						      								    								  
148 JUMP_ABSOLUTE 46					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 LOAD_CONST 0 ( None )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO			    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO
--							      --							    --								  --
Disassembly of <code object findTriplets at 0x7fbac0e8de40, f def findTriplets ( arr , n ) :				    def findTriplets ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( True )				      	  found = True						    	found = True						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 2 ( found )				      	  for i in range ( 0 , n - 2 ) :			    	for i in range ( 0 , n - 2 ) :				  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/FIND_T
							      	      for j in range ( i + 1 , n - 1 ) :		    	    for j in range ( i + 1 , n - 1 ) :			  RIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO.py", line 37, i
3 4 SETUP_LOOP 130 ( to 136 )				      		  for k in range ( j + 1 , n ) :		    		for k in range ( j + 1 , n ) :			  n <module>	 if found == False : NameError: name
6 LOAD_GLOBAL 0 ( range )				      		      if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) 		    if arr [ i ] + arr [ j ] + arr [ k ] == 0 :	   'found' is not defined
8 LOAD_CONST 2 ( 0 )					      			  print ( arr [ i ] , arr [ j ] , arr [ k ] 			print ( arr [ i ] , arr [ j ] , arr [ k ] 
10 LOAD_FAST 1 ( n )					      			  found = True				    			found = True				  
12 LOAD_CONST 3 ( 2 )					      	  if ( found == False ) :				    if found == False :						  
14 BINARY_SUBTRACT					      	      print ( " not exist " )				    	print ( " not exist " )					  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 112 ( to 134 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 106 ( to 132 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 LOAD_CONST 4 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_CONST 4 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 84 ( to 130 )				      								    								  
46 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 48 SETUP_LOOP 78 ( to 128 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 LOAD_CONST 4 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 60 ( to 126 )				      								    								  
66 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 4 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 5 ( k )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_CONST 2 ( 0 )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 96 LOAD_GLOBAL 1 ( print )				      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 4 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 0 ( arr )					      								    								  
112 LOAD_FAST 5 ( k )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 CALL_FUNCTION 3					      								    								  
118 POP_TOP						      								    								  
							      								    								  
8 120 LOAD_CONST 1 ( True )				      								    								  
122 STORE_FAST 2 ( found )				      								    								  
124 JUMP_ABSOLUTE 64					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 JUMP_ABSOLUTE 44					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 JUMP_ABSOLUTE 20					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
9 >> 136 LOAD_FAST 2 ( found )				      								    								  
138 LOAD_CONST 5 ( False )				      								    								  
140 COMPARE_OP 2 ( == )					      								    								  
142 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
10 144 LOAD_GLOBAL 1 ( print )				      								    								  
146 LOAD_CONST 6 ( ' not exist ' )			      								    								  
148 CALL_FUNCTION 1					      								    								  
150 POP_TOP						      								    								  
>> 152 LOAD_CONST 0 ( None )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		      COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		    COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		  COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE
--							      --							    --								  --
Disassembly of <code object printRect at 0x7fbac0e8de40, file def printRect ( X , Y , n ) :				    def printRect ( X , Y , Z ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  Xmax = max ( X )					    	Xmax = max ( X )					  
2 LOAD_FAST 0 ( X )					      	  Xmin = min ( X )					    	Xmin = min ( X )					  
4 CALL_FUNCTION 1					      	  Ymax = max ( Y )					    	Ymax = max ( Y )					  
6 STORE_FAST 3 ( Xmax )					      	  Ymin = min ( Y )					    	Ymin = min ( Y )					  
							      	  print ( "{" , Xmin , ", " , Ymin , "}" , sep = "" )	    	print ( '{' , Xmin , ', ' , Ymin , '}' , sep = '' )	  
3 8 LOAD_GLOBAL 1 ( min )				      	  print ( "{" , Xmin , ", " , Ymax , "}" , sep = "" )	    	print ( '{' , Xmin , ', ' , Ymax , sep = '}' , sep = '' ) 
10 LOAD_FAST 0 ( X )					      	  print ( "{" , Xmax , ", " , Ymax , "}" , sep = "" )	    	print ( '{' , Xmax , ', ' , Ymax , sep = '}' , sep = '' ) 
12 CALL_FUNCTION 1					      	  print ( "{" , Xmax , ", " , Ymin , "}" , sep = "" )	    	print ( '{' , Xmax , ', ' , Ymin , sep = '}' , sep = '' ) 
14 STORE_FAST 4 ( Xmin )				      								    								  
							      								    								  
4 16 LOAD_GLOBAL 0 ( max )				      								    								  
18 LOAD_FAST 1 ( Y )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 STORE_FAST 5 ( Ymax )				      								    								  
							      								    								  
5 24 LOAD_GLOBAL 1 ( min )				      								    								  
26 LOAD_FAST 1 ( Y )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 STORE_FAST 6 ( Ymin )				      								    								  
							      								    								  
6 32 LOAD_GLOBAL 2 ( print )				      								    								  
34 LOAD_CONST 1 ( '{' )					      								    								  
36 LOAD_FAST 4 ( Xmin )					      								    								  
38 LOAD_CONST 2 ( ', ' )				      								    								  
40 LOAD_FAST 6 ( Ymin )					      								    								  
42 LOAD_CONST 3 ( '}' )					      								    								  
44 LOAD_CONST 4 ( '' )					      								    								  
46 LOAD_CONST 5 ( ( 'sep' , ) )				      								    								  
48 CALL_FUNCTION_KW 6					      								    								  
50 POP_TOP						      								    								  
							      								    								  
7 52 LOAD_GLOBAL 2 ( print )				      								    								  
54 LOAD_CONST 1 ( '{' )					      								    								  
56 LOAD_FAST 4 ( Xmin )					      								    								  
58 LOAD_CONST 2 ( ', ' )				      								    								  
60 LOAD_FAST 5 ( Ymax )					      								    								  
62 LOAD_CONST 3 ( '}' )					      								    								  
64 LOAD_CONST 4 ( '' )					      								    								  
66 LOAD_CONST 5 ( ( 'sep' , ) )				      								    								  
68 CALL_FUNCTION_KW 6					      								    								  
70 POP_TOP						      								    								  
							      								    								  
8 72 LOAD_GLOBAL 2 ( print )				      								    								  
74 LOAD_CONST 1 ( '{' )					      								    								  
76 LOAD_FAST 3 ( Xmax )					      								    								  
78 LOAD_CONST 2 ( ', ' )				      								    								  
80 LOAD_FAST 5 ( Ymax )					      								    								  
82 LOAD_CONST 3 ( '}' )					      								    								  
84 LOAD_CONST 4 ( '' )					      								    								  
86 LOAD_CONST 5 ( ( 'sep' , ) )				      								    								  
88 CALL_FUNCTION_KW 6					      								    								  
90 POP_TOP						      								    								  
							      								    								  
9 92 LOAD_GLOBAL 2 ( print )				      								    								  
94 LOAD_CONST 1 ( '{' )					      								    								  
96 LOAD_FAST 3 ( Xmax )					      								    								  
98 LOAD_CONST 2 ( ', ' )				      								    								  
100 LOAD_FAST 6 ( Ymin )				      								    								  
102 LOAD_CONST 3 ( '}' )				      								    								  
104 LOAD_CONST 4 ( '' )					      								    								  
106 LOAD_CONST 5 ( ( 'sep' , ) )			      								    								  
108 CALL_FUNCTION_KW 6					      								    								  
110 POP_TOP						      								    								  
112 LOAD_CONST 0 ( None )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object diagonalsquare at 0x7fbac0e89d20, def diagonalsquare ( mat , row , column ) :		    def 82 alsquare ( mat , row = 0 , col = 1 ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Diagonal one : " , end = "" )		    	print ( "Diagonal one : " , end = "" )			  
2 LOAD_CONST 1 ( 'Diagonal one : ' )			      	  for i in range ( 0 , row ) :				    	for i in range ( 0 , row ) :				  
4 LOAD_CONST 2 ( '' )					      	      print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = ""  	    print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = ""  
6 LOAD_CONST 3 ( ( 'end' , ) )				      	  print ( "\n\nDiagonal two : " , end = "" )		    	print ( "\nDiagonal two : " , end = "" )		  
8 CALL_FUNCTION_KW 2					      	  for i in range ( 0 , row ) :				    	for i in range ( 0 , row ) :				  
10 POP_TOP						      	      print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - 	    print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - 
							      								    								  
3 12 SETUP_LOOP 50 ( to 64 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 LOAD_FAST 1 ( row )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 0 ( print )				      								    								  
30 LOAD_FAST 0 ( mat )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( mat )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_CONST 2 ( '' )					      								    								  
54 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
56 CALL_FUNCTION_KW 2					      								    								  
58 POP_TOP						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
5 >> 64 LOAD_GLOBAL 0 ( print )				      								    								  
66 LOAD_CONST 5 ( '\n\nDiagonal two : ' )		      								    								  
68 LOAD_CONST 2 ( '' )					      								    								  
70 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
72 CALL_FUNCTION_KW 2					      								    								  
74 POP_TOP						      								    								  
							      								    								  
6 76 SETUP_LOOP 66 ( to 144 )				      								    								  
78 LOAD_GLOBAL 1 ( range )				      								    								  
80 LOAD_CONST 4 ( 0 )					      								    								  
82 LOAD_FAST 1 ( row )					      								    								  
84 CALL_FUNCTION 2					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 52 ( to 142 )				      								    								  
90 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 92 LOAD_GLOBAL 0 ( print )				      								    								  
94 LOAD_FAST 0 ( mat )					      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 1 ( row )					      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 LOAD_CONST 6 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 0 ( mat )					      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_FAST 1 ( row )					      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 LOAD_CONST 6 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 BINARY_SUBSCR					      								    								  
130 BINARY_MULTIPLY					      								    								  
132 LOAD_CONST 2 ( '' )					      								    								  
134 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
136 CALL_FUNCTION_KW 2					      								    								  
138 POP_TOP						      								    								  
140 JUMP_ABSOLUTE 88					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 LOAD_CONST 0 ( None )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY					      FLOOR_IN_A_SORTED_ARRAY					    FLOOR_IN_A_SORTED_ARRAY					  FLOOR_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object floorSearch at 0x7fbac0e8d540, fi def floorSearch ( arr , low , high , x ) :		    def floorSearch ( arr , low , high , x = None ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if ( low > high ) :					    	if low > high :						  
2 LOAD_FAST 2 ( high )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 4 ( > )					      	  if ( x >= arr [ high ] ) :				    	if x >= arr [ high ] :					  
6 POP_JUMP_IF_FALSE 12					      	      return high					    	    return high						  
							      	  mid = int ( ( low + high ) / 2 )			    	mid = int ( low + high / 2 )				  
3 8 LOAD_CONST 1 ( - 1 )				      	  if ( arr [ mid ] == x ) :				    	if arr [ mid ] == x :					  
10 RETURN_VALUE						      	      return mid					    	    return mid						  
							      	  if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 	if mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] : 
4 >> 12 LOAD_FAST 3 ( x )				      	      return mid - 1					    	    return mid - 1					  
14 LOAD_FAST 0 ( arr )					      	  if ( x < arr [ mid ] ) :				    	if x < arr [ mid ] :					  
16 LOAD_FAST 2 ( high )					      	      return floorSearch ( arr , low , mid - 1 , x )	    	    return floorSearch ( arr , low , mid - 1 , x )	  
18 BINARY_SUBSCR					      	  return floorSearch ( arr , mid + 1 , high , x )	    	return floorSearch ( arr , mid + 1 , high , x )		  
20 COMPARE_OP 5 ( >= )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( high )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_GLOBAL 0 ( int )				      								    								  
30 LOAD_FAST 1 ( low )					      								    								  
32 LOAD_FAST 2 ( high )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_CONST 2 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( mid )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( x )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_FAST 4 ( mid )				      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 4 ( mid )				      								    								  
62 LOAD_CONST 3 ( 0 )					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 104				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( mid )					      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 3 ( x )					      								    								  
80 COMPARE_OP 1 ( <= )					      								    								  
82 POP_JUMP_IF_FALSE 104				      								    								  
84 LOAD_FAST 3 ( x )					      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( mid )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 0 ( < )					      								    								  
94 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
10 96 LOAD_FAST 4 ( mid )				      								    								  
98 LOAD_CONST 4 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 RETURN_VALUE					      								    								  
							      								    								  
11 >> 104 LOAD_FAST 3 ( x )				      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 4 ( mid )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
12 116 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 1 ( low )					      								    								  
122 LOAD_FAST 4 ( mid )					      								    								  
124 LOAD_CONST 4 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_FAST 3 ( x )					      								    								  
130 CALL_FUNCTION 4					      								    								  
132 RETURN_VALUE					      								    								  
							      								    								  
13 >> 134 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 4 ( mid )					      								    								  
140 LOAD_CONST 4 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 LOAD_FAST 2 ( high )				      								    								  
146 LOAD_FAST 3 ( x )					      								    								  
148 CALL_FUNCTION 4					      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_1		      FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_1		    FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_1		  FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object minDist at 0x7fbac0e8de40, file " def minDist ( arr , n , x , y ) :				    def minDist ( arr , n , x , y ) :				  timeout : None
2 0 LOAD_GLOBAL 0 ( sys )				      	  min_dist = sys.maxsize				    	min_dist = sys.maxsize					  
2 LOAD_ATTR 1 ( maxsize )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 4 ( min_dist )				      	      if arr [ i ] == x or arr [ i ] == y :		    	    if arr [ i ] == x or arr [ i ] == y :		  
							      		  prev = i					    		prev = i					  
3 6 SETUP_LOOP 46 ( to 54 )				      		  break						    		break						  
8 LOAD_GLOBAL 2 ( range )				      	  while i < n :						    	while i < n :						  
10 LOAD_FAST 1 ( n )					      	      if arr [ i ] == x or arr [ i ] == y :		    	    if arr [ i ] == x or arr [ i ] == y :		  
12 CALL_FUNCTION 1					      		  if arr [ prev ] != arr [ i ] and ( i - prev ) < m 		if arr [ prev ] != arr [ i ] and i - prev < min_d 
14 GET_ITER						      		      min_dist = i - prev			    		    min_dist = i - prev				  
>> 16 FOR_ITER 34 ( to 52 )				      		      prev = i					    		    prev = i					  
18 STORE_FAST 5 ( i )					      		  else :					    		else :						  
							      		      prev = i					    		    prev = i					  
4 20 LOAD_FAST 0 ( arr )				      	      i += 1						    		i += 1						  
22 LOAD_FAST 5 ( i )					      	  return min_dist					    	return min_dist						  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_TRUE 44					      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 3 ( y )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 >> 44 LOAD_FAST 5 ( i )				      								    								  
46 STORE_FAST 6 ( prev )				      								    								  
							      								    								  
6 48 BREAK_LOOP						      								    								  
50 JUMP_ABSOLUTE 16					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 SETUP_LOOP 90 ( to 146 )			      								    								  
>> 56 LOAD_FAST 5 ( i )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
8 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 2 ( x )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_TRUE 88					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 3 ( y )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
9 >> 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 6 ( prev )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 5 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 130				      								    								  
104 LOAD_FAST 5 ( i )					      								    								  
106 LOAD_FAST 6 ( prev )				      								    								  
108 BINARY_SUBTRACT					      								    								  
110 LOAD_FAST 4 ( min_dist )				      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
10 116 LOAD_FAST 5 ( i )				      								    								  
118 LOAD_FAST 6 ( prev )				      								    								  
120 BINARY_SUBTRACT					      								    								  
122 STORE_FAST 4 ( min_dist )				      								    								  
							      								    								  
11 124 LOAD_FAST 5 ( i )				      								    								  
126 STORE_FAST 6 ( prev )				      								    								  
128 JUMP_FORWARD 4 ( to 134 )				      								    								  
							      								    								  
13 >> 130 LOAD_FAST 5 ( i )				      								    								  
132 STORE_FAST 6 ( prev )				      								    								  
							      								    								  
14 >> 134 LOAD_FAST 5 ( i )				      								    								  
136 LOAD_CONST 1 ( 1 )					      								    								  
138 INPLACE_ADD						      								    								  
140 STORE_FAST 5 ( i )					      								    								  
142 JUMP_ABSOLUTE 56					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
15 >> 146 LOAD_FAST 4 ( min_dist )			      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1      FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1	    FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1	  FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1
--							      --							    --								  --
Disassembly of <code object isSubset at 0x7fbac0e8d540, file  def isSubset ( arr1 , arr2 , m , n ) :			    def isSubset ( arr1 , arr2 , m , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 4 ( i )					      	  j = 0							    	j = 0							  _sa.test/FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHE
							      	  if m < n :						    	if m < n :						  R_ARRAY_SET_1_1.py", line 50	   if i < n : return
3 4 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						   False	       ^ SyntaxError: 'return' outsi
6 STORE_FAST 5 ( j )					      	  arr1.sort ( )						    	arr1.sort ( )						  de function
							      	  arr2.sort ( )						    	arr2.sort ( )						  
4 8 LOAD_FAST 2 ( m )					      	  while i < n and j < m :				    	while i < n and j < m :					  
10 LOAD_FAST 3 ( n )					      	      if arr1 [ j ] < arr2 [ i ] :			    	    if arr1 [ j ] < arr2 [ i ] :			  
12 COMPARE_OP 0 ( < )					      		  j += 1					    		j += 1						  
14 POP_JUMP_IF_FALSE 20					      	      elif arr1 [ j ] == arr2 [ i ] :			    	    elif arr1 [ j ] == arr2 [ i ] :			  
							      		  j += 1					    		j += 1						  
5 16 LOAD_CONST 1 ( 0 )					      		  i += 1					    		i += 1						  
18 RETURN_VALUE						      	      elif arr1 [ j ] > arr2 [ i ] :			    	    elif arr1 [ j ] > arr2 [ i ] :			  
							      		  return 0					    		return 0					  
6 >> 20 LOAD_FAST 0 ( arr1 )				      	  return False if i < n else True			    if i < n : return False					  
22 LOAD_METHOD 0 ( sort )				      								    								  
24 CALL_METHOD 0					      								    								  
26 POP_TOP						      								    								  
							      								    								  
7 28 LOAD_FAST 1 ( arr2 )				      								    								  
30 LOAD_METHOD 0 ( sort )				      								    								  
32 CALL_METHOD 0					      								    								  
34 POP_TOP						      								    								  
							      								    								  
8 36 SETUP_LOOP 100 ( to 138 )				      								    								  
>> 38 LOAD_FAST 4 ( i )					      								    								  
40 LOAD_FAST 3 ( n )					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 136				      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 LOAD_FAST 2 ( m )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
9 54 LOAD_FAST 0 ( arr1 )				      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( arr2 )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 0 ( < )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 70 LOAD_FAST 5 ( j )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 5 ( j )					      								    								  
78 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 0 ( arr1 )				      								    								  
82 LOAD_FAST 5 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 1 ( arr2 )					      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
12 96 LOAD_FAST 5 ( j )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 104 LOAD_FAST 4 ( i )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 4 ( i )					      								    								  
112 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
14 >> 114 LOAD_FAST 0 ( arr1 )				      								    								  
116 LOAD_FAST 5 ( j )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 1 ( arr2 )				      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 COMPARE_OP 4 ( > )					      								    								  
128 POP_JUMP_IF_FALSE 38				      								    								  
							      								    								  
15 130 LOAD_CONST 1 ( 0 )				      								    								  
132 RETURN_VALUE					      								    								  
134 JUMP_ABSOLUTE 38					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
16 >> 138 LOAD_FAST 4 ( i )				      								    								  
140 LOAD_FAST 3 ( n )					      								    								  
142 COMPARE_OP 0 ( < )					      								    								  
144 POP_JUMP_IF_FALSE 150				      								    								  
146 LOAD_CONST 3 ( False )				      								    								  
148 RETURN_VALUE					      								    								  
>> 150 LOAD_CONST 4 ( True )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY_1	      COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY_1		    COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY_1		  COUNT_INVERSIONS_OF_SIZE_<unk> IN_A_GIVE_ARRAY_1
--							      --							    --								  --
Disassembly of <code object getInvCount at 0x7fbac0e89d20, fi def getInvCount ( arr , n ) :				    def getInvCount ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  invcount = 0						    	invcount = 0						  
2 STORE_FAST 2 ( invcount )				      	  for i in range ( 1 , n - 1 ) :			    	for i in range ( 1 , n - 1 ) :				  
							      	      small = 0						    	    small = 0						  
3 4 SETUP_LOOP 140 ( to 146 )				      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
6 LOAD_GLOBAL 0 ( range )				      		  if ( arr [ i ] > arr [ j ] ) :		    		if arr [ i ] > arr [ j ] :			  
8 LOAD_CONST 2 ( 1 )					      		      small += 1				    		    small += 1					  
10 LOAD_FAST 1 ( n )					      	      great = 0 ;					    	    great = 0						  
12 LOAD_CONST 2 ( 1 )					      	      for j in range ( i - 1 , - 1 , - 1 ) :		    	    for j in range ( i - 1 , - 1 , - 1 ) :		  
14 BINARY_SUBTRACT					      		  if ( arr [ i ] < arr [ j ] ) :		    		if arr [ i ] < arr [ j ] :			  
16 CALL_FUNCTION 2					      		      great += 1				    		    great += 1					  
18 GET_ITER						      	      invcount += great * small				    	    invcount += great * small				  
>> 20 FOR_ITER 122 ( to 144 )				      	  return invcount					    	return invcount						  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 4 ( small )				      								    								  
							      								    								  
5 28 SETUP_LOOP 46 ( to 76 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 28 ( to 74 )				      								    								  
46 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 4 ( > )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 64 LOAD_FAST 4 ( small )				      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 4 ( small )				      								    								  
72 JUMP_ABSOLUTE 44					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_CONST 1 ( 0 )				      								    								  
78 STORE_FAST 6 ( great )				      								    								  
							      								    								  
9 80 SETUP_LOOP 48 ( to 130 )				      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 3 ( - 1 )					      								    								  
92 LOAD_CONST 3 ( - 1 )					      								    								  
94 CALL_FUNCTION 3					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 28 ( to 128 )				      								    								  
100 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 102 LOAD_FAST 0 ( arr )				      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 5 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 COMPARE_OP 0 ( < )					      								    								  
116 POP_JUMP_IF_FALSE 98				      								    								  
							      								    								  
11 118 LOAD_FAST 6 ( great )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 6 ( great )				      								    								  
126 JUMP_ABSOLUTE 98					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
12 >> 130 LOAD_FAST 2 ( invcount )			      								    								  
132 LOAD_FAST 6 ( great )				      								    								  
134 LOAD_FAST 4 ( small )				      								    								  
136 BINARY_MULTIPLY					      								    								  
138 INPLACE_ADD						      								    								  
140 STORE_FAST 2 ( invcount )				      								    								  
142 JUMP_ABSOLUTE 20					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
13 >> 146 LOAD_FAST 2 ( invcount )			      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_<unk> S_KN<unk>				      POSSIBLE_<unk> S_KN<unk>					    POSSIBLE_<unk> S_KN<unk>					  POSSIBLE_<unk> S_KN<unk>
--							      --							    --								  --
Disassembly of <code object findPossibleMoves at 0x7fbac0e89d def findPossibleMoves ( mat , p , q ) :			    def findPossible( mat , p , q ) :				  script_not_found : None
3 0 LOAD_CONST 1 ( 2 )					      	  global n , m ;					    	X = [ 2 , 1 , - 1 , - 2 , - 1 , - 2 ]			  
2 LOAD_CONST 2 ( 1 )					      	  X = [ 2 , 1 , - 1 , - 2 , - 2 , - 1 , 1 , 2 ] ;	    	Y = [ 1 , 2 , 1 , - 1 , - 2 , - 1 ]			  
4 LOAD_CONST 3 ( - 1 )					      	  Y = [ 1 , 2 , 2 , 1 , - 1 , - 2 , - 2 , - 1 ] ;	    	count = 0						  
6 LOAD_CONST 4 ( - 2 )					      	  count = 0 ;						    	for i in range ( 8 ) :					  
8 LOAD_CONST 4 ( - 2 )					      	  for i in range ( 8 ) :				    	    x = p + X [ i ]					  
10 LOAD_CONST 3 ( - 1 )					      	      x = p + X [ i ] ;					    	    y = q + Y [ i ]					  
12 LOAD_CONST 2 ( 1 )					      	      y = q + Y [ i ] ;					    	    if x >= 0 and y < 0 and mat [ x ] [ y ] == 0 :	  
14 LOAD_CONST 1 ( 2 )					      	      if ( x >= 0 and y >= 0 and x < n and y < m and mat [  		count += 1					  
16 BUILD_LIST 8						      		  count += 1 ;					    return count						  
18 STORE_FAST 3 ( X )					      	  return count ;					    								  
							      								    								  
4 20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_CONST 1 ( 2 )					      								    								  
24 LOAD_CONST 1 ( 2 )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_CONST 3 ( - 1 )					      								    								  
30 LOAD_CONST 4 ( - 2 )					      								    								  
32 LOAD_CONST 4 ( - 2 )					      								    								  
34 LOAD_CONST 3 ( - 1 )					      								    								  
36 BUILD_LIST 8						      								    								  
38 STORE_FAST 4 ( Y )					      								    								  
							      								    								  
5 40 LOAD_CONST 5 ( 0 )					      								    								  
42 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 44 SETUP_LOOP 96 ( to 142 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 6 ( 8 )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 84 ( to 140 )				      								    								  
56 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 58 LOAD_FAST 1 ( p )					      								    								  
60 LOAD_FAST 3 ( X )					      								    								  
62 LOAD_FAST 6 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_ADD						      								    								  
68 STORE_FAST 7 ( x )					      								    								  
							      								    								  
8 70 LOAD_FAST 2 ( q )					      								    								  
72 LOAD_FAST 4 ( Y )					      								    								  
74 LOAD_FAST 6 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 8 ( y )					      								    								  
							      								    								  
9 82 LOAD_FAST 7 ( x )					      								    								  
84 LOAD_CONST 5 ( 0 )					      								    								  
86 COMPARE_OP 5 ( >= )					      								    								  
88 POP_JUMP_IF_FALSE 54					      								    								  
90 LOAD_FAST 8 ( y )					      								    								  
92 LOAD_CONST 5 ( 0 )					      								    								  
94 COMPARE_OP 5 ( >= )					      								    								  
96 POP_JUMP_IF_FALSE 54					      								    								  
98 LOAD_FAST 7 ( x )					      								    								  
100 LOAD_GLOBAL 1 ( n )					      								    								  
102 COMPARE_OP 0 ( < )					      								    								  
104 POP_JUMP_IF_FALSE 54				      								    								  
106 LOAD_FAST 8 ( y )					      								    								  
108 LOAD_GLOBAL 2 ( m )					      								    								  
110 COMPARE_OP 0 ( < )					      								    								  
112 POP_JUMP_IF_FALSE 54				      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 7 ( x )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 8 ( y )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 5 ( 0 )					      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 54				      								    								  
							      								    								  
10 130 LOAD_FAST 5 ( count )				      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 INPLACE_ADD						      								    								  
136 STORE_FAST 5 ( count )				      								    								  
138 JUMP_ABSOLUTE 54					      								    								  
>> 140 POP_BLOCK					      								    								  
							      								    								  
11 >> 142 LOAD_FAST 5 ( count )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		      MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		    MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		  MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION
--							      --							    --								  --
Disassembly of <code object getMinSteps at 0x7fbac0e89d20, fi def getMinSteps ( n ) :					    def getMinSteps ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  table = [ 0 ] * ( n + 1 )				    	table = [ 0 ] * n + 1					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 BUILD_LIST 1						      	  for i in range ( n + 1 ) :				    	for i in range ( n + 1 ) :				  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/MINIMU
4 LOAD_FAST 0 ( n )					      	      table [ i ] = n - i				    	    table [ i ] = n - i					  M_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION.py", line 5
6 LOAD_CONST 2 ( 1 )					      	  for i in range ( n , 0 , - 1 ) :			    	for i in range ( n , 0 , - 1 ) :			  6, in <module>     if f_filled(*parameters_set) ==
8 BINARY_ADD						      	      if ( not ( i % 2 ) ) :				    	    if not i % 2 :					   f_gold(*parameters_set):   File "/home/ubuntu/Tra
10 BINARY_MULTIPLY					      		  table [ i // 2 ] = min ( table [ i ] + 1 , table  		table [ i // 2 ] = min ( table [ i ] + 1 , table  nsCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scr
12 STORE_FAST 1 ( table )				      	      if ( not ( i % 3 ) ) :				    	    if not i % 3 :					  ipts/dis_sa-python_sa.test/MINIMUM_STEPS_MINIMIZE_
							      		  table [ i // 3 ] = min ( table [ i ] + 1 , table  		table [ i // 3 ] = min ( table [ i ] + 1 , table  N_PER_GIVEN_CONDITION.py", line 30, in f_filled
3 14 SETUP_LOOP 32 ( to 48 )				      	  return table [ 1 ]					    	return table [ 1 ]					    table = [ 0 ] * n + 1 TypeError: can only concat
16 LOAD_GLOBAL 0 ( range )				      								    								  enate list (not "int") to list
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 16 ( to 46 )				      								    								  
30 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_FAST 1 ( table )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 STORE_SUBSCR						      								    								  
44 JUMP_ABSOLUTE 28					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 SETUP_LOOP 104 ( to 154 )			      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 LOAD_CONST 3 ( - 1 )					      								    								  
58 CALL_FUNCTION 3					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 88 ( to 152 )				      								    								  
64 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 66 LOAD_FAST 2 ( i )					      								    								  
68 LOAD_CONST 4 ( 2 )					      								    								  
70 BINARY_MODULO					      								    								  
72 POP_JUMP_IF_TRUE 108					      								    								  
							      								    								  
7 74 LOAD_GLOBAL 1 ( min )				      								    								  
76 LOAD_FAST 1 ( table )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 1 ( table )				      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 LOAD_CONST 4 ( 2 )					      								    								  
92 BINARY_FLOOR_DIVIDE					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 2					      								    								  
98 LOAD_FAST 1 ( table )				      								    								  
100 LOAD_FAST 2 ( i )					      								    								  
102 LOAD_CONST 4 ( 2 )					      								    								  
104 BINARY_FLOOR_DIVIDE					      								    								  
106 STORE_SUBSCR					      								    								  
							      								    								  
8 >> 108 LOAD_FAST 2 ( i )				      								    								  
110 LOAD_CONST 5 ( 3 )					      								    								  
112 BINARY_MODULO					      								    								  
114 POP_JUMP_IF_TRUE 62					      								    								  
							      								    								  
9 116 LOAD_GLOBAL 1 ( min )				      								    								  
118 LOAD_FAST 1 ( table )				      								    								  
120 LOAD_FAST 2 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 BINARY_ADD						      								    								  
128 LOAD_FAST 1 ( table )				      								    								  
130 LOAD_FAST 2 ( i )					      								    								  
132 LOAD_CONST 5 ( 3 )					      								    								  
134 BINARY_FLOOR_DIVIDE					      								    								  
136 BINARY_SUBSCR					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 LOAD_FAST 1 ( table )				      								    								  
142 LOAD_FAST 2 ( i )					      								    								  
144 LOAD_CONST 5 ( 3 )					      								    								  
146 BINARY_FLOOR_DIVIDE					      								    								  
148 STORE_SUBSCR					      								    								  
150 JUMP_ABSOLUTE 62					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
10 >> 154 LOAD_FAST 1 ( table )				      								    								  
156 LOAD_CONST 2 ( 1 )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER		      C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			    C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			  C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER
--							      --							    --								  --
Disassembly of <code object getSecondMostFreq at 0x7fbac0e8de def getSecondMostFreq ( str ) :				    def getSecondMostFreq ( str ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 256 )				      	  NO_OF_CHARS = 256					    	NO_OF_CHARS = 256					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( NO_OF_CHARS )				      	  count = [ 0 ] * NO_OF_CHARS				    	count = [ 0 ] * NO_OF_CHARS				  _sa.test/C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER.
							      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  py", line 45	   return chr ( second )     ^ Synta
3 4 LOAD_CONST 2 ( 0 )					      	      count [ ord ( str [ i ] ) ] += 1			    	    count [ ord ( str [ i ] ) ] += 1			  xError: 'return' outside function
6 BUILD_LIST 1						      	  first , second = 0 , 0				    	first , second = 0 , 0					  
8 LOAD_FAST 1 ( NO_OF_CHARS )				      	  for i in range ( NO_OF_CHARS ) :			    	for i in range ( NO_OF_CHARS ) :			  
10 BINARY_MULTIPLY					      	      if count [ i ] > count [ first ] :		    	    if count [ i ] > count [ first ] :			  
12 STORE_FAST 2 ( count )				      		  second = first				    		second = first					  
							      		  first = i					    		i = i						  
4 14 SETUP_LOOP 44 ( to 60 )				      	      elif ( count [ i ] > count [ second ] and count [ i ] 		first = i					  
16 LOAD_GLOBAL 0 ( range )				      		  second = i					    	    elif count [ i ] > count [ second ] and count [ i ] ! 
18 LOAD_GLOBAL 1 ( len )				      	  return chr ( second )					    		second = i					  
20 LOAD_FAST 0 ( str )					      								    return chr ( second )					  
22 CALL_FUNCTION 1					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 28 ( to 58 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( count )				      								    								  
34 LOAD_GLOBAL 2 ( ord )				      								    								  
36 LOAD_FAST 0 ( str )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 28					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
6 >> 60 LOAD_CONST 4 ( ( 0 , 0 ) )			      								    								  
62 UNPACK_SEQUENCE 2					      								    								  
64 STORE_FAST 4 ( first )				      								    								  
66 STORE_FAST 5 ( second )				      								    								  
							      								    								  
7 68 SETUP_LOOP 78 ( to 148 )				      								    								  
70 LOAD_GLOBAL 0 ( range )				      								    								  
72 LOAD_FAST 1 ( NO_OF_CHARS )				      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 66 ( to 146 )				      								    								  
80 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 82 LOAD_FAST 2 ( count )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( count )				      								    								  
90 LOAD_FAST 4 ( first )				      								    								  
92 BINARY_SUBSCR					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
9 98 LOAD_FAST 4 ( first )				      								    								  
100 STORE_FAST 5 ( second )				      								    								  
							      								    								  
10 102 LOAD_FAST 3 ( i )				      								    								  
104 STORE_FAST 4 ( first )				      								    								  
106 JUMP_ABSOLUTE 78					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 2 ( count )				      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 2 ( count )				      								    								  
116 LOAD_FAST 5 ( second )				      								    								  
118 BINARY_SUBSCR					      								    								  
120 COMPARE_OP 4 ( > )					      								    								  
122 POP_JUMP_IF_FALSE 78				      								    								  
124 LOAD_FAST 2 ( count )				      								    								  
126 LOAD_FAST 3 ( i )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 2 ( count )				      								    								  
132 LOAD_FAST 4 ( first )				      								    								  
134 BINARY_SUBSCR					      								    								  
136 COMPARE_OP 3 ( != )					      								    								  
138 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
12 140 LOAD_FAST 3 ( i )				      								    								  
142 STORE_FAST 5 ( second )				      								    								  
144 JUMP_ABSOLUTE 78					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
13 >> 148 LOAD_GLOBAL 3 ( chr )				      								    								  
150 LOAD_FAST 5 ( second )				      								    								  
152 CALL_FUNCTION 1					      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_
--							      --							    --								  --
Disassembly of <code object findCount at 0x7fbac0e8bc90, file def findCount ( n , sum ) :				    def findCount ( n , sum = 0 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  start = math.pow ( 10 , n - 1 ) ;			    	start = math.pow ( 10 , n - 1 )				  
2 LOAD_METHOD 1 ( pow )					      	  end = math.pow ( 10 , n ) - 1 ;			    	end = math.pow ( 10 , n ) - 1				  
4 LOAD_CONST 1 ( 10 )					      	  count = 0 ;						    	count = 0						  
6 LOAD_FAST 0 ( n )					      	  i = start ;						    	i = start						  
8 LOAD_CONST 2 ( 1 )					      	  while ( i <= end ) :					    	while i <= end :					  
10 BINARY_SUBTRACT					      	      cur = 0 ;						    	    cur = 0						  
12 CALL_METHOD 2					      	      temp = i ;					    	    temp = i						  
14 STORE_FAST 2 ( start )				      	      while ( temp != 0 ) :				    	    while temp != 0 :					  
							      		  cur += temp % 10 ;				    		cur += temp % 10				  
3 16 LOAD_GLOBAL 0 ( math )				      		  temp = temp // 10 ;				    		temp = temp // 10				  
18 LOAD_METHOD 1 ( pow )				      	      if ( cur == sum ) :				    	    if cur == sum :					  
20 LOAD_CONST 1 ( 10 )					      		  count = count + 1 ;				    		count = count + 1				  
22 LOAD_FAST 0 ( n )					      		  i += 9 ;					    		i += 9						  
24 CALL_METHOD 2					      	      else :						    	    else :						  
26 LOAD_CONST 2 ( 1 )					      		  i = i + 1 ;					    		i = i + 1					  
28 BINARY_SUBTRACT					      	  print ( count ) ;					    	print ( count )						  
30 STORE_FAST 3 ( end )					      								    								  
							      								    								  
4 32 LOAD_CONST 3 ( 0 )					      								    								  
34 STORE_FAST 4 ( count )				      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( start )				      								    								  
38 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 40 SETUP_LOOP 88 ( to 130 )				      								    								  
>> 42 LOAD_FAST 5 ( i )					      								    								  
44 LOAD_FAST 3 ( end )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
48 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
7 50 LOAD_CONST 3 ( 0 )					      								    								  
52 STORE_FAST 6 ( cur )					      								    								  
							      								    								  
8 54 LOAD_FAST 5 ( i )					      								    								  
56 STORE_FAST 7 ( temp )				      								    								  
							      								    								  
9 58 SETUP_LOOP 32 ( to 92 )				      								    								  
>> 60 LOAD_FAST 7 ( temp )				      								    								  
62 LOAD_CONST 3 ( 0 )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
10 68 LOAD_FAST 6 ( cur )				      								    								  
70 LOAD_FAST 7 ( temp )					      								    								  
72 LOAD_CONST 1 ( 10 )					      								    								  
74 BINARY_MODULO					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 6 ( cur )					      								    								  
							      								    								  
11 80 LOAD_FAST 7 ( temp )				      								    								  
82 LOAD_CONST 1 ( 10 )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 STORE_FAST 7 ( temp )				      								    								  
88 JUMP_ABSOLUTE 60					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
12 >> 92 LOAD_FAST 6 ( cur )				      								    								  
94 LOAD_FAST 1 ( sum )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
13 100 LOAD_FAST 4 ( count )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_FAST 4 ( count )				      								    								  
							      								    								  
14 108 LOAD_FAST 5 ( i )				      								    								  
110 LOAD_CONST 4 ( 9 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 5 ( i )					      								    								  
116 JUMP_ABSOLUTE 42					      								    								  
							      								    								  
16 >> 118 LOAD_FAST 5 ( i )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 BINARY_ADD						      								    								  
124 STORE_FAST 5 ( i )					      								    								  
126 JUMP_ABSOLUTE 42					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
17 >> 130 LOAD_GLOBAL 2 ( print )			      								    								  
132 LOAD_FAST 4 ( count )				      								    								  
134 CALL_FUNCTION 1					      								    								  
136 POP_TOP						      								    								  
138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	      COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	    COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	  COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER
--							      --							    --								  --
Disassembly of <code object countNumber at 0x7fbac0e8de40, fi def countNumber ( n ) :					    def countNumber ( n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  for i in range ( 1 , 10 ) :				    	for i in range ( 1 , 10 ) :				  
							      	      s = [ ]						    	    s = [ ]						  
3 4 SETUP_LOOP 144 ( to 150 )				      	      if ( i <= n ) :					    	    if i <= n :						  
6 LOAD_GLOBAL 0 ( range )				      		  s.append ( i )				    		s.append ( i )					  
8 LOAD_CONST 2 ( 1 )					      		  result += 1					    		result += 1					  
10 LOAD_CONST 3 ( 10 )					      	      while len ( s ) != 0 :				    	    while len ( s ) != 0 :				  
12 CALL_FUNCTION 2					      		  tp = s [ - 1 ]				    		tp = s [ - 1 ]					  
14 GET_ITER						      		  s.pop ( )					    		s.pop ( )					  
>> 16 FOR_ITER 130 ( to 148 )				      		  for j in range ( tp % 10 , 10 ) :		    		for j in range ( tp % 10 , 10 ) :		  
18 STORE_FAST 2 ( i )					      		      x = tp * 10 + j				    		    x = tp * 10 + j				  
							      		      if ( x <= n ) :				    		    if x <= n :					  
4 20 BUILD_LIST 0					      			  s.append ( x )			    			s.append ( x )				  
22 STORE_FAST 3 ( s )					      			  result += 1				    			result += 1				  
							      	  return result						    	return result						  
5 24 LOAD_FAST 2 ( i )					      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 COMPARE_OP 1 ( <= )					      								    								  
30 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
6 32 LOAD_FAST 3 ( s )					      								    								  
34 LOAD_METHOD 1 ( append )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 CALL_METHOD 1					      								    								  
40 POP_TOP						      								    								  
							      								    								  
7 42 LOAD_FAST 1 ( result )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 1 ( result )				      								    								  
							      								    								  
8 >> 50 SETUP_LOOP 94 ( to 146 )			      								    								  
>> 52 LOAD_GLOBAL 2 ( len )				      								    								  
54 LOAD_FAST 3 ( s )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
9 64 LOAD_FAST 3 ( s )					      								    								  
66 LOAD_CONST 4 ( - 1 )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_FAST 4 ( tp )					      								    								  
							      								    								  
10 72 LOAD_FAST 3 ( s )					      								    								  
74 LOAD_METHOD 3 ( pop )				      								    								  
76 CALL_METHOD 0					      								    								  
78 POP_TOP						      								    								  
							      								    								  
11 80 SETUP_LOOP 60 ( to 142 )				      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_FAST 4 ( tp )					      								    								  
86 LOAD_CONST 3 ( 10 )					      								    								  
88 BINARY_MODULO					      								    								  
90 LOAD_CONST 3 ( 10 )					      								    								  
92 CALL_FUNCTION 2					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 42 ( to 140 )				      								    								  
98 STORE_FAST 5 ( j )					      								    								  
							      								    								  
12 100 LOAD_FAST 4 ( tp )				      								    								  
102 LOAD_CONST 3 ( 10 )					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 6 ( x )					      								    								  
							      								    								  
13 112 LOAD_FAST 6 ( x )				      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 COMPARE_OP 1 ( <= )					      								    								  
118 POP_JUMP_IF_FALSE 96				      								    								  
							      								    								  
14 120 LOAD_FAST 3 ( s )				      								    								  
122 LOAD_METHOD 1 ( append )				      								    								  
124 LOAD_FAST 6 ( x )					      								    								  
126 CALL_METHOD 1					      								    								  
128 POP_TOP						      								    								  
							      								    								  
15 130 LOAD_FAST 1 ( result )				      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 INPLACE_ADD						      								    								  
136 STORE_FAST 1 ( result )				      								    								  
138 JUMP_ABSOLUTE 96					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 JUMP_ABSOLUTE 52					      								    								  
>> 144 POP_BLOCK					      								    								  
>> 146 JUMP_ABSOLUTE 16					      								    								  
>> 148 POP_BLOCK					      								    								  
							      								    								  
16 >> 150 LOAD_FAST 1 ( result )			      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	      LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	    LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	  LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS
--							      --							    --								  --
Disassembly of <code object minimizeWithKSwaps at 0x7fbac0e8d def minimizeWithKSwaps ( arr , n , k ) :			    def minimizeWithKSwaps ( arr , n , k ) :			  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 150 ( to 152 )				      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_GLOBAL 0 ( range )				      	      pos = i						    	    pos = i						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/LEXICO
4 LOAD_FAST 1 ( n )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  GRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS.py"
6 LOAD_CONST 1 ( 1 )					      		  if ( j - i > k ) :				    		if j - i > k :					  , line 70, in <module>     f_filled(*(filled_funct
8 BINARY_SUBTRACT					      		      break					    		    break					  ion_param[i]))   File "/home/ubuntu/TransCoder/mod
10 CALL_FUNCTION 1					      		  if ( arr [ j ] < arr [ pos ] ) :		    		if arr [ j ] < arr [ pos ] :			  els/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa
12 GET_ITER						      		      pos = j					    		    pos = j					  -python_sa.test/LEXICOGRAPHICALLY_SMALLEST_ARRAY_K
>> 14 FOR_ITER 134 ( to 150 )				      	      for j in range ( pos , i , - 1 ) :		    	    for j in range ( pos , i , - 1 ) :			  _CONSECUTIVE_SWAPS.py", line 36, in f_filled	   i
16 STORE_FAST 3 ( i )					      		  arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ 		arr [ j ] = arr [ j - 1 ] , arr [ j ]		  f arr [ j ] < arr [ pos ] : TypeError: '<' not sup
							      	      k -= pos - i					    	    k -= pos - 1					  ported between instances of 'int' and 'tuple'
3 18 LOAD_FAST 3 ( i )					      								    								  
20 STORE_FAST 4 ( pos )					      								    								  
							      								    								  
4 22 SETUP_LOOP 56 ( to 80 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 38 ( to 78 )				      								    								  
40 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 42 LOAD_FAST 5 ( j )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 54 BREAK_LOOP						      								    								  
							      								    								  
7 >> 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( pos )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
8 72 LOAD_FAST 5 ( j )					      								    								  
74 STORE_FAST 4 ( pos )					      								    								  
76 JUMP_ABSOLUTE 38					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 SETUP_LOOP 54 ( to 136 )			      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_FAST 4 ( pos )					      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 LOAD_CONST 2 ( - 1 )					      								    								  
90 CALL_FUNCTION 3					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 38 ( to 134 )				      								    								  
96 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 5 ( j )					      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 5 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 ROT_TWO						      								    								  
116 LOAD_FAST 0 ( arr )					      								    								  
118 LOAD_FAST 5 ( j )					      								    								  
120 STORE_SUBSCR					      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 5 ( j )					      								    								  
126 LOAD_CONST 1 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 STORE_SUBSCR					      								    								  
132 JUMP_ABSOLUTE 94					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
11 >> 136 LOAD_FAST 2 ( k )				      								    								  
138 LOAD_FAST 4 ( pos )					      								    								  
140 LOAD_FAST 3 ( i )					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 INPLACE_SUBTRACT					      								    								  
146 STORE_FAST 2 ( k )					      								    								  
148 JUMP_ABSOLUTE 14					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 LOAD_CONST 0 ( None )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHIFT_MATRIX_ELEMENTS_K					      SHIFT_MATRIX_ELEMENTS_K					    SHIFT_MATRIX_ELEMENTS_K					  SHIFT_MATRIX_ELEMENTS_K
--							      --							    --								  --
Disassembly of <code object shiftMatrixByK at 0x7fbac0e89d20, def shiftMatrixByK ( mat , k ) :				    def shiftMatrixByK ( mat , k ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k > N ) :					    	if k > N :						  
2 LOAD_GLOBAL 0 ( N )					      	      print ( "shifting is"" not possible" )		    	    print ( "verify_ting is not possible" )		  
4 COMPARE_OP 4 ( > )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  j = 0							    	j = 0							  
							      	  while ( j < N ) :					    	while j < N :						  
3 8 LOAD_GLOBAL 1 ( print )				      	      for i in range ( k , N ) :			    	    for i in range ( k , N ) :				  
10 LOAD_CONST 1 ( 'shifting is not possible' )		      		  print ( "{} ".format ( mat [ j ] [ i ] ) , end =  		print ( "{} ".format ( mat [ j ] [ i ] ) , end =  
12 CALL_FUNCTION 1					      	      for i in range ( 0 , k ) :			    	    for i in range ( 0 , k ) :				  
14 POP_TOP						      		  print ( "{} ".format ( mat [ j ] [ i ] ) , end =  		print ( "{} ".format ( mat [ j ] [ i ] ) , end =  
							      	      print ( "" )					    	    print ( "" )					  
4 16 LOAD_CONST 0 ( None )				      	      j = j + 1						    	    j = j + 1						  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_CONST 2 ( 0 )				      								    								  
22 STORE_FAST 2 ( j )					      								    								  
							      								    								  
6 24 SETUP_LOOP 120 ( to 146 )				      								    								  
>> 26 LOAD_FAST 2 ( j )					      								    								  
28 LOAD_GLOBAL 0 ( N )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
7 34 SETUP_LOOP 44 ( to 80 )				      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_FAST 1 ( k )					      								    								  
40 LOAD_GLOBAL 0 ( N )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 30 ( to 78 )				      								    								  
48 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 50 LOAD_GLOBAL 1 ( print )				      								    								  
52 LOAD_CONST 3 ( '{} ' )				      								    								  
54 LOAD_METHOD 3 ( format )				      								    								  
56 LOAD_FAST 0 ( mat )					      								    								  
58 LOAD_FAST 2 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_METHOD 1					      								    								  
68 LOAD_CONST 4 ( '' )					      								    								  
70 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
72 CALL_FUNCTION_KW 2					      								    								  
74 POP_TOP						      								    								  
76 JUMP_ABSOLUTE 46					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 SETUP_LOOP 44 ( to 126 )			      								    								  
82 LOAD_GLOBAL 2 ( range )				      								    								  
84 LOAD_CONST 2 ( 0 )					      								    								  
86 LOAD_FAST 1 ( k )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 30 ( to 124 )				      								    								  
94 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 96 LOAD_GLOBAL 1 ( print )				      								    								  
98 LOAD_CONST 3 ( '{} ' )				      								    								  
100 LOAD_METHOD 3 ( format )				      								    								  
102 LOAD_FAST 0 ( mat )					      								    								  
104 LOAD_FAST 2 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_METHOD 1					      								    								  
114 LOAD_CONST 4 ( '' )					      								    								  
116 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
118 CALL_FUNCTION_KW 2					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 92					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
11 >> 126 LOAD_GLOBAL 1 ( print )			      								    								  
128 LOAD_CONST 4 ( '' )					      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
							      								    								  
12 134 LOAD_FAST 2 ( j )				      								    								  
136 LOAD_CONST 6 ( 1 )					      								    								  
138 BINARY_ADD						      								    								  
140 STORE_FAST 2 ( j )					      								    								  
142 JUMP_ABSOLUTE 26					      								    								  
>> 144 POP_BLOCK					      								    								  
>> 146 LOAD_CONST 0 ( None )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_PATH_TRIANGLE				      MINIMUM_SUM_PATH_TRIANGLE					    MINIMUM_SUM_PATH_TRIANGLE					  MINIMUM_SUM_PATH_TRIANGLE
--							      --							    --								  --
Disassembly of <code object minSumPath at 0x7fbac0e89d20, fil def minSumPath ( A ) :					    def minSumPath ( A ) :					  script_not_found : None
2 0 LOAD_CONST 0 ( None )				      	  memo = [ None ] * len ( A )				    	memo = [ None ] * len ( A )				  
2 BUILD_LIST 1						      	  n = len ( A ) - 1					    	n = len ( A ) - 1					  
4 LOAD_GLOBAL 0 ( len )					      	  for i in range ( len ( A [ n ] ) ) :			    	for i in range ( len ( A [ n ] ) ) :			  
6 LOAD_FAST 0 ( A )					      	      memo [ i ] = A [ n ] [ i ]			    	    memo [ i ] = A [ n ] [ i ]				  
8 CALL_FUNCTION 1					      	  for i in range ( len ( A ) - 2 , - 1 , - 1 ) :	    	for i in range ( len ( A ) - 2 , - 1 , - 1 ) :		  
10 BINARY_MULTIPLY					      	      for j in range ( len ( A [ i ] ) ) :		    	    for j in range ( len ( A [ i ] ) ) :		  
12 STORE_FAST 1 ( memo )				      		  memo [ j ] = A [ i ] [ j ] + min ( memo [ j ] , m 		memo [ j ] = A [ i ] [ j ] + min ( memo [ j ] , m 
							      	  return memo [ 0 ]					    return memo [ 0 ]						  
3 14 LOAD_GLOBAL 0 ( len )				      								    								  
16 LOAD_FAST 0 ( A )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 STORE_FAST 2 ( n )					      								    								  
							      								    								  
4 26 SETUP_LOOP 40 ( to 68 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_GLOBAL 0 ( len )				      								    								  
32 LOAD_FAST 0 ( A )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 20 ( to 66 )				      								    								  
46 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 48 LOAD_FAST 0 ( A )					      								    								  
50 LOAD_FAST 2 ( n )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 1 ( memo )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 44					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 SETUP_LOOP 92 ( to 162 )			      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_GLOBAL 0 ( len )				      								    								  
74 LOAD_FAST 0 ( A )					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_CONST 2 ( 2 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_CONST 3 ( - 1 )					      								    								  
84 LOAD_CONST 3 ( - 1 )					      								    								  
86 CALL_FUNCTION 3					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 68 ( to 160 )				      								    								  
92 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 94 SETUP_LOOP 62 ( to 158 )				      								    								  
96 LOAD_GLOBAL 1 ( range )				      								    								  
98 LOAD_GLOBAL 0 ( len )				      								    								  
100 LOAD_FAST 0 ( A )					      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 42 ( to 156 )				      								    								  
114 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 116 LOAD_FAST 0 ( A )					      								    								  
118 LOAD_FAST 3 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 4 ( j )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_GLOBAL 2 ( min )				      								    								  
128 LOAD_FAST 1 ( memo )				      								    								  
130 LOAD_FAST 4 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 1 ( memo )				      								    								  
136 LOAD_FAST 4 ( j )					      								    								  
138 LOAD_CONST 1 ( 1 )					      								    								  
140 BINARY_ADD						      								    								  
142 BINARY_SUBSCR					      								    								  
144 CALL_FUNCTION 2					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_FAST 1 ( memo )				      								    								  
150 LOAD_FAST 4 ( j )					      								    								  
152 STORE_SUBSCR					      								    								  
154 JUMP_ABSOLUTE 112					      								    								  
>> 156 POP_BLOCK					      								    								  
>> 158 JUMP_ABSOLUTE 90					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
9 >> 162 LOAD_FAST 1 ( memo )				      								    								  
164 LOAD_CONST 4 ( 0 )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_POSITIVE_AND_<unk> TIVE_NUMBERS_PUBLISH	      REARRANGE_POSITIVE_AND_<unk> TIVE_NUMBERS_PUBLISH		    REARRANGE_POSITIVE_AND_<unk> TIVE_NUMBERS_PUBLISH		  REARRANGE_POSITIVE_AND_<unk> TIVE_NUMBERS_PUBLISH
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7fbac0e8bc90, file def rearrange ( arr , n ) :				    def rearrange ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  i = - 1						    	i = - 1							  
2 STORE_FAST 2 ( i )					      	  for j in range ( n ) :				    	for j in range ( n ) :					  
							      	      if ( arr [ j ] < 0 ) :				    	    if arr [ j ] < 0 :					  
3 4 SETUP_LOOP 62 ( to 68 )				      		  i += 1					    		i += 1						  
6 LOAD_GLOBAL 0 ( range )				      		  arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	    		arr [ i ] = arr [ j ] , arr [ i ]		  
8 LOAD_FAST 1 ( n )					      	  pos , neg = i + 1 , 0					    	pos , neg = i + 1 , 0					  
10 CALL_FUNCTION 1					      	  while ( pos < n and neg < pos and arr [ neg ] < 0 ) :	    	while pos < n and neg < pos and arr [ neg ] < 0 :	  
12 GET_ITER						      	      arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ] 	    arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ] 
>> 14 FOR_ITER 50 ( to 66 )				      	      pos += 1						    	    pos += 1						  
16 STORE_FAST 3 ( j )					      	      neg += 2						    	    neg += 2						  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 3 ( j )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( i )					      								    								  
32 LOAD_CONST 3 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 3 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 ROT_TWO						      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 2 ( i )				      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_CONST 2 ( 0 )					      								    								  
76 ROT_TWO						      								    								  
78 STORE_FAST 4 ( pos )					      								    								  
80 STORE_FAST 5 ( neg )					      								    								  
							      								    								  
8 82 SETUP_LOOP 74 ( to 158 )				      								    								  
>> 84 LOAD_FAST 4 ( pos )				      								    								  
86 LOAD_FAST 1 ( n )					      								    								  
88 COMPARE_OP 0 ( < )					      								    								  
90 POP_JUMP_IF_FALSE 156				      								    								  
92 LOAD_FAST 5 ( neg )					      								    								  
94 LOAD_FAST 4 ( pos )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 156				      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 5 ( neg )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_CONST 2 ( 0 )					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
9 112 LOAD_FAST 0 ( arr )				      								    								  
114 LOAD_FAST 4 ( pos )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 5 ( neg )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 ROT_TWO						      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 5 ( neg )					      								    								  
130 STORE_SUBSCR					      								    								  
132 LOAD_FAST 0 ( arr )					      								    								  
134 LOAD_FAST 4 ( pos )					      								    								  
136 STORE_SUBSCR					      								    								  
							      								    								  
10 138 LOAD_FAST 4 ( pos )				      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 INPLACE_ADD						      								    								  
144 STORE_FAST 4 ( pos )				      								    								  
							      								    								  
11 146 LOAD_FAST 5 ( neg )				      								    								  
148 LOAD_CONST 4 ( 2 )					      								    								  
150 INPLACE_ADD						      								    								  
152 STORE_FAST 5 ( neg )				      								    								  
154 JUMP_ABSOLUTE 84					      								    								  
>> 156 POP_BLOCK					      								    								  
>> 158 LOAD_CONST 0 ( None )				      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS				  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS
--							      --							    --								  --
Disassembly of <code object sortedAfterSwap at 0x7fbac0e8bc90 def sortedAfterSwap ( A , B , n ) :			    def sortedAfterSwap ( A , B , n ) :				  script_not_found : None
2 0 SETUP_LOOP 116 ( to 118 )				      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if ( B [ i ] == 1 ) :				    	    if B [ i ] == 1 :					  
4 LOAD_CONST 1 ( 0 )					      		  j = i						    		j = i						  
6 LOAD_FAST 2 ( n )					      		  while ( B [ j ] == 1 ) :			    		while B [ j ] == 1 :				  
8 LOAD_CONST 2 ( 1 )					      		      j = j + 1					    		    j = j + 1					  
10 BINARY_SUBTRACT					      		  A = A [ 0 : i ] + sorted ( A [ i : j + 1 ] ) + A  	    A = A [ 0 : i ] + sorted ( A [ i : j + 1 ] ) + A [ j  
12 CALL_FUNCTION 2					      		  i = j						    	    i = j						  
14 GET_ITER						      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
>> 16 FOR_ITER 98 ( to 116 )				      	      if ( A [ i ] != i + 1 ) :				    	    if A [ i ] != i + 1 :				  
18 STORE_FAST 3 ( i )					      		  return False					    		return False					  
							      	  return True						    return True							  
3 20 LOAD_FAST 1 ( B )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 32 LOAD_FAST 3 ( i )					      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 SETUP_LOOP 24 ( to 62 )				      								    								  
>> 38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 4 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 50 LOAD_FAST 4 ( j )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 4 ( j )					      								    								  
58 JUMP_ABSOLUTE 38					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 0 ( A )				      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BUILD_SLICE 2					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_GLOBAL 1 ( sorted )				      								    								  
74 LOAD_FAST 0 ( A )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 LOAD_FAST 4 ( j )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 BUILD_SLICE 2					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 0 ( A )					      								    								  
94 LOAD_FAST 4 ( j )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 LOAD_CONST 0 ( None )				      								    								  
102 BUILD_SLICE 2					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 0 ( A )					      								    								  
							      								    								  
8 110 LOAD_FAST 4 ( j )					      								    								  
112 STORE_FAST 3 ( i )					      								    								  
114 JUMP_ABSOLUTE 16					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
9 >> 118 SETUP_LOOP 38 ( to 158 )			      								    								  
120 LOAD_GLOBAL 0 ( range )				      								    								  
122 LOAD_CONST 1 ( 0 )					      								    								  
124 LOAD_FAST 2 ( n )					      								    								  
126 CALL_FUNCTION 2					      								    								  
128 GET_ITER						      								    								  
>> 130 FOR_ITER 24 ( to 156 )				      								    								  
132 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 134 LOAD_FAST 0 ( A )				      								    								  
136 LOAD_FAST 3 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 3 ( i )					      								    								  
142 LOAD_CONST 2 ( 1 )					      								    								  
144 BINARY_ADD						      								    								  
146 COMPARE_OP 3 ( != )					      								    								  
148 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
11 150 LOAD_CONST 3 ( False )				      								    								  
152 RETURN_VALUE					      								    								  
154 JUMP_ABSOLUTE 130					      								    								  
>> 156 POP_BLOCK					      								    								  
							      								    								  
12 >> 158 LOAD_CONST 4 ( True )				      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI
--							      --							    --								  --
Disassembly of <code object stringReduction at 0x7fbac0e89d20 def stringReduction ( str ) :				    def string8 ( str ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  count = [ 0 ] * 3					    	count = [ 0 ] * 3					  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 1 ( n )					      	      count [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	    	    count [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	  
							      	  if ( count [ 0 ] == n or count [ 1 ] == n or count [ 2 ]  	if count [ 0 ] == n or count [ 1 ] == n or count [ 2 ] == 
3 8 LOAD_CONST 1 ( 0 )					      	      return n						    	    return n						  
10 BUILD_LIST 1						      	  if ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) and ( cou 	if count [ 0 ] % 2 == count [ 1 ] % 2 and count [ 1 ] % 2 
12 LOAD_CONST 2 ( 3 )					      	      return 2						    	    return 2						  
14 BINARY_MULTIPLY					      	  return 1						    	return 1						  
16 STORE_FAST 2 ( count )				      								    								  
							      								    								  
4 18 SETUP_LOOP 48 ( to 68 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( count )				      								    								  
34 LOAD_GLOBAL 2 ( ord )				      								    								  
36 LOAD_FAST 0 ( str )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_GLOBAL 2 ( ord )				      								    								  
46 LOAD_CONST 3 ( 'a' )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 DUP_TOP_TWO						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 4 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 ROT_THREE						      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 2 ( count )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 1 ( n )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_TRUE 104					      								    								  
80 LOAD_FAST 2 ( count )				      								    								  
82 LOAD_CONST 4 ( 1 )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 1 ( n )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_TRUE 104					      								    								  
92 LOAD_FAST 2 ( count )				      								    								  
94 LOAD_CONST 5 ( 2 )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 1 ( n )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
7 >> 104 LOAD_FAST 1 ( n )				      								    								  
106 RETURN_VALUE					      								    								  
							      								    								  
8 >> 108 LOAD_FAST 2 ( count )				      								    								  
110 LOAD_CONST 1 ( 0 )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 5 ( 2 )					      								    								  
116 BINARY_MODULO					      								    								  
118 LOAD_FAST 2 ( count )				      								    								  
120 LOAD_CONST 4 ( 1 )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 5 ( 2 )					      								    								  
126 BINARY_MODULO					      								    								  
128 COMPARE_OP 2 ( == )					      								    								  
130 POP_JUMP_IF_FALSE 160				      								    								  
132 LOAD_FAST 2 ( count )				      								    								  
134 LOAD_CONST 4 ( 1 )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 LOAD_CONST 5 ( 2 )					      								    								  
140 BINARY_MODULO					      								    								  
142 LOAD_FAST 2 ( count )				      								    								  
144 LOAD_CONST 5 ( 2 )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_CONST 5 ( 2 )					      								    								  
150 BINARY_MODULO					      								    								  
152 COMPARE_OP 2 ( == )					      								    								  
154 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
9 156 LOAD_CONST 5 ( 2 )				      								    								  
158 RETURN_VALUE					      								    								  
							      								    								  
10 >> 160 LOAD_CONST 4 ( 1 )				      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_EXIST_TWO_ELEMENTS_ARRAY_WHOSE_SUM_EQUAL_SUM_REST_ARRAY CHECK_EXIST_TWO_ELEMENTS_ARRAY_WHOSE_SUM_EQUAL_SUM_REST_ARRAY CHECK_EXIST_TWO_ELEMENTS_ARRAY_WHOSE_SUM_EQUAL_SUM_REST_ARRAY CHECK_EXIST_TWO_ELEMENTS_ARRAY_WHOSE_SUM_EQUAL_SUM_REST_ARRAY
--							      --							    --								  --
Disassembly of <code object checkPair at 0x7fbac0e89d20, file def checkPair ( arr , n ) :				    def checkPair ( arr , n ) :					  success : identical to gold
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  sum = 0						    	sum = 0							  
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      sum += arr [ i ]					    	    sum += arr [ i ]					  
3 6 LOAD_CONST 1 ( 0 )					      	  if sum % 2 != 0 :					    	if sum % 2 != 0 :					  
8 STORE_FAST 3 ( sum )					      	      return False					    	    return False					  
							      	  sum = sum / 2						    	sum = sum / 2						  
4 10 SETUP_LOOP 28 ( to 40 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
12 LOAD_GLOBAL 1 ( range )				      	      val = sum - arr [ i ]				    	    val = sum - arr [ i ]				  
14 LOAD_FAST 1 ( n )					      	      if arr [ i ] not in s :				    	    if arr [ i ] not in s :				  
16 CALL_FUNCTION 1					      		  s.add ( arr [ i ] )				    		s.add ( arr [ i ] )				  
18 GET_ITER						      	      if val in s :					    	    if val in s :					  
>> 20 FOR_ITER 16 ( to 38 )				      		  print ( "Pair elements are" , arr [ i ] , "and" , 		print ( "Pair elements are" , arr [ i ] , "and" , 
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 3 ( sum )				      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 INPLACE_ADD						      								    								  
34 STORE_FAST 3 ( sum )					      								    								  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 3 ( sum )				      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_MODULO					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 52 LOAD_CONST 3 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 3 ( sum )				      								    								  
58 LOAD_CONST 2 ( 2 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
9 64 SETUP_LOOP 84 ( to 150 )				      								    								  
66 LOAD_GLOBAL 1 ( range )				      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 72 ( to 148 )				      								    								  
76 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 78 LOAD_FAST 3 ( sum )				      								    								  
80 LOAD_FAST 0 ( arr )					      								    								  
82 LOAD_FAST 4 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 STORE_FAST 5 ( val )					      								    								  
							      								    								  
11 90 LOAD_FAST 0 ( arr )				      								    								  
92 LOAD_FAST 4 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 2 ( s )					      								    								  
98 COMPARE_OP 7 ( not in )				      								    								  
100 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
12 102 LOAD_FAST 2 ( s )				      								    								  
104 LOAD_METHOD 2 ( add )				      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_METHOD 1					      								    								  
114 POP_TOP						      								    								  
							      								    								  
13 >> 116 LOAD_FAST 5 ( val )				      								    								  
118 LOAD_FAST 2 ( s )					      								    								  
120 COMPARE_OP 6 ( in )					      								    								  
122 POP_JUMP_IF_FALSE 74				      								    								  
							      								    								  
14 124 LOAD_GLOBAL 3 ( print )				      								    								  
126 LOAD_CONST 4 ( 'Pair elements are' )		      								    								  
128 LOAD_FAST 0 ( arr )					      								    								  
130 LOAD_FAST 4 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 5 ( 'and' )				      								    								  
136 LOAD_GLOBAL 4 ( int )				      								    								  
138 LOAD_FAST 5 ( val )					      								    								  
140 CALL_FUNCTION 1					      								    								  
142 CALL_FUNCTION 4					      								    								  
144 POP_TOP						      								    								  
146 JUMP_ABSOLUTE 74					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GROUP_<unk> E_OCCURRENCE_OF_ARRAY_ELEMENTS_ORDERED_BY_FIRST_O GROUP_<unk> E_OCCURRENCE_OF_ARRAY_ELEMENTS_ORDERED_BY_FIRST_O GROUP_<unk> E_OCCURRENCE_OF_ARRAY_ELEMENTS_ORDERED_BY_FIRST_O GROUP_<unk> E_OCCURRENCE_OF_ARRAY_ELEMENTS_ORDERED_BY_FIRST_O
--							      --							    --								  --
Disassembly of <code object groupElements at 0x7fbac0e8d540,  def groupElements ( arr , n ) :				    def groupElements ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( False )				      	  visited = [ False ] * n				    	visited = [ False ] * n					  
2 BUILD_LIST 1						      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 LOAD_FAST 1 ( n )					      	      visited [ i ] = False				    	    visited [ i ] = False				  
6 BINARY_MULTIPLY					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
8 STORE_FAST 2 ( visited )				      	      if ( visited [ i ] == False ) :			    	    if visited [ i ] == False :				  
							      		  print ( arr [ i ] , end = " " )		    		print ( arr [ i ] , end = ' ' )			  
3 10 SETUP_LOOP 26 ( to 38 )				      		  for j in range ( i + 1 , n ) :		    		for j in range ( i + 1 , n ) :			  
12 LOAD_GLOBAL 0 ( range )				      		      if ( arr [ i ] == arr [ j ] ) :		    		    if arr [ i ] == arr [ j ] :			  
14 LOAD_CONST 2 ( 0 )					      			  print ( arr [ i ] , end = " " )	    			print ( arr [ i ] , end = ' ' )		  
16 LOAD_FAST 1 ( n )					      			  visited [ j ] = True			    			visited [ j ] = True			  
18 CALL_FUNCTION 2					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 12 ( to 36 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 26 LOAD_CONST 1 ( False )				      								    								  
28 LOAD_FAST 2 ( visited )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 STORE_SUBSCR						      								    								  
34 JUMP_ABSOLUTE 22					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 SETUP_LOOP 110 ( to 150 )			      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_CONST 2 ( 0 )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 96 ( to 148 )				      								    								  
52 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 54 LOAD_FAST 2 ( visited )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 1 ( False )				      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 66 LOAD_GLOBAL 1 ( print )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 3 ( ' ' )					      								    								  
76 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
78 CALL_FUNCTION_KW 2					      								    								  
80 POP_TOP						      								    								  
							      								    								  
8 82 SETUP_LOOP 62 ( to 146 )				      								    								  
84 LOAD_GLOBAL 0 ( range )				      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 LOAD_CONST 5 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 1 ( n )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 44 ( to 144 )				      								    								  
100 STORE_FAST 4 ( j )					      								    								  
							      								    								  
9 102 LOAD_FAST 0 ( arr )				      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 4 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 COMPARE_OP 2 ( == )					      								    								  
116 POP_JUMP_IF_FALSE 98				      								    								  
							      								    								  
10 118 LOAD_GLOBAL 1 ( print )				      								    								  
120 LOAD_FAST 0 ( arr )					      								    								  
122 LOAD_FAST 3 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_CONST 3 ( ' ' )				      								    								  
128 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
130 CALL_FUNCTION_KW 2					      								    								  
132 POP_TOP						      								    								  
							      								    								  
11 134 LOAD_CONST 6 ( True )				      								    								  
136 LOAD_FAST 2 ( visited )				      								    								  
138 LOAD_FAST 4 ( j )					      								    								  
140 STORE_SUBSCR					      								    								  
142 JUMP_ABSOLUTE 98					      								    								  
>> 144 POP_BLOCK					      								    								  
>> 146 JUMP_ABSOLUTE 50					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_ALMOST_SORTED_ARRAY				      SEARCH_ALMOST_SORTED_ARRAY				    SEARCH_ALMOST_SORTED_ARRAY					  SEARCH_ALMOST_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac0e8bc90, f def binarySearch ( arr , l , r , x ) :			    def binarySearch ( arr , l , r , x ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( r )					      	  if ( r >= l ) :					    	if r >= l :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 1 ( l )					      	      mid = int ( l + ( r - l ) / 2 )			    	    mid = int ( l + ( r - l ) / 2 )			  _sa.test/SEARCH_ALMOST_SORTED_ARRAY.py", line 49
4 COMPARE_OP 5 ( >= )					      	      if ( arr [ mid ] == x ) : return mid		    	    if arr [ mid ] == x : return mid			     ([-92,-96,-68,-40,70], 0, 4, ,    -96),
6 POP_JUMP_IF_FALSE 156					      	      if ( mid > l and arr [ mid - 1 ] == x ) :		    	    if mid > l and arr [ mid - 1 ] == x :		  			    ^ SyntaxError: invalid s
							      		  return ( mid - 1 )				    		return mid - 1					  yntax
3 8 LOAD_GLOBAL 0 ( int )				      	      if ( mid < r and arr [ mid + 1 ] == x ) :		    	    if mid < r and arr [ mid + 1 ] == x :		  
10 LOAD_FAST 1 ( l )					      		  return ( mid + 1 )				    		return mid + 1					  
12 LOAD_FAST 2 ( r )					      	      if ( arr [ mid ] > x ) :				    	    if arr [ mid ] > x :				  
14 LOAD_FAST 1 ( l )					      		  return binarySearch ( arr , l , mid - 2 , x )	    		return binarySearch ( arr , l , mid - 2 , x )	  
16 BINARY_SUBTRACT					      	      return binarySearch ( arr , mid + 2 , r , x )	    	    return binarySearch ( arr , mid + 2 , r , x )	  
18 LOAD_CONST 1 ( 2 )					      	  return - 1						    	return - 1						  
20 BINARY_TRUE_DIVIDE					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 1					      								    								  
26 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 4 ( mid )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( x )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
40 LOAD_FAST 4 ( mid )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
5 >> 44 LOAD_FAST 4 ( mid )				      								    								  
46 LOAD_FAST 1 ( l )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 76					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 4 ( mid )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 3 ( x )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
6 68 LOAD_FAST 4 ( mid )				      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
7 >> 76 LOAD_FAST 4 ( mid )				      								    								  
78 LOAD_FAST 2 ( r )					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 108				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 4 ( mid )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 3 ( x )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
8 100 LOAD_FAST 4 ( mid )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 RETURN_VALUE					      								    								  
							      								    								  
9 >> 108 LOAD_FAST 0 ( arr )				      								    								  
110 LOAD_FAST 4 ( mid )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 3 ( x )					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
10 120 LOAD_GLOBAL 1 ( binarySearch )			      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 1 ( l )					      								    								  
126 LOAD_FAST 4 ( mid )					      								    								  
128 LOAD_CONST 1 ( 2 )					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 LOAD_FAST 3 ( x )					      								    								  
134 CALL_FUNCTION 4					      								    								  
136 RETURN_VALUE					      								    								  
							      								    								  
11 >> 138 LOAD_GLOBAL 1 ( binarySearch )		      								    								  
140 LOAD_FAST 0 ( arr )					      								    								  
142 LOAD_FAST 4 ( mid )					      								    								  
144 LOAD_CONST 1 ( 2 )					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_FAST 2 ( r )					      								    								  
150 LOAD_FAST 3 ( x )					      								    								  
152 CALL_FUNCTION 4					      								    								  
154 RETURN_VALUE					      								    								  
							      								    								  
12 >> 156 LOAD_CONST 3 ( - 1 )				      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			      SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			    SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			  SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS
--							      --							    --								  --
Disassembly of <code object minRange at 0x7fbac0e8de40, file  def minRange ( arr , n , k ) :				    def minRange ( arr , n , k ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  l = 0							    	l = 0							  
2 STORE_FAST 3 ( l )					      	  r = n							    	r = n							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_FAST 1 ( n )					      	      s = [ ]						    	    s = [ ]						  
6 STORE_FAST 4 ( r )					      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
							      		  s.append ( arr [ j ] )			    		s.append ( arr [ j ] )				  
4 8 SETUP_LOOP 102 ( to 112 )				      		  if ( len ( s ) == k ) :			    		if len ( s ) == k :				  
10 LOAD_GLOBAL 0 ( range )				      		      if ( ( j - i ) < ( r - l ) ) :		    		    if j - i < r - l :				  
12 LOAD_FAST 1 ( n )					      			  r = j					    			r = j					  
14 CALL_FUNCTION 1					      			  l = i					    			l = i					  
16 GET_ITER						      		      break					    		    break					  
>> 18 FOR_ITER 90 ( to 110 )				      	      if ( j == n ) :					    	    if j == n :						  
20 STORE_FAST 5 ( i )					      		  break						    		break						  
							      	  if ( l == 0 and r == n ) :				    	if l == 0 and r == n :					  
5 22 BUILD_LIST 0					      	      print ( "Invalid k" )				    	    print ( "Invalid k" )				  
24 STORE_FAST 6 ( s )					      	  else :						    	else :							  
							      	      print ( l , r )					    	    print ( l , r )					  
6 26 SETUP_LOOP 70 ( to 98 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 56 ( to 96 )				      								    								  
40 STORE_FAST 7 ( j )					      								    								  
							      								    								  
7 42 LOAD_FAST 6 ( s )					      								    								  
44 LOAD_METHOD 1 ( append )				      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 7 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 CALL_METHOD 1					      								    								  
54 POP_TOP						      								    								  
							      								    								  
8 56 LOAD_GLOBAL 2 ( len )				      								    								  
58 LOAD_FAST 6 ( s )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 LOAD_FAST 2 ( k )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
9 68 LOAD_FAST 7 ( j )					      								    								  
70 LOAD_FAST 5 ( i )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 4 ( r )					      								    								  
76 LOAD_FAST 3 ( l )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
10 84 LOAD_FAST 7 ( j )					      								    								  
86 STORE_FAST 4 ( r )					      								    								  
							      								    								  
11 88 LOAD_FAST 5 ( i )					      								    								  
90 STORE_FAST 3 ( l )					      								    								  
							      								    								  
12 >> 92 BREAK_LOOP					      								    								  
94 JUMP_ABSOLUTE 38					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
13 >> 98 LOAD_FAST 7 ( j )				      								    								  
100 LOAD_FAST 1 ( n )					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 18				      								    								  
							      								    								  
14 106 BREAK_LOOP					      								    								  
108 JUMP_ABSOLUTE 18					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
15 >> 112 LOAD_FAST 3 ( l )				      								    								  
114 LOAD_CONST 1 ( 0 )					      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 138				      								    								  
120 LOAD_FAST 4 ( r )					      								    								  
122 LOAD_FAST 1 ( n )					      								    								  
124 COMPARE_OP 2 ( == )					      								    								  
126 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
16 128 LOAD_GLOBAL 3 ( print )				      								    								  
130 LOAD_CONST 2 ( 'Invalid k' )			      								    								  
132 CALL_FUNCTION 1					      								    								  
134 POP_TOP						      								    								  
136 JUMP_FORWARD 10 ( to 148 )				      								    								  
							      								    								  
18 >> 138 LOAD_GLOBAL 3 ( print )			      								    								  
140 LOAD_FAST 3 ( l )					      								    								  
142 LOAD_FAST 4 ( r )					      								    								  
144 CALL_FUNCTION 2					      								    								  
146 POP_TOP						      								    								  
>> 148 LOAD_CONST 0 ( None )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING	      SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING	    SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING		  SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING
--							      --							    --								  --
Disassembly of <code object sortByPattern at 0x7fbac0e8d540,  def sortByPattern ( str , pat ) :				    def sortByPattern ( str , pat ) :				  script_not_found : None
3 0 LOAD_CONST 1 ( 0 )					      	  global MAX_CHAR					    	global MAX_CHAR						  
2 BUILD_LIST 1						      	  count = [ 0 ] * MAX_CHAR				    	count = [ 0 ] * MAX_CHAR				  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	  for i in range ( 0 , len ( str ) ) :			    	for i in range ( 0 , len ( str ) ) :			  
6 BINARY_MULTIPLY					      	      count [ ord ( str [ i ] ) - 97 ] += 1		    	    count [ ord ( str [ i ] ) - 97 ] += 1		  
8 STORE_FAST 2 ( count )				      	  index = 0 ;						    	index = 0						  
							      	  str = ""						    	str = ''						  
4 10 SETUP_LOOP 50 ( to 62 )				      	  for i in range ( 0 , len ( pat ) ) :			    	for i in range ( 0 , len ( pat ) ) :			  
12 LOAD_GLOBAL 1 ( range )				      	      j = 0						    	    j = 0						  
14 LOAD_CONST 1 ( 0 )					      	      while ( j < count [ ord ( pat [ i ] ) - ord ( 'a' ) ] 	    while j < count [ ord ( pat [ i ] ) < ord ( 'a' ) ] : 
16 LOAD_GLOBAL 2 ( len )				      		  str += pat [ i ]				    		str += pat [ i ]				  
18 LOAD_FAST 0 ( str )					      		  j = j + 1					    		j = j + 1					  
20 CALL_FUNCTION 1					      		  index += 1					    		index += 1					  
22 CALL_FUNCTION 2					      	  return str						    return str							  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 32 ( to 60 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( count )				      								    								  
32 LOAD_GLOBAL 3 ( ord )				      								    								  
34 LOAD_FAST 0 ( str )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_CONST 2 ( 97 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 DUP_TOP_TWO						      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 ROT_THREE						      								    								  
56 STORE_SUBSCR						      								    								  
58 JUMP_ABSOLUTE 26					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_CONST 1 ( 0 )				      								    								  
64 STORE_FAST 4 ( index )				      								    								  
							      								    								  
7 66 LOAD_CONST 4 ( '' )				      								    								  
68 STORE_FAST 0 ( str )					      								    								  
							      								    								  
8 70 SETUP_LOOP 88 ( to 160 )				      								    								  
72 LOAD_GLOBAL 1 ( range )				      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 LOAD_GLOBAL 2 ( len )				      								    								  
78 LOAD_FAST 1 ( pat )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 CALL_FUNCTION 2					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 70 ( to 158 )				      								    								  
88 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 90 LOAD_CONST 1 ( 0 )					      								    								  
92 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 94 SETUP_LOOP 60 ( to 156 )				      								    								  
>> 96 LOAD_FAST 5 ( j )					      								    								  
98 LOAD_FAST 2 ( count )				      								    								  
100 LOAD_GLOBAL 3 ( ord )				      								    								  
102 LOAD_FAST 1 ( pat )					      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 LOAD_GLOBAL 3 ( ord )				      								    								  
112 LOAD_CONST 5 ( 'a' )				      								    								  
114 CALL_FUNCTION 1					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 BINARY_SUBSCR					      								    								  
120 COMPARE_OP 0 ( < )					      								    								  
122 POP_JUMP_IF_FALSE 154				      								    								  
							      								    								  
11 124 LOAD_FAST 0 ( str )				      								    								  
126 LOAD_FAST 1 ( pat )					      								    								  
128 LOAD_FAST 3 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 0 ( str )				      								    								  
							      								    								  
12 136 LOAD_FAST 5 ( j )				      								    								  
138 LOAD_CONST 3 ( 1 )					      								    								  
140 BINARY_ADD						      								    								  
142 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 144 LOAD_FAST 4 ( index )				      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 4 ( index )				      								    								  
152 JUMP_ABSOLUTE 96					      								    								  
>> 154 POP_BLOCK					      								    								  
>> 156 JUMP_ABSOLUTE 86					      								    								  
>> 158 POP_BLOCK					      								    								  
							      								    								  
14 >> 160 LOAD_FAST 0 ( str )				      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		      LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		    LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		  LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING
--							      --							    --								  --
Disassembly of <code object lexicographicSubConcat at 0x7fbac def lexicographicSubConcat ( s ) :			    def lexicographicSubConcat ( s ) :				  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s ) ;					    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  sub_count = ( n * ( n + 1 ) ) // 2 ;			    	sub_count = ( n * ( n + 1 ) ) // 2			  
4 CALL_FUNCTION 1					      	  arr = [ 0 ] * sub_count ;				    	arr = [ 0 ] * sub_count					  
6 STORE_FAST 1 ( n )					      	  index = 0 ;						    	index = 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_FAST 1 ( n )					      	      for j in range ( 1 , n - i + 1 ) :		    	    for j in range ( 1 , n - i + 1 ) :			  
10 LOAD_FAST 1 ( n )					      		  arr [ index ] = s [ i : i + j ] ;		    		arr [ index ] = s [ i : i + j ]			  
12 LOAD_CONST 1 ( 1 )					      		  index += 1 ;					    		index += 1					  
14 BINARY_ADD						      	  arr.sort ( ) ;					    	arr.sort ( )						  
16 BINARY_MULTIPLY					      	  res = "" ;						    	res = ''						  
18 LOAD_CONST 2 ( 2 )					      	  for i in range ( sub_count ) :			    	for i in range ( sub_count ) :				  
20 BINARY_FLOOR_DIVIDE					      	      res += arr [ i ] ;				    	    res += arr [ i ]					  
22 STORE_FAST 2 ( sub_count )				      	  return res ;						    	return res						  
							      								    								  
4 24 LOAD_CONST 3 ( 0 )					      								    								  
26 BUILD_LIST 1						      								    								  
28 LOAD_FAST 2 ( sub_count )				      								    								  
30 BINARY_MULTIPLY					      								    								  
32 STORE_FAST 3 ( arr )					      								    								  
							      								    								  
5 34 LOAD_CONST 3 ( 0 )					      								    								  
36 STORE_FAST 4 ( index )				      								    								  
							      								    								  
6 38 SETUP_LOOP 72 ( to 112 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 60 ( to 110 )				      								    								  
50 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 52 SETUP_LOOP 54 ( to 108 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 32 ( to 106 )				      								    								  
74 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( s )					      								    								  
78 LOAD_FAST 5 ( i )					      								    								  
80 LOAD_FAST 5 ( i )					      								    								  
82 LOAD_FAST 6 ( j )					      								    								  
84 BINARY_ADD						      								    								  
86 BUILD_SLICE 2					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 3 ( arr )					      								    								  
92 LOAD_FAST 4 ( index )				      								    								  
94 STORE_SUBSCR						      								    								  
							      								    								  
9 96 LOAD_FAST 4 ( index )				      								    								  
98 LOAD_CONST 1 ( 1 )					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 4 ( index )				      								    								  
104 JUMP_ABSOLUTE 72					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 JUMP_ABSOLUTE 48					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
10 >> 112 LOAD_FAST 3 ( arr )				      								    								  
114 LOAD_METHOD 2 ( sort )				      								    								  
116 CALL_METHOD 0					      								    								  
118 POP_TOP						      								    								  
							      								    								  
11 120 LOAD_CONST 4 ( '' )				      								    								  
122 STORE_FAST 7 ( res )				      								    								  
							      								    								  
12 124 SETUP_LOOP 28 ( to 154 )				      								    								  
126 LOAD_GLOBAL 1 ( range )				      								    								  
128 LOAD_FAST 2 ( sub_count )				      								    								  
130 CALL_FUNCTION 1					      								    								  
132 GET_ITER						      								    								  
>> 134 FOR_ITER 16 ( to 152 )				      								    								  
136 STORE_FAST 5 ( i )					      								    								  
							      								    								  
13 138 LOAD_FAST 7 ( res )				      								    								  
140 LOAD_FAST 3 ( arr )					      								    								  
142 LOAD_FAST 5 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 INPLACE_ADD						      								    								  
148 STORE_FAST 7 ( res )				      								    								  
150 JUMP_ABSOLUTE 134					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
14 >> 154 LOAD_FAST 7 ( res )				      								    								  
156 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME      FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME	    FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME	  FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8d540, file "< def search ( arr , low , high ) :				    def search ( arr , low , high ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if low > high :					    	if low > high :						  
2 LOAD_FAST 2 ( high )					      	      return None					    	    return None						  
4 COMPARE_OP 4 ( > )					      	  if low == high :					    	if low == high :					  
6 POP_JUMP_IF_FALSE 12					      	      return arr [ low ]				    	    return arr [ low ]					  
							      	  mid = ( low + high ) / 2 ;				    	mid = ( low + high ) / 2				  
3 8 LOAD_CONST 0 ( None )				      	  if mid % 2 == 0 :					    	if mid % 2 == 0 :					  
10 RETURN_VALUE						      	      if arr [ mid ] == arr [ mid + 1 ] :		    	    if arr [ mid ] == arr [ mid + 1 ] :			  
							      		  return search ( arr , mid + 2 , high )	    		return search ( arr , mid + 2 , high )		  
4 >> 12 LOAD_FAST 1 ( low )				      	      else :						    	    else :						  
14 LOAD_FAST 2 ( high )					      		  return search ( arr , low , mid )		    		return search ( arr , low , mid )		  
16 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
18 POP_JUMP_IF_FALSE 28					      	      if arr [ mid ] == arr [ mid - 1 ] :		    	    if arr [ mid ] == arr [ mid - 1 ] :			  
							      		  return search ( arr , mid + 1 , high )	    		return search ( arr , mid + 1 , high )		  
5 20 LOAD_FAST 0 ( arr )				      	      else :						    	    else :						  
22 LOAD_FAST 1 ( low )					      		  return search ( arr , low , mid - 1 )		    		return search ( arr , low , mid - 1 )		  
24 BINARY_SUBSCR					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 1 ( low )				      								    								  
30 LOAD_FAST 2 ( high )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_CONST 1 ( 2 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 40 LOAD_FAST 3 ( mid )				      								    								  
42 LOAD_CONST 1 ( 2 )					      								    								  
44 BINARY_MODULO					      								    								  
46 LOAD_CONST 2 ( 0 )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
8 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( mid )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( mid )					      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
9 72 LOAD_GLOBAL 0 ( search )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( mid )					      								    								  
78 LOAD_CONST 1 ( 2 )					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 2 ( high )					      								    								  
84 CALL_FUNCTION 3					      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
11 >> 88 LOAD_GLOBAL 0 ( search )			      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 1 ( low )					      								    								  
94 LOAD_FAST 3 ( mid )					      								    								  
96 CALL_FUNCTION 3					      								    								  
98 RETURN_VALUE						      								    								  
100 JUMP_FORWARD 52 ( to 154 )				      								    								  
							      								    								  
13 >> 102 LOAD_FAST 0 ( arr )				      								    								  
104 LOAD_FAST 3 ( mid )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 3 ( mid )					      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
14 122 LOAD_GLOBAL 0 ( search )				      								    								  
124 LOAD_FAST 0 ( arr )					      								    								  
126 LOAD_FAST 3 ( mid )					      								    								  
128 LOAD_CONST 3 ( 1 )					      								    								  
130 BINARY_ADD						      								    								  
132 LOAD_FAST 2 ( high )				      								    								  
134 CALL_FUNCTION 3					      								    								  
136 RETURN_VALUE					      								    								  
							      								    								  
16 >> 138 LOAD_GLOBAL 0 ( search )			      								    								  
140 LOAD_FAST 0 ( arr )					      								    								  
142 LOAD_FAST 1 ( low )					      								    								  
144 LOAD_FAST 3 ( mid )					      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 CALL_FUNCTION 3					      								    								  
152 RETURN_VALUE					      								    								  
>> 154 LOAD_CONST 0 ( None )				      								    								  
156 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			      CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			    CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			  CONVERT_DECIMAL_FRACTION_BINARY_NUMBER
--							      --							    --								  --
Disassembly of <code object decimalToBinary at 0x7fbac0e8de40 def decimalToBinary ( num , k_prec ) :			    def decimalToBinary ( num , k_prec ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  binary = ""						    	binary = ""						  
2 STORE_FAST 2 ( binary )				      	  Integral = int ( num )				    	Integral = int ( num )					  
							      	  <<unk>> al = num - Integral				    	text = num - Integral					  
3 4 LOAD_GLOBAL 0 ( int )				      	  while ( Integral ) :					    	while Integral :					  
6 LOAD_FAST 0 ( num )					      	      rem = Integral % 2				    	    rem = Integral % 2					  
8 CALL_FUNCTION 1					      	      binary += str ( rem ) ;				    	    binary += str ( rem )				  
10 STORE_FAST 3 ( Integral )				      	      Integral //= 2					    	    Integral = Integral // 2				  
							      	  binary = binary [ : : - 1 ]				    	binary = binary [ : - 1 ]				  
4 12 LOAD_FAST 0 ( num )				      	  binary += '.'						    	binary += '.'						  
14 LOAD_FAST 3 ( Integral )				      	  while ( k_prec ) :					    	while k_prec :						  
16 BINARY_SUBTRACT					      	      <<unk>> al *= 2					    	    sos al += 2						  
18 STORE_FAST 4 ( <<unk>> al )				      	      fract_bit = int ( <<unk>> al )			    	    fract_al = int ( BINARY_LSHIFT )			  
							      	      if ( fract_bit == 1 ) :				    	    if not ( fract_al ) == fract_bit + 1 ) :		  
5 20 SETUP_LOOP 36 ( to 58 )				      		  <<unk>> al -= fract_bit			    		but += " 70					  
>> 22 LOAD_FAST 3 ( Integral )				      		  binary += '1'					    		binary += "1"					  
24 POP_JUMP_IF_FALSE 56					      	      else :						    	    else :						  
							      		  binary += '0'					    		binary += "0"					  
6 26 LOAD_FAST 3 ( Integral )				      	      k_prec -= 1					    	    k_prec -= 1						  
28 LOAD_CONST 2 ( 2 )					      	  return binary						    	return binary						  
30 BINARY_MODULO					      								    								  
32 STORE_FAST 5 ( rem )					      								    								  
							      								    								  
7 34 LOAD_FAST 2 ( binary )				      								    								  
36 LOAD_GLOBAL 1 ( str )				      								    								  
38 LOAD_FAST 5 ( rem )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 2 ( binary )				      								    								  
							      								    								  
8 46 LOAD_FAST 3 ( Integral )				      								    								  
48 LOAD_CONST 2 ( 2 )					      								    								  
50 INPLACE_FLOOR_DIVIDE					      								    								  
52 STORE_FAST 3 ( Integral )				      								    								  
54 JUMP_ABSOLUTE 22					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
9 >> 58 LOAD_FAST 2 ( binary )				      								    								  
60 LOAD_CONST 0 ( None )				      								    								  
62 LOAD_CONST 0 ( None )				      								    								  
64 LOAD_CONST 3 ( - 1 )					      								    								  
66 BUILD_SLICE 3					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_FAST 2 ( binary )				      								    								  
							      								    								  
10 72 LOAD_FAST 2 ( binary )				      								    								  
74 LOAD_CONST 4 ( '.' )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 2 ( binary )				      								    								  
							      								    								  
11 80 SETUP_LOOP 66 ( to 148 )				      								    								  
>> 82 LOAD_FAST 1 ( k_prec )				      								    								  
84 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
12 86 LOAD_FAST 4 ( <<unk>> al )			      								    								  
88 LOAD_CONST 2 ( 2 )					      								    								  
90 INPLACE_MULTIPLY					      								    								  
92 STORE_FAST 4 ( <<unk>> al )				      								    								  
							      								    								  
13 94 LOAD_GLOBAL 0 ( int )				      								    								  
96 LOAD_FAST 4 ( <<unk>> al )				      								    								  
98 CALL_FUNCTION 1					      								    								  
100 STORE_FAST 6 ( fract_bit )				      								    								  
							      								    								  
14 102 LOAD_FAST 6 ( fract_bit )			      								    								  
104 LOAD_CONST 5 ( 1 )					      								    								  
106 COMPARE_OP 2 ( == )					      								    								  
108 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
15 110 LOAD_FAST 4 ( <<unk>> al )			      								    								  
112 LOAD_FAST 6 ( fract_bit )				      								    								  
114 INPLACE_SUBTRACT					      								    								  
116 STORE_FAST 4 ( <<unk>> al )				      								    								  
							      								    								  
16 118 LOAD_FAST 2 ( binary )				      								    								  
120 LOAD_CONST 6 ( '1' )				      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 2 ( binary )				      								    								  
126 JUMP_FORWARD 8 ( to 136 )				      								    								  
							      								    								  
18 >> 128 LOAD_FAST 2 ( binary )			      								    								  
130 LOAD_CONST 7 ( '0' )				      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 2 ( binary )				      								    								  
							      								    								  
19 >> 136 LOAD_FAST 1 ( k_prec )			      								    								  
138 LOAD_CONST 5 ( 1 )					      								    								  
140 INPLACE_SUBTRACT					      								    								  
142 STORE_FAST 1 ( k_prec )				      								    								  
144 JUMP_ABSOLUTE 82					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
20 >> 148 LOAD_FAST 2 ( binary )			      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH
--							      --							    --								  --
Disassembly of <code object pairInSortedRotated at 0x7fbac0e8 def pairInSortedRotated ( arr , n , x ) :			    def pairInSortedRotated ( arr , n , x ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 44 ( to 46 )				      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] > arr [ i + 1 ] ) :		    	    if arr [ i ] > arr [ i + 1 ] :			  _sa.test/GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_
4 LOAD_CONST 1 ( 0 )					      		  break ;					    		break						  THERE_IS_A_PAIR_WITH_A_GIVEN_SUM.py", line 46
6 LOAD_FAST 1 ( n )					      	  l = ( i + 1 ) % n					    	l = ( i + 1 ) % n					  return False	   ^ SyntaxError: 'return' outside f
8 LOAD_CONST 2 ( 1 )					      	  r = i							    	r = i							  unction
10 BINARY_SUBTRACT					      	  while ( l != r ) :					    	while l != r :						  
12 CALL_FUNCTION 2					      	      if ( arr [ l ] + arr [ r ] == x ) :		    	    if arr [ l ] + arr [ r ] == x :			  
14 GET_ITER						      		  return True ;					    		return True					  
>> 16 FOR_ITER 26 ( to 44 )				      	      if ( arr [ l ] + arr [ r ] < x ) :		    	    if arr [ l ] + arr [ r ] < x :			  
18 STORE_FAST 3 ( i )					      		  l = ( l + 1 ) % n ;				    		l = ( l + 1 ) % n				  
							      	      else :						    	    else :						  
3 20 LOAD_FAST 0 ( arr )				      		  r = ( n + r - 1 ) % n ;			    		r = ( n + r - 1 ) % n				  
22 LOAD_FAST 3 ( i )					      	  return False ;					    return False						  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 4 ( > )					      								    								  
38 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 40 BREAK_LOOP						      								    								  
42 JUMP_ABSOLUTE 16					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_FAST 3 ( i )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 4 ( l )					      								    								  
							      								    								  
6 58 LOAD_FAST 3 ( i )					      								    								  
60 STORE_FAST 5 ( r )					      								    								  
							      								    								  
7 62 SETUP_LOOP 86 ( to 150 )				      								    								  
>> 64 LOAD_FAST 4 ( l )					      								    								  
66 LOAD_FAST 5 ( r )					      								    								  
68 COMPARE_OP 3 ( != )					      								    								  
70 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
8 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 4 ( l )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 5 ( r )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( x )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
9 92 LOAD_CONST 3 ( True )				      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 0 ( arr )				      								    								  
98 LOAD_FAST 4 ( l )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 5 ( r )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 LOAD_FAST 2 ( x )					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
11 116 LOAD_FAST 4 ( l )				      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_FAST 1 ( n )					      								    								  
124 BINARY_MODULO					      								    								  
126 STORE_FAST 4 ( l )					      								    								  
128 JUMP_ABSOLUTE 64					      								    								  
							      								    								  
13 >> 130 LOAD_FAST 1 ( n )				      								    								  
132 LOAD_FAST 5 ( r )					      								    								  
134 BINARY_ADD						      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 LOAD_FAST 1 ( n )					      								    								  
142 BINARY_MODULO					      								    								  
144 STORE_FAST 5 ( r )					      								    								  
146 JUMP_ABSOLUTE 64					      								    								  
>> 148 POP_BLOCK					      								    								  
							      								    								  
14 >> 150 LOAD_CONST 4 ( False )			      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_LARGEST_PRIME_FACTOR_NUMBER_LESS_EQUAL_N		      SUM_LARGEST_PRIME_FACTOR_NUMBER_LESS_EQUAL_N		    SUM_LARGEST_PRIME_FACTOR_NUMBER_LESS_EQUAL_N		  SUM_LARGEST_PRIME_FACTOR_NUMBER_LESS_EQUAL_N
--							      --							    --								  --
Disassembly of <code object sumOfLargePrimeFactor at 0x7fbac0 def sumOfLargePrimeFactor ( n ) :				    def sumOfLargemeFactor ( n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  prime = [ 0 ] * ( n + 1 )				    	prime = [ 0 ] * ( n + 1 )				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  sum = 0						    	sum = 0							  _sa.test/SUM_LARGEST_PRIME_FACTOR_NUMBER_LESS_EQUA
4 LOAD_FAST 0 ( n )					      	  max = int ( n / 2 )					    	max = int ( n / 2 )					  L_N.py", line 46     return sum     ^ SyntaxError:
6 LOAD_CONST 2 ( 1 )					      	  for p in range ( 2 , max + 1 ) :			    	for p in range ( 2 , max + 1 ) :			   'return' outside function
8 BINARY_ADD						      	      if prime [ p ] == 0 :				    	    if prime [ p ] == 0 :				  
10 BINARY_MULTIPLY					      		  for i in range ( p * 2 , n + 1 , p ) :	    		for i in range ( p * 2 , n + 1 , p ) :		  
12 STORE_FAST 1 ( prime )				      		      prime [ i ] = p				    		    prime [ i ] = p				  
							      	  for p in range ( 2 , n + 1 ) :			    	for p in range ( 2 , n + 1 ) :				  
3 14 LOAD_CONST 1 ( 0 )					      	      if prime [ p ] :					    	    if prime [ p ] :					  
16 STORE_FAST 2 ( sum )					      		  sum += prime [ p ]				    		sum += prime [ p ]				  
							      	      else :						    	    else :						  
4 18 LOAD_GLOBAL 0 ( int )				      		  sum += p					    		sum += p					  
20 LOAD_FAST 0 ( n )					      	  return sum						    return sum							  
22 LOAD_CONST 3 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 STORE_FAST 3 ( max )					      								    								  
							      								    								  
5 30 SETUP_LOOP 72 ( to 104 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 3 ( max )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 54 ( to 102 )				      								    								  
48 STORE_FAST 4 ( p )					      								    								  
							      								    								  
6 50 LOAD_FAST 1 ( prime )				      								    								  
52 LOAD_FAST 4 ( p )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 62 SETUP_LOOP 36 ( to 100 )				      								    								  
64 LOAD_GLOBAL 1 ( range )				      								    								  
66 LOAD_FAST 4 ( p )					      								    								  
68 LOAD_CONST 3 ( 2 )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 4 ( p )					      								    								  
80 CALL_FUNCTION 3					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 12 ( to 98 )				      								    								  
86 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 88 LOAD_FAST 4 ( p )					      								    								  
90 LOAD_FAST 1 ( prime )				      								    								  
92 LOAD_FAST 5 ( i )					      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 84					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 46					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
9 >> 104 SETUP_LOOP 52 ( to 158 )			      								    								  
106 LOAD_GLOBAL 1 ( range )				      								    								  
108 LOAD_CONST 3 ( 2 )					      								    								  
110 LOAD_FAST 0 ( n )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 CALL_FUNCTION 2					      								    								  
118 GET_ITER						      								    								  
>> 120 FOR_ITER 34 ( to 156 )				      								    								  
122 STORE_FAST 4 ( p )					      								    								  
							      								    								  
10 124 LOAD_FAST 1 ( prime )				      								    								  
126 LOAD_FAST 4 ( p )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
11 132 LOAD_FAST 2 ( sum )				      								    								  
134 LOAD_FAST 1 ( prime )				      								    								  
136 LOAD_FAST 4 ( p )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 INPLACE_ADD						      								    								  
142 STORE_FAST 2 ( sum )				      								    								  
144 JUMP_ABSOLUTE 120					      								    								  
							      								    								  
13 >> 146 LOAD_FAST 2 ( sum )				      								    								  
148 LOAD_FAST 4 ( p )					      								    								  
150 INPLACE_ADD						      								    								  
152 STORE_FAST 2 ( sum )				      								    								  
154 JUMP_ABSOLUTE 120					      								    								  
>> 156 POP_BLOCK					      								    								  
							      								    								  
14 >> 158 LOAD_FAST 2 ( sum )				      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUB<unk> Y_LEAST_AVERAGE				      FIND_SUB<unk> Y_LEAST_AVERAGE				    FIND_SUB<unk> Y_LEAST_AVERAGE				  FIND_SUB<unk> Y_LEAST_AVERAGE
--							      --							    --								  --
Disassembly of <code object findMinAvgSubarray at 0x7fbac0e8b def findMinAvgSubarray ( arr , n , k ) :			    def findMinAvgSubarray ( arr , n , k ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n < k ) : return 0				    	if n < k : return 0					  
2 LOAD_FAST 2 ( k )					      	  res_index = 0						    	res_index = 0						  
4 COMPARE_OP 0 ( < )					      	  curr_sum = 0						    	curr_sum = 0						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( k ) :				    	for i in range ( k ) :					  
8 LOAD_CONST 1 ( 0 )					      	      curr_sum += arr [ i ]				    	    curr_sum += arr [ i ]				  
10 RETURN_VALUE						      	  min_sum = curr_sum					    	min_sum = curr_sum					  
							      	  for i in range ( k , n ) :				    	for i in range ( k , n ) :				  
3 >> 12 LOAD_CONST 1 ( 0 )				      	      curr_sum += arr [ i ] - arr [ i - k ]		    	    curr_sum += arr [ i ] - arr [ i - k ]		  
14 STORE_FAST 3 ( res_index )				      	      if ( curr_sum < min_sum ) :			    	    if curr_sum < min_sum :				  
							      		  min_sum = curr_sum				    		min_sum = curr_sum				  
4 16 LOAD_CONST 1 ( 0 )					      		  res_index = ( i - k + 1 )			    		res_index = i - k + 1				  
18 STORE_FAST 4 ( curr_sum )				      	  print ( "Subarray between [" , res_index , ", " , ( res_i 	print ( "Subarray between [" , res_index , ", " , res_ind 
							      								    								  
5 20 SETUP_LOOP 28 ( to 50 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 2 ( k )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 16 ( to 48 )				      								    								  
32 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 4 ( curr_sum )				      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 4 ( curr_sum )				      								    								  
46 JUMP_ABSOLUTE 30					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
7 >> 50 LOAD_FAST 4 ( curr_sum )			      								    								  
52 STORE_FAST 6 ( min_sum )				      								    								  
							      								    								  
8 54 SETUP_LOOP 66 ( to 122 )				      								    								  
56 LOAD_GLOBAL 0 ( range )				      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 52 ( to 120 )				      								    								  
68 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 70 LOAD_FAST 4 ( curr_sum )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 5 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 5 ( i )					      								    								  
82 LOAD_FAST 2 ( k )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
10 94 LOAD_FAST 4 ( curr_sum )				      								    								  
96 LOAD_FAST 6 ( min_sum )				      								    								  
98 COMPARE_OP 0 ( < )					      								    								  
100 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
11 102 LOAD_FAST 4 ( curr_sum )				      								    								  
104 STORE_FAST 6 ( min_sum )				      								    								  
							      								    								  
12 106 LOAD_FAST 5 ( i )				      								    								  
108 LOAD_FAST 2 ( k )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 STORE_FAST 3 ( res_index )				      								    								  
118 JUMP_ABSOLUTE 66					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
13 >> 122 LOAD_GLOBAL 1 ( print )			      								    								  
124 LOAD_CONST 3 ( 'Subarray between [' )		      								    								  
126 LOAD_FAST 3 ( res_index )				      								    								  
128 LOAD_CONST 4 ( ', ' )				      								    								  
130 LOAD_FAST 3 ( res_index )				      								    								  
132 LOAD_FAST 2 ( k )					      								    								  
134 BINARY_ADD						      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 LOAD_CONST 5 ( '] has minimum average' )		      								    								  
142 CALL_FUNCTION 5					      								    								  
144 POP_TOP						      								    								  
146 LOAD_CONST 0 ( None )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HARDY_RAMANUJAN_THEOREM					      HARDY_RAMANUJAN_THEOREM					    HARDY_RAMANUJAN_THEOREM					  HARDY_RAMANUJAN_THEOREM
--							      --							    --								  --
Disassembly of <code object exactPrimeFactorCount at 0x7fbac0 def exactPrimeFactorCount ( n ) :				    def hc PrimeFactorCount ( n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( count )				      	  if ( n % 2 == 0 ) :					    	if n % 2 == 0 :						  _sa.test/HARDY_RAMANUJAN_THEOREM.py", line 37
							      	      count = count + 1					    	    count = count + 1					  def f_filled PrimeFactorCount ( n ) :
3 4 LOAD_FAST 0 ( n )					      	      while ( n % 2 == 0 ) :				    	    while n % 2 == 0 :					  		      ^ SyntaxError: invalid syntax
6 LOAD_CONST 2 ( 2 )					      		  n = int ( n / 2 )				    		n = int ( n / 2 )				  
8 BINARY_MODULO						      	  i = 3							    	    i = 3						  
10 LOAD_CONST 1 ( 0 )					      	  while ( i <= int ( math.sqrt ( n ) ) ) :		    	    while i <= int ( math.sqrt ( n ) ) :		  
12 COMPARE_OP 2 ( == )					      	      if ( n % i == 0 ) :				    		if n % i == 0 :					  
14 POP_JUMP_IF_FALSE 54					      		  count = count + 1				    		    count = count + 1				  
							      		  while ( n % i == 0 ) :			    		    while n % i == 0 :				  
4 16 LOAD_FAST 1 ( count )				      		      n = int ( n / i )				    			n = int ( n / i )			  
18 LOAD_CONST 3 ( 1 )					      	      i = i + 2						    		i = i + 2					  
20 BINARY_ADD						      	  if ( n > 2 ) :					    	    if n > 2 :						  
22 STORE_FAST 1 ( count )				      	      count = count + 1					    		count = count + 1				  
							      	  return count						    	    return count					  
5 24 SETUP_LOOP 28 ( to 54 )				      								    								  
>> 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 BINARY_MODULO					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 38 LOAD_GLOBAL 0 ( int )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 STORE_FAST 0 ( n )					      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_CONST 4 ( 3 )				      								    								  
56 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 58 SETUP_LOOP 80 ( to 140 )				      								    								  
>> 60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_GLOBAL 0 ( int )				      								    								  
64 LOAD_GLOBAL 1 ( math )				      								    								  
66 LOAD_METHOD 2 ( sqrt )				      								    								  
68 LOAD_FAST 0 ( n )					      								    								  
70 CALL_METHOD 1					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 COMPARE_OP 1 ( <= )					      								    								  
76 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
9 78 LOAD_FAST 0 ( n )					      								    								  
80 LOAD_FAST 2 ( i )					      								    								  
82 BINARY_MODULO					      								    								  
84 LOAD_CONST 1 ( 0 )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
10 90 LOAD_FAST 1 ( count )				      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 1 ( count )				      								    								  
							      								    								  
11 98 SETUP_LOOP 28 ( to 128 )				      								    								  
>> 100 LOAD_FAST 0 ( n )				      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 BINARY_MODULO					      								    								  
106 LOAD_CONST 1 ( 0 )					      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
12 112 LOAD_GLOBAL 0 ( int )				      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 LOAD_FAST 2 ( i )					      								    								  
118 BINARY_TRUE_DIVIDE					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 STORE_FAST 0 ( n )					      								    								  
124 JUMP_ABSOLUTE 100					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
13 >> 128 LOAD_FAST 2 ( i )				      								    								  
130 LOAD_CONST 2 ( 2 )					      								    								  
132 BINARY_ADD						      								    								  
134 STORE_FAST 2 ( i )					      								    								  
136 JUMP_ABSOLUTE 60					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
14 >> 140 LOAD_FAST 0 ( n )				      								    								  
142 LOAD_CONST 2 ( 2 )					      								    								  
144 COMPARE_OP 4 ( > )					      								    								  
146 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
15 148 LOAD_FAST 1 ( count )				      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_ADD						      								    								  
154 STORE_FAST 1 ( count )				      								    								  
							      								    								  
16 >> 156 LOAD_FAST 1 ( count )				      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7fbac0e89d20, file "< def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  cum_sum = 0						    	cum_sum = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( cum_sum )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  _sa.test/MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_A
							      	      cum_sum += arr [ i ]				    	    cum_sum += arr [ i ]				  RRAY_1.py", line 42	  curr_val = next_val
3 4 SETUP_LOOP 30 ( to 36 )				      	  curr_val = 0						    	curr_val = 0						       ^ SyntaxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
8 LOAD_CONST 1 ( 0 )					      	      curr_val += i * arr [ i ]				    	    curr_val += i * arr [ i ]				  
10 LOAD_FAST 1 ( n )					      	  res = curr_val					    	res = curr_val						  
12 CALL_FUNCTION 2					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
14 GET_ITER						      	      next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + 	    next_val = curr_val + cum_sum [ arr [ i - 1 ] * ( arr 
>> 16 FOR_ITER 16 ( to 34 )				      	      curr_val = next_val				    	    curr_val = next_val					  
18 STORE_FAST 3 ( i )					      	      res = max ( res , next_val )			    	    res = max ( res , next_val )			  
							      	  return res						    	return res						  
4 20 LOAD_FAST 2 ( cum_sum )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 INPLACE_ADD						      								    								  
30 STORE_FAST 2 ( cum_sum )				      								    								  
32 JUMP_ABSOLUTE 16					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 LOAD_CONST 1 ( 0 )				      								    								  
38 STORE_FAST 4 ( curr_val )				      								    								  
							      								    								  
6 40 SETUP_LOOP 34 ( to 76 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 20 ( to 74 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 56 LOAD_FAST 4 ( curr_val )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 4 ( curr_val )				      								    								  
72 JUMP_ABSOLUTE 52					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_FAST 4 ( curr_val )			      								    								  
78 STORE_FAST 5 ( res )					      								    								  
							      								    								  
9 80 SETUP_LOOP 72 ( to 154 )				      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 LOAD_FAST 1 ( n )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 58 ( to 152 )				      								    								  
94 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 96 LOAD_FAST 4 ( curr_val )				      								    								  
98 LOAD_FAST 2 ( cum_sum )				      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 BINARY_SUBSCR					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 LOAD_FAST 0 ( arr )					      								    								  
116 LOAD_FAST 3 ( i )					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 1 ( n )					      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 BINARY_MULTIPLY					      								    								  
132 BINARY_ADD						      								    								  
134 STORE_FAST 6 ( next_val )				      								    								  
							      								    								  
11 136 LOAD_FAST 6 ( next_val )				      								    								  
138 STORE_FAST 4 ( curr_val )				      								    								  
							      								    								  
12 140 LOAD_GLOBAL 1 ( max )				      								    								  
142 LOAD_FAST 5 ( res )					      								    								  
144 LOAD_FAST 6 ( next_val )				      								    								  
146 CALL_FUNCTION 2					      								    								  
148 STORE_FAST 5 ( res )				      								    								  
150 JUMP_ABSOLUTE 92					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
13 >> 154 LOAD_FAST 5 ( res )				      								    								  
156 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS
--							      --							    --								  --
Disassembly of <code object countGroups at 0x7fbac0e8d540, fi def countGroups ( position , previous_sum , length , num ) :  def countGroups ( position , previous_sum , length , num ) :  script_not_found : None
2 0 LOAD_FAST 0 ( position )				      	  if ( position == length ) :				    	if position == length :					  
2 LOAD_FAST 2 ( length )				      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( dp [ position ] [ previous_sum ] != - 1 ) :	    	if dp [ position ] [ previous_sum ] != - 1 :		  
6 POP_JUMP_IF_FALSE 12					      	      return dp [ position ] [ previous_sum ]		    	    return dp [ position ] [ previous_sum ]		  
							      	  dp [ position ] [ previous_sum ] = 0			    	dp [ position ] [ previous_sum ] = 0			  
3 8 LOAD_CONST 1 ( 1 )					      	  res = 0						    	res = 0							  
10 RETURN_VALUE						      	  sum = 0						    	sum = 0							  
							      	  for i in range ( position , length ) :		    	for i in range ( position , length ) :			  
4 >> 12 LOAD_GLOBAL 0 ( dp )				      	      sum += ( ord ( num [ i ] ) - ord ( '0' ) )	    	    sum += ord ( num [ i ] ) - ord ( '0' )		  
14 LOAD_FAST 0 ( position )				      	      if ( sum >= previous_sum ) :			    	    if sum >= previous_sum :				  
16 BINARY_SUBSCR					      		  res += countGroups ( i + 1 , sum , length , num ) 		res += countGroups ( i + 1 , sum , length , num ) 
18 LOAD_FAST 1 ( previous_sum )				      	  dp [ position ] [ previous_sum ] = res		    return res							  
20 BINARY_SUBSCR					      	  return res						    								  
22 LOAD_CONST 2 ( - 1 )					      								    								  
24 COMPARE_OP 3 ( != )					      								    								  
26 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 28 LOAD_GLOBAL 0 ( dp )				      								    								  
30 LOAD_FAST 0 ( position )				      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( previous_sum )				      								    								  
36 BINARY_SUBSCR					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_CONST 3 ( 0 )				      								    								  
42 LOAD_GLOBAL 0 ( dp )					      								    								  
44 LOAD_FAST 0 ( position )				      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( previous_sum )				      								    								  
50 STORE_SUBSCR						      								    								  
							      								    								  
7 52 LOAD_CONST 3 ( 0 )					      								    								  
54 STORE_FAST 4 ( res )					      								    								  
							      								    								  
8 56 LOAD_CONST 3 ( 0 )					      								    								  
58 STORE_FAST 5 ( sum )					      								    								  
							      								    								  
9 60 SETUP_LOOP 72 ( to 134 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 0 ( position )				      								    								  
66 LOAD_FAST 2 ( length )				      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 58 ( to 132 )				      								    								  
74 STORE_FAST 6 ( i )					      								    								  
							      								    								  
10 76 LOAD_FAST 5 ( sum )				      								    								  
78 LOAD_GLOBAL 2 ( ord )				      								    								  
80 LOAD_FAST 3 ( num )					      								    								  
82 LOAD_FAST 6 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 LOAD_GLOBAL 2 ( ord )				      								    								  
90 LOAD_CONST 4 ( '0' )					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 5 ( sum )					      								    								  
							      								    								  
11 100 LOAD_FAST 5 ( sum )				      								    								  
102 LOAD_FAST 1 ( previous_sum )			      								    								  
104 COMPARE_OP 5 ( >= )					      								    								  
106 POP_JUMP_IF_FALSE 72				      								    								  
							      								    								  
12 108 LOAD_FAST 4 ( res )				      								    								  
110 LOAD_GLOBAL 3 ( countGroups )			      								    								  
112 LOAD_FAST 6 ( i )					      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_FAST 5 ( sum )					      								    								  
120 LOAD_FAST 2 ( length )				      								    								  
122 LOAD_FAST 3 ( num )					      								    								  
124 CALL_FUNCTION 4					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 4 ( res )				      								    								  
130 JUMP_ABSOLUTE 72					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
13 >> 134 LOAD_FAST 4 ( res )				      								    								  
136 LOAD_GLOBAL 0 ( dp )				      								    								  
138 LOAD_FAST 0 ( position )				      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 1 ( previous_sum )			      								    								  
144 STORE_SUBSCR					      								    								  
							      								    								  
14 146 LOAD_FAST 4 ( res )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING    SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING    SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING	  SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING
--							      --							    --								  --
Disassembly of <code object splitString at 0x7fbac0e89d20, fi def splitString ( str ) :					    def splitString ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  alpha = ""						    	alpha = ""						  
2 STORE_FAST 1 ( alpha )				      	  num = ""						    	num = ""						  
							      	  special = ""						    	special = ""						  
3 4 LOAD_CONST 1 ( '' )					      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
6 STORE_FAST 2 ( num )					      	      if ( str [ i ].isdigit ( ) ) :			    	    if str [ i ].isdigit ( ) :				  
							      		  num = num + str [ i ]				    		num = num + str [ i ]				  
4 8 LOAD_CONST 1 ( '' )					      	      elif ( ( str [ i ] >= 'A' and str [ i ] <= 'Z' ) or ( 	    elif str [ i ] >= "A" and str [ i ] <= "Z" or str [ i 
10 STORE_FAST 3 ( special )				      		  alpha += str [ i ]				    		alpha += str [ i ]				  
							      	      else :						    	    else :						  
5 12 SETUP_LOOP 120 ( to 134 )				      		  special += str [ i ]				    		special += str [ i ]				  
14 LOAD_GLOBAL 0 ( range )				      	  print ( alpha )					    	print ( alpha )						  
16 LOAD_GLOBAL 1 ( len )				      	  print ( num )						    	print ( special )					  
18 LOAD_FAST 0 ( str )					      	  print ( special )					    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 104 ( to 132 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( str )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_METHOD 2 ( isdigit )				      								    								  
38 CALL_METHOD 0					      								    								  
40 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 42 LOAD_FAST 2 ( num )				      								    								  
44 LOAD_FAST 0 ( str )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 2 ( num )					      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 56 LOAD_FAST 0 ( str )				      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 2 ( 'A' )					      								    								  
64 COMPARE_OP 5 ( >= )					      								    								  
66 POP_JUMP_IF_FALSE 80					      								    								  
68 LOAD_FAST 0 ( str )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 3 ( 'Z' )					      								    								  
76 COMPARE_OP 1 ( <= )					      								    								  
78 POP_JUMP_IF_TRUE 104					      								    								  
>> 80 LOAD_FAST 0 ( str )				      								    								  
82 LOAD_FAST 4 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 4 ( 'a' )					      								    								  
88 COMPARE_OP 5 ( >= )					      								    								  
90 POP_JUMP_IF_FALSE 118				      								    								  
92 LOAD_FAST 0 ( str )					      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 5 ( 'z' )					      								    								  
100 COMPARE_OP 1 ( <= )					      								    								  
102 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
9 >> 104 LOAD_FAST 1 ( alpha )				      								    								  
106 LOAD_FAST 0 ( str )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 1 ( alpha )				      								    								  
116 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 118 LOAD_FAST 3 ( special )			      								    								  
120 LOAD_FAST 0 ( str )					      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 3 ( special )				      								    								  
130 JUMP_ABSOLUTE 26					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
12 >> 134 LOAD_GLOBAL 3 ( print )			      								    								  
136 LOAD_FAST 1 ( alpha )				      								    								  
138 CALL_FUNCTION 1					      								    								  
140 POP_TOP						      								    								  
							      								    								  
13 142 LOAD_GLOBAL 3 ( print )				      								    								  
144 LOAD_FAST 2 ( num )					      								    								  
146 CALL_FUNCTION 1					      								    								  
148 POP_TOP						      								    								  
							      								    								  
14 150 LOAD_GLOBAL 3 ( print )				      								    								  
152 LOAD_FAST 3 ( special )				      								    								  
154 CALL_FUNCTION 1					      								    								  
156 POP_TOP						      								    								  
158 LOAD_CONST 0 ( None )				      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_IN_A_SORTED_ARRAY	      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_IN_A_SORTED_ARRAY	    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_IN_A_SORTED_ARRAY	  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8bc90, file "< def search ( arr , low , high ) :				    def search ( arr , low , high ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if low > high :					    	if low > high :						  
2 LOAD_FAST 2 ( high )					      	      return None					    	    return None						  
4 COMPARE_OP 4 ( > )					      	  if low == high :					    	if low == high :					  
6 POP_JUMP_IF_FALSE 12					      	      return arr [ low ]				    	    return arr [ low ]					  
							      	  mid = low + ( high - low ) / 2			    	mid = low + high - low / 2				  
3 8 LOAD_CONST 0 ( None )				      	  if mid % 2 == 0 :					    	if mid % 2 == 0 :					  
10 RETURN_VALUE						      	      if arr [ mid ] == arr [ mid + 1 ] :		    	    if arr [ mid ] == arr [ mid + 1 ] :			  
							      		  return search ( arr , mid + 2 , high )	    		return search ( arr , mid + 2 , high )		  
4 >> 12 LOAD_FAST 1 ( low )				      	      else :						    	    else :						  
14 LOAD_FAST 2 ( high )					      		  return search ( arr , low , mid )		    		return search ( arr , low , mid )		  
16 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
18 POP_JUMP_IF_FALSE 28					      	      if arr [ mid ] == arr [ mid - 1 ] :		    	    if arr [ mid ] == arr [ mid - 1 ] :			  
							      		  return search ( arr , mid + 1 , high )	    		return search ( arr , mid + 1 , high )		  
5 20 LOAD_FAST 0 ( arr )				      	      else :						    	    else :						  
22 LOAD_FAST 1 ( low )					      		  return search ( arr , low , mid - 1 )		    		return search ( arr , low , mid - 1 )		  
24 BINARY_SUBSCR					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 1 ( low )				      								    								  
30 LOAD_FAST 2 ( high )					      								    								  
32 LOAD_FAST 1 ( low )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 44 LOAD_FAST 3 ( mid )				      								    								  
46 LOAD_CONST 1 ( 2 )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 2 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
8 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 3 ( mid )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( mid )					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
9 76 LOAD_GLOBAL 0 ( search )				      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 3 ( mid )					      								    								  
82 LOAD_CONST 1 ( 2 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( high )					      								    								  
88 CALL_FUNCTION 3					      								    								  
90 RETURN_VALUE						      								    								  
							      								    								  
11 >> 92 LOAD_GLOBAL 0 ( search )			      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 1 ( low )					      								    								  
98 LOAD_FAST 3 ( mid )					      								    								  
100 CALL_FUNCTION 3					      								    								  
102 RETURN_VALUE					      								    								  
104 JUMP_FORWARD 52 ( to 158 )				      								    								  
							      								    								  
13 >> 106 LOAD_FAST 0 ( arr )				      								    								  
108 LOAD_FAST 3 ( mid )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 3 ( mid )					      								    								  
116 LOAD_CONST 3 ( 1 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_SUBSCR					      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
14 126 LOAD_GLOBAL 0 ( search )				      								    								  
128 LOAD_FAST 0 ( arr )					      								    								  
130 LOAD_FAST 3 ( mid )					      								    								  
132 LOAD_CONST 3 ( 1 )					      								    								  
134 BINARY_ADD						      								    								  
136 LOAD_FAST 2 ( high )				      								    								  
138 CALL_FUNCTION 3					      								    								  
140 RETURN_VALUE					      								    								  
							      								    								  
16 >> 142 LOAD_GLOBAL 0 ( search )			      								    								  
144 LOAD_FAST 0 ( arr )					      								    								  
146 LOAD_FAST 1 ( low )					      								    								  
148 LOAD_FAST 3 ( mid )					      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 CALL_FUNCTION 3					      								    								  
156 RETURN_VALUE					      								    								  
>> 158 LOAD_CONST 0 ( None )				      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1		      FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1			    FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1			  FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object getMinNumberForPattern at 0x7fbac def getMinNumberForPattern ( seq ) :			    def getMinNumberForPattern ( seq ) :			  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( seq )					    	n = len ( seq )						  
2 LOAD_FAST 0 ( seq )					      	  if ( n >= 9 ) :					    	if n >= 9 :						  
4 CALL_FUNCTION 1					      	      return "-1"					    	    return "-1"						  
6 STORE_FAST 1 ( n )					      	  result = [ None ] * ( n + 1 )				    	result = [ None ] * ( n + 1 )				  
							      	  count = 1						    	count = 1						  
3 8 LOAD_FAST 1 ( n )					      	  for i in range ( n + 1 ) :				    	for i in range ( n + 1 ) :				  
10 LOAD_CONST 1 ( 9 )					      	      if ( i == n or seq [ i ] == 'I' ) :		    	    if i == n or seq [ i ] == "I" :			  
12 COMPARE_OP 5 ( >= )					      		  for j in range ( i - 1 , - 2 , - 1 ) :	    		for j in range ( i - 1 , - 2 , - 1 ) :		  
14 POP_JUMP_IF_FALSE 20					      		      result [ j + 1 ] = int ( '0' + str ( count )  		    result [ j + 1 ] = int ( "0" + str ( count )  
							      		      count += 1				    		    count += 1					  
4 16 LOAD_CONST 2 ( '-1' )				      		      if ( j >= 0 and seq [ j ] == 'I' ) :	    		    if j >= 0 and seq [ j ] == "I" :		  
18 RETURN_VALUE						      			  break					    			break					  
							      	  return result						    	return result						  
5 >> 20 LOAD_CONST 0 ( None )				      								    								  
22 BUILD_LIST 1						      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 BINARY_MULTIPLY					      								    								  
32 STORE_FAST 2 ( result )				      								    								  
							      								    								  
6 34 LOAD_CONST 3 ( 1 )					      								    								  
36 STORE_FAST 3 ( count )				      								    								  
							      								    								  
7 38 SETUP_LOOP 120 ( to 160 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 104 ( to 158 )				      								    								  
54 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 56 LOAD_FAST 4 ( i )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_TRUE 76					      								    								  
64 LOAD_FAST 0 ( seq )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 4 ( 'I' )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
9 >> 76 SETUP_LOOP 78 ( to 156 )			      								    								  
78 LOAD_GLOBAL 1 ( range )				      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_CONST 5 ( - 2 )					      								    								  
88 LOAD_CONST 6 ( - 1 )					      								    								  
90 CALL_FUNCTION 3					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 58 ( to 154 )				      								    								  
96 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 98 LOAD_GLOBAL 2 ( int )				      								    								  
100 LOAD_CONST 7 ( '0' )				      								    								  
102 LOAD_GLOBAL 3 ( str )				      								    								  
104 LOAD_FAST 3 ( count )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_ADD						      								    								  
110 CALL_FUNCTION 1					      								    								  
112 LOAD_FAST 2 ( result )				      								    								  
114 LOAD_FAST 5 ( j )					      								    								  
116 LOAD_CONST 3 ( 1 )					      								    								  
118 BINARY_ADD						      								    								  
120 STORE_SUBSCR					      								    								  
							      								    								  
11 122 LOAD_FAST 3 ( count )				      								    								  
124 LOAD_CONST 3 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 3 ( count )				      								    								  
							      								    								  
12 130 LOAD_FAST 5 ( j )				      								    								  
132 LOAD_CONST 8 ( 0 )					      								    								  
134 COMPARE_OP 5 ( >= )					      								    								  
136 POP_JUMP_IF_FALSE 94				      								    								  
138 LOAD_FAST 0 ( seq )					      								    								  
140 LOAD_FAST 5 ( j )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_CONST 4 ( 'I' )				      								    								  
146 COMPARE_OP 2 ( == )					      								    								  
148 POP_JUMP_IF_FALSE 94				      								    								  
							      								    								  
13 150 BREAK_LOOP					      								    								  
152 JUMP_ABSOLUTE 94					      								    								  
>> 154 POP_BLOCK					      								    								  
>> 156 JUMP_ABSOLUTE 52					      								    								  
>> 158 POP_BLOCK					      								    								  
							      								    								  
14 >> 160 LOAD_FAST 2 ( result )			      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_DE<unk> INGS_GIVEN_DIGIT_SEQUENCE_1	      COUNT_POSSIBLE_DE<unk> INGS_GIVEN_DIGIT_SEQUENCE_1	    COUNT_POSSIBLE_DE<unk> INGS_GIVEN_DIGIT_SEQUENCE_1		  COUNT_POSSIBLE_DE<unk> INGS_GIVEN_DIGIT_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object countDecodingDP at 0x7fbac0e8bc90 def countDecodingDP ( digits , n ) :			    def countDecodingDP ( digits , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * ( n + 1 ) ;				    	count = [ 0 ] * ( n + 1 )				  
2 BUILD_LIST 1						      	  count [ 0 ] = 1 ;					    	count [ 0 ] = 1						  
4 LOAD_FAST 1 ( n )					      	  count [ 1 ] = 1 ;					    	count [ 1 ] = 1						  
6 LOAD_CONST 2 ( 1 )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
8 BINARY_ADD						      	      count [ i ] = 0 ;					    	    count [ i ] = 0					  
10 BINARY_MULTIPLY					      	      if ( digits [ i - 1 ] > '0' ) :			    	    if digits [ i - 1 ] > '0' :				  
12 STORE_FAST 2 ( count )				      		  count [ i ] = count [ i - 1 ] ;		    		count [ i ] = count [ i - 1 ]			  
							      	      if ( digits [ i - 2 ] == '1' or ( digits [ i - 2 ] == 	    if digits [ i - 2 ] == '1' or digits [ i - 2 ] == '2' 
3 14 LOAD_CONST 2 ( 1 )					      		  count [ i ] += count [ i - 2 ] ;		    		count [ i ] += count [ i - 2 ]			  
16 LOAD_FAST 2 ( count )				      	  return count [ n ] ;					    	return count [ n ]					  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 2 ( count )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 SETUP_LOOP 134 ( to 166 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 116 ( to 164 )				      								    								  
48 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 50 LOAD_CONST 1 ( 0 )					      								    								  
52 LOAD_FAST 2 ( count )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
7 58 LOAD_FAST 0 ( digits )				      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 4 ( '0' )					      								    								  
70 COMPARE_OP 4 ( > )					      								    								  
72 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
8 74 LOAD_FAST 2 ( count )				      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 2 ( count )				      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 STORE_SUBSCR						      								    								  
							      								    								  
9 >> 90 LOAD_FAST 0 ( digits )				      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 LOAD_CONST 3 ( 2 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 5 ( '1' )				      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_TRUE 138				      								    								  
106 LOAD_FAST 0 ( digits )				      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 LOAD_CONST 3 ( 2 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 6 ( '2' )				      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 46				      								    								  
122 LOAD_FAST 0 ( digits )				      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 7 ( '7' )				      								    								  
134 COMPARE_OP 0 ( < )					      								    								  
136 POP_JUMP_IF_FALSE 46				      								    								  
							      								    								  
10 >> 138 LOAD_FAST 2 ( count )				      								    								  
140 LOAD_FAST 3 ( i )					      								    								  
142 DUP_TOP_TWO						      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 2 ( count )				      								    								  
148 LOAD_FAST 3 ( i )					      								    								  
150 LOAD_CONST 3 ( 2 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 BINARY_SUBSCR					      								    								  
156 INPLACE_ADD						      								    								  
158 ROT_THREE						      								    								  
160 STORE_SUBSCR					      								    								  
162 JUMP_ABSOLUTE 46					      								    								  
>> 164 POP_BLOCK					      								    								  
							      								    								  
11 >> 166 LOAD_FAST 2 ( count )				      								    								  
168 LOAD_FAST 1 ( n )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR
--							      --							    --								  --
Disassembly of <code object alternateSubarray at 0x7fbac0e8bc def alternateSubarray ( arr , n ) :			    def alternateSubarray ( arr , n ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  len = [ ]						    	len = [ ]						  
2 STORE_FAST 2 ( len )					      	  for i in range ( n + 1 ) :				    	for i in range ( n + 1 ) :				  
							      	      len.append ( 0 )					    	    len.append ( 0 )					  
3 4 SETUP_LOOP 30 ( to 36 )				      	  len [ n - 1 ] = 1					    	len [ n - 1 ] = 1					  
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( n - 2 , - 1 , - 1 ) :		    	for i in range ( n - 2 , - 1 , - 1 ) :			  
8 LOAD_FAST 1 ( n )					      	      if ( arr [ i ] ^ arr [ i + 1 ] == True ) :	    	    if arr [ i ] ^ arr [ i + 1 ] == True :		  
10 LOAD_CONST 1 ( 1 )					      		  len [ i ] = len [ i + 1 ] + 1			    		len [ i ] = len [ i + 1 ] + 1			  
12 BINARY_ADD						      	      else :						    	    else :						  
14 CALL_FUNCTION 1					      		  len [ i ] = 1					    		len [ i ] = 1					  
16 GET_ITER						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
>> 18 FOR_ITER 14 ( to 34 )				      	      print ( len [ i ] , "" , end = "" )		    	    print ( len [ i ] , end = '' )			  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 2 ( len )				      								    								  
24 LOAD_METHOD 1 ( append )				      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 CALL_METHOD 1					      								    								  
30 POP_TOP						      								    								  
32 JUMP_ABSOLUTE 18					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 LOAD_CONST 1 ( 1 )				      								    								  
38 LOAD_FAST 2 ( len )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_SUBSCR						      								    								  
							      								    								  
6 48 SETUP_LOOP 78 ( to 128 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_CONST 4 ( - 1 )					      								    								  
60 LOAD_CONST 4 ( - 1 )					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 58 ( to 126 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_XOR						      								    								  
88 LOAD_CONST 5 ( True )				      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
8 94 LOAD_FAST 2 ( len )				      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 LOAD_CONST 1 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_FAST 2 ( len )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 STORE_SUBSCR					      								    								  
114 JUMP_ABSOLUTE 66					      								    								  
							      								    								  
10 >> 116 LOAD_CONST 1 ( 1 )				      								    								  
118 LOAD_FAST 2 ( len )					      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 STORE_SUBSCR					      								    								  
124 JUMP_ABSOLUTE 66					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
11 >> 128 SETUP_LOOP 34 ( to 164 )			      								    								  
130 LOAD_GLOBAL 0 ( range )				      								    								  
132 LOAD_FAST 1 ( n )					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 GET_ITER						      								    								  
>> 138 FOR_ITER 22 ( to 162 )				      								    								  
140 STORE_FAST 3 ( i )					      								    								  
							      								    								  
12 142 LOAD_GLOBAL 2 ( print )				      								    								  
144 LOAD_FAST 2 ( len )					      								    								  
146 LOAD_FAST 3 ( i )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_CONST 6 ( '' )					      								    								  
152 LOAD_CONST 6 ( '' )					      								    								  
154 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
156 CALL_FUNCTION_KW 3					      								    								  
158 POP_TOP						      								    								  
160 JUMP_ABSOLUTE 138					      								    								  
>> 162 POP_BLOCK					      								    								  
>> 164 LOAD_CONST 0 ( None )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1		    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object countRotations at 0x7fbac0e8de40, def countRotations ( arr , low , high ) :			    def countRotations ( arr , low , high ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 2 ( high )				      	  if ( high < low ) :					    	if high < low :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 1 ( low )					      	      return 0						    	    return 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/FIND_R
4 COMPARE_OP 0 ( < )					      	  if ( high == low ) :					    	if high == low :					  OTATION_COUNT_ROTATED_SORTED_ARRAY_1.py", line 64,
6 POP_JUMP_IF_FALSE 12					      	      return low					    	    return low						   in <module>	   if f_filled(*parameters_set) == f
							      	  mid = low + ( high - low ) / 2 ;			    	mid = low + high - low / 2				  _gold(*parameters_set):   File "/home/ubuntu/Trans
3 8 LOAD_CONST 1 ( 0 )					      	  mid = int ( mid )					    	mid = int ( mid )					  Coder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scrip
10 RETURN_VALUE						      	  if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) :	    	if mid < high and arr [ mid + 1 ] < arr [ mid ] :	  ts/dis_sa-python_sa.test/FIND_ROTATION_COUNT_ROTAT
							      	      return ( mid + 1 )				    	    return mid + 1					  ED_SORTED_ARRAY_1.py", line 42, in f_filled	  if
4 >> 12 LOAD_FAST 2 ( high )				      	  if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) :	    	if mid > low and arr [ mid ] < arr [ mid - 1 ] :	   mid > low and arr [ mid ] < arr [ mid - 1 ] : Ind
14 LOAD_FAST 1 ( low )					      	      return mid					    	    return mid						  exError: list index out of range
16 COMPARE_OP 2 ( == )					      	  if ( arr [ high ] > arr [ mid ] ) :			    	if arr [ high ] > arr [ mid ] :				  
18 POP_JUMP_IF_FALSE 24					      	      return countRotations ( arr , low , mid - 1 ) ;	    	    return countRotations ( arr , low , mid - 1 )	  
							      	  return countRotations ( arr , mid + 1 , high )	    	return countRotations ( arr , mid + 1 , high )		  
5 20 LOAD_FAST 1 ( low )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_FAST 1 ( low )				      								    								  
26 LOAD_FAST 2 ( high )					      								    								  
28 LOAD_FAST 1 ( low )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 40 LOAD_GLOBAL 0 ( int )				      								    								  
42 LOAD_FAST 3 ( mid )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
8 48 LOAD_FAST 3 ( mid )				      								    								  
50 LOAD_FAST 2 ( high )					      								    								  
52 COMPARE_OP 0 ( < )					      								    								  
54 POP_JUMP_IF_FALSE 84					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( mid )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 3 ( mid )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 0 ( < )					      								    								  
74 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
9 76 LOAD_FAST 3 ( mid )				      								    								  
78 LOAD_CONST 3 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 RETURN_VALUE						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 3 ( mid )				      								    								  
86 LOAD_FAST 1 ( low )					      								    								  
88 COMPARE_OP 4 ( > )					      								    								  
90 POP_JUMP_IF_FALSE 116				      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( mid )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 3 ( mid )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_SUBSCR					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
11 112 LOAD_FAST 3 ( mid )				      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
12 >> 116 LOAD_FAST 0 ( arr )				      								    								  
118 LOAD_FAST 2 ( high )				      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 3 ( mid )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 COMPARE_OP 4 ( > )					      								    								  
130 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
13 132 LOAD_GLOBAL 1 ( countRotations )			      								    								  
134 LOAD_FAST 0 ( arr )					      								    								  
136 LOAD_FAST 1 ( low )					      								    								  
138 LOAD_FAST 3 ( mid )					      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 CALL_FUNCTION 3					      								    								  
146 RETURN_VALUE					      								    								  
							      								    								  
14 >> 148 LOAD_GLOBAL 1 ( countRotations )		      								    								  
150 LOAD_FAST 0 ( arr )					      								    								  
152 LOAD_FAST 3 ( mid )					      								    								  
154 LOAD_CONST 3 ( 1 )					      								    								  
156 BINARY_ADD						      								    								  
158 LOAD_FAST 2 ( high )				      								    								  
160 CALL_FUNCTION 3					      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM_1				      FIND_SUBARRAY_WITH_GIVEN_SUM_1				    FIND_SUBARRAY_WITH_GIVEN_SUM_1				  FIND_SUBARRAY_WITH_GIVEN_SUM_1
--							      --							    --								  --
Disassembly of <code object subArraySum at 0x7fbac0e8de40, fi def subArraySum ( arr , n , sum ) :			    def subArraySum ( arr , n , sum = True ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  curr_sum = arr [ 0 ]					    	curr_sum = arr [ 0 ]					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0 )					      	  start = 0						    	start = 0						  _sa.test/FIND_SUBARRAY_WITH_GIVEN_SUM_1.py", line
4 BINARY_SUBSCR						      	  i = 1							    	i = 1							  52	 return 0     ^ SyntaxError: 'return' outsid
6 STORE_FAST 3 ( curr_sum )				      	  while i <= n :					    	while i <= n :						  e function
							      	      while curr_sum > sum and start < i - 1 :		    	    while curr_sum > sum and ( curr_sum < i - 1 ) :	  
3 8 LOAD_CONST 1 ( 0 )					      		  curr_sum = curr_sum - arr [ start ]		    		curr_sum = curr_sum - arr [ start ]		  
10 STORE_FAST 4 ( start )				      		  start += 1					    		start += 1					  
							      	      if curr_sum == sum :				    	    if curr_sum == sum :				  
4 12 LOAD_CONST 2 ( 1 )					      		  print ( "Sum found between indexes" )		    		print ( "Sum found between indexes" )		  
14 STORE_FAST 5 ( i )					      		  print ( "%d and %d" % ( start , i - 1 ) )	    		print ( "%d and %d" % ( start , i - 1 ) )	  
							      		  return 1					    		return 1					  
5 16 SETUP_LOOP 126 ( to 144 )				      	      if i < n :					    	    if i < n :						  
>> 18 LOAD_FAST 5 ( i )					      		  curr_sum = curr_sum + arr [ i ]		    		curr_sum = curr_sum + arr [ i ]			  
20 LOAD_FAST 1 ( n )					      	      i += 1						    	    i += 1						  
22 COMPARE_OP 1 ( <= )					      	  print ( "No subarray found" )				    print ( "No subarray found" )				  
24 POP_JUMP_IF_FALSE 142				      	  return 0						    return 0							  
							      								    								  
6 26 SETUP_LOOP 44 ( to 72 )				      								    								  
>> 28 LOAD_FAST 3 ( curr_sum )				      								    								  
30 LOAD_FAST 2 ( sum )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 70					      								    								  
36 LOAD_FAST 4 ( start )				      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( curr_sum )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( start )				      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
8 60 LOAD_FAST 4 ( start )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 4 ( start )				      								    								  
68 JUMP_ABSOLUTE 28					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
9 >> 72 LOAD_FAST 3 ( curr_sum )			      								    								  
74 LOAD_FAST 2 ( sum )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 80 LOAD_GLOBAL 0 ( print )				      								    								  
82 LOAD_CONST 3 ( 'Sum found between indexes' )		      								    								  
84 CALL_FUNCTION 1					      								    								  
86 POP_TOP						      								    								  
							      								    								  
11 88 LOAD_GLOBAL 0 ( print )				      								    								  
90 LOAD_CONST 4 ( '%d and %d' )				      								    								  
92 LOAD_FAST 4 ( start )				      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BUILD_TUPLE 2					      								    								  
102 BINARY_MODULO					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 POP_TOP						      								    								  
							      								    								  
12 108 LOAD_CONST 2 ( 1 )				      								    								  
110 RETURN_VALUE					      								    								  
							      								    								  
13 >> 112 LOAD_FAST 5 ( i )				      								    								  
114 LOAD_FAST 1 ( n )					      								    								  
116 COMPARE_OP 0 ( < )					      								    								  
118 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
14 120 LOAD_FAST 3 ( curr_sum )				      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 5 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_ADD						      								    								  
130 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
15 >> 132 LOAD_FAST 5 ( i )				      								    								  
134 LOAD_CONST 2 ( 1 )					      								    								  
136 INPLACE_ADD						      								    								  
138 STORE_FAST 5 ( i )					      								    								  
140 JUMP_ABSOLUTE 18					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
16 >> 144 LOAD_GLOBAL 0 ( print )			      								    								  
146 LOAD_CONST 5 ( 'No subarray found' )		      								    								  
148 CALL_FUNCTION 1					      								    								  
150 POP_TOP						      								    								  
							      								    								  
17 152 LOAD_CONST 1 ( 0 )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		      MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		    MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		  MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K
--							      --							    --								  --
Disassembly of <code object pairs at 0x7fbac0e89d20, file "<d def pairs ( arr , n , k ) :				    def pairs ( arr , n , k ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 999999999999 )			      	  smallest = 999999999999				    	smallest = 999999999999					  
2 STORE_FAST 3 ( smallest )				      	  count = 0						    	count = 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 2 ( 0 )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
6 STORE_FAST 4 ( count )				      		  if abs ( arr [ i ] + arr [ j ] - k ) < smallest : 		if abs ( arr [ i ] + arr [ j ] - k ) < smallest : 
							      		      smallest = abs ( arr [ i ] + arr [ j ] - k )  		    smallest = abs ( arr [ i ] + arr [ j ] - k )  
4 8 SETUP_LOOP 134 ( to 144 )				      		      count = 1					    		    count = 1					  
10 LOAD_GLOBAL 0 ( range )				      		  elif abs ( arr [ i ] + arr [ j ] - k ) == smalles 	    elif abs ( arr [ i ] + arr [ j ] - k ) == smallest :  
12 LOAD_FAST 1 ( n )					      		      count += 1				    		count += 1					  
14 CALL_FUNCTION 1					      	  print ( "Minimal Value = " , smallest )		    print ( "Minimal Value = " , smallest )			  
16 GET_ITER						      	  print ( "Total Pairs = " , count )			    print ( "Total Pairs = " , count )				  
>> 18 FOR_ITER 122 ( to 142 )				      								    								  
20 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 22 SETUP_LOOP 116 ( to 140 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 5 ( i )					      								    								  
28 LOAD_CONST 3 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 98 ( to 138 )				      								    								  
40 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 42 LOAD_GLOBAL 1 ( abs )				      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 5 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 6 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_FAST 3 ( smallest )				      								    								  
66 COMPARE_OP 0 ( < )					      								    								  
68 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
7 70 LOAD_GLOBAL 1 ( abs )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 5 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 6 ( j )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( k )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 CALL_FUNCTION 1					      								    								  
92 STORE_FAST 3 ( smallest )				      								    								  
							      								    								  
8 94 LOAD_CONST 3 ( 1 )					      								    								  
96 STORE_FAST 4 ( count )				      								    								  
98 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
9 >> 100 LOAD_GLOBAL 1 ( abs )				      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 5 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 6 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_FAST 2 ( k )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 LOAD_FAST 3 ( smallest )				      								    								  
124 COMPARE_OP 2 ( == )					      								    								  
126 POP_JUMP_IF_FALSE 38				      								    								  
							      								    								  
10 128 LOAD_FAST 4 ( count )				      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 4 ( count )				      								    								  
136 JUMP_ABSOLUTE 38					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 JUMP_ABSOLUTE 18					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
11 >> 144 LOAD_GLOBAL 2 ( print )			      								    								  
146 LOAD_CONST 4 ( 'Minimal Value = ' )			      								    								  
148 LOAD_FAST 3 ( smallest )				      								    								  
150 CALL_FUNCTION 2					      								    								  
152 POP_TOP						      								    								  
							      								    								  
12 154 LOAD_GLOBAL 2 ( print )				      								    								  
156 LOAD_CONST 5 ( 'Total Pairs = ' )			      								    								  
158 LOAD_FAST 4 ( count )				      								    								  
160 CALL_FUNCTION 2					      								    								  
162 POP_TOP						      								    								  
164 LOAD_CONST 0 ( None )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS_1					      TRIANGULAR_NUMBERS_1					    TRIANGULAR_NUMBERS_1					  TRIANGULAR_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object isTriangular at 0x7fbac0e89d20, f def isTriangular ( num ) :				    def isTriangular ( num ) :					  failure : #Results: 5, 10
2 0 LOAD_FAST 0 ( num )					      	  if ( num < 0 ) :					    	if num < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 0 ( < )					      	  c = ( - 2 * num )					    	c = - 2 * num						  
6 POP_JUMP_IF_FALSE 12					      	  b , a = 1 , 1						    	b , a = 1 , 1						  
							      	  d = ( b * b ) - ( 4 * a * c )				    	d = ( b * b ) - 4 * a * c				  
3 8 LOAD_CONST 2 ( False )				      	  if ( d < 0 ) :					    	if d < 0 :						  
10 RETURN_VALUE						      	      return False					    	    return False					  
							      	  root1 = ( - b + math.sqrt ( d ) ) / ( 2 * a )		    	root1 = ( - b ) / ( 2 * a )				  
4 >> 12 LOAD_CONST 3 ( - 2 )				      	  root2 = ( - b - math.sqrt ( d ) ) / ( 2 * a )		    	root2 = ( - b ) / ( math.sqrt ( d ) ) / ( 2 * a )	  
14 LOAD_FAST 0 ( num )					      	  if ( root1 > 0 and math.floor ( root1 ) == root1 ) :	    	if ( root1 > 0 ) and ( math.floor ( root1 ) == root1 ) :  
16 BINARY_MULTIPLY					      	      return True					    	    return True						  
18 STORE_FAST 1 ( c )					      	  if ( root2 > 0 and math.floor ( root2 ) == root2 ) :	    	if ( root2 > 0 ) and ( math.floor ( root2 ) == root2 ) :  
							      	      return True					    	    return True						  
5 20 LOAD_CONST 4 ( ( 1 , 1 ) )				      	  return False						    	return False						  
22 UNPACK_SEQUENCE 2					      								    								  
24 STORE_FAST 2 ( b )					      								    								  
26 STORE_FAST 3 ( a )					      								    								  
							      								    								  
6 28 LOAD_FAST 2 ( b )					      								    								  
30 LOAD_FAST 2 ( b )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_CONST 5 ( 4 )					      								    								  
36 LOAD_FAST 3 ( a )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 LOAD_FAST 1 ( c )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_FAST 4 ( d )					      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( d )					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 0 ( < )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_CONST 2 ( False )				      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 2 ( b )				      								    								  
62 UNARY_NEGATIVE					      								    								  
64 LOAD_GLOBAL 0 ( math )				      								    								  
66 LOAD_METHOD 1 ( sqrt )				      								    								  
68 LOAD_FAST 4 ( d )					      								    								  
70 CALL_METHOD 1					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_CONST 6 ( 2 )					      								    								  
76 LOAD_FAST 3 ( a )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 BINARY_TRUE_DIVIDE					      								    								  
82 STORE_FAST 5 ( root1 )				      								    								  
							      								    								  
10 84 LOAD_FAST 2 ( b )					      								    								  
86 UNARY_NEGATIVE					      								    								  
88 LOAD_GLOBAL 0 ( math )				      								    								  
90 LOAD_METHOD 1 ( sqrt )				      								    								  
92 LOAD_FAST 4 ( d )					      								    								  
94 CALL_METHOD 1					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 LOAD_CONST 6 ( 2 )					      								    								  
100 LOAD_FAST 3 ( a )					      								    								  
102 BINARY_MULTIPLY					      								    								  
104 BINARY_TRUE_DIVIDE					      								    								  
106 STORE_FAST 6 ( root2 )				      								    								  
							      								    								  
11 108 LOAD_FAST 5 ( root1 )				      								    								  
110 LOAD_CONST 1 ( 0 )					      								    								  
112 COMPARE_OP 4 ( > )					      								    								  
114 POP_JUMP_IF_FALSE 134				      								    								  
116 LOAD_GLOBAL 0 ( math )				      								    								  
118 LOAD_METHOD 2 ( floor )				      								    								  
120 LOAD_FAST 5 ( root1 )				      								    								  
122 CALL_METHOD 1					      								    								  
124 LOAD_FAST 5 ( root1 )				      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
12 130 LOAD_CONST 7 ( True )				      								    								  
132 RETURN_VALUE					      								    								  
							      								    								  
13 >> 134 LOAD_FAST 6 ( root2 )				      								    								  
136 LOAD_CONST 1 ( 0 )					      								    								  
138 COMPARE_OP 4 ( > )					      								    								  
140 POP_JUMP_IF_FALSE 160				      								    								  
142 LOAD_GLOBAL 0 ( math )				      								    								  
144 LOAD_METHOD 2 ( floor )				      								    								  
146 LOAD_FAST 6 ( root2 )				      								    								  
148 CALL_METHOD 1					      								    								  
150 LOAD_FAST 6 ( root2 )				      								    								  
152 COMPARE_OP 2 ( == )					      								    								  
154 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
14 156 LOAD_CONST 7 ( True )				      								    								  
158 RETURN_VALUE					      								    								  
							      								    								  
15 >> 160 LOAD_CONST 2 ( False )			      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		      COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		    COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		  COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX
--							      --							    --								  --
Disassembly of <code object printCommonElements at 0x7fbac0e8 def printCommonElements ( mat ) :				    def printCommonElements ( mat ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  mp = dict ( )						    	mp = dict ( )						  
2 CALL_FUNCTION 0					      	  for j in range ( N ) :				    	for j in range ( N ) :					  
4 STORE_FAST 1 ( mp )					      	      mp [ mat [ 0 ] [ j ] ] = 1			    	    mp [ mat [ 0 ] [ j ] ] = 1				  
							      	  for i in range ( 1 , M ) :				    	for i in range ( 1 , M ) :				  
3 6 SETUP_LOOP 32 ( to 40 )				      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
8 LOAD_GLOBAL 1 ( range )				      		  if ( mat [ i ] [ j ] in mp.keys ( ) and mp [ mat  		if mat [ i ] [ j ] in mp.keys ( ) and mp [ mat [  
10 LOAD_GLOBAL 2 ( N )					      		      mp [ mat [ i ] [ j ] ] = i + 1		    		    mp [ mat [ i ] [ j ] ] = i + 1		  
12 CALL_FUNCTION 1					      		      if i == M - 1 :				    		    if i == M - 1 :				  
14 GET_ITER						      			  print ( mat [ i ] [ j ] , end = " " )	    			print ( mat [ i ] [ j ] , end = " " )	  
>> 16 FOR_ITER 20 ( to 38 )				      								    								  
18 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_FAST 1 ( mp )					      								    								  
24 LOAD_FAST 0 ( mat )					      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 2 ( j )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 16					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 128 ( to 170 )			      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 LOAD_GLOBAL 3 ( M )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 114 ( to 168 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 56 SETUP_LOOP 108 ( to 166 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_GLOBAL 2 ( N )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 96 ( to 164 )				      								    								  
68 STORE_FAST 2 ( j )					      								    								  
							      								    								  
7 70 LOAD_FAST 0 ( mat )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 2 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( mp )					      								    								  
82 LOAD_METHOD 4 ( keys )				      								    								  
84 CALL_METHOD 0					      								    								  
86 COMPARE_OP 6 ( in )					      								    								  
88 POP_JUMP_IF_FALSE 66					      								    								  
90 LOAD_FAST 1 ( mp )					      								    								  
92 LOAD_FAST 0 ( mat )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 2 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 COMPARE_OP 2 ( == )					      								    								  
108 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
8 110 LOAD_FAST 3 ( i )					      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_FAST 1 ( mp )					      								    								  
118 LOAD_FAST 0 ( mat )					      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 2 ( j )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 STORE_SUBSCR					      								    								  
							      								    								  
9 130 LOAD_FAST 3 ( i )					      								    								  
132 LOAD_GLOBAL 3 ( M )					      								    								  
134 LOAD_CONST 1 ( 1 )					      								    								  
136 BINARY_SUBTRACT					      								    								  
138 COMPARE_OP 2 ( == )					      								    								  
140 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
10 142 LOAD_GLOBAL 5 ( print )				      								    								  
144 LOAD_FAST 0 ( mat )					      								    								  
146 LOAD_FAST 3 ( i )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_FAST 2 ( j )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_CONST 3 ( ' ' )				      								    								  
156 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
158 CALL_FUNCTION_KW 2					      								    								  
160 POP_TOP						      								    								  
162 JUMP_ABSOLUTE 66					      								    								  
>> 164 POP_BLOCK					      								    								  
>> 166 JUMP_ABSOLUTE 52					      								    								  
>> 168 POP_BLOCK					      								    								  
>> 170 LOAD_CONST 0 ( None )				      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	      MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	    MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	  MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX
--							      --							    --								  --
Disassembly of <code object minOperation at 0x7fbac0e8bc90, f def minOperation ( arr ) :				    def minOperation ( arr ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  
2 STORE_FAST 1 ( ans )					      	  for i in range ( N - 1 , - 1 , - 1 ) :		    	for i in range ( N - 1 , - 1 , - 1 ) :			  
							      	      for j in range ( M - 1 , - 1 , - 1 ) :		    	    for j in range ( M - 1 , - 1 , - 1 ) :		  
3 4 SETUP_LOOP 160 ( to 166 )				      		  if ( arr [ i ] [ j ] == 0 ) :			    		if arr [ i ] [ j ] == 0 :			  
6 LOAD_GLOBAL 0 ( range )				      		      ans += 1					    		    ans += 1					  
8 LOAD_GLOBAL 1 ( N )					      		      for k in range ( i + 1 ) :		    		    for k in range ( i + 1 ) :			  
10 LOAD_CONST 2 ( 1 )					      			  for h in range ( j + 1 ) :		    			for h in range ( j + 1 ) :		  
12 BINARY_SUBTRACT					      			      if ( arr [ k ] [ h ] == 1 ) :	    			    if arr [ k ] [ h ] == 1 :		  
14 LOAD_CONST 3 ( - 1 )					      				  arr [ k ] [ h ] = 0		    				arr [ k ] [ h ] = 0		  
16 LOAD_CONST 3 ( - 1 )					      			      else :				    			    else :				  
18 CALL_FUNCTION 3					      				  arr [ k ] [ h ] = 1		    				arr [ k ] [ h ] = 1		  
20 GET_ITER						      	  return ans						    	    return ans						  
>> 22 FOR_ITER 140 ( to 164 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 26 SETUP_LOOP 134 ( to 162 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_GLOBAL 2 ( M )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 3 ( - 1 )					      								    								  
38 LOAD_CONST 3 ( - 1 )					      								    								  
40 CALL_FUNCTION 3					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 114 ( to 160 )				      								    								  
46 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 64 LOAD_FAST 1 ( ans )				      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 1 ( ans )					      								    								  
							      								    								  
7 72 SETUP_LOOP 84 ( to 158 )				      								    								  
74 LOAD_GLOBAL 0 ( range )				      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 68 ( to 156 )				      								    								  
88 STORE_FAST 4 ( k )					      								    								  
							      								    								  
8 90 SETUP_LOOP 62 ( to 154 )				      								    								  
92 LOAD_GLOBAL 0 ( range )				      								    								  
94 LOAD_FAST 3 ( j )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 CALL_FUNCTION 1					      								    								  
102 GET_ITER						      								    								  
>> 104 FOR_ITER 46 ( to 152 )				      								    								  
106 STORE_FAST 5 ( h )					      								    								  
							      								    								  
9 108 LOAD_FAST 0 ( arr )				      								    								  
110 LOAD_FAST 4 ( k )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 5 ( h )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 COMPARE_OP 2 ( == )					      								    								  
122 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
10 124 LOAD_CONST 1 ( 0 )				      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 4 ( k )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 5 ( h )					      								    								  
134 STORE_SUBSCR					      								    								  
136 JUMP_ABSOLUTE 104					      								    								  
							      								    								  
12 >> 138 LOAD_CONST 2 ( 1 )				      								    								  
140 LOAD_FAST 0 ( arr )					      								    								  
142 LOAD_FAST 4 ( k )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 5 ( h )					      								    								  
148 STORE_SUBSCR					      								    								  
150 JUMP_ABSOLUTE 104					      								    								  
>> 152 POP_BLOCK					      								    								  
>> 154 JUMP_ABSOLUTE 86					      								    								  
>> 156 POP_BLOCK					      								    								  
>> 158 JUMP_ABSOLUTE 44					      								    								  
>> 160 POP_BLOCK					      								    								  
>> 162 JUMP_ABSOLUTE 22					      								    								  
>> 164 POP_BLOCK					      								    								  
							      								    								  
13 >> 166 LOAD_FAST 1 ( ans )				      								    								  
168 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY	      FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY	    FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY		  FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY
--							      --							    --								  --
Disassembly of <code object findMin at 0x7fbac0e8bc90, file " def findMin ( arr , low , high ) :			    def findMin ( arr , low , high ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 2 ( high )				      	  if high < low :					    	if high < low :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 1 ( low )					      	      return arr [ 0 ]					    	    return arr [ 0 ]					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/FIND_M
4 COMPARE_OP 0 ( < )					      	  if high == low :					    	if high == low :					  INIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY.py",
6 POP_JUMP_IF_FALSE 16					      	      return arr [ low ]				    	    return arr [ low ]					  line 62, in <module>	   if f_filled(*parameters_s
							      	  mid = int ( ( low + high ) / 2 )			    	mid = int ( low + high ) / 2				  et) == f_gold(*parameters_set):   File "/home/ubun
3 8 LOAD_FAST 0 ( arr )					      	  if mid < high and arr [ mid + 1 ] < arr [ mid ] :	    	if mid < high and arr [ mid + 1 ] < arr [ mid ] :	  tu/TransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/ev
10 LOAD_CONST 1 ( 0 )					      	      return arr [ mid + 1 ]				    	    return arr [ mid + 1 ]				  al_scripts/dis_sa-python_sa.test/FIND_MINIMUM_ELEM
12 BINARY_SUBSCR					      	  if mid > low and arr [ mid ] < arr [ mid - 1 ] :	    	if mid > low and arr [ mid ] < arr [ mid - 1 ] :	  ENT_IN_A_SORTED_AND_ROTATED_ARRAY.py", line 38, in
14 RETURN_VALUE						      	      return arr [ mid ]				    	    return arr [ mid ]					   f_filled	if mid < high and arr [ mid + 1 ] <
							      	  if arr [ high ] > arr [ mid ] :			    	if arr [ high ] > arr [ mid ] :				  arr [ mid ] : TypeError: list indices must be inte
4 >> 16 LOAD_FAST 2 ( high )				      	      return findMin ( arr , low , mid - 1 )		    	    return findMin ( arr , low , mid - 1 )		  gers or slices, not float
18 LOAD_FAST 1 ( low )					      	  return findMin ( arr , mid + 1 , high )		    	return findMin ( arr , mid + 1 , high )			  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 1 ( low )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( int )				      								    								  
34 LOAD_FAST 1 ( low )					      								    								  
36 LOAD_FAST 2 ( high )					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( mid )				      								    								  
50 LOAD_FAST 2 ( high )					      								    								  
52 COMPARE_OP 0 ( < )					      								    								  
54 POP_JUMP_IF_FALSE 88					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( mid )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 3 ( mid )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 0 ( < )					      								    								  
74 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 3 ( mid )					      								    								  
80 LOAD_CONST 3 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 BINARY_SUBSCR					      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 3 ( mid )				      								    								  
90 LOAD_FAST 1 ( low )					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 124				      								    								  
96 LOAD_FAST 0 ( arr )					      								    								  
98 LOAD_FAST 3 ( mid )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 3 ( mid )					      								    								  
106 LOAD_CONST 3 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 BINARY_SUBSCR					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
10 116 LOAD_FAST 0 ( arr )				      								    								  
118 LOAD_FAST 3 ( mid )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 RETURN_VALUE					      								    								  
							      								    								  
11 >> 124 LOAD_FAST 0 ( arr )				      								    								  
126 LOAD_FAST 2 ( high )				      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 0 ( arr )					      								    								  
132 LOAD_FAST 3 ( mid )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 COMPARE_OP 4 ( > )					      								    								  
138 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
12 140 LOAD_GLOBAL 1 ( findMin )			      								    								  
142 LOAD_FAST 0 ( arr )					      								    								  
144 LOAD_FAST 1 ( low )					      								    								  
146 LOAD_FAST 3 ( mid )					      								    								  
148 LOAD_CONST 3 ( 1 )					      								    								  
150 BINARY_SUBTRACT					      								    								  
152 CALL_FUNCTION 3					      								    								  
154 RETURN_VALUE					      								    								  
							      								    								  
13 >> 156 LOAD_GLOBAL 1 ( findMin )			      								    								  
158 LOAD_FAST 0 ( arr )					      								    								  
160 LOAD_FAST 3 ( mid )					      								    								  
162 LOAD_CONST 3 ( 1 )					      								    								  
164 BINARY_ADD						      								    								  
166 LOAD_FAST 2 ( high )				      								    								  
168 CALL_FUNCTION 3					      								    								  
170 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_
--							      --							    --								  --
Disassembly of <code object swapUpperToLower at 0x7fbac0e8d54 def swapUpperToLower ( arr ) :				    def swapUpperTobroken ( arr ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 4 )					      	  n = 4 ;						    	n = 4							  
2 STORE_FAST 1 ( n )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 86 ( to 92 )				      		  temp = arr [ i ] [ j ] ;			    		temp = arr [ i ] [ j ]				  
6 LOAD_GLOBAL 0 ( range )				      		  arr [ i ] [ j ] = arr [ j ] [ i ] ;		    		arr [ i ] [ j ] = arr [ j ] [ i ]		  
8 LOAD_CONST 2 ( 0 )					      		  arr [ j ] [ i ] = temp ;			    		arr [ j ] [ i ] = temp				  
10 LOAD_FAST 1 ( n )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
12 CALL_FUNCTION 2					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
14 GET_ITER						      		  print ( arr [ i ] [ j ] , end = " " ) ;	    		print ( arr [ i ] [ j ] , end = " " )		  
>> 16 FOR_ITER 72 ( to 90 )				      	      print ( " " ) ;					    	print ( " " )						  
18 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 66 ( to 88 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 48 ( to 86 )				      								    								  
38 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 3 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 3 ( j )					      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
7 72 LOAD_FAST 4 ( temp )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 2 ( i )					      								    								  
82 STORE_SUBSCR						      								    								  
84 JUMP_ABSOLUTE 36					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 16					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
8 >> 92 SETUP_LOOP 66 ( to 160 )			      								    								  
94 LOAD_GLOBAL 0 ( range )				      								    								  
96 LOAD_CONST 2 ( 0 )					      								    								  
98 LOAD_FAST 1 ( n )					      								    								  
100 CALL_FUNCTION 2					      								    								  
102 GET_ITER						      								    								  
>> 104 FOR_ITER 52 ( to 158 )				      								    								  
106 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 108 SETUP_LOOP 38 ( to 148 )				      								    								  
110 LOAD_GLOBAL 0 ( range )				      								    								  
112 LOAD_CONST 2 ( 0 )					      								    								  
114 LOAD_FAST 1 ( n )					      								    								  
116 CALL_FUNCTION 2					      								    								  
118 GET_ITER						      								    								  
>> 120 FOR_ITER 24 ( to 146 )				      								    								  
122 STORE_FAST 3 ( j )					      								    								  
							      								    								  
10 124 LOAD_GLOBAL 1 ( print )				      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 3 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_CONST 4 ( ' ' )				      								    								  
138 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
140 CALL_FUNCTION_KW 2					      								    								  
142 POP_TOP						      								    								  
144 JUMP_ABSOLUTE 120					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
11 >> 148 LOAD_GLOBAL 1 ( print )			      								    								  
150 LOAD_CONST 4 ( ' ' )				      								    								  
152 CALL_FUNCTION 1					      								    								  
154 POP_TOP						      								    								  
156 JUMP_ABSOLUTE 104					      								    								  
>> 158 POP_BLOCK					      								    								  
>> 160 LOAD_CONST 0 ( None )				      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH			    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH
--							      --							    --								  --
Disassembly of <code object findMaxAverage at 0x7fbac0e8de40, def findMaxAverage ( arr , n , k ) :			    def findMaxAverage ( arr , n , k = 0 ) :			  success : None
2 0 LOAD_FAST 2 ( k )					      	  if k > n :						    	if k > n :						  
2 LOAD_FAST 1 ( n )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 4 ( > )					      	  csum = [ 0 ] * n					    	csum = [ 0 ] * n					  
6 POP_JUMP_IF_FALSE 12					      	  csum [ 0 ] = arr [ 0 ]				    	csum [ 0 ] = arr [ 0 ]					  
							      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
3 8 LOAD_CONST 1 ( - 1 )				      	      csum [ i ] = csum [ i - 1 ] + arr [ i ] ;		    	    csum [ i ] = csum [ i - 1 ] + arr [ i ]		  
10 RETURN_VALUE						      	  max_sum = csum [ k - 1 ]				    	max_sum = csum [ k - 1 ]				  
							      	  max_end = k - 1					    	max_end = k - 1						  
4 >> 12 LOAD_CONST 2 ( 0 )				      	  for i in range ( k , n ) :				    	for i in range ( k , n ) :				  
14 BUILD_LIST 1						      	      curr_sum = csum [ i ] - csum [ i - k ]		    	    curr_sum = csum [ i ] - csum [ i - k ]		  
16 LOAD_FAST 1 ( n )					      	      if curr_sum > max_sum :				    	    if curr_sum > max_sum :				  
18 BINARY_MULTIPLY					      		  max_sum = curr_sum				    		max_sum = curr_sum				  
20 STORE_FAST 3 ( csum )				      		  max_end = i					    		max_end = i					  
							      	  return max_end - k + 1				    	return ( max_end - k + 1 )				  
5 22 LOAD_FAST 0 ( arr )				      								    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 3 ( csum )					      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 STORE_SUBSCR						      								    								  
							      								    								  
6 34 SETUP_LOOP 42 ( to 78 )				      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 28 ( to 76 )				      								    								  
48 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( csum )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 3 ( csum )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 46					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 3 ( csum )				      								    								  
80 LOAD_FAST 2 ( k )					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 STORE_FAST 5 ( max_sum )				      								    								  
							      								    								  
9 90 LOAD_FAST 2 ( k )					      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 STORE_FAST 6 ( max_end )				      								    								  
							      								    								  
10 98 SETUP_LOOP 54 ( to 154 )				      								    								  
100 LOAD_GLOBAL 0 ( range )				      								    								  
102 LOAD_FAST 2 ( k )					      								    								  
104 LOAD_FAST 1 ( n )					      								    								  
106 CALL_FUNCTION 2					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 40 ( to 152 )				      								    								  
112 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 114 LOAD_FAST 3 ( csum )				      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 3 ( csum )				      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 LOAD_FAST 2 ( k )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 BINARY_SUBSCR					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 STORE_FAST 7 ( curr_sum )				      								    								  
							      								    								  
12 134 LOAD_FAST 7 ( curr_sum )				      								    								  
136 LOAD_FAST 5 ( max_sum )				      								    								  
138 COMPARE_OP 4 ( > )					      								    								  
140 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
13 142 LOAD_FAST 7 ( curr_sum )				      								    								  
144 STORE_FAST 5 ( max_sum )				      								    								  
							      								    								  
14 146 LOAD_FAST 4 ( i )				      								    								  
148 STORE_FAST 6 ( max_end )				      								    								  
150 JUMP_ABSOLUTE 110					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
15 >> 154 LOAD_FAST 6 ( max_end )			      								    								  
156 LOAD_FAST 2 ( k )					      								    								  
158 BINARY_SUBTRACT					      								    								  
160 LOAD_CONST 3 ( 1 )					      								    								  
162 BINARY_ADD						      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERPOLATION_SEARCH					      INTERPOLATION_SEARCH					    INTERPOLATION_SEARCH					  INTERPOLATION_SEARCH
--							      --							    --								  --
Disassembly of <code object interpolationSearch at 0x7fbac0e8 def interpolationSearch ( arr , n , x ) :			    def interpolationSearch ( arr , n , x = 5 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  lo = 0						    	lo = 0							  
2 STORE_FAST 3 ( lo )					      	  hi = ( n - 1 )					    	hi = n - 1						  
							      	  while lo <= hi and x >= arr [ lo ] and x <= arr [ hi ] :  	while lo <= hi and x <= arr [ lo ] and x <= arr [ hi ] :  
3 4 LOAD_FAST 1 ( n )					      	      if lo == hi :					    	    if lo == hi :					  
6 LOAD_CONST 2 ( 1 )					      		  if arr [ lo ] == x :				    		return lo					  
8 BINARY_SUBTRACT					      		      return lo ;				    	    else :						  
10 STORE_FAST 4 ( hi )					      		  return - 1 ;					    		return - 1					  
							      	      pos = lo + int ( ( ( float ( hi - lo ) / ( arr [ hi ] 	pos = lo + int ( float ( hi - lo ) / ( arr [ hi ] - arr [ 
4 12 SETUP_LOOP 158 ( to 172 )				      	      if arr [ pos ] == x :				    	if arr [ pos ] == x :					  
>> 14 LOAD_FAST 3 ( lo )				      		  return pos					    	    return pos						  
16 LOAD_FAST 4 ( hi )					      	      if arr [ pos ] < x :				    	if arr [ pos ] < x :					  
18 COMPARE_OP 1 ( <= )					      		  lo = pos + 1 ;				    	    lo = pos + 1					  
20 POP_JUMP_IF_FALSE 170				      	      else :						    	else :							  
22 LOAD_FAST 2 ( x )					      		  hi = pos - 1 ;				    	    hi = pos - 1					  
24 LOAD_FAST 0 ( arr )					      	  return - 1						    return - 1							  
26 LOAD_FAST 3 ( lo )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 COMPARE_OP 5 ( >= )					      								    								  
32 POP_JUMP_IF_FALSE 170				      								    								  
34 LOAD_FAST 2 ( x )					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 4 ( hi )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 1 ( <= )					      								    								  
44 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
5 46 LOAD_FAST 3 ( lo )					      								    								  
48 LOAD_FAST 4 ( hi )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
6 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 3 ( lo )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 2 ( x )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 66 LOAD_FAST 3 ( lo )					      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
8 >> 70 LOAD_CONST 3 ( - 1 )				      								    								  
72 RETURN_VALUE						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 3 ( lo )				      								    								  
76 LOAD_GLOBAL 0 ( int )				      								    								  
78 LOAD_GLOBAL 1 ( float )				      								    								  
80 LOAD_FAST 4 ( hi )					      								    								  
82 LOAD_FAST 3 ( lo )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( hi )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 3 ( lo )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 BINARY_TRUE_DIVIDE					      								    								  
104 LOAD_FAST 2 ( x )					      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 3 ( lo )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 BINARY_MULTIPLY					      								    								  
116 CALL_FUNCTION 1					      								    								  
118 BINARY_ADD						      								    								  
120 STORE_FAST 5 ( pos )				      								    								  
							      								    								  
10 122 LOAD_FAST 0 ( arr )				      								    								  
124 LOAD_FAST 5 ( pos )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 2 ( x )					      								    								  
130 COMPARE_OP 2 ( == )					      								    								  
132 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
11 134 LOAD_FAST 5 ( pos )				      								    								  
136 RETURN_VALUE					      								    								  
							      								    								  
12 >> 138 LOAD_FAST 0 ( arr )				      								    								  
140 LOAD_FAST 5 ( pos )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_FAST 2 ( x )					      								    								  
146 COMPARE_OP 0 ( < )					      								    								  
148 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
13 150 LOAD_FAST 5 ( pos )				      								    								  
152 LOAD_CONST 2 ( 1 )					      								    								  
154 BINARY_ADD						      								    								  
156 STORE_FAST 3 ( lo )					      								    								  
158 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
15 >> 160 LOAD_FAST 5 ( pos )				      								    								  
162 LOAD_CONST 2 ( 1 )					      								    								  
164 BINARY_SUBTRACT					      								    								  
166 STORE_FAST 4 ( hi )					      								    								  
168 JUMP_ABSOLUTE 14					      								    								  
>> 170 POP_BLOCK					      								    								  
							      								    								  
16 >> 172 LOAD_CONST 3 ( - 1 )				      								    								  
174 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUM_CONTIGUOUS_SUBARRAY_3			      LARGEST_SUM_CONTIGUOUS_SUBARRAY_3				    LARGEST_SUM_CONTIGUOUS_SUBARRAY_3				  LARGEST_SUM_CONTIGUOUS_SUBARRAY_3
--							      --							    --								  --
Disassembly of <code object maxSubArraySum at 0x7fbac0e8bc90, def maxSubArraySum ( a , size ) :				    def maxSubArraySum ( a , size ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( maxsize )				      	  max_so_far = - maxsize - 1				    	max_so_far = - maxsize - 1				  
2 UNARY_NEGATIVE					      	  max_ending_here = 0					    	max_ending_here = 0					  
4 LOAD_CONST 1 ( 1 )					      	  start = 0						    	start = 0						  
6 BINARY_SUBTRACT					      	  end = 0						    	end = 0							  
8 STORE_FAST 2 ( max_so_far )				      	  s = 0							    	s = 0							  
							      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
3 10 LOAD_CONST 2 ( 0 )					      	      max_ending_here += a [ i ]			    	    max_ending_here += a [ i ]				  
12 STORE_FAST 3 ( max_ending_here )			      	      if max_so_far < max_ending_here :			    	    if max_so_far < max_ending_here :			  
							      		  max_so_far = max_ending_here			    		max_so_far = max_ending_here			  
4 14 LOAD_CONST 2 ( 0 )					      		  start = s					    		start = s					  
16 STORE_FAST 4 ( start )				      		  end = i					    		end = i						  
							      	      if max_ending_here < 0 :				    		if max_ending_here < 0 :			  
5 18 LOAD_CONST 2 ( 0 )					      		  max_ending_here = 0				    		    max_ending_here = 0				  
20 STORE_FAST 5 ( end )					      		  s = i + 1					    		    s = i + 1					  
							      	  print ( "Maximum contiguous sum is %d" % ( max_so_far ) ) 	    print ( "Maximum contiguous sum is %d" % max_so_far ) 
6 22 LOAD_CONST 2 ( 0 )					      	  print ( "Starting Index %d" % ( start ) )		    	    print ( "Starting Index %d" % start )		  
24 STORE_FAST 6 ( s )					      	  print ( "Ending Index %d" % ( end ) )			    								  
							      								    								  
7 26 SETUP_LOOP 70 ( to 98 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 LOAD_FAST 1 ( size )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 56 ( to 96 )				      								    								  
40 STORE_FAST 7 ( i )					      								    								  
							      								    								  
8 42 LOAD_FAST 3 ( max_ending_here )			      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 7 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 3 ( max_ending_here )			      								    								  
							      								    								  
9 54 LOAD_FAST 2 ( max_so_far )				      								    								  
56 LOAD_FAST 3 ( max_ending_here )			      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
10 62 LOAD_FAST 3 ( max_ending_here )			      								    								  
64 STORE_FAST 2 ( max_so_far )				      								    								  
							      								    								  
11 66 LOAD_FAST 6 ( s )					      								    								  
68 STORE_FAST 4 ( start )				      								    								  
							      								    								  
12 70 LOAD_FAST 7 ( i )					      								    								  
72 STORE_FAST 5 ( end )					      								    								  
							      								    								  
13 >> 74 LOAD_FAST 3 ( max_ending_here )		      								    								  
76 LOAD_CONST 2 ( 0 )					      								    								  
78 COMPARE_OP 0 ( < )					      								    								  
80 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
14 82 LOAD_CONST 2 ( 0 )				      								    								  
84 STORE_FAST 3 ( max_ending_here )			      								    								  
							      								    								  
15 86 LOAD_FAST 7 ( i )					      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 6 ( s )					      								    								  
94 JUMP_ABSOLUTE 38					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
16 >> 98 LOAD_GLOBAL 2 ( print )			      								    								  
100 LOAD_CONST 3 ( 'Maximum contiguous sum is %d' )	      								    								  
102 LOAD_FAST 2 ( max_so_far )				      								    								  
104 BINARY_MODULO					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 POP_TOP						      								    								  
							      								    								  
17 110 LOAD_GLOBAL 2 ( print )				      								    								  
112 LOAD_CONST 4 ( 'Starting Index %d' )		      								    								  
114 LOAD_FAST 4 ( start )				      								    								  
116 BINARY_MODULO					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 POP_TOP						      								    								  
							      								    								  
18 122 LOAD_GLOBAL 2 ( print )				      								    								  
124 LOAD_CONST 5 ( 'Ending Index %d' )			      								    								  
126 LOAD_FAST 5 ( end )					      								    								  
128 BINARY_MODULO					      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STEINS_ALGORITHM_FOR_FINDING_GCD_1			      STEINS_ALGORITHM_FOR_FINDING_GCD_1			    STEINS_ALGORITHM_FOR_FINDING_GCD_1				  STEINS_ALGORITHM_FOR_FINDING_GCD_1
--							      --							    --								  --
Disassembly of <code object gcd at 0x7fbac0e8bc90, file "<dis def gcd ( a , b ) :					    def gcd ( a , b ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  if ( a == b ) :					    	if a == b :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 1 ( b )					      	      return a						    	    return a						  _sa.test/STEINS_ALGORITHM_FOR_FINDING_GCD_1.py", l
4 COMPARE_OP 2 ( == )					      	  if ( a == 0 ) :					    	if a == 0 :						  ine 52     return f_filled ( a - b ) >> 1 , b )
6 POP_JUMP_IF_FALSE 12					      	      return b						    	    return b						  				       ^ SyntaxError
							      	  if ( b == 0 ) :					    	if b == 0 :						  : invalid syntax
3 8 LOAD_FAST 0 ( a )					      	      return a						    	    return a						  
10 RETURN_VALUE						      	  if ( ( ~ a & 1 ) == 1 ) :				    	if a & 1 == 1 :						  
							      	      if ( ( b & 1 ) == 1 ) :				    	    if b & 1 == 1 :					  
4 >> 12 LOAD_FAST 0 ( a )				      		  return gcd ( a >> 1 , b )			    		return gcd ( a >> 1 , b )			  
14 LOAD_CONST 1 ( 0 )					      	      else :						    	    return gcd ( a >> 1 , b >> 1 ) << 1			  
16 COMPARE_OP 2 ( == )					      		  return ( gcd ( a >> 1 , b >> 1 ) << 1 )	    	if b & 1 == 1 :						  
18 POP_JUMP_IF_FALSE 24					      	  if ( ( ~ b & 1 ) == 1 ) :				    	    return gcd ( a , b , 1 )				  
							      	      return gcd ( a , b >> 1 )				    	if a > b :						  
5 20 LOAD_FAST 1 ( b )					      	  if ( a > b ) :					    	    return gcd ( a - b , 1 , b )			  
22 RETURN_VALUE						      	      return gcd ( ( a - b ) >> 1 , b )			    	if a > b :						  
							      	  return gcd ( ( b - a ) >> 1 , a )			    	    return gcd ( a - b ) >> 1 , b )			  
6 >> 24 LOAD_FAST 1 ( b )				      								    	return gcd ( b - a , 1 , a )				  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
7 32 LOAD_FAST 0 ( a )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
8 >> 36 LOAD_FAST 0 ( a )				      								    								  
38 UNARY_INVERT						      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_AND						      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
9 50 LOAD_FAST 1 ( b )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_AND						      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
10 62 LOAD_GLOBAL 0 ( gcd )				      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_RSHIFT					      								    								  
70 LOAD_FAST 1 ( b )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
12 >> 76 LOAD_GLOBAL 0 ( gcd )				      								    								  
78 LOAD_FAST 0 ( a )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_RSHIFT					      								    								  
84 LOAD_FAST 1 ( b )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_RSHIFT					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_LSHIFT					      								    								  
96 RETURN_VALUE						      								    								  
							      								    								  
13 >> 98 LOAD_FAST 1 ( b )				      								    								  
100 UNARY_INVERT					      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_AND						      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
14 112 LOAD_GLOBAL 0 ( gcd )				      								    								  
114 LOAD_FAST 0 ( a )					      								    								  
116 LOAD_FAST 1 ( b )					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_RSHIFT					      								    								  
122 CALL_FUNCTION 2					      								    								  
124 RETURN_VALUE					      								    								  
							      								    								  
15 >> 126 LOAD_FAST 0 ( a )				      								    								  
128 LOAD_FAST 1 ( b )					      								    								  
130 COMPARE_OP 4 ( > )					      								    								  
132 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
16 134 LOAD_GLOBAL 0 ( gcd )				      								    								  
136 LOAD_FAST 0 ( a )					      								    								  
138 LOAD_FAST 1 ( b )					      								    								  
140 BINARY_SUBTRACT					      								    								  
142 LOAD_CONST 2 ( 1 )					      								    								  
144 BINARY_RSHIFT					      								    								  
146 LOAD_FAST 1 ( b )					      								    								  
148 CALL_FUNCTION 2					      								    								  
150 RETURN_VALUE					      								    								  
							      								    								  
17 >> 152 LOAD_GLOBAL 0 ( gcd )				      								    								  
154 LOAD_FAST 1 ( b )					      								    								  
156 LOAD_FAST 0 ( a )					      								    								  
158 BINARY_SUBTRACT					      								    								  
160 LOAD_CONST 2 ( 1 )					      								    								  
162 BINARY_RSHIFT					      								    								  
164 LOAD_FAST 0 ( a )					      								    								  
166 CALL_FUNCTION 2					      								    								  
168 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INSERTIONS_SORT_ARRAY				      MINIMUM_INSERTIONS_SORT_ARRAY				    MINIMUM_INSERTIONS_SORT_ARRAY				  MINIMUM_INSERTIONS_SORT_ARRAY
--							      --							    --								  --
Disassembly of <code object minInsertionStepToSortArray at 0x def minInsertionStepToSortArray ( arr , N ) :		    def minInsertionStepToSortArray ( arr , N ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  lis = [ 0 ] * N					    	lis = [ 0 ] * N						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  for i in range ( N ) :				    	for i in range ( N ) :					  _sa.test/MINIMUM_INSERTIONS_SORT_ARRAY.py", line 4
4 LOAD_FAST 1 ( N )					      	      lis [ i ] = 1					    	    lis [ i ] = 1					  4	return max - max     ^ SyntaxError: 'return'
6 BINARY_MULTIPLY					      	  for i in range ( 1 , N ) :				    	for i in range ( 1 , N ) :				   outside function
8 STORE_FAST 2 ( lis )					      	      for j in range ( i ) :				    	    for j in range ( i ) :				  
							      		  if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ 		if arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j 
3 10 SETUP_LOOP 24 ( to 36 )				      		      lis [ i ] = lis [ j ] + 1			    		    lis [ i ] = lis [ j ] + 1			  
12 LOAD_GLOBAL 0 ( range )				      	  max = 0						    	max = 0							  
14 LOAD_FAST 1 ( N )					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
16 CALL_FUNCTION 1					      	      if ( max < lis [ i ] ) :				    	    if max < lis [ i ] :				  
18 GET_ITER						      		  max = lis [ i ]				    		max = lis [ i ]					  
>> 20 FOR_ITER 12 ( to 34 )				      	  return ( N - max )					    return max - max						  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 2 ( lis )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 STORE_SUBSCR						      								    								  
32 JUMP_ABSOLUTE 20					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 SETUP_LOOP 88 ( to 126 )			      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 1 ( N )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 74 ( to 124 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 52 SETUP_LOOP 68 ( to 122 )				      								    								  
54 LOAD_GLOBAL 0 ( range )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 56 ( to 120 )				      								    								  
64 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 66 LOAD_FAST 0 ( arr )				      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 COMPARE_OP 5 ( >= )					      								    								  
80 POP_JUMP_IF_FALSE 62					      								    								  
82 LOAD_FAST 2 ( lis )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( lis )					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 COMPARE_OP 0 ( < )					      								    								  
100 POP_JUMP_IF_FALSE 62				      								    								  
							      								    								  
8 102 LOAD_FAST 2 ( lis )				      								    								  
104 LOAD_FAST 4 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_ADD						      								    								  
112 LOAD_FAST 2 ( lis )					      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 62					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 48					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
9 >> 126 LOAD_CONST 1 ( 0 )				      								    								  
128 STORE_FAST 5 ( max )				      								    								  
							      								    								  
10 130 SETUP_LOOP 36 ( to 168 )				      								    								  
132 LOAD_GLOBAL 0 ( range )				      								    								  
134 LOAD_FAST 1 ( N )					      								    								  
136 CALL_FUNCTION 1					      								    								  
138 GET_ITER						      								    								  
>> 140 FOR_ITER 24 ( to 166 )				      								    								  
142 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 144 LOAD_FAST 5 ( max )				      								    								  
146 LOAD_FAST 2 ( lis )					      								    								  
148 LOAD_FAST 3 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 COMPARE_OP 0 ( < )					      								    								  
154 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
12 156 LOAD_FAST 2 ( lis )				      								    								  
158 LOAD_FAST 3 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 STORE_FAST 5 ( max )				      								    								  
164 JUMP_ABSOLUTE 140					      								    								  
>> 166 POP_BLOCK					      								    								  
							      								    								  
13 >> 168 LOAD_FAST 1 ( N )				      								    								  
170 LOAD_FAST 5 ( max )					      								    								  
172 BINARY_SUBTRACT					      								    								  
174 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY
--							      --							    --								  --
Disassembly of <code object maxDiff at 0x7fbac0e8bc90, file " def maxDiff ( arr , n ) :					    def maxDiff ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  SubsetSum_1 = 0					    	SubsetSum_1 = 0						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 2 ( SubsetSum_1 )				      	  SubsetSum_2 = 0					    	SubsetSum_2 = 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/MAXIMU
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  M_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY.py", line
3 4 LOAD_CONST 1 ( 0 )					      	      isSingleOccurance = True				    	    isSingleOccurance = True				  68, in <module>     if f_filled(*parameters_set) =
6 STORE_FAST 3 ( SubsetSum_2 )				      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  = f_gold(*parameters_set):   File "/home/ubuntu/Tr
							      		  if ( arr [ i ] == arr [ j ] ) :		    		if arr [ i ] == arr [ j ] :			  ansCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_sc
4 8 SETUP_LOOP 130 ( to 140 )				      		      isSingleOccurance = False			    		    isSingleOccurance = False			  ripts/dis_sa-python_sa.test/MAXIMUM_POSSIBLE_DIFFE
10 LOAD_GLOBAL 0 ( range )				      		      arr [ i ] = arr [ j ] = 0			    		    arr [ i ] = arr [ j ] = 0			  RENCE_TWO_SUBSETS_ARRAY.py", line 50, in f_filled
12 LOAD_CONST 1 ( 0 )					      		      break					    		    break					      return abs ( SubsetSum_1 - SubSum_1 ) NameErro
14 LOAD_FAST 1 ( n )					      	      if ( isSingleOccurance == True ) :		    	    if isSingleOccurance == True :			  r: name 'SubSum_1' is not defined
16 CALL_FUNCTION 2					      		  if ( arr [ i ] > 0 ) :			    		if arr [ i ] > 0 :				  
18 GET_ITER						      		      SubsetSum_1 += arr [ i ]			    		    SubsetSum_1 += arr [ i ]			  
>> 20 FOR_ITER 116 ( to 138 )				      		  else :					    		else :						  
22 STORE_FAST 4 ( i )					      		      SubsetSum_2 += arr [ i ]			    		    SubsetSum_1 += arr [ i ]			  
							      	  return abs ( SubsetSum_1 - SubsetSum_2 )		    	return abs ( SubsetSum_1 - SubSum_1 )			  
5 24 LOAD_CONST 2 ( True )				      								    								  
26 STORE_FAST 5 ( isSingleOccurance )			      								    								  
							      								    								  
6 28 SETUP_LOOP 60 ( to 90 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 42 ( to 88 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 64 LOAD_CONST 4 ( False )				      								    								  
66 STORE_FAST 5 ( isSingleOccurance )			      								    								  
							      								    								  
9 68 LOAD_CONST 1 ( 0 )					      								    								  
70 DUP_TOP						      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 STORE_SUBSCR						      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 6 ( j )					      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
10 84 BREAK_LOOP					      								    								  
86 JUMP_ABSOLUTE 44					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
11 >> 90 LOAD_FAST 5 ( isSingleOccurance )		      								    								  
92 LOAD_CONST 2 ( True )				      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
12 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 4 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_CONST 1 ( 0 )					      								    								  
106 COMPARE_OP 4 ( > )					      								    								  
108 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
13 110 LOAD_FAST 2 ( SubsetSum_1 )			      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 4 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 INPLACE_ADD						      								    								  
120 STORE_FAST 2 ( SubsetSum_1 )			      								    								  
122 JUMP_ABSOLUTE 20					      								    								  
							      								    								  
15 >> 124 LOAD_FAST 3 ( SubsetSum_2 )			      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 4 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 3 ( SubsetSum_2 )			      								    								  
136 JUMP_ABSOLUTE 20					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
16 >> 140 LOAD_GLOBAL 1 ( abs )				      								    								  
142 LOAD_FAST 2 ( SubsetSum_1 )				      								    								  
144 LOAD_FAST 3 ( SubsetSum_2 )				      								    								  
146 BINARY_SUBTRACT					      								    								  
148 CALL_FUNCTION 1					      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STACK_ELEMENTS_ARE_PAIRWISE_CONSECUTIVE	      CHECK_IF_STACK_ELEMENTS_ARE_PAIRWISE_CONSECUTIVE		    CHECK_IF_STACK_ELEMENTS_ARE_PAIRWISE_CONSECUTIVE		  CHECK_IF_STACK_ELEMENTS_ARE_PAIRWISE_CONSECUTIVE
--							      --							    --								  --
Disassembly of <code object pairWiseConsecutive at 0x7fbac0e8 def pairWiseConsecutive ( s ) :				    def pairWiseConsecutive ( s ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  aux = [ ]						    	aux = [ ]						  
2 STORE_FAST 1 ( aux )					      	  while ( len ( s ) != 0 ) :				    	while len ( s ) != 0 :					  
							      	      aux.append ( s [ - 1 ] )				    	    aux.append ( s [ - 1 ] )				  
3 4 SETUP_LOOP 38 ( to 44 )				      	      s.pop ( )						    	    s.pop ( )						  
>> 6 LOAD_GLOBAL 0 ( len )				      	  result = True						    	result = True						  
8 LOAD_FAST 0 ( s )					      	  while ( len ( aux ) > 1 ) :				    	while len ( aux ) > 1 :					  
10 CALL_FUNCTION 1					      	      x = aux [ - 1 ]					    	    x = aux [ - 1 ]					  
12 LOAD_CONST 1 ( 0 )					      	      aux.pop ( )					    	    aux.pop ( )						  
14 COMPARE_OP 3 ( != )					      	      y = aux [ - 1 ]					    	    y = aux [ - 1 ]					  
16 POP_JUMP_IF_FALSE 42					      	      aux.pop ( )					    	    aux.pop ( )						  
							      	      if ( abs ( x - y ) != 1 ) :			    	    if abs ( x - y ) != 1 :				  
4 18 LOAD_FAST 1 ( aux )				      		  result = False				    		result = False					  
20 LOAD_METHOD 1 ( append )				      	      s.append ( x )					    	    s.append ( x )					  
22 LOAD_FAST 0 ( s )					      	      s.append ( y )					    	    s.append ( y )					  
24 LOAD_CONST 2 ( - 1 )					      	  if ( len ( aux ) == 1 ) :				    if len ( aux ) == 1 :					  
26 BINARY_SUBSCR					      	      s.append ( aux [ - 1 ] )				    	s.append ( aux [ - 1 ] )				  
28 CALL_METHOD 1					      	  return result						    return result						  
30 POP_TOP						      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( s )					      								    								  
34 LOAD_METHOD 2 ( pop )				      								    								  
36 CALL_METHOD 0					      								    								  
38 POP_TOP						      								    								  
40 JUMP_ABSOLUTE 6					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_CONST 3 ( True )				      								    								  
46 STORE_FAST 2 ( result )				      								    								  
							      								    								  
7 48 SETUP_LOOP 88 ( to 138 )				      								    								  
>> 50 LOAD_GLOBAL 0 ( len )				      								    								  
52 LOAD_FAST 1 ( aux )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 LOAD_CONST 4 ( 1 )					      								    								  
58 COMPARE_OP 4 ( > )					      								    								  
60 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
8 62 LOAD_FAST 1 ( aux )				      								    								  
64 LOAD_CONST 2 ( - 1 )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_FAST 3 ( x )					      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( aux )				      								    								  
72 LOAD_METHOD 2 ( pop )				      								    								  
74 CALL_METHOD 0					      								    								  
76 POP_TOP						      								    								  
							      								    								  
10 78 LOAD_FAST 1 ( aux )				      								    								  
80 LOAD_CONST 2 ( - 1 )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 STORE_FAST 4 ( y )					      								    								  
							      								    								  
11 86 LOAD_FAST 1 ( aux )				      								    								  
88 LOAD_METHOD 2 ( pop )				      								    								  
90 CALL_METHOD 0					      								    								  
92 POP_TOP						      								    								  
							      								    								  
12 94 LOAD_GLOBAL 3 ( abs )				      								    								  
96 LOAD_FAST 3 ( x )					      								    								  
98 LOAD_FAST 4 ( y )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_CONST 4 ( 1 )					      								    								  
106 COMPARE_OP 3 ( != )					      								    								  
108 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
13 110 LOAD_CONST 5 ( False )				      								    								  
112 STORE_FAST 2 ( result )				      								    								  
							      								    								  
14 >> 114 LOAD_FAST 0 ( s )				      								    								  
116 LOAD_METHOD 1 ( append )				      								    								  
118 LOAD_FAST 3 ( x )					      								    								  
120 CALL_METHOD 1					      								    								  
122 POP_TOP						      								    								  
							      								    								  
15 124 LOAD_FAST 0 ( s )				      								    								  
126 LOAD_METHOD 1 ( append )				      								    								  
128 LOAD_FAST 4 ( y )					      								    								  
130 CALL_METHOD 1					      								    								  
132 POP_TOP						      								    								  
134 JUMP_ABSOLUTE 50					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
16 >> 138 LOAD_GLOBAL 0 ( len )				      								    								  
140 LOAD_FAST 1 ( aux )					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 LOAD_CONST 4 ( 1 )					      								    								  
146 COMPARE_OP 2 ( == )					      								    								  
148 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
17 150 LOAD_FAST 0 ( s )				      								    								  
152 LOAD_METHOD 1 ( append )				      								    								  
154 LOAD_FAST 1 ( aux )					      								    								  
156 LOAD_CONST 2 ( - 1 )				      								    								  
158 BINARY_SUBSCR					      								    								  
160 CALL_METHOD 1					      								    								  
162 POP_TOP						      								    								  
							      								    								  
18 >> 164 LOAD_FAST 2 ( result )			      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1
--							      --							    --								  --
Disassembly of <code object sumAtKthLevel at 0x7fbac0e89d20,  def sumAtKthLevel ( tree , k , i , level ) :		    def sumAtKthLevel ( tree , k , i ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( tree )				      	  if ( tree [ i [ 0 ] ] == '(' ) :			    	if tree [ i [ 0 ] ] == '(' :				  
2 LOAD_FAST 2 ( i )					      	      i [ 0 ] += 1					    	    i += 0						  
4 LOAD_CONST 1 ( 0 )					      	      if ( tree [ i [ 0 ] ] == ')' ) :			    	    if tree [ i [ 0 ] ] == ')' :			  
6 BINARY_SUBSCR						      		  return 0					    		return 0					  
8 BINARY_SUBSCR						      	      sum = 0						    	    sum = 0						  
10 LOAD_CONST 2 ( '(' )					      	      if ( level == k ) :				    	    if level == k :					  
12 COMPARE_OP 2 ( == )					      		  sum = int ( tree [ i [ 0 ] ] )		    		sum = int ( tree [ i [ 0 ] ] )			  
14 POP_JUMP_IF_FALSE 176				      	      i [ 0 ] += 1					    	    i [ 0 ] += 1					  
							      	      leftsum = sumAtKthLevel ( tree , k , i , level + 1 )  	    leftsum = sumAtKthLevel ( tree , k , i , level + 1 )  
3 16 LOAD_FAST 2 ( i )					      	      i [ 0 ] += 1					    	    i [ 0 ] += 1					  
18 LOAD_CONST 1 ( 0 )					      	      rightsum = sumAtKthLevel ( tree , k , i , level + 1 ) 	    rightsum = sumAtKthLevel ( tree , k , i , level + 1 ) 
20 DUP_TOP_TWO						      	      i [ 0 ] += 1					    	    i += 0						  
22 BINARY_SUBSCR					      	      return sum + leftsum + rightsum			    	    return sum + leftsum + rightsum			  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 INPLACE_ADD						      								    								  
28 ROT_THREE						      								    								  
30 STORE_SUBSCR						      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( tree )				      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 4 ( ')' )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 48 LOAD_CONST 1 ( 0 )					      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
6 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
7 56 LOAD_FAST 3 ( level )				      								    								  
58 LOAD_FAST 1 ( k )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 64 LOAD_GLOBAL 0 ( int )				      								    								  
66 LOAD_FAST 0 ( tree )					      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
9 >> 80 LOAD_FAST 2 ( i )				      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 DUP_TOP_TWO						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 ROT_THREE						      								    								  
94 STORE_SUBSCR						      								    								  
							      								    								  
10 96 LOAD_GLOBAL 1 ( sumAtKthLevel )			      								    								  
98 LOAD_FAST 0 ( tree )					      								    								  
100 LOAD_FAST 1 ( k )					      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 LOAD_FAST 3 ( level )				      								    								  
106 LOAD_CONST 3 ( 1 )					      								    								  
108 BINARY_ADD						      								    								  
110 CALL_FUNCTION 4					      								    								  
112 STORE_FAST 5 ( leftsum )				      								    								  
							      								    								  
11 114 LOAD_FAST 2 ( i )				      								    								  
116 LOAD_CONST 1 ( 0 )					      								    								  
118 DUP_TOP_TWO						      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_CONST 3 ( 1 )					      								    								  
124 INPLACE_ADD						      								    								  
126 ROT_THREE						      								    								  
128 STORE_SUBSCR					      								    								  
							      								    								  
12 130 LOAD_GLOBAL 1 ( sumAtKthLevel )			      								    								  
132 LOAD_FAST 0 ( tree )				      								    								  
134 LOAD_FAST 1 ( k )					      								    								  
136 LOAD_FAST 2 ( i )					      								    								  
138 LOAD_FAST 3 ( level )				      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 CALL_FUNCTION 4					      								    								  
146 STORE_FAST 6 ( rightsum )				      								    								  
							      								    								  
13 148 LOAD_FAST 2 ( i )				      								    								  
150 LOAD_CONST 1 ( 0 )					      								    								  
152 DUP_TOP_TWO						      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_CONST 3 ( 1 )					      								    								  
158 INPLACE_ADD						      								    								  
160 ROT_THREE						      								    								  
162 STORE_SUBSCR					      								    								  
							      								    								  
14 164 LOAD_FAST 4 ( sum )				      								    								  
166 LOAD_FAST 5 ( leftsum )				      								    								  
168 BINARY_ADD						      								    								  
170 LOAD_FAST 6 ( rightsum )				      								    								  
172 BINARY_ADD						      								    								  
174 RETURN_VALUE					      								    								  
>> 176 LOAD_CONST 0 ( None )				      								    								  
178 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		      SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		    SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		  SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8bc90, file "< def search ( arr , l , h , key ) :			    def search ( arr , l , h , key ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( l )					      	  if l > h :						    	if l > h :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 2 ( h )					      	      return - 1					    	    return - 1						  _sa.test/SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED
4 COMPARE_OP 4 ( > )					      	  mid = ( l + h ) // 2					    	mid = ( l + h ) // 2					  _ARRAY.py", line 45	  return f_filled ( arr , l
6 POP_JUMP_IF_FALSE 12					      	  if arr [ mid ] == key :				    	if arr [ mid ] == key :					  , mid - 1 , key )	^ SyntaxError: 'return' outs
							      	      return mid					    	    return mid						  ide function
3 8 LOAD_CONST 1 ( - 1 )				      	  if arr [ l ] <= arr [ mid ] :				    	if arr [ l ] <= arr [ mid ] :				  
10 RETURN_VALUE						      	      if key >= arr [ l ] and key <= arr [ mid ] :	    	    if key >= arr [ l ] and key <= arr [ mid ] :	  
							      		  return search ( arr , l , mid - 1 , key )	    		return search ( arr , l , mid - 1 , key )	  
4 >> 12 LOAD_FAST 1 ( l )				      	      return search ( arr , mid + 1 , h , key )		    	    else :						  
14 LOAD_FAST 2 ( h )					      	  if key >= arr [ mid ] and key <= arr [ h ] :		    		return search ( arr , mid + 1 , h , key )	  
16 BINARY_ADD						      	      return search ( a , mid + 1 , h , key )		    	if key >= arr [ mid ] and key <= arr [ h ] :		  
18 LOAD_CONST 2 ( 2 )					      	  return search ( arr , l , mid - 1 , key )		    	    return search ( a , mid + 1 , h , key )		  
20 BINARY_FLOOR_DIVIDE					      								    return search ( arr , l , mid - 1 , key )			  
22 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 4 ( mid )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 3 ( key )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 36 LOAD_FAST 4 ( mid )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
7 >> 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 1 ( l )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( mid )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 1 ( <= )					      								    								  
54 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
8 56 LOAD_FAST 3 ( key )				      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 1 ( l )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 5 ( >= )					      								    								  
66 POP_JUMP_IF_FALSE 98					      								    								  
68 LOAD_FAST 3 ( key )					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 4 ( mid )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 1 ( <= )					      								    								  
78 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
9 80 LOAD_GLOBAL 0 ( search )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 1 ( l )					      								    								  
86 LOAD_FAST 4 ( mid )					      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_FAST 3 ( key )					      								    								  
94 CALL_FUNCTION 4					      								    								  
96 RETURN_VALUE						      								    								  
							      								    								  
10 >> 98 LOAD_GLOBAL 0 ( search )			      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 4 ( mid )					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_FAST 2 ( h )					      								    								  
110 LOAD_FAST 3 ( key )					      								    								  
112 CALL_FUNCTION 4					      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
11 >> 116 LOAD_FAST 3 ( key )				      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 4 ( mid )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 COMPARE_OP 5 ( >= )					      								    								  
126 POP_JUMP_IF_FALSE 158				      								    								  
128 LOAD_FAST 3 ( key )					      								    								  
130 LOAD_FAST 0 ( arr )					      								    								  
132 LOAD_FAST 2 ( h )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 COMPARE_OP 1 ( <= )					      								    								  
138 POP_JUMP_IF_FALSE 158				      								    								  
							      								    								  
12 140 LOAD_GLOBAL 0 ( search )				      								    								  
142 LOAD_GLOBAL 1 ( a )					      								    								  
144 LOAD_FAST 4 ( mid )					      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 BINARY_ADD						      								    								  
150 LOAD_FAST 2 ( h )					      								    								  
152 LOAD_FAST 3 ( key )					      								    								  
154 CALL_FUNCTION 4					      								    								  
156 RETURN_VALUE					      								    								  
							      								    								  
13 >> 158 LOAD_GLOBAL 0 ( search )			      								    								  
160 LOAD_FAST 0 ( arr )					      								    								  
162 LOAD_FAST 1 ( l )					      								    								  
164 LOAD_FAST 4 ( mid )					      								    								  
166 LOAD_CONST 3 ( 1 )					      								    								  
168 BINARY_SUBTRACT					      								    								  
170 LOAD_FAST 3 ( key )					      								    								  
172 CALL_FUNCTION 4					      								    								  
174 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			      PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			    PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			  PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION
--							      --							    --								  --
Disassembly of <code object decToHexa at 0x7fbac0e89d20, file def decToHexa ( n ) :					    def decToHexa ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( '0' )				      	  hexaDeciNum = [ '0' ] * 100 ;				    	hexaDeciNum = [ '0' ] * 100				  
2 BUILD_LIST 1						      	  i = 0 ;						    	i = 0							  
4 LOAD_CONST 2 ( 100 )					      	  while ( n != 0 ) :					    	while n != 0 :						  
6 BINARY_MULTIPLY					      	      temp = 0 ;					    	    temp = 0						  
8 STORE_FAST 1 ( hexaDeciNum )				      	      temp = n % 16 ;					    	    temp = n % 16					  
							      	      if ( temp < 10 ) :				    	    if temp < 10 :					  
3 10 LOAD_CONST 3 ( 0 )					      		  hexaDeciNum [ i ] = chr ( temp + 48 ) ;	    		hexaDeciNum [ i ] = chr ( temp + 48 )		  
12 STORE_FAST 2 ( i )					      		  i = i + 1 ;					    		i = i + 1					  
							      	      else :						    	    else :						  
4 14 SETUP_LOOP 94 ( to 110 )				      		  hexaDeciNum [ i ] = chr ( temp + 55 ) ;	    		hexaDeciNum [ i ] = chr ( temp + 55 )		  
>> 16 LOAD_FAST 0 ( n )					      		  i = i + 1 ;					    		i = i + 1					  
18 LOAD_CONST 3 ( 0 )					      	      n = int ( n / 16 ) ;				    	    n = int ( n / 16 )					  
20 COMPARE_OP 3 ( != )					      	  j = i - 1 ;						    	    while j >= 0 :					  
22 POP_JUMP_IF_FALSE 108				      	  while ( j >= 0 ) :					    		print ( hexaDeciNum [ j ] , end = "" )		  
							      	      print ( ( hexaDeciNum [ j ] ) , end = "" ) ;	    		j = j - 1					  
5 24 LOAD_CONST 3 ( 0 )					      	      j = j - 1 ;					    								  
26 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 4 ( 16 )					      								    								  
32 BINARY_MODULO					      								    								  
34 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
7 36 LOAD_FAST 3 ( temp )				      								    								  
38 LOAD_CONST 5 ( 10 )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
8 44 LOAD_GLOBAL 0 ( chr )				      								    								  
46 LOAD_FAST 3 ( temp )					      								    								  
48 LOAD_CONST 6 ( 48 )					      								    								  
50 BINARY_ADD						      								    								  
52 CALL_FUNCTION 1					      								    								  
54 LOAD_FAST 1 ( hexaDeciNum )				      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
9 60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 7 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 2 ( i )					      								    								  
68 JUMP_FORWARD 24 ( to 94 )				      								    								  
							      								    								  
11 >> 70 LOAD_GLOBAL 0 ( chr )				      								    								  
72 LOAD_FAST 3 ( temp )					      								    								  
74 LOAD_CONST 8 ( 55 )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 1					      								    								  
80 LOAD_FAST 1 ( hexaDeciNum )				      								    								  
82 LOAD_FAST 2 ( i )					      								    								  
84 STORE_SUBSCR						      								    								  
							      								    								  
12 86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 7 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 2 ( i )					      								    								  
							      								    								  
13 >> 94 LOAD_GLOBAL 1 ( int )				      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 LOAD_CONST 4 ( 16 )					      								    								  
100 BINARY_TRUE_DIVIDE					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 STORE_FAST 0 ( n )					      								    								  
106 JUMP_ABSOLUTE 16					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
14 >> 110 LOAD_FAST 2 ( i )				      								    								  
112 LOAD_CONST 7 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 STORE_FAST 4 ( j )					      								    								  
							      								    								  
15 118 SETUP_LOOP 36 ( to 156 )				      								    								  
>> 120 LOAD_FAST 4 ( j )				      								    								  
122 LOAD_CONST 3 ( 0 )					      								    								  
124 COMPARE_OP 5 ( >= )					      								    								  
126 POP_JUMP_IF_FALSE 154				      								    								  
							      								    								  
16 128 LOAD_GLOBAL 2 ( print )				      								    								  
130 LOAD_FAST 1 ( hexaDeciNum )				      								    								  
132 LOAD_FAST 4 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_CONST 9 ( '' )					      								    								  
138 LOAD_CONST 10 ( ( 'end' , ) )			      								    								  
140 CALL_FUNCTION_KW 2					      								    								  
142 POP_TOP						      								    								  
							      								    								  
17 144 LOAD_FAST 4 ( j )				      								    								  
146 LOAD_CONST 7 ( 1 )					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 STORE_FAST 4 ( j )					      								    								  
152 JUMP_ABSOLUTE 120					      								    								  
>> 154 POP_BLOCK					      								    								  
>> 156 LOAD_CONST 0 ( None )				      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LAR<unk> _LEXICOGRAPHIC_ARRAY_WITH_AT_MOST_K_CONSECUTIVE_SWAP LAR<unk> _LEXICOGRAPHIC_ARRAY_WITH_AT_MOST_K_CONSECUTIVE_SWAP LAR<unk> _LEXICOGRAPHIC_ARRAY_WITH_AT_MOST_K_CONSECUTIVE_SWAP LAR<unk> _LEXICOGRAPHIC_ARRAY_WITH_AT_MOST_K_CONSECUTIVE_SWAP
--							      --							    --								  --
Disassembly of <code object KSwapMaximum at 0x7fbac0e8bc90, f def KSwapMaximum ( n , k ) :				    def KSwapMaximum ( n , k ) :				  script_not_found : None
3 0 SETUP_LOOP 162 ( to 164 )				      	  global arr						    	global indexPosition					  
2 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
4 LOAD_CONST 1 ( 0 )					      	      if ( k > 0 ) :					    	    if k > 0 :						  
6 LOAD_FAST 0 ( n )					      		  indexPosition = i				    		indexPosition = i				  
8 LOAD_CONST 2 ( 1 )					      		  for j in range ( i + 1 , n ) :		    		for j in range ( i + 1 , n ) :			  
10 BINARY_SUBTRACT					      		      if ( k <= j - i ) :			    		    if k <= j - i :				  
12 CALL_FUNCTION 2					      			  break					    			break					  
14 GET_ITER						      		      if ( arr [ j ] > arr [ indexPosition ] ) :    		    if arr [ j ] > arr [ indexPosition ] :	  
>> 16 FOR_ITER 144 ( to 162 )				      			  indexPosition = j			    			indexPosition = j			  
18 STORE_FAST 2 ( i )					      		  for j in range ( indexPosition , i , - 1 ) :	    	    for j in range ( indexPosition , i , - 1 ) :	  
							      		      t = arr [ j ]				    		t = arr [ j - 1 ]				  
4 20 LOAD_FAST 1 ( k )					      		      arr [ j ] = arr [ j - 1 ]			    		arr [ j - 1 ] = t				  
22 LOAD_CONST 1 ( 0 )					      		      arr [ j - 1 ] = t				    	    k = k - indexPosition - i				  
24 COMPARE_OP 4 ( > )					      		  k = k - indexPosition - i			    								  
26 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( i )					      								    								  
30 STORE_FAST 3 ( indexPosition )			      								    								  
							      								    								  
6 32 SETUP_LOOP 56 ( to 90 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 0 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 38 ( to 88 )				      								    								  
50 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 52 LOAD_FAST 1 ( k )					      								    								  
54 LOAD_FAST 4 ( j )					      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 COMPARE_OP 1 ( <= )					      								    								  
62 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 64 BREAK_LOOP						      								    								  
							      								    								  
9 >> 66 LOAD_GLOBAL 1 ( arr )				      								    								  
68 LOAD_FAST 4 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_GLOBAL 1 ( arr )				      								    								  
74 LOAD_FAST 3 ( indexPosition )			      								    								  
76 BINARY_SUBSCR					      								    								  
78 COMPARE_OP 4 ( > )					      								    								  
80 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
10 82 LOAD_FAST 4 ( j )					      								    								  
84 STORE_FAST 3 ( indexPosition )			      								    								  
86 JUMP_ABSOLUTE 48					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
11 >> 90 SETUP_LOOP 56 ( to 148 )			      								    								  
92 LOAD_GLOBAL 0 ( range )				      								    								  
94 LOAD_FAST 3 ( indexPosition )			      								    								  
96 LOAD_FAST 2 ( i )					      								    								  
98 LOAD_CONST 3 ( - 1 )					      								    								  
100 CALL_FUNCTION 3					      								    								  
102 GET_ITER						      								    								  
>> 104 FOR_ITER 40 ( to 146 )				      								    								  
106 STORE_FAST 4 ( j )					      								    								  
							      								    								  
12 108 LOAD_GLOBAL 1 ( arr )				      								    								  
110 LOAD_FAST 4 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 STORE_FAST 5 ( t )					      								    								  
							      								    								  
13 116 LOAD_GLOBAL 1 ( arr )				      								    								  
118 LOAD_FAST 4 ( j )					      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_GLOBAL 1 ( arr )				      								    								  
128 LOAD_FAST 4 ( j )					      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
14 132 LOAD_FAST 5 ( t )				      								    								  
134 LOAD_GLOBAL 1 ( arr )				      								    								  
136 LOAD_FAST 4 ( j )					      								    								  
138 LOAD_CONST 2 ( 1 )					      								    								  
140 BINARY_SUBTRACT					      								    								  
142 STORE_SUBSCR					      								    								  
144 JUMP_ABSOLUTE 104					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
15 >> 148 LOAD_FAST 1 ( k )				      								    								  
150 LOAD_FAST 3 ( indexPosition )			      								    								  
152 BINARY_SUBTRACT					      								    								  
154 LOAD_FAST 2 ( i )					      								    								  
156 BINARY_SUBTRACT					      								    								  
158 STORE_FAST 1 ( k )					      								    								  
160 JUMP_ABSOLUTE 16					      								    								  
>> 162 POP_BLOCK					      								    								  
>> 164 LOAD_CONST 0 ( None )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE
--							      --							    --								  --
Disassembly of <code object maxLenSub at 0x7fbac0e89d20, file def maxLenSub ( arr , n ) :				    def maxLenSub ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_LIST 0					      	  mls = [ ]						    	mls = [ ]						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( mls )					      	  max = 0						    	max = 0							  _sa.test/MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJ
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  ACENT_ELEMENTS_EITHER_0_1.py", line 44     return
3 4 LOAD_CONST 1 ( 0 )					      	      mls.append ( 1 )					    	    mls.append ( 1 )					  max	  ^ SyntaxError: 'return' outside function
6 STORE_FAST 3 ( max )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( i ) :				    	    for j in range ( i ) :				  
4 8 SETUP_LOOP 26 ( to 36 )				      		  if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ 		if abs ( arr [ i ] - arr [ j ] ) < 1 and mls [ i  
10 LOAD_GLOBAL 0 ( range )				      		      mls [ i ] = mls [ j ] + 1			    		    mls [ i ] = mls [ j ] + 1			  
12 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    for i in range ( n ) :					  
14 CALL_FUNCTION 1					      	      if ( max < mls [ i ] ) :				    	if max < mls [ i ] :					  
16 GET_ITER						      		  max = mls [ i ]				    	    max = mls [ i ]					  
>> 18 FOR_ITER 14 ( to 34 )				      	  return max						    return max							  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( mls )				      								    								  
24 LOAD_METHOD 1 ( append )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 CALL_METHOD 1					      								    								  
30 POP_TOP						      								    								  
32 JUMP_ABSOLUTE 18					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
6 >> 36 SETUP_LOOP 94 ( to 132 )			      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 82 ( to 130 )				      								    								  
48 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 50 SETUP_LOOP 76 ( to 128 )				      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 64 ( to 126 )				      								    								  
62 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 64 LOAD_GLOBAL 2 ( abs )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 5 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 COMPARE_OP 1 ( <= )					      								    								  
86 POP_JUMP_IF_FALSE 60					      								    								  
88 LOAD_FAST 2 ( mls )					      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 2 ( mls )					      								    								  
96 LOAD_FAST 5 ( j )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 COMPARE_OP 0 ( < )					      								    								  
106 POP_JUMP_IF_FALSE 60				      								    								  
							      								    								  
9 108 LOAD_FAST 2 ( mls )				      								    								  
110 LOAD_FAST 5 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_FAST 2 ( mls )					      								    								  
120 LOAD_FAST 4 ( i )					      								    								  
122 STORE_SUBSCR					      								    								  
124 JUMP_ABSOLUTE 60					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 JUMP_ABSOLUTE 46					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
10 >> 132 SETUP_LOOP 36 ( to 170 )			      								    								  
134 LOAD_GLOBAL 0 ( range )				      								    								  
136 LOAD_FAST 1 ( n )					      								    								  
138 CALL_FUNCTION 1					      								    								  
140 GET_ITER						      								    								  
>> 142 FOR_ITER 24 ( to 168 )				      								    								  
144 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 146 LOAD_FAST 3 ( max )				      								    								  
148 LOAD_FAST 2 ( mls )					      								    								  
150 LOAD_FAST 4 ( i )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 COMPARE_OP 0 ( < )					      								    								  
156 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
12 158 LOAD_FAST 2 ( mls )				      								    								  
160 LOAD_FAST 4 ( i )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 STORE_FAST 3 ( max )				      								    								  
166 JUMP_ABSOLUTE 142					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
13 >> 170 LOAD_FAST 3 ( max )				      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_1		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_1		    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_1			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_1
--							      --							    --								  --
Disassembly of <code object find3Numbers at 0x7fbac0e8bc90, f def find3Numbers ( A , arr_size , sum ) :			    def find3Numbers ( A , arr_size , sum ) :			  success : None
2 0 LOAD_FAST 0 ( A )					      	  A.sort ( )						    	A.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  for i in range ( 0 , arr_size - 2 ) :			    	for i in range ( 0 , arr_size - 2 ) :			  
4 CALL_METHOD 0						      	      l = i + 1						    	    l = i + 1						  
6 POP_TOP						      	      r = arr_size - 1					    	    r = arr_size - 1					  
							      	      while ( l < r ) :					    	    while l < r :					  
3 8 SETUP_LOOP 160 ( to 170 )				      		  if ( A [ i ] + A [ l ] + A [ r ] == sum ) :	    		if ( A [ i ] + A [ l ] + A [ r ] == sum ) :	  
10 LOAD_GLOBAL 1 ( range )				      		      print ( "Triplet is" , A [ i ] , ', ' , A [ l 		    print ( "Triplet is" , A [ i ] , ", " , A [ l 
12 LOAD_CONST 1 ( 0 )					      		      return True				    		    return True					  
14 LOAD_FAST 1 ( arr_size )				      		  elif ( A [ i ] + A [ l ] + A [ r ] < sum ) :	    		if ( A [ i ] + A [ l ] + A [ r ] < sum ) :	  
16 LOAD_CONST 2 ( 2 )					      		      l += 1					    		    l += 1					  
18 BINARY_SUBTRACT					      		  else :					    		r -= 1						  
20 CALL_FUNCTION 2					      		      r -= 1					    	return False						  
22 GET_ITER						      	  return False						    								  
>> 24 FOR_ITER 142 ( to 168 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 3 ( i )					      								    								  
30 LOAD_CONST 3 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 STORE_FAST 4 ( l )					      								    								  
							      								    								  
5 36 LOAD_FAST 1 ( arr_size )				      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 STORE_FAST 5 ( r )					      								    								  
							      								    								  
6 44 SETUP_LOOP 120 ( to 166 )				      								    								  
>> 46 LOAD_FAST 4 ( l )					      								    								  
48 LOAD_FAST 5 ( r )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
7 54 LOAD_FAST 0 ( A )					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( A )					      								    								  
62 LOAD_FAST 4 ( l )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 0 ( A )					      								    								  
70 LOAD_FAST 5 ( r )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 2 ( sum )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
8 82 LOAD_GLOBAL 2 ( print )				      								    								  
84 LOAD_CONST 4 ( 'Triplet is' )			      								    								  
86 LOAD_FAST 0 ( A )					      								    								  
88 LOAD_FAST 3 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 5 ( ', ' )				      								    								  
94 LOAD_FAST 0 ( A )					      								    								  
96 LOAD_FAST 4 ( l )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 5 ( ', ' )				      								    								  
102 LOAD_FAST 0 ( A )					      								    								  
104 LOAD_FAST 5 ( r )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 6					      								    								  
110 POP_TOP						      								    								  
							      								    								  
9 112 LOAD_CONST 6 ( True )				      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
10 >> 116 LOAD_FAST 0 ( A )				      								    								  
118 LOAD_FAST 3 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 0 ( A )					      								    								  
124 LOAD_FAST 4 ( l )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_ADD						      								    								  
130 LOAD_FAST 0 ( A )					      								    								  
132 LOAD_FAST 5 ( r )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 BINARY_ADD						      								    								  
138 LOAD_FAST 2 ( sum )					      								    								  
140 COMPARE_OP 0 ( < )					      								    								  
142 POP_JUMP_IF_FALSE 154				      								    								  
							      								    								  
11 144 LOAD_FAST 4 ( l )				      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 4 ( l )					      								    								  
152 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
13 >> 154 LOAD_FAST 5 ( r )				      								    								  
156 LOAD_CONST 3 ( 1 )					      								    								  
158 INPLACE_SUBTRACT					      								    								  
160 STORE_FAST 5 ( r )					      								    								  
162 JUMP_ABSOLUTE 46					      								    								  
>> 164 POP_BLOCK					      								    								  
>> 166 JUMP_ABSOLUTE 24					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
14 >> 170 LOAD_CONST 7 ( False )			      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST
--							      --							    --								  --
Disassembly of <code object printClosest at 0x7fbac0e8d540, f def printClosest ( arr , n , x ) :			    def printClosest ( arr , n , x ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				      	  res_l , res_r = 0 , 0					    	res_l , res_r = 0 , 0					  
2 UNPACK_SEQUENCE 2					      	  l , r , diff = 0 , n - 1 , MAX_VAL			    	l , r , diff = 0 , ( n - 1 ) , MAX_VAL			  
4 STORE_FAST 3 ( res_l )				      	  while r > l :						    	while r > l :						  
6 STORE_FAST 4 ( res_r )				      	      if abs ( arr [ l ] + arr [ r ] - x ) < diff :	    	    if abs ( arr [ l ] + arr [ r ] - x ) < diff :	  
							      		  res_l = l					    		res_l = l					  
3 8 LOAD_CONST 2 ( 0 )					      		  res_r = r					    		res_r = r					  
10 LOAD_FAST 1 ( n )					      		  diff = abs ( arr [ l ] + arr [ r ] - x )	    		diff = abs ( arr [ l ] + arr [ r ] - x )	  
12 LOAD_CONST 3 ( 1 )					      	      if arr [ l ] + arr [ r ] > x :			    	    if arr [ l ] + arr [ r ] > x :			  
14 BINARY_SUBTRACT					      		  r -= 1					    		r -= 1						  
16 LOAD_GLOBAL 0 ( MAX_VAL )				      	      else :						    	    else :						  
18 ROT_THREE						      		  l += 1					    		l += 1						  
20 ROT_TWO						      	  print ( 'The closest pair is {} and {}'.format ( arr [ re 	print ( "The closest pair is {} and {}".format ( arr [ re 
22 STORE_FAST 5 ( l )					      								    								  
24 STORE_FAST 6 ( r )					      								    								  
26 STORE_FAST 7 ( diff )				      								    								  
							      								    								  
4 28 SETUP_LOOP 110 ( to 140 )				      								    								  
>> 30 LOAD_FAST 6 ( r )					      								    								  
32 LOAD_FAST 5 ( l )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
5 38 LOAD_GLOBAL 1 ( abs )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 5 ( l )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 6 ( r )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( x )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_FAST 7 ( diff )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
6 66 LOAD_FAST 5 ( l )					      								    								  
68 STORE_FAST 3 ( res_l )				      								    								  
							      								    								  
7 70 LOAD_FAST 6 ( r )					      								    								  
72 STORE_FAST 4 ( res_r )				      								    								  
							      								    								  
8 74 LOAD_GLOBAL 1 ( abs )				      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( l )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 6 ( r )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 2 ( x )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 STORE_FAST 7 ( diff )				      								    								  
							      								    								  
9 >> 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 5 ( l )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 6 ( r )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 BINARY_ADD						      								    								  
112 LOAD_FAST 2 ( x )					      								    								  
114 COMPARE_OP 4 ( > )					      								    								  
116 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
10 118 LOAD_FAST 6 ( r )				      								    								  
120 LOAD_CONST 3 ( 1 )					      								    								  
122 INPLACE_SUBTRACT					      								    								  
124 STORE_FAST 6 ( r )					      								    								  
126 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
12 >> 128 LOAD_FAST 5 ( l )				      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 5 ( l )					      								    								  
136 JUMP_ABSOLUTE 30					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
13 >> 140 LOAD_GLOBAL 2 ( print )			      								    								  
142 LOAD_CONST 4 ( 'The closest pair is {} and {}' )	      								    								  
144 LOAD_METHOD 3 ( format )				      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 3 ( res_l )				      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_FAST 0 ( arr )					      								    								  
154 LOAD_FAST 4 ( res_r )				      								    								  
156 BINARY_SUBSCR					      								    								  
158 CALL_METHOD 2					      								    								  
160 CALL_FUNCTION 1					      								    								  
162 POP_TOP						      								    								  
164 LOAD_CONST 0 ( None )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MEDIAN_OF_TWO_SORTED_ARRAYS				      MEDIAN_OF_TWO_SORTED_ARRAYS				    MEDIAN_OF_TWO_SORTED_ARRAYS					  MEDIAN_OF_TWO_SORTED_ARRAYS
--							      --							    --								  --
Disassembly of <code object getMedian at 0x7fbac0e8d540, file def getMedian ( ar1 , ar2 , n ) :				    def getMedian ( ar1 , ar2 , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 3 ( i )					      	  j = 0							    	j = 0							  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/MEDIAN
							      	  m1 = - 1						    	m1 = - 1						  _OF_TWO_SORTED_ARRAYS.py", line 83, in <module>
3 4 LOAD_CONST 1 ( 0 )					      	  m2 = - 1						    	m2 = - 1						    if f_filled(*parameters_set) == f_gold(*paramete
6 STORE_FAST 4 ( j )					      	  count = 0						    	count = 0						  rs_set):   File "/home/ubuntu/TransCoder/models/ev
							      	  while count < n + 1 :					    	while count < n + 1 :					  al/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-pytho
4 8 LOAD_CONST 2 ( - 1 )				      	      count += 1					    	    count += 1						  n_sa.test/MEDIAN_OF_TWO_SORTED_ARRAYS.py", line 65
10 STORE_FAST 5 ( m1 )					      	      if i == n :					    	    if i == n :						  , in f_filled	    return m2 + m2 / m2 ZeroDivision
							      		  m1 = m2					    		m1 = m2						  Error: division by zero
5 12 LOAD_CONST 2 ( - 1 )				      		  m2 = ar2 [ 0 ]				    		m2 = ar2 [ 0 ]					  
14 STORE_FAST 6 ( m2 )					      		  break						    		break						  
							      	      elif j == n :					    	    elif j == n :					  
6 16 LOAD_CONST 1 ( 0 )					      		  m1 = m2					    		m1 = m2						  
18 STORE_FAST 7 ( count )				      		  m2 = ar1 [ 0 ]				    		m2 = ar1 [ 0 ]					  
							      		  break						    		break						  
7 20 SETUP_LOOP 128 ( to 150 )				      	      if ar1 [ i ] < ar2 [ j ] :			    	    if ar1 [ i ] < ar2 [ j ] :				  
>> 22 LOAD_FAST 7 ( count )				      		  m1 = m2					    		m1 = m2						  
24 LOAD_FAST 2 ( n )					      		  m2 = ar1 [ i ]				    		m2 = ar1 [ i ]					  
26 LOAD_CONST 3 ( 1 )					      		  i += 1					    		i += 1						  
28 BINARY_ADD						      	      else :						    		j += 1						  
30 COMPARE_OP 0 ( < )					      		  m1 = m2					    	return m2 + m2 / m2					  
32 POP_JUMP_IF_FALSE 148				      		  m2 = ar2 [ j ]				    								  
							      		  j += 1					    								  
8 34 LOAD_FAST 7 ( count )				      	  return ( m1 + m2 ) / 2				    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 7 ( count )				      								    								  
							      								    								  
9 42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_FAST 2 ( n )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
10 50 LOAD_FAST 6 ( m2 )				      								    								  
52 STORE_FAST 5 ( m1 )					      								    								  
							      								    								  
11 54 LOAD_FAST 1 ( ar2 )				      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 STORE_FAST 6 ( m2 )					      								    								  
							      								    								  
12 62 BREAK_LOOP					      								    								  
64 JUMP_FORWARD 22 ( to 88 )				      								    								  
							      								    								  
13 >> 66 LOAD_FAST 4 ( j )				      								    								  
68 LOAD_FAST 2 ( n )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
14 74 LOAD_FAST 6 ( m2 )				      								    								  
76 STORE_FAST 5 ( m1 )					      								    								  
							      								    								  
15 78 LOAD_FAST 0 ( ar1 )				      								    								  
80 LOAD_CONST 1 ( 0 )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 STORE_FAST 6 ( m2 )					      								    								  
							      								    								  
16 86 BREAK_LOOP					      								    								  
							      								    								  
17 >> 88 LOAD_FAST 0 ( ar1 )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 1 ( ar2 )					      								    								  
96 LOAD_FAST 4 ( j )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
18 104 LOAD_FAST 6 ( m2 )				      								    								  
106 STORE_FAST 5 ( m1 )					      								    								  
							      								    								  
19 108 LOAD_FAST 0 ( ar1 )				      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 STORE_FAST 6 ( m2 )					      								    								  
							      								    								  
20 116 LOAD_FAST 3 ( i )				      								    								  
118 LOAD_CONST 3 ( 1 )					      								    								  
120 INPLACE_ADD						      								    								  
122 STORE_FAST 3 ( i )					      								    								  
124 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
22 >> 126 LOAD_FAST 6 ( m2 )				      								    								  
128 STORE_FAST 5 ( m1 )					      								    								  
							      								    								  
23 130 LOAD_FAST 1 ( ar2 )				      								    								  
132 LOAD_FAST 4 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 STORE_FAST 6 ( m2 )					      								    								  
							      								    								  
24 138 LOAD_FAST 4 ( j )				      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 INPLACE_ADD						      								    								  
144 STORE_FAST 4 ( j )					      								    								  
146 JUMP_ABSOLUTE 22					      								    								  
>> 148 POP_BLOCK					      								    								  
							      								    								  
25 >> 150 LOAD_FAST 5 ( m1 )				      								    								  
152 LOAD_FAST 6 ( m2 )					      								    								  
154 BINARY_ADD						      								    								  
156 LOAD_CONST 4 ( 2 )					      								    								  
158 BINARY_TRUE_DIVIDE					      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_<unk> ASING_ORDER_ELEMENTS_N_<unk> YS	      MAXIMUM_SUM_<unk> ASING_ORDER_ELEMENTS_N_<unk> YS		    MAXIMUM_SUM_<unk> ASING_ORDER_ELEMENTS_N_<unk> YS		  MAXIMUM_SUM_<unk> ASING_ORDER_ELEMENTS_N_<unk> YS
--							      --							    --								  --
Disassembly of <code object maximumSum at 0x7fbac0e8bc90, fil def maximumSum ( a , n ) :				    def maximumSum ( a , n ) :					  script_not_found : None
3 0 SETUP_LOOP 30 ( to 32 )				      	  global M ;						    	global sum						  
2 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 LOAD_CONST 1 ( 0 )					      	      a [ i ].sort ( ) ;				    	    a [ i ].sort ( )					  
6 LOAD_FAST 1 ( n )					      	  sum = a [ n - 1 ] [ M - 1 ] ;				    	sum = a [ n - 1 ] [ M - 1 ]				  
8 CALL_FUNCTION 2					      	  prev = a [ n - 1 ] [ M - 1 ] ;			    	prev = a [ n - 1 ] [ M - 1 ]				  
10 GET_ITER						      	  for i in range ( n - 2 , - 1 , - 1 ) :		    	for i in range ( n - 2 , - 1 , - 1 ) :			  
>> 12 FOR_ITER 16 ( to 30 )				      	      for j in range ( M - 1 , - 1 , - 1 ) :		    	    for j in range ( M - 1 , - 1 , - 1 ) :		  
14 STORE_FAST 2 ( i )					      		  if ( a [ i ] [ j ] < prev ) :			    		if a [ i ] [ j ] < prev :			  
							      		      prev = a [ i ] [ j ] ;			    		    prev = a [ i ] [ j ]			  
4 16 LOAD_FAST 0 ( a )					      		      sum += prev ;				    		    sum += prev					  
18 LOAD_FAST 2 ( i )					      		      break ;					    		    break					  
20 BINARY_SUBSCR					      	      if ( j == - 1 ) :					    	if j == - 1 :						  
22 LOAD_METHOD 1 ( sort )				      		  return 0 ;					    	    return 0						  
24 CALL_METHOD 0					      	  return sum ;						    return sum							  
26 POP_TOP						      								    								  
28 JUMP_ABSOLUTE 12					      								    								  
>> 30 POP_BLOCK						      								    								  
							      								    								  
5 >> 32 LOAD_FAST 0 ( a )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_GLOBAL 2 ( M )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_SUBSCR					      								    								  
50 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( a )					      								    								  
54 LOAD_FAST 1 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_GLOBAL 2 ( M )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
7 72 SETUP_LOOP 100 ( to 174 )				      								    								  
74 LOAD_GLOBAL 0 ( range )				      								    								  
76 LOAD_FAST 1 ( n )					      								    								  
78 LOAD_CONST 3 ( 2 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_CONST 4 ( - 1 )					      								    								  
84 LOAD_CONST 4 ( - 1 )					      								    								  
86 CALL_FUNCTION 3					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 80 ( to 172 )				      								    								  
92 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 94 SETUP_LOOP 62 ( to 158 )				      								    								  
96 LOAD_GLOBAL 0 ( range )				      								    								  
98 LOAD_GLOBAL 2 ( M )					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 LOAD_CONST 4 ( - 1 )				      								    								  
106 LOAD_CONST 4 ( - 1 )				      								    								  
108 CALL_FUNCTION 3					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 42 ( to 156 )				      								    								  
114 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 116 LOAD_FAST 0 ( a )					      								    								  
118 LOAD_FAST 2 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 5 ( j )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 4 ( prev )				      								    								  
128 COMPARE_OP 0 ( < )					      								    								  
130 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 132 LOAD_FAST 0 ( a )				      								    								  
134 LOAD_FAST 2 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 LOAD_FAST 5 ( j )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
11 144 LOAD_FAST 3 ( sum )				      								    								  
146 LOAD_FAST 4 ( prev )				      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 3 ( sum )				      								    								  
							      								    								  
12 152 BREAK_LOOP					      								    								  
154 JUMP_ABSOLUTE 112					      								    								  
>> 156 POP_BLOCK					      								    								  
							      								    								  
13 >> 158 LOAD_FAST 5 ( j )				      								    								  
160 LOAD_CONST 4 ( - 1 )				      								    								  
162 COMPARE_OP 2 ( == )					      								    								  
164 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
14 166 LOAD_CONST 1 ( 0 )				      								    								  
168 RETURN_VALUE					      								    								  
170 JUMP_ABSOLUTE 90					      								    								  
>> 172 POP_BLOCK					      								    								  
							      								    								  
15 >> 174 LOAD_FAST 3 ( sum )				      								    								  
176 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	      FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	    FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	  FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE
--							      --							    --								  --
Disassembly of <code object findMinNumber at 0x7fbac0e8d540,  def findMinNumber ( n ) :					    def findMinNumber ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( count )				      	  ans = 1						    	ans = 1							  _sa.test/FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_P
							      	  while n % 2 == 0 :					    	while n % 2 == 0 :					  ERFECT_SQUARE.py", line 58	 return ans	^ Sy
3 4 LOAD_CONST 2 ( 1 )					      	      count += 1					    	    count += 1						  ntaxError: 'return' outside function
6 STORE_FAST 2 ( ans )					      	      n //= 2						    	    n //= 1						  
							      	  if count % 2 is not 0 :				    	if count % 2 is not 0 :					  
4 8 SETUP_LOOP 32 ( to 42 )				      	      ans *= 2						    	    ans *= 2						  
>> 10 LOAD_FAST 0 ( n )					      	  for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2  	for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :  
12 LOAD_CONST 3 ( 2 )					      	      count = 0						    	    count = 0						  
14 BINARY_MODULO					      	      while n % i == 0 :				    	    while n % i == 0 :					  
16 LOAD_CONST 1 ( 0 )					      		  count += 1					    		count += 1					  
18 COMPARE_OP 2 ( == )					      		  n //= i					    		n += i						  
20 POP_JUMP_IF_FALSE 40					      	      if count % 2 is not 0 :				    	if count % 2 is not 0 :					  
							      		  ans *= i					    	    ans *= i						  
5 22 LOAD_FAST 1 ( count )				      	  if n > 2 :						    if n > 2 :							  
24 LOAD_CONST 2 ( 1 )					      	      ans *= n						    	ans *= 1						  
26 INPLACE_ADD						      	  return ans						    if n > n :							  
28 STORE_FAST 1 ( count )				      								    	ans *= 1						  
							      								    return ans							  
6 30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 INPLACE_FLOOR_DIVIDE					      								    								  
36 STORE_FAST 0 ( n )					      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 1 ( count )				      								    								  
44 LOAD_CONST 3 ( 2 )					      								    								  
46 BINARY_MODULO					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 9 ( is not )				      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 54 LOAD_FAST 2 ( ans )				      								    								  
56 LOAD_CONST 3 ( 2 )					      								    								  
58 INPLACE_MULTIPLY					      								    								  
60 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
9 >> 62 SETUP_LOOP 92 ( to 156 )			      								    								  
64 LOAD_GLOBAL 0 ( range )				      								    								  
66 LOAD_CONST 4 ( 3 )					      								    								  
68 LOAD_GLOBAL 1 ( int )				      								    								  
70 LOAD_GLOBAL 2 ( math )				      								    								  
72 LOAD_METHOD 3 ( sqrt )				      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 CALL_METHOD 1					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 CALL_FUNCTION 3					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 62 ( to 154 )				      								    								  
92 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 94 LOAD_CONST 1 ( 0 )				      								    								  
96 STORE_FAST 1 ( count )				      								    								  
							      								    								  
11 98 SETUP_LOOP 32 ( to 132 )				      								    								  
>> 100 LOAD_FAST 0 ( n )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 BINARY_MODULO					      								    								  
106 LOAD_CONST 1 ( 0 )					      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
12 112 LOAD_FAST 1 ( count )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 1 ( count )				      								    								  
							      								    								  
13 120 LOAD_FAST 0 ( n )				      								    								  
122 LOAD_FAST 3 ( i )					      								    								  
124 INPLACE_FLOOR_DIVIDE				      								    								  
126 STORE_FAST 0 ( n )					      								    								  
128 JUMP_ABSOLUTE 100					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
14 >> 132 LOAD_FAST 1 ( count )				      								    								  
134 LOAD_CONST 3 ( 2 )					      								    								  
136 BINARY_MODULO					      								    								  
138 LOAD_CONST 1 ( 0 )					      								    								  
140 COMPARE_OP 9 ( is not )				      								    								  
142 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
15 144 LOAD_FAST 2 ( ans )				      								    								  
146 LOAD_FAST 3 ( i )					      								    								  
148 INPLACE_MULTIPLY					      								    								  
150 STORE_FAST 2 ( ans )				      								    								  
152 JUMP_ABSOLUTE 90					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
16 >> 156 LOAD_FAST 0 ( n )				      								    								  
158 LOAD_CONST 3 ( 2 )					      								    								  
160 COMPARE_OP 4 ( > )					      								    								  
162 POP_JUMP_IF_FALSE 172				      								    								  
							      								    								  
17 164 LOAD_FAST 2 ( ans )				      								    								  
166 LOAD_FAST 0 ( n )					      								    								  
168 INPLACE_MULTIPLY					      								    								  
170 STORE_FAST 2 ( ans )				      								    								  
							      								    								  
18 >> 172 LOAD_FAST 2 ( ans )				      								    								  
174 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MAXIMUM_SHORTEST_DISTANCE				      PRINT_MAXIMUM_SHORTEST_DISTANCE				    PRINT_MAXIMUM_SHORTEST_DISTANCE				  PRINT_MAXIMUM_SHORTEST_DISTANCE
--							      --							    --								  --
Disassembly of <code object find_maximum at 0x7fbac0e8d540, f def find_maximum ( a , n , k ) :				    def find_maximum ( a , n , k ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( dict )				      	  b = dict ( )						    	b = dict ( )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/PRINT_
4 STORE_FAST 3 ( b )					      	      x = a [ i ]					    	    x = a [ i ]						  MAXIMUM_SHORTEST_DISTANCE.py", line 66, in <module
							      	      d = min ( 1 + i , n - i )				    	    d = min ( 1 + i , n - i )				  >	if f_filled(*parameters_set) == f_gold(*para
3 6 SETUP_LOOP 82 ( to 90 )				      	      if x not in b.keys ( ) :				    	    if x not in b.keys ( ) :				  meters_set):	 File "/home/ubuntu/TransCoder/model
8 LOAD_GLOBAL 1 ( range )				      		  b [ x ] = d					    		b [ x ] = d					  s/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-p
10 LOAD_FAST 1 ( n )					      	      else :						    	    else :						  ython_sa.test/PRINT_MAXIMUM_SHORTEST_DISTANCE.py",
12 CALL_FUNCTION 1					      		  b [ x ] = min ( d , b [ x ] )			    		b [ x ] = min ( d , b [ x ] )			   line 47, in f_filled	    ans = min ( max ( b [ x
14 GET_ITER						      	  ans = 10 ** 9						    	ans = 1000000000					  ] , b , k , k , x ) , ans ) TypeError: '>' not sup
>> 16 FOR_ITER 70 ( to 88 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  ported between instances of 'dict' and 'int'
18 STORE_FAST 4 ( i )					      	      x = a [ i ]					    	    x = a [ i ]						  
							      	      if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :   	    if x != k - x and k - x in b.keys ( ) :		  
4 20 LOAD_FAST 0 ( a )					      		  ans = min ( max ( b [ x ] , b [ k - x ] ) , ans ) 		ans = min ( max ( b [ x ] , b , k , k , x ) , ans 
22 LOAD_FAST 4 ( i )					      	  return ans						    	return ans						  
24 BINARY_SUBSCR					      								    								  
26 STORE_FAST 5 ( x )					      								    								  
							      								    								  
5 28 LOAD_GLOBAL 2 ( min )				      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 STORE_FAST 6 ( d )					      								    								  
							      								    								  
6 46 LOAD_FAST 5 ( x )					      								    								  
48 LOAD_FAST 3 ( b )					      								    								  
50 LOAD_METHOD 3 ( keys )				      								    								  
52 CALL_METHOD 0					      								    								  
54 COMPARE_OP 7 ( not in )				      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
7 58 LOAD_FAST 6 ( d )					      								    								  
60 LOAD_FAST 3 ( b )					      								    								  
62 LOAD_FAST 5 ( x )					      								    								  
64 STORE_SUBSCR						      								    								  
66 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
9 >> 68 LOAD_GLOBAL 2 ( min )				      								    								  
70 LOAD_FAST 6 ( d )					      								    								  
72 LOAD_FAST 3 ( b )					      								    								  
74 LOAD_FAST 5 ( x )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 CALL_FUNCTION 2					      								    								  
80 LOAD_FAST 3 ( b )					      								    								  
82 LOAD_FAST 5 ( x )					      								    								  
84 STORE_SUBSCR						      								    								  
86 JUMP_ABSOLUTE 16					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
10 >> 90 LOAD_CONST 2 ( 1000000000 )			      								    								  
92 STORE_FAST 7 ( ans )					      								    								  
							      								    								  
11 94 SETUP_LOOP 80 ( to 176 )				      								    								  
96 LOAD_GLOBAL 1 ( range )				      								    								  
98 LOAD_FAST 1 ( n )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 GET_ITER						      								    								  
>> 104 FOR_ITER 68 ( to 174 )				      								    								  
106 STORE_FAST 4 ( i )					      								    								  
							      								    								  
12 108 LOAD_FAST 0 ( a )				      								    								  
110 LOAD_FAST 4 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 STORE_FAST 5 ( x )					      								    								  
							      								    								  
13 116 LOAD_FAST 5 ( x )				      								    								  
118 LOAD_FAST 2 ( k )					      								    								  
120 LOAD_FAST 5 ( x )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 COMPARE_OP 3 ( != )					      								    								  
126 POP_JUMP_IF_FALSE 104				      								    								  
128 LOAD_FAST 2 ( k )					      								    								  
130 LOAD_FAST 5 ( x )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 LOAD_FAST 3 ( b )					      								    								  
136 LOAD_METHOD 3 ( keys )				      								    								  
138 CALL_METHOD 0					      								    								  
140 COMPARE_OP 6 ( in )					      								    								  
142 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
14 144 LOAD_GLOBAL 2 ( min )				      								    								  
146 LOAD_GLOBAL 4 ( max )				      								    								  
148 LOAD_FAST 3 ( b )					      								    								  
150 LOAD_FAST 5 ( x )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 3 ( b )					      								    								  
156 LOAD_FAST 2 ( k )					      								    								  
158 LOAD_FAST 5 ( x )					      								    								  
160 BINARY_SUBTRACT					      								    								  
162 BINARY_SUBSCR					      								    								  
164 CALL_FUNCTION 2					      								    								  
166 LOAD_FAST 7 ( ans )					      								    								  
168 CALL_FUNCTION 2					      								    								  
170 STORE_FAST 7 ( ans )				      								    								  
172 JUMP_ABSOLUTE 104					      								    								  
>> 174 POP_BLOCK					      								    								  
							      								    								  
15 >> 176 LOAD_FAST 7 ( ans )				      								    								  
178 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_FACTORS_NUMBER				      FIND_SUM_EVEN_FACTORS_NUMBER				    FIND_SUM_EVEN_FACTORS_NUMBER				  FIND_SUM_EVEN_FACTORS_NUMBER
--							      --							    --								  --
Disassembly of <code object sumofFactors at 0x7fbac0e8d540, f def sumofFactors ( n ) :					    def sumofFactors ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  if ( n % 2 != 0 ) :					    	if n % 2 != 0 :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 2 )					      	      return 0						    	    return 0						  _sa.test/FIND_SUM_EVEN_FACTORS_NUMBER.py", line 59
4 BINARY_MODULO						      	  res = 1						    	res = 1							       return res     ^ SyntaxError: 'return' outsid
6 LOAD_CONST 2 ( 0 )					      	  for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :  	for i in range ( 2 , int ( math.sqrt ( n ) ) + 1 ) :	  e function
8 COMPARE_OP 3 ( != )					      	      count = 0						    	    count = 0						  
10 POP_JUMP_IF_FALSE 16					      	      curr_sum = 1					    	    curr_sum = 1					  
							      	      curr_term = 1					    	    curr_term = 1					  
3 12 LOAD_CONST 2 ( 0 )					      	      while ( n % i == 0 ) :				    	    while n % i == 0 :					  
14 RETURN_VALUE						      		  count = count + 1				    		count = count + 1				  
							      		  n = n // i					    		n = n // i					  
4 >> 16 LOAD_CONST 3 ( 1 )				      		  if ( i == 2 and count == 1 ) :		    		if i == 2 and count == 1 :			  
18 STORE_FAST 1 ( res )					      		      curr_sum = 0				    		    curr_sum = 0				  
							      		  curr_term = curr_term * i			    		curr_term = curr_term * i			  
5 20 SETUP_LOOP 122 ( to 144 )				      		  curr_sum = curr_sum + curr_term		    		curr_sum = curr_sum + curr_term			  
22 LOAD_GLOBAL 0 ( range )				      	      res = res * curr_sum				    	    res = res * curr_sum				  
24 LOAD_CONST 1 ( 2 )					      	  if ( n >= 2 ) :					    	if n >= 2 :						  
26 LOAD_GLOBAL 1 ( int )				      	      res = res * ( 1 + n )				    	    res = res + 1					  
28 LOAD_GLOBAL 2 ( math )				      	  return res						    	res = res + 1						  
30 LOAD_METHOD 3 ( sqrt )				      								    return res							  
32 LOAD_FAST 0 ( n )					      								    								  
34 CALL_METHOD 1					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 94 ( to 142 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 50 LOAD_CONST 2 ( 0 )					      								    								  
52 STORE_FAST 3 ( count )				      								    								  
							      								    								  
7 54 LOAD_CONST 3 ( 1 )					      								    								  
56 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
8 58 LOAD_CONST 3 ( 1 )					      								    								  
60 STORE_FAST 5 ( curr_term )				      								    								  
							      								    								  
9 62 SETUP_LOOP 68 ( to 132 )				      								    								  
>> 64 LOAD_FAST 0 ( n )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 BINARY_MODULO					      								    								  
70 LOAD_CONST 2 ( 0 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
10 76 LOAD_FAST 3 ( count )				      								    								  
78 LOAD_CONST 3 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 3 ( count )				      								    								  
							      								    								  
11 84 LOAD_FAST 0 ( n )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_FLOOR_DIVIDE					      								    								  
90 STORE_FAST 0 ( n )					      								    								  
							      								    								  
12 92 LOAD_FAST 2 ( i )					      								    								  
94 LOAD_CONST 1 ( 2 )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 112				      								    								  
100 LOAD_FAST 3 ( count )				      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
13 108 LOAD_CONST 2 ( 0 )				      								    								  
110 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
14 >> 112 LOAD_FAST 5 ( curr_term )			      								    								  
114 LOAD_FAST 2 ( i )					      								    								  
116 BINARY_MULTIPLY					      								    								  
118 STORE_FAST 5 ( curr_term )				      								    								  
							      								    								  
15 120 LOAD_FAST 4 ( curr_sum )				      								    								  
122 LOAD_FAST 5 ( curr_term )				      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 4 ( curr_sum )				      								    								  
128 JUMP_ABSOLUTE 64					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
16 >> 132 LOAD_FAST 1 ( res )				      								    								  
134 LOAD_FAST 4 ( curr_sum )				      								    								  
136 BINARY_MULTIPLY					      								    								  
138 STORE_FAST 1 ( res )				      								    								  
140 JUMP_ABSOLUTE 46					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
17 >> 144 LOAD_FAST 0 ( n )				      								    								  
146 LOAD_CONST 1 ( 2 )					      								    								  
148 COMPARE_OP 5 ( >= )					      								    								  
150 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
18 152 LOAD_FAST 1 ( res )				      								    								  
154 LOAD_CONST 3 ( 1 )					      								    								  
156 LOAD_FAST 0 ( n )					      								    								  
158 BINARY_ADD						      								    								  
160 BINARY_MULTIPLY					      								    								  
162 STORE_FAST 1 ( res )				      								    								  
							      								    								  
19 >> 164 LOAD_FAST 1 ( res )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S
--							      --							    --								  --
Disassembly of <code object deleteElements at 0x7fbac0e89d20, def deleteElements ( arr , n , k ) :			    def deleteElements ( arr , n , k ) :			  script_not_found : None
2 0 BUILD_LIST 0					      	  st = [ ]						    	st = [ ]						  
2 STORE_FAST 3 ( st )					      	  st.append ( arr [ 0 ] )				    	st.append ( arr [ 0 ] )					  
							      	  top = 0						    	top = 0							  
3 4 LOAD_FAST 3 ( st )					      	  count = 0						    	count = 0						  
6 LOAD_METHOD 0 ( append )				      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 LOAD_FAST 0 ( arr )					      	      while ( len ( st ) != 0 and count < k and st [ top ]  	    while len ( st ) != 0 and count < k and st [ top ] <  
10 LOAD_CONST 1 ( 0 )					      		  st.pop ( )					    		st.pop ( )					  
12 BINARY_SUBSCR					      		  count += 1					    		count += 1					  
14 CALL_METHOD 1					      		  top -= 1					    		top -= 1					  
16 POP_TOP						      	      st.append ( arr [ i ] )				    	st.append ( arr [ i ] )					  
							      	      top += 1						    	top += 1						  
4 18 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , len ( st ) ) :			    for i in range ( 0 , len ( st ) ) :				  
20 STORE_FAST 4 ( top )					      	      print ( st [ i ] , "" , end = "" )		    	print ( st [ i ] )					  
							      								    								  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 26 SETUP_LOOP 106 ( to 134 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 92 ( to 132 )				      								    								  
40 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 42 SETUP_LOOP 64 ( to 108 )				      								    								  
>> 44 LOAD_GLOBAL 2 ( len )				      								    								  
46 LOAD_FAST 3 ( st )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 106				      								    								  
56 LOAD_FAST 5 ( count )				      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 106				      								    								  
64 LOAD_FAST 3 ( st )					      								    								  
66 LOAD_FAST 4 ( top )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 6 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
8 80 LOAD_FAST 3 ( st )					      								    								  
82 LOAD_METHOD 3 ( pop )				      								    								  
84 CALL_METHOD 0					      								    								  
86 POP_TOP						      								    								  
							      								    								  
9 88 LOAD_FAST 5 ( count )				      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 5 ( count )				      								    								  
							      								    								  
10 96 LOAD_FAST 4 ( top )				      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 INPLACE_SUBTRACT					      								    								  
102 STORE_FAST 4 ( top )				      								    								  
104 JUMP_ABSOLUTE 44					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 3 ( st )				      								    								  
110 LOAD_METHOD 0 ( append )				      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 6 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_METHOD 1					      								    								  
120 POP_TOP						      								    								  
							      								    								  
12 122 LOAD_FAST 4 ( top )				      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 4 ( top )				      								    								  
130 JUMP_ABSOLUTE 38					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
13 >> 134 SETUP_LOOP 40 ( to 176 )			      								    								  
136 LOAD_GLOBAL 1 ( range )				      								    								  
138 LOAD_CONST 1 ( 0 )					      								    								  
140 LOAD_GLOBAL 2 ( len )				      								    								  
142 LOAD_FAST 3 ( st )					      								    								  
144 CALL_FUNCTION 1					      								    								  
146 CALL_FUNCTION 2					      								    								  
148 GET_ITER						      								    								  
>> 150 FOR_ITER 22 ( to 174 )				      								    								  
152 STORE_FAST 6 ( i )					      								    								  
							      								    								  
14 154 LOAD_GLOBAL 4 ( print )				      								    								  
156 LOAD_FAST 3 ( st )					      								    								  
158 LOAD_FAST 6 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_CONST 3 ( '' )					      								    								  
164 LOAD_CONST 3 ( '' )					      								    								  
166 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
168 CALL_FUNCTION_KW 3					      								    								  
170 POP_TOP						      								    								  
172 JUMP_ABSOLUTE 150					      								    								  
>> 174 POP_BLOCK					      								    								  
>> 176 LOAD_CONST 0 ( None )				      								    								  
178 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	      REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	    REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE		  REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE
--							      --							    --								  --
Disassembly of <code object reversingString at 0x7fbac0e8bc90 def reversingString ( str , start , end ) :		    def reversingString ( str , start , end ) :			  script_not_found : None
2 0 SETUP_LOOP 196 ( to 198 )				      	  while ( start < end ) :				    	while start < end :					  
>> 2 LOAD_FAST 1 ( start )				      	      str = ( str [ : start ] + chr ( ord ( str [ start ] ) 	    str = str [ : start ] + chr ( ord ( str [ start ] ) ^ 
4 LOAD_FAST 2 ( end )					      	      str = ( str [ : end ] + chr ( ord ( str [ start ] ) ^ 	    str = str [ : end ] + chr ( ord ( str [ start ] ) ^ o 
6 COMPARE_OP 0 ( < )					      	      str = ( str [ : start ] + chr ( ord ( str [ start ] ) 	    str = str [ : start ] + chr ( ord ( str [ start ] ) ^ 
8 POP_JUMP_IF_FALSE 196					      	      start += 1 ;					    	    start += 1						  
							      	      end -= 1 ;					    	    end -= 1						  
3 10 LOAD_FAST 0 ( str )				      	  return str ;						    	return str						  
12 LOAD_CONST 0 ( None )				      								    								  
14 LOAD_FAST 1 ( start )				      								    								  
16 BUILD_SLICE 2					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_GLOBAL 0 ( chr )				      								    								  
22 LOAD_GLOBAL 1 ( ord )				      								    								  
24 LOAD_FAST 0 ( str )					      								    								  
26 LOAD_FAST 1 ( start )				      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 LOAD_GLOBAL 1 ( ord )				      								    								  
34 LOAD_FAST 0 ( str )					      								    								  
36 LOAD_FAST 2 ( end )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 BINARY_XOR						      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 0 ( str )					      								    								  
50 LOAD_FAST 1 ( start )				      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 BUILD_SLICE 2					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 0 ( str )					      								    								  
							      								    								  
4 66 LOAD_FAST 0 ( str )				      								    								  
68 LOAD_CONST 0 ( None )				      								    								  
70 LOAD_FAST 2 ( end )					      								    								  
72 BUILD_SLICE 2					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_GLOBAL 0 ( chr )				      								    								  
78 LOAD_GLOBAL 1 ( ord )				      								    								  
80 LOAD_FAST 0 ( str )					      								    								  
82 LOAD_FAST 1 ( start )				      								    								  
84 BINARY_SUBSCR					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 LOAD_GLOBAL 1 ( ord )				      								    								  
90 LOAD_FAST 0 ( str )					      								    								  
92 LOAD_FAST 2 ( end )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 BINARY_XOR						      								    								  
100 CALL_FUNCTION 1					      								    								  
102 BINARY_ADD						      								    								  
104 LOAD_FAST 0 ( str )					      								    								  
106 LOAD_FAST 2 ( end )					      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 BINARY_ADD						      								    								  
112 LOAD_CONST 0 ( None )				      								    								  
114 BUILD_SLICE 2					      								    								  
116 BINARY_SUBSCR					      								    								  
118 BINARY_ADD						      								    								  
120 STORE_FAST 0 ( str )				      								    								  
							      								    								  
5 122 LOAD_FAST 0 ( str )				      								    								  
124 LOAD_CONST 0 ( None )				      								    								  
126 LOAD_FAST 1 ( start )				      								    								  
128 BUILD_SLICE 2					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_GLOBAL 0 ( chr )				      								    								  
134 LOAD_GLOBAL 1 ( ord )				      								    								  
136 LOAD_FAST 0 ( str )					      								    								  
138 LOAD_FAST 1 ( start )				      								    								  
140 BINARY_SUBSCR					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 LOAD_GLOBAL 1 ( ord )				      								    								  
146 LOAD_FAST 0 ( str )					      								    								  
148 LOAD_FAST 2 ( end )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 BINARY_XOR						      								    								  
156 CALL_FUNCTION 1					      								    								  
158 BINARY_ADD						      								    								  
160 LOAD_FAST 0 ( str )					      								    								  
162 LOAD_FAST 1 ( start )				      								    								  
164 LOAD_CONST 1 ( 1 )					      								    								  
166 BINARY_ADD						      								    								  
168 LOAD_CONST 0 ( None )				      								    								  
170 BUILD_SLICE 2					      								    								  
172 BINARY_SUBSCR					      								    								  
174 BINARY_ADD						      								    								  
176 STORE_FAST 0 ( str )				      								    								  
							      								    								  
6 178 LOAD_FAST 1 ( start )				      								    								  
180 LOAD_CONST 1 ( 1 )					      								    								  
182 INPLACE_ADD						      								    								  
184 STORE_FAST 1 ( start )				      								    								  
							      								    								  
7 186 LOAD_FAST 2 ( end )				      								    								  
188 LOAD_CONST 1 ( 1 )					      								    								  
190 INPLACE_SUBTRACT					      								    								  
192 STORE_FAST 2 ( end )				      								    								  
194 JUMP_ABSOLUTE 2					      								    								  
>> 196 POP_BLOCK					      								    								  
							      								    								  
8 >> 198 LOAD_FAST 0 ( str )				      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_SUBARRAY_ADDED_<unk> TIVE_PRODUCT_CASE     MAXIMUM_PR<unk> CT_SUBARRAY_ADDED_<unk> TIVE_PRODUCT_CASE	    MAXIMUM_PR<unk> CT_SUBARRAY_ADDED_<unk> TIVE_PRODUCT_CASE	  MAXIMUM_PR<unk> CT_SUBARRAY_ADDED_<unk> TIVE_PRODUCT_CASE
--							      --							    --								  --
Disassembly of <code object findMaxProduct at 0x7fbac0e8de40, def findMaxProduct ( arr , n ) :				    def findMaxProduct ( arr , n = 5 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( float )				      	  ans = - float ( 'inf' )				    	ans = - float ( 'inf' )					  
2 LOAD_CONST 1 ( 'inf' )				      	  maxval = 1						    	maxval = 1						  
4 CALL_FUNCTION 1					      	  minval = 1						    	minval = 1						  
6 UNARY_NEGATIVE					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
8 STORE_FAST 2 ( ans )					      	      if arr [ i ] > 0 :				    	    if arr [ i ] > 0 :					  
							      		  maxval = maxval * arr [ i ]			    		maxval = maxval * arr [ i ]			  
3 10 LOAD_CONST 2 ( 1 )					      		  minval = min ( 1 , minval * arr [ i ] )	    		minval = min ( 1 * minval * arr [ i ] )		  
12 STORE_FAST 3 ( maxval )				      	      elif arr [ i ] == 0 :				    	    elif arr [ i ] == 0 :				  
							      		  minval = 1					    		minval = 1					  
4 14 LOAD_CONST 2 ( 1 )					      		  maxval = 0					    		maxval = 0					  
16 STORE_FAST 4 ( minval )				      	      elif arr [ i ] < 0 :				    	    else :						  
							      		  prevMax = maxval				    		if arr [ i ] < 0 :				  
5 18 SETUP_LOOP 146 ( to 166 )				      		  maxval = minval * arr [ i ]			    		    prevMax = maxval				  
20 LOAD_GLOBAL 1 ( range )				      		  minval = prevMax * arr [ i ]			    		    maxval = minval * arr [ i ]			  
22 LOAD_CONST 3 ( 0 )					      	      ans = max ( ans , maxval )			    		    minval = prevMax * arr [ i ]		  
24 LOAD_FAST 1 ( n )					      	      if maxval <= 0 :					    	    ans = max ( ans , maxval )				  
26 CALL_FUNCTION 2					      		  maxval = 1					    	    if maxval <= 0 :					  
28 GET_ITER						      	  return ans						    		maxval = maxval					  
>> 30 FOR_ITER 132 ( to 164 )				      								    	return ans						  
32 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 5 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( 0 )					      								    								  
42 COMPARE_OP 4 ( > )					      								    								  
44 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( maxval )				      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 STORE_FAST 3 ( maxval )				      								    								  
							      								    								  
8 58 LOAD_GLOBAL 2 ( min )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 LOAD_FAST 4 ( minval )				      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 STORE_FAST 4 ( minval )				      								    								  
76 JUMP_FORWARD 62 ( to 140 )				      								    								  
							      								    								  
9 >> 78 LOAD_FAST 0 ( arr )				      								    								  
80 LOAD_FAST 5 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 3 ( 0 )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
10 90 LOAD_CONST 2 ( 1 )				      								    								  
92 STORE_FAST 4 ( minval )				      								    								  
							      								    								  
11 94 LOAD_CONST 3 ( 0 )				      								    								  
96 STORE_FAST 3 ( maxval )				      								    								  
98 JUMP_FORWARD 40 ( to 140 )				      								    								  
							      								    								  
12 >> 100 LOAD_FAST 0 ( arr )				      								    								  
102 LOAD_FAST 5 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_CONST 3 ( 0 )					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
13 112 LOAD_FAST 3 ( maxval )				      								    								  
114 STORE_FAST 6 ( prevMax )				      								    								  
							      								    								  
14 116 LOAD_FAST 4 ( minval )				      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 5 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 BINARY_MULTIPLY					      								    								  
126 STORE_FAST 3 ( maxval )				      								    								  
							      								    								  
15 128 LOAD_FAST 6 ( prevMax )				      								    								  
130 LOAD_FAST 0 ( arr )					      								    								  
132 LOAD_FAST 5 ( i )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 BINARY_MULTIPLY					      								    								  
138 STORE_FAST 4 ( minval )				      								    								  
							      								    								  
16 >> 140 LOAD_GLOBAL 3 ( max )				      								    								  
142 LOAD_FAST 2 ( ans )					      								    								  
144 LOAD_FAST 3 ( maxval )				      								    								  
146 CALL_FUNCTION 2					      								    								  
148 STORE_FAST 2 ( ans )				      								    								  
							      								    								  
17 150 LOAD_FAST 3 ( maxval )				      								    								  
152 LOAD_CONST 3 ( 0 )					      								    								  
154 COMPARE_OP 1 ( <= )					      								    								  
156 POP_JUMP_IF_FALSE 30				      								    								  
							      								    								  
18 158 LOAD_CONST 2 ( 1 )				      								    								  
160 STORE_FAST 3 ( maxval )				      								    								  
162 JUMP_ABSOLUTE 30					      								    								  
>> 164 POP_BLOCK					      								    								  
							      								    								  
19 >> 166 LOAD_FAST 2 ( ans )				      								    								  
168 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE
--							      --							    --								  --
Disassembly of <code object maxSumPairWithDifferenceLessThanK def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :	    def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_METHOD 0 ( sort )				      	  dp = [ 0 ] * N					    	dp = [ 0 ] * N						  _sa.test/MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE.py"
4 CALL_METHOD 0						      	  dp [ 0 ] = 0						    	dp [ 0 ] = 0						  , line 42	return dp - N	  ^ SyntaxError: 're
6 POP_TOP						      	  for i in range ( 1 , N ) :				    	for i in range ( 1 , N ) :				  turn' outside function
							      	      dp [ i ] = dp [ i - 1 ]				    	    dp [ i ] = dp [ i - 1 ]				  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( arr [ i ] - arr [ i - 1 ] < K ) :		    	    if arr [ i ] - arr [ i - 1 ] < K :			  
10 BUILD_LIST 1						      		  if ( i >= 2 ) :				    		if i >= 2 :					  
12 LOAD_FAST 1 ( N )					      		      dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + ar 		    dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + ar 
14 BINARY_MULTIPLY					      		  else :					    		else :						  
16 STORE_FAST 3 ( dp )					      		      dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ 		    dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ 
							      	  return dp [ N - 1 ]					    return dp - N						  
4 18 LOAD_CONST 1 ( 0 )					      								    								  
20 LOAD_FAST 3 ( dp )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_SUBSCR						      								    								  
							      								    								  
5 26 SETUP_LOOP 148 ( to 176 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 LOAD_FAST 1 ( N )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 134 ( to 174 )				      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 3 ( dp )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 3 ( dp )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
7 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_FAST 2 ( K )					      								    								  
78 COMPARE_OP 0 ( < )					      								    								  
80 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
8 82 LOAD_FAST 4 ( i )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 COMPARE_OP 5 ( >= )					      								    								  
88 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
9 90 LOAD_GLOBAL 2 ( max )				      								    								  
92 LOAD_FAST 3 ( dp )					      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 3 ( dp )					      								    								  
100 LOAD_FAST 4 ( i )					      								    								  
102 LOAD_CONST 3 ( 2 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 4 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_FAST 0 ( arr )					      								    								  
118 LOAD_FAST 4 ( i )					      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 BINARY_SUBSCR					      								    								  
126 BINARY_ADD						      								    								  
128 CALL_FUNCTION 2					      								    								  
130 LOAD_FAST 3 ( dp )					      								    								  
132 LOAD_FAST 4 ( i )					      								    								  
134 STORE_SUBSCR					      								    								  
136 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
11 >> 138 LOAD_GLOBAL 2 ( max )				      								    								  
140 LOAD_FAST 3 ( dp )					      								    								  
142 LOAD_FAST 4 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 4 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_FAST 0 ( arr )					      								    								  
154 LOAD_FAST 4 ( i )					      								    								  
156 LOAD_CONST 2 ( 1 )					      								    								  
158 BINARY_SUBTRACT					      								    								  
160 BINARY_SUBSCR					      								    								  
162 BINARY_ADD						      								    								  
164 CALL_FUNCTION 2					      								    								  
166 LOAD_FAST 3 ( dp )					      								    								  
168 LOAD_FAST 4 ( i )					      								    								  
170 STORE_SUBSCR					      								    								  
172 JUMP_ABSOLUTE 38					      								    								  
>> 174 POP_BLOCK					      								    								  
							      								    								  
12 >> 176 LOAD_FAST 3 ( dp )				      								    								  
178 LOAD_FAST 1 ( N )					      								    								  
180 LOAD_CONST 2 ( 1 )					      								    								  
182 BINARY_SUBTRACT					      								    								  
184 BINARY_SUBSCR					      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			      FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			    FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			  FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1
--							      --							    --								  --
Disassembly of <code object isRectangle at 0x7fbac0e8bc90, fi def isRectangle ( m ) :					    def isRectangle ( m ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  rows = len ( m )					    	rows = len ( m )					  
2 LOAD_FAST 0 ( m )					      	  if ( rows == 0 ) :					    	if rows == 0 :						  
4 CALL_FUNCTION 1					      	      return False					    	    return False					  
6 STORE_FAST 1 ( rows )					      	  columns = len ( m [ 0 ] )				    	columns = len ( m [ 0 ] )				  
							      	  for y1 in range ( rows ) :				    	for y1 in range ( rows ) :				  
3 8 LOAD_FAST 1 ( rows )				      	      for x1 in range ( columns ) :			    	    for x1 in range ( columns ) :			  
10 LOAD_CONST 1 ( 0 )					      		  if ( m [ y1 ] [ x1 ] == 1 ) :			    		if m [ y1 ] [ x1 ] == 1 :			  
12 COMPARE_OP 2 ( == )					      		      for y2 in range ( y1 + 1 , rows ) :	    		    for y2 in range ( y1 + 1 , rows ) :		  
14 POP_JUMP_IF_FALSE 20					      			  for x2 in range ( x1 + 1 , columns ) :    			for x2 in range ( x1 + 1 , columns ) :	  
							      			      if ( m [ y1 ] [ x2 ] == 1 and m [ y2  			    if m [ y1 ] [ x2 ] == 1 and m [ y2 ]  
4 16 LOAD_CONST 2 ( False )				      				  return True			    				return True			  
18 RETURN_VALUE						      	  return False						    return False						  
							      								    								  
5 >> 20 LOAD_GLOBAL 0 ( len )				      								    								  
22 LOAD_FAST 0 ( m )					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 STORE_FAST 2 ( columns )				      								    								  
							      								    								  
6 32 SETUP_LOOP 150 ( to 184 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_FAST 1 ( rows )					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 138 ( to 182 )				      								    								  
44 STORE_FAST 3 ( y1 )					      								    								  
							      								    								  
7 46 SETUP_LOOP 132 ( to 180 )				      								    								  
48 LOAD_GLOBAL 1 ( range )				      								    								  
50 LOAD_FAST 2 ( columns )				      								    								  
52 CALL_FUNCTION 1					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 120 ( to 178 )				      								    								  
58 STORE_FAST 4 ( x1 )					      								    								  
							      								    								  
8 60 LOAD_FAST 0 ( m )					      								    								  
62 LOAD_FAST 3 ( y1 )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 4 ( x1 )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
9 76 SETUP_LOOP 98 ( to 176 )				      								    								  
78 LOAD_GLOBAL 1 ( range )				      								    								  
80 LOAD_FAST 3 ( y1 )					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 1 ( rows )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 80 ( to 174 )				      								    								  
94 STORE_FAST 5 ( y2 )					      								    								  
							      								    								  
10 96 SETUP_LOOP 74 ( to 172 )				      								    								  
98 LOAD_GLOBAL 1 ( range )				      								    								  
100 LOAD_FAST 4 ( x1 )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 2 ( columns )				      								    								  
108 CALL_FUNCTION 2					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 56 ( to 170 )				      								    								  
114 STORE_FAST 6 ( x2 )					      								    								  
							      								    								  
11 116 LOAD_FAST 0 ( m )				      								    								  
118 LOAD_FAST 3 ( y1 )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 6 ( x2 )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_CONST 3 ( 1 )					      								    								  
128 COMPARE_OP 2 ( == )					      								    								  
130 POP_JUMP_IF_FALSE 112				      								    								  
132 LOAD_FAST 0 ( m )					      								    								  
134 LOAD_FAST 5 ( y2 )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 LOAD_FAST 4 ( x1 )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_CONST 3 ( 1 )					      								    								  
144 COMPARE_OP 2 ( == )					      								    								  
146 POP_JUMP_IF_FALSE 112				      								    								  
148 LOAD_FAST 0 ( m )					      								    								  
150 LOAD_FAST 5 ( y2 )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 6 ( x2 )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_CONST 3 ( 1 )					      								    								  
160 COMPARE_OP 2 ( == )					      								    								  
162 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
12 164 LOAD_CONST 4 ( True )				      								    								  
166 RETURN_VALUE					      								    								  
168 JUMP_ABSOLUTE 112					      								    								  
>> 170 POP_BLOCK					      								    								  
>> 172 JUMP_ABSOLUTE 92					      								    								  
>> 174 POP_BLOCK					      								    								  
>> 176 JUMP_ABSOLUTE 56					      								    								  
>> 178 POP_BLOCK					      								    								  
>> 180 JUMP_ABSOLUTE 42					      								    								  
>> 182 POP_BLOCK					      								    								  
							      								    								  
13 >> 184 LOAD_CONST 2 ( False )			      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_
--							      --							    --								  --
Disassembly of <code object printClosest at 0x7fbac0e8d540, f def printClosest ( ar1 , ar2 , m , n , x ) :		    def printClosest ( ar1 , ar2 , m , n , x ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sys )				      	  diff = sys.maxsize					    	diff = sys.maxsize					  
2 LOAD_ATTR 1 ( maxsize )				      	  l = 0							    	l = 0							  
4 STORE_FAST 5 ( diff )					      	  r = n - 1						    	r = n - 1						  
							      	  while ( l < m and r >= 0 ) :				    	while l < m and r >= 0 :				  
3 6 LOAD_CONST 1 ( 0 )					      	      if abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff :	    	    if abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff :	  
8 STORE_FAST 6 ( l )					      		  res_l = l					    		res_l = l					  
							      		  res_r = r					    		res_r = r					  
4 10 LOAD_FAST 3 ( n )					      		  diff = abs ( ar1 [ l ] + ar2 [ r ] - x )	    		diff = abs ( ar1 [ l ] + ar2 [ r ] - x )	  
12 LOAD_CONST 2 ( 1 )					      	      if ar1 [ l ] + ar2 [ r ] > x :			    	    if ar1 [ l ] + ar2 [ r ] > x :			  
14 BINARY_SUBTRACT					      		  r = r - 1					    		r = r - 1					  
16 STORE_FAST 7 ( r )					      	      else :						    	    else :						  
							      		  l = l + 1					    		l = l + 1					  
5 18 SETUP_LOOP 118 ( to 138 )				      	  print ( "The closest pair is [" , ar1 [ res_l ] , "," , a 	print ( "The closest pair is [" , ar1 [ res_l ] , "," , a 
>> 20 LOAD_FAST 6 ( l )					      								    								  
22 LOAD_FAST 2 ( m )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 136				      								    								  
28 LOAD_FAST 7 ( r )					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 5 ( >= )					      								    								  
34 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
6 36 LOAD_GLOBAL 2 ( abs )				      								    								  
38 LOAD_FAST 0 ( ar1 )					      								    								  
40 LOAD_FAST 6 ( l )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( ar2 )					      								    								  
46 LOAD_FAST 7 ( r )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 4 ( x )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_FAST 5 ( diff )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
7 64 LOAD_FAST 6 ( l )					      								    								  
66 STORE_FAST 8 ( res_l )				      								    								  
							      								    								  
8 68 LOAD_FAST 7 ( r )					      								    								  
70 STORE_FAST 9 ( res_r )				      								    								  
							      								    								  
9 72 LOAD_GLOBAL 2 ( abs )				      								    								  
74 LOAD_FAST 0 ( ar1 )					      								    								  
76 LOAD_FAST 6 ( l )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( ar2 )					      								    								  
82 LOAD_FAST 7 ( r )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_FAST 4 ( x )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
10 >> 96 LOAD_FAST 0 ( ar1 )				      								    								  
98 LOAD_FAST 6 ( l )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 1 ( ar2 )					      								    								  
104 LOAD_FAST 7 ( r )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 LOAD_FAST 4 ( x )					      								    								  
112 COMPARE_OP 4 ( > )					      								    								  
114 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
11 116 LOAD_FAST 7 ( r )				      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 STORE_FAST 7 ( r )					      								    								  
124 JUMP_ABSOLUTE 20					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 6 ( l )				      								    								  
128 LOAD_CONST 2 ( 1 )					      								    								  
130 BINARY_ADD						      								    								  
132 STORE_FAST 6 ( l )					      								    								  
134 JUMP_ABSOLUTE 20					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
14 >> 138 LOAD_GLOBAL 3 ( print )			      								    								  
140 LOAD_CONST 3 ( 'The closest pair is [' )		      								    								  
142 LOAD_FAST 0 ( ar1 )					      								    								  
144 LOAD_FAST 8 ( res_l )				      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_CONST 4 ( ',' )				      								    								  
150 LOAD_FAST 1 ( ar2 )					      								    								  
152 LOAD_FAST 9 ( res_r )				      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_CONST 5 ( ']' )				      								    								  
158 CALL_FUNCTION 5					      								    								  
160 POP_TOP						      								    								  
162 LOAD_CONST 0 ( None )				      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP		      FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP		    FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP		  FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP
--							      --							    --								  --
Disassembly of <code object findMaxGuests at 0x7fbac0e8bc90,  def findMaxGuests ( arrl , exit , n ) :			    def findMaxGuensure ( arrl , exit , n ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( arrl )				      	  arrl.sort ( ) ;					    	arrl.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  exit.sort ( ) ;					    	exit.sort ( )						  
4 CALL_METHOD 0						      	  guests_in = 1 ;					    	guests_in = 1						  
6 POP_TOP						      	  max_guests = 1 ;					    	max_gu36 = 1						  
							      	  time = arrl [ 0 ] ;					    	time = arrl [ 0 ]					  
3 8 LOAD_FAST 1 ( exit )				      	  i = 1 ;						    	i = 1							  
10 LOAD_METHOD 0 ( sort )				      	  j = 0 ;						    	j = 0							  
12 CALL_METHOD 0					      	  while ( i < n and j < n ) :				    	while i < n and j < n :					  
14 POP_TOP						      	      if ( arrl [ i ] <= exit [ j ] ) :			    	    if arrl [ i ] <= exit [ j ] :			  
							      		  guests_in = guests_in + 1 ;			    		guests_in = guests_in + 1			  
4 16 LOAD_CONST 1 ( 1 )					      		  if ( guests_in > max_guests ) :		    		if guests_in > max_gutz :			  
18 STORE_FAST 3 ( guests_in )				      		      max_guests = guests_in ;			    		    max_gus_in = guests_in			  
							      		      time = arrl [ i ] ;			    		    time = arrl [ i ]				  
5 20 LOAD_CONST 1 ( 1 )					      		  i = i + 1 ;					    	    else :						  
22 STORE_FAST 4 ( max_guests )				      	      else :						    		guests_in = guests_in - 1			  
							      		  guests_in = guests_in - 1 ;			    		j = j + 1					  
6 24 LOAD_FAST 0 ( arrl )				      		  j = j + 1 ;					    	print ( "Maximum Number of Guensure =" , max_gu; ",max_gu 
26 LOAD_CONST 2 ( 0 )					      	  print ( "Maximum Number of Guests =" , max_guests , "at t 								  
28 BINARY_SUBSCR					      								    								  
30 STORE_FAST 5 ( time )				      								    								  
							      								    								  
7 32 LOAD_CONST 1 ( 1 )					      								    								  
34 STORE_FAST 6 ( i )					      								    								  
							      								    								  
8 36 LOAD_CONST 2 ( 0 )					      								    								  
38 STORE_FAST 7 ( j )					      								    								  
							      								    								  
9 40 SETUP_LOOP 90 ( to 132 )				      								    								  
>> 42 LOAD_FAST 6 ( i )					      								    								  
44 LOAD_FAST 2 ( n )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 130				      								    								  
50 LOAD_FAST 7 ( j )					      								    								  
52 LOAD_FAST 2 ( n )					      								    								  
54 COMPARE_OP 0 ( < )					      								    								  
56 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
10 58 LOAD_FAST 0 ( arrl )				      								    								  
60 LOAD_FAST 6 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 1 ( exit )					      								    								  
66 LOAD_FAST 7 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 1 ( <= )					      								    								  
72 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
11 74 LOAD_FAST 3 ( guests_in )				      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 3 ( guests_in )				      								    								  
							      								    								  
12 82 LOAD_FAST 3 ( guests_in )				      								    								  
84 LOAD_FAST 4 ( max_guests )				      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
13 90 LOAD_FAST 3 ( guests_in )				      								    								  
92 STORE_FAST 4 ( max_guests )				      								    								  
							      								    								  
14 94 LOAD_FAST 0 ( arrl )				      								    								  
96 LOAD_FAST 6 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 STORE_FAST 5 ( time )				      								    								  
							      								    								  
15 >> 102 LOAD_FAST 6 ( i )				      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 6 ( i )					      								    								  
110 JUMP_ABSOLUTE 42					      								    								  
							      								    								  
17 >> 112 LOAD_FAST 3 ( guests_in )			      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 STORE_FAST 3 ( guests_in )				      								    								  
							      								    								  
18 120 LOAD_FAST 7 ( j )				      								    								  
122 LOAD_CONST 1 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 7 ( j )					      								    								  
128 JUMP_ABSOLUTE 42					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
19 >> 132 LOAD_GLOBAL 1 ( print )			      								    								  
134 LOAD_CONST 3 ( 'Maximum Number of Guests =' )	      								    								  
136 LOAD_FAST 4 ( max_guests )				      								    								  
138 LOAD_CONST 4 ( 'at time' )				      								    								  
140 LOAD_FAST 5 ( time )				      								    								  
142 CALL_FUNCTION 4					      								    								  
144 POP_TOP						      								    								  
146 LOAD_CONST 0 ( None )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_REPEATING_SUBSEQUENCE				      LONGEST_REPEATING_SUBSEQUENCE				    LONGEST_REPEATING_SUBSEQUENCE				  LONGEST_REPEATING_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object findLongestRepeatingSubSeq at 0x7 def findLongestRepeatingSubSeq ( str ) :			    def findLongestRepeatingSubSeq ( str ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( str )					      	  dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )		    	dp = [ 0 ] * n + 1					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/LONGES
4 CALL_FUNCTION 1					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  T_REPEATING_SUBSEQUENCE.py", line 56, in <module>
6 STORE_FAST 1 ( n )					      	      for j in range ( 1 , n + 1 ) :			    	    for j in range ( 1 , n + 1 ) :			      if f_filled(*parameters_set) == f_gold(*parame
							      		  if ( str [ i - 1 ] == str [ j - 1 ] and i != j )  		for j in range ( 1 , n + 1 ) :			  ters_set):   File "/home/ubuntu/TransCoder/models/
3 8 LOAD_CONST 1 ( 0 )					      		      dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]   		    if str [ i - 1 ] == str [ j - 1 ] and i != j  eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-pyt
10 BUILD_LIST 1						      		  else :					    			dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 hon_sa.test/LONGEST_REPEATING_SUBSEQUENCE.py", lin
12 LOAD_FAST 1 ( n )					      		      dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , d 		dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] [ j ] ) e 31, in f_filled	dp = [ 0 ] * n + 1 TypeError
14 LOAD_CONST 2 ( 1 )					      	  return dp [ n ] [ n ]					    	return dp [ n ] [ n ]					  : can only concatenate list (not "int") to list
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 BUILD_LIST 1						      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 STORE_FAST 2 ( dp )					      								    								  
							      								    								  
4 32 SETUP_LOOP 154 ( to 188 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 136 ( to 186 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 52 SETUP_LOOP 130 ( to 184 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 112 ( to 182 )				      								    								  
70 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 72 LOAD_FAST 0 ( str )				      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 0 ( str )					      								    								  
84 LOAD_FAST 4 ( j )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 138				      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 LOAD_FAST 4 ( j )					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
7 104 LOAD_CONST 2 ( 1 )				      								    								  
106 LOAD_FAST 2 ( dp )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 4 ( j )					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BINARY_SUBSCR					      								    								  
124 BINARY_ADD						      								    								  
126 LOAD_FAST 2 ( dp )					      								    								  
128 LOAD_FAST 3 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 4 ( j )					      								    								  
134 STORE_SUBSCR					      								    								  
136 JUMP_ABSOLUTE 68					      								    								  
							      								    								  
9 >> 138 LOAD_GLOBAL 2 ( max )				      								    								  
140 LOAD_FAST 2 ( dp )					      								    								  
142 LOAD_FAST 3 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 4 ( j )					      								    								  
148 LOAD_CONST 2 ( 1 )					      								    								  
150 BINARY_SUBTRACT					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 2 ( dp )					      								    								  
156 LOAD_FAST 3 ( i )					      								    								  
158 LOAD_CONST 2 ( 1 )					      								    								  
160 BINARY_SUBTRACT					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_FAST 4 ( j )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 CALL_FUNCTION 2					      								    								  
170 LOAD_FAST 2 ( dp )					      								    								  
172 LOAD_FAST 3 ( i )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 LOAD_FAST 4 ( j )					      								    								  
178 STORE_SUBSCR					      								    								  
180 JUMP_ABSOLUTE 68					      								    								  
>> 182 POP_BLOCK					      								    								  
>> 184 JUMP_ABSOLUTE 48					      								    								  
>> 186 POP_BLOCK					      								    								  
							      								    								  
10 >> 188 LOAD_FAST 2 ( dp )				      								    								  
190 LOAD_FAST 1 ( n )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 LOAD_FAST 1 ( n )					      								    								  
196 BINARY_SUBSCR					      								    								  
198 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		      CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		    CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		  CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER
--							      --							    --								  --
Disassembly of <code object checkCorrectOrNot at 0x7fbac0e8d5 def checkCorrectOrNot ( s ) :				    def checkCorrectOrNot ( s ) :				  script_not_found : None
3 0 LOAD_CONST 1 ( 0 )					      	  global MAX_CHAR					    	global MAX_CHAR						  
2 BUILD_LIST 1						      	  count1 = [ 0 ] * MAX_CHAR				    	count1 = [ 0 ] * MAX_CHAR				  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	  count2 = [ 0 ] * MAX_CHAR				    	count2 = [ 0 ] * MAX_CHAR				  
6 BINARY_MULTIPLY					      	  n = len ( s )						    	n = len ( s )						  
8 STORE_FAST 1 ( count1 )				      	  if n == 1 :						    	if n == 1 :						  
							      	      return true					    	    return true						  
4 10 LOAD_CONST 1 ( 0 )					      	  i = 0 ; j = n - 1					    	i = 0							  
12 BUILD_LIST 1						      	  while ( i < j ) :					    	j = n - 1						  
14 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      count1 [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	    	while i < j :						  
16 BINARY_MULTIPLY					      	      count2 [ ord ( s [ j ] ) - ord ( 'a' ) ] += 1	    	    count1 [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	  
18 STORE_FAST 2 ( count2 )				      	      i += 1 ; j -= 1					    	    count2 [ ord ( s [ j ] ) ] += 1			  
							      	  for i in range ( MAX_CHAR ) :				    	    i += 1						  
5 20 LOAD_GLOBAL 1 ( len )				      	      if count1 [ i ] != count2 [ i ] :			    	    j -= 1						  
22 LOAD_FAST 0 ( s )					      		  return False					    	for i in range ( MAX_CHAR ) :				  
24 CALL_FUNCTION 1					      	  return True						    	    if count1 [ i ] != count2 [ i ] :			  
26 STORE_FAST 3 ( n )					      								    		return True					  
							      								    	return False						  
6 28 LOAD_FAST 3 ( n )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 2 ( true )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
8 >> 40 LOAD_CONST 1 ( 0 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
44 LOAD_FAST 3 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 52 SETUP_LOOP 92 ( to 146 )				      								    								  
>> 54 LOAD_FAST 4 ( i )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
10 62 LOAD_FAST 1 ( count1 )				      								    								  
64 LOAD_GLOBAL 3 ( ord )				      								    								  
66 LOAD_FAST 0 ( s )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 LOAD_GLOBAL 3 ( ord )				      								    								  
76 LOAD_CONST 3 ( 'a' )					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 DUP_TOP_TWO						      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 ROT_THREE						      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
11 94 LOAD_FAST 2 ( count2 )				      								    								  
96 LOAD_GLOBAL 3 ( ord )				      								    								  
98 LOAD_FAST 0 ( s )					      								    								  
100 LOAD_FAST 5 ( j )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 LOAD_GLOBAL 3 ( ord )				      								    								  
108 LOAD_CONST 3 ( 'a' )				      								    								  
110 CALL_FUNCTION 1					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 DUP_TOP_TWO						      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 INPLACE_ADD						      								    								  
122 ROT_THREE						      								    								  
124 STORE_SUBSCR					      								    								  
							      								    								  
12 126 LOAD_FAST 4 ( i )				      								    								  
128 LOAD_CONST 2 ( 1 )					      								    								  
130 INPLACE_ADD						      								    								  
132 STORE_FAST 4 ( i )					      								    								  
134 LOAD_FAST 5 ( j )					      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 INPLACE_SUBTRACT					      								    								  
140 STORE_FAST 5 ( j )					      								    								  
142 JUMP_ABSOLUTE 54					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
13 >> 146 SETUP_LOOP 36 ( to 184 )			      								    								  
148 LOAD_GLOBAL 4 ( range )				      								    								  
150 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
152 CALL_FUNCTION 1					      								    								  
154 GET_ITER						      								    								  
>> 156 FOR_ITER 24 ( to 182 )				      								    								  
158 STORE_FAST 4 ( i )					      								    								  
							      								    								  
14 160 LOAD_FAST 1 ( count1 )				      								    								  
162 LOAD_FAST 4 ( i )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_FAST 2 ( count2 )				      								    								  
168 LOAD_FAST 4 ( i )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 COMPARE_OP 3 ( != )					      								    								  
174 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
15 176 LOAD_CONST 4 ( False )				      								    								  
178 RETURN_VALUE					      								    								  
180 JUMP_ABSOLUTE 156					      								    								  
>> 182 POP_BLOCK					      								    								  
							      								    								  
16 >> 184 LOAD_CONST 5 ( True )				      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TWO_ELEMENTS_WHOSE_SUM_IS_CLOSEST_TO_ZERO		      TWO_ELEMENTS_WHOSE_SUM_IS_CLOSEST_TO_ZERO			    TWO_ELEMENTS_WHOSE_SUM_IS_CLOSEST_TO_ZERO			  TWO_ELEMENTS_WHOSE_SUM_IS_CLOSEST_TO_ZERO
--							      --							    --								  --
Disassembly of <code object minAbsSumPair at 0x7fbac0e8de40,  def minAbsSumPair ( arr , arr_size ) :			    def minAbsSumPair ( arr , arr_size = - 1 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  inv_count = 0						    	inv_count = 0						  
2 STORE_FAST 2 ( inv_count )				      	  if arr_size < 2 :					    	if arr_size < 2 :					  
							      	      print ( "Invalid Input" )				    	    print ( "Invalid Input" )				  
3 4 LOAD_FAST 1 ( arr_size )				      	      return						    	    return						  
6 LOAD_CONST 2 ( 2 )					      	  min_l = 0						    	min_l = 0						  
8 COMPARE_OP 0 ( < )					      	  min_r = 1						    	min_r = 1						  
10 POP_JUMP_IF_FALSE 24					      	  min_sum = arr [ 0 ] + arr [ 1 ]			    	min_sum = arr [ 0 ] + arr [ 1 ]				  
							      	  for l in range ( 0 , arr_size - 1 ) :			    	for l in range ( 0 , arr_size - 1 ) :			  
4 12 LOAD_GLOBAL 0 ( print )				      	      for r in range ( l + 1 , arr_size ) :		    	    for r in range ( l + 1 , arr_size ) :		  
14 LOAD_CONST 3 ( 'Invalid Input' )			      		  sum = arr [ l ] + arr [ r ]			    		sum = arr [ l ] + arr [ r ]			  
16 CALL_FUNCTION 1					      		  if abs ( min_sum ) > abs ( sum ) :		    		if abs ( min_sum ) > abs ( sum ) :		  
18 POP_TOP						      		      min_sum = sum				    		    min_sum = sum				  
							      		      min_l = l					    		    min_l = l					  
5 20 LOAD_CONST 0 ( None )				      		      min_r = r					    		    min_r = r					  
22 RETURN_VALUE						      	  print ( "The two elements whose sum is minimum are" , arr print ( "The two elements are minimum are" , arr [ min_l ] [  
							      								    								  
6 >> 24 LOAD_CONST 1 ( 0 )				      								    								  
26 STORE_FAST 3 ( min_l )				      								    								  
							      								    								  
7 28 LOAD_CONST 4 ( 1 )					      								    								  
30 STORE_FAST 4 ( min_r )				      								    								  
							      								    								  
8 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_CONST 4 ( 1 )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_ADD						      								    								  
46 STORE_FAST 5 ( min_sum )				      								    								  
							      								    								  
9 48 SETUP_LOOP 90 ( to 140 )				      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 LOAD_FAST 1 ( arr_size )				      								    								  
56 LOAD_CONST 4 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 72 ( to 138 )				      								    								  
66 STORE_FAST 6 ( l )					      								    								  
							      								    								  
10 68 SETUP_LOOP 66 ( to 136 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 6 ( l )					      								    								  
74 LOAD_CONST 4 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 1 ( arr_size )				      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 48 ( to 134 )				      								    								  
86 STORE_FAST 7 ( r )					      								    								  
							      								    								  
11 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 6 ( l )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 7 ( r )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_FAST 8 ( sum )				      								    								  
							      								    								  
12 104 LOAD_GLOBAL 2 ( abs )				      								    								  
106 LOAD_FAST 5 ( min_sum )				      								    								  
108 CALL_FUNCTION 1					      								    								  
110 LOAD_GLOBAL 2 ( abs )				      								    								  
112 LOAD_FAST 8 ( sum )					      								    								  
114 CALL_FUNCTION 1					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
13 120 LOAD_FAST 8 ( sum )				      								    								  
122 STORE_FAST 5 ( min_sum )				      								    								  
							      								    								  
14 124 LOAD_FAST 6 ( l )				      								    								  
126 STORE_FAST 3 ( min_l )				      								    								  
							      								    								  
15 128 LOAD_FAST 7 ( r )				      								    								  
130 STORE_FAST 4 ( min_r )				      								    								  
132 JUMP_ABSOLUTE 84					      								    								  
>> 134 POP_BLOCK					      								    								  
>> 136 JUMP_ABSOLUTE 64					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
16 >> 140 LOAD_GLOBAL 0 ( print )			      								    								  
142 LOAD_CONST 5 ( 'The two elements whose sum is minimum are 								    								  
144 LOAD_FAST 0 ( arr )					      								    								  
146 LOAD_FAST 3 ( min_l )				      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_CONST 6 ( 'and ' )				      								    								  
152 LOAD_FAST 0 ( arr )					      								    								  
154 LOAD_FAST 4 ( min_r )				      								    								  
156 BINARY_SUBSCR					      								    								  
158 CALL_FUNCTION 4					      								    								  
160 POP_TOP						      								    								  
162 LOAD_CONST 0 ( None )				      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_ARRAY_PERMUTATION_NUMBERS_1_N			      CHANGE_ARRAY_PERMUTATION_NUMBERS_1_N			    CHANGE_ARRAY_PERMUTATION_NUMBERS_1_N			  CHANGE_ARRAY_PERMUTATION_NUMBERS_1_N
--							      --							    --								  --
Disassembly of <code object makePermutation at 0x7fbac0e8d540 def makePermutation ( a , n ) :				    def makePermutation ( a , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  count = dict ( )					    	count = dict ( )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.test/CHANGE_ARRAY_PERMUTATION_NUMBERS_1_N.py",
4 STORE_FAST 2 ( count )				      	      if count.get ( a [ i ] ) :			    	    if count.get ( a [ i ] ) :				   line 38     count += a [ i ] ] += 1
							      		  count [ a [ i ] ] += 1			    		count += a [ i ] ] += 1				  	  ^ SyntaxError: invalid syntax
3 6 SETUP_LOOP 64 ( to 72 )				      	      else :						    	    else :						  
8 LOAD_GLOBAL 1 ( range )				      		  count [ a [ i ] ] = 1 ;			    		count [ a [ i ] ] = 1				  
10 LOAD_FAST 1 ( n )					      	  next_missing = 1					    	next_missing = 1					  
12 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
14 GET_ITER						      	      if count [ a [ i ] ] != 1 or a [ i ] > n or a [ i ] < 	    if count [ a [ i ] ] != 1 or a [ i ] < n or a [ i ] < 
>> 16 FOR_ITER 52 ( to 70 )				      		  count [ a [ i ] ] -= 1			    		count [ a [ i ] ] -= 1				  
18 STORE_FAST 3 ( i )					      		  while count.get ( next_missing ) :		    		while count.get ( next_missing ) :		  
							      		      next_missing += 1				    		    next_missing += 1				  
4 20 LOAD_FAST 2 ( count )				      		  a [ i ] = next_missing			    	    next_missing [ a [ i ] ] = next_missing		  
22 LOAD_METHOD 2 ( get )				      		  count [ next_missing ] = 1			    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 34 LOAD_FAST 2 ( count )				      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 DUP_TOP_TWO						      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 ROT_THREE						      								    								  
52 STORE_SUBSCR						      								    								  
54 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 56 LOAD_CONST 1 ( 1 )				      								    								  
58 LOAD_FAST 2 ( count )				      								    								  
60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 16					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
8 >> 72 LOAD_CONST 1 ( 1 )				      								    								  
74 STORE_FAST 4 ( next_missing )			      								    								  
							      								    								  
9 76 SETUP_LOOP 116 ( to 194 )				      								    								  
78 LOAD_GLOBAL 1 ( range )				      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 104 ( to 192 )				      								    								  
88 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 90 LOAD_FAST 2 ( count )				      								    								  
92 LOAD_FAST 0 ( a )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 COMPARE_OP 3 ( != )					      								    								  
104 POP_JUMP_IF_TRUE 130				      								    								  
106 LOAD_FAST 0 ( a )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 COMPARE_OP 4 ( > )					      								    								  
116 POP_JUMP_IF_TRUE 130				      								    								  
118 LOAD_FAST 0 ( a )					      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 1 ( 1 )					      								    								  
126 COMPARE_OP 0 ( < )					      								    								  
128 POP_JUMP_IF_FALSE 86				      								    								  
							      								    								  
11 >> 130 LOAD_FAST 2 ( count )				      								    								  
132 LOAD_FAST 0 ( a )					      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 DUP_TOP_TWO						      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_CONST 1 ( 1 )					      								    								  
144 INPLACE_SUBTRACT					      								    								  
146 ROT_THREE						      								    								  
148 STORE_SUBSCR					      								    								  
							      								    								  
12 150 SETUP_LOOP 22 ( to 174 )				      								    								  
>> 152 LOAD_FAST 2 ( count )				      								    								  
154 LOAD_METHOD 2 ( get )				      								    								  
156 LOAD_FAST 4 ( next_missing )			      								    								  
158 CALL_METHOD 1					      								    								  
160 POP_JUMP_IF_FALSE 172				      								    								  
							      								    								  
13 162 LOAD_FAST 4 ( next_missing )			      								    								  
164 LOAD_CONST 1 ( 1 )					      								    								  
166 INPLACE_ADD						      								    								  
168 STORE_FAST 4 ( next_missing )			      								    								  
170 JUMP_ABSOLUTE 152					      								    								  
>> 172 POP_BLOCK					      								    								  
							      								    								  
14 >> 174 LOAD_FAST 4 ( next_missing )			      								    								  
176 LOAD_FAST 0 ( a )					      								    								  
178 LOAD_FAST 3 ( i )					      								    								  
180 STORE_SUBSCR					      								    								  
							      								    								  
15 182 LOAD_CONST 1 ( 1 )				      								    								  
184 LOAD_FAST 2 ( count )				      								    								  
186 LOAD_FAST 4 ( next_missing )			      								    								  
188 STORE_SUBSCR					      								    								  
190 JUMP_ABSOLUTE 86					      								    								  
>> 192 POP_BLOCK					      								    								  
>> 194 LOAD_CONST 0 ( None )				      								    								  
196 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_N_X_N_SPIRAL_MATRIX_USING_O1_EXTRA_SPACE		      PRINT_N_X_N_SPIRAL_MATRIX_USING_O1_EXTRA_SPACE		    PRINT_N_X_N_SPIRAL_MATRIX_USING_O1_EXTRA_SPACE		  PRINT_N_X_N_SPIRAL_MATRIX_USING_O1_EXTRA_SPACE
--							      --							    --								  --
Disassembly of <code object printSpiral at 0x7fbac0e89d20, fi def printSpiral ( n ) :					    def printSpiral ( n ) :					  script_not_found : None
2 0 SETUP_LOOP 196 ( to 198 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
4 LOAD_CONST 1 ( 0 )					      		  x = min ( min ( i , j ) , min ( n - 1 - i , n - 1 		x = min ( min ( i , j ) , min ( n - 1 - i , n - 1 
6 LOAD_FAST 0 ( n )					      		  if ( i <= j ) :				    		if i <= j :					  
8 CALL_FUNCTION 2					      		      print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - 		    print ( n - 2 * x - ( n - x ) , end = ( i - x 
10 GET_ITER						      		  else :					    		else :						  
>> 12 FOR_ITER 182 ( to 196 )				      		      print ( ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 		    print ( n - 2 * x - ( n - 2 * x - ( j - x ) ) 
14 STORE_FAST 1 ( i )					      	      print ( )						    	    print ( "." )					  
							      								    								  
3 16 SETUP_LOOP 170 ( to 188 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 156 ( to 186 )				      								    								  
30 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 32 LOAD_GLOBAL 1 ( min )				      								    								  
34 LOAD_GLOBAL 1 ( min )				      								    								  
36 LOAD_FAST 1 ( i )					      								    								  
38 LOAD_FAST 2 ( j )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 LOAD_GLOBAL 1 ( min )				      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 1 ( i )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_FAST 2 ( j )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 STORE_FAST 3 ( x )					      								    								  
							      								    								  
5 70 LOAD_FAST 1 ( i )					      								    								  
72 LOAD_FAST 2 ( j )					      								    								  
74 COMPARE_OP 1 ( <= )					      								    								  
76 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
6 78 LOAD_GLOBAL 2 ( print )				      								    								  
80 LOAD_FAST 0 ( n )					      								    								  
82 LOAD_CONST 3 ( 2 )					      								    								  
84 LOAD_FAST 3 ( x )					      								    								  
86 BINARY_MULTIPLY					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 0 ( n )					      								    								  
92 LOAD_CONST 3 ( 2 )					      								    								  
94 LOAD_FAST 3 ( x )					      								    								  
96 BINARY_MULTIPLY					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_FAST 1 ( i )					      								    								  
104 LOAD_FAST 3 ( x )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 LOAD_FAST 2 ( j )					      								    								  
112 LOAD_FAST 3 ( x )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 LOAD_CONST 4 ( '\t' )				      								    								  
120 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
122 CALL_FUNCTION_KW 2					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 128 LOAD_GLOBAL 2 ( print )			      								    								  
130 LOAD_FAST 0 ( n )					      								    								  
132 LOAD_CONST 3 ( 2 )					      								    								  
134 LOAD_FAST 3 ( x )					      								    								  
136 BINARY_MULTIPLY					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 LOAD_CONST 3 ( 2 )					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 LOAD_FAST 0 ( n )					      								    								  
146 LOAD_CONST 3 ( 2 )					      								    								  
148 LOAD_FAST 3 ( x )					      								    								  
150 BINARY_MULTIPLY					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 LOAD_CONST 3 ( 2 )					      								    								  
156 BINARY_SUBTRACT					      								    								  
158 BINARY_MULTIPLY					      								    								  
160 LOAD_FAST 1 ( i )					      								    								  
162 LOAD_FAST 3 ( x )					      								    								  
164 BINARY_SUBTRACT					      								    								  
166 BINARY_ADD						      								    								  
168 LOAD_FAST 2 ( j )					      								    								  
170 LOAD_FAST 3 ( x )					      								    								  
172 BINARY_SUBTRACT					      								    								  
174 BINARY_ADD						      								    								  
176 LOAD_CONST 4 ( '\t' )				      								    								  
178 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
180 CALL_FUNCTION_KW 2					      								    								  
182 POP_TOP						      								    								  
184 JUMP_ABSOLUTE 28					      								    								  
>> 186 POP_BLOCK					      								    								  
							      								    								  
9 >> 188 LOAD_GLOBAL 2 ( print )			      								    								  
190 CALL_FUNCTION 0					      								    								  
192 POP_TOP						      								    								  
194 JUMP_ABSOLUTE 12					      								    								  
>> 196 POP_BLOCK					      								    								  
>> 198 LOAD_CONST 0 ( None )				      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A
--							      --							    --								  --
Disassembly of <code object printInSortedOrder at 0x7fbac0e89 def printInSortedOrder ( arr , n ) :			    def printInSortedOrder ( arr , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  index = [ 0 ] * n					    	index = [ 0 ] * n					  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_FAST 1 ( n )					      	      index [ i ] = i					    	    index [ i ] = i					  
6 BINARY_MULTIPLY					      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  
8 STORE_FAST 2 ( index )				      	      min = i						    	    min = i						  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 10 SETUP_LOOP 24 ( to 36 )				      		  if ( arr [ index [ min ] ] > arr [ index [ j ] ]  		if arr [ index [ min ] ] > arr [ index [ j ] ] :  
12 LOAD_GLOBAL 0 ( range )				      		      min = j					    		    min = j					  
14 LOAD_FAST 1 ( n )					      	      if ( min != i ) :					    	if min != i :						  
16 CALL_FUNCTION 1					      		  index [ min ] , index [ i ] = index [ i ] , index 	    index [ i ] = ( index [ i ] , index [ min ] )	  
18 GET_ITER						      	  for i in range ( n ) :				    for i in range ( n ) :					  
>> 20 FOR_ITER 12 ( to 34 )				      	      print ( arr [ index [ i ] ] , end = " " )		    	print ( arr [ i ] , end = end )				  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_FAST 2 ( index )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 STORE_SUBSCR						      								    								  
32 JUMP_ABSOLUTE 20					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 SETUP_LOOP 110 ( to 148 )			      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 94 ( to 146 )				      								    								  
52 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 54 LOAD_FAST 3 ( i )					      								    								  
56 STORE_FAST 4 ( min )					      								    								  
							      								    								  
7 58 SETUP_LOOP 50 ( to 110 )				      								    								  
60 LOAD_GLOBAL 0 ( range )				      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 32 ( to 108 )				      								    								  
76 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 78 LOAD_FAST 0 ( arr )				      								    								  
80 LOAD_FAST 2 ( index )				      								    								  
82 LOAD_FAST 4 ( min )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 2 ( index )				      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_SUBSCR					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 74				      								    								  
							      								    								  
9 102 LOAD_FAST 5 ( j )					      								    								  
104 STORE_FAST 4 ( min )				      								    								  
106 JUMP_ABSOLUTE 74					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
10 >> 110 LOAD_FAST 4 ( min )				      								    								  
112 LOAD_FAST 3 ( i )					      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 50				      								    								  
							      								    								  
11 118 LOAD_FAST 2 ( index )				      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 2 ( index )				      								    								  
126 LOAD_FAST 4 ( min )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 ROT_TWO						      								    								  
132 LOAD_FAST 2 ( index )				      								    								  
134 LOAD_FAST 4 ( min )					      								    								  
136 STORE_SUBSCR					      								    								  
138 LOAD_FAST 2 ( index )				      								    								  
140 LOAD_FAST 3 ( i )					      								    								  
142 STORE_SUBSCR					      								    								  
144 JUMP_ABSOLUTE 50					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
12 >> 148 SETUP_LOOP 36 ( to 186 )			      								    								  
150 LOAD_GLOBAL 0 ( range )				      								    								  
152 LOAD_FAST 1 ( n )					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 GET_ITER						      								    								  
>> 158 FOR_ITER 24 ( to 184 )				      								    								  
160 STORE_FAST 3 ( i )					      								    								  
							      								    								  
13 162 LOAD_GLOBAL 1 ( print )				      								    								  
164 LOAD_FAST 0 ( arr )					      								    								  
166 LOAD_FAST 2 ( index )				      								    								  
168 LOAD_FAST 3 ( i )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_CONST 3 ( ' ' )				      								    								  
176 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
178 CALL_FUNCTION_KW 2					      								    								  
180 POP_TOP						      								    								  
182 JUMP_ABSOLUTE 158					      								    								  
>> 184 POP_BLOCK					      								    								  
>> 186 LOAD_CONST 0 ( None )				      								    								  
188 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SEGMENT_VALUE_PUTTING_K_BREAKPOINTS_NUMBER	      MAXIMUM_SEGMENT_VALUE_PUTTING_K_BREAKPOINTS_NUMBER	    MAXIMUM_SEGMENT_VALUE_PUTTING_K_BREAKPOINTS_NUMBER		  MAXIMUM_SEGMENT_VALUE_PUTTING_K_BREAKPOINTS_NUMBER
--							      --							    --								  --
Disassembly of <code object findMaxSegment at 0x7fbac0e8bc90, def findMaxSegment ( s , k ) :				    def findMaxSegment ( s , k ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  seg_len = len ( s ) - k				    	seg_len = len ( s ) - k					  
2 LOAD_FAST 0 ( s )					      	  res = 0						    	res = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( seg_len ) :				    	for i in range ( seg_len ) :				  
6 LOAD_FAST 1 ( k )					      	      res = res * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )    	    res = res * 10 + ord ( s [ i ] ) - ord ( '0' )	  
8 BINARY_SUBTRACT					      	  seg_len_pow = pow ( 10 , seg_len - 1 )		    	seg_len_pow = pow ( 10 , seg_len - 1 )			  
10 STORE_FAST 2 ( seg_len )				      	  curr_val = res					    	curr_val = res						  
							      	  for i in range ( 1 , len ( s ) - seg_len ) :		    	for i in range ( 1 , len ( s ) - seg_len ) :		  
3 12 LOAD_CONST 1 ( 0 )					      	      curr_val = curr_val - ( ord ( s [ i - 1 ] ) - ord ( ' 	    curr_val = curr_val - ord ( s [ i - 1 ] ) - ord ( '0' 
14 STORE_FAST 3 ( res )					      	      curr_val = ( curr_val * 10 + ( ord ( s [ i + seg_len  	    curr_val = curr_val * 10 + ord ( s [ i + seg_len - 1  
							      	      res = max ( res , curr_val )			    	    curr_val = max ( curr_val )				  
4 16 SETUP_LOOP 44 ( to 62 )				      	  return res						    	res = res						  
18 LOAD_GLOBAL 1 ( range )				      								    	return res						  
20 LOAD_FAST 2 ( seg_len )				      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 32 ( to 60 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 3 ( res )				      								    								  
32 LOAD_CONST 2 ( 10 )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_GLOBAL 2 ( ord )				      								    								  
38 LOAD_FAST 0 ( s )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 LOAD_GLOBAL 2 ( ord )				      								    								  
48 LOAD_CONST 3 ( '0' )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( res )					      								    								  
58 JUMP_ABSOLUTE 26					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_GLOBAL 3 ( pow )				      								    								  
64 LOAD_CONST 2 ( 10 )					      								    								  
66 LOAD_FAST 2 ( seg_len )				      								    								  
68 LOAD_CONST 4 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 STORE_FAST 5 ( seg_len_pow )				      								    								  
							      								    								  
7 76 LOAD_FAST 3 ( res )				      								    								  
78 STORE_FAST 6 ( curr_val )				      								    								  
							      								    								  
8 80 SETUP_LOOP 104 ( to 186 )				      								    								  
82 LOAD_GLOBAL 1 ( range )				      								    								  
84 LOAD_CONST 4 ( 1 )					      								    								  
86 LOAD_GLOBAL 0 ( len )				      								    								  
88 LOAD_FAST 0 ( s )					      								    								  
90 CALL_FUNCTION 1					      								    								  
92 LOAD_FAST 2 ( seg_len )				      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 2					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 82 ( to 184 )				      								    								  
102 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 104 LOAD_FAST 6 ( curr_val )				      								    								  
106 LOAD_GLOBAL 2 ( ord )				      								    								  
108 LOAD_FAST 0 ( s )					      								    								  
110 LOAD_FAST 4 ( i )					      								    								  
112 LOAD_CONST 4 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 LOAD_GLOBAL 2 ( ord )				      								    								  
122 LOAD_CONST 3 ( '0' )				      								    								  
124 CALL_FUNCTION 1					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_FAST 5 ( seg_len_pow )				      								    								  
130 BINARY_MULTIPLY					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 STORE_FAST 6 ( curr_val )				      								    								  
							      								    								  
10 136 LOAD_FAST 6 ( curr_val )				      								    								  
138 LOAD_CONST 2 ( 10 )					      								    								  
140 BINARY_MULTIPLY					      								    								  
142 LOAD_GLOBAL 2 ( ord )				      								    								  
144 LOAD_FAST 0 ( s )					      								    								  
146 LOAD_FAST 4 ( i )					      								    								  
148 LOAD_FAST 2 ( seg_len )				      								    								  
150 BINARY_ADD						      								    								  
152 LOAD_CONST 4 ( 1 )					      								    								  
154 BINARY_SUBTRACT					      								    								  
156 BINARY_SUBSCR					      								    								  
158 CALL_FUNCTION 1					      								    								  
160 LOAD_GLOBAL 2 ( ord )				      								    								  
162 LOAD_CONST 3 ( '0' )				      								    								  
164 CALL_FUNCTION 1					      								    								  
166 BINARY_SUBTRACT					      								    								  
168 BINARY_ADD						      								    								  
170 STORE_FAST 6 ( curr_val )				      								    								  
							      								    								  
11 172 LOAD_GLOBAL 4 ( max )				      								    								  
174 LOAD_FAST 3 ( res )					      								    								  
176 LOAD_FAST 6 ( curr_val )				      								    								  
178 CALL_FUNCTION 2					      								    								  
180 STORE_FAST 3 ( res )				      								    								  
182 JUMP_ABSOLUTE 100					      								    								  
>> 184 POP_BLOCK					      								    								  
							      								    								  
12 >> 186 LOAD_FAST 3 ( res )				      								    								  
188 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPRESENT_GIVEN_SET_POINTS_BEST_POSSIBLE_STRAIGHT_LINE	      REPRESENT_GIVEN_SET_POINTS_BEST_POSSIBLE_STRAIGHT_LINE	    REPRESENT_GIVEN_SET_POINTS_BEST_POSSIBLE_STRAIGHT_LINE	  REPRESENT_GIVEN_SET_POINTS_BEST_POSSIBLE_STRAIGHT_LINE
--							      --							    --								  --
Disassembly of <code object bestApproximate at 0x7fbac0e8d540 def bestApproximate ( x , y , n ) :			    def bestApproximate ( x , y , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum_x = 0						    	sum_x = 0						  
2 STORE_FAST 3 ( sum_x )				      	  sum_y = 0						    	sum_y = 0						  
							      	  sum_xy = 0						    	sum_xy = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  sum_x2 = 0						    	sum_x2 = 0						  
6 STORE_FAST 4 ( sum_y )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      sum_x += x [ i ]					    	    sum_x += x [ i ]					  
4 8 LOAD_CONST 1 ( 0 )					      	      sum_y += y [ i ]					    	    sum_y += y [ i ]					  
10 STORE_FAST 5 ( sum_xy )				      	      sum_xy += x [ i ] * y [ i ]			    	    sum_xy += x [ i ] * y [ i ]				  
							      	      sum_x2 += pow ( x [ i ] , 2 )			    	    sum_x2 += pow ( x [ i ] , 2 )			  
5 12 LOAD_CONST 1 ( 0 )					      	  m = ( float ) ( ( n * sum_xy - sum_x * sum_y ) / ( n * su 	m = float ( n * sum_xy ) / ( sum_x * sum_y ) / ( n * sum_ 
14 STORE_FAST 6 ( sum_x2 )				      	  c = ( float ) ( sum_y - m * sum_x ) / n ;		    	c = float ( sum_y - m * sum_x ) / n			  
							      	  print ( "m = " , m ) ;				    	print ( m )						  
6 16 SETUP_LOOP 80 ( to 98 )				      	  print ( "c = " , c ) ;				    	print ( c )						  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 2 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 66 ( to 96 )				      								    								  
30 STORE_FAST 7 ( i )					      								    								  
							      								    								  
7 32 LOAD_FAST 3 ( sum_x )				      								    								  
34 LOAD_FAST 0 ( x )					      								    								  
36 LOAD_FAST 7 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 3 ( sum_x )				      								    								  
							      								    								  
8 44 LOAD_FAST 4 ( sum_y )				      								    								  
46 LOAD_FAST 1 ( y )					      								    								  
48 LOAD_FAST 7 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 4 ( sum_y )				      								    								  
							      								    								  
9 56 LOAD_FAST 5 ( sum_xy )				      								    								  
58 LOAD_FAST 0 ( x )					      								    								  
60 LOAD_FAST 7 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 1 ( y )					      								    								  
66 LOAD_FAST 7 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 5 ( sum_xy )				      								    								  
							      								    								  
10 76 LOAD_FAST 6 ( sum_x2 )				      								    								  
78 LOAD_GLOBAL 1 ( pow )				      								    								  
80 LOAD_FAST 0 ( x )					      								    								  
82 LOAD_FAST 7 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 2 ( 2 )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 6 ( sum_x2 )				      								    								  
94 JUMP_ABSOLUTE 28					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
11 >> 98 LOAD_GLOBAL 2 ( float )			      								    								  
100 LOAD_FAST 2 ( n )					      								    								  
102 LOAD_FAST 5 ( sum_xy )				      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_FAST 3 ( sum_x )				      								    								  
108 LOAD_FAST 4 ( sum_y )				      								    								  
110 BINARY_MULTIPLY					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 LOAD_FAST 2 ( n )					      								    								  
116 LOAD_FAST 6 ( sum_x2 )				      								    								  
118 BINARY_MULTIPLY					      								    								  
120 LOAD_GLOBAL 1 ( pow )				      								    								  
122 LOAD_FAST 3 ( sum_x )				      								    								  
124 LOAD_CONST 2 ( 2 )					      								    								  
126 CALL_FUNCTION 2					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 BINARY_TRUE_DIVIDE					      								    								  
132 CALL_FUNCTION 1					      								    								  
134 STORE_FAST 8 ( m )					      								    								  
							      								    								  
12 136 LOAD_GLOBAL 2 ( float )				      								    								  
138 LOAD_FAST 4 ( sum_y )				      								    								  
140 LOAD_FAST 8 ( m )					      								    								  
142 LOAD_FAST 3 ( sum_x )				      								    								  
144 BINARY_MULTIPLY					      								    								  
146 BINARY_SUBTRACT					      								    								  
148 CALL_FUNCTION 1					      								    								  
150 LOAD_FAST 2 ( n )					      								    								  
152 BINARY_TRUE_DIVIDE					      								    								  
154 STORE_FAST 9 ( c )					      								    								  
							      								    								  
13 156 LOAD_GLOBAL 3 ( print )				      								    								  
158 LOAD_CONST 3 ( 'm = ' )				      								    								  
160 LOAD_FAST 8 ( m )					      								    								  
162 CALL_FUNCTION 2					      								    								  
164 POP_TOP						      								    								  
							      								    								  
14 166 LOAD_GLOBAL 3 ( print )				      								    								  
168 LOAD_CONST 4 ( 'c = ' )				      								    								  
170 LOAD_FAST 9 ( c )					      								    								  
172 CALL_FUNCTION 2					      								    								  
174 POP_TOP						      								    								  
176 LOAD_CONST 0 ( None )				      								    								  
178 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	      SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	    SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	  SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH
--							      --							    --								  --
Disassembly of <code object shortestPath at 0x7fbac0e8d540, f def shortestPath ( graph , u , v , k ) :			    def shortestPath ( graph , u , v , k = 0 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 4 )					      	  V = 4							    	V = 4							  
2 STORE_FAST 4 ( V )					      	  INF = 999999999999					    	INF = 999999999999					  
							      	  if k == 0 and u == v :				    	if k == 0 and u == v :					  
3 4 LOAD_CONST 2 ( 999999999999 )			      	      return 0						    	    return 0						  
6 STORE_FAST 5 ( INF )					      	  if k == 1 and graph [ u ] [ v ] != INF :		    	if k == 1 and graph [ u ] [ v ] != INF :		  
							      	      return graph [ u ] [ v ]				    	    return graph [ u ] [ v ]				  
4 8 LOAD_FAST 3 ( k )					      	  if k <= 0 :						    	if k <= 0 :						  
10 LOAD_CONST 3 ( 0 )					      	      return INF					    	    return INF						  
12 COMPARE_OP 2 ( == )					      	  res = INF						    	res = INF						  
14 POP_JUMP_IF_FALSE 28					      	  for i in range ( V ) :				    	for i in range ( V ) :					  
16 LOAD_FAST 1 ( u )					      	      if graph [ u ] [ i ] != INF and u != i and v != i :   	    if graph [ u ] [ i ] != INF and u != i :		  
18 LOAD_FAST 2 ( v )					      		  rec_res = shortestPath ( graph , i , v , k - 1 )  		gamma = shortestPath ( graph , i , v , k - 1 )	  
20 COMPARE_OP 2 ( == )					      		  if rec_res != INF :				    		if ( != INF ) :					  
22 POP_JUMP_IF_FALSE 28					      		      res = min ( res , graph [ u ] [ i ] + rec_res 		    + min ( res [ i ] [ i ] + u )		  
							      	  return res						    		res = res					  
5 24 LOAD_CONST 3 ( 0 )					      								    	return res						  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 3 ( k )				      								    								  
30 LOAD_CONST 4 ( 1 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 64					      								    								  
36 LOAD_FAST 0 ( graph )				      								    								  
38 LOAD_FAST 1 ( u )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 2 ( v )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 5 ( INF )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 52 LOAD_FAST 0 ( graph )				      								    								  
54 LOAD_FAST 1 ( u )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 2 ( v )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
8 >> 64 LOAD_FAST 3 ( k )				      								    								  
66 LOAD_CONST 3 ( 0 )					      								    								  
68 COMPARE_OP 1 ( <= )					      								    								  
70 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 72 LOAD_FAST 5 ( INF )				      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 5 ( INF )				      								    								  
78 STORE_FAST 6 ( res )					      								    								  
							      								    								  
11 80 SETUP_LOOP 96 ( to 178 )				      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_FAST 4 ( V )					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 84 ( to 176 )				      								    								  
92 STORE_FAST 7 ( i )					      								    								  
							      								    								  
12 94 LOAD_FAST 0 ( graph )				      								    								  
96 LOAD_FAST 1 ( u )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 7 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 5 ( INF )					      								    								  
106 COMPARE_OP 3 ( != )					      								    								  
108 POP_JUMP_IF_FALSE 90				      								    								  
110 LOAD_FAST 1 ( u )					      								    								  
112 LOAD_FAST 7 ( i )					      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 90				      								    								  
118 LOAD_FAST 2 ( v )					      								    								  
120 LOAD_FAST 7 ( i )					      								    								  
122 COMPARE_OP 3 ( != )					      								    								  
124 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
13 126 LOAD_GLOBAL 1 ( shortestPath )			      								    								  
128 LOAD_FAST 0 ( graph )				      								    								  
130 LOAD_FAST 7 ( i )					      								    								  
132 LOAD_FAST 2 ( v )					      								    								  
134 LOAD_FAST 3 ( k )					      								    								  
136 LOAD_CONST 4 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 CALL_FUNCTION 4					      								    								  
142 STORE_FAST 8 ( rec_res )				      								    								  
							      								    								  
14 144 LOAD_FAST 8 ( rec_res )				      								    								  
146 LOAD_FAST 5 ( INF )					      								    								  
148 COMPARE_OP 3 ( != )					      								    								  
150 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
15 152 LOAD_GLOBAL 2 ( min )				      								    								  
154 LOAD_FAST 6 ( res )					      								    								  
156 LOAD_FAST 0 ( graph )				      								    								  
158 LOAD_FAST 1 ( u )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_FAST 7 ( i )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_FAST 8 ( rec_res )				      								    								  
168 BINARY_ADD						      								    								  
170 CALL_FUNCTION 2					      								    								  
172 STORE_FAST 6 ( res )				      								    								  
174 JUMP_ABSOLUTE 90					      								    								  
>> 176 POP_BLOCK					      								    								  
							      								    								  
16 >> 178 LOAD_FAST 6 ( res )				      								    								  
180 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2
--							      --							    --								  --
Disassembly of <code object findLength at 0x7fbac0e8d540, fil def findLength ( string , n ) :				    def findLength ( string , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  Sum = [ 0 ] * ( n + 1 )				    	Sum = [ 0 ] * ( n + 1 )					  
2 BUILD_LIST 1						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
4 LOAD_FAST 1 ( n )					      	      Sum [ i ] = ( Sum [ i - 1 ] + int ( string [ i - 1 ]  	    Sum [ i ] = Sum [ i - 1 ] + int ( string [ i - 1 ] )  
6 LOAD_CONST 2 ( 1 )					      	  ans = 0						    	ans = 0							  
8 BINARY_ADD						      	  for length in range ( 2 , n + 1 , 2 ) :		    	for length in range ( 2 , n + 1 , 2 ) :			  
10 BINARY_MULTIPLY					      	      for i in range ( 0 , n - length + 1 ) :		    	    for i in range ( 0 , n - 1 , 1 ) :			  
12 STORE_FAST 2 ( Sum )					      		  j = i + length - 1				    		j = i + length - 1				  
							      		  if ( Sum [ i + length // 2 ] - Sum [ i ] == Sum [ 		Sum [ i ] = Sum [ i + length + 2 ] - Sum [ i + 1  
3 14 SETUP_LOOP 54 ( to 70 )				      		      ans = max ( ans , length )		    		    ans = max ( ans )				  
16 LOAD_GLOBAL 0 ( range )				      	  return ans						    	    return ans						  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 36 ( to 68 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 2 ( Sum )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_GLOBAL 1 ( int )				      								    								  
46 LOAD_FAST 0 ( string )				      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_FAST 2 ( Sum )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 STORE_SUBSCR						      								    								  
66 JUMP_ABSOLUTE 30					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
5 >> 70 LOAD_CONST 1 ( 0 )				      								    								  
72 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
6 74 SETUP_LOOP 126 ( to 202 )				      								    								  
76 LOAD_GLOBAL 0 ( range )				      								    								  
78 LOAD_CONST 3 ( 2 )					      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_CONST 3 ( 2 )					      								    								  
88 CALL_FUNCTION 3					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 106 ( to 200 )				      								    								  
94 STORE_FAST 5 ( length )				      								    								  
							      								    								  
7 96 SETUP_LOOP 100 ( to 198 )				      								    								  
98 LOAD_GLOBAL 0 ( range )				      								    								  
100 LOAD_CONST 1 ( 0 )					      								    								  
102 LOAD_FAST 1 ( n )					      								    								  
104 LOAD_FAST 5 ( length )				      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_ADD						      								    								  
112 CALL_FUNCTION 2					      								    								  
114 GET_ITER						      								    								  
>> 116 FOR_ITER 78 ( to 196 )				      								    								  
118 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 120 LOAD_FAST 3 ( i )					      								    								  
122 LOAD_FAST 5 ( length )				      								    								  
124 BINARY_ADD						      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 STORE_FAST 6 ( j )					      								    								  
							      								    								  
9 132 LOAD_FAST 2 ( Sum )				      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 LOAD_FAST 5 ( length )				      								    								  
138 LOAD_CONST 3 ( 2 )					      								    								  
140 BINARY_FLOOR_DIVIDE					      								    								  
142 BINARY_ADD						      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 2 ( Sum )					      								    								  
148 LOAD_FAST 3 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 LOAD_FAST 2 ( Sum )					      								    								  
156 LOAD_FAST 3 ( i )					      								    								  
158 LOAD_FAST 5 ( length )				      								    								  
160 BINARY_ADD						      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_FAST 2 ( Sum )					      								    								  
166 LOAD_FAST 3 ( i )					      								    								  
168 LOAD_FAST 5 ( length )				      								    								  
170 LOAD_CONST 3 ( 2 )					      								    								  
172 BINARY_FLOOR_DIVIDE					      								    								  
174 BINARY_ADD						      								    								  
176 BINARY_SUBSCR					      								    								  
178 BINARY_SUBTRACT					      								    								  
180 COMPARE_OP 2 ( == )					      								    								  
182 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
10 184 LOAD_GLOBAL 2 ( max )				      								    								  
186 LOAD_FAST 4 ( ans )					      								    								  
188 LOAD_FAST 5 ( length )				      								    								  
190 CALL_FUNCTION 2					      								    								  
192 STORE_FAST 4 ( ans )				      								    								  
194 JUMP_ABSOLUTE 116					      								    								  
>> 196 POP_BLOCK					      								    								  
>> 198 JUMP_ABSOLUTE 92					      								    								  
>> 200 POP_BLOCK					      								    								  
							      								    								  
11 >> 202 LOAD_FAST 4 ( ans )				      								    								  
204 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_NUMBERS_B_FIND_X_X_B				      GIVEN_TWO_NUMBERS_B_FIND_X_X_B				    GIVEN_TWO_NUMBERS_B_FIND_X_X_B				  GIVEN_TWO_NUMBERS_B_FIND_X_X_B
--							      --							    --								  --
Disassembly of <code object modularEquation at 0x7fbac0e8bc90 def modularEquation ( a , b ) :				    def modularEquation ( a , b ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a < b ) :					    	if a < b :						  
2 LOAD_FAST 1 ( b )					      	      print ( "No solution possible " )			    	    print ( "No solution possible " )			  
4 COMPARE_OP 0 ( < )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  if ( a == b ) :					    	if a == b :						  
							      	      print ( "Infinite Solution possible " )		    	    print ( "Infinite Solution possible " )		  
3 8 LOAD_GLOBAL 0 ( print )				      	      return						    	    return						  
10 LOAD_CONST 1 ( 'No solution possible ' )		      	  count = 0						    	count = 0						  
12 CALL_FUNCTION 1					      	  n = a - b						    	n = a - b						  
14 POP_TOP						      	  y = ( int ) ( math.sqrt ( a - b ) )			    	y = int ( math.sqrt ( a - b ) )				  
							      	  for i in range ( 1 , y + 1 ) :			    	for i in range ( 1 , y + 1 ) :				  
4 16 LOAD_CONST 0 ( None )				      	      if ( n % i == 0 ) :				    	    if n % i == 0 :					  
18 RETURN_VALUE						      		  if ( n / i > b ) :				    		if n / i > b :					  
							      		      count = count + 1				    		    count = count + 1				  
5 >> 20 LOAD_FAST 0 ( a )				      		  if ( i > b ) :				    	    if i > b :						  
22 LOAD_FAST 1 ( b )					      		      count = count + 1				    		count = count + 1				  
24 COMPARE_OP 2 ( == )					      	  if ( y * y == n and y > b ) :				    if y * y == n and y > b :					  
26 POP_JUMP_IF_FALSE 40					      	      count = count - 1					    	count = count - 1					  
							      	  print ( count )					    print ( "Infinite Solution possible " )			  
6 28 LOAD_GLOBAL 0 ( print )				      								    								  
30 LOAD_CONST 2 ( 'Infinite Solution possible ' )	      								    								  
32 CALL_FUNCTION 1					      								    								  
34 POP_TOP						      								    								  
							      								    								  
7 36 LOAD_CONST 0 ( None )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
8 >> 40 LOAD_CONST 3 ( 0 )				      								    								  
42 STORE_FAST 2 ( count )				      								    								  
							      								    								  
9 44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 1 ( b )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 STORE_FAST 3 ( n )					      								    								  
							      								    								  
10 52 LOAD_GLOBAL 1 ( int )				      								    								  
54 LOAD_GLOBAL 2 ( math )				      								    								  
56 LOAD_METHOD 3 ( sqrt )				      								    								  
58 LOAD_FAST 0 ( a )					      								    								  
60 LOAD_FAST 1 ( b )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_METHOD 1					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 STORE_FAST 4 ( y )					      								    								  
							      								    								  
11 70 SETUP_LOOP 70 ( to 142 )				      								    								  
72 LOAD_GLOBAL 4 ( range )				      								    								  
74 LOAD_CONST 4 ( 1 )					      								    								  
76 LOAD_FAST 4 ( y )					      								    								  
78 LOAD_CONST 4 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 CALL_FUNCTION 2					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 52 ( to 140 )				      								    								  
88 STORE_FAST 5 ( i )					      								    								  
							      								    								  
12 90 LOAD_FAST 3 ( n )					      								    								  
92 LOAD_FAST 5 ( i )					      								    								  
94 BINARY_MODULO					      								    								  
96 LOAD_CONST 3 ( 0 )					      								    								  
98 COMPARE_OP 2 ( == )					      								    								  
100 POP_JUMP_IF_FALSE 86				      								    								  
							      								    								  
13 102 LOAD_FAST 3 ( n )				      								    								  
104 LOAD_FAST 5 ( i )					      								    								  
106 BINARY_TRUE_DIVIDE					      								    								  
108 LOAD_FAST 1 ( b )					      								    								  
110 COMPARE_OP 4 ( > )					      								    								  
112 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
14 114 LOAD_FAST 2 ( count )				      								    								  
116 LOAD_CONST 4 ( 1 )					      								    								  
118 BINARY_ADD						      								    								  
120 STORE_FAST 2 ( count )				      								    								  
							      								    								  
15 >> 122 LOAD_FAST 5 ( i )				      								    								  
124 LOAD_FAST 1 ( b )					      								    								  
126 COMPARE_OP 4 ( > )					      								    								  
128 POP_JUMP_IF_FALSE 86				      								    								  
							      								    								  
16 130 LOAD_FAST 2 ( count )				      								    								  
132 LOAD_CONST 4 ( 1 )					      								    								  
134 BINARY_ADD						      								    								  
136 STORE_FAST 2 ( count )				      								    								  
138 JUMP_ABSOLUTE 86					      								    								  
>> 140 POP_BLOCK					      								    								  
							      								    								  
17 >> 142 LOAD_FAST 4 ( y )				      								    								  
144 LOAD_FAST 4 ( y )					      								    								  
146 BINARY_MULTIPLY					      								    								  
148 LOAD_FAST 3 ( n )					      								    								  
150 COMPARE_OP 2 ( == )					      								    								  
152 POP_JUMP_IF_FALSE 170				      								    								  
154 LOAD_FAST 4 ( y )					      								    								  
156 LOAD_FAST 1 ( b )					      								    								  
158 COMPARE_OP 4 ( > )					      								    								  
160 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
18 162 LOAD_FAST 2 ( count )				      								    								  
164 LOAD_CONST 4 ( 1 )					      								    								  
166 BINARY_SUBTRACT					      								    								  
168 STORE_FAST 2 ( count )				      								    								  
							      								    								  
19 >> 170 LOAD_GLOBAL 0 ( print )			      								    								  
172 LOAD_FAST 2 ( count )				      								    								  
174 CALL_FUNCTION 1					      								    								  
176 POP_TOP						      								    								  
178 LOAD_CONST 0 ( None )				      								    								  
180 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1   REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1   REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1	  REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1
--							      --							    --								  --
Disassembly of <code object translate at 0x7fbac0e89d20, file def translate ( st ) :					    def translate ( st ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( st )					    	l = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  if ( l < 2 ) :					    	if l < 2 :						  
4 CALL_FUNCTION 1					      	      return						    	    return None						  
6 STORE_FAST 1 ( l )					      	  i = 0							    	i = 0							  
							      	  j = 0							    	j = 0							  
3 8 LOAD_FAST 1 ( l )					      	  while ( j < l - 1 ) :					    	while j < l - 1 :					  
10 LOAD_CONST 1 ( 2 )					      	      if ( st [ j ] == 'A' and st [ j + 1 ] == 'B' ) :	    	    if st [ j ] == "A" and st [ j + 1 ] == "B" :	  
12 COMPARE_OP 0 ( < )					      		  j += 2					    		j += 2						  
14 POP_JUMP_IF_FALSE 20					      		  st [ i ] = 'C'				    		st [ i ] = "C"					  
							      		  i += 1					    		i += 1						  
4 16 LOAD_CONST 0 ( None )				      		  continue					    		continue					  
18 RETURN_VALUE						      	      st [ i ] = st [ j ]				    	    st [ j ] = st [ j ]					  
							      	      i += 1						    	    i += 1						  
5 >> 20 LOAD_CONST 2 ( 0 )				      	      j += 1						    	    j += 1						  
22 STORE_FAST 2 ( i )					      	  if ( j == l - 1 ) :					    	if j == l - 1 :						  
							      	      st [ i ] = st [ j ]				    	    st [ j ] = st [ j ]					  
6 24 LOAD_CONST 2 ( 0 )					      	      i += 1						    	    i += 1						  
26 STORE_FAST 3 ( j )					      	  st [ i ] = ' '					    st [ i ] = " "						  
							      	  st [ l - 1 ] = ' '					    l [ "A" ] = " "						  
7 28 SETUP_LOOP 98 ( to 128 )				      								    								  
>> 30 LOAD_FAST 3 ( j )					      								    								  
32 LOAD_FAST 1 ( l )					      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
8 42 LOAD_FAST 0 ( st )					      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 4 ( 'A' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 96					      								    								  
54 LOAD_FAST 0 ( st )					      								    								  
56 LOAD_FAST 3 ( j )					      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_CONST 5 ( 'B' )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
9 70 LOAD_FAST 3 ( j )					      								    								  
72 LOAD_CONST 1 ( 2 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 3 ( j )					      								    								  
							      								    								  
10 78 LOAD_CONST 6 ( 'C' )				      								    								  
80 LOAD_FAST 0 ( st )					      								    								  
82 LOAD_FAST 2 ( i )					      								    								  
84 STORE_SUBSCR						      								    								  
							      								    								  
11 86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 2 ( i )					      								    								  
							      								    								  
12 94 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
13 >> 96 LOAD_FAST 0 ( st )				      								    								  
98 LOAD_FAST 3 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 0 ( st )					      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 STORE_SUBSCR					      								    								  
							      								    								  
14 108 LOAD_FAST 2 ( i )				      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 2 ( i )					      								    								  
							      								    								  
15 116 LOAD_FAST 3 ( j )				      								    								  
118 LOAD_CONST 3 ( 1 )					      								    								  
120 INPLACE_ADD						      								    								  
122 STORE_FAST 3 ( j )					      								    								  
124 JUMP_ABSOLUTE 30					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
16 >> 128 LOAD_FAST 3 ( j )				      								    								  
130 LOAD_FAST 1 ( l )					      								    								  
132 LOAD_CONST 3 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
17 140 LOAD_FAST 0 ( st )				      								    								  
142 LOAD_FAST 3 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 0 ( st )					      								    								  
148 LOAD_FAST 2 ( i )					      								    								  
150 STORE_SUBSCR					      								    								  
							      								    								  
18 152 LOAD_FAST 2 ( i )				      								    								  
154 LOAD_CONST 3 ( 1 )					      								    								  
156 INPLACE_ADD						      								    								  
158 STORE_FAST 2 ( i )					      								    								  
							      								    								  
19 >> 160 LOAD_CONST 7 ( ' ' )				      								    								  
162 LOAD_FAST 0 ( st )					      								    								  
164 LOAD_FAST 2 ( i )					      								    								  
166 STORE_SUBSCR					      								    								  
							      								    								  
20 168 LOAD_CONST 7 ( ' ' )				      								    								  
170 LOAD_FAST 0 ( st )					      								    								  
172 LOAD_FAST 1 ( l )					      								    								  
174 LOAD_CONST 3 ( 1 )					      								    								  
176 BINARY_SUBTRACT					      								    								  
178 STORE_SUBSCR					      								    								  
180 LOAD_CONST 0 ( None )				      								    								  
182 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ODD_EVEN_SORT_BRICK_SORT				      ODD_EVEN_SORT_BRICK_SORT					    ODD_EVEN_SORT_BRICK_SORT					  ODD_EVEN_SORT_BRICK_SORT
--							      --							    --								  --
Disassembly of <code object oddEvenSort at 0x7fbac0e8d540, fi def oddEvenSort ( arr , n ) :				    def oddEvenSort ( arr , n ) :				  failure : #Results: 5, 10
2 0 LOAD_CONST 1 ( 0 )					      	  isSorted = 0						    	isSorted = 0						  
2 STORE_FAST 2 ( isSorted )				      	  while isSorted == 0 :					    	while isSorted == 0 :					  
							      	      isSorted = 1					    	    isSorted = 1					  
3 4 SETUP_LOOP 188 ( to 194 )				      	      temp = 0						    	    temp = 0						  
>> 6 LOAD_FAST 2 ( isSorted )				      	      for i in range ( 1 , n - 1 , 2 ) :		    	    for i in range ( 1 , n - 1 , 2 ) :			  
8 LOAD_CONST 1 ( 0 )					      		  if arr [ i ] > arr [ i + 1 ] :		    		if arr [ i ] > arr [ i + 1 ] :			  
10 COMPARE_OP 2 ( == )					      		      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 		    arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 
12 POP_JUMP_IF_FALSE 192				      		      isSorted = 0				    		    isSorted = 0				  
							      	      for i in range ( 0 , n - 1 , 2 ) :		    	for i in range ( 0 , n - 1 , 2 ) :			  
4 14 LOAD_CONST 2 ( 1 )					      		  if arr [ i ] > arr [ i + 1 ] :		    	    if arr [ i ] > arr [ i + 1 ] :			  
16 STORE_FAST 2 ( isSorted )				      		      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 		arr [ i ] = arr [ i + 1 ] , arr [ i ]		  
							      		      isSorted = 0				    		i = arr [ i + 1 ]				  
5 18 LOAD_CONST 1 ( 0 )					      	  return						    								  
20 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
6 22 SETUP_LOOP 82 ( to 106 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 CALL_FUNCTION 3					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 62 ( to 104 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 4 ( > )					      								    								  
62 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
8 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 ROT_TWO						      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 STORE_SUBSCR						      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_SUBSCR						      								    								  
							      								    								  
9 98 LOAD_CONST 1 ( 0 )					      								    								  
100 STORE_FAST 2 ( isSorted )				      								    								  
102 JUMP_ABSOLUTE 40					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 SETUP_LOOP 82 ( to 190 )			      								    								  
108 LOAD_GLOBAL 0 ( range )				      								    								  
110 LOAD_CONST 1 ( 0 )					      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 LOAD_CONST 3 ( 2 )					      								    								  
120 CALL_FUNCTION 3					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 62 ( to 188 )				      								    								  
126 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 128 LOAD_FAST 0 ( arr )				      								    								  
130 LOAD_FAST 4 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 0 ( arr )					      								    								  
136 LOAD_FAST 4 ( i )					      								    								  
138 LOAD_CONST 2 ( 1 )					      								    								  
140 BINARY_ADD						      								    								  
142 BINARY_SUBSCR					      								    								  
144 COMPARE_OP 4 ( > )					      								    								  
146 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
12 148 LOAD_FAST 0 ( arr )				      								    								  
150 LOAD_FAST 4 ( i )					      								    								  
152 LOAD_CONST 2 ( 1 )					      								    								  
154 BINARY_ADD						      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 0 ( arr )					      								    								  
160 LOAD_FAST 4 ( i )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 ROT_TWO						      								    								  
166 LOAD_FAST 0 ( arr )					      								    								  
168 LOAD_FAST 4 ( i )					      								    								  
170 STORE_SUBSCR					      								    								  
172 LOAD_FAST 0 ( arr )					      								    								  
174 LOAD_FAST 4 ( i )					      								    								  
176 LOAD_CONST 2 ( 1 )					      								    								  
178 BINARY_ADD						      								    								  
180 STORE_SUBSCR					      								    								  
							      								    								  
13 182 LOAD_CONST 1 ( 0 )				      								    								  
184 STORE_FAST 2 ( isSorted )				      								    								  
186 JUMP_ABSOLUTE 124					      								    								  
>> 188 POP_BLOCK					      								    								  
>> 190 JUMP_ABSOLUTE 6					      								    								  
>> 192 POP_BLOCK					      								    								  
							      								    								  
14 >> 194 LOAD_CONST 0 ( None )				      								    								  
196 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_SEGMENTS<unk> THS_B_C			      MAXIMUM_NUMBER_SEGMENTS<unk> THS_B_C			    MAXIMUM_NUMBER_SEGMENTS<unk> THS_B_C			  MAXIMUM_NUMBER_SEGMENTS<unk> THS_B_C
--							      --							    --								  --
Disassembly of <code object maximumSegments at 0x7fbac0e8de40 def maximumSegments ( n , a , b , c ) :			    def maximumSegments ( n , a , b , c ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  dp = [ - 1 ] * ( n + 10 )				    	dp = [ - 1 ] * ( n + 10 )				  
2 BUILD_LIST 1						      	  dp [ 0 ] = 0						    	dp [ 0 ] = 0						  
4 LOAD_FAST 0 ( n )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 LOAD_CONST 2 ( 10 )					      	      if ( dp [ i ] != - 1 ) :				    	    if dp [ i ] != - 1 :				  
8 BINARY_ADD						      		  if ( i + a <= n ) :				    		if i + a <= n :					  
10 BINARY_MULTIPLY					      		      dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i +  		    dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i +  
12 STORE_FAST 4 ( dp )					      		  if ( i + b <= n ) :				    	    if i + b <= n :					  
							      		      dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i +  		dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ]  
3 14 LOAD_CONST 3 ( 0 )					      		  if ( i + c <= n ) :				    	    if i + c <= n :					  
16 LOAD_FAST 4 ( dp )					      		      dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i +  		dp [ i ] = max ( dp [ i ] + 1 , dp [ i + 1 ] )	  
18 LOAD_CONST 3 ( 0 )					      	  return dp [ n ]					    		dp [ i ] = dp					  
20 STORE_SUBSCR						      								    	dp [ i ] = dp						  
							      								    return dp							  
4 22 SETUP_LOOP 168 ( to 192 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_CONST 3 ( 0 )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 154 ( to 190 )				      								    								  
36 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 4 ( dp )					      								    								  
40 LOAD_FAST 5 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 1 ( - 1 )					      								    								  
46 COMPARE_OP 3 ( != )					      								    								  
48 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 50 LOAD_FAST 5 ( i )					      								    								  
52 LOAD_FAST 1 ( a )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 COMPARE_OP 1 ( <= )					      								    								  
60 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
7 62 LOAD_GLOBAL 1 ( max )				      								    								  
64 LOAD_FAST 4 ( dp )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 4 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_FAST 4 ( dp )					      								    								  
76 LOAD_FAST 5 ( i )					      								    								  
78 LOAD_FAST 1 ( a )					      								    								  
80 BINARY_ADD						      								    								  
82 BINARY_SUBSCR					      								    								  
84 CALL_FUNCTION 2					      								    								  
86 LOAD_FAST 4 ( dp )					      								    								  
88 LOAD_FAST 5 ( i )					      								    								  
90 LOAD_FAST 1 ( a )					      								    								  
92 BINARY_ADD						      								    								  
94 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 96 LOAD_FAST 5 ( i )				      								    								  
98 LOAD_FAST 2 ( b )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_FAST 0 ( n )					      								    								  
104 COMPARE_OP 1 ( <= )					      								    								  
106 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
9 108 LOAD_GLOBAL 1 ( max )				      								    								  
110 LOAD_FAST 4 ( dp )					      								    								  
112 LOAD_FAST 5 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 4 ( 1 )					      								    								  
118 BINARY_ADD						      								    								  
120 LOAD_FAST 4 ( dp )					      								    								  
122 LOAD_FAST 5 ( i )					      								    								  
124 LOAD_FAST 2 ( b )					      								    								  
126 BINARY_ADD						      								    								  
128 BINARY_SUBSCR					      								    								  
130 CALL_FUNCTION 2					      								    								  
132 LOAD_FAST 4 ( dp )					      								    								  
134 LOAD_FAST 5 ( i )					      								    								  
136 LOAD_FAST 2 ( b )					      								    								  
138 BINARY_ADD						      								    								  
140 STORE_SUBSCR					      								    								  
							      								    								  
10 >> 142 LOAD_FAST 5 ( i )				      								    								  
144 LOAD_FAST 3 ( c )					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_FAST 0 ( n )					      								    								  
150 COMPARE_OP 1 ( <= )					      								    								  
152 POP_JUMP_IF_FALSE 34				      								    								  
							      								    								  
11 154 LOAD_GLOBAL 1 ( max )				      								    								  
156 LOAD_FAST 4 ( dp )					      								    								  
158 LOAD_FAST 5 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_CONST 4 ( 1 )					      								    								  
164 BINARY_ADD						      								    								  
166 LOAD_FAST 4 ( dp )					      								    								  
168 LOAD_FAST 5 ( i )					      								    								  
170 LOAD_FAST 3 ( c )					      								    								  
172 BINARY_ADD						      								    								  
174 BINARY_SUBSCR					      								    								  
176 CALL_FUNCTION 2					      								    								  
178 LOAD_FAST 4 ( dp )					      								    								  
180 LOAD_FAST 5 ( i )					      								    								  
182 LOAD_FAST 3 ( c )					      								    								  
184 BINARY_ADD						      								    								  
186 STORE_SUBSCR					      								    								  
188 JUMP_ABSOLUTE 34					      								    								  
>> 190 POP_BLOCK					      								    								  
							      								    								  
12 >> 192 LOAD_FAST 4 ( dp )				      								    								  
194 LOAD_FAST 0 ( n )					      								    								  
196 BINARY_SUBSCR					      								    								  
198 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS	      MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS	    MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS		  MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS
--							      --							    --								  --
Disassembly of <code object getMinDiff at 0x7fbac0e8d540, fil def getMinDiff ( arr , n , k ) :				    def getMinDiff ( arr , n , k = 0 ) :			  failure : #Results: 0, 10
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  arr.sort ( )						    	arr.sort ( )						  
6 POP_JUMP_IF_FALSE 12					      	  ans = arr [ n - 1 ] - arr [ 0 ]			    	ans = arr [ n - 1 ] - arr [ 0 ]				  
							      	  small = arr [ 0 ] + k					    	small = arr [ 0 ] + k					  
3 8 LOAD_CONST 2 ( 0 )					      	  big = arr [ n - 1 ] - k				    	big = arr [ n - 1 ] - k					  
10 RETURN_VALUE						      	  if ( small > big ) :					    	if small > big :					  
							      	      small , big = big , small				    	    small , big = big , small				  
4 >> 12 LOAD_FAST 0 ( arr )				      	  for i in range ( 1 , n - 1 ) :			    	for i in range ( 1 , n - 1 ) :				  
14 LOAD_METHOD 0 ( sort )				      	      subtract = arr [ i ] - k				    	    subtract = arr [ i ] - k				  
16 CALL_METHOD 0					      	      add = arr [ i ] + k				    	    add = arr [ i ] + k					  
18 POP_TOP						      	      if ( subtract >= small or add <= big ) :		    	    if subtract >= small or add <= big :		  
							      		  continue					    		continue					  
5 20 LOAD_FAST 0 ( arr )				      	      if ( big - subtract <= add - small ) :		    	    if big - subtract <= add - small :			  
22 LOAD_FAST 1 ( n )					      		  small = subtract				    		small = subtract				  
24 LOAD_CONST 1 ( 1 )					      	      else :						    	return min ( big - 1 , n - 1 )				  
26 BINARY_SUBTRACT					      		  big = add					    								  
28 BINARY_SUBSCR					      	  return min ( ans , big - small )			    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
6 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_CONST 2 ( 0 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( k )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 4 ( small )				      								    								  
							      								    								  
7 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 1 ( n )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( k )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 STORE_FAST 5 ( big )					      								    								  
							      								    								  
8 68 LOAD_FAST 4 ( small )				      								    								  
70 LOAD_FAST 5 ( big )					      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
9 76 LOAD_FAST 5 ( big )				      								    								  
78 LOAD_FAST 4 ( small )				      								    								  
80 ROT_TWO						      								    								  
82 STORE_FAST 4 ( small )				      								    								  
84 STORE_FAST 5 ( big )					      								    								  
							      								    								  
10 >> 86 SETUP_LOOP 90 ( to 178 )			      								    								  
88 LOAD_GLOBAL 1 ( range )				      								    								  
90 LOAD_CONST 1 ( 1 )					      								    								  
92 LOAD_FAST 1 ( n )					      								    								  
94 LOAD_CONST 1 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 CALL_FUNCTION 2					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 72 ( to 176 )				      								    								  
104 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 106 LOAD_FAST 0 ( arr )				      								    								  
108 LOAD_FAST 6 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 2 ( k )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 STORE_FAST 7 ( subtract )				      								    								  
							      								    								  
12 118 LOAD_FAST 0 ( arr )				      								    								  
120 LOAD_FAST 6 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 2 ( k )					      								    								  
126 BINARY_ADD						      								    								  
128 STORE_FAST 8 ( add )				      								    								  
							      								    								  
13 130 LOAD_FAST 7 ( subtract )				      								    								  
132 LOAD_FAST 4 ( small )				      								    								  
134 COMPARE_OP 5 ( >= )					      								    								  
136 POP_JUMP_IF_TRUE 102				      								    								  
138 LOAD_FAST 8 ( add )					      								    								  
140 LOAD_FAST 5 ( big )					      								    								  
142 COMPARE_OP 1 ( <= )					      								    								  
144 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
14 146 JUMP_ABSOLUTE 102				      								    								  
							      								    								  
15 >> 148 LOAD_FAST 5 ( big )				      								    								  
150 LOAD_FAST 7 ( subtract )				      								    								  
152 BINARY_SUBTRACT					      								    								  
154 LOAD_FAST 8 ( add )					      								    								  
156 LOAD_FAST 4 ( small )				      								    								  
158 BINARY_SUBTRACT					      								    								  
160 COMPARE_OP 1 ( <= )					      								    								  
162 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
16 164 LOAD_FAST 7 ( subtract )				      								    								  
166 STORE_FAST 4 ( small )				      								    								  
168 JUMP_ABSOLUTE 102					      								    								  
							      								    								  
18 >> 170 LOAD_FAST 8 ( add )				      								    								  
172 STORE_FAST 5 ( big )				      								    								  
174 JUMP_ABSOLUTE 102					      								    								  
>> 176 POP_BLOCK					      								    								  
							      								    								  
19 >> 178 LOAD_GLOBAL 2 ( min )				      								    								  
180 LOAD_FAST 3 ( ans )					      								    								  
182 LOAD_FAST 5 ( big )					      								    								  
184 LOAD_FAST 4 ( small )				      								    								  
186 BINARY_SUBTRACT					      								    								  
188 CALL_FUNCTION 2					      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_SUB_STRING_CAN_MAKE_<unk> VED		      LENGTH_LONGEST_SUB_STRING_CAN_MAKE_<unk> VED		    LENGTH_LONGEST_SUB_STRING_CAN_MAKE_<unk> VED		  LENGTH_LONGEST_SUB_STRING_CAN_MAKE_<unk> VED
--							      --							    --								  --
Disassembly of <code object longestNull at 0x7fbac0e8bc90, fi def longestNull ( S ) :					    def longestNull ( S ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  arr = [ ]						    	arr = [ ]						  
2 STORE_FAST 1 ( arr )					      	  arr.append ( [ '@' , - 1 ] )				    	arr.append ( [ '@' , - 1 ] )				  
							      	  maxlen = 0						    	maxlen = 0						  
3 4 LOAD_FAST 1 ( arr )					      	  for i in range ( len ( S ) ) :			    	for i in range ( len ( S ) ) :				  
6 LOAD_METHOD 0 ( append )				      	      arr.append ( [ S [ i ] , i ] )			    	    arr.append ( [ S [ i ] , i ] )			  
8 LOAD_CONST 1 ( '@' )					      	      while ( len ( arr ) >= 3 and arr [ len ( arr ) - 3 ]  	    while len ( arr ) >= 3 and arr [ len ( arr ) - 3 ] [  
10 LOAD_CONST 2 ( - 1 )					      		  arr.pop ( )					    		arr.pop ( )					  
12 BUILD_LIST 2						      		  arr.pop ( )					    		arr.pop ( )					  
14 CALL_METHOD 1					      		  arr.pop ( )					    	    maxlen = arr [ : - 1 ]				  
16 POP_TOP						      	      tmp = arr [ - 1 ]					    	    maxlen = max ( maxlen [ - 1 ] [ maxlen ] [ 0 ] , maxl 
							      	      maxlen = max ( maxlen , i - tmp [ 1 ] )		    	return arr						  
4 18 LOAD_CONST 3 ( 0 )					      	  return maxlen						    								  
20 STORE_FAST 2 ( maxlen )				      								    								  
							      								    								  
5 22 SETUP_LOOP 178 ( to 202 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_GLOBAL 2 ( len )				      								    								  
28 LOAD_FAST 0 ( S )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 162 ( to 200 )				      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 40 LOAD_FAST 1 ( arr )				      								    								  
42 LOAD_METHOD 0 ( append )				      								    								  
44 LOAD_FAST 0 ( S )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BUILD_LIST 2						      								    								  
54 CALL_METHOD 1					      								    								  
56 POP_TOP						      								    								  
							      								    								  
7 58 SETUP_LOOP 112 ( to 172 )				      								    								  
>> 60 LOAD_GLOBAL 2 ( len )				      								    								  
62 LOAD_FAST 1 ( arr )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 LOAD_CONST 4 ( 3 )					      								    								  
68 COMPARE_OP 5 ( >= )					      								    								  
70 POP_JUMP_IF_FALSE 170				      								    								  
72 LOAD_FAST 1 ( arr )					      								    								  
74 LOAD_GLOBAL 2 ( len )				      								    								  
76 LOAD_FAST 1 ( arr )					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 LOAD_CONST 4 ( 3 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 3 ( 0 )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 5 ( '1' )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 170				      								    								  
96 LOAD_FAST 1 ( arr )					      								    								  
98 LOAD_GLOBAL 2 ( len )				      								    								  
100 LOAD_FAST 1 ( arr )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_CONST 6 ( 2 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 3 ( 0 )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 7 ( '0' )				      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 170				      								    								  
120 LOAD_FAST 1 ( arr )					      								    								  
122 LOAD_GLOBAL 2 ( len )				      								    								  
124 LOAD_FAST 1 ( arr )					      								    								  
126 CALL_FUNCTION 1					      								    								  
128 LOAD_CONST 8 ( 1 )					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 3 ( 0 )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 LOAD_CONST 7 ( '0' )				      								    								  
140 COMPARE_OP 2 ( == )					      								    								  
142 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
8 144 LOAD_FAST 1 ( arr )				      								    								  
146 LOAD_METHOD 3 ( pop )				      								    								  
148 CALL_METHOD 0					      								    								  
150 POP_TOP						      								    								  
							      								    								  
9 152 LOAD_FAST 1 ( arr )				      								    								  
154 LOAD_METHOD 3 ( pop )				      								    								  
156 CALL_METHOD 0					      								    								  
158 POP_TOP						      								    								  
							      								    								  
10 160 LOAD_FAST 1 ( arr )				      								    								  
162 LOAD_METHOD 3 ( pop )				      								    								  
164 CALL_METHOD 0					      								    								  
166 POP_TOP						      								    								  
168 JUMP_ABSOLUTE 60					      								    								  
>> 170 POP_BLOCK					      								    								  
							      								    								  
11 >> 172 LOAD_FAST 1 ( arr )				      								    								  
174 LOAD_CONST 2 ( - 1 )				      								    								  
176 BINARY_SUBSCR					      								    								  
178 STORE_FAST 4 ( tmp )				      								    								  
							      								    								  
12 180 LOAD_GLOBAL 4 ( max )				      								    								  
182 LOAD_FAST 2 ( maxlen )				      								    								  
184 LOAD_FAST 3 ( i )					      								    								  
186 LOAD_FAST 4 ( tmp )					      								    								  
188 LOAD_CONST 8 ( 1 )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 BINARY_SUBTRACT					      								    								  
194 CALL_FUNCTION 2					      								    								  
196 STORE_FAST 2 ( maxlen )				      								    								  
198 JUMP_ABSOLUTE 36					      								    								  
>> 200 POP_BLOCK					      								    								  
							      								    								  
13 >> 202 LOAD_FAST 2 ( maxlen )			      								    								  
204 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		      LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		    LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		  LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S
--							      --							    --								  --
Disassembly of <code object findSubArray at 0x7fbac0e8d540, f def findSubArray ( arr , n ) :				    def findSubArray ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( sum )					      	  maxsize = - 1						    	maxsize = - 1						  _sa.test/LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_
							      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  AND_1S.py", line 43	  if i	      ^ SyntaxError:
3 4 LOAD_CONST 2 ( - 1 )				      	      sum = - 1 if ( arr [ i ] == 0 ) else 1		    	    sum = - 1 if arr [ i ] == 0 else 1			   invalid syntax
6 STORE_FAST 3 ( maxsize )				      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
							      		  sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else su 		sum = ( sum + - 1 if arr [ j ] == 0 else sum + 1  
4 8 SETUP_LOOP 134 ( to 144 )				      		  if ( sum == 0 and maxsize < j - i + 1 ) :	    		if sum == 0 and maxsize < j - i + 1 :		  
10 LOAD_GLOBAL 0 ( range )				      		      maxsize = j - i + 1			    		    maxsize = j - i + 1				  
12 LOAD_CONST 1 ( 0 )					      		      startindex = i				    		    if i					  
14 LOAD_FAST 1 ( n )					      	  if ( maxsize == - 1 ) :				    if maxsize == - 1 :						  
16 LOAD_CONST 3 ( 1 )					      	      print ( "No such subarray" ) ;			    	print ( 'No such subarray ' 'to find ' '-i to be ' + '-i  
18 BINARY_SUBTRACT					      	  else :						    else :							  
20 CALL_FUNCTION 2					      	      print ( startindex , "to" , startindex + maxsize - 1  	print ( 'No such to ' + maxsize )			  
22 GET_ITER						      	  return maxsize					    return ( - 1 )						  
>> 24 FOR_ITER 116 ( to 142 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
40 LOAD_CONST 2 ( - 1 )					      								    								  
42 JUMP_FORWARD 2 ( to 46 )				      								    								  
>> 44 LOAD_CONST 3 ( 1 )				      								    								  
>> 46 STORE_FAST 2 ( sum )				      								    								  
							      								    								  
6 48 SETUP_LOOP 90 ( to 140 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 72 ( to 138 )				      								    								  
66 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 5 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 88					      								    								  
80 LOAD_FAST 2 ( sum )					      								    								  
82 LOAD_CONST 2 ( - 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 JUMP_FORWARD 6 ( to 94 )				      								    								  
>> 88 LOAD_FAST 2 ( sum )				      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
>> 94 STORE_FAST 2 ( sum )				      								    								  
							      								    								  
8 96 LOAD_FAST 2 ( sum )				      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 64				      								    								  
104 LOAD_FAST 3 ( maxsize )				      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 COMPARE_OP 0 ( < )					      								    								  
118 POP_JUMP_IF_FALSE 64				      								    								  
							      								    								  
9 120 LOAD_FAST 5 ( j )					      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBTRACT					      								    								  
126 LOAD_CONST 3 ( 1 )					      								    								  
128 BINARY_ADD						      								    								  
130 STORE_FAST 3 ( maxsize )				      								    								  
							      								    								  
10 132 LOAD_FAST 4 ( i )				      								    								  
134 STORE_FAST 6 ( startindex )				      								    								  
136 JUMP_ABSOLUTE 64					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 JUMP_ABSOLUTE 24					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
11 >> 144 LOAD_FAST 3 ( maxsize )			      								    								  
146 LOAD_CONST 2 ( - 1 )				      								    								  
148 COMPARE_OP 2 ( == )					      								    								  
150 POP_JUMP_IF_FALSE 162				      								    								  
							      								    								  
12 152 LOAD_GLOBAL 1 ( print )				      								    								  
154 LOAD_CONST 4 ( 'No such subarray' )			      								    								  
156 CALL_FUNCTION 1					      								    								  
158 POP_TOP						      								    								  
160 JUMP_FORWARD 20 ( to 182 )				      								    								  
							      								    								  
14 >> 162 LOAD_GLOBAL 1 ( print )			      								    								  
164 LOAD_FAST 6 ( startindex )				      								    								  
166 LOAD_CONST 5 ( 'to' )				      								    								  
168 LOAD_FAST 6 ( startindex )				      								    								  
170 LOAD_FAST 3 ( maxsize )				      								    								  
172 BINARY_ADD						      								    								  
174 LOAD_CONST 3 ( 1 )					      								    								  
176 BINARY_SUBTRACT					      								    								  
178 CALL_FUNCTION 3					      								    								  
180 POP_TOP						      								    								  
							      								    								  
15 >> 182 LOAD_FAST 3 ( maxsize )			      								    								  
184 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2		      UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2		    UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2		  UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2
--							      --							    --								  --
Disassembly of <code object printUnion at 0x7fbac0e8d540, fil def printUnion ( arr1 , arr2 , m , n ) :			    def printUnion ( arr1 , arr2 , m , n = 2 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				      	  i , j = 0 , 0						    	i , j = 0 , 0						  
2 UNPACK_SEQUENCE 2					      	  while i < m and j < n :				    	while i < m and j < n :					  
4 STORE_FAST 4 ( i )					      	      if arr1 [ i ] < arr2 [ j ] :			    	    if arr1 [ i ] < arr2 [ j ] :			  
6 STORE_FAST 5 ( j )					      		  print ( arr1 [ i ] )				    		print ( arr1 [ i ] )				  
							      		  i += 1					    		i += 1						  
3 8 SETUP_LOOP 124 ( to 134 )				      	      elif arr2 [ j ] < arr1 [ i ] :			    	    else :						  
>> 10 LOAD_FAST 4 ( i )					      		  print ( arr2 [ j ] )				    		if arr2 [ j ] < arr1 [ i ] :			  
12 LOAD_FAST 2 ( m )					      		  j += 1					    		    print ( arr2 [ j ] )			  
14 COMPARE_OP 0 ( < )					      	      else :						    		    j += 1					  
16 POP_JUMP_IF_FALSE 132				      		  print ( arr2 [ j ] )				    		else :						  
18 LOAD_FAST 5 ( j )					      		  j += 1					    		    print ( arr2 [ j ] )			  
20 LOAD_FAST 3 ( n )					      		  i += 1					    		    j += 1					  
22 COMPARE_OP 0 ( < )					      	  while i < m :						    		    i += 1					  
24 POP_JUMP_IF_FALSE 132				      	      print ( arr1 [ i ] )				    	    while i < m :					  
							      	      i += 1						    		print ( arr1 [ i ] )				  
4 26 LOAD_FAST 0 ( arr1 )				      	  while j < n :						    		i += 1						  
28 LOAD_FAST 4 ( i )					      	      print ( arr2 [ j ] )				    	while j < n :						  
30 BINARY_SUBSCR					      	      j += 1						    	    if ( arr1 [ j ] < arr2 [ j ] ) :			  
32 LOAD_FAST 1 ( arr2 )					      								    		print ( arr1 [ j ] )				  
34 LOAD_FAST 5 ( j )					      								    		i += 1						  
36 BINARY_SUBSCR					      								    	    else :						  
38 COMPARE_OP 0 ( < )					      								    		return i					  
40 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 42 LOAD_GLOBAL 0 ( print )				      								    								  
44 LOAD_FAST 0 ( arr1 )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 POP_TOP						      								    								  
							      								    								  
6 54 LOAD_FAST 4 ( i )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 4 ( i )					      								    								  
62 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
7 >> 64 LOAD_FAST 1 ( arr2 )				      								    								  
66 LOAD_FAST 5 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( arr1 )					      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
8 80 LOAD_GLOBAL 0 ( print )				      								    								  
82 LOAD_FAST 1 ( arr2 )					      								    								  
84 LOAD_FAST 5 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 POP_TOP						      								    								  
							      								    								  
9 92 LOAD_FAST 5 ( j )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 5 ( j )					      								    								  
100 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
11 >> 102 LOAD_GLOBAL 0 ( print )			      								    								  
104 LOAD_FAST 1 ( arr2 )				      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 POP_TOP						      								    								  
							      								    								  
12 114 LOAD_FAST 5 ( j )				      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 INPLACE_ADD						      								    								  
120 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 122 LOAD_FAST 4 ( i )				      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 4 ( i )					      								    								  
130 JUMP_ABSOLUTE 10					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
14 >> 134 SETUP_LOOP 32 ( to 168 )			      								    								  
>> 136 LOAD_FAST 4 ( i )				      								    								  
138 LOAD_FAST 2 ( m )					      								    								  
140 COMPARE_OP 0 ( < )					      								    								  
142 POP_JUMP_IF_FALSE 166				      								    								  
							      								    								  
15 144 LOAD_GLOBAL 0 ( print )				      								    								  
146 LOAD_FAST 0 ( arr1 )				      								    								  
148 LOAD_FAST 4 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 POP_TOP						      								    								  
							      								    								  
16 156 LOAD_FAST 4 ( i )				      								    								  
158 LOAD_CONST 2 ( 1 )					      								    								  
160 INPLACE_ADD						      								    								  
162 STORE_FAST 4 ( i )					      								    								  
164 JUMP_ABSOLUTE 136					      								    								  
>> 166 POP_BLOCK					      								    								  
							      								    								  
17 >> 168 SETUP_LOOP 32 ( to 202 )			      								    								  
>> 170 LOAD_FAST 5 ( j )				      								    								  
172 LOAD_FAST 3 ( n )					      								    								  
174 COMPARE_OP 0 ( < )					      								    								  
176 POP_JUMP_IF_FALSE 200				      								    								  
							      								    								  
18 178 LOAD_GLOBAL 0 ( print )				      								    								  
180 LOAD_FAST 1 ( arr2 )				      								    								  
182 LOAD_FAST 5 ( j )					      								    								  
184 BINARY_SUBSCR					      								    								  
186 CALL_FUNCTION 1					      								    								  
188 POP_TOP						      								    								  
							      								    								  
19 190 LOAD_FAST 5 ( j )				      								    								  
192 LOAD_CONST 2 ( 1 )					      								    								  
194 INPLACE_ADD						      								    								  
196 STORE_FAST 5 ( j )					      								    								  
198 JUMP_ABSOLUTE 170					      								    								  
>> 200 POP_BLOCK					      								    								  
>> 202 LOAD_CONST 0 ( None )				      								    								  
204 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C		      LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C		    LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C			  LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C
--							      --							    --								  --
Disassembly of <code object prevPermutation at 0x7fbac0e8de40 def prevPermutation ( str ) :				    def prevPermutation ( str ) :				  failure : #Results: 5, 10
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str ) - 1					    	n = len ( str ) - 1					  
2 LOAD_FAST 0 ( str )					      	  i = n							    	i = n							  
4 CALL_FUNCTION 1					      	  while ( i > 0 and str [ i - 1 ] <= str [ i ] ) :	    	while i > 0 and str [ i - 1 ] <= str [ i ] :		  
6 LOAD_CONST 1 ( 1 )					      	      i -= 1						    	    i -= 1						  
8 BINARY_SUBTRACT					      	  if ( i <= 0 ) :					    	if i <= 0 :						  
10 STORE_FAST 1 ( n )					      	      return False					    	    return False					  
							      	  j = i - 1						    	j = i - 1						  
3 12 LOAD_FAST 1 ( n )					      	  while ( j + 1 <= n and str [ j + 1 ] <= str [ i - 1 ] ) : 	while j + 1 <= n and str [ j + 1 ] <= str [ i - 1 ] :	  
14 STORE_FAST 2 ( i )					      	      j += 1						    	    j += 1						  
							      	  str = list ( str )					    	str = list ( str )					  
4 16 SETUP_LOOP 40 ( to 58 )				      	  temp = str [ i - 1 ]					    	temp = str [ i - 1 ]					  
>> 18 LOAD_FAST 2 ( i )					      	  str [ i - 1 ] = str [ j ]				    	str [ i - 1 ] = str [ j ]				  
20 LOAD_CONST 2 ( 0 )					      	  str [ j ] = temp					    	str [ j ] = str [ j ]					  
22 COMPARE_OP 4 ( > )					      	  str = ''.join ( str )					    	str [ j - 1 ] = str [ j ]				  
24 POP_JUMP_IF_FALSE 56					      	  str [ : : - 1 ]					    	str [ j - 1 ] = str [ j : - 1 ]				  
26 LOAD_FAST 0 ( str )					      	  return True , str					    	return True						  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( str )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 1 ( <= )					      								    								  
44 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 STORE_FAST 2 ( i )					      								    								  
54 JUMP_ABSOLUTE 18					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
6 >> 58 LOAD_FAST 2 ( i )				      								    								  
60 LOAD_CONST 2 ( 0 )					      								    								  
62 COMPARE_OP 1 ( <= )					      								    								  
64 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 66 LOAD_CONST 3 ( False )				      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
8 >> 70 LOAD_FAST 2 ( i )				      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 78 SETUP_LOOP 48 ( to 128 )				      								    								  
>> 80 LOAD_FAST 3 ( j )					      								    								  
82 LOAD_CONST 1 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 1 ( n )					      								    								  
88 COMPARE_OP 1 ( <= )					      								    								  
90 POP_JUMP_IF_FALSE 126				      								    								  
92 LOAD_FAST 0 ( str )					      								    								  
94 LOAD_FAST 3 ( j )					      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 0 ( str )					      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 LOAD_CONST 1 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 BINARY_SUBSCR					      								    								  
112 COMPARE_OP 1 ( <= )					      								    								  
114 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
10 116 LOAD_FAST 3 ( j )				      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 INPLACE_ADD						      								    								  
122 STORE_FAST 3 ( j )					      								    								  
124 JUMP_ABSOLUTE 80					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
11 >> 128 LOAD_GLOBAL 1 ( list )			      								    								  
130 LOAD_FAST 0 ( str )					      								    								  
132 CALL_FUNCTION 1					      								    								  
134 STORE_FAST 0 ( str )				      								    								  
							      								    								  
12 136 LOAD_FAST 0 ( str )				      								    								  
138 LOAD_FAST 2 ( i )					      								    								  
140 LOAD_CONST 1 ( 1 )					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 BINARY_SUBSCR					      								    								  
146 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
13 148 LOAD_FAST 0 ( str )				      								    								  
150 LOAD_FAST 3 ( j )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 0 ( str )					      								    								  
156 LOAD_FAST 2 ( i )					      								    								  
158 LOAD_CONST 1 ( 1 )					      								    								  
160 BINARY_SUBTRACT					      								    								  
162 STORE_SUBSCR					      								    								  
							      								    								  
14 164 LOAD_FAST 4 ( temp )				      								    								  
166 LOAD_FAST 0 ( str )					      								    								  
168 LOAD_FAST 3 ( j )					      								    								  
170 STORE_SUBSCR					      								    								  
							      								    								  
15 172 LOAD_CONST 4 ( '' )				      								    								  
174 LOAD_METHOD 2 ( join )				      								    								  
176 LOAD_FAST 0 ( str )					      								    								  
178 CALL_METHOD 1					      								    								  
180 STORE_FAST 0 ( str )				      								    								  
							      								    								  
16 182 LOAD_FAST 0 ( str )				      								    								  
184 LOAD_CONST 0 ( None )				      								    								  
186 LOAD_CONST 0 ( None )				      								    								  
188 LOAD_CONST 5 ( - 1 )				      								    								  
190 BUILD_SLICE 3					      								    								  
192 BINARY_SUBSCR					      								    								  
194 POP_TOP						      								    								  
							      								    								  
17 196 LOAD_CONST 6 ( True )				      								    								  
198 LOAD_FAST 0 ( str )					      								    								  
200 BUILD_TUPLE 2					      								    								  
202 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D		      FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D			    FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D			  FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D
--							      --							    --								  --
Disassembly of <code object findLargestd at 0x7fbac0e8d540, f def findLargestd ( S , n ) :				    def findLargestd ( S , n ) :				  failure : #Results: 7, 10
2 0 LOAD_CONST 1 ( False )				      	  found = False						    	found = False						  
2 STORE_FAST 2 ( found )				      	  S.sort ( )						    	S.sort ( )						  
							      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
3 4 LOAD_FAST 0 ( S )					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
6 LOAD_METHOD 0 ( sort )				      		  if ( i == j ) :				    		if i == j :					  
8 CALL_METHOD 0						      		      continue					    		    continue					  
10 POP_TOP						      		  for k in range ( j + 1 , n ) :		    		for k in range ( j + 1 , n ) :			  
							      		      if ( i == k ) :				    		    if i == k :					  
4 12 SETUP_LOOP 166 ( to 180 )				      			  continue				    			continue				  
14 LOAD_GLOBAL 1 ( range )				      		      for l in range ( k + 1 , n ) :		    		    for l in range ( k + 1 , n ) :		  
16 LOAD_FAST 1 ( n )					      			  if ( i == l ) :			    			if i == l :				  
18 LOAD_CONST 2 ( 1 )					      			      continue				    			    continue				  
20 BINARY_SUBTRACT					      			  if ( S [ i ] == S [ j ] + S [ k ] + S [ l 			if S [ i ] == S [ j ] + S [ k ] + S [ l ] 
22 LOAD_CONST 3 ( - 1 )					      			      found = True			    			    found = True			  
24 LOAD_CONST 3 ( - 1 )					      			      return S [ i ]			    			    return S [ i ]			  
26 CALL_FUNCTION 3					      	  if ( found == False ) :				    	    if found == - 1 :					  
28 GET_ITER						      	      return - 1					    		return False					  
>> 30 FOR_ITER 146 ( to 178 )				      								    	    else :						  
32 STORE_FAST 3 ( i )					      								    		return False					  
							      								    								  
5 34 SETUP_LOOP 140 ( to 176 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_CONST 4 ( 0 )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 126 ( to 174 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 LOAD_FAST 3 ( i )					      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 58 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 110 ( to 172 )			      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 92 ( to 170 )				      								    								  
78 STORE_FAST 5 ( k )					      								    								  
							      								    								  
9 80 LOAD_FAST 3 ( i )					      								    								  
82 LOAD_FAST 5 ( k )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
10 88 JUMP_ABSOLUTE 76					      								    								  
							      								    								  
11 >> 90 SETUP_LOOP 76 ( to 168 )			      								    								  
92 LOAD_GLOBAL 1 ( range )				      								    								  
94 LOAD_FAST 5 ( k )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 LOAD_FAST 1 ( n )					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 GET_ITER						      								    								  
>> 106 FOR_ITER 58 ( to 166 )				      								    								  
108 STORE_FAST 6 ( l )					      								    								  
							      								    								  
12 110 LOAD_FAST 3 ( i )				      								    								  
112 LOAD_FAST 6 ( l )					      								    								  
114 COMPARE_OP 2 ( == )					      								    								  
116 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
13 118 JUMP_ABSOLUTE 106				      								    								  
							      								    								  
14 >> 120 LOAD_FAST 0 ( S )				      								    								  
122 LOAD_FAST 3 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( S )					      								    								  
128 LOAD_FAST 4 ( j )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 0 ( S )					      								    								  
134 LOAD_FAST 5 ( k )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 BINARY_ADD						      								    								  
140 LOAD_FAST 0 ( S )					      								    								  
142 LOAD_FAST 6 ( l )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 BINARY_ADD						      								    								  
148 COMPARE_OP 2 ( == )					      								    								  
150 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
15 152 LOAD_CONST 5 ( True )				      								    								  
154 STORE_FAST 2 ( found )				      								    								  
							      								    								  
16 156 LOAD_FAST 0 ( S )				      								    								  
158 LOAD_FAST 3 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 RETURN_VALUE					      								    								  
164 JUMP_ABSOLUTE 106					      								    								  
>> 166 POP_BLOCK					      								    								  
>> 168 JUMP_ABSOLUTE 76					      								    								  
>> 170 POP_BLOCK					      								    								  
>> 172 JUMP_ABSOLUTE 46					      								    								  
>> 174 POP_BLOCK					      								    								  
>> 176 JUMP_ABSOLUTE 30					      								    								  
>> 178 POP_BLOCK					      								    								  
							      								    								  
17 >> 180 LOAD_FAST 2 ( found )				      								    								  
182 LOAD_CONST 1 ( False )				      								    								  
184 COMPARE_OP 2 ( == )					      								    								  
186 POP_JUMP_IF_FALSE 192				      								    								  
							      								    								  
18 188 LOAD_CONST 3 ( - 1 )				      								    								  
190 RETURN_VALUE					      								    								  
>> 192 LOAD_CONST 0 ( None )				      								    								  
194 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_<unk> ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_<unk> ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_<unk> ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_<unk> ARE_CONSECUTIVE_1
--							      --							    --								  --
Disassembly of <code object maxSumWO3Consec at 0x7fbac0e8de40 def maxSumWO3Consec ( n ) :				    def maxSumWO3Consec ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sum )				      	  if ( sum [ n ] != - 1 ) :				    	if ( sum [ n ] != - 1 ) :				  
2 LOAD_FAST 0 ( n )					      	      return sum [ n ]					    	    return sum [ n ]					  
4 BINARY_SUBSCR						      	  if ( n == 0 ) :					    	if n == 0 :						  
6 LOAD_CONST 1 ( - 1 )					      	      sum [ n ] = 0					    	    sum [ n ] = 0					  
8 COMPARE_OP 3 ( != )					      	      return sum [ n ]					    	    return sum [ n ]					  
10 POP_JUMP_IF_FALSE 20					      	  if ( n == 1 ) :					    	if n == 1 :						  
							      	      sum [ n ] = arr [ 0 ]				    	    sum [ n ] = arr [ 0 ]				  
3 12 LOAD_GLOBAL 0 ( sum )				      	      return sum [ n ]					    	    return sum [ n ]					  
14 LOAD_FAST 0 ( n )					      	  if ( n == 2 ) :					    	if n == 2 :						  
16 BINARY_SUBSCR					      	      sum [ n ] = arr [ 1 ] + arr [ 0 ]			    	    sum [ n ] = arr [ 1 ] + arr [ 0 ]			  
18 RETURN_VALUE						      	      return sum [ n ]					    	    return sum [ n ]					  
							      	  sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ) , maxSu 	return max ( max ( max ( maxSumWO3Consec ( n - 1 ) , maxS 
4 >> 20 LOAD_FAST 0 ( n )				      	  return sum [ n ]					    	sum [ n ] = sum [ n ]					  
22 LOAD_CONST 2 ( 0 )					      								    	return sum [ n ]					  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
5 28 LOAD_CONST 2 ( 0 )					      								    								  
30 LOAD_GLOBAL 0 ( sum )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( sum )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
7 >> 44 LOAD_FAST 0 ( n )				      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 52 LOAD_GLOBAL 1 ( arr )				      								    								  
54 LOAD_CONST 2 ( 0 )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_GLOBAL 0 ( sum )				      								    								  
60 LOAD_FAST 0 ( n )					      								    								  
62 STORE_SUBSCR						      								    								  
							      								    								  
9 64 LOAD_GLOBAL 0 ( sum )				      								    								  
66 LOAD_FAST 0 ( n )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
10 >> 72 LOAD_FAST 0 ( n )				      								    								  
74 LOAD_CONST 4 ( 2 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
11 80 LOAD_GLOBAL 1 ( arr )				      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_GLOBAL 1 ( arr )				      								    								  
88 LOAD_CONST 2 ( 0 )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_GLOBAL 0 ( sum )				      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 STORE_SUBSCR						      								    								  
							      								    								  
12 100 LOAD_GLOBAL 0 ( sum )				      								    								  
102 LOAD_FAST 0 ( n )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 RETURN_VALUE					      								    								  
							      								    								  
13 >> 108 LOAD_GLOBAL 2 ( max )				      								    								  
110 LOAD_GLOBAL 2 ( max )				      								    								  
112 LOAD_GLOBAL 3 ( maxSumWO3Consec )			      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 LOAD_CONST 3 ( 1 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 LOAD_GLOBAL 3 ( maxSumWO3Consec )			      								    								  
124 LOAD_FAST 0 ( n )					      								    								  
126 LOAD_CONST 4 ( 2 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 CALL_FUNCTION 1					      								    								  
132 LOAD_GLOBAL 1 ( arr )				      								    								  
134 LOAD_FAST 0 ( n )					      								    								  
136 LOAD_CONST 3 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 BINARY_SUBSCR					      								    								  
142 BINARY_ADD						      								    								  
144 CALL_FUNCTION 2					      								    								  
146 LOAD_GLOBAL 1 ( arr )				      								    								  
148 LOAD_FAST 0 ( n )					      								    								  
150 LOAD_CONST 4 ( 2 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_GLOBAL 1 ( arr )				      								    								  
158 LOAD_FAST 0 ( n )					      								    								  
160 LOAD_CONST 3 ( 1 )					      								    								  
162 BINARY_SUBTRACT					      								    								  
164 BINARY_SUBSCR					      								    								  
166 BINARY_ADD						      								    								  
168 LOAD_GLOBAL 3 ( maxSumWO3Consec )			      								    								  
170 LOAD_FAST 0 ( n )					      								    								  
172 LOAD_CONST 5 ( 3 )					      								    								  
174 BINARY_SUBTRACT					      								    								  
176 CALL_FUNCTION 1					      								    								  
178 BINARY_ADD						      								    								  
180 CALL_FUNCTION 2					      								    								  
182 LOAD_GLOBAL 0 ( sum )				      								    								  
184 LOAD_FAST 0 ( n )					      								    								  
186 STORE_SUBSCR					      								    								  
							      								    								  
14 188 LOAD_GLOBAL 0 ( sum )				      								    								  
190 LOAD_FAST 0 ( n )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_REPEATING_SUBSEQUENCE_1				      LONGEST_REPEATING_SUBSEQUENCE_1				    LONGEST_REPEATING_SUBSEQUENCE_1				  LONGEST_REPEATING_SUBSEQUENCE_1
--							      --							    --								  --
Disassembly of <code object findLongestRepeatingSubSeq at 0x7 def findLongestRepeatingSubSeq ( X , m , n ) :		    def findLongestRepeatingSubSeq ( X , m , n ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dp )				      	  if ( dp [ m ] [ n ] != - 1 ) :			    	if dp [ m ] [ n ] != - 1 :				  
2 LOAD_FAST 1 ( m )					      	      return dp [ m ] [ n ]				    	    return dp [ m ] [ n ]				  
4 BINARY_SUBSCR						      	  if ( m == 0 or n == 0 ) :				    	if m == 0 or n == 0 :					  
6 LOAD_FAST 2 ( n )					      	      dp [ m ] [ n ] = 0				    	    dp [ m ] [ n ] = 0					  
8 BINARY_SUBSCR						      	      return dp [ m ] [ n ]				    	    return dp [ m ] [ n ]				  
10 LOAD_CONST 1 ( - 1 )					      	  if ( X [ m - 1 ] == X [ n - 1 ] and m != n ) :	    	if X [ m - 1 ] == X [ n - 1 ] and m != n :		  
12 COMPARE_OP 3 ( != )					      	      dp [ m ] [ n ] = findLongestRepeatingSubSeq ( X , m - 	    dp [ m ] [ n ] = findLongestRepeatingSubSeq ( X , m - 
14 POP_JUMP_IF_FALSE 28					      	      return dp [ m ] [ n ]				    	    return dp [ m ] [ n ]				  
							      	  dp [ m ] [ n ] = max ( findLongestRepeatingSubSeq ( X , m 	else :							  
3 16 LOAD_GLOBAL 0 ( dp )				      	  return dp [ m ] [ n ]					    	    dp [ m ] [ n ] = max ( findLongestRepeatingSubSeq ( X 
18 LOAD_FAST 1 ( m )					      								    	    dp [ m ] [ n ] = dp [ m ] [ n ]			  
20 BINARY_SUBSCR					      								    return dp ( dp , m , n )					  
22 LOAD_FAST 2 ( n )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_FAST 1 ( m )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_TRUE 44					      								    								  
36 LOAD_FAST 2 ( n )					      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 >> 44 LOAD_CONST 2 ( 0 )				      								    								  
46 LOAD_GLOBAL 0 ( dp )					      								    								  
48 LOAD_FAST 1 ( m )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 2 ( n )					      								    								  
54 STORE_SUBSCR						      								    								  
							      								    								  
6 56 LOAD_GLOBAL 0 ( dp )				      								    								  
58 LOAD_FAST 1 ( m )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( n )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 0 ( X )				      								    								  
70 LOAD_FAST 1 ( m )					      								    								  
72 LOAD_CONST 3 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 0 ( X )					      								    								  
80 LOAD_FAST 2 ( n )					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 144				      								    								  
92 LOAD_FAST 1 ( m )					      								    								  
94 LOAD_FAST 2 ( n )					      								    								  
96 COMPARE_OP 3 ( != )					      								    								  
98 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
8 100 LOAD_GLOBAL 1 ( findLongestRepeatingSubSeq )	      								    								  
102 LOAD_FAST 0 ( X )					      								    								  
104 LOAD_FAST 1 ( m )					      								    								  
106 LOAD_CONST 3 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 LOAD_FAST 2 ( n )					      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 CALL_FUNCTION 3					      								    								  
118 LOAD_CONST 3 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_GLOBAL 0 ( dp )				      								    								  
124 LOAD_FAST 1 ( m )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 2 ( n )					      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
9 132 LOAD_GLOBAL 0 ( dp )				      								    								  
134 LOAD_FAST 1 ( m )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 LOAD_FAST 2 ( n )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 RETURN_VALUE					      								    								  
							      								    								  
10 >> 144 LOAD_GLOBAL 2 ( max )				      								    								  
146 LOAD_GLOBAL 1 ( findLongestRepeatingSubSeq )	      								    								  
148 LOAD_FAST 0 ( X )					      								    								  
150 LOAD_FAST 1 ( m )					      								    								  
152 LOAD_FAST 2 ( n )					      								    								  
154 LOAD_CONST 3 ( 1 )					      								    								  
156 BINARY_SUBTRACT					      								    								  
158 CALL_FUNCTION 3					      								    								  
160 LOAD_GLOBAL 1 ( findLongestRepeatingSubSeq )	      								    								  
162 LOAD_FAST 0 ( X )					      								    								  
164 LOAD_FAST 1 ( m )					      								    								  
166 LOAD_CONST 3 ( 1 )					      								    								  
168 BINARY_SUBTRACT					      								    								  
170 LOAD_FAST 2 ( n )					      								    								  
172 CALL_FUNCTION 3					      								    								  
174 CALL_FUNCTION 2					      								    								  
176 LOAD_GLOBAL 0 ( dp )				      								    								  
178 LOAD_FAST 1 ( m )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 LOAD_FAST 2 ( n )					      								    								  
184 STORE_SUBSCR					      								    								  
							      								    								  
11 186 LOAD_GLOBAL 0 ( dp )				      								    								  
188 LOAD_FAST 1 ( m )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 2 ( n )					      								    								  
194 BINARY_SUBSCR					      								    								  
196 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_ SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_ SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_ SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_
--							      --							    --								  --
Disassembly of <code object bitonicGenerator at 0x7fbac0e8bc9 def bitonicGenerator ( arr , n ) :			    def bitonicGenerator ( arr , n ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  evenArr = [ ]						    	evenArr = [ ]						  
2 STORE_FAST 2 ( evenArr )				      	  oddArr = [ ]						    	oddArr = [ ]						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 BUILD_LIST 0					      	      if ( ( i % 2 ) == 0 ) :				    	    if i % 2 == 0 :					  
6 STORE_FAST 3 ( oddArr )				      		  evenArr.append ( arr [ i ] )			    		evenArr.append ( arr [ i ] )			  
							      	      else :						    	    else :						  
4 8 SETUP_LOOP 58 ( to 68 )				      		  oddArr.append ( arr [ i ] )			    		oddArr.append ( arr [ i ] )			  
10 LOAD_GLOBAL 0 ( range )				      	  evenArr = sorted ( evenArr )				    	evenArr = sorted ( evenArr )				  
12 LOAD_FAST 1 ( n )					      	  oddArr = sorted ( oddArr )				    	oddArr = sorted ( oddArr )				  
14 CALL_FUNCTION 1					      	  oddArr = oddArr [ : : - 1 ]				    	oddArr = oddArr [ : : - 1 ]				  
16 GET_ITER						      	  i = 0							    	i = 0							  
>> 18 FOR_ITER 46 ( to 66 )				      	  for j in range ( len ( evenArr ) ) :			    	for j in range ( len ( evenArr ) ) :			  
20 STORE_FAST 4 ( i )					      	      arr [ i ] = evenArr [ j ]				    	    arr [ i ] = evenArr [ j ]				  
							      	      i += 1						    	    i += 1						  
5 22 LOAD_FAST 4 ( i )					      	  for j in range ( len ( oddArr ) ) :			    for j in range ( len ( oddArr ) ) :				  
24 LOAD_CONST 1 ( 2 )					      	      arr [ i ] = oddArr [ j ]				    	arr [ i ] = ddArr [ j ]					  
26 BINARY_MODULO					      	      i += 1						    	i += 1							  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( evenArr )				      								    								  
36 LOAD_METHOD 1 ( append )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
48 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 50 LOAD_FAST 3 ( oddArr )				      								    								  
52 LOAD_METHOD 1 ( append )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_METHOD 1					      								    								  
62 POP_TOP						      								    								  
64 JUMP_ABSOLUTE 18					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_GLOBAL 2 ( sorted )			      								    								  
70 LOAD_FAST 2 ( evenArr )				      								    								  
72 CALL_FUNCTION 1					      								    								  
74 STORE_FAST 2 ( evenArr )				      								    								  
							      								    								  
10 76 LOAD_GLOBAL 2 ( sorted )				      								    								  
78 LOAD_FAST 3 ( oddArr )				      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_FAST 3 ( oddArr )				      								    								  
							      								    								  
11 84 LOAD_FAST 3 ( oddArr )				      								    								  
86 LOAD_CONST 0 ( None )				      								    								  
88 LOAD_CONST 0 ( None )				      								    								  
90 LOAD_CONST 3 ( - 1 )					      								    								  
92 BUILD_SLICE 3					      								    								  
94 BINARY_SUBSCR					      								    								  
96 STORE_FAST 3 ( oddArr )				      								    								  
							      								    								  
12 98 LOAD_CONST 2 ( 0 )				      								    								  
100 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 102 SETUP_LOOP 40 ( to 144 )				      								    								  
104 LOAD_GLOBAL 0 ( range )				      								    								  
106 LOAD_GLOBAL 3 ( len )				      								    								  
108 LOAD_FAST 2 ( evenArr )				      								    								  
110 CALL_FUNCTION 1					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 GET_ITER						      								    								  
>> 116 FOR_ITER 24 ( to 142 )				      								    								  
118 STORE_FAST 5 ( j )					      								    								  
							      								    								  
14 120 LOAD_FAST 2 ( evenArr )				      								    								  
122 LOAD_FAST 5 ( j )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 4 ( i )					      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
15 132 LOAD_FAST 4 ( i )				      								    								  
134 LOAD_CONST 4 ( 1 )					      								    								  
136 INPLACE_ADD						      								    								  
138 STORE_FAST 4 ( i )					      								    								  
140 JUMP_ABSOLUTE 116					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
16 >> 144 SETUP_LOOP 40 ( to 186 )			      								    								  
146 LOAD_GLOBAL 0 ( range )				      								    								  
148 LOAD_GLOBAL 3 ( len )				      								    								  
150 LOAD_FAST 3 ( oddArr )				      								    								  
152 CALL_FUNCTION 1					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 GET_ITER						      								    								  
>> 158 FOR_ITER 24 ( to 184 )				      								    								  
160 STORE_FAST 5 ( j )					      								    								  
							      								    								  
17 162 LOAD_FAST 3 ( oddArr )				      								    								  
164 LOAD_FAST 5 ( j )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 LOAD_FAST 0 ( arr )					      								    								  
170 LOAD_FAST 4 ( i )					      								    								  
172 STORE_SUBSCR					      								    								  
							      								    								  
18 174 LOAD_FAST 4 ( i )				      								    								  
176 LOAD_CONST 4 ( 1 )					      								    								  
178 INPLACE_ADD						      								    								  
180 STORE_FAST 4 ( i )					      								    								  
182 JUMP_ABSOLUTE 158					      								    								  
>> 184 POP_BLOCK					      								    								  
>> 186 LOAD_CONST 0 ( None )				      								    								  
188 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE    MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE    MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE	  MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE
--							      --							    --								  --
Disassembly of <code object maxProfit at 0x7fbac0e8d540, file def maxProfit ( price , n ) :				    def maxProfit ( price : str , n : int ) -> float :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  profit = [ 0 ] * n					    	profit = [ 0 ] * n					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  max_price = price [ n - 1 ]				    	max_price = price [ n - 1 ]				  _sa.test/MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SH
4 LOAD_FAST 1 ( n )					      	  for i in range ( n - 2 , 0 , - 1 ) :			    	for i in range ( n - 2 , 0 , - 1 ) :			  ARE_AT_MOST_TWICE.py", line 46     return result
6 BINARY_MULTIPLY					      	      if price [ i ] > max_price :			    	    if price [ i ] > max_price :			     ^ SyntaxError: 'return' outside function
8 STORE_FAST 2 ( profit )				      		  max_price = price [ i ]			    		max_price = price [ i ]				  
							      	      profit [ i ] = max ( profit [ i + 1 ] , max_price - p 	    profit [ i ] = max ( profit [ i + 1 ] , max_price [ p 
3 10 LOAD_FAST 0 ( price )				      	  min_price = price [ 0 ]				    	min_price = price [ 0 ]					  
12 LOAD_FAST 1 ( n )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
14 LOAD_CONST 2 ( 1 )					      	      if price [ i ] < min_price :			    	    if price [ i ] < min_price :			  
16 BINARY_SUBTRACT					      		  min_price = price [ i ]			    		min_price = price [ i ]				  
18 BINARY_SUBSCR					      	      profit [ i ] = max ( profit [ i - 1 ] , profit [ i ]  	    profit [ i ] = max ( profit [ i - 1 ] , profit [ i ]  
20 STORE_FAST 3 ( max_price )				      	  result = profit [ n - 1 ]				    result = result [ n ]					  
							      	  return result						    return result						  
4 22 SETUP_LOOP 74 ( to 98 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 3 ( 2 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 LOAD_CONST 4 ( - 1 )					      								    								  
36 CALL_FUNCTION 3					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 54 ( to 96 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( price )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( max_price )				      								    								  
52 COMPARE_OP 4 ( > )					      								    								  
54 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( price )				      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 STORE_FAST 3 ( max_price )				      								    								  
							      								    								  
7 >> 64 LOAD_GLOBAL 1 ( max )				      								    								  
66 LOAD_FAST 2 ( profit )				      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 3 ( max_price )				      								    								  
78 LOAD_FAST 0 ( price )				      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 LOAD_FAST 2 ( profit )				      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 STORE_SUBSCR						      								    								  
94 JUMP_ABSOLUTE 40					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
8 >> 98 LOAD_FAST 0 ( price )				      								    								  
100 LOAD_CONST 1 ( 0 )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 STORE_FAST 5 ( min_price )				      								    								  
							      								    								  
9 106 SETUP_LOOP 76 ( to 184 )				      								    								  
108 LOAD_GLOBAL 0 ( range )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 CALL_FUNCTION 2					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 62 ( to 182 )				      								    								  
120 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 122 LOAD_FAST 0 ( price )				      								    								  
124 LOAD_FAST 4 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 5 ( min_price )				      								    								  
130 COMPARE_OP 0 ( < )					      								    								  
132 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
11 134 LOAD_FAST 0 ( price )				      								    								  
136 LOAD_FAST 4 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 STORE_FAST 5 ( min_price )				      								    								  
							      								    								  
12 >> 142 LOAD_GLOBAL 1 ( max )				      								    								  
144 LOAD_FAST 2 ( profit )				      								    								  
146 LOAD_FAST 4 ( i )					      								    								  
148 LOAD_CONST 2 ( 1 )					      								    								  
150 BINARY_SUBTRACT					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 2 ( profit )				      								    								  
156 LOAD_FAST 4 ( i )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_FAST 0 ( price )				      								    								  
162 LOAD_FAST 4 ( i )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_FAST 5 ( min_price )				      								    								  
168 BINARY_SUBTRACT					      								    								  
170 BINARY_ADD						      								    								  
172 CALL_FUNCTION 2					      								    								  
174 LOAD_FAST 2 ( profit )				      								    								  
176 LOAD_FAST 4 ( i )					      								    								  
178 STORE_SUBSCR					      								    								  
180 JUMP_ABSOLUTE 118					      								    								  
>> 182 POP_BLOCK					      								    								  
							      								    								  
13 >> 184 LOAD_FAST 2 ( profit )			      								    								  
186 LOAD_FAST 1 ( n )					      								    								  
188 LOAD_CONST 2 ( 1 )					      								    								  
190 BINARY_SUBTRACT					      								    								  
192 BINARY_SUBSCR					      								    								  
194 STORE_FAST 6 ( result )				      								    								  
							      								    								  
14 196 LOAD_FAST 6 ( result )				      								    								  
198 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UGLY_NUMBERS						      UGLY_NUMBERS						    UGLY_NUMBERS						  UGLY_NUMBERS
--							      --							    --								  --
Disassembly of <code object getNthUglyNo at 0x7fbac0e8bc90, f def getNthUglyNo ( n ) :					    def getNthUglyNo ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  ugly = [ 0 ] * n					    	ugly = [ 0 ] * n					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 BUILD_LIST 1						      	  ugly [ 0 ] = 1					    	ugly [ 0 ] = 1						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/UGLY_N
4 LOAD_FAST 0 ( n )					      	  i2 = i3 = i5 = 0					    	i5 = 0							  UMBERS.py", line 73, in <module>     if f_filled(*
6 BINARY_MULTIPLY					      	  next_multiple_of_2 = 2				    	next_multiple_of_2 = next_multiple_of_2 = 3		  parameters_set) == f_gold(*parameters_set):	File
8 STORE_FAST 1 ( ugly )					      	  next_multiple_of_3 = 3				    	next_multiple_of_3 = 5					   "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/t
							      	  next_multiple_of_5 = 5				    	next_multiple_of_5 = 5					  x8nnsvsdt/eval_scripts/dis_sa-python_sa.test/UGLY_
3 10 LOAD_CONST 2 ( 1 )					      	  for l in range ( 1 , n ) :				    	for l in range ( 1 , n ) :				  NUMBERS.py", line 48, in f_filled	i2 += 1 Unbo
12 LOAD_FAST 1 ( ugly )					      	      ugly [ l ] = min ( next_multiple_of_2 , next_multiple 	    ugly [ l ] = min ( next_multiple_of_2 , next_multiple undLocalError: local variable 'i2' referenced befo
14 LOAD_CONST 1 ( 0 )					      	      if ugly [ l ] == next_multiple_of_2 :		    	    if ugly [ l ] == next_multiple_of_2 :		  re assignment
16 STORE_SUBSCR						      		  i2 += 1					    		i2 += 1						  
							      		  next_multiple_of_2 = ugly [ i2 ] * 2		    		next_multiple_of_2 = ugly [ i2 ] * 2		  
4 18 LOAD_CONST 1 ( 0 )					      	      if ugly [ l ] == next_multiple_of_3 :		    	    if ugly [ l ] == next_multiple_of_3 :		  
20 DUP_TOP						      		  i3 += 1					    		i3 += 1						  
22 STORE_FAST 2 ( i2 )					      		  next_multiple_of_3 = ugly [ i3 ] * 3		    		next_multiple_of_3 = ugly [ i3 ] * 3		  
24 DUP_TOP						      	      if ugly [ l ] == next_multiple_of_5 :		    	    if ugly [ l ] == next_multiple_of_3 :		  
26 STORE_FAST 3 ( i3 )					      		  i5 += 1					    		next_multiple_of_5 += 1				  
28 STORE_FAST 4 ( i5 )					      		  next_multiple_of_5 = ugly [ i5 ] * 5		    	return ugly [ l ] [ next_multiple_of_5 ]		  
							      	  return ugly [ - 1 ]					    								  
5 30 LOAD_CONST 3 ( 2 )					      								    								  
32 STORE_FAST 5 ( next_multiple_of_2 )			      								    								  
							      								    								  
6 34 LOAD_CONST 4 ( 3 )					      								    								  
36 STORE_FAST 6 ( next_multiple_of_3 )			      								    								  
							      								    								  
7 38 LOAD_CONST 5 ( 5 )					      								    								  
40 STORE_FAST 7 ( next_multiple_of_5 )			      								    								  
							      								    								  
8 42 SETUP_LOOP 130 ( to 174 )				      								    								  
44 LOAD_GLOBAL 0 ( range )				      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 LOAD_FAST 0 ( n )					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 116 ( to 172 )				      								    								  
56 STORE_FAST 8 ( l )					      								    								  
							      								    								  
9 58 LOAD_GLOBAL 1 ( min )				      								    								  
60 LOAD_FAST 5 ( next_multiple_of_2 )			      								    								  
62 LOAD_FAST 6 ( next_multiple_of_3 )			      								    								  
64 LOAD_FAST 7 ( next_multiple_of_5 )			      								    								  
66 CALL_FUNCTION 3					      								    								  
68 LOAD_FAST 1 ( ugly )					      								    								  
70 LOAD_FAST 8 ( l )					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
10 74 LOAD_FAST 1 ( ugly )				      								    								  
76 LOAD_FAST 8 ( l )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 5 ( next_multiple_of_2 )			      								    								  
82 COMPARE_OP 2 ( == )					      								    								  
84 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
11 86 LOAD_FAST 2 ( i2 )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 2 ( i2 )					      								    								  
							      								    								  
12 94 LOAD_FAST 1 ( ugly )				      								    								  
96 LOAD_FAST 2 ( i2 )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 3 ( 2 )					      								    								  
102 BINARY_MULTIPLY					      								    								  
104 STORE_FAST 5 ( next_multiple_of_2 )			      								    								  
							      								    								  
13 >> 106 LOAD_FAST 1 ( ugly )				      								    								  
108 LOAD_FAST 8 ( l )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 6 ( next_multiple_of_3 )			      								    								  
114 COMPARE_OP 2 ( == )					      								    								  
116 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
14 118 LOAD_FAST 3 ( i3 )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 3 ( i3 )					      								    								  
							      								    								  
15 126 LOAD_FAST 1 ( ugly )				      								    								  
128 LOAD_FAST 3 ( i3 )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 4 ( 3 )					      								    								  
134 BINARY_MULTIPLY					      								    								  
136 STORE_FAST 6 ( next_multiple_of_3 )			      								    								  
							      								    								  
16 >> 138 LOAD_FAST 1 ( ugly )				      								    								  
140 LOAD_FAST 8 ( l )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_FAST 7 ( next_multiple_of_5 )			      								    								  
146 COMPARE_OP 2 ( == )					      								    								  
148 POP_JUMP_IF_FALSE 54				      								    								  
							      								    								  
17 150 LOAD_FAST 4 ( i5 )				      								    								  
152 LOAD_CONST 2 ( 1 )					      								    								  
154 INPLACE_ADD						      								    								  
156 STORE_FAST 4 ( i5 )					      								    								  
							      								    								  
18 158 LOAD_FAST 1 ( ugly )				      								    								  
160 LOAD_FAST 4 ( i5 )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_CONST 5 ( 5 )					      								    								  
166 BINARY_MULTIPLY					      								    								  
168 STORE_FAST 7 ( next_multiple_of_5 )			      								    								  
170 JUMP_ABSOLUTE 54					      								    								  
>> 172 POP_BLOCK					      								    								  
							      								    								  
19 >> 174 LOAD_FAST 1 ( ugly )				      								    								  
176 LOAD_CONST 6 ( - 1 )				      								    								  
178 BINARY_SUBSCR					      								    								  
180 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3
--							      --							    --								  --
Disassembly of <code object findLength at 0x7fbac0e8de40, fil def findLength ( st , n ) :				    def findLength ( st , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  total = [ 0 ] * ( n + 1 )				    	total = [ 0 ] * ( n + 1 ) )				  
2 BUILD_LIST 1						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
4 LOAD_FAST 1 ( n )					      	      total [ i ] = ( total [ i - 1 ] + int ( st [ i - 1 ]  	    total [ i ] = total [ i - 1 ] + int ( st [ i - 1 ] )  
6 LOAD_CONST 2 ( 1 )					      	  ans = 0						    	ans = 0							  
8 BINARY_ADD						      	  l = 2							    	l = 2							  
10 BINARY_MULTIPLY					      	  while ( l <= n ) :					    	while l <= n :						  
12 STORE_FAST 2 ( total )				      	      for i in range ( n - l + 1 ) :			    	    for i in range ( n - l + 1 ) :			  
							      		  j = i + l - 1					    		j = i + l - 1					  
3 14 SETUP_LOOP 62 ( to 78 )				      		  if ( total [ i + int ( l / 2 ) ] - total [ i ] == 		l [ i + int ( l / 2 ) ] = total [ i + int ( l / 2 
16 LOAD_GLOBAL 0 ( range )				      		      ans = max ( ans , l )			    		if ans [ i + 1 ] == max [ l + 2 ] :		  
18 LOAD_CONST 2 ( 1 )					      	      l = l + 2						    		    ans = max ( ans , l )			  
20 LOAD_FAST 1 ( n )					      	  return ans						    	return ans						  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 44 ( to 76 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 2 ( total )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_GLOBAL 1 ( int )				      								    								  
46 LOAD_FAST 0 ( st )					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_GLOBAL 1 ( int )				      								    								  
62 LOAD_CONST 3 ( '0' )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_FAST 2 ( total )				      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 30					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
5 >> 78 LOAD_CONST 1 ( 0 )				      								    								  
80 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
6 82 LOAD_CONST 4 ( 2 )					      								    								  
84 STORE_FAST 5 ( l )					      								    								  
							      								    								  
7 86 SETUP_LOOP 128 ( to 216 )				      								    								  
>> 88 LOAD_FAST 5 ( l )					      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 COMPARE_OP 1 ( <= )					      								    								  
94 POP_JUMP_IF_FALSE 214				      								    								  
							      								    								  
8 96 SETUP_LOOP 106 ( to 204 )				      								    								  
98 LOAD_GLOBAL 0 ( range )				      								    								  
100 LOAD_FAST 1 ( n )					      								    								  
102 LOAD_FAST 5 ( l )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_ADD						      								    								  
110 CALL_FUNCTION 1					      								    								  
112 GET_ITER						      								    								  
>> 114 FOR_ITER 86 ( to 202 )				      								    								  
116 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 118 LOAD_FAST 3 ( i )					      								    								  
120 LOAD_FAST 5 ( l )					      								    								  
122 BINARY_ADD						      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 STORE_FAST 6 ( j )					      								    								  
							      								    								  
10 130 LOAD_FAST 2 ( total )				      								    								  
132 LOAD_FAST 3 ( i )					      								    								  
134 LOAD_GLOBAL 1 ( int )				      								    								  
136 LOAD_FAST 5 ( l )					      								    								  
138 LOAD_CONST 4 ( 2 )					      								    								  
140 BINARY_TRUE_DIVIDE					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 BINARY_ADD						      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_FAST 2 ( total )				      								    								  
150 LOAD_FAST 3 ( i )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 BINARY_SUBTRACT					      								    								  
156 LOAD_FAST 2 ( total )				      								    								  
158 LOAD_FAST 3 ( i )					      								    								  
160 LOAD_FAST 5 ( l )					      								    								  
162 BINARY_ADD						      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_FAST 2 ( total )				      								    								  
168 LOAD_FAST 3 ( i )					      								    								  
170 LOAD_GLOBAL 1 ( int )				      								    								  
172 LOAD_FAST 5 ( l )					      								    								  
174 LOAD_CONST 4 ( 2 )					      								    								  
176 BINARY_TRUE_DIVIDE					      								    								  
178 CALL_FUNCTION 1					      								    								  
180 BINARY_ADD						      								    								  
182 BINARY_SUBSCR					      								    								  
184 BINARY_SUBTRACT					      								    								  
186 COMPARE_OP 2 ( == )					      								    								  
188 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
11 190 LOAD_GLOBAL 2 ( max )				      								    								  
192 LOAD_FAST 4 ( ans )					      								    								  
194 LOAD_FAST 5 ( l )					      								    								  
196 CALL_FUNCTION 2					      								    								  
198 STORE_FAST 4 ( ans )				      								    								  
200 JUMP_ABSOLUTE 114					      								    								  
>> 202 POP_BLOCK					      								    								  
							      								    								  
12 >> 204 LOAD_FAST 5 ( l )				      								    								  
206 LOAD_CONST 4 ( 2 )					      								    								  
208 BINARY_ADD						      								    								  
210 STORE_FAST 5 ( l )					      								    								  
212 JUMP_ABSOLUTE 88					      								    								  
>> 214 POP_BLOCK					      								    								  
							      								    								  
13 >> 216 LOAD_FAST 4 ( ans )				      								    								  
218 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE_WITH_PERMUTATIONS_ALLOWED	      LONGEST_COMMON_SUBSEQUENCE_WITH_PERMUTATIONS_ALLOWED	    LONGEST_COMMON_SUBSEQUENCE_WITH_PERMUTATIONS_ALLOWED	  LONGEST_COMMON_SUBSEQUENCE_WITH_PERMUTATIONS_ALLOWED
--							      --							    --								  --
Disassembly of <code object longestString at 0x7fbac0e89d20,  def longestString ( str1 , str2 ) :			    def longestString ( str1 , str2 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count1 = [ 0 ] * 26					    	count1 = [ 0 ] * 26					  
2 BUILD_LIST 1						      	  count2 = [ 0 ] * 26					    	count2 = [ 0 ] * 26					  
4 LOAD_CONST 2 ( 26 )					      	  for i in range ( len ( str1 ) ) :			    	for i in range ( len ( str1 ) ) :			  
6 BINARY_MULTIPLY					      	      count1 [ ord ( str1 [ i ] ) - ord ( 'a' ) ] += 1	    	    count1 [ ord ( str1 [ i ] ) - ord ( "a" ) ] += 1	  
8 STORE_FAST 2 ( count1 )				      	  for i in range ( len ( str2 ) ) :			    	for i in range ( len ( str2 ) ) :			  
							      	      count2 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] += 1	    	    count2 [ ord ( str2 [ i ] ) - ord ( "a" ) ] += 1	  
3 10 LOAD_CONST 1 ( 0 )					      	  result = ""						    	result = ""						  
12 BUILD_LIST 1						      	  for i in range ( 26 ) :				    	for i in range ( 26 ) :					  
14 LOAD_CONST 2 ( 26 )					      	      for j in range ( 1 , min ( count1 [ i ] , count2 [ i  	    for j in range ( 1 , min ( count1 [ i ] , count2 [ i  
16 BINARY_MULTIPLY					      		  result = result + chr ( ord ( 'a' ) + i )	    		result = chr ( ord ( "a" ) + chr ( result ) )	  
18 STORE_FAST 3 ( count2 )				      	  print ( result )					    	print ( result )					  
							      								    								  
4 20 SETUP_LOOP 52 ( to 74 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_GLOBAL 1 ( len )				      								    								  
26 LOAD_FAST 0 ( str1 )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 36 ( to 72 )				      								    								  
36 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 2 ( count1 )				      								    								  
40 LOAD_GLOBAL 2 ( ord )				      								    								  
42 LOAD_FAST 0 ( str1 )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_GLOBAL 2 ( ord )				      								    								  
52 LOAD_CONST 3 ( 'a' )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 DUP_TOP_TWO						      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 4 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 ROT_THREE						      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
6 >> 74 SETUP_LOOP 52 ( to 128 )			      								    								  
76 LOAD_GLOBAL 0 ( range )				      								    								  
78 LOAD_GLOBAL 1 ( len )				      								    								  
80 LOAD_FAST 1 ( str2 )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 36 ( to 126 )				      								    								  
90 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 92 LOAD_FAST 3 ( count2 )				      								    								  
94 LOAD_GLOBAL 2 ( ord )				      								    								  
96 LOAD_FAST 1 ( str2 )					      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_GLOBAL 2 ( ord )				      								    								  
106 LOAD_CONST 3 ( 'a' )				      								    								  
108 CALL_FUNCTION 1					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 DUP_TOP_TWO						      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 4 ( 1 )					      								    								  
118 INPLACE_ADD						      								    								  
120 ROT_THREE						      								    								  
122 STORE_SUBSCR					      								    								  
124 JUMP_ABSOLUTE 88					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
8 >> 128 LOAD_CONST 5 ( '' )				      								    								  
130 STORE_FAST 5 ( result )				      								    								  
							      								    								  
9 132 SETUP_LOOP 74 ( to 208 )				      								    								  
134 LOAD_GLOBAL 0 ( range )				      								    								  
136 LOAD_CONST 2 ( 26 )					      								    								  
138 CALL_FUNCTION 1					      								    								  
140 GET_ITER						      								    								  
>> 142 FOR_ITER 62 ( to 206 )				      								    								  
144 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 146 SETUP_LOOP 56 ( to 204 )				      								    								  
148 LOAD_GLOBAL 0 ( range )				      								    								  
150 LOAD_CONST 4 ( 1 )					      								    								  
152 LOAD_GLOBAL 3 ( min )				      								    								  
154 LOAD_FAST 2 ( count1 )				      								    								  
156 LOAD_FAST 4 ( i )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_FAST 3 ( count2 )				      								    								  
162 LOAD_FAST 4 ( i )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 CALL_FUNCTION 2					      								    								  
168 LOAD_CONST 4 ( 1 )					      								    								  
170 BINARY_ADD						      								    								  
172 CALL_FUNCTION 2					      								    								  
174 GET_ITER						      								    								  
>> 176 FOR_ITER 24 ( to 202 )				      								    								  
178 STORE_FAST 6 ( j )					      								    								  
							      								    								  
11 180 LOAD_FAST 5 ( result )				      								    								  
182 LOAD_GLOBAL 4 ( chr )				      								    								  
184 LOAD_GLOBAL 2 ( ord )				      								    								  
186 LOAD_CONST 3 ( 'a' )				      								    								  
188 CALL_FUNCTION 1					      								    								  
190 LOAD_FAST 4 ( i )					      								    								  
192 BINARY_ADD						      								    								  
194 CALL_FUNCTION 1					      								    								  
196 BINARY_ADD						      								    								  
198 STORE_FAST 5 ( result )				      								    								  
200 JUMP_ABSOLUTE 176					      								    								  
>> 202 POP_BLOCK					      								    								  
>> 204 JUMP_ABSOLUTE 142				      								    								  
>> 206 POP_BLOCK					      								    								  
							      								    								  
12 >> 208 LOAD_GLOBAL 5 ( print )			      								    								  
210 LOAD_FAST 5 ( result )				      								    								  
212 CALL_FUNCTION 1					      								    								  
214 POP_TOP						      								    								  
216 LOAD_CONST 0 ( None )				      								    								  
218 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_<unk> ASING_SUBSEQUENCE_LCS_LIS		      LONGEST_COMMON_<unk> ASING_SUBSEQUENCE_LCS_LIS		    LONGEST_COMMON_<unk> ASING_SUBSEQUENCE_LCS_LIS		  LONGEST_COMMON_<unk> ASING_SUBSEQUENCE_LCS_LIS
--							      --							    --								  --
Disassembly of <code object LCIS at 0x7fbac0e8d540, file "<di def LCIS ( arr1 , n , arr2 , m ) :			    def LCIS ( arr1 , n , arr2 , m = 0 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  table = [ 0 ] * m					    	table = [ 0 ] * m					  
2 BUILD_LIST 1						      	  for j in range ( m ) :				    	for j in range ( m ) :					  
4 LOAD_FAST 3 ( m )					      	      table [ j ] = 0					    	    table [ j ] = 0					  
6 BINARY_MULTIPLY					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
8 STORE_FAST 4 ( table )				      	      current = 0					    	    current = 0						  
							      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
3 10 SETUP_LOOP 24 ( to 36 )				      		  if ( arr1 [ i ] == arr2 [ j ] ) :		    		if arr1 [ i ] == arr2 [ j ] :			  
12 LOAD_GLOBAL 0 ( range )				      		      if ( current + 1 > table [ j ] ) :	    		    table [ j ] = current + 1			  
14 LOAD_FAST 3 ( m )					      			  table [ j ] = current + 1		    		if arr1 [ i ] > arr2 [ j ] :			  
16 CALL_FUNCTION 1					      		  if ( arr1 [ i ] > arr2 [ j ] ) :		    		    if table [ j ] > current :			  
18 GET_ITER						      		      if ( table [ j ] > current ) :		    			current = table [ j ]			  
>> 20 FOR_ITER 12 ( to 34 )				      			  current = table [ j ]			    	result = 0						  
22 STORE_FAST 5 ( j )					      	  result = 0						    	for i in range ( m ) :					  
							      	  for i in range ( m ) :				    	    if table [ i ] > table :				  
4 24 LOAD_CONST 1 ( 0 )					      	      if ( table [ i ] > result ) :			    		result = table [ i ]				  
26 LOAD_FAST 4 ( table )				      		  result = table [ i ]				    return result						  
28 LOAD_FAST 5 ( j )					      	  return result						    								  
30 STORE_SUBSCR						      								    								  
32 JUMP_ABSOLUTE 20					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 SETUP_LOOP 118 ( to 156 )			      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 106 ( to 154 )				      								    								  
48 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 50 LOAD_CONST 1 ( 0 )					      								    								  
52 STORE_FAST 7 ( current )				      								    								  
							      								    								  
7 54 SETUP_LOOP 96 ( to 152 )				      								    								  
56 LOAD_GLOBAL 0 ( range )				      								    								  
58 LOAD_FAST 3 ( m )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 84 ( to 150 )				      								    								  
66 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( arr1 )				      								    								  
70 LOAD_FAST 6 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 2 ( arr2 )					      								    								  
76 LOAD_FAST 5 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
9 84 LOAD_FAST 7 ( current )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 4 ( table )				      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 COMPARE_OP 4 ( > )					      								    								  
98 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 100 LOAD_FAST 7 ( current )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 4 ( table )				      								    								  
108 LOAD_FAST 5 ( j )					      								    								  
110 STORE_SUBSCR					      								    								  
							      								    								  
11 >> 112 LOAD_FAST 0 ( arr1 )				      								    								  
114 LOAD_FAST 6 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_FAST 2 ( arr2 )				      								    								  
120 LOAD_FAST 5 ( j )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 COMPARE_OP 4 ( > )					      								    								  
126 POP_JUMP_IF_FALSE 64				      								    								  
							      								    								  
12 128 LOAD_FAST 4 ( table )				      								    								  
130 LOAD_FAST 5 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 7 ( current )				      								    								  
136 COMPARE_OP 4 ( > )					      								    								  
138 POP_JUMP_IF_FALSE 64				      								    								  
							      								    								  
13 140 LOAD_FAST 4 ( table )				      								    								  
142 LOAD_FAST 5 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 STORE_FAST 7 ( current )				      								    								  
148 JUMP_ABSOLUTE 64					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 JUMP_ABSOLUTE 46					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
14 >> 156 LOAD_CONST 1 ( 0 )				      								    								  
158 STORE_FAST 8 ( result )				      								    								  
							      								    								  
15 160 SETUP_LOOP 36 ( to 198 )				      								    								  
162 LOAD_GLOBAL 0 ( range )				      								    								  
164 LOAD_FAST 3 ( m )					      								    								  
166 CALL_FUNCTION 1					      								    								  
168 GET_ITER						      								    								  
>> 170 FOR_ITER 24 ( to 196 )				      								    								  
172 STORE_FAST 6 ( i )					      								    								  
							      								    								  
16 174 LOAD_FAST 4 ( table )				      								    								  
176 LOAD_FAST 6 ( i )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 LOAD_FAST 8 ( result )				      								    								  
182 COMPARE_OP 4 ( > )					      								    								  
184 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
17 186 LOAD_FAST 4 ( table )				      								    								  
188 LOAD_FAST 6 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 STORE_FAST 8 ( result )				      								    								  
194 JUMP_ABSOLUTE 170					      								    								  
>> 196 POP_BLOCK					      								    								  
							      								    								  
18 >> 198 LOAD_FAST 8 ( result )			      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_SMALLEST_ELEMENTS_ORDER_USING_O1_EXTRA_SPACE		      K_SMALLEST_ELEMENTS_ORDER_USING_O1_EXTRA_SPACE		    K_SMALLEST_ELEMENTS_ORDER_USING_O1_EXTRA_SPACE		  K_SMALLEST_ELEMENTS_ORDER_USING_O1_EXTRA_SPACE
--							      --							    --								  --
Disassembly of <code object printSmall at 0x7fbac0e8bc90, fil def printSmall ( arr , n , k ) :				    def printSmall ( arr , n , k ) :				  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 162 ( to 164 )				      	  for i in range ( k , n ) :				    	for i in range ( k , n ) :				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_GLOBAL 0 ( range )				      	      max_var = arr [ k - 1 ]				    	    max_var = arr [ k - 1 ]				  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/K_SMAL
4 LOAD_FAST 2 ( k )					      	      pos = k - 1					    	    pos = k - 1						  LEST_ELEMENTS_ORDER_USING_O1_EXTRA_SPACE.py", line
6 LOAD_FAST 1 ( n )					      	      for j in range ( k - 2 , - 1 , - 1 ) :		    	    for j in range ( k - 2 , - 1 , - 1 ) :		   49, in <module>     print ( " ".join ( arr [ i ]
8 CALL_FUNCTION 2					      		  if ( arr [ j ] > max_var ) :			    		if arr [ j ] > max_var :			  ) , end = " " ) NameError: name 'arr' is not defin
10 GET_ITER						      		      max_var = arr [ j ]			    		    max_var = arr [ j ]				  ed
>> 12 FOR_ITER 148 ( to 162 )				      		      pos = j					    		    pos = j					  
14 STORE_FAST 3 ( i )					      	      if ( max_var > arr [ i ] ) :			    	    if max_var > arr [ i ] :				  
							      		  j = pos					    		j = pos						  
3 16 LOAD_FAST 0 ( arr )				      		  while ( j < k - 1 ) :				    		while j < k - 1 :				  
18 LOAD_FAST 2 ( k )					      		      arr [ j ] = arr [ j + 1 ]			    		    arr [ j ] = arr [ j + 1 ]			  
20 LOAD_CONST 1 ( 1 )					      		      j += 1					    		    j += 1					  
22 BINARY_SUBTRACT					      		  arr [ k - 1 ] = arr [ i ]			    	arr [ k - 1 ] = arr [ i ]				  
24 BINARY_SUBSCR					      	  for i in range ( 0 , k ) :				    print ( " ".join ( arr [ i ] ) , end = " " )		  
26 STORE_FAST 4 ( max_var )				      	      print ( arr [ i ] , end = " " )			    								  
							      								    								  
4 28 LOAD_FAST 2 ( k )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 STORE_FAST 5 ( pos )					      								    								  
							      								    								  
5 36 SETUP_LOOP 48 ( to 86 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 2 ( k )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 3 ( - 1 )					      								    								  
48 LOAD_CONST 3 ( - 1 )					      								    								  
50 CALL_FUNCTION 3					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 28 ( to 84 )				      								    								  
56 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 6 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 4 ( max_var )				      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 6 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 4 ( max_var )				      								    								  
							      								    								  
8 78 LOAD_FAST 6 ( j )					      								    								  
80 STORE_FAST 5 ( pos )					      								    								  
82 JUMP_ABSOLUTE 54					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
9 >> 86 LOAD_FAST 4 ( max_var )				      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
10 98 LOAD_FAST 5 ( pos )				      								    								  
100 STORE_FAST 6 ( j )					      								    								  
							      								    								  
11 102 SETUP_LOOP 40 ( to 144 )				      								    								  
>> 104 LOAD_FAST 6 ( j )				      								    								  
106 LOAD_FAST 2 ( k )					      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
12 116 LOAD_FAST 0 ( arr )				      								    								  
118 LOAD_FAST 6 ( j )					      								    								  
120 LOAD_CONST 1 ( 1 )					      								    								  
122 BINARY_ADD						      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 6 ( j )					      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
13 132 LOAD_FAST 6 ( j )				      								    								  
134 LOAD_CONST 1 ( 1 )					      								    								  
136 INPLACE_ADD						      								    								  
138 STORE_FAST 6 ( j )					      								    								  
140 JUMP_ABSOLUTE 104					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
14 >> 144 LOAD_FAST 0 ( arr )				      								    								  
146 LOAD_FAST 3 ( i )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_FAST 0 ( arr )					      								    								  
152 LOAD_FAST 2 ( k )					      								    								  
154 LOAD_CONST 1 ( 1 )					      								    								  
156 BINARY_SUBTRACT					      								    								  
158 STORE_SUBSCR					      								    								  
160 JUMP_ABSOLUTE 12					      								    								  
>> 162 POP_BLOCK					      								    								  
							      								    								  
15 >> 164 SETUP_LOOP 34 ( to 200 )			      								    								  
166 LOAD_GLOBAL 0 ( range )				      								    								  
168 LOAD_CONST 4 ( 0 )					      								    								  
170 LOAD_FAST 2 ( k )					      								    								  
172 CALL_FUNCTION 2					      								    								  
174 GET_ITER						      								    								  
>> 176 FOR_ITER 20 ( to 198 )				      								    								  
178 STORE_FAST 3 ( i )					      								    								  
							      								    								  
16 180 LOAD_GLOBAL 1 ( print )				      								    								  
182 LOAD_FAST 0 ( arr )					      								    								  
184 LOAD_FAST 3 ( i )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_CONST 5 ( ' ' )				      								    								  
190 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
192 CALL_FUNCTION_KW 2					      								    								  
194 POP_TOP						      								    								  
196 JUMP_ABSOLUTE 176					      								    								  
>> 198 POP_BLOCK					      								    								  
>> 200 LOAD_CONST 0 ( None )				      								    								  
202 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_REPRESENTATION_GIVEN_BINARY_STRING_DIVISIBLE_10_NOT   DECIMAL_REPRESENTATION_GIVEN_BINARY_STRING_DIVISIBLE_10_NOT   DECIMAL_REPRESENTATION_GIVEN_BINARY_STRING_DIVISIBLE_10_NOT	  DECIMAL_REPRESENTATION_GIVEN_BINARY_STRING_DIVISIBLE_10_NOT
--							      --							    --								  --
Disassembly of <code object isDivisibleBy10 at 0x7fbac0e8de40 def isDivisibleBy10 ( bin ) :				    def isDivisibleBy10 ( bin ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( bin )					    	n = len ( bin )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( bin )					      	  if ( bin [ n - 1 ] == '1' ) :				    	if bin [ n - 1 ] == '1' :				  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/DECIMA
4 CALL_FUNCTION 1					      	      return False					    	    return False					  L_REPRESENTATION_GIVEN_BINARY_STRING_DIVISIBLE_10_
6 STORE_FAST 1 ( n )					      	  sum = 0						    	sum = 0							  NOT.py", line 79, in <module>	    if f_filled(*par
							      	  i = n - 2						    	i = n - 2						  ameters_set) == f_gold(*parameters_set):   File "/
3 8 LOAD_FAST 0 ( bin )					      	  while i >= 0 :					    	while i >= 0 :						  home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8n
10 LOAD_FAST 1 ( n )					      	      if ( bin [ i ] == '1' ) :				    	    if bin [ i ] == '1' :				  nsvsdt/eval_scripts/dis_sa-python_sa.test/DECIMAL_
12 LOAD_CONST 1 ( 1 )					      		  posFromRight = n - i - 1			    		posFromRight = n - i - 1			  REPRESENTATION_GIVEN_BINARY_STRING_DIVISIBLE_10_NO
14 BINARY_SUBTRACT					      		  if ( posFromRight % 4 == 1 ) :		    		if posFromRight % 4 == 1 :			  T.py", line 51, in f_filled	  elif posFromRight
16 BINARY_SUBSCR					      		      sum = sum + 2				    		    sum = sum + 2				  % 4 == 2 : UnboundLocalError: local variable 'posF
18 LOAD_CONST 2 ( '1' )					      		  elif ( posFromRight % 4 == 2 ) :		    	    elif posFromRight % 4 == 2 :			  romRight' referenced before assignment
20 COMPARE_OP 2 ( == )					      		      sum = sum + 4				    		sum = sum + 4					  
22 POP_JUMP_IF_FALSE 28					      		  elif ( posFromRight % 4 == 3 ) :		    	    elif posFromRight % 4 == 3 :			  
							      		      sum = sum + 8				    		sum = sum + 8					  
4 24 LOAD_CONST 3 ( False )				      		  elif ( posFromRight % 4 == 0 ) :		    	    elif posFromRight % 4 == 0 :			  
26 RETURN_VALUE						      		      sum = sum + 6				    		sum = sum + 2					  
							      	      i = i - 1						    	if posFromRight % 4 == 0 :				  
5 >> 28 LOAD_CONST 4 ( 0 )				      	  if ( sum % 10 == 0 ) :				    	    sum = sum + 2					  
30 STORE_FAST 2 ( sum )					      	      return True					    	if sum == True :					  
							      	  return False						    	    return False					  
6 32 LOAD_FAST 1 ( n )					      								    	return True						  
34 LOAD_CONST 5 ( 2 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 40 SETUP_LOOP 130 ( to 172 )				      								    								  
>> 42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_CONST 4 ( 0 )					      								    								  
46 COMPARE_OP 5 ( >= )					      								    								  
48 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
8 50 LOAD_FAST 0 ( bin )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 2 ( '1' )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
9 62 LOAD_FAST 1 ( n )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 STORE_FAST 4 ( posFromRight )			      								    								  
							      								    								  
10 74 LOAD_FAST 4 ( posFromRight )			      								    								  
76 LOAD_CONST 6 ( 4 )					      								    								  
78 BINARY_MODULO					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 COMPARE_OP 2 ( == )					      								    								  
84 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
11 86 LOAD_FAST 2 ( sum )				      								    								  
88 LOAD_CONST 5 ( 2 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 2 ( sum )					      								    								  
94 JUMP_FORWARD 64 ( to 160 )				      								    								  
							      								    								  
12 >> 96 LOAD_FAST 4 ( posFromRight )			      								    								  
98 LOAD_CONST 6 ( 4 )					      								    								  
100 BINARY_MODULO					      								    								  
102 LOAD_CONST 5 ( 2 )					      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
13 108 LOAD_FAST 2 ( sum )				      								    								  
110 LOAD_CONST 6 ( 4 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 2 ( sum )				      								    								  
116 JUMP_FORWARD 42 ( to 160 )				      								    								  
							      								    								  
14 >> 118 LOAD_FAST 4 ( posFromRight )			      								    								  
120 LOAD_CONST 6 ( 4 )					      								    								  
122 BINARY_MODULO					      								    								  
124 LOAD_CONST 7 ( 3 )					      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
15 130 LOAD_FAST 2 ( sum )				      								    								  
132 LOAD_CONST 8 ( 8 )					      								    								  
134 BINARY_ADD						      								    								  
136 STORE_FAST 2 ( sum )				      								    								  
138 JUMP_FORWARD 20 ( to 160 )				      								    								  
							      								    								  
16 >> 140 LOAD_FAST 4 ( posFromRight )			      								    								  
142 LOAD_CONST 6 ( 4 )					      								    								  
144 BINARY_MODULO					      								    								  
146 LOAD_CONST 4 ( 0 )					      								    								  
148 COMPARE_OP 2 ( == )					      								    								  
150 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
17 152 LOAD_FAST 2 ( sum )				      								    								  
154 LOAD_CONST 9 ( 6 )					      								    								  
156 BINARY_ADD						      								    								  
158 STORE_FAST 2 ( sum )				      								    								  
							      								    								  
18 >> 160 LOAD_FAST 3 ( i )				      								    								  
162 LOAD_CONST 1 ( 1 )					      								    								  
164 BINARY_SUBTRACT					      								    								  
166 STORE_FAST 3 ( i )					      								    								  
168 JUMP_ABSOLUTE 42					      								    								  
>> 170 POP_BLOCK					      								    								  
							      								    								  
19 >> 172 LOAD_FAST 2 ( sum )				      								    								  
174 LOAD_CONST 10 ( 10 )				      								    								  
176 BINARY_MODULO					      								    								  
178 LOAD_CONST 4 ( 0 )					      								    								  
180 COMPARE_OP 2 ( == )					      								    								  
182 POP_JUMP_IF_FALSE 188				      								    								  
							      								    								  
20 184 LOAD_CONST 11 ( True )				      								    								  
186 RETURN_VALUE					      								    								  
							      								    								  
21 >> 188 LOAD_CONST 3 ( False )			      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY		      COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY		    COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY			  COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY
--							      --							    --								  --
Disassembly of <code object countMinOperations at 0x7fbac0e89 def countMinOperations ( target , n ) :			    def countMinOperations ( target , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 2 ( result )				      	  while ( True ) :					    	while True :						  
							      	      zero_count = 0 ;					    	    zero_count = 0					  
3 4 SETUP_LOOP 192 ( to 198 )				      	      i = 0 ;						    	    i = 0						  
							      	      while ( i < n ) :					    	    while i < n :					  
4 >> 6 LOAD_CONST 1 ( 0 )				      		  if ( ( target [ i ] & 1 ) > 0 ) :		    		if target [ i ] & 1 > 0 :			  
8 STORE_FAST 3 ( zero_count )				      		      break ;					    		    break					  
							      		  elif ( target [ i ] == 0 ) :			    	    elif target [ i ] == 0 :				  
5 10 LOAD_CONST 1 ( 0 )					      		      zero_count += 1 ;				    		zero_count += 1					  
12 STORE_FAST 4 ( i )					      		  i += 1 ;					    	    i += 1						  
							      	      if ( zero_count == n ) :				    	if zero_count == n :					  
6 14 SETUP_LOOP 60 ( to 76 )				      		  return result ;				    	    return result					  
>> 16 LOAD_FAST 4 ( i )					      	      if ( i == n ) :					    	if i == n :						  
18 LOAD_FAST 1 ( n )					      		  for j in range ( n ) :			    	    for j in range ( n ) :				  
20 COMPARE_OP 0 ( < )					      		      target [ j ] = target [ j ] // 2 ;	    		target [ j ] = target [ j ] // 2		  
22 POP_JUMP_IF_FALSE 74					      		  result += 1 ;					    	    result += 1						  
							      	      for j in range ( i , n ) :			    	for j in range ( i , n ) :				  
7 24 LOAD_FAST 0 ( target )				      		  if ( target [ j ] & 1 ) :			    	    if target [ j ] & target [ j ] = target [ j ] [ j ]	  
26 LOAD_FAST 4 ( i )					      		      target [ j ] -= 1 ;			    	    result += 1						  
28 BINARY_SUBSCR					      		      result += 1 ;				    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_AND						      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 4 ( > )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 40 BREAK_LOOP						      								    								  
42 JUMP_FORWARD 20 ( to 64 )				      								    								  
							      								    								  
9 >> 44 LOAD_FAST 0 ( target )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
10 56 LOAD_FAST 3 ( zero_count )			      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( zero_count )				      								    								  
							      								    								  
11 >> 64 LOAD_FAST 4 ( i )				      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 4 ( i )					      								    								  
72 JUMP_ABSOLUTE 16					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
12 >> 76 LOAD_FAST 3 ( zero_count )			      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
13 84 LOAD_FAST 2 ( result )				      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
14 >> 88 LOAD_FAST 4 ( i )				      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
15 96 SETUP_LOOP 32 ( to 130 )				      								    								  
98 LOAD_GLOBAL 0 ( range )				      								    								  
100 LOAD_FAST 1 ( n )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 GET_ITER						      								    								  
>> 106 FOR_ITER 20 ( to 128 )				      								    								  
108 STORE_FAST 5 ( j )					      								    								  
							      								    								  
16 110 LOAD_FAST 0 ( target )				      								    								  
112 LOAD_FAST 5 ( j )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 3 ( 2 )					      								    								  
118 BINARY_FLOOR_DIVIDE					      								    								  
120 LOAD_FAST 0 ( target )				      								    								  
122 LOAD_FAST 5 ( j )					      								    								  
124 STORE_SUBSCR					      								    								  
126 JUMP_ABSOLUTE 106					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
17 >> 130 LOAD_FAST 2 ( result )			      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 INPLACE_ADD						      								    								  
136 STORE_FAST 2 ( result )				      								    								  
							      								    								  
18 >> 138 SETUP_LOOP 54 ( to 194 )			      								    								  
140 LOAD_GLOBAL 0 ( range )				      								    								  
142 LOAD_FAST 4 ( i )					      								    								  
144 LOAD_FAST 1 ( n )					      								    								  
146 CALL_FUNCTION 2					      								    								  
148 GET_ITER						      								    								  
>> 150 FOR_ITER 40 ( to 192 )				      								    								  
152 STORE_FAST 5 ( j )					      								    								  
							      								    								  
19 154 LOAD_FAST 0 ( target )				      								    								  
156 LOAD_FAST 5 ( j )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_CONST 2 ( 1 )					      								    								  
162 BINARY_AND						      								    								  
164 POP_JUMP_IF_FALSE 150				      								    								  
							      								    								  
20 166 LOAD_FAST 0 ( target )				      								    								  
168 LOAD_FAST 5 ( j )					      								    								  
170 DUP_TOP_TWO						      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_CONST 2 ( 1 )					      								    								  
176 INPLACE_SUBTRACT					      								    								  
178 ROT_THREE						      								    								  
180 STORE_SUBSCR					      								    								  
							      								    								  
21 182 LOAD_FAST 2 ( result )				      								    								  
184 LOAD_CONST 2 ( 1 )					      								    								  
186 INPLACE_ADD						      								    								  
188 STORE_FAST 2 ( result )				      								    								  
190 JUMP_ABSOLUTE 150					      								    								  
>> 192 POP_BLOCK					      								    								  
>> 194 JUMP_ABSOLUTE 6					      								    								  
196 POP_BLOCK						      								    								  
>> 198 LOAD_CONST 0 ( None )				      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WILDCARD_CHARACTER_MATCHING				      WILDCARD_CHARACTER_MATCHING				    WILDCARD_CHARACTER_MATCHING					  WILDCARD_CHARACTER_MATCHING
--							      --							    --								  --
Disassembly of <code object match at 0x7fbac0e8d540, file "<d def match ( first , second ) :				    def match ( first , second ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  if len ( first ) == 0 and len ( second ) == 0 :	    	if len ( first ) == 0 and len ( second ) == 0 :		  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( first )					      	      return True					    	    return True						  _sa.test/WILDCARD_CHARACTER_MATCHING.py", line 36
4 CALL_FUNCTION 1					      	  if len ( first ) > 1 and first [ 0 ] == '*' and len ( sec 	if len ( first ) > 1 and first [ 0 ] == '*' and len ( sec     if len ( first ) != 0 and first [ 0 ] == secon
6 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  d [ 1 : ] ) :
8 COMPARE_OP 2 ( == )					      	  if ( len ( first ) > 1 and first [ 0 ] == '?' ) or ( len  	if len ( first ) > 1 and first [ 0 ] == '?' or len ( firs 			  ^ SyntaxError: invalid syn
10 POP_JUMP_IF_FALSE 28					      	      return match ( first [ 1 : ] , second [ 1 : ] ) ;	    	    return match ( first [ 1 : ] , second [ 1 : ] )	  tax
12 LOAD_GLOBAL 0 ( len )				      	  if len ( first ) != 0 and first [ 0 ] == '*' :	    	if len ( first ) != 0 and first [ 0 ] == second [ 1 : ] ) 
14 LOAD_FAST 1 ( second )				      	      return match ( first [ 1 : ] , second ) or match ( fi 	    return first ( first [ 1 : ] , second [ 0 ] )	  
16 CALL_FUNCTION 1					      	  return False						    	return False						  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 24 LOAD_CONST 2 ( True )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_GLOBAL 0 ( len )				      								    								  
30 LOAD_FAST 0 ( first )				      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 COMPARE_OP 4 ( > )					      								    								  
38 POP_JUMP_IF_FALSE 68					      								    								  
40 LOAD_FAST 0 ( first )				      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 4 ( '*' )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 68					      								    								  
52 LOAD_GLOBAL 0 ( len )				      								    								  
54 LOAD_FAST 1 ( second )				      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 64 LOAD_CONST 5 ( False )				      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
6 >> 68 LOAD_GLOBAL 0 ( len )				      								    								  
70 LOAD_FAST 0 ( first )				      								    								  
72 CALL_FUNCTION 1					      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 COMPARE_OP 4 ( > )					      								    								  
78 POP_JUMP_IF_FALSE 92					      								    								  
80 LOAD_FAST 0 ( first )				      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 6 ( '?' )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_TRUE 132					      								    								  
>> 92 LOAD_GLOBAL 0 ( len )				      								    								  
94 LOAD_FAST 0 ( first )				      								    								  
96 CALL_FUNCTION 1					      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 158				      								    								  
104 LOAD_GLOBAL 0 ( len )				      								    								  
106 LOAD_FAST 1 ( second )				      								    								  
108 CALL_FUNCTION 1					      								    								  
110 LOAD_CONST 1 ( 0 )					      								    								  
112 COMPARE_OP 3 ( != )					      								    								  
114 POP_JUMP_IF_FALSE 158				      								    								  
116 LOAD_FAST 0 ( first )				      								    								  
118 LOAD_CONST 1 ( 0 )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 1 ( second )				      								    								  
124 LOAD_CONST 1 ( 0 )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 COMPARE_OP 2 ( == )					      								    								  
130 POP_JUMP_IF_FALSE 158				      								    								  
							      								    								  
7 >> 132 LOAD_GLOBAL 1 ( match )			      								    								  
134 LOAD_FAST 0 ( first )				      								    								  
136 LOAD_CONST 3 ( 1 )					      								    								  
138 LOAD_CONST 0 ( None )				      								    								  
140 BUILD_SLICE 2					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_FAST 1 ( second )				      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 LOAD_CONST 0 ( None )				      								    								  
150 BUILD_SLICE 2					      								    								  
152 BINARY_SUBSCR					      								    								  
154 CALL_FUNCTION 2					      								    								  
156 RETURN_VALUE					      								    								  
							      								    								  
8 >> 158 LOAD_GLOBAL 0 ( len )				      								    								  
160 LOAD_FAST 0 ( first )				      								    								  
162 CALL_FUNCTION 1					      								    								  
164 LOAD_CONST 1 ( 0 )					      								    								  
166 COMPARE_OP 3 ( != )					      								    								  
168 POP_JUMP_IF_FALSE 218				      								    								  
170 LOAD_FAST 0 ( first )				      								    								  
172 LOAD_CONST 1 ( 0 )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 LOAD_CONST 4 ( '*' )				      								    								  
178 COMPARE_OP 2 ( == )					      								    								  
180 POP_JUMP_IF_FALSE 218				      								    								  
							      								    								  
9 182 LOAD_GLOBAL 1 ( match )				      								    								  
184 LOAD_FAST 0 ( first )				      								    								  
186 LOAD_CONST 3 ( 1 )					      								    								  
188 LOAD_CONST 0 ( None )				      								    								  
190 BUILD_SLICE 2					      								    								  
192 BINARY_SUBSCR					      								    								  
194 LOAD_FAST 1 ( second )				      								    								  
196 CALL_FUNCTION 2					      								    								  
198 JUMP_IF_TRUE_OR_POP 216				      								    								  
200 LOAD_GLOBAL 1 ( match )				      								    								  
202 LOAD_FAST 0 ( first )				      								    								  
204 LOAD_FAST 1 ( second )				      								    								  
206 LOAD_CONST 3 ( 1 )					      								    								  
208 LOAD_CONST 0 ( None )				      								    								  
210 BUILD_SLICE 2					      								    								  
212 BINARY_SUBSCR					      								    								  
214 CALL_FUNCTION 2					      								    								  
>> 216 RETURN_VALUE					      								    								  
							      								    								  
10 >> 218 LOAD_CONST 5 ( False )			      								    								  
220 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_STRINGS_K_ANAGRAMS_NOT			      CHECK_TWO_STRINGS_K_ANAGRAMS_NOT				    CHECK_TWO_STRINGS_K_ANAGRAMS_NOT				  CHECK_TWO_STRINGS_K_ANAGRAMS_NOT
--							      --							    --								  --
Disassembly of <code object arekAnagrams at 0x7fbac0e8bc90, f def arekAnagrams ( str1 , str2 , k ) :			    def arekAnagrams ( str1 , str2 , councoun) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str1 )					    	n = len ( str1 )					  
2 LOAD_FAST 0 ( str1 )					      	  if ( len ( str2 ) != n ) :				    	if len ( str2 ) != n :					  
4 CALL_FUNCTION 1					      	      return False					    	    return False					  
6 STORE_FAST 3 ( n )					      	  count1 = [ 0 ] * MAX_CHAR				    	count1 = [ 0 ] * MAX_CHAR				  
							      	  count2 = [ 0 ] * MAX_CHAR				    	count2 = [ 0 ] * MAX_CHAR				  
3 8 LOAD_GLOBAL 0 ( len )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
10 LOAD_FAST 1 ( str2 )					      	      count1 [ ord ( str1 [ i ] ) - ord ( 'a' ) ] += 1	    	    count1 [ ord ( str1 [ i ] ) - ord ( "a" ) ] += 1	  
12 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
14 LOAD_FAST 3 ( n )					      	      count2 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] += 1	    	    count2 [ ord ( str2 [ i ] ) - ord ( "a" ) ] += 1	  
16 COMPARE_OP 3 ( != )					      	  count = 0						    	count = 0						  
18 POP_JUMP_IF_FALSE 24					      	  for i in range ( MAX_CHAR ) :				    	for i in range ( MAX_CHAR ) :				  
							      	      if ( count1 [ i ] > count2 [ i ] ) :		    	    if count1 [ i ] > count2 [ i ] and abs ( councoun[ i  
4 20 LOAD_CONST 1 ( False )				      		  count = count + abs ( count1 [ i ] - count2 [ i ] 		count = count2 [ i ] - councouni + councouni	  
22 RETURN_VALUE						      	  return ( count <= k )					    return count						  
							      								    								  
5 >> 24 LOAD_CONST 2 ( 0 )				      								    								  
26 BUILD_LIST 1						      								    								  
28 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
30 BINARY_MULTIPLY					      								    								  
32 STORE_FAST 4 ( count1 )				      								    								  
							      								    								  
6 34 LOAD_CONST 2 ( 0 )					      								    								  
36 BUILD_LIST 1						      								    								  
38 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
40 BINARY_MULTIPLY					      								    								  
42 STORE_FAST 5 ( count2 )				      								    								  
							      								    								  
7 44 SETUP_LOOP 48 ( to 94 )				      								    								  
46 LOAD_GLOBAL 2 ( range )				      								    								  
48 LOAD_FAST 3 ( n )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 36 ( to 92 )				      								    								  
56 STORE_FAST 6 ( i )					      								    								  
							      								    								  
8 58 LOAD_FAST 4 ( count1 )				      								    								  
60 LOAD_GLOBAL 3 ( ord )				      								    								  
62 LOAD_FAST 0 ( str1 )					      								    								  
64 LOAD_FAST 6 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 LOAD_GLOBAL 3 ( ord )				      								    								  
72 LOAD_CONST 3 ( 'a' )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 DUP_TOP_TWO						      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 4 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 ROT_THREE						      								    								  
88 STORE_SUBSCR						      								    								  
90 JUMP_ABSOLUTE 54					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
9 >> 94 SETUP_LOOP 48 ( to 144 )			      								    								  
96 LOAD_GLOBAL 2 ( range )				      								    								  
98 LOAD_FAST 3 ( n )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 GET_ITER						      								    								  
>> 104 FOR_ITER 36 ( to 142 )				      								    								  
106 STORE_FAST 6 ( i )					      								    								  
							      								    								  
10 108 LOAD_FAST 5 ( count2 )				      								    								  
110 LOAD_GLOBAL 3 ( ord )				      								    								  
112 LOAD_FAST 1 ( str2 )				      								    								  
114 LOAD_FAST 6 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 LOAD_GLOBAL 3 ( ord )				      								    								  
122 LOAD_CONST 3 ( 'a' )				      								    								  
124 CALL_FUNCTION 1					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 DUP_TOP_TWO						      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 4 ( 1 )					      								    								  
134 INPLACE_ADD						      								    								  
136 ROT_THREE						      								    								  
138 STORE_SUBSCR					      								    								  
140 JUMP_ABSOLUTE 104					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
11 >> 144 LOAD_CONST 2 ( 0 )				      								    								  
146 STORE_FAST 7 ( count )				      								    								  
							      								    								  
12 148 SETUP_LOOP 56 ( to 206 )				      								    								  
150 LOAD_GLOBAL 2 ( range )				      								    								  
152 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
154 CALL_FUNCTION 1					      								    								  
156 GET_ITER						      								    								  
>> 158 FOR_ITER 44 ( to 204 )				      								    								  
160 STORE_FAST 6 ( i )					      								    								  
							      								    								  
13 162 LOAD_FAST 4 ( count1 )				      								    								  
164 LOAD_FAST 6 ( i )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 LOAD_FAST 5 ( count2 )				      								    								  
170 LOAD_FAST 6 ( i )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 COMPARE_OP 4 ( > )					      								    								  
176 POP_JUMP_IF_FALSE 158				      								    								  
							      								    								  
14 178 LOAD_FAST 7 ( count )				      								    								  
180 LOAD_GLOBAL 4 ( abs )				      								    								  
182 LOAD_FAST 4 ( count1 )				      								    								  
184 LOAD_FAST 6 ( i )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_FAST 5 ( count2 )				      								    								  
190 LOAD_FAST 6 ( i )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 BINARY_SUBTRACT					      								    								  
196 CALL_FUNCTION 1					      								    								  
198 BINARY_ADD						      								    								  
200 STORE_FAST 7 ( count )				      								    								  
202 JUMP_ABSOLUTE 158					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
15 >> 206 LOAD_FAST 7 ( count )				      								    								  
208 LOAD_FAST 2 ( k )					      								    								  
210 COMPARE_OP 1 ( <= )					      								    								  
212 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> HWAY_BILLBOARD_PROBLEM				      <unk> HWAY_BILLBOARD_PROBLEM				    <unk> HWAY_BILLBOARD_PROBLEM				  <unk> HWAY_BILLBOARD_PROBLEM
--							      --							    --								  --
Disassembly of <code object maxRevenue at 0x7fbac0e89d20, fil def maxRevenue ( m , x , revenue , n , t ) :		    def maxRevenue ( m , x = 2 , rev= True , n = 1 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxRev = [ 0 ] * ( m + 1 )				    	maxRev = [ 0 ] * m + 1					  
2 BUILD_LIST 1						      	  nxtbb = 0 ;						    	nxtbb = 0						  
4 LOAD_FAST 0 ( m )					      	  for i in range ( 1 , m + 1 ) :			    	for i in range ( 1 , m + 1 ) :				  
6 LOAD_CONST 2 ( 1 )					      	      if ( nxtbb < n ) :				    	    if nxtbb < n :					  
8 BINARY_ADD						      		  if ( x [ nxtbb ] != i ) :			    		if x [ nxtbb ] != i :				  
10 BINARY_MULTIPLY					      		      maxRev [ i ] = maxRev [ i - 1 ]		    		    maxRev [ i ] = maxRev [ i - 1 ]		  
12 STORE_FAST 5 ( maxRev )				      		  else :					    		else :						  
							      		      if ( i <= t ) :				    		    if i <= t :					  
3 14 LOAD_CONST 1 ( 0 )					      			  maxRev [ i ] = max ( maxRev [ i - 1 ] , r 			maxRev [ i ] = max ( maxRev [ i - 1 ] , r 
16 STORE_FAST 6 ( nxtbb )				      		      else :					    		    else :					  
							      			  maxRev [ i ] = max ( maxRev [ i - t - 1 ] 			maxRev [ i ] = max ( maxRev [ i - t - 1 ] 
4 18 SETUP_LOOP 164 ( to 184 )				      		      nxtbb += 1				    		    nxtbb [ i - 1 ] += maxRev [ i - 1 ]		  
20 LOAD_GLOBAL 0 ( range )				      	      else :						    	return nxtbb [ i - 1 ]					  
22 LOAD_CONST 2 ( 1 )					      		  maxRev [ i ] = maxRev [ i - 1 ]		    								  
24 LOAD_FAST 0 ( m )					      	  return maxRev [ m ]					    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 146 ( to 182 )				      								    								  
36 STORE_FAST 7 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 6 ( nxtbb )				      								    								  
40 LOAD_FAST 3 ( n )					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
6 46 LOAD_FAST 1 ( x )					      								    								  
48 LOAD_FAST 6 ( nxtbb )				      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 7 ( i )					      								    								  
54 COMPARE_OP 3 ( != )					      								    								  
56 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
7 58 LOAD_FAST 5 ( maxRev )				      								    								  
60 LOAD_FAST 7 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 5 ( maxRev )				      								    								  
70 LOAD_FAST 7 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 180					      								    								  
							      								    								  
9 >> 76 LOAD_FAST 7 ( i )				      								    								  
78 LOAD_FAST 4 ( t )					      								    								  
80 COMPARE_OP 1 ( <= )					      								    								  
82 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 84 LOAD_GLOBAL 1 ( max )				      								    								  
86 LOAD_FAST 5 ( maxRev )				      								    								  
88 LOAD_FAST 7 ( i )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 2 ( revenue )				      								    								  
98 LOAD_FAST 6 ( nxtbb )				      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 LOAD_FAST 5 ( maxRev )				      								    								  
106 LOAD_FAST 7 ( i )					      								    								  
108 STORE_SUBSCR					      								    								  
110 JUMP_FORWARD 42 ( to 154 )				      								    								  
							      								    								  
12 >> 112 LOAD_GLOBAL 1 ( max )				      								    								  
114 LOAD_FAST 5 ( maxRev )				      								    								  
116 LOAD_FAST 7 ( i )					      								    								  
118 LOAD_FAST 4 ( t )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_SUBTRACT					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 2 ( revenue )				      								    								  
130 LOAD_FAST 6 ( nxtbb )				      								    								  
132 BINARY_SUBSCR					      								    								  
134 BINARY_ADD						      								    								  
136 LOAD_FAST 5 ( maxRev )				      								    								  
138 LOAD_FAST 7 ( i )					      								    								  
140 LOAD_CONST 2 ( 1 )					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 BINARY_SUBSCR					      								    								  
146 CALL_FUNCTION 2					      								    								  
148 LOAD_FAST 5 ( maxRev )				      								    								  
150 LOAD_FAST 7 ( i )					      								    								  
152 STORE_SUBSCR					      								    								  
							      								    								  
13 >> 154 LOAD_FAST 6 ( nxtbb )				      								    								  
156 LOAD_CONST 2 ( 1 )					      								    								  
158 INPLACE_ADD						      								    								  
160 STORE_FAST 6 ( nxtbb )				      								    								  
162 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
15 >> 164 LOAD_FAST 5 ( maxRev )			      								    								  
166 LOAD_FAST 7 ( i )					      								    								  
168 LOAD_CONST 2 ( 1 )					      								    								  
170 BINARY_SUBTRACT					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_FAST 5 ( maxRev )				      								    								  
176 LOAD_FAST 7 ( i )					      								    								  
178 STORE_SUBSCR					      								    								  
>> 180 JUMP_ABSOLUTE 34					      								    								  
>> 182 POP_BLOCK					      								    								  
							      								    								  
16 >> 184 LOAD_FAST 5 ( maxRev )			      								    								  
186 LOAD_FAST 0 ( m )					      								    								  
188 BINARY_SUBSCR					      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK	      CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK		    CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK		  CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK
--							      --							    --								  --
Disassembly of <code object checkSorted at 0x7fbac0e89d20, fi def checkSorted ( n , q ) :				    def checkSorted ( cls , q ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  st = [ ]						    	st = [ ]						  
2 STORE_FAST 2 ( st )					      	  expected = 1						    	expected = 1						  
							      	  fnt = None						    	fnt = None						  
3 4 LOAD_CONST 1 ( 1 )					      	  while ( not q.empty ( ) ) :				    	while not q.empty ( ) :					  
6 STORE_FAST 3 ( expected )				      	      fnt = q.queue [ 0 ]				    	    fnt = q.queue [ 0 ]					  
							      	      q.get ( )						    	    q.get ( )						  
4 8 LOAD_CONST 0 ( None )				      	      if ( fnt == expected ) :				    	    if fnt == expected :				  
10 STORE_FAST 4 ( fnt )					      		  expected += 1					    		expected += 1					  
							      	      else :						    	    elif len ( st ) == 0 :				  
5 12 SETUP_LOOP 156 ( to 170 )				      		  if ( len ( st ) == 0 ) :			    		st.append ( fnt )				  
>> 14 LOAD_FAST 1 ( q )					      		      st.append ( fnt )				    	    elif len ( st ) != 0 and st [ - 1 ] < fnt :		  
16 LOAD_METHOD 0 ( empty )				      		  elif ( len ( st ) != 0 and st [ - 1 ] < fnt ) :   		return False					  
18 CALL_METHOD 0					      		      return False				    	    st.append ( fnt )					  
20 POP_JUMP_IF_TRUE 168					      		  else :					    	while len ( st ) != 0 and st [ - 1 ] == expected :	  
							      		      st.append ( fnt )				    	    st.pop ( )						  
6 22 LOAD_FAST 1 ( q )					      	      while ( len ( st ) != 0 and st [ - 1 ] == expected )  	    expected += 1					  
24 LOAD_ATTR 1 ( queue )				      		  st.pop ( )					    if expected - 1 :						  
26 LOAD_CONST 2 ( 0 )					      		  expected += 1					    	if len ( st ) == 0 and st [ - 1 ] == expected :		  
28 BINARY_SUBSCR					      	  if ( expected - 1 == n and len ( st ) == 0 ) :	    	    return False					  
30 STORE_FAST 4 ( fnt )					      	      return True					    return True							  
							      	  return False						    								  
7 32 LOAD_FAST 1 ( q )					      								    								  
34 LOAD_METHOD 2 ( get )				      								    								  
36 CALL_METHOD 0					      								    								  
38 POP_TOP						      								    								  
							      								    								  
8 40 LOAD_FAST 4 ( fnt )				      								    								  
42 LOAD_FAST 3 ( expected )				      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
9 48 LOAD_FAST 3 ( expected )				      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 3 ( expected )				      								    								  
56 JUMP_FORWARD 62 ( to 120 )				      								    								  
							      								    								  
11 >> 58 LOAD_GLOBAL 3 ( len )				      								    								  
60 LOAD_FAST 2 ( st )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_CONST 2 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
12 70 LOAD_FAST 2 ( st )				      								    								  
72 LOAD_METHOD 4 ( append )				      								    								  
74 LOAD_FAST 4 ( fnt )					      								    								  
76 CALL_METHOD 1					      								    								  
78 POP_TOP						      								    								  
80 JUMP_FORWARD 38 ( to 120 )				      								    								  
							      								    								  
13 >> 82 LOAD_GLOBAL 3 ( len )				      								    								  
84 LOAD_FAST 2 ( st )					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 LOAD_CONST 2 ( 0 )					      								    								  
90 COMPARE_OP 3 ( != )					      								    								  
92 POP_JUMP_IF_FALSE 110				      								    								  
94 LOAD_FAST 2 ( st )					      								    								  
96 LOAD_CONST 3 ( - 1 )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 4 ( fnt )					      								    								  
102 COMPARE_OP 0 ( < )					      								    								  
104 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
14 106 LOAD_CONST 4 ( False )				      								    								  
108 RETURN_VALUE					      								    								  
							      								    								  
16 >> 110 LOAD_FAST 2 ( st )				      								    								  
112 LOAD_METHOD 4 ( append )				      								    								  
114 LOAD_FAST 4 ( fnt )					      								    								  
116 CALL_METHOD 1					      								    								  
118 POP_TOP						      								    								  
							      								    								  
17 >> 120 SETUP_LOOP 44 ( to 166 )			      								    								  
>> 122 LOAD_GLOBAL 3 ( len )				      								    								  
124 LOAD_FAST 2 ( st )					      								    								  
126 CALL_FUNCTION 1					      								    								  
128 LOAD_CONST 2 ( 0 )					      								    								  
130 COMPARE_OP 3 ( != )					      								    								  
132 POP_JUMP_IF_FALSE 164				      								    								  
134 LOAD_FAST 2 ( st )					      								    								  
136 LOAD_CONST 3 ( - 1 )				      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 3 ( expected )				      								    								  
142 COMPARE_OP 2 ( == )					      								    								  
144 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
18 146 LOAD_FAST 2 ( st )				      								    								  
148 LOAD_METHOD 5 ( pop )				      								    								  
150 CALL_METHOD 0					      								    								  
152 POP_TOP						      								    								  
							      								    								  
19 154 LOAD_FAST 3 ( expected )				      								    								  
156 LOAD_CONST 1 ( 1 )					      								    								  
158 INPLACE_ADD						      								    								  
160 STORE_FAST 3 ( expected )				      								    								  
162 JUMP_ABSOLUTE 122					      								    								  
>> 164 POP_BLOCK					      								    								  
>> 166 JUMP_ABSOLUTE 14					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
20 >> 170 LOAD_FAST 3 ( expected )			      								    								  
172 LOAD_CONST 1 ( 1 )					      								    								  
174 BINARY_SUBTRACT					      								    								  
176 LOAD_FAST 0 ( n )					      								    								  
178 COMPARE_OP 2 ( == )					      								    								  
180 POP_JUMP_IF_FALSE 198				      								    								  
182 LOAD_GLOBAL 3 ( len )				      								    								  
184 LOAD_FAST 2 ( st )					      								    								  
186 CALL_FUNCTION 1					      								    								  
188 LOAD_CONST 2 ( 0 )					      								    								  
190 COMPARE_OP 2 ( == )					      								    								  
192 POP_JUMP_IF_FALSE 198				      								    								  
							      								    								  
21 194 LOAD_CONST 5 ( True )				      								    								  
196 RETURN_VALUE					      								    								  
							      								    								  
22 >> 198 LOAD_CONST 4 ( False )			      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS	      CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS	    CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS		  CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8d540, file "<d def check ( s ) :						    def check ( s ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  if ( len ( s ) >= 10 ) :				    	if len ( s ) >= 10 :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( s )					      	      return True					    	    return True						  _sa.test/CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINC
4 CALL_FUNCTION 1					      	  for i in range ( 1 , len ( s ) ) :			    	for i in range ( 1 , len ( s ) ) :			  T_STRINGS.py", line 46     return False     ^ Synt
6 LOAD_CONST 1 ( 10 )					      	      for j in range ( i + 1 , len ( s ) ) :		    	    for j in range ( i + 1 , len ( s ) ) :		  axError: 'return' outside function
8 COMPARE_OP 5 ( >= )					      		  for k in range ( j + 1 , len ( s ) ) :	    		for k in range ( j + 1 , len ( s ) ) :		  
10 POP_JUMP_IF_FALSE 16					      		      s1 = s [ 0 : i ]				    		    s1 = s [ 0 : i ]				  
							      		      s2 = s [ i : j - i ]			    		    s3 = s [ i : j - i ]			  
3 12 LOAD_CONST 2 ( True )				      		      s3 = s [ j : k - j ]			    		    s4 = s [ k : k - j ]			  
14 RETURN_VALUE						      		      s4 = s [ k : len ( s ) - k ]		    		    s4 = s [ k : len ( s ) - k ]		  
							      		      if ( s1 != s2 and s1 != s3 and s1 != s4 and s 		    s4 = s [ k : len ( s1 ) - 1 ]		  
4 >> 16 SETUP_LOOP 194 ( to 212 )			      			  return True				    		    if s1 != s2 and s1 != s3 :			  
18 LOAD_GLOBAL 1 ( range )				      	  return False						    			if s1 != s3 :				  
20 LOAD_CONST 3 ( 1 )					      								    			    s4 = True				  
22 LOAD_GLOBAL 0 ( len )				      								    return False						  
24 LOAD_FAST 0 ( s )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 176 ( to 210 )				      								    								  
34 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 36 SETUP_LOOP 170 ( to 208 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 LOAD_CONST 3 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_GLOBAL 0 ( len )				      								    								  
48 LOAD_FAST 0 ( s )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 148 ( to 206 )				      								    								  
58 STORE_FAST 2 ( j )					      								    								  
							      								    								  
6 60 SETUP_LOOP 142 ( to 204 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 2 ( j )					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_GLOBAL 0 ( len )				      								    								  
72 LOAD_FAST 0 ( s )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 CALL_FUNCTION 2					      								    								  
78 GET_ITER						      								    								  
>> 80 FOR_ITER 120 ( to 202 )				      								    								  
82 STORE_FAST 3 ( k )					      								    								  
							      								    								  
7 84 LOAD_FAST 0 ( s )					      								    								  
86 LOAD_CONST 4 ( 0 )					      								    								  
88 LOAD_FAST 1 ( i )					      								    								  
90 BUILD_SLICE 2					      								    								  
92 BINARY_SUBSCR					      								    								  
94 STORE_FAST 4 ( s1 )					      								    								  
							      								    								  
8 96 LOAD_FAST 0 ( s )					      								    								  
98 LOAD_FAST 1 ( i )					      								    								  
100 LOAD_FAST 2 ( j )					      								    								  
102 LOAD_FAST 1 ( i )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BUILD_SLICE 2					      								    								  
108 BINARY_SUBSCR					      								    								  
110 STORE_FAST 5 ( s2 )					      								    								  
							      								    								  
9 112 LOAD_FAST 0 ( s )					      								    								  
114 LOAD_FAST 2 ( j )					      								    								  
116 LOAD_FAST 3 ( k )					      								    								  
118 LOAD_FAST 2 ( j )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BUILD_SLICE 2					      								    								  
124 BINARY_SUBSCR					      								    								  
126 STORE_FAST 6 ( s3 )					      								    								  
							      								    								  
10 128 LOAD_FAST 0 ( s )				      								    								  
130 LOAD_FAST 3 ( k )					      								    								  
132 LOAD_GLOBAL 0 ( len )				      								    								  
134 LOAD_FAST 0 ( s )					      								    								  
136 CALL_FUNCTION 1					      								    								  
138 LOAD_FAST 3 ( k )					      								    								  
140 BINARY_SUBTRACT					      								    								  
142 BUILD_SLICE 2					      								    								  
144 BINARY_SUBSCR					      								    								  
146 STORE_FAST 7 ( s4 )					      								    								  
							      								    								  
11 148 LOAD_FAST 4 ( s1 )				      								    								  
150 LOAD_FAST 5 ( s2 )					      								    								  
152 COMPARE_OP 3 ( != )					      								    								  
154 POP_JUMP_IF_FALSE 80				      								    								  
156 LOAD_FAST 4 ( s1 )					      								    								  
158 LOAD_FAST 6 ( s3 )					      								    								  
160 COMPARE_OP 3 ( != )					      								    								  
162 POP_JUMP_IF_FALSE 80				      								    								  
164 LOAD_FAST 4 ( s1 )					      								    								  
166 LOAD_FAST 7 ( s4 )					      								    								  
168 COMPARE_OP 3 ( != )					      								    								  
170 POP_JUMP_IF_FALSE 80				      								    								  
172 LOAD_FAST 5 ( s2 )					      								    								  
174 LOAD_FAST 6 ( s3 )					      								    								  
176 COMPARE_OP 3 ( != )					      								    								  
178 POP_JUMP_IF_FALSE 80				      								    								  
180 LOAD_FAST 5 ( s2 )					      								    								  
182 LOAD_FAST 7 ( s4 )					      								    								  
184 COMPARE_OP 3 ( != )					      								    								  
186 POP_JUMP_IF_FALSE 80				      								    								  
188 LOAD_FAST 6 ( s3 )					      								    								  
190 LOAD_FAST 7 ( s4 )					      								    								  
192 COMPARE_OP 3 ( != )					      								    								  
194 POP_JUMP_IF_FALSE 80				      								    								  
							      								    								  
12 196 LOAD_CONST 2 ( True )				      								    								  
198 RETURN_VALUE					      								    								  
200 JUMP_ABSOLUTE 80					      								    								  
>> 202 POP_BLOCK					      								    								  
>> 204 JUMP_ABSOLUTE 56					      								    								  
>> 206 POP_BLOCK					      								    								  
>> 208 JUMP_ABSOLUTE 32					      								    								  
>> 210 POP_BLOCK					      								    								  
							      								    								  
13 >> 212 LOAD_CONST 5 ( False )			      								    								  
214 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
Disassembly of <code object firstFit at 0x7fbac0e8de40, file  def firstFit ( blockSize , m , processSize , n ) :	    def firstFit ( blockSize , m , processSize , n = 5 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  allocation = [ - 1 ] * n				    	allocation = [ - 1 ] * n				  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_FAST 3 ( n )					      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
6 BINARY_MULTIPLY					      		  if blockSize [ j ] >= processSize [ i ] :	    		if blockSize [ j ] >= processSize [ i ] :	  
8 STORE_FAST 4 ( allocation )				      		      allocation [ i ] = j			    		    allocation [ i ] = j			  
							      		      blockSize [ j ] -= processSize [ i ]	    		    blockSize [ j ] -= processSize [ i ]	  
3 10 SETUP_LOOP 80 ( to 92 )				      		      break					    		    break					  
12 LOAD_GLOBAL 0 ( range )				      	  print ( " Process No.Process Size	 Block no." )	    	print ( " Process No.Process Size	Block no." )	  
14 LOAD_FAST 3 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
16 CALL_FUNCTION 1					      	      print ( " " , i + 1 , "	      " , processSize [ i ] 	    print ( " " , i + 1 , "	    " , processSize [ i ] 
18 GET_ITER						      	      if allocation [ i ] != - 1 :			    	    if allocation [ i ] != - 1 : print ( location )	  
>> 20 FOR_ITER 68 ( to 90 )				      		  print ( allocation [ i ] + 1 )		    	    print ( "Not Allocated ation" )			  
22 STORE_FAST 5 ( i )					      	      else :						    								  
							      		  print ( "Not Allocated" )			    								  
4 24 SETUP_LOOP 62 ( to 88 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 1 ( m )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 50 ( to 86 )				      								    								  
36 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( blockSize )				      								    								  
40 LOAD_FAST 6 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( processSize )				      								    								  
46 LOAD_FAST 5 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 5 ( >= )					      								    								  
52 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 54 LOAD_FAST 6 ( j )					      								    								  
56 LOAD_FAST 4 ( allocation )				      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
							      								    								  
7 62 LOAD_FAST 0 ( blockSize )				      								    								  
64 LOAD_FAST 6 ( j )					      								    								  
66 DUP_TOP_TWO						      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 2 ( processSize )				      								    								  
72 LOAD_FAST 5 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 INPLACE_SUBTRACT					      								    								  
78 ROT_THREE						      								    								  
80 STORE_SUBSCR						      								    								  
							      								    								  
8 82 BREAK_LOOP						      								    								  
84 JUMP_ABSOLUTE 34					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 20					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
9 >> 92 LOAD_GLOBAL 1 ( print )				      								    								  
94 LOAD_CONST 2 ( ' Process No.Process Size	 Block no.' ) 								    								  
96 CALL_FUNCTION 1					      								    								  
98 POP_TOP						      								    								  
							      								    								  
10 100 SETUP_LOOP 82 ( to 184 )				      								    								  
102 LOAD_GLOBAL 0 ( range )				      								    								  
104 LOAD_FAST 3 ( n )					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 70 ( to 182 )				      								    								  
112 STORE_FAST 5 ( i )					      								    								  
							      								    								  
11 114 LOAD_GLOBAL 1 ( print )				      								    								  
116 LOAD_CONST 3 ( ' ' )				      								    								  
118 LOAD_FAST 5 ( i )					      								    								  
120 LOAD_CONST 4 ( 1 )					      								    								  
122 BINARY_ADD						      								    								  
124 LOAD_CONST 5 ( '	     ' )			      								    								  
126 LOAD_FAST 2 ( processSize )				      								    								  
128 LOAD_FAST 5 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 5 ( '	     ' )			      								    								  
134 LOAD_CONST 3 ( ' ' )				      								    								  
136 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
138 CALL_FUNCTION_KW 6					      								    								  
140 POP_TOP						      								    								  
							      								    								  
12 142 LOAD_FAST 4 ( allocation )			      								    								  
144 LOAD_FAST 5 ( i )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_CONST 1 ( - 1 )				      								    								  
150 COMPARE_OP 3 ( != )					      								    								  
152 POP_JUMP_IF_FALSE 172				      								    								  
							      								    								  
13 154 LOAD_GLOBAL 1 ( print )				      								    								  
156 LOAD_FAST 4 ( allocation )				      								    								  
158 LOAD_FAST 5 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_CONST 4 ( 1 )					      								    								  
164 BINARY_ADD						      								    								  
166 CALL_FUNCTION 1					      								    								  
168 POP_TOP						      								    								  
170 JUMP_ABSOLUTE 110					      								    								  
							      								    								  
15 >> 172 LOAD_GLOBAL 1 ( print )			      								    								  
174 LOAD_CONST 7 ( 'Not Allocated' )			      								    								  
176 CALL_FUNCTION 1					      								    								  
178 POP_TOP						      								    								  
180 JUMP_ABSOLUTE 110					      								    								  
>> 182 POP_BLOCK					      								    								  
>> 184 LOAD_CONST 0 ( None )				      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP_1	      FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP_1		    FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP_1		  FIND_THE_POINT_WHERE_MAXIMUM_INTERVALS_OVERLAP_1
--							      --							    --								  --
Disassembly of <code object maxOverlap at 0x7fbac0e8de40, fil def maxOverlap ( start , end ) :				    def maxOverlap ( start , end ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( start )					    	n = len ( start )					  
2 LOAD_FAST 0 ( start )					      	  maxa = max ( start )					    	maxa = max ( start )					  
4 CALL_FUNCTION 1					      	  maxb = max ( end )					    	maxb = max ( end )					  
6 STORE_FAST 2 ( n )					      	  maxc = max ( maxa , maxb )				    	maxc = max ( maxa , maxb )				  
							      	  x = ( maxc + 2 ) * [ 0 ]				    	x = maxc + 2 * [ 0 ]					  
3 8 LOAD_GLOBAL 1 ( max )				      	  cur = 0 ; idx = 0					    	cur = 0							  
10 LOAD_FAST 0 ( start )				      	  for i in range ( 0 , n ) :				    	idx = 0							  
12 CALL_FUNCTION 1					      	      x [ start [ i ] ] += 1				    	for i in range ( 0 , n ) :				  
14 STORE_FAST 3 ( maxa )				      	      x [ end [ i ] + 1 ] -= 1				    	    x [ start [ i ] ] += 1				  
							      	  maxy = - 1						    	    x [ end [ i ] + 1 ] -= 1				  
4 16 LOAD_GLOBAL 1 ( max )				      	  for i in range ( 0 , maxc + 1 ) :			    	maxy = - 1						  
18 LOAD_FAST 1 ( end )					      	      cur += x [ i ]					    	for i in range ( 0 , maxc + 1 ) :			  
20 CALL_FUNCTION 1					      	      if maxy < cur :					    	    cur += x [ i ]					  
22 STORE_FAST 4 ( maxb )				      		  maxy = cur					    	    if maxy < cur :					  
							      		  idx = i					    		i = cur						  
5 24 LOAD_GLOBAL 1 ( max )				      	  print ( "Maximum value is: {0:d}".format ( maxy ) , " at  	    print ( "Maximum Maximum is empty: {0}: {1}: {1}: {0} 
26 LOAD_FAST 3 ( maxa )					      								    								  
28 LOAD_FAST 4 ( maxb )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 STORE_FAST 5 ( maxc )				      								    								  
							      								    								  
6 34 LOAD_FAST 5 ( maxc )				      								    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_CONST 2 ( 0 )					      								    								  
42 BUILD_LIST 1						      								    								  
44 BINARY_MULTIPLY					      								    								  
46 STORE_FAST 6 ( x )					      								    								  
							      								    								  
7 48 LOAD_CONST 2 ( 0 )					      								    								  
50 STORE_FAST 7 ( cur )					      								    								  
52 LOAD_CONST 2 ( 0 )					      								    								  
54 STORE_FAST 8 ( idx )					      								    								  
							      								    								  
8 56 SETUP_LOOP 62 ( to 120 )				      								    								  
58 LOAD_GLOBAL 2 ( range )				      								    								  
60 LOAD_CONST 2 ( 0 )					      								    								  
62 LOAD_FAST 2 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 48 ( to 118 )				      								    								  
70 STORE_FAST 9 ( i )					      								    								  
							      								    								  
9 72 LOAD_FAST 6 ( x )					      								    								  
74 LOAD_FAST 0 ( start )				      								    								  
76 LOAD_FAST 9 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 DUP_TOP_TWO						      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 3 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 ROT_THREE						      								    								  
90 STORE_SUBSCR						      								    								  
							      								    								  
10 92 LOAD_FAST 6 ( x )					      								    								  
94 LOAD_FAST 1 ( end )					      								    								  
96 LOAD_FAST 9 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 3 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 DUP_TOP_TWO						      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 3 ( 1 )					      								    								  
110 INPLACE_SUBTRACT					      								    								  
112 ROT_THREE						      								    								  
114 STORE_SUBSCR					      								    								  
116 JUMP_ABSOLUTE 68					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
11 >> 120 LOAD_CONST 4 ( - 1 )				      								    								  
122 STORE_FAST 10 ( maxy )				      								    								  
							      								    								  
12 124 SETUP_LOOP 50 ( to 176 )				      								    								  
126 LOAD_GLOBAL 2 ( range )				      								    								  
128 LOAD_CONST 2 ( 0 )					      								    								  
130 LOAD_FAST 5 ( maxc )				      								    								  
132 LOAD_CONST 3 ( 1 )					      								    								  
134 BINARY_ADD						      								    								  
136 CALL_FUNCTION 2					      								    								  
138 GET_ITER						      								    								  
>> 140 FOR_ITER 32 ( to 174 )				      								    								  
142 STORE_FAST 9 ( i )					      								    								  
							      								    								  
13 144 LOAD_FAST 7 ( cur )				      								    								  
146 LOAD_FAST 6 ( x )					      								    								  
148 LOAD_FAST 9 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 INPLACE_ADD						      								    								  
154 STORE_FAST 7 ( cur )				      								    								  
							      								    								  
14 156 LOAD_FAST 10 ( maxy )				      								    								  
158 LOAD_FAST 7 ( cur )					      								    								  
160 COMPARE_OP 0 ( < )					      								    								  
162 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
15 164 LOAD_FAST 7 ( cur )				      								    								  
166 STORE_FAST 10 ( maxy )				      								    								  
							      								    								  
16 168 LOAD_FAST 9 ( i )				      								    								  
170 STORE_FAST 8 ( idx )				      								    								  
172 JUMP_ABSOLUTE 140					      								    								  
>> 174 POP_BLOCK					      								    								  
							      								    								  
17 >> 176 LOAD_GLOBAL 3 ( print )			      								    								  
178 LOAD_CONST 5 ( 'Maximum value is: {0:d}' )		      								    								  
180 LOAD_METHOD 4 ( format )				      								    								  
182 LOAD_FAST 10 ( maxy )				      								    								  
184 CALL_METHOD 1					      								    								  
186 LOAD_CONST 6 ( ' at position: {0:d}' )		      								    								  
188 LOAD_METHOD 4 ( format )				      								    								  
190 LOAD_FAST 8 ( idx )					      								    								  
192 CALL_METHOD 1					      								    								  
194 CALL_FUNCTION 2					      								    								  
196 POP_TOP						      								    								  
198 LOAD_CONST 0 ( None )				      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
Disassembly of <code object NextFit at 0x7fbac0e8d540, file " def NextFit ( blockSize , m , processSize , n ) :		    def NextFit ( blockSize , m , processSize , processSize ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  allocation = [ - 1 ] * n				    	allocation = [ - 1 ] * n				  
2 BUILD_LIST 1						      	  j = 0							    	j = 0							  
4 LOAD_FAST 3 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 BINARY_MULTIPLY					      	      while j < m :					    	    while j < m :					  
8 STORE_FAST 4 ( allocation )				      		  if blockSize [ j ] >= processSize [ i ] :	    		if blockSize [ j ] >= processSize [ i ] :	  
							      		      allocation [ i ] = j			    		    allocation [ i ] = j			  
3 10 LOAD_CONST 2 ( 0 )					      		      blockSize [ j ] -= processSize [ i ]	    		    blockSize [ j ] -= processSize [ i ]	  
12 STORE_FAST 5 ( j )					      		      break					    		    break					  
							      		  j = ( j + 1 ) % m				    		j = j + 1 % m					  
4 14 SETUP_LOOP 88 ( to 104 )				      	  print ( "Process No.Process Size Block no." )		    	print ( "Process No.Process Size Block no." )		  
16 LOAD_GLOBAL 0 ( range )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
18 LOAD_FAST 3 ( n )					      	      print ( i + 1 , "		" , processSize [ i ] , end 	    print ( i + 1 , "		      " , processSize [ i 
20 CALL_FUNCTION 1					      	      if allocation [ i ] != - 1 :			    	    if allocation [ i ] != - 1 : print ( location )	  
22 GET_ITER						      		  print ( allocation [ i ] + 1 )		    	    print ( "Not Allocated ation of " + location )	  
>> 24 FOR_ITER 76 ( to 102 )				      	      else :						    								  
26 STORE_FAST 6 ( i )					      		  print ( "Not Allocated" )			    								  
							      								    								  
5 28 SETUP_LOOP 70 ( to 100 )				      								    								  
>> 30 LOAD_FAST 5 ( j )					      								    								  
32 LOAD_FAST 1 ( m )					      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( blockSize )				      								    								  
40 LOAD_FAST 5 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( processSize )				      								    								  
46 LOAD_FAST 6 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 5 ( >= )					      								    								  
52 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
7 54 LOAD_FAST 5 ( j )					      								    								  
56 LOAD_FAST 4 ( allocation )				      								    								  
58 LOAD_FAST 6 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
							      								    								  
8 62 LOAD_FAST 0 ( blockSize )				      								    								  
64 LOAD_FAST 5 ( j )					      								    								  
66 DUP_TOP_TWO						      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 2 ( processSize )				      								    								  
72 LOAD_FAST 6 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 INPLACE_SUBTRACT					      								    								  
78 ROT_THREE						      								    								  
80 STORE_SUBSCR						      								    								  
							      								    								  
9 82 BREAK_LOOP						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 5 ( j )				      								    								  
86 LOAD_CONST 3 ( 1 )					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 1 ( m )					      								    								  
92 BINARY_MODULO					      								    								  
94 STORE_FAST 5 ( j )					      								    								  
96 JUMP_ABSOLUTE 30					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 24					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
11 >> 104 LOAD_GLOBAL 1 ( print )			      								    								  
106 LOAD_CONST 4 ( 'Process No.Process Size Block no.' )      								    								  
108 CALL_FUNCTION 1					      								    								  
110 POP_TOP						      								    								  
							      								    								  
12 112 SETUP_LOOP 78 ( to 192 )				      								    								  
114 LOAD_GLOBAL 0 ( range )				      								    								  
116 LOAD_FAST 3 ( n )					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 GET_ITER						      								    								  
>> 122 FOR_ITER 66 ( to 190 )				      								    								  
124 STORE_FAST 6 ( i )					      								    								  
							      								    								  
13 126 LOAD_GLOBAL 1 ( print )				      								    								  
128 LOAD_FAST 6 ( i )					      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 LOAD_CONST 5 ( '	     ' )			      								    								  
136 LOAD_FAST 2 ( processSize )				      								    								  
138 LOAD_FAST 6 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_CONST 6 ( '	 ' )				      								    								  
144 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
146 CALL_FUNCTION_KW 4					      								    								  
148 POP_TOP						      								    								  
							      								    								  
14 150 LOAD_FAST 4 ( allocation )			      								    								  
152 LOAD_FAST 6 ( i )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_CONST 1 ( - 1 )				      								    								  
158 COMPARE_OP 3 ( != )					      								    								  
160 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
15 162 LOAD_GLOBAL 1 ( print )				      								    								  
164 LOAD_FAST 4 ( allocation )				      								    								  
166 LOAD_FAST 6 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_CONST 3 ( 1 )					      								    								  
172 BINARY_ADD						      								    								  
174 CALL_FUNCTION 1					      								    								  
176 POP_TOP						      								    								  
178 JUMP_ABSOLUTE 122					      								    								  
							      								    								  
17 >> 180 LOAD_GLOBAL 1 ( print )			      								    								  
182 LOAD_CONST 8 ( 'Not Allocated' )			      								    								  
184 CALL_FUNCTION 1					      								    								  
186 POP_TOP						      								    								  
188 JUMP_ABSOLUTE 122					      								    								  
>> 190 POP_BLOCK					      								    								  
>> 192 LOAD_CONST 0 ( None )				      								    								  
194 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_COMMON_ELEMENT_ROWS_ROW_WISE_SORTED_MATRIX		      FIND_COMMON_ELEMENT_ROWS_ROW_WISE_SORTED_MATRIX		    FIND_COMMON_ELEMENT_ROWS_ROW_WISE_SORTED_MATRIX		  FIND_COMMON_ELEMENT_ROWS_ROW_WISE_SORTED_MATRIX
--							      --							    --								  --
Disassembly of <code object findCommon at 0x7fbac0e8d540, fil def findCommon ( mat ) :					    def findCommon ( mat ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( N )					      	  column = [ N - 1 ] * M				    	column = [ N - 1 ] * M					  
2 LOAD_CONST 1 ( 1 )					      	  min_row = 0						    	min_row = 0						  
4 BINARY_SUBTRACT					      	  while ( column [ min_row ] >= 0 ) :			    	while column [ min_row ] >= 0 :				  
6 BUILD_LIST 1						      	      for i in range ( M ) :				    	    for i in range ( M ) :				  
8 LOAD_GLOBAL 1 ( M )					      		  if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] 		if mat [ i ] [ column [ i ] ] < mat [ min_row ] [ 
10 BINARY_MULTIPLY					      		      min_row = i				    		    min_row = i					  
12 STORE_FAST 1 ( column )				      	      eq_count = 0					    	    eq_count = 0					  
							      	      for i in range ( M ) :				    	    for i in range ( M ) :				  
3 14 LOAD_CONST 2 ( 0 )					      		  if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] 		if mat [ i ] [ column [ i ] ] > mat [ min_row ] [ 
16 STORE_FAST 2 ( min_row )				      		      if ( column [ i ] == 0 ) :		    		    if column [ i ] == 0 :			  
							      			  return - 1				    			return - 1				  
4 18 SETUP_LOOP 190 ( to 210 )				      		      column [ i ] -= 1				    		eq_count += 1					  
>> 20 LOAD_FAST 1 ( column )				      		  else :					    	    if eq_count == 0 :					  
22 LOAD_FAST 2 ( min_row )				      		      eq_count += 1				    		return eq_count [ row [ - 1 ] ] [ eq_count ] [ mi 
24 BINARY_SUBSCR					      	      if ( eq_count == M ) :				    	return eq_count						  
26 LOAD_CONST 2 ( 0 )					      		  return mat [ min_row ] [ column [ min_row ] ]	    								  
28 COMPARE_OP 5 ( >= )					      	  return - 1						    								  
30 POP_JUMP_IF_FALSE 208				      								    								  
							      								    								  
5 32 SETUP_LOOP 52 ( to 86 )				      								    								  
34 LOAD_GLOBAL 2 ( range )				      								    								  
36 LOAD_GLOBAL 1 ( M )					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 40 ( to 84 )				      								    								  
44 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 46 LOAD_FAST 0 ( mat )				      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 1 ( column )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( mat )					      								    								  
62 LOAD_FAST 2 ( min_row )				      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( column )				      								    								  
68 LOAD_FAST 2 ( min_row )				      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
7 78 LOAD_FAST 3 ( i )					      								    								  
80 STORE_FAST 2 ( min_row )				      								    								  
82 JUMP_ABSOLUTE 42					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
8 >> 86 LOAD_CONST 2 ( 0 )				      								    								  
88 STORE_FAST 4 ( eq_count )				      								    								  
							      								    								  
9 90 SETUP_LOOP 90 ( to 182 )				      								    								  
92 LOAD_GLOBAL 2 ( range )				      								    								  
94 LOAD_GLOBAL 1 ( M )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 78 ( to 180 )				      								    								  
102 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 104 LOAD_FAST 0 ( mat )				      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 1 ( column )				      								    								  
112 LOAD_FAST 3 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_FAST 0 ( mat )					      								    								  
120 LOAD_FAST 2 ( min_row )				      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 1 ( column )				      								    								  
126 LOAD_FAST 2 ( min_row )				      								    								  
128 BINARY_SUBSCR					      								    								  
130 BINARY_SUBSCR					      								    								  
132 COMPARE_OP 4 ( > )					      								    								  
134 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
11 136 LOAD_FAST 1 ( column )				      								    								  
138 LOAD_FAST 3 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_CONST 2 ( 0 )					      								    								  
144 COMPARE_OP 2 ( == )					      								    								  
146 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
12 148 LOAD_CONST 3 ( - 1 )				      								    								  
150 RETURN_VALUE					      								    								  
							      								    								  
13 >> 152 LOAD_FAST 1 ( column )			      								    								  
154 LOAD_FAST 3 ( i )					      								    								  
156 DUP_TOP_TWO						      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_CONST 1 ( 1 )					      								    								  
162 INPLACE_SUBTRACT					      								    								  
164 ROT_THREE						      								    								  
166 STORE_SUBSCR					      								    								  
168 JUMP_ABSOLUTE 100					      								    								  
							      								    								  
15 >> 170 LOAD_FAST 4 ( eq_count )			      								    								  
172 LOAD_CONST 1 ( 1 )					      								    								  
174 INPLACE_ADD						      								    								  
176 STORE_FAST 4 ( eq_count )				      								    								  
178 JUMP_ABSOLUTE 100					      								    								  
>> 180 POP_BLOCK					      								    								  
							      								    								  
16 >> 182 LOAD_FAST 4 ( eq_count )			      								    								  
184 LOAD_GLOBAL 1 ( M )					      								    								  
186 COMPARE_OP 2 ( == )					      								    								  
188 POP_JUMP_IF_FALSE 20				      								    								  
							      								    								  
17 190 LOAD_FAST 0 ( mat )				      								    								  
192 LOAD_FAST 2 ( min_row )				      								    								  
194 BINARY_SUBSCR					      								    								  
196 LOAD_FAST 1 ( column )				      								    								  
198 LOAD_FAST 2 ( min_row )				      								    								  
200 BINARY_SUBSCR					      								    								  
202 BINARY_SUBSCR					      								    								  
204 RETURN_VALUE					      								    								  
206 JUMP_ABSOLUTE 20					      								    								  
>> 208 POP_BLOCK					      								    								  
							      								    								  
18 >> 210 LOAD_CONST 3 ( - 1 )				      								    								  
212 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU
--							      --							    --								  --
Disassembly of <code object arrangeString at 0x7fbac0e8de40,  def arrangeString ( string ) :				    def arrangeString ( string ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  char_count = [ 0 ] * MAX_CHAR				    	char_count = [ 0 ] * MAX_CHAR				  
2 BUILD_LIST 1						      	  s = 0							    	s = 0							  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	  for i in range ( len ( string ) ) :			    	for i in range ( len ( string ) ) :			  
6 BINARY_MULTIPLY					      	      if string [ i ] >= "A" and string [ i ] <= "Z" :	    	    if string [ i ] >= 'A' and string [ i ] <= 'Z' :	  
8 STORE_FAST 1 ( char_count )				      		  char_count [ ord ( string [ i ] ) - ord ( "A" ) ] 		char_count [ ord ( string [ i ] ) - ord ( 'A' ) ] 
							      	      else :						    	    else :						  
3 10 LOAD_CONST 1 ( 0 )					      		  s += ord ( string [ i ] ) - ord ( "0" )	    		s += ord ( string [ i ] ) - ord ( '0' )		  
12 STORE_FAST 2 ( s )					      	  res = ""						    	res = ''						  
							      	  for i in range ( MAX_CHAR ) :				    	for i in range ( MAX_CHAR ) :				  
4 14 SETUP_LOOP 102 ( to 118 )				      	      ch = chr ( ord ( "A" ) + i )			    	    ch = chr ( ord ( 'A' ) + i )			  
16 LOAD_GLOBAL 1 ( range )				      	      while char_count [ i ] :				    	    while char_count [ i ] :				  
18 LOAD_GLOBAL 2 ( len )				      		  res += ch					    		res += char_count [ i ]				  
20 LOAD_FAST 0 ( string )				      		  char_count [ i ] -= 1				    	    if s > ' :						  
22 CALL_FUNCTION 1					      	  if s > 0 :						    		res += char_count [ i ]				  
24 CALL_FUNCTION 1					      	      res += str ( s )					    	return res						  
26 GET_ITER						      	  return res						    								  
>> 28 FOR_ITER 86 ( to 116 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( string )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 2 ( 'A' )					      								    								  
40 COMPARE_OP 5 ( >= )					      								    								  
42 POP_JUMP_IF_FALSE 90					      								    								  
44 LOAD_FAST 0 ( string )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 'Z' )					      								    								  
52 COMPARE_OP 1 ( <= )					      								    								  
54 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
6 56 LOAD_FAST 1 ( char_count )				      								    								  
58 LOAD_GLOBAL 3 ( ord )				      								    								  
60 LOAD_FAST 0 ( string )				      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_GLOBAL 3 ( ord )				      								    								  
70 LOAD_CONST 2 ( 'A' )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 DUP_TOP_TWO						      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_CONST 4 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 ROT_THREE						      								    								  
86 STORE_SUBSCR						      								    								  
88 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 90 LOAD_FAST 2 ( s )				      								    								  
92 LOAD_GLOBAL 3 ( ord )				      								    								  
94 LOAD_FAST 0 ( string )				      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 LOAD_GLOBAL 3 ( ord )				      								    								  
104 LOAD_CONST 5 ( '0' )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 2 ( s )					      								    								  
114 JUMP_ABSOLUTE 28					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
9 >> 118 LOAD_CONST 6 ( '' )				      								    								  
120 STORE_FAST 4 ( res )				      								    								  
							      								    								  
10 122 SETUP_LOOP 70 ( to 194 )				      								    								  
124 LOAD_GLOBAL 1 ( range )				      								    								  
126 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
128 CALL_FUNCTION 1					      								    								  
130 GET_ITER						      								    								  
>> 132 FOR_ITER 58 ( to 192 )				      								    								  
134 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 136 LOAD_GLOBAL 4 ( chr )				      								    								  
138 LOAD_GLOBAL 3 ( ord )				      								    								  
140 LOAD_CONST 2 ( 'A' )				      								    								  
142 CALL_FUNCTION 1					      								    								  
144 LOAD_FAST 3 ( i )					      								    								  
146 BINARY_ADD						      								    								  
148 CALL_FUNCTION 1					      								    								  
150 STORE_FAST 5 ( ch )					      								    								  
							      								    								  
12 152 SETUP_LOOP 36 ( to 190 )				      								    								  
>> 154 LOAD_FAST 1 ( char_count )			      								    								  
156 LOAD_FAST 3 ( i )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 POP_JUMP_IF_FALSE 188				      								    								  
							      								    								  
13 162 LOAD_FAST 4 ( res )				      								    								  
164 LOAD_FAST 5 ( ch )					      								    								  
166 INPLACE_ADD						      								    								  
168 STORE_FAST 4 ( res )				      								    								  
							      								    								  
14 170 LOAD_FAST 1 ( char_count )			      								    								  
172 LOAD_FAST 3 ( i )					      								    								  
174 DUP_TOP_TWO						      								    								  
176 BINARY_SUBSCR					      								    								  
178 LOAD_CONST 4 ( 1 )					      								    								  
180 INPLACE_SUBTRACT					      								    								  
182 ROT_THREE						      								    								  
184 STORE_SUBSCR					      								    								  
186 JUMP_ABSOLUTE 154					      								    								  
>> 188 POP_BLOCK					      								    								  
>> 190 JUMP_ABSOLUTE 132				      								    								  
>> 192 POP_BLOCK					      								    								  
							      								    								  
15 >> 194 LOAD_FAST 2 ( s )				      								    								  
196 LOAD_CONST 1 ( 0 )					      								    								  
198 COMPARE_OP 4 ( > )					      								    								  
200 POP_JUMP_IF_FALSE 214				      								    								  
							      								    								  
16 202 LOAD_FAST 4 ( res )				      								    								  
204 LOAD_GLOBAL 5 ( str )				      								    								  
206 LOAD_FAST 2 ( s )					      								    								  
208 CALL_FUNCTION 1					      								    								  
210 INPLACE_ADD						      								    								  
212 STORE_FAST 4 ( res )				      								    								  
							      								    								  
17 >> 214 LOAD_FAST 4 ( res )				      								    								  
216 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH
--							      --							    --								  --
Disassembly of <code object pairsInSortedRotated at 0x7fbac0e def pairsInSortedRotated ( arr , n , x ) :		    def pairsInSortedRotated ( arr , n , x ) :			  timeout : None
2 0 SETUP_LOOP 38 ( to 40 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      if arr [ i ] > arr [ i + 1 ] :			    	    if arr [ i ] > arr [ i + 1 ] :			  
4 LOAD_FAST 1 ( n )					      		  break						    		break						  
6 CALL_FUNCTION 1					      	  l = ( i + 1 ) % n					    	l = ( i + 1 ) % n					  
8 GET_ITER						      	  r = i							    	r = i							  
>> 10 FOR_ITER 26 ( to 38 )				      	  cnt = 0						    	cnt = 0							  
12 STORE_FAST 3 ( i )					      	  while ( l != r ) :					    	while l != r :						  
							      	      if arr [ l ] + arr [ r ] == x :			    	    if arr [ l ] + arr [ r ] == x :			  
3 14 LOAD_FAST 0 ( arr )				      		  cnt += 1					    		cnt += 1					  
16 LOAD_FAST 3 ( i )					      		  if l == ( r - 1 + n ) % n :			    		if l == r - 1 + n % n :				  
18 BINARY_SUBSCR					      		      return cnt				    		    return cnt					  
20 LOAD_FAST 0 ( arr )					      		  l = ( l + 1 ) % n				    		l = l + 1 % n					  
22 LOAD_FAST 3 ( i )					      		  r = ( r - 1 + n ) % n				    		r = ( r - 1 + n ) % n				  
24 LOAD_CONST 1 ( 1 )					      	      elif arr [ l ] + arr [ r ] < x :			    	    elif arr [ l ] + arr [ r ] < x + ( n - 1 ) % n :	  
26 BINARY_ADD						      		  l = ( l + 1 ) % n				    		n = ( l + 1 ) % n				  
28 BINARY_SUBSCR					      	      else :						    	return r						  
30 COMPARE_OP 4 ( > )					      		  r = ( n + r - 1 ) % n				    								  
32 POP_JUMP_IF_FALSE 10					      	  return cnt						    								  
							      								    								  
4 34 BREAK_LOOP						      								    								  
36 JUMP_ABSOLUTE 10					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_FAST 3 ( i )				      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 BINARY_MODULO					      								    								  
50 STORE_FAST 4 ( l )					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( i )					      								    								  
54 STORE_FAST 5 ( r )					      								    								  
							      								    								  
7 56 LOAD_CONST 2 ( 0 )					      								    								  
58 STORE_FAST 6 ( cnt )					      								    								  
							      								    								  
8 60 SETUP_LOOP 144 ( to 206 )				      								    								  
>> 62 LOAD_FAST 4 ( l )					      								    								  
64 LOAD_FAST 5 ( r )					      								    								  
66 COMPARE_OP 3 ( != )					      								    								  
68 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
9 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 4 ( l )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( r )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_FAST 2 ( x )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
10 90 LOAD_FAST 6 ( cnt )				      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 6 ( cnt )					      								    								  
							      								    								  
11 98 LOAD_FAST 4 ( l )					      								    								  
100 LOAD_FAST 5 ( r )					      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 LOAD_FAST 1 ( n )					      								    								  
108 BINARY_ADD						      								    								  
110 LOAD_FAST 1 ( n )					      								    								  
112 BINARY_MODULO					      								    								  
114 COMPARE_OP 2 ( == )					      								    								  
116 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
12 118 LOAD_FAST 6 ( cnt )				      								    								  
120 RETURN_VALUE					      								    								  
							      								    								  
13 >> 122 LOAD_FAST 4 ( l )				      								    								  
124 LOAD_CONST 1 ( 1 )					      								    								  
126 BINARY_ADD						      								    								  
128 LOAD_FAST 1 ( n )					      								    								  
130 BINARY_MODULO					      								    								  
132 STORE_FAST 4 ( l )					      								    								  
							      								    								  
14 134 LOAD_FAST 5 ( r )				      								    								  
136 LOAD_CONST 1 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 LOAD_FAST 1 ( n )					      								    								  
142 BINARY_ADD						      								    								  
144 LOAD_FAST 1 ( n )					      								    								  
146 BINARY_MODULO					      								    								  
148 STORE_FAST 5 ( r )					      								    								  
150 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
15 >> 152 LOAD_FAST 0 ( arr )				      								    								  
154 LOAD_FAST 4 ( l )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 0 ( arr )					      								    								  
160 LOAD_FAST 5 ( r )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 BINARY_ADD						      								    								  
166 LOAD_FAST 2 ( x )					      								    								  
168 COMPARE_OP 0 ( < )					      								    								  
170 POP_JUMP_IF_FALSE 186				      								    								  
							      								    								  
16 172 LOAD_FAST 4 ( l )				      								    								  
174 LOAD_CONST 1 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 LOAD_FAST 1 ( n )					      								    								  
180 BINARY_MODULO					      								    								  
182 STORE_FAST 4 ( l )					      								    								  
184 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
18 >> 186 LOAD_FAST 1 ( n )				      								    								  
188 LOAD_FAST 5 ( r )					      								    								  
190 BINARY_ADD						      								    								  
192 LOAD_CONST 1 ( 1 )					      								    								  
194 BINARY_SUBTRACT					      								    								  
196 LOAD_FAST 1 ( n )					      								    								  
198 BINARY_MODULO					      								    								  
200 STORE_FAST 5 ( r )					      								    								  
202 JUMP_ABSOLUTE 62					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
19 >> 206 LOAD_FAST 6 ( cnt )				      								    								  
208 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	      MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	    MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	  MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K
--							      --							    --								  --
Disassembly of <code object solve at 0x7fbac0e8bc90, file "<d def solve ( X , Y , l , r , k , dp ) :			    def solve ( X , Y , l , r , k , dp = False ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 4 ( k )					      	  if k == 0 :						    	if k == 0 :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  _sa.test/MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUE
4 COMPARE_OP 2 ( == )					      	  if l < 0 or r < 0 :					    	if l < 0 or r < 0 :					  NCE_LENGTH_K.py", line 38	l [ k ] [ k ] = l
6 POP_JUMP_IF_FALSE 12					      	      return 1000000000					    	    return 1000000000					    ^ SyntaxError: invalid syntax
							      	  if dp [ l ] [ r ] [ k ] != - 1 :			    	if dp [ l ] [ r ] [ k ] != - 1 :			  
3 8 LOAD_CONST 1 ( 0 )					      	      return dp [ l ] [ r ] [ k ]			    	    return dp [ l ] [ r ] [ k ]				  
10 RETURN_VALUE						      	  cost = ( ( ord ( X [ l ] ) - ord ( 'a' ) ) ^ ( ord ( Y [  	cost = ord ( X [ l ] ) - ord ( 'a' ) - ord ( Y [ r ] ) ^  
							      	  dp [ l ] [ r ] [ k ] = min ( [ cost + solve ( X , Y , l - 	cost = min ( cost , solve ( X , Y , l - 1 , r - 1 , k - 1 
4 >> 12 LOAD_FAST 2 ( l )				      	  return dp [ l ] [ r ] [ k ]				    	l [ k ] [ k ] = l					  
14 LOAD_CONST 1 ( 0 )					      								    return dp ( l , l [ k ] , l [ k ] [ k ] , l [ k ] [ k ] [ k ] 
16 COMPARE_OP 0 ( < )					      								    								  
18 POP_JUMP_IF_TRUE 28					      								    								  
20 LOAD_FAST 3 ( r )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 >> 28 LOAD_CONST 2 ( 1000000000 )			      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 5 ( dp )				      								    								  
34 LOAD_FAST 2 ( l )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 3 ( r )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 4 ( k )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 3 ( - 1 )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
7 52 LOAD_FAST 5 ( dp )					      								    								  
54 LOAD_FAST 2 ( l )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 3 ( r )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 4 ( k )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
8 >> 68 LOAD_GLOBAL 0 ( ord )				      								    								  
70 LOAD_FAST 0 ( X )					      								    								  
72 LOAD_FAST 2 ( l )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_GLOBAL 0 ( ord )				      								    								  
80 LOAD_CONST 4 ( 'a' )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_GLOBAL 0 ( ord )				      								    								  
88 LOAD_FAST 1 ( Y )					      								    								  
90 LOAD_FAST 3 ( r )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 LOAD_GLOBAL 0 ( ord )				      								    								  
98 LOAD_CONST 4 ( 'a' )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 BINARY_XOR						      								    								  
106 STORE_FAST 6 ( cost )				      								    								  
							      								    								  
9 108 LOAD_GLOBAL 1 ( min )				      								    								  
110 LOAD_FAST 6 ( cost )				      								    								  
112 LOAD_GLOBAL 2 ( solve )				      								    								  
114 LOAD_FAST 0 ( X )					      								    								  
116 LOAD_FAST 1 ( Y )					      								    								  
118 LOAD_FAST 2 ( l )					      								    								  
120 LOAD_CONST 5 ( 1 )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 LOAD_FAST 3 ( r )					      								    								  
126 LOAD_CONST 5 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_FAST 4 ( k )					      								    								  
132 LOAD_CONST 5 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 LOAD_FAST 5 ( dp )					      								    								  
138 CALL_FUNCTION 6					      								    								  
140 BINARY_ADD						      								    								  
142 LOAD_GLOBAL 2 ( solve )				      								    								  
144 LOAD_FAST 0 ( X )					      								    								  
146 LOAD_FAST 1 ( Y )					      								    								  
148 LOAD_FAST 2 ( l )					      								    								  
150 LOAD_CONST 5 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 LOAD_FAST 3 ( r )					      								    								  
156 LOAD_FAST 4 ( k )					      								    								  
158 LOAD_FAST 5 ( dp )					      								    								  
160 CALL_FUNCTION 6					      								    								  
162 LOAD_GLOBAL 2 ( solve )				      								    								  
164 LOAD_FAST 0 ( X )					      								    								  
166 LOAD_FAST 1 ( Y )					      								    								  
168 LOAD_FAST 2 ( l )					      								    								  
170 LOAD_FAST 3 ( r )					      								    								  
172 LOAD_CONST 5 ( 1 )					      								    								  
174 BINARY_SUBTRACT					      								    								  
176 LOAD_FAST 4 ( k )					      								    								  
178 LOAD_FAST 5 ( dp )					      								    								  
180 CALL_FUNCTION 6					      								    								  
182 BUILD_LIST 3					      								    								  
184 CALL_FUNCTION 1					      								    								  
186 LOAD_FAST 5 ( dp )					      								    								  
188 LOAD_FAST 2 ( l )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 3 ( r )					      								    								  
194 BINARY_SUBSCR					      								    								  
196 LOAD_FAST 4 ( k )					      								    								  
198 STORE_SUBSCR					      								    								  
							      								    								  
10 200 LOAD_FAST 5 ( dp )				      								    								  
202 LOAD_FAST 2 ( l )					      								    								  
204 BINARY_SUBSCR					      								    								  
206 LOAD_FAST 3 ( r )					      								    								  
208 BINARY_SUBSCR					      								    								  
210 LOAD_FAST 4 ( k )					      								    								  
212 BINARY_SUBSCR					      								    								  
214 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROOTS_QUADRATIC_EQUATION				      ROOTS_QUADRATIC_EQUATION					    ROOTS_QUADRATIC_EQUATION					  ROOTS_QUADRATIC_EQUATION
--							      --							    --								  --
Disassembly of <code object findRoots at 0x7fbac0e8de40, file def findRoots ( a , b , c ) :				    def findRoots ( a , b , c ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if a == 0 :						    	if a == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      print ( "Invalid" )				    	    print ( "Invalid" )					  
4 COMPARE_OP 2 ( == )					      	      return - 1					    	    return - 1						  
6 POP_JUMP_IF_FALSE 20					      	  d = b * b - 4 * a * c					    	d = b * b - 4 * a * c					  
							      	  sqrt_val = math.sqrt ( abs ( d ) )			    	sqrt_val = math.sqrt ( abs ( d ) )			  
3 8 LOAD_GLOBAL 0 ( print )				      	  if d > 0 :						    	if d > 0 :						  
10 LOAD_CONST 2 ( 'Invalid' )				      	      print ( "Roots are real and different " )		    	    print ( "Roots are real and different " )		  
12 CALL_FUNCTION 1					      	      print ( ( - b + sqrt_val ) / ( 2 * a ) )		    	    print ( - b + sqrt_val / 2 * a )			  
14 POP_TOP						      	      print ( ( - b - sqrt_val ) / ( 2 * a ) )		    	    print ( - b - sqrt_val / 2 * a )			  
							      	  elif d == 0 :						    	else :							  
4 16 LOAD_CONST 3 ( - 1 )				      	      print ( "Roots are real and same" )		    	    if d == 0 :						  
18 RETURN_VALUE						      	      print ( - b / ( 2 * a ) )				    		print ( "Roots are real and same" )		  
							      	  else :						    		print ( - b / 2 * a )				  
5 >> 20 LOAD_FAST 1 ( b )				      	      print ( "Roots are complex" )			    	else :							  
22 LOAD_FAST 1 ( b )					      	      print ( - b / ( 2 * a ) , " + i" , sqrt_val )	    	    print ( "Roots are complex" )			  
24 BINARY_MULTIPLY					      	      print ( - b / ( 2 * a ) , " - i" , sqrt_val )	    								  
26 LOAD_CONST 4 ( 4 )					      								    								  
28 LOAD_FAST 0 ( a )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 2 ( c )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 STORE_FAST 3 ( d )					      								    								  
							      								    								  
6 40 LOAD_GLOBAL 1 ( math )				      								    								  
42 LOAD_METHOD 2 ( sqrt )				      								    								  
44 LOAD_GLOBAL 3 ( abs )				      								    								  
46 LOAD_FAST 3 ( d )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 CALL_METHOD 1					      								    								  
52 STORE_FAST 4 ( sqrt_val )				      								    								  
							      								    								  
7 54 LOAD_FAST 3 ( d )					      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 COMPARE_OP 4 ( > )					      								    								  
60 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
8 62 LOAD_GLOBAL 0 ( print )				      								    								  
64 LOAD_CONST 5 ( 'Roots are real and different ' )	      								    								  
66 CALL_FUNCTION 1					      								    								  
68 POP_TOP						      								    								  
							      								    								  
9 70 LOAD_GLOBAL 0 ( print )				      								    								  
72 LOAD_FAST 1 ( b )					      								    								  
74 UNARY_NEGATIVE					      								    								  
76 LOAD_FAST 4 ( sqrt_val )				      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_CONST 6 ( 2 )					      								    								  
82 LOAD_FAST 0 ( a )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 POP_TOP						      								    								  
							      								    								  
10 92 LOAD_GLOBAL 0 ( print )				      								    								  
94 LOAD_FAST 1 ( b )					      								    								  
96 UNARY_NEGATIVE					      								    								  
98 LOAD_FAST 4 ( sqrt_val )				      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_CONST 6 ( 2 )					      								    								  
104 LOAD_FAST 0 ( a )					      								    								  
106 BINARY_MULTIPLY					      								    								  
108 BINARY_TRUE_DIVIDE					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 POP_TOP						      								    								  
114 JUMP_FORWARD 88 ( to 204 )				      								    								  
							      								    								  
11 >> 116 LOAD_FAST 3 ( d )				      								    								  
118 LOAD_CONST 1 ( 0 )					      								    								  
120 COMPARE_OP 2 ( == )					      								    								  
122 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
12 124 LOAD_GLOBAL 0 ( print )				      								    								  
126 LOAD_CONST 7 ( 'Roots are real and same' )		      								    								  
128 CALL_FUNCTION 1					      								    								  
130 POP_TOP						      								    								  
							      								    								  
13 132 LOAD_GLOBAL 0 ( print )				      								    								  
134 LOAD_FAST 1 ( b )					      								    								  
136 UNARY_NEGATIVE					      								    								  
138 LOAD_CONST 6 ( 2 )					      								    								  
140 LOAD_FAST 0 ( a )					      								    								  
142 BINARY_MULTIPLY					      								    								  
144 BINARY_TRUE_DIVIDE					      								    								  
146 CALL_FUNCTION 1					      								    								  
148 POP_TOP						      								    								  
150 JUMP_FORWARD 52 ( to 204 )				      								    								  
							      								    								  
15 >> 152 LOAD_GLOBAL 0 ( print )			      								    								  
154 LOAD_CONST 8 ( 'Roots are complex' )		      								    								  
156 CALL_FUNCTION 1					      								    								  
158 POP_TOP						      								    								  
							      								    								  
16 160 LOAD_GLOBAL 0 ( print )				      								    								  
162 LOAD_FAST 1 ( b )					      								    								  
164 UNARY_NEGATIVE					      								    								  
166 LOAD_CONST 6 ( 2 )					      								    								  
168 LOAD_FAST 0 ( a )					      								    								  
170 BINARY_MULTIPLY					      								    								  
172 BINARY_TRUE_DIVIDE					      								    								  
174 LOAD_CONST 9 ( ' + i' )				      								    								  
176 LOAD_FAST 4 ( sqrt_val )				      								    								  
178 CALL_FUNCTION 3					      								    								  
180 POP_TOP						      								    								  
							      								    								  
17 182 LOAD_GLOBAL 0 ( print )				      								    								  
184 LOAD_FAST 1 ( b )					      								    								  
186 UNARY_NEGATIVE					      								    								  
188 LOAD_CONST 6 ( 2 )					      								    								  
190 LOAD_FAST 0 ( a )					      								    								  
192 BINARY_MULTIPLY					      								    								  
194 BINARY_TRUE_DIVIDE					      								    								  
196 LOAD_CONST 10 ( ' - i' )				      								    								  
198 LOAD_FAST 4 ( sqrt_val )				      								    								  
200 CALL_FUNCTION 3					      								    								  
202 POP_TOP						      								    								  
>> 204 LOAD_CONST 0 ( None )				      								    								  
206 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POLICEMEN_CATCH_THIEVES					      POLICEMEN_CATCH_THIEVES					    POLICEMEN_CATCH_THIEVES					  POLICEMEN_CATCH_THIEVES
--							      --							    --								  --
Disassembly of <code object policeThief at 0x7fbac0e8de40, fi def policeThief ( arr , n , k ) :				    def policeThief ( arr , n , k ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( i )					      	  l = 0							    	l = 0							  _sa.test/POLICEMEN_CATCH_THIEVES.py", line 64
							      	  r = 0							    	r = 0							  return r     ^ SyntaxError: 'return' outside funct
3 4 LOAD_CONST 1 ( 0 )					      	  res = 0						    	r = 0							  ion
6 STORE_FAST 4 ( l )					      	  thi = [ ]						    	res = [ ]						  
							      	  pol = [ ]						    	thi = [ ]						  
4 8 LOAD_CONST 1 ( 0 )					      	  while i < n :						    	pol = [ ]						  
10 STORE_FAST 5 ( r )					      	      if arr [ i ] == 'P' :				    	while i < n :						  
							      		  pol.append ( i )				    	    if arr [ i ] == 'P' :				  
5 12 LOAD_CONST 1 ( 0 )					      	      elif arr [ i ] == 'T' :				    		pol.append ( i )				  
14 STORE_FAST 6 ( res )					      		  thi.append ( i )				    	    elif arr [ i ] == 'T' :				  
							      	      i += 1						    		thi.append ( i )				  
6 16 BUILD_LIST 0					      	  while l < len ( thi ) and r < len ( pol ) :		    	    i += 1						  
18 STORE_FAST 7 ( thi )					      	      if ( abs ( thi [ l ] - pol [ r ] ) <= k ) :	    	while l < len ( thi ) and r < len ( pol ) :		  
							      		  res += 1					    	    if abs ( thi [ l ] - pol [ r ] ) <= k :		  
7 20 BUILD_LIST 0					      		  l += 1					    		res += 1					  
22 STORE_FAST 8 ( pol )					      		  r += 1					    		l += 1						  
							      	      elif thi [ l ] < pol [ r ] :			    	l += 2							  
8 24 SETUP_LOOP 66 ( to 92 )				      		  l += 1					    	while l < 0 :						  
>> 26 LOAD_FAST 3 ( i )					      	      else :						    	    l += 1						  
28 LOAD_FAST 1 ( n )					      		  r += 1					    	l += 1							  
30 COMPARE_OP 0 ( < )					      	  return res						    return r							  
32 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
9 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 2 ( 'P' )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
10 46 LOAD_FAST 8 ( pol )				      								    								  
48 LOAD_METHOD 0 ( append )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 CALL_METHOD 1					      								    								  
54 POP_TOP						      								    								  
56 JUMP_FORWARD 22 ( to 80 )				      								    								  
							      								    								  
11 >> 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_CONST 3 ( 'T' )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
12 70 LOAD_FAST 7 ( thi )				      								    								  
72 LOAD_METHOD 0 ( append )				      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 CALL_METHOD 1					      								    								  
78 POP_TOP						      								    								  
							      								    								  
13 >> 80 LOAD_FAST 3 ( i )				      								    								  
82 LOAD_CONST 4 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 3 ( i )					      								    								  
88 JUMP_ABSOLUTE 26					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
14 >> 92 SETUP_LOOP 112 ( to 206 )			      								    								  
>> 94 LOAD_FAST 4 ( l )					      								    								  
96 LOAD_GLOBAL 1 ( len )				      								    								  
98 LOAD_FAST 7 ( thi )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 COMPARE_OP 0 ( < )					      								    								  
104 POP_JUMP_IF_FALSE 204				      								    								  
106 LOAD_FAST 5 ( r )					      								    								  
108 LOAD_GLOBAL 1 ( len )				      								    								  
110 LOAD_FAST 8 ( pol )					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 COMPARE_OP 0 ( < )					      								    								  
116 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
15 118 LOAD_GLOBAL 2 ( abs )				      								    								  
120 LOAD_FAST 7 ( thi )					      								    								  
122 LOAD_FAST 4 ( l )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 8 ( pol )					      								    								  
128 LOAD_FAST 5 ( r )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 LOAD_FAST 2 ( k )					      								    								  
138 COMPARE_OP 1 ( <= )					      								    								  
140 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
16 142 LOAD_FAST 6 ( res )				      								    								  
144 LOAD_CONST 4 ( 1 )					      								    								  
146 INPLACE_ADD						      								    								  
148 STORE_FAST 6 ( res )				      								    								  
							      								    								  
17 150 LOAD_FAST 4 ( l )				      								    								  
152 LOAD_CONST 4 ( 1 )					      								    								  
154 INPLACE_ADD						      								    								  
156 STORE_FAST 4 ( l )					      								    								  
							      								    								  
18 158 LOAD_FAST 5 ( r )				      								    								  
160 LOAD_CONST 4 ( 1 )					      								    								  
162 INPLACE_ADD						      								    								  
164 STORE_FAST 5 ( r )					      								    								  
166 JUMP_ABSOLUTE 94					      								    								  
							      								    								  
19 >> 168 LOAD_FAST 7 ( thi )				      								    								  
170 LOAD_FAST 4 ( l )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_FAST 8 ( pol )					      								    								  
176 LOAD_FAST 5 ( r )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 COMPARE_OP 0 ( < )					      								    								  
182 POP_JUMP_IF_FALSE 194				      								    								  
							      								    								  
20 184 LOAD_FAST 4 ( l )				      								    								  
186 LOAD_CONST 4 ( 1 )					      								    								  
188 INPLACE_ADD						      								    								  
190 STORE_FAST 4 ( l )					      								    								  
192 JUMP_ABSOLUTE 94					      								    								  
							      								    								  
22 >> 194 LOAD_FAST 5 ( r )				      								    								  
196 LOAD_CONST 4 ( 1 )					      								    								  
198 INPLACE_ADD						      								    								  
200 STORE_FAST 5 ( r )					      								    								  
202 JUMP_ABSOLUTE 94					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
23 >> 206 LOAD_FAST 6 ( res )				      								    								  
208 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_<unk> S_ALLOWED     LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_<unk> S_ALLOWED	    LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_<unk> S_ALLOWED	  LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_<unk> S_ALLOWED
--							      --							    --								  --
Disassembly of <code object lcs at 0x7fbac0e8d540, file "<dis def lcs ( dp , arr1 , n , arr2 , m , k ) :		    def lcs ( dp , arr1 , n , arr2 , m , k , k , k = k ) :	  script_not_found : None
2 0 LOAD_FAST 5 ( k )					      	  if k < 0 :						    	if k < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return - ( 10 ** 7 )				    	    return - 10000000					  
4 COMPARE_OP 0 ( < )					      	  if n < 0 or m < 0 :					    	if n < 0 or m < 0 :					  
6 POP_JUMP_IF_FALSE 12					      	      return 0						    	    return 0						  
							      	  ans = dp [ n ] [ m ] [ k ]				    	ans = dp [ n ] [ m ] [ k ]				  
3 8 LOAD_CONST 2 ( - 10000000 )				      	  if ans != - 1 :					    	if ans != - 1 :						  
10 RETURN_VALUE						      	      return ans					    	    return ans						  
							      	  ans = max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lc 	ans = max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lc 
4 >> 12 LOAD_FAST 2 ( n )				      	  if arr1 [ n - 1 ] == arr2 [ m - 1 ] :			    	if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) :		  
14 LOAD_CONST 1 ( 0 )					      	      ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2  	    ans = max ( ans , 1 , lcs ( dp ( arr1 , n - 1 , arr2  
16 COMPARE_OP 0 ( < )					      	  ans = max ( ans , lcs ( dp , arr1 , n - 1 , arr2 , m - 1  	ans = max ( lcs , arr2 , m - 1 , k )			  
18 POP_JUMP_IF_TRUE 28					      	  return ans						    	return ans						  
20 LOAD_FAST 4 ( m )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 >> 28 LOAD_CONST 1 ( 0 )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 0 ( dp )				      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 4 ( m )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 5 ( k )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_FAST 6 ( ans )					      								    								  
							      								    								  
7 48 LOAD_FAST 6 ( ans )				      								    								  
50 LOAD_CONST 3 ( - 1 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_FAST 6 ( ans )				      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_GLOBAL 0 ( max )				      								    								  
62 LOAD_GLOBAL 1 ( lcs )				      								    								  
64 LOAD_FAST 0 ( dp )					      								    								  
66 LOAD_FAST 1 ( arr1 )					      								    								  
68 LOAD_FAST 2 ( n )					      								    								  
70 LOAD_CONST 4 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 3 ( arr2 )					      								    								  
76 LOAD_FAST 4 ( m )					      								    								  
78 LOAD_FAST 5 ( k )					      								    								  
80 CALL_FUNCTION 6					      								    								  
82 LOAD_GLOBAL 1 ( lcs )				      								    								  
84 LOAD_FAST 0 ( dp )					      								    								  
86 LOAD_FAST 1 ( arr1 )					      								    								  
88 LOAD_FAST 2 ( n )					      								    								  
90 LOAD_FAST 3 ( arr2 )					      								    								  
92 LOAD_FAST 4 ( m )					      								    								  
94 LOAD_CONST 4 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 LOAD_FAST 5 ( k )					      								    								  
100 CALL_FUNCTION 6					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 STORE_FAST 6 ( ans )				      								    								  
							      								    								  
10 106 LOAD_FAST 1 ( arr1 )				      								    								  
108 LOAD_FAST 2 ( n )					      								    								  
110 LOAD_CONST 4 ( 1 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 3 ( arr2 )				      								    								  
118 LOAD_FAST 4 ( m )					      								    								  
120 LOAD_CONST 4 ( 1 )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 BINARY_SUBSCR					      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 166				      								    								  
							      								    								  
11 130 LOAD_GLOBAL 0 ( max )				      								    								  
132 LOAD_FAST 6 ( ans )					      								    								  
134 LOAD_CONST 4 ( 1 )					      								    								  
136 LOAD_GLOBAL 1 ( lcs )				      								    								  
138 LOAD_FAST 0 ( dp )					      								    								  
140 LOAD_FAST 1 ( arr1 )				      								    								  
142 LOAD_FAST 2 ( n )					      								    								  
144 LOAD_CONST 4 ( 1 )					      								    								  
146 BINARY_SUBTRACT					      								    								  
148 LOAD_FAST 3 ( arr2 )				      								    								  
150 LOAD_FAST 4 ( m )					      								    								  
152 LOAD_CONST 4 ( 1 )					      								    								  
154 BINARY_SUBTRACT					      								    								  
156 LOAD_FAST 5 ( k )					      								    								  
158 CALL_FUNCTION 6					      								    								  
160 BINARY_ADD						      								    								  
162 CALL_FUNCTION 2					      								    								  
164 STORE_FAST 6 ( ans )				      								    								  
							      								    								  
12 >> 166 LOAD_GLOBAL 0 ( max )				      								    								  
168 LOAD_FAST 6 ( ans )					      								    								  
170 LOAD_GLOBAL 1 ( lcs )				      								    								  
172 LOAD_FAST 0 ( dp )					      								    								  
174 LOAD_FAST 1 ( arr1 )				      								    								  
176 LOAD_FAST 2 ( n )					      								    								  
178 LOAD_CONST 4 ( 1 )					      								    								  
180 BINARY_SUBTRACT					      								    								  
182 LOAD_FAST 3 ( arr2 )				      								    								  
184 LOAD_FAST 4 ( m )					      								    								  
186 LOAD_CONST 4 ( 1 )					      								    								  
188 BINARY_SUBTRACT					      								    								  
190 LOAD_FAST 5 ( k )					      								    								  
192 LOAD_CONST 4 ( 1 )					      								    								  
194 BINARY_SUBTRACT					      								    								  
196 CALL_FUNCTION 6					      								    								  
198 CALL_FUNCTION 2					      								    								  
200 STORE_FAST 6 ( ans )				      								    								  
							      								    								  
13 202 LOAD_FAST 6 ( ans )				      								    								  
204 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		      CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		    CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		  CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME
--							      --							    --								  --
Disassembly of <code object constructPalin at 0x7fbac0e8bc90, def constructPalin ( string , l ) :			    def constructPalin ( string , l ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( list )				      	  string = list ( string )				    	string = list ( string )				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( string )				      	  i = - 1						    	i = - 1							  _sa.test/CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALI
4 CALL_FUNCTION 1					      	  j = l							    	j = l							  NDROME.py", line 50	  elif string [ i ] == strin
6 STORE_FAST 0 ( string )				      	  while i < j :						    	while i < j :						  g [ j ] and string [ i ] == '*' :	   ^ SyntaxE
							      	      i += 1						    	    i += 1						  rror: invalid syntax
3 8 LOAD_CONST 1 ( - 1 )				      	      j -= 1						    	    j -= 1						  
10 STORE_FAST 2 ( i )					      	      if ( string [ i ] == string [ j ] and string [ i ] != 	    if string [ i ] == string [ j ] and string [ i ] != ' 
							      		  continue					    		continue					  
4 12 LOAD_FAST 1 ( l )					      	      elif ( string [ i ] == string [ j ] and string [ i ]  	elif string [ i ] == string [ j ] and string [ i ] == '*' 
14 STORE_FAST 3 ( j )					      		  string [ i ] = 'a'				    	    string [ i ] = 'a'					  
							      		  string [ j ] = 'a'				    	    string [ j ] = 'a'					  
5 16 SETUP_LOOP 172 ( to 190 )				      		  continue					    	    continue						  
>> 18 LOAD_FAST 2 ( i )					      	      elif string [ i ] == '*' :			    	elif string [ i ] == '*' :				  
20 LOAD_FAST 3 ( j )					      		  string [ i ] = string [ j ]			    	    string [ i ] = string [ j ]				  
22 COMPARE_OP 0 ( < )					      		  continue					    	    continue						  
24 POP_JUMP_IF_FALSE 188				      	      elif string [ j ] == '*' :			    	elif string [ j ] == '*' :				  
							      		  string [ j ] = string [ i ]			    	    string [ i ] = string [ j ]				  
6 26 LOAD_FAST 2 ( i )					      		  continue					    	else :							  
28 LOAD_CONST 2 ( 1 )					      	      print ( "Not Possible" )				    	    print ( 'Not ' + ' Not ' + ' Not ' + string [ i ] )	  
30 INPLACE_ADD						      	      return ""						    return "".join ( string )					  
32 STORE_FAST 2 ( i )					      	  return ''.join ( string )				    								  
							      								    								  
7 34 LOAD_FAST 3 ( j )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_SUBTRACT					      								    								  
40 STORE_FAST 3 ( j )					      								    								  
							      								    								  
8 42 LOAD_FAST 0 ( string )				      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( string )				      								    								  
50 LOAD_FAST 3 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 74					      								    								  
58 LOAD_FAST 0 ( string )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_CONST 3 ( '*' )					      								    								  
66 COMPARE_OP 3 ( != )					      								    								  
68 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 70 JUMP_ABSOLUTE 18					      								    								  
72 JUMP_FORWARD 102 ( to 176 )				      								    								  
							      								    								  
10 >> 74 LOAD_FAST 0 ( string )				      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( string )				      								    								  
82 LOAD_FAST 3 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 122				      								    								  
90 LOAD_FAST 0 ( string )				      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 3 ( '*' )					      								    								  
98 COMPARE_OP 2 ( == )					      								    								  
100 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
11 102 LOAD_CONST 4 ( 'a' )				      								    								  
104 LOAD_FAST 0 ( string )				      								    								  
106 LOAD_FAST 2 ( i )					      								    								  
108 STORE_SUBSCR					      								    								  
							      								    								  
12 110 LOAD_CONST 4 ( 'a' )				      								    								  
112 LOAD_FAST 0 ( string )				      								    								  
114 LOAD_FAST 3 ( j )					      								    								  
116 STORE_SUBSCR					      								    								  
							      								    								  
13 118 JUMP_ABSOLUTE 18					      								    								  
120 JUMP_FORWARD 54 ( to 176 )				      								    								  
							      								    								  
14 >> 122 LOAD_FAST 0 ( string )			      								    								  
124 LOAD_FAST 2 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_CONST 3 ( '*' )				      								    								  
130 COMPARE_OP 2 ( == )					      								    								  
132 POP_JUMP_IF_FALSE 150				      								    								  
							      								    								  
15 134 LOAD_FAST 0 ( string )				      								    								  
136 LOAD_FAST 3 ( j )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 0 ( string )				      								    								  
142 LOAD_FAST 2 ( i )					      								    								  
144 STORE_SUBSCR					      								    								  
							      								    								  
16 146 JUMP_ABSOLUTE 18					      								    								  
148 JUMP_FORWARD 26 ( to 176 )				      								    								  
							      								    								  
17 >> 150 LOAD_FAST 0 ( string )			      								    								  
152 LOAD_FAST 3 ( j )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_CONST 3 ( '*' )				      								    								  
158 COMPARE_OP 2 ( == )					      								    								  
160 POP_JUMP_IF_FALSE 176				      								    								  
							      								    								  
18 162 LOAD_FAST 0 ( string )				      								    								  
164 LOAD_FAST 2 ( i )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 LOAD_FAST 0 ( string )				      								    								  
170 LOAD_FAST 3 ( j )					      								    								  
172 STORE_SUBSCR					      								    								  
							      								    								  
19 174 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
20 >> 176 LOAD_GLOBAL 1 ( print )			      								    								  
178 LOAD_CONST 5 ( 'Not Possible' )			      								    								  
180 CALL_FUNCTION 1					      								    								  
182 POP_TOP						      								    								  
							      								    								  
21 184 LOAD_CONST 6 ( '' )				      								    								  
186 RETURN_VALUE					      								    								  
>> 188 POP_BLOCK					      								    								  
							      								    								  
22 >> 190 LOAD_CONST 6 ( '' )				      								    								  
192 LOAD_METHOD 2 ( join )				      								    								  
194 LOAD_FAST 0 ( string )				      								    								  
196 CALL_METHOD 1					      								    								  
198 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI
--							      --							    --								  --
Disassembly of <code object findMaximum at 0x7fbac0e8d540, fi def findMaximum ( arr , low , high ) :			    def findMaximum ( arr , low , high ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if low == high :					    	if low == high :					  
2 LOAD_FAST 2 ( high )					      	      return arr [ low ]				    	    return arr [ low ]					  
4 COMPARE_OP 2 ( == )					      	  if high == low + 1 and arr [ low ] >= arr [ high ] :	    	if high == low + 1 and arr [ low ] >= arr [ high ] :	  
6 POP_JUMP_IF_FALSE 16					      	      return arr [ low ] ;				    	    return arr [ low ]					  
							      	  if high == low + 1 and arr [ low ] < arr [ high ] :	    	if high == low + 1 and arr [ low ] < arr [ high ] :	  
3 8 LOAD_FAST 0 ( arr )					      	      return arr [ high ]				    	    return arr [ high ]					  
10 LOAD_FAST 1 ( low )					      	  mid = ( low + high ) // 2				    	mid = low + high // 2					  
12 BINARY_SUBSCR					      	  if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [  	if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [  
14 RETURN_VALUE						      	      return arr [ mid ]				    	    return arr [ mid ]					  
							      	  if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [  	if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < mid [  
4 >> 16 LOAD_FAST 2 ( high )				      	      return findMaximum ( arr , low , mid - 1 )	    	    return arr [ mid ]					  
18 LOAD_FAST 1 ( low )					      	  else :						    	else :							  
20 LOAD_CONST 1 ( 1 )					      	      return findMaximum ( arr , mid + 1 , high )	    	    return findMaximum ( mid + 1 )			  
22 BINARY_ADD						      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 52					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 1 ( low )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 2 ( high )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 5 ( >= )					      								    								  
42 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 1 ( low )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
6 >> 52 LOAD_FAST 2 ( high )				      								    								  
54 LOAD_FAST 1 ( low )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 88					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 1 ( low )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 2 ( high )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
7 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 2 ( high )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
8 >> 88 LOAD_FAST 1 ( low )				      								    								  
90 LOAD_FAST 2 ( high )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_CONST 2 ( 2 )					      								    								  
96 BINARY_FLOOR_DIVIDE					      								    								  
98 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
9 100 LOAD_FAST 0 ( arr )				      								    								  
102 LOAD_FAST 3 ( mid )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 3 ( mid )					      								    								  
110 LOAD_CONST 1 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 BINARY_SUBSCR					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 148				      								    								  
120 LOAD_FAST 0 ( arr )					      								    								  
122 LOAD_FAST 3 ( mid )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 3 ( mid )					      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 BINARY_SUBSCR					      								    								  
136 COMPARE_OP 4 ( > )					      								    								  
138 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
10 140 LOAD_FAST 0 ( arr )				      								    								  
142 LOAD_FAST 3 ( mid )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 RETURN_VALUE					      								    								  
							      								    								  
11 >> 148 LOAD_FAST 0 ( arr )				      								    								  
150 LOAD_FAST 3 ( mid )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 0 ( arr )					      								    								  
156 LOAD_FAST 3 ( mid )					      								    								  
158 LOAD_CONST 1 ( 1 )					      								    								  
160 BINARY_ADD						      								    								  
162 BINARY_SUBSCR					      								    								  
164 COMPARE_OP 4 ( > )					      								    								  
166 POP_JUMP_IF_FALSE 204				      								    								  
168 LOAD_FAST 0 ( arr )					      								    								  
170 LOAD_FAST 3 ( mid )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_FAST 0 ( arr )					      								    								  
176 LOAD_FAST 3 ( mid )					      								    								  
178 LOAD_CONST 1 ( 1 )					      								    								  
180 BINARY_SUBTRACT					      								    								  
182 BINARY_SUBSCR					      								    								  
184 COMPARE_OP 0 ( < )					      								    								  
186 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
12 188 LOAD_GLOBAL 0 ( findMaximum )			      								    								  
190 LOAD_FAST 0 ( arr )					      								    								  
192 LOAD_FAST 1 ( low )					      								    								  
194 LOAD_FAST 3 ( mid )					      								    								  
196 LOAD_CONST 1 ( 1 )					      								    								  
198 BINARY_SUBTRACT					      								    								  
200 CALL_FUNCTION 3					      								    								  
202 RETURN_VALUE					      								    								  
							      								    								  
14 >> 204 LOAD_GLOBAL 0 ( findMaximum )			      								    								  
206 LOAD_FAST 0 ( arr )					      								    								  
208 LOAD_FAST 3 ( mid )					      								    								  
210 LOAD_CONST 1 ( 1 )					      								    								  
212 BINARY_ADD						      								    								  
214 LOAD_FAST 2 ( high )				      								    								  
216 CALL_FUNCTION 3					      								    								  
218 RETURN_VALUE					      								    								  
220 LOAD_CONST 0 ( None )				      								    								  
222 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_TOTIENT_FUNCTION_FOR_ALL_NUMBERS_SMALLER_THAN_OR_EQUAL EULERS_TOTIENT_FUNCTION_FOR_ALL_NUMBERS_SMALLER_THAN_OR_EQUAL EULERS_TOTIENT_FUNCTION_FOR_ALL_NUMBERS_SMALLER_THAN_OR_EQUAL EULERS_TOTIENT_FUNCTION_FOR_ALL_NUMBERS_SMALLER_THAN_OR_EQUAL
--							      --							    --								  --
Disassembly of <code object computeTotient at 0x7fbac0e8de40, def computeTotient ( n ) :				    def computeTotient ( n ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  phi = [ ]						    	phi = [ ]						  
2 STORE_FAST 1 ( phi )					      	  for i in range ( n + 2 ) :				    	for i in range ( n + 2 ) :				  
							      	      phi.append ( 0 )					    	    phi.append ( 0 )					  
3 4 SETUP_LOOP 30 ( to 36 )				      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
6 LOAD_GLOBAL 0 ( range )				      	      phi [ i ] = i					    	    phi [ i ] = i					  
8 LOAD_FAST 0 ( n )					      	  for p in range ( 2 , n + 1 ) :			    	for p in range ( 2 , n + 1 ) :				  
10 LOAD_CONST 1 ( 2 )					      	      if ( phi [ p ] == p ) :				    	    if phi [ p ] == p :					  
12 BINARY_ADD						      		  phi [ p ] = p - 1				    		phi [ p ] = p - 1				  
14 CALL_FUNCTION 1					      		  for i in range ( 2 * p , n + 1 , p ) :	    		for i in range ( 2 * p , n + 1 , p ) :		  
16 GET_ITER						      		      phi [ i ] = ( phi [ i ] // p ) * ( p - 1 )    		    phi [ i ] = phi [ i ] // p * p * p * p * p *  
>> 18 FOR_ITER 14 ( to 34 )				      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 3 ) :					  
20 STORE_FAST 2 ( i )					      	      print ( "Totient of " , i , " is " , phi [ i ] )	    	    print ( "Totient of phi phi phi phi phi phi phi phi p 
							      								    								  
4 22 LOAD_FAST 1 ( phi )				      								    								  
24 LOAD_METHOD 1 ( append )				      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 CALL_METHOD 1					      								    								  
30 POP_TOP						      								    								  
32 JUMP_ABSOLUTE 18					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 SETUP_LOOP 30 ( to 68 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 3 ( 1 )					      								    								  
42 LOAD_FAST 0 ( n )					      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 12 ( to 66 )				      								    								  
54 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_FAST 1 ( phi )					      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 52					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 SETUP_LOOP 100 ( to 170 )			      								    								  
70 LOAD_GLOBAL 0 ( range )				      								    								  
72 LOAD_CONST 1 ( 2 )					      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 82 ( to 168 )				      								    								  
86 STORE_FAST 3 ( p )					      								    								  
							      								    								  
8 88 LOAD_FAST 1 ( phi )				      								    								  
90 LOAD_FAST 3 ( p )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 3 ( p )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
9 100 LOAD_FAST 3 ( p )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 LOAD_FAST 1 ( phi )					      								    								  
108 LOAD_FAST 3 ( p )					      								    								  
110 STORE_SUBSCR					      								    								  
							      								    								  
10 112 SETUP_LOOP 52 ( to 166 )				      								    								  
114 LOAD_GLOBAL 0 ( range )				      								    								  
116 LOAD_CONST 1 ( 2 )					      								    								  
118 LOAD_FAST 3 ( p )					      								    								  
120 BINARY_MULTIPLY					      								    								  
122 LOAD_FAST 0 ( n )					      								    								  
124 LOAD_CONST 3 ( 1 )					      								    								  
126 BINARY_ADD						      								    								  
128 LOAD_FAST 3 ( p )					      								    								  
130 CALL_FUNCTION 3					      								    								  
132 GET_ITER						      								    								  
>> 134 FOR_ITER 28 ( to 164 )				      								    								  
136 STORE_FAST 2 ( i )					      								    								  
							      								    								  
11 138 LOAD_FAST 1 ( phi )				      								    								  
140 LOAD_FAST 2 ( i )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_FAST 3 ( p )					      								    								  
146 BINARY_FLOOR_DIVIDE					      								    								  
148 LOAD_FAST 3 ( p )					      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 BINARY_MULTIPLY					      								    								  
156 LOAD_FAST 1 ( phi )					      								    								  
158 LOAD_FAST 2 ( i )					      								    								  
160 STORE_SUBSCR					      								    								  
162 JUMP_ABSOLUTE 134					      								    								  
>> 164 POP_BLOCK					      								    								  
>> 166 JUMP_ABSOLUTE 84					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
12 >> 170 SETUP_LOOP 40 ( to 212 )			      								    								  
172 LOAD_GLOBAL 0 ( range )				      								    								  
174 LOAD_CONST 3 ( 1 )					      								    								  
176 LOAD_FAST 0 ( n )					      								    								  
178 LOAD_CONST 3 ( 1 )					      								    								  
180 BINARY_ADD						      								    								  
182 CALL_FUNCTION 2					      								    								  
184 GET_ITER						      								    								  
>> 186 FOR_ITER 22 ( to 210 )				      								    								  
188 STORE_FAST 2 ( i )					      								    								  
							      								    								  
13 190 LOAD_GLOBAL 2 ( print )				      								    								  
192 LOAD_CONST 4 ( 'Totient of ' )			      								    								  
194 LOAD_FAST 2 ( i )					      								    								  
196 LOAD_CONST 5 ( ' is ' )				      								    								  
198 LOAD_FAST 1 ( phi )					      								    								  
200 LOAD_FAST 2 ( i )					      								    								  
202 BINARY_SUBSCR					      								    								  
204 CALL_FUNCTION 4					      								    								  
206 POP_TOP						      								    								  
208 JUMP_ABSOLUTE 186					      								    								  
>> 210 POP_BLOCK					      								    								  
>> 212 LOAD_CONST 0 ( None )				      								    								  
214 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSTRING_SPACE_OPTIMIZED_DP_SOLUTION	      LONGEST_COMMON_SUBSTRING_SPACE_OPTIMIZED_DP_SOLUTION	    LONGEST_COMMON_SUBSTRING_SPACE_OPTIMIZED_DP_SOLUTION	  LONGEST_COMMON_SUBSTRING_SPACE_OPTIMIZED_DP_SOLUTION
--							      --							    --								  --
Disassembly of <code object LCSubStr at 0x7fbac0e8d540, file  def LCSubStr ( X , Y ) :					    def LCSubStr ( X , Y ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  m = len ( X )						    	m = len ( X )						  
2 LOAD_FAST 0 ( X )					      	  n = len ( Y )						    	n = len ( Y )						  
4 CALL_FUNCTION 1					      	  result = 0						    	result = 0						  
6 STORE_FAST 2 ( m )					      	  len_mat = np.zeros ( ( 2 , n ) )			    	len_mat = np.zeros ( ( 2 , n ) )			  
							      	  currRow = 0						    	currRow = 0						  
3 8 LOAD_GLOBAL 0 ( len )				      	  for i in range ( m ) :				    	for i in range ( m ) :					  
10 LOAD_FAST 1 ( Y )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
12 CALL_FUNCTION 1					      		  if ( i == 0 | j == 0 ) :			    		if i == 0 | j == 0 :				  
14 STORE_FAST 3 ( n )					      		      len_mat [ currRow ] [ j ] = 0		    		    len_mat [ currRow ] [ j ] = 0		  
							      		  elif ( X [ i - 1 ] == Y [ j - 1 ] ) :		    		else :						  
4 16 LOAD_CONST 1 ( 0 )					      		      len_mat [ currRow ] [ j ] = len_mat [ 1 - cur 		    if X [ i - 1 ] == Y [ j - 1 ] :		  
18 STORE_FAST 4 ( result )				      		      result = max ( result , len_mat [ currRow ] [ 			curr[ curr] [ j ] = len_mat [ 1 - currRow 
							      		  else :					    			currRow = max ( currRow [ j ] [ j - 1 ] , 
5 20 LOAD_GLOBAL 1 ( np )				      		      len_mat [ currRow ] [ j ] = 0		    			result = len_Row [ currRow ] [ currRow ]  
22 LOAD_METHOD 2 ( zeros )				      	      currRow = 1 - currRow				    		else :						  
24 LOAD_CONST 2 ( 2 )					      	  return result						    		    currRow [ currRow ] = curr			  
26 LOAD_FAST 3 ( n )					      								    		result = Row [ currRow ]			  
28 BUILD_TUPLE 2					      								    	    return result					  
30 CALL_METHOD 1					      								    								  
32 STORE_FAST 5 ( len_mat )				      								    								  
							      								    								  
6 34 LOAD_CONST 1 ( 0 )					      								    								  
36 STORE_FAST 6 ( currRow )				      								    								  
							      								    								  
7 38 SETUP_LOOP 172 ( to 212 )				      								    								  
40 LOAD_GLOBAL 3 ( range )				      								    								  
42 LOAD_FAST 2 ( m )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 160 ( to 210 )				      								    								  
50 STORE_FAST 7 ( i )					      								    								  
							      								    								  
8 52 SETUP_LOOP 146 ( to 200 )				      								    								  
54 LOAD_GLOBAL 3 ( range )				      								    								  
56 LOAD_FAST 3 ( n )					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 134 ( to 198 )				      								    								  
64 STORE_FAST 8 ( j )					      								    								  
							      								    								  
9 66 LOAD_FAST 7 ( i )					      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 LOAD_FAST 8 ( j )					      								    								  
72 BINARY_OR						      								    								  
74 DUP_TOP						      								    								  
76 ROT_THREE						      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 90					      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 108				      								    								  
88 JUMP_FORWARD 4 ( to 94 )				      								    								  
>> 90 POP_TOP						      								    								  
92 JUMP_FORWARD 14 ( to 108 )				      								    								  
							      								    								  
10 >> 94 LOAD_CONST 1 ( 0 )				      								    								  
96 LOAD_FAST 5 ( len_mat )				      								    								  
98 LOAD_FAST 6 ( currRow )				      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 8 ( j )					      								    								  
104 STORE_SUBSCR					      								    								  
106 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 0 ( X )				      								    								  
110 LOAD_FAST 7 ( i )					      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_FAST 1 ( Y )					      								    								  
120 LOAD_FAST 8 ( j )					      								    								  
122 LOAD_CONST 3 ( 1 )					      								    								  
124 BINARY_SUBTRACT					      								    								  
126 BINARY_SUBSCR					      								    								  
128 COMPARE_OP 2 ( == )					      								    								  
130 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
12 132 LOAD_FAST 5 ( len_mat )				      								    								  
134 LOAD_CONST 3 ( 1 )					      								    								  
136 LOAD_FAST 6 ( currRow )				      								    								  
138 BINARY_SUBTRACT					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 8 ( j )					      								    								  
144 LOAD_CONST 3 ( 1 )					      								    								  
146 BINARY_SUBTRACT					      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_ADD						      								    								  
154 LOAD_FAST 5 ( len_mat )				      								    								  
156 LOAD_FAST 6 ( currRow )				      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_FAST 8 ( j )					      								    								  
162 STORE_SUBSCR					      								    								  
							      								    								  
13 164 LOAD_GLOBAL 4 ( max )				      								    								  
166 LOAD_FAST 4 ( result )				      								    								  
168 LOAD_FAST 5 ( len_mat )				      								    								  
170 LOAD_FAST 6 ( currRow )				      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_FAST 8 ( j )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 CALL_FUNCTION 2					      								    								  
180 STORE_FAST 4 ( result )				      								    								  
182 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
15 >> 184 LOAD_CONST 1 ( 0 )				      								    								  
186 LOAD_FAST 5 ( len_mat )				      								    								  
188 LOAD_FAST 6 ( currRow )				      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 8 ( j )					      								    								  
194 STORE_SUBSCR					      								    								  
196 JUMP_ABSOLUTE 62					      								    								  
>> 198 POP_BLOCK					      								    								  
							      								    								  
16 >> 200 LOAD_CONST 3 ( 1 )				      								    								  
202 LOAD_FAST 6 ( currRow )				      								    								  
204 BINARY_SUBTRACT					      								    								  
206 STORE_FAST 6 ( currRow )				      								    								  
208 JUMP_ABSOLUTE 48					      								    								  
>> 210 POP_BLOCK					      								    								  
							      								    								  
17 >> 212 LOAD_FAST 4 ( result )			      								    								  
214 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS	      <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		    <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		  <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS
--							      --							    --								  --
Disassembly of <code object thirdLargest at 0x7fbac0e89d20, f def thirdLargest ( arr , arr_size ) :			    def thirdLargest ( arr , arr_size = - 1 ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( arr_size )				      	  if ( arr_size < 3 ) :					    	if arr_size < 3 :					  
2 LOAD_CONST 1 ( 3 )					      	      print ( " Invalid Input " )			    	    print ( " Invalid Input " )				  
4 COMPARE_OP 0 ( < )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  first = arr [ 0 ]					    	first = arr [ 0 ]					  
							      	  for i in range ( 1 , arr_size ) :			    	for i in range ( 1 , arr_size ) :			  
3 8 LOAD_GLOBAL 0 ( print )				      	      if ( arr [ i ] > first ) :			    	    if arr [ i ] > first :				  
10 LOAD_CONST 2 ( ' Invalid Input ' )			      		  first = arr [ i ]				    		first = arr [ i ]				  
12 CALL_FUNCTION 1					      	  second = - sys.maxsize				    	second = - sys.maxsize					  
14 POP_TOP						      	  for i in range ( 0 , arr_size ) :			    	for i in range ( 0 , arr_size ) :			  
							      	      if ( arr [ i ] > second and arr [ i ] < first ) :	    	    if arr [ i ] > second and arr [ i ] < first :	  
4 16 LOAD_CONST 0 ( None )				      		  second = arr [ i ]				    		second = arr [ i ]				  
18 RETURN_VALUE						      	  third = - sys.maxsize					    	third = - sys.maxsize					  
							      	  for i in range ( 0 , arr_size ) :			    	for i in range ( 0 , arr_size ) :			  
5 >> 20 LOAD_FAST 0 ( arr )				      	      if ( arr [ i ] > third and arr [ i ] < second ) :	    	    if arr [ i ] > third and arr [ i ] < second :	  
22 LOAD_CONST 3 ( 0 )					      		  third = arr [ i ]				    		print ( "The ThThd gest is None is None" )	  
24 BINARY_SUBSCR					      	  print ( "The Third Largest" , "element is" , third )	    								  
26 STORE_FAST 2 ( first )				      								    								  
							      								    								  
6 28 SETUP_LOOP 38 ( to 68 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 4 ( 1 )					      								    								  
34 LOAD_FAST 1 ( arr_size )				      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 24 ( to 66 )				      								    								  
42 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 2 ( first )				      								    								  
52 COMPARE_OP 4 ( > )					      								    								  
54 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
8 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 STORE_FAST 2 ( first )				      								    								  
64 JUMP_ABSOLUTE 40					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_GLOBAL 2 ( sys )				      								    								  
70 LOAD_ATTR 3 ( maxsize )				      								    								  
72 UNARY_NEGATIVE					      								    								  
74 STORE_FAST 4 ( second )				      								    								  
							      								    								  
10 76 SETUP_LOOP 50 ( to 128 )				      								    								  
78 LOAD_GLOBAL 1 ( range )				      								    								  
80 LOAD_CONST 3 ( 0 )					      								    								  
82 LOAD_FAST 1 ( arr_size )				      								    								  
84 CALL_FUNCTION 2					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 36 ( to 126 )				      								    								  
90 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 92 LOAD_FAST 0 ( arr )				      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 4 ( second )				      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 88				      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 2 ( first )				      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 88				      								    								  
							      								    								  
12 116 LOAD_FAST 0 ( arr )				      								    								  
118 LOAD_FAST 3 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 STORE_FAST 4 ( second )				      								    								  
124 JUMP_ABSOLUTE 88					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
13 >> 128 LOAD_GLOBAL 2 ( sys )				      								    								  
130 LOAD_ATTR 3 ( maxsize )				      								    								  
132 UNARY_NEGATIVE					      								    								  
134 STORE_FAST 5 ( third )				      								    								  
							      								    								  
14 136 SETUP_LOOP 50 ( to 188 )				      								    								  
138 LOAD_GLOBAL 1 ( range )				      								    								  
140 LOAD_CONST 3 ( 0 )					      								    								  
142 LOAD_FAST 1 ( arr_size )				      								    								  
144 CALL_FUNCTION 2					      								    								  
146 GET_ITER						      								    								  
>> 148 FOR_ITER 36 ( to 186 )				      								    								  
150 STORE_FAST 3 ( i )					      								    								  
							      								    								  
15 152 LOAD_FAST 0 ( arr )				      								    								  
154 LOAD_FAST 3 ( i )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 5 ( third )				      								    								  
160 COMPARE_OP 4 ( > )					      								    								  
162 POP_JUMP_IF_FALSE 148				      								    								  
164 LOAD_FAST 0 ( arr )					      								    								  
166 LOAD_FAST 3 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_FAST 4 ( second )				      								    								  
172 COMPARE_OP 0 ( < )					      								    								  
174 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
16 176 LOAD_FAST 0 ( arr )				      								    								  
178 LOAD_FAST 3 ( i )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 STORE_FAST 5 ( third )				      								    								  
184 JUMP_ABSOLUTE 148					      								    								  
>> 186 POP_BLOCK					      								    								  
							      								    								  
17 >> 188 LOAD_GLOBAL 0 ( print )			      								    								  
190 LOAD_CONST 5 ( 'The Third Largest' )		      								    								  
192 LOAD_CONST 6 ( 'element is' )			      								    								  
194 LOAD_FAST 5 ( third )				      								    								  
196 CALL_FUNCTION 3					      								    								  
198 POP_TOP						      								    								  
200 LOAD_CONST 0 ( None )				      								    								  
202 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS				  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS
--							      --							    --								  --
Disassembly of <code object diagonalsquare at 0x7fbac0e8d540, def diagonalsquare ( mat , row , column ) :		    def 112 alsquare ( mat , row , column ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Diagonal one : " , end = "" )		    	print ( "Diagonal one : " , end = "" )			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 'Diagonal one : ' )			      	  for i in range ( 0 , row ) :				    	for i in range ( 0 , row ) :				  _sa.test/SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS.py",
4 LOAD_CONST 2 ( '' )					      	      for j in range ( 0 , column ) :			    	    for j in range ( 0 , column ) :			  line 30     def f_filled alsquare ( mat , row , co
6 LOAD_CONST 3 ( ( 'end' , ) )				      		  if ( i == j ) :				    		if i == j :					  lumn ) :			   ^ SyntaxError: in
8 CALL_FUNCTION_KW 2					      		      print ( "{} ".format ( mat [ i ] [ j ] * mat  		    print ( "{} ".format ( mat [ i ] [ j ] * mat  valid syntax
10 POP_TOP						      	  print ( " \n\nDiagonal two : " , end = "" )		    	print ( " \nDiagonal two : " , end = "" )		  
							      	  for i in range ( 0 , row ) :				    	for i in range ( 0 , row ) :				  
3 12 SETUP_LOOP 84 ( to 98 )				      	      for j in range ( 0 , column ) :			    	    for j in range ( 0 , column ) :			  
14 LOAD_GLOBAL 1 ( range )				      		  if ( i + j == column - 1 ) :			    		if i + j == column - 1 : print ( "{} ".format ( m 
16 LOAD_CONST 4 ( 0 )					      		      print ( "{} ".format ( mat [ i ] [ j ] * mat  								  
18 LOAD_FAST 1 ( row )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 70 ( to 96 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 SETUP_LOOP 64 ( to 94 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 4 ( 0 )					      								    								  
34 LOAD_FAST 2 ( column )				      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 50 ( to 92 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 3 ( i )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 52 LOAD_GLOBAL 0 ( print )				      								    								  
54 LOAD_CONST 5 ( '{} ' )				      								    								  
56 LOAD_METHOD 2 ( format )				      								    								  
58 LOAD_FAST 0 ( mat )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( mat )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 CALL_METHOD 1					      								    								  
82 LOAD_CONST 2 ( '' )					      								    								  
84 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
86 CALL_FUNCTION_KW 2					      								    								  
88 POP_TOP						      								    								  
90 JUMP_ABSOLUTE 40					      								    								  
>> 92 POP_BLOCK						      								    								  
>> 94 JUMP_ABSOLUTE 24					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
7 >> 98 LOAD_GLOBAL 0 ( print )				      								    								  
100 LOAD_CONST 6 ( ' \n\nDiagonal two : ' )		      								    								  
102 LOAD_CONST 2 ( '' )					      								    								  
104 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
							      								    								  
8 110 SETUP_LOOP 92 ( to 204 )				      								    								  
112 LOAD_GLOBAL 1 ( range )				      								    								  
114 LOAD_CONST 4 ( 0 )					      								    								  
116 LOAD_FAST 1 ( row )					      								    								  
118 CALL_FUNCTION 2					      								    								  
120 GET_ITER						      								    								  
>> 122 FOR_ITER 78 ( to 202 )				      								    								  
124 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 126 SETUP_LOOP 72 ( to 200 )				      								    								  
128 LOAD_GLOBAL 1 ( range )				      								    								  
130 LOAD_CONST 4 ( 0 )					      								    								  
132 LOAD_FAST 2 ( column )				      								    								  
134 CALL_FUNCTION 2					      								    								  
136 GET_ITER						      								    								  
>> 138 FOR_ITER 58 ( to 198 )				      								    								  
140 STORE_FAST 4 ( j )					      								    								  
							      								    								  
10 142 LOAD_FAST 3 ( i )				      								    								  
144 LOAD_FAST 4 ( j )					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_FAST 2 ( column )				      								    								  
150 LOAD_CONST 7 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 COMPARE_OP 2 ( == )					      								    								  
156 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
11 158 LOAD_GLOBAL 0 ( print )				      								    								  
160 LOAD_CONST 5 ( '{} ' )				      								    								  
162 LOAD_METHOD 2 ( format )				      								    								  
164 LOAD_FAST 0 ( mat )					      								    								  
166 LOAD_FAST 3 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_FAST 4 ( j )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_FAST 0 ( mat )					      								    								  
176 LOAD_FAST 3 ( i )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 LOAD_FAST 4 ( j )					      								    								  
182 BINARY_SUBSCR					      								    								  
184 BINARY_MULTIPLY					      								    								  
186 CALL_METHOD 1					      								    								  
188 LOAD_CONST 2 ( '' )					      								    								  
190 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
192 CALL_FUNCTION_KW 2					      								    								  
194 POP_TOP						      								    								  
196 JUMP_ABSOLUTE 138					      								    								  
>> 198 POP_BLOCK					      								    								  
>> 200 JUMP_ABSOLUTE 122				      								    								  
>> 202 POP_BLOCK					      								    								  
>> 204 LOAD_CONST 0 ( None )				      								    								  
206 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			      DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			    DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			  DIVIDE_LARGE_NUMBER_REPRESENTED_STRING
--							      --							    --								  --
Disassembly of <code object longDivision at 0x7fbac0e8d540, f def longDivision ( number , divisor ) :			    def longDivision ( number , divisor ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  ans = "" ;						    	ans = ''						  
2 STORE_FAST 2 ( ans )					      	  idx = 0 ;						    	idx = 0							  
							      	  temp = ord ( number [ idx ] ) - ord ( '0' ) ;		    	temp = ord ( number [ idx ] ) - ord ( '0' )		  
3 4 LOAD_CONST 2 ( 0 )					      	  while ( temp < divisor ) :				    	while temp < divisor :					  
6 STORE_FAST 3 ( idx )					      	      temp = ( temp * 10 + ord ( number [ idx + 1 ] ) - ord 	    temp = temp * 10 + ord ( number [ idx + 1 ] ) - ord ( 
							      	      idx += 1 ;					    	    idx += 1						  
4 8 LOAD_GLOBAL 0 ( ord )				      	  idx += 1 ;						    	idx += 1						  
10 LOAD_FAST 0 ( number )				      	  while ( ( len ( number ) ) > idx ) :			    	while len ( number ) > idx :				  
12 LOAD_FAST 3 ( idx )					      	      ans += chr ( math.floor ( temp // divisor ) + ord ( ' 	    ans += chr ( math.floor ( temp // divisor ) + ord ( ' 
14 BINARY_SUBSCR					      	      temp = ( ( temp % divisor ) * 10 + ord ( number [ idx 	    temp += ( temp % divisor ) * 10 + ord ( number [ idx  
16 CALL_FUNCTION 1					      	      idx += 1 ;					    	    idx += 1						  
18 LOAD_GLOBAL 0 ( ord )				      	  ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ans += 1							  
20 LOAD_CONST 3 ( '0' )					      	  if ( len ( ans ) == 0 ) :				    								  
22 CALL_FUNCTION 1					      	      return "0" ;					    								  
24 BINARY_SUBTRACT					      	  return ans ;						    								  
26 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
5 28 SETUP_LOOP 52 ( to 82 )				      								    								  
>> 30 LOAD_FAST 4 ( temp )				      								    								  
32 LOAD_FAST 1 ( divisor )				      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( temp )				      								    								  
40 LOAD_CONST 4 ( 10 )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_GLOBAL 0 ( ord )				      								    								  
46 LOAD_FAST 0 ( number )				      								    								  
48 LOAD_FAST 3 ( idx )					      								    								  
50 LOAD_CONST 5 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_GLOBAL 0 ( ord )				      								    								  
62 LOAD_CONST 3 ( '0' )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
7 70 LOAD_FAST 3 ( idx )				      								    								  
72 LOAD_CONST 5 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 3 ( idx )					      								    								  
78 JUMP_ABSOLUTE 30					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
8 >> 82 LOAD_FAST 3 ( idx )				      								    								  
84 LOAD_CONST 5 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 3 ( idx )					      								    								  
							      								    								  
9 90 SETUP_LOOP 86 ( to 178 )				      								    								  
>> 92 LOAD_GLOBAL 1 ( len )				      								    								  
94 LOAD_FAST 0 ( number )				      								    								  
96 CALL_FUNCTION 1					      								    								  
98 LOAD_FAST 3 ( idx )					      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 176				      								    								  
							      								    								  
10 104 LOAD_FAST 2 ( ans )				      								    								  
106 LOAD_GLOBAL 2 ( chr )				      								    								  
108 LOAD_GLOBAL 3 ( math )				      								    								  
110 LOAD_METHOD 4 ( floor )				      								    								  
112 LOAD_FAST 4 ( temp )				      								    								  
114 LOAD_FAST 1 ( divisor )				      								    								  
116 BINARY_FLOOR_DIVIDE					      								    								  
118 CALL_METHOD 1					      								    								  
120 LOAD_GLOBAL 0 ( ord )				      								    								  
122 LOAD_CONST 3 ( '0' )				      								    								  
124 CALL_FUNCTION 1					      								    								  
126 BINARY_ADD						      								    								  
128 CALL_FUNCTION 1					      								    								  
130 INPLACE_ADD						      								    								  
132 STORE_FAST 2 ( ans )				      								    								  
							      								    								  
11 134 LOAD_FAST 4 ( temp )				      								    								  
136 LOAD_FAST 1 ( divisor )				      								    								  
138 BINARY_MODULO					      								    								  
140 LOAD_CONST 4 ( 10 )					      								    								  
142 BINARY_MULTIPLY					      								    								  
144 LOAD_GLOBAL 0 ( ord )				      								    								  
146 LOAD_FAST 0 ( number )				      								    								  
148 LOAD_FAST 3 ( idx )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 BINARY_ADD						      								    								  
156 LOAD_GLOBAL 0 ( ord )				      								    								  
158 LOAD_CONST 3 ( '0' )				      								    								  
160 CALL_FUNCTION 1					      								    								  
162 BINARY_SUBTRACT					      								    								  
164 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
12 166 LOAD_FAST 3 ( idx )				      								    								  
168 LOAD_CONST 5 ( 1 )					      								    								  
170 INPLACE_ADD						      								    								  
172 STORE_FAST 3 ( idx )				      								    								  
174 JUMP_ABSOLUTE 92					      								    								  
>> 176 POP_BLOCK					      								    								  
							      								    								  
13 >> 178 LOAD_FAST 2 ( ans )				      								    								  
180 LOAD_GLOBAL 2 ( chr )				      								    								  
182 LOAD_GLOBAL 3 ( math )				      								    								  
184 LOAD_METHOD 4 ( floor )				      								    								  
186 LOAD_FAST 4 ( temp )				      								    								  
188 LOAD_FAST 1 ( divisor )				      								    								  
190 BINARY_FLOOR_DIVIDE					      								    								  
192 CALL_METHOD 1					      								    								  
194 LOAD_GLOBAL 0 ( ord )				      								    								  
196 LOAD_CONST 3 ( '0' )				      								    								  
198 CALL_FUNCTION 1					      								    								  
200 BINARY_ADD						      								    								  
202 CALL_FUNCTION 1					      								    								  
204 INPLACE_ADD						      								    								  
206 STORE_FAST 2 ( ans )				      								    								  
							      								    								  
14 208 LOAD_GLOBAL 1 ( len )				      								    								  
210 LOAD_FAST 2 ( ans )					      								    								  
212 CALL_FUNCTION 1					      								    								  
214 LOAD_CONST 2 ( 0 )					      								    								  
216 COMPARE_OP 2 ( == )					      								    								  
218 POP_JUMP_IF_FALSE 224				      								    								  
							      								    								  
15 220 LOAD_CONST 3 ( '0' )				      								    								  
222 RETURN_VALUE					      								    								  
							      								    								  
16 >> 224 LOAD_FAST 2 ( ans )				      								    								  
226 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
URLIFY_GIVEN_STRING_REPLACE_SPACES			      URLIFY_GIVEN_STRING_REPLACE_SPACES			    URLIFY_GIVEN_STRING_REPLACE_SPACES				  URLIFY_GIVEN_STRING_REPLACE_SPACES
--							      --							    --								  --
Disassembly of <code object replaceSpaces at 0x7fbac0e8bc90,  def replaceSpaces ( string ) :				    def replaceSpaces ( string ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( string )				      	  string = string.strip ( )				    	string = string.strip ( )				  
2 LOAD_METHOD 0 ( strip )				      	  i = len ( string )					    	i = len ( string )					  
4 CALL_METHOD 0						      	  space_count = string.count ( '' )			    	space_count = string.count ( '' )			  
6 STORE_FAST 0 ( string )				      	  new_length = i + space_count * 2			    	new_length = i + space_count * 2			  
							      	  if new_length > MAX :					    	if new_length > MAX :					  
3 8 LOAD_GLOBAL 1 ( len )				      	      return - 1					    	    return - 1						  
10 LOAD_FAST 0 ( string )				      	  index = new_length - 1				    	index = new_length - 1					  
12 CALL_FUNCTION 1					      	  string = list ( string )				    	string = list ( string )				  
14 STORE_FAST 1 ( i )					      	  for f in range ( i - 2 , new_length - 2 ) :		    	for f in range ( i - 2 , new_length - 2 ) :		  
							      	      string.append ( '0' )				    	    string.append ( '0' )				  
4 16 LOAD_FAST 0 ( string )				      	  for j in range ( i - 1 , 0 , - 1 ) :			    	for j in range ( i - 1 , 0 , - 1 ) :			  
18 LOAD_METHOD 2 ( count )				      	      if string [ j ] == '' :				    	    if string [ j ] == '' :				  
20 LOAD_CONST 1 ( '' )					      		  string [ index ] = '0'			    		string [ index ] = '0'				  
22 CALL_METHOD 1					      		  string [ index - 1 ] = '2'			    		string [ index - 1 ] = '2'			  
24 STORE_FAST 2 ( space_count )				      		  string [ index - 2 ] = '%'			    		string [ index - 2 ] = '%'			  
							      		  index = index - 3				    		index -= 1					  
5 26 LOAD_FAST 1 ( i )					      	      else :						    	    else :						  
28 LOAD_FAST 2 ( space_count )				      		  string [ index ] = string [ j ]		    		string = string [ index - 2 ]			  
30 LOAD_CONST 2 ( 2 )					      		  index -= 1					    		index -= 1					  
32 BINARY_MULTIPLY					      	  return ''.join ( string )				    	return ''.join ( string )				  
34 BINARY_ADD						      								    								  
36 STORE_FAST 3 ( new_length )				      								    								  
							      								    								  
6 38 LOAD_FAST 3 ( new_length )				      								    								  
40 LOAD_GLOBAL 3 ( MAX )				      								    								  
42 COMPARE_OP 4 ( > )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_CONST 3 ( - 1 )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 3 ( new_length )			      								    								  
52 LOAD_CONST 4 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 STORE_FAST 4 ( index )				      								    								  
							      								    								  
9 58 LOAD_GLOBAL 4 ( list )				      								    								  
60 LOAD_FAST 0 ( string )				      								    								  
62 CALL_FUNCTION 1					      								    								  
64 STORE_FAST 0 ( string )				      								    								  
							      								    								  
10 66 SETUP_LOOP 36 ( to 104 )				      								    								  
68 LOAD_GLOBAL 5 ( range )				      								    								  
70 LOAD_FAST 1 ( i )					      								    								  
72 LOAD_CONST 2 ( 2 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_FAST 3 ( new_length )				      								    								  
78 LOAD_CONST 2 ( 2 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 CALL_FUNCTION 2					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 14 ( to 102 )				      								    								  
88 STORE_FAST 5 ( f )					      								    								  
							      								    								  
11 90 LOAD_FAST 0 ( string )				      								    								  
92 LOAD_METHOD 6 ( append )				      								    								  
94 LOAD_CONST 5 ( '0' )					      								    								  
96 CALL_METHOD 1					      								    								  
98 POP_TOP						      								    								  
100 JUMP_ABSOLUTE 86					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
12 >> 104 SETUP_LOOP 98 ( to 204 )			      								    								  
106 LOAD_GLOBAL 5 ( range )				      								    								  
108 LOAD_FAST 1 ( i )					      								    								  
110 LOAD_CONST 4 ( 1 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 LOAD_CONST 6 ( 0 )					      								    								  
116 LOAD_CONST 3 ( - 1 )				      								    								  
118 CALL_FUNCTION 3					      								    								  
120 GET_ITER						      								    								  
>> 122 FOR_ITER 78 ( to 202 )				      								    								  
124 STORE_FAST 6 ( j )					      								    								  
							      								    								  
13 126 LOAD_FAST 0 ( string )				      								    								  
128 LOAD_FAST 6 ( j )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 1 ( '' )					      								    								  
134 COMPARE_OP 2 ( == )					      								    								  
136 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
14 138 LOAD_CONST 5 ( '0' )				      								    								  
140 LOAD_FAST 0 ( string )				      								    								  
142 LOAD_FAST 4 ( index )				      								    								  
144 STORE_SUBSCR					      								    								  
							      								    								  
15 146 LOAD_CONST 7 ( '2' )				      								    								  
148 LOAD_FAST 0 ( string )				      								    								  
150 LOAD_FAST 4 ( index )				      								    								  
152 LOAD_CONST 4 ( 1 )					      								    								  
154 BINARY_SUBTRACT					      								    								  
156 STORE_SUBSCR					      								    								  
							      								    								  
16 158 LOAD_CONST 8 ( '%' )				      								    								  
160 LOAD_FAST 0 ( string )				      								    								  
162 LOAD_FAST 4 ( index )				      								    								  
164 LOAD_CONST 2 ( 2 )					      								    								  
166 BINARY_SUBTRACT					      								    								  
168 STORE_SUBSCR					      								    								  
							      								    								  
17 170 LOAD_FAST 4 ( index )				      								    								  
172 LOAD_CONST 9 ( 3 )					      								    								  
174 BINARY_SUBTRACT					      								    								  
176 STORE_FAST 4 ( index )				      								    								  
178 JUMP_ABSOLUTE 122					      								    								  
							      								    								  
19 >> 180 LOAD_FAST 0 ( string )			      								    								  
182 LOAD_FAST 6 ( j )					      								    								  
184 BINARY_SUBSCR					      								    								  
186 LOAD_FAST 0 ( string )				      								    								  
188 LOAD_FAST 4 ( index )				      								    								  
190 STORE_SUBSCR					      								    								  
							      								    								  
20 192 LOAD_FAST 4 ( index )				      								    								  
194 LOAD_CONST 4 ( 1 )					      								    								  
196 INPLACE_SUBTRACT					      								    								  
198 STORE_FAST 4 ( index )				      								    								  
200 JUMP_ABSOLUTE 122					      								    								  
>> 202 POP_BLOCK					      								    								  
							      								    								  
21 >> 204 LOAD_CONST 1 ( '' )				      								    								  
206 LOAD_METHOD 7 ( join )				      								    								  
208 LOAD_FAST 0 ( string )				      								    								  
210 CALL_METHOD 1					      								    								  
212 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS		      LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS			    LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS			  LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS
--							      --							    --								  --
Disassembly of <code object longest at 0x7fbac0e8bc90, file " def longest ( a , n , k ) :				    def longest ( a , n , k ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  freq = [ 0 ] * n					    	freq = [ 0 ] * n					  
2 BUILD_LIST 1						      	  start = 0						    	start = 0						  
4 LOAD_FAST 1 ( n )					      	  end = 0						    	end = 0							  
6 BINARY_MULTIPLY					      	  now = 0						    	now = 0							  
8 STORE_FAST 3 ( freq )					      	  l = 0							    	l = 0							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 10 LOAD_CONST 1 ( 0 )					      	      freq [ a [ i ] ] += 1				    	    freq [ a [ i ] ] += 1				  
12 STORE_FAST 4 ( start )				      	      if ( freq [ a [ i ] ] == 1 ) :			    	    if freq [ a [ i ] ] == 1 :				  
							      		  now += 1					    		now += 1					  
4 14 LOAD_CONST 1 ( 0 )					      	      while ( now > k ) :				    	    while now > k :					  
16 STORE_FAST 5 ( end )					      		  freq [ a [ l ] ] -= 1				    		freq [ a [ l ] ] -= 1				  
							      		  if ( freq [ a [ l ] ] == 0 ) :		    		if freq [ a [ l ] ] == 0 :			  
5 18 LOAD_CONST 1 ( 0 )					      		      now -= 1					    		    now -= 1					  
20 STORE_FAST 6 ( now )					      		  l += 1					    		l += 1						  
							      	      if ( i - l + 1 >= end - start + 1 ) :		    	if i - l + 1 >= end - start + 1 :			  
6 22 LOAD_CONST 1 ( 0 )					      		  end = i					    	    i = i						  
24 STORE_FAST 7 ( l )					      		  start = l					    	for i in range ( n , end + 1 , end - start ) :		  
							      	  for i in range ( start , end + 1 ) :			    	    print ( "			   " + start )		  
7 26 SETUP_LOOP 158 ( to 186 )				      	      print ( a [ i ] , end = " " )			    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 146 ( to 184 )				      								    								  
38 STORE_FAST 8 ( i )					      								    								  
							      								    								  
8 40 LOAD_FAST 3 ( freq )				      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 LOAD_FAST 8 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 DUP_TOP_TWO						      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 ROT_THREE						      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
9 60 LOAD_FAST 3 ( freq )				      								    								  
62 LOAD_FAST 0 ( a )					      								    								  
64 LOAD_FAST 8 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
10 76 LOAD_FAST 6 ( now )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 6 ( now )					      								    								  
							      								    								  
11 >> 84 SETUP_LOOP 64 ( to 150 )			      								    								  
>> 86 LOAD_FAST 6 ( now )				      								    								  
88 LOAD_FAST 2 ( k )					      								    								  
90 COMPARE_OP 4 ( > )					      								    								  
92 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
12 94 LOAD_FAST 3 ( freq )				      								    								  
96 LOAD_FAST 0 ( a )					      								    								  
98 LOAD_FAST 7 ( l )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 DUP_TOP_TWO						      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_SUBTRACT					      								    								  
110 ROT_THREE						      								    								  
112 STORE_SUBSCR					      								    								  
							      								    								  
13 114 LOAD_FAST 3 ( freq )				      								    								  
116 LOAD_FAST 0 ( a )					      								    								  
118 LOAD_FAST 7 ( l )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 1 ( 0 )					      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
14 130 LOAD_FAST 6 ( now )				      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 INPLACE_SUBTRACT					      								    								  
136 STORE_FAST 6 ( now )				      								    								  
							      								    								  
15 >> 138 LOAD_FAST 7 ( l )				      								    								  
140 LOAD_CONST 2 ( 1 )					      								    								  
142 INPLACE_ADD						      								    								  
144 STORE_FAST 7 ( l )					      								    								  
146 JUMP_ABSOLUTE 86					      								    								  
>> 148 POP_BLOCK					      								    								  
							      								    								  
16 >> 150 LOAD_FAST 8 ( i )				      								    								  
152 LOAD_FAST 7 ( l )					      								    								  
154 BINARY_SUBTRACT					      								    								  
156 LOAD_CONST 2 ( 1 )					      								    								  
158 BINARY_ADD						      								    								  
160 LOAD_FAST 5 ( end )					      								    								  
162 LOAD_FAST 4 ( start )				      								    								  
164 BINARY_SUBTRACT					      								    								  
166 LOAD_CONST 2 ( 1 )					      								    								  
168 BINARY_ADD						      								    								  
170 COMPARE_OP 5 ( >= )					      								    								  
172 POP_JUMP_IF_FALSE 36				      								    								  
							      								    								  
17 174 LOAD_FAST 8 ( i )				      								    								  
176 STORE_FAST 5 ( end )				      								    								  
							      								    								  
18 178 LOAD_FAST 7 ( l )				      								    								  
180 STORE_FAST 4 ( start )				      								    								  
182 JUMP_ABSOLUTE 36					      								    								  
>> 184 POP_BLOCK					      								    								  
							      								    								  
19 >> 186 SETUP_LOOP 38 ( to 226 )			      								    								  
188 LOAD_GLOBAL 0 ( range )				      								    								  
190 LOAD_FAST 4 ( start )				      								    								  
192 LOAD_FAST 5 ( end )					      								    								  
194 LOAD_CONST 2 ( 1 )					      								    								  
196 BINARY_ADD						      								    								  
198 CALL_FUNCTION 2					      								    								  
200 GET_ITER						      								    								  
>> 202 FOR_ITER 20 ( to 224 )				      								    								  
204 STORE_FAST 8 ( i )					      								    								  
							      								    								  
20 206 LOAD_GLOBAL 1 ( print )				      								    								  
208 LOAD_FAST 0 ( a )					      								    								  
210 LOAD_FAST 8 ( i )					      								    								  
212 BINARY_SUBSCR					      								    								  
214 LOAD_CONST 3 ( ' ' )				      								    								  
216 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
218 CALL_FUNCTION_KW 2					      								    								  
220 POP_TOP						      								    								  
222 JUMP_ABSOLUTE 202					      								    								  
>> 224 POP_BLOCK					      								    								  
>> 226 LOAD_CONST 0 ( None )				      								    								  
228 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_K_MODULUS_ARRAY_ELEMENT				      FINDING_K_MODULUS_ARRAY_ELEMENT				    FINDING_K_MODULUS_ARRAY_ELEMENT				  FINDING_K_MODULUS_ARRAY_ELEMENT
--							      --							    --								  --
Disassembly of <code object printEqualModNumbers at 0x7fbac0e def printEqualModNumbers ( arr , n ) :			    def printEqualModNumbers ( arr , n ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( ) ;					    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  d = arr [ n - 1 ] - arr [ 0 ] ;			    	d = arr [ n - 1 ] - arr [ 0 ]				  
4 CALL_METHOD 0						      	  v = [ ] ;						    	v = [ ]							  
6 POP_TOP						      	  i = 1 ;						    	i = 1							  
							      	  while ( i * i <= d ) :				    	while i * i <= d :					  
3 8 LOAD_FAST 0 ( arr )					      	      if ( d % i == 0 ) :				    	    if d % i == 0 :					  
10 LOAD_FAST 1 ( n )					      		  v.append ( i ) ;				    		v.append ( i )					  
12 LOAD_CONST 1 ( 1 )					      		  if ( i != d / i ) :				    		if i != d / i :					  
14 BINARY_SUBTRACT					      		      v.append ( d / i ) ;			    		    v.append ( d / i )				  
16 BINARY_SUBSCR					      	      i += 1 ;						    		i += 1						  
18 LOAD_FAST 0 ( arr )					      	  for i in range ( len ( v ) ) :			    	for i in range ( len ( v ) ) :				  
20 LOAD_CONST 2 ( 0 )					      	      temp = arr [ 0 ] % v [ i ] ;			    	    temp = arr [ 0 ] % v [ i ]				  
22 BINARY_SUBSCR					      	      j = 1 ;						    	    j = 1						  
24 BINARY_SUBTRACT					      	      while ( j < n ) :					    	    while j < n :					  
26 STORE_FAST 2 ( d )					      		  if ( arr [ j ] % v [ i ] != temp ) :		    		if arr [ j ] [ i ] % v [ i ] % j != temp :	  
							      		      break ;					    		    break					  
4 28 BUILD_LIST 0					      		  j += 1 ;					    	if j == n :						  
30 STORE_FAST 3 ( v )					      	      if ( j == n ) :					    	    print ( "end" , end = "" )				  
							      		  print ( v [ i ] , end = " " ) ;		    								  
5 32 LOAD_CONST 1 ( 1 )					      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 SETUP_LOOP 72 ( to 110 )				      								    								  
>> 38 LOAD_FAST 4 ( i )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_FAST 2 ( d )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
48 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( d )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_MODULO					      								    								  
56 LOAD_CONST 2 ( 0 )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( v )					      								    								  
64 LOAD_METHOD 1 ( append )				      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 CALL_METHOD 1					      								    								  
70 POP_TOP						      								    								  
							      								    								  
9 72 LOAD_FAST 4 ( i )					      								    								  
74 LOAD_FAST 2 ( d )					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_TRUE_DIVIDE					      								    								  
80 COMPARE_OP 3 ( != )					      								    								  
82 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
10 84 LOAD_FAST 3 ( v )					      								    								  
86 LOAD_METHOD 1 ( append )				      								    								  
88 LOAD_FAST 2 ( d )					      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_TRUE_DIVIDE					      								    								  
94 CALL_METHOD 1					      								    								  
96 POP_TOP						      								    								  
							      								    								  
11 >> 98 LOAD_FAST 4 ( i )				      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 4 ( i )					      								    								  
106 JUMP_ABSOLUTE 38					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
12 >> 110 SETUP_LOOP 108 ( to 220 )			      								    								  
112 LOAD_GLOBAL 2 ( range )				      								    								  
114 LOAD_GLOBAL 3 ( len )				      								    								  
116 LOAD_FAST 3 ( v )					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 92 ( to 218 )				      								    								  
126 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 128 LOAD_FAST 0 ( arr )				      								    								  
130 LOAD_CONST 2 ( 0 )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 3 ( v )					      								    								  
136 LOAD_FAST 4 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 BINARY_MODULO					      								    								  
142 STORE_FAST 5 ( temp )				      								    								  
							      								    								  
14 144 LOAD_CONST 1 ( 1 )				      								    								  
146 STORE_FAST 6 ( j )					      								    								  
							      								    								  
15 148 SETUP_LOOP 42 ( to 192 )				      								    								  
>> 150 LOAD_FAST 6 ( j )				      								    								  
152 LOAD_FAST 1 ( n )					      								    								  
154 COMPARE_OP 0 ( < )					      								    								  
156 POP_JUMP_IF_FALSE 190				      								    								  
							      								    								  
16 158 LOAD_FAST 0 ( arr )				      								    								  
160 LOAD_FAST 6 ( j )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_FAST 3 ( v )					      								    								  
166 LOAD_FAST 4 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 BINARY_MODULO					      								    								  
172 LOAD_FAST 5 ( temp )				      								    								  
174 COMPARE_OP 3 ( != )					      								    								  
176 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
17 178 BREAK_LOOP					      								    								  
							      								    								  
18 >> 180 LOAD_FAST 6 ( j )				      								    								  
182 LOAD_CONST 1 ( 1 )					      								    								  
184 INPLACE_ADD						      								    								  
186 STORE_FAST 6 ( j )					      								    								  
188 JUMP_ABSOLUTE 150					      								    								  
>> 190 POP_BLOCK					      								    								  
							      								    								  
19 >> 192 LOAD_FAST 6 ( j )				      								    								  
194 LOAD_FAST 1 ( n )					      								    								  
196 COMPARE_OP 2 ( == )					      								    								  
198 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
20 200 LOAD_GLOBAL 4 ( print )				      								    								  
202 LOAD_FAST 3 ( v )					      								    								  
204 LOAD_FAST 4 ( i )					      								    								  
206 BINARY_SUBSCR					      								    								  
208 LOAD_CONST 3 ( ' ' )				      								    								  
210 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
212 CALL_FUNCTION_KW 2					      								    								  
214 POP_TOP						      								    								  
216 JUMP_ABSOLUTE 124					      								    								  
>> 218 POP_BLOCK					      								    								  
>> 220 LOAD_CONST 0 ( None )				      								    								  
222 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_THE_ROOTED_TREE_BY_USING_START_AND_<unk> H_TIME_OF_ CONSTRUCT_THE_ROOTED_TREE_BY_USING_START_AND_<unk> H_TIME_OF_ CONSTRUCT_THE_ROOTED_TREE_BY_USING_START_AND_<unk> H_TIME_OF_ CONSTRUCT_THE_ROOTED_TREE_BY_USING_START_AND_<unk> H_TIME_OF_
--							      --							    --								  --
Disassembly of <code object Restore_Tree at 0x7fbac0e8d540, f def Restore_Tree ( S , E ) :				    def Restore_Tree ( Identity , N = 2 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( N )					      	  Identity = N * [ 0 ]					    	Identity = N * [ 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
4 BUILD_LIST 1						      	      Identity [ Start [ i ] ] = i			    	    Identity [ i ] = i					  
6 BINARY_MULTIPLY					      	  parent = N * [ - 1 ]					    	parent = N [ - 1 ]					  
8 STORE_FAST 2 ( Identity )				      	  curr_parent = Identity [ 0 ]				    	curr_parent = Identity [ 0 ]				  
							      	  for j in range ( 1 , N ) :				    	for j in range ( 1 , N ) :				  
3 10 SETUP_LOOP 28 ( to 40 )				      	      child = Identity [ j ]				    	    child = Identity [ j ]				  
12 LOAD_GLOBAL 1 ( range )				      	      if End [ child ] - j > 1 :			    	    if End [ child ] - j > 1 :				  
14 LOAD_GLOBAL 0 ( N )					      		  parent [ child ] = curr_parent		    		parent [ child ] = curr_parent			  
16 CALL_FUNCTION 1					      		  curr_parent = child				    		curr_parent = child				  
18 GET_ITER						      	      else :						    		while End [ child ] == End [ parent ] :		  
>> 20 FOR_ITER 16 ( to 38 )				      		  parent [ child ] = curr_parent		    		    child = parent [ child ]			  
22 STORE_FAST 3 ( i )					      		  while End [ child ] == End [ parent [ child ] ] : 		    curr_parent = parent [ child ]		  
							      		      child = parent [ child ]			    		    while parent [ parent ] == Identity [ parent  
4 24 LOAD_FAST 3 ( i )					      		      curr_parent = parent [ child ]		    			curr_parent = parent [ child ]		  
26 LOAD_FAST 2 ( Identity )				      		      if curr_parent == Identity [ 0 ] :	    			if parent [ parent ] == Identity [ 0 ] :  
28 LOAD_GLOBAL 2 ( Start )				      			  break					    			    break				  
30 LOAD_FAST 3 ( i )					      	  for i in range ( N ) :				    		for i in range ( 3 , N ) :			  
32 BINARY_SUBSCR					      	      parent [ i ] += 1					    		    parent [ i ] = parent [ parent ]		  
34 STORE_SUBSCR						      	  return parent						    	    return ''						  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_GLOBAL 0 ( N )				      								    								  
42 LOAD_CONST 2 ( - 1 )					      								    								  
44 BUILD_LIST 1						      								    								  
46 BINARY_MULTIPLY					      								    								  
48 STORE_FAST 4 ( parent )				      								    								  
							      								    								  
6 50 LOAD_FAST 2 ( Identity )				      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 5 ( curr_parent )				      								    								  
							      								    								  
7 58 SETUP_LOOP 120 ( to 180 )				      								    								  
60 LOAD_GLOBAL 1 ( range )				      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 LOAD_GLOBAL 0 ( N )					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 106 ( to 178 )				      								    								  
72 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 74 LOAD_FAST 2 ( Identity )				      								    								  
76 LOAD_FAST 6 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 7 ( child )				      								    								  
							      								    								  
9 82 LOAD_GLOBAL 3 ( End )				      								    								  
84 LOAD_FAST 7 ( child )				      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 6 ( j )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 98 LOAD_FAST 5 ( curr_parent )			      								    								  
100 LOAD_FAST 4 ( parent )				      								    								  
102 LOAD_FAST 7 ( child )				      								    								  
104 STORE_SUBSCR					      								    								  
							      								    								  
11 106 LOAD_FAST 7 ( child )				      								    								  
108 STORE_FAST 5 ( curr_parent )			      								    								  
110 JUMP_ABSOLUTE 70					      								    								  
							      								    								  
13 >> 112 LOAD_FAST 5 ( curr_parent )			      								    								  
114 LOAD_FAST 4 ( parent )				      								    								  
116 LOAD_FAST 7 ( child )				      								    								  
118 STORE_SUBSCR					      								    								  
							      								    								  
14 120 SETUP_LOOP 54 ( to 176 )				      								    								  
>> 122 LOAD_GLOBAL 3 ( End )				      								    								  
124 LOAD_FAST 7 ( child )				      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_GLOBAL 3 ( End )				      								    								  
130 LOAD_FAST 4 ( parent )				      								    								  
132 LOAD_FAST 7 ( child )				      								    								  
134 BINARY_SUBSCR					      								    								  
136 BINARY_SUBSCR					      								    								  
138 COMPARE_OP 2 ( == )					      								    								  
140 POP_JUMP_IF_FALSE 174				      								    								  
							      								    								  
15 142 LOAD_FAST 4 ( parent )				      								    								  
144 LOAD_FAST 7 ( child )				      								    								  
146 BINARY_SUBSCR					      								    								  
148 STORE_FAST 7 ( child )				      								    								  
							      								    								  
16 150 LOAD_FAST 4 ( parent )				      								    								  
152 LOAD_FAST 7 ( child )				      								    								  
154 BINARY_SUBSCR					      								    								  
156 STORE_FAST 5 ( curr_parent )			      								    								  
							      								    								  
17 158 LOAD_FAST 5 ( curr_parent )			      								    								  
160 LOAD_FAST 2 ( Identity )				      								    								  
162 LOAD_CONST 1 ( 0 )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 COMPARE_OP 2 ( == )					      								    								  
168 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
18 170 BREAK_LOOP					      								    								  
172 JUMP_ABSOLUTE 122					      								    								  
>> 174 POP_BLOCK					      								    								  
>> 176 JUMP_ABSOLUTE 70					      								    								  
>> 178 POP_BLOCK					      								    								  
							      								    								  
19 >> 180 SETUP_LOOP 32 ( to 214 )			      								    								  
182 LOAD_GLOBAL 1 ( range )				      								    								  
184 LOAD_GLOBAL 0 ( N )					      								    								  
186 CALL_FUNCTION 1					      								    								  
188 GET_ITER						      								    								  
>> 190 FOR_ITER 20 ( to 212 )				      								    								  
192 STORE_FAST 3 ( i )					      								    								  
							      								    								  
20 194 LOAD_FAST 4 ( parent )				      								    								  
196 LOAD_FAST 3 ( i )					      								    								  
198 DUP_TOP_TWO						      								    								  
200 BINARY_SUBSCR					      								    								  
202 LOAD_CONST 3 ( 1 )					      								    								  
204 INPLACE_ADD						      								    								  
206 ROT_THREE						      								    								  
208 STORE_SUBSCR					      								    								  
210 JUMP_ABSOLUTE 190					      								    								  
>> 212 POP_BLOCK					      								    								  
							      								    								  
21 >> 214 LOAD_FAST 4 ( parent )			      								    								  
216 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIQUE_ELEMENTS_MATRIX				      FIND_UNIQUE_ELEMENTS_MATRIX				    FIND_UNIQUE_ELEMENTS_MATRIX					  FIND_UNIQUE_ELEMENTS_MATRIX
--							      --							    --								  --
Disassembly of <code object unique at 0x7fbac0e8bc90, file "< def unique ( mat , n , m ) :				    def unique ( mat , n , m ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maximum = 0 ; flag = 0				    	maximum = 0						  
2 STORE_FAST 3 ( maximum )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , m ) :			    	    for j in range ( 0 , m ) :				  
6 STORE_FAST 4 ( flag )					      		  if ( maximum < mat [ i ] [ j ] ) :		    		if maximum < mat [ i ] [ j ] :			  
							      		      maximum = mat [ i ] [ j ] ;		    		    maximum = mat [ i ] [ j ]			  
3 8 SETUP_LOOP 66 ( to 76 )				      	  uniqueElementDict = [ 0 ] * ( maximum + 1 )		    	uniqueElementDict = [ 0 ] * maximum + 1			  
10 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
12 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , m ) :			    	    for j in range ( 0 , n ) :				  
14 LOAD_FAST 1 ( n )					      		  uniqueElementDict [ mat [ i ] [ j ] ] += 1	    		uniqueElementDict [ mat [ i ] [ j ] ] += 1	  
16 CALL_FUNCTION 2					      	  for key in range ( maximum + 1 ) :			    for key in range ( maximum + 1 ) :				  
18 GET_ITER						      	      if uniqueElementDict [ key ] == 1 :		    	if key == key :						  
>> 20 FOR_ITER 52 ( to 74 )				      		  print ( key , end = " " )			    	    print ( "No matrix matrix in the matrix" )		  
22 STORE_FAST 5 ( i )					      		  flag = 1					    if flag == 0 :						  
							      	  if ( flag == 0 ) :					    	print ( "No matrix matrix in the matrix" )		  
4 24 SETUP_LOOP 46 ( to 72 )				      	      print ( "No unique element in the matrix" )	    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 2 ( m )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 32 ( to 70 )				      								    								  
38 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 3 ( maximum )				      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 5 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 0 ( < )					      								    								  
54 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( mat )				      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 6 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 STORE_FAST 3 ( maximum )				      								    								  
68 JUMP_ABSOLUTE 36					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 JUMP_ABSOLUTE 20					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
7 >> 76 LOAD_CONST 1 ( 0 )				      								    								  
78 BUILD_LIST 1						      								    								  
80 LOAD_FAST 3 ( maximum )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 BINARY_MULTIPLY					      								    								  
88 STORE_FAST 7 ( uniqueElementDict )			      								    								  
							      								    								  
8 90 SETUP_LOOP 62 ( to 154 )				      								    								  
92 LOAD_GLOBAL 0 ( range )				      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 LOAD_FAST 1 ( n )					      								    								  
98 CALL_FUNCTION 2					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 48 ( to 152 )				      								    								  
104 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 106 SETUP_LOOP 42 ( to 150 )				      								    								  
108 LOAD_GLOBAL 0 ( range )				      								    								  
110 LOAD_CONST 1 ( 0 )					      								    								  
112 LOAD_FAST 2 ( m )					      								    								  
114 CALL_FUNCTION 2					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 28 ( to 148 )				      								    								  
120 STORE_FAST 6 ( j )					      								    								  
							      								    								  
10 122 LOAD_FAST 7 ( uniqueElementDict )		      								    								  
124 LOAD_FAST 0 ( mat )					      								    								  
126 LOAD_FAST 5 ( i )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 6 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 DUP_TOP_TWO						      								    								  
136 BINARY_SUBSCR					      								    								  
138 LOAD_CONST 2 ( 1 )					      								    								  
140 INPLACE_ADD						      								    								  
142 ROT_THREE						      								    								  
144 STORE_SUBSCR					      								    								  
146 JUMP_ABSOLUTE 118					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 JUMP_ABSOLUTE 102				      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
11 >> 154 SETUP_LOOP 48 ( to 204 )			      								    								  
156 LOAD_GLOBAL 0 ( range )				      								    								  
158 LOAD_FAST 3 ( maximum )				      								    								  
160 LOAD_CONST 2 ( 1 )					      								    								  
162 BINARY_ADD						      								    								  
164 CALL_FUNCTION 1					      								    								  
166 GET_ITER						      								    								  
>> 168 FOR_ITER 32 ( to 202 )				      								    								  
170 STORE_FAST 8 ( key )				      								    								  
							      								    								  
12 172 LOAD_FAST 7 ( uniqueElementDict )		      								    								  
174 LOAD_FAST 8 ( key )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 LOAD_CONST 2 ( 1 )					      								    								  
180 COMPARE_OP 2 ( == )					      								    								  
182 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
13 184 LOAD_GLOBAL 1 ( print )				      								    								  
186 LOAD_FAST 8 ( key )					      								    								  
188 LOAD_CONST 3 ( ' ' )				      								    								  
190 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
192 CALL_FUNCTION_KW 2					      								    								  
194 POP_TOP						      								    								  
							      								    								  
14 196 LOAD_CONST 2 ( 1 )				      								    								  
198 STORE_FAST 4 ( flag )				      								    								  
200 JUMP_ABSOLUTE 168					      								    								  
>> 202 POP_BLOCK					      								    								  
							      								    								  
15 >> 204 LOAD_FAST 4 ( flag )				      								    								  
206 LOAD_CONST 1 ( 0 )					      								    								  
208 COMPARE_OP 2 ( == )					      								    								  
210 POP_JUMP_IF_FALSE 220				      								    								  
							      								    								  
16 212 LOAD_GLOBAL 1 ( print )				      								    								  
214 LOAD_CONST 5 ( 'No unique element in the matrix' )	      								    								  
216 CALL_FUNCTION 1					      								    								  
218 POP_TOP						      								    								  
>> 220 LOAD_CONST 0 ( None )				      								    								  
222 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SERIES_LARGEST_GCD_SUM_EQUALS_N				      SERIES_LARGEST_GCD_SUM_EQUALS_N				    SERIES_LARGEST_GCD_SUM_EQUALS_N				  SERIES_LARGEST_GCD_SUM_EQUALS_N
--							      --							    --								  --
Disassembly of <code object print_sequence at 0x7fbac0e8de40, def print_sequence ( n , k ) :				    def print_sequence ( n , k ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  b = int ( n / ( k * ( k + 1 ) / 2 ) ) ;		    	b = int ( n / ( k + ( k + 1 ) / 2 ) )			  
2 LOAD_FAST 0 ( n )					      	  if b == 0 :						    	if b == 0 :						  
4 LOAD_FAST 1 ( k )					      	      print ( "-1" )					    	    print ( "-1" )					  
6 LOAD_FAST 1 ( k )					      	  else :						    	else :							  
8 LOAD_CONST 1 ( 1 )					      	      r = 1 ;						    	    r = 1						  
10 BINARY_ADD						      	      x = 1						    	    x = 1						  
12 BINARY_MULTIPLY					      	      while x ** 2 <= n :				    	    while x ** 2 <= n :					  
14 LOAD_CONST 2 ( 2 )					      		  if n % x != 0 :				    		if n % x != 0 :					  
16 BINARY_TRUE_DIVIDE					      		      continue ;				    		    continue					  
18 BINARY_TRUE_DIVIDE					      		  elif x <= b and x > r :			    	    elif x <= b and x > r :				  
20 CALL_FUNCTION 1					      		      r = x					    		r = x						  
22 STORE_FAST 2 ( b )					      		  elif n / x <= b and n / x > r :		    	    elif n / ( x + b ) and n / ( n ** 2 ) :		  
							      		      r = n / x					    		r = n / x					  
3 24 LOAD_FAST 2 ( b )					      		  x = x + 1					    	    x = x + 1						  
26 LOAD_CONST 3 ( 0 )					      	      i = 1						    	i = 1							  
28 COMPARE_OP 2 ( == )					      	      while i < k :					    	while i < k :						  
30 POP_JUMP_IF_FALSE 42					      		  print ( r * i , end = " " )			    	    print ( "-" * i )					  
							      		  i = i + 1					    	    i = i + 1						  
4 32 LOAD_GLOBAL 1 ( print )				      	      last_term = n - ( r * ( k * ( k - 1 ) / 2 ) )	    	print ( "-i " * i )					  
34 LOAD_CONST 4 ( '-1' )				      	      print ( last_term )				    								  
36 CALL_FUNCTION 1					      								    								  
38 POP_TOP						      								    								  
40 JUMP_FORWARD 178 ( to 220 )				      								    								  
							      								    								  
6 >> 42 LOAD_CONST 1 ( 1 )				      								    								  
44 STORE_FAST 3 ( r )					      								    								  
							      								    								  
7 46 LOAD_CONST 1 ( 1 )					      								    								  
48 STORE_FAST 4 ( x )					      								    								  
							      								    								  
8 50 SETUP_LOOP 94 ( to 146 )				      								    								  
>> 52 LOAD_FAST 4 ( x )					      								    								  
54 LOAD_CONST 2 ( 2 )					      								    								  
56 BINARY_POWER						      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 COMPARE_OP 1 ( <= )					      								    								  
62 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
9 64 LOAD_FAST 0 ( n )					      								    								  
66 LOAD_FAST 4 ( x )					      								    								  
68 BINARY_MODULO					      								    								  
70 LOAD_CONST 3 ( 0 )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 76 JUMP_ABSOLUTE 52					      								    								  
78 JUMP_FORWARD 54 ( to 134 )				      								    								  
							      								    								  
11 >> 80 LOAD_FAST 4 ( x )				      								    								  
82 LOAD_FAST 2 ( b )					      								    								  
84 COMPARE_OP 1 ( <= )					      								    								  
86 POP_JUMP_IF_FALSE 102				      								    								  
88 LOAD_FAST 4 ( x )					      								    								  
90 LOAD_FAST 3 ( r )					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
12 96 LOAD_FAST 4 ( x )					      								    								  
98 STORE_FAST 3 ( r )					      								    								  
100 JUMP_FORWARD 32 ( to 134 )				      								    								  
							      								    								  
13 >> 102 LOAD_FAST 0 ( n )				      								    								  
104 LOAD_FAST 4 ( x )					      								    								  
106 BINARY_TRUE_DIVIDE					      								    								  
108 LOAD_FAST 2 ( b )					      								    								  
110 COMPARE_OP 1 ( <= )					      								    								  
112 POP_JUMP_IF_FALSE 134				      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 LOAD_FAST 4 ( x )					      								    								  
118 BINARY_TRUE_DIVIDE					      								    								  
120 LOAD_FAST 3 ( r )					      								    								  
122 COMPARE_OP 4 ( > )					      								    								  
124 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
14 126 LOAD_FAST 0 ( n )				      								    								  
128 LOAD_FAST 4 ( x )					      								    								  
130 BINARY_TRUE_DIVIDE					      								    								  
132 STORE_FAST 3 ( r )					      								    								  
							      								    								  
15 >> 134 LOAD_FAST 4 ( x )				      								    								  
136 LOAD_CONST 1 ( 1 )					      								    								  
138 BINARY_ADD						      								    								  
140 STORE_FAST 4 ( x )					      								    								  
142 JUMP_ABSOLUTE 52					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
16 >> 146 LOAD_CONST 1 ( 1 )				      								    								  
148 STORE_FAST 5 ( i )					      								    								  
							      								    								  
17 150 SETUP_LOOP 36 ( to 188 )				      								    								  
>> 152 LOAD_FAST 5 ( i )				      								    								  
154 LOAD_FAST 1 ( k )					      								    								  
156 COMPARE_OP 0 ( < )					      								    								  
158 POP_JUMP_IF_FALSE 186				      								    								  
							      								    								  
18 160 LOAD_GLOBAL 1 ( print )				      								    								  
162 LOAD_FAST 3 ( r )					      								    								  
164 LOAD_FAST 5 ( i )					      								    								  
166 BINARY_MULTIPLY					      								    								  
168 LOAD_CONST 5 ( ' ' )				      								    								  
170 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
172 CALL_FUNCTION_KW 2					      								    								  
174 POP_TOP						      								    								  
							      								    								  
19 176 LOAD_FAST 5 ( i )				      								    								  
178 LOAD_CONST 1 ( 1 )					      								    								  
180 BINARY_ADD						      								    								  
182 STORE_FAST 5 ( i )					      								    								  
184 JUMP_ABSOLUTE 152					      								    								  
>> 186 POP_BLOCK					      								    								  
							      								    								  
20 >> 188 LOAD_FAST 0 ( n )				      								    								  
190 LOAD_FAST 3 ( r )					      								    								  
192 LOAD_FAST 1 ( k )					      								    								  
194 LOAD_FAST 1 ( k )					      								    								  
196 LOAD_CONST 1 ( 1 )					      								    								  
198 BINARY_SUBTRACT					      								    								  
200 BINARY_MULTIPLY					      								    								  
202 LOAD_CONST 2 ( 2 )					      								    								  
204 BINARY_TRUE_DIVIDE					      								    								  
206 BINARY_MULTIPLY					      								    								  
208 BINARY_SUBTRACT					      								    								  
210 STORE_FAST 6 ( last_term )				      								    								  
							      								    								  
21 212 LOAD_GLOBAL 1 ( print )				      								    								  
214 LOAD_FAST 6 ( last_term )				      								    								  
216 CALL_FUNCTION 1					      								    								  
218 POP_TOP						      								    								  
>> 220 LOAD_CONST 0 ( None )				      								    								  
222 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_OPERATIONS_TO_MOVE_ALL_UPPERCASE_CHARACTERS MINIMUM_NUMBER_OF_OPERATIONS_TO_MOVE_ALL_UPPERCASE_CHARACTERS MINIMUM_NUMBER_OF_OPERATIONS_TO_MOVE_ALL_UPPERCASE_CHARACTERS MINIMUM_NUMBER_OF_OPERATIONS_TO_MOVE_ALL_UPPERCASE_CHARACTERS
--							      --							    --								  --
Disassembly of <code object minOperations at 0x7fbac0e8de40,  def minOperations ( str , n ) :				    def minOperations ( str , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  lastUpper = - 1					    	lastthr = - 1						  
2 STORE_FAST 2 ( lastUpper )				      	  firstLower = - 1					    	firsthl = - 1						  
							      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
3 4 LOAD_CONST 1 ( - 1 )				      	      if ( str [ i ].isupper ( ) ) :			    	    if str [ i ].isupper ( ) :				  
6 STORE_FAST 3 ( firstLower )				      		  lastUpper = i					    		lastthr = i					  
							      		  break						    		break						  
4 8 SETUP_LOOP 42 ( to 52 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
10 LOAD_GLOBAL 0 ( range )				      	      if ( str [ i ].islower ( ) ) :			    	    if str [ i ].islower ( ) :				  
12 LOAD_FAST 1 ( n )					      		  firstLower = i				    		firstthr = i					  
14 LOAD_CONST 2 ( 1 )					      		  break						    		break						  
16 BINARY_SUBTRACT					      	  if ( lastUpper == - 1 or firstLower == - 1 ) :	    	if lastthr == - 1 or firstdisk == - 1 :			  
18 LOAD_CONST 1 ( - 1 )					      	      return 0						    	    return 0						  
20 LOAD_CONST 1 ( - 1 )					      	  countUpper = 0					    	count36 = 0						  
22 CALL_FUNCTION 3					      	  for i in range ( firstLower , n ) :			    	for i in range ( firstdiagonal , n ) :			  
24 GET_ITER						      	      if ( str [ i ].isupper ( ) ) :			    	    if str [ i ].isupper ( ) :				  
>> 26 FOR_ITER 22 ( to 50 )				      		  countUpper += 1				    		countthr += 1					  
28 STORE_FAST 4 ( i )					      	  countLower = 0					    count0 = 0							  
							      	  for i in range ( lastUpper ) :			    for i in range ( lastthr , n ) :				  
5 30 LOAD_FAST 0 ( str )				      	      if ( str [ i ].islower ( ) ) :			    	if str [ i ].isupper ( ) :				  
32 LOAD_FAST 4 ( i )					      		  countLower += 1				    	    countthr += 1					  
34 BINARY_SUBSCR					      	  return min ( countLower , countUpper )		    return 0							  
36 LOAD_METHOD 1 ( isupper )				      								    								  
38 CALL_METHOD 0					      								    								  
40 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 42 LOAD_FAST 4 ( i )					      								    								  
44 STORE_FAST 2 ( lastUpper )				      								    								  
							      								    								  
7 46 BREAK_LOOP						      								    								  
48 JUMP_ABSOLUTE 26					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
8 >> 52 SETUP_LOOP 34 ( to 88 )				      								    								  
54 LOAD_GLOBAL 0 ( range )				      								    								  
56 LOAD_FAST 1 ( n )					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 22 ( to 86 )				      								    								  
64 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 66 LOAD_FAST 0 ( str )				      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_METHOD 2 ( islower )				      								    								  
74 CALL_METHOD 0					      								    								  
76 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
10 78 LOAD_FAST 4 ( i )					      								    								  
80 STORE_FAST 3 ( firstLower )				      								    								  
							      								    								  
11 82 BREAK_LOOP					      								    								  
84 JUMP_ABSOLUTE 62					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
12 >> 88 LOAD_FAST 2 ( lastUpper )			      								    								  
90 LOAD_CONST 1 ( - 1 )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_TRUE 104					      								    								  
96 LOAD_FAST 3 ( firstLower )				      								    								  
98 LOAD_CONST 1 ( - 1 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
13 >> 104 LOAD_CONST 3 ( 0 )				      								    								  
106 RETURN_VALUE					      								    								  
							      								    								  
14 >> 108 LOAD_CONST 3 ( 0 )				      								    								  
110 STORE_FAST 5 ( countUpper )				      								    								  
							      								    								  
15 112 SETUP_LOOP 38 ( to 152 )				      								    								  
114 LOAD_GLOBAL 0 ( range )				      								    								  
116 LOAD_FAST 3 ( firstLower )				      								    								  
118 LOAD_FAST 1 ( n )					      								    								  
120 CALL_FUNCTION 2					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 24 ( to 150 )				      								    								  
126 STORE_FAST 4 ( i )					      								    								  
							      								    								  
16 128 LOAD_FAST 0 ( str )				      								    								  
130 LOAD_FAST 4 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_METHOD 1 ( isupper )				      								    								  
136 CALL_METHOD 0					      								    								  
138 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
17 140 LOAD_FAST 5 ( countUpper )			      								    								  
142 LOAD_CONST 2 ( 1 )					      								    								  
144 INPLACE_ADD						      								    								  
146 STORE_FAST 5 ( countUpper )				      								    								  
148 JUMP_ABSOLUTE 124					      								    								  
>> 150 POP_BLOCK					      								    								  
							      								    								  
18 >> 152 LOAD_CONST 3 ( 0 )				      								    								  
154 STORE_FAST 6 ( countLower )				      								    								  
							      								    								  
19 156 SETUP_LOOP 36 ( to 194 )				      								    								  
158 LOAD_GLOBAL 0 ( range )				      								    								  
160 LOAD_FAST 2 ( lastUpper )				      								    								  
162 CALL_FUNCTION 1					      								    								  
164 GET_ITER						      								    								  
>> 166 FOR_ITER 24 ( to 192 )				      								    								  
168 STORE_FAST 4 ( i )					      								    								  
							      								    								  
20 170 LOAD_FAST 0 ( str )				      								    								  
172 LOAD_FAST 4 ( i )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 LOAD_METHOD 2 ( islower )				      								    								  
178 CALL_METHOD 0					      								    								  
180 POP_JUMP_IF_FALSE 166				      								    								  
							      								    								  
21 182 LOAD_FAST 6 ( countLower )			      								    								  
184 LOAD_CONST 2 ( 1 )					      								    								  
186 INPLACE_ADD						      								    								  
188 STORE_FAST 6 ( countLower )				      								    								  
190 JUMP_ABSOLUTE 166					      								    								  
>> 192 POP_BLOCK					      								    								  
							      								    								  
22 >> 194 LOAD_GLOBAL 3 ( min )				      								    								  
196 LOAD_FAST 6 ( countLower )				      								    								  
198 LOAD_FAST 5 ( countUpper )				      								    								  
200 CALL_FUNCTION 2					      								    								  
202 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_PERMUTATIONS_CHECK_IF_AN_ARRAY_IS_STACK_PERMUTATION_OF_ STACK_PERMUTATIONS_CHECK_IF_AN_ARRAY_IS_STACK_PERMUTATION_OF_ STACK_PERMUTATIONS_CHECK_IF_AN_ARRAY_IS_STACK_PERMUTATION_OF_ STACK_PERMUTATIONS_CHECK_IF_AN_ARRAY_IS_STACK_PERMUTATION_OF_
--							      --							    --								  --
Disassembly of <code object checkStackPermutation at 0x7fbac0 def checkStackPermutation ( ip , op , n ) :		    def checkStackPermutation ( ip , op , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( Queue )				      	  Input = Queue ( )					    	Input = Queue ( )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.test/STACK_PERMUTATIONS_CHECK_IF_AN_ARRAY_IS_S
4 STORE_FAST 3 ( Input )				      	      Input.put ( ip [ i ] )				    	    Input.put ( ip [ i ] )				  TACK_PERMUTATION_OF_OTHER.py", line 63     break
							      	  output = Queue ( )					    	output = Queue ( )					     ^ SyntaxError: 'break' outside loop
3 6 SETUP_LOOP 30 ( to 38 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
8 LOAD_GLOBAL 1 ( range )				      	      output.put ( op [ i ] )				    	    output.put ( op [ i ] )				  
10 LOAD_FAST 2 ( n )					      	  tempStack = [ ]					    	tempStack = [ ]						  
12 CALL_FUNCTION 1					      	  while ( not Input.empty ( ) ) :			    	while not Input.empty ( ) :				  
14 GET_ITER						      	      ele = Input.queue [ 0 ]				    	    ele = Input.queue [ 0 ]				  
>> 16 FOR_ITER 18 ( to 36 )				      	      Input.get ( )					    	    Input.get ( )					  
18 STORE_FAST 4 ( i )					      	      if ( ele == output.queue [ 0 ] ) :		    	    if ele == output.queue [ 0 ] :			  
							      		  output.get ( )				    		output.get ( )					  
4 20 LOAD_FAST 3 ( Input )				      		  while ( len ( tempStack ) != 0 ) :		    		while len ( tempStack ) != 0 :			  
22 LOAD_METHOD 2 ( put )				      		      if ( tempStack [ - 1 ] == output.queue [ 0 ]  		    if tempStack [ - 1 ] == output.queue [ 0 ] :  
24 LOAD_FAST 0 ( ip )					      			  tempStack.pop ( )			    			tempStack.pop ( )			  
26 LOAD_FAST 4 ( i )					      			  output.get ( )			    			break					  
28 BINARY_SUBSCR					      		      else :					    	    else :						  
30 CALL_METHOD 1					      			  break					    		tempStack.append ( output )			  
32 POP_TOP						      	      else :						    if len ( tempStack ) == 2 :					  
34 JUMP_ABSOLUTE 16					      		  tempStack.append ( ele )			    	break							  
>> 36 POP_BLOCK						      	  return ( Input.empty ( ) and len ( tempStack ) == 0 )	    return tempStack						  
							      								    								  
5 >> 38 LOAD_GLOBAL 0 ( Queue )				      								    								  
40 CALL_FUNCTION 0					      								    								  
42 STORE_FAST 5 ( output )				      								    								  
							      								    								  
6 44 SETUP_LOOP 30 ( to 76 )				      								    								  
46 LOAD_GLOBAL 1 ( range )				      								    								  
48 LOAD_FAST 2 ( n )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 18 ( to 74 )				      								    								  
56 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 58 LOAD_FAST 5 ( output )				      								    								  
60 LOAD_METHOD 2 ( put )				      								    								  
62 LOAD_FAST 1 ( op )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_METHOD 1					      								    								  
70 POP_TOP						      								    								  
72 JUMP_ABSOLUTE 54					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 BUILD_LIST 0					      								    								  
78 STORE_FAST 6 ( tempStack )				      								    								  
							      								    								  
9 80 SETUP_LOOP 120 ( to 202 )				      								    								  
>> 82 LOAD_FAST 3 ( Input )				      								    								  
84 LOAD_METHOD 3 ( empty )				      								    								  
86 CALL_METHOD 0					      								    								  
88 POP_JUMP_IF_TRUE 200					      								    								  
							      								    								  
10 90 LOAD_FAST 3 ( Input )				      								    								  
92 LOAD_ATTR 4 ( queue )				      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 STORE_FAST 7 ( ele )					      								    								  
							      								    								  
11 100 LOAD_FAST 3 ( Input )				      								    								  
102 LOAD_METHOD 5 ( get )				      								    								  
104 CALL_METHOD 0					      								    								  
106 POP_TOP						      								    								  
							      								    								  
12 108 LOAD_FAST 7 ( ele )				      								    								  
110 LOAD_FAST 5 ( output )				      								    								  
112 LOAD_ATTR 4 ( queue )				      								    								  
114 LOAD_CONST 1 ( 0 )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 188				      								    								  
							      								    								  
13 122 LOAD_FAST 5 ( output )				      								    								  
124 LOAD_METHOD 5 ( get )				      								    								  
126 CALL_METHOD 0					      								    								  
128 POP_TOP						      								    								  
							      								    								  
14 130 SETUP_LOOP 66 ( to 198 )				      								    								  
>> 132 LOAD_GLOBAL 6 ( len )				      								    								  
134 LOAD_FAST 6 ( tempStack )				      								    								  
136 CALL_FUNCTION 1					      								    								  
138 LOAD_CONST 1 ( 0 )					      								    								  
140 COMPARE_OP 3 ( != )					      								    								  
142 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
15 144 LOAD_FAST 6 ( tempStack )			      								    								  
146 LOAD_CONST 2 ( - 1 )				      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_FAST 5 ( output )				      								    								  
152 LOAD_ATTR 4 ( queue )				      								    								  
154 LOAD_CONST 1 ( 0 )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 COMPARE_OP 2 ( == )					      								    								  
160 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
16 162 LOAD_FAST 6 ( tempStack )			      								    								  
164 LOAD_METHOD 7 ( pop )				      								    								  
166 CALL_METHOD 0					      								    								  
168 POP_TOP						      								    								  
							      								    								  
17 170 LOAD_FAST 5 ( output )				      								    								  
172 LOAD_METHOD 5 ( get )				      								    								  
174 CALL_METHOD 0					      								    								  
176 POP_TOP						      								    								  
178 JUMP_ABSOLUTE 132					      								    								  
							      								    								  
19 >> 180 BREAK_LOOP					      								    								  
182 JUMP_ABSOLUTE 132					      								    								  
>> 184 POP_BLOCK					      								    								  
186 JUMP_ABSOLUTE 82					      								    								  
							      								    								  
21 >> 188 LOAD_FAST 6 ( tempStack )			      								    								  
190 LOAD_METHOD 8 ( append )				      								    								  
192 LOAD_FAST 7 ( ele )					      								    								  
194 CALL_METHOD 1					      								    								  
196 POP_TOP						      								    								  
>> 198 JUMP_ABSOLUTE 82					      								    								  
>> 200 POP_BLOCK					      								    								  
							      								    								  
22 >> 202 LOAD_FAST 3 ( Input )				      								    								  
204 LOAD_METHOD 3 ( empty )				      								    								  
206 CALL_METHOD 0					      								    								  
208 JUMP_IF_FALSE_OR_POP 220				      								    								  
210 LOAD_GLOBAL 6 ( len )				      								    								  
212 LOAD_FAST 6 ( tempStack )				      								    								  
214 CALL_FUNCTION 1					      								    								  
216 LOAD_CONST 1 ( 0 )					      								    								  
218 COMPARE_OP 2 ( == )					      								    								  
>> 220 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_<unk> E_3		      COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_<unk> E_3		    COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_<unk> E_3		  COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_<unk> E_3
--							      --							    --								  --
Disassembly of <code object findgroups at 0x7fbac0e89d20, fil def findgroups ( arr , n ) :				    def findgroups ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  c = [ 0 , 0 , 0 ]					    	c = [ 0 , 0 , 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 BUILD_LIST 3						      	      c [ arr [ i ] % 3 ] += 1				    	    c [ arr [ i ] % 3 ] += 1				  
8 STORE_FAST 2 ( c )					      	  res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 )		    	res += c [ 0 ] * ( c [ 0 ] - c [ 0 ] - 1 ) >> 1		  
							      	  res += c [ 1 ] * c [ 2 ]				    	res += c [ 1 ] * c [ 2 ]				  
3 10 LOAD_CONST 1 ( 0 )					      	  res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) /  	res += ( c [ 0 ] - c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) / 6 )  
12 STORE_FAST 3 ( res )					      	  res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) /  	res += ( c [ 1 ] - c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) / 6	  
							      	  res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) )  	res += ( c [ 1 ] - c [ 0 ] ) / 6			  
4 14 SETUP_LOOP 42 ( to 58 )				      	  res += c [ 0 ] * c [ 1 ] * c [ 2 ]			    	res += ( c [ 0 ] - c [ 1 ] ) / 6			  
16 LOAD_GLOBAL 0 ( range )				      	  return res						    	res += ( c [ 1 ] * c [ 0 ] ) / 6			  
18 LOAD_CONST 1 ( 0 )					      								    	res += 1						  
20 LOAD_FAST 1 ( n )					      								    	return res						  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 28 ( to 56 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( c )					      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 2 ( 3 )					      								    								  
40 BINARY_MODULO					      								    								  
42 DUP_TOP_TWO						      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 ROT_THREE						      								    								  
52 STORE_SUBSCR						      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
6 >> 58 LOAD_FAST 3 ( res )				      								    								  
60 LOAD_FAST 2 ( c )					      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 2 ( c )					      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 3 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_CONST 3 ( 1 )					      								    								  
80 BINARY_RSHIFT					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 86 LOAD_FAST 3 ( res )				      								    								  
88 LOAD_FAST 2 ( c )					      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 2 ( c )					      								    								  
96 LOAD_CONST 4 ( 2 )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 3 ( res )				      								    								  
							      								    								  
8 106 LOAD_FAST 3 ( res )				      								    								  
108 LOAD_FAST 2 ( c )					      								    								  
110 LOAD_CONST 1 ( 0 )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 2 ( c )					      								    								  
116 LOAD_CONST 1 ( 0 )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_CONST 3 ( 1 )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 BINARY_MULTIPLY					      								    								  
126 LOAD_FAST 2 ( c )					      								    								  
128 LOAD_CONST 1 ( 0 )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 4 ( 2 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 BINARY_MULTIPLY					      								    								  
138 LOAD_CONST 5 ( 6 )					      								    								  
140 BINARY_TRUE_DIVIDE					      								    								  
142 INPLACE_ADD						      								    								  
144 STORE_FAST 3 ( res )				      								    								  
							      								    								  
9 146 LOAD_FAST 3 ( res )				      								    								  
148 LOAD_FAST 2 ( c )					      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 2 ( c )					      								    								  
156 LOAD_CONST 3 ( 1 )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_CONST 3 ( 1 )					      								    								  
162 BINARY_SUBTRACT					      								    								  
164 BINARY_MULTIPLY					      								    								  
166 LOAD_FAST 2 ( c )					      								    								  
168 LOAD_CONST 3 ( 1 )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 LOAD_CONST 4 ( 2 )					      								    								  
174 BINARY_SUBTRACT					      								    								  
176 BINARY_MULTIPLY					      								    								  
178 LOAD_CONST 5 ( 6 )					      								    								  
180 BINARY_TRUE_DIVIDE					      								    								  
182 INPLACE_ADD						      								    								  
184 STORE_FAST 3 ( res )				      								    								  
							      								    								  
10 186 LOAD_FAST 3 ( res )				      								    								  
188 LOAD_FAST 2 ( c )					      								    								  
190 LOAD_CONST 4 ( 2 )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 LOAD_FAST 2 ( c )					      								    								  
196 LOAD_CONST 4 ( 2 )					      								    								  
198 BINARY_SUBSCR					      								    								  
200 LOAD_CONST 3 ( 1 )					      								    								  
202 BINARY_SUBTRACT					      								    								  
204 BINARY_MULTIPLY					      								    								  
206 LOAD_FAST 2 ( c )					      								    								  
208 LOAD_CONST 4 ( 2 )					      								    								  
210 BINARY_SUBSCR					      								    								  
212 LOAD_CONST 4 ( 2 )					      								    								  
214 BINARY_SUBTRACT					      								    								  
216 BINARY_MULTIPLY					      								    								  
218 LOAD_CONST 5 ( 6 )					      								    								  
220 BINARY_TRUE_DIVIDE					      								    								  
222 INPLACE_ADD						      								    								  
224 STORE_FAST 3 ( res )				      								    								  
							      								    								  
11 226 LOAD_FAST 3 ( res )				      								    								  
228 LOAD_FAST 2 ( c )					      								    								  
230 LOAD_CONST 1 ( 0 )					      								    								  
232 BINARY_SUBSCR					      								    								  
234 LOAD_FAST 2 ( c )					      								    								  
236 LOAD_CONST 3 ( 1 )					      								    								  
238 BINARY_SUBSCR					      								    								  
240 BINARY_MULTIPLY					      								    								  
242 LOAD_FAST 2 ( c )					      								    								  
244 LOAD_CONST 4 ( 2 )					      								    								  
246 BINARY_SUBSCR					      								    								  
248 BINARY_MULTIPLY					      								    								  
250 INPLACE_ADD						      								    								  
252 STORE_FAST 3 ( res )				      								    								  
							      								    								  
12 254 LOAD_FAST 3 ( res )				      								    								  
256 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LCS_LONGEST_COMMON_SUBSEQUENCE_<unk> STRINGS_1		      LCS_LONGEST_COMMON_SUBSEQUENCE_<unk> STRINGS_1		    LCS_LONGEST_COMMON_SUBSEQUENCE_<unk> STRINGS_1		  LCS_LONGEST_COMMON_SUBSEQUENCE_<unk> STRINGS_1
--							      --							    --								  --
Disassembly of <code object lcsOf3 at 0x7fbac0e89d20, file "< def lcsOf3 ( i , j , k ) :				    def lcsOf3 ( i , j , k ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( i )					      	  if ( i == - 1 or j == - 1 or k == - 1 ) :		    	if ( i == - 1 or j == - 1 ) :				  
2 LOAD_CONST 1 ( - 1 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( dp [ i ] [ j ] [ k ] != - 1 ) :			    	if dp [ i ] [ j ] [ k ] != - 1 :			  
6 POP_JUMP_IF_TRUE 24					      	      return dp [ i ] [ j ] [ k ]			    	    return dp [ i ] [ j ] [ k ]				  
8 LOAD_FAST 1 ( j )					      	  if ( X [ i ] == Y [ j ] and Y [ j ] == Z [ k ] ) :	    	if X [ i ] == Y [ j ] and Y [ j ] == Z [ k ] :		  
10 LOAD_CONST 1 ( - 1 )					      	      dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k 	    dp [ i ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 ) 
12 COMPARE_OP 2 ( == )					      	      return dp [ i ] [ j ] [ k ]			    	    return dp [ i ] [ j ] [ k ] [ k ] = max ( max ( lcsOf 
14 POP_JUMP_IF_TRUE 24					      	  else :						    	else :							  
16 LOAD_FAST 2 ( k )					      	      dp [ i ] [ j ] [ k ] = max ( max ( lcsOf3 ( i - 1 , j 	    dp [ i ] [ j ] [ k ] = csOfOf3 ( i - 1 , j , k ) , l  
18 LOAD_CONST 1 ( - 1 )					      	      return dp [ i ] [ j ] [ k ]			    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 >> 24 LOAD_CONST 2 ( 0 )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_GLOBAL 0 ( dp )				      								    								  
30 LOAD_FAST 0 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 2 ( k )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 1 ( - 1 )					      								    								  
44 COMPARE_OP 3 ( != )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 48 LOAD_GLOBAL 0 ( dp )				      								    								  
50 LOAD_FAST 0 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 1 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
6 >> 64 LOAD_GLOBAL 1 ( X )				      								    								  
66 LOAD_FAST 0 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_GLOBAL 2 ( Y )					      								    								  
72 LOAD_FAST 1 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 152				      								    								  
80 LOAD_GLOBAL 2 ( Y )					      								    								  
82 LOAD_FAST 1 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_GLOBAL 3 ( Z )					      								    								  
88 LOAD_FAST 2 ( k )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
7 96 LOAD_CONST 3 ( 1 )					      								    								  
98 LOAD_GLOBAL 4 ( lcsOf3 )				      								    								  
100 LOAD_FAST 0 ( i )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 LOAD_FAST 1 ( j )					      								    								  
108 LOAD_CONST 3 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_FAST 2 ( k )					      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 CALL_FUNCTION 3					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_GLOBAL 0 ( dp )				      								    								  
124 LOAD_FAST 0 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 1 ( j )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 2 ( k )					      								    								  
134 STORE_SUBSCR					      								    								  
							      								    								  
8 136 LOAD_GLOBAL 0 ( dp )				      								    								  
138 LOAD_FAST 0 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 1 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 2 ( k )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 RETURN_VALUE					      								    								  
							      								    								  
10 >> 152 LOAD_GLOBAL 5 ( max )				      								    								  
154 LOAD_GLOBAL 5 ( max )				      								    								  
156 LOAD_GLOBAL 4 ( lcsOf3 )				      								    								  
158 LOAD_FAST 0 ( i )					      								    								  
160 LOAD_CONST 3 ( 1 )					      								    								  
162 BINARY_SUBTRACT					      								    								  
164 LOAD_FAST 1 ( j )					      								    								  
166 LOAD_FAST 2 ( k )					      								    								  
168 CALL_FUNCTION 3					      								    								  
170 LOAD_GLOBAL 4 ( lcsOf3 )				      								    								  
172 LOAD_FAST 0 ( i )					      								    								  
174 LOAD_FAST 1 ( j )					      								    								  
176 LOAD_CONST 3 ( 1 )					      								    								  
178 BINARY_SUBTRACT					      								    								  
180 LOAD_FAST 2 ( k )					      								    								  
182 CALL_FUNCTION 3					      								    								  
184 CALL_FUNCTION 2					      								    								  
186 LOAD_GLOBAL 4 ( lcsOf3 )				      								    								  
188 LOAD_FAST 0 ( i )					      								    								  
190 LOAD_FAST 1 ( j )					      								    								  
192 LOAD_FAST 2 ( k )					      								    								  
194 LOAD_CONST 3 ( 1 )					      								    								  
196 BINARY_SUBTRACT					      								    								  
198 CALL_FUNCTION 3					      								    								  
200 CALL_FUNCTION 2					      								    								  
202 LOAD_GLOBAL 0 ( dp )				      								    								  
204 LOAD_FAST 0 ( i )					      								    								  
206 BINARY_SUBSCR					      								    								  
208 LOAD_FAST 1 ( j )					      								    								  
210 BINARY_SUBSCR					      								    								  
212 LOAD_FAST 2 ( k )					      								    								  
214 STORE_SUBSCR					      								    								  
							      								    								  
11 216 LOAD_GLOBAL 0 ( dp )				      								    								  
218 LOAD_FAST 0 ( i )					      								    								  
220 BINARY_SUBSCR					      								    								  
222 LOAD_FAST 1 ( j )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 LOAD_FAST 2 ( k )					      								    								  
228 BINARY_SUBSCR					      								    								  
230 RETURN_VALUE					      								    								  
232 LOAD_CONST 0 ( None )				      								    								  
234 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_LARGE_NUMBER_999			      CHECK_DIVISIBILITY_LARGE_NUMBER_999			    CHECK_DIVISIBILITY_LARGE_NUMBER_999				  CHECK_DIVISIBILITY_LARGE_NUMBER_999
--							      --							    --								  --
Disassembly of <code object isDivisible999 at 0x7fbac0e8bc90, def isDivisible999 ( num ) :				    def isDivisible999 ( num ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( num ) ;					    	n = len ( num )						  
2 LOAD_FAST 0 ( num )					      	  if ( n == 0 or num [ 0 ] == '0' ) :			    	if n == 0 or num [ 0 ] == '0' :				  
4 CALL_FUNCTION 1					      	      return true					    	    return true						  
6 STORE_FAST 1 ( n )					      	  if ( ( n % 3 ) == 1 ) :				    	if n % 3 == 1 :						  
							      	      num = "00" + num					    	    num = '00' + num					  
3 8 LOAD_FAST 1 ( n )					      	  if ( ( n % 3 ) == 2 ) :				    	if n % 3 == 2 :						  
10 LOAD_CONST 1 ( 0 )					      	      num = "0" + num					    	    num = '0' + num					  
12 COMPARE_OP 2 ( == )					      	  gSum = 0						    	gSum = 0						  
14 POP_JUMP_IF_TRUE 28					      	  for i in range ( 0 , n , 3 ) :			    	for i in range ( 0 , n , 3 ) :				  
16 LOAD_FAST 0 ( num )					      	      group = 0						    	    group = 0						  
18 LOAD_CONST 1 ( 0 )					      	      group += ( ord ( num [ i ] ) - 48 ) * 100		    	    group += ord ( num [ i ] ) - 48 * 100		  
20 BINARY_SUBSCR					      	      group += ( ord ( num [ i + 1 ] ) - 48 ) * 10	    	    group += ord ( num [ i + 1 ] ) - 48 * 10		  
22 LOAD_CONST 2 ( '0' )					      	      group += ( ord ( num [ i + 2 ] ) - 48 )		    	    group += ord ( num [ i + 2 ] ) - 48 * 10		  
24 COMPARE_OP 2 ( == )					      	      gSum += group					    	    group += ord ( num [ i + 1 ] ) - 48			  
26 POP_JUMP_IF_FALSE 32					      	  if ( gSum > 1000 ) :					    	    if group > 0 :					  
							      	      num = str ( gSum )				    		gSum += 1					  
4 >> 28 LOAD_GLOBAL 1 ( true )				      	      n = len ( num )					    	    if gSum == 0 :					  
30 RETURN_VALUE						      	      gSum = isDivisible999 ( num )			    		gSum = 1					  
							      	  return ( gSum == 999 )				    	    gSum = 0						  
5 >> 32 LOAD_FAST 1 ( n )				      								    	return gSum						  
34 LOAD_CONST 3 ( 3 )					      								    								  
36 BINARY_MODULO					      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 44 LOAD_CONST 5 ( '00' )				      								    								  
46 LOAD_FAST 0 ( num )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 0 ( num )					      								    								  
							      								    								  
7 >> 52 LOAD_FAST 1 ( n )				      								    								  
54 LOAD_CONST 3 ( 3 )					      								    								  
56 BINARY_MODULO					      								    								  
58 LOAD_CONST 6 ( 2 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 64 LOAD_CONST 2 ( '0' )				      								    								  
66 LOAD_FAST 0 ( num )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 0 ( num )					      								    								  
							      								    								  
9 >> 72 LOAD_CONST 1 ( 0 )				      								    								  
74 STORE_FAST 2 ( gSum )				      								    								  
							      								    								  
10 76 SETUP_LOOP 108 ( to 186 )				      								    								  
78 LOAD_GLOBAL 2 ( range )				      								    								  
80 LOAD_CONST 1 ( 0 )					      								    								  
82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_CONST 3 ( 3 )					      								    								  
86 CALL_FUNCTION 3					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 92 ( to 184 )				      								    								  
92 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 94 LOAD_CONST 1 ( 0 )				      								    								  
96 STORE_FAST 4 ( group )				      								    								  
							      								    								  
12 98 LOAD_FAST 4 ( group )				      								    								  
100 LOAD_GLOBAL 3 ( ord )				      								    								  
102 LOAD_FAST 0 ( num )					      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 LOAD_CONST 7 ( 48 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 LOAD_CONST 8 ( 100 )				      								    								  
116 BINARY_MULTIPLY					      								    								  
118 INPLACE_ADD						      								    								  
120 STORE_FAST 4 ( group )				      								    								  
							      								    								  
13 122 LOAD_FAST 4 ( group )				      								    								  
124 LOAD_GLOBAL 3 ( ord )				      								    								  
126 LOAD_FAST 0 ( num )					      								    								  
128 LOAD_FAST 3 ( i )					      								    								  
130 LOAD_CONST 4 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 BINARY_SUBSCR					      								    								  
136 CALL_FUNCTION 1					      								    								  
138 LOAD_CONST 7 ( 48 )					      								    								  
140 BINARY_SUBTRACT					      								    								  
142 LOAD_CONST 9 ( 10 )					      								    								  
144 BINARY_MULTIPLY					      								    								  
146 INPLACE_ADD						      								    								  
148 STORE_FAST 4 ( group )				      								    								  
							      								    								  
14 150 LOAD_FAST 4 ( group )				      								    								  
152 LOAD_GLOBAL 3 ( ord )				      								    								  
154 LOAD_FAST 0 ( num )					      								    								  
156 LOAD_FAST 3 ( i )					      								    								  
158 LOAD_CONST 6 ( 2 )					      								    								  
160 BINARY_ADD						      								    								  
162 BINARY_SUBSCR					      								    								  
164 CALL_FUNCTION 1					      								    								  
166 LOAD_CONST 7 ( 48 )					      								    								  
168 BINARY_SUBTRACT					      								    								  
170 INPLACE_ADD						      								    								  
172 STORE_FAST 4 ( group )				      								    								  
							      								    								  
15 174 LOAD_FAST 2 ( gSum )				      								    								  
176 LOAD_FAST 4 ( group )				      								    								  
178 INPLACE_ADD						      								    								  
180 STORE_FAST 2 ( gSum )				      								    								  
182 JUMP_ABSOLUTE 90					      								    								  
>> 184 POP_BLOCK					      								    								  
							      								    								  
16 >> 186 LOAD_FAST 2 ( gSum )				      								    								  
188 LOAD_CONST 10 ( 1000 )				      								    								  
190 COMPARE_OP 4 ( > )					      								    								  
192 POP_JUMP_IF_FALSE 218				      								    								  
							      								    								  
17 194 LOAD_GLOBAL 4 ( str )				      								    								  
196 LOAD_FAST 2 ( gSum )				      								    								  
198 CALL_FUNCTION 1					      								    								  
200 STORE_FAST 0 ( num )				      								    								  
							      								    								  
18 202 LOAD_GLOBAL 0 ( len )				      								    								  
204 LOAD_FAST 0 ( num )					      								    								  
206 CALL_FUNCTION 1					      								    								  
208 STORE_FAST 1 ( n )					      								    								  
							      								    								  
19 210 LOAD_GLOBAL 5 ( isDivisible999 )			      								    								  
212 LOAD_FAST 0 ( num )					      								    								  
214 CALL_FUNCTION 1					      								    								  
216 STORE_FAST 2 ( gSum )				      								    								  
							      								    								  
20 >> 218 LOAD_FAST 2 ( gSum )				      								    								  
220 LOAD_CONST 11 ( 999 )				      								    								  
222 COMPARE_OP 2 ( == )					      								    								  
224 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
A_PR<unk> CT_ARRAY_PUZZLE				      A_PR<unk> CT_ARRAY_PUZZLE					    A_PR<unk> CT_ARRAY_PUZZLE					  A_PR<unk> CT_ARRAY_PUZZLE
--							      --							    --								  --
Disassembly of <code object productArray at 0x7fbac0e8d540, f def productArray ( arr , n ) :				    def productArray ( arr , n = 2 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      print ( 0 )					    	    print ( 0 )						  
4 COMPARE_OP 2 ( == )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  left = [ 0 ] * n					    	left = [ 0 ] * n					  
							      	  right = [ 0 ] * n					    	right = [ 0 ] * n					  
3 8 LOAD_GLOBAL 0 ( print )				      	  prod = [ 0 ] * n					    	prod = [ 0 ] * n					  
10 LOAD_CONST 2 ( 0 )					      	  left [ 0 ] = 1					    	left [ 0 ] = 1						  
12 CALL_FUNCTION 1					      	  right [ n - 1 ] = 1					    	right [ n - 1 ] = 1					  
14 POP_TOP						      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
							      	      left [ i ] = arr [ i - 1 ] * left [ i - 1 ]	    	    left [ i ] = arr [ i - 1 ] * left [ i - 1 ]		  
4 16 LOAD_CONST 0 ( None )				      	  for j in range ( n - 2 , - 1 , - 1 ) :		    	for j in range ( n - 2 , - 1 , - 1 ) :			  
18 RETURN_VALUE						      	      right [ j ] = arr [ j + 1 ] * right [ j + 1 ]	    	    right [ j ] = arr [ j + 1 ] * right [ j + 1 ]	  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
5 >> 20 LOAD_CONST 2 ( 0 )				      	      prod [ i ] = left [ i ] * right [ i ]		    	    print ( "prod prod prod prod prod prod prod prod prod 
22 BUILD_LIST 1						      	  for i in range ( n ) :				    								  
24 LOAD_FAST 1 ( n )					      	      print ( prod [ i ] , end = ' ' )			    								  
26 BINARY_MULTIPLY					      								    								  
28 STORE_FAST 2 ( left )				      								    								  
							      								    								  
6 30 LOAD_CONST 2 ( 0 )					      								    								  
32 BUILD_LIST 1						      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 STORE_FAST 3 ( right )				      								    								  
							      								    								  
7 40 LOAD_CONST 2 ( 0 )					      								    								  
42 BUILD_LIST 1						      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 STORE_FAST 4 ( prod )				      								    								  
							      								    								  
8 50 LOAD_CONST 1 ( 1 )					      								    								  
52 LOAD_FAST 2 ( left )					      								    								  
54 LOAD_CONST 2 ( 0 )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
9 58 LOAD_CONST 1 ( 1 )					      								    								  
60 LOAD_FAST 3 ( right )				      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 STORE_SUBSCR						      								    								  
							      								    								  
10 70 SETUP_LOOP 46 ( to 118 )				      								    								  
72 LOAD_GLOBAL 1 ( range )				      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 LOAD_FAST 1 ( n )					      								    								  
78 CALL_FUNCTION 2					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 32 ( to 116 )				      								    								  
84 STORE_FAST 5 ( i )					      								    								  
							      								    								  
11 86 LOAD_FAST 0 ( arr )				      								    								  
88 LOAD_FAST 5 ( i )					      								    								  
90 LOAD_CONST 1 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 2 ( left )					      								    								  
98 LOAD_FAST 5 ( i )					      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_MULTIPLY					      								    								  
108 LOAD_FAST 2 ( left )				      								    								  
110 LOAD_FAST 5 ( i )					      								    								  
112 STORE_SUBSCR					      								    								  
114 JUMP_ABSOLUTE 82					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 SETUP_LOOP 52 ( to 172 )			      								    								  
120 LOAD_GLOBAL 1 ( range )				      								    								  
122 LOAD_FAST 1 ( n )					      								    								  
124 LOAD_CONST 3 ( 2 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_CONST 4 ( - 1 )				      								    								  
130 LOAD_CONST 4 ( - 1 )				      								    								  
132 CALL_FUNCTION 3					      								    								  
134 GET_ITER						      								    								  
>> 136 FOR_ITER 32 ( to 170 )				      								    								  
138 STORE_FAST 6 ( j )					      								    								  
							      								    								  
13 140 LOAD_FAST 0 ( arr )				      								    								  
142 LOAD_FAST 6 ( j )					      								    								  
144 LOAD_CONST 1 ( 1 )					      								    								  
146 BINARY_ADD						      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_FAST 3 ( right )				      								    								  
152 LOAD_FAST 6 ( j )					      								    								  
154 LOAD_CONST 1 ( 1 )					      								    								  
156 BINARY_ADD						      								    								  
158 BINARY_SUBSCR					      								    								  
160 BINARY_MULTIPLY					      								    								  
162 LOAD_FAST 3 ( right )				      								    								  
164 LOAD_FAST 6 ( j )					      								    								  
166 STORE_SUBSCR					      								    								  
168 JUMP_ABSOLUTE 136					      								    								  
>> 170 POP_BLOCK					      								    								  
							      								    								  
14 >> 172 SETUP_LOOP 36 ( to 210 )			      								    								  
174 LOAD_GLOBAL 1 ( range )				      								    								  
176 LOAD_FAST 1 ( n )					      								    								  
178 CALL_FUNCTION 1					      								    								  
180 GET_ITER						      								    								  
>> 182 FOR_ITER 24 ( to 208 )				      								    								  
184 STORE_FAST 5 ( i )					      								    								  
							      								    								  
15 186 LOAD_FAST 2 ( left )				      								    								  
188 LOAD_FAST 5 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 3 ( right )				      								    								  
194 LOAD_FAST 5 ( i )					      								    								  
196 BINARY_SUBSCR					      								    								  
198 BINARY_MULTIPLY					      								    								  
200 LOAD_FAST 4 ( prod )				      								    								  
202 LOAD_FAST 5 ( i )					      								    								  
204 STORE_SUBSCR					      								    								  
206 JUMP_ABSOLUTE 182					      								    								  
>> 208 POP_BLOCK					      								    								  
							      								    								  
16 >> 210 SETUP_LOOP 32 ( to 244 )			      								    								  
212 LOAD_GLOBAL 1 ( range )				      								    								  
214 LOAD_FAST 1 ( n )					      								    								  
216 CALL_FUNCTION 1					      								    								  
218 GET_ITER						      								    								  
>> 220 FOR_ITER 20 ( to 242 )				      								    								  
222 STORE_FAST 5 ( i )					      								    								  
							      								    								  
17 224 LOAD_GLOBAL 0 ( print )				      								    								  
226 LOAD_FAST 4 ( prod )				      								    								  
228 LOAD_FAST 5 ( i )					      								    								  
230 BINARY_SUBSCR					      								    								  
232 LOAD_CONST 5 ( ' ' )				      								    								  
234 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
236 CALL_FUNCTION_KW 2					      								    								  
238 POP_TOP						      								    								  
240 JUMP_ABSOLUTE 220					      								    								  
>> 242 POP_BLOCK					      								    								  
>> 244 LOAD_CONST 0 ( None )				      								    								  
246 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL	      FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL		    FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL		  FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL
--							      --							    --								  --
Disassembly of <code object countOps at 0x7fbac0e8bc90, file  def countOps ( A , B , m , n ) :				    def countOps ( A , B , m , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 62 ( to 64 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( m ) :				    	    for j in range ( m ) :				  _sa.test/FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRI
4 LOAD_FAST 3 ( n )					      		  A [ i ] [ j ] -= B [ i ] [ j ] ;		    		A [ i ] [ j ] -= B [ i ] [ j ]			  X_EQUAL.py", line 46	   return result     ^ Synta
6 CALL_FUNCTION 1					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  xError: 'return' outside function
8 GET_ITER						      	      for j in range ( 1 , n ) :			    	    for j in range ( 1 , n ) :				  
>> 10 FOR_ITER 50 ( to 62 )				      		  if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j  		if A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ]  
12 STORE_FAST 4 ( i )					      		      return - 1 ;				    		    return - 1					  
							      	  result = 0 ;						    	result = 0						  
3 14 SETUP_LOOP 44 ( to 60 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
16 LOAD_GLOBAL 0 ( range )				      	      result += abs ( A [ i ] [ 0 ] ) ;			    	    result += abs ( A [ i ] [ j ] - A [ j ] )		  
18 LOAD_FAST 2 ( m )					      	  for j in range ( m ) :				    for j in range ( n ) :					  
20 CALL_FUNCTION 1					      	      result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;	    	result += abs ( result [ j ] [ j ] - A [ j ] [ j ] )	  
22 GET_ITER						      	  return ( result ) ;					    return result						  
>> 24 FOR_ITER 32 ( to 58 )				      								    								  
26 STORE_FAST 5 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 DUP_TOP_TWO						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 1 ( B )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 JUMP_ABSOLUTE 10					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
5 >> 64 SETUP_LOOP 94 ( to 160 )			      								    								  
66 LOAD_GLOBAL 0 ( range )				      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 LOAD_FAST 3 ( n )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 80 ( to 158 )				      								    								  
78 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 80 SETUP_LOOP 74 ( to 156 )				      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_CONST 1 ( 1 )					      								    								  
86 LOAD_FAST 3 ( n )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 60 ( to 154 )				      								    								  
94 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 96 LOAD_FAST 0 ( A )					      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 5 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 0 ( A )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 2 ( 0 )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 LOAD_FAST 0 ( A )					      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 5 ( j )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_FAST 0 ( A )					      								    								  
132 LOAD_CONST 2 ( 0 )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_CONST 2 ( 0 )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 BINARY_ADD						      								    								  
142 LOAD_CONST 2 ( 0 )					      								    								  
144 COMPARE_OP 3 ( != )					      								    								  
146 POP_JUMP_IF_FALSE 92				      								    								  
							      								    								  
8 148 LOAD_CONST 3 ( - 1 )				      								    								  
150 RETURN_VALUE					      								    								  
152 JUMP_ABSOLUTE 92					      								    								  
>> 154 POP_BLOCK					      								    								  
>> 156 JUMP_ABSOLUTE 76					      								    								  
>> 158 POP_BLOCK					      								    								  
							      								    								  
9 >> 160 LOAD_CONST 2 ( 0 )				      								    								  
162 STORE_FAST 6 ( result )				      								    								  
							      								    								  
10 164 SETUP_LOOP 36 ( to 202 )				      								    								  
166 LOAD_GLOBAL 0 ( range )				      								    								  
168 LOAD_FAST 3 ( n )					      								    								  
170 CALL_FUNCTION 1					      								    								  
172 GET_ITER						      								    								  
>> 174 FOR_ITER 24 ( to 200 )				      								    								  
176 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 178 LOAD_FAST 6 ( result )				      								    								  
180 LOAD_GLOBAL 1 ( abs )				      								    								  
182 LOAD_FAST 0 ( A )					      								    								  
184 LOAD_FAST 4 ( i )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_CONST 2 ( 0 )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 CALL_FUNCTION 1					      								    								  
194 INPLACE_ADD						      								    								  
196 STORE_FAST 6 ( result )				      								    								  
198 JUMP_ABSOLUTE 174					      								    								  
>> 200 POP_BLOCK					      								    								  
							      								    								  
12 >> 202 SETUP_LOOP 48 ( to 252 )			      								    								  
204 LOAD_GLOBAL 0 ( range )				      								    								  
206 LOAD_FAST 2 ( m )					      								    								  
208 CALL_FUNCTION 1					      								    								  
210 GET_ITER						      								    								  
>> 212 FOR_ITER 36 ( to 250 )				      								    								  
214 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 216 LOAD_FAST 6 ( result )				      								    								  
218 LOAD_GLOBAL 1 ( abs )				      								    								  
220 LOAD_FAST 0 ( A )					      								    								  
222 LOAD_CONST 2 ( 0 )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 LOAD_FAST 5 ( j )					      								    								  
228 BINARY_SUBSCR					      								    								  
230 LOAD_FAST 0 ( A )					      								    								  
232 LOAD_CONST 2 ( 0 )					      								    								  
234 BINARY_SUBSCR					      								    								  
236 LOAD_CONST 2 ( 0 )					      								    								  
238 BINARY_SUBSCR					      								    								  
240 BINARY_SUBTRACT					      								    								  
242 CALL_FUNCTION 1					      								    								  
244 INPLACE_ADD						      								    								  
246 STORE_FAST 6 ( result )				      								    								  
248 JUMP_ABSOLUTE 212					      								    								  
>> 250 POP_BLOCK					      								    								  
							      								    								  
14 >> 252 LOAD_FAST 6 ( result )			      								    								  
254 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STAR_GRAPH					      CHECK_STAR_GRAPH						    CHECK_STAR_GRAPH						  CHECK_STAR_GRAPH
--							      --							    --								  --
Disassembly of <code object checkStar at 0x7fbac0e8d540, file def checkStar ( mat ) :					    def checkStar ( mat ) :					  script_not_found : None
3 0 LOAD_CONST 1 ( 0 )					      	  global size						    	global degreDn_1					  
2 STORE_FAST 1 ( <<unk>> D1 )				      	  <<unk>> D1 = 0					    	global degreDn_1					  
							      	  <<unk>> Dn_1 = 0					    	assert 0						  
4 4 LOAD_CONST 1 ( 0 )					      	  if ( size == 1 ) :					    	if size == 1 :						  
6 STORE_FAST 2 ( <<unk>> Dn_1 )				      	      return ( mat [ 0 ] [ 0 ] == 0 )			    	    return mat [ 0 ] [ 0 ] == 0				  
							      	  if ( size == 2 ) :					    	if size == 2 :						  
5 8 LOAD_GLOBAL 0 ( size )				      	      return ( mat [ 0 ] [ 0 ] == 0 and mat [ 0 ] [ 1 ] ==  	    return mat [ 0 ] [ 0 ] == 0 and mat [ 0 ] [ 1 ] == 1  
10 LOAD_CONST 2 ( 1 )					      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
12 COMPARE_OP 2 ( == )					      	      degreeI = 0					    	    degreeI = 0						  
14 POP_JUMP_IF_FALSE 32					      	      for j in range ( 0 , size ) :			    	    for j in range ( 0 , size ) :			  
							      		  if ( mat [ i ] [ j ] ) :			    		if mat [ i ] [ j ] :				  
6 16 LOAD_FAST 0 ( mat )				      		      degreeI = degreeI + 1			    		    degreeI = degreeI + 1			  
18 LOAD_CONST 1 ( 0 )					      	      if ( degreeI == 1 ) :				    	    if degre== eI :					  
20 BINARY_SUBSCR					      		  <<unk>> D1 = <<unk>> D1 + 1			    		degre= degre+ 1					  
22 LOAD_CONST 1 ( 0 )					      	      elif ( degreeI == size - 1 ) :			    	    if degre== 0 and degre== 0 :			  
24 BINARY_SUBSCR					      		  <<unk>> Dn_1 = <<unk>> Dn_1 + 1		    		return mat [ 0 ] [ 0 ] == 1			  
26 LOAD_CONST 1 ( 0 )					      	  return ( <<unk>> D1 == ( size - 1 ) and <<unk>> Dn_1 == 1 	return mat						  
28 COMPARE_OP 2 ( == )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
7 >> 32 LOAD_GLOBAL 0 ( size )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
8 40 LOAD_FAST 0 ( mat )				      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 JUMP_IF_FALSE_OR_POP 102				      								    								  
56 LOAD_FAST 0 ( mat )					      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 JUMP_IF_FALSE_OR_POP 102				      								    								  
72 LOAD_FAST 0 ( mat )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 1 ( 0 )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 JUMP_IF_FALSE_OR_POP 102				      								    								  
88 LOAD_FAST 0 ( mat )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
>> 102 RETURN_VALUE					      								    								  
							      								    								  
9 >> 104 SETUP_LOOP 100 ( to 206 )			      								    								  
106 LOAD_GLOBAL 1 ( range )				      								    								  
108 LOAD_CONST 1 ( 0 )					      								    								  
110 LOAD_GLOBAL 0 ( size )				      								    								  
112 CALL_FUNCTION 2					      								    								  
114 GET_ITER						      								    								  
>> 116 FOR_ITER 86 ( to 204 )				      								    								  
118 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 120 LOAD_CONST 1 ( 0 )				      								    								  
122 STORE_FAST 4 ( degreeI )				      								    								  
							      								    								  
11 124 SETUP_LOOP 38 ( to 164 )				      								    								  
126 LOAD_GLOBAL 1 ( range )				      								    								  
128 LOAD_CONST 1 ( 0 )					      								    								  
130 LOAD_GLOBAL 0 ( size )				      								    								  
132 CALL_FUNCTION 2					      								    								  
134 GET_ITER						      								    								  
>> 136 FOR_ITER 24 ( to 162 )				      								    								  
138 STORE_FAST 5 ( j )					      								    								  
							      								    								  
12 140 LOAD_FAST 0 ( mat )				      								    								  
142 LOAD_FAST 3 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 5 ( j )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
13 152 LOAD_FAST 4 ( degreeI )				      								    								  
154 LOAD_CONST 2 ( 1 )					      								    								  
156 BINARY_ADD						      								    								  
158 STORE_FAST 4 ( degreeI )				      								    								  
160 JUMP_ABSOLUTE 136					      								    								  
>> 162 POP_BLOCK					      								    								  
							      								    								  
14 >> 164 LOAD_FAST 4 ( degreeI )			      								    								  
166 LOAD_CONST 2 ( 1 )					      								    								  
168 COMPARE_OP 2 ( == )					      								    								  
170 POP_JUMP_IF_FALSE 182				      								    								  
							      								    								  
15 172 LOAD_FAST 1 ( <<unk>> D1 )			      								    								  
174 LOAD_CONST 2 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 STORE_FAST 1 ( <<unk>> D1 )				      								    								  
180 JUMP_ABSOLUTE 116					      								    								  
							      								    								  
16 >> 182 LOAD_FAST 4 ( degreeI )			      								    								  
184 LOAD_GLOBAL 0 ( size )				      								    								  
186 LOAD_CONST 2 ( 1 )					      								    								  
188 BINARY_SUBTRACT					      								    								  
190 COMPARE_OP 2 ( == )					      								    								  
192 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
17 194 LOAD_FAST 2 ( <<unk>> Dn_1 )			      								    								  
196 LOAD_CONST 2 ( 1 )					      								    								  
198 BINARY_ADD						      								    								  
200 STORE_FAST 2 ( <<unk>> Dn_1 )			      								    								  
202 JUMP_ABSOLUTE 116					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
18 >> 206 LOAD_FAST 1 ( <<unk>> D1 )			      								    								  
208 LOAD_GLOBAL 0 ( size )				      								    								  
210 LOAD_CONST 2 ( 1 )					      								    								  
212 BINARY_SUBTRACT					      								    								  
214 COMPARE_OP 2 ( == )					      								    								  
216 JUMP_IF_FALSE_OR_POP 224				      								    								  
218 LOAD_FAST 2 ( <<unk>> Dn_1 )			      								    								  
220 LOAD_CONST 2 ( 1 )					      								    								  
222 COMPARE_OP 2 ( == )					      								    								  
>> 224 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COCKTAIL_SORT						      COCKTAIL_SORT						    COCKTAIL_SORT						  COCKTAIL_SORT
--							      --							    --								  --
Disassembly of <code object cocktailSort at 0x7fbac0e89d20, f def cocktailSort ( a ) :					    def cocktailSort ( a : str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( a )						    	n = len ( a )						  
2 LOAD_FAST 0 ( a )					      	  swapped = True					    	swapped = True						  
4 CALL_FUNCTION 1					      	  start = 0						    	start = 0						  
6 STORE_FAST 1 ( n )					      	  end = n - 1						    	end = n - 1						  
							      	  while ( swapped == True ) :				    	while swapped == True :					  
3 8 LOAD_CONST 1 ( True )				      	      swapped = False					    	    swapped = False					  
10 STORE_FAST 2 ( swapped )				      	      for i in range ( start , end ) :			    	    for i in range ( start , end ) :			  
							      		  if ( a [ i ] > a [ i + 1 ] ) :		    		if a [ i ] > a [ i + 1 ] :			  
4 12 LOAD_CONST 2 ( 0 )					      		      a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ] 		    a [ i ] , a [ i ] = a [ i + 1 ] , a [ i ]	  
14 STORE_FAST 3 ( start )				      		      swapped = True				    		    swapped = True				  
							      	      if ( swapped == False ) :				    	    if swapped == False :				  
5 16 LOAD_FAST 1 ( n )					      		  break						    		break						  
18 LOAD_CONST 3 ( 1 )					      	      swapped = False					    	    swapped = False					  
20 BINARY_SUBTRACT					      	      end = end - 1					    	    end = end - 1					  
22 STORE_FAST 4 ( end )					      	      for i in range ( end - 1 , start - 1 , - 1 ) :	    	    for i in range ( end - 1 , start - 1 , - 1 ) :	  
							      		  if ( a [ i ] > a [ i + 1 ] ) :		    		if a [ i ] > a [ i + 1 ] :			  
6 24 SETUP_LOOP 212 ( to 238 )				      		      a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ] 		    a [ i ] , a [ i + 1 ] = a [ i + 1 ]		  
>> 26 LOAD_FAST 2 ( swapped )				      		      swapped = True				    		a [ i + 2 ] = True				  
28 LOAD_CONST 1 ( True )				      	      start = start + 1					    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 236				      								    								  
							      								    								  
7 34 LOAD_CONST 4 ( False )				      								    								  
36 STORE_FAST 2 ( swapped )				      								    								  
							      								    								  
8 38 SETUP_LOOP 76 ( to 116 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 3 ( start )				      								    								  
44 LOAD_FAST 4 ( end )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 62 ( to 114 )				      								    								  
52 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 54 LOAD_FAST 0 ( a )					      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 5 ( i )					      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 4 ( > )					      								    								  
72 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
10 74 LOAD_FAST 0 ( a )					      								    								  
76 LOAD_FAST 5 ( i )					      								    								  
78 LOAD_CONST 3 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 0 ( a )					      								    								  
86 LOAD_FAST 5 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 ROT_TWO						      								    								  
92 LOAD_FAST 0 ( a )					      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 STORE_SUBSCR						      								    								  
98 LOAD_FAST 0 ( a )					      								    								  
100 LOAD_FAST 5 ( i )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_SUBSCR					      								    								  
							      								    								  
11 108 LOAD_CONST 1 ( True )				      								    								  
110 STORE_FAST 2 ( swapped )				      								    								  
112 JUMP_ABSOLUTE 50					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
12 >> 116 LOAD_FAST 2 ( swapped )			      								    								  
118 LOAD_CONST 4 ( False )				      								    								  
120 COMPARE_OP 2 ( == )					      								    								  
122 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
13 124 BREAK_LOOP					      								    								  
							      								    								  
14 >> 126 LOAD_CONST 4 ( False )			      								    								  
128 STORE_FAST 2 ( swapped )				      								    								  
							      								    								  
15 130 LOAD_FAST 4 ( end )				      								    								  
132 LOAD_CONST 3 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 STORE_FAST 4 ( end )				      								    								  
							      								    								  
16 138 SETUP_LOOP 86 ( to 226 )				      								    								  
140 LOAD_GLOBAL 1 ( range )				      								    								  
142 LOAD_FAST 4 ( end )					      								    								  
144 LOAD_CONST 3 ( 1 )					      								    								  
146 BINARY_SUBTRACT					      								    								  
148 LOAD_FAST 3 ( start )				      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 LOAD_CONST 5 ( - 1 )				      								    								  
156 CALL_FUNCTION 3					      								    								  
158 GET_ITER						      								    								  
>> 160 FOR_ITER 62 ( to 224 )				      								    								  
162 STORE_FAST 5 ( i )					      								    								  
							      								    								  
17 164 LOAD_FAST 0 ( a )				      								    								  
166 LOAD_FAST 5 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_FAST 0 ( a )					      								    								  
172 LOAD_FAST 5 ( i )					      								    								  
174 LOAD_CONST 3 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 BINARY_SUBSCR					      								    								  
180 COMPARE_OP 4 ( > )					      								    								  
182 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
18 184 LOAD_FAST 0 ( a )				      								    								  
186 LOAD_FAST 5 ( i )					      								    								  
188 LOAD_CONST 3 ( 1 )					      								    								  
190 BINARY_ADD						      								    								  
192 BINARY_SUBSCR					      								    								  
194 LOAD_FAST 0 ( a )					      								    								  
196 LOAD_FAST 5 ( i )					      								    								  
198 BINARY_SUBSCR					      								    								  
200 ROT_TWO						      								    								  
202 LOAD_FAST 0 ( a )					      								    								  
204 LOAD_FAST 5 ( i )					      								    								  
206 STORE_SUBSCR					      								    								  
208 LOAD_FAST 0 ( a )					      								    								  
210 LOAD_FAST 5 ( i )					      								    								  
212 LOAD_CONST 3 ( 1 )					      								    								  
214 BINARY_ADD						      								    								  
216 STORE_SUBSCR					      								    								  
							      								    								  
19 218 LOAD_CONST 1 ( True )				      								    								  
220 STORE_FAST 2 ( swapped )				      								    								  
222 JUMP_ABSOLUTE 160					      								    								  
>> 224 POP_BLOCK					      								    								  
							      								    								  
20 >> 226 LOAD_FAST 3 ( start )				      								    								  
228 LOAD_CONST 3 ( 1 )					      								    								  
230 BINARY_ADD						      								    								  
232 STORE_FAST 3 ( start )				      								    								  
234 JUMP_ABSOLUTE 26					      								    								  
>> 236 POP_BLOCK					      								    								  
>> 238 LOAD_CONST 0 ( None )				      								    								  
240 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MEDIAN_ROW_WISE_SORTED_MATRIX			      FIND_MEDIAN_ROW_WISE_SORTED_MATRIX			    FIND_MEDIAN_ROW_WISE_SORTED_MATRIX				  FIND_MEDIAN_ROW_WISE_SORTED_MATRIX
--							      --							    --								  --
Disassembly of <code object binaryMedian at 0x7fbac0e8bc90, f def binaryMedian ( m , r , d ) :				    def binaryMedian ( m , r , d ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( m )					      	  mi = m [ 0 ] [ 0 ]					    	mi = m [ 0 ] [ 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  mx = 0						    	mx = 0							  
4 BINARY_SUBSCR						      	  for i in range ( r ) :				    	for i in range ( r ) :					  
6 LOAD_CONST 1 ( 0 )					      	      if m [ i ] [ 0 ] < mi :				    	    if m [ i ] [ 0 ] < mi :				  
8 BINARY_SUBSCR						      		  mi = m [ i ] [ 0 ]				    		mi = m [ i ] [ 0 ]				  
10 STORE_FAST 3 ( mi )					      	      if m [ i ] [ d - 1 ] > mx :			    	    if m [ i ] [ d - 1 ] > mx :				  
							      		  mx = m [ i ] [ d - 1 ]			    		mx = m [ i ] [ d - 1 ]				  
3 12 LOAD_CONST 1 ( 0 )					      	  desired = ( r * d + 1 ) // 2				    	desired = r * d + 1 // 2				  
14 STORE_FAST 4 ( mx )					      	  while ( mi < mx ) :					    	while mi < mx :						  
							      	      mid = mi + ( mx - mi ) // 2			    	    mid = mi + ( mx - mi ) // 2				  
4 16 SETUP_LOOP 80 ( to 98 )				      	      place = [ 0 ] ;					    	    place = [ 0 ]					  
18 LOAD_GLOBAL 0 ( range )				      	      for i in range ( r ) :				    	    for i in range ( r ) :				  
20 LOAD_FAST 1 ( r )					      		  j = upper_bound ( m [ i ] , mid )		    		j = upper_bound ( m [ i ] , mid ) + 1		  
22 CALL_FUNCTION 1					      		  place [ 0 ] = place [ 0 ] + j			    		place [ j ] = place [ 0 ] [ 0 ]			  
24 GET_ITER						      	      if place [ 0 ] < desired :			    	    if place [ - 1 ] < "Median mid" :			  
>> 26 FOR_ITER 68 ( to 96 )				      		  mi = mid + 1					    		print ( "Median mid is Median mid of the same num 
28 STORE_FAST 5 ( i )					      	      else :						    print ( mi )						  
							      		  mx = mid					    								  
5 30 LOAD_FAST 0 ( m )					      	  print ( "Median is" , mi )				    								  
32 LOAD_FAST 5 ( i )					      	  return						    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 3 ( mi )					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 46 LOAD_FAST 0 ( m )					      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 3 ( mi )					      								    								  
							      								    								  
7 >> 58 LOAD_FAST 0 ( m )				      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 2 ( d )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 4 ( mx )					      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
8 78 LOAD_FAST 0 ( m )					      								    								  
80 LOAD_FAST 5 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 2 ( d )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 STORE_FAST 4 ( mx )					      								    								  
94 JUMP_ABSOLUTE 26					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
9 >> 98 LOAD_FAST 1 ( r )				      								    								  
100 LOAD_FAST 2 ( d )					      								    								  
102 BINARY_MULTIPLY					      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_CONST 3 ( 2 )					      								    								  
110 BINARY_FLOOR_DIVIDE					      								    								  
112 STORE_FAST 6 ( desired )				      								    								  
							      								    								  
10 114 SETUP_LOOP 108 ( to 224 )			      								    								  
>> 116 LOAD_FAST 3 ( mi )				      								    								  
118 LOAD_FAST 4 ( mx )					      								    								  
120 COMPARE_OP 0 ( < )					      								    								  
122 POP_JUMP_IF_FALSE 222				      								    								  
							      								    								  
11 124 LOAD_FAST 3 ( mi )				      								    								  
126 LOAD_FAST 4 ( mx )					      								    								  
128 LOAD_FAST 3 ( mi )					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 LOAD_CONST 3 ( 2 )					      								    								  
134 BINARY_FLOOR_DIVIDE					      								    								  
136 BINARY_ADD						      								    								  
138 STORE_FAST 7 ( mid )				      								    								  
							      								    								  
12 140 LOAD_CONST 1 ( 0 )				      								    								  
142 BUILD_LIST 1					      								    								  
144 STORE_FAST 8 ( place )				      								    								  
							      								    								  
13 146 SETUP_LOOP 46 ( to 194 )				      								    								  
148 LOAD_GLOBAL 0 ( range )				      								    								  
150 LOAD_FAST 1 ( r )					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 GET_ITER						      								    								  
>> 156 FOR_ITER 34 ( to 192 )				      								    								  
158 STORE_FAST 5 ( i )					      								    								  
							      								    								  
14 160 LOAD_GLOBAL 1 ( upper_bound )			      								    								  
162 LOAD_FAST 0 ( m )					      								    								  
164 LOAD_FAST 5 ( i )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 LOAD_FAST 7 ( mid )					      								    								  
170 CALL_FUNCTION 2					      								    								  
172 STORE_FAST 9 ( j )					      								    								  
							      								    								  
15 174 LOAD_FAST 8 ( place )				      								    								  
176 LOAD_CONST 1 ( 0 )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 LOAD_FAST 9 ( j )					      								    								  
182 BINARY_ADD						      								    								  
184 LOAD_FAST 8 ( place )				      								    								  
186 LOAD_CONST 1 ( 0 )					      								    								  
188 STORE_SUBSCR					      								    								  
190 JUMP_ABSOLUTE 156					      								    								  
>> 192 POP_BLOCK					      								    								  
							      								    								  
16 >> 194 LOAD_FAST 8 ( place )				      								    								  
196 LOAD_CONST 1 ( 0 )					      								    								  
198 BINARY_SUBSCR					      								    								  
200 LOAD_FAST 6 ( desired )				      								    								  
202 COMPARE_OP 0 ( < )					      								    								  
204 POP_JUMP_IF_FALSE 216				      								    								  
							      								    								  
17 206 LOAD_FAST 7 ( mid )				      								    								  
208 LOAD_CONST 2 ( 1 )					      								    								  
210 BINARY_ADD						      								    								  
212 STORE_FAST 3 ( mi )					      								    								  
214 JUMP_ABSOLUTE 116					      								    								  
							      								    								  
19 >> 216 LOAD_FAST 7 ( mid )				      								    								  
218 STORE_FAST 4 ( mx )					      								    								  
220 JUMP_ABSOLUTE 116					      								    								  
>> 222 POP_BLOCK					      								    								  
							      								    								  
20 >> 224 LOAD_GLOBAL 2 ( print )			      								    								  
226 LOAD_CONST 4 ( 'Median is' )			      								    								  
228 LOAD_FAST 3 ( mi )					      								    								  
230 CALL_FUNCTION 2					      								    								  
232 POP_TOP						      								    								  
							      								    								  
21 234 LOAD_CONST 0 ( None )				      								    								  
236 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2
--							      --							    --								  --
Disassembly of <code object printRepeating at 0x7fbac0e8de40, def printRepeating ( arr , size ) :			    def printRepeating ( arr , size ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  xor = arr [ 0 ]					    	xor = arr [ 0 ]						  
2 LOAD_CONST 1 ( 0 )					      	  n = size - 2						    	n = size - 2						  
4 BINARY_SUBSCR						      	  x = 0							    	x = 0							  
6 STORE_FAST 2 ( xor )					      	  y = 0							    	y = 0							  
							      	  for i in range ( 1 , size ) :				    	for i in range ( 1 , size ) :				  
3 8 LOAD_FAST 1 ( size )				      	      xor ^= arr [ i ]					    	    xor = xor [ arr [ i ] ]				  
10 LOAD_CONST 2 ( 2 )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
12 BINARY_SUBTRACT					      	      xor ^= i						    	    xor = xor [ i ]					  
14 STORE_FAST 3 ( n )					      	  set_bit_no = xor & ~ ( xor - 1 )			    	set_bit_no = xor / ( xor - 1 )				  
							      	  for i in range ( 0 , size ) :				    	for i in range ( 0 , size ) :				  
4 16 LOAD_CONST 1 ( 0 )					      	      if ( arr [ i ] & set_bit_no ) :			    	    if arr [ i ] & set_bit_no :				  
18 STORE_FAST 4 ( x )					      		  x = x ^ arr [ i ]				    		x = x ^ arr [ i ]				  
							      	      else :						    	    y = y ^ arr [ i ]					  
5 20 LOAD_CONST 1 ( 0 )					      		  y = y ^ arr [ i ]				    	for i in range ( 3 , n ) :				  
22 STORE_FAST 5 ( y )					      	  for i in range ( 1 , n + 1 ) :			    	    if set_bit_no :					  
							      	      if ( i & set_bit_no ) :				    		x = x ^ arr [ i ]				  
6 24 SETUP_LOOP 30 ( to 56 )				      		  x = x ^ i					    	    else :						  
26 LOAD_GLOBAL 0 ( range )				      	      else :						    		x = x / arr [ i ]				  
28 LOAD_CONST 3 ( 1 )					      		  y = y ^ i					    								  
30 LOAD_FAST 1 ( size )					      	  print ( "The two repeating" , "elements are" , y , x )    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 16 ( to 54 )				      								    								  
38 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 40 LOAD_FAST 2 ( xor )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 6 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 INPLACE_XOR						      								    								  
50 STORE_FAST 2 ( xor )					      								    								  
52 JUMP_ABSOLUTE 36					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
8 >> 56 SETUP_LOOP 30 ( to 88 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 LOAD_FAST 3 ( n )					      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 12 ( to 86 )				      								    								  
74 STORE_FAST 6 ( i )					      								    								  
							      								    								  
9 76 LOAD_FAST 2 ( xor )				      								    								  
78 LOAD_FAST 6 ( i )					      								    								  
80 INPLACE_XOR						      								    								  
82 STORE_FAST 2 ( xor )					      								    								  
84 JUMP_ABSOLUTE 72					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
10 >> 88 LOAD_FAST 2 ( xor )				      								    								  
90 LOAD_FAST 2 ( xor )					      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 UNARY_INVERT						      								    								  
98 BINARY_AND						      								    								  
100 STORE_FAST 7 ( set_bit_no )				      								    								  
							      								    								  
11 102 SETUP_LOOP 56 ( to 160 )				      								    								  
104 LOAD_GLOBAL 0 ( range )				      								    								  
106 LOAD_CONST 1 ( 0 )					      								    								  
108 LOAD_FAST 1 ( size )				      								    								  
110 CALL_FUNCTION 2					      								    								  
112 GET_ITER						      								    								  
>> 114 FOR_ITER 42 ( to 158 )				      								    								  
116 STORE_FAST 6 ( i )					      								    								  
							      								    								  
12 118 LOAD_FAST 0 ( arr )				      								    								  
120 LOAD_FAST 6 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 7 ( set_bit_no )				      								    								  
126 BINARY_AND						      								    								  
128 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
13 130 LOAD_FAST 4 ( x )				      								    								  
132 LOAD_FAST 0 ( arr )					      								    								  
134 LOAD_FAST 6 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 BINARY_XOR						      								    								  
140 STORE_FAST 4 ( x )					      								    								  
142 JUMP_ABSOLUTE 114					      								    								  
							      								    								  
15 >> 144 LOAD_FAST 5 ( y )				      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 6 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 BINARY_XOR						      								    								  
154 STORE_FAST 5 ( y )					      								    								  
156 JUMP_ABSOLUTE 114					      								    								  
>> 158 POP_BLOCK					      								    								  
							      								    								  
16 >> 160 SETUP_LOOP 48 ( to 210 )			      								    								  
162 LOAD_GLOBAL 0 ( range )				      								    								  
164 LOAD_CONST 3 ( 1 )					      								    								  
166 LOAD_FAST 3 ( n )					      								    								  
168 LOAD_CONST 3 ( 1 )					      								    								  
170 BINARY_ADD						      								    								  
172 CALL_FUNCTION 2					      								    								  
174 GET_ITER						      								    								  
>> 176 FOR_ITER 30 ( to 208 )				      								    								  
178 STORE_FAST 6 ( i )					      								    								  
							      								    								  
17 180 LOAD_FAST 6 ( i )				      								    								  
182 LOAD_FAST 7 ( set_bit_no )				      								    								  
184 BINARY_AND						      								    								  
186 POP_JUMP_IF_FALSE 198				      								    								  
							      								    								  
18 188 LOAD_FAST 4 ( x )				      								    								  
190 LOAD_FAST 6 ( i )					      								    								  
192 BINARY_XOR						      								    								  
194 STORE_FAST 4 ( x )					      								    								  
196 JUMP_ABSOLUTE 176					      								    								  
							      								    								  
20 >> 198 LOAD_FAST 5 ( y )				      								    								  
200 LOAD_FAST 6 ( i )					      								    								  
202 BINARY_XOR						      								    								  
204 STORE_FAST 5 ( y )					      								    								  
206 JUMP_ABSOLUTE 176					      								    								  
>> 208 POP_BLOCK					      								    								  
							      								    								  
21 >> 210 LOAD_GLOBAL 1 ( print )			      								    								  
212 LOAD_CONST 4 ( 'The two repeating' )		      								    								  
214 LOAD_CONST 5 ( 'elements are' )			      								    								  
216 LOAD_FAST 5 ( y )					      								    								  
218 LOAD_FAST 4 ( x )					      								    								  
220 CALL_FUNCTION 4					      								    								  
222 POP_TOP						      								    								  
224 LOAD_CONST 0 ( None )				      								    								  
226 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPARSE_SEARCH						      SPARSE_SEARCH						    SPARSE_SEARCH						  SPARSE_SEARCH
--							      --							    --								  --
Disassembly of <code object sparseSearch at 0x7fbac0e8de40, f def sparseSearch ( arr , key , low , high ) :		    def sparseSearch ( arr , key , low , high , size = 100 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  left = 0 ; right = 0					    	left = 0						  
2 STORE_FAST 4 ( left )					      	  while low <= high :					    	while low <= high :					  
4 LOAD_CONST 1 ( 0 )					      	      mid = ( low + high ) // 2				    	    mid = ( low + high ) // 2				  
6 STORE_FAST 5 ( right )				      	      if arr [ mid ] == '' :				    	    if arr [ mid ] == '' :				  
							      		  left = mid - 1				    		left = mid - 1					  
3 8 SETUP_LOOP 216 ( to 226 )				      		  right = mid + 1				    		right = mid + 1					  
>> 10 LOAD_FAST 2 ( low )				      		  if left < low and right > high :		    		if left < low and right > high :		  
12 LOAD_FAST 3 ( high )					      		      return - 1				    		    return - 1					  
14 COMPARE_OP 1 ( <= )					      		  elif right <= high and arr [ right ] != '' :	    		if right <= high and arr [ right ] != '' :	  
16 POP_JUMP_IF_FALSE 224				      		      mid = right				    		    mid = right					  
							      		  elif left >= low and arr [ left ] != '' :	    	    elif left >= low and arr [ left ] != '' :		  
4 18 LOAD_FAST 2 ( low )				      		      mid = left				    		mid = left					  
20 LOAD_FAST 3 ( high )					      	      if arr [ mid ] == key :				    	    if arr [ mid ] == key :				  
22 BINARY_ADD						      		  print ( 'Found string {} at index {}'.format ( ar 		print ( "Found string {} at index {}".format ( ar 
24 LOAD_CONST 2 ( 2 )					      		  return					    		if mid > mid :					  
26 BINARY_FLOOR_DIVIDE					      	      elif arr [ mid ] > key :				    		    mid += mid					  
28 STORE_FAST 6 ( mid )					      		  high = mid - 1				    		if mid > mid :					  
							      	      elif arr [ mid ] < key :				    		    mid += mid [ mid ]				  
5 30 LOAD_FAST 0 ( arr )				      		  low = mid + 1					    	    else :						  
32 LOAD_FAST 6 ( mid )					      	      left -= 1						    		mid -= mid					  
34 BINARY_SUBSCR					      	      right += 1					    	    if mid < mid :					  
36 LOAD_CONST 3 ( '' )					      	  return - 1						    		mid -= mid					  
38 COMPARE_OP 2 ( == )					      								    	    else :						  
40 POP_JUMP_IF_FALSE 128				      								    		mid -= mid					  
							      								    	return left						  
6 42 LOAD_FAST 6 ( mid )				      								    								  
44 LOAD_CONST 4 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 4 ( left )				      								    								  
							      								    								  
7 50 LOAD_FAST 6 ( mid )				      								    								  
52 LOAD_CONST 4 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 5 ( right )				      								    								  
							      								    								  
8 58 LOAD_FAST 4 ( left )				      								    								  
60 LOAD_FAST 2 ( low )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 78					      								    								  
66 LOAD_FAST 5 ( right )				      								    								  
68 LOAD_FAST 3 ( high )					      								    								  
70 COMPARE_OP 4 ( > )					      								    								  
72 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
9 74 LOAD_CONST 5 ( - 1 )				      								    								  
76 RETURN_VALUE						      								    								  
							      								    								  
10 >> 78 LOAD_FAST 5 ( right )				      								    								  
80 LOAD_FAST 3 ( high )					      								    								  
82 COMPARE_OP 1 ( <= )					      								    								  
84 POP_JUMP_IF_FALSE 104				      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 5 ( right )				      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 3 ( '' )					      								    								  
94 COMPARE_OP 3 ( != )					      								    								  
96 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
11 98 LOAD_FAST 5 ( right )				      								    								  
100 STORE_FAST 6 ( mid )				      								    								  
102 JUMP_FORWARD 24 ( to 128 )				      								    								  
							      								    								  
12 >> 104 LOAD_FAST 4 ( left )				      								    								  
106 LOAD_FAST 2 ( low )					      								    								  
108 COMPARE_OP 5 ( >= )					      								    								  
110 POP_JUMP_IF_FALSE 128				      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 4 ( left )				      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 3 ( '' )					      								    								  
120 COMPARE_OP 3 ( != )					      								    								  
122 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
13 124 LOAD_FAST 4 ( left )				      								    								  
126 STORE_FAST 6 ( mid )				      								    								  
							      								    								  
14 >> 128 LOAD_FAST 0 ( arr )				      								    								  
130 LOAD_FAST 6 ( mid )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 1 ( key )					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
15 140 LOAD_GLOBAL 0 ( print )				      								    								  
142 LOAD_CONST 6 ( 'Found string {} at index {}' )	      								    								  
144 LOAD_METHOD 1 ( format )				      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 6 ( mid )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_FAST 6 ( mid )					      								    								  
154 CALL_METHOD 2					      								    								  
156 CALL_FUNCTION 1					      								    								  
158 POP_TOP						      								    								  
							      								    								  
16 160 LOAD_CONST 0 ( None )				      								    								  
162 RETURN_VALUE					      								    								  
							      								    								  
17 >> 164 LOAD_FAST 0 ( arr )				      								    								  
166 LOAD_FAST 6 ( mid )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_FAST 1 ( key )					      								    								  
172 COMPARE_OP 4 ( > )					      								    								  
174 POP_JUMP_IF_FALSE 186				      								    								  
							      								    								  
18 176 LOAD_FAST 6 ( mid )				      								    								  
178 LOAD_CONST 4 ( 1 )					      								    								  
180 BINARY_SUBTRACT					      								    								  
182 STORE_FAST 3 ( high )				      								    								  
184 JUMP_FORWARD 20 ( to 206 )				      								    								  
							      								    								  
19 >> 186 LOAD_FAST 0 ( arr )				      								    								  
188 LOAD_FAST 6 ( mid )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 1 ( key )					      								    								  
194 COMPARE_OP 0 ( < )					      								    								  
196 POP_JUMP_IF_FALSE 206				      								    								  
							      								    								  
20 198 LOAD_FAST 6 ( mid )				      								    								  
200 LOAD_CONST 4 ( 1 )					      								    								  
202 BINARY_ADD						      								    								  
204 STORE_FAST 2 ( low )				      								    								  
							      								    								  
21 >> 206 LOAD_FAST 4 ( left )				      								    								  
208 LOAD_CONST 4 ( 1 )					      								    								  
210 INPLACE_SUBTRACT					      								    								  
212 STORE_FAST 4 ( left )				      								    								  
							      								    								  
22 214 LOAD_FAST 5 ( right )				      								    								  
216 LOAD_CONST 4 ( 1 )					      								    								  
218 INPLACE_ADD						      								    								  
220 STORE_FAST 5 ( right )				      								    								  
222 JUMP_ABSOLUTE 10					      								    								  
>> 224 POP_BLOCK					      								    								  
							      								    								  
23 >> 226 LOAD_CONST 5 ( - 1 )				      								    								  
228 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS	      FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS		    FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS		  FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS
--							      --							    --								  --
Disassembly of <code object pairSum at 0x7fbac0e8de40, file " def pairSum ( mat , n , sum ) :				    def pairSum ( mat , n , sum = 2 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 28 ( to 30 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      mat [ i ].sort ( )				    	    mat [ i ].sort ( )					  _sa.test/FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFER
4 LOAD_FAST 1 ( n )					      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  ENT_ROWS.py", line 52	    return left	    ^ Syntax
6 CALL_FUNCTION 1					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  Error: 'return' outside function
8 GET_ITER						      		  left = 0					    		left = 0					  
>> 10 FOR_ITER 16 ( to 28 )				      		  right = n - 1					    		right = n - 1					  
12 STORE_FAST 3 ( i )					      		  while ( left < n and right >= 0 ) :		    		while left < n and right >= 0 :			  
							      		      if ( ( mat [ i ] [ left ] + mat [ j ] [ right 		    if ( mat [ i ] [ left ] + ( mat [ j ] [ right 
3 14 LOAD_FAST 0 ( mat )				      			  print ( "(" , mat [ i ] [ left ] , ", " , 			print ( "(" , mat [ i ] [ left ] [ right  
16 LOAD_FAST 3 ( i )					      			  left += 1				    			left += 1				  
18 BINARY_SUBSCR					      			  right -= 1				    	    if left < n :					  
20 LOAD_METHOD 1 ( sort )				      		      else :					    		right -= 1					  
22 CALL_METHOD 0					      			  if ( ( mat [ i ] [ left ] + mat [ j ] [ r 	    if left < n + 1 :					  
24 POP_TOP						      			      left += 1				    		left -= 1					  
26 JUMP_ABSOLUTE 10					      			  else :				    	    right -= 1						  
>> 28 POP_BLOCK						      			      right -= 1			    return left							  
							      								    								  
4 >> 30 SETUP_LOOP 206 ( to 238 )			      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 190 ( to 236 )				      								    								  
46 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 48 SETUP_LOOP 184 ( to 234 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 166 ( to 232 )				      								    								  
66 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 68 LOAD_CONST 2 ( 0 )					      								    								  
70 STORE_FAST 5 ( left )				      								    								  
							      								    								  
7 72 LOAD_FAST 1 ( n )					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 6 ( right )				      								    								  
							      								    								  
8 80 SETUP_LOOP 148 ( to 230 )				      								    								  
>> 82 LOAD_FAST 5 ( left )				      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 COMPARE_OP 0 ( < )					      								    								  
88 POP_JUMP_IF_FALSE 228				      								    								  
90 LOAD_FAST 6 ( right )				      								    								  
92 LOAD_CONST 2 ( 0 )					      								    								  
94 COMPARE_OP 5 ( >= )					      								    								  
96 POP_JUMP_IF_FALSE 228				      								    								  
							      								    								  
9 98 LOAD_FAST 0 ( mat )				      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 5 ( left )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( mat )					      								    								  
110 LOAD_FAST 4 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 6 ( right )				      								    								  
116 BINARY_SUBSCR					      								    								  
118 BINARY_ADD						      								    								  
120 LOAD_FAST 2 ( sum )					      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
10 126 LOAD_GLOBAL 2 ( print )				      								    								  
128 LOAD_CONST 3 ( '(' )				      								    								  
130 LOAD_FAST 0 ( mat )					      								    								  
132 LOAD_FAST 3 ( i )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_FAST 5 ( left )				      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_CONST 4 ( ', ' )				      								    								  
142 LOAD_FAST 0 ( mat )					      								    								  
144 LOAD_FAST 4 ( j )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_FAST 6 ( right )				      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_CONST 5 ( '), ' )				      								    								  
154 LOAD_CONST 6 ( ' ' )				      								    								  
156 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
158 CALL_FUNCTION_KW 6					      								    								  
160 POP_TOP						      								    								  
							      								    								  
11 162 LOAD_FAST 5 ( left )				      								    								  
164 LOAD_CONST 1 ( 1 )					      								    								  
166 INPLACE_ADD						      								    								  
168 STORE_FAST 5 ( left )				      								    								  
							      								    								  
12 170 LOAD_FAST 6 ( right )				      								    								  
172 LOAD_CONST 1 ( 1 )					      								    								  
174 INPLACE_SUBTRACT					      								    								  
176 STORE_FAST 6 ( right )				      								    								  
178 JUMP_ABSOLUTE 82					      								    								  
							      								    								  
14 >> 180 LOAD_FAST 0 ( mat )				      								    								  
182 LOAD_FAST 3 ( i )					      								    								  
184 BINARY_SUBSCR					      								    								  
186 LOAD_FAST 5 ( left )				      								    								  
188 BINARY_SUBSCR					      								    								  
190 LOAD_FAST 0 ( mat )					      								    								  
192 LOAD_FAST 4 ( j )					      								    								  
194 BINARY_SUBSCR					      								    								  
196 LOAD_FAST 6 ( right )				      								    								  
198 BINARY_SUBSCR					      								    								  
200 BINARY_ADD						      								    								  
202 LOAD_FAST 2 ( sum )					      								    								  
204 COMPARE_OP 0 ( < )					      								    								  
206 POP_JUMP_IF_FALSE 218				      								    								  
							      								    								  
15 208 LOAD_FAST 5 ( left )				      								    								  
210 LOAD_CONST 1 ( 1 )					      								    								  
212 INPLACE_ADD						      								    								  
214 STORE_FAST 5 ( left )				      								    								  
216 JUMP_ABSOLUTE 82					      								    								  
							      								    								  
17 >> 218 LOAD_FAST 6 ( right )				      								    								  
220 LOAD_CONST 1 ( 1 )					      								    								  
222 INPLACE_SUBTRACT					      								    								  
224 STORE_FAST 6 ( right )				      								    								  
226 JUMP_ABSOLUTE 82					      								    								  
>> 228 POP_BLOCK					      								    								  
>> 230 JUMP_ABSOLUTE 64					      								    								  
>> 232 POP_BLOCK					      								    								  
>> 234 JUMP_ABSOLUTE 44					      								    								  
>> 236 POP_BLOCK					      								    								  
>> 238 LOAD_CONST 0 ( None )				      								    								  
240 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1		    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findGreatest at 0x7fbac0e8d540, f def findGreatest ( arr , n ) :				    def findGreatest ( arr , n = 2 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  m = dict ( )						    	m = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in arr :					    	for i in arr :						  
4 STORE_FAST 2 ( m )					      	      m [ i ] = m.get ( i , 0 ) + 1			    	    m [ i ] = m.get ( i , 0 ) + 1			  
							      	  arr = sorted ( arr )					    	arr = sorted ( arr )					  
3 6 SETUP_LOOP 32 ( to 40 )				      	  for i in range ( n - 1 , 0 , - 1 ) :			    	for i in range ( n - 1 , 0 , - 1 ) :			  
8 LOAD_FAST 0 ( arr )					      	      j = 0						    	    j = 0						  
10 GET_ITER						      	      while ( j < i and arr [ j ] <= sqrt ( arr [ i ] ) ) : 	    while j < i and arr [ j ] <= sqrt ( arr [ i ] ) :	  
>> 12 FOR_ITER 24 ( to 38 )				      		  if ( arr [ i ] % arr [ j ] == 0 ) :		    		if arr [ i ] % arr [ j ] == 0 :			  
14 STORE_FAST 3 ( i )					      		      result = arr [ i ] // arr [ j ]		    		    result = arr [ i ] // arr [ j ]		  
							      		      if ( result != arr [ j ] and ( result in m.ke 		    if result != arr [ j ] and result in m.keys ( 
4 16 LOAD_FAST 2 ( m )					      			  return arr [ i ]			    			if result == arr [ j ] % i == 0 :	  
18 LOAD_METHOD 1 ( get )				      		      elif ( result == arr [ j ] and ( result in m. 			    return result [ i ]			  
20 LOAD_FAST 3 ( i )					      			  return arr [ i ]			    	    return result					  
22 LOAD_CONST 1 ( 0 )					      		  j += 1					    								  
24 CALL_METHOD 2					      	  return - 1						    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 2 ( m )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 12					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_GLOBAL 2 ( sorted )			      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 0 ( arr )					      								    								  
							      								    								  
6 48 SETUP_LOOP 194 ( to 244 )				      								    								  
50 LOAD_GLOBAL 3 ( range )				      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 LOAD_CONST 3 ( - 1 )					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 174 ( to 242 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_CONST 1 ( 0 )					      								    								  
72 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 74 SETUP_LOOP 164 ( to 240 )				      								    								  
>> 76 LOAD_FAST 4 ( j )					      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 238				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 4 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_GLOBAL 4 ( sqrt )				      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 COMPARE_OP 1 ( <= )					      								    								  
102 POP_JUMP_IF_FALSE 238				      								    								  
							      								    								  
9 104 LOAD_FAST 0 ( arr )				      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 0 ( arr )					      								    								  
112 LOAD_FAST 4 ( j )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 BINARY_MODULO					      								    								  
118 LOAD_CONST 1 ( 0 )					      								    								  
120 COMPARE_OP 2 ( == )					      								    								  
122 POP_JUMP_IF_FALSE 228				      								    								  
							      								    								  
10 124 LOAD_FAST 0 ( arr )				      								    								  
126 LOAD_FAST 3 ( i )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 0 ( arr )					      								    								  
132 LOAD_FAST 4 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 BINARY_FLOOR_DIVIDE					      								    								  
138 STORE_FAST 5 ( result )				      								    								  
							      								    								  
11 140 LOAD_FAST 5 ( result )				      								    								  
142 LOAD_FAST 0 ( arr )					      								    								  
144 LOAD_FAST 4 ( j )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 COMPARE_OP 3 ( != )					      								    								  
150 POP_JUMP_IF_FALSE 184				      								    								  
152 LOAD_FAST 5 ( result )				      								    								  
154 LOAD_FAST 2 ( m )					      								    								  
156 LOAD_METHOD 5 ( keys )				      								    								  
158 CALL_METHOD 0					      								    								  
160 COMPARE_OP 6 ( in )					      								    								  
162 POP_JUMP_IF_FALSE 184				      								    								  
164 LOAD_FAST 2 ( m )					      								    								  
166 LOAD_FAST 5 ( result )				      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_CONST 1 ( 0 )					      								    								  
172 COMPARE_OP 4 ( > )					      								    								  
174 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
12 176 LOAD_FAST 0 ( arr )				      								    								  
178 LOAD_FAST 3 ( i )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 RETURN_VALUE					      								    								  
							      								    								  
13 >> 184 LOAD_FAST 5 ( result )			      								    								  
186 LOAD_FAST 0 ( arr )					      								    								  
188 LOAD_FAST 4 ( j )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 COMPARE_OP 2 ( == )					      								    								  
194 POP_JUMP_IF_FALSE 228				      								    								  
196 LOAD_FAST 5 ( result )				      								    								  
198 LOAD_FAST 2 ( m )					      								    								  
200 LOAD_METHOD 5 ( keys )				      								    								  
202 CALL_METHOD 0					      								    								  
204 COMPARE_OP 6 ( in )					      								    								  
206 POP_JUMP_IF_FALSE 228				      								    								  
208 LOAD_FAST 2 ( m )					      								    								  
210 LOAD_FAST 5 ( result )				      								    								  
212 BINARY_SUBSCR					      								    								  
214 LOAD_CONST 2 ( 1 )					      								    								  
216 COMPARE_OP 4 ( > )					      								    								  
218 POP_JUMP_IF_FALSE 228				      								    								  
							      								    								  
14 220 LOAD_FAST 0 ( arr )				      								    								  
222 LOAD_FAST 3 ( i )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 RETURN_VALUE					      								    								  
							      								    								  
15 >> 228 LOAD_FAST 4 ( j )				      								    								  
230 LOAD_CONST 2 ( 1 )					      								    								  
232 INPLACE_ADD						      								    								  
234 STORE_FAST 4 ( j )					      								    								  
236 JUMP_ABSOLUTE 76					      								    								  
>> 238 POP_BLOCK					      								    								  
>> 240 JUMP_ABSOLUTE 66					      								    								  
>> 242 POP_BLOCK					      								    								  
							      								    								  
16 >> 244 LOAD_CONST 3 ( - 1 )				      								    								  
246 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			      MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			    MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			  MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX
--							      --							    --								  --
Disassembly of <code object MAXMIN at 0x7fbac0e89d20, file "< def MAXMIN ( arr , n ) :					    def MAXMIN ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1000000000 )				      	  MIN = 10 ** 9						    	MIN = 1000000000					  
2 STORE_FAST 2 ( MIN )					      	  MAX = - 10 ** 9					    	MAX = - 1000000000					  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 2 ( - 1000000000 )			      	      for j in range ( n // 2 + 1 ) :			    	    for j in range ( n // 2 + 1 ) :			  
6 STORE_FAST 3 ( MAX )					      		  if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] )  		if arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] :	  
							      		      if ( MIN > arr [ i ] [ n - j - 1 ] ) :	    		    if MIN > arr [ i ] [ n - j - 1 ] :		  
4 8 SETUP_LOOP 220 ( to 230 )				      			  MIN = arr [ i ] [ n - j - 1 ]		    			MIN = arr [ i ] [ n - j - 1 ]		  
10 LOAD_GLOBAL 0 ( range )				      		      if ( MAX < arr [ i ] [ j ] ) :		    		if MAX < arr [ i ] [ j ] :			  
12 LOAD_FAST 1 ( n )					      			  MAX = arr [ i ] [ j ]			    		    MAX = arr [ i ] [ j ]			  
14 CALL_FUNCTION 1					      		  else :					    		elif MIN > arr [ i ] [ j ] :			  
16 GET_ITER						      		      if ( MIN > arr [ i ] [ j ] ) :		    		    value = arr [ i ] [ j ]			  
>> 18 FOR_ITER 208 ( to 228 )				      			  MIN = arr [ i ] [ j ]			    		elif MIN < arr [ i ] [ j - 1 ] :		  
20 STORE_FAST 4 ( i )					      		      if ( MAX < arr [ i ] [ n - j - 1 ] ) :	    		    raise AssertionError ( "value MIN MAX MAX MAX 
							      			  MAX = arr [ i ] [ n - j - 1 ]		    								  
5 22 SETUP_LOOP 202 ( to 226 )				      	  print ( "MAX<<unk>> =" , MAX , ", MIN<<unk>> =" , MIN )   								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 3 ( 2 )					      								    								  
30 BINARY_FLOOR_DIVIDE					      								    								  
32 LOAD_CONST 4 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 182 ( to 224 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 5 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 LOAD_FAST 5 ( j )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 150				      								    								  
							      								    								  
7 76 LOAD_FAST 2 ( MIN )				      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 4 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_SUBSCR					      								    								  
96 COMPARE_OP 4 ( > )					      								    								  
98 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
8 100 LOAD_FAST 0 ( arr )				      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 1 ( n )					      								    								  
108 LOAD_FAST 5 ( j )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_CONST 4 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 STORE_FAST 2 ( MIN )				      								    								  
							      								    								  
9 >> 120 LOAD_FAST 3 ( MAX )				      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 4 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 5 ( j )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 COMPARE_OP 0 ( < )					      								    								  
134 POP_JUMP_IF_FALSE 222				      								    								  
							      								    								  
10 136 LOAD_FAST 0 ( arr )				      								    								  
138 LOAD_FAST 4 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 5 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 STORE_FAST 3 ( MAX )				      								    								  
148 JUMP_ABSOLUTE 40					      								    								  
							      								    								  
12 >> 150 LOAD_FAST 2 ( MIN )				      								    								  
152 LOAD_FAST 0 ( arr )					      								    								  
154 LOAD_FAST 4 ( i )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 5 ( j )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 COMPARE_OP 4 ( > )					      								    								  
164 POP_JUMP_IF_FALSE 178				      								    								  
							      								    								  
13 166 LOAD_FAST 0 ( arr )				      								    								  
168 LOAD_FAST 4 ( i )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 LOAD_FAST 5 ( j )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 STORE_FAST 2 ( MIN )				      								    								  
							      								    								  
14 >> 178 LOAD_FAST 3 ( MAX )				      								    								  
180 LOAD_FAST 0 ( arr )					      								    								  
182 LOAD_FAST 4 ( i )					      								    								  
184 BINARY_SUBSCR					      								    								  
186 LOAD_FAST 1 ( n )					      								    								  
188 LOAD_FAST 5 ( j )					      								    								  
190 BINARY_SUBTRACT					      								    								  
192 LOAD_CONST 4 ( 1 )					      								    								  
194 BINARY_SUBTRACT					      								    								  
196 BINARY_SUBSCR					      								    								  
198 COMPARE_OP 0 ( < )					      								    								  
200 POP_JUMP_IF_FALSE 40				      								    								  
							      								    								  
15 202 LOAD_FAST 0 ( arr )				      								    								  
204 LOAD_FAST 4 ( i )					      								    								  
206 BINARY_SUBSCR					      								    								  
208 LOAD_FAST 1 ( n )					      								    								  
210 LOAD_FAST 5 ( j )					      								    								  
212 BINARY_SUBTRACT					      								    								  
214 LOAD_CONST 4 ( 1 )					      								    								  
216 BINARY_SUBTRACT					      								    								  
218 BINARY_SUBSCR					      								    								  
220 STORE_FAST 3 ( MAX )				      								    								  
>> 222 JUMP_ABSOLUTE 40					      								    								  
>> 224 POP_BLOCK					      								    								  
>> 226 JUMP_ABSOLUTE 18					      								    								  
>> 228 POP_BLOCK					      								    								  
							      								    								  
16 >> 230 LOAD_GLOBAL 1 ( print )			      								    								  
232 LOAD_CONST 5 ( 'MAX<<unk>> =' )			      								    								  
234 LOAD_FAST 3 ( MAX )					      								    								  
236 LOAD_CONST 6 ( ', MIN<<unk>> =' )			      								    								  
238 LOAD_FAST 2 ( MIN )					      								    								  
240 CALL_FUNCTION 4					      								    								  
242 POP_TOP						      								    								  
244 LOAD_CONST 0 ( None )				      								    								  
246 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_ SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_ SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_ SORT_EVEN_PLACED_ELEMENTS_<unk> ASING_ODD_PLACED_<unk> ASING_
--							      --							    --								  --
Disassembly of <code object bitonicGenerator at 0x7fbac0e8bc9 def bitonicGenerator ( arr , n ) :			    def bitonicGenerator ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  i = 1							    	i = 1							  
2 STORE_FAST 2 ( i )					      	  j = n - 1						    	j = n - 1						  
							      	  if ( j % 2 != 0 ) :					    	if j % 2 != 0 :						  
3 4 LOAD_FAST 1 ( n )					      	      j = j - 1						    	    j = j - 1						  
6 LOAD_CONST 1 ( 1 )					      	  while ( i < j ) :					    	while i < j :						  
8 BINARY_SUBTRACT					      	      arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ]	    	    arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ]	  
10 STORE_FAST 3 ( j )					      	      i = i + 2						    	    i = i + 2						  
							      	      j = j - 2						    	    j = j - 2						  
4 12 LOAD_FAST 3 ( j )					      	  arr_f = [ ]						    	arr_f = [ ]						  
14 LOAD_CONST 2 ( 2 )					      	  arr_s = [ ]						    	arr_s = [ ]						  
16 BINARY_MODULO					      	  for i in range ( int ( ( n + 1 ) / 2 ) ) :		    	for i in range ( int ( n + 1 / 2 ) ) :			  
18 LOAD_CONST 3 ( 0 )					      	      arr_f.append ( arr [ i ] )			    	    arr_f.append ( arr [ i ] )				  
20 COMPARE_OP 3 ( != )					      	  i = int ( ( n + 1 ) / 2 )				    	i = int ( n + 1 / 2 )					  
22 POP_JUMP_IF_FALSE 32					      	  while ( i < n ) :					    	while i < n :						  
							      	      arr_s.append ( arr [ i ] )			    	    arr_s.append ( arr [ i ] )				  
5 24 LOAD_FAST 3 ( j )					      	      i = i + 1						    	    i = arr_s						  
26 LOAD_CONST 1 ( 1 )					      	  arr_f.sort ( )					    return arr_s						  
28 BINARY_SUBTRACT					      	  arr_s.sort ( reverse = True )				    								  
30 STORE_FAST 3 ( j )					      	  for i in arr_s :					    								  
							      	      arr_f.append ( i )				    								  
6 >> 32 SETUP_LOOP 54 ( to 88 )				      	  return arr_f						    								  
>> 34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_FAST 3 ( j )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 3 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 ROT_TWO						      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( j )					      								    								  
60 STORE_SUBSCR						      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 STORE_SUBSCR						      								    								  
							      								    								  
8 68 LOAD_FAST 2 ( i )					      								    								  
70 LOAD_CONST 2 ( 2 )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 76 LOAD_FAST 3 ( j )					      								    								  
78 LOAD_CONST 2 ( 2 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 STORE_FAST 3 ( j )					      								    								  
84 JUMP_ABSOLUTE 34					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
10 >> 88 BUILD_LIST 0					      								    								  
90 STORE_FAST 4 ( arr_f )				      								    								  
							      								    								  
11 92 BUILD_LIST 0					      								    								  
94 STORE_FAST 5 ( arr_s )				      								    								  
							      								    								  
12 96 SETUP_LOOP 42 ( to 140 )				      								    								  
98 LOAD_GLOBAL 0 ( range )				      								    								  
100 LOAD_GLOBAL 1 ( int )				      								    								  
102 LOAD_FAST 1 ( n )					      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_CONST 2 ( 2 )					      								    								  
110 BINARY_TRUE_DIVIDE					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 CALL_FUNCTION 1					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 18 ( to 138 )				      								    								  
120 STORE_FAST 2 ( i )					      								    								  
							      								    								  
13 122 LOAD_FAST 4 ( arr_f )				      								    								  
124 LOAD_METHOD 2 ( append )				      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 CALL_METHOD 1					      								    								  
134 POP_TOP						      								    								  
136 JUMP_ABSOLUTE 118					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
14 >> 140 LOAD_GLOBAL 1 ( int )				      								    								  
142 LOAD_FAST 1 ( n )					      								    								  
144 LOAD_CONST 1 ( 1 )					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_CONST 2 ( 2 )					      								    								  
150 BINARY_TRUE_DIVIDE					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 STORE_FAST 2 ( i )					      								    								  
							      								    								  
15 156 SETUP_LOOP 34 ( to 192 )				      								    								  
>> 158 LOAD_FAST 2 ( i )				      								    								  
160 LOAD_FAST 1 ( n )					      								    								  
162 COMPARE_OP 0 ( < )					      								    								  
164 POP_JUMP_IF_FALSE 190				      								    								  
							      								    								  
16 166 LOAD_FAST 5 ( arr_s )				      								    								  
168 LOAD_METHOD 2 ( append )				      								    								  
170 LOAD_FAST 0 ( arr )					      								    								  
172 LOAD_FAST 2 ( i )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 CALL_METHOD 1					      								    								  
178 POP_TOP						      								    								  
							      								    								  
17 180 LOAD_FAST 2 ( i )				      								    								  
182 LOAD_CONST 1 ( 1 )					      								    								  
184 BINARY_ADD						      								    								  
186 STORE_FAST 2 ( i )					      								    								  
188 JUMP_ABSOLUTE 158					      								    								  
>> 190 POP_BLOCK					      								    								  
							      								    								  
18 >> 192 LOAD_FAST 4 ( arr_f )				      								    								  
194 LOAD_METHOD 3 ( sort )				      								    								  
196 CALL_METHOD 0					      								    								  
198 POP_TOP						      								    								  
							      								    								  
19 200 LOAD_FAST 5 ( arr_s )				      								    								  
202 LOAD_ATTR 3 ( sort )				      								    								  
204 LOAD_CONST 4 ( True )				      								    								  
206 LOAD_CONST 5 ( ( 'reverse' , ) )			      								    								  
208 CALL_FUNCTION_KW 1					      								    								  
210 POP_TOP						      								    								  
							      								    								  
20 212 SETUP_LOOP 22 ( to 236 )				      								    								  
214 LOAD_FAST 5 ( arr_s )				      								    								  
216 GET_ITER						      								    								  
>> 218 FOR_ITER 14 ( to 234 )				      								    								  
220 STORE_FAST 2 ( i )					      								    								  
							      								    								  
21 222 LOAD_FAST 4 ( arr_f )				      								    								  
224 LOAD_METHOD 2 ( append )				      								    								  
226 LOAD_FAST 2 ( i )					      								    								  
228 CALL_METHOD 1					      								    								  
230 POP_TOP						      								    								  
232 JUMP_ABSOLUTE 218					      								    								  
>> 234 POP_BLOCK					      								    								  
							      								    								  
22 >> 236 LOAD_FAST 4 ( arr_f )				      								    								  
238 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1		      FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1			    FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1			  FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1
--							      --							    --								  --
Disassembly of <code object isRectangle at 0x7fbac0e8bc90, fi def isRectangle ( matrix ) :				    def isRectangle ( matrix ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  rows = len ( matrix )					    	rows = len ( matrix )					  
2 LOAD_FAST 0 ( matrix )				      	  if ( rows == 0 ) :					    	if rows == 0 :						  
4 CALL_FUNCTION 1					      	      return False					    	    return False					  
6 STORE_FAST 1 ( rows )					      	  columns = len ( matrix [ 0 ] )			    	columns = len ( matrix [ 0 ] )				  
							      	  table = { }						    	table = { }						  
3 8 LOAD_FAST 1 ( rows )				      	  for i in range ( rows ) :				    	for i in range ( rows ) :				  
10 LOAD_CONST 1 ( 0 )					      	      for j in range ( columns - 1 ) :			    	    for j in range ( columns - 1 ) :			  
12 COMPARE_OP 2 ( == )					      		  for k in range ( j + 1 , columns ) :		    		for k in range ( j + 1 , columns ) :		  
14 POP_JUMP_IF_FALSE 20					      		      if ( matrix [ i ] [ j ] == 1 and matrix [ i ] 		    if matrix [ i ] [ j ] == 1 and matrix [ i ] [ 
							      			  if ( j in table and k in table [ j ] ) :  			if j in table and k in table [ j ] :	  
4 16 LOAD_CONST 2 ( False )				      			      return True			    			    return True				  
18 RETURN_VALUE						      			  if ( k in table and j in table [ k ] ) :  			if k in table and j in table [ k ] :	  
							      			      return True			    			    return True				  
5 >> 20 LOAD_GLOBAL 0 ( len )				      			  if j not in table :			    			if k not in table and j in table [ k ] :  
22 LOAD_FAST 0 ( matrix )				      			      table [ j ] = set ( )		    			    return True				  
24 LOAD_CONST 1 ( 0 )					      			  if k not in table :			    			if k not in table and j in table [ k ] :  
26 BINARY_SUBSCR					      			      table [ k ] = set ( )		    			    if j not in table [ k ] [ j ] :	  
28 CALL_FUNCTION 1					      			  table [ j ].add ( k )			    				return True			  
30 STORE_FAST 2 ( columns )				      			  table [ k ].add ( j )			    			    if k not in table [ k ] :		  
							      	  return False						    				table [ k ] [ j ] = set ( table [ 
6 32 BUILD_MAP 0					      								    		return False					  
34 STORE_FAST 3 ( table )				      								    								  
							      								    								  
7 36 SETUP_LOOP 206 ( to 244 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_FAST 1 ( rows )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 194 ( to 242 )				      								    								  
48 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 50 SETUP_LOOP 188 ( to 240 )				      								    								  
52 LOAD_GLOBAL 1 ( range )				      								    								  
54 LOAD_FAST 2 ( columns )				      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 172 ( to 238 )				      								    								  
66 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 68 SETUP_LOOP 166 ( to 236 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 5 ( j )					      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 2 ( columns )				      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 148 ( to 234 )				      								    								  
86 STORE_FAST 6 ( k )					      								    								  
							      								    								  
10 88 LOAD_FAST 0 ( matrix )				      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 5 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 3 ( 1 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 84				      								    								  
104 LOAD_FAST 0 ( matrix )				      								    								  
106 LOAD_FAST 4 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 6 ( k )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
11 120 LOAD_FAST 5 ( j )				      								    								  
122 LOAD_FAST 3 ( table )				      								    								  
124 COMPARE_OP 6 ( in )					      								    								  
126 POP_JUMP_IF_FALSE 144				      								    								  
128 LOAD_FAST 6 ( k )					      								    								  
130 LOAD_FAST 3 ( table )				      								    								  
132 LOAD_FAST 5 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 COMPARE_OP 6 ( in )					      								    								  
138 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
12 140 LOAD_CONST 4 ( True )				      								    								  
142 RETURN_VALUE					      								    								  
							      								    								  
13 >> 144 LOAD_FAST 6 ( k )				      								    								  
146 LOAD_FAST 3 ( table )				      								    								  
148 COMPARE_OP 6 ( in )					      								    								  
150 POP_JUMP_IF_FALSE 168				      								    								  
152 LOAD_FAST 5 ( j )					      								    								  
154 LOAD_FAST 3 ( table )				      								    								  
156 LOAD_FAST 6 ( k )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 COMPARE_OP 6 ( in )					      								    								  
162 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
14 164 LOAD_CONST 4 ( True )				      								    								  
166 RETURN_VALUE					      								    								  
							      								    								  
15 >> 168 LOAD_FAST 5 ( j )				      								    								  
170 LOAD_FAST 3 ( table )				      								    								  
172 COMPARE_OP 7 ( not in )				      								    								  
174 POP_JUMP_IF_FALSE 186				      								    								  
							      								    								  
16 176 LOAD_GLOBAL 2 ( set )				      								    								  
178 CALL_FUNCTION 0					      								    								  
180 LOAD_FAST 3 ( table )				      								    								  
182 LOAD_FAST 5 ( j )					      								    								  
184 STORE_SUBSCR					      								    								  
							      								    								  
17 >> 186 LOAD_FAST 6 ( k )				      								    								  
188 LOAD_FAST 3 ( table )				      								    								  
190 COMPARE_OP 7 ( not in )				      								    								  
192 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
18 194 LOAD_GLOBAL 2 ( set )				      								    								  
196 CALL_FUNCTION 0					      								    								  
198 LOAD_FAST 3 ( table )				      								    								  
200 LOAD_FAST 6 ( k )					      								    								  
202 STORE_SUBSCR					      								    								  
							      								    								  
19 >> 204 LOAD_FAST 3 ( table )				      								    								  
206 LOAD_FAST 5 ( j )					      								    								  
208 BINARY_SUBSCR					      								    								  
210 LOAD_METHOD 3 ( add )				      								    								  
212 LOAD_FAST 6 ( k )					      								    								  
214 CALL_METHOD 1					      								    								  
216 POP_TOP						      								    								  
							      								    								  
20 218 LOAD_FAST 3 ( table )				      								    								  
220 LOAD_FAST 6 ( k )					      								    								  
222 BINARY_SUBSCR					      								    								  
224 LOAD_METHOD 3 ( add )				      								    								  
226 LOAD_FAST 5 ( j )					      								    								  
228 CALL_METHOD 1					      								    								  
230 POP_TOP						      								    								  
232 JUMP_ABSOLUTE 84					      								    								  
>> 234 POP_BLOCK					      								    								  
>> 236 JUMP_ABSOLUTE 64					      								    								  
>> 238 POP_BLOCK					      								    								  
>> 240 JUMP_ABSOLUTE 46					      								    								  
>> 242 POP_BLOCK					      								    								  
							      								    								  
21 >> 244 LOAD_CONST 2 ( False )			      								    								  
246 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	      FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	    FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	  FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY
--							      --							    --								  --
Disassembly of <code object findRandomIndexOfMax at 0x7fbac0e def findRandomIndexOfMax ( arr , n ) :			    def findRandomIndexOfMax ( arr , n ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  mp = dict ( )						    	mp = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( mp )					      	      if ( arr [ i ] in mp ) :				    	    if arr [ i ] in mp :				  
							      		  mp [ arr [ i ] ] = mp [ arr [ i ] ] + 1	    		mp [ arr [ i ] ] = mp [ arr [ i ] + 1 ]		  
3 6 SETUP_LOOP 66 ( to 74 )				      	      else :						    	    else :						  
8 LOAD_GLOBAL 1 ( range )				      		  mp [ arr [ i ] ] = 1				    		mp [ arr [ i ] ] = 1				  
10 LOAD_FAST 1 ( n )					      	  max_element = - 323567				    	max_element = - 323567					  
12 CALL_FUNCTION 1					      	  max_so_far = - 323567					    	max_so_far = - 323567					  
14 GET_ITER						      	  for p in mp :						    	for p in mp :						  
>> 16 FOR_ITER 54 ( to 72 )				      	      if ( mp [ p ] > max_so_far ) :			    	    if mp [ p ] > max_so_far :				  
18 STORE_FAST 3 ( i )					      		  max_so_far = mp [ p ]				    		max_so_far = mp [ p ]				  
							      		  max_element = p				    		max_element = p					  
4 20 LOAD_FAST 0 ( arr )				      	  r = int ( ( ( random.randrange ( 1 , max_so_far , 2 ) % m 	r = int ( random.randrange ( 1 , max_so_far , 2 ) % max_s 
22 LOAD_FAST 3 ( i )					      	  i = 0							    	i = 0							  
24 BINARY_SUBSCR					      	  count = 0						    	for i in n :						  
26 LOAD_FAST 2 ( mp )					      	  while ( i < n ) :					    	    if ( ( not in max_element ) ) and ( not ( max_element 
28 COMPARE_OP 6 ( in )					      	      if ( arr [ i ] == max_element ) :			    		count = 1					  
30 POP_JUMP_IF_FALSE 58					      		  count = count + 1				    		break						  
							      	      if ( count == r ) :				    								  
5 32 LOAD_FAST 2 ( mp )					      		  print ( "Element with maximum frequency present a 								  
34 LOAD_FAST 0 ( arr )					      		  break						    								  
36 LOAD_FAST 3 ( i )					      	      i = i + 1						    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 2 ( mp )					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 58 LOAD_CONST 1 ( 1 )				      								    								  
60 LOAD_FAST 2 ( mp )					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 16					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_CONST 2 ( - 323567 )			      								    								  
76 STORE_FAST 4 ( max_element )				      								    								  
							      								    								  
9 78 LOAD_CONST 2 ( - 323567 )				      								    								  
80 STORE_FAST 5 ( max_so_far )				      								    								  
							      								    								  
10 82 SETUP_LOOP 36 ( to 120 )				      								    								  
84 LOAD_FAST 2 ( mp )					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 28 ( to 118 )				      								    								  
90 STORE_FAST 6 ( p )					      								    								  
							      								    								  
11 92 LOAD_FAST 2 ( mp )				      								    								  
94 LOAD_FAST 6 ( p )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 5 ( max_so_far )				      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 88				      								    								  
							      								    								  
12 104 LOAD_FAST 2 ( mp )				      								    								  
106 LOAD_FAST 6 ( p )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 STORE_FAST 5 ( max_so_far )				      								    								  
							      								    								  
13 112 LOAD_FAST 6 ( p )				      								    								  
114 STORE_FAST 4 ( max_element )			      								    								  
116 JUMP_ABSOLUTE 88					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_GLOBAL 2 ( int )				      								    								  
122 LOAD_GLOBAL 3 ( random )				      								    								  
124 LOAD_METHOD 4 ( randrange )				      								    								  
126 LOAD_CONST 1 ( 1 )					      								    								  
128 LOAD_FAST 5 ( max_so_far )				      								    								  
130 LOAD_CONST 3 ( 2 )					      								    								  
132 CALL_METHOD 3					      								    								  
134 LOAD_FAST 5 ( max_so_far )				      								    								  
136 BINARY_MODULO					      								    								  
138 LOAD_CONST 1 ( 1 )					      								    								  
140 BINARY_ADD						      								    								  
142 CALL_FUNCTION 1					      								    								  
144 STORE_FAST 7 ( r )					      								    								  
							      								    								  
15 146 LOAD_CONST 4 ( 0 )				      								    								  
148 STORE_FAST 3 ( i )					      								    								  
							      								    								  
16 150 LOAD_CONST 4 ( 0 )				      								    								  
152 STORE_FAST 8 ( count )				      								    								  
							      								    								  
17 154 SETUP_LOOP 60 ( to 216 )				      								    								  
>> 156 LOAD_FAST 3 ( i )				      								    								  
158 LOAD_FAST 1 ( n )					      								    								  
160 COMPARE_OP 0 ( < )					      								    								  
162 POP_JUMP_IF_FALSE 214				      								    								  
							      								    								  
18 164 LOAD_FAST 0 ( arr )				      								    								  
166 LOAD_FAST 3 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_FAST 4 ( max_element )				      								    								  
172 COMPARE_OP 2 ( == )					      								    								  
174 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
19 176 LOAD_FAST 8 ( count )				      								    								  
178 LOAD_CONST 1 ( 1 )					      								    								  
180 BINARY_ADD						      								    								  
182 STORE_FAST 8 ( count )				      								    								  
							      								    								  
20 >> 184 LOAD_FAST 8 ( count )				      								    								  
186 LOAD_FAST 7 ( r )					      								    								  
188 COMPARE_OP 2 ( == )					      								    								  
190 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
21 192 LOAD_GLOBAL 5 ( print )				      								    								  
194 LOAD_CONST 5 ( 'Element with maximum frequency present at 								    								  
196 LOAD_FAST 3 ( i )					      								    								  
198 CALL_FUNCTION 2					      								    								  
200 POP_TOP						      								    								  
							      								    								  
22 202 BREAK_LOOP					      								    								  
							      								    								  
23 >> 204 LOAD_FAST 3 ( i )				      								    								  
206 LOAD_CONST 1 ( 1 )					      								    								  
208 BINARY_ADD						      								    								  
210 STORE_FAST 3 ( i )					      								    								  
212 JUMP_ABSOLUTE 156					      								    								  
>> 214 POP_BLOCK					      								    								  
>> 216 LOAD_CONST 0 ( None )				      								    								  
218 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE
--							      --							    --								  --
Disassembly of <code object <<unk>> stSubsegment at 0x7fbac0e def <<unk>> stSubsegment ( a , n ) :			    def <unk> stSubsegment ( a , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  left = dict ( )					    	left = dict ( )						  
2 CALL_FUNCTION 0					      	  count = dict ( )					    	count = dict ( )					  
4 STORE_FAST 2 ( left )					      	  mx = 0						    	mx , strindex = 0					  
							      	  mn , strindex = 0 , 0					    	for i in range ( n ) :					  
3 6 LOAD_GLOBAL 0 ( dict )				      	  for i in range ( n ) :				    	    x = a [ i ]						  
8 CALL_FUNCTION 0					      	      x = a [ i ]					    	    if x not in count.keys ( ) :			  
10 STORE_FAST 3 ( count )				      	      if ( x not in count.keys ( ) ) :			    		left [ x ] = i					  
							      		  left [ x ] = i				    		count [ x ] = 1					  
4 12 LOAD_CONST 1 ( 0 )					      		  count [ x ] = 1				    	    else :						  
14 STORE_FAST 4 ( mx )					      	      else :						    		count [ x ] += 1				  
							      		  count [ x ] += 1				    	    if count [ x ] > mx :				  
5 16 LOAD_CONST 2 ( ( 0 , 0 ) )				      	      if ( count [ x ] > mx ) :				    		mx = count [ x ]				  
18 UNPACK_SEQUENCE 2					      		  mx = count [ x ]				    		mn = ( i - left [ x ] + 1 )			  
20 STORE_FAST 5 ( mn )					      		  mn = i - left [ x ] + 1			    		strindex = left [ x ]				  
22 STORE_FAST 6 ( strindex )				      		  strindex = left [ x ]				    	    elif count [ x ] == mx and ( i + left [ x ] + 1 < mn  
							      	      elif ( count [ x ] == mx and i - left [ x ] + 1 < mn  		if mn [ i ] < mn [ i ] :			  
6 24 SETUP_LOOP 172 ( to 198 )				      		  mn = i - left [ x ] + 1			    		    strindex = ( i + left [ i ] )		  
26 LOAD_GLOBAL 1 ( range )				      		  strindex = left [ x ]				    								  
28 LOAD_FAST 1 ( n )					      	  for i in range ( strindex , strindex + mn ) :		    								  
30 CALL_FUNCTION 1					      	      print ( a [ i ] , end = " " )			    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 160 ( to 196 )				      								    								  
36 STORE_FAST 7 ( i )					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 7 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 STORE_FAST 8 ( x )					      								    								  
							      								    								  
8 46 LOAD_FAST 8 ( x )					      								    								  
48 LOAD_FAST 3 ( count )				      								    								  
50 LOAD_METHOD 2 ( keys )				      								    								  
52 CALL_METHOD 0					      								    								  
54 COMPARE_OP 7 ( not in )				      								    								  
56 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 58 LOAD_FAST 7 ( i )					      								    								  
60 LOAD_FAST 2 ( left )					      								    								  
62 LOAD_FAST 8 ( x )					      								    								  
64 STORE_SUBSCR						      								    								  
							      								    								  
10 66 LOAD_CONST 3 ( 1 )				      								    								  
68 LOAD_FAST 3 ( count )				      								    								  
70 LOAD_FAST 8 ( x )					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_FORWARD 16 ( to 92 )				      								    								  
							      								    								  
12 >> 76 LOAD_FAST 3 ( count )				      								    								  
78 LOAD_FAST 8 ( x )					      								    								  
80 DUP_TOP_TWO						      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 3 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 ROT_THREE						      								    								  
90 STORE_SUBSCR						      								    								  
							      								    								  
13 >> 92 LOAD_FAST 3 ( count )				      								    								  
94 LOAD_FAST 8 ( x )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 4 ( mx )					      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
14 104 LOAD_FAST 3 ( count )				      								    								  
106 LOAD_FAST 8 ( x )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 STORE_FAST 4 ( mx )					      								    								  
							      								    								  
15 112 LOAD_FAST 7 ( i )				      								    								  
114 LOAD_FAST 2 ( left )				      								    								  
116 LOAD_FAST 8 ( x )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 LOAD_CONST 3 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 5 ( mn )					      								    								  
							      								    								  
16 128 LOAD_FAST 2 ( left )				      								    								  
130 LOAD_FAST 8 ( x )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 STORE_FAST 6 ( strindex )				      								    								  
136 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
17 >> 138 LOAD_FAST 3 ( count )				      								    								  
140 LOAD_FAST 8 ( x )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_FAST 4 ( mx )					      								    								  
146 COMPARE_OP 2 ( == )					      								    								  
148 POP_JUMP_IF_FALSE 34				      								    								  
150 LOAD_FAST 7 ( i )					      								    								  
152 LOAD_FAST 2 ( left )				      								    								  
154 LOAD_FAST 8 ( x )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 BINARY_SUBTRACT					      								    								  
160 LOAD_CONST 3 ( 1 )					      								    								  
162 BINARY_ADD						      								    								  
164 LOAD_FAST 5 ( mn )					      								    								  
166 COMPARE_OP 0 ( < )					      								    								  
168 POP_JUMP_IF_FALSE 34				      								    								  
							      								    								  
18 170 LOAD_FAST 7 ( i )				      								    								  
172 LOAD_FAST 2 ( left )				      								    								  
174 LOAD_FAST 8 ( x )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 BINARY_SUBTRACT					      								    								  
180 LOAD_CONST 3 ( 1 )					      								    								  
182 BINARY_ADD						      								    								  
184 STORE_FAST 5 ( mn )					      								    								  
							      								    								  
19 186 LOAD_FAST 2 ( left )				      								    								  
188 LOAD_FAST 8 ( x )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 STORE_FAST 6 ( strindex )				      								    								  
194 JUMP_ABSOLUTE 34					      								    								  
>> 196 POP_BLOCK					      								    								  
							      								    								  
20 >> 198 SETUP_LOOP 38 ( to 238 )			      								    								  
200 LOAD_GLOBAL 1 ( range )				      								    								  
202 LOAD_FAST 6 ( strindex )				      								    								  
204 LOAD_FAST 6 ( strindex )				      								    								  
206 LOAD_FAST 5 ( mn )					      								    								  
208 BINARY_ADD						      								    								  
210 CALL_FUNCTION 2					      								    								  
212 GET_ITER						      								    								  
>> 214 FOR_ITER 20 ( to 236 )				      								    								  
216 STORE_FAST 7 ( i )					      								    								  
							      								    								  
21 218 LOAD_GLOBAL 3 ( print )				      								    								  
220 LOAD_FAST 0 ( a )					      								    								  
222 LOAD_FAST 7 ( i )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 LOAD_CONST 4 ( ' ' )				      								    								  
228 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
230 CALL_FUNCTION_KW 2					      								    								  
232 POP_TOP						      								    								  
234 JUMP_ABSOLUTE 214					      								    								  
>> 236 POP_BLOCK					      								    								  
>> 238 LOAD_CONST 0 ( None )				      								    								  
240 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN
--							      --							    --								  --
Disassembly of <code object countWords at 0x7fbac0e8d540, fil def countWords ( str , l ) :				    def countWords ( str , l ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  count = 1 ;						    	count = 1						  
2 STORE_FAST 2 ( count )				      	  if ( l == 1 ) :					    	if l == 1 :						  
							      	      return count					    	    return count					  
3 4 LOAD_FAST 1 ( l )					      	  if ( str [ 0 ] == str [ 1 ] ) :			    	if str [ 0 ] == str [ 1 ] :				  
6 LOAD_CONST 1 ( 1 )					      	      count *= 1					    	    count *= 1						  
8 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
10 POP_JUMP_IF_FALSE 16					      	      count *= 2					    	    count *= 2						  
							      	  for j in range ( 1 , l - 1 ) :			    	for j in range ( 1 , l - 1 ) :				  
4 12 LOAD_FAST 2 ( count )				      	      if ( str [ j ] == str [ j - 1 ] and str [ j ] == str  	    if str [ j ] == str [ j - 1 ] and str [ j + 1 ] :	  
14 RETURN_VALUE						      		  count *= 1					    		count *= 1					  
							      	      elif ( str [ j ] == str [ j - 1 ] or str [ j ] == str 	    else :						  
5 >> 16 LOAD_FAST 0 ( str )				      		  count *= 2					    		if str [ j ] == str [ j - 1 ] or str [ j - 1 ] == 
18 LOAD_CONST 2 ( 0 )					      	      else :						    		    count *= 1					  
20 BINARY_SUBSCR					      		  count *= 3					    	count *= count						  
22 LOAD_FAST 0 ( str )					      	  if ( str [ l - 1 ] == str [ l - 2 ] ) :		    	count *= count						  
24 LOAD_CONST 1 ( 1 )					      	      count *= 1					    return count						  
26 BINARY_SUBSCR					      	  else :						    								  
28 COMPARE_OP 2 ( == )					      	      count *= 2					    								  
30 POP_JUMP_IF_FALSE 42					      	  return count						    								  
							      								    								  
6 32 LOAD_FAST 2 ( count )				      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 INPLACE_MULTIPLY					      								    								  
38 STORE_FAST 2 ( count )				      								    								  
40 JUMP_FORWARD 8 ( to 50 )				      								    								  
							      								    								  
8 >> 42 LOAD_FAST 2 ( count )				      								    								  
44 LOAD_CONST 3 ( 2 )					      								    								  
46 INPLACE_MULTIPLY					      								    								  
48 STORE_FAST 2 ( count )				      								    								  
							      								    								  
9 >> 50 SETUP_LOOP 154 ( to 206 )			      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 LOAD_FAST 1 ( l )					      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 136 ( to 204 )				      								    								  
68 STORE_FAST 3 ( j )					      								    								  
							      								    								  
10 70 LOAD_FAST 0 ( str )				      								    								  
72 LOAD_FAST 3 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( str )					      								    								  
78 LOAD_FAST 3 ( j )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 BINARY_SUBSCR					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 120				      								    								  
90 LOAD_FAST 0 ( str )					      								    								  
92 LOAD_FAST 3 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 0 ( str )					      								    								  
98 LOAD_FAST 3 ( j )					      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 BINARY_SUBSCR					      								    								  
106 COMPARE_OP 2 ( == )					      								    								  
108 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
11 110 LOAD_FAST 2 ( count )				      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 INPLACE_MULTIPLY					      								    								  
116 STORE_FAST 2 ( count )				      								    								  
118 JUMP_ABSOLUTE 66					      								    								  
							      								    								  
12 >> 120 LOAD_FAST 0 ( str )				      								    								  
122 LOAD_FAST 3 ( j )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( str )					      								    								  
128 LOAD_FAST 3 ( j )					      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 BINARY_SUBSCR					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_TRUE 184				      								    								  
140 LOAD_FAST 0 ( str )					      								    								  
142 LOAD_FAST 3 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 0 ( str )					      								    								  
148 LOAD_FAST 3 ( j )					      								    								  
150 LOAD_CONST 1 ( 1 )					      								    								  
152 BINARY_ADD						      								    								  
154 BINARY_SUBSCR					      								    								  
156 COMPARE_OP 2 ( == )					      								    								  
158 POP_JUMP_IF_TRUE 184				      								    								  
160 LOAD_FAST 0 ( str )					      								    								  
162 LOAD_FAST 3 ( j )					      								    								  
164 LOAD_CONST 1 ( 1 )					      								    								  
166 BINARY_SUBTRACT					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_FAST 0 ( str )					      								    								  
172 LOAD_FAST 3 ( j )					      								    								  
174 LOAD_CONST 1 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 BINARY_SUBSCR					      								    								  
180 COMPARE_OP 2 ( == )					      								    								  
182 POP_JUMP_IF_FALSE 194				      								    								  
							      								    								  
13 >> 184 LOAD_FAST 2 ( count )				      								    								  
186 LOAD_CONST 3 ( 2 )					      								    								  
188 INPLACE_MULTIPLY					      								    								  
190 STORE_FAST 2 ( count )				      								    								  
192 JUMP_ABSOLUTE 66					      								    								  
							      								    								  
15 >> 194 LOAD_FAST 2 ( count )				      								    								  
196 LOAD_CONST 4 ( 3 )					      								    								  
198 INPLACE_MULTIPLY					      								    								  
200 STORE_FAST 2 ( count )				      								    								  
202 JUMP_ABSOLUTE 66					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
16 >> 206 LOAD_FAST 0 ( str )				      								    								  
208 LOAD_FAST 1 ( l )					      								    								  
210 LOAD_CONST 1 ( 1 )					      								    								  
212 BINARY_SUBTRACT					      								    								  
214 BINARY_SUBSCR					      								    								  
216 LOAD_FAST 0 ( str )					      								    								  
218 LOAD_FAST 1 ( l )					      								    								  
220 LOAD_CONST 3 ( 2 )					      								    								  
222 BINARY_SUBTRACT					      								    								  
224 BINARY_SUBSCR					      								    								  
226 COMPARE_OP 2 ( == )					      								    								  
228 POP_JUMP_IF_FALSE 240				      								    								  
							      								    								  
17 230 LOAD_FAST 2 ( count )				      								    								  
232 LOAD_CONST 1 ( 1 )					      								    								  
234 INPLACE_MULTIPLY					      								    								  
236 STORE_FAST 2 ( count )				      								    								  
238 JUMP_FORWARD 8 ( to 248 )				      								    								  
							      								    								  
19 >> 240 LOAD_FAST 2 ( count )				      								    								  
242 LOAD_CONST 3 ( 2 )					      								    								  
244 INPLACE_MULTIPLY					      								    								  
246 STORE_FAST 2 ( count )				      								    								  
							      								    								  
20 >> 248 LOAD_FAST 2 ( count )				      								    								  
250 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT		      CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT			    CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT			  CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT
--							      --							    --								  --
Disassembly of <code object isMagicSquare at 0x7fbac0e89d20,  def isMagicSquare ( mat ) :				    def isMagicSquare ( mat ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  s = 0							    	s = 0							  
2 STORE_FAST 1 ( s )					      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
							      	      s = s + mat [ i ] [ i ]				    	    s = s + mat [ i ] [ i ]				  
3 4 SETUP_LOOP 34 ( to 40 )				      	  s2 = 0						    	s2 = 0							  
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
8 LOAD_CONST 1 ( 0 )					      	      s2 = s2 + mat [ i ] [ N - i - 1 ]			    	    s2 = s2 + mat [ i ] [ N - i - 1 ]			  
10 LOAD_GLOBAL 1 ( N )					      	  if ( s != s2 ) :					    	if s != s2 :						  
12 CALL_FUNCTION 2					      	      return False					    	    return False					  
14 GET_ITER						      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
>> 16 FOR_ITER 20 ( to 38 )				      	      rowSum = 0 ;					    	    rowSum = 0						  
18 STORE_FAST 2 ( i )					      	      for j in range ( 0 , N ) :			    	    for j in range ( 0 , N ) :				  
							      		  rowSum += mat [ i ] [ j ]			    		rowSum += mat [ i ] [ j ]			  
4 20 LOAD_FAST 1 ( s )					      	      if ( rowSum != s ) :				    	    if rowSum != s :					  
22 LOAD_FAST 0 ( mat )					      		  return False					    		return False					  
24 LOAD_FAST 2 ( i )					      	  for i in range ( 0 , N ) :				    	    for i in range ( 0 , N ) :				  
26 BINARY_SUBSCR					      	      colSum = 0					    		if colSum != 0 :				  
28 LOAD_FAST 2 ( i )					      	      for j in range ( 0 , N ) :			    		    return False				  
30 BINARY_SUBSCR					      		  colSum += mat [ j ] [ i ]			    		for Sum in range ( 3 , N ) :			  
32 BINARY_ADD						      	      if ( s != colSum ) :				    		    if Sum != 1 :				  
34 STORE_FAST 1 ( s )					      		  return False					    			return False				  
36 JUMP_ABSOLUTE 16					      	  return True						    	return True						  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_CONST 1 ( 0 )				      								    								  
42 STORE_FAST 3 ( s2 )					      								    								  
							      								    								  
6 44 SETUP_LOOP 42 ( to 88 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 LOAD_GLOBAL 1 ( N )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 28 ( to 86 )				      								    								  
58 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 60 LOAD_FAST 3 ( s2 )					      								    								  
62 LOAD_FAST 0 ( mat )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_GLOBAL 1 ( N )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 3 ( s2 )					      								    								  
84 JUMP_ABSOLUTE 56					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
8 >> 88 LOAD_FAST 1 ( s )				      								    								  
90 LOAD_FAST 3 ( s2 )					      								    								  
92 COMPARE_OP 3 ( != )					      								    								  
94 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
9 96 LOAD_CONST 3 ( False )				      								    								  
98 RETURN_VALUE						      								    								  
							      								    								  
10 >> 100 SETUP_LOOP 70 ( to 172 )			      								    								  
102 LOAD_GLOBAL 0 ( range )				      								    								  
104 LOAD_CONST 1 ( 0 )					      								    								  
106 LOAD_GLOBAL 1 ( N )					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 56 ( to 170 )				      								    								  
114 STORE_FAST 2 ( i )					      								    								  
							      								    								  
11 116 LOAD_CONST 1 ( 0 )				      								    								  
118 STORE_FAST 4 ( rowSum )				      								    								  
							      								    								  
12 120 SETUP_LOOP 34 ( to 156 )				      								    								  
122 LOAD_GLOBAL 0 ( range )				      								    								  
124 LOAD_CONST 1 ( 0 )					      								    								  
126 LOAD_GLOBAL 1 ( N )					      								    								  
128 CALL_FUNCTION 2					      								    								  
130 GET_ITER						      								    								  
>> 132 FOR_ITER 20 ( to 154 )				      								    								  
134 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 136 LOAD_FAST 4 ( rowSum )				      								    								  
138 LOAD_FAST 0 ( mat )					      								    								  
140 LOAD_FAST 2 ( i )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_FAST 5 ( j )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 4 ( rowSum )				      								    								  
152 JUMP_ABSOLUTE 132					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
14 >> 156 LOAD_FAST 4 ( rowSum )			      								    								  
158 LOAD_FAST 1 ( s )					      								    								  
160 COMPARE_OP 3 ( != )					      								    								  
162 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
15 164 LOAD_CONST 3 ( False )				      								    								  
166 RETURN_VALUE					      								    								  
168 JUMP_ABSOLUTE 112					      								    								  
>> 170 POP_BLOCK					      								    								  
							      								    								  
16 >> 172 SETUP_LOOP 70 ( to 244 )			      								    								  
174 LOAD_GLOBAL 0 ( range )				      								    								  
176 LOAD_CONST 1 ( 0 )					      								    								  
178 LOAD_GLOBAL 1 ( N )					      								    								  
180 CALL_FUNCTION 2					      								    								  
182 GET_ITER						      								    								  
>> 184 FOR_ITER 56 ( to 242 )				      								    								  
186 STORE_FAST 2 ( i )					      								    								  
							      								    								  
17 188 LOAD_CONST 1 ( 0 )				      								    								  
190 STORE_FAST 6 ( colSum )				      								    								  
							      								    								  
18 192 SETUP_LOOP 34 ( to 228 )				      								    								  
194 LOAD_GLOBAL 0 ( range )				      								    								  
196 LOAD_CONST 1 ( 0 )					      								    								  
198 LOAD_GLOBAL 1 ( N )					      								    								  
200 CALL_FUNCTION 2					      								    								  
202 GET_ITER						      								    								  
>> 204 FOR_ITER 20 ( to 226 )				      								    								  
206 STORE_FAST 5 ( j )					      								    								  
							      								    								  
19 208 LOAD_FAST 6 ( colSum )				      								    								  
210 LOAD_FAST 0 ( mat )					      								    								  
212 LOAD_FAST 5 ( j )					      								    								  
214 BINARY_SUBSCR					      								    								  
216 LOAD_FAST 2 ( i )					      								    								  
218 BINARY_SUBSCR					      								    								  
220 INPLACE_ADD						      								    								  
222 STORE_FAST 6 ( colSum )				      								    								  
224 JUMP_ABSOLUTE 204					      								    								  
>> 226 POP_BLOCK					      								    								  
							      								    								  
20 >> 228 LOAD_FAST 1 ( s )				      								    								  
230 LOAD_FAST 6 ( colSum )				      								    								  
232 COMPARE_OP 3 ( != )					      								    								  
234 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
21 236 LOAD_CONST 3 ( False )				      								    								  
238 RETURN_VALUE					      								    								  
240 JUMP_ABSOLUTE 184					      								    								  
>> 242 POP_BLOCK					      								    								  
							      								    								  
22 >> 244 LOAD_CONST 4 ( True )				      								    								  
246 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
Disassembly of <code object bestFit at 0x7fbac0e8d540, file " def bestFit ( blockSize , m , processSize , n ) :		    def bestFit ( blockSize , m , processSize , n = 5 ) :	  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( - 1 )				      	  allocation = [ - 1 ] * n				    	allocation = [ - 1 ] * n				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/PROGRA
4 LOAD_FAST 3 ( n )					      	      bestIdx = - 1					    	    bestIdx = - 1					  M_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT.py", line 8
6 BINARY_MULTIPLY					      	      for j in range ( m ) :				    	    for j in range ( m ) :				  6, in <module>     f_filled(*(filled_function_para
8 STORE_FAST 4 ( allocation )				      		  if blockSize [ j ] >= processSize [ i ] :	    		if blockSize [ j ] >= processSize [ i ] :	  m[i]))   File "/home/ubuntu/TransCoder/models/eval
							      		      if bestIdx == - 1 :			    		    if bestIdx == - 1 :				  /mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python_
3 10 SETUP_LOOP 124 ( to 136 )				      			  bestIdx = j				    			bestIdx = j				  sa.test/PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEME
12 LOAD_GLOBAL 0 ( range )				      		      elif blockSize [ bestIdx ] > blockSize [ j ]  		elif blockSize [ bestIdx ] > blockSize [ j ] :	  NT.py", line 54, in f_filled	   print ( " process
14 LOAD_FAST 3 ( n )					      			  bestIdx = j				    		    bestIdx = j					  Size	  " + i ) TypeError: must be str, not int
16 CALL_FUNCTION 1					      	      if bestIdx != - 1 :				    	    if bestIdx != - 1 :					  
18 GET_ITER						      		  allocation [ i ] = bestIdx			    		allocation [ i ] = bestIdx			  
>> 20 FOR_ITER 112 ( to 134 )				      		  blockSize [ bestIdx ] -= processSize [ i ]	    		blockSize [ bestIdx ] -= processSize [ i ]	  
22 STORE_FAST 5 ( i )					      	  print ( "Process No.Process Size     Block no." )	    	print ( "Process No.Process Size    Block no." )	  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 24 LOAD_CONST 1 ( - 1 )				      	      print ( i + 1 , "		" , processSize [ i ] , end 	    print ( " processSize    " + i )			  
26 STORE_FAST 6 ( bestIdx )				      	      if allocation [ i ] != - 1 :			    	    if i != 0 :						  
							      		  print ( allocation [ i ] + 1 )		    		print ( "	" + i )				  
5 28 SETUP_LOOP 66 ( to 96 )				      	      else :						    								  
30 LOAD_GLOBAL 0 ( range )				      		  print ( "Not Allocated" )			    								  
32 LOAD_FAST 1 ( m )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 54 ( to 94 )				      								    								  
40 STORE_FAST 7 ( j )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( blockSize )				      								    								  
44 LOAD_FAST 7 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 2 ( processSize )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 5 ( >= )					      								    								  
56 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
7 58 LOAD_FAST 6 ( bestIdx )				      								    								  
60 LOAD_CONST 1 ( - 1 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 66 LOAD_FAST 7 ( j )					      								    								  
68 STORE_FAST 6 ( bestIdx )				      								    								  
70 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
9 >> 72 LOAD_FAST 0 ( blockSize )			      								    								  
74 LOAD_FAST 6 ( bestIdx )				      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 0 ( blockSize )				      								    								  
80 LOAD_FAST 7 ( j )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
10 88 LOAD_FAST 7 ( j )					      								    								  
90 STORE_FAST 6 ( bestIdx )				      								    								  
92 JUMP_ABSOLUTE 38					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
11 >> 96 LOAD_FAST 6 ( bestIdx )			      								    								  
98 LOAD_CONST 1 ( - 1 )					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 20				      								    								  
							      								    								  
12 104 LOAD_FAST 6 ( bestIdx )				      								    								  
106 LOAD_FAST 4 ( allocation )				      								    								  
108 LOAD_FAST 5 ( i )					      								    								  
110 STORE_SUBSCR					      								    								  
							      								    								  
13 112 LOAD_FAST 0 ( blockSize )			      								    								  
114 LOAD_FAST 6 ( bestIdx )				      								    								  
116 DUP_TOP_TWO						      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 2 ( processSize )				      								    								  
122 LOAD_FAST 5 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 INPLACE_SUBTRACT					      								    								  
128 ROT_THREE						      								    								  
130 STORE_SUBSCR					      								    								  
132 JUMP_ABSOLUTE 20					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
14 >> 136 LOAD_GLOBAL 1 ( print )			      								    								  
138 LOAD_CONST 2 ( 'Process No.Process Size	Block no.' )  								    								  
140 CALL_FUNCTION 1					      								    								  
142 POP_TOP						      								    								  
							      								    								  
15 144 SETUP_LOOP 78 ( to 224 )				      								    								  
146 LOAD_GLOBAL 0 ( range )				      								    								  
148 LOAD_FAST 3 ( n )					      								    								  
150 CALL_FUNCTION 1					      								    								  
152 GET_ITER						      								    								  
>> 154 FOR_ITER 66 ( to 222 )				      								    								  
156 STORE_FAST 5 ( i )					      								    								  
							      								    								  
16 158 LOAD_GLOBAL 1 ( print )				      								    								  
160 LOAD_FAST 5 ( i )					      								    								  
162 LOAD_CONST 3 ( 1 )					      								    								  
164 BINARY_ADD						      								    								  
166 LOAD_CONST 4 ( '	     ' )			      								    								  
168 LOAD_FAST 2 ( processSize )				      								    								  
170 LOAD_FAST 5 ( i )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_CONST 4 ( '	     ' )			      								    								  
176 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
178 CALL_FUNCTION_KW 4					      								    								  
180 POP_TOP						      								    								  
							      								    								  
17 182 LOAD_FAST 4 ( allocation )			      								    								  
184 LOAD_FAST 5 ( i )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_CONST 1 ( - 1 )				      								    								  
190 COMPARE_OP 3 ( != )					      								    								  
192 POP_JUMP_IF_FALSE 212				      								    								  
							      								    								  
18 194 LOAD_GLOBAL 1 ( print )				      								    								  
196 LOAD_FAST 4 ( allocation )				      								    								  
198 LOAD_FAST 5 ( i )					      								    								  
200 BINARY_SUBSCR					      								    								  
202 LOAD_CONST 3 ( 1 )					      								    								  
204 BINARY_ADD						      								    								  
206 CALL_FUNCTION 1					      								    								  
208 POP_TOP						      								    								  
210 JUMP_ABSOLUTE 154					      								    								  
							      								    								  
20 >> 212 LOAD_GLOBAL 1 ( print )			      								    								  
214 LOAD_CONST 6 ( 'Not Allocated' )			      								    								  
216 CALL_FUNCTION 1					      								    								  
218 POP_TOP						      								    								  
220 JUMP_ABSOLUTE 154					      								    								  
>> 222 POP_BLOCK					      								    								  
>> 224 LOAD_CONST 0 ( None )				      								    								  
226 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_PR<unk> CT_TWO_<unk> YS			      MINIMUM_SUM_PR<unk> CT_TWO_<unk> YS			    MINIMUM_SUM_PR<unk> CT_TWO_<unk> YS				  MINIMUM_SUM_PR<unk> CT_TWO_<unk> YS
--							      --							    --								  --
Disassembly of <code object minproduct at 0x7fbac0e89d20, fil def minproduct ( a , b , n , k ) :			    def minproduct ( a , b , n , k = 2 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  diff = 0						    	diff = 0						  
2 STORE_FAST 4 ( diff )					      	  res = 0						    	res = 0							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      pro = a [ i ] * b [ i ]				    	    pro = a [ i ] * b [ i ]				  
6 STORE_FAST 5 ( res )					      	      res = res + pro					    	    res = res + pro					  
							      	      if ( pro < 0 and b [ i ] < 0 ) :			    	    if pro < 0 and b [ i ] < 0 :			  
4 8 SETUP_LOOP 246 ( to 256 )				      		  temp = ( a [ i ] + 2 * k ) * b [ i ]		    		temp = a [ i ] * 2 * k * b [ i ]		  
10 LOAD_GLOBAL 0 ( range )				      	      elif ( pro < 0 and a [ i ] < 0 ) :		    	elif pro < 0 and a [ i ] < 0 :				  
12 LOAD_FAST 2 ( n )					      		  temp = ( a [ i ] - 2 * k ) * b [ i ]		    	    temp = a [ i ] * ( 2 * k ) * b [ i ]		  
14 CALL_FUNCTION 1					      	      elif ( pro > 0 and a [ i ] < 0 ) :		    	elif pro > 0 and a [ i ] < 0 :				  
16 GET_ITER						      		  temp = ( a [ i ] + 2 * k ) * b [ i ]		    	    temp = a [ i ] * b [ i ] * b [ i ]			  
>> 18 FOR_ITER 234 ( to 254 )				      	      elif ( pro > 0 and a [ i ] > 0 ) :		    elif pro > 0 :						  
20 STORE_FAST 6 ( i )					      		  temp = ( a [ i ] - 2 * k ) * b [ i ]		    	res = a [ i ] * b [ i ]					  
							      	      d = abs ( pro - temp )				    if k > 0 :							  
5 22 LOAD_FAST 0 ( a )					      	      if ( d > diff ) :					    	res = a [ i ] * b [ i ] * b [ i ] * b [ i ]		  
24 LOAD_FAST 6 ( i )					      		  diff = d					    if res > 0 and a [ i ] * b [ i ] > 0 :			  
26 BINARY_SUBSCR					      	  return res - diff					    	res = a [ i ] * b [ i ]					  
28 LOAD_FAST 1 ( b )					      								    return res							  
30 LOAD_FAST 6 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 7 ( pro )					      								    								  
							      								    								  
6 38 LOAD_FAST 5 ( res )				      								    								  
40 LOAD_FAST 7 ( pro )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 5 ( res )					      								    								  
							      								    								  
7 46 LOAD_FAST 7 ( pro )				      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 92					      								    								  
54 LOAD_FAST 1 ( b )					      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 6 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 2 ( 2 )					      								    								  
74 LOAD_FAST 3 ( k )					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 1 ( b )					      								    								  
82 LOAD_FAST 6 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_MULTIPLY					      								    								  
88 STORE_FAST 8 ( temp )				      								    								  
90 JUMP_FORWARD 136 ( to 228 )				      								    								  
							      								    								  
9 >> 92 LOAD_FAST 7 ( pro )				      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 138				      								    								  
100 LOAD_FAST 0 ( a )					      								    								  
102 LOAD_FAST 6 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_CONST 1 ( 0 )					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
10 112 LOAD_FAST 0 ( a )				      								    								  
114 LOAD_FAST 6 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 2 ( 2 )					      								    								  
120 LOAD_FAST 3 ( k )					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 BINARY_SUBTRACT					      								    								  
126 LOAD_FAST 1 ( b )					      								    								  
128 LOAD_FAST 6 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 BINARY_MULTIPLY					      								    								  
134 STORE_FAST 8 ( temp )				      								    								  
136 JUMP_FORWARD 90 ( to 228 )				      								    								  
							      								    								  
11 >> 138 LOAD_FAST 7 ( pro )				      								    								  
140 LOAD_CONST 1 ( 0 )					      								    								  
142 COMPARE_OP 4 ( > )					      								    								  
144 POP_JUMP_IF_FALSE 184				      								    								  
146 LOAD_FAST 0 ( a )					      								    								  
148 LOAD_FAST 6 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_CONST 1 ( 0 )					      								    								  
154 COMPARE_OP 0 ( < )					      								    								  
156 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
12 158 LOAD_FAST 0 ( a )				      								    								  
160 LOAD_FAST 6 ( i )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_CONST 2 ( 2 )					      								    								  
166 LOAD_FAST 3 ( k )					      								    								  
168 BINARY_MULTIPLY					      								    								  
170 BINARY_ADD						      								    								  
172 LOAD_FAST 1 ( b )					      								    								  
174 LOAD_FAST 6 ( i )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 BINARY_MULTIPLY					      								    								  
180 STORE_FAST 8 ( temp )				      								    								  
182 JUMP_FORWARD 44 ( to 228 )				      								    								  
							      								    								  
13 >> 184 LOAD_FAST 7 ( pro )				      								    								  
186 LOAD_CONST 1 ( 0 )					      								    								  
188 COMPARE_OP 4 ( > )					      								    								  
190 POP_JUMP_IF_FALSE 228				      								    								  
192 LOAD_FAST 0 ( a )					      								    								  
194 LOAD_FAST 6 ( i )					      								    								  
196 BINARY_SUBSCR					      								    								  
198 LOAD_CONST 1 ( 0 )					      								    								  
200 COMPARE_OP 4 ( > )					      								    								  
202 POP_JUMP_IF_FALSE 228				      								    								  
							      								    								  
14 204 LOAD_FAST 0 ( a )				      								    								  
206 LOAD_FAST 6 ( i )					      								    								  
208 BINARY_SUBSCR					      								    								  
210 LOAD_CONST 2 ( 2 )					      								    								  
212 LOAD_FAST 3 ( k )					      								    								  
214 BINARY_MULTIPLY					      								    								  
216 BINARY_SUBTRACT					      								    								  
218 LOAD_FAST 1 ( b )					      								    								  
220 LOAD_FAST 6 ( i )					      								    								  
222 BINARY_SUBSCR					      								    								  
224 BINARY_MULTIPLY					      								    								  
226 STORE_FAST 8 ( temp )				      								    								  
							      								    								  
15 >> 228 LOAD_GLOBAL 1 ( abs )				      								    								  
230 LOAD_FAST 7 ( pro )					      								    								  
232 LOAD_FAST 8 ( temp )				      								    								  
234 BINARY_SUBTRACT					      								    								  
236 CALL_FUNCTION 1					      								    								  
238 STORE_FAST 9 ( d )					      								    								  
							      								    								  
16 240 LOAD_FAST 9 ( d )				      								    								  
242 LOAD_FAST 4 ( diff )				      								    								  
244 COMPARE_OP 4 ( > )					      								    								  
246 POP_JUMP_IF_FALSE 18				      								    								  
							      								    								  
17 248 LOAD_FAST 9 ( d )				      								    								  
250 STORE_FAST 4 ( diff )				      								    								  
252 JUMP_ABSOLUTE 18					      								    								  
>> 254 POP_BLOCK					      								    								  
							      								    								  
18 >> 256 LOAD_FAST 5 ( res )				      								    								  
258 LOAD_FAST 4 ( diff )				      								    								  
260 BINARY_SUBTRACT					      								    								  
262 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CUT_BOARD_SQUARES				      MINIMUM_COST_CUT_BOARD_SQUARES				    MINIMUM_COST_CUT_BOARD_SQUARES				  MINIMUM_COST_CUT_BOARD_SQUARES
--							      --							    --								  --
Disassembly of <code object minimumCostOfBreaking at 0x7fbac0 def minimumCostOfBreaking ( X , Y , m , n ) :		    def minimumCostOfBreaking ( X , Y , m , n ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 4 ( res )					      	  X.sort ( reverse = True )				    	X.sort ( reverse = True )				  _sa.test/MINIMUM_COST_CUT_BOARD_SQUARES.py", line
							      	  Y.sort ( reverse = True )				    	Y.sort ( reverse = True )				  67	 return res	^ SyntaxError: 'return' outs
3 4 LOAD_FAST 0 ( X )					      	  hzntl = 1 ; vert = 1					    	hzntl += 1						  ide function
6 LOAD_ATTR 0 ( sort )					      	  i = 0 ; j = 0						    	i = 0							  
8 LOAD_CONST 2 ( True )					      	  while ( i < m and j < n ) :				    	j = 0							  
10 LOAD_CONST 3 ( ( 'reverse' , ) )			      	      if ( X [ i ] > Y [ j ] ) :			    	while i < m and j < n :					  
12 CALL_FUNCTION_KW 1					      		  res += X [ i ] * vert				    	    if X [ i ] > Y [ j ] :				  
14 POP_TOP						      		  hzntl += 1					    		res += X [ i ] * vert				  
							      		  i += 1					    		hzntl += 1					  
4 16 LOAD_FAST 1 ( Y )					      	      else :						    		i += 1						  
18 LOAD_ATTR 0 ( sort )					      		  res += Y [ j ] * hzntl			    	    else :						  
20 LOAD_CONST 2 ( True )				      		  vert += 1					    		res += Y [ j ] * hzntl				  
22 LOAD_CONST 3 ( ( 'reverse' , ) )			      		  j += 1					    		vert += 1					  
24 CALL_FUNCTION_KW 1					      	  total = 0						    		j += 1						  
26 POP_TOP						      	  while ( i < m ) :					    	total = 0						  
							      	      total += X [ i ]					    	while m < m :						  
5 28 LOAD_CONST 4 ( 1 )					      	      i += 1						    	    if i < m [ i ] < j :				  
30 STORE_FAST 5 ( hzntl )				      	  res += total * vert					    		res += 1					  
32 LOAD_CONST 4 ( 1 )					      	  total = 0						    if total < 0 :						  
34 STORE_FAST 6 ( vert )				      	  while ( j < n ) :					    	total += 1						  
							      	      total += Y [ j ]					    return res							  
6 36 LOAD_CONST 1 ( 0 )					      	      j += 1						    								  
38 STORE_FAST 7 ( i )					      	  res += total * hzntl					    								  
40 LOAD_CONST 1 ( 0 )					      	  return res						    								  
42 STORE_FAST 8 ( j )					      								    								  
							      								    								  
7 44 SETUP_LOOP 102 ( to 148 )				      								    								  
>> 46 LOAD_FAST 7 ( i )					      								    								  
48 LOAD_FAST 2 ( m )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 146				      								    								  
54 LOAD_FAST 8 ( j )					      								    								  
56 LOAD_FAST 3 ( n )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
8 62 LOAD_FAST 0 ( X )					      								    								  
64 LOAD_FAST 7 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 1 ( Y )					      								    								  
70 LOAD_FAST 8 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
9 78 LOAD_FAST 4 ( res )				      								    								  
80 LOAD_FAST 0 ( X )					      								    								  
82 LOAD_FAST 7 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 6 ( vert )					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 4 ( res )					      								    								  
							      								    								  
10 94 LOAD_FAST 5 ( hzntl )				      								    								  
96 LOAD_CONST 4 ( 1 )					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 5 ( hzntl )				      								    								  
							      								    								  
11 102 LOAD_FAST 7 ( i )				      								    								  
104 LOAD_CONST 4 ( 1 )					      								    								  
106 INPLACE_ADD						      								    								  
108 STORE_FAST 7 ( i )					      								    								  
110 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
13 >> 112 LOAD_FAST 4 ( res )				      								    								  
114 LOAD_FAST 1 ( Y )					      								    								  
116 LOAD_FAST 8 ( j )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 5 ( hzntl )				      								    								  
122 BINARY_MULTIPLY					      								    								  
124 INPLACE_ADD						      								    								  
126 STORE_FAST 4 ( res )				      								    								  
							      								    								  
14 128 LOAD_FAST 6 ( vert )				      								    								  
130 LOAD_CONST 4 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 6 ( vert )				      								    								  
							      								    								  
15 136 LOAD_FAST 8 ( j )				      								    								  
138 LOAD_CONST 4 ( 1 )					      								    								  
140 INPLACE_ADD						      								    								  
142 STORE_FAST 8 ( j )					      								    								  
144 JUMP_ABSOLUTE 46					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
16 >> 148 LOAD_CONST 1 ( 0 )				      								    								  
150 STORE_FAST 9 ( total )				      								    								  
							      								    								  
17 152 SETUP_LOOP 32 ( to 186 )				      								    								  
>> 154 LOAD_FAST 7 ( i )				      								    								  
156 LOAD_FAST 2 ( m )					      								    								  
158 COMPARE_OP 0 ( < )					      								    								  
160 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
18 162 LOAD_FAST 9 ( total )				      								    								  
164 LOAD_FAST 0 ( X )					      								    								  
166 LOAD_FAST 7 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 INPLACE_ADD						      								    								  
172 STORE_FAST 9 ( total )				      								    								  
							      								    								  
19 174 LOAD_FAST 7 ( i )				      								    								  
176 LOAD_CONST 4 ( 1 )					      								    								  
178 INPLACE_ADD						      								    								  
180 STORE_FAST 7 ( i )					      								    								  
182 JUMP_ABSOLUTE 154					      								    								  
>> 184 POP_BLOCK					      								    								  
							      								    								  
20 >> 186 LOAD_FAST 4 ( res )				      								    								  
188 LOAD_FAST 9 ( total )				      								    								  
190 LOAD_FAST 6 ( vert )				      								    								  
192 BINARY_MULTIPLY					      								    								  
194 INPLACE_ADD						      								    								  
196 STORE_FAST 4 ( res )				      								    								  
							      								    								  
21 198 LOAD_CONST 1 ( 0 )				      								    								  
200 STORE_FAST 9 ( total )				      								    								  
							      								    								  
22 202 SETUP_LOOP 32 ( to 236 )				      								    								  
>> 204 LOAD_FAST 8 ( j )				      								    								  
206 LOAD_FAST 3 ( n )					      								    								  
208 COMPARE_OP 0 ( < )					      								    								  
210 POP_JUMP_IF_FALSE 234				      								    								  
							      								    								  
23 212 LOAD_FAST 9 ( total )				      								    								  
214 LOAD_FAST 1 ( Y )					      								    								  
216 LOAD_FAST 8 ( j )					      								    								  
218 BINARY_SUBSCR					      								    								  
220 INPLACE_ADD						      								    								  
222 STORE_FAST 9 ( total )				      								    								  
							      								    								  
24 224 LOAD_FAST 8 ( j )				      								    								  
226 LOAD_CONST 4 ( 1 )					      								    								  
228 INPLACE_ADD						      								    								  
230 STORE_FAST 8 ( j )					      								    								  
232 JUMP_ABSOLUTE 204					      								    								  
>> 234 POP_BLOCK					      								    								  
							      								    								  
25 >> 236 LOAD_FAST 4 ( res )				      								    								  
238 LOAD_FAST 9 ( total )				      								    								  
240 LOAD_FAST 5 ( hzntl )				      								    								  
242 BINARY_MULTIPLY					      								    								  
244 INPLACE_ADD						      								    								  
246 STORE_FAST 4 ( res )				      								    								  
							      								    								  
26 248 LOAD_FAST 4 ( res )				      								    								  
250 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			      CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			    CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			  CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7
--							      --							    --								  --
Disassembly of <code object isdivisible7 at 0x7fbac0e8de40, f def isdivisible7 ( num ) :				    def isdivisible7 ( num ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( num )					    	n = len ( num )						  
2 LOAD_FAST 0 ( num )					      	  if ( n == 0 and num [ 0 ] == '\n' ) :			    	if n == 0 and num [ 0 ] == '\n' :			  
4 CALL_FUNCTION 1					      	      return 1						    	    return 1						  
6 STORE_FAST 1 ( n )					      	  if ( n % 3 == 1 ) :					    	if n % 3 == 1 :						  
							      	      num = str ( num ) + "00"				    	    num = str ( num ) + '00'				  
3 8 LOAD_FAST 1 ( n )					      	      n += 2						    	    n += 2						  
10 LOAD_CONST 1 ( 0 )					      	  elif ( n % 3 == 2 ) :					    	elif n % 3 == 2 :					  
12 COMPARE_OP 2 ( == )					      	      num = str ( num ) + "0"				    	    num = str ( num ) + '0'				  
14 POP_JUMP_IF_FALSE 32					      	      n += 1						    	    n += 1						  
16 LOAD_FAST 0 ( num )					      	  GSum = 0						    	GSum = 0						  
18 LOAD_CONST 1 ( 0 )					      	  p = 1							    	p = 1							  
20 BINARY_SUBSCR					      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
22 LOAD_CONST 2 ( '\n' )				      	      group = 0						    	    group = 0						  
24 COMPARE_OP 2 ( == )					      	      group += ord ( num [ i ] ) - ord ( '0' )		    	    group += ord ( num [ i ] ) - ord ( '0' )		  
26 POP_JUMP_IF_FALSE 32					      	      i -= 1						    	    i -= 1						  
							      	      group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10	    	if num == 0 :						  
4 28 LOAD_CONST 3 ( 1 )					      	      i -= 1						    	    num -= 1						  
30 RETURN_VALUE						      	      group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100    	GSum = ord ( num ) + 1					  
							      	      GSum = GSum + group * p				    	p = GSum ( p )						  
5 >> 32 LOAD_FAST 1 ( n )				      	      p *= ( - 1 )					    	GSum = 0						  
34 LOAD_CONST 4 ( 3 )					      	  return ( GSum % 7 == 0 )				    	p = GSum ( p )						  
36 BINARY_MODULO					      								    	p += 1							  
38 LOAD_CONST 3 ( 1 )					      								    return GSum ( p )						  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 1 ( str )				      								    								  
46 LOAD_FAST 0 ( num )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_CONST 5 ( '00' )				      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 0 ( num )					      								    								  
							      								    								  
7 56 LOAD_FAST 1 ( n )					      								    								  
58 LOAD_CONST 6 ( 2 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( n )					      								    								  
64 JUMP_FORWARD 32 ( to 98 )				      								    								  
							      								    								  
8 >> 66 LOAD_FAST 1 ( n )				      								    								  
68 LOAD_CONST 4 ( 3 )					      								    								  
70 BINARY_MODULO					      								    								  
72 LOAD_CONST 6 ( 2 )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
9 78 LOAD_GLOBAL 1 ( str )				      								    								  
80 LOAD_FAST 0 ( num )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 LOAD_CONST 7 ( '0' )					      								    								  
86 BINARY_ADD						      								    								  
88 STORE_FAST 0 ( num )					      								    								  
							      								    								  
10 90 LOAD_FAST 1 ( n )					      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 1 ( n )					      								    								  
							      								    								  
11 >> 98 LOAD_CONST 1 ( 0 )				      								    								  
100 STORE_FAST 2 ( GSum )				      								    								  
							      								    								  
12 102 LOAD_CONST 3 ( 1 )				      								    								  
104 STORE_FAST 3 ( p )					      								    								  
							      								    								  
13 106 SETUP_LOOP 144 ( to 252 )			      								    								  
108 LOAD_GLOBAL 2 ( range )				      								    								  
110 LOAD_FAST 1 ( n )					      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 LOAD_CONST 8 ( - 1 )				      								    								  
118 LOAD_CONST 8 ( - 1 )				      								    								  
120 CALL_FUNCTION 3					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 124 ( to 250 )				      								    								  
126 STORE_FAST 4 ( i )					      								    								  
							      								    								  
14 128 LOAD_CONST 1 ( 0 )				      								    								  
130 STORE_FAST 5 ( group )				      								    								  
							      								    								  
15 132 LOAD_FAST 5 ( group )				      								    								  
134 LOAD_GLOBAL 3 ( ord )				      								    								  
136 LOAD_FAST 0 ( num )					      								    								  
138 LOAD_FAST 4 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 LOAD_GLOBAL 3 ( ord )				      								    								  
146 LOAD_CONST 7 ( '0' )				      								    								  
148 CALL_FUNCTION 1					      								    								  
150 BINARY_SUBTRACT					      								    								  
152 INPLACE_ADD						      								    								  
154 STORE_FAST 5 ( group )				      								    								  
							      								    								  
16 156 LOAD_FAST 4 ( i )				      								    								  
158 LOAD_CONST 3 ( 1 )					      								    								  
160 INPLACE_SUBTRACT					      								    								  
162 STORE_FAST 4 ( i )					      								    								  
							      								    								  
17 164 LOAD_FAST 5 ( group )				      								    								  
166 LOAD_GLOBAL 3 ( ord )				      								    								  
168 LOAD_FAST 0 ( num )					      								    								  
170 LOAD_FAST 4 ( i )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 CALL_FUNCTION 1					      								    								  
176 LOAD_GLOBAL 3 ( ord )				      								    								  
178 LOAD_CONST 7 ( '0' )				      								    								  
180 CALL_FUNCTION 1					      								    								  
182 BINARY_SUBTRACT					      								    								  
184 LOAD_CONST 9 ( 10 )					      								    								  
186 BINARY_MULTIPLY					      								    								  
188 INPLACE_ADD						      								    								  
190 STORE_FAST 5 ( group )				      								    								  
							      								    								  
18 192 LOAD_FAST 4 ( i )				      								    								  
194 LOAD_CONST 3 ( 1 )					      								    								  
196 INPLACE_SUBTRACT					      								    								  
198 STORE_FAST 4 ( i )					      								    								  
							      								    								  
19 200 LOAD_FAST 5 ( group )				      								    								  
202 LOAD_GLOBAL 3 ( ord )				      								    								  
204 LOAD_FAST 0 ( num )					      								    								  
206 LOAD_FAST 4 ( i )					      								    								  
208 BINARY_SUBSCR					      								    								  
210 CALL_FUNCTION 1					      								    								  
212 LOAD_GLOBAL 3 ( ord )				      								    								  
214 LOAD_CONST 7 ( '0' )				      								    								  
216 CALL_FUNCTION 1					      								    								  
218 BINARY_SUBTRACT					      								    								  
220 LOAD_CONST 10 ( 100 )				      								    								  
222 BINARY_MULTIPLY					      								    								  
224 INPLACE_ADD						      								    								  
226 STORE_FAST 5 ( group )				      								    								  
							      								    								  
20 228 LOAD_FAST 2 ( GSum )				      								    								  
230 LOAD_FAST 5 ( group )				      								    								  
232 LOAD_FAST 3 ( p )					      								    								  
234 BINARY_MULTIPLY					      								    								  
236 BINARY_ADD						      								    								  
238 STORE_FAST 2 ( GSum )				      								    								  
							      								    								  
21 240 LOAD_FAST 3 ( p )				      								    								  
242 LOAD_CONST 8 ( - 1 )				      								    								  
244 INPLACE_MULTIPLY					      								    								  
246 STORE_FAST 3 ( p )					      								    								  
248 JUMP_ABSOLUTE 124					      								    								  
>> 250 POP_BLOCK					      								    								  
							      								    								  
22 >> 252 LOAD_FAST 2 ( GSum )				      								    								  
254 LOAD_CONST 11 ( 7 )					      								    								  
256 BINARY_MODULO					      								    								  
258 LOAD_CONST 1 ( 0 )					      								    								  
260 COMPARE_OP 2 ( == )					      								    								  
262 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			      FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			    FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			  FIND_KTH_CHARACTER_OF_DECRYPTED_STRING
--							      --							    --								  --
Disassembly of <code object encodedChar at 0x7fbac0e8de40, fi def encodedChar ( str , k ) :				    def encodedChar ( str , freq ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  expand = ""						    	expand = ''						  
2 STORE_FAST 2 ( expand )				      	  freq = 0						    	freq = 0						  
							      	  i = 0							    	i = 0							  
3 4 LOAD_CONST 2 ( 0 )					      	  while ( i < len ( str ) ) :				    	while i < len ( str ) :					  
6 STORE_FAST 3 ( freq )					      	      temp = ""						    	    temp = ''						  
							      	      freq = 0						    	    freq = 0						  
4 8 LOAD_CONST 2 ( 0 )					      	      while ( i < len ( str ) and ord ( str [ i ] ) >= ord  	    while i < len ( str ) and ord ( str [ i ] ) >= ord (  
10 STORE_FAST 4 ( i )					      		  temp += str [ i ]				    		temp += str [ i ]				  
							      		  i += 1					    		i += 1						  
5 12 SETUP_LOOP 230 ( to 244 )				      	      while ( i < len ( str ) and ord ( str [ i ] ) >= ord  	while i < len ( str ) and ord ( str [ i ] ) >= ord ( '1'  
>> 14 LOAD_FAST 4 ( i )					      		  freq = freq * 10 + ord ( str [ i ] ) - ord ( '0'  	    freq += 1						  
16 LOAD_GLOBAL 0 ( len )				      		  i += 1					    	if ord == 'z' :						  
18 LOAD_FAST 0 ( str )					      	      for j in range ( 1 , freq + 1 , 1 ) :		    	    for k in range ( 0 , ord ( str [ i ] ) , ord ( 'a' )  
20 CALL_FUNCTION 1					      		  expand += temp				    		freq += 1					  
22 COMPARE_OP 0 ( < )					      	  if ( freq == 0 ) :					    for freq in range ( 2 , freq ) :				  
24 POP_JUMP_IF_FALSE 242				      	      expand += temp					    	if freq == 'z' :					  
							      	  return expand [ k - 1 ]				    	    freq += 1						  
6 26 LOAD_CONST 1 ( '' )				      								    return temp							  
28 STORE_FAST 5 ( temp )				      								    								  
							      								    								  
7 30 LOAD_CONST 2 ( 0 )					      								    								  
32 STORE_FAST 3 ( freq )				      								    								  
							      								    								  
8 34 SETUP_LOOP 76 ( to 112 )				      								    								  
>> 36 LOAD_FAST 4 ( i )					      								    								  
38 LOAD_GLOBAL 0 ( len )				      								    								  
40 LOAD_FAST 0 ( str )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 110				      								    								  
48 LOAD_GLOBAL 1 ( ord )				      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_GLOBAL 1 ( ord )				      								    								  
60 LOAD_CONST 3 ( 'a' )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 COMPARE_OP 5 ( >= )					      								    								  
66 POP_JUMP_IF_FALSE 110				      								    								  
68 LOAD_GLOBAL 1 ( ord )				      								    								  
70 LOAD_FAST 0 ( str )					      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_GLOBAL 1 ( ord )				      								    								  
80 LOAD_CONST 4 ( 'z' )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 COMPARE_OP 1 ( <= )					      								    								  
86 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
9 88 LOAD_FAST 5 ( temp )				      								    								  
90 LOAD_FAST 0 ( str )					      								    								  
92 LOAD_FAST 4 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 5 ( temp )				      								    								  
							      								    								  
10 100 LOAD_FAST 4 ( i )				      								    								  
102 LOAD_CONST 5 ( 1 )					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 4 ( i )					      								    								  
108 JUMP_ABSOLUTE 36					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
11 >> 112 SETUP_LOOP 92 ( to 206 )			      								    								  
>> 114 LOAD_FAST 4 ( i )				      								    								  
116 LOAD_GLOBAL 0 ( len )				      								    								  
118 LOAD_FAST 0 ( str )					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 COMPARE_OP 0 ( < )					      								    								  
124 POP_JUMP_IF_FALSE 204				      								    								  
126 LOAD_GLOBAL 1 ( ord )				      								    								  
128 LOAD_FAST 0 ( str )					      								    								  
130 LOAD_FAST 4 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 LOAD_GLOBAL 1 ( ord )				      								    								  
138 LOAD_CONST 6 ( '1' )				      								    								  
140 CALL_FUNCTION 1					      								    								  
142 COMPARE_OP 5 ( >= )					      								    								  
144 POP_JUMP_IF_FALSE 204				      								    								  
146 LOAD_GLOBAL 1 ( ord )				      								    								  
148 LOAD_FAST 0 ( str )					      								    								  
150 LOAD_FAST 4 ( i )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 LOAD_GLOBAL 1 ( ord )				      								    								  
158 LOAD_CONST 7 ( '9' )				      								    								  
160 CALL_FUNCTION 1					      								    								  
162 COMPARE_OP 1 ( <= )					      								    								  
164 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
12 166 LOAD_FAST 3 ( freq )				      								    								  
168 LOAD_CONST 8 ( 10 )					      								    								  
170 BINARY_MULTIPLY					      								    								  
172 LOAD_GLOBAL 1 ( ord )				      								    								  
174 LOAD_FAST 0 ( str )					      								    								  
176 LOAD_FAST 4 ( i )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 CALL_FUNCTION 1					      								    								  
182 BINARY_ADD						      								    								  
184 LOAD_GLOBAL 1 ( ord )				      								    								  
186 LOAD_CONST 9 ( '0' )				      								    								  
188 CALL_FUNCTION 1					      								    								  
190 BINARY_SUBTRACT					      								    								  
192 STORE_FAST 3 ( freq )				      								    								  
							      								    								  
13 194 LOAD_FAST 4 ( i )				      								    								  
196 LOAD_CONST 5 ( 1 )					      								    								  
198 INPLACE_ADD						      								    								  
200 STORE_FAST 4 ( i )					      								    								  
202 JUMP_ABSOLUTE 114					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
14 >> 206 SETUP_LOOP 32 ( to 240 )			      								    								  
208 LOAD_GLOBAL 2 ( range )				      								    								  
210 LOAD_CONST 5 ( 1 )					      								    								  
212 LOAD_FAST 3 ( freq )				      								    								  
214 LOAD_CONST 5 ( 1 )					      								    								  
216 BINARY_ADD						      								    								  
218 LOAD_CONST 5 ( 1 )					      								    								  
220 CALL_FUNCTION 3					      								    								  
222 GET_ITER						      								    								  
>> 224 FOR_ITER 12 ( to 238 )				      								    								  
226 STORE_FAST 6 ( j )					      								    								  
							      								    								  
15 228 LOAD_FAST 2 ( expand )				      								    								  
230 LOAD_FAST 5 ( temp )				      								    								  
232 INPLACE_ADD						      								    								  
234 STORE_FAST 2 ( expand )				      								    								  
236 JUMP_ABSOLUTE 224					      								    								  
>> 238 POP_BLOCK					      								    								  
>> 240 JUMP_ABSOLUTE 14					      								    								  
>> 242 POP_BLOCK					      								    								  
							      								    								  
16 >> 244 LOAD_FAST 3 ( freq )				      								    								  
246 LOAD_CONST 2 ( 0 )					      								    								  
248 COMPARE_OP 2 ( == )					      								    								  
250 EXTENDED_ARG 1					      								    								  
252 POP_JUMP_IF_FALSE 262				      								    								  
							      								    								  
17 254 LOAD_FAST 2 ( expand )				      								    								  
256 LOAD_FAST 5 ( temp )				      								    								  
258 INPLACE_ADD						      								    								  
260 STORE_FAST 2 ( expand )				      								    								  
							      								    								  
18 >> 262 LOAD_FAST 2 ( expand )			      								    								  
264 LOAD_FAST 1 ( k )					      								    								  
266 LOAD_CONST 5 ( 1 )					      								    								  
268 BINARY_SUBTRACT					      								    								  
270 BINARY_SUBSCR					      								    								  
272 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT
--							      --							    --								  --
Disassembly of <code object checkDivisibility at 0x7fbac0e8bc def checkDivisibility ( num ) :				    def checkDivisibility ( num ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  length = len ( num )					    	length = len ( num )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( num )					      	  if ( length == 1 and num [ 0 ] == '0' ) :		    	if length == 1 and num [ 0 ] == '0' :			  _sa.test/CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT.py",
4 CALL_FUNCTION 1					      	      return True					    	    return True						  line 64     return sum     ^ SyntaxError: 'return'
6 STORE_FAST 1 ( length )				      	  if ( length % 3 == 1 ) :				    	if length % 3 == 1 :					   outside function
							      	      num = str ( num ) + "00"				    	    num = str ( num ) + '00'				  
3 8 LOAD_FAST 1 ( length )				      	      length += 2					    	    length += 2						  
10 LOAD_CONST 1 ( 1 )					      	  elif ( length % 3 == 2 ) :				    	elif length % 3 == 2 :					  
12 COMPARE_OP 2 ( == )					      	      num = str ( num ) + "0"				    	    num = str ( num ) + '0'				  
14 POP_JUMP_IF_FALSE 32					      	      length += 1					    	    length += 1						  
16 LOAD_FAST 0 ( num )					      	  sum = 0						    sum = 0							  
18 LOAD_CONST 2 ( 0 )					      	  p = 1							    p = 1							  
20 BINARY_SUBSCR					      	  for i in range ( length - 1 , - 1 , - 1 ) :		    for i in range ( length - 1 , - 1 , - 1 ) :			  
22 LOAD_CONST 3 ( '0' )					      	      group = 0						    	group = 0						  
24 COMPARE_OP 2 ( == )					      	      group += ord ( num [ i ] ) - ord ( '0' )		    	group += ord ( num [ i ] ) - ord ( '0' )		  
26 POP_JUMP_IF_FALSE 32					      	      i -= 1						    	i -= 1							  
							      	      group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10	    sum = ( ord ( num [ i ] ) - ord ( '0' ) )			  
4 28 LOAD_CONST 4 ( True )				      	      i -= 1						    p += ord ( num [ i ] )					  
30 RETURN_VALUE						      	      group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100    if abs ( sum ( sum ( sum ( sum ) ) ) == 1 ) :		  
							      	      sum = sum + group * p				    	p += ord ( num )					  
5 >> 32 LOAD_FAST 1 ( length )				      	      p *= ( - 1 )					    sum += 1							  
34 LOAD_CONST 5 ( 3 )					      	  sum = abs ( sum )					    p = ord ( num ) + 1						  
36 BINARY_MODULO					      	  return ( sum % 13 == 0 )				    return sum							  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 1 ( str )				      								    								  
46 LOAD_FAST 0 ( num )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_CONST 6 ( '00' )				      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 0 ( num )					      								    								  
							      								    								  
7 56 LOAD_FAST 1 ( length )				      								    								  
58 LOAD_CONST 7 ( 2 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( length )				      								    								  
64 JUMP_FORWARD 32 ( to 98 )				      								    								  
							      								    								  
8 >> 66 LOAD_FAST 1 ( length )				      								    								  
68 LOAD_CONST 5 ( 3 )					      								    								  
70 BINARY_MODULO					      								    								  
72 LOAD_CONST 7 ( 2 )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
9 78 LOAD_GLOBAL 1 ( str )				      								    								  
80 LOAD_FAST 0 ( num )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 LOAD_CONST 3 ( '0' )					      								    								  
86 BINARY_ADD						      								    								  
88 STORE_FAST 0 ( num )					      								    								  
							      								    								  
10 90 LOAD_FAST 1 ( length )				      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 1 ( length )				      								    								  
							      								    								  
11 >> 98 LOAD_CONST 2 ( 0 )				      								    								  
100 STORE_FAST 2 ( sum )				      								    								  
							      								    								  
12 102 LOAD_CONST 1 ( 1 )				      								    								  
104 STORE_FAST 3 ( p )					      								    								  
							      								    								  
13 106 SETUP_LOOP 144 ( to 252 )			      								    								  
108 LOAD_GLOBAL 2 ( range )				      								    								  
110 LOAD_FAST 1 ( length )				      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 LOAD_CONST 8 ( - 1 )				      								    								  
118 LOAD_CONST 8 ( - 1 )				      								    								  
120 CALL_FUNCTION 3					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 124 ( to 250 )				      								    								  
126 STORE_FAST 4 ( i )					      								    								  
							      								    								  
14 128 LOAD_CONST 2 ( 0 )				      								    								  
130 STORE_FAST 5 ( group )				      								    								  
							      								    								  
15 132 LOAD_FAST 5 ( group )				      								    								  
134 LOAD_GLOBAL 3 ( ord )				      								    								  
136 LOAD_FAST 0 ( num )					      								    								  
138 LOAD_FAST 4 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 LOAD_GLOBAL 3 ( ord )				      								    								  
146 LOAD_CONST 3 ( '0' )				      								    								  
148 CALL_FUNCTION 1					      								    								  
150 BINARY_SUBTRACT					      								    								  
152 INPLACE_ADD						      								    								  
154 STORE_FAST 5 ( group )				      								    								  
							      								    								  
16 156 LOAD_FAST 4 ( i )				      								    								  
158 LOAD_CONST 1 ( 1 )					      								    								  
160 INPLACE_SUBTRACT					      								    								  
162 STORE_FAST 4 ( i )					      								    								  
							      								    								  
17 164 LOAD_FAST 5 ( group )				      								    								  
166 LOAD_GLOBAL 3 ( ord )				      								    								  
168 LOAD_FAST 0 ( num )					      								    								  
170 LOAD_FAST 4 ( i )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 CALL_FUNCTION 1					      								    								  
176 LOAD_GLOBAL 3 ( ord )				      								    								  
178 LOAD_CONST 3 ( '0' )				      								    								  
180 CALL_FUNCTION 1					      								    								  
182 BINARY_SUBTRACT					      								    								  
184 LOAD_CONST 9 ( 10 )					      								    								  
186 BINARY_MULTIPLY					      								    								  
188 INPLACE_ADD						      								    								  
190 STORE_FAST 5 ( group )				      								    								  
							      								    								  
18 192 LOAD_FAST 4 ( i )				      								    								  
194 LOAD_CONST 1 ( 1 )					      								    								  
196 INPLACE_SUBTRACT					      								    								  
198 STORE_FAST 4 ( i )					      								    								  
							      								    								  
19 200 LOAD_FAST 5 ( group )				      								    								  
202 LOAD_GLOBAL 3 ( ord )				      								    								  
204 LOAD_FAST 0 ( num )					      								    								  
206 LOAD_FAST 4 ( i )					      								    								  
208 BINARY_SUBSCR					      								    								  
210 CALL_FUNCTION 1					      								    								  
212 LOAD_GLOBAL 3 ( ord )				      								    								  
214 LOAD_CONST 3 ( '0' )				      								    								  
216 CALL_FUNCTION 1					      								    								  
218 BINARY_SUBTRACT					      								    								  
220 LOAD_CONST 10 ( 100 )				      								    								  
222 BINARY_MULTIPLY					      								    								  
224 INPLACE_ADD						      								    								  
226 STORE_FAST 5 ( group )				      								    								  
							      								    								  
20 228 LOAD_FAST 2 ( sum )				      								    								  
230 LOAD_FAST 5 ( group )				      								    								  
232 LOAD_FAST 3 ( p )					      								    								  
234 BINARY_MULTIPLY					      								    								  
236 BINARY_ADD						      								    								  
238 STORE_FAST 2 ( sum )				      								    								  
							      								    								  
21 240 LOAD_FAST 3 ( p )				      								    								  
242 LOAD_CONST 8 ( - 1 )				      								    								  
244 INPLACE_MULTIPLY					      								    								  
246 STORE_FAST 3 ( p )					      								    								  
248 JUMP_ABSOLUTE 124					      								    								  
>> 250 POP_BLOCK					      								    								  
							      								    								  
22 >> 252 LOAD_GLOBAL 4 ( abs )				      								    								  
254 LOAD_FAST 2 ( sum )					      								    								  
256 CALL_FUNCTION 1					      								    								  
258 STORE_FAST 2 ( sum )				      								    								  
							      								    								  
23 260 LOAD_FAST 2 ( sum )				      								    								  
262 LOAD_CONST 11 ( 13 )				      								    								  
264 BINARY_MODULO					      								    								  
266 LOAD_CONST 2 ( 0 )					      								    								  
268 COMPARE_OP 2 ( == )					      								    								  
270 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_MAXAI_BJ_CK_MINAI_BJ_CK_<unk> DIFFERENT_SORTED_ARRAY MINIMIZE_MAXAI_BJ_CK_MINAI_BJ_CK_<unk> DIFFERENT_SORTED_ARRAY MINIMIZE_MAXAI_BJ_CK_MINAI_BJ_CK_<unk> DIFFERENT_SORTED_ARRAY MINIMIZE_MAXAI_BJ_CK_MINAI_BJ_CK_<unk> DIFFERENT_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object solve at 0x7fbac0e89d20, file "<d def solve ( A , B , C ) :					    def solve ( A , B , C ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  i = len ( A ) - 1					    	i = len ( A ) - 1					  
2 LOAD_FAST 0 ( A )					      	  j = len ( B ) - 1					    	j = len ( B ) - 1					  
4 CALL_FUNCTION 1					      	  k = len ( C ) - 1					    	k = len ( C ) - 1					  
6 LOAD_CONST 1 ( 1 )					      	  min_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - mi 	min_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - mi 
8 BINARY_SUBTRACT					      	  while i != - 1 and j != - 1 and k != - 1 :		    	while i != - 1 and j != - 1 :				  
10 STORE_FAST 3 ( i )					      	      current_diff = abs ( max ( A [ i ] , B [ j ] , C [ k  	    current_diff = abs ( max ( A [ i ] , B [ j ] , C [ k  
							      	      if current_diff < min_diff :			    	    if current_diff < min_diff :			  
3 12 LOAD_GLOBAL 0 ( len )				      		  min_diff = current_diff			    		diff = diff ( diff [ i ] , C [ j ] , C [ k ] ) )  
14 LOAD_FAST 1 ( B )					      	      max_term = max ( A [ i ] , B [ j ] , C [ k ] )	    	    if diff < min_diff :				  
16 CALL_FUNCTION 1					      	      if A [ i ] == max_term :				    		j -= max ( C [ i ] , C [ k ] , C [ k ] ) )	  
18 LOAD_CONST 1 ( 1 )					      		  i -= 1					    	if k == 0 :						  
20 BINARY_SUBTRACT					      	      elif B [ j ] == max_term :			    	    i -= 1						  
22 STORE_FAST 4 ( j )					      		  j -= 1					    	if j == 1 :						  
							      	      else :						    	    i -= 1						  
4 24 LOAD_GLOBAL 0 ( len )				      		  k -= 1					    	return i						  
26 LOAD_FAST 2 ( C )					      	  return min_diff					    								  
28 CALL_FUNCTION 1					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 STORE_FAST 5 ( k )					      								    								  
							      								    								  
5 36 LOAD_GLOBAL 1 ( abs )				      								    								  
38 LOAD_GLOBAL 2 ( max )				      								    								  
40 LOAD_FAST 0 ( A )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 1 ( B )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 2 ( C )					      								    								  
54 LOAD_FAST 5 ( k )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 3					      								    								  
60 LOAD_GLOBAL 3 ( min )				      								    								  
62 LOAD_FAST 0 ( A )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 1 ( B )					      								    								  
70 LOAD_FAST 4 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 2 ( C )					      								    								  
76 LOAD_FAST 5 ( k )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 CALL_FUNCTION 3					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 STORE_FAST 6 ( min_diff )				      								    								  
							      								    								  
6 88 SETUP_LOOP 174 ( to 264 )				      								    								  
>> 90 LOAD_FAST 3 ( i )					      								    								  
92 LOAD_CONST 2 ( - 1 )					      								    								  
94 COMPARE_OP 3 ( != )					      								    								  
96 EXTENDED_ARG 1					      								    								  
98 POP_JUMP_IF_FALSE 262				      								    								  
100 LOAD_FAST 4 ( j )					      								    								  
102 LOAD_CONST 2 ( - 1 )				      								    								  
104 COMPARE_OP 3 ( != )					      								    								  
106 EXTENDED_ARG 1					      								    								  
108 POP_JUMP_IF_FALSE 262				      								    								  
110 LOAD_FAST 5 ( k )					      								    								  
112 LOAD_CONST 2 ( - 1 )				      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 EXTENDED_ARG 1					      								    								  
118 POP_JUMP_IF_FALSE 262				      								    								  
							      								    								  
7 120 LOAD_GLOBAL 1 ( abs )				      								    								  
122 LOAD_GLOBAL 2 ( max )				      								    								  
124 LOAD_FAST 0 ( A )					      								    								  
126 LOAD_FAST 3 ( i )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 1 ( B )					      								    								  
132 LOAD_FAST 4 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_FAST 2 ( C )					      								    								  
138 LOAD_FAST 5 ( k )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 CALL_FUNCTION 3					      								    								  
144 LOAD_GLOBAL 3 ( min )				      								    								  
146 LOAD_FAST 0 ( A )					      								    								  
148 LOAD_FAST 3 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_FAST 1 ( B )					      								    								  
154 LOAD_FAST 4 ( j )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 2 ( C )					      								    								  
160 LOAD_FAST 5 ( k )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 CALL_FUNCTION 3					      								    								  
166 BINARY_SUBTRACT					      								    								  
168 CALL_FUNCTION 1					      								    								  
170 STORE_FAST 7 ( current_diff )			      								    								  
							      								    								  
8 172 LOAD_FAST 7 ( current_diff )			      								    								  
174 LOAD_FAST 6 ( min_diff )				      								    								  
176 COMPARE_OP 0 ( < )					      								    								  
178 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
9 180 LOAD_FAST 7 ( current_diff )			      								    								  
182 STORE_FAST 6 ( min_diff )				      								    								  
							      								    								  
10 >> 184 LOAD_GLOBAL 2 ( max )				      								    								  
186 LOAD_FAST 0 ( A )					      								    								  
188 LOAD_FAST 3 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 1 ( B )					      								    								  
194 LOAD_FAST 4 ( j )					      								    								  
196 BINARY_SUBSCR					      								    								  
198 LOAD_FAST 2 ( C )					      								    								  
200 LOAD_FAST 5 ( k )					      								    								  
202 BINARY_SUBSCR					      								    								  
204 CALL_FUNCTION 3					      								    								  
206 STORE_FAST 8 ( max_term )				      								    								  
							      								    								  
11 208 LOAD_FAST 0 ( A )				      								    								  
210 LOAD_FAST 3 ( i )					      								    								  
212 BINARY_SUBSCR					      								    								  
214 LOAD_FAST 8 ( max_term )				      								    								  
216 COMPARE_OP 2 ( == )					      								    								  
218 POP_JUMP_IF_FALSE 230				      								    								  
							      								    								  
12 220 LOAD_FAST 3 ( i )				      								    								  
222 LOAD_CONST 1 ( 1 )					      								    								  
224 INPLACE_SUBTRACT					      								    								  
226 STORE_FAST 3 ( i )					      								    								  
228 JUMP_ABSOLUTE 90					      								    								  
							      								    								  
13 >> 230 LOAD_FAST 1 ( B )				      								    								  
232 LOAD_FAST 4 ( j )					      								    								  
234 BINARY_SUBSCR					      								    								  
236 LOAD_FAST 8 ( max_term )				      								    								  
238 COMPARE_OP 2 ( == )					      								    								  
240 POP_JUMP_IF_FALSE 252				      								    								  
							      								    								  
14 242 LOAD_FAST 4 ( j )				      								    								  
244 LOAD_CONST 1 ( 1 )					      								    								  
246 INPLACE_SUBTRACT					      								    								  
248 STORE_FAST 4 ( j )					      								    								  
250 JUMP_ABSOLUTE 90					      								    								  
							      								    								  
16 >> 252 LOAD_FAST 5 ( k )				      								    								  
254 LOAD_CONST 1 ( 1 )					      								    								  
256 INPLACE_SUBTRACT					      								    								  
258 STORE_FAST 5 ( k )					      								    								  
260 JUMP_ABSOLUTE 90					      								    								  
>> 262 POP_BLOCK					      								    								  
							      								    								  
17 >> 264 LOAD_FAST 6 ( min_diff )			      								    								  
266 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION_1			      SORTING_USING_TRIVIAL_HASH_FUNCTION_1			    SORTING_USING_TRIVIAL_HASH_FUNCTION_1			  SORTING_USING_TRIVIAL_HASH_FUNCTION_1
--							      --							    --								  --
Disassembly of <code object sortUsingHash at 0x7fbac0e8bc90,  def sortUsingHash ( a , n ) :				    def sortUsingHash ( a , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  Max = max ( a )					    	Max = max ( a )						  
2 LOAD_FAST 0 ( a )					      	  Min = abs ( min ( a ) )				    	Min = abs ( min ( a ) )					  
4 CALL_FUNCTION 1					      	  hashpos = [ 0 ] * ( Max + 1 )				    	hashpos = [ 0 ] * Max + 1				  
6 STORE_FAST 2 ( Max )					      	  hashneg = [ 0 ] * ( Min + 1 )				    	hashneg = [ 0 ] * Min + 1				  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 8 LOAD_GLOBAL 1 ( abs )				      	      if a [ i ] >= 0 :					    	    a [ i ] >= 0 :					  
10 LOAD_GLOBAL 2 ( min )				      		  hashpos [ a [ i ] ] += 1			    		hashpos [ a [ i ] ] += 1			  
12 LOAD_FAST 0 ( a )					      	      else :						    	    else :						  
14 CALL_FUNCTION 1					      		  hashneg [ abs ( a [ i ] ) ] += 1		    		hashneg [ abs ( a [ i ] ) ] += 1		  
16 CALL_FUNCTION 1					      	  for i in range ( Min , 0 , - 1 ) :			    	for i in range ( Min , 0 , - 1 ) :			  
18 STORE_FAST 3 ( Min )					      	      if hashneg [ i ] != 0 :				    	    if hashneg [ i ] != 0 :				  
							      		  for j in range ( 0 , hashneg [ i ] ) :	    		for j in range ( 0 , hashneg [ i ] ) :		  
4 20 LOAD_CONST 1 ( 0 )					      		      print ( ( - 1 ) * i , end = " " )		    		    print ( end + " " * i )			  
22 BUILD_LIST 1						      	  for i in range ( 0 , Max + 1 ) :			    for i in range ( 3 , range ) :				  
24 LOAD_FAST 2 ( Max )					      	      if hashpos [ i ] != 0 :				    	for j in range ( 3 , range ) :				  
26 LOAD_CONST 2 ( 1 )					      		  for j in range ( 0 , hashpos [ i ] ) :	    	    if hashpos [ i ] != 0 :				  
28 BINARY_ADD						      		      print ( i , end = " " )			    		for i in range ( 3 , range ) :			  
30 BINARY_MULTIPLY					      								    		    if hashpos [ i ] != 0 :			  
32 STORE_FAST 4 ( hashpos )				      								    			break					  
							      								    		else :						  
5 34 LOAD_CONST 1 ( 0 )					      								    		    print ( "Max Max range Max range" )		  
36 BUILD_LIST 1						      								    								  
38 LOAD_FAST 3 ( Min )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 BINARY_MULTIPLY					      								    								  
46 STORE_FAST 5 ( hashneg )				      								    								  
							      								    								  
6 48 SETUP_LOOP 76 ( to 126 )				      								    								  
50 LOAD_GLOBAL 3 ( range )				      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 LOAD_FAST 1 ( n )					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 62 ( to 124 )				      								    								  
62 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 64 LOAD_FAST 0 ( a )					      								    								  
66 LOAD_FAST 6 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 COMPARE_OP 5 ( >= )					      								    								  
74 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
8 76 LOAD_FAST 4 ( hashpos )				      								    								  
78 LOAD_FAST 0 ( a )					      								    								  
80 LOAD_FAST 6 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 DUP_TOP_TWO						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 ROT_THREE						      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 60					      								    								  
							      								    								  
10 >> 98 LOAD_FAST 5 ( hashneg )			      								    								  
100 LOAD_GLOBAL 1 ( abs )				      								    								  
102 LOAD_FAST 0 ( a )					      								    								  
104 LOAD_FAST 6 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 DUP_TOP_TWO						      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 ROT_THREE						      								    								  
120 STORE_SUBSCR					      								    								  
122 JUMP_ABSOLUTE 60					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
11 >> 126 SETUP_LOOP 72 ( to 200 )			      								    								  
128 LOAD_GLOBAL 3 ( range )				      								    								  
130 LOAD_FAST 3 ( Min )					      								    								  
132 LOAD_CONST 1 ( 0 )					      								    								  
134 LOAD_CONST 3 ( - 1 )				      								    								  
136 CALL_FUNCTION 3					      								    								  
138 GET_ITER						      								    								  
>> 140 FOR_ITER 56 ( to 198 )				      								    								  
142 STORE_FAST 6 ( i )					      								    								  
							      								    								  
12 144 LOAD_FAST 5 ( hashneg )				      								    								  
146 LOAD_FAST 6 ( i )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_CONST 1 ( 0 )					      								    								  
152 COMPARE_OP 3 ( != )					      								    								  
154 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
13 156 SETUP_LOOP 38 ( to 196 )				      								    								  
158 LOAD_GLOBAL 3 ( range )				      								    								  
160 LOAD_CONST 1 ( 0 )					      								    								  
162 LOAD_FAST 5 ( hashneg )				      								    								  
164 LOAD_FAST 6 ( i )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 CALL_FUNCTION 2					      								    								  
170 GET_ITER						      								    								  
>> 172 FOR_ITER 20 ( to 194 )				      								    								  
174 STORE_FAST 7 ( j )					      								    								  
							      								    								  
14 176 LOAD_GLOBAL 4 ( print )				      								    								  
178 LOAD_CONST 3 ( - 1 )				      								    								  
180 LOAD_FAST 6 ( i )					      								    								  
182 BINARY_MULTIPLY					      								    								  
184 LOAD_CONST 4 ( ' ' )				      								    								  
186 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
188 CALL_FUNCTION_KW 2					      								    								  
190 POP_TOP						      								    								  
192 JUMP_ABSOLUTE 172					      								    								  
>> 194 POP_BLOCK					      								    								  
>> 196 JUMP_ABSOLUTE 140				      								    								  
>> 198 POP_BLOCK					      								    								  
							      								    								  
15 >> 200 SETUP_LOOP 70 ( to 272 )			      								    								  
202 LOAD_GLOBAL 3 ( range )				      								    								  
204 LOAD_CONST 1 ( 0 )					      								    								  
206 LOAD_FAST 2 ( Max )					      								    								  
208 LOAD_CONST 2 ( 1 )					      								    								  
210 BINARY_ADD						      								    								  
212 CALL_FUNCTION 2					      								    								  
214 GET_ITER						      								    								  
>> 216 FOR_ITER 52 ( to 270 )				      								    								  
218 STORE_FAST 6 ( i )					      								    								  
							      								    								  
16 220 LOAD_FAST 4 ( hashpos )				      								    								  
222 LOAD_FAST 6 ( i )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 LOAD_CONST 1 ( 0 )					      								    								  
228 COMPARE_OP 3 ( != )					      								    								  
230 POP_JUMP_IF_FALSE 216				      								    								  
							      								    								  
17 232 SETUP_LOOP 34 ( to 268 )				      								    								  
234 LOAD_GLOBAL 3 ( range )				      								    								  
236 LOAD_CONST 1 ( 0 )					      								    								  
238 LOAD_FAST 4 ( hashpos )				      								    								  
240 LOAD_FAST 6 ( i )					      								    								  
242 BINARY_SUBSCR					      								    								  
244 CALL_FUNCTION 2					      								    								  
246 GET_ITER						      								    								  
>> 248 FOR_ITER 16 ( to 266 )				      								    								  
250 STORE_FAST 7 ( j )					      								    								  
							      								    								  
18 252 LOAD_GLOBAL 4 ( print )				      								    								  
254 LOAD_FAST 6 ( i )					      								    								  
256 LOAD_CONST 4 ( ' ' )				      								    								  
258 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
260 CALL_FUNCTION_KW 2					      								    								  
262 POP_TOP						      								    								  
264 JUMP_ABSOLUTE 248					      								    								  
>> 266 POP_BLOCK					      								    								  
>> 268 JUMP_ABSOLUTE 216				      								    								  
>> 270 POP_BLOCK					      								    								  
>> 272 LOAD_CONST 0 ( None )				      								    								  
274 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> VE_FIRST_HALF_QUEUE_SECOND_<unk> F		      <unk> VE_FIRST_HALF_QUEUE_SECOND_<unk> F			    <unk> VE_FIRST_HALF_QUEUE_SECOND_<unk> F			  <unk> VE_FIRST_HALF_QUEUE_SECOND_<unk> F
--							      --							    --								  --
Disassembly of <code object interLeaveQueue at 0x7fbac0e8d540 def interLeaveQueue ( q ) :				    def interLeaveQueue ( q ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( q )					      	  if ( q.qsize ( ) % 2 != 0 ) :				    	if q.qsize ( ) % 2 != 0 :				  
2 LOAD_METHOD 0 ( qsize )				      	      print ( "Input even number of integers." )	    	    print ( "Input even number of integers." )		  
4 CALL_METHOD 0						      	  s = [ ]						    	s = [ ]							  
6 LOAD_CONST 1 ( 2 )					      	  halfSize = int ( q.qsize ( ) / 2 )			    	halfSize = int ( q.qsize ( ) / 2 )			  
8 BINARY_MODULO						      	  for i in range ( halfSize ) :				    	for i in range ( halfSize ) :				  
10 LOAD_CONST 2 ( 0 )					      	      s.append ( q.queue [ 0 ] )			    	    s.append ( q.queue [ 0 ] )				  
12 COMPARE_OP 3 ( != )					      	      q.get ( )						    	    q.get ( )						  
14 POP_JUMP_IF_FALSE 24					      	  while len ( s ) != 0 :				    	while len ( s ) != 0 :					  
							      	      q.put ( s [ - 1 ] )				    	    q.put ( s [ - 1 ] )					  
3 16 LOAD_GLOBAL 1 ( print )				      	      s.pop ( )						    	    s.pop ( )						  
18 LOAD_CONST 3 ( 'Input even number of integers.' )	      	  for i in range ( halfSize ) :				    	for i in range ( halfSize ) :				  
20 CALL_FUNCTION 1					      	      q.put ( q.queue [ 0 ] )				    	    q.put ( q.queue [ 0 ] )				  
22 POP_TOP						      	      q.get ( )						    	    q.get ( )						  
							      	  for i in range ( halfSize ) :				    	for i in range ( halfSize ) :				  
4 >> 24 BUILD_LIST 0					      	      s.append ( q.queue [ 0 ] )			    	    q.append ( q.get ( ) )				  
26 STORE_FAST 1 ( s )					      	      q.get ( )						    	q.put ( q.get ( ) )					  
							      	  while len ( s ) != 0 :				    	q.pop ( )						  
5 28 LOAD_GLOBAL 2 ( int )				      	      q.put ( s [ - 1 ] )				    if len ( s ) != 0 :						  
30 LOAD_FAST 0 ( q )					      	      s.pop ( )						    	q.pop ( )						  
32 LOAD_METHOD 0 ( qsize )				      	      q.put ( q.queue [ 0 ] )				    return s							  
34 CALL_METHOD 0					      	      q.get ( )						    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 2 ( halfSize )				      								    								  
							      								    								  
6 44 SETUP_LOOP 40 ( to 86 )				      								    								  
46 LOAD_GLOBAL 3 ( range )				      								    								  
48 LOAD_FAST 2 ( halfSize )				      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 28 ( to 84 )				      								    								  
56 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 58 LOAD_FAST 1 ( s )					      								    								  
60 LOAD_METHOD 4 ( append )				      								    								  
62 LOAD_FAST 0 ( q )					      								    								  
64 LOAD_ATTR 5 ( queue )				      								    								  
66 LOAD_CONST 2 ( 0 )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 CALL_METHOD 1					      								    								  
72 POP_TOP						      								    								  
							      								    								  
8 74 LOAD_FAST 0 ( q )					      								    								  
76 LOAD_METHOD 6 ( get )				      								    								  
78 CALL_METHOD 0					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 54					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
9 >> 86 SETUP_LOOP 38 ( to 126 )			      								    								  
>> 88 LOAD_GLOBAL 7 ( len )				      								    								  
90 LOAD_FAST 1 ( s )					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_CONST 2 ( 0 )					      								    								  
96 COMPARE_OP 3 ( != )					      								    								  
98 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
10 100 LOAD_FAST 0 ( q )				      								    								  
102 LOAD_METHOD 8 ( put )				      								    								  
104 LOAD_FAST 1 ( s )					      								    								  
106 LOAD_CONST 4 ( - 1 )				      								    								  
108 BINARY_SUBSCR					      								    								  
110 CALL_METHOD 1					      								    								  
112 POP_TOP						      								    								  
							      								    								  
11 114 LOAD_FAST 1 ( s )				      								    								  
116 LOAD_METHOD 9 ( pop )				      								    								  
118 CALL_METHOD 0					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 88					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
12 >> 126 SETUP_LOOP 40 ( to 168 )			      								    								  
128 LOAD_GLOBAL 3 ( range )				      								    								  
130 LOAD_FAST 2 ( halfSize )				      								    								  
132 CALL_FUNCTION 1					      								    								  
134 GET_ITER						      								    								  
>> 136 FOR_ITER 28 ( to 166 )				      								    								  
138 STORE_FAST 3 ( i )					      								    								  
							      								    								  
13 140 LOAD_FAST 0 ( q )				      								    								  
142 LOAD_METHOD 8 ( put )				      								    								  
144 LOAD_FAST 0 ( q )					      								    								  
146 LOAD_ATTR 5 ( queue )				      								    								  
148 LOAD_CONST 2 ( 0 )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 CALL_METHOD 1					      								    								  
154 POP_TOP						      								    								  
							      								    								  
14 156 LOAD_FAST 0 ( q )				      								    								  
158 LOAD_METHOD 6 ( get )				      								    								  
160 CALL_METHOD 0					      								    								  
162 POP_TOP						      								    								  
164 JUMP_ABSOLUTE 136					      								    								  
>> 166 POP_BLOCK					      								    								  
							      								    								  
15 >> 168 SETUP_LOOP 40 ( to 210 )			      								    								  
170 LOAD_GLOBAL 3 ( range )				      								    								  
172 LOAD_FAST 2 ( halfSize )				      								    								  
174 CALL_FUNCTION 1					      								    								  
176 GET_ITER						      								    								  
>> 178 FOR_ITER 28 ( to 208 )				      								    								  
180 STORE_FAST 3 ( i )					      								    								  
							      								    								  
16 182 LOAD_FAST 1 ( s )				      								    								  
184 LOAD_METHOD 4 ( append )				      								    								  
186 LOAD_FAST 0 ( q )					      								    								  
188 LOAD_ATTR 5 ( queue )				      								    								  
190 LOAD_CONST 2 ( 0 )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 CALL_METHOD 1					      								    								  
196 POP_TOP						      								    								  
							      								    								  
17 198 LOAD_FAST 0 ( q )				      								    								  
200 LOAD_METHOD 6 ( get )				      								    								  
202 CALL_METHOD 0					      								    								  
204 POP_TOP						      								    								  
206 JUMP_ABSOLUTE 178					      								    								  
>> 208 POP_BLOCK					      								    								  
							      								    								  
18 >> 210 SETUP_LOOP 64 ( to 276 )			      								    								  
>> 212 LOAD_GLOBAL 7 ( len )				      								    								  
214 LOAD_FAST 1 ( s )					      								    								  
216 CALL_FUNCTION 1					      								    								  
218 LOAD_CONST 2 ( 0 )					      								    								  
220 COMPARE_OP 3 ( != )					      								    								  
222 EXTENDED_ARG 1					      								    								  
224 POP_JUMP_IF_FALSE 274				      								    								  
							      								    								  
19 226 LOAD_FAST 0 ( q )				      								    								  
228 LOAD_METHOD 8 ( put )				      								    								  
230 LOAD_FAST 1 ( s )					      								    								  
232 LOAD_CONST 4 ( - 1 )				      								    								  
234 BINARY_SUBSCR					      								    								  
236 CALL_METHOD 1					      								    								  
238 POP_TOP						      								    								  
							      								    								  
20 240 LOAD_FAST 1 ( s )				      								    								  
242 LOAD_METHOD 9 ( pop )				      								    								  
244 CALL_METHOD 0					      								    								  
246 POP_TOP						      								    								  
							      								    								  
21 248 LOAD_FAST 0 ( q )				      								    								  
250 LOAD_METHOD 8 ( put )				      								    								  
252 LOAD_FAST 0 ( q )					      								    								  
254 LOAD_ATTR 5 ( queue )				      								    								  
256 LOAD_CONST 2 ( 0 )					      								    								  
258 BINARY_SUBSCR					      								    								  
260 CALL_METHOD 1					      								    								  
262 POP_TOP						      								    								  
							      								    								  
22 264 LOAD_FAST 0 ( q )				      								    								  
266 LOAD_METHOD 6 ( get )				      								    								  
268 CALL_METHOD 0					      								    								  
270 POP_TOP						      								    								  
272 JUMP_ABSOLUTE 212					      								    								  
>> 274 POP_BLOCK					      								    								  
>> 276 LOAD_CONST 0 ( None )				      								    								  
278 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM			      PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM			    PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM				  PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM
--							      --							    --								  --
Disassembly of <code object spiralPrint at 0x7fbac0e8bc90, fi def spiralPrint ( m , n , a ) :				    def spiralPrint ( m , n , a = 5 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  k = 0 ; l = 0						    	k = 0							  
2 STORE_FAST 3 ( k )					      	  while ( k < m and l < n ) :				    	l = 0							  
4 LOAD_CONST 1 ( 0 )					      	      for i in range ( l , n ) :			    	while k < m and l < n :					  
6 STORE_FAST 4 ( l )					      		  print ( a [ k ] [ i ] , end = " " )		    	    for i in range ( l , n ) :				  
							      	      k += 1						    		print ( a [ k ] [ i ] , end = " " )		  
3 8 EXTENDED_ARG 1					      	      for i in range ( k , m ) :			    	    k += 1						  
10 SETUP_LOOP 260 ( to 272 )				      		  print ( a [ i ] [ n - 1 ] , end = " " )	    	    for i in range ( k , m ) :				  
>> 12 LOAD_FAST 3 ( k )					      	      n -= 1						    		print ( a [ i ] [ n - 1 ] , end = " " )		  
14 LOAD_FAST 0 ( m )					      	      if ( k < m ) :					    	    n -= 1						  
16 COMPARE_OP 0 ( < )					      		  for i in range ( n - 1 , ( l - 1 ) , - 1 ) :	    	    if k < m :						  
18 EXTENDED_ARG 1					      		      print ( a [ m - 1 ] [ i ] , end = " " )	    		for i in range ( n - 1 , l - 1 , - 1 ) :	  
20 POP_JUMP_IF_FALSE 270				      		  m -= 1					    		    print ( a [ i ] [ n ] , end = " " )		  
22 LOAD_FAST 4 ( l )					      	      if ( l < n ) :					    	l += 1							  
24 LOAD_FAST 1 ( n )					      		  for i in range ( m - 1 , k - 1 , - 1 ) :	    	for i in range ( 2 , n ) :				  
26 COMPARE_OP 0 ( < )					      		      print ( a [ i ] [ l ] , end = " " )	    	    print ( a [ i ] [ n ] , end = " " )			  
28 EXTENDED_ARG 1					      		  l += 1					    print ( "end = " )						  
30 POP_JUMP_IF_FALSE 270				      								    								  
							      								    								  
4 32 SETUP_LOOP 38 ( to 72 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 4 ( l )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 24 ( to 70 )				      								    								  
46 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_FAST 2 ( a )					      								    								  
52 LOAD_FAST 3 ( k )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 2 ( ' ' )					      								    								  
62 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
64 CALL_FUNCTION_KW 2					      								    								  
66 POP_TOP						      								    								  
68 JUMP_ABSOLUTE 44					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_FAST 3 ( k )				      								    								  
74 LOAD_CONST 4 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 3 ( k )					      								    								  
							      								    								  
7 80 SETUP_LOOP 42 ( to 124 )				      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_FAST 3 ( k )					      								    								  
86 LOAD_FAST 0 ( m )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 28 ( to 122 )				      								    								  
94 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 96 LOAD_GLOBAL 1 ( print )				      								    								  
98 LOAD_FAST 2 ( a )					      								    								  
100 LOAD_FAST 5 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 1 ( n )					      								    								  
106 LOAD_CONST 4 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 2 ( ' ' )				      								    								  
114 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
116 CALL_FUNCTION_KW 2					      								    								  
118 POP_TOP						      								    								  
120 JUMP_ABSOLUTE 92					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
9 >> 124 LOAD_FAST 1 ( n )				      								    								  
126 LOAD_CONST 4 ( 1 )					      								    								  
128 INPLACE_SUBTRACT					      								    								  
130 STORE_FAST 1 ( n )					      								    								  
							      								    								  
10 132 LOAD_FAST 3 ( k )				      								    								  
134 LOAD_FAST 0 ( m )					      								    								  
136 COMPARE_OP 0 ( < )					      								    								  
138 POP_JUMP_IF_FALSE 202				      								    								  
							      								    								  
11 140 SETUP_LOOP 52 ( to 194 )				      								    								  
142 LOAD_GLOBAL 0 ( range )				      								    								  
144 LOAD_FAST 1 ( n )					      								    								  
146 LOAD_CONST 4 ( 1 )					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 LOAD_FAST 4 ( l )					      								    								  
152 LOAD_CONST 4 ( 1 )					      								    								  
154 BINARY_SUBTRACT					      								    								  
156 LOAD_CONST 5 ( - 1 )				      								    								  
158 CALL_FUNCTION 3					      								    								  
160 GET_ITER						      								    								  
>> 162 FOR_ITER 28 ( to 192 )				      								    								  
164 STORE_FAST 5 ( i )					      								    								  
							      								    								  
12 166 LOAD_GLOBAL 1 ( print )				      								    								  
168 LOAD_FAST 2 ( a )					      								    								  
170 LOAD_FAST 0 ( m )					      								    								  
172 LOAD_CONST 4 ( 1 )					      								    								  
174 BINARY_SUBTRACT					      								    								  
176 BINARY_SUBSCR					      								    								  
178 LOAD_FAST 5 ( i )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 LOAD_CONST 2 ( ' ' )				      								    								  
184 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
186 CALL_FUNCTION_KW 2					      								    								  
188 POP_TOP						      								    								  
190 JUMP_ABSOLUTE 162					      								    								  
>> 192 POP_BLOCK					      								    								  
							      								    								  
13 >> 194 LOAD_FAST 0 ( m )				      								    								  
196 LOAD_CONST 4 ( 1 )					      								    								  
198 INPLACE_SUBTRACT					      								    								  
200 STORE_FAST 0 ( m )					      								    								  
							      								    								  
14 >> 202 LOAD_FAST 4 ( l )				      								    								  
204 LOAD_FAST 1 ( n )					      								    								  
206 COMPARE_OP 0 ( < )					      								    								  
208 POP_JUMP_IF_FALSE 12				      								    								  
							      								    								  
15 210 SETUP_LOOP 48 ( to 260 )				      								    								  
212 LOAD_GLOBAL 0 ( range )				      								    								  
214 LOAD_FAST 0 ( m )					      								    								  
216 LOAD_CONST 4 ( 1 )					      								    								  
218 BINARY_SUBTRACT					      								    								  
220 LOAD_FAST 3 ( k )					      								    								  
222 LOAD_CONST 4 ( 1 )					      								    								  
224 BINARY_SUBTRACT					      								    								  
226 LOAD_CONST 5 ( - 1 )				      								    								  
228 CALL_FUNCTION 3					      								    								  
230 GET_ITER						      								    								  
>> 232 FOR_ITER 24 ( to 258 )				      								    								  
234 STORE_FAST 5 ( i )					      								    								  
							      								    								  
16 236 LOAD_GLOBAL 1 ( print )				      								    								  
238 LOAD_FAST 2 ( a )					      								    								  
240 LOAD_FAST 5 ( i )					      								    								  
242 BINARY_SUBSCR					      								    								  
244 LOAD_FAST 4 ( l )					      								    								  
246 BINARY_SUBSCR					      								    								  
248 LOAD_CONST 2 ( ' ' )				      								    								  
250 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
252 CALL_FUNCTION_KW 2					      								    								  
254 POP_TOP						      								    								  
256 JUMP_ABSOLUTE 232					      								    								  
>> 258 POP_BLOCK					      								    								  
							      								    								  
17 >> 260 LOAD_FAST 4 ( l )				      								    								  
262 LOAD_CONST 4 ( 1 )					      								    								  
264 INPLACE_ADD						      								    								  
266 STORE_FAST 4 ( l )					      								    								  
268 JUMP_ABSOLUTE 12					      								    								  
>> 270 POP_BLOCK					      								    								  
>> 272 LOAD_CONST 0 ( None )				      								    								  
274 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CY<unk> SORT						      CY<unk> SORT						    CY<unk> SORT						  CY<unk> SORT
--							      --							    --								  --
Disassembly of <code object cycleSort at 0x7fbac0e8de40, file def cycleSort ( array ) :					    def cycleSort ( array ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  writes = 0						    	writes = 0						  
2 STORE_FAST 1 ( writes )				      	  for cycleStart in range ( 0 , len ( array ) - 1 ) :	    	for cycleStart in range ( 0 , len ( array ) - 1 ) :	  
							      	      item = array [ cycleStart ]			    	    item = array [ cycleStart ]				  
3 4 EXTENDED_ARG 1					      	      pos = cycleStart					    	    pos = cycleStart					  
6 SETUP_LOOP 268 ( to 276 )				      	      for i in range ( cycleStart + 1 , len ( array ) ) :   	    for i in range ( cycleStart + 1 , len ( array ) ) :	  
8 LOAD_GLOBAL 0 ( range )				      		  if array [ i ] < item :			    		if array [ i ] < item :				  
10 LOAD_CONST 1 ( 0 )					      		      pos += 1					    		    pos += 1					  
12 LOAD_GLOBAL 1 ( len )				      	      if pos == cycleStart :				    	    if pos == cycleStart :				  
14 LOAD_FAST 0 ( array )				      		  continue					    		continue					  
16 CALL_FUNCTION 1					      	      while item == array [ pos ] :			    	    while item == array [ pos ] :			  
18 LOAD_CONST 2 ( 1 )					      		  pos += 1					    		pos += 1					  
20 BINARY_SUBTRACT					      	      array [ pos ] , item = item , array [ pos ]	    	array [ pos ] = item , array [ pos ]			  
22 CALL_FUNCTION 2					      	      writes += 1					    	writes += 1						  
24 GET_ITER						      	      while pos != cycleStart :				    	while pos != cycleStart :				  
>> 26 FOR_ITER 246 ( to 274 )				      		  pos = cycleStart				    	    while cycleStart < cycleStart :			  
28 STORE_FAST 2 ( cycleStart )				      		  for i in range ( cycleStart + 1 , len ( array ) ) 		pos += 1					  
							      		      if array [ i ] < item :			    if pos != cycleStart :					  
4 30 LOAD_FAST 0 ( array )				      			  pos += 1				    	for i in range ( len ( array ) + 1 , len ( array ) ) :	  
32 LOAD_FAST 2 ( cycleStart )				      		  while item == array [ pos ] :			    	    if len ( array [ i ] ) == 2 :			  
34 BINARY_SUBSCR					      		      pos += 1					    		continue					  
36 STORE_FAST 3 ( item )				      		  array [ pos ] , item = item , array [ pos ]	    return array [ pos ]					  
							      		  writes += 1					    								  
5 38 LOAD_FAST 2 ( cycleStart )				      	  return writes						    								  
40 STORE_FAST 4 ( pos )					      								    								  
							      								    								  
6 42 SETUP_LOOP 46 ( to 90 )				      								    								  
44 LOAD_GLOBAL 0 ( range )				      								    								  
46 LOAD_FAST 2 ( cycleStart )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_GLOBAL 1 ( len )				      								    								  
54 LOAD_FAST 0 ( array )				      								    								  
56 CALL_FUNCTION 1					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 24 ( to 88 )				      								    								  
64 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 66 LOAD_FAST 0 ( array )				      								    								  
68 LOAD_FAST 5 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 3 ( item )					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 78 LOAD_FAST 4 ( pos )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 4 ( pos )					      								    								  
86 JUMP_ABSOLUTE 62					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
9 >> 90 LOAD_FAST 4 ( pos )				      								    								  
92 LOAD_FAST 2 ( cycleStart )				      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
10 98 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 100 SETUP_LOOP 24 ( to 126 )			      								    								  
>> 102 LOAD_FAST 3 ( item )				      								    								  
104 LOAD_FAST 0 ( array )				      								    								  
106 LOAD_FAST 4 ( pos )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 COMPARE_OP 2 ( == )					      								    								  
112 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
12 114 LOAD_FAST 4 ( pos )				      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 INPLACE_ADD						      								    								  
120 STORE_FAST 4 ( pos )				      								    								  
122 JUMP_ABSOLUTE 102					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 3 ( item )				      								    								  
128 LOAD_FAST 0 ( array )				      								    								  
130 LOAD_FAST 4 ( pos )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 ROT_TWO						      								    								  
136 LOAD_FAST 0 ( array )				      								    								  
138 LOAD_FAST 4 ( pos )					      								    								  
140 STORE_SUBSCR					      								    								  
142 STORE_FAST 3 ( item )				      								    								  
							      								    								  
14 144 LOAD_FAST 1 ( writes )				      								    								  
146 LOAD_CONST 2 ( 1 )					      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 1 ( writes )				      								    								  
							      								    								  
15 152 SETUP_LOOP 118 ( to 272 )			      								    								  
>> 154 LOAD_FAST 4 ( pos )				      								    								  
156 LOAD_FAST 2 ( cycleStart )				      								    								  
158 COMPARE_OP 3 ( != )					      								    								  
160 EXTENDED_ARG 1					      								    								  
162 POP_JUMP_IF_FALSE 270				      								    								  
							      								    								  
16 164 LOAD_FAST 2 ( cycleStart )			      								    								  
166 STORE_FAST 4 ( pos )				      								    								  
							      								    								  
17 168 SETUP_LOOP 46 ( to 216 )				      								    								  
170 LOAD_GLOBAL 0 ( range )				      								    								  
172 LOAD_FAST 2 ( cycleStart )				      								    								  
174 LOAD_CONST 2 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 LOAD_GLOBAL 1 ( len )				      								    								  
180 LOAD_FAST 0 ( array )				      								    								  
182 CALL_FUNCTION 1					      								    								  
184 CALL_FUNCTION 2					      								    								  
186 GET_ITER						      								    								  
>> 188 FOR_ITER 24 ( to 214 )				      								    								  
190 STORE_FAST 5 ( i )					      								    								  
							      								    								  
18 192 LOAD_FAST 0 ( array )				      								    								  
194 LOAD_FAST 5 ( i )					      								    								  
196 BINARY_SUBSCR					      								    								  
198 LOAD_FAST 3 ( item )				      								    								  
200 COMPARE_OP 0 ( < )					      								    								  
202 POP_JUMP_IF_FALSE 188				      								    								  
							      								    								  
19 204 LOAD_FAST 4 ( pos )				      								    								  
206 LOAD_CONST 2 ( 1 )					      								    								  
208 INPLACE_ADD						      								    								  
210 STORE_FAST 4 ( pos )				      								    								  
212 JUMP_ABSOLUTE 188					      								    								  
>> 214 POP_BLOCK					      								    								  
							      								    								  
20 >> 216 SETUP_LOOP 24 ( to 242 )			      								    								  
>> 218 LOAD_FAST 3 ( item )				      								    								  
220 LOAD_FAST 0 ( array )				      								    								  
222 LOAD_FAST 4 ( pos )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 COMPARE_OP 2 ( == )					      								    								  
228 POP_JUMP_IF_FALSE 240				      								    								  
							      								    								  
21 230 LOAD_FAST 4 ( pos )				      								    								  
232 LOAD_CONST 2 ( 1 )					      								    								  
234 INPLACE_ADD						      								    								  
236 STORE_FAST 4 ( pos )				      								    								  
238 JUMP_ABSOLUTE 218					      								    								  
>> 240 POP_BLOCK					      								    								  
							      								    								  
22 >> 242 LOAD_FAST 3 ( item )				      								    								  
244 LOAD_FAST 0 ( array )				      								    								  
246 LOAD_FAST 4 ( pos )					      								    								  
248 BINARY_SUBSCR					      								    								  
250 ROT_TWO						      								    								  
252 LOAD_FAST 0 ( array )				      								    								  
254 LOAD_FAST 4 ( pos )					      								    								  
256 STORE_SUBSCR					      								    								  
258 STORE_FAST 3 ( item )				      								    								  
							      								    								  
23 260 LOAD_FAST 1 ( writes )				      								    								  
262 LOAD_CONST 2 ( 1 )					      								    								  
264 INPLACE_ADD						      								    								  
266 STORE_FAST 1 ( writes )				      								    								  
268 JUMP_ABSOLUTE 154					      								    								  
>> 270 POP_BLOCK					      								    								  
>> 272 JUMP_ABSOLUTE 26					      								    								  
>> 274 POP_BLOCK					      								    								  
							      								    								  
24 >> 276 LOAD_FAST 1 ( writes )			      								    								  
278 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WORD_<unk> P_PROBLEM_SPACE_OPTIMIZED_SOLUTION		      WORD_<unk> P_PROBLEM_SPACE_OPTIMIZED_SOLUTION		    WORD_<unk> P_PROBLEM_SPACE_OPTIMIZED_SOLUTION		  WORD_<unk> P_PROBLEM_SPACE_OPTIMIZED_SOLUTION
--							      --							    --								  --
Disassembly of <code object solveWordWrap at 0x7fbac0e89d20,  def solveWordWrap ( arr , n , k ) :			    def solveWordhas( arr , n , k = 2 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * n					    	dp = [ 0 ] * n						  
2 BUILD_LIST 1						      	  ans = [ 0 ] * n					    	ans = [ 0 ] * n						  
4 LOAD_FAST 1 ( n )					      	  dp [ n - 1 ] = 0					    	dp [ n - 1 ] = 0					  
6 BINARY_MULTIPLY					      	  ans [ n - 1 ] = n - 1					    	ans [ n - 1 ] = n - 1					  
8 STORE_FAST 3 ( dp )					      	  for i in range ( n - 2 , - 1 , - 1 ) :		    	for i in range ( n - 2 , - 1 , - 1 ) :			  
							      	      currlen = - 1					    	    currlen = - 1					  
3 10 LOAD_CONST 1 ( 0 )					      	      dp [ i ] = sys.maxsize				    	    dp [ i ] = sys.maxsize				  
12 BUILD_LIST 1						      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
14 LOAD_FAST 1 ( n )					      		  currlen += ( arr [ j ] + 1 )			    		currlen += arr [ j ] + 1			  
16 BINARY_MULTIPLY					      		  if ( currlen > k ) :				    		if currlen > k :				  
18 STORE_FAST 4 ( ans )					      		      break					    		    break					  
							      		  if ( j == n - 1 ) :				    		if j == n - 1 :					  
4 20 LOAD_CONST 1 ( 0 )					      		      cost = 0					    		    cost = 0					  
22 LOAD_FAST 3 ( dp )					      		  else :					    	    else :						  
24 LOAD_FAST 1 ( n )					      		      cost = ( ( k - currlen ) * ( k - currlen ) +  		cost = ( k - currlen * ( k - currlen ) * j + 1 )  
26 LOAD_CONST 2 ( 1 )					      		  if ( cost < dp [ i ] ) :			    	    if dp < j :						  
28 BINARY_SUBTRACT					      		      dp [ i ] = cost				    		cost [ i ] = cost [ i ]				  
30 STORE_SUBSCR						      		      ans [ i ] = j				    	    else :						  
							      	  i = 0							    		if i < j + 1 :					  
5 32 LOAD_FAST 1 ( n )					      	  while ( i < n ) :					    		    cost [ i ] = cost [ i ] + 1			  
34 LOAD_CONST 2 ( 1 )					      	      print ( i + 1 , ans [ i ] + 1 , end = " " )	    								  
36 BINARY_SUBTRACT					      	      i = ans [ i ] + 1					    								  
38 LOAD_FAST 4 ( ans )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_SUBSCR						      								    								  
							      								    								  
6 48 SETUP_LOOP 158 ( to 208 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_CONST 4 ( - 1 )					      								    								  
60 LOAD_CONST 4 ( - 1 )					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 138 ( to 206 )				      								    								  
68 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 70 LOAD_CONST 4 ( - 1 )				      								    								  
72 STORE_FAST 6 ( currlen )				      								    								  
							      								    								  
8 74 LOAD_GLOBAL 1 ( sys )				      								    								  
76 LOAD_ATTR 2 ( maxsize )				      								    								  
78 LOAD_FAST 3 ( dp )					      								    								  
80 LOAD_FAST 5 ( i )					      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
9 84 SETUP_LOOP 118 ( to 204 )				      								    								  
86 LOAD_GLOBAL 0 ( range )				      								    								  
88 LOAD_FAST 5 ( i )					      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 CALL_FUNCTION 2					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 104 ( to 202 )				      								    								  
98 STORE_FAST 7 ( j )					      								    								  
							      								    								  
10 100 LOAD_FAST 6 ( currlen )				      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 7 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_ADD						      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 6 ( currlen )				      								    								  
							      								    								  
11 116 LOAD_FAST 6 ( currlen )				      								    								  
118 LOAD_FAST 2 ( k )					      								    								  
120 COMPARE_OP 4 ( > )					      								    								  
122 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
12 124 BREAK_LOOP					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 7 ( j )				      								    								  
128 LOAD_FAST 1 ( n )					      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 COMPARE_OP 2 ( == )					      								    								  
136 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
14 138 LOAD_CONST 1 ( 0 )				      								    								  
140 STORE_FAST 8 ( cost )				      								    								  
142 JUMP_FORWARD 28 ( to 172 )				      								    								  
							      								    								  
16 >> 144 LOAD_FAST 2 ( k )				      								    								  
146 LOAD_FAST 6 ( currlen )				      								    								  
148 BINARY_SUBTRACT					      								    								  
150 LOAD_FAST 2 ( k )					      								    								  
152 LOAD_FAST 6 ( currlen )				      								    								  
154 BINARY_SUBTRACT					      								    								  
156 BINARY_MULTIPLY					      								    								  
158 LOAD_FAST 3 ( dp )					      								    								  
160 LOAD_FAST 7 ( j )					      								    								  
162 LOAD_CONST 2 ( 1 )					      								    								  
164 BINARY_ADD						      								    								  
166 BINARY_SUBSCR					      								    								  
168 BINARY_ADD						      								    								  
170 STORE_FAST 8 ( cost )				      								    								  
							      								    								  
17 >> 172 LOAD_FAST 8 ( cost )				      								    								  
174 LOAD_FAST 3 ( dp )					      								    								  
176 LOAD_FAST 5 ( i )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 COMPARE_OP 0 ( < )					      								    								  
182 POP_JUMP_IF_FALSE 96				      								    								  
							      								    								  
18 184 LOAD_FAST 8 ( cost )				      								    								  
186 LOAD_FAST 3 ( dp )					      								    								  
188 LOAD_FAST 5 ( i )					      								    								  
190 STORE_SUBSCR					      								    								  
							      								    								  
19 192 LOAD_FAST 7 ( j )				      								    								  
194 LOAD_FAST 4 ( ans )					      								    								  
196 LOAD_FAST 5 ( i )					      								    								  
198 STORE_SUBSCR					      								    								  
200 JUMP_ABSOLUTE 96					      								    								  
>> 202 POP_BLOCK					      								    								  
>> 204 JUMP_ABSOLUTE 66					      								    								  
>> 206 POP_BLOCK					      								    								  
							      								    								  
20 >> 208 LOAD_CONST 1 ( 0 )				      								    								  
210 STORE_FAST 5 ( i )					      								    								  
							      								    								  
21 212 SETUP_LOOP 52 ( to 266 )				      								    								  
>> 214 LOAD_FAST 5 ( i )				      								    								  
216 LOAD_FAST 1 ( n )					      								    								  
218 COMPARE_OP 0 ( < )					      								    								  
220 EXTENDED_ARG 1					      								    								  
222 POP_JUMP_IF_FALSE 264				      								    								  
							      								    								  
22 224 LOAD_GLOBAL 3 ( print )				      								    								  
226 LOAD_FAST 5 ( i )					      								    								  
228 LOAD_CONST 2 ( 1 )					      								    								  
230 BINARY_ADD						      								    								  
232 LOAD_FAST 4 ( ans )					      								    								  
234 LOAD_FAST 5 ( i )					      								    								  
236 BINARY_SUBSCR					      								    								  
238 LOAD_CONST 2 ( 1 )					      								    								  
240 BINARY_ADD						      								    								  
242 LOAD_CONST 5 ( ' ' )				      								    								  
244 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
246 CALL_FUNCTION_KW 3					      								    								  
248 POP_TOP						      								    								  
							      								    								  
23 250 LOAD_FAST 4 ( ans )				      								    								  
252 LOAD_FAST 5 ( i )					      								    								  
254 BINARY_SUBSCR					      								    								  
256 LOAD_CONST 2 ( 1 )					      								    								  
258 BINARY_ADD						      								    								  
260 STORE_FAST 5 ( i )					      								    								  
262 JUMP_ABSOLUTE 214					      								    								  
>> 264 POP_BLOCK					      								    								  
>> 266 LOAD_CONST 0 ( None )				      								    								  
268 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_SENTENCE_GIVEN_SET_SIMPLE_GRAMMER_RULES	      CHECK_GIVEN_SENTENCE_GIVEN_SET_SIMPLE_GRAMMER_RULES	    CHECK_GIVEN_SENTENCE_GIVEN_SET_SIMPLE_GRAMMER_RULES		  CHECK_GIVEN_SENTENCE_GIVEN_SET_SIMPLE_GRAMMER_RULES
--							      --							    --								  --
Disassembly of <code object checkSentence at 0x7fbac0e8d540,  def checkSentence ( string ) :				    def checkSentence ( string ) :				  timeout : None
2 0 LOAD_GLOBAL 0 ( len )				      	  length = len ( string )				    	length = len ( string )					  
2 LOAD_FAST 0 ( string )				      	  if string [ 0 ] < 'A' or string [ 0 ] > 'Z' :		    	if string [ 0 ] < 'A' or string [ 0 ] > 'Z' :		  
4 CALL_FUNCTION 1					      	      return False					    	    return False					  
6 STORE_FAST 1 ( length )				      	  if string [ length - 1 ] != '.' :			    	if string [ length - 1 ] != '.' :			  
							      	      return False					    	    return False					  
3 8 LOAD_FAST 0 ( string )				      	  prev_state = 0					    	else :							  
10 LOAD_CONST 1 ( 0 )					      	  curr_state = 0					    	    zone = 0						  
12 BINARY_SUBSCR					      	  index = 1						    	    curr_state = 1					  
14 LOAD_CONST 2 ( 'A' )					      	  while ( string [ index ] ) :				    	    index = 1						  
16 COMPARE_OP 0 ( < )					      	      if string [ index ] >= 'A' and string [ index ] <= 'Z 	    while string [ index ] :				  
18 POP_JUMP_IF_TRUE 32					      		  curr_state = 0				    		if string [ index ] >= 'A' and string [ index ] < 
20 LOAD_FAST 0 ( string )				      	      elif string [ index ] == ' ' :			    		    curr_state = 0				  
22 LOAD_CONST 1 ( 0 )					      		  curr_state = 1				    		elif string [ index ] == ' ' :			  
24 BINARY_SUBSCR					      	      elif string [ index ] >= 'a' and string [ index ] <=  		    curr_state = 1				  
26 LOAD_CONST 3 ( 'Z' )					      		  curr_state = 2				    		elif string [ index ] >= 'a' and string [ index ] 
28 COMPARE_OP 4 ( > )					      	      elif string [ index ] == '.' :			    		    curr_state = 0				  
30 POP_JUMP_IF_FALSE 36					      		  curr_state = 3				    		elif string [ index ] == '.' : curr_state = False 
							      	      if prev_state == curr_state and curr_state != 2 :	    		if curr_state == '.' : curr_state = False	  
4 >> 32 LOAD_CONST 4 ( False )				      		  return False					    		if curr_state == False : curr_state = False	  
34 RETURN_VALUE						      	      if prev_state == 2 and curr_state == 0 :		    		if curr_state == True :				  
							      		  return False					    		    return False				  
5 >> 36 LOAD_FAST 0 ( string )				      	      if curr_state == 3 and prev_state != 1 :		    	    if curr_state == 'A' and string [ index ] != 'Z' : cu 
38 LOAD_FAST 1 ( length )				      		  return True					    	    return False					  
40 LOAD_CONST 5 ( 1 )					      	      index += 1					    								  
42 BINARY_SUBTRACT					      	      prev_state = curr_state				    								  
44 BINARY_SUBSCR					      	  return False						    								  
46 LOAD_CONST 6 ( '.' )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 52 LOAD_CONST 4 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
7 >> 56 LOAD_CONST 1 ( 0 )				      								    								  
58 STORE_FAST 2 ( prev_state )				      								    								  
							      								    								  
8 60 LOAD_CONST 1 ( 0 )					      								    								  
62 STORE_FAST 3 ( curr_state )				      								    								  
							      								    								  
9 64 LOAD_CONST 5 ( 1 )					      								    								  
66 STORE_FAST 4 ( index )				      								    								  
							      								    								  
10 68 SETUP_LOOP 178 ( to 248 )				      								    								  
>> 70 LOAD_FAST 0 ( string )				      								    								  
72 LOAD_FAST 4 ( index )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 POP_JUMP_IF_FALSE 246				      								    								  
							      								    								  
11 78 LOAD_FAST 0 ( string )				      								    								  
80 LOAD_FAST 4 ( index )				      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 2 ( 'A' )					      								    								  
86 COMPARE_OP 5 ( >= )					      								    								  
88 POP_JUMP_IF_FALSE 108				      								    								  
90 LOAD_FAST 0 ( string )				      								    								  
92 LOAD_FAST 4 ( index )				      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 3 ( 'Z' )					      								    								  
98 COMPARE_OP 1 ( <= )					      								    								  
100 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
12 102 LOAD_CONST 1 ( 0 )				      								    								  
104 STORE_FAST 3 ( curr_state )				      								    								  
106 JUMP_FORWARD 64 ( to 172 )				      								    								  
							      								    								  
13 >> 108 LOAD_FAST 0 ( string )			      								    								  
110 LOAD_FAST 4 ( index )				      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 7 ( ' ' )				      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
14 120 LOAD_CONST 5 ( 1 )				      								    								  
122 STORE_FAST 3 ( curr_state )				      								    								  
124 JUMP_FORWARD 46 ( to 172 )				      								    								  
							      								    								  
15 >> 126 LOAD_FAST 0 ( string )			      								    								  
128 LOAD_FAST 4 ( index )				      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 8 ( 'a' )				      								    								  
134 COMPARE_OP 5 ( >= )					      								    								  
136 POP_JUMP_IF_FALSE 156				      								    								  
138 LOAD_FAST 0 ( string )				      								    								  
140 LOAD_FAST 4 ( index )				      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_CONST 9 ( 'z' )				      								    								  
146 COMPARE_OP 1 ( <= )					      								    								  
148 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
16 150 LOAD_CONST 10 ( 2 )				      								    								  
152 STORE_FAST 3 ( curr_state )				      								    								  
154 JUMP_FORWARD 16 ( to 172 )				      								    								  
							      								    								  
17 >> 156 LOAD_FAST 0 ( string )			      								    								  
158 LOAD_FAST 4 ( index )				      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_CONST 6 ( '.' )				      								    								  
164 COMPARE_OP 2 ( == )					      								    								  
166 POP_JUMP_IF_FALSE 172				      								    								  
							      								    								  
18 168 LOAD_CONST 11 ( 3 )				      								    								  
170 STORE_FAST 3 ( curr_state )				      								    								  
							      								    								  
19 >> 172 LOAD_FAST 2 ( prev_state )			      								    								  
174 LOAD_FAST 3 ( curr_state )				      								    								  
176 COMPARE_OP 2 ( == )					      								    								  
178 POP_JUMP_IF_FALSE 192				      								    								  
180 LOAD_FAST 3 ( curr_state )				      								    								  
182 LOAD_CONST 10 ( 2 )					      								    								  
184 COMPARE_OP 3 ( != )					      								    								  
186 POP_JUMP_IF_FALSE 192				      								    								  
							      								    								  
20 188 LOAD_CONST 4 ( False )				      								    								  
190 RETURN_VALUE					      								    								  
							      								    								  
21 >> 192 LOAD_FAST 2 ( prev_state )			      								    								  
194 LOAD_CONST 10 ( 2 )					      								    								  
196 COMPARE_OP 2 ( == )					      								    								  
198 POP_JUMP_IF_FALSE 212				      								    								  
200 LOAD_FAST 3 ( curr_state )				      								    								  
202 LOAD_CONST 1 ( 0 )					      								    								  
204 COMPARE_OP 2 ( == )					      								    								  
206 POP_JUMP_IF_FALSE 212				      								    								  
							      								    								  
22 208 LOAD_CONST 4 ( False )				      								    								  
210 RETURN_VALUE					      								    								  
							      								    								  
23 >> 212 LOAD_FAST 3 ( curr_state )			      								    								  
214 LOAD_CONST 11 ( 3 )					      								    								  
216 COMPARE_OP 2 ( == )					      								    								  
218 POP_JUMP_IF_FALSE 232				      								    								  
220 LOAD_FAST 2 ( prev_state )				      								    								  
222 LOAD_CONST 5 ( 1 )					      								    								  
224 COMPARE_OP 3 ( != )					      								    								  
226 POP_JUMP_IF_FALSE 232				      								    								  
							      								    								  
24 228 LOAD_CONST 12 ( True )				      								    								  
230 RETURN_VALUE					      								    								  
							      								    								  
25 >> 232 LOAD_FAST 4 ( index )				      								    								  
234 LOAD_CONST 5 ( 1 )					      								    								  
236 INPLACE_ADD						      								    								  
238 STORE_FAST 4 ( index )				      								    								  
							      								    								  
26 240 LOAD_FAST 3 ( curr_state )			      								    								  
242 STORE_FAST 2 ( prev_state )				      								    								  
244 JUMP_ABSOLUTE 70					      								    								  
>> 246 POP_BLOCK					      								    								  
							      								    								  
27 >> 248 LOAD_CONST 4 ( False )			      								    								  
250 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP
--							      --							    --								  --
Disassembly of <code object spiralFill at 0x7fbac0e8de40, fil def spiralFill ( m , n , a ) :				    def spiralFill ( m , n , a ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  val = 1						    	val = 1							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( val )					      	  k , l = 0 , 0						    	k , l = 0 , 0						  _sa.test/CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_N
							      	  while ( k < m and l < n ) :				    	while k < m :						  UMBERS_1_TO_MN_IN_SPIRAL_WAY.py", line 51	val
3 4 LOAD_CONST 2 ( ( 0 , 0 ) )				      	      for i in range ( l , n ) :			    	    for i in range ( l , n ) :				  += 1	     ^ SyntaxError: invalid syntax
6 UNPACK_SEQUENCE 2					      		  a [ k ] [ i ] = val				    		a [ k ] [ i ] = val				  
8 STORE_FAST 4 ( k )					      		  val += 1					    		val += 1					  
10 STORE_FAST 5 ( l )					      	      k += 1						    	    k += 1						  
							      	      for i in range ( k , m ) :			    	    for i in range ( k , m ) :				  
4 12 EXTENDED_ARG 1					      		  a [ i ] [ n - 1 ] = val			    		a [ i ] [ n - 1 ] = val [ a [ i ] [ n - 1 ]	  
14 SETUP_LOOP 260 ( to 276 )				      		  val += 1					    		val += 1					  
>> 16 LOAD_FAST 4 ( k )					      	      n -= 1						    	    n -= 1						  
18 LOAD_FAST 0 ( m )					      	      if ( k < m ) :					    	    if k < m :						  
20 COMPARE_OP 0 ( < )					      		  for i in range ( n - 1 , l - 1 , - 1 ) :	    		for i in range ( n - 1 , l - 1 ) :		  
22 EXTENDED_ARG 1					      		      a [ m - 1 ] [ i ] = val			    		    val += 1					  
24 POP_JUMP_IF_FALSE 274				      		      val += 1					    	for l in range ( 3 , m ) :				  
26 LOAD_FAST 5 ( l )					      		  m -= 1					    	    if i < m - 1 :					  
28 LOAD_FAST 1 ( n )					      	      if ( l < n ) :					    		val += 1					  
30 COMPARE_OP 0 ( < )					      		  for i in range ( m - 1 , k - 1 , - 1 ) :	    return val							  
32 EXTENDED_ARG 1					      		      a [ i ] [ l ] = val			    								  
34 POP_JUMP_IF_FALSE 274				      		      val += 1					    								  
							      		  l += 1					    								  
5 36 SETUP_LOOP 38 ( to 76 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 5 ( l )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 24 ( to 74 )				      								    								  
50 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( val )				      								    								  
54 LOAD_FAST 2 ( a )					      								    								  
56 LOAD_FAST 4 ( k )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 6 ( i )					      								    								  
62 STORE_SUBSCR						      								    								  
							      								    								  
7 64 LOAD_FAST 3 ( val )				      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 3 ( val )					      								    								  
72 JUMP_ABSOLUTE 48					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_FAST 4 ( k )				      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 4 ( k )					      								    								  
							      								    								  
9 84 SETUP_LOOP 42 ( to 128 )				      								    								  
86 LOAD_GLOBAL 0 ( range )				      								    								  
88 LOAD_FAST 4 ( k )					      								    								  
90 LOAD_FAST 0 ( m )					      								    								  
92 CALL_FUNCTION 2					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 28 ( to 126 )				      								    								  
98 STORE_FAST 6 ( i )					      								    								  
							      								    								  
10 100 LOAD_FAST 3 ( val )				      								    								  
102 LOAD_FAST 2 ( a )					      								    								  
104 LOAD_FAST 6 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 1 ( n )					      								    								  
110 LOAD_CONST 1 ( 1 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 STORE_SUBSCR					      								    								  
							      								    								  
11 116 LOAD_FAST 3 ( val )				      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 INPLACE_ADD						      								    								  
122 STORE_FAST 3 ( val )				      								    								  
124 JUMP_ABSOLUTE 96					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
12 >> 128 LOAD_FAST 1 ( n )				      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 INPLACE_SUBTRACT					      								    								  
134 STORE_FAST 1 ( n )					      								    								  
							      								    								  
13 136 LOAD_FAST 4 ( k )				      								    								  
138 LOAD_FAST 0 ( m )					      								    								  
140 COMPARE_OP 0 ( < )					      								    								  
142 POP_JUMP_IF_FALSE 206				      								    								  
							      								    								  
14 144 SETUP_LOOP 52 ( to 198 )				      								    								  
146 LOAD_GLOBAL 0 ( range )				      								    								  
148 LOAD_FAST 1 ( n )					      								    								  
150 LOAD_CONST 1 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 LOAD_FAST 5 ( l )					      								    								  
156 LOAD_CONST 1 ( 1 )					      								    								  
158 BINARY_SUBTRACT					      								    								  
160 LOAD_CONST 3 ( - 1 )				      								    								  
162 CALL_FUNCTION 3					      								    								  
164 GET_ITER						      								    								  
>> 166 FOR_ITER 28 ( to 196 )				      								    								  
168 STORE_FAST 6 ( i )					      								    								  
							      								    								  
15 170 LOAD_FAST 3 ( val )				      								    								  
172 LOAD_FAST 2 ( a )					      								    								  
174 LOAD_FAST 0 ( m )					      								    								  
176 LOAD_CONST 1 ( 1 )					      								    								  
178 BINARY_SUBTRACT					      								    								  
180 BINARY_SUBSCR					      								    								  
182 LOAD_FAST 6 ( i )					      								    								  
184 STORE_SUBSCR					      								    								  
							      								    								  
16 186 LOAD_FAST 3 ( val )				      								    								  
188 LOAD_CONST 1 ( 1 )					      								    								  
190 INPLACE_ADD						      								    								  
192 STORE_FAST 3 ( val )				      								    								  
194 JUMP_ABSOLUTE 166					      								    								  
>> 196 POP_BLOCK					      								    								  
							      								    								  
17 >> 198 LOAD_FAST 0 ( m )				      								    								  
200 LOAD_CONST 1 ( 1 )					      								    								  
202 INPLACE_SUBTRACT					      								    								  
204 STORE_FAST 0 ( m )					      								    								  
							      								    								  
18 >> 206 LOAD_FAST 5 ( l )				      								    								  
208 LOAD_FAST 1 ( n )					      								    								  
210 COMPARE_OP 0 ( < )					      								    								  
212 POP_JUMP_IF_FALSE 16				      								    								  
							      								    								  
19 214 SETUP_LOOP 48 ( to 264 )				      								    								  
216 LOAD_GLOBAL 0 ( range )				      								    								  
218 LOAD_FAST 0 ( m )					      								    								  
220 LOAD_CONST 1 ( 1 )					      								    								  
222 BINARY_SUBTRACT					      								    								  
224 LOAD_FAST 4 ( k )					      								    								  
226 LOAD_CONST 1 ( 1 )					      								    								  
228 BINARY_SUBTRACT					      								    								  
230 LOAD_CONST 3 ( - 1 )				      								    								  
232 CALL_FUNCTION 3					      								    								  
234 GET_ITER						      								    								  
>> 236 FOR_ITER 24 ( to 262 )				      								    								  
238 STORE_FAST 6 ( i )					      								    								  
							      								    								  
20 240 LOAD_FAST 3 ( val )				      								    								  
242 LOAD_FAST 2 ( a )					      								    								  
244 LOAD_FAST 6 ( i )					      								    								  
246 BINARY_SUBSCR					      								    								  
248 LOAD_FAST 5 ( l )					      								    								  
250 STORE_SUBSCR					      								    								  
							      								    								  
21 252 LOAD_FAST 3 ( val )				      								    								  
254 LOAD_CONST 1 ( 1 )					      								    								  
256 INPLACE_ADD						      								    								  
258 STORE_FAST 3 ( val )				      								    								  
260 JUMP_ABSOLUTE 236					      								    								  
>> 262 POP_BLOCK					      								    								  
							      								    								  
22 >> 264 LOAD_FAST 5 ( l )				      								    								  
266 LOAD_CONST 1 ( 1 )					      								    								  
268 INPLACE_ADD						      								    								  
270 STORE_FAST 5 ( l )					      								    								  
272 JUMP_ABSOLUTE 16					      								    								  
>> 274 POP_BLOCK					      								    								  
>> 276 LOAD_CONST 0 ( None )				      								    								  
278 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CONQUER_SET_6_SEARCH_ROW_WISE_COLUMN_WISE_SORTED_2D_AR DIVIDE_CONQUER_SET_6_SEARCH_ROW_WISE_COLUMN_WISE_SORTED_2D_AR DIVIDE_CONQUER_SET_6_SEARCH_ROW_WISE_COLUMN_WISE_SORTED_2D_AR DIVIDE_CONQUER_SET_6_SEARCH_ROW_WISE_COLUMN_WISE_SORTED_2D_AR
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e89d20, file "< def search ( mat , fromRow , toRow , fromCol , toCol , key )  def search ( mat , fromRow , toRow , fromCol , key , toCol ,  script_not_found : None
2 0 LOAD_FAST 1 ( fromRow )				      	  i = fromRow + ( toRow - fromRow ) // 2 ;		    	i = fromRow + ( toRow - fromRow ) // 2			  
2 LOAD_FAST 2 ( toRow )					      	  j = fromCol + ( toCol - fromCol ) // 2 ;		    	j = fromCol + ( toCol - fromCol ) // 2			  
4 LOAD_FAST 1 ( fromRow )				      	  if ( mat [ i ] [ j ] == key ) :			    	if mat [ i ] [ j ] == key :				  
6 BINARY_SUBTRACT					      	      print ( "Found " , key , " at " , i , " " , j ) ;	    	    print ( "Found " , key , " at " , i , " " , j )	  
8 LOAD_CONST 1 ( 2 )					      	  else :						    	elif i != toRow or j != fromCol :			  
10 BINARY_FLOOR_DIVIDE					      	      if ( i != toRow or j != fromCol ) :		    	    search ( mat , fromRow , i , j , toCol , key )	  
12 BINARY_ADD						      		  search ( mat , fromRow , i , j , toCol , key ) ;  	if ( fromRow == toRow ) and ( fromCol + 1 == toCol ) ) :  
14 STORE_FAST 6 ( i )					      	      if ( fromRow == toRow and fromCol + 1 == toCol ) :    	    if ( mat [ fromRow ] [ toCol ] == key ) :		  
							      		  if ( mat [ fromRow ] [ toCol ] == key ) :	    		print ( "Found " , key , " at " , fromRow , " " , 
3 16 LOAD_FAST 3 ( fromCol )				      		      print ( "Found " , key , " at " , fromRow , " 	    if ( mat [ i ] [ j ] < i ) and ( toRow <= 0 ) ) :	  
18 LOAD_FAST 4 ( toCol )				      	      if ( mat [ i ] [ j ] < key ) :			    		if ( toRow - toRow ) >= 0 :			  
20 LOAD_FAST 3 ( fromCol )				      		  if ( i + 1 <= toRow ) :			    		    if ( toRow - toRow ) >= 0 :			  
22 BINARY_SUBTRACT					      		      search ( mat , i + 1 , toRow , fromCol , toCo 			Col = Row ( toRow - i , i , j , toCol , k 
24 LOAD_CONST 1 ( 2 )					      	      else :						    		    else :					  
26 BINARY_FLOOR_DIVIDE					      		  if ( j - 1 >= fromCol ) :			    			Col = Row ( toRow , i , j , toCol , key ) 
28 BINARY_ADD						      		      search ( mat , fromRow , toRow , fromCol , j  	    return None						  
30 STORE_FAST 7 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( mat )				      								    								  
34 LOAD_FAST 6 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 7 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 5 ( key )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 48 LOAD_GLOBAL 0 ( print )				      								    								  
50 LOAD_CONST 2 ( 'Found ' )				      								    								  
52 LOAD_FAST 5 ( key )					      								    								  
54 LOAD_CONST 3 ( ' at ' )				      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 LOAD_CONST 4 ( ' ' )					      								    								  
60 LOAD_FAST 7 ( j )					      								    								  
62 CALL_FUNCTION 6					      								    								  
64 POP_TOP						      								    								  
66 JUMP_FORWARD 174 ( to 242 )				      								    								  
							      								    								  
7 >> 68 LOAD_FAST 6 ( i )				      								    								  
70 LOAD_FAST 2 ( toRow )				      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_TRUE 84					      								    								  
76 LOAD_FAST 7 ( j )					      								    								  
78 LOAD_FAST 3 ( fromCol )				      								    								  
80 COMPARE_OP 3 ( != )					      								    								  
82 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
8 >> 84 LOAD_GLOBAL 1 ( search )			      								    								  
86 LOAD_FAST 0 ( mat )					      								    								  
88 LOAD_FAST 1 ( fromRow )				      								    								  
90 LOAD_FAST 6 ( i )					      								    								  
92 LOAD_FAST 7 ( j )					      								    								  
94 LOAD_FAST 4 ( toCol )				      								    								  
96 LOAD_FAST 5 ( key )					      								    								  
98 CALL_FUNCTION 6					      								    								  
100 POP_TOP						      								    								  
							      								    								  
9 >> 102 LOAD_FAST 1 ( fromRow )			      								    								  
104 LOAD_FAST 2 ( toRow )				      								    								  
106 COMPARE_OP 2 ( == )					      								    								  
108 POP_JUMP_IF_FALSE 156				      								    								  
110 LOAD_FAST 3 ( fromCol )				      								    								  
112 LOAD_CONST 5 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_FAST 4 ( toCol )				      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
10 122 LOAD_FAST 0 ( mat )				      								    								  
124 LOAD_FAST 1 ( fromRow )				      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 4 ( toCol )				      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 5 ( key )					      								    								  
134 COMPARE_OP 2 ( == )					      								    								  
136 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
11 138 LOAD_GLOBAL 0 ( print )				      								    								  
140 LOAD_CONST 2 ( 'Found ' )				      								    								  
142 LOAD_FAST 5 ( key )					      								    								  
144 LOAD_CONST 3 ( ' at ' )				      								    								  
146 LOAD_FAST 1 ( fromRow )				      								    								  
148 LOAD_CONST 4 ( ' ' )				      								    								  
150 LOAD_FAST 4 ( toCol )				      								    								  
152 CALL_FUNCTION 6					      								    								  
154 POP_TOP						      								    								  
							      								    								  
12 >> 156 LOAD_FAST 0 ( mat )				      								    								  
158 LOAD_FAST 6 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_FAST 7 ( j )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_FAST 5 ( key )					      								    								  
168 COMPARE_OP 0 ( < )					      								    								  
170 POP_JUMP_IF_FALSE 208				      								    								  
							      								    								  
13 172 LOAD_FAST 6 ( i )				      								    								  
174 LOAD_CONST 5 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 LOAD_FAST 2 ( toRow )				      								    								  
180 COMPARE_OP 1 ( <= )					      								    								  
182 POP_JUMP_IF_FALSE 242				      								    								  
							      								    								  
14 184 LOAD_GLOBAL 1 ( search )				      								    								  
186 LOAD_FAST 0 ( mat )					      								    								  
188 LOAD_FAST 6 ( i )					      								    								  
190 LOAD_CONST 5 ( 1 )					      								    								  
192 BINARY_ADD						      								    								  
194 LOAD_FAST 2 ( toRow )				      								    								  
196 LOAD_FAST 3 ( fromCol )				      								    								  
198 LOAD_FAST 4 ( toCol )				      								    								  
200 LOAD_FAST 5 ( key )					      								    								  
202 CALL_FUNCTION 6					      								    								  
204 POP_TOP						      								    								  
206 JUMP_FORWARD 34 ( to 242 )				      								    								  
							      								    								  
16 >> 208 LOAD_FAST 7 ( j )				      								    								  
210 LOAD_CONST 5 ( 1 )					      								    								  
212 BINARY_SUBTRACT					      								    								  
214 LOAD_FAST 3 ( fromCol )				      								    								  
216 COMPARE_OP 5 ( >= )					      								    								  
218 POP_JUMP_IF_FALSE 242				      								    								  
							      								    								  
17 220 LOAD_GLOBAL 1 ( search )				      								    								  
222 LOAD_FAST 0 ( mat )					      								    								  
224 LOAD_FAST 1 ( fromRow )				      								    								  
226 LOAD_FAST 2 ( toRow )				      								    								  
228 LOAD_FAST 3 ( fromCol )				      								    								  
230 LOAD_FAST 7 ( j )					      								    								  
232 LOAD_CONST 5 ( 1 )					      								    								  
234 BINARY_SUBTRACT					      								    								  
236 LOAD_FAST 5 ( key )					      								    								  
238 CALL_FUNCTION 6					      								    								  
240 POP_TOP						      								    								  
>> 242 LOAD_CONST 0 ( None )				      								    								  
244 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_TWO_LARGE_NUMBERS_1					      SUM_TWO_LARGE_NUMBERS_1					    SUM_TWO_LARGE_NUMBERS_1					  SUM_TWO_LARGE_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac0e8ddb0, file " def findSum ( str1 , str2 ) :				    def findSum ( str1 , str2 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  if len ( str1 ) > len ( str2 ) :			    	if len ( str1 ) > len ( str2 ) :			  
2 LOAD_FAST 0 ( str1 )					      	      temp = str1					    	    temp = str1						  
4 CALL_FUNCTION 1					      	      str1 = str2					    	    str2 = str2						  
6 LOAD_GLOBAL 0 ( len )					      	      str2 = temp					    	str3 = ""						  
8 LOAD_FAST 1 ( str2 )					      	  str3 = ""						    	n1 = len ( str1 )					  
10 CALL_FUNCTION 1					      	  n1 = len ( str1 )					    	n2 = len ( str2 )					  
12 COMPARE_OP 4 ( > )					      	  n2 = len ( str2 )					    	n2 = len ( str2 )					  
14 POP_JUMP_IF_FALSE 28					      	  diff = n2 - n1					    	diff = n2 - n1						  
							      	  carry = 0						    	carry = 0						  
3 16 LOAD_FAST 0 ( str1 )				      	  for i in range ( n1 - 1 , - 1 , - 1 ) :		    	for i in range ( n1 - 1 , - 1 , - 1 ) :			  
18 STORE_FAST 2 ( temp )				      	      sum = ( ( ord ( str1 [ i ] ) - ord ( '0' ) ) + int (  	    sum = ord ( str1 [ i ] ) - ord ( ord ( str2 [ i + dif 
							      	      str3 = str3 + str ( sum % 10 )			    	    str3 = str3 + str ( sum % 10 )			  
4 20 LOAD_FAST 1 ( str2 )				      	      carry = sum // 10					    	    carry = sum / 10					  
22 STORE_FAST 0 ( str1 )				      	  for i in range ( n2 - n1 - 1 , - 1 , - 1 ) :		    	    carry = sum - 10					  
							      	      sum = ( ( ord ( str2 [ i ] ) - ord ( '0' ) ) + carry  	    carry = str ( ( n1 - 1 ) - 1 ) ) + strry		  
5 24 LOAD_FAST 2 ( temp )				      	      str3 = str3 + str ( sum % 10 )			    	for i in range ( n1 - 1 , - 1 ) :			  
26 STORE_FAST 1 ( str2 )				      	      carry = sum // 10					    	    if strry + str ( strry + str ( strry ) ) + strry	  
							      	  if ( carry ) :					    								  
6 >> 28 LOAD_CONST 1 ( '' )				      	      str3 + str ( carry + '0' )			    								  
30 STORE_FAST 3 ( str3 )				      	  str3 = str3 [ : : - 1 ]				    								  
							      	  return str3						    								  
7 32 LOAD_GLOBAL 0 ( len )				      								    								  
34 LOAD_FAST 0 ( str1 )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 STORE_FAST 4 ( n1 )					      								    								  
							      								    								  
8 40 LOAD_GLOBAL 0 ( len )				      								    								  
42 LOAD_FAST 1 ( str2 )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 5 ( n2 )					      								    								  
							      								    								  
9 48 LOAD_FAST 5 ( n2 )					      								    								  
50 LOAD_FAST 4 ( n1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 STORE_FAST 6 ( diff )				      								    								  
							      								    								  
10 56 LOAD_CONST 2 ( 0 )				      								    								  
58 STORE_FAST 7 ( carry )				      								    								  
							      								    								  
11 60 SETUP_LOOP 100 ( to 162 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 4 ( n1 )					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_CONST 4 ( - 1 )					      								    								  
72 LOAD_CONST 4 ( - 1 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 80 ( to 160 )				      								    								  
80 STORE_FAST 8 ( i )					      								    								  
							      								    								  
12 82 LOAD_GLOBAL 2 ( ord )				      								    								  
84 LOAD_FAST 0 ( str1 )					      								    								  
86 LOAD_FAST 8 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_FUNCTION 1					      								    								  
92 LOAD_GLOBAL 2 ( ord )				      								    								  
94 LOAD_CONST 5 ( '0' )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 LOAD_GLOBAL 3 ( int )				      								    								  
102 LOAD_GLOBAL 2 ( ord )				      								    								  
104 LOAD_FAST 1 ( str2 )				      								    								  
106 LOAD_FAST 8 ( i )					      								    								  
108 LOAD_FAST 6 ( diff )				      								    								  
110 BINARY_ADD						      								    								  
112 BINARY_SUBSCR					      								    								  
114 CALL_FUNCTION 1					      								    								  
116 LOAD_GLOBAL 2 ( ord )				      								    								  
118 LOAD_CONST 5 ( '0' )				      								    								  
120 CALL_FUNCTION 1					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 CALL_FUNCTION 1					      								    								  
126 BINARY_ADD						      								    								  
128 LOAD_FAST 7 ( carry )				      								    								  
130 BINARY_ADD						      								    								  
132 STORE_FAST 9 ( sum )				      								    								  
							      								    								  
13 134 LOAD_FAST 3 ( str3 )				      								    								  
136 LOAD_GLOBAL 4 ( str )				      								    								  
138 LOAD_FAST 9 ( sum )					      								    								  
140 LOAD_CONST 6 ( 10 )					      								    								  
142 BINARY_MODULO					      								    								  
144 CALL_FUNCTION 1					      								    								  
146 BINARY_ADD						      								    								  
148 STORE_FAST 3 ( str3 )				      								    								  
							      								    								  
14 150 LOAD_FAST 9 ( sum )				      								    								  
152 LOAD_CONST 6 ( 10 )					      								    								  
154 BINARY_FLOOR_DIVIDE					      								    								  
156 STORE_FAST 7 ( carry )				      								    								  
158 JUMP_ABSOLUTE 78					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
15 >> 162 SETUP_LOOP 76 ( to 240 )			      								    								  
164 LOAD_GLOBAL 1 ( range )				      								    								  
166 LOAD_FAST 5 ( n2 )					      								    								  
168 LOAD_FAST 4 ( n1 )					      								    								  
170 BINARY_SUBTRACT					      								    								  
172 LOAD_CONST 3 ( 1 )					      								    								  
174 BINARY_SUBTRACT					      								    								  
176 LOAD_CONST 4 ( - 1 )				      								    								  
178 LOAD_CONST 4 ( - 1 )				      								    								  
180 CALL_FUNCTION 3					      								    								  
182 GET_ITER						      								    								  
>> 184 FOR_ITER 52 ( to 238 )				      								    								  
186 STORE_FAST 8 ( i )					      								    								  
							      								    								  
16 188 LOAD_GLOBAL 2 ( ord )				      								    								  
190 LOAD_FAST 1 ( str2 )				      								    								  
192 LOAD_FAST 8 ( i )					      								    								  
194 BINARY_SUBSCR					      								    								  
196 CALL_FUNCTION 1					      								    								  
198 LOAD_GLOBAL 2 ( ord )				      								    								  
200 LOAD_CONST 5 ( '0' )				      								    								  
202 CALL_FUNCTION 1					      								    								  
204 BINARY_SUBTRACT					      								    								  
206 LOAD_FAST 7 ( carry )				      								    								  
208 BINARY_ADD						      								    								  
210 STORE_FAST 9 ( sum )				      								    								  
							      								    								  
17 212 LOAD_FAST 3 ( str3 )				      								    								  
214 LOAD_GLOBAL 4 ( str )				      								    								  
216 LOAD_FAST 9 ( sum )					      								    								  
218 LOAD_CONST 6 ( 10 )					      								    								  
220 BINARY_MODULO					      								    								  
222 CALL_FUNCTION 1					      								    								  
224 BINARY_ADD						      								    								  
226 STORE_FAST 3 ( str3 )				      								    								  
							      								    								  
18 228 LOAD_FAST 9 ( sum )				      								    								  
230 LOAD_CONST 6 ( 10 )					      								    								  
232 BINARY_FLOOR_DIVIDE					      								    								  
234 STORE_FAST 7 ( carry )				      								    								  
236 JUMP_ABSOLUTE 184					      								    								  
>> 238 POP_BLOCK					      								    								  
							      								    								  
19 >> 240 LOAD_FAST 7 ( carry )				      								    								  
242 EXTENDED_ARG 1					      								    								  
244 POP_JUMP_IF_FALSE 262				      								    								  
							      								    								  
20 246 LOAD_FAST 3 ( str3 )				      								    								  
248 LOAD_GLOBAL 4 ( str )				      								    								  
250 LOAD_FAST 7 ( carry )				      								    								  
252 LOAD_CONST 5 ( '0' )				      								    								  
254 BINARY_ADD						      								    								  
256 CALL_FUNCTION 1					      								    								  
258 BINARY_ADD						      								    								  
260 POP_TOP						      								    								  
							      								    								  
21 >> 262 LOAD_FAST 3 ( str3 )				      								    								  
264 LOAD_CONST 0 ( None )				      								    								  
266 LOAD_CONST 0 ( None )				      								    								  
268 LOAD_CONST 4 ( - 1 )				      								    								  
270 BUILD_SLICE 3					      								    								  
272 BINARY_SUBSCR					      								    								  
274 STORE_FAST 3 ( str3 )				      								    								  
							      								    								  
22 276 LOAD_FAST 3 ( str3 )				      								    								  
278 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1	      LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1		    LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1		  LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1
--							      --							    --								  --
Disassembly of <code object maxLen at 0x7fbac0e8d540, file "< def maxLen ( arr , n ) :					    def maxLen ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 BUILD_MAP 0						      	  hash_map = { } ;					    	hash_map = { }						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 2 ( hash_map )				      	  curr_sum = 0 ;					    	curr_sum = 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.test/LARGES
							      	  max_len = 0 ;						    	max_len = 0						  T_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1.py", l
3 4 LOAD_CONST 1 ( 0 )					      	  ending_index = - 1 ;					    	ending_index = - 1					  ine 90, in <module>	  if f_filled(*parameters_se
6 STORE_FAST 3 ( curr_sum )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  t) == f_gold(*parameters_set):   File "/home/ubunt
							      	      if ( arr [ i ] == 0 ) :				    	    if arr [ i ] == 0 :					  u/TransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eva
4 8 LOAD_CONST 1 ( 0 )					      		  arr [ i ] = - 1 ;				    		arr [ i ] = - 1					  l_scripts/dis_sa-python_sa.test/LARGEST_SUBARRAY_W
10 STORE_FAST 4 ( max_len )				      	      else :						    	    else :						  ITH_EQUAL_NUMBER_OF_0S_AND_1S_1.py", line 65, in f
							      		  arr [ i ] = 1 ;				    		arr [ i ] = 1					  _filled     hash_map [ curr_count ] = i NameError:
5 12 LOAD_CONST 2 ( - 1 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				   name 'curr_count' is not defined
14 STORE_FAST 5 ( ending_index )			      	      curr_sum = curr_sum + arr [ i ] ;			    	    curr_sum = curr_sum + arr [ i ]			  
							      	      if ( curr_sum == 0 ) :				    	    if curr_sum == 0 :					  
6 16 SETUP_LOOP 48 ( to 66 )				      		  max_len = i + 1 ;				    		max_len = i + 1					  
18 LOAD_GLOBAL 0 ( range )				      		  ending_index = i ;				    		ending_index = i				  
20 LOAD_CONST 1 ( 0 )					      	      if ( curr_sum + n ) in hash_map :			    	    if curr_sum + n in hash_map :			  
22 LOAD_FAST 1 ( n )					      		  max_len = max ( max_len , i - hash_map [ curr_sum 		max_len = max ( max_len , i - hash_map [ curr_sum 
24 CALL_FUNCTION 2					      	      else :						    	    else :						  
26 GET_ITER						      		  hash_map [ curr_sum ] = i ;			    		hash_map [ curr_count ] = i			  
>> 28 FOR_ITER 34 ( to 64 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 3 , n ) :				  
30 STORE_FAST 6 ( i )					      	      if ( arr [ i ] == - 1 ) :				    	    if arr [ i ] == 0 :					  
							      		  arr [ i ] = 0 ;				    		max_len [ i ] = max ( max_len , i - 1 )		  
7 32 LOAD_FAST 0 ( arr )				      	      else :						    	    else :						  
34 LOAD_FAST 6 ( i )					      		  arr [ i ] = 1 ;				    		max_len [ i ] = count				  
36 BINARY_SUBSCR					      	  print ( ending_index - max_len + 1 , end = " " ) ;	    	print ( " end " + max_len )				  
38 LOAD_CONST 1 ( 0 )					      	  print ( "to" , end = " " ) ;				    	return arr						  
40 COMPARE_OP 2 ( == )					      	  print ( ending_index ) ;				    								  
42 POP_JUMP_IF_FALSE 54					      	  return max_len ;					    								  
							      								    								  
8 44 LOAD_CONST 2 ( - 1 )				      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 6 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
10 >> 54 LOAD_CONST 3 ( 1 )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 6 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 28					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
11 >> 66 SETUP_LOOP 94 ( to 162 )			      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 80 ( to 160 )				      								    								  
80 STORE_FAST 6 ( i )					      								    								  
							      								    								  
12 82 LOAD_FAST 3 ( curr_sum )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 6 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
13 94 LOAD_FAST 3 ( curr_sum )				      								    								  
96 LOAD_CONST 1 ( 0 )					      								    								  
98 COMPARE_OP 2 ( == )					      								    								  
100 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
14 102 LOAD_FAST 6 ( i )				      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 4 ( max_len )				      								    								  
							      								    								  
15 110 LOAD_FAST 6 ( i )				      								    								  
112 STORE_FAST 5 ( ending_index )			      								    								  
							      								    								  
16 >> 114 LOAD_FAST 3 ( curr_sum )			      								    								  
116 LOAD_FAST 1 ( n )					      								    								  
118 BINARY_ADD						      								    								  
120 LOAD_FAST 2 ( hash_map )				      								    								  
122 COMPARE_OP 6 ( in )					      								    								  
124 POP_JUMP_IF_FALSE 150				      								    								  
							      								    								  
17 126 LOAD_GLOBAL 1 ( max )				      								    								  
128 LOAD_FAST 4 ( max_len )				      								    								  
130 LOAD_FAST 6 ( i )					      								    								  
132 LOAD_FAST 2 ( hash_map )				      								    								  
134 LOAD_FAST 3 ( curr_sum )				      								    								  
136 LOAD_FAST 1 ( n )					      								    								  
138 BINARY_ADD						      								    								  
140 BINARY_SUBSCR					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 CALL_FUNCTION 2					      								    								  
146 STORE_FAST 4 ( max_len )				      								    								  
148 JUMP_ABSOLUTE 78					      								    								  
							      								    								  
19 >> 150 LOAD_FAST 6 ( i )				      								    								  
152 LOAD_FAST 2 ( hash_map )				      								    								  
154 LOAD_FAST 3 ( curr_sum )				      								    								  
156 STORE_SUBSCR					      								    								  
158 JUMP_ABSOLUTE 78					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
20 >> 162 SETUP_LOOP 48 ( to 212 )			      								    								  
164 LOAD_GLOBAL 0 ( range )				      								    								  
166 LOAD_CONST 1 ( 0 )					      								    								  
168 LOAD_FAST 1 ( n )					      								    								  
170 CALL_FUNCTION 2					      								    								  
172 GET_ITER						      								    								  
>> 174 FOR_ITER 34 ( to 210 )				      								    								  
176 STORE_FAST 6 ( i )					      								    								  
							      								    								  
21 178 LOAD_FAST 0 ( arr )				      								    								  
180 LOAD_FAST 6 ( i )					      								    								  
182 BINARY_SUBSCR					      								    								  
184 LOAD_CONST 2 ( - 1 )				      								    								  
186 COMPARE_OP 2 ( == )					      								    								  
188 POP_JUMP_IF_FALSE 200				      								    								  
							      								    								  
22 190 LOAD_CONST 1 ( 0 )				      								    								  
192 LOAD_FAST 0 ( arr )					      								    								  
194 LOAD_FAST 6 ( i )					      								    								  
196 STORE_SUBSCR					      								    								  
198 JUMP_ABSOLUTE 174					      								    								  
							      								    								  
24 >> 200 LOAD_CONST 3 ( 1 )				      								    								  
202 LOAD_FAST 0 ( arr )					      								    								  
204 LOAD_FAST 6 ( i )					      								    								  
206 STORE_SUBSCR					      								    								  
208 JUMP_ABSOLUTE 174					      								    								  
>> 210 POP_BLOCK					      								    								  
							      								    								  
25 >> 212 LOAD_GLOBAL 2 ( print )			      								    								  
214 LOAD_FAST 5 ( ending_index )			      								    								  
216 LOAD_FAST 4 ( max_len )				      								    								  
218 BINARY_SUBTRACT					      								    								  
220 LOAD_CONST 3 ( 1 )					      								    								  
222 BINARY_ADD						      								    								  
224 LOAD_CONST 4 ( ' ' )				      								    								  
226 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
228 CALL_FUNCTION_KW 2					      								    								  
230 POP_TOP						      								    								  
							      								    								  
26 232 LOAD_GLOBAL 2 ( print )				      								    								  
234 LOAD_CONST 6 ( 'to' )				      								    								  
236 LOAD_CONST 4 ( ' ' )				      								    								  
238 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
240 CALL_FUNCTION_KW 2					      								    								  
242 POP_TOP						      								    								  
							      								    								  
27 244 LOAD_GLOBAL 2 ( print )				      								    								  
246 LOAD_FAST 5 ( ending_index )			      								    								  
248 CALL_FUNCTION 1					      								    								  
250 POP_TOP						      								    								  
							      								    								  
28 252 LOAD_FAST 4 ( max_len )				      								    								  
254 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_BITONIC_SUBARRAY				      MAXIMUM_SUM_BITONIC_SUBARRAY				    MAXIMUM_SUM_BITONIC_SUBARRAY				  MAXIMUM_SUM_BITONIC_SUBARRAY
--							      --							    --								  --
Disassembly of <code object maxSumBitonicSubArr at 0x7fbac0e8 def maxSumBitonicSubArr ( arr , n ) :			    def maxSumBitonicSubArr ( arr , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 0 ( None )				      	  msis = [ None ] * n					    	msis = [ None ] * n					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  msds = [ None ] * n					    	msds = [ None ] * n					  _sa.test/MAXIMUM_SUM_BITONIC_SUBARRAY.py", line 56
4 LOAD_FAST 1 ( n )					      	  max_sum = 0						    	max_sum = 0						       return ( ds [ i ] - ds [ i + 1 ] )     ^ Synt
6 BINARY_MULTIPLY					      	  msis [ 0 ] = arr [ 0 ]				    	msis [ 0 ] = arr [ 0 ]					  axError: 'return' outside function
8 STORE_FAST 2 ( msis )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
							      	      if ( arr [ i ] > arr [ i - 1 ] ) :		    	    if arr [ i ] > arr [ i - 1 ] :			  
3 10 LOAD_CONST 0 ( None )				      		  msis [ i ] = msis [ i - 1 ] + arr [ i ]	    		msis [ i ] = msis [ i - 1 ] + arr [ i ]		  
12 BUILD_LIST 1						      	      else :						    	    else :						  
14 LOAD_FAST 1 ( n )					      		  msis [ i ] = arr [ i ]			    		msis [ i ] = arr [ i ]				  
16 BINARY_MULTIPLY					      	  msds [ n - 1 ] = arr [ n - 1 ]			    	if arr [ n - 1 ] < msds [ n - 1 ] :			  
18 STORE_FAST 3 ( msds )				      	  for i in range ( n - 2 , - 1 , - 1 ) :		    	    for i in range ( n - 2 , - 1 , - 1 ) :		  
							      	      if ( arr [ i ] > arr [ i + 1 ] ) :		    		ds [ i ] = arr [ i ] + arr [ i + 1 ]		  
4 20 LOAD_CONST 1 ( 0 )					      		  msds [ i ] = msds [ i + 1 ] + arr [ i ]	    	if ds < max ( msds ) :					  
22 STORE_FAST 4 ( max_sum )				      	      else :						    	    msds [ i ] = msds [ i + 1 ] + arr [ i - 1 ]		  
							      		  msds [ i ] = arr [ i ]			    for i in range ( n - 2 , - 1 ) :				  
5 24 LOAD_FAST 0 ( arr )				      	  for i in range ( n ) :				    	if ds [ i ] < msds [ i + 1 ] < max_sum :		  
26 LOAD_CONST 1 ( 0 )					      	      if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ]  	    return ( ds [ i ] - ds [ i + 1 ] )			  
28 BINARY_SUBSCR					      		  max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] ) return ( ds , nsis )					  
30 LOAD_FAST 2 ( msis )					      	  return max_sum					    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 SETUP_LOOP 76 ( to 114 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 62 ( to 112 )				      								    								  
50 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 5 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( msis )				      								    								  
74 LOAD_FAST 5 ( i )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 5 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 2 ( msis )					      								    								  
92 LOAD_FAST 5 ( i )					      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 48					      								    								  
							      								    								  
10 >> 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 5 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 2 ( msis )				      								    								  
106 LOAD_FAST 5 ( i )					      								    								  
108 STORE_SUBSCR					      								    								  
110 JUMP_ABSOLUTE 48					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
11 >> 114 LOAD_FAST 0 ( arr )				      								    								  
116 LOAD_FAST 1 ( n )					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 3 ( msds )				      								    								  
126 LOAD_FAST 1 ( n )					      								    								  
128 LOAD_CONST 2 ( 1 )					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 STORE_SUBSCR					      								    								  
							      								    								  
12 134 SETUP_LOOP 82 ( to 218 )				      								    								  
136 LOAD_GLOBAL 0 ( range )				      								    								  
138 LOAD_FAST 1 ( n )					      								    								  
140 LOAD_CONST 3 ( 2 )					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 LOAD_CONST 4 ( - 1 )				      								    								  
146 LOAD_CONST 4 ( - 1 )				      								    								  
148 CALL_FUNCTION 3					      								    								  
150 GET_ITER						      								    								  
>> 152 FOR_ITER 62 ( to 216 )				      								    								  
154 STORE_FAST 5 ( i )					      								    								  
							      								    								  
13 156 LOAD_FAST 0 ( arr )				      								    								  
158 LOAD_FAST 5 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_FAST 0 ( arr )					      								    								  
164 LOAD_FAST 5 ( i )					      								    								  
166 LOAD_CONST 2 ( 1 )					      								    								  
168 BINARY_ADD						      								    								  
170 BINARY_SUBSCR					      								    								  
172 COMPARE_OP 4 ( > )					      								    								  
174 POP_JUMP_IF_FALSE 202				      								    								  
							      								    								  
14 176 LOAD_FAST 3 ( msds )				      								    								  
178 LOAD_FAST 5 ( i )					      								    								  
180 LOAD_CONST 2 ( 1 )					      								    								  
182 BINARY_ADD						      								    								  
184 BINARY_SUBSCR					      								    								  
186 LOAD_FAST 0 ( arr )					      								    								  
188 LOAD_FAST 5 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 BINARY_ADD						      								    								  
194 LOAD_FAST 3 ( msds )				      								    								  
196 LOAD_FAST 5 ( i )					      								    								  
198 STORE_SUBSCR					      								    								  
200 JUMP_ABSOLUTE 152					      								    								  
							      								    								  
16 >> 202 LOAD_FAST 0 ( arr )				      								    								  
204 LOAD_FAST 5 ( i )					      								    								  
206 BINARY_SUBSCR					      								    								  
208 LOAD_FAST 3 ( msds )				      								    								  
210 LOAD_FAST 5 ( i )					      								    								  
212 STORE_SUBSCR					      								    								  
214 JUMP_ABSOLUTE 152					      								    								  
>> 216 POP_BLOCK					      								    								  
							      								    								  
17 >> 218 SETUP_LOOP 68 ( to 288 )			      								    								  
220 LOAD_GLOBAL 0 ( range )				      								    								  
222 LOAD_FAST 1 ( n )					      								    								  
224 CALL_FUNCTION 1					      								    								  
226 GET_ITER						      								    								  
>> 228 FOR_ITER 56 ( to 286 )				      								    								  
230 STORE_FAST 5 ( i )					      								    								  
							      								    								  
18 232 LOAD_FAST 4 ( max_sum )				      								    								  
234 LOAD_FAST 2 ( msis )				      								    								  
236 LOAD_FAST 5 ( i )					      								    								  
238 BINARY_SUBSCR					      								    								  
240 LOAD_FAST 3 ( msds )				      								    								  
242 LOAD_FAST 5 ( i )					      								    								  
244 BINARY_SUBSCR					      								    								  
246 BINARY_ADD						      								    								  
248 LOAD_FAST 0 ( arr )					      								    								  
250 LOAD_FAST 5 ( i )					      								    								  
252 BINARY_SUBSCR					      								    								  
254 BINARY_SUBTRACT					      								    								  
256 COMPARE_OP 0 ( < )					      								    								  
258 POP_JUMP_IF_FALSE 228				      								    								  
							      								    								  
19 260 LOAD_FAST 2 ( msis )				      								    								  
262 LOAD_FAST 5 ( i )					      								    								  
264 BINARY_SUBSCR					      								    								  
266 LOAD_FAST 3 ( msds )				      								    								  
268 LOAD_FAST 5 ( i )					      								    								  
270 BINARY_SUBSCR					      								    								  
272 BINARY_ADD						      								    								  
274 LOAD_FAST 0 ( arr )					      								    								  
276 LOAD_FAST 5 ( i )					      								    								  
278 BINARY_SUBSCR					      								    								  
280 BINARY_SUBTRACT					      								    								  
282 STORE_FAST 4 ( max_sum )				      								    								  
284 JUMP_ABSOLUTE 228					      								    								  
>> 286 POP_BLOCK					      								    								  
							      								    								  
20 >> 288 LOAD_FAST 4 ( max_sum )			      								    								  
290 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		      COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		    COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		  COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1
--							      --							    --								  --
Disassembly of <code object countPS at 0x7fbac0e8d540, file " def countPS ( i , j ) :					    def countPS ( i , j ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( i )					      	  if ( i >= n or j < 0 ) :				    	if i >= n or j < 0 :					  
2 LOAD_GLOBAL 0 ( n )					      	      return 0						    	    return 0						  
4 COMPARE_OP 5 ( >= )					      	  if ( dp [ i ] [ j ] != - 1 ) :			    	if dp [ i ] [ j ] != - 1 :				  
6 POP_JUMP_IF_TRUE 16					      	      return dp [ i ] [ j ]				    	    return dp [ i ] [ j ]				  
8 LOAD_FAST 1 ( j )					      	  if ( abs ( i - j ) == 1 ) :				    	if abs ( i - j ) == 1 :					  
10 LOAD_CONST 1 ( 0 )					      	      if ( str [ i ] == str [ j ] ) :			    	    if str [ i ] == str [ j ] :				  
12 COMPARE_OP 0 ( < )					      		  dp [ i ] [ j ] = 3				    		dp [ i ] [ j ] = 3				  
14 POP_JUMP_IF_FALSE 20					      		  return dp [ i ] [ j ]				    		return dp [ i ] [ j ]				  
							      	      else :						    	    else :						  
3 >> 16 LOAD_CONST 1 ( 0 )				      		  dp [ i ] [ j ] = 2				    		dp [ i ] [ j ] = 2				  
18 RETURN_VALUE						      		  return dp [ i ] [ j ]				    		return dp [ i ] [ j ]				  
							      	  if ( i == j ) :					    	if i == j :						  
4 >> 20 LOAD_GLOBAL 1 ( dp )				      	      dp [ 1 ] [ j ] = 1				    	    dp [ 1 ] [ j ] = 1					  
22 LOAD_FAST 0 ( i )					      	      return dp [ 1 ] [ j ]				    	    return dp [ 1 ] [ j ]				  
24 BINARY_SUBSCR					      	  elif ( str [ i ] == str [ j ] ) :			    	if str [ i ] == str [ j ] :				  
26 LOAD_FAST 1 ( j )					      	      dp [ i ] [ j ] = ( countPS ( i + 1 , j ) + countPS (  	    dp [ i ] [ j ] = 0					  
28 BINARY_SUBSCR					      	      return dp [ i ] [ j ]				    	    dp [ i ] [ j ] = 0					  
30 LOAD_CONST 2 ( - 1 )					      	  else :						    return dp							  
32 COMPARE_OP 3 ( != )					      	      dp [ i ] [ j ] = ( countPS ( i + 1 , j ) + countPS (  								  
34 POP_JUMP_IF_FALSE 48					      	      return dp [ i ] [ j ]				    								  
							      								    								  
5 36 LOAD_GLOBAL 1 ( dp )				      								    								  
38 LOAD_FAST 0 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 1 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
6 >> 48 LOAD_GLOBAL 2 ( abs )				      								    								  
50 LOAD_FAST 0 ( i )					      								    								  
52 LOAD_FAST 1 ( j )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
7 64 LOAD_GLOBAL 3 ( str )				      								    								  
66 LOAD_FAST 0 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_GLOBAL 3 ( str )				      								    								  
72 LOAD_FAST 1 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
8 80 LOAD_CONST 4 ( 3 )					      								    								  
82 LOAD_GLOBAL 1 ( dp )					      								    								  
84 LOAD_FAST 0 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 1 ( j )					      								    								  
90 STORE_SUBSCR						      								    								  
							      								    								  
9 92 LOAD_GLOBAL 1 ( dp )				      								    								  
94 LOAD_FAST 0 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 1 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 RETURN_VALUE					      								    								  
							      								    								  
11 >> 104 LOAD_CONST 5 ( 2 )				      								    								  
106 LOAD_GLOBAL 1 ( dp )				      								    								  
108 LOAD_FAST 0 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 1 ( j )					      								    								  
114 STORE_SUBSCR					      								    								  
							      								    								  
12 116 LOAD_GLOBAL 1 ( dp )				      								    								  
118 LOAD_FAST 0 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 1 ( j )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 RETURN_VALUE					      								    								  
							      								    								  
13 >> 128 LOAD_FAST 0 ( i )				      								    								  
130 LOAD_FAST 1 ( j )					      								    								  
132 COMPARE_OP 2 ( == )					      								    								  
134 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
14 136 LOAD_CONST 3 ( 1 )				      								    								  
138 LOAD_GLOBAL 1 ( dp )				      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_FAST 1 ( j )					      								    								  
146 STORE_SUBSCR					      								    								  
							      								    								  
15 148 LOAD_GLOBAL 1 ( dp )				      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 1 ( j )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 RETURN_VALUE					      								    								  
							      								    								  
16 >> 160 LOAD_GLOBAL 3 ( str )				      								    								  
162 LOAD_FAST 0 ( i )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_GLOBAL 3 ( str )				      								    								  
168 LOAD_FAST 1 ( j )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 COMPARE_OP 2 ( == )					      								    								  
174 POP_JUMP_IF_FALSE 228				      								    								  
							      								    								  
17 176 LOAD_GLOBAL 4 ( countPS )			      								    								  
178 LOAD_FAST 0 ( i )					      								    								  
180 LOAD_CONST 3 ( 1 )					      								    								  
182 BINARY_ADD						      								    								  
184 LOAD_FAST 1 ( j )					      								    								  
186 CALL_FUNCTION 2					      								    								  
188 LOAD_GLOBAL 4 ( countPS )				      								    								  
190 LOAD_FAST 0 ( i )					      								    								  
192 LOAD_FAST 1 ( j )					      								    								  
194 LOAD_CONST 3 ( 1 )					      								    								  
196 BINARY_SUBTRACT					      								    								  
198 CALL_FUNCTION 2					      								    								  
200 BINARY_ADD						      								    								  
202 LOAD_CONST 3 ( 1 )					      								    								  
204 BINARY_ADD						      								    								  
206 LOAD_GLOBAL 1 ( dp )				      								    								  
208 LOAD_FAST 0 ( i )					      								    								  
210 BINARY_SUBSCR					      								    								  
212 LOAD_FAST 1 ( j )					      								    								  
214 STORE_SUBSCR					      								    								  
							      								    								  
18 216 LOAD_GLOBAL 1 ( dp )				      								    								  
218 LOAD_FAST 0 ( i )					      								    								  
220 BINARY_SUBSCR					      								    								  
222 LOAD_FAST 1 ( j )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 RETURN_VALUE					      								    								  
							      								    								  
20 >> 228 LOAD_GLOBAL 4 ( countPS )			      								    								  
230 LOAD_FAST 0 ( i )					      								    								  
232 LOAD_CONST 3 ( 1 )					      								    								  
234 BINARY_ADD						      								    								  
236 LOAD_FAST 1 ( j )					      								    								  
238 CALL_FUNCTION 2					      								    								  
240 LOAD_GLOBAL 4 ( countPS )				      								    								  
242 LOAD_FAST 0 ( i )					      								    								  
244 LOAD_FAST 1 ( j )					      								    								  
246 LOAD_CONST 3 ( 1 )					      								    								  
248 BINARY_SUBTRACT					      								    								  
250 CALL_FUNCTION 2					      								    								  
252 BINARY_ADD						      								    								  
254 LOAD_GLOBAL 4 ( countPS )				      								    								  
256 LOAD_FAST 0 ( i )					      								    								  
258 LOAD_CONST 3 ( 1 )					      								    								  
260 BINARY_ADD						      								    								  
262 LOAD_FAST 1 ( j )					      								    								  
264 LOAD_CONST 3 ( 1 )					      								    								  
266 BINARY_SUBTRACT					      								    								  
268 CALL_FUNCTION 2					      								    								  
270 BINARY_SUBTRACT					      								    								  
272 LOAD_GLOBAL 1 ( dp )				      								    								  
274 LOAD_FAST 0 ( i )					      								    								  
276 BINARY_SUBSCR					      								    								  
278 LOAD_FAST 1 ( j )					      								    								  
280 STORE_SUBSCR					      								    								  
							      								    								  
21 282 LOAD_GLOBAL 1 ( dp )				      								    								  
284 LOAD_FAST 0 ( i )					      								    								  
286 BINARY_SUBSCR					      								    								  
288 LOAD_FAST 1 ( j )					      								    								  
290 BINARY_SUBSCR					      								    								  
292 RETURN_VALUE					      								    								  
294 LOAD_CONST 0 ( None )				      								    								  
296 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_STRICT_BITONIC_SUBSEQUENCE		      LENGTH_LONGEST_STRICT_BITONIC_SUBSEQUENCE			    LENGTH_LONGEST_STRICT_BITONIC_SUBSEQUENCE			  LENGTH_LONGEST_STRICT_BITONIC_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object longLenStrictBitonicSub at 0x7fba def longLenStrictBitonicSub ( arr , n ) :			    def longLenStrictBitonicSub ( arr , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  inc , dcr = dict ( ) , dict ( )			    	inc , dcr = dict ( ) , dict ( )				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n		    	len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n		  _sa.test/LENGTH_LONGEST_STRICT_BITONIC_SUBSEQUENCE
4 LOAD_GLOBAL 0 ( dict )				      	  longLen = 0						    	longLen = 0						  .py", line 52	    return len_Len     ^ SyntaxError
6 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  : 'return' outside function
8 ROT_TWO						      	      len = 0						    	    len = 0						  
10 STORE_FAST 2 ( inc )					      	      if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :	    	    if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :	  
12 STORE_FAST 3 ( dcr )					      		  len = inc.get ( arr [ i ] - 1 )		    		len = inc.get ( arr [ i ] - 1 )			  
							      	      inc [ arr [ i ] ] = len_inc [ i ] = len + 1	    	    inc [ arr [ i ] ] = len + 1				  
3 14 LOAD_CONST 1 ( 0 )					      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
16 BUILD_LIST 1						      	      len = 0						    	    len = 0						  
18 LOAD_FAST 1 ( n )					      	      if dcr.get ( arr [ i ] - 1 ) in dcr.values ( ) :	    	    if dcr.get ( arr [ i ] - 1 ) in n :			  
20 BINARY_MULTIPLY					      		  len = dcr.get ( arr [ i ] - 1 )		    		if dcr.get ( arr [ i ] - 1 ) in dcLen :		  
22 LOAD_CONST 1 ( 0 )					      	      dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1	    		    if len ( arr [ i ] - 1 ) in range ( 0 , len ( 
24 BUILD_LIST 1						      	  for i in range ( n ) :				    			len_inc [ i ] = len_r [ i ] + 1		  
26 LOAD_FAST 1 ( n )					      	      if longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) :  return len_Len						  
28 BINARY_MULTIPLY					      		  longLen = len_inc [ i ] + len_dcr [ i ] - 1	    								  
30 ROT_TWO						      	  return longLen					    								  
32 STORE_FAST 4 ( len_inc )				      								    								  
34 STORE_FAST 5 ( len_dcr )				      								    								  
							      								    								  
4 36 LOAD_CONST 1 ( 0 )					      								    								  
38 STORE_FAST 6 ( longLen )				      								    								  
							      								    								  
5 40 SETUP_LOOP 88 ( to 130 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 76 ( to 128 )				      								    								  
52 STORE_FAST 7 ( i )					      								    								  
							      								    								  
6 54 LOAD_CONST 1 ( 0 )					      								    								  
56 STORE_FAST 8 ( len )					      								    								  
							      								    								  
7 58 LOAD_FAST 2 ( inc )				      								    								  
60 LOAD_METHOD 2 ( get )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 7 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 CALL_METHOD 1					      								    								  
74 LOAD_FAST 2 ( inc )					      								    								  
76 LOAD_METHOD 3 ( values )				      								    								  
78 CALL_METHOD 0					      								    								  
80 COMPARE_OP 6 ( in )					      								    								  
82 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
8 84 LOAD_FAST 2 ( inc )				      								    								  
86 LOAD_METHOD 2 ( get )				      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 7 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 CALL_METHOD 1					      								    								  
100 STORE_FAST 8 ( len )				      								    								  
							      								    								  
9 >> 102 LOAD_FAST 8 ( len )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 DUP_TOP						      								    								  
110 LOAD_FAST 2 ( inc )					      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 7 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 STORE_SUBSCR					      								    								  
120 LOAD_FAST 4 ( len_inc )				      								    								  
122 LOAD_FAST 7 ( i )					      								    								  
124 STORE_SUBSCR					      								    								  
126 JUMP_ABSOLUTE 50					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
10 >> 130 SETUP_LOOP 96 ( to 228 )			      								    								  
132 LOAD_GLOBAL 1 ( range )				      								    								  
134 LOAD_FAST 1 ( n )					      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 LOAD_CONST 3 ( - 1 )				      								    								  
142 LOAD_CONST 3 ( - 1 )				      								    								  
144 CALL_FUNCTION 3					      								    								  
146 GET_ITER						      								    								  
>> 148 FOR_ITER 76 ( to 226 )				      								    								  
150 STORE_FAST 7 ( i )					      								    								  
							      								    								  
11 152 LOAD_CONST 1 ( 0 )				      								    								  
154 STORE_FAST 8 ( len )				      								    								  
							      								    								  
12 156 LOAD_FAST 3 ( dcr )				      								    								  
158 LOAD_METHOD 2 ( get )				      								    								  
160 LOAD_FAST 0 ( arr )					      								    								  
162 LOAD_FAST 7 ( i )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_CONST 2 ( 1 )					      								    								  
168 BINARY_SUBTRACT					      								    								  
170 CALL_METHOD 1					      								    								  
172 LOAD_FAST 3 ( dcr )					      								    								  
174 LOAD_METHOD 3 ( values )				      								    								  
176 CALL_METHOD 0					      								    								  
178 COMPARE_OP 6 ( in )					      								    								  
180 POP_JUMP_IF_FALSE 200				      								    								  
							      								    								  
13 182 LOAD_FAST 3 ( dcr )				      								    								  
184 LOAD_METHOD 2 ( get )				      								    								  
186 LOAD_FAST 0 ( arr )					      								    								  
188 LOAD_FAST 7 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_CONST 2 ( 1 )					      								    								  
194 BINARY_SUBTRACT					      								    								  
196 CALL_METHOD 1					      								    								  
198 STORE_FAST 8 ( len )				      								    								  
							      								    								  
14 >> 200 LOAD_FAST 8 ( len )				      								    								  
202 LOAD_CONST 2 ( 1 )					      								    								  
204 BINARY_ADD						      								    								  
206 DUP_TOP						      								    								  
208 LOAD_FAST 3 ( dcr )					      								    								  
210 LOAD_FAST 0 ( arr )					      								    								  
212 LOAD_FAST 7 ( i )					      								    								  
214 BINARY_SUBSCR					      								    								  
216 STORE_SUBSCR					      								    								  
218 LOAD_FAST 5 ( len_dcr )				      								    								  
220 LOAD_FAST 7 ( i )					      								    								  
222 STORE_SUBSCR					      								    								  
224 JUMP_ABSOLUTE 148					      								    								  
>> 226 POP_BLOCK					      								    								  
							      								    								  
15 >> 228 SETUP_LOOP 60 ( to 290 )			      								    								  
230 LOAD_GLOBAL 1 ( range )				      								    								  
232 LOAD_FAST 1 ( n )					      								    								  
234 CALL_FUNCTION 1					      								    								  
236 GET_ITER						      								    								  
>> 238 FOR_ITER 48 ( to 288 )				      								    								  
240 STORE_FAST 7 ( i )					      								    								  
							      								    								  
16 242 LOAD_FAST 6 ( longLen )				      								    								  
244 LOAD_FAST 4 ( len_inc )				      								    								  
246 LOAD_FAST 7 ( i )					      								    								  
248 BINARY_SUBSCR					      								    								  
250 LOAD_FAST 5 ( len_dcr )				      								    								  
252 LOAD_FAST 7 ( i )					      								    								  
254 BINARY_SUBSCR					      								    								  
256 BINARY_ADD						      								    								  
258 LOAD_CONST 2 ( 1 )					      								    								  
260 BINARY_SUBTRACT					      								    								  
262 COMPARE_OP 0 ( < )					      								    								  
264 POP_JUMP_IF_FALSE 238				      								    								  
							      								    								  
17 266 LOAD_FAST 4 ( len_inc )				      								    								  
268 LOAD_FAST 7 ( i )					      								    								  
270 BINARY_SUBSCR					      								    								  
272 LOAD_FAST 5 ( len_dcr )				      								    								  
274 LOAD_FAST 7 ( i )					      								    								  
276 BINARY_SUBSCR					      								    								  
278 BINARY_ADD						      								    								  
280 LOAD_CONST 2 ( 1 )					      								    								  
282 BINARY_SUBTRACT					      								    								  
284 STORE_FAST 6 ( longLen )				      								    								  
286 JUMP_ABSOLUTE 238					      								    								  
>> 288 POP_BLOCK					      								    								  
							      								    								  
18 >> 290 LOAD_FAST 6 ( longLen )			      								    								  
292 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PR<unk> CT    FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PR<unk> CT    FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PR<unk> CT	  FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PR<unk> CT
--							      --							    --								  --
Disassembly of <code object findTriplets at 0x7fbac0e8de40, f def findTriplets ( x ) :					    def findTriplets ( x ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  fact = [ ] ;						    	fact = [ ]						  
2 STORE_FAST 1 ( fact )					      	  factors = set ( ) ;					    	factors = set ( )					  
							      	  for i in range ( 2 , int ( sqrt ( x ) ) ) :		    	for i in range ( 2 , int ( sqrt ( x ) ) ) :		  
3 4 LOAD_GLOBAL 0 ( set )				      	      if ( x % i == 0 ) :				    	    if x % i == 0 :					  
6 CALL_FUNCTION 0					      		  fact.append ( i ) ;				    		fact.append ( i )				  
8 STORE_FAST 2 ( factors )				      		  if ( x / i != i ) :				    		if x / i != i :					  
							      		      fact.append ( x // i ) ;			    		    fact.append ( x // i )			  
4 10 SETUP_LOOP 98 ( to 110 )				      		  factors.add ( i ) ;				    		factors.add ( i )				  
12 LOAD_GLOBAL 1 ( range )				      		  factors.add ( x // i ) ;			    		factors.add ( x // i )				  
14 LOAD_CONST 1 ( 2 )					      	  found = False ;					    	found = False						  
16 LOAD_GLOBAL 2 ( int )				      	  k = len ( fact ) ;					    	k = len ( fact )					  
18 LOAD_GLOBAL 3 ( sqrt )				      	  for i in range ( k ) :				    	for i in range ( k ) :					  
20 LOAD_FAST 0 ( x )					      	      a = fact [ i ] ;					    	    a = fact [ i ]					  
22 CALL_FUNCTION 1					      	      for j in range ( k ) :				    	    for j in range ( k ) :				  
24 CALL_FUNCTION 1					      		  b = fact [ j ] ;				    		b = fact [ j ]					  
26 CALL_FUNCTION 2					      		  if ( ( a != b ) and ( x % ( a * b ) == 0 ) and (  		if a != b :					  
28 GET_ITER						      		      print ( a , b , x // ( a * b ) ) ;	    		    if b != a * b :				  
>> 30 FOR_ITER 76 ( to 108 )				      		      found = True ;				    			break					  
32 STORE_FAST 3 ( i )					      		      break ;					    	if found != 0 :						  
							      	      if ( found ) :					    	    break						  
5 34 LOAD_FAST 0 ( x )					      		  break ;					    if found != True :						  
36 LOAD_FAST 3 ( i )					      	  if ( not found ) :					    	break							  
38 BINARY_MODULO					      	      print ( "-1" ) ;					    return True							  
40 LOAD_CONST 2 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 46 LOAD_FAST 1 ( fact )				      								    								  
48 LOAD_METHOD 4 ( append )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 CALL_METHOD 1					      								    								  
54 POP_TOP						      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( x )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
8 68 LOAD_FAST 1 ( fact )				      								    								  
70 LOAD_METHOD 4 ( append )				      								    								  
72 LOAD_FAST 0 ( x )					      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 CALL_METHOD 1					      								    								  
80 POP_TOP						      								    								  
							      								    								  
9 >> 82 LOAD_FAST 2 ( factors )				      								    								  
84 LOAD_METHOD 5 ( add )				      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 CALL_METHOD 1					      								    								  
90 POP_TOP						      								    								  
							      								    								  
10 92 LOAD_FAST 2 ( factors )				      								    								  
94 LOAD_METHOD 5 ( add )				      								    								  
96 LOAD_FAST 0 ( x )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_FLOOR_DIVIDE					      								    								  
102 CALL_METHOD 1					      								    								  
104 POP_TOP						      								    								  
106 JUMP_ABSOLUTE 30					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
11 >> 110 LOAD_CONST 3 ( False )			      								    								  
112 STORE_FAST 4 ( found )				      								    								  
							      								    								  
12 114 LOAD_GLOBAL 6 ( len )				      								    								  
116 LOAD_FAST 1 ( fact )				      								    								  
118 CALL_FUNCTION 1					      								    								  
120 STORE_FAST 5 ( k )					      								    								  
							      								    								  
13 122 SETUP_LOOP 154 ( to 278 )			      								    								  
124 LOAD_GLOBAL 1 ( range )				      								    								  
126 LOAD_FAST 5 ( k )					      								    								  
128 CALL_FUNCTION 1					      								    								  
130 GET_ITER						      								    								  
>> 132 FOR_ITER 142 ( to 276 )				      								    								  
134 STORE_FAST 3 ( i )					      								    								  
							      								    								  
14 136 LOAD_FAST 1 ( fact )				      								    								  
138 LOAD_FAST 3 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 STORE_FAST 6 ( a )					      								    								  
							      								    								  
15 144 SETUP_LOOP 122 ( to 268 )			      								    								  
146 LOAD_GLOBAL 1 ( range )				      								    								  
148 LOAD_FAST 5 ( k )					      								    								  
150 CALL_FUNCTION 1					      								    								  
152 GET_ITER						      								    								  
>> 154 FOR_ITER 110 ( to 266 )				      								    								  
156 STORE_FAST 7 ( j )					      								    								  
							      								    								  
16 158 LOAD_FAST 1 ( fact )				      								    								  
160 LOAD_FAST 7 ( j )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 STORE_FAST 8 ( b )					      								    								  
							      								    								  
17 166 LOAD_FAST 6 ( a )				      								    								  
168 LOAD_FAST 8 ( b )					      								    								  
170 COMPARE_OP 3 ( != )					      								    								  
172 POP_JUMP_IF_FALSE 154				      								    								  
174 LOAD_FAST 0 ( x )					      								    								  
176 LOAD_FAST 6 ( a )					      								    								  
178 LOAD_FAST 8 ( b )					      								    								  
180 BINARY_MULTIPLY					      								    								  
182 BINARY_MODULO					      								    								  
184 LOAD_CONST 2 ( 0 )					      								    								  
186 COMPARE_OP 2 ( == )					      								    								  
188 POP_JUMP_IF_FALSE 154				      								    								  
190 LOAD_FAST 0 ( x )					      								    								  
192 LOAD_FAST 6 ( a )					      								    								  
194 LOAD_FAST 8 ( b )					      								    								  
196 BINARY_MULTIPLY					      								    								  
198 BINARY_TRUE_DIVIDE					      								    								  
200 LOAD_FAST 6 ( a )					      								    								  
202 COMPARE_OP 3 ( != )					      								    								  
204 POP_JUMP_IF_FALSE 154				      								    								  
206 LOAD_FAST 0 ( x )					      								    								  
208 LOAD_FAST 6 ( a )					      								    								  
210 LOAD_FAST 8 ( b )					      								    								  
212 BINARY_MULTIPLY					      								    								  
214 BINARY_TRUE_DIVIDE					      								    								  
216 LOAD_FAST 8 ( b )					      								    								  
218 COMPARE_OP 3 ( != )					      								    								  
220 POP_JUMP_IF_FALSE 154				      								    								  
222 LOAD_FAST 0 ( x )					      								    								  
224 LOAD_FAST 6 ( a )					      								    								  
226 LOAD_FAST 8 ( b )					      								    								  
228 BINARY_MULTIPLY					      								    								  
230 BINARY_TRUE_DIVIDE					      								    								  
232 LOAD_CONST 4 ( 1 )					      								    								  
234 COMPARE_OP 3 ( != )					      								    								  
236 POP_JUMP_IF_FALSE 154				      								    								  
							      								    								  
18 238 LOAD_GLOBAL 7 ( print )				      								    								  
240 LOAD_FAST 6 ( a )					      								    								  
242 LOAD_FAST 8 ( b )					      								    								  
244 LOAD_FAST 0 ( x )					      								    								  
246 LOAD_FAST 6 ( a )					      								    								  
248 LOAD_FAST 8 ( b )					      								    								  
250 BINARY_MULTIPLY					      								    								  
252 BINARY_FLOOR_DIVIDE					      								    								  
254 CALL_FUNCTION 3					      								    								  
256 POP_TOP						      								    								  
							      								    								  
19 258 LOAD_CONST 5 ( True )				      								    								  
260 STORE_FAST 4 ( found )				      								    								  
							      								    								  
20 262 BREAK_LOOP					      								    								  
264 JUMP_ABSOLUTE 154					      								    								  
>> 266 POP_BLOCK					      								    								  
							      								    								  
21 >> 268 LOAD_FAST 4 ( found )				      								    								  
270 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
22 272 BREAK_LOOP					      								    								  
274 JUMP_ABSOLUTE 132					      								    								  
>> 276 POP_BLOCK					      								    								  
							      								    								  
23 >> 278 LOAD_FAST 4 ( found )				      								    								  
280 EXTENDED_ARG 1					      								    								  
282 POP_JUMP_IF_TRUE 292				      								    								  
							      								    								  
24 284 LOAD_GLOBAL 7 ( print )				      								    								  
286 LOAD_CONST 6 ( '-1' )				      								    								  
288 CALL_FUNCTION 1					      								    								  
290 POP_TOP						      								    								  
>> 292 LOAD_CONST 0 ( None )				      								    								  
294 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_MATRIX					      MAXIMUM_PATH_SUM_MATRIX					    MAXIMUM_PATH_SUM_MATRIX					  MAXIMUM_PATH_SUM_MATRIX
--							      --							    --								  --
Disassembly of <code object findMaxPath at 0x7fbac0e8bc90, fi def findMaxPath ( mat ) :					    def findMaxPath ( mat ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  res = - 1						    	res = - 1						  
2 STORE_FAST 1 ( res )					      	  for i in range ( M ) :				    	for i in range ( M ) :					  
							      	      res = max ( res , mat [ 0 ] [ i ] )		    	    res = max ( res [ mat [ 0 ] [ i ] ] )		  
3 4 SETUP_LOOP 34 ( to 40 )				      	  for i in range ( 1 , N ) :				    	for i in range ( 1 , N ) :				  
6 LOAD_GLOBAL 0 ( range )				      	      res = - 1						    	    res = - 1						  
8 LOAD_GLOBAL 1 ( M )					      	      for j in range ( M ) :				    	    for j in range ( M ) :				  
10 CALL_FUNCTION 1					      		  if ( j > 0 and j < M - 1 ) :			    		if j > 0 and j < M - 1 :			  
12 GET_ITER						      		      mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ]  		    mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ]  
>> 14 FOR_ITER 22 ( to 38 )				      		  elif ( j > 0 ) :				    	    else :						  
16 STORE_FAST 2 ( i )					      		      mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ]  		if j > 0 and j < 0 :				  
							      		  elif ( j < M - 1 ) :				    		    mat [ i - 1 ] += max ( mat [ i - 1 ] [ j - 1  
4 18 LOAD_GLOBAL 2 ( max )				      		      mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ]  	return res						  
20 LOAD_FAST 1 ( res )					      		  res = max ( mat [ i ] [ j ] , res )		    								  
22 LOAD_FAST 0 ( mat )					      	  return res						    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 STORE_FAST 1 ( res )					      								    								  
36 JUMP_ABSOLUTE 14					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 EXTENDED_ARG 1					      								    								  
42 SETUP_LOOP 292 ( to 336 )				      								    								  
44 LOAD_GLOBAL 0 ( range )				      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 LOAD_GLOBAL 3 ( N )					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 EXTENDED_ARG 1					      								    								  
56 FOR_ITER 276 ( to 334 )				      								    								  
58 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 60 LOAD_CONST 1 ( - 1 )				      								    								  
62 STORE_FAST 1 ( res )					      								    								  
							      								    								  
7 64 EXTENDED_ARG 1					      								    								  
66 SETUP_LOOP 264 ( to 332 )				      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_GLOBAL 1 ( M )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 252 ( to 330 )				      								    								  
78 STORE_FAST 3 ( j )					      								    								  
							      								    								  
8 80 LOAD_FAST 3 ( j )					      								    								  
82 LOAD_CONST 2 ( 0 )					      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_FALSE 178				      								    								  
88 LOAD_FAST 3 ( j )					      								    								  
90 LOAD_GLOBAL 1 ( M )					      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 178				      								    								  
							      								    								  
9 100 LOAD_FAST 0 ( mat )				      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 3 ( j )					      								    								  
108 DUP_TOP_TWO						      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_GLOBAL 2 ( max )				      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 2 ( i )					      								    								  
118 LOAD_CONST 3 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 3 ( j )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_GLOBAL 2 ( max )				      								    								  
130 LOAD_FAST 0 ( mat )					      								    								  
132 LOAD_FAST 2 ( i )					      								    								  
134 LOAD_CONST 3 ( 1 )					      								    								  
136 BINARY_SUBTRACT					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 3 ( j )					      								    								  
142 LOAD_CONST 3 ( 1 )					      								    								  
144 BINARY_SUBTRACT					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_FAST 0 ( mat )					      								    								  
150 LOAD_FAST 2 ( i )					      								    								  
152 LOAD_CONST 3 ( 1 )					      								    								  
154 BINARY_SUBTRACT					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 3 ( j )					      								    								  
160 LOAD_CONST 3 ( 1 )					      								    								  
162 BINARY_ADD						      								    								  
164 BINARY_SUBSCR					      								    								  
166 CALL_FUNCTION 2					      								    								  
168 CALL_FUNCTION 2					      								    								  
170 INPLACE_ADD						      								    								  
172 ROT_THREE						      								    								  
174 STORE_SUBSCR					      								    								  
176 JUMP_FORWARD 132 ( to 310 )				      								    								  
							      								    								  
10 >> 178 LOAD_FAST 3 ( j )				      								    								  
180 LOAD_CONST 2 ( 0 )					      								    								  
182 COMPARE_OP 4 ( > )					      								    								  
184 POP_JUMP_IF_FALSE 242				      								    								  
							      								    								  
11 186 LOAD_FAST 0 ( mat )				      								    								  
188 LOAD_FAST 2 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 3 ( j )					      								    								  
194 DUP_TOP_TWO						      								    								  
196 BINARY_SUBSCR					      								    								  
198 LOAD_GLOBAL 2 ( max )				      								    								  
200 LOAD_FAST 0 ( mat )					      								    								  
202 LOAD_FAST 2 ( i )					      								    								  
204 LOAD_CONST 3 ( 1 )					      								    								  
206 BINARY_SUBTRACT					      								    								  
208 BINARY_SUBSCR					      								    								  
210 LOAD_FAST 3 ( j )					      								    								  
212 BINARY_SUBSCR					      								    								  
214 LOAD_FAST 0 ( mat )					      								    								  
216 LOAD_FAST 2 ( i )					      								    								  
218 LOAD_CONST 3 ( 1 )					      								    								  
220 BINARY_SUBTRACT					      								    								  
222 BINARY_SUBSCR					      								    								  
224 LOAD_FAST 3 ( j )					      								    								  
226 LOAD_CONST 3 ( 1 )					      								    								  
228 BINARY_SUBTRACT					      								    								  
230 BINARY_SUBSCR					      								    								  
232 CALL_FUNCTION 2					      								    								  
234 INPLACE_ADD						      								    								  
236 ROT_THREE						      								    								  
238 STORE_SUBSCR					      								    								  
240 JUMP_FORWARD 68 ( to 310 )				      								    								  
							      								    								  
12 >> 242 LOAD_FAST 3 ( j )				      								    								  
244 LOAD_GLOBAL 1 ( M )					      								    								  
246 LOAD_CONST 3 ( 1 )					      								    								  
248 BINARY_SUBTRACT					      								    								  
250 COMPARE_OP 0 ( < )					      								    								  
252 EXTENDED_ARG 1					      								    								  
254 POP_JUMP_IF_FALSE 310				      								    								  
							      								    								  
13 256 LOAD_FAST 0 ( mat )				      								    								  
258 LOAD_FAST 2 ( i )					      								    								  
260 BINARY_SUBSCR					      								    								  
262 LOAD_FAST 3 ( j )					      								    								  
264 DUP_TOP_TWO						      								    								  
266 BINARY_SUBSCR					      								    								  
268 LOAD_GLOBAL 2 ( max )				      								    								  
270 LOAD_FAST 0 ( mat )					      								    								  
272 LOAD_FAST 2 ( i )					      								    								  
274 LOAD_CONST 3 ( 1 )					      								    								  
276 BINARY_SUBTRACT					      								    								  
278 BINARY_SUBSCR					      								    								  
280 LOAD_FAST 3 ( j )					      								    								  
282 BINARY_SUBSCR					      								    								  
284 LOAD_FAST 0 ( mat )					      								    								  
286 LOAD_FAST 2 ( i )					      								    								  
288 LOAD_CONST 3 ( 1 )					      								    								  
290 BINARY_SUBTRACT					      								    								  
292 BINARY_SUBSCR					      								    								  
294 LOAD_FAST 3 ( j )					      								    								  
296 LOAD_CONST 3 ( 1 )					      								    								  
298 BINARY_ADD						      								    								  
300 BINARY_SUBSCR					      								    								  
302 CALL_FUNCTION 2					      								    								  
304 INPLACE_ADD						      								    								  
306 ROT_THREE						      								    								  
308 STORE_SUBSCR					      								    								  
							      								    								  
14 >> 310 LOAD_GLOBAL 2 ( max )				      								    								  
312 LOAD_FAST 0 ( mat )					      								    								  
314 LOAD_FAST 2 ( i )					      								    								  
316 BINARY_SUBSCR					      								    								  
318 LOAD_FAST 3 ( j )					      								    								  
320 BINARY_SUBSCR					      								    								  
322 LOAD_FAST 1 ( res )					      								    								  
324 CALL_FUNCTION 2					      								    								  
326 STORE_FAST 1 ( res )				      								    								  
328 JUMP_ABSOLUTE 76					      								    								  
>> 330 POP_BLOCK					      								    								  
>> 332 JUMP_ABSOLUTE 54					      								    								  
>> 334 POP_BLOCK					      								    								  
							      								    								  
15 >> 336 LOAD_FAST 1 ( res )				      								    								  
338 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_ON_ARRAY_WITH_DISAPPEARING_AND_REAPPEARING_ELEMENTS   QUERIES_ON_ARRAY_WITH_DISAPPEARING_AND_REAPPEARING_ELEMENTS   QUERIES_ON_ARRAY_WITH_DISAPPEARING_AND_REAPPEARING_ELEMENTS	  QUERIES_ON_ARRAY_WITH_DISAPPEARING_AND_REAPPEARING_ELEMENTS
--							      --							    --								  --
Disassembly of <code object PerformQueries at 0x7fbac0e8bc90, def PerformQueries ( a , vec ) :				    def PerformQueries ( a , vec ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  ans = [ ] ;						    	ans = [ ]						  
2 STORE_FAST 2 ( ans )					      	  n = len ( a ) - 1 ;					    	n = len ( a ) - 1					  
							      	  q = len ( vec ) ;					    	q = len ( vec )						  
3 4 LOAD_GLOBAL 0 ( len )				      	  for i in range ( q ) :				    	for i in range ( q ) :					  
6 LOAD_FAST 0 ( a )					      	      t = vec [ i ] [ 0 ] ;				    	    t = vec [ i ] [ 0 ]					  
8 CALL_FUNCTION 1					      	      m = vec [ i ] [ 1 ] ;				    	    m = vec [ i ] [ 1 ]					  
10 LOAD_CONST 1 ( 1 )					      	      if ( m > n ) :					    	    if m > n :						  
12 BINARY_SUBTRACT					      		  ans.append ( - 1 ) ;				    		ans.append ( - 1 )				  
14 STORE_FAST 3 ( n )					      		  continue ;					    		continue					  
							      	      turn = t // n ;					    	    turn = t // n					  
4 16 LOAD_GLOBAL 0 ( len )				      	      rem = t % n ;					    	    rem = t % n						  
18 LOAD_FAST 1 ( vec )					      	      if ( rem == 0 and turn % 2 == 1 ) :		    	    if rem == 0 and turn % 2 == 1 :			  
20 CALL_FUNCTION 1					      		  ans.append ( - 1 ) ;				    		ans.append ( - 1 )				  
22 STORE_FAST 4 ( q )					      		  continue ;					    		continue					  
							      	      if ( rem == 0 and turn % 2 == 0 ) :		    	    if rem == 0 and turn % 2 == 0 :			  
5 24 SETUP_LOOP 242 ( to 268 )				      		  ans.append ( a [ m ] ) ;			    		ans.append ( a [ m ] )				  
26 LOAD_GLOBAL 1 ( range )				      		  continue ;					    	    elif turn == 0 and turn % 2 == 0 :			  
28 LOAD_FAST 4 ( q )					      	      if ( turn % 2 == 0 ) :				    		ans.append ( a [ m ] )				  
30 CALL_FUNCTION 1					      		  cursize = n - rem ;				    	    else :						  
32 GET_ITER						      		  if ( cursize < m ) :				    		if size == 1 :					  
>> 34 FOR_ITER 230 ( to 266 )				      		      ans.append ( - 1 ) ;			    		    ans.append ( a [ m ] )			  
36 STORE_FAST 5 ( i )					      		      continue ;				    	return ans						  
							      		  ans.append ( a [ m + rem ] ) ;		    								  
6 38 LOAD_FAST 1 ( vec )				      	      else :						    								  
40 LOAD_FAST 5 ( i )					      		  cursize = rem ;				    								  
42 BINARY_SUBSCR					      		  if ( cursize < m ) :				    								  
44 LOAD_CONST 2 ( 0 )					      		      ans.append ( - 1 ) ;			    								  
46 BINARY_SUBSCR					      		      continue ;				    								  
48 STORE_FAST 6 ( t )					      		  ans.append ( a [ m ] ) ;			    								  
							      	  for i in ans :					    								  
7 50 LOAD_FAST 1 ( vec )				      	      print ( i ) ;					    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 STORE_FAST 7 ( m )					      								    								  
							      								    								  
8 62 LOAD_FAST 7 ( m )					      								    								  
64 LOAD_FAST 3 ( n )					      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
9 70 LOAD_FAST 2 ( ans )				      								    								  
72 LOAD_METHOD 2 ( append )				      								    								  
74 LOAD_CONST 3 ( - 1 )					      								    								  
76 CALL_METHOD 1					      								    								  
78 POP_TOP						      								    								  
							      								    								  
10 80 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
11 >> 82 LOAD_FAST 6 ( t )				      								    								  
84 LOAD_FAST 3 ( n )					      								    								  
86 BINARY_FLOOR_DIVIDE					      								    								  
88 STORE_FAST 8 ( turn )				      								    								  
							      								    								  
12 90 LOAD_FAST 6 ( t )					      								    								  
92 LOAD_FAST 3 ( n )					      								    								  
94 BINARY_MODULO					      								    								  
96 STORE_FAST 9 ( rem )					      								    								  
							      								    								  
13 98 LOAD_FAST 9 ( rem )				      								    								  
100 LOAD_CONST 2 ( 0 )					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 130				      								    								  
106 LOAD_FAST 8 ( turn )				      								    								  
108 LOAD_CONST 4 ( 2 )					      								    								  
110 BINARY_MODULO					      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 COMPARE_OP 2 ( == )					      								    								  
116 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
14 118 LOAD_FAST 2 ( ans )				      								    								  
120 LOAD_METHOD 2 ( append )				      								    								  
122 LOAD_CONST 3 ( - 1 )				      								    								  
124 CALL_METHOD 1					      								    								  
126 POP_TOP						      								    								  
							      								    								  
15 128 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
16 >> 130 LOAD_FAST 9 ( rem )				      								    								  
132 LOAD_CONST 2 ( 0 )					      								    								  
134 COMPARE_OP 2 ( == )					      								    								  
136 POP_JUMP_IF_FALSE 166				      								    								  
138 LOAD_FAST 8 ( turn )				      								    								  
140 LOAD_CONST 4 ( 2 )					      								    								  
142 BINARY_MODULO					      								    								  
144 LOAD_CONST 2 ( 0 )					      								    								  
146 COMPARE_OP 2 ( == )					      								    								  
148 POP_JUMP_IF_FALSE 166				      								    								  
							      								    								  
17 150 LOAD_FAST 2 ( ans )				      								    								  
152 LOAD_METHOD 2 ( append )				      								    								  
154 LOAD_FAST 0 ( a )					      								    								  
156 LOAD_FAST 7 ( m )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 CALL_METHOD 1					      								    								  
162 POP_TOP						      								    								  
							      								    								  
18 164 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
19 >> 166 LOAD_FAST 8 ( turn )				      								    								  
168 LOAD_CONST 4 ( 2 )					      								    								  
170 BINARY_MODULO					      								    								  
172 LOAD_CONST 2 ( 0 )					      								    								  
174 COMPARE_OP 2 ( == )					      								    								  
176 POP_JUMP_IF_FALSE 226				      								    								  
							      								    								  
20 178 LOAD_FAST 3 ( n )				      								    								  
180 LOAD_FAST 9 ( rem )					      								    								  
182 BINARY_SUBTRACT					      								    								  
184 STORE_FAST 10 ( cursize )				      								    								  
							      								    								  
21 186 LOAD_FAST 10 ( cursize )				      								    								  
188 LOAD_FAST 7 ( m )					      								    								  
190 COMPARE_OP 0 ( < )					      								    								  
192 POP_JUMP_IF_FALSE 206				      								    								  
							      								    								  
22 194 LOAD_FAST 2 ( ans )				      								    								  
196 LOAD_METHOD 2 ( append )				      								    								  
198 LOAD_CONST 3 ( - 1 )				      								    								  
200 CALL_METHOD 1					      								    								  
202 POP_TOP						      								    								  
							      								    								  
23 204 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
24 >> 206 LOAD_FAST 2 ( ans )				      								    								  
208 LOAD_METHOD 2 ( append )				      								    								  
210 LOAD_FAST 0 ( a )					      								    								  
212 LOAD_FAST 7 ( m )					      								    								  
214 LOAD_FAST 9 ( rem )					      								    								  
216 BINARY_ADD						      								    								  
218 BINARY_SUBSCR					      								    								  
220 CALL_METHOD 1					      								    								  
222 POP_TOP						      								    								  
224 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
26 >> 226 LOAD_FAST 9 ( rem )				      								    								  
228 STORE_FAST 10 ( cursize )				      								    								  
							      								    								  
27 230 LOAD_FAST 10 ( cursize )				      								    								  
232 LOAD_FAST 7 ( m )					      								    								  
234 COMPARE_OP 0 ( < )					      								    								  
236 POP_JUMP_IF_FALSE 250				      								    								  
							      								    								  
28 238 LOAD_FAST 2 ( ans )				      								    								  
240 LOAD_METHOD 2 ( append )				      								    								  
242 LOAD_CONST 3 ( - 1 )				      								    								  
244 CALL_METHOD 1					      								    								  
246 POP_TOP						      								    								  
							      								    								  
29 248 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
30 >> 250 LOAD_FAST 2 ( ans )				      								    								  
252 LOAD_METHOD 2 ( append )				      								    								  
254 LOAD_FAST 0 ( a )					      								    								  
256 LOAD_FAST 7 ( m )					      								    								  
258 BINARY_SUBSCR					      								    								  
260 CALL_METHOD 1					      								    								  
262 POP_TOP						      								    								  
264 JUMP_ABSOLUTE 34					      								    								  
>> 266 POP_BLOCK					      								    								  
							      								    								  
31 >> 268 SETUP_LOOP 22 ( to 292 )			      								    								  
270 LOAD_FAST 2 ( ans )					      								    								  
272 GET_ITER						      								    								  
>> 274 FOR_ITER 14 ( to 290 )				      								    								  
276 STORE_FAST 5 ( i )					      								    								  
							      								    								  
32 278 LOAD_GLOBAL 3 ( print )				      								    								  
280 LOAD_FAST 5 ( i )					      								    								  
282 CALL_FUNCTION 1					      								    								  
284 POP_TOP						      								    								  
286 EXTENDED_ARG 1					      								    								  
288 JUMP_ABSOLUTE 274					      								    								  
>> 290 POP_BLOCK					      								    								  
>> 292 LOAD_CONST 0 ( None )				      								    								  
294 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	      FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	    FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	  FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS
--							      --							    --								  --
Disassembly of <code object findSmallestRange at 0x7fbac0e8de def findSmallestRange ( arr , n , k ) :			    def findSmallestRange ( arr , n , k ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) )	      	  i , minval , maxval , minrange , minel , maxel , flag , m 	i , minval , maxval , minrange , minel , maxel = ( 0 , 0  
2 UNPACK_SEQUENCE 8					      	  for i in range ( k + 1 ) :				    	for i in range ( k + 1 ) :				  
4 STORE_FAST 3 ( i )					      	      ptr [ i ] = 0					    	    ptr [ i ] = 0					  
6 STORE_FAST 4 ( minval )				      	  minrange = 10 ** 9					    	minrange = 10 ** 9					  
8 STORE_FAST 5 ( maxval )				      	  while ( 1 ) :						    	minval = - 1						  
10 STORE_FAST 6 ( minrange )				      	      minind = - 1					    	maxval = - 1000000000					  
12 STORE_FAST 7 ( minel )				      	      minval = 10 ** 9					    	maxval = - 1000000000					  
14 STORE_FAST 8 ( maxel )				      	      maxval = - 10 ** 9				    	flag = 0						  
16 STORE_FAST 9 ( flag )				      	      flag = 0						    	for i in range ( k ) :					  
18 STORE_FAST 10 ( minind )				      	      for i in range ( k ) :				    	    if ptr [ i ] == n :					  
							      		  if ( ptr [ i ] == n ) :			    		flag = 1					  
3 20 SETUP_LOOP 28 ( to 50 )				      		      flag = 1					    		break						  
22 LOAD_GLOBAL 0 ( range )				      		      break					    	    if ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] < minval 
24 LOAD_FAST 2 ( k )					      		  if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] <  		minind = i					  
26 LOAD_CONST 2 ( 1 )					      		      minind = i				    		minval = arr [ i ] [ ptr [ i ] ] < minval :	  
28 BINARY_ADD						      		      minval = arr [ i ] [ ptr [ i ] ]		    		    minval = arr [ i ] [ minval [ i ] ]		  
30 CALL_FUNCTION 1					      		  if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] >  		    if maxval [ i ] < n :			  
32 GET_ITER						      		      maxval = arr [ i ] [ ptr [ i ] ]		    			minval += 1				  
>> 34 FOR_ITER 12 ( to 48 )				      	      if ( flag ) :					    			break					  
36 STORE_FAST 3 ( i )					      		  break						    	    if minval is None :					  
							      	      ptr [ minind ] += 1				    		if minrange < i + minval [ i ] < n :		  
4 38 LOAD_CONST 3 ( 0 )					      	      if ( ( maxval - minval ) < minrange ) :		    		    break					  
40 LOAD_GLOBAL 1 ( ptr )				      		  minel = minval				    return "The el failed with range minval style" , maxval , min 
42 LOAD_FAST 3 ( i )					      		  maxel = maxval				    								  
44 STORE_SUBSCR						      		  minrange = maxel - minel			    								  
46 JUMP_ABSOLUTE 34					      	  print ( "The smallest range is [" , minel , maxel , "]" ) 								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
5 >> 50 LOAD_CONST 4 ( 1000000000 )			      								    								  
52 STORE_FAST 6 ( minrange )				      								    								  
							      								    								  
6 54 SETUP_LOOP 206 ( to 262 )				      								    								  
							      								    								  
7 >> 56 LOAD_CONST 5 ( - 1 )				      								    								  
58 STORE_FAST 10 ( minind )				      								    								  
							      								    								  
8 60 LOAD_CONST 4 ( 1000000000 )			      								    								  
62 STORE_FAST 4 ( minval )				      								    								  
							      								    								  
9 64 LOAD_CONST 6 ( - 1000000000 )			      								    								  
66 STORE_FAST 5 ( maxval )				      								    								  
							      								    								  
10 68 LOAD_CONST 3 ( 0 )				      								    								  
70 STORE_FAST 9 ( flag )				      								    								  
							      								    								  
11 72 SETUP_LOOP 134 ( to 208 )				      								    								  
74 LOAD_GLOBAL 0 ( range )				      								    								  
76 LOAD_FAST 2 ( k )					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 122 ( to 206 )				      								    								  
84 STORE_FAST 3 ( i )					      								    								  
							      								    								  
12 86 LOAD_GLOBAL 1 ( ptr )				      								    								  
88 LOAD_FAST 3 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 1 ( n )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
13 98 LOAD_CONST 2 ( 1 )				      								    								  
100 STORE_FAST 9 ( flag )				      								    								  
							      								    								  
14 102 BREAK_LOOP					      								    								  
							      								    								  
15 >> 104 LOAD_GLOBAL 1 ( ptr )				      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 1 ( n )					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 156				      								    								  
116 LOAD_FAST 0 ( arr )					      								    								  
118 LOAD_FAST 3 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_GLOBAL 1 ( ptr )				      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 4 ( minval )				      								    								  
132 COMPARE_OP 0 ( < )					      								    								  
134 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
16 136 LOAD_FAST 3 ( i )				      								    								  
138 STORE_FAST 10 ( minind )				      								    								  
							      								    								  
17 140 LOAD_FAST 0 ( arr )				      								    								  
142 LOAD_FAST 3 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_GLOBAL 1 ( ptr )				      								    								  
148 LOAD_FAST 3 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 BINARY_SUBSCR					      								    								  
154 STORE_FAST 4 ( minval )				      								    								  
							      								    								  
18 >> 156 LOAD_GLOBAL 1 ( ptr )				      								    								  
158 LOAD_FAST 3 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_FAST 1 ( n )					      								    								  
164 COMPARE_OP 0 ( < )					      								    								  
166 POP_JUMP_IF_FALSE 82				      								    								  
168 LOAD_FAST 0 ( arr )					      								    								  
170 LOAD_FAST 3 ( i )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_GLOBAL 1 ( ptr )				      								    								  
176 LOAD_FAST 3 ( i )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 BINARY_SUBSCR					      								    								  
182 LOAD_FAST 5 ( maxval )				      								    								  
184 COMPARE_OP 4 ( > )					      								    								  
186 POP_JUMP_IF_FALSE 82				      								    								  
							      								    								  
19 188 LOAD_FAST 0 ( arr )				      								    								  
190 LOAD_FAST 3 ( i )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 LOAD_GLOBAL 1 ( ptr )				      								    								  
196 LOAD_FAST 3 ( i )					      								    								  
198 BINARY_SUBSCR					      								    								  
200 BINARY_SUBSCR					      								    								  
202 STORE_FAST 5 ( maxval )				      								    								  
204 JUMP_ABSOLUTE 82					      								    								  
>> 206 POP_BLOCK					      								    								  
							      								    								  
20 >> 208 LOAD_FAST 9 ( flag )				      								    								  
210 POP_JUMP_IF_FALSE 214				      								    								  
							      								    								  
21 212 BREAK_LOOP					      								    								  
							      								    								  
22 >> 214 LOAD_GLOBAL 1 ( ptr )				      								    								  
216 LOAD_FAST 10 ( minind )				      								    								  
218 DUP_TOP_TWO						      								    								  
220 BINARY_SUBSCR					      								    								  
222 LOAD_CONST 2 ( 1 )					      								    								  
224 INPLACE_ADD						      								    								  
226 ROT_THREE						      								    								  
228 STORE_SUBSCR					      								    								  
							      								    								  
23 230 LOAD_FAST 5 ( maxval )				      								    								  
232 LOAD_FAST 4 ( minval )				      								    								  
234 BINARY_SUBTRACT					      								    								  
236 LOAD_FAST 6 ( minrange )				      								    								  
238 COMPARE_OP 0 ( < )					      								    								  
240 POP_JUMP_IF_FALSE 56				      								    								  
							      								    								  
24 242 LOAD_FAST 4 ( minval )				      								    								  
244 STORE_FAST 7 ( minel )				      								    								  
							      								    								  
25 246 LOAD_FAST 5 ( maxval )				      								    								  
248 STORE_FAST 8 ( maxel )				      								    								  
							      								    								  
26 250 LOAD_FAST 8 ( maxel )				      								    								  
252 LOAD_FAST 7 ( minel )				      								    								  
254 BINARY_SUBTRACT					      								    								  
256 STORE_FAST 6 ( minrange )				      								    								  
258 JUMP_ABSOLUTE 56					      								    								  
260 POP_BLOCK						      								    								  
							      								    								  
27 >> 262 LOAD_GLOBAL 2 ( print )			      								    								  
264 LOAD_CONST 7 ( 'The smallest range is [' )		      								    								  
266 LOAD_FAST 7 ( minel )				      								    								  
268 LOAD_FAST 8 ( maxel )				      								    								  
270 LOAD_CONST 8 ( ']' )				      								    								  
272 CALL_FUNCTION 4					      								    								  
274 POP_TOP						      								    								  
276 LOAD_CONST 0 ( None )				      								    								  
278 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM
--							      --							    --								  --
Disassembly of <code object minSum at 0x7fbac0e8de40, file "< def minSum ( arr , n ) :					    def minSum ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * n					    	dp = [ 0 ] * n						  
2 BUILD_LIST 1						      	  if ( n == 1 ) :					    	if n == 1 :						  
4 LOAD_FAST 1 ( n )					      	      return arr [ 0 ]					    	    return arr [ 0 ]					  
6 BINARY_MULTIPLY					      	  if ( n == 2 ) :					    	if n == 2 :						  
8 STORE_FAST 2 ( dp )					      	      return min ( arr [ 0 ] , arr [ 1 ] )		    	    return min ( arr [ 0 ] , arr [ 1 ] )		  
							      	  if ( n == 3 ) :					    	if n == 3 :						  
3 10 LOAD_FAST 1 ( n )					      	      return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ]  	    return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ]  
12 LOAD_CONST 2 ( 1 )					      	  if ( n == 4 ) :					    	if n == 4 :						  
14 COMPARE_OP 2 ( == )					      	      return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( ar 	    return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( ar 
16 POP_JUMP_IF_FALSE 26					      	  dp [ 0 ] = arr [ 0 ]					    	dp [ 0 ] = arr [ 1 ]					  
							      	  dp [ 1 ] = arr [ 1 ]					    	dp [ 2 ] = arr [ 2 ]					  
4 18 LOAD_FAST 0 ( arr )				      	  dp [ 2 ] = arr [ 2 ]					    	dp [ 3 ] = arr [ 4 ]					  
20 LOAD_CONST 1 ( 0 )					      	  dp [ 3 ] = arr [ 3 ]					    	dp [ 3 ] = dp [ 0 ]					  
22 BINARY_SUBSCR					      	  for i in range ( 4 , n ) :				    	dp [ 4 ] = dp						  
24 RETURN_VALUE						      	      dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp  	dp [ 5 ] = dp [ 6 ]					  
							      	  return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min (  	dp [ 5 ] = dp						  
5 >> 26 LOAD_FAST 1 ( n )				      								    	for i in range ( 3 , 4 ) :				  
28 LOAD_CONST 3 ( 2 )					      								    	    dp [ i ] = dp ( min ( arr [ i ] , arr [ 1 ] , arr [ 2 
30 COMPARE_OP 2 ( == )					      								    	return dp ( dp , dp , dp , dp , dp , dp , dp , dp , dp ,  
32 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 34 LOAD_GLOBAL 0 ( min )				      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
7 >> 52 LOAD_FAST 1 ( n )				      								    								  
54 LOAD_CONST 4 ( 3 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
8 60 LOAD_GLOBAL 0 ( min )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_GLOBAL 0 ( min )				      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_CONST 3 ( 2 )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 CALL_FUNCTION 2					      								    								  
84 CALL_FUNCTION 2					      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 1 ( n )				      								    								  
90 LOAD_CONST 5 ( 4 )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
10 96 LOAD_GLOBAL 0 ( min )				      								    								  
98 LOAD_GLOBAL 0 ( min )				      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_CONST 1 ( 0 )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 LOAD_GLOBAL 0 ( min )				      								    								  
116 LOAD_FAST 0 ( arr )					      								    								  
118 LOAD_CONST 3 ( 2 )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_CONST 4 ( 3 )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 CALL_FUNCTION 2					      								    								  
130 CALL_FUNCTION 2					      								    								  
132 RETURN_VALUE					      								    								  
							      								    								  
11 >> 134 LOAD_FAST 0 ( arr )				      								    								  
136 LOAD_CONST 1 ( 0 )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 2 ( dp )					      								    								  
142 LOAD_CONST 1 ( 0 )					      								    								  
144 STORE_SUBSCR					      								    								  
							      								    								  
12 146 LOAD_FAST 0 ( arr )				      								    								  
148 LOAD_CONST 2 ( 1 )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_FAST 2 ( dp )					      								    								  
154 LOAD_CONST 2 ( 1 )					      								    								  
156 STORE_SUBSCR					      								    								  
							      								    								  
13 158 LOAD_FAST 0 ( arr )				      								    								  
160 LOAD_CONST 3 ( 2 )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_FAST 2 ( dp )					      								    								  
166 LOAD_CONST 3 ( 2 )					      								    								  
168 STORE_SUBSCR					      								    								  
							      								    								  
14 170 LOAD_FAST 0 ( arr )				      								    								  
172 LOAD_CONST 4 ( 3 )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 LOAD_FAST 2 ( dp )					      								    								  
178 LOAD_CONST 4 ( 3 )					      								    								  
180 STORE_SUBSCR					      								    								  
							      								    								  
15 182 SETUP_LOOP 84 ( to 268 )				      								    								  
184 LOAD_GLOBAL 1 ( range )				      								    								  
186 LOAD_CONST 5 ( 4 )					      								    								  
188 LOAD_FAST 1 ( n )					      								    								  
190 CALL_FUNCTION 2					      								    								  
192 GET_ITER						      								    								  
>> 194 FOR_ITER 70 ( to 266 )				      								    								  
196 STORE_FAST 3 ( i )					      								    								  
							      								    								  
16 198 LOAD_FAST 0 ( arr )				      								    								  
200 LOAD_FAST 3 ( i )					      								    								  
202 BINARY_SUBSCR					      								    								  
204 LOAD_GLOBAL 0 ( min )				      								    								  
206 LOAD_GLOBAL 0 ( min )				      								    								  
208 LOAD_FAST 2 ( dp )					      								    								  
210 LOAD_FAST 3 ( i )					      								    								  
212 LOAD_CONST 2 ( 1 )					      								    								  
214 BINARY_SUBTRACT					      								    								  
216 BINARY_SUBSCR					      								    								  
218 LOAD_FAST 2 ( dp )					      								    								  
220 LOAD_FAST 3 ( i )					      								    								  
222 LOAD_CONST 3 ( 2 )					      								    								  
224 BINARY_SUBTRACT					      								    								  
226 BINARY_SUBSCR					      								    								  
228 CALL_FUNCTION 2					      								    								  
230 LOAD_GLOBAL 0 ( min )				      								    								  
232 LOAD_FAST 2 ( dp )					      								    								  
234 LOAD_FAST 3 ( i )					      								    								  
236 LOAD_CONST 4 ( 3 )					      								    								  
238 BINARY_SUBTRACT					      								    								  
240 BINARY_SUBSCR					      								    								  
242 LOAD_FAST 2 ( dp )					      								    								  
244 LOAD_FAST 3 ( i )					      								    								  
246 LOAD_CONST 5 ( 4 )					      								    								  
248 BINARY_SUBTRACT					      								    								  
250 BINARY_SUBSCR					      								    								  
252 CALL_FUNCTION 2					      								    								  
254 CALL_FUNCTION 2					      								    								  
256 BINARY_ADD						      								    								  
258 LOAD_FAST 2 ( dp )					      								    								  
260 LOAD_FAST 3 ( i )					      								    								  
262 STORE_SUBSCR					      								    								  
264 JUMP_ABSOLUTE 194					      								    								  
>> 266 POP_BLOCK					      								    								  
							      								    								  
17 >> 268 LOAD_GLOBAL 0 ( min )				      								    								  
270 LOAD_GLOBAL 0 ( min )				      								    								  
272 LOAD_FAST 2 ( dp )					      								    								  
274 LOAD_FAST 1 ( n )					      								    								  
276 LOAD_CONST 2 ( 1 )					      								    								  
278 BINARY_SUBTRACT					      								    								  
280 BINARY_SUBSCR					      								    								  
282 LOAD_FAST 2 ( dp )					      								    								  
284 LOAD_FAST 1 ( n )					      								    								  
286 LOAD_CONST 3 ( 2 )					      								    								  
288 BINARY_SUBTRACT					      								    								  
290 BINARY_SUBSCR					      								    								  
292 CALL_FUNCTION 2					      								    								  
294 LOAD_GLOBAL 0 ( min )				      								    								  
296 LOAD_FAST 2 ( dp )					      								    								  
298 LOAD_FAST 1 ( n )					      								    								  
300 LOAD_CONST 5 ( 4 )					      								    								  
302 BINARY_SUBTRACT					      								    								  
304 BINARY_SUBSCR					      								    								  
306 LOAD_FAST 2 ( dp )					      								    								  
308 LOAD_FAST 1 ( n )					      								    								  
310 LOAD_CONST 4 ( 3 )					      								    								  
312 BINARY_SUBTRACT					      								    								  
314 BINARY_SUBSCR					      								    								  
316 CALL_FUNCTION 2					      								    								  
318 CALL_FUNCTION 2					      								    								  
320 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS_1  RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS_1  RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS_1  RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS_1
--							      --							    --								  --
Disassembly of <code object maxProduct at 0x7fbac0e8de40, fil def maxProduct ( arr , n ) :				    def maxProduct ( arr , n = 2 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n < 2 ) :					    	if n < 2 :						  
2 LOAD_CONST 1 ( 2 )					      	      print ( "No pairs exists" )			    	    print ( "No pairs exists" )				  
4 COMPARE_OP 0 ( < )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  if ( n == 2 ) :					    	if n == 2 :						  
							      	      print ( arr [ 0 ] , " " , arr [ 1 ] )		    	    print ( arr [ 0 ] , " " , arr [ 1 ] )		  
3 8 LOAD_GLOBAL 0 ( print )				      	      return						    	    return						  
10 LOAD_CONST 2 ( 'No pairs exists' )			      	  posa = 0						    	posa = 0						  
12 CALL_FUNCTION 1					      	  posb = 0						    	posb = 0						  
14 POP_TOP						      	  nega = 0						    	nega = 0						  
							      	  negb = 0						    	negb = 0						  
4 16 LOAD_CONST 0 ( None )				      	  for i in range ( n ) :				    	negb = 0						  
18 RETURN_VALUE						      	      if ( arr [ i ] > posa ) :				    	for i in range ( n ) :					  
							      		  posb = posa					    	    if arr [ i ] > posa :				  
5 >> 20 LOAD_FAST 1 ( n )				      		  posa = arr [ i ]				    		posb = posa					  
22 LOAD_CONST 1 ( 2 )					      	      elif ( arr [ i ] > posb ) :			    		posa = arr [ i ]				  
24 COMPARE_OP 2 ( == )					      		  posb = arr [ i ]				    	    elif arr [ i ] > posb :				  
26 POP_JUMP_IF_FALSE 52					      	      if ( arr [ i ] < 0 and abs ( arr [ i ] ) > abs ( nega 		posb = arr [ i ]				  
							      		  negb = nega					    	    if arr [ i ] < 0 and abs ( arr [ i ] ) > abs ( nega ) 
6 28 LOAD_GLOBAL 0 ( print )				      		  nega = arr [ i ]				    		negb = negb					  
30 LOAD_FAST 0 ( arr )					      	      elif ( arr [ i ] < 0 and abs ( arr [ i ] ) > abs ( ne 	    if b [ i ] > 0 and abs ( arr [ i ] ) > abs ( b ) :	  
32 LOAD_CONST 3 ( 0 )					      		  negb = arr [ i ]				    		negb = negb					  
34 BINARY_SUBSCR					      	  if ( nega * negb > posa * posb ) :			    	    else :						  
36 LOAD_CONST 4 ( ' ' )					      	      print ( "Max product pair is {" , nega , ", " , negb  		print ( "{}  {} b {} c b c c c c = {} c c = {} c  
38 LOAD_FAST 0 ( arr )					      	  else :						    	else :							  
40 LOAD_CONST 5 ( 1 )					      	      print ( "Max product pair is {" , posa , ", " , posb  	    print ( "b = {b} c = {b} c = {b}" , SPACETOKEN { b }  
42 BINARY_SUBSCR					      								    								  
44 CALL_FUNCTION 3					      								    								  
46 POP_TOP						      								    								  
							      								    								  
7 48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_CONST 3 ( 0 )				      								    								  
54 STORE_FAST 2 ( posa )				      								    								  
							      								    								  
9 56 LOAD_CONST 3 ( 0 )					      								    								  
58 STORE_FAST 3 ( posb )				      								    								  
							      								    								  
10 60 LOAD_CONST 3 ( 0 )				      								    								  
62 STORE_FAST 4 ( nega )				      								    								  
							      								    								  
11 64 LOAD_CONST 3 ( 0 )				      								    								  
66 STORE_FAST 5 ( negb )				      								    								  
							      								    								  
12 68 SETUP_LOOP 148 ( to 218 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 136 ( to 216 )				      								    								  
80 STORE_FAST 6 ( i )					      								    								  
							      								    								  
13 82 LOAD_FAST 0 ( arr )				      								    								  
84 LOAD_FAST 6 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( posa )					      								    								  
90 COMPARE_OP 4 ( > )					      								    								  
92 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
14 94 LOAD_FAST 2 ( posa )				      								    								  
96 STORE_FAST 3 ( posb )				      								    								  
							      								    								  
15 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 6 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 STORE_FAST 2 ( posa )				      								    								  
106 JUMP_FORWARD 20 ( to 128 )				      								    								  
							      								    								  
16 >> 108 LOAD_FAST 0 ( arr )				      								    								  
110 LOAD_FAST 6 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 3 ( posb )				      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
17 120 LOAD_FAST 0 ( arr )				      								    								  
122 LOAD_FAST 6 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 STORE_FAST 3 ( posb )				      								    								  
							      								    								  
18 >> 128 LOAD_FAST 0 ( arr )				      								    								  
130 LOAD_FAST 6 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 3 ( 0 )					      								    								  
136 COMPARE_OP 0 ( < )					      								    								  
138 POP_JUMP_IF_FALSE 174				      								    								  
140 LOAD_GLOBAL 2 ( abs )				      								    								  
142 LOAD_FAST 0 ( arr )					      								    								  
144 LOAD_FAST 6 ( i )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 CALL_FUNCTION 1					      								    								  
150 LOAD_GLOBAL 2 ( abs )				      								    								  
152 LOAD_FAST 4 ( nega )				      								    								  
154 CALL_FUNCTION 1					      								    								  
156 COMPARE_OP 4 ( > )					      								    								  
158 POP_JUMP_IF_FALSE 174				      								    								  
							      								    								  
19 160 LOAD_FAST 4 ( nega )				      								    								  
162 STORE_FAST 5 ( negb )				      								    								  
							      								    								  
20 164 LOAD_FAST 0 ( arr )				      								    								  
166 LOAD_FAST 6 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 STORE_FAST 4 ( nega )				      								    								  
172 JUMP_ABSOLUTE 78					      								    								  
							      								    								  
21 >> 174 LOAD_FAST 0 ( arr )				      								    								  
176 LOAD_FAST 6 ( i )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 LOAD_CONST 3 ( 0 )					      								    								  
182 COMPARE_OP 0 ( < )					      								    								  
184 POP_JUMP_IF_FALSE 78				      								    								  
186 LOAD_GLOBAL 2 ( abs )				      								    								  
188 LOAD_FAST 0 ( arr )					      								    								  
190 LOAD_FAST 6 ( i )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 CALL_FUNCTION 1					      								    								  
196 LOAD_GLOBAL 2 ( abs )				      								    								  
198 LOAD_FAST 5 ( negb )				      								    								  
200 CALL_FUNCTION 1					      								    								  
202 COMPARE_OP 4 ( > )					      								    								  
204 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
22 206 LOAD_FAST 0 ( arr )				      								    								  
208 LOAD_FAST 6 ( i )					      								    								  
210 BINARY_SUBSCR					      								    								  
212 STORE_FAST 5 ( negb )				      								    								  
214 JUMP_ABSOLUTE 78					      								    								  
>> 216 POP_BLOCK					      								    								  
							      								    								  
23 >> 218 LOAD_FAST 4 ( nega )				      								    								  
220 LOAD_FAST 5 ( negb )				      								    								  
222 BINARY_MULTIPLY					      								    								  
224 LOAD_FAST 2 ( posa )				      								    								  
226 LOAD_FAST 3 ( posb )				      								    								  
228 BINARY_MULTIPLY					      								    								  
230 COMPARE_OP 4 ( > )					      								    								  
232 POP_JUMP_IF_FALSE 252				      								    								  
							      								    								  
24 234 LOAD_GLOBAL 0 ( print )				      								    								  
236 LOAD_CONST 6 ( 'Max product pair is {' )		      								    								  
238 LOAD_FAST 4 ( nega )				      								    								  
240 LOAD_CONST 7 ( ', ' )				      								    								  
242 LOAD_FAST 5 ( negb )				      								    								  
244 LOAD_CONST 8 ( '}' )				      								    								  
246 CALL_FUNCTION 5					      								    								  
248 POP_TOP						      								    								  
250 JUMP_FORWARD 16 ( to 268 )				      								    								  
							      								    								  
26 >> 252 LOAD_GLOBAL 0 ( print )			      								    								  
254 LOAD_CONST 6 ( 'Max product pair is {' )		      								    								  
256 LOAD_FAST 2 ( posa )				      								    								  
258 LOAD_CONST 7 ( ', ' )				      								    								  
260 LOAD_FAST 3 ( posb )				      								    								  
262 LOAD_CONST 8 ( '}' )				      								    								  
264 CALL_FUNCTION 5					      								    								  
266 POP_TOP						      								    								  
>> 268 LOAD_CONST 0 ( None )				      								    								  
270 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
