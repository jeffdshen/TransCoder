========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
Disassembly of <code object largest at 0x7f33e2653f60, file " def largest ( arr , n ) :					    def largest ( arr ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( max )				      	  return max ( arr )					    	return max ( arr )					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( arr )					      								    								  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/C_PRO
4 CALL_FUNCTION 1					      								    								  GRAM_FIND_LARGEST_ELEMENT_ARRAY_1.py", line 40, in
6 RETURN_VALUE NEW_LINE					      								    								   <module>	if f_filled(*parameters_set) == f_go
							      								    								  ld(*parameters_set): TypeError: f_filled() takes 1
							      								    								   positional argument but 2 were given
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
Disassembly of <code object perimeter at 0x7f33e2649a50, file def perimeter ( diameter , height ) :			    def perimeter ( diameter , height ) :			  success : identical to gold
2 0 LOAD_CONST 1 ( 2 )					      	  return 2 * ( diameter + height )			    	return 2 * ( diameter + height )			  
2 LOAD_FAST 0 ( diameter )				      								    								  
4 LOAD_FAST 1 ( height )				      								    								  
6 BINARY_ADD						      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
Disassembly of <code object fun at 0x7f33e2644930, file "<dis def fun ( n ) :						    def fun ( n ) :						  success : identical to gold
2 0 LOAD_FAST 0 ( n )					      	  return n & ( n - 1 )					    	return n & ( n - 1 )					  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_SUBTRACT					      								    								  
8 BINARY_AND						      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_<unk> VES_SORTED				      SORT_ARRAY_TWO_<unk> VES_SORTED				    SORT_ARRAY_TWO_<unk> VES_SORTED				  SORT_ARRAY_TWO_<unk> VES_SORTED
--							      --							    --								  --
Disassembly of <code object mergeTwoHalf at 0x7f33e2653ed0, f def mergeTwoHalf ( A , n ) :				    def mergeTwoHalf ( A ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( A )					      	  A.sort ( )						    	A.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      								    								  
4 CALL_METHOD 0						      								    								  
6 POP_TOP						      								    								  
8 LOAD_CONST 0 ( None )					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
Disassembly of <code object binomialCoeffSum at 0x7f33e264493 def binomialCoeffSum ( n ) :				    def binomialCoeffSum ( 0x70x70x7f ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  return ( 1 << n ) ;					    	return 1 << n						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( n )					      								    								  _sa.valid/SUM_BINOMIAL_COEFFICIENTS_1.py", line 21
4 BINARY_LSHIFT						      								    								       def f_filled ( 0x70x70x7f ) :
6 RETURN_VALUE NEW_LINE					      								    								  	 ^ SyntaxError: invalid syntax
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
Disassembly of <code object isEven at 0x7f33e2653f60, file "< def isEven ( n ) :					    def isEven ( n ) :						  success : None
2 0 LOAD_FAST 0 ( n )					      	  return ( not ( n & 1 ) )				    	return not n & 1					  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 BINARY_AND						      								    								  
6 UNARY_NOT						      								    								  
8 RETURN_VALUE NEW_LINE					      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
Disassembly of <code object hexagonalNum at 0x7f33e2644930, f def hexagonalNum ( n ) :					    def hexagonalNum ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  return n * ( 2 * n - 1 )				    	return n * 2 * n - 1					  
2 LOAD_CONST 1 ( 2 )					      								    								  
4 LOAD_FAST 0 ( n )					      								    								  
6 BINARY_MULTIPLY					      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
Disassembly of <code object summingSeries at 0x7f33e2653f60,  def summingSeries ( n ) :					    def summingSeries ( n ) :					  success : identical to gold
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.pow ( n , 2 )				    	return math.pow ( n , 2 )				  
2 LOAD_METHOD 1 ( pow )					      								    								  
4 LOAD_FAST 0 ( n )					      								    								  
6 LOAD_CONST 1 ( 2 )					      								    								  
8 CALL_METHOD 2						      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
Disassembly of <code object evenbinomialCoeffSum at 0x7f33e26 def evenbinomialCoeffSum ( n ) :				    def evenbinomialCoeffSum ( n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  return ( 1 << ( n - 1 ) )				    	return 1 << ( n - 1 ) )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( n )					      								    								  _sa.valid/FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENT
4 LOAD_CONST 1 ( 1 )					      								    								  S_1.py", line 22     return 1 << ( n - 1 ) )
6 BINARY_SUBTRACT					      								    								  		       ^ SyntaxError: invalid syntax
8 BINARY_LSHIFT						      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
Disassembly of <code object findArea at 0x7f33e26494b0, file  def findArea ( r ) :					    def findArea ( r ) :					  success : None
2 0 LOAD_CONST 1 ( 3.142 )				      	  PI = 3.142						    	PI = 3.142						  
2 STORE_FAST 1 ( PI )					      	  return PI * ( r * r ) ;				    	return PI * r * r					  
							      								    								  
3 4 LOAD_FAST 1 ( PI )					      								    								  
6 LOAD_FAST 0 ( r )					      								    								  
8 LOAD_FAST 0 ( r )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> Y_AN_INTEGER_WITH_3_5				      <unk> Y_AN_INTEGER_WITH_3_5				    <unk> Y_AN_INTEGER_WITH_3_5					  <unk> Y_AN_INTEGER_WITH_3_5
--							      --							    --								  --
Disassembly of <code object multiplyWith3Point5 at 0x7f33e264 def multiplyWith3Point5 ( x ) :				    def multiplyWith3Point5 ( x ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  return ( x << 1 ) + x + ( x >> 1 )			    	return ( x ) << 1 + x ) >> ( x ) >> ( x ) + x >> 1	  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 BINARY_LSHIFT						      								    								  
6 LOAD_FAST 0 ( x )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_FAST 0 ( x )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_RSHIFT					      								    								  
16 BINARY_ADD						      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
Disassembly of <code object cost at 0x7f33e2644930, file "<di def cost ( a , n ) :					    def cost ( a , n ) :					  failure : #Results: 2, 10
2 0 LOAD_FAST 1 ( n )					      	  return ( ( n - 1 ) * min ( a ) )			    	return n - 1 * min ( a )				  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 BINARY_SUBTRACT					      								    								  
6 LOAD_GLOBAL 0 ( min )					      								    								  
8 LOAD_FAST 0 ( a )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
Disassembly of <code object Circumference at 0x7f33e2644f60,  def Circumference ( l , w ) :				    def Circumference ( l , w ) :				  success : None
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * ( l + w ) )				    	return 2 * ( l + w )					  
2 LOAD_FAST 0 ( l )					      								    								  
4 LOAD_FAST 1 ( w )					      								    								  
6 BINARY_ADD						      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
Disassembly of <code object circumferenceparallelogram at 0x7 def circumferenceparallelogram ( a , b ) :		    def circumferenceparallelogram ( a , b ) :			  success : None
2 0 LOAD_CONST 1 ( 2 )					      	  return ( ( 2 * a ) + ( 2 * b ) )			    	return 2 * a + 2 * b					  
2 LOAD_FAST 0 ( a )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_CONST 1 ( 2 )					      								    								  
8 LOAD_FAST 1 ( b )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 BINARY_ADD						      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
Disassembly of <code object nthTerm at 0x7f33e2644f60, file " def nthTerm ( n ) :					    def nthTerm ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  return ( n * n ) + ( n * n * n )			    	return n * n + n * n					  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 BINARY_ADD						      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S_1				      NUMBER_TRIANGLES_N_<unk> S_1				    NUMBER_TRIANGLES_N_<unk> S_1				  NUMBER_TRIANGLES_N_<unk> S_1
--							      --							    --								  --
Disassembly of <code object numberOfTriangles at 0x7f33e2644f def numberOfTriangles ( n ) :				    def numberOfTriangles ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  ans = 2 * ( pow ( 3 , n ) ) - 1 ;			    	ans = 2 * pow ( 3 , n ) - 1				  
2 LOAD_GLOBAL 0 ( pow )					      	  return ans ;						    	return ans						  
4 LOAD_CONST 2 ( 3 )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 CALL_FUNCTION 2					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_CONST 3 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 STORE_FAST 1 ( ans )					      								    								  
							      								    								  
3 18 LOAD_FAST 1 ( ans )				      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
Disassembly of <code object swapNibbles at 0x7f33e26494b0, fi def swapNibbles ( x ) :					    def swapNibbles ( x ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	    	return ( x & 15 ) << 4 | ( x & 240 ) << 4 )		  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 15 )					      								    								  _sa.valid/SWAP_TWO_NIBBLES_BYTE.py", line 22	   r
4 BINARY_AND						      								    								  eturn ( x & 15 ) << 4 | ( x & 240 ) << 4 )
6 LOAD_CONST 2 ( 4 )					      								    								  					 ^ SyntaxErr
8 BINARY_LSHIFT						      								    								  or: invalid syntax
10 LOAD_FAST 0 ( x )					      								    								  
12 LOAD_CONST 3 ( 240 )					      								    								  
14 BINARY_AND						      								    								  
16 LOAD_CONST 2 ( 4 )					      								    								  
18 BINARY_RSHIFT					      								    								  
20 BINARY_OR						      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
Disassembly of <code object height at 0x7f33e2653f60, file "< def height ( N ) :					    def height ( N ) :						  success : identical to gold
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.ceil ( math.log2 ( N + 1 ) ) - 1		    	return math.ceil ( math.log2 ( N + 1 ) ) - 1		  
2 LOAD_METHOD 1 ( ceil )				      								    								  
4 LOAD_GLOBAL 0 ( math )				      								    								  
6 LOAD_METHOD 2 ( log2 )				      								    								  
8 LOAD_FAST 0 ( N )					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 BINARY_ADD						      								    								  
14 CALL_METHOD 1					      								    								  
16 CALL_METHOD 1					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
Disassembly of <code object checkOrigin at 0x7f33e2653ed0, fi def checkOrigin ( x1 , y1 , x2 , y2 ) :			    def checkOrigin ( x1 , y1 , x2 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( x1 )					      	  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )	    	return x1 * ( y2 - y1 ) * ( y1 - x2 - x1 )		  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 3 ( y2 )					      								    								  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/CHECK
4 LOAD_FAST 1 ( y1 )					      								    								  _LINE_PASSES_ORIGIN.py", line 40, in <module>
6 BINARY_SUBTRACT					      								    								  if f_filled(*parameters_set) == f_gold(*parameters
8 BINARY_MULTIPLY					      								    								  _set): TypeError: f_filled() takes 3 positional ar
10 LOAD_FAST 1 ( y1 )					      								    								  guments but 4 were given
12 LOAD_FAST 2 ( x2 )					      								    								  
14 LOAD_FAST 0 ( x1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7f33e2644f60,  def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  success : None
2 0 LOAD_GLOBAL 0 ( sum )				      	  return sum ( arr ) - ( ( ( n - 1 ) * n ) // 2 )	    	return sum ( arr ) - ( n - 1 ) * n // 2			  
2 LOAD_FAST 0 ( arr )					      								    								  
4 CALL_FUNCTION 1					      								    								  
6 LOAD_FAST 1 ( n )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_FLOOR_DIVIDE					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
Disassembly of <code object sortString at 0x7f33e2653ed0, fil def sortString ( str ) :					    def sortString ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  str = ''.join ( sorted ( str ) )			    	str = ''.join ( sorted ( str ) )			  
2 LOAD_METHOD 0 ( join )				      	  print ( str )						    	print ( str )						  
4 LOAD_GLOBAL 1 ( sorted )				      								    								  
6 LOAD_FAST 0 ( str )					      								    								  
8 CALL_FUNCTION 1					      								    								  
10 CALL_METHOD 1					      								    								  
12 STORE_FAST 0 ( str )					      								    								  
							      								    								  
3 14 LOAD_GLOBAL 2 ( print )				      								    								  
16 LOAD_FAST 0 ( str )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 POP_TOP						      								    								  
22 LOAD_CONST 0 ( None )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
Disassembly of <code object assignValue at 0x7f33e2644930, fi def assignValue ( a , b , x ) :				    def assignValue ( a , b , x ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  arr = [ a , b ]					    	arr = [ a , b ]						  
2 LOAD_FAST 1 ( b )					      	  return ( arr [ x ] )					    	return arr [ x ]					  
4 BUILD_LIST 2						      								    								  
6 STORE_FAST 3 ( arr )					      								    								  
							      								    								  
3 8 LOAD_FAST 3 ( arr )					      								    								  
10 LOAD_FAST 2 ( x )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
Disassembly of <code object power at 0x7f33e26494b0, file "<d def power ( n ) :						    def power ( n ) :						  success : identical to gold
2 0 LOAD_FAST 0 ( n )					      	  if n == 1 :						    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 2						    	    return 2						  
4 COMPARE_OP 2 ( == )					      	  return 2 * power ( n - 1 )				    	return 2 * power ( n - 1 )				  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_CONST 2 ( 2 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 2 )				      								    								  
14 LOAD_GLOBAL 0 ( power )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object kthSmallest at 0x7f33e2649a50, fi def kthSmallest ( arr , n , k ) :				    def kthSmallest ( arr , k , k ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  return arr [ k - 1 ]					    	return arr [ k - 1 ]					  
4 CALL_METHOD 0						      								    								  
6 POP_TOP						      								    								  
							      								    								  
3 8 LOAD_FAST 0 ( arr )					      								    								  
10 LOAD_FAST 2 ( k )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_SUBSCR					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES		      PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES
--							      --							    --								  --
Disassembly of <code object findMaximumPieces at 0x7f33e26494 def findMaximumPieces ( n ) :				    def findMaximumPieces ( n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  return int ( 1 + n * ( n + 1 ) / 2 )			    	return int ( 1 * ( n + 1 ) / 2 )			  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 LOAD_FAST 0 ( n )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_ADD						      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_CONST 2 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 1					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
Disassembly of <code object areaOctagon at 0x7f33e2644930, fi def areaOctagon ( side ) :				    def areaOctagon ( side , count ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * ( 1 + ( math.sqrt ( 2 ) ) ) * side * side )  	return 2 * ( 1 + math.sqrt ( 2 ) ) * side * side	  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 2 ( 1 )					      								    								  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/PROGR
4 LOAD_GLOBAL 0 ( math )				      								    								  AM_CALCULATE_AREA_OCTAGON.py", line 42, in <module
6 LOAD_METHOD 1 ( sqrt )				      								    								  >	if abs(1 - (0.0000001 + abs(f_gold(*paramete
8 LOAD_CONST 1 ( 2 )					      								    								  rs_set))) / (abs(f_filled(*parameters_set)) + 0.00
10 CALL_METHOD 1					      								    								  00001)) < 0.001: TypeError: f_filled() missing 1 r
12 BINARY_ADD						      								    								  equired positional argument: 'count'
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 0 ( side )					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 LOAD_FAST 0 ( side )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
Disassembly of <code object volumeOfEllipsoid at 0x7f33e26449 def volumeOfEllipsoid ( r1 , r2 , r3 ) :			    def vwhat OfEllipsoid ( r1 , r2 , r3 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1.33 )				      	  return 1.33 * math.pi * r1 * r2 * r3			    	return 1.33 * math.pi * r1 * r2 * r3			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( math )				      								    								  _sa.valid/PROGRAM_CALCULATE_VOLUME_ELLIPSOID.py",
4 LOAD_ATTR 1 ( pi )					      								    								  line 23     def f_filled OfEllipsoid ( r1 , r2 , r
6 BINARY_MULTIPLY					      								    								  3 ) :				   ^ SyntaxError: in
8 LOAD_FAST 0 ( r1 )					      								    								  valid syntax
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 1 ( r2 )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 2 ( r3 )					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_<unk> PARTS_1				      BREAK_NUMBER_<unk> PARTS_1				    BREAK_NUMBER_<unk> PARTS_1					  BREAK_NUMBER_<unk> PARTS_1
--							      --							    --								  --
Disassembly of <code object count_of_ways at 0x7f33e26494b0,  def count_of_ways ( n ) :					    def count_of_ways ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  count = ( n + 1 ) * ( n + 2 ) // 2			    	count = ( n + 1 ) * ( n + 2 ) // 2			  
							      	  return count						    	return count						  
3 4 LOAD_FAST 0 ( n )					      								    								  
6 LOAD_CONST 2 ( 1 )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 3 ( 2 )					      								    								  
14 BINARY_ADD						      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 3 ( 2 )					      								    								  
20 BINARY_FLOOR_DIVIDE					      								    								  
22 STORE_FAST 1 ( count )				      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( count )				      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7f33e2649a50, f def calculateSum ( n ) :					    def calculateSum ( n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  sum = 1 << n ;					    	sum = 1 << n						  
							      	  return ( sum - 1 )					    	return ( sum - 1 )					  
3 4 LOAD_CONST 2 ( 1 )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 BINARY_LSHIFT						      								    								  
10 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
4 12 LOAD_FAST 1 ( sum )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
Disassembly of <code object countNumberOfTriangles at 0x7f33e def countNumberOfTriangles ( n ) :			    def countNumberOfTriangles ( n , 3333333333333333333333333333 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return ( n * ( n - 1 ) * ( n - 2 ) // 6 )		    return RETURN_VALUE						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( n )					      								    								  _sa.valid/NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MOR
4 LOAD_CONST 1 ( 1 )					      								    								  E_THAN_TWO_POINTS_ARE_COLLINEAR.py", line 21	   d
6 BINARY_SUBTRACT					      								    								  ef f_filled ( n , 33333333333333333333333333333333
8 BINARY_MULTIPLY					      								    								  33333333333333333333333333333333333333333333333333
10 LOAD_FAST 0 ( n )					      								    								  33333333333333333333333333333333333333333333333333
12 LOAD_CONST 2 ( 2 )					      								    								  33333333333333333333333333333333333333333333333333
14 BINARY_SUBTRACT					      								    								  33333333333333333333333333333333333333333333333333
16 BINARY_MULTIPLY					      								    								  33333333333333333333333333333333333333333333333333
18 LOAD_CONST 3 ( 6 )					      								    								  33333333333333333333333333333333333333333333333333
20 BINARY_FLOOR_DIVIDE					      								    								  33333333333333333333333333333333333333333333333333
22 RETURN_VALUE NEW_LINE				      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333332
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  	       ^ SyntaxError: invalid syntax
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7f33e26494b0, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( int )				      	  return ( int ) ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * 	return int ( 0.6172 * pow ( 10 , n ) - 1 ) - 0.55 * n )	  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0.6172 )				      								    								  _sa.valid/SUM_SERIES_555555_N_TERMS.py", line 22
4 LOAD_GLOBAL 1 ( pow )					      								    								     return int ( 0.6172 * pow ( 10 , n ) - 1 ) - 0.
6 LOAD_CONST 2 ( 10 )					      								    								  55 * n )
8 LOAD_FAST 0 ( n )					      								    								  		   ^ SyntaxError: invalid syntax
10 CALL_FUNCTION 2					      								    								  
12 LOAD_CONST 3 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 4 ( 0.55 )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED
--							      --							    --								  --
Disassembly of <code object getArea at 0x7f33e2649a50, file " def getArea ( a ) :					    def getArea ( a ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  area = ( math.pi * a * a ) / 4			    	area = math.pi * a / 4					  
2 LOAD_ATTR 1 ( pi )					      	  return area						    	return area						  
4 LOAD_FAST 0 ( a )					      								    								  
6 BINARY_MULTIPLY					      								    								  
8 LOAD_FAST 0 ( a )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_CONST 1 ( 4 )					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 STORE_FAST 1 ( area )				      								    								  
							      								    								  
3 18 LOAD_FAST 1 ( area )				      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
Disassembly of <code object maxSquare at 0x7f33e2649a50, file def maxSquare ( b , m ) :					    def maxSquare ( b , m ) :					  success : identical to gold
2 0 LOAD_FAST 0 ( b )					      	  return ( b / m - 1 ) * ( b / m ) / 2			    	return ( b / m - 1 ) * ( b / m ) / 2			  
2 LOAD_FAST 1 ( m )					      								    								  
4 BINARY_TRUE_DIVIDE					      								    								  
6 LOAD_CONST 1 ( 1 )					      								    								  
8 BINARY_SUBTRACT					      								    								  
10 LOAD_FAST 0 ( b )					      								    								  
12 LOAD_FAST 1 ( m )					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 2 ( 2 )					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
Disassembly of <code object findSumSubsets at 0x7f33e2644930, def findSumSubsets ( n ) :				    def findSumSubsets ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	    	return n * ( n + 1 ) / 2 * ( 1 << ( n - 1 ) )		  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_ADD						      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_CONST 2 ( 2 )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_LSHIFT					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
Disassembly of <code object vol_of_octahedron at 0x7f33e2649a def vol_of_octahedron ( side ) :				    def vol_of_octahedron ( side ) :				  success : None
2 0 LOAD_FAST 0 ( side )				      	  return ( ( side * side * side ) * ( math.sqrt ( 2 ) / 3 ) 	return side * side * side * math.sqrt ( 2 ) / 3		  
2 LOAD_FAST 0 ( side )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( side )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_GLOBAL 0 ( math )				      								    								  
12 LOAD_METHOD 1 ( sqrt )				      								    								  
14 LOAD_CONST 1 ( 2 )					      								    								  
16 CALL_METHOD 1					      								    								  
18 LOAD_CONST 2 ( 3 )					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
Disassembly of <code object timeToMeet at 0x7f33e2644f60, fil def timeToMeet ( s , v ) :				    def timeToMeet ( s , v ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 3 )					      	  V = 3 * v / 2 ;					    	V = ( 3 * v ) / 2					  
2 LOAD_FAST 1 ( v )					      	  time = s / V ;					    	time = s / V						  
4 BINARY_MULTIPLY					      	  print ( time ) ;					    	print ( time )						  
6 LOAD_CONST 2 ( 2 )					      								    								  
8 BINARY_TRUE_DIVIDE					      								    								  
10 STORE_FAST 2 ( V )					      								    								  
							      								    								  
3 12 LOAD_FAST 0 ( s )					      								    								  
14 LOAD_FAST 2 ( V )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 STORE_FAST 3 ( time )				      								    								  
							      								    								  
4 20 LOAD_GLOBAL 0 ( print )				      								    								  
22 LOAD_FAST 3 ( time )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 POP_TOP						      								    								  
28 LOAD_CONST 0 ( None )				      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2644930, file " def findSum ( n ) :					    def findSum ( n ) :						  success : identical to gold
2 0 LOAD_FAST 0 ( n )					      	  return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24	    	return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24	  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_ADD						      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 2 )					      								    								  
14 BINARY_ADD						      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 3 ( 3 )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 4 ( 24 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
Disassembly of <code object find at 0x7f33e2644930, file "<di def find ( p ) :						    def find ( p ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 	return math.ceil ( math.sqrt ( 1 / ( 1 - p ) ) )	  
2 LOAD_METHOD 1 ( ceil )				      								    								  
4 LOAD_GLOBAL 0 ( math )				      								    								  
6 LOAD_METHOD 2 ( sqrt )				      								    								  
8 LOAD_CONST 1 ( 730 )					      								    								  
10 LOAD_GLOBAL 0 ( math )				      								    								  
12 LOAD_METHOD 3 ( log )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 LOAD_FAST 0 ( p )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_METHOD 1					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 CALL_METHOD 1					      								    								  
30 CALL_METHOD 1					      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
Disassembly of <code object findIndex at 0x7f33e2653ed0, file def findIndex ( n ) :					    def findIndex ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 2.078087 )				      	  fibo = 2.078087 * math.log ( n ) + 1.672276		    	fibo = ( 2.078087 * math.log ( n ) ) + 1.67* 1000	  
2 LOAD_GLOBAL 0 ( math )				      	  return round ( fibo )					    	return round ( fibo )					  
4 LOAD_METHOD 1 ( log )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 CALL_METHOD 1						      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_CONST 2 ( 1.672276 )				      								    								  
14 BINARY_ADD						      								    								  
16 STORE_FAST 1 ( fibo )				      								    								  
							      								    								  
3 18 LOAD_GLOBAL 2 ( round )				      								    								  
20 LOAD_FAST 1 ( fibo )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2644f60, file def factorial ( n ) :					    def factorial ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( 1 ) if n == 1 or n == 0 ) else ( n * factorial ( l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      								    								  _sa.valid/C_PROGRAM_FACTORIAL_NUMBER_2.py", line 2
4 COMPARE_OP 2 ( == )					      								    								  2	return ( 1 ) if n == 1 or n == 0 ) else ( n
6 POP_JUMP_IF_TRUE 16					      								    								  * f_filled ( n - 1 ) )
8 LOAD_FAST 0 ( n )					      								    								  	    ^ SyntaxError: invalid syntax
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
>> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2653ed0, file def factorial ( n ) :					    def factorial ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( 1 ) if n == 1 or n == 0 ) else ( n * factorial ( l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      								    								  _sa.valid/C_PROGRAM_FACTORIAL_NUMBER_1.py", line 2
4 COMPARE_OP 2 ( == )					      								    								  2	return ( 1 ) if n == 1 or n == 0 ) else ( n
6 POP_JUMP_IF_TRUE 16					      								    								  * f_filled ( n - 1 ) )
8 LOAD_FAST 0 ( n )					      								    								  	    ^ SyntaxError: invalid syntax
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
>> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2644930, file def factorial ( n ) :					    def factorial ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( 1 ) if n == 1 or n == 0 ) else ( n * factorial ( l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      								    								  _sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER.py", l
4 COMPARE_OP 2 ( == )					      								    								  ine 22     return ( 1 ) if n == 1 or n == 0 ) else
6 POP_JUMP_IF_TRUE 16					      								    								   ( n * f_filled ( n - 1 ) )
8 LOAD_FAST 0 ( n )					      								    								  		 ^ SyntaxError: invalid syntax
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
>> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2649a50, file def factorial ( n ) :					    def factorial ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( 1 ) if n == 1 or n == 0 ) else ( n * factorial ( l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      								    								  _sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1.py",
4 COMPARE_OP 2 ( == )					      								    								   line 22     return ( 1 ) if n == 1 or n == 0 ) el
6 POP_JUMP_IF_TRUE 16					      								    								  se ( n * f_filled ( n - 1 ) )
8 LOAD_FAST 0 ( n )					      								    								  		   ^ SyntaxError: invalid syntax
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
>> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2644f60, file def factorial ( n ) :					    def factorial ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( 1 ) if n == 1 or n == 0 ) else ( n * factorial ( l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      								    								  _sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2.py",
4 COMPARE_OP 2 ( == )					      								    								   line 22     return ( 1 ) if n == 1 or n == 0 ) el
6 POP_JUMP_IF_TRUE 16					      								    								  se ( n * f_filled ( n - 1 ) )
8 LOAD_FAST 0 ( n )					      								    								  		   ^ SyntaxError: invalid syntax
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
>> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
Disassembly of <code object countStr at 0x7f33e2644f60, file  def countStr ( n ) :					    def countStr ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) // 2 ) ) 	return 1 + n * 2 + n * ( n * n - 1 ) ) // 2		  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( n )					      								    								  _sa.valid/COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN
4 LOAD_CONST 2 ( 2 )					      								    								  _CONSTRAINTS_1.py", line 22	  return 1 + n * 2 +
6 BINARY_MULTIPLY					      								    								   n * ( n * n - 1 ) ) // 2
8 BINARY_ADD						      								    								  		   ^ SyntaxError: invalid syntax
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_FLOOR_DIVIDE					      								    								  
28 BINARY_ADD						      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
Disassembly of <code object minmaxProduct at 0x7f33e2649a50,  def minmaxProduct ( arr1 , arr2 , n1 , n2 ) :		    def minmaxProduct ( arr1 , arr2 ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr1 )				      	  arr1.sort ( )						    	arr1.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  arr2.sort ( )						    	arr2.sort ( )						  
4 CALL_METHOD 0						      	  return arr1 [ n1 - 1 ] * arr2 [ 0 ]			    	return ( arr1 [ n1 - 1 ] * arr2 [ 0 ] )			  
6 POP_TOP						      								    								  
							      								    								  
3 8 LOAD_FAST 1 ( arr2 )				      								    								  
10 LOAD_METHOD 0 ( sort )				      								    								  
12 CALL_METHOD 0					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_FAST 0 ( arr1 )				      								    								  
18 LOAD_FAST 2 ( n1 )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( arr2 )					      								    								  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
Disassembly of <code object find_extra_element_index at 0x7f3 def find_extra_element_index ( arrA , arrB ) :		    def find_extra_element_index ( arrA , arrB ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sum )				      	  extra_element = sum ( arrA ) - sum ( arrB )		    	extra_element = sum ( arrA ) - sum ( arrB )		  
2 LOAD_FAST 0 ( arrA )					      	  return arrA.index ( extra_element )			    	return arrA.index ( extra_element )			  
4 CALL_FUNCTION 1					      								    								  
6 LOAD_GLOBAL 0 ( sum )					      								    								  
8 LOAD_FAST 1 ( arrB )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 STORE_FAST 2 ( extra_element )			      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arrA )				      								    								  
18 LOAD_METHOD 1 ( index )				      								    								  
20 LOAD_FAST 2 ( extra_element )			      								    								  
22 CALL_METHOD 1					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>
--							      --							    --								  --
Disassembly of <code object fib at 0x7f33e26494b0, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return n						    	    return n						  
4 COMPARE_OP 1 ( <= )					      	  return fib ( n - 1 ) + fib ( n - 2 )			    	return fib ( n - 1 ) + fib ( n - 2 )			  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_FAST 0 ( n )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_GLOBAL 0 ( fib )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_GLOBAL 0 ( fib )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_ADD						      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7f33e26494b0, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/COUNT
4 COMPARE_OP 2 ( == )					      	  else :						    	else :							  _SET_BITS_IN_AN_INTEGER_3.py", line 46, in <module
6 POP_JUMP_IF_FALSE 12					      	      return 1 + countSetBits ( n & ( n - 1 ) )		    	    return 1 + countSetBits ( n , n - 1 )		  >	if f_filled(*parameters_set) == f_gold(*para
							      								    								  meters_set):	 File "/home/ubuntu/TransCoder/model
3 8 LOAD_CONST 1 ( 0 )					      								    								  s/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-p
10 RETURN_VALUE						      								    								  ython_sa.valid/COUNT_SET_BITS_IN_AN_INTEGER_3.py",
							      								    								   line 28, in f_filled	    return 1 + f_filled ( n
5 >> 12 LOAD_CONST 2 ( 1 )				      								    								  , n - 1 ) TypeError: f_filled() takes 1 positional
14 LOAD_GLOBAL 0 ( countSetBits )			      								    								   argument but 2 were given
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_AND						      								    								  
26 CALL_FUNCTION 1					      								    								  
28 BINARY_ADD						      								    								  
30 RETURN_VALUE						      								    								  
32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
Disassembly of <code object vol_of_dodecahedron at 0x7f33e264 def vol_of_dodecahedron ( side ) :			    def vol_of_dodecahedron ( side ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 15 )					      	  return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 	return 15 + 7 * math.sqrt ( 5 ) / 4 * math.pow ( side , 3 
2 LOAD_CONST 2 ( 7 )					      								    								  
4 LOAD_GLOBAL 0 ( math )				      								    								  
6 LOAD_METHOD 1 ( sqrt )				      								    								  
8 LOAD_CONST 3 ( 5 )					      								    								  
10 CALL_METHOD 1					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 BINARY_ADD						      								    								  
16 LOAD_CONST 4 ( 4 )					      								    								  
18 BINARY_TRUE_DIVIDE					      								    								  
20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 2 ( pow )				      								    								  
24 LOAD_FAST 0 ( side )					      								    								  
26 LOAD_CONST 5 ( 3 )					      								    								  
28 CALL_METHOD 2					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
Disassembly of <code object findArea at 0x7f33e2653f60, file  def findArea ( a ) :					    def findArea ( a ) :					  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( sqrt )				      	  area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a  	area = sqrt ( 5 * ( 2 * sqrt ( 5 ) ) ) * a * a / 4	  
2 LOAD_CONST 1 ( 5 )					      	  return area						    	return area						  
4 LOAD_CONST 1 ( 5 )					      								    								  
6 LOAD_CONST 2 ( 2 )					      								    								  
8 LOAD_GLOBAL 0 ( sqrt )				      								    								  
10 LOAD_CONST 1 ( 5 )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_FAST 0 ( a )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 3 ( 4 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 STORE_FAST 1 ( area )				      								    								  
							      								    								  
3 36 LOAD_FAST 1 ( area )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1	      POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1
--							      --							    --								  --
Disassembly of <code object printArray at 0x7f33e2649a50, fil def printArray ( a , n ) :				    def printArray ( a , 3333333333333333333333333333333333333333 script_not_found : None
2 0 SETUP_LOOP 24 ( to 26 )				      	  for i in a :						    								  
2 LOAD_FAST 0 ( a )					      	      print ( i , end = " " )				    								  
4 GET_ITER						      	  print ( )						    								  
>> 6 FOR_ITER 16 ( to 24 )				      								    								  
8 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 10 LOAD_GLOBAL 0 ( print )				      								    								  
12 LOAD_FAST 2 ( i )					      								    								  
14 LOAD_CONST 1 ( ' ' )					      								    								  
16 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
18 CALL_FUNCTION_KW 2					      								    								  
20 POP_TOP						      								    								  
22 JUMP_ABSOLUTE 6					      								    								  
>> 24 POP_BLOCK						      								    								  
							      								    								  
4 >> 26 LOAD_GLOBAL 0 ( print )				      								    								  
28 CALL_FUNCTION 0					      								    								  
30 POP_TOP						      								    								  
32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7f33e2644f60, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  while ( n ) :						    	while n :						  
							      	      n &= ( n - 1 )					    	    n &= n - 1						  
3 4 SETUP_LOOP 28 ( to 34 )				      	      count += 1					    	    count += 1						  
>> 6 LOAD_FAST 0 ( n )					      	  return count						    	return count						  
8 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
4 10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 INPLACE_AND						      								    								  
20 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( count )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 1 ( count )				      								    								  
30 JUMP_ABSOLUTE 6					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 LOAD_FAST 1 ( count )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object bin at 0x7f33e26494b0, file "<dis def bin ( n ) :						    def bin ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n > 1 :						    	if n > 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      bin ( n // 2 )					    	    bin ( n // 2 )					  
4 COMPARE_OP 4 ( > )					      	  print ( n % 2 , end = "" )				    	print ( n % 2 , end = '' )				  
6 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 8 LOAD_GLOBAL 0 ( bin )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 2 )					      								    								  
14 BINARY_FLOOR_DIVIDE					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 3 ( '' )					      								    								  
30 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
32 CALL_FUNCTION_KW 2					      								    								  
34 POP_TOP						      								    								  
36 LOAD_CONST 0 ( None )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object linearSearch at 0x7f33e2644930, f def linearSearch ( arr , n ) :				    def linearSearch ( arr , n ) :				  success : identical to gold
2 0 SETUP_LOOP 32 ( to 34 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      if arr [ i ] is i :				    	    if arr [ i ] is i :					  
4 LOAD_FAST 1 ( n )					      		  return i					    		return i					  
6 CALL_FUNCTION 1					      	  return - 1						    	return - 1						  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 20 ( to 32 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 2 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 COMPARE_OP 8 ( is )					      								    								  
24 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
30 JUMP_ABSOLUTE 10					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_CONST 1 ( - 1 )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
Disassembly of <code object printSubStr at 0x7f33e2644930, fi def printSubStr ( st , low , high ) :			    def printSubStr ( st , low , high ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sys )				      	  sys.stdout.write ( st [ low : high + 1 ] )		    	sys.stdout.write ( st [ low : high + 1 ] )		  
2 LOAD_ATTR 1 ( stdout )				      	  sys.stdout.flush ( )					    	sys.stdout.flush ( )					  
4 LOAD_METHOD 2 ( write )				      	  return ''						    	return ""						  
6 LOAD_FAST 0 ( st )					      								    								  
8 LOAD_FAST 1 ( low )					      								    								  
10 LOAD_FAST 2 ( high )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 BUILD_SLICE 2					      								    								  
18 BINARY_SUBSCR					      								    								  
20 CALL_METHOD 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
3 24 LOAD_GLOBAL 0 ( sys )				      								    								  
26 LOAD_ATTR 1 ( stdout )				      								    								  
28 LOAD_METHOD 3 ( flush )				      								    								  
30 CALL_METHOD 0					      								    								  
32 POP_TOP						      								    								  
							      								    								  
4 34 LOAD_CONST 2 ( '' )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
Disassembly of <code object isPowerOfFour at 0x7f33e2653ed0,  def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return ( n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not (  	return n != 0 and n & ( n - 1 ) == 0 and n & 28post 1post l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0 )					      								    								  _sa.valid/FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_O
4 COMPARE_OP 3 ( != )					      								    								  F_4_OR_NOT_2.py", line 22	return n != 0 and n
6 JUMP_IF_FALSE_OR_POP 32				      								    								  & ( n - 1 ) == 0 and n & 28post 1post
8 LOAD_FAST 0 ( n )					      								    								  					    ^ Syntax
10 LOAD_FAST 0 ( n )					      								    								  Error: invalid syntax
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 JUMP_IF_FALSE_OR_POP 32				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 2863311530 )				      								    								  
28 BINARY_AND						      								    								  
30 UNARY_NOT						      								    								  
>> 32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
Disassembly of <code object bin at 0x7f33e2653ed0, file "<dis def bin ( n ) :						    def bin ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n > 1 ) :					    	if n > 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      bin ( n >> 1 )					    	    bin ( n >> 1 )					  
4 COMPARE_OP 4 ( > )					      	  print ( n & 1 , end = "" )				    	print ( n & 1 , end = '' )				  
6 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 8 LOAD_GLOBAL 0 ( bin )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_RSHIFT					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_AND						      								    								  
28 LOAD_CONST 2 ( '' )					      								    								  
30 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
32 CALL_FUNCTION_KW 2					      								    								  
34 POP_TOP						      								    								  
36 LOAD_CONST 0 ( None )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
Disassembly of <code object largestPower at 0x7f33e2649a50, f def largestPower ( n , p ) :				    def largestPower ( n , p ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  x = 0							    	x = 0							  
2 STORE_FAST 2 ( x )					      	  while n :						    	while n :						  
							      	      n /= p						    	    n /= p						  
3 4 SETUP_LOOP 24 ( to 30 )				      	      x += n						    	    x += n						  
>> 6 LOAD_FAST 0 ( n )					      	  return x						    	return x						  
8 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 1 ( p )					      								    								  
14 INPLACE_TRUE_DIVIDE					      								    								  
16 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( x )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 INPLACE_ADD						      								    								  
24 STORE_FAST 2 ( x )					      								    								  
26 JUMP_ABSOLUTE 6					      								    								  
>> 28 POP_BLOCK						      								    								  
							      								    								  
6 >> 30 LOAD_FAST 2 ( x )				      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
Disassembly of <code object find at 0x7f33e2649a50, file "<di def find ( n , k ) :					    def find ( n , k ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n + 1 >= k ) :					    	if n + 1 >= k :						  
2 LOAD_CONST 1 ( 1 )					      	      return ( k - 1 )					    	    return k - 1					  
4 BINARY_ADD						      	  else :						    	else :							  
6 LOAD_FAST 1 ( k )					      	      return ( 2 * n + 1 - k )				    	    return 2 * n + 1 - k				  
8 COMPARE_OP 5 ( >= )					      								    								  
10 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 12 LOAD_FAST 1 ( k )					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_CONST 2 ( 2 )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( k )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 RETURN_VALUE						      								    								  
36 LOAD_CONST 0 ( None )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10
--							      --							    --								  --
Disassembly of <code object round at 0x7f33e2644930, file "<d def round ( n ) :						    def round ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  a = ( n // 10 ) * 10					    	a = n // 10 * 10					  
2 LOAD_CONST 1 ( 10 )					      	  b = a + 10						    	b = a + 10						  
4 BINARY_FLOOR_DIVIDE					      	  return ( b if n - a > b - n else a )			    	return ( b - a ) if ( n - a ) > ( b - n ) else ( a )	  
6 LOAD_CONST 1 ( 10 )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 STORE_FAST 1 ( a )					      								    								  
							      								    								  
3 12 LOAD_FAST 1 ( a )					      								    								  
14 LOAD_CONST 1 ( 10 )					      								    								  
16 BINARY_ADD						      								    								  
18 STORE_FAST 2 ( b )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 1 ( a )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_FAST 2 ( b )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
36 LOAD_FAST 2 ( b )					      								    								  
38 RETURN_VALUE						      								    								  
>> 40 LOAD_FAST 1 ( a )					      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
Disassembly of <code object sumDigits at 0x7f33e2644930, file def sumDigits ( no ) :					    def sumDigits ( no ) :					  success : identical to gold
2 0 LOAD_FAST 0 ( no )					      	  return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 	return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 
2 LOAD_CONST 1 ( 0 )					      								    								  
4 COMPARE_OP 2 ( == )					      								    								  
6 POP_JUMP_IF_FALSE 12					      								    								  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 RETURN_VALUE						      								    								  
>> 12 LOAD_GLOBAL 0 ( int )				      								    								  
14 LOAD_FAST 0 ( no )					      								    								  
16 LOAD_CONST 2 ( 10 )					      								    								  
18 BINARY_MODULO					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_GLOBAL 1 ( sumDigits )				      								    								  
24 LOAD_GLOBAL 0 ( int )				      								    								  
26 LOAD_FAST 0 ( no )					      								    								  
28 LOAD_CONST 2 ( 10 )					      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 BINARY_ADD						      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object addOne at 0x7f33e2649a50, file "< def addOne ( x ) :					    def addOne ( x ) :						  failure : #Results: 3, 10
2 0 LOAD_CONST 1 ( 1 )					      	  m = 1 ;						    	m = 1							  
2 STORE_FAST 1 ( m )					      	  while ( x & m ) :					    	while x & m :						  
							      	      x = x ^ m						    	    x = x ^ m						  
3 4 SETUP_LOOP 28 ( to 34 )				      	      m <<= 1						    	    m = m ^ 1						  
>> 6 LOAD_FAST 0 ( x )					      	  x = x ^ m						    	x = x ^ m						  
8 LOAD_FAST 1 ( m )					      	  return x						    	return x						  
10 BINARY_AND						      								    								  
12 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( x )					      								    								  
16 LOAD_FAST 1 ( m )					      								    								  
18 BINARY_XOR						      								    								  
20 STORE_FAST 0 ( x )					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( m )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 INPLACE_LSHIFT					      								    								  
28 STORE_FAST 1 ( m )					      								    								  
30 JUMP_ABSOLUTE 6					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 LOAD_FAST 0 ( x )				      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 BINARY_XOR						      								    								  
40 STORE_FAST 0 ( x )					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( x )					      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
Disassembly of <code object Add at 0x7f33e2653ed0, file "<dis def Add ( x , y ) :					    def Add ( x , y ) :						  success : None
2 0 SETUP_LOOP 36 ( to 38 )				      	  while ( y != 0 ) :					    	while y != 0 :						  
>> 2 LOAD_FAST 1 ( y )					      	      carry = x & y					    	    carry = x & y					  
4 LOAD_CONST 1 ( 0 )					      	      x = x ^ y						    	    x = x ^ y						  
6 COMPARE_OP 3 ( != )					      	      y = carry << 1					    	    y = carry << 1					  
8 POP_JUMP_IF_FALSE 36					      	  return x						    	return x						  
							      								    								  
3 10 LOAD_FAST 0 ( x )					      								    								  
12 LOAD_FAST 1 ( y )					      								    								  
14 BINARY_AND						      								    								  
16 STORE_FAST 2 ( carry )				      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( x )					      								    								  
20 LOAD_FAST 1 ( y )					      								    								  
22 BINARY_XOR						      								    								  
24 STORE_FAST 0 ( x )					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( carry )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_LSHIFT					      								    								  
32 STORE_FAST 1 ( y )					      								    								  
34 JUMP_ABSOLUTE 2					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 0 ( x )				      								    								  
40 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2649a50, file " def findSum ( N , K ) :					    def findSum ( N , K ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	ans = 0							  
2 STORE_FAST 2 ( ans )					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  
							      	      ans += ( i % K ) ;				    	    ans += i % K					  
3 4 SETUP_LOOP 34 ( to 40 )				      	  return ans ;						    	return ans						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 0 ( N )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 16 ( to 38 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( ans )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_FAST 1 ( K )					      								    								  
30 BINARY_MODULO					      								    								  
32 INPLACE_ADD						      								    								  
34 STORE_FAST 2 ( ans )					      								    								  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_FAST 2 ( ans )				      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
Disassembly of <code object leonardo at 0x7f33e2653f60, file  def leonardo ( n ) :					    def leonardo ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;  	return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1	  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( leonardo )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 LOAD_GLOBAL 0 ( leonardo )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2653f60, file " def findSum ( n ) :					    def findSum ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      sum += i * ( n - i )				    	    sum += i * ( n - i )				  
3 4 SETUP_LOOP 32 ( to 38 )				      	  return 2 * sum					    	return 2 * sum						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 20 ( to 36 )				      								    								  
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 1 ( sum )				      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( sum )					      								    								  
34 JUMP_ABSOLUTE 14					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_CONST 2 ( 2 )				      								    								  
40 LOAD_FAST 1 ( sum )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
Disassembly of <code object findLarger at 0x7f33e2649150, fil def findLarger ( arr , n ) :				    def findLarger ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sorted )				      	  x = sorted ( arr )					    	x = sorted ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  for i in range ( n / 2 , n ) :			    	for i in range ( n / 2 , n ) :				  
4 CALL_FUNCTION 1					      	      print ( x [ i ] ) ,				    	    print ( x [ i ] )					  
6 STORE_FAST 2 ( x )					      								    								  
							      								    								  
3 8 SETUP_LOOP 36 ( to 46 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 LOAD_CONST 1 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 18 ( to 44 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 2 ( print )				      								    								  
30 LOAD_FAST 2 ( x )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 BUILD_TUPLE 1					      								    								  
40 POP_TOP						      								    								  
42 JUMP_ABSOLUTE 24					      								    								  
>> 44 POP_BLOCK						      								    								  
>> 46 LOAD_CONST 0 ( None )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
Disassembly of <code object nswp at 0x7f33e2649a50, file "<di def nswp ( n ) :						    def nswp ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 0 or n == 1 :					    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		    	return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 3 ( 2 )				      								    								  
22 LOAD_GLOBAL 0 ( nswp )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_GLOBAL 0 ( nswp )				      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 3 ( 2 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object findExtra at 0x7f33e2644f60, file def findExtra ( arr1 , arr2 , n ) :			    def findExtra ( arr1 , arr2 , n ) :				  success : None
2 0 SETUP_LOOP 38 ( to 40 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr1 [ i ] != arr2 [ i ] ) :			    	    if arr1 [ i ] != arr2 [ i ] :			  
4 LOAD_CONST 1 ( 0 )					      		  return i					    		return i					  
6 LOAD_FAST 2 ( n )					      	  return n						    	return n						  
8 CALL_FUNCTION 2					      								    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 24 ( to 38 )				      								    								  
14 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arr1 )				      								    								  
18 LOAD_FAST 3 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_FAST 1 ( arr2 )					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 COMPARE_OP 3 ( != )					      								    								  
30 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 32 LOAD_FAST 3 ( i )					      								    								  
34 RETURN_VALUE						      								    								  
36 JUMP_ABSOLUTE 12					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_FAST 2 ( n )				      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
Disassembly of <code object pythagorean_quadruple at 0x7f33e2 def pythagorean_quadruple ( a , b , c , d ) :		    def pythagorean_quadruple ( a , b , c , d ) :		  success : None
2 0 LOAD_FAST 0 ( a )					      	  sum = a * a + b * b + c * c ;				    	sum = a * a + b * b + c * c				  
2 LOAD_FAST 0 ( a )					      	  if ( d * d == sum ) :					    	if d * d == sum :					  
4 BINARY_MULTIPLY					      	      return True					    	    return True						  
6 LOAD_FAST 1 ( b )					      	  else :						    	else :							  
8 LOAD_FAST 1 ( b )					      	      return False					    	    return False					  
10 BINARY_MULTIPLY					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_FAST 2 ( c )					      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 BINARY_ADD						      								    								  
22 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
3 24 LOAD_FAST 3 ( d )					      								    								  
26 LOAD_FAST 3 ( d )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 4 ( sum )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
4 36 LOAD_CONST 1 ( True )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_CONST 2 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 LOAD_CONST 0 ( None )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS      PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
Disassembly of <code object isProduct at 0x7f33e26494b0, file def isProduct ( arr , n , x ) :				    def isProduct ( arr ) :					  script_not_found : None
2 0 SETUP_LOOP 42 ( to 44 )				      	  for i in arr :					    	for i in arr :						  
2 LOAD_FAST 0 ( arr )					      	      for j in arr :					    	    for j in arr :					  
4 GET_ITER						      		  if i * j == x :				    		if i * j == x :					  
>> 6 FOR_ITER 34 ( to 42 )				      		      return True				    		    return True					  
8 STORE_FAST 3 ( i )					      	  return False						    	return False						  
							      								    								  
3 10 SETUP_LOOP 28 ( to 40 )				      								    								  
12 LOAD_FAST 0 ( arr )					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 20 ( to 38 )				      								    								  
18 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 20 LOAD_FAST 3 ( i )					      								    								  
22 LOAD_FAST 4 ( j )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 LOAD_CONST 1 ( True )				      								    								  
34 RETURN_VALUE						      								    								  
36 JUMP_ABSOLUTE 16					      								    								  
>> 38 POP_BLOCK						      								    								  
>> 40 JUMP_ABSOLUTE 6					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_CONST 2 ( False )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
Disassembly of <code object first at 0x7f33e2644f60, file "<d def first ( str ) :					    def first ( str ) :						  success : None
2 0 SETUP_LOOP 42 ( to 44 )				      	  for i in range ( 0 , len ( str ) ) :			    	for i in range ( 0 , len ( str ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if ( str [ i ].istitle ( ) ) :			    	    if str [ i ].istitle ( ) :				  
4 LOAD_CONST 1 ( 0 )					      		  return str [ i ]				    		return str [ i ]				  
6 LOAD_GLOBAL 1 ( len )					      	  return 0						    	return 0						  
8 LOAD_FAST 0 ( str )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 24 ( to 42 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( str )				      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_METHOD 2 ( istitle )				      								    								  
28 CALL_METHOD 0					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( str )				      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 RETURN_VALUE						      								    								  
40 JUMP_ABSOLUTE 16					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_CONST 1 ( 0 )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
Disassembly of <code object divisorSum at 0x7f33e26494b0, fil def divisorSum ( n ) :					    def divisorSum ( n ) :					  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
							      	      sum += int ( n / i ) * i				    	    sum += int ( n / i ) * i				  
3 4 SETUP_LOOP 42 ( to 48 )				      	  return int ( sum )					    	return int ( sum )					  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( sum )				      								    								  
26 LOAD_GLOBAL 1 ( int )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 1 ( sum )					      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_FAST 1 ( sum )					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object myCopy at 0x7f33e2653f60, file "< def myCopy ( s1 , s2 , index ) :				    def myCopy ( s1 , s2 , index ) :				  success : None
2 0 LOAD_FAST 0 ( s1 )					      	  s2 [ index ] = s1 [ index ] ;				    	s2 [ index ] = s1 [ index ]				  
2 LOAD_FAST 2 ( index )					      	  if ( index == len ( s1 ) - 1 ) :			    	if index == len ( s1 ) - 1 :				  
4 BINARY_SUBSCR						      	      return ;						    	    return						  
6 LOAD_FAST 1 ( s2 )					      	  myCopy ( s1 , s2 , index + 1 ) ;			    	myCopy ( s1 , s2 , index + 1 )				  
8 LOAD_FAST 2 ( index )					      								    								  
10 STORE_SUBSCR						      								    								  
							      								    								  
3 12 LOAD_FAST 2 ( index )				      								    								  
14 LOAD_GLOBAL 0 ( len )				      								    								  
16 LOAD_FAST 0 ( s1 )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
4 28 LOAD_CONST 0 ( None )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
5 >> 32 LOAD_GLOBAL 1 ( myCopy )			      								    								  
34 LOAD_FAST 0 ( s1 )					      								    								  
36 LOAD_FAST 1 ( s2 )					      								    								  
38 LOAD_FAST 2 ( index )				      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 3					      								    								  
46 POP_TOP						      								    								  
48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
Disassembly of <code object allCharactersSame at 0x7f33e2653e def allCharactersSame ( s ) :				    def allCharactersSame ( s ) :				  success : identical to gold
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
4 CALL_FUNCTION 1					      	      if s [ i ] != s [ 0 ] :				    	    if s [ i ] != s [ 0 ] :				  
6 STORE_FAST 1 ( n )					      		  return False					    		return False					  
							      	  return True						    	return True						  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_CONST 3 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_CONST 4 ( True )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object count at 0x7f33e2653ed0, file "<d def count ( s , c ) :					    def count ( s , c ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( len ( s ) ) :			    	for i in range ( len ( s ) ) :				  
							      	      if ( s [ i ] == c ) :				    	    if s [ i ] == c :					  
3 4 SETUP_LOOP 40 ( to 46 )				      		  res = res + 1					    		res = res + 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return res						    	return res						  
8 LOAD_GLOBAL 1 ( len )					      								    								  
10 LOAD_FAST 0 ( s )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 24 ( to 44 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 1 ( c )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 34 LOAD_FAST 2 ( res )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 2 ( res )					      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 2 ( res )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
Disassembly of <code object <<unk>> ways at 0x7f33e2644f60, f def <<unk>> ways ( n , k ) :				    def <unk> ways ( n , k = 0 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  p = 1							    	p = 1							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( p )					      	  if ( k % 2 ) :					    	if k % 2 :						  _sa.valid/NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRE
							      	      p = - 1						    	    p = - 1						  CTED_COMPLETE_CONNECTED_GRAPH_N_NODES.py", line 24
3 4 LOAD_FAST 1 ( k )					      	  return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	    	return pow ( n - 1 , k ) * ( p * ( n - 1 ) ) / n	       def f_filled ways ( n , k = 0 ) :
6 LOAD_CONST 2 ( 2 )					      								    								  	   ^ SyntaxError: invalid syntax
8 BINARY_MODULO						      								    								  
10 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 12 LOAD_CONST 3 ( - 1 )				      								    								  
14 STORE_FAST 2 ( p )					      								    								  
							      								    								  
5 >> 16 LOAD_GLOBAL 0 ( pow )				      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 LOAD_FAST 1 ( k )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 LOAD_FAST 2 ( p )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
Disassembly of <code object reverse at 0x7f33e26494b0, file " def reverse ( string ) :					    def reverse ( string ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  if len ( string ) == 0 :				    	if len ( string ) == 0 :				  
2 LOAD_FAST 0 ( string )				      	      return						    	    return None						  
4 CALL_FUNCTION 1					      	  temp = string [ 0 ]					    	temp = string [ 0 ]					  
6 LOAD_CONST 1 ( 0 )					      	  reverse ( string [ 1 : ] )				    	reverse ( string [ 1 : ] )				  
8 COMPARE_OP 2 ( == )					      	  print ( temp , end = '' )				    	print ( temp , end = '' )				  
10 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
3 12 LOAD_CONST 0 ( None )				      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( string )				      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 STORE_FAST 1 ( temp )				      								    								  
							      								    								  
5 24 LOAD_GLOBAL 1 ( reverse )				      								    								  
26 LOAD_FAST 0 ( string )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_CONST 0 ( None )				      								    								  
32 BUILD_SLICE 2					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 POP_TOP						      								    								  
							      								    								  
6 40 LOAD_GLOBAL 2 ( print )				      								    								  
42 LOAD_FAST 1 ( temp )					      								    								  
44 LOAD_CONST 3 ( '' )					      								    								  
46 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
48 CALL_FUNCTION_KW 2					      								    								  
50 POP_TOP						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object kLargest at 0x7f33e2653f60, file  def kLargest ( arr , k ) :				    def kLargest ( arr , k ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( reverse = True )				    	arr.sort ( reverse = True )				  
2 LOAD_ATTR 0 ( sort )					      	  for i in range ( k ) :				    	for i in range ( k ) :					  
4 LOAD_CONST 1 ( True )					      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] , end = " " )			  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      								    								  
8 CALL_FUNCTION_KW 1					      								    								  
10 POP_TOP						      								    								  
							      								    								  
3 12 SETUP_LOOP 32 ( to 46 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 1 ( k )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 26 LOAD_GLOBAL 2 ( print )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 3 ( ' ' )					      								    								  
36 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
38 CALL_FUNCTION_KW 2					      								    								  
40 POP_TOP						      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
>> 46 LOAD_CONST 0 ( None )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
Disassembly of <code object mod at 0x7f33e2649a50, file "<dis def mod ( num , a ) :					    def mod ( num , a ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , len ( num ) ) :			    	for i in range ( 0 , len ( num ) ) :			  
							      	      res = ( res * 10 + int ( num [ i ] ) ) % a ;	    	    res = ( res * 10 + int ( num [ i ] ) ) % a		  
3 4 SETUP_LOOP 46 ( to 52 )				      	  return res						    	return res						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( num )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 28 ( to 50 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( res )				      								    								  
26 LOAD_CONST 2 ( 10 )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_GLOBAL 2 ( int )				      								    								  
32 LOAD_FAST 0 ( num )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( a )					      								    								  
44 BINARY_MODULO					      								    								  
46 STORE_FAST 2 ( res )					      								    								  
48 JUMP_ABSOLUTE 20					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_FAST 2 ( res )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
Disassembly of <code object findRoot at 0x7f33e2644930, file  def findRoot ( arr , n ) :				    def findRoot ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  root = 0						    	root = 0						  
2 STORE_FAST 2 ( root )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	    	    root += arr [ i ] [ 0 ] - arr [ i ] [ 1 ]		  
3 4 SETUP_LOOP 44 ( to 50 )				      	  return root						    	return root						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 32 ( to 48 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( root )				      								    								  
20 LOAD_FAST 0 ( arr )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 2 ( root )				      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
5 >> 50 LOAD_FAST 2 ( root )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
Disassembly of <code object countSetBitsRec at 0x7f33e2644f60 def countSetBitsRec ( num ) :				    def countSetBitsRec ( num ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  nibble = 0 ;						    	720 = 0							  
2 STORE_FAST 1 ( nibble )				      	  if ( 0 == num ) :					    	if 0 == num :						  
							      	      return num_to_bits [ 0 ] ;			    	    return num_to_bits [ 0 ]				  
3 4 LOAD_CONST 1 ( 0 )					      	  nibble = num & 0xf ;					    	except :						  
6 LOAD_FAST 0 ( num )					      	  return num_to_bits [ nibble ] + countSetBitsRec ( num >>  	    return num & 15					  
8 COMPARE_OP 2 ( == )					      								    	return num_to_bits [ JUMP_FORWARD ] + countSetBitsRec ( n 
10 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
4 12 LOAD_GLOBAL 0 ( num_to_bits )			      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 BINARY_SUBSCR					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_FAST 0 ( num )				      								    								  
22 LOAD_CONST 2 ( 15 )					      								    								  
24 BINARY_AND						      								    								  
26 STORE_FAST 1 ( nibble )				      								    								  
							      								    								  
6 28 LOAD_GLOBAL 0 ( num_to_bits )			      								    								  
30 LOAD_FAST 1 ( nibble )				      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_GLOBAL 1 ( countSetBitsRec )			      								    								  
36 LOAD_FAST 0 ( num )					      								    								  
38 LOAD_CONST 3 ( 4 )					      								    								  
40 BINARY_RSHIFT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
Disassembly of <code object calc_Expectation at 0x7f33e2649a5 def calc_Expectation ( a , n ) :				    def calc_Expectation ( a , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  prb = 1 / n						    	prb = 1 / n						  
2 LOAD_FAST 1 ( n )					      	  sum = 0						    	sum = 0							  
4 BINARY_TRUE_DIVIDE					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 2 ( prb )					      	      sum += ( a [ i ] * prb )				    	    sum += ( a [ i ] * prb )				  
							      	  return float ( sum )					    	return float ( sum )					  
3 8 LOAD_CONST 2 ( 0 )					      								    								  
10 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
4 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 2 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( sum )				      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 2 ( prb )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 3 ( sum )					      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_GLOBAL 1 ( float )				      								    								  
50 LOAD_FAST 3 ( sum )					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
Disassembly of <code object transpose at 0x7f33e2644930, file def transpose ( A , B ) :					    def transpose ( A , B ) :					  script_not_found : None
2 0 SETUP_LOOP 54 ( to 56 )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
4 LOAD_GLOBAL 1 ( N )					      		  B [ i ] [ j ] = A [ j ] [ i ]			    		B [ i ] [ j ] = A [ j ] [ i ]			  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 42 ( to 54 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 36 ( to 52 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 24 ( to 50 )				      								    								  
26 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( j )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 24					      								    								  
>> 50 POP_BLOCK						      								    								  
>> 52 JUMP_ABSOLUTE 10					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
Disassembly of <code object numberOfWays at 0x7f33e2653ed0, f def numberOfWays ( x ) :					    def numberOfWays ( x ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  if x == 0 or x == 1 :					    	if x == 0 or x == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  else :						    	else :							  
6 POP_JUMP_IF_TRUE 16					      	      return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	    return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfW 
8 LOAD_FAST 0 ( x )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_GLOBAL 0 ( numberOfWays )			      								    								  
22 LOAD_FAST 0 ( x )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 LOAD_FAST 0 ( x )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_GLOBAL 0 ( numberOfWays )			      								    								  
38 LOAD_FAST 0 ( x )					      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 BINARY_ADD						      								    								  
50 RETURN_VALUE						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
Disassembly of <code object getMissingNo at 0x7f33e2644930, f def getMissingNo ( a , n ) :				    def getMissingNo ( a , n ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( ( 0 , 1 ) )				      	  i , total = 0 , 1					    	i , total = 0 , 1					  
2 UNPACK_SEQUENCE 2					      	  for i in range ( 2 , n + 2 ) :			    	for i in range ( 2 , n + 2 ) :				  
4 STORE_FAST 2 ( i )					      	      total += i					    	    total += i						  
6 STORE_FAST 3 ( total )				      	      total -= a [ i - 2 ]				    	    total -= a [ i - 2 ]				  
							      	  return total						    	return total						  
3 8 SETUP_LOOP 46 ( to 56 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 2 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 28 ( to 54 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 3 ( total )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 INPLACE_ADD						      								    								  
34 STORE_FAST 3 ( total )				      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( total )				      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 BINARY_SUBSCR					      								    								  
48 INPLACE_SUBTRACT					      								    								  
50 STORE_FAST 3 ( total )				      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
6 >> 56 LOAD_FAST 3 ( total )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
Disassembly of <code object seiresSum at 0x7f33e2653ed0, file def seiresSum ( n , a ) :					    def seiresSum ( n , a ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [  	return n * ( a [ 0 ] * a [ 0 ] ) * ( a [ 2 * n - 1 ] * a  
2 LOAD_FAST 1 ( a )					      								    								  
4 LOAD_CONST 1 ( 0 )					      								    								  
6 BINARY_SUBSCR						      								    								  
8 LOAD_FAST 1 ( a )					      								    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 1 ( a )					      								    								  
18 LOAD_CONST 2 ( 2 )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( a )					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_CONST 2 ( 2 )					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7f33e2653ed0, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  p = 1							    	p = 1							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( p )					      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and n & ( n - 1 ) :				  _sa.valid/SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUA
							      	      return n						    	    return n						  L_TO_N_1.py", line 31	    p = p LOAD_CONST 1 ( 1 )
3 4 LOAD_FAST 0 ( n )					      	  while ( p < n ) :					    	while p < n :						  		      ^ SyntaxError: invalid syntax
6 POP_JUMP_IF_FALSE 24					      	      p <<= 1						    	    p = p LOAD_CONST 1 ( 1 )				  
8 LOAD_FAST 0 ( n )					      	  return p ;						    	return p						  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 20 ( to 46 )				      								    								  
>> 26 LOAD_FAST 1 ( p )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( p )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 INPLACE_LSHIFT					      								    								  
40 STORE_FAST 1 ( p )					      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_FAST 1 ( p )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
Disassembly of <code object findNth at 0x7f33e2644f60, file " def findNth ( n ) :					    def findNth ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 19 )					      	  nthElement = 19 + ( n - 1 ) * 9			    	nthElement = 19 + ( n - 1 ) * 9 )			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( n )					      	  outliersCount = int ( math.log10 ( nthElement ) ) - 1	    	outliersCount = int ( math.log10 ( nthElement ) ) - 1	  _sa.valid/N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
4 LOAD_CONST 2 ( 1 )					      	  nthElement += 9 * outliersCount			    	nthElement += 9 * outliersCount				  .py", line 27	    nthElement = 19 + ( n - 1 ) * 9
6 BINARY_SUBTRACT					      	  return nthElement					    	return nthElement					  )					^ SyntaxErro
8 LOAD_CONST 3 ( 9 )					      								    								  r: invalid syntax
10 BINARY_MULTIPLY					      								    								  
12 BINARY_ADD						      								    								  
14 STORE_FAST 1 ( nthElement )				      								    								  
							      								    								  
3 16 LOAD_GLOBAL 0 ( int )				      								    								  
18 LOAD_GLOBAL 1 ( math )				      								    								  
20 LOAD_METHOD 2 ( log10 )				      								    								  
22 LOAD_FAST 1 ( nthElement )				      								    								  
24 CALL_METHOD 1					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 STORE_FAST 2 ( outliersCount )			      								    								  
							      								    								  
4 34 LOAD_FAST 1 ( nthElement )				      								    								  
36 LOAD_CONST 3 ( 9 )					      								    								  
38 LOAD_FAST 2 ( outliersCount )			      								    								  
40 BINARY_MULTIPLY					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( nthElement )				      								    								  
							      								    								  
5 46 LOAD_FAST 1 ( nthElement )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
Disassembly of <code object countDyckPaths at 0x7f33e2644930, def countDyckPaths ( n ) :				    def countDyckPaths ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = 1							  
2 STORE_FAST 1 ( res )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      res *= ( 2 * n - i )				    	    res *= 2 * n - i					  
3 4 SETUP_LOOP 46 ( to 52 )				      	      res /= ( i + 1 )					    	    res /= i + 1					  
6 LOAD_GLOBAL 0 ( range )				      	  return res / ( n + 1 )				    	return res / n + 1					  
8 LOAD_CONST 2 ( 0 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 1 ( res )				      								    								  
22 LOAD_CONST 3 ( 2 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 INPLACE_MULTIPLY					      								    								  
34 STORE_FAST 1 ( res )					      								    								  
							      								    								  
5 36 LOAD_FAST 1 ( res )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 INPLACE_TRUE_DIVIDE					      								    								  
46 STORE_FAST 1 ( res )					      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 LOAD_FAST 1 ( res )				      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7f33e2653f60, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
							      	      sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )		    	    sum = ( sum + 2 * i - 1 ) * i - 1			  
3 4 SETUP_LOOP 50 ( to 56 )				      	  return sum						    	return sum						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( sum )				      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 1 ( sum )					      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
5 >> 56 LOAD_FAST 1 ( sum )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
Disassembly of <code object lexSmallest at 0x7f33e2653ed0, fi def lexSmallest ( a , n ) :				    def lexSmallest ( a , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( reverse = True )				    	a.sort ( reverse = True )				  
2 LOAD_ATTR 0 ( sort )					      	  answer = ""						    	answer = ''						  
4 LOAD_CONST 1 ( True )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	      answer += a [ i ]					    	    answer += a [ i ]					  
8 CALL_FUNCTION_KW 1					      	  return answer						    	return answer						  
10 POP_TOP						      								    								  
							      								    								  
3 12 LOAD_CONST 3 ( '' )				      								    								  
14 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
4 16 SETUP_LOOP 28 ( to 46 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 16 ( to 44 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( answer )				      								    								  
32 LOAD_FAST 0 ( a )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( answer )				      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 2 ( answer )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
Disassembly of <code object doublefactorial at 0x7f33e2644930 def doublefactorial ( n ) :				    def doublefactorial ( n ) :					  success : None
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1 ;						    	res = 1							  
2 STORE_FAST 1 ( res )					      	  for i in range ( n , - 1 , - 2 ) :			    	for i in range ( n , - 1 , - 2 ) :			  
							      	      if ( i == 0 or i == 1 ) :				    	    if i == 0 or i == 1 :				  
3 4 SETUP_LOOP 48 ( to 54 )				      		  return res ;					    		return res					  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    res *= i						  
8 LOAD_FAST 0 ( n )					      		  res *= i ;					    								  
10 LOAD_CONST 2 ( - 1 )					      								    								  
12 LOAD_CONST 3 ( - 2 )					      								    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 32 ( to 52 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_CONST 4 ( 0 )					      								    								  
26 COMPARE_OP 2 ( == )					      								    								  
28 POP_JUMP_IF_TRUE 38					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
5 >> 38 LOAD_FAST 1 ( res )				      								    								  
40 RETURN_VALUE						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 1 ( res )				      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 INPLACE_MULTIPLY					      								    								  
48 STORE_FAST 1 ( res )					      								    								  
50 JUMP_ABSOLUTE 18					      								    								  
>> 52 POP_BLOCK						      								    								  
>> 54 LOAD_CONST 0 ( None )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI
--							      --							    --								  --
Disassembly of <code object countObtuseAngles at 0x7f33e2644f def countObtuseAngles ( a , b , k ) :			    def countObtuseAngles ( a , b , k ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( b )					      	  c1 = ( b - a ) - 1					    	c1 = ( b - a ) - 1					  
2 LOAD_FAST 0 ( a )					      	  c2 = ( k - b ) + ( a - 1 )				    	c2 = ( k - b ) + ( a - 1 )				  
4 BINARY_SUBTRACT					      	  if ( c1 == c2 ) :					    	if c1 == c2 :						  
6 LOAD_CONST 1 ( 1 )					      	      return 0						    	    return 0						  
8 BINARY_SUBTRACT					      	  return min ( c1 , c2 )				    	return min ( c1 , c2 )					  
10 STORE_FAST 3 ( c1 )					      								    								  
							      								    								  
3 12 LOAD_FAST 2 ( k )					      								    								  
14 LOAD_FAST 1 ( b )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 LOAD_FAST 0 ( a )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 4 ( c2 )					      								    								  
							      								    								  
4 28 LOAD_FAST 3 ( c1 )					      								    								  
30 LOAD_FAST 4 ( c2 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 36 LOAD_CONST 2 ( 0 )					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_GLOBAL 0 ( min )				      								    								  
42 LOAD_FAST 3 ( c1 )					      								    								  
44 LOAD_FAST 4 ( c2 )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
Disassembly of <code object breakSum at 0x7f33e2649150, file  def breakSum ( n ) :					    def breakSum ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return n						    	    return n						  
4 COMPARE_OP 2 ( == )					      	  return max ( ( breakSum ( n // 2 ) + breakSum ( n // 3 )  	return max ( breakSum ( n // 2 ) + breakSum ( n // 3 ) +  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( max )				      								    								  
22 LOAD_GLOBAL 1 ( breakSum )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_FLOOR_DIVIDE					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 LOAD_GLOBAL 1 ( breakSum )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 4 ( 3 )					      								    								  
38 BINARY_FLOOR_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_GLOBAL 1 ( breakSum )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 5 ( 4 )					      								    								  
50 BINARY_FLOOR_DIVIDE					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
Disassembly of <code object smallest at 0x7f33e2644f60, file  def smallest ( x , y , z ) :				    def smallest ( x , y , z ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  c = 0							    	c = 0							  
2 STORE_FAST 3 ( c )					      	  while ( x and y and z ) :				    	while x and y and z :					  
							      	      x = x - 1						    	    x = x - 1						  
3 4 SETUP_LOOP 48 ( to 54 )				      	      y = y - 1						    	    y = y - 1						  
>> 6 LOAD_FAST 0 ( x )					      	      z = z - 1						    	    z = z - 1						  
8 POP_JUMP_IF_FALSE 52					      	      c = c + 1						    	    c = c + 1						  
10 LOAD_FAST 1 ( y )					      	  return c						    	return c						  
12 POP_JUMP_IF_FALSE 52					      								    								  
14 LOAD_FAST 2 ( z )					      								    								  
16 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( x )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 STORE_FAST 0 ( x )					      								    								  
							      								    								  
5 26 LOAD_FAST 1 ( y )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 STORE_FAST 1 ( y )					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( z )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 STORE_FAST 2 ( z )					      								    								  
							      								    								  
7 42 LOAD_FAST 3 ( c )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 3 ( c )					      								    								  
50 JUMP_ABSOLUTE 6					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 3 ( c )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T<
--							      --							    --								  --
Disassembly of <code object isPowerOfTwo at 0x7f33e2653ed0, f def isPowerOfTwo ( n ) :					    def isPowerOfTwo ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 2 ( == )					      	  while ( n != 1 ) :					    	while n != 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      if ( n % 2 != 0 ) :				    	    if n % 2 != 0 :					  
							      		  return False					    		return False					  
3 8 LOAD_CONST 2 ( False )				      	      n = n // 2					    	    n = n // 2						  
10 RETURN_VALUE						      	  return True						    	return True						  
							      								    								  
4 >> 12 SETUP_LOOP 36 ( to 50 )				      								    								  
>> 14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 3 ( 1 )					      								    								  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 4 ( 2 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 34 LOAD_CONST 2 ( False )				      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
7 >> 38 LOAD_FAST 0 ( n )				      								    								  
40 LOAD_CONST 4 ( 2 )					      								    								  
42 BINARY_FLOOR_DIVIDE					      								    								  
44 STORE_FAST 0 ( n )					      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_CONST 5 ( True )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRING_BINARY_SEQUENCE				      CONVERT_STRING_BINARY_SEQUENCE				    CONVERT_STRING_BINARY_SEQUENCE				  CONVERT_STRING_BINARY_SEQUENCE
--							      --							    --								  --
Disassembly of <code object strToBinary at 0x7f33e2649a50, fi def strToBinary ( s ) :					    def strToBinary ( s ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  bin_conv = [ ]					    	bin_conv = [ ]						  
2 STORE_FAST 1 ( bin_conv )				      	  for c in s :						    	for c in s :						  
							      	      ascii_val = ord ( c )				    	    ascii_val = ord ( c )				  
3 4 SETUP_LOOP 46 ( to 52 )				      	      binary_val = bin ( ascii_val )			    	    binary_val = bin ( ascii_val )			  
6 LOAD_FAST 0 ( s )					      	      bin_conv.append ( binary_val [ 2 : ] )		    	    bin_conv.append ( binary_val [ 2 : ] )		  
8 GET_ITER						      	  return ( ' '.join ( bin_conv ) )			    	return " ".join ( bin_conv )				  
>> 10 FOR_ITER 38 ( to 50 )				      								    								  
12 STORE_FAST 2 ( c )					      								    								  
							      								    								  
4 14 LOAD_GLOBAL 0 ( ord )				      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 STORE_FAST 3 ( ascii_val )				      								    								  
							      								    								  
5 22 LOAD_GLOBAL 1 ( bin )				      								    								  
24 LOAD_FAST 3 ( ascii_val )				      								    								  
26 CALL_FUNCTION 1					      								    								  
28 STORE_FAST 4 ( binary_val )				      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( bin_conv )				      								    								  
32 LOAD_METHOD 2 ( append )				      								    								  
34 LOAD_FAST 4 ( binary_val )				      								    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 LOAD_CONST 0 ( None )				      								    								  
40 BUILD_SLICE 2					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
48 JUMP_ABSOLUTE 10					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 LOAD_CONST 2 ( ' ' )				      								    								  
54 LOAD_METHOD 3 ( join )				      								    								  
56 LOAD_FAST 1 ( bin_conv )				      								    								  
58 CALL_METHOD 1					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
Disassembly of <code object isDivisible at 0x7f33e2644930, fi def isDivisible ( n ) :					    def isDivisible ( n ) :					  success : None
2 0 SETUP_LOOP 52 ( to 54 )				      	  while ( int ( n / 100 ) ) :				    	while int ( n / 100 ) :					  
>> 2 LOAD_GLOBAL 0 ( int )				      	      last_digit = int ( n % 10 )			    	    last_digit = int ( n % 10 )				  
4 LOAD_FAST 0 ( n )					      	      n = int ( n / 10 )				    	    n = int ( n / 10 )					  
6 LOAD_CONST 1 ( 100 )					      	      n += last_digit * 3				    	    n += ( last_digit * 3 )				  
8 BINARY_TRUE_DIVIDE					      	  return ( n % 29 == 0 )				    	return n % 29 == 0					  
10 CALL_FUNCTION 1					      								    								  
12 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
3 14 LOAD_GLOBAL 0 ( int )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 10 )					      								    								  
20 BINARY_MODULO					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 STORE_FAST 1 ( last_digit )				      								    								  
							      								    								  
4 26 LOAD_GLOBAL 0 ( int )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 2 ( 10 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_FAST 1 ( last_digit )				      								    								  
42 LOAD_CONST 3 ( 3 )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 0 ( n )					      								    								  
50 JUMP_ABSOLUTE 2					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
6 >> 54 LOAD_FAST 0 ( n )				      								    								  
56 LOAD_CONST 4 ( 29 )					      								    								  
58 BINARY_MODULO					      								    								  
60 LOAD_CONST 5 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
Disassembly of <code object zigzag at 0x7f33e2644f60, file "< def zigzag ( n , k ) :					    def zigzag ( n , k ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 and k == 0 ) :				    	if n == 0 and k == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( k == 0 ) :					    	if k == 0 :						  
6 POP_JUMP_IF_FALSE 20					      	      return 0						    	    return 0						  
8 LOAD_FAST 1 ( k )					      	  return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;  	return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k )	  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 16 LOAD_CONST 2 ( 1 )					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( k )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 1 ( 0 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( zigzag )			      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 1 ( k )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 LOAD_GLOBAL 0 ( zigzag )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_FAST 1 ( k )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_ADD						      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2653ed0, file " def findSum ( n ) :					    def findSum ( n ) :						  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  sm = 0						    	sm = 0							  
2 STORE_FAST 1 ( sm )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
							      	      for j in range ( i , n + 1 ) :			    	    for j in range ( i , n + 1 ) :			  
3 4 SETUP_LOOP 58 ( to 64 )				      		  sm = sm + i * j				    		sm = sm + i * j					  
6 LOAD_GLOBAL 0 ( range )				      	  return sm						    	return sm						  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 40 ( to 62 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 34 ( to 60 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 16 ( to 58 )				      								    								  
42 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 1 ( sm )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 1 ( sm )					      								    								  
56 JUMP_ABSOLUTE 40					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 JUMP_ABSOLUTE 20					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 1 ( sm )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
Disassembly of <code object rotate at 0x7f33e26494b0, file "< def rotate ( arr , n ) :					    def rotate ( arr , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  x = arr [ n - 1 ]					    	x = arr [ n - 1 ]					  
2 LOAD_FAST 1 ( n )					      	  for i in range ( n - 1 , 0 , - 1 ) :			    	for i in range ( n - 1 , 0 , - 1 ) :			  
4 LOAD_CONST 1 ( 1 )					      	      arr [ i ] = arr [ i - 1 ] ;			    	    arr [ i ] = arr [ i - 1 ]				  
6 BINARY_SUBTRACT					      	  arr [ 0 ] = x ;					    	arr [ 0 ] = x						  
8 BINARY_SUBSCR						      								    								  
10 STORE_FAST 2 ( x )					      								    								  
							      								    								  
3 12 SETUP_LOOP 40 ( to 54 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 0 )					      								    								  
24 LOAD_CONST 3 ( - 1 )					      								    								  
26 CALL_FUNCTION 3					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 20 ( to 52 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 STORE_SUBSCR						      								    								  
50 JUMP_ABSOLUTE 30					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
5 >> 54 LOAD_FAST 2 ( x )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_CONST 2 ( 0 )					      								    								  
60 STORE_SUBSCR						      								    								  
62 LOAD_CONST 0 ( None )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
Disassembly of <code object findMinZero at 0x7f33e2644930, fi def findMinZero ( p ) :					    def findMinZero ( p ) :					  success : None
2 0 LOAD_CONST 1 ( 1 )					      	  first = 1						    	first = 1						  
2 STORE_FAST 1 ( first )				      	  second = 1						    	second = 1						  
							      	  number = 2						    	number = 2						  
3 4 LOAD_CONST 1 ( 1 )					      	  next = 1						    	next = 1						  
6 STORE_FAST 2 ( second )				      	  while ( next ) :					    	while next :						  
							      	      next = ( first + second ) % p			    	    next = ( first + second ) % p			  
4 8 LOAD_CONST 2 ( 2 )					      	      first = second					    	    first = second					  
10 STORE_FAST 3 ( number )				      	      second = next					    	    second = next					  
							      	      number = number + 1				    	    number = number + 1					  
5 12 LOAD_CONST 1 ( 1 )					      	  return number						    	return number						  
14 STORE_FAST 4 ( next )				      								    								  
							      								    								  
6 16 SETUP_LOOP 36 ( to 54 )				      								    								  
>> 18 LOAD_FAST 4 ( next )				      								    								  
20 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 22 LOAD_FAST 1 ( first )				      								    								  
24 LOAD_FAST 2 ( second )				      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 0 ( p )					      								    								  
30 BINARY_MODULO					      								    								  
32 STORE_FAST 4 ( next )				      								    								  
							      								    								  
8 34 LOAD_FAST 2 ( second )				      								    								  
36 STORE_FAST 1 ( first )				      								    								  
							      								    								  
9 38 LOAD_FAST 4 ( next )				      								    								  
40 STORE_FAST 2 ( second )				      								    								  
							      								    								  
10 42 LOAD_FAST 3 ( number )				      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 3 ( number )				      								    								  
50 JUMP_ABSOLUTE 18					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
11 >> 54 LOAD_FAST 3 ( number )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
Disassembly of <code object printSeries at 0x7f33e2653ed0, fi def printSeries ( n ) :					    def printSeries ( n ) :					  script_not_found : None
2 0 SETUP_LOOP 58 ( to 60 )				      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      num = i * ( i + 1 ) * ( i + 2 ) // 6		    	    num = ( i * i + 1 ) // 6				  
4 LOAD_CONST 1 ( 1 )					      	      print ( num , end = ' ' )				    	    print ( num , end = " " )				  
6 LOAD_FAST 0 ( n )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_ADD						      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 40 ( to 58 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 1 ( i )					      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 BINARY_ADD						      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 3 ( 6 )					      								    								  
40 BINARY_FLOOR_DIVIDE					      								    								  
42 STORE_FAST 2 ( num )					      								    								  
							      								    								  
4 44 LOAD_GLOBAL 1 ( print )				      								    								  
46 LOAD_FAST 2 ( num )					      								    								  
48 LOAD_CONST 4 ( ' ' )					      								    								  
50 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
52 CALL_FUNCTION_KW 2					      								    								  
54 POP_TOP						      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
Disassembly of <code object remainder at 0x7f33e26494b0, file def remainder ( st ) :					    def remainder ( st ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  ln = len ( st )					    	ln = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  rem = 0						    	rem = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , ln ) :				    	for i in range ( 0 , ln ) :				  
6 STORE_FAST 1 ( ln )					      	      num = rem * 10 + ( int ) ( st [ i ] )		    	    num = rem * 10 + int ( st [ i ] )			  
							      	      rem = num % 11					    	    rem = num % 11					  
3 8 LOAD_CONST 1 ( 0 )					      	  return rem						    	return rem						  
10 STORE_FAST 2 ( rem )					      								    								  
							      								    								  
4 12 SETUP_LOOP 46 ( to 60 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( ln )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 32 ( to 58 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( rem )				      								    								  
30 LOAD_CONST 2 ( 10 )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_GLOBAL 2 ( int )				      								    								  
36 LOAD_FAST 0 ( st )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 STORE_FAST 4 ( num )					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( num )				      								    								  
50 LOAD_CONST 3 ( 11 )					      								    								  
52 BINARY_MODULO					      								    								  
54 STORE_FAST 2 ( rem )					      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
7 >> 60 LOAD_FAST 2 ( rem )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
Disassembly of <code object fib at 0x7f33e2653f60, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n < 6 :						    	if n < 6 :						  
2 LOAD_CONST 1 ( 6 )					      	      return f [ n ]					    	    return f [ n ]					  
4 COMPARE_OP 0 ( < )					      	  t = 5							    	t = 5							  
6 POP_JUMP_IF_FALSE 16					      	  fn = 5						    	fn = 5							  
							      	  while t < n :						    	while t < n :						  
3 8 LOAD_GLOBAL 0 ( f )					      	      fn = round ( fn * PHI )				    	    fn = round ( fn * PHI )				  
10 LOAD_FAST 0 ( n )					      	      t += 1						    	    t += 1						  
12 BINARY_SUBSCR					      	  return fn						    	return fn						  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_CONST 2 ( 5 )				      								    								  
18 STORE_FAST 1 ( t )					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 5 )					      								    								  
22 STORE_FAST 2 ( fn )					      								    								  
							      								    								  
6 24 SETUP_LOOP 32 ( to 58 )				      								    								  
>> 26 LOAD_FAST 1 ( t )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 34 LOAD_GLOBAL 1 ( round )				      								    								  
36 LOAD_FAST 2 ( fn )					      								    								  
38 LOAD_GLOBAL 2 ( PHI )				      								    								  
40 BINARY_MULTIPLY					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 STORE_FAST 2 ( fn )					      								    								  
							      								    								  
8 46 LOAD_FAST 1 ( t )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( t )					      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
9 >> 58 LOAD_FAST 2 ( fn )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	      CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	    CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION		  CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION
--							      --							    --								  --
Disassembly of <code object stirlingFactorial at 0x7f33e26491 def stirlingFactorial ( n ) :				    def stirlingFactorial ( n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1 ;					    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  e = 2.71 ;						    	e = ( 2.71 ) * n ) * math.pow ( n / e , n )		  
6 POP_JUMP_IF_FALSE 12					      	  z = ( math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , 	return math.floor ( z )					  
							      	  return math.floor ( z ) ;				    								  
3 8 LOAD_CONST 1 ( 1 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 2.71 )				      								    								  
14 STORE_FAST 1 ( e )					      								    								  
							      								    								  
5 16 LOAD_GLOBAL 0 ( math )				      								    								  
18 LOAD_METHOD 1 ( sqrt )				      								    								  
20 LOAD_CONST 3 ( 6.28 )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 CALL_METHOD 1					      								    								  
28 LOAD_GLOBAL 0 ( math )				      								    								  
30 LOAD_METHOD 2 ( pow )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 1 ( e )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 CALL_METHOD 2					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 STORE_FAST 2 ( z )					      								    								  
							      								    								  
6 46 LOAD_GLOBAL 0 ( math )				      								    								  
48 LOAD_METHOD 3 ( floor )				      								    								  
50 LOAD_FAST 2 ( z )					      								    								  
52 CALL_METHOD 1					      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI
--							      --							    --								  --
Disassembly of <code object findMaximum at 0x7f33e26494b0, fi def findMaximum ( arr , low , high ) :			    def findMaximum ( arr , low , high ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  max = arr [ low ]					    	max = arr [ low ]					  
2 LOAD_FAST 1 ( low )					      	  i = low						    	i = low							  
4 BINARY_SUBSCR						      	  for i in range ( high + 1 ) :				    	for i in range ( high + 1 ) :				  
6 STORE_FAST 3 ( max )					      	      if arr [ i ] > max :				    	    if arr [ i ] > max :				  
							      		  max = arr [ i ]				    		max = arr [ i ]					  
3 8 LOAD_FAST 1 ( low )					      	  return max						    	return max						  
10 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 12 SETUP_LOOP 40 ( to 54 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_FAST 2 ( high )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 24 ( to 52 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( max )					      								    								  
38 COMPARE_OP 4 ( > )					      								    								  
40 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_FAST 3 ( max )					      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_FAST 3 ( max )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
Disassembly of <code object MaximumHeight at 0x7f33e2649a50,  def MaximumHeight ( a , n ) :				    def MaximumHeight ( Maxim, n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  result = 1						    	result = 1						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( result )				      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  _sa.valid/MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT
							      	      y = ( i * ( i + 1 ) ) / 2				    	    y = ( i * ( i + 1 ) / 2				  _OF_ARRAY_VALUES.py", line 32	    if y < n :
3 4 SETUP_LOOP 50 ( to 56 )				      	      if ( y < n ) :					    	    if y < n :						  	  ^ SyntaxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      		  result = i					    		result = i					  
8 LOAD_CONST 1 ( 1 )					      	      else :						    	    else :						  
10 LOAD_FAST 1 ( n )					      		  break						    		break						  
12 CALL_FUNCTION 2					      	  return result						    	return result						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 36 ( to 54 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 3 ( i )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 2 ( 2 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 STORE_FAST 4 ( y )					      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( y )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
6 44 LOAD_FAST 3 ( i )					      								    								  
46 STORE_FAST 2 ( result )				      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
8 >> 50 BREAK_LOOP					      								    								  
52 JUMP_ABSOLUTE 16					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
9 >> 56 LOAD_FAST 2 ( result )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
Disassembly of <code object floorSqrt at 0x7f33e2644f60, file def floorSqrt ( x ) :					    def floorSqrt ( x ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( x )					      	  if ( x == 0 or x == 1 ) :				    	if x == 0 or x == 1 :					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	      return x						    	    return x						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/SQUAR
4 COMPARE_OP 2 ( == )					      	  i = 1 ; result = 1					    	i = 1							  E_ROOT_OF_AN_INTEGER.py", line 52, in <module>
6 POP_JUMP_IF_TRUE 16					      	  while ( result <= x ) :				    	while result <= x :					   if f_filled(*parameters_set) == f_gold(*parameter
8 LOAD_FAST 0 ( x )					      	      i += 1						    	    i += 1						  s_set):   File "/home/ubuntu/TransCoder/models/eva
10 LOAD_CONST 2 ( 1 )					      	      result = i * i					    	    result = i * i					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
12 COMPARE_OP 2 ( == )					      	  return i - 1						    	return i - 1						  _sa.valid/SQUARE_ROOT_OF_AN_INTEGER.py", line 31,
14 POP_JUMP_IF_FALSE 20					      								    								  in f_filled	  while result <= x : UnboundLocalEr
							      								    								  ror: local variable 'result' referenced before ass
3 >> 16 LOAD_FAST 0 ( x )				      								    								  ignment
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 2 ( 1 )				      								    								  
22 STORE_FAST 1 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 2 ( result )				      								    								  
							      								    								  
5 28 SETUP_LOOP 28 ( to 58 )				      								    								  
>> 30 LOAD_FAST 2 ( result )				      								    								  
32 LOAD_FAST 0 ( x )					      								    								  
34 COMPARE_OP 1 ( <= )					      								    								  
36 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 38 LOAD_FAST 1 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_FAST 1 ( i )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 STORE_FAST 2 ( result )				      								    								  
54 JUMP_ABSOLUTE 30					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 1 ( i )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7f33e26494b0, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( count )				      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and not n & ( n - 1 ) ) :				  _sa.valid/SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUA
							      	      return n						    	    return n						  L_TO_N.py", line 29	  if n and not n & ( n - 1 )
3 4 LOAD_FAST 0 ( n )					      	  while ( n != 0 ) :					    	while n != 0 :						   ) :				      ^ SyntaxError:
6 POP_JUMP_IF_FALSE 24					      	      n >>= 1						    	    n >>= 1						   invalid syntax
8 LOAD_FAST 0 ( n )					      	      count += 1					    	    count += 1						  
10 LOAD_FAST 0 ( n )					      	  return 1 << count ;					    	return 1 << count					  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 28 ( to 54 )				      								    								  
>> 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_RSHIFT					      								    								  
40 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 42 LOAD_FAST 1 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 1 ( count )				      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
8 >> 54 LOAD_CONST 2 ( 1 )				      								    								  
56 LOAD_FAST 1 ( count )				      								    								  
58 BINARY_LSHIFT					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
Disassembly of <code object isTriangular at 0x7f33e2649a50, f def isTriangular ( num ) :				    def isTriangular ( num ) :					  success : None
2 0 LOAD_FAST 0 ( num )					      	  if ( num < 0 ) :					    	if num < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 0 ( < )					      	  sum , n = 0 , 1					    	sum , n = ( 0 , 1 )					  
6 POP_JUMP_IF_FALSE 12					      	  while ( sum <= num ) :				    	while sum <= num :					  
							      	      sum = sum + n					    	    sum = ( sum + n )					  
3 8 LOAD_CONST 2 ( False )				      	      if ( sum == num ) :				    	    if sum == num :					  
10 RETURN_VALUE						      		  return True					    		return True					  
							      	      n += 1						    	    n += 1						  
4 >> 12 LOAD_CONST 3 ( ( 0 , 1 ) )			      	  return False						    	return False						  
14 UNPACK_SEQUENCE 2					      								    								  
16 STORE_FAST 1 ( sum )					      								    								  
18 STORE_FAST 2 ( n )					      								    								  
							      								    								  
5 20 SETUP_LOOP 40 ( to 62 )				      								    								  
>> 22 LOAD_FAST 1 ( sum )				      								    								  
24 LOAD_FAST 0 ( num )					      								    								  
26 COMPARE_OP 1 ( <= )					      								    								  
28 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( sum )				      								    								  
32 LOAD_FAST 2 ( n )					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( sum )				      								    								  
40 LOAD_FAST 0 ( num )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 46 LOAD_CONST 4 ( True )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
9 >> 50 LOAD_FAST 2 ( n )				      								    								  
52 LOAD_CONST 5 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 2 ( n )					      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
10 >> 62 LOAD_CONST 2 ( False )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e26494b0, file " def findSum ( n ) :					    def findSum ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  n -= 1						    	n -= 1							  
2 LOAD_CONST 1 ( 1 )					      	  sum = 0						    	sum = 0							  
4 INPLACE_SUBTRACT					      	  sum += ( n * ( n + 1 ) ) / 2				    	sum += ( n * ( n + 1 ) ) / 2				  
6 STORE_FAST 0 ( n )					      	  sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6		    	sum += ( n * ( n + 1 ) ) * ( 2 * n + 1 ) / 6		  
							      	  return int ( sum )					    	return int ( sum )					  
3 8 LOAD_CONST 2 ( 0 )					      								    								  
10 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
4 12 LOAD_FAST 1 ( sum )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 3 ( 2 )					      								    								  
26 BINARY_TRUE_DIVIDE					      								    								  
28 INPLACE_ADD						      								    								  
30 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 32 LOAD_FAST 1 ( sum )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_CONST 3 ( 2 )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_CONST 4 ( 6 )					      								    								  
58 BINARY_TRUE_DIVIDE					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 0 ( int )				      								    								  
66 LOAD_FAST 1 ( sum )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
Disassembly of <code object isDivisible at 0x7f33e2644930, fi def isDivisible ( str , k ) :				    def isDivisible ( str , k ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  c = 0							    	c = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , k ) :				    	for i in range ( 0 , k ) :				  
6 STORE_FAST 2 ( n )					      	      if ( str [ n - i - 1 ] == '0' ) :			    	    if str [ n - i - 1 ] == '0' :			  
							      		  c += 1					    		c += 1						  
3 8 LOAD_CONST 1 ( 0 )					      	  return ( c == k )					    	return c == k						  
10 STORE_FAST 3 ( c )					      								    								  
							      								    								  
4 12 SETUP_LOOP 46 ( to 60 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( k )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 32 ( to 58 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 2 ( n )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 3 ( '0' )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( c )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 3 ( c )					      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
7 >> 60 LOAD_FAST 3 ( c )				      								    								  
62 LOAD_FAST 1 ( k )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED     MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
Disassembly of <code object minValue at 0x7f33e2653ed0, file  def minValue ( A , B , n ) :				    def minValue ( A , B , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sorted )				      	  sorted ( A )						    	sorted ( A )						  
2 LOAD_FAST 0 ( A )					      	  sorted ( B )						    	sorted ( B )						  
4 CALL_FUNCTION 1					      	  result = 0						    	result = 0						  
6 POP_TOP						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      result += ( A [ i ] * B [ n - i - 1 ] )		    	    result += A [ i ] * ( B - n - i - 1 ) ]		  
3 8 LOAD_GLOBAL 0 ( sorted )				      	  return result						    	return result						  
10 LOAD_FAST 1 ( B )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( result )				      								    								  
							      								    								  
5 20 SETUP_LOOP 44 ( to 66 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 32 ( to 64 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( result )				      								    								  
36 LOAD_FAST 0 ( A )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 1 ( B )					      								    								  
44 LOAD_FAST 2 ( n )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( result )				      								    								  
62 JUMP_ABSOLUTE 30					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
7 >> 66 LOAD_FAST 3 ( result )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
Disassembly of <code object isReversible at 0x7f33e2644930, f def isReversible ( str ) :				    def isReversible ( str ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0 ; j = len ( str ) - 1 ;				    	i = 0							  
2 STORE_FAST 1 ( i )					      	  while ( i < j ) :					    	j = len ( str ) - 1					  
4 LOAD_GLOBAL 0 ( len )					      	      if ( str [ i ] != str [ j ] ) :			    	while i < j :						  
6 LOAD_FAST 0 ( str )					      		  return False ;				    	    if str [ i ] != str [ j ] :				  
8 CALL_FUNCTION 1					      	      i += 1 ;						    		return False					  
10 LOAD_CONST 2 ( 1 )					      	      j -= 1 ;						    	    i += 1						  
12 BINARY_SUBTRACT					      	  return True ;						    	    j -= 1						  
14 STORE_FAST 2 ( j )					      								    	return True						  
							      								    								  
3 16 SETUP_LOOP 48 ( to 66 )				      								    								  
>> 18 LOAD_FAST 1 ( i )					      								    								  
20 LOAD_FAST 2 ( j )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( str )				      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( str )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 3 ( != )					      								    								  
40 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
5 42 LOAD_CONST 3 ( False )				      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 1 ( i )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( j )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_SUBTRACT					      								    								  
60 STORE_FAST 2 ( j )					      								    								  
62 JUMP_ABSOLUTE 18					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
8 >> 66 LOAD_CONST 4 ( True )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
Disassembly of <code object decToBinary at 0x7f33e2649a50, fi def decToBinary ( n ) :					    def decToBinary ( n ) :					  script_not_found : None
2 0 SETUP_LOOP 62 ( to 64 )				      	  for i in range ( 31 , - 1 , - 1 ) :			    	for i in range ( 31 , - 1 , - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      k = n >> i ;					    	    k = n >> i						  
4 LOAD_CONST 1 ( 31 )					      	      if ( k & 1 ) :					    	    if k & 1 :						  
6 LOAD_CONST 2 ( - 1 )					      		  print ( "1" , end = "" ) ;			    		print ( '1' , end = '' )			  
8 LOAD_CONST 2 ( - 1 )					      	      else :						    	    else :						  
10 CALL_FUNCTION 3					      		  print ( "0" , end = "" ) ;			    		print ( '0' , end = '' )			  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 46 ( to 62 )				      								    								  
16 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_FAST 1 ( i )					      								    								  
22 BINARY_RSHIFT					      								    								  
24 STORE_FAST 2 ( k )					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( k )					      								    								  
28 LOAD_CONST 3 ( 1 )					      								    								  
30 BINARY_AND						      								    								  
32 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 34 LOAD_GLOBAL 1 ( print )				      								    								  
36 LOAD_CONST 4 ( '1' )					      								    								  
38 LOAD_CONST 5 ( '' )					      								    								  
40 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
42 CALL_FUNCTION_KW 2					      								    								  
44 POP_TOP						      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
7 >> 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 7 ( '0' )					      								    								  
52 LOAD_CONST 5 ( '' )					      								    								  
54 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
56 CALL_FUNCTION_KW 2					      								    								  
58 POP_TOP						      								    								  
60 JUMP_ABSOLUTE 14					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 LOAD_CONST 0 ( None )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object recSearch at 0x7f33e2653f60, file def recSearch ( arr , l , r , x ) :			    def recSearch ( arr , l , r , x ) :				  success : identical to gold
2 0 LOAD_FAST 2 ( r )					      	  if r < l :						    	if r < l :						  
2 LOAD_FAST 1 ( l )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 0 ( < )					      	  if arr [ l ] == x :					    	if arr [ l ] == x :					  
6 POP_JUMP_IF_FALSE 12					      	      return l						    	    return l						  
							      	  if arr [ r ] == x :					    	if arr [ r ] == x :					  
3 8 LOAD_CONST 1 ( - 1 )				      	      return r						    	    return r						  
10 RETURN_VALUE						      	  return recSearch ( arr , l + 1 , r - 1 , x )		    	return recSearch ( arr , l + 1 , r - 1 , x )		  
							      								    								  
4 >> 12 LOAD_FAST 0 ( arr )				      								    								  
14 LOAD_FAST 1 ( l )					      								    								  
16 BINARY_SUBSCR					      								    								  
18 LOAD_FAST 3 ( x )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 24 LOAD_FAST 1 ( l )					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 2 ( r )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( x )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 40 LOAD_FAST 2 ( r )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
8 >> 44 LOAD_GLOBAL 0 ( recSearch )			      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 1 ( l )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( r )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_FAST 3 ( x )					      								    								  
62 CALL_FUNCTION 4					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
Disassembly of <code object findStep at 0x7f33e2653f60, file  def findStep ( n ) :					    def findStep ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 1 or n == 0 ) :				    	if n == 1 or n == 0 :					  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  elif ( n == 2 ) :					    	if n == 2 :						  
6 POP_JUMP_IF_TRUE 16					      	      return 2						    	    return 2						  
8 LOAD_FAST 0 ( n )					      	  else :						    	else :							  
10 LOAD_CONST 2 ( 0 )					      	      return findStep ( n - 3 ) + findStep ( n - 2 ) + find 	    return findStep ( n - 3 ) + findStep ( n - 2 ) + find 
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_CONST 3 ( 2 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 3 ( 2 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
7 >> 32 LOAD_GLOBAL 0 ( findStep )			      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 4 ( 3 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_GLOBAL 0 ( findStep )				      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 3 ( 2 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_GLOBAL 0 ( findStep )				      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_ADD						      								    								  
66 RETURN_VALUE						      								    								  
68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
Disassembly of <code object maxProd at 0x7f33e2649a50, file " def maxProd ( n ) :					    def maxProd ( n ) :						  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 2 or n == 3 ) :				    	if n == 2 or n == 3 :					  
2 LOAD_CONST 1 ( 2 )					      	      return ( n - 1 )					    	    return n - 1					  
4 COMPARE_OP 2 ( == )					      	  res = 1						    	res = 1							  
6 POP_JUMP_IF_TRUE 16					      	  while ( n > 4 ) :					    	while n > 4 :						  
8 LOAD_FAST 0 ( n )					      	      n -= 3 ;						    	    n -= 3						  
10 LOAD_CONST 2 ( 3 )					      	      res *= 3 ;					    	    res *= 3						  
12 COMPARE_OP 2 ( == )					      	  return ( n * res )					    	return n * res						  
14 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
3 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_CONST 3 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_CONST 3 ( 1 )				      								    								  
26 STORE_FAST 1 ( res )					      								    								  
							      								    								  
5 28 SETUP_LOOP 28 ( to 58 )				      								    								  
>> 30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 4 ( 4 )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 3 )					      								    								  
42 INPLACE_SUBTRACT					      								    								  
44 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 46 LOAD_FAST 1 ( res )				      								    								  
48 LOAD_CONST 2 ( 3 )					      								    								  
50 INPLACE_MULTIPLY					      								    								  
52 STORE_FAST 1 ( res )					      								    								  
54 JUMP_ABSOLUTE 30					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 0 ( n )				      								    								  
60 LOAD_FAST 1 ( res )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING	      CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		    CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		  CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2644f60, file " def findSum ( str1 ) :					    def findSum ( str1 ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  temp = ""						    	temp = ""						  
2 STORE_FAST 1 ( temp )					      	  Sum = 0						    	Sum = 0							  
							      	  for ch in str1 :					    	for ch in str1 :					  
3 4 LOAD_CONST 2 ( 0 )					      	      if ( ch.isdigit ( ) ) :				    	    if ch.isdigit ( ) :					  
6 STORE_FAST 2 ( Sum )					      		  temp += ch					    		temp += ch					  
							      	      else :						    	    else :						  
4 8 SETUP_LOOP 46 ( to 56 )				      		  Sum += int ( temp )				    		Sum += int ( temp )				  
10 LOAD_FAST 0 ( str1 )					      		  temp = "0"					    		temp = '0'					  
12 GET_ITER						      	  return Sum + int ( temp )				    	return Sum + int ( temp )				  
>> 14 FOR_ITER 38 ( to 54 )				      								    								  
16 STORE_FAST 3 ( ch )					      								    								  
							      								    								  
5 18 LOAD_FAST 3 ( ch )					      								    								  
20 LOAD_METHOD 0 ( isdigit )				      								    								  
22 CALL_METHOD 0					      								    								  
24 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( temp )				      								    								  
28 LOAD_FAST 3 ( ch )					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( temp )				      								    								  
34 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
8 >> 36 LOAD_FAST 2 ( Sum )				      								    								  
38 LOAD_GLOBAL 1 ( int )				      								    								  
40 LOAD_FAST 1 ( temp )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 2 ( Sum )					      								    								  
							      								    								  
9 48 LOAD_CONST 3 ( '0' )				      								    								  
50 STORE_FAST 1 ( temp )				      								    								  
52 JUMP_ABSOLUTE 14					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
10 >> 56 LOAD_FAST 2 ( Sum )				      								    								  
58 LOAD_GLOBAL 1 ( int )				      								    								  
60 LOAD_FAST 1 ( temp )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_ADD						      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
Disassembly of <code object count at 0x7f33e2644f60, file "<d def count ( n , x ) :					    def count ( n , x ) :					  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  cnt = 0						    	cnt = 0							  
2 STORE_FAST 2 ( cnt )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
							      	      if i <= x :					    	    if i <= x :						  
3 4 SETUP_LOOP 62 ( to 68 )				      		  if x // i <= n and x % i == 0 :		    		if x // i <= n and x % i == 0 :			  
6 LOAD_GLOBAL 0 ( range )				      		      cnt += 1					    		    cnt += 1					  
8 LOAD_CONST 2 ( 1 )					      	  return cnt						    	return cnt						  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 44 ( to 66 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_FAST 1 ( x )					      								    								  
28 COMPARE_OP 1 ( <= )					      								    								  
30 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 32 LOAD_FAST 1 ( x )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_FLOOR_DIVIDE					      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 COMPARE_OP 1 ( <= )					      								    								  
42 POP_JUMP_IF_FALSE 20					      								    								  
44 LOAD_FAST 1 ( x )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( cnt )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( cnt )					      								    								  
64 JUMP_ABSOLUTE 20					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 2 ( cnt )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
Disassembly of <code object maxTasks at 0x7f33e26494b0, file  def maxTasks ( high , low , n ) :				    def maxTasks ( high , low , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 2 ( n )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/DYNAM
4 COMPARE_OP 1 ( <= )					      	  return max ( high [ n - 1 ] + maxTasks ( high , low , ( n 	return max ( high [ n - 1 ] + maxTasks ( high , low , n - IC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PRO
6 POP_JUMP_IF_FALSE 12					      								    								  BLEM.py", line 44, in <module>     if f_filled(*pa
							      								    								  rameters_set) == f_gold(*parameters_set):   File "
3 8 LOAD_CONST 1 ( 0 )					      								    								  /home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx8
10 RETURN_VALUE						      								    								  nnsvsdt/eval_scripts/dis_sa-python_sa.valid/DYNAMI
							      								    								  C_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROB
4 >> 12 LOAD_GLOBAL 0 ( max )				      								    								  LEM.py", line 26, in f_filled	    return max ( hig
14 LOAD_FAST 0 ( high )					      								    								  h [ n - 1 ] + f_filled ( high , low , n - 2 ) ) +
16 LOAD_FAST 2 ( n )					      								    								  ( low [ n - 1 ] + f_filled ( high , low , n - 1 )
18 LOAD_CONST 2 ( 1 )					      								    								  )   File "/home/ubuntu/TransCoder/models/eval/mt_s
20 BINARY_SUBTRACT					      								    								  a_1000/tx8nnsvsdt/eval_scripts/dis_sa-python_sa.va
22 BINARY_SUBSCR					      								    								  lid/DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_
24 LOAD_GLOBAL 1 ( maxTasks )				      								    								  TASKS_PROBLEM.py", line 26, in f_filled     return
26 LOAD_FAST 0 ( high )					      								    								   max ( high [ n - 1 ] + f_filled ( high , low , n
28 LOAD_FAST 1 ( low )					      								    								  - 2 ) ) + ( low [ n - 1 ] + f_filled ( high , low
30 LOAD_FAST 2 ( n )					      								    								  , n - 1 ) )	File "/home/ubuntu/TransCoder/models
32 LOAD_CONST 3 ( 2 )					      								    								  /eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-py
34 BINARY_SUBTRACT					      								    								  thon_sa.valid/DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_L
36 CALL_FUNCTION 3					      								    								  OW_EFFORT_TASKS_PROBLEM.py", line 26, in f_filled
38 BINARY_ADD						      								    								      return max ( high [ n - 1 ] + f_filled ( high
40 LOAD_FAST 1 ( low )					      								    								  , low , n - 2 ) ) + ( low [ n - 1 ] + f_filled ( h
42 LOAD_FAST 2 ( n )					      								    								  igh , low , n - 1 ) )	  [Previous line repeated 6
44 LOAD_CONST 2 ( 1 )					      								    								  more times] TypeError: 'int' object is not iterabl
46 BINARY_SUBTRACT					      								    								  e
48 BINARY_SUBSCR					      								    								  
50 LOAD_GLOBAL 1 ( maxTasks )				      								    								  
52 LOAD_FAST 0 ( high )					      								    								  
54 LOAD_FAST 1 ( low )					      								    								  
56 LOAD_FAST 2 ( n )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 2					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
Disassembly of <code object findS at 0x7f33e2653f60, file "<d def findS ( s ) :						    def findS ( s ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  _sum = 0						    	_sum = 0						  
2 STORE_FAST 1 ( _sum )					      	  n = 1							    	n = 1							  
							      	  while ( _sum < s ) :					    	while _sum < s :					  
3 4 LOAD_CONST 2 ( 1 )					      	      _sum += n * n * n					    	    _sum += ( n * n ) * n				  
6 STORE_FAST 2 ( n )					      	      n += 1						    	    n += 1						  
							      	  n -= 1						    	n -= 1							  
4 8 SETUP_LOOP 36 ( to 46 )				      	  if _sum == s :					    	if _sum == s :						  
>> 10 LOAD_FAST 1 ( _sum )				      	      return n						    	    return n						  
12 LOAD_FAST 0 ( s )					      	  return - 1						    	return - 1						  
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( _sum )				      								    								  
20 LOAD_FAST 2 ( n )					      								    								  
22 LOAD_FAST 2 ( n )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( _sum )				      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( n )					      								    								  
42 JUMP_ABSOLUTE 10					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_FAST 2 ( n )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 STORE_FAST 2 ( n )					      								    								  
							      								    								  
8 54 LOAD_FAST 1 ( _sum )				      								    								  
56 LOAD_FAST 0 ( s )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
9 62 LOAD_FAST 2 ( n )					      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
10 >> 66 LOAD_CONST 3 ( - 1 )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
Disassembly of <code object isOneFlip at 0x7f33e2649150, file def isOneFlip ( str ) :					    def isOneFlip ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  n = len ( str )					    	n = len ( str )						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_GLOBAL 0 ( len )				      	      sum += int ( str [ i ] ) - int ( '0' )		    	    sum += int ( str [ i ] ) - int ( '0' )		  
6 LOAD_FAST 0 ( str )					      	  return ( sum == n - 1 or sum == 1 )			    	return ( sum == n - 1 ) or ( sum == 1 )			  
8 CALL_FUNCTION 1					      								    								  
10 STORE_FAST 2 ( n )					      								    								  
							      								    								  
4 12 SETUP_LOOP 42 ( to 56 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 28 ( to 54 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( sum )				      								    								  
30 LOAD_GLOBAL 2 ( int )				      								    								  
32 LOAD_FAST 0 ( str )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 LOAD_GLOBAL 2 ( int )				      								    								  
42 LOAD_CONST 2 ( '0' )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 1 ( sum )					      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
6 >> 56 LOAD_FAST 1 ( sum )				      								    								  
58 LOAD_FAST 2 ( n )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 JUMP_IF_TRUE_OR_POP 74				      								    								  
68 LOAD_FAST 1 ( sum )					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
>> 74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			      FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			    FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			  FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
Disassembly of <code object subArrayExists at 0x7f33e2644930, def subArrayExists ( arr , n ) :				    def subArrayExists ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  sum = 0						    	sum = 0							  
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      sum += arr [ i ]					    	    sum += arr [ i ]					  
3 6 LOAD_CONST 1 ( 0 )					      	      if sum == 0 or sum in s :				    	    if sum == 0 or sum in s :				  
8 STORE_FAST 3 ( sum )					      		  return True					    		return True					  
							      	      s.add ( sum )					    	    s.add ( sum )					  
4 10 SETUP_LOOP 58 ( to 70 )				      	  return False						    	return False						  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 46 ( to 68 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 3 ( sum )				      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 INPLACE_ADD						      								    								  
34 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( sum )				      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_TRUE 52					      								    								  
44 LOAD_FAST 3 ( sum )					      								    								  
46 LOAD_FAST 2 ( s )					      								    								  
48 COMPARE_OP 6 ( in )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 >> 52 LOAD_CONST 2 ( True )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( s )				      								    								  
58 LOAD_METHOD 2 ( add )				      								    								  
60 LOAD_FAST 3 ( sum )					      								    								  
62 CALL_METHOD 1					      								    								  
64 POP_TOP						      								    								  
66 JUMP_ABSOLUTE 20					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_CONST 3 ( False )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
Disassembly of <code object maxPrefix at 0x7f33e2644f60, file def maxPrefix ( s , t ) :					    def maxPrefix ( s , t ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  for i in range ( 0 , len ( t ) ) :			    	for i in range ( 0 , len ( t ) ) :			  
							      	      if ( count == len ( s ) ) :			    	    if count == len ( s ) :				  
3 4 SETUP_LOOP 60 ( to 66 )				      		  break						    		break						  
6 LOAD_GLOBAL 0 ( range )				      	      if ( t [ i ] == s [ count ] ) :			    	    if t [ i ] == s [ count ] :				  
8 LOAD_CONST 1 ( 0 )					      		  count = count + 1				    		count = count + 1				  
10 LOAD_GLOBAL 1 ( len )				      	  return count						    	return count						  
12 LOAD_FAST 1 ( t )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 42 ( to 64 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( count )				      								    								  
26 LOAD_GLOBAL 1 ( len )				      								    								  
28 LOAD_FAST 0 ( s )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
5 36 BREAK_LOOP						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 1 ( t )				      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( s )					      								    								  
46 LOAD_FAST 2 ( count )				      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( count )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 2 ( count )				      								    								  
62 JUMP_ABSOLUTE 20					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
8 >> 66 LOAD_FAST 2 ( count )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
Disassembly of <code object kthdigit at 0x7f33e2644f60, file  def kthdigit ( a , b , k ) :				    def kthdigit ( a , b , k = 0 ) :				  success : None
2 0 LOAD_FAST 0 ( a )					      	  p = a ** b						    	p = a ** b						  
2 LOAD_FAST 1 ( b )					      	  count = 0						    	count = 0						  
4 BINARY_POWER						      	  while ( p > 0 and count < k ) :			    	while p > 0 and count < k :				  
6 STORE_FAST 3 ( p )					      	      rem = p % 10					    	    rem = ( p % 10 )					  
							      	      count = count + 1					    	    count = count + 1					  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( count == k ) :				    	    if count == k :					  
10 STORE_FAST 4 ( count )				      		  return rem					    		return rem					  
							      	      p = p / 10 ;					    	    p = p / 10						  
4 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 3 ( p )					      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
22 LOAD_FAST 4 ( count )				      								    								  
24 LOAD_FAST 2 ( k )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 30 LOAD_FAST 3 ( p )					      								    								  
32 LOAD_CONST 2 ( 10 )					      								    								  
34 BINARY_MODULO					      								    								  
36 STORE_FAST 5 ( rem )					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( count )				      								    								  
40 LOAD_CONST 3 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 4 ( count )				      								    								  
							      								    								  
7 46 LOAD_FAST 4 ( count )				      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
8 54 LOAD_FAST 5 ( rem )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
9 >> 58 LOAD_FAST 3 ( p )				      								    								  
60 LOAD_CONST 2 ( 10 )					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 STORE_FAST 3 ( p )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE			  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
Disassembly of <code object recursiveReverse at 0x7f33e2644f6 def recursiveReverse ( str ) :				    def recursiveReverse ( str ) :				  success : identical to gold
2 0 BUILD_LIST 0					      	  stack = [ ]						    	stack = [ ]						  
2 STORE_FAST 1 ( stack )				      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
							      	      stack.append ( str [ i ] )			    	    stack.append ( str [ i ] )				  
3 4 SETUP_LOOP 34 ( to 40 )				      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
6 LOAD_GLOBAL 0 ( range )				      	      str [ i ] = stack.pop ( )				    	    str [ i ] = stack.pop ( )				  
8 LOAD_GLOBAL 1 ( len )					      								    								  
10 LOAD_FAST 0 ( str )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 18 ( to 38 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 1 ( stack )				      								    								  
24 LOAD_METHOD 2 ( append )				      								    								  
26 LOAD_FAST 0 ( str )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_METHOD 1					      								    								  
34 POP_TOP						      								    								  
36 JUMP_ABSOLUTE 18					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 32 ( to 74 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_GLOBAL 1 ( len )				      								    								  
46 LOAD_FAST 0 ( str )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 16 ( to 72 )				      								    								  
56 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 58 LOAD_FAST 1 ( stack )				      								    								  
60 LOAD_METHOD 3 ( pop )				      								    								  
62 CALL_METHOD 0					      								    								  
64 LOAD_FAST 0 ( str )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 54					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 LOAD_CONST 0 ( None )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S				      NUMBER_TRIANGLES_N_<unk> S				    NUMBER_TRIANGLES_N_<unk> S					  NUMBER_TRIANGLES_N_<unk> S
--							      --							    --								  --
Disassembly of <code object numberOfTriangles at 0x7f33e2653e def numberOfTriangles ( n ) :				    def numberOfTriangles ( n ) :				  script_not_found : None
2 0 LOAD_CONST 0 ( None )				      	  answer = [ None ] * ( n + 1 ) ;			    	answer = [ None ] * ( n + 1 )				  
2 BUILD_LIST 1						      	  answer [ 0 ] = 1 ;					    	answer [ 0 ] = 1					  
4 LOAD_FAST 0 ( n )					      	  i = 1							    	i = 1							  
6 LOAD_CONST 1 ( 1 )					      	  while i <= n :					    	while i <= n :						  
8 BINARY_ADD						      	      answer [ i ] = answer [ i - 1 ] * 3 + 2 ;		    	    answer [ i ] = answer [ i - 1 ] * 3 + 2		  
10 BINARY_MULTIPLY					      	      i = i + 1						    	    i = i + 1						  
12 STORE_FAST 1 ( answer )				      	  return answer [ n ] ;					    	return answer [ n ]					  
							      								    								  
3 14 LOAD_CONST 1 ( 1 )					      								    								  
16 LOAD_FAST 1 ( answer )				      								    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 1 ( 1 )					      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 26 SETUP_LOOP 44 ( to 72 )				      								    								  
>> 28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 COMPARE_OP 1 ( <= )					      								    								  
34 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( answer )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 3 ( 3 )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_CONST 4 ( 2 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( answer )				      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
7 60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 2 ( i )					      								    								  
68 JUMP_ABSOLUTE 28					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
8 >> 72 LOAD_FAST 1 ( answer )				      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7f33e2653ed0, fil def countPairs ( arr , n ) :				    def countPairs ( arr , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  
2 STORE_FAST 2 ( ans )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 66 ( to 72 )				      		  if ( arr [ i ] == arr [ j ] ) :		    		if arr [ i ] == arr [ j ] :			  
6 LOAD_GLOBAL 0 ( range )				      		      ans += 1					    		    ans += 1					  
8 LOAD_CONST 1 ( 0 )					      	  return ans						    	return ans						  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 52 ( to 70 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 46 ( to 68 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 28 ( to 66 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( ans )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( ans )					      								    								  
64 JUMP_ABSOLUTE 36					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 JUMP_ABSOLUTE 16					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 2 ( ans )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
Disassembly of <code object interchangeFirstLast at 0x7f33e26 def interchangeFirstLast ( mat , n , m ) :		    def interchangeFirstLast ( mat , n , output ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  rows = n						    	rows = n						  
2 STORE_FAST 3 ( rows )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      t = mat [ 0 ] [ i ]				    	    t = mat [ 0 ] [ i ]					  
3 4 SETUP_LOOP 68 ( to 74 )				      	      mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]		    	    mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]		  
6 LOAD_GLOBAL 0 ( range )				      	      mat [ rows - 1 ] [ i ] = t			    	    mat [ rows - 1 ] [ i ] = t				  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 56 ( to 72 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( mat )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 STORE_FAST 5 ( t )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( mat )				      								    								  
32 LOAD_FAST 3 ( rows )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( mat )					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
6 54 LOAD_FAST 5 ( t )					      								    								  
56 LOAD_FAST 0 ( mat )					      								    								  
58 LOAD_FAST 3 ( rows )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 14					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 LOAD_CONST 0 ( None )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_BITS_IN_A_GIVEN_NUMBER				      SWAP_BITS_IN_A_GIVEN_NUMBER				    SWAP_BITS_IN_A_GIVEN_NUMBER					  SWAP_BITS_IN_A_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object swapBits at 0x7f33e26494b0, file  def swapBits ( x , p1 , p2 , n ) :			    def swapBits ( x , p1 , p2 , ** kwargs ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 )		    	set1 = ( x >> p1 ) & ( 1 << n ) - 1 )			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 1 ( p1 )					      	  set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 )		    	set2 = ( x >> p2 ) & ( 1 << n ) - 1			  _sa.valid/SWAP_BITS_IN_A_GIVEN_NUMBER.py", line 27
4 BINARY_RSHIFT						      	  xor = ( set1 ^ set2 )					    	xor = ( 1 << p1 )					       set1 = ( x >> p1 ) & ( 1 << n ) - 1 )
6 LOAD_CONST 1 ( 1 )					      	  xor = ( xor << p1 ) | ( xor << p2 )			    	result = ( xor | p1 ) | ( xor << p2 )			  				   ^ SyntaxError: in
8 LOAD_FAST 3 ( n )					      	  result = x ^ xor					    	return result						  valid syntax
10 BINARY_LSHIFT					      	  return result						    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 STORE_FAST 4 ( set1 )				      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( x )					      								    								  
22 LOAD_FAST 2 ( p2 )					      								    								  
24 BINARY_RSHIFT					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 LOAD_FAST 3 ( n )					      								    								  
30 BINARY_LSHIFT					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_AND						      								    								  
38 STORE_FAST 5 ( set2 )				      								    								  
							      								    								  
4 40 LOAD_FAST 4 ( set1 )				      								    								  
42 LOAD_FAST 5 ( set2 )					      								    								  
44 BINARY_XOR						      								    								  
46 STORE_FAST 6 ( xor )					      								    								  
							      								    								  
5 48 LOAD_FAST 6 ( xor )				      								    								  
50 LOAD_FAST 1 ( p1 )					      								    								  
52 BINARY_LSHIFT					      								    								  
54 LOAD_FAST 6 ( xor )					      								    								  
56 LOAD_FAST 2 ( p2 )					      								    								  
58 BINARY_LSHIFT					      								    								  
60 BINARY_OR						      								    								  
62 STORE_FAST 6 ( xor )					      								    								  
							      								    								  
6 64 LOAD_FAST 0 ( x )					      								    								  
66 LOAD_FAST 6 ( xor )					      								    								  
68 BINARY_XOR						      								    								  
70 STORE_FAST 7 ( result )				      								    								  
							      								    								  
7 72 LOAD_FAST 7 ( result )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE
--							      --							    --								  --
Disassembly of <code object search at 0x7f33e2653ed0, file "< def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( i )					      	  while ( i < n ) :					    	while i < n :						  _sa.valid/SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFF
							      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  ERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1.py", line 34
3 4 SETUP_LOOP 48 ( to 54 )				      		  return i					    		return i					       return - 1     ^ SyntaxError: 'return' outsid
>> 6 LOAD_FAST 3 ( i )					      	      i = i + abs ( arr [ i ] - x )			    	    i = i + abs ( arr [ i ] - x )			  e function
8 LOAD_FAST 1 ( n )					      	  print ( "number is not present!" )			    print ( "number is not present!" )				  
10 COMPARE_OP 0 ( < )					      	  return - 1						    return - 1							  
12 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 3 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( x )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 26 LOAD_FAST 3 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
6 >> 30 LOAD_FAST 3 ( i )				      								    								  
32 LOAD_GLOBAL 0 ( abs )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( x )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 3 ( i )					      								    								  
50 JUMP_ABSOLUTE 6					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( print )				      								    								  
56 LOAD_CONST 2 ( 'number is not present!' )		      								    								  
58 CALL_FUNCTION 1					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_CONST 3 ( - 1 )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
Disassembly of <code object minimumflip at 0x7f33e2653ed0, fi def minimumflip ( mat , n ) :				    def minimumflip ( mat , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  flip = 0						    	flip = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( flip )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.valid/MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX
							      	      for j in range ( i ) :				    	    for j in range ( i ) :				  _SYMMETRIC_1.py", line 32	return flip	^ Sy
3 4 SETUP_LOOP 66 ( to 72 )				      		  if mat [ i ] [ j ] != mat [ j ] [ i ] :	    		if mat [ i ] [ j ] != mat [ j ] [ i ] :		  ntaxError: 'return' outside function
6 LOAD_GLOBAL 0 ( range )				      		      flip += 1					    		    flip += 1					  
8 LOAD_FAST 1 ( n )					      	  return flip						    return flip							  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 54 ( to 70 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 48 ( to 68 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( mat )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 4 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( flip )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( flip )				      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 JUMP_ABSOLUTE 14					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 2 ( flip )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7f33e2653f60, fil def countPairs ( a , n ) :				    def countPairs ( a , n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 70 ( to 76 )				      		  if ( a [ i ] & a [ j ] ) == 0 :		    		if a [ i ] & a [ j ] == 0 :			  
6 LOAD_GLOBAL 0 ( range )				      		      count += 2				    		    count += 2					  
8 LOAD_CONST 1 ( 0 )					      	  return count						    	return count						  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 56 ( to 74 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 50 ( to 72 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 32 ( to 70 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_AND						      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 60 LOAD_FAST 2 ( count )				      								    								  
62 LOAD_CONST 3 ( 2 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 2 ( count )				      								    								  
68 JUMP_ABSOLUTE 36					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 JUMP_ABSOLUTE 16					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
7 >> 76 LOAD_FAST 2 ( count )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			      CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			    CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			  CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT
--							      --							    --								  --
Disassembly of <code object areEqual at 0x7f33e2644f60, file  def areEqual ( arr1 , arr2 , n , m ) :			    def areEqual ( arr1 , arr2 , n , m = - 1 ) :		  script_not_found : None
2 0 LOAD_FAST 2 ( n )					      	  if ( n != m ) :					    	if n != m :						  
2 LOAD_FAST 3 ( m )					      	      return False ;					    	    return False					  
4 COMPARE_OP 3 ( != )					      	  arr1.sort ( ) ;					    	arr1.sort ( )						  
6 POP_JUMP_IF_FALSE 12					      	  arr2.sort ( ) ;					    	arr2.sort ( )						  
							      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
3 8 LOAD_CONST 1 ( False )				      	      if ( arr1 [ i ] != arr2 [ i ] ) :			    	    if arr1 [ i ] != arr2 [ i ] :			  
10 RETURN_VALUE						      		  return False ;				    		return False					  
							      	  return True ;						    	return True						  
4 >> 12 LOAD_FAST 0 ( arr1 )				      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 LOAD_FAST 1 ( arr2 )				      								    								  
22 LOAD_METHOD 0 ( sort )				      								    								  
24 CALL_METHOD 0					      								    								  
26 POP_TOP						      								    								  
							      								    								  
6 28 SETUP_LOOP 42 ( to 72 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 24 ( to 70 )				      								    								  
46 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr1 )				      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 1 ( arr2 )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 64 LOAD_CONST 1 ( False )				      								    								  
66 RETURN_VALUE						      								    								  
68 JUMP_ABSOLUTE 44					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
9 >> 72 LOAD_CONST 4 ( True )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X	  COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7f33e26499c0, fil def countPairs ( arr1 , arr2 , m , n , x ) :		    def countPairs ( arr1 , arr2 , m , n , x ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 5 ( count )				      	  for i in range ( m ) :				    	for i in range ( m ) :					  _sa.valid/COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_
							      	      for j in range ( n ) :				    	    for j in range ( n ) :				  EQUAL_GIVEN_VALUE_X.py", line 32     return count
3 4 SETUP_LOOP 62 ( to 68 )				      		  if arr1 [ i ] + arr2 [ j ] == x :		    		if arr1 [ i ] + arr2 [ j ] == x :		      ^ SyntaxError: 'return' outside function
6 LOAD_GLOBAL 0 ( range )				      		      count = count + 1				    		    count = count + 1				  
8 LOAD_FAST 2 ( m )					      	  return count						    return count						  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 50 ( to 66 )				      								    								  
16 STORE_FAST 6 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 44 ( to 64 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 7 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr1 )				      								    								  
34 LOAD_FAST 6 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( arr2 )					      								    								  
40 LOAD_FAST 7 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 4 ( x )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
6 52 LOAD_FAST 5 ( count )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 5 ( count )				      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 5 ( count )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
Disassembly of <code object findMinDiff at 0x7f33e2653ed0, fi def findMinDiff ( arr , n ) :				    def findMinDiff ( arr ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( sorted )				      	  arr = sorted ( arr )					    	arr = sorted ( arr )					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( arr )					      	  diff = 10 ** 20					    	diff = 100000000000000000000				  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/FIND_
4 CALL_FUNCTION 1					      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  MINIMUM_DIFFERENCE_PAIR_1.py", line 50, in <module
6 STORE_FAST 0 ( arr )					      	      if arr [ i + 1 ] - arr [ i ] < diff :		    	    if ( arr [ i + 1 ] - arr [ i ] ) < diff :		  >	if f_filled(*parameters_set) == f_gold(*para
							      		  diff = arr [ i + 1 ] - arr [ i ]		    		diff = arr [ i + 1 ] - arr [ i ]		  meters_set): TypeError: f_filled() takes 1 positio
3 8 LOAD_CONST 1 ( 100000000000000000000 )		      	  return diff						    	return diff						  nal argument but 2 were given
10 STORE_FAST 2 ( diff )				      								    								  
							      								    								  
4 12 SETUP_LOOP 64 ( to 78 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 48 ( to 76 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 2 ( diff )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 STORE_FAST 2 ( diff )				      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
7 >> 78 LOAD_FAST 2 ( diff )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
Disassembly of <code object swap at 0x7f33e26499c0, file "<di def swap ( xp , yp ) :					    def swap ( xp , yp ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( xp )					      	  if ( xp [ 0 ] == yp [ 0 ] ) :				    	if xp [ 0 ] == yp [ 0 ] :				  
2 LOAD_CONST 1 ( 0 )					      	      return						    	    return						  
4 BINARY_SUBSCR						      	  xp [ 0 ] = xp [ 0 ] + yp [ 0 ]			    	xp [ 0 ] = xp [ 0 ] + yp [ 0 ]				  
6 LOAD_FAST 1 ( yp )					      	  yp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    	yp [ 0 ] = xp [ 0 ] - yp [ 0 ]				  
8 LOAD_CONST 1 ( 0 )					      	  xp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    	xp [ 0 ] = xp [ 0 ] - yp [ 0 ]				  
10 BINARY_SUBSCR					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 16 LOAD_CONST 0 ( None )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( xp )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( yp )					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 0 ( xp )					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 STORE_SUBSCR						      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( xp )					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 1 ( yp )					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 1 ( yp )					      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
6 60 LOAD_FAST 0 ( xp )					      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( yp )					      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 0 ( xp )					      								    								  
76 LOAD_CONST 1 ( 0 )					      								    								  
78 STORE_SUBSCR						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object reverseStr at 0x7f33e26494b0, fil def reverseStr ( str ) :					    def reverseStr ( str ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  i , j = 0 , n - 1					    	i , j = 0 , n - 1					  
4 CALL_FUNCTION 1					      	  while i < j :						    	while i < j :						  
6 STORE_FAST 1 ( n )					      	      str [ i ] , str [ j ] = str [ j ] , str [ i ]	    	    str [ i ] , str [ j ] = str [ j ] , str [ i ]	  
							      	      i += 1						    	    i += 1						  
3 8 LOAD_CONST 1 ( 0 )					      	      j -= 1						    	    j -= 1						  
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 ROT_TWO						      								    								  
18 STORE_FAST 2 ( i )					      								    								  
20 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 22 SETUP_LOOP 54 ( to 78 )				      								    								  
>> 24 LOAD_FAST 2 ( i )					      								    								  
26 LOAD_FAST 3 ( j )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( str )				      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( str )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 ROT_TWO						      								    								  
46 LOAD_FAST 0 ( str )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
52 LOAD_FAST 0 ( str )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 66 LOAD_FAST 3 ( j )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 3 ( j )					      								    								  
74 JUMP_ABSOLUTE 24					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS		      MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			    MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			  MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS
--							      --							    --								  --
Disassembly of <code object minDifferenceAmongMaxMin at 0x7f3 def minDifferenceAmongMaxMin ( arr , N , K ) :		    def minDifferenceAmongMaxMin ( arr , N , K ) :		  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_METHOD 0 ( sort )				      	  res = 2147483647					    	res = 2147483647					  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/MINIM
4 CALL_METHOD 0						      	  for i in range ( ( N - K ) + 1 ) :			    	for i in range ( N - K + 1 ) :				  UM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS.py", line 50,
6 POP_TOP						      	      curSeqDiff = arr [ i + K - 1 ] - arr [ i ]	    	    curSeq= arr [ i + K - 1 ] - arr [ i ]		   in <module>	   if f_filled(*parameters_set) == f
							      	      res = min ( res , curSeqDiff )			    	    res = min ( res , curSeqDiff )			  _gold(*parameters_set):   File "/home/ubuntu/Trans
3 8 LOAD_CONST 1 ( 2147483647 )				      	  return res						    	return res						  Coder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scrip
10 STORE_FAST 3 ( res )					      								    								  ts/dis_sa-python_sa.valid/MINIMUM_DIFFERENCE_MAX_M
							      								    								  IN_K_SIZE_SUBSETS.py", line 31, in f_filled	  re
4 12 SETUP_LOOP 58 ( to 72 )				      								    								  s = min ( res , curSeqDiff ) NameError: name 'curS
14 LOAD_GLOBAL 1 ( range )				      								    								  eqDiff' is not defined
16 LOAD_FAST 1 ( N )					      								    								  
18 LOAD_FAST 2 ( K )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 38 ( to 70 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 LOAD_FAST 2 ( K )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 STORE_FAST 5 ( curSeqDiff )				      								    								  
							      								    								  
6 58 LOAD_GLOBAL 2 ( min )				      								    								  
60 LOAD_FAST 3 ( res )					      								    								  
62 LOAD_FAST 5 ( curSeqDiff )				      								    								  
64 CALL_FUNCTION 2					      								    								  
66 STORE_FAST 3 ( res )					      								    								  
68 JUMP_ABSOLUTE 30					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 3 ( res )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
Disassembly of <code object countRect at 0x7f33e26494b0, file def countRect ( n ) :					    def countRect ( n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  
2 STORE_FAST 1 ( ans )					      	  for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 	for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 
							      	      height = length					    	    height = length					  
3 4 SETUP_LOOP 70 ( to 76 )				      	      while ( height * length <= n ) :			    	    while height * length <= n :			  
6 LOAD_GLOBAL 0 ( range )				      		  ans += 1					    		ans += 1					  
8 LOAD_CONST 2 ( 1 )					      		  height += 1					    		height += 1					  
10 LOAD_GLOBAL 1 ( int )				      	  return ans						    	return ans						  
12 LOAD_GLOBAL 2 ( math )				      								    								  
14 LOAD_METHOD 3 ( sqrt )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 CALL_METHOD 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 42 ( to 74 )				      								    								  
32 STORE_FAST 2 ( length )				      								    								  
							      								    								  
4 34 LOAD_FAST 2 ( length )				      								    								  
36 STORE_FAST 3 ( height )				      								    								  
							      								    								  
5 38 SETUP_LOOP 32 ( to 72 )				      								    								  
>> 40 LOAD_FAST 3 ( height )				      								    								  
42 LOAD_FAST 2 ( length )				      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 COMPARE_OP 1 ( <= )					      								    								  
50 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
6 52 LOAD_FAST 1 ( ans )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 1 ( ans )					      								    								  
							      								    								  
7 60 LOAD_FAST 3 ( height )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 3 ( height )				      								    								  
68 JUMP_ABSOLUTE 40					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 JUMP_ABSOLUTE 30					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_FAST 1 ( ans )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
Disassembly of <code object isLucky at 0x7f33e2644930, file " def isLucky ( n ) :					    def isLucky ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  next_position = n					    	while True :						  
2 STORE_FAST 1 ( next_position )			      	  if isLucky.counter > n :				    	    while True :					  
							      	      return 1						    		return 1					  
3 4 LOAD_GLOBAL 0 ( isLucky )				      	  if n % isLucky.counter == 0 :				    	    if n % isLucky.counter == 0 :			  
6 LOAD_ATTR 1 ( counter )				      	      return 0						    		return 0					  
8 LOAD_FAST 0 ( n )					      	  next_position = next_position - next_position / isLucky.c 	    continue						  
10 COMPARE_OP 4 ( > )					      	  isLucky.counter = isLucky.counter + 1			    	if ( n % isLucky.counter ) == 0 :			  
12 POP_JUMP_IF_FALSE 18					      	  return isLucky ( next_position )			    	    return 0						  
							      								    <= 1 / ( Lucky.counter )					  
4 14 LOAD_CONST 1 ( 1 )					      								    return isLucky.counter + 1					  
16 RETURN_VALUE						      								    								  
							      								    								  
5 >> 18 LOAD_FAST 0 ( n )				      								    								  
20 LOAD_GLOBAL 0 ( isLucky )				      								    								  
22 LOAD_ATTR 1 ( counter )				      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 32 LOAD_CONST 2 ( 0 )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
7 >> 36 LOAD_FAST 1 ( next_position )			      								    								  
38 LOAD_FAST 1 ( next_position )			      								    								  
40 LOAD_GLOBAL 0 ( isLucky )				      								    								  
42 LOAD_ATTR 1 ( counter )				      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 1 ( next_position )			      								    								  
							      								    								  
8 50 LOAD_GLOBAL 0 ( isLucky )				      								    								  
52 LOAD_ATTR 1 ( counter )				      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_GLOBAL 0 ( isLucky )				      								    								  
60 STORE_ATTR 1 ( counter )				      								    								  
							      								    								  
9 62 LOAD_GLOBAL 0 ( isLucky )				      								    								  
64 LOAD_FAST 1 ( next_position )			      								    								  
66 CALL_FUNCTION 1					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING_1			      GENERATE_ROTATIONS_GIVEN_STRING_1				    GENERATE_ROTATIONS_GIVEN_STRING_1				  GENERATE_ROTATIONS_GIVEN_STRING_1
--							      --							    --								  --
Disassembly of <code object printRotatedString at 0x7f33e2644 def printRotatedString ( string ) :			    def printRotatedString ( string ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( string )					    	n = len ( string )					  
2 LOAD_FAST 0 ( string )				      	  temp = string + string				    	temp = string + string					  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 1 ( n )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
							      		  print ( temp [ i + j ] , end = "" )		    		print ( temp [ i + j ] , end = " " )		  
3 8 LOAD_FAST 0 ( string )				      	      print ( )						    	print ( )						  
10 LOAD_FAST 0 ( string )				      								    								  
12 BINARY_ADD						      								    								  
14 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
4 16 SETUP_LOOP 60 ( to 78 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 48 ( to 76 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 SETUP_LOOP 36 ( to 68 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 24 ( to 66 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 2 ( print )				      								    								  
46 LOAD_FAST 2 ( temp )					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 1 ( '' )					      								    								  
58 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
60 CALL_FUNCTION_KW 2					      								    								  
62 POP_TOP						      								    								  
64 JUMP_ABSOLUTE 40					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 2 ( print )				      								    								  
70 CALL_FUNCTION 0					      								    								  
72 POP_TOP						      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7f33e2649a50,  def printDistinct ( arr , n ) :				    def printDistinct ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  s = dict ( ) ;					    	s = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( s )					      	      if ( arr [ i ] not in s.keys ( ) ) :		    	    if arr [ i ] not in s.keys ( ) :			  
							      		  s [ arr [ i ] ] = arr [ i ] ;			    		arr [ i ] = arr [ i ]				  
3 6 SETUP_LOOP 64 ( to 72 )				      		  print ( arr [ i ] , end = " " ) ;		    		print ( arr [ i ] , end = " " )			  
8 LOAD_GLOBAL 1 ( range )				      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 52 ( to 70 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( s )					      								    								  
28 LOAD_METHOD 2 ( keys )				      								    								  
30 CALL_METHOD 0					      								    								  
32 COMPARE_OP 7 ( not in )				      								    								  
34 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 2 ( s )					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 STORE_SUBSCR						      								    								  
							      								    								  
6 52 LOAD_GLOBAL 3 ( print )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 1 ( ' ' )					      								    								  
62 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
64 CALL_FUNCTION_KW 2					      								    								  
66 POP_TOP						      								    								  
68 JUMP_ABSOLUTE 16					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 LOAD_CONST 0 ( None )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
Disassembly of <code object ispalindrome at 0x7f33e2644f60, f def ispalindrome ( s ) :					    def ispalindrome ( s ) :					  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s )						    	l = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  i = 0							    	i = 0							  
4 CALL_FUNCTION 1					      	  j = l - 1						    	j = l - 1						  
6 STORE_FAST 1 ( l )					      	  while i <= j :					    	while i <= j :						  
							      	      if ( s [ i ] != s [ j ] ) :			    	    if s [ i ] != s [ j ] :				  
3 8 LOAD_CONST 1 ( 0 )					      		  return False					    		return False					  
10 STORE_FAST 2 ( i )					      	      i += 1						    	    i += 1						  
							      	      j -= 1						    	    j -= 1						  
4 12 LOAD_FAST 1 ( l )					      	  return True						    	return True						  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 20 SETUP_LOOP 48 ( to 70 )				      								    								  
>> 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_FAST 3 ( j )					      								    								  
26 COMPARE_OP 1 ( <= )					      								    								  
28 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( s )					      								    								  
38 LOAD_FAST 3 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 3 ( != )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_CONST 3 ( False )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 2 ( i )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 58 LOAD_FAST 3 ( j )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_SUBTRACT					      								    								  
64 STORE_FAST 3 ( j )					      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_CONST 4 ( True )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
Disassembly of <code object getMissingNo at 0x7f33e2649150, f def getMissingNo ( a , n ) :				    def getMissingNo ( a : float , n : int ) -> float :		  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( a )					      	  x1 = a [ 0 ]						    	x1 = a [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	  x2 = 1						    	x2 = 1							  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/FIND_
4 BINARY_SUBSCR						      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  THE_MISSING_NUMBER_2.py", line 52, in <module>
6 STORE_FAST 2 ( x1 )					      	      x1 = x1 ^ a [ i ]					    	    x1 = x1 ^ a						   if f_filled(*parameters_set) == f_gold(*parameter
							      	  for i in range ( 2 , n + 2 ) :			    	for i in range ( 2 , n + 2 ) :				  s_set):   File "/home/ubuntu/TransCoder/models/eva
3 8 LOAD_CONST 2 ( 1 )					      	      x2 = x2 ^ i					    	    x2 = x2 ^ i						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
10 STORE_FAST 3 ( x2 )					      	  return x1 ^ x2					    	return x1 ^ x2						  _sa.valid/FIND_THE_MISSING_NUMBER_2.py", line 31,
							      								    								  in f_filled	  x1 = x1 ^ a TypeError: unsupported
4 12 SETUP_LOOP 30 ( to 44 )				      								    								   operand type(s) for ^: 'int' and 'list'
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 16 ( to 42 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( x1 )					      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 BINARY_XOR						      								    								  
38 STORE_FAST 2 ( x1 )					      								    								  
40 JUMP_ABSOLUTE 24					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 SETUP_LOOP 30 ( to 76 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 3 ( 2 )					      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_CONST 3 ( 2 )					      								    								  
54 BINARY_ADD						      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 12 ( to 74 )				      								    								  
62 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 64 LOAD_FAST 3 ( x2 )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_XOR						      								    								  
70 STORE_FAST 3 ( x2 )					      								    								  
72 JUMP_ABSOLUTE 60					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_FAST 2 ( x1 )				      								    								  
78 LOAD_FAST 3 ( x2 )					      								    								  
80 BINARY_XOR						      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
Disassembly of <code object recursiveReverse at 0x7f33e2653ed def recursiveReverse ( str , i = 0 ) :			    def recursiveReverse ( str , i ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  if i == n // 2 :					    	if i == n // 2 :					  
4 CALL_FUNCTION 1					      	      return						    	    return						  
6 STORE_FAST 2 ( n )					      	  str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] , str [ 	str [ i ] , str [ i ] = str [ n - i - 1 ] , str [ i ]	  
							      	  recursiveReverse ( str , i + 1 )			    	str [ n - i - 1 ] = recursiveReverse ( str , i + 1 )	  
3 8 LOAD_FAST 1 ( i )					      								    								  
10 LOAD_FAST 2 ( n )					      								    								  
12 LOAD_CONST 1 ( 2 )					      								    								  
14 BINARY_FLOOR_DIVIDE					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
4 20 LOAD_CONST 0 ( None )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 LOAD_FAST 0 ( str )				      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( str )					      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 ROT_TWO						      								    								  
46 LOAD_FAST 0 ( str )					      								    								  
48 LOAD_FAST 1 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
52 LOAD_FAST 0 ( str )					      								    								  
54 LOAD_FAST 2 ( n )					      								    								  
56 LOAD_FAST 1 ( i )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 STORE_SUBSCR						      								    								  
							      								    								  
6 66 LOAD_GLOBAL 1 ( recursiveReverse )			      								    								  
68 LOAD_FAST 0 ( str )					      								    								  
70 LOAD_FAST 1 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 CALL_FUNCTION 2					      								    								  
78 POP_TOP						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7f33e2644f60, fil def squareRoot ( n , p ) :				    def squareRoot ( n , p ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  n = n % p						    	n = n % p						  
2 LOAD_FAST 1 ( p )					      	  for x in range ( 2 , p ) :				    	for x in range ( 2 , p ) :				  
4 BINARY_MODULO						      	      if ( ( x * x ) % p == n ) :			    	    if x * x % p == n :					  
6 STORE_FAST 0 ( n )					      		  print ( "Square root is " , x )		    		print ( "Square root is " , x )			  
							      		  return					    		return						  
3 8 SETUP_LOOP 48 ( to 58 )				      	  print ( "Square root doesn't exist" )			    	print ( "Square root doesn't exist" )			  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 2 )					      								    								  
14 LOAD_FAST 1 ( p )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 34 ( to 56 )				      								    								  
22 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( x )					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 1 ( p )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_GLOBAL 1 ( print )				      								    								  
42 LOAD_CONST 2 ( 'Square root is ' )			      								    								  
44 LOAD_FAST 2 ( x )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 POP_TOP						      								    								  
							      								    								  
6 50 LOAD_CONST 0 ( None )				      								    								  
52 RETURN_VALUE						      								    								  
54 JUMP_ABSOLUTE 20					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 LOAD_GLOBAL 1 ( print )				      								    								  
60 LOAD_CONST 3 ( "Square root doesn't exist" )		      								    								  
62 CALL_FUNCTION 1					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
Disassembly of <code object findDigits at 0x7f33e2644f60, fil def findDigits ( n ) :					    def findDigits ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 0 ) :					    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 1 ;					    	    return 1						  
							      	  x = ( ( n * math.log10 ( n / math.e ) + math.log10 ( 2 *  	x = n * math.log10 ( n / math.e ) * math.log10 ( 2 * math 
3 8 LOAD_CONST 1 ( 0 )					      	  return math.floor ( x ) + 1 ;				    	return math.floor ( x ) + 1				  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 COMPARE_OP 1 ( <= )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_GLOBAL 0 ( math )				      								    								  
28 LOAD_METHOD 1 ( log10 )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_GLOBAL 0 ( math )				      								    								  
34 LOAD_ATTR 2 ( e )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_METHOD 1					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_GLOBAL 0 ( math )				      								    								  
44 LOAD_METHOD 1 ( log10 )				      								    								  
46 LOAD_CONST 3 ( 2 )					      								    								  
48 LOAD_GLOBAL 0 ( math )				      								    								  
50 LOAD_ATTR 3 ( pi )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 CALL_METHOD 1					      								    								  
60 LOAD_CONST 4 ( 2.0 )					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 1 ( x )					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 0 ( math )				      								    								  
70 LOAD_METHOD 4 ( floor )				      								    								  
72 LOAD_FAST 1 ( x )					      								    								  
74 CALL_METHOD 1					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7f33e2649150, file "< def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 2 ( sum )					      	  arr.sort ( )						    	arr.sort ( )						  
							      	  for i in range ( 0 , int ( n / 2 ) ) :		    	for i in range ( 0 , int ( n / 2 ) ) :			  
3 4 LOAD_FAST 0 ( arr )					      	      sum -= ( 2 * arr [ i ] )				    	    sum -= 2 * arr [ i ]				  
6 LOAD_METHOD 0 ( sort )				      	      sum += ( 2 * arr [ n - i - 1 ] )			    	    sum += 2 * arr [ n - i - 1 ]			  
8 CALL_METHOD 0						      	  return sum						    	return sum						  
10 POP_TOP						      								    								  
							      								    								  
4 12 SETUP_LOOP 66 ( to 80 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_GLOBAL 2 ( int )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 44 ( to 78 )				      								    								  
34 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( sum )				      								    								  
38 LOAD_CONST 2 ( 2 )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 INPLACE_SUBTRACT					      								    								  
50 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
6 52 LOAD_FAST 2 ( sum )				      								    								  
54 LOAD_CONST 2 ( 2 )					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 2 ( sum )					      								    								  
76 JUMP_ABSOLUTE 32					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
7 >> 80 LOAD_FAST 2 ( sum )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
Disassembly of <code object findDigits at 0x7f33e26494b0, fil def findDigits ( n ) :					    def findDigits ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 0 ) :					    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 1 ;					    	    return 1						  
							      	  digits = 0 ;						    	digits = 0						  
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
10 RETURN_VALUE						      	      digits += math.log10 ( i ) ;			    	    digits += math.log10 ( i )				  
							      	  return math.floor ( digits ) + 1 ;			    	return math.floor ( digits ) + 1			  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 COMPARE_OP 1 ( <= )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_CONST 1 ( 0 )				      								    								  
26 STORE_FAST 1 ( digits )				      								    								  
							      								    								  
7 28 SETUP_LOOP 36 ( to 66 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 18 ( to 64 )				      								    								  
46 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 48 LOAD_FAST 1 ( digits )				      								    								  
50 LOAD_GLOBAL 1 ( math )				      								    								  
52 LOAD_METHOD 2 ( log10 )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 CALL_METHOD 1					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 1 ( digits )				      								    								  
62 JUMP_ABSOLUTE 44					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_GLOBAL 1 ( math )				      								    								  
68 LOAD_METHOD 3 ( floor )				      								    								  
70 LOAD_FAST 1 ( digits )				      								    								  
72 CALL_METHOD 1					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7f33e2653ed0, file " def isPrime ( p ) :					    def isPrime ( p ) :						  timeout : None
2 0 LOAD_CONST 1 ( 2 )					      	  checkNumber = 2 ** p - 1				    	checkNumber = 2 ** p - 1				  
2 LOAD_FAST 0 ( p )					      	  nextval = 4 % checkNumber				    	nextval = 4 % checkNumber				  
4 BINARY_POWER						      	  for i in range ( 1 , p - 1 ) :			    	for i in range ( 1 , p - 1 ) :				  
6 LOAD_CONST 2 ( 1 )					      	      nextval = ( nextval * nextval - 2 ) % checkNumber	    	    nextval = nextval * nextval - 2 % checkNumber	  
8 BINARY_SUBTRACT					      	  if ( nextval == 0 ) : return True			    	if nextval == 0 : return True				  
10 STORE_FAST 1 ( checkNumber )				      	  else : return False					    	else : return False					  
							      								    								  
3 12 LOAD_CONST 3 ( 4 )					      								    								  
14 LOAD_FAST 1 ( checkNumber )				      								    								  
16 BINARY_MODULO					      								    								  
18 STORE_FAST 2 ( nextval )				      								    								  
							      								    								  
4 20 SETUP_LOOP 38 ( to 60 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 0 ( p )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 20 ( to 58 )				      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 40 LOAD_FAST 2 ( nextval )				      								    								  
42 LOAD_FAST 2 ( nextval )				      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_CONST 1 ( 2 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 1 ( checkNumber )				      								    								  
52 BINARY_MODULO					      								    								  
54 STORE_FAST 2 ( nextval )				      								    								  
56 JUMP_ABSOLUTE 36					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
6 >> 60 LOAD_FAST 2 ( nextval )				      								    								  
62 LOAD_CONST 4 ( 0 )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
68 LOAD_CONST 5 ( True )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
7 >> 72 LOAD_CONST 6 ( False )				      								    								  
74 RETURN_VALUE						      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW
--							      --							    --								  --
Disassembly of <code object minCost at 0x7f33e26494b0, file " def minCost ( coin , n , k ) :				    def minCost ( coin , n , k ) :				  success : None
2 0 LOAD_FAST 0 ( coin )				      	  coin.sort ( )						    	coin.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) ) ;	    	coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) )	  
4 CALL_METHOD 0						      	  ans = 0						    	ans = 0							  
6 POP_TOP						      	  for i in range ( coins_needed - 1 + 1 ) :		    	for i in range ( coins_needed - 1 + 1 ) :		  
							      	      ans += coin [ i ]					    	    ans += coin [ i ]					  
3 8 LOAD_GLOBAL 1 ( math )				      	  return ans						    	return ans						  
10 LOAD_METHOD 2 ( ceil )				      								    								  
12 LOAD_CONST 1 ( 1.0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 2 ( k )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 BINARY_FLOOR_DIVIDE					      								    								  
26 CALL_METHOD 1					      								    								  
28 STORE_FAST 3 ( coins_needed )			      								    								  
							      								    								  
4 30 LOAD_CONST 3 ( 0 )					      								    								  
32 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
5 34 SETUP_LOOP 36 ( to 72 )				      								    								  
36 LOAD_GLOBAL 3 ( range )				      								    								  
38 LOAD_FAST 3 ( coins_needed )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 16 ( to 70 )				      								    								  
54 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 56 LOAD_FAST 4 ( ans )				      								    								  
58 LOAD_FAST 0 ( coin )					      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 4 ( ans )					      								    								  
68 JUMP_ABSOLUTE 52					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 4 ( ans )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_ARRAY_ADJACENT_DIFFER_K			      SEARCHING_ARRAY_ADJACENT_DIFFER_K				    SEARCHING_ARRAY_ADJACENT_DIFFER_K				  SEARCHING_ARRAY_ADJACENT_DIFFER_K
--							      --							    --								  --
Disassembly of <code object search at 0x7f33e2644f60, file "< def search ( arr , n , x , k ) :				    def search ( arr , n , x = None , k = 0 ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 4 ( i )					      	  while ( i < n ) :					    	while i < n :						  
							      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  
3 4 SETUP_LOOP 62 ( to 68 )				      		  return i					    		return i					  
>> 6 LOAD_FAST 4 ( i )					      	      i = i + max ( 1 , int ( abs ( arr [ i ] - x ) / k ) ) 	    i = i + max ( 1 , int ( abs ( arr [ i ] - x ) / k ) ) 
8 LOAD_FAST 1 ( n )					      	  print ( "number is not present!" )			    	print ( "number is not present!" )			  
10 COMPARE_OP 0 ( < )					      	  return - 1						    	return - 1						  
12 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 4 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( x )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 26 LOAD_FAST 4 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
6 >> 30 LOAD_FAST 4 ( i )				      								    								  
32 LOAD_GLOBAL 0 ( max )				      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 LOAD_GLOBAL 1 ( int )				      								    								  
38 LOAD_GLOBAL 2 ( abs )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( x )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 LOAD_FAST 3 ( k )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 4 ( i )					      								    								  
64 JUMP_ABSOLUTE 6					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 3 ( print )				      								    								  
70 LOAD_CONST 3 ( 'number is not present!' )		      								    								  
72 CALL_FUNCTION 1					      								    								  
74 POP_TOP						      								    								  
							      								    								  
8 76 LOAD_CONST 4 ( - 1 )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	      FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	    FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	  FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE
--							      --							    --								  --
Disassembly of <code object minRadius at 0x7f33e2644930, file def minRadius ( k , x , y , n ) :				    def minRadius ( k , x , y , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dis = [ 0 ] * n					    	dis = [ 0 ] * n						  
2 BUILD_LIST 1						      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 LOAD_FAST 3 ( n )					      	      dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]	    	    dis [ i ] = x [ i ] * x [ y [ i ] ] + y [ i ] * y [ i 
6 BINARY_MULTIPLY					      	  dis.sort ( )						    	dis.sort ( )						  
8 STORE_FAST 4 ( dis )					      	  return dis [ k - 1 ]					    	return dis [ k - 1 ]					  
							      								    								  
3 10 SETUP_LOOP 54 ( to 66 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 LOAD_FAST 3 ( n )					      								    								  
18 CALL_FUNCTION 2					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 40 ( to 64 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 1 ( x )					      								    								  
28 LOAD_FAST 5 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( x )					      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 LOAD_FAST 2 ( y )					      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( y )					      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 4 ( dis )					      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 22					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
5 >> 66 LOAD_FAST 4 ( dis )				      								    								  
68 LOAD_METHOD 1 ( sort )				      								    								  
70 CALL_METHOD 0					      								    								  
72 POP_TOP						      								    								  
							      								    								  
6 74 LOAD_FAST 4 ( dis )				      								    								  
76 LOAD_FAST 0 ( k )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 BINARY_SUBSCR					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
Disassembly of <code object countSubstringWithEqualEnds at 0x def countSubstringWithEqualEnds ( s ) :			    def countSubstringWithEqualEnds ( s ) :			  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  n = len ( s ) ;					    	n = len ( s )						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_GLOBAL 0 ( len )				      	      for j in range ( i , n ) :			    	    for j in range ( n , n ) :				  
6 LOAD_FAST 0 ( s )					      		  if ( s [ i ] == s [ j ] ) :			    		if s [ i ] == s [ j ] :				  
8 CALL_FUNCTION 1					      		      result = result + 1			    		    result = result + 1				  
10 STORE_FAST 2 ( n )					      	  return result						    	return result						  
							      								    								  
4 12 SETUP_LOOP 60 ( to 74 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 48 ( to 72 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 SETUP_LOOP 42 ( to 70 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 LOAD_FAST 2 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( s )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( s )					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
7 58 LOAD_FAST 1 ( result )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 1 ( result )				      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 JUMP_ABSOLUTE 22					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_FAST 1 ( result )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION	  SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION
--							      --							    --								  --
Disassembly of <code object printSorted at 0x7f33e2644f60, fi def printSorted ( a , b , c ) :				    def printSorted ( a , b , c ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  get_max = max ( a , max ( b , c ) )			    	get_max = max ( a , max ( b , c ) )			  
2 LOAD_FAST 0 ( a )					      	  get_min = - max ( - a , max ( - b , - c ) )		    	get_min = - max ( - a , max ( - b , c ) )		  
4 LOAD_GLOBAL 0 ( max )					      	  get_mid = ( a + b + c ) - ( get_max + get_min )	    	get_mid = a + b + c - get_max				  
6 LOAD_FAST 1 ( b )					      	  print ( get_min , " " , get_mid , " " , get_max )	    	print ( get_min , " " , get_mid , " " , get_max )	  
8 LOAD_FAST 2 ( c )					      								    								  
10 CALL_FUNCTION 2					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 STORE_FAST 3 ( get_max )				      								    								  
							      								    								  
3 16 LOAD_GLOBAL 0 ( max )				      								    								  
18 LOAD_FAST 0 ( a )					      								    								  
20 UNARY_NEGATIVE					      								    								  
22 LOAD_GLOBAL 0 ( max )				      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 UNARY_NEGATIVE					      								    								  
28 LOAD_FAST 2 ( c )					      								    								  
30 UNARY_NEGATIVE					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 UNARY_NEGATIVE					      								    								  
38 STORE_FAST 4 ( get_min )				      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 2 ( c )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 3 ( get_max )				      								    								  
52 LOAD_FAST 4 ( get_min )				      								    								  
54 BINARY_ADD						      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_FAST 5 ( get_mid )				      								    								  
							      								    								  
5 60 LOAD_GLOBAL 1 ( print )				      								    								  
62 LOAD_FAST 4 ( get_min )				      								    								  
64 LOAD_CONST 1 ( ' ' )					      								    								  
66 LOAD_FAST 5 ( get_mid )				      								    								  
68 LOAD_CONST 1 ( ' ' )					      								    								  
70 LOAD_FAST 3 ( get_max )				      								    								  
72 CALL_FUNCTION 5					      								    								  
74 POP_TOP						      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
Disassembly of <code object seiresSum at 0x7f33e2653ed0, file def seiresSum ( n , a ) :					    def seiresSum ( n , a ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , 2 * n ) :			    	for i in range ( 0 , 2 * n ) :				  
							      	      if ( i % 2 == 0 ) :				    	    if i % 2 == 0 :					  
3 4 SETUP_LOOP 76 ( to 82 )				      		  res += a [ i ] * a [ i ]			    		res += a [ i ] * a [ i ]			  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    else :						  
8 LOAD_CONST 1 ( 0 )					      		  res -= a [ i ] * a [ i ]			    		res -= a [ i ] * a [ i ]			  
10 LOAD_CONST 2 ( 2 )					      	  return res						    	return res						  
12 LOAD_FAST 0 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 58 ( to 80 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( res )				      								    								  
38 LOAD_FAST 1 ( a )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( a )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 2 ( res )					      								    								  
56 JUMP_ABSOLUTE 20					      								    								  
							      								    								  
7 >> 58 LOAD_FAST 2 ( res )				      								    								  
60 LOAD_FAST 1 ( a )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( a )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 INPLACE_SUBTRACT					      								    								  
76 STORE_FAST 2 ( res )					      								    								  
78 JUMP_ABSOLUTE 20					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
8 >> 82 LOAD_FAST 2 ( res )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
Disassembly of <code object checkMarkov at 0x7f33e2653ed0, fi def checkMarkov ( m ) :					    def checkMarkov ( m ) :					  success : None
2 0 SETUP_LOOP 82 ( to 84 )				      	  for i in range ( 0 , len ( m ) ) :			    	for i in range ( 0 , len ( m ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      sm = 0						    	    sm = 0						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , len ( m [ i ] ) ) :		    	    for j in range ( 0 , len ( m [ i ] ) ) :		  
6 LOAD_GLOBAL 1 ( len )					      		  sm = sm + m [ i ] [ j ]			    		sm = sm + m [ i ] [ j ]				  
8 LOAD_FAST 0 ( m )					      	      if ( sm != 1 ) :					    	    if sm != 1 :					  
10 CALL_FUNCTION 1					      		  return False					    		return False					  
12 CALL_FUNCTION 2					      	  return True						    	return True						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 64 ( to 82 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 2 ( sm )					      								    								  
							      								    								  
4 24 SETUP_LOOP 42 ( to 68 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_GLOBAL 1 ( len )				      								    								  
32 LOAD_FAST 0 ( m )					      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 20 ( to 66 )				      								    								  
46 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 48 LOAD_FAST 2 ( sm )					      								    								  
50 LOAD_FAST 0 ( m )					      								    								  
52 LOAD_FAST 1 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 3 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 2 ( sm )					      								    								  
64 JUMP_ABSOLUTE 44					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 2 ( sm )				      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
7 76 LOAD_CONST 3 ( False )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 16					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
8 >> 84 LOAD_CONST 4 ( True )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object sequence at 0x7f33e2644930, file  def sequence ( n ) :					    def sequence ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( array )				      	  f = array.array ( 'i' , [ 0 , 1 , 1 ] )		    	f = array.array ( [ 'i' , 0 , 1 , 1 ] )			  
2 LOAD_METHOD 0 ( array )				      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 , n + 1 ) :				  
4 LOAD_CONST 1 ( 'i' )					      	      r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]	    	    r = f [ f : i - 1 ] + f [ i - 1 ]			  
6 LOAD_CONST 2 ( 0 )					      	      f.append ( r ) ;					    	    f.append ( r )					  
8 LOAD_CONST 3 ( 1 )					      	  return r						    	return r						  
10 LOAD_CONST 3 ( 1 )					      								    								  
12 BUILD_LIST 3						      								    								  
14 CALL_METHOD 2					      								    								  
16 STORE_FAST 1 ( f )					      								    								  
							      								    								  
3 18 SETUP_LOOP 68 ( to 88 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_CONST 4 ( 3 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 50 ( to 86 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 38 LOAD_FAST 1 ( f )					      								    								  
40 LOAD_FAST 1 ( f )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 1 ( f )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 LOAD_FAST 1 ( f )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 3 ( r )					      								    								  
							      								    								  
5 74 LOAD_FAST 1 ( f )					      								    								  
76 LOAD_METHOD 2 ( append )				      								    								  
78 LOAD_FAST 3 ( r )					      								    								  
80 CALL_METHOD 1					      								    								  
82 POP_TOP						      								    								  
84 JUMP_ABSOLUTE 34					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
6 >> 88 LOAD_FAST 3 ( r )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
Disassembly of <code object countWays at 0x7f33e2653f60, file def countWays ( n , k ) :					    def countWays ( n , k ) :					  failure : #Results: 1, 10
2 0 LOAD_FAST 1 ( k )					      	  total = k						    	total = k						  
2 STORE_FAST 2 ( total )				      	  mod = 1000000007					    	mod = 1000000007					  
							      	  same , diff = 0 , k					    	same , diff = 0 , k					  
3 4 LOAD_CONST 1 ( 1000000007 )				      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
6 STORE_FAST 3 ( mod )					      	      same = diff					    	    same = diff						  
							      	      diff = total * ( k - 1 )				    	    diff = total * ( k - 1 )				  
4 8 LOAD_CONST 2 ( 0 )					      	      diff = diff % mod					    	    diff = diff % mod					  
10 LOAD_FAST 1 ( k )					      	      total = ( same + diff ) % mod			    	    total = same + diff					  
12 ROT_TWO						      	  return total						    	return total						  
14 STORE_FAST 4 ( same )				      								    								  
16 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
5 18 SETUP_LOOP 58 ( to 78 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_CONST 3 ( 2 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 4 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 40 ( to 76 )				      								    								  
36 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 5 ( diff )				      								    								  
40 STORE_FAST 4 ( same )				      								    								  
							      								    								  
7 42 LOAD_FAST 2 ( total )				      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 LOAD_CONST 4 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
8 54 LOAD_FAST 5 ( diff )				      								    								  
56 LOAD_FAST 3 ( mod )					      								    								  
58 BINARY_MODULO					      								    								  
60 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
9 62 LOAD_FAST 4 ( same )				      								    								  
64 LOAD_FAST 5 ( diff )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 3 ( mod )					      								    								  
70 BINARY_MODULO					      								    								  
72 STORE_FAST 2 ( total )				      								    								  
74 JUMP_ABSOLUTE 34					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
10 >> 78 LOAD_FAST 2 ( total )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
Disassembly of <code object countP at 0x7f33e2644f60, file "< def countP ( n , k ) :					    def countP ( n , k ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or k == 0 or k > n ) :			    	if n == 0 or k == 0 or k > n :				  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( k == 1 or k == n ) :				    	if k == 1 or k == n :					  
6 POP_JUMP_IF_TRUE 24					      	      return 1						    	    return 1						  
8 LOAD_FAST 1 ( k )					      	  return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k -  	return k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_TRUE 24					      								    								  
16 LOAD_FAST 1 ( k )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 COMPARE_OP 4 ( > )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 >> 24 LOAD_CONST 1 ( 0 )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_FAST 1 ( k )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_TRUE 44					      								    								  
36 LOAD_FAST 1 ( k )					      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 >> 44 LOAD_CONST 2 ( 1 )				      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 1 ( k )				      								    								  
50 LOAD_GLOBAL 0 ( countP )				      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 1 ( k )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_GLOBAL 0 ( countP )				      								    								  
66 LOAD_FAST 0 ( n )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_FAST 1 ( k )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 CALL_FUNCTION 2					      								    								  
80 BINARY_ADD						      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
Disassembly of <code object power at 0x7f33e2653f60, file "<d def power ( x , y ) :					    def power ( x , y ) :					  success : None
2 0 LOAD_FAST 1 ( y )					      	  if ( y == 0 ) : return 1				    	if y == 0 : return 1					  
2 LOAD_CONST 1 ( 0 )					      	  temp = power ( x , int ( y / 2 ) )			    	temp = power ( x , int ( y / 2 ) )			  
4 COMPARE_OP 2 ( == )					      	  if ( y % 2 == 0 ) :					    	if y % 2 == 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return temp * temp				    	    return temp * temp					  
8 LOAD_CONST 2 ( 1 )					      	  else :						    	else :							  
10 RETURN_VALUE						      	      if ( y > 0 ) : return x * temp * temp		    	    if y > 0 : return ( x * temp ) * temp		  
							      	      else : return ( temp * temp ) / x			    	    return temp * temp / x				  
3 >> 12 LOAD_GLOBAL 0 ( power )				      								    								  
14 LOAD_FAST 0 ( x )					      								    								  
16 LOAD_GLOBAL 1 ( int )				      								    								  
18 LOAD_FAST 1 ( y )					      								    								  
20 LOAD_CONST 3 ( 2 )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( y )					      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
5 42 LOAD_FAST 2 ( temp )				      								    								  
44 LOAD_FAST 2 ( temp )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
7 >> 50 LOAD_FAST 1 ( y )				      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 70					      								    								  
58 LOAD_FAST 0 ( x )					      								    								  
60 LOAD_FAST 2 ( temp )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_FAST 2 ( temp )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
8 >> 70 LOAD_FAST 2 ( temp )				      								    								  
72 LOAD_FAST 2 ( temp )					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_FAST 0 ( x )					      								    								  
78 BINARY_TRUE_DIVIDE					      								    								  
80 RETURN_VALUE						      								    								  
82 LOAD_CONST 0 ( None )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
Disassembly of <code object minimumSquare at 0x7f33e2649a50,  def minimumSquare ( a , b ) :				    def minimumSquare ( a , b ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 2 ( result )				      	  rem = 0						    	rem = 0							  
							      	  if ( a < b ) :					    	if a < b :						  
3 4 LOAD_CONST 1 ( 0 )					      	      a , b = b , a					    	    a , b = b , a					  
6 STORE_FAST 3 ( rem )					      	  while ( b > 0 ) :					    	while b > 0 :						  
							      	      result += int ( a / b )				    	    result += int ( a / b )				  
4 8 LOAD_FAST 0 ( a )					      	      rem = int ( a % b )				    	    rem = int ( a % b )					  
10 LOAD_FAST 1 ( b )					      	      a = b						    	    a = b						  
12 COMPARE_OP 0 ( < )					      	      b = rem						    	    b = rem						  
14 POP_JUMP_IF_FALSE 26					      	  return result						    	return result						  
							      								    								  
5 16 LOAD_FAST 1 ( b )					      								    								  
18 LOAD_FAST 0 ( a )					      								    								  
20 ROT_TWO						      								    								  
22 STORE_FAST 0 ( a )					      								    								  
24 STORE_FAST 1 ( b )					      								    								  
							      								    								  
6 >> 26 SETUP_LOOP 48 ( to 76 )				      								    								  
>> 28 LOAD_FAST 1 ( b )					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
7 36 LOAD_FAST 2 ( result )				      								    								  
38 LOAD_GLOBAL 0 ( int )				      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 2 ( result )				      								    								  
							      								    								  
8 52 LOAD_GLOBAL 0 ( int )				      								    								  
54 LOAD_FAST 0 ( a )					      								    								  
56 LOAD_FAST 1 ( b )					      								    								  
58 BINARY_MODULO					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 STORE_FAST 3 ( rem )					      								    								  
							      								    								  
9 64 LOAD_FAST 1 ( b )					      								    								  
66 STORE_FAST 0 ( a )					      								    								  
							      								    								  
10 68 LOAD_FAST 3 ( rem )				      								    								  
70 STORE_FAST 1 ( b )					      								    								  
72 JUMP_ABSOLUTE 28					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
11 >> 76 LOAD_FAST 2 ( result )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
Disassembly of <code object countSubStr at 0x7f33e2649a50, fi def countSubStr ( st , n ) :				    def countSubStr ( st , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if ( st [ i ] == '1' ) :				    	    if st [ i ] == '1' :				  
3 4 SETUP_LOOP 74 ( to 80 )				      		  for j in range ( i + 1 , n ) :		    		for j in range ( i + 1 , n ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      if ( st [ j ] == '1' ) :			    		    if st [ j ] == '1' :			  
8 LOAD_CONST 1 ( 0 )					      			  res = res + 1				    			res = res + 1				  
10 LOAD_FAST 1 ( n )					      	  return res						    return res							  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 60 ( to 78 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( st )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 2 ( '1' )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 SETUP_LOOP 42 ( to 76 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 24 ( to 74 )				      								    								  
50 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( st )					      								    								  
54 LOAD_FAST 4 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 2 ( '1' )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( res )				      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 2 ( res )					      								    								  
72 JUMP_ABSOLUTE 48					      								    								  
>> 74 POP_BLOCK						      								    								  
>> 76 JUMP_ABSOLUTE 16					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
8 >> 80 LOAD_FAST 2 ( res )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	      MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	    MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL		  MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL
--							      --							    --								  --
Disassembly of <code object minOps at 0x7f33e2644930, file "< def minOps ( arr , n , k ) :				    def minOps ( arr , n , k = 0 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  max1 = max ( arr )					    	max1 = max ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  res = 0						    	res = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 3 ( max1 )					      	      if ( ( max1 - arr [ i ] ) % k != 0 ) :		    	    if max1 - arr [ i ] ) % k != 0 :			  
							      		  return - 1					    		return - 1					  
3 8 LOAD_CONST 1 ( 0 )					      	      else :						    	    res += max1 - arr [ i ] / k				  
10 STORE_FAST 4 ( res )					      		  res += ( max1 - arr [ i ] ) / k		    	return int ( res )					  
							      	  return int ( res )					    								  
4 12 SETUP_LOOP 62 ( to 76 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 48 ( to 74 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( max1 )				      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_FAST 2 ( k )					      								    								  
40 BINARY_MODULO					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 3 ( != )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 48 LOAD_CONST 2 ( - 1 )				      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_FAST 4 ( res )				      								    								  
54 LOAD_FAST 3 ( max1 )					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 LOAD_FAST 2 ( k )					      								    								  
66 BINARY_TRUE_DIVIDE					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 4 ( res )					      								    								  
72 JUMP_ABSOLUTE 24					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_GLOBAL 2 ( int )				      								    								  
78 LOAD_FAST 4 ( res )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		      AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		    AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		  AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES
--							      --							    --								  --
Disassembly of <code object polygonArea at 0x7f33e2653f60, fi def polygonArea ( X , Y , n ) :				    def polygonArea ( X , Y , n = 5 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0.0 )				      	  area = 0.0						    	area = 0.0						  
2 STORE_FAST 3 ( area )					      	  j = n - 1						    	j = n - 1						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_FAST 2 ( n )					      	      area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) 	    area += X [ j ] + X [ i ] * Y [ j ] - Y [ i ]	  
6 LOAD_CONST 2 ( 1 )					      	      j = i						    	    j = i						  
8 BINARY_SUBTRACT					      	  return int ( abs ( area / 2.0 ) )			    	return int ( abs ( area / 2.0 ) )			  
10 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 12 SETUP_LOOP 58 ( to 72 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 3 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 44 ( to 70 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( area )				      								    								  
30 LOAD_FAST 0 ( X )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( X )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 1 ( Y )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( area )				      								    								  
							      								    								  
6 64 LOAD_FAST 5 ( i )					      								    								  
66 STORE_FAST 4 ( j )					      								    								  
68 JUMP_ABSOLUTE 24					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_GLOBAL 1 ( int )				      								    								  
74 LOAD_GLOBAL 2 ( abs )				      								    								  
76 LOAD_FAST 3 ( area )					      								    								  
78 LOAD_CONST 4 ( 2.0 )					      								    								  
80 BINARY_TRUE_DIVIDE					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE
--							      --							    --								  --
Disassembly of <code object findMinRooms at 0x7f33e2653ed0, f def findMinRooms ( slots , n , m ) :			    def findMinRooms ( slots , n , m ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  counts = [ 0 ] * m ;					    	counts = [ 0 ] * m					  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_FAST 2 ( m )					      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
6 BINARY_MULTIPLY					      		  if ( slots [ i ] [ j ] == '1' ) :		    		if slots [ i ] [ j ] == '1' :			  
8 STORE_FAST 3 ( counts )				      		      counts [ j ] += 1 ;			    		    counts [ j ] += 1				  
							      	  return max ( counts ) ;				    	return max ( counts )					  
3 10 SETUP_LOOP 66 ( to 78 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 54 ( to 76 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 48 ( to 74 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 2 ( m )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 36 ( to 72 )				      								    								  
36 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( slots )				      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 5 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 2 ( '1' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 54 LOAD_FAST 3 ( counts )				      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 DUP_TOP_TWO						      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 ROT_THREE						      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 JUMP_ABSOLUTE 20					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
7 >> 78 LOAD_GLOBAL 1 ( max )				      								    								  
80 LOAD_FAST 3 ( counts )				      								    								  
82 CALL_FUNCTION 1					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
Disassembly of <code object canMakeAllSame at 0x7f33e2649a50, def canMakeAllSame ( str ) :				    def canMakeAllSame ( str ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  zeros = 0						    	zeros = 0						  
2 STORE_FAST 1 ( zeros )				      	  ones = 0						    	ones = 0						  
							      	  for i in range ( 0 , len ( str ) ) :			    	for i in range ( 0 , len ( str ) ) :			  
3 4 LOAD_CONST 1 ( 0 )					      	      ch = str [ i ] ;					    	    ch = str [ i ]					  
6 STORE_FAST 2 ( ones )					      	      if ( ch == '0' ) :				    	    if ch == '0' :					  
							      		  zeros = zeros + 1				    		zeros = zeros + 1				  
4 8 SETUP_LOOP 56 ( to 66 )				      	      else :						    	    else :						  
10 LOAD_GLOBAL 0 ( range )				      		  ones = ones + 1				    		ones = ones + 1					  
12 LOAD_CONST 1 ( 0 )					      	  return ( zeros == 1 or ones == 1 ) ;			    	return zeros == 1 or ones == 1				  
14 LOAD_GLOBAL 1 ( len )				      								    								  
16 LOAD_FAST 0 ( str )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 38 ( to 64 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 4 ( ch )					      								    								  
							      								    								  
6 36 LOAD_FAST 4 ( ch )					      								    								  
38 LOAD_CONST 2 ( '0' )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 44 LOAD_FAST 1 ( zeros )				      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 1 ( zeros )				      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
9 >> 54 LOAD_FAST 2 ( ones )				      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 2 ( ones )				      								    								  
62 JUMP_ABSOLUTE 24					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
10 >> 66 LOAD_FAST 1 ( zeros )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 JUMP_IF_TRUE_OR_POP 80				      								    								  
74 LOAD_FAST 2 ( ones )					      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
>> 80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			      SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			    SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			  SORTING_ARRAY_REVERSE_AROUND_<unk> DLE
--							      --							    --								  --
Disassembly of <code object ifPossible at 0x7f33e2653f60, fil def ifPossible ( arr , n ) :				    def ifPossible ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  cp = [ 0 ] * n					    	cp = [ 0 ] * n						  
2 BUILD_LIST 1						      	  cp = arr						    	cp = arr						  
4 LOAD_FAST 1 ( n )					      	  cp.sort ( )						    	cp.sort ( )						  
6 BINARY_MULTIPLY					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
8 STORE_FAST 2 ( cp )					      	      if ( not ( arr [ i ] == cp [ i ] ) and not ( arr [ n  	    if not arr [ i ] == cp [ i ] or arr [ n - 1 - i ] ==  
							      		  return False					    		return False					  
3 10 LOAD_FAST 0 ( arr )				      	  return True						    return True							  
12 STORE_FAST 2 ( cp )					      								    								  
							      								    								  
4 14 LOAD_FAST 2 ( cp )					      								    								  
16 LOAD_METHOD 0 ( sort )				      								    								  
18 CALL_METHOD 0					      								    								  
20 POP_TOP						      								    								  
							      								    								  
5 22 SETUP_LOOP 62 ( to 86 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 48 ( to 84 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( cp )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_TRUE 34					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 1 ( n )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 2 ( cp )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_TRUE 34					      								    								  
							      								    								  
7 78 LOAD_CONST 3 ( False )				      								    								  
80 RETURN_VALUE						      								    								  
82 JUMP_ABSOLUTE 34					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
8 >> 86 LOAD_CONST 4 ( True )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
Disassembly of <code object binaryToDecimal at 0x7f33e2653ed0 def binaryToDecimal ( n ) :				    def binaryToDecimal ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  num = n ;						    	num = n							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( num )					      	  dec_value = 0 ;					    	dec_value = 0						  _sa.valid/PROGRAM_BINARY_DECIMAL_CONVERSION_1.py",
							      	  base1 = 1 ;						    	base1 = 1						   line 34     for i in range ( LOAD_METHOD 0 ( + 1
3 4 LOAD_CONST 1 ( 0 )					      	  len1 = len ( num ) ;					    	try :							  , - 1 , - 1 ) :				   ^
6 STORE_FAST 2 ( dec_value )				      	  for i in range ( len1 - 1 , - 1 , - 1 ) :		    	    for i in range ( LOAD_METHOD 0 ( + 1 , - 1 , - 1 ) :   SyntaxError: invalid syntax
							      	      if ( num [ i ] == '1' ) :				    		if num [ i ] == "1" :				  
4 8 LOAD_CONST 2 ( 1 )					      		  dec_value += base1 ;				    		    dec_value += base1				  
10 STORE_FAST 3 ( base1 )				      	      base1 = base1 * 2 ;				    		base1 = base1 * 2				  
							      	  return dec_value ;					    	return dec_value					  
5 12 LOAD_GLOBAL 0 ( len )				      								    								  
14 LOAD_FAST 1 ( num )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 STORE_FAST 4 ( len1 )				      								    								  
							      								    								  
6 20 SETUP_LOOP 52 ( to 74 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 4 ( len1 )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_CONST 3 ( - 1 )					      								    								  
32 LOAD_CONST 3 ( - 1 )					      								    								  
34 CALL_FUNCTION 3					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 32 ( to 72 )				      								    								  
40 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 42 LOAD_FAST 1 ( num )				      								    								  
44 LOAD_FAST 5 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 4 ( '1' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 54 LOAD_FAST 2 ( dec_value )				      								    								  
56 LOAD_FAST 3 ( base1 )				      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( dec_value )				      								    								  
							      								    								  
9 >> 62 LOAD_FAST 3 ( base1 )				      								    								  
64 LOAD_CONST 5 ( 2 )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 STORE_FAST 3 ( base1 )				      								    								  
70 JUMP_ABSOLUTE 38					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_FAST 2 ( dec_value )			      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
Disassembly of <code object sortString at 0x7f33e2644f60, fil def sortString ( str , n ) :				    def sortString ( str , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  new_str = ""						    	new_str = ""						  
2 STORE_FAST 2 ( new_str )				      	  for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	    	for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	  
							      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
3 4 SETUP_LOOP 76 ( to 82 )				      		  if ( str [ j ] == chr ( i ) ) :		    		if str [ j ] == chr ( i ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      new_str += str [ j ]			    		    new_str += str [ j ]			  
8 LOAD_GLOBAL 1 ( ord )					      	  return new_str					    return new_str						  
10 LOAD_CONST 2 ( 'a' )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 LOAD_GLOBAL 1 ( ord )				      								    								  
16 LOAD_CONST 3 ( 'z' )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 LOAD_CONST 4 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 50 ( to 80 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 32 SETUP_LOOP 44 ( to 78 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 32 ( to 76 )				      								    								  
44 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( str )				      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_GLOBAL 2 ( chr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 62 LOAD_FAST 2 ( new_str )				      								    								  
64 LOAD_FAST 0 ( str )					      								    								  
66 LOAD_FAST 4 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( new_str )				      								    								  
74 JUMP_ABSOLUTE 42					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 JUMP_ABSOLUTE 28					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
7 >> 82 LOAD_FAST 2 ( new_str )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object countFact at 0x7f33e2649a50, file def countFact ( low , high ) :				    def countFact ( low , high ) :				  success : None
2 0 LOAD_CONST 1 ( 1 )					      	  fact = 1						    	fact = 1						  
2 STORE_FAST 2 ( fact )					      	  x = 1							    	x = 1							  
							      	  while ( fact < low ) :				    	while fact < low :					  
3 4 LOAD_CONST 1 ( 1 )					      	      fact = fact * x					    	    fact = fact * x					  
6 STORE_FAST 3 ( x )					      	      x += 1						    	    x += 1						  
							      	  res = 0						    	res = 0							  
4 8 SETUP_LOOP 28 ( to 38 )				      	  while ( fact <= high ) :				    	while fact <= high :					  
>> 10 LOAD_FAST 2 ( fact )				      	      res += 1						    	    res += 1						  
12 LOAD_FAST 0 ( low )					      	      fact = fact * x					    	    fact = fact * x					  
14 COMPARE_OP 0 ( < )					      	      x += 1						    	    x += 1						  
16 POP_JUMP_IF_FALSE 36					      	  return res						    	return res						  
							      								    								  
5 18 LOAD_FAST 2 ( fact )				      								    								  
20 LOAD_FAST 3 ( x )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 STORE_FAST 2 ( fact )				      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( x )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 3 ( x )					      								    								  
34 JUMP_ABSOLUTE 10					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
7 >> 38 LOAD_CONST 2 ( 0 )				      								    								  
40 STORE_FAST 4 ( res )					      								    								  
							      								    								  
8 42 SETUP_LOOP 36 ( to 80 )				      								    								  
>> 44 LOAD_FAST 2 ( fact )				      								    								  
46 LOAD_FAST 1 ( high )					      								    								  
48 COMPARE_OP 1 ( <= )					      								    								  
50 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
9 52 LOAD_FAST 4 ( res )				      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 4 ( res )					      								    								  
							      								    								  
10 60 LOAD_FAST 2 ( fact )				      								    								  
62 LOAD_FAST 3 ( x )					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 STORE_FAST 2 ( fact )				      								    								  
							      								    								  
11 68 LOAD_FAST 3 ( x )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 3 ( x )					      								    								  
76 JUMP_ABSOLUTE 44					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
12 >> 80 LOAD_FAST 4 ( res )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION
--							      --							    --								  --
Disassembly of <code object findMinX at 0x7f33e2653f60, file  def findMinX ( num , rem , k ) :				    def findMinX ( num , rem = [ ] , k = 0 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  x = 1 ;						    	x = 1							  
2 STORE_FAST 3 ( x )					      	  while ( True ) :					    	while True :						  
							      	      j = 0 ;						    	    j = 0						  
3 4 SETUP_LOOP 72 ( to 78 )				      	      while ( j < k ) :					    	    while j < k :					  
							      		  if ( x % num [ j ] != rem [ j ] ) :		    		if x % num [ j ] != rem [ j ] :			  
4 >> 6 LOAD_CONST 2 ( 0 )				      		      break ;					    		    break					  
8 STORE_FAST 4 ( j )					      		  j += 1 ;					    		j += 1						  
							      	      if ( j == k ) :					    	if j == k :						  
5 10 SETUP_LOOP 42 ( to 54 )				      		  return x ;					    	    return x						  
>> 12 LOAD_FAST 4 ( j )					      	      x += 1 ;						    	else :							  
14 LOAD_FAST 2 ( k )					      								    	    x += 1						  
16 COMPARE_OP 0 ( < )					      								    								  
18 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 20 LOAD_FAST 3 ( x )					      								    								  
22 LOAD_FAST 0 ( num )					      								    								  
24 LOAD_FAST 4 ( j )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_FAST 1 ( rem )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
7 40 BREAK_LOOP						      								    								  
							      								    								  
8 >> 42 LOAD_FAST 4 ( j )				      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( j )					      								    								  
50 JUMP_ABSOLUTE 12					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
9 >> 54 LOAD_FAST 4 ( j )				      								    								  
56 LOAD_FAST 2 ( k )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
10 62 LOAD_FAST 3 ( x )					      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
11 >> 66 LOAD_FAST 3 ( x )				      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 3 ( x )					      								    								  
74 JUMP_ABSOLUTE 6					      								    								  
76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2
--							      --							    --								  --
Disassembly of <code object minSum at 0x7f33e2644f60, file "< def minSum ( a , n ) :					    def minSum ( a , n ) :					  success : identical to gold
2 0 LOAD_GLOBAL 0 ( sorted )				      	  a = sorted ( a )					    	a = sorted ( a )					  
2 LOAD_FAST 0 ( a )					      	  num1 , num2 = 0 , 0					    	num1 , num2 = 0 , 0					  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 0 ( a )					      	      if i % 2 == 0 :					    	    if i % 2 == 0 :					  
							      		  num1 = num1 * 10 + a [ i ]			    		num1 = num1 * 10 + a [ i ]			  
3 8 LOAD_CONST 1 ( ( 0 , 0 ) )				      	      else :						    	    else :						  
10 UNPACK_SEQUENCE 2					      		  num2 = num2 * 10 + a [ i ]			    		num2 = num2 * 10 + a [ i ]			  
12 STORE_FAST 2 ( num1 )				      	  return num2 + num1					    	return num2 + num1					  
14 STORE_FAST 3 ( num2 )				      								    								  
							      								    								  
4 16 SETUP_LOOP 62 ( to 80 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 50 ( to 78 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 4 ( i )					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_CONST 3 ( 0 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( num1 )				      								    								  
44 LOAD_CONST 4 ( 10 )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 0 ( a )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( num1 )				      								    								  
58 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 60 LOAD_FAST 3 ( num2 )				      								    								  
62 LOAD_CONST 4 ( 10 )					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( num2 )				      								    								  
76 JUMP_ABSOLUTE 26					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_FAST 3 ( num2 )				      								    								  
82 LOAD_FAST 2 ( num1 )					      								    								  
84 BINARY_ADD						      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7f33e2649a50, f def binarySearch ( arr , low , high ) :			    def binarySearch ( arr , low , high ) :			  script_not_found : None
2 0 LOAD_FAST 2 ( high )				      	  if high >= low :					    	if high >= low :					  
2 LOAD_FAST 1 ( low )					      	      mid = ( low + high ) // 2				    	    mid = ( low + high ) // 2				  
4 COMPARE_OP 5 ( >= )					      	  if mid is arr [ mid ] :				    	if mid is arr [ mid ] :					  
6 POP_JUMP_IF_FALSE 20					      	      return mid					    	    return mid						  
							      	  if mid > arr [ mid ] :				    	if mid > arr [ mid ] :					  
3 8 LOAD_FAST 1 ( low )					      	      return binarySearch ( arr , ( mid + 1 ) , high )	    	    return binarySearch ( arr , mid + 1 , high )	  
10 LOAD_FAST 2 ( high )					      	  else :						    	return binarySearch ( arr , low , mid - 1 )		  
12 BINARY_ADD						      	      return binarySearch ( arr , low , ( mid - 1 ) )	    return - 1							  
14 LOAD_CONST 1 ( 2 )					      	  return - 1						    								  
16 BINARY_FLOOR_DIVIDE					      								    								  
18 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
4 >> 20 LOAD_FAST 3 ( mid )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_FAST 3 ( mid )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 COMPARE_OP 8 ( is )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 32 LOAD_FAST 3 ( mid )				      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_FAST 3 ( mid )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( mid )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 3 ( mid )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 2 ( high )					      								    								  
60 CALL_FUNCTION 3					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
9 >> 64 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 1 ( low )					      								    								  
70 LOAD_FAST 3 ( mid )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 CALL_FUNCTION 3					      								    								  
78 RETURN_VALUE						      								    								  
							      								    								  
10 80 LOAD_CONST 3 ( - 1 )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7f33e2653ed0, file "<d def check ( st ) :					    def check ( st ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    	n = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  if ( ( ( int ) ( st [ n - 1 ] ) % 2 ) != 0 ) :	    	if int ( st [ n - 1 ] ) % 2 != 0 :			  
4 CALL_FUNCTION 1					      	      return False					    	    return False					  
6 STORE_FAST 1 ( n )					      	  digitSum = 0						    	digitSum = 0						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 8 LOAD_GLOBAL 1 ( int )				      	      digitSum = digitSum + ( int ) ( st [ i ] )	    	    digitSum = digitSum + int ( st [ i ] )		  
10 LOAD_FAST 0 ( st )					      	  return ( digitSum % 3 == 0 )				    	return digitSum % 3 == 0				  
12 LOAD_FAST 1 ( n )					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 BINARY_SUBSCR					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 3 ( 0 )					      								    								  
28 COMPARE_OP 3 ( != )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
4 32 LOAD_CONST 4 ( False )				      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
5 >> 36 LOAD_CONST 3 ( 0 )				      								    								  
38 STORE_FAST 2 ( digitSum )				      								    								  
							      								    								  
6 40 SETUP_LOOP 34 ( to 76 )				      								    								  
42 LOAD_GLOBAL 2 ( range )				      								    								  
44 LOAD_CONST 3 ( 0 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 20 ( to 74 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 56 LOAD_FAST 2 ( digitSum )				      								    								  
58 LOAD_GLOBAL 1 ( int )				      								    								  
60 LOAD_FAST 0 ( st )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 2 ( digitSum )				      								    								  
72 JUMP_ABSOLUTE 52					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_FAST 2 ( digitSum )			      								    								  
78 LOAD_CONST 5 ( 3 )					      								    								  
80 BINARY_MODULO					      								    								  
82 LOAD_CONST 3 ( 0 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND
--							      --							    --								  --
Disassembly of <code object isSubSequence at 0x7f33e26494b0,  def isSubSequence ( string1 , string2 , m , n ) :		    def isSubSequence ( string, string2 , m , n ) :		  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if m == 0 : return True				    	if m == 0 : return True					  
2 LOAD_CONST 1 ( 0 )					      	  if n == 0 : return False				    	if n == 0 : return False				  
4 COMPARE_OP 2 ( == )					      	  if string1 [ m - 1 ] == string2 [ n - 1 ] :		    	if string( string1 [ m - 1 ] == string2 [ n - 1 ] ) :	  
6 POP_JUMP_IF_FALSE 12					      	      return isSubSequence ( string1 , string2 , m - 1 , n  	    return isSubSequence ( string1 , string2 , m - 1 , n  
8 LOAD_CONST 2 ( True )					      	  return isSubSequence ( string1 , string2 , m , n - 1 )    	return isSubSequence ( string1 , string2 , m , n - 1 )	  
10 RETURN_VALUE						      								    								  
							      								    								  
3 >> 12 LOAD_FAST 3 ( n )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
20 LOAD_CONST 3 ( False )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( string1 )				      								    								  
26 LOAD_FAST 2 ( m )					      								    								  
28 LOAD_CONST 4 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( string2 )				      								    								  
36 LOAD_FAST 3 ( n )					      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
5 48 LOAD_GLOBAL 0 ( isSubSequence )			      								    								  
50 LOAD_FAST 0 ( string1 )				      								    								  
52 LOAD_FAST 1 ( string2 )				      								    								  
54 LOAD_FAST 2 ( m )					      								    								  
56 LOAD_CONST 4 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_FAST 3 ( n )					      								    								  
62 LOAD_CONST 4 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 CALL_FUNCTION 4					      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
6 >> 70 LOAD_GLOBAL 0 ( isSubSequence )			      								    								  
72 LOAD_FAST 0 ( string1 )				      								    								  
74 LOAD_FAST 1 ( string2 )				      								    								  
76 LOAD_FAST 2 ( m )					      								    								  
78 LOAD_FAST 3 ( n )					      								    								  
80 LOAD_CONST 4 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 4					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
Disassembly of <code object countLattice at 0x7f33e2653f60, f def countLattice ( r ) :					    def countLattice ( r ) :					  success : None
2 0 LOAD_FAST 0 ( r )					      	  if ( r <= 0 ) :					    	if r <= 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 1 ( <= )					      	  result = 4						    	result = 4						  
6 POP_JUMP_IF_FALSE 12					      	  for x in range ( 1 , r ) :				    	for x in range ( 1 , r ) :				  
							      	      ySquare = r * r - x * x				    	    ySquare = r * r - x * x				  
3 8 LOAD_CONST 1 ( 0 )					      	      y = int ( math.sqrt ( ySquare ) )			    	    y = int ( math.sqrt ( ySquare ) )			  
10 RETURN_VALUE						      	      if ( y * y == ySquare ) :				    	    if y * y == ySquare :				  
							      		  result += 4					    		result += 4					  
4 >> 12 LOAD_CONST 2 ( 4 )				      	  return result						    	return result						  
14 STORE_FAST 1 ( result )				      								    								  
							      								    								  
5 16 SETUP_LOOP 68 ( to 86 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 LOAD_FAST 0 ( r )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 54 ( to 84 )				      								    								  
30 STORE_FAST 2 ( x )					      								    								  
							      								    								  
6 32 LOAD_FAST 0 ( r )					      								    								  
34 LOAD_FAST 0 ( r )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_FAST 2 ( x )					      								    								  
40 LOAD_FAST 2 ( x )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_FAST 3 ( ySquare )				      								    								  
							      								    								  
7 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_GLOBAL 2 ( math )				      								    								  
52 LOAD_METHOD 3 ( sqrt )				      								    								  
54 LOAD_FAST 3 ( ySquare )				      								    								  
56 CALL_METHOD 1					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 STORE_FAST 4 ( y )					      								    								  
							      								    								  
8 62 LOAD_FAST 4 ( y )					      								    								  
64 LOAD_FAST 4 ( y )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_FAST 3 ( ySquare )				      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
9 74 LOAD_FAST 1 ( result )				      								    								  
76 LOAD_CONST 2 ( 4 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 1 ( result )				      								    								  
82 JUMP_ABSOLUTE 28					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 1 ( result )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1
--							      --							    --								  --
Disassembly of <code object getOddOccurrence at 0x7f33e2644f6 def getOddOccurrence ( arr , size ) :			    def getOddOc( arr , size = ( 50 , 50 ) ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  Hash = dict ( )					    	Hash = dict ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  for i in range ( size ) :				    	for i in range ( size ) :				  _sa.valid/FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_
4 STORE_FAST 2 ( Hash )					      	      Hash [ arr [ i ] ] = Hash.get ( arr [ i ] , 0 ) + 1 ; 	    Hash [ arr [ i ] ] = Hash.get ( arr [ i ] , 0 ) + 1	  TIMES_1.py", line 27	   def f_filled arr , size =
							      	  for i in Hash :					    	for i in Hash :						   ( 50 , 50 ) ) :		      ^ SyntaxError:
3 6 SETUP_LOOP 44 ( to 52 )				      	      if ( Hash [ i ] % 2 != 0 ) :			    	    if Hash [ i ] % 2 != 0 :				   invalid syntax
8 LOAD_GLOBAL 1 ( range )				      		  return i					    		return i					  
10 LOAD_FAST 1 ( size )					      	  return - 1						    	return - 1						  
12 CALL_FUNCTION 1					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( Hash )				      								    								  
22 LOAD_METHOD 2 ( get )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 CALL_METHOD 2					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( Hash )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 SETUP_LOOP 32 ( to 86 )				      								    								  
54 LOAD_FAST 2 ( Hash )					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 24 ( to 84 )				      								    								  
60 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 62 LOAD_FAST 2 ( Hash )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 3 ( 2 )					      								    								  
70 BINARY_MODULO					      								    								  
72 LOAD_CONST 1 ( 0 )					      								    								  
74 COMPARE_OP 3 ( != )					      								    								  
76 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 78 LOAD_FAST 3 ( i )					      								    								  
80 RETURN_VALUE						      								    								  
82 JUMP_ABSOLUTE 58					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
8 >> 86 LOAD_CONST 4 ( - 1 )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		      FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		    FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		  FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B
--							      --							    --								  --
Disassembly of <code object computeLastDigit at 0x7f33e26494b def computeLastDigit ( A , B ) :				    def computeLastDigit ( A , B ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  variable = 1						    	variable = 1						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( variable )				      	  if ( A == B ) :					    	if A == B :						  _sa.valid/FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTOR
							      	      return 1						    	    return 1						  IAL_B.py", line 38	 else :	       ^ SyntaxError
3 4 LOAD_FAST 0 ( A )					      	  elif ( ( B - A ) >= 5 ) :				    	if B - A >= 5 :						  : invalid syntax
6 LOAD_FAST 1 ( B )					      	      return 0						    	    return 0						  
8 COMPARE_OP 2 ( == )					      	  else :						    	for i in range ( A + 1 , B + 1 ) :			  
10 POP_JUMP_IF_FALSE 16					      	      for i in range ( A + 1 , B + 1 ) :		    	    variable = variable * ( i % 10 ) % 10		  
							      		  variable = ( variable * ( i % 10 ) ) % 10	    	return variable % 10					  
4 12 LOAD_CONST 1 ( 1 )					      	      return variable % 10				    else :							  
14 RETURN_VALUE						      								    	return variable % 10					  
							      								    								  
5 >> 16 LOAD_FAST 1 ( B )				      								    								  
18 LOAD_FAST 0 ( A )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 5 )					      								    								  
24 COMPARE_OP 5 ( >= )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 28 LOAD_CONST 3 ( 0 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
8 >> 32 SETUP_LOOP 42 ( to 76 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 0 ( A )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( B )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 20 ( to 74 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 56 LOAD_FAST 2 ( variable )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 LOAD_CONST 4 ( 10 )					      								    								  
62 BINARY_MODULO					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_CONST 4 ( 10 )					      								    								  
68 BINARY_MODULO					      								    								  
70 STORE_FAST 2 ( variable )				      								    								  
72 JUMP_ABSOLUTE 52					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 2 ( variable )			      								    								  
78 LOAD_CONST 4 ( 10 )					      								    								  
80 BINARY_MODULO					      								    								  
82 RETURN_VALUE						      								    								  
84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
Disassembly of <code object lexNext at 0x7f33e2653f60, file " def lexNext ( s , n ) :					    def lexNext ( s , n ) :					  script_not_found : None
2 0 SETUP_LOOP 82 ( to 84 )				      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if s [ i ] != 'z' :				    	    if s [ i ] != "z" :					  
4 LOAD_FAST 1 ( n )					      		  k = ord ( s [ i ] )				    		k = ord ( s [ i ] )				  
6 LOAD_CONST 1 ( 1 )					      		  s [ i ] = chr ( k + 1 )			    		s [ i ] = chr ( k + 1 )				  
8 BINARY_SUBTRACT					      		  return ''.join ( s )				    		return "".join ( s )				  
10 LOAD_CONST 2 ( - 1 )					      	      s [ i ] = 'a'					    	    else :						  
12 LOAD_CONST 2 ( - 1 )					      								    		s [ i ] = "a"					  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 62 ( to 82 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 3 ( 'z' )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
4 34 LOAD_GLOBAL 1 ( ord )				      								    								  
36 LOAD_FAST 0 ( s )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 STORE_FAST 3 ( k )					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 2 ( chr )				      								    								  
48 LOAD_FAST 3 ( k )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 CALL_FUNCTION 1					      								    								  
56 LOAD_FAST 0 ( s )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
							      								    								  
6 62 LOAD_CONST 4 ( '' )				      								    								  
64 LOAD_METHOD 3 ( join )				      								    								  
66 LOAD_FAST 0 ( s )					      								    								  
68 CALL_METHOD 1					      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
7 >> 72 LOAD_CONST 5 ( 'a' )				      								    								  
74 LOAD_FAST 0 ( s )					      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 STORE_SUBSCR						      								    								  
80 JUMP_ABSOLUTE 18					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
Disassembly of <code object printPascal at 0x7f33e2653f60, fi def printPascal ( n ) :					    def printPascal ( n ) :					  script_not_found : None
2 0 SETUP_LOOP 90 ( to 92 )				      	  for line in range ( 1 , n + 1 ) :			    	for line in range ( 1 , n + 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      C = 1 ;						    	    C = 1						  
4 LOAD_CONST 1 ( 1 )					      	      for i in range ( 1 , line + 1 ) :			    	    for i in range ( 1 , line + 1 ) :			  
6 LOAD_FAST 0 ( n )					      		  print ( C , end = "" ) ;			    		print ( C , end = "" )				  
8 LOAD_CONST 1 ( 1 )					      		  C = int ( C * ( line - i ) / i ) ;		    		C = int ( C * line - i ) / i			  
10 BINARY_ADD						      	      print ( "" ) ;					    	    print ( "" )					  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 72 ( to 90 )				      								    								  
18 STORE_FAST 1 ( line )				      								    								  
							      								    								  
3 20 LOAD_CONST 1 ( 1 )					      								    								  
22 STORE_FAST 2 ( C )					      								    								  
							      								    								  
4 24 SETUP_LOOP 54 ( to 80 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 LOAD_FAST 1 ( line )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 36 ( to 78 )				      								    								  
42 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 1 ( print )				      								    								  
46 LOAD_FAST 2 ( C )					      								    								  
48 LOAD_CONST 2 ( '' )					      								    								  
50 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
52 CALL_FUNCTION_KW 2					      								    								  
54 POP_TOP						      								    								  
							      								    								  
6 56 LOAD_GLOBAL 2 ( int )				      								    								  
58 LOAD_FAST 2 ( C )					      								    								  
60 LOAD_FAST 1 ( line )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_TRUE_DIVIDE					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 STORE_FAST 2 ( C )					      								    								  
76 JUMP_ABSOLUTE 40					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
7 >> 80 LOAD_GLOBAL 1 ( print )				      								    								  
82 LOAD_CONST 2 ( '' )					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 POP_TOP						      								    								  
88 JUMP_ABSOLUTE 16					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	      WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	    WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	  WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS
--							      --							    --								  --
Disassembly of <code object CountWays at 0x7f33e2644930, file def CountWays ( n ) :					    def CountWays ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  table = [ 0 ] * ( n + 1 )				    	table = [ 0 ] * n + 1					  
2 BUILD_LIST 1						      	  table [ 0 ] = 1					    	table [ 0 ] = 1						  
4 LOAD_FAST 0 ( n )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
6 LOAD_CONST 2 ( 1 )					      	      for j in range ( i , n + 1 ) :			    	    for j in range ( i , n + 1 ) :			  
8 BINARY_ADD						      		  table [ j ] += table [ j - i ]		    		table [ j ] += table [ j - i ]			  
10 BINARY_MULTIPLY					      	  return table [ n ]					    return table [ n ]						  
12 STORE_FAST 1 ( table )				      								    								  
							      								    								  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 LOAD_FAST 1 ( table )				      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 SETUP_LOOP 66 ( to 90 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 52 ( to 88 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 38 SETUP_LOOP 46 ( to 86 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 28 ( to 84 )				      								    								  
56 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 58 LOAD_FAST 1 ( table )				      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 DUP_TOP_TWO						      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( table )				      								    								  
68 LOAD_FAST 3 ( j )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 INPLACE_ADD						      								    								  
78 ROT_THREE						      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 54					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 JUMP_ABSOLUTE 34					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
7 >> 90 LOAD_FAST 1 ( table )				      								    								  
92 LOAD_FAST 0 ( n )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N
--							      --							    --								  --
Disassembly of <code object getMinSquares at 0x7f33e2653f60,  def getMinSquares ( n ) :					    def getMinSquares ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n <= 3 :						    	if n <= 3 :						  
2 LOAD_CONST 1 ( 3 )					      	      return n ;					    	    return n						  
4 COMPARE_OP 1 ( <= )					      	  res = n						    	res = n							  
6 POP_JUMP_IF_FALSE 12					      	  for x in range ( 1 , n + 1 ) :			    	for x in range ( 1 , n + 1 ) :				  
							      	      temp = x * x ;					    	    temp = x * x					  
3 8 LOAD_FAST 0 ( n )					      	      if temp > n :					    	    if temp > n :					  
10 RETURN_VALUE						      		  break						    		break						  
							      	      else :						    	    else :						  
4 >> 12 LOAD_FAST 0 ( n )				      		  res = min ( res , 1 + getMinSquares ( n - temp )  		res = min ( res , 1 , getMinSquares ( n - temp )  
14 STORE_FAST 1 ( res )					      	  return res ;						    	return res						  
							      								    								  
5 16 SETUP_LOOP 64 ( to 82 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 46 ( to 80 )				      								    								  
34 STORE_FAST 2 ( x )					      								    								  
							      								    								  
6 36 LOAD_FAST 2 ( x )					      								    								  
38 LOAD_FAST 2 ( x )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
7 44 LOAD_FAST 3 ( temp )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
8 52 BREAK_LOOP						      								    								  
54 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
10 >> 56 LOAD_GLOBAL 1 ( min )				      								    								  
58 LOAD_FAST 1 ( res )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 LOAD_GLOBAL 2 ( getMinSquares )			      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 LOAD_FAST 3 ( temp )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_FUNCTION 2					      								    								  
76 STORE_FAST 1 ( res )					      								    								  
78 JUMP_ABSOLUTE 32					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
11 >> 82 LOAD_FAST 1 ( res )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_EXTRA_CHARACTER_STRING_1			      FIND_ONE_EXTRA_CHARACTER_STRING_1				    FIND_ONE_EXTRA_CHARACTER_STRING_1				  FIND_ONE_EXTRA_CHARACTER_STRING_1
--							      --							    --								  --
Disassembly of <code object findExtraCharcter at 0x7f33e2649a def findExtraCharcter ( strA , strB ) :			    def findExtraCharcter ( strA , strB ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , len ( strA ) ) :			    	for i in range ( 0 , len ( strA ) ) :			  
							      	      res = res ^ ( ord ) ( strA [ i ] )		    	    res = ( res ^ ord ( strA [ i ] ) )			  
3 4 SETUP_LOOP 38 ( to 44 )				      	  for i in range ( 0 , len ( strB ) ) :			    	for i in range ( 0 , len ( strB ) ) :			  
6 LOAD_GLOBAL 0 ( range )				      	      res = res ^ ( ord ) ( strB [ i ] )		    	    res = ( res ^ ord ( strB [ i ] ) )			  
8 LOAD_CONST 1 ( 0 )					      	  return ( ( chr ) ( res ) ) ;				    	return chr ( res )					  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( strA )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( res )				      								    								  
26 LOAD_GLOBAL 2 ( ord )				      								    								  
28 LOAD_FAST 0 ( strA )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 BINARY_XOR						      								    								  
38 STORE_FAST 2 ( res )					      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 SETUP_LOOP 38 ( to 84 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 LOAD_GLOBAL 1 ( len )				      								    								  
52 LOAD_FAST 1 ( strB )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 20 ( to 82 )				      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 64 LOAD_FAST 2 ( res )				      								    								  
66 LOAD_GLOBAL 2 ( ord )				      								    								  
68 LOAD_FAST 1 ( strB )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_XOR						      								    								  
78 STORE_FAST 2 ( res )					      								    								  
80 JUMP_ABSOLUTE 60					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
7 >> 84 LOAD_GLOBAL 3 ( chr )				      								    								  
86 LOAD_FAST 2 ( res )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUM_CONTIGUOUS_SUBARRAY			      SMALLEST_SUM_CONTIGUOUS_SUBARRAY				    SMALLEST_SUM_CONTIGUOUS_SUBARRAY				  SMALLEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
Disassembly of <code object <<unk>> stSumSubarr at 0x7f33e264 def <<unk>> stSumSubarr ( arr , n ) :			    def <unk> stSumSubarr ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sys )				      	  min_ending_here = sys.maxsize				    	min_ending_here = sys.maxsize				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_ATTR 1 ( maxsize )				      	  min_so_far = sys.maxsize				    	min_so_far = sys.maxsize				  _sa.valid/SMALLEST_SUM_CONTIGUOUS_SUBARRAY.py", li
4 STORE_FAST 2 ( min_ending_here )			      	  for i in range ( n ) :				    	for i in range ( n ) :					  ne 31	    def f_filled stSumSubarr ( arr , n ) :
							      	      if ( min_ending_here > 0 ) :			    	    if min_ending_here > 0 :				  			    ^ SyntaxError: invalid s
3 6 LOAD_GLOBAL 0 ( sys )				      		  min_ending_here = arr [ i ]			    		min_ending_here = arr [ i ]			  yntax
8 LOAD_ATTR 1 ( maxsize )				      	      else :						    	    else :						  
10 STORE_FAST 3 ( min_so_far )				      		  min_ending_here += arr [ i ]			    		min_ending_here += arr [ i ]			  
							      	      min_so_far = min ( min_so_far , min_ending_here )	    	    min_so_far = min ( min_so_far , min_ending_here )	  
4 12 SETUP_LOOP 56 ( to 70 )				      	  return min_so_far					    return min_so_far						  
14 LOAD_GLOBAL 2 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 44 ( to 68 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( min_ending_here )			      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 4 ( > )					      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 STORE_FAST 2 ( min_ending_here )			      								    								  
42 JUMP_FORWARD 12 ( to 56 )				      								    								  
							      								    								  
8 >> 44 LOAD_FAST 2 ( min_ending_here )			      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 2 ( min_ending_here )			      								    								  
							      								    								  
9 >> 56 LOAD_GLOBAL 3 ( min )				      								    								  
58 LOAD_FAST 3 ( min_so_far )				      								    								  
60 LOAD_FAST 2 ( min_ending_here )			      								    								  
62 CALL_FUNCTION 2					      								    								  
64 STORE_FAST 3 ( min_so_far )				      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 3 ( min_so_far )			      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object ceilSearch at 0x7f33e2644f60, fil def ceilSearch ( arr , low , high , x ) :			    def ceilSearch ( arr , low , high , x = 0 ) :		  success : None
2 0 LOAD_FAST 3 ( x )					      	  if x <= arr [ low ] :					    	if x <= arr [ low ] :					  
2 LOAD_FAST 0 ( arr )					      	      return low					    	    return low						  
4 LOAD_FAST 1 ( low )					      	  i = low						    	i = low							  
6 BINARY_SUBSCR						      	  for i in range ( high ) :				    	for i in range ( high ) :				  
8 COMPARE_OP 1 ( <= )					      	      if arr [ i ] == x :				    	    if arr [ i ] == x :					  
10 POP_JUMP_IF_FALSE 16					      		  return i					    		return i					  
							      	      if arr [ i ] < x and arr [ i + 1 ] >= x :		    	    if arr [ i ] < x and arr [ i + 1 ] >= x :		  
3 12 LOAD_FAST 1 ( low )				      		  return i + 1					    		return i + 1					  
14 RETURN_VALUE						      	  return - 1						    	return - 1						  
							      								    								  
4 >> 16 LOAD_FAST 1 ( low )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 20 SETUP_LOOP 68 ( to 90 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 2 ( high )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 56 ( to 88 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 3 ( x )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_FAST 4 ( i )					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 3 ( x )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 30					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 3 ( x )					      								    								  
74 COMPARE_OP 5 ( >= )					      								    								  
76 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
9 78 LOAD_FAST 4 ( i )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 RETURN_VALUE						      								    								  
86 JUMP_ABSOLUTE 30					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
10 >> 90 LOAD_CONST 2 ( - 1 )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	      CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	    CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER		  CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER
--							      --							    --								  --
Disassembly of <code object areAnagram at 0x7f33e2653f60, fil def areAnagram ( str1 , str2 ) :				    def areAnagram ( str1 , str2 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n1 = len ( str1 )					    	n1 = len ( str1 )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( str1 )					      	  n2 = len ( str2 )					    	n2 = len ( str2 )					  _sa.valid/CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF
4 CALL_FUNCTION 1					      	  if n1 != n2 :						    	if n1 != n2 :						  _EACH_OTHER.py", line 40     return 1	    ^ Syntax
6 STORE_FAST 2 ( n1 )					      	      return 0						    	    return 0						  Error: 'return' outside function
							      	  str1 = sorted ( str1 )				    	str1 = sorted ( str1 )					  
3 8 LOAD_GLOBAL 0 ( len )				      	  str2 = sorted ( str2 )				    	str2 = sorted ( str2 )					  
10 LOAD_FAST 1 ( str2 )					      	  for i in range ( 0 , n1 ) :				    	for i in range ( 0 , n1 ) :				  
12 CALL_FUNCTION 1					      	      if str1 [ i ] != str2 [ i ] :			    	    if str1 [ i ] != str2 [ i ] :			  
14 STORE_FAST 3 ( n2 )					      		  return 0					    		return 0					  
							      	  return 1						    return 1							  
4 16 LOAD_FAST 2 ( n1 )					      								    								  
18 LOAD_FAST 3 ( n2 )					      								    								  
20 COMPARE_OP 3 ( != )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_GLOBAL 1 ( sorted )			      								    								  
30 LOAD_FAST 0 ( str1 )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 STORE_FAST 0 ( str1 )				      								    								  
							      								    								  
7 36 LOAD_GLOBAL 1 ( sorted )				      								    								  
38 LOAD_FAST 1 ( str2 )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 1 ( str2 )				      								    								  
							      								    								  
8 44 SETUP_LOOP 38 ( to 84 )				      								    								  
46 LOAD_GLOBAL 2 ( range )				      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 LOAD_FAST 2 ( n1 )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 24 ( to 82 )				      								    								  
58 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 60 LOAD_FAST 0 ( str1 )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( str2 )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
10 76 LOAD_CONST 1 ( 0 )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 56					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
11 >> 84 LOAD_CONST 2 ( 1 )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
--							      --							    --								  --
Disassembly of <code object getOddOccurrence at 0x7f33e26494b def getOddOccurrence ( arr , arr_size ) :			    def getOddOc( arr , arr_size = - 1 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 86 ( to 88 )				      	  for i in range ( 0 , arr_size ) :			    	for i in range ( 0 , arr_size ) :			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    	    count = 0						  _sa.valid/FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , arr_size ) :			    	    for j in range ( 0 , arr_size ) :			  TIMES.py", line 28	 def f_filled arr , arr_size
6 LOAD_FAST 1 ( arr_size )				      		  if arr [ i ] == arr [ j ] :			    		if arr [ i ] == arr [ j ] :			   = - 1 ) :			^ SyntaxError: inval
8 CALL_FUNCTION 2					      		      count += 1				    		    count += 1					  id syntax
10 GET_ITER						      	      if ( count % 2 != 0 ) :				    	if count % 2 != 0 :					  
>> 12 FOR_ITER 72 ( to 86 )				      		  return arr [ i ]				    	    return arr [ i ]					  
14 STORE_FAST 2 ( i )					      	  return - 1						    return - 1							  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( arr_size )				      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( count )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( count )				      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 3 ( count )				      								    								  
66 LOAD_CONST 3 ( 2 )					      								    								  
68 BINARY_MODULO					      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 12					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_CONST 4 ( - 1 )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_<unk> CATION			      CHECK_INTEGER_OVERFLOW_<unk> CATION			    CHECK_INTEGER_OVERFLOW_<unk> CATION				  CHECK_INTEGER_OVERFLOW_<unk> CATION
--							      --							    --								  --
Disassembly of <code object isOverflow at 0x7f33e26494b0, fil def isOverflow ( a , b ) :				    def isOverflow ( a , b ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a == 0 or b == 0 ) :				    	if a == 0 or b == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 2 ( == )					      	  result = a * b					    	result = a * b						  
6 POP_JUMP_IF_TRUE 16					      	  if ( result >= 9223372036854775807 or result <= - 9223372 	if result >= 9223372036854775807 or result <= - 922337203 
8 LOAD_FAST 1 ( b )					      	      result = 0					    	    result = 0						  
10 LOAD_CONST 1 ( 0 )					      	  if ( a == ( result // b ) ) :				    	if a == result // b :					  
12 COMPARE_OP 2 ( == )					      	      print ( result // b )				    	    print ( result // b )				  
14 POP_JUMP_IF_FALSE 20					      	      return False					    	    return False					  
							      	  else :						    	else :							  
3 >> 16 LOAD_CONST 2 ( False )				      	      return True					    	    return True						  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( a )				      								    								  
22 LOAD_FAST 1 ( b )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 STORE_FAST 2 ( result )				      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( result )				      								    								  
30 LOAD_CONST 3 ( 9223372036854775807 )			      								    								  
32 COMPARE_OP 5 ( >= )					      								    								  
34 POP_JUMP_IF_TRUE 44					      								    								  
36 LOAD_FAST 2 ( result )				      								    								  
38 LOAD_CONST 4 ( - 9223372036854775808 )		      								    								  
40 COMPARE_OP 1 ( <= )					      								    								  
42 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 >> 44 LOAD_CONST 1 ( 0 )				      								    								  
46 STORE_FAST 2 ( result )				      								    								  
							      								    								  
7 >> 48 LOAD_FAST 0 ( a )				      								    								  
50 LOAD_FAST 2 ( result )				      								    								  
52 LOAD_FAST 1 ( b )					      								    								  
54 BINARY_FLOOR_DIVIDE					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 60 LOAD_GLOBAL 0 ( print )				      								    								  
62 LOAD_FAST 2 ( result )				      								    								  
64 LOAD_FAST 1 ( b )					      								    								  
66 BINARY_FLOOR_DIVIDE					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 POP_TOP						      								    								  
							      								    								  
9 72 LOAD_CONST 2 ( False )				      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
11 >> 76 LOAD_CONST 5 ( True )				      								    								  
78 RETURN_VALUE						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
Disassembly of <code object findElements at 0x7f33e26494b0, f def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
2 0 SETUP_LOOP 88 ( to 90 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    	    count = 0						  
4 LOAD_FAST 1 ( n )					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
6 CALL_FUNCTION 1					      		  if arr [ j ] > arr [ i ] :			    		if arr [ j ] > arr [ i ] :			  
8 GET_ITER						      		      count = count + 1				    		    count = count + 1				  
>> 10 FOR_ITER 76 ( to 88 )				      	      if count >= 2 :					    	    if count >= 2 :					  
12 STORE_FAST 2 ( i )					      		  print ( arr [ i ] , end = " " )		    		print ( arr [ i ] , end = ' ' )			  
							      								    								  
3 14 LOAD_CONST 1 ( 0 )					      								    								  
16 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 18 SETUP_LOOP 42 ( to 62 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 28 ( to 60 )				      								    								  
32 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 50 LOAD_FAST 3 ( count )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( count )				      								    								  
58 JUMP_ABSOLUTE 30					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 3 ( count )				      								    								  
64 LOAD_CONST 3 ( 2 )					      								    								  
66 COMPARE_OP 5 ( >= )					      								    								  
68 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
8 70 LOAD_GLOBAL 1 ( print )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( ' ' )					      								    								  
80 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
82 CALL_FUNCTION_KW 2					      								    								  
84 POP_TOP						      								    								  
86 JUMP_ABSOLUTE 10					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER					      SUM_FACTORS_NUMBER					    SUM_FACTORS_NUMBER						  SUM_FACTORS_NUMBER
--							      --							    --								  --
Disassembly of <code object divSum at 0x7f33e2653ed0, file "< def divSum ( n ) :					    def divSum ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :  	for i in range ( 2 , int ( math.sqrt ( n ) ) + 1 ) :	  
							      	      if ( n % i == 0 ) :				    	    if n % i == 0 :					  
3 4 SETUP_LOOP 82 ( to 88 )				      		  if ( i == ( n / i ) ) :			    		if i == n / i :					  
6 LOAD_GLOBAL 0 ( range )				      		      result = result + i			    		    result = result + i				  
8 LOAD_CONST 2 ( 2 )					      		  else :					    		else :						  
10 LOAD_GLOBAL 1 ( int )				      		      result = result + ( i + n // i )		    		    result = result + i + n // i		  
12 LOAD_GLOBAL 2 ( math )				      	  return ( result + n + 1 )				    	return result + n + 1					  
14 LOAD_METHOD 3 ( sqrt )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 CALL_METHOD 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_CONST 3 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 54 ( to 86 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_MODULO					      								    								  
40 LOAD_CONST 1 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_FAST 0 ( n )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 58 LOAD_FAST 1 ( result )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 1 ( result )				      								    								  
66 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
8 >> 68 LOAD_FAST 1 ( result )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 BINARY_ADD						      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 1 ( result )				      								    								  
84 JUMP_ABSOLUTE 30					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 1 ( result )				      								    								  
90 LOAD_FAST 0 ( n )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_CONST 3 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH						      BINARY_SEARCH						    BINARY_SEARCH						  BINARY_SEARCH
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7f33e26494b0, f def binarySearch ( arr , l , r , x ) :			    def binarySearch ( arr , l , r , x ) :			  success : None
2 0 LOAD_FAST 2 ( r )					      	  if r >= l :						    	if r >= l :						  
2 LOAD_FAST 1 ( l )					      	      mid = l + ( r - l ) // 2				    	    mid = l + ( r - l ) // 2				  
4 COMPARE_OP 5 ( >= )					      	      if arr [ mid ] == x :				    	    if arr [ mid ] == x :				  
6 POP_JUMP_IF_FALSE 90					      		  return mid					    		return mid					  
							      	      elif arr [ mid ] > x :				    	    if arr [ mid ] > x :				  
3 8 LOAD_FAST 1 ( l )					      		  return binarySearch ( arr , l , mid - 1 , x )	    		return binarySearch ( arr , l , mid - 1 , x )	  
10 LOAD_FAST 2 ( r )					      	      else :						    	    else :						  
12 LOAD_FAST 1 ( l )					      		  return binarySearch ( arr , mid + 1 , r , x )	    		return binarySearch ( arr , mid + 1 , r , x )	  
14 BINARY_SUBTRACT					      	  else :						    	else :							  
16 LOAD_CONST 1 ( 2 )					      	      return - 1					    	    return - 1						  
18 BINARY_FLOOR_DIVIDE					      								    								  
20 BINARY_ADD						      								    								  
22 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 4 ( mid )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 3 ( x )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( mid )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( mid )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 3 ( x )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 52 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 1 ( l )					      								    								  
58 LOAD_FAST 4 ( mid )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 CALL_FUNCTION 4					      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
9 >> 70 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 4 ( mid )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 2 ( r )					      								    								  
82 LOAD_FAST 3 ( x )					      								    								  
84 CALL_FUNCTION 4					      								    								  
86 RETURN_VALUE						      								    								  
88 JUMP_FORWARD 4 ( to 94 )				      								    								  
							      								    								  
11 >> 90 LOAD_CONST 3 ( - 1 )				      								    								  
92 RETURN_VALUE						      								    								  
>> 94 LOAD_CONST 0 ( None )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findExtra at 0x7f33e2649a50, file def findExtra ( arr1 , arr2 , n ) :			    def findExtra ( arr1 , arr2 , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 2 ( n )					      	  index = n						    	index = n						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 3 ( index )				      	  left = 0						    	left = 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/FIND_
							      	  right = n - 1						    	right = n - 1						  INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_AR
3 4 LOAD_CONST 1 ( 0 )					      	  while ( left <= right ) :				    	while left <= right :					  RAY_1.py", line 60, in <module>     if f_filled(*p
6 STORE_FAST 4 ( left )					      	      mid = ( int ) ( ( left + right ) / 2 )		    	    mid = int ( left + right ) / 2			  arameters_set) == f_gold(*parameters_set):   File
							      	      if ( arr2 [ mid ] == arr1 [ mid ] ) :		    	    if arr2 [ mid ] == arr1 [ mid ] :			  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
4 8 LOAD_FAST 2 ( n )					      		  left = mid + 1				    		left = mid + 1					  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/FIND_
10 LOAD_CONST 2 ( 1 )					      	      else :						    	    else :						  INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_AR
12 BINARY_SUBTRACT					      		  index = mid					    		index = mid					  RAY_1.py", line 37, in f_filled     if arr2 [ mid
14 STORE_FAST 5 ( right )				      		  right = mid - 1				    		right = mid - 1					  ] == arr1 [ mid ] : TypeError: list indices must b
							      	  return index						    	return index						  e integers or slices, not float
5 16 SETUP_LOOP 66 ( to 84 )				      								    								  
>> 18 LOAD_FAST 4 ( left )				      								    								  
20 LOAD_FAST 5 ( right )				      								    								  
22 COMPARE_OP 1 ( <= )					      								    								  
24 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
6 26 LOAD_GLOBAL 0 ( int )				      								    								  
28 LOAD_FAST 4 ( left )					      								    								  
30 LOAD_FAST 5 ( right )				      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 6 ( mid )					      								    								  
							      								    								  
7 42 LOAD_FAST 1 ( arr2 )				      								    								  
44 LOAD_FAST 6 ( mid )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr1 )					      								    								  
50 LOAD_FAST 6 ( mid )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 58 LOAD_FAST 6 ( mid )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 4 ( left )				      								    								  
66 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
10 >> 68 LOAD_FAST 6 ( mid )				      								    								  
70 STORE_FAST 3 ( index )				      								    								  
							      								    								  
11 72 LOAD_FAST 6 ( mid )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 5 ( right )				      								    								  
80 JUMP_ABSOLUTE 18					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
12 >> 84 LOAD_FAST 3 ( index )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV
--							      --							    --								  --
Disassembly of <code object minTime at 0x7f33e2644f60, file " def minTime ( arr , n ) :					    def minTime ( arr , n = 3 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n <= 0 ) : return 0				    	if n <= 0 : return 0					  
2 LOAD_CONST 1 ( 0 )					      	  incl = arr [ 0 ]					    	cx = arr [ 0 ]						  
4 COMPARE_OP 1 ( <= )					      	  excl = 0						    	excl = 0						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 LOAD_CONST 1 ( 0 )					      	      incl_new = arr [ i ] + min ( excl , incl )	    	    incl_new = arr [ i ] + min ( excl , factory )	  
10 RETURN_VALUE						      	      excl_new = incl					    	    excl_new = ( publish )				  
							      	      incl = incl_new					    	    instructions = excl_new				  
3 >> 12 LOAD_FAST 0 ( arr )				      	      excl = excl_new					    	    excl = excl_new					  
14 LOAD_CONST 1 ( 0 )					      	  return min ( incl , excl )				    	return min ( 78 , excl )				  
16 BINARY_SUBSCR					      								    								  
18 STORE_FAST 2 ( incl )				      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 3 ( excl )				      								    								  
							      								    								  
5 24 SETUP_LOOP 48 ( to 74 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 34 ( to 72 )				      								    								  
38 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_GLOBAL 1 ( min )				      								    								  
48 LOAD_FAST 3 ( excl )					      								    								  
50 LOAD_FAST 2 ( incl )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 5 ( incl_new )				      								    								  
							      								    								  
7 58 LOAD_FAST 2 ( incl )				      								    								  
60 STORE_FAST 6 ( excl_new )				      								    								  
							      								    								  
8 62 LOAD_FAST 5 ( incl_new )				      								    								  
64 STORE_FAST 2 ( incl )				      								    								  
							      								    								  
9 66 LOAD_FAST 6 ( excl_new )				      								    								  
68 STORE_FAST 3 ( excl )				      								    								  
70 JUMP_ABSOLUTE 36					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_GLOBAL 1 ( min )				      								    								  
76 LOAD_FAST 2 ( incl )					      								    								  
78 LOAD_FAST 3 ( excl )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS	      COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		    COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		  COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS
--							      --							    --								  --
Disassembly of <code object countWords at 0x7f33e2644930, fil def countWords ( stri , n ) :				    def countWords ( stri , n ) :				  success : identical to gold
2 0 LOAD_GLOBAL 0 ( dict )				      	  m = dict ( )						    	m = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( m )					      	      m [ stri [ i ] ] = m.get ( stri [ i ] , 0 ) + 1	    	    m [ stri [ i ] ] = m.get ( stri [ i ] , 0 ) + 1	  
							      	  res = 0						    	res = 0							  
3 6 SETUP_LOOP 44 ( to 52 )				      	  for i in m.values ( ) :				    	for i in m.values ( ) :					  
8 LOAD_GLOBAL 1 ( range )				      	      if i == 2 :					    	    if i == 2 :						  
10 LOAD_FAST 1 ( n )					      		  res += 1					    		res += 1					  
12 CALL_FUNCTION 1					      	  return res						    	return res						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( m )					      								    								  
22 LOAD_METHOD 2 ( get )				      								    								  
24 LOAD_FAST 0 ( stri )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 CALL_METHOD 2					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( m )					      								    								  
40 LOAD_FAST 0 ( stri )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 4 ( res )					      								    								  
							      								    								  
6 56 SETUP_LOOP 32 ( to 90 )				      								    								  
58 LOAD_FAST 2 ( m )					      								    								  
60 LOAD_METHOD 3 ( values )				      								    								  
62 CALL_METHOD 0					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 20 ( to 88 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_FAST 3 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 78 LOAD_FAST 4 ( res )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 4 ( res )					      								    								  
86 JUMP_ABSOLUTE 66					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
9 >> 90 LOAD_FAST 4 ( res )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
Disassembly of <code object countPairsWithDiffK at 0x7f33e264 def countPairsWithDiffK ( arr , n , k ) :			    def countPairsWithDiffK ( arr , n , k ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( count )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  _sa.valid/COUNT_PAIRS_DIFFERENCE_EQUAL_K.py", line
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			   32	  return count	   ^ SyntaxError: 'return' o
3 4 SETUP_LOOP 90 ( to 96 )				      		  if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  		if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  utside function
6 LOAD_GLOBAL 0 ( range )				      		      count += 1				    		    count += 1					  
8 LOAD_CONST 1 ( 0 )					      	  return count						    return count						  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 76 ( to 94 )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 70 ( to 92 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 52 ( to 90 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 5 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 2 ( k )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_TRUE 80					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 5 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 2 ( k )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 >> 80 LOAD_FAST 3 ( count )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 3 ( count )				      								    								  
88 JUMP_ABSOLUTE 36					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 JUMP_ABSOLUTE 16					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
7 >> 96 LOAD_FAST 3 ( count )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVEN_FIBONACCI_NUMBERS_SUM				      EVEN_FIBONACCI_NUMBERS_SUM				    EVEN_FIBONACCI_NUMBERS_SUM					  EVEN_FIBONACCI_NUMBERS_SUM
--							      --							    --								  --
Disassembly of <code object evenFibSum at 0x7f33e2649a50, fil def evenFibSum ( limit ) :				    def evenFibSum ( limit ) :					  success : None
2 0 LOAD_FAST 0 ( limit )				      	  if ( limit < 2 ) :					    	if limit < 2 :						  
2 LOAD_CONST 1 ( 2 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  ef1 = 0						    	ef1 = 0							  
6 POP_JUMP_IF_FALSE 12					      	  ef2 = 2						    	ef2 = 2							  
							      	  sm = ef1 + ef2					    	sm = ef1 + ef2						  
3 8 LOAD_CONST 2 ( 0 )					      	  while ( ef2 <= limit ) :				    	while ef2 <= limit :					  
10 RETURN_VALUE						      	      ef3 = 4 * ef2 + ef1				    	    ef3 = 4 * ef2 + ef1					  
							      	      if ( ef3 > limit ) :				    	    if ef3 > limit :					  
4 >> 12 LOAD_CONST 2 ( 0 )				      		  break						    		break						  
14 STORE_FAST 1 ( ef1 )					      	      ef1 = ef2						    	    ef1 = ef2						  
							      	      ef2 = ef3						    	    ef2 = ef3						  
5 16 LOAD_CONST 1 ( 2 )					      	      sm = sm + ef2					    	    sm = sm + ef2					  
18 STORE_FAST 2 ( ef2 )					      	  return sm						    	return sm						  
							      								    								  
6 20 LOAD_FAST 1 ( ef1 )				      								    								  
22 LOAD_FAST 2 ( ef2 )					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 3 ( sm )					      								    								  
							      								    								  
7 28 SETUP_LOOP 50 ( to 80 )				      								    								  
>> 30 LOAD_FAST 2 ( ef2 )				      								    								  
32 LOAD_FAST 0 ( limit )				      								    								  
34 COMPARE_OP 1 ( <= )					      								    								  
36 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
8 38 LOAD_CONST 3 ( 4 )					      								    								  
40 LOAD_FAST 2 ( ef2 )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_FAST 1 ( ef1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 4 ( ef3 )					      								    								  
							      								    								  
9 50 LOAD_FAST 4 ( ef3 )				      								    								  
52 LOAD_FAST 0 ( limit )				      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
10 58 BREAK_LOOP					      								    								  
							      								    								  
11 >> 60 LOAD_FAST 2 ( ef2 )				      								    								  
62 STORE_FAST 1 ( ef1 )					      								    								  
							      								    								  
12 64 LOAD_FAST 4 ( ef3 )				      								    								  
66 STORE_FAST 2 ( ef2 )					      								    								  
							      								    								  
13 68 LOAD_FAST 3 ( sm )				      								    								  
70 LOAD_FAST 2 ( ef2 )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( sm )					      								    								  
76 JUMP_ABSOLUTE 30					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
14 >> 80 LOAD_FAST 3 ( sm )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER
--							      --							    --								  --
Disassembly of <code object flipsPossible at 0x7f33e2644930,  def flipsPossible ( a , n ) :				    def flipsPossible ( a , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  count_odd = 0 ; count_even = 0 ;			    	count_odd = 0						  
2 STORE_FAST 2 ( count_odd )				      	  for i in range ( n ) :				    	count_even = 0						  
4 LOAD_CONST 1 ( 0 )					      	      if ( a [ i ] & 1 ) :				    	for i in range ( n ) :					  
6 STORE_FAST 3 ( count_even )				      		  count_odd += 1 ;				    	    if a [ i ] & 1 :					  
							      	      else :						    		count_odd += 1					  
3 8 SETUP_LOOP 46 ( to 56 )				      		  count_even += 1 ;				    	    else :						  
10 LOAD_GLOBAL 0 ( range )				      	  if ( count_odd % 2 and count_even % 2 ) :		    		count_even += 1					  
12 LOAD_FAST 1 ( n )					      	      return False ;					    	if count_odd % 2 and count_even % 2 :			  
14 CALL_FUNCTION 1					      	  else :						    	    return False					  
16 GET_ITER						      	      return True ;					    	else :							  
>> 18 FOR_ITER 34 ( to 54 )				      								    	    return True						  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( a )					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_AND						      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
5 34 LOAD_FAST 2 ( count_odd )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( count_odd )				      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
7 >> 44 LOAD_FAST 3 ( count_even )			      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 3 ( count_even )				      								    								  
52 JUMP_ABSOLUTE 18					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( count_odd )			      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_MODULO					      								    								  
62 POP_JUMP_IF_FALSE 76					      								    								  
64 LOAD_FAST 3 ( count_even )				      								    								  
66 LOAD_CONST 3 ( 2 )					      								    								  
68 BINARY_MODULO					      								    								  
70 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 72 LOAD_CONST 4 ( False )				      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
11 >> 76 LOAD_CONST 5 ( True )				      								    								  
78 RETURN_VALUE						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_ELEMENT_ROW_MATRIX				      FIND_MAXIMUM_ELEMENT_ROW_MATRIX				    FIND_MAXIMUM_ELEMENT_ROW_MATRIX				  FIND_MAXIMUM_ELEMENT_ROW_MATRIX
--							      --							    --								  --
Disassembly of <code object maxelement at 0x7f33e2653f60, fil def maxelement ( arr ) :					    def maxelement ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  no_of_rows = len ( arr )				    	no_of_rows = len ( arr )				  
2 LOAD_FAST 0 ( arr )					      	  no_of_column = len ( arr [ 0 ] )			    	no_of_column = len ( arr [ 0 ] )			  
4 CALL_FUNCTION 1					      	  for i in range ( no_of_rows ) :			    	for i in range ( no_of_rows ) :				  
6 STORE_FAST 1 ( no_of_rows )				      	      max1 = 0						    	    max1 = 0						  
							      	      for j in range ( no_of_column ) :			    	    for j in range ( no_of_column ) :			  
3 8 LOAD_GLOBAL 0 ( len )				      		  if arr [ i ] [ j ] > max1 :			    		if arr [ i ] [ j ] > max1 :			  
10 LOAD_FAST 0 ( arr )					      		      max1 = arr [ i ] [ j ]			    		    max1 = arr [ i ] [ j ]			  
12 LOAD_CONST 1 ( 0 )					      	      print ( max1 )					    	    print ( max1 )					  
14 BINARY_SUBSCR					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 STORE_FAST 2 ( no_of_column )			      								    								  
							      								    								  
4 20 SETUP_LOOP 74 ( to 96 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 1 ( no_of_rows )				      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 62 ( to 94 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 34 LOAD_CONST 1 ( 0 )					      								    								  
36 STORE_FAST 4 ( max1 )				      								    								  
							      								    								  
6 38 SETUP_LOOP 44 ( to 84 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 2 ( no_of_column )				      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 32 ( to 82 )				      								    								  
50 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 4 ( max1 )					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 5 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 STORE_FAST 4 ( max1 )				      								    								  
80 JUMP_ABSOLUTE 48					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
9 >> 84 LOAD_GLOBAL 2 ( print )				      								    								  
86 LOAD_FAST 4 ( max1 )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 POP_TOP						      								    								  
92 JUMP_ABSOLUTE 30					      								    								  
>> 94 POP_BLOCK						      								    								  
>> 96 LOAD_CONST 0 ( None )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT						      BUBBLE_SORT						    BUBBLE_SORT							  BUBBLE_SORT
--							      --							    --								  --
Disassembly of <code object bubbleSort at 0x7f33e2644930, fil def bubbleSort ( arr ) :					    def bubbleSort ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 CALL_FUNCTION 1					      	      for j in range ( 0 , n - i - 1 ) :		    	    for j in range ( 0 , n - i - 1 ) :			  
6 STORE_FAST 1 ( n )					      		  if arr [ j ] > arr [ j + 1 ] :		    		if arr [ j ] > arr [ j + 1 ] :			  
							      		      arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 		    arr [ j ] = arr [ j + 1 ] , arr [ j ]	  
3 8 SETUP_LOOP 98 ( to 108 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 86 ( to 106 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 80 ( to 104 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 58 ( to 102 )				      								    								  
44 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 4 ( > )					      								    								  
64 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 66 LOAD_FAST 0 ( arr )				      								    								  
68 LOAD_FAST 3 ( j )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 3 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 ROT_TWO						      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 3 ( j )					      								    								  
88 STORE_SUBSCR						      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 3 ( j )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 42					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 18					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS		      FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			    FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			  FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS
--							      --							    --								  --
Disassembly of <code object findElement at 0x7f33e26494b0, fi def findElement ( arr , ranges , rotations , index ) :	    def findElement ( arr , ranges , rotations , index ) :	  script_not_found : None
2 0 SETUP_LOOP 86 ( to 88 )				      	  for i in range ( rotations - 1 , - 1 , - 1 ) :	    	for i in range ( rotations - 1 , - 1 , - 1 ) :		  
2 LOAD_GLOBAL 0 ( range )				      	      left = ranges [ i ] [ 0 ]				    	    left = ranges [ i ] [ 0 ]				  
4 LOAD_FAST 2 ( rotations )				      	      right = ranges [ i ] [ 1 ]			    	    right = ranges [ i ] [ 1 ]				  
6 LOAD_CONST 1 ( 1 )					      	      if ( left <= index and right >= index ) :		    	    if left <= index and right >= index :		  
8 BINARY_SUBTRACT					      		  if ( index == left ) :			    		if index == left :				  
10 LOAD_CONST 2 ( - 1 )					      		      index = right				    		    index = right				  
12 LOAD_CONST 2 ( - 1 )					      		  else :					    		else :						  
14 CALL_FUNCTION 3					      		      index = index - 1				    		    index = index - 1				  
16 GET_ITER						      	  return arr [ index ]					    	return arr [ index ]					  
>> 18 FOR_ITER 66 ( to 86 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
3 22 LOAD_FAST 1 ( ranges )				      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 3 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 STORE_FAST 5 ( left )				      								    								  
							      								    								  
4 34 LOAD_FAST 1 ( ranges )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 STORE_FAST 6 ( right )				      								    								  
							      								    								  
5 46 LOAD_FAST 5 ( left )				      								    								  
48 LOAD_FAST 3 ( index )				      								    								  
50 COMPARE_OP 1 ( <= )					      								    								  
52 POP_JUMP_IF_FALSE 18					      								    								  
54 LOAD_FAST 6 ( right )				      								    								  
56 LOAD_FAST 3 ( index )				      								    								  
58 COMPARE_OP 5 ( >= )					      								    								  
60 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
6 62 LOAD_FAST 3 ( index )				      								    								  
64 LOAD_FAST 5 ( left )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
7 70 LOAD_FAST 6 ( right )				      								    								  
72 STORE_FAST 3 ( index )				      								    								  
74 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
9 >> 76 LOAD_FAST 3 ( index )				      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 STORE_FAST 3 ( index )				      								    								  
84 JUMP_ABSOLUTE 18					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
10 >> 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 3 ( index )				      								    								  
92 BINARY_SUBSCR					      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T
--							      --							    --								  --
Disassembly of <code object printSubsequences at 0x7f33e2649a def printSubsequences ( arr , n ) :			    def printSubsequences ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  opsize = math.pow ( 2 , n )				    	opsize = math.pow ( 2 , n )				  
2 LOAD_METHOD 1 ( pow )					      	  for counter in range ( 1 , ( int ) ( opsize ) ) :	    	for counter in range ( 1 , int ( opsize ) ) :		  
4 LOAD_CONST 1 ( 2 )					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
6 LOAD_FAST 1 ( n )					      		  if ( counter & ( 1 << j ) ) :			    		if counter & 1 << j :				  
8 CALL_METHOD 2						      		      print ( arr [ j ] , end = " " )		    		    print ( arr [ j ] , end = ' ' )		  
10 STORE_FAST 2 ( opsize )				      	      print ( )						    	print ( )						  
							      								    								  
3 12 SETUP_LOOP 76 ( to 90 )				      								    								  
14 LOAD_GLOBAL 2 ( range )				      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 LOAD_GLOBAL 3 ( int )				      								    								  
20 LOAD_FAST 2 ( opsize )				      								    								  
22 CALL_FUNCTION 1					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 58 ( to 88 )				      								    								  
30 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
4 32 SETUP_LOOP 46 ( to 80 )				      								    								  
34 LOAD_GLOBAL 2 ( range )				      								    								  
36 LOAD_CONST 3 ( 0 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 32 ( to 78 )				      								    								  
46 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 48 LOAD_FAST 3 ( counter )				      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 BINARY_LSHIFT					      								    								  
56 BINARY_AND						      								    								  
58 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 4 ( print )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 4 ( ' ' )					      								    								  
70 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
72 CALL_FUNCTION_KW 2					      								    								  
74 POP_TOP						      								    								  
76 JUMP_ABSOLUTE 44					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
7 >> 80 LOAD_GLOBAL 4 ( print )				      								    								  
82 CALL_FUNCTION 0					      								    								  
84 POP_TOP						      								    								  
86 JUMP_ABSOLUTE 28					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_ROOT_NUMBER					      N_TH_ROOT_NUMBER						    N_TH_ROOT_NUMBER						  N_TH_ROOT_NUMBER
--							      --							    --								  --
Disassembly of <code object nthRoot at 0x7f33e2644f60, file " def nthRoot ( A , N ) :					    def nthRoot ( A , N ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( random )				      	  x<<unk>> = random.randint ( 1 , 101 ) % 10		    	xdu= random.randint ( 1 , 101 ) % 10			  
2 LOAD_METHOD 1 ( randint )				      	  eps = 0.001						    	eps = 0.001						  
4 LOAD_CONST 1 ( 1 )					      	  delX = 2147483647					    	delX = 1.0						  
6 LOAD_CONST 2 ( 101 )					      	  xK = 0.0						    	xK = 0.0						  
8 CALL_METHOD 2						      	  while ( delX > eps ) :				    	while deldel< del:					  
10 LOAD_CONST 3 ( 10 )					      	      xK = ( ( N - 1.0 ) * x<<unk>> + A / pow ( x<<unk>> ,  	    xK = ( N - 1.0 ) * xdu/ A + pow ( xdu, N - 1 ) ) / N  
12 BINARY_MODULO					      	      delX = abs ( xK - x<<unk>> )			    	    delX = abs ( xK - xcalled )				  
14 STORE_FAST 2 ( x<<unk>> )				      	      x<<unk>> = xK ;					    	    xecho = xK						  
							      	  return xK						    	return xK						  
3 16 LOAD_CONST 4 ( 0.001 )				      								    								  
18 STORE_FAST 3 ( eps )					      								    								  
							      								    								  
4 20 LOAD_CONST 5 ( 2147483647 )			      								    								  
22 STORE_FAST 4 ( delX )				      								    								  
							      								    								  
5 24 LOAD_CONST 6 ( 0.0 )				      								    								  
26 STORE_FAST 5 ( xK )					      								    								  
							      								    								  
6 28 SETUP_LOOP 62 ( to 92 )				      								    								  
>> 30 LOAD_FAST 4 ( delX )				      								    								  
32 LOAD_FAST 3 ( eps )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( N )					      								    								  
40 LOAD_CONST 7 ( 1.0 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 2 ( x<<unk>> )				      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 0 ( A )					      								    								  
50 LOAD_GLOBAL 2 ( pow )				      								    								  
52 LOAD_FAST 2 ( x<<unk>> )				      								    								  
54 LOAD_FAST 1 ( N )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_FAST 1 ( N )					      								    								  
68 BINARY_TRUE_DIVIDE					      								    								  
70 STORE_FAST 5 ( xK )					      								    								  
							      								    								  
8 72 LOAD_GLOBAL 3 ( abs )				      								    								  
74 LOAD_FAST 5 ( xK )					      								    								  
76 LOAD_FAST 2 ( x<<unk>> )				      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_FAST 4 ( delX )				      								    								  
							      								    								  
9 84 LOAD_FAST 5 ( xK )					      								    								  
86 STORE_FAST 2 ( x<<unk>> )				      								    								  
88 JUMP_ABSOLUTE 30					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 5 ( xK )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_CONSECUTIVE_DUPLICATES_STRING			      REMOVE_CONSECUTIVE_DUPLICATES_STRING			    REMOVE_CONSECUTIVE_DUPLICATES_STRING			  REMOVE_CONSECUTIVE_DUPLICATES_STRING
--							      --							    --								  --
Disassembly of <code object removeDuplicates at 0x7f33e2649a5 def removeDuplicates ( S ) :				    def removeDuplicates ( S ) :				  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( S )						    	n = len ( S )						  
2 LOAD_FAST 0 ( S )					      	  if ( n < 2 ) :					    	if n < 2 :						  
4 CALL_FUNCTION 1					      	      return						    	    return None						  
6 STORE_FAST 1 ( n )					      	  j = 0							    	j = 0							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_FAST 1 ( n )					      	      if ( S [ j ] != S [ i ] ) :			    	    if S [ j ] != S [ i ] :				  
10 LOAD_CONST 1 ( 2 )					      		  j += 1					    		j += 1						  
12 COMPARE_OP 0 ( < )					      		  S [ j ] = S [ i ]				    		S [ j ] = S [ i ]				  
14 POP_JUMP_IF_FALSE 20					      	  j += 1						    	j += 1							  
							      	  S = S [ : j ]						    	S = S [ : j ]						  
4 16 LOAD_CONST 0 ( None )				      	  return S						    	return S						  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_CONST 2 ( 0 )				      								    								  
22 STORE_FAST 2 ( j )					      								    								  
							      								    								  
6 24 SETUP_LOOP 52 ( to 78 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 40 ( to 76 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( S )					      								    								  
40 LOAD_FAST 2 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( S )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 3 ( != )					      								    								  
52 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
8 54 LOAD_FAST 2 ( j )					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( j )					      								    								  
							      								    								  
9 62 LOAD_FAST 0 ( S )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( S )					      								    								  
70 LOAD_FAST 2 ( j )					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 34					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
10 >> 78 LOAD_FAST 2 ( j )				      								    								  
80 LOAD_CONST 3 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 2 ( j )					      								    								  
							      								    								  
11 86 LOAD_FAST 0 ( S )					      								    								  
88 LOAD_CONST 0 ( None )				      								    								  
90 LOAD_FAST 2 ( j )					      								    								  
92 BUILD_SLICE 2					      								    								  
94 BINARY_SUBSCR					      								    								  
96 STORE_FAST 0 ( S )					      								    								  
							      								    								  
12 98 LOAD_FAST 0 ( S )					      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		      EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		    EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		  EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION
--							      --							    --								  --
Disassembly of <code object exponentiation at 0x7f33e2644930, def exponentiation ( bas , exp ) :			    def exponentiation ( bas , exp ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( exp )					      	  if ( exp == 0 ) :					    	if exp == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1 ;					    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( exp == 1 ) :					    	if exp == 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return bas % N ;					    	    return ( bas )					  
							      	  t = exponentiation ( bas , int ( exp / 2 ) ) ;	    	t = exponentiation ( bas , int ( exp / 2 ) )		  
3 8 LOAD_CONST 2 ( 1 )					      	  t = ( t * t ) % N ;					    	t = t * t % N						  
10 RETURN_VALUE						      	  if ( exp % 2 == 0 ) :					    	if exp % 2 == 0 :					  
							      	      return t ;					    	    return t						  
4 >> 12 LOAD_FAST 1 ( exp )				      	  else :						    	else :							  
14 LOAD_CONST 2 ( 1 )					      	      return ( ( bas % N ) * t ) % N ;			    	    return ( bas % N * t ) % N				  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 20 LOAD_FAST 0 ( bas )				      								    								  
22 LOAD_GLOBAL 0 ( N )					      								    								  
24 BINARY_MODULO					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_GLOBAL 1 ( exponentiation )		      								    								  
30 LOAD_FAST 0 ( bas )					      								    								  
32 LOAD_GLOBAL 2 ( int )				      								    								  
34 LOAD_FAST 1 ( exp )					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 STORE_FAST 2 ( t )					      								    								  
							      								    								  
7 46 LOAD_FAST 2 ( t )					      								    								  
48 LOAD_FAST 2 ( t )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_GLOBAL 0 ( N )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 2 ( t )					      								    								  
							      								    								  
8 58 LOAD_FAST 1 ( exp )				      								    								  
60 LOAD_CONST 3 ( 2 )					      								    								  
62 BINARY_MODULO					      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 70 LOAD_FAST 2 ( t )					      								    								  
72 RETURN_VALUE						      								    								  
							      								    								  
11 >> 74 LOAD_FAST 0 ( bas )				      								    								  
76 LOAD_GLOBAL 0 ( N )					      								    								  
78 BINARY_MODULO					      								    								  
80 LOAD_FAST 2 ( t )					      								    								  
82 BINARY_MULTIPLY					      								    								  
84 LOAD_GLOBAL 0 ( N )					      								    								  
86 BINARY_MODULO					      								    								  
88 RETURN_VALUE						      								    								  
90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7f33e2653ed0, file "< def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( sys )				      	  res = - sys.maxsize					    	res = - sys.maxsize					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_ATTR 1 ( maxsize )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/MAXIM
4 UNARY_NEGATIVE					      	      curr_sum = 0					    	    curr_sum = 0					  UM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY.py", line
6 STORE_FAST 2 ( res )					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				   56, in <module>     if f_filled(*parameters_set)
							      		  index = int ( ( i + j ) % n )			    		index = int ( i + j % n )			  == f_gold(*parameters_set):	File "/home/ubuntu/T
3 8 SETUP_LOOP 84 ( to 94 )				      		  curr_sum += j * arr [ index ]			    		curr_sum += j * arr [ index ]			  ransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_s
10 LOAD_GLOBAL 2 ( range )				      	      res = max ( res , curr_sum )			    	    res = max ( res , curr_sum )			  cripts/dis_sa-python_sa.valid/MAXIMUM_SUM_IARRI_AM
12 LOAD_CONST 1 ( 0 )					      	  return res						    	return res						  ONG_ROTATIONS_GIVEN_ARRAY.py", line 36, in f_fille
14 LOAD_FAST 1 ( n )					      								    								  d	curr_sum += j * arr [ index ] IndexError: li
16 CALL_FUNCTION 2					      								    								  st index out of range
18 GET_ITER						      								    								  
>> 20 FOR_ITER 70 ( to 92 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
5 28 SETUP_LOOP 50 ( to 80 )				      								    								  
30 LOAD_GLOBAL 2 ( range )				      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 36 ( to 78 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 3 ( int )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_FAST 5 ( j )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 BINARY_MODULO					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 STORE_FAST 6 ( index )				      								    								  
							      								    								  
7 60 LOAD_FAST 4 ( curr_sum )				      								    								  
62 LOAD_FAST 5 ( j )					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 6 ( index )				      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 4 ( curr_sum )				      								    								  
76 JUMP_ABSOLUTE 40					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
8 >> 80 LOAD_GLOBAL 4 ( max )				      								    								  
82 LOAD_FAST 2 ( res )					      								    								  
84 LOAD_FAST 4 ( curr_sum )				      								    								  
86 CALL_FUNCTION 2					      								    								  
88 STORE_FAST 2 ( res )					      								    								  
90 JUMP_ABSOLUTE 20					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
9 >> 94 LOAD_FAST 2 ( res )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN
--							      --							    --								  --
Disassembly of <code object power at 0x7f33e2644f60, file "<d def power ( x , y ) :					    def power ( x , y ) :					  success : None
2 0 LOAD_FAST 1 ( y )					      	  if ( y == 0 ) : return 1				    	if y == 0 : return 1					  
2 LOAD_CONST 1 ( 0 )					      	  elif ( int ( y % 2 ) == 0 ) :				    	if int ( y % 2 ) == 0 :					  
4 COMPARE_OP 2 ( == )					      	      return ( power ( x , int ( y / 2 ) ) * power ( x , in 	    return power ( x , int ( y / 2 ) ) * power ( x , int  
6 POP_JUMP_IF_FALSE 12					      	  else :						    	else :							  
8 LOAD_CONST 2 ( 1 )					      	      return ( x * power ( x , int ( y / 2 ) ) * power ( x  	    return x * power ( x , int ( y / 2 ) ) * power ( x ,  
10 RETURN_VALUE						      								    								  
							      								    								  
3 >> 12 LOAD_GLOBAL 0 ( int )				      								    								  
14 LOAD_FAST 1 ( y )					      								    								  
16 LOAD_CONST 3 ( 2 )					      								    								  
18 BINARY_MODULO					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 1 ( power )				      								    								  
30 LOAD_FAST 0 ( x )					      								    								  
32 LOAD_GLOBAL 0 ( int )				      								    								  
34 LOAD_FAST 1 ( y )					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 LOAD_GLOBAL 1 ( power )				      								    								  
46 LOAD_FAST 0 ( x )					      								    								  
48 LOAD_GLOBAL 0 ( int )				      								    								  
50 LOAD_FAST 1 ( y )					      								    								  
52 LOAD_CONST 3 ( 2 )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 0 ( x )				      								    								  
66 LOAD_GLOBAL 1 ( power )				      								    								  
68 LOAD_FAST 0 ( x )					      								    								  
70 LOAD_GLOBAL 0 ( int )				      								    								  
72 LOAD_FAST 1 ( y )					      								    								  
74 LOAD_CONST 3 ( 2 )					      								    								  
76 BINARY_TRUE_DIVIDE					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 BINARY_MULTIPLY					      								    								  
84 LOAD_GLOBAL 1 ( power )				      								    								  
86 LOAD_FAST 0 ( x )					      								    								  
88 LOAD_GLOBAL 0 ( int )				      								    								  
90 LOAD_FAST 1 ( y )					      								    								  
92 LOAD_CONST 3 ( 2 )					      								    								  
94 BINARY_TRUE_DIVIDE					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 CALL_FUNCTION 2					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 RETURN_VALUE					      								    								  
104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1
--							      --							    --								  --
Disassembly of <code object printCountDP at 0x7f33e26494b0, f def printCountDP ( dist ) :				    def printCountDP ( dist ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * ( dist + 1 )				    	count = [ 0 ] * dist + 1				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 BUILD_LIST 1						      	  count [ 0 ] = 1					    	count [ 0 ] = 1						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/COUNT
4 LOAD_FAST 0 ( dist )					      	  count [ 1 ] = 1					    	count [ 1 ] = 1						  _NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1.py", line 52
6 LOAD_CONST 2 ( 1 )					      	  count [ 2 ] = 2					    	count [ 2 ] = 2						  , in <module>	    if f_filled(*parameters_set) ==
8 BINARY_ADD						      	  for i in range ( 3 , dist + 1 ) :			    	for i in range ( 3 , dist + 1 ) :			  f_gold(*parameters_set):   File "/home/ubuntu/Tran
10 BINARY_MULTIPLY					      	      count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + c 	    count [ i ] = count [ i - 1 ] + count [ i - 2 ]	  sCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scri
12 STORE_FAST 1 ( count )				      	  return count [ dist ] ;				    	return count [ dist ]					  pts/dis_sa-python_sa.valid/COUNT_NUMBER_OF_WAYS_TO
							      								    								  _COVER_A_DISTANCE_1.py", line 28, in f_filled
3 14 LOAD_CONST 2 ( 1 )					      								    								  count = [ 0 ] * dist + 1 TypeError: can only conca
16 LOAD_FAST 1 ( count )				      								    								  tenate list (not "int") to list
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 1 ( count )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 LOAD_CONST 3 ( 2 )					      								    								  
32 LOAD_FAST 1 ( count )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 STORE_SUBSCR						      								    								  
							      								    								  
6 38 SETUP_LOOP 62 ( to 102 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_CONST 4 ( 3 )					      								    								  
44 LOAD_FAST 0 ( dist )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 44 ( to 100 )				      								    								  
56 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 58 LOAD_FAST 1 ( count )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 1 ( count )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 1 ( count )				      								    								  
82 LOAD_FAST 2 ( i )					      								    								  
84 LOAD_CONST 4 ( 3 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 1 ( count )				      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 STORE_SUBSCR						      								    								  
98 JUMP_ABSOLUTE 54					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
8 >> 102 LOAD_FAST 1 ( count )				      								    								  
104 LOAD_FAST 0 ( dist )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			      CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			    CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT				  CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT
--							      --							    --								  --
Disassembly of <code object checkJumbled at 0x7f33e2644930, f def checkJumbled ( num ) :				    def checkJumbled ( num ) :					  failure : #Results: 5, 10
2 0 LOAD_FAST 0 ( num )					      	  if ( num / 10 == 0 ) :				    	if num / 10 ** 0 :					  
2 LOAD_CONST 1 ( 10 )					      	      return True					    	    return True						  
4 BINARY_TRUE_DIVIDE					      	  while ( num != 0 ) :					    	while num != 0 :					  
6 LOAD_CONST 2 ( 0 )					      	      if ( num / 10 == 0 ) :				    	    if num / 10 == 0 :					  
8 COMPARE_OP 2 ( == )					      		  return True					    		return True					  
10 POP_JUMP_IF_FALSE 16					      	      digit1 = num % 10					    	    digit1 = num % 10					  
							      	      digit2 = ( num / 10 ) % 10			    	    digit2 = ( num / 10 ) % 10				  
3 12 LOAD_CONST 3 ( True )				      	      if ( abs ( digit2 - digit1 ) > 1 ) :		    	    if abs ( digit2 - digit1 ) > 1 :			  
14 RETURN_VALUE						      		  return False					    		return False					  
							      	      num = num / 10					    	    num = num / 10					  
4 >> 16 SETUP_LOOP 76 ( to 94 )				      	  return True						    	return True						  
>> 18 LOAD_FAST 0 ( num )				      								    								  
20 LOAD_CONST 2 ( 0 )					      								    								  
22 COMPARE_OP 3 ( != )					      								    								  
24 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( num )				      								    								  
28 LOAD_CONST 1 ( 10 )					      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 38 LOAD_CONST 3 ( True )				      								    								  
40 RETURN_VALUE						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( num )				      								    								  
44 LOAD_CONST 1 ( 10 )					      								    								  
46 BINARY_MODULO					      								    								  
48 STORE_FAST 1 ( digit1 )				      								    								  
							      								    								  
8 50 LOAD_FAST 0 ( num )				      								    								  
52 LOAD_CONST 1 ( 10 )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 LOAD_CONST 1 ( 10 )					      								    								  
58 BINARY_MODULO					      								    								  
60 STORE_FAST 2 ( digit2 )				      								    								  
							      								    								  
9 62 LOAD_GLOBAL 0 ( abs )				      								    								  
64 LOAD_FAST 2 ( digit2 )				      								    								  
66 LOAD_FAST 1 ( digit1 )				      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 78 LOAD_CONST 5 ( False )				      								    								  
80 RETURN_VALUE						      								    								  
							      								    								  
11 >> 82 LOAD_FAST 0 ( num )				      								    								  
84 LOAD_CONST 1 ( 10 )					      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 STORE_FAST 0 ( num )					      								    								  
90 JUMP_ABSOLUTE 18					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
12 >> 94 LOAD_CONST 3 ( True )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CAESAR_CIPHER						      CAESAR_CIPHER						    CAESAR_CIPHER						  CAESAR_CIPHER
--							      --							    --								  --
Disassembly of <code object encrypt at 0x7f33e2644f60, file " def encrypt ( text , s ) :				    def encrypt ( text , s ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( '' )					      	  result = ""						    	result = ''						  
2 STORE_FAST 2 ( result )				      	  for i in range ( len ( text ) ) :			    	for i in range ( len ( text ) ) :			  
							      	      char = text [ i ]					    	    char = text [ i ]					  
3 4 SETUP_LOOP 102 ( to 108 )				      	      if ( char.isupper ( ) ) :				    	    if char.isupper ( ) :				  
6 LOAD_GLOBAL 0 ( range )				      		  result += chr ( ( ord ( char ) + s - 65 ) % 26 +  		result += chr ( ( ord ( char ) + s - 65 ) % 26 +  
8 LOAD_GLOBAL 1 ( len )					      	      else :						    	    else :						  
10 LOAD_FAST 0 ( text )					      		  result += chr ( ( ord ( char ) + s - 97 ) % 26 +  		result += chr ( ord ( char ) + s - 97 % 26 + 97 ) 
12 CALL_FUNCTION 1					      	  return result						    	return result						  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 86 ( to 106 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( text )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 STORE_FAST 4 ( char )				      								    								  
							      								    								  
5 30 LOAD_FAST 4 ( char )				      								    								  
32 LOAD_METHOD 2 ( isupper )				      								    								  
34 CALL_METHOD 0					      								    								  
36 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( result )				      								    								  
40 LOAD_GLOBAL 3 ( chr )				      								    								  
42 LOAD_GLOBAL 4 ( ord )				      								    								  
44 LOAD_FAST 4 ( char )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_FAST 1 ( s )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_CONST 2 ( 65 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_CONST 3 ( 26 )					      								    								  
58 BINARY_MODULO					      								    								  
60 LOAD_CONST 2 ( 65 )					      								    								  
62 BINARY_ADD						      								    								  
64 CALL_FUNCTION 1					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 2 ( result )				      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 72 LOAD_FAST 2 ( result )				      								    								  
74 LOAD_GLOBAL 3 ( chr )				      								    								  
76 LOAD_GLOBAL 4 ( ord )				      								    								  
78 LOAD_FAST 4 ( char )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 LOAD_FAST 1 ( s )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_CONST 4 ( 97 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 3 ( 26 )					      								    								  
92 BINARY_MODULO					      								    								  
94 LOAD_CONST 4 ( 97 )					      								    								  
96 BINARY_ADD						      								    								  
98 CALL_FUNCTION 1					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 2 ( result )				      								    								  
104 JUMP_ABSOLUTE 18					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
9 >> 108 LOAD_FAST 2 ( result )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING
--							      --							    --								  --
Disassembly of <code object twoWaySort at 0x7f33e2653f60, fil def twoWaySort ( arr , n ) :				    def twoWaySort ( arr , n ) :				  success : None
2 0 SETUP_LOOP 46 ( to 48 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] & 1 ) :				    	    if arr [ i ] & 1 :					  
4 LOAD_CONST 1 ( 0 )					      		  arr [ i ] *= - 1				    		arr [ i ] *= - 1				  
6 LOAD_FAST 1 ( n )					      	  arr.sort ( )						    	arr.sort ( )						  
8 CALL_FUNCTION 2					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
10 GET_ITER						      	      if ( arr [ i ] & 1 ) :				    	    if arr [ i ] & 1 :					  
>> 12 FOR_ITER 32 ( to 46 )				      		  arr [ i ] *= - 1				    		arr [ i ] *= - 1				  
14 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arr )				      								    								  
18 LOAD_FAST 2 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_AND						      								    								  
26 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 DUP_TOP_TWO						      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( - 1 )					      								    								  
38 INPLACE_MULTIPLY					      								    								  
40 ROT_THREE						      								    								  
42 STORE_SUBSCR						      								    								  
44 JUMP_ABSOLUTE 12					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_METHOD 1 ( sort )				      								    								  
52 CALL_METHOD 0					      								    								  
54 POP_TOP						      								    								  
							      								    								  
6 56 SETUP_LOOP 46 ( to 104 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 32 ( to 102 )				      								    								  
70 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_AND						      								    								  
82 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 84 LOAD_FAST 0 ( arr )				      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 DUP_TOP_TWO						      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 3 ( - 1 )					      								    								  
94 INPLACE_MULTIPLY					      								    								  
96 ROT_THREE						      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 68					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1
--							      --							    --								  --
Disassembly of <code object isHeap at 0x7f33e2644f60, file "< def isHeap ( arr , n ) :					    def isHeap ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 104 ( to 106 )				      	  for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :	    	for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :		  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( range )				      	      if arr [ 2 * i + 1 ] > arr [ i ] :		    	    if arr [ 2 * i + 1 ] > arr [ i ] :			  _sa.valid/HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS
4 LOAD_GLOBAL 1 ( int )					      		  return False					    		return False					  _A_BINARY_HEAP_1.py", line 32	    return True
6 LOAD_FAST 1 ( n )					      	      if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ]  	    if 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] :  ^ SyntaxError: 'return' outside function
8 LOAD_CONST 1 ( 2 )					      		  return False					    		return False					  
10 BINARY_SUBTRACT					      	  return True						    return True							  
12 LOAD_CONST 1 ( 2 )					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 76 ( to 104 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_CONST 1 ( 2 )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
4 54 LOAD_CONST 3 ( False )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
5 >> 58 LOAD_CONST 1 ( 2 )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_CONST 1 ( 2 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 COMPARE_OP 0 ( < )					      								    								  
72 POP_JUMP_IF_FALSE 26					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_CONST 1 ( 2 )					      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_CONST 1 ( 2 )					      								    								  
84 BINARY_ADD						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 98 LOAD_CONST 3 ( False )				      								    								  
100 RETURN_VALUE					      								    								  
102 JUMP_ABSOLUTE 26					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
7 >> 106 LOAD_CONST 4 ( True )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S
--							      --							    --								  --
Disassembly of <code object find at 0x7f33e2653f60, file "<di def find ( a , b , k , n1 , n2 ) :			    def find ( a , b , k , l , n2 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n2 ) :				    	for i in range ( n2 ) :					  
4 STORE_FAST 5 ( s )					      	      s.add ( b [ i ] )					    	    s.add ( b [ i ] )					  
							      	  missing = 0						    	missing = 0						  
3 6 SETUP_LOOP 30 ( to 38 )				      	  for i in range ( n1 ) :				    	for i in range ( n1 ) :					  
8 LOAD_GLOBAL 1 ( range )				      	      if a [ i ] not in s :				    	    if a [ i ] not in s :				  
10 LOAD_FAST 4 ( n2 )					      		  missing += 1					    		missing += 1					  
12 CALL_FUNCTION 1					      	      if missing == k :					    	    if missing == k :					  
14 GET_ITER						      		  return a [ i ]				    		return a [ i ]					  
>> 16 FOR_ITER 18 ( to 36 )				      	  return - 1						    	return - 1						  
18 STORE_FAST 6 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 5 ( s )					      								    								  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 LOAD_FAST 6 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_CONST 1 ( 0 )				      								    								  
40 STORE_FAST 7 ( missing )				      								    								  
							      								    								  
6 42 SETUP_LOOP 52 ( to 96 )				      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 3 ( n1 )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 40 ( to 94 )				      								    								  
54 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( a )					      								    								  
58 LOAD_FAST 6 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 5 ( s )					      								    								  
64 COMPARE_OP 7 ( not in )				      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 68 LOAD_FAST 7 ( missing )				      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 7 ( missing )				      								    								  
							      								    								  
9 >> 76 LOAD_FAST 7 ( missing )				      								    								  
78 LOAD_FAST 2 ( k )					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
10 84 LOAD_FAST 0 ( a )					      								    								  
86 LOAD_FAST 6 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 RETURN_VALUE						      								    								  
92 JUMP_ABSOLUTE 52					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
11 >> 96 LOAD_CONST 3 ( - 1 )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	      COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	    COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	  COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object findCountOfSolutions at 0x7f33e26 def findCountOfSolutions ( n , p ) :			    def findCountOfSolutions ( n , p ) :			  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	ans = 0							  
2 STORE_FAST 2 ( ans )					      	  for x in range ( 1 , p ) :				    	for x in range ( 1 , p ) :				  
							      	      if ( ( x * x ) % p == 1 ) :			    	    if x * x % p == 1 :					  
3 4 SETUP_LOOP 86 ( to 92 )				      		  last = x + p * ( n / p ) ;			    		last = x + p * ( n / p )			  
6 LOAD_GLOBAL 0 ( range )				      		  if ( last > n ) :				    		if last > n :					  
8 LOAD_CONST 2 ( 1 )					      		      last -= p ;				    		    last -= p					  
10 LOAD_FAST 1 ( p )					      		  ans += ( ( last - x ) / p + 1 ) ;		    		ans += ( last - x ) / p + 1			  
12 CALL_FUNCTION 2					      	  return int ( ans ) ;					    	return int ( ans )					  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 72 ( to 90 )				      								    								  
18 STORE_FAST 3 ( x )					      								    								  
							      								    								  
4 20 LOAD_FAST 3 ( x )					      								    								  
22 LOAD_FAST 3 ( x )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 1 ( p )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( x )					      								    								  
38 LOAD_FAST 1 ( p )					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_FAST 1 ( p )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 4 ( last )				      								    								  
							      								    								  
6 52 LOAD_FAST 4 ( last )				      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 COMPARE_OP 4 ( > )					      								    								  
58 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
7 60 LOAD_FAST 4 ( last )				      								    								  
62 LOAD_FAST 1 ( p )					      								    								  
64 INPLACE_SUBTRACT					      								    								  
66 STORE_FAST 4 ( last )				      								    								  
							      								    								  
8 >> 68 LOAD_FAST 2 ( ans )				      								    								  
70 LOAD_FAST 4 ( last )					      								    								  
72 LOAD_FAST 3 ( x )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_FAST 1 ( p )					      								    								  
78 BINARY_TRUE_DIVIDE					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 2 ( ans )					      								    								  
88 JUMP_ABSOLUTE 16					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
9 >> 92 LOAD_GLOBAL 1 ( int )				      								    								  
94 LOAD_FAST 2 ( ans )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
Disassembly of <code object to_upper at 0x7f33e26494b0, file  def to_upper ( string ) :					    def to_upper ( string ) :					  script_not_found : None
2 0 SETUP_LOOP 108 ( to 110 )				      	  for i in range ( len ( string ) ) :			    	for i in range ( len ( string ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if ( 'a' <= string [ i ] <= 'z' ) :		    	    if 'a' <= string [ i ] <= 'z' :			  
4 LOAD_GLOBAL 1 ( len )					      		  string = ( string [ 0 : i ] + chr ( ord ( string  		string = string [ 0 : i ] + chr ( ord ( string [  
6 LOAD_FAST 0 ( string )				      	  return string ;					    	return string						  
8 CALL_FUNCTION 1					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 92 ( to 108 )				      								    								  
16 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 18 LOAD_CONST 1 ( 'a' )				      								    								  
20 LOAD_FAST 0 ( string )				      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 DUP_TOP						      								    								  
28 ROT_THREE						      								    								  
30 COMPARE_OP 1 ( <= )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
34 LOAD_CONST 2 ( 'z' )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 14					      								    								  
40 JUMP_FORWARD 4 ( to 46 )				      								    								  
>> 42 POP_TOP						      								    								  
44 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
4 >> 46 LOAD_FAST 0 ( string )				      								    								  
48 LOAD_CONST 3 ( 0 )					      								    								  
50 LOAD_FAST 1 ( i )					      								    								  
52 BUILD_SLICE 2					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_GLOBAL 2 ( chr )				      								    								  
58 LOAD_GLOBAL 3 ( ord )				      								    								  
60 LOAD_FAST 0 ( string )				      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_GLOBAL 3 ( ord )				      								    								  
70 LOAD_CONST 1 ( 'a' )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_GLOBAL 3 ( ord )				      								    								  
78 LOAD_CONST 4 ( 'A' )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 BINARY_ADD						      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_FAST 0 ( string )				      								    								  
90 LOAD_FAST 1 ( i )					      								    								  
92 LOAD_CONST 5 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_CONST 0 ( None )				      								    								  
98 BUILD_SLICE 2					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 0 ( string )				      								    								  
106 JUMP_ABSOLUTE 14					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
5 >> 110 LOAD_FAST 0 ( string )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PANGRAM_CHECKING					      PANGRAM_CHECKING						    PANGRAM_CHECKING						  PANGRAM_CHECKING
--							      --							    --								  --
Disassembly of <code object checkPangram at 0x7f33e2653f60, f def checkPangram ( s ) :					    def checkPangram ( s ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  List = [ ]						    	List = [ ]						  
2 STORE_FAST 1 ( List )					      	  for i in range ( 26 ) :				    	for i in range ( 26 ) :					  
							      	      List.append ( False )				    	    List.append ( False )				  
3 4 SETUP_LOOP 26 ( to 32 )				      	  for c in s.lower ( ) :				    	for c in s.lower ( ) :					  
6 LOAD_GLOBAL 0 ( range )				      	      if not c == " " :					    	    if not c == ' ' :					  
8 LOAD_CONST 1 ( 26 )					      		  List [ ord ( c ) - ord ( 'a' ) ] = True	    		List [ ord ( c ) - ord ( 'a' ) ] = True		  
10 CALL_FUNCTION 1					      	  for ch in List :					    	for ch in List :					  
12 GET_ITER						      	      if ch == False :					    	    if ch == False :					  
>> 14 FOR_ITER 14 ( to 30 )				      		  return False					    		return False					  
16 STORE_FAST 2 ( i )					      	  return True						    return True							  
							      								    								  
4 18 LOAD_FAST 1 ( List )				      								    								  
20 LOAD_METHOD 1 ( append )				      								    								  
22 LOAD_CONST 2 ( False )				      								    								  
24 CALL_METHOD 1					      								    								  
26 POP_TOP						      								    								  
28 JUMP_ABSOLUTE 14					      								    								  
>> 30 POP_BLOCK						      								    								  
							      								    								  
5 >> 32 SETUP_LOOP 44 ( to 78 )				      								    								  
34 LOAD_FAST 0 ( s )					      								    								  
36 LOAD_METHOD 2 ( lower )				      								    								  
38 CALL_METHOD 0					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 32 ( to 76 )				      								    								  
44 STORE_FAST 3 ( c )					      								    								  
							      								    								  
6 46 LOAD_FAST 3 ( c )					      								    								  
48 LOAD_CONST 3 ( ' ' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_TRUE 42					      								    								  
							      								    								  
7 54 LOAD_CONST 4 ( True )				      								    								  
56 LOAD_FAST 1 ( List )					      								    								  
58 LOAD_GLOBAL 3 ( ord )				      								    								  
60 LOAD_FAST 3 ( c )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_GLOBAL 3 ( ord )				      								    								  
66 LOAD_CONST 5 ( 'a' )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 42					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 SETUP_LOOP 24 ( to 104 )			      								    								  
80 LOAD_FAST 1 ( List )					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 16 ( to 102 )				      								    								  
86 STORE_FAST 4 ( ch )					      								    								  
							      								    								  
9 88 LOAD_FAST 4 ( ch )					      								    								  
90 LOAD_CONST 2 ( False )				      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
10 96 LOAD_CONST 2 ( False )				      								    								  
98 RETURN_VALUE						      								    								  
100 JUMP_ABSOLUTE 84					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
11 >> 104 LOAD_CONST 4 ( True )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>	      MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		    MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		  MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>
--							      --							    --								  --
Disassembly of <code object calculate at 0x7f33e26494b0, file def calculate ( a , n ) :					    def calculate ( a , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( ) ;						    	a.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  s = [ ] ;						    	s = [ ]							  
4 CALL_METHOD 0						      	  i = 0 ;						    	i = 0							  
6 POP_TOP						      	  j = n - 1 ;						    	j = n - 1						  
							      	  while ( i < j ) :					    	while i < j :						  
3 8 BUILD_LIST 0					      	      s.append ( ( a [ i ] + a [ j ] ) ) ;		    	    s.append ( a [ i ] + a [ j ] )			  
10 STORE_FAST 2 ( s )					      	      i += 1 ;						    	    i += 1						  
							      	      j -= 1 ;						    	    j -= 1						  
4 12 LOAD_CONST 1 ( 0 )					      	  mini = min ( s ) ;					    	mini = min ( s )					  
14 STORE_FAST 3 ( i )					      	  maxi = max ( s ) ;					    	maxi = max ( s )					  
							      	  return abs ( maxi - mini ) ;				    	return abs ( maxi - mini )				  
5 16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 24 SETUP_LOOP 50 ( to 76 )				      								    								  
>> 26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_FAST 4 ( j )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
7 34 LOAD_FAST 2 ( s )					      								    								  
36 LOAD_METHOD 1 ( append )				      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_ADD						      								    								  
52 CALL_METHOD 1					      								    								  
54 POP_TOP						      								    								  
							      								    								  
8 56 LOAD_FAST 3 ( i )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 64 LOAD_FAST 4 ( j )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 INPLACE_SUBTRACT					      								    								  
70 STORE_FAST 4 ( j )					      								    								  
72 JUMP_ABSOLUTE 26					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
10 >> 76 LOAD_GLOBAL 2 ( min )				      								    								  
78 LOAD_FAST 2 ( s )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_FAST 5 ( mini )				      								    								  
							      								    								  
11 84 LOAD_GLOBAL 3 ( max )				      								    								  
86 LOAD_FAST 2 ( s )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 STORE_FAST 6 ( maxi )				      								    								  
							      								    								  
12 92 LOAD_GLOBAL 4 ( abs )				      								    								  
94 LOAD_FAST 6 ( maxi )					      								    								  
96 LOAD_FAST 5 ( mini )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	      GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	    GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1		  GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1
--							      --							    --								  --
Disassembly of <code object findPairs at 0x7f33e2644930, file def findPairs ( arr1 , arr2 , n , m , x ) :		    def findPairs ( arr1 , arr2 , n , m , K ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
4 STORE_FAST 5 ( s )					      	      s.add ( arr1 [ i ] )				    	    s.add ( arr1 [ i ] )				  
							      	  for j in range ( 0 , m ) :				    	for j in range ( 0 , m ) :				  
3 6 SETUP_LOOP 32 ( to 40 )				      	      if ( ( x - arr2 [ j ] ) in s ) :			    	    if x - arr2 [ j ] in s :				  
8 LOAD_GLOBAL 1 ( range )				      		  print ( ( x - arr2 [ j ] ) , '' , arr2 [ j ] )    		print ( x - arr2 [ j ] , " " , arr2 [ j ] )	  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 LOAD_FAST 2 ( n )					      								    								  
14 CALL_FUNCTION 2					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 18 ( to 38 )				      								    								  
20 STORE_FAST 6 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 5 ( s )					      								    								  
24 LOAD_METHOD 2 ( add )				      								    								  
26 LOAD_FAST 0 ( arr1 )					      								    								  
28 LOAD_FAST 6 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_METHOD 1					      								    								  
34 POP_TOP						      								    								  
36 JUMP_ABSOLUTE 18					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 58 ( to 100 )			      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 LOAD_FAST 3 ( m )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 44 ( to 98 )				      								    								  
54 STORE_FAST 7 ( j )					      								    								  
							      								    								  
6 56 LOAD_FAST 4 ( x )					      								    								  
58 LOAD_FAST 1 ( arr2 )					      								    								  
60 LOAD_FAST 7 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_FAST 5 ( s )					      								    								  
68 COMPARE_OP 6 ( in )					      								    								  
70 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 72 LOAD_GLOBAL 3 ( print )				      								    								  
74 LOAD_FAST 4 ( x )					      								    								  
76 LOAD_FAST 1 ( arr2 )					      								    								  
78 LOAD_FAST 7 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_CONST 2 ( '' )					      								    								  
86 LOAD_FAST 1 ( arr2 )					      								    								  
88 LOAD_FAST 7 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 3					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 52					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	    COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	  COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
Disassembly of <code object countZeroes at 0x7f33e2644930, fi def countZeroes ( mat ) :					    def countZeroes ( mat ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 5 )					      	  N = 5 ;						    	N = 5							  
2 STORE_FAST 1 ( N )					      	  row = N - 1 ;						    	row = N - 1						  
							      	  col = 0 ;						    	col = 0							  
3 4 LOAD_FAST 1 ( N )					      	  count = 0 ;						    	count = 0						  
6 LOAD_CONST 2 ( 1 )					      	  while ( col < N ) :					    	while col < N :						  
8 BINARY_SUBTRACT					      	      while ( mat [ row ] [ col ] ) :			    	    while mat [ row ] [ col ] :				  
10 STORE_FAST 2 ( row )					      		  if ( row < 0 ) :				    		if row < 0 :					  
							      		      return count ;				    		    return count				  
4 12 LOAD_CONST 3 ( 0 )					      		  row = row - 1 ;				    		row = row - 1					  
14 STORE_FAST 3 ( col )					      	      count = count + ( row + 1 ) ;			    	count = count + row + 1					  
							      	      col = col + 1 ;					    	col = col + 1						  
5 16 LOAD_CONST 3 ( 0 )					      	  return count ;					    return count						  
18 STORE_FAST 4 ( count )				      								    								  
							      								    								  
6 20 SETUP_LOOP 70 ( to 92 )				      								    								  
>> 22 LOAD_FAST 3 ( col )				      								    								  
24 LOAD_FAST 1 ( N )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
7 30 SETUP_LOOP 36 ( to 68 )				      								    								  
>> 32 LOAD_FAST 0 ( mat )				      								    								  
34 LOAD_FAST 2 ( row )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 3 ( col )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 44 LOAD_FAST 2 ( row )				      								    								  
46 LOAD_CONST 3 ( 0 )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
9 52 LOAD_FAST 4 ( count )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
10 >> 56 LOAD_FAST 2 ( row )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 STORE_FAST 2 ( row )					      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
11 >> 68 LOAD_FAST 4 ( count )				      								    								  
70 LOAD_FAST 2 ( row )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 4 ( count )				      								    								  
							      								    								  
12 80 LOAD_FAST 3 ( col )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 3 ( col )					      								    								  
88 JUMP_ABSOLUTE 22					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
13 >> 92 LOAD_FAST 4 ( count )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
Disassembly of <code object decToBinary at 0x7f33e2653f60, fi def decToBinary ( n ) :					    def decToBinary ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  binaryNum = [ 0 ] * n ;				    	binaryNum = [ 0 ] * n					  
2 BUILD_LIST 1						      	  i = 0 ;						    	i = 0							  
4 LOAD_FAST 0 ( n )					      	  while ( n > 0 ) :					    	while n > 0 :						  
6 BINARY_MULTIPLY					      	      binaryNum [ i ] = n % 2 ;				    	    binaryNum [ i ] = n % 2				  
8 STORE_FAST 1 ( binaryNum )				      	      n = int ( n / 2 ) ;				    	    n = int ( n / 2 )					  
							      	      i += 1 ;						    	    i += 1						  
3 10 LOAD_CONST 1 ( 0 )					      	  for j in range ( i - 1 , - 1 , - 1 ) :		    	for j in range ( i - 1 , - 1 , - 1 ) :			  
12 STORE_FAST 2 ( i )					      	      print ( binaryNum [ j ] , end = "" ) ;		    	    print ( binaryNum [ j ] , end = "" )		  
							      								    								  
4 14 SETUP_LOOP 44 ( to 60 )				      								    								  
>> 16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 4 ( > )					      								    								  
22 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_FAST 1 ( binaryNum )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 2 ( i )					      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 40 ( to 102 )			      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_CONST 4 ( - 1 )					      								    								  
72 LOAD_CONST 4 ( - 1 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 20 ( to 100 )				      								    								  
80 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 82 LOAD_GLOBAL 2 ( print )				      								    								  
84 LOAD_FAST 1 ( binaryNum )				      								    								  
86 LOAD_FAST 3 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 5 ( '' )					      								    								  
92 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
94 CALL_FUNCTION_KW 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 78					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER
--							      --							    --								  --
Disassembly of <code object overflow at 0x7f33e2644f60, file  def overflow ( H , r , h , N , R ) :			    def overflow ( H , r , h , N , R , R ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 3.14 )				      	  tank_cap = 3.14 * r * r * H				    	tank_cap = 3.14 * r * r * H				  
2 LOAD_FAST 1 ( r )					      	  water_vol = 3.14 * r * r * h				    	water_vol = 3.14 * r * r * h				  
4 BINARY_MULTIPLY					      	  balls_vol = N * ( 4 / 3 ) * 3.14 * R * R * R		    	balls_vol = ( N * 1.3333333333333333 * 3.14 * 3.14 * R *  
6 LOAD_FAST 1 ( r )					      	  vol = water_vol + balls_vol				    	vol = water_vol + balls_vol				  
8 BINARY_MULTIPLY					      	  if vol > tank_cap :					    	if vol > tank_cap :					  
10 LOAD_FAST 0 ( H )					      	      print ( "Overflow" )				    	    print ( "Overflow" )				  
12 BINARY_MULTIPLY					      	  else :						    	else :							  
14 STORE_FAST 5 ( tank_cap )				      	      print ( "Not in overflow state" )			    	    print ( "Not in overflow state" )			  
							      								    								  
3 16 LOAD_CONST 1 ( 3.14 )				      								    								  
18 LOAD_FAST 1 ( r )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_FAST 1 ( r )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 2 ( h )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 STORE_FAST 6 ( water_vol )				      								    								  
							      								    								  
4 32 LOAD_FAST 3 ( N )					      								    								  
34 LOAD_CONST 2 ( 1.3333333333333333 )			      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 1 ( 3.14 )				      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 4 ( R )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 4 ( R )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_FAST 4 ( R )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 STORE_FAST 7 ( balls_vol )				      								    								  
							      								    								  
5 56 LOAD_FAST 6 ( water_vol )				      								    								  
58 LOAD_FAST 7 ( balls_vol )				      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 8 ( vol )					      								    								  
							      								    								  
6 64 LOAD_FAST 8 ( vol )				      								    								  
66 LOAD_FAST 5 ( tank_cap )				      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
7 72 LOAD_GLOBAL 0 ( print )				      								    								  
74 LOAD_CONST 3 ( 'Overflow' )				      								    								  
76 CALL_FUNCTION 1					      								    								  
78 POP_TOP						      								    								  
80 JUMP_FORWARD 8 ( to 90 )				      								    								  
							      								    								  
9 >> 82 LOAD_GLOBAL 0 ( print )				      								    								  
84 LOAD_CONST 4 ( 'Not in overflow state' )		      								    								  
86 CALL_FUNCTION 1					      								    								  
88 POP_TOP						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIAGONALLY_DOMINANT_MATRIX				      DIAGONALLY_DOMINANT_MATRIX				    DIAGONALLY_DOMINANT_MATRIX					  DIAGONALLY_DOMINANT_MATRIX
--							      --							    --								  --
Disassembly of <code object isDDM at 0x7f33e2644f60, file "<d def isDDM ( m , n ) :					    def isDDM ( m , n ) :					  success : None
2 0 SETUP_LOOP 106 ( to 108 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      sum = 0						    	    sum = 0						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
6 LOAD_FAST 1 ( n )					      		  sum = sum + abs ( m [ i ] [ j ] )		    		sum = sum + abs ( m [ i ] [ j ] )		  
8 CALL_FUNCTION 2					      	      sum = sum - abs ( m [ i ] [ i ] )			    	    sum = sum - abs ( m [ i ] [ i ] )			  
10 GET_ITER						      	      if ( abs ( m [ i ] [ i ] ) < sum ) :		    	    if abs ( m [ i ] [ i ] ) < sum :			  
>> 12 FOR_ITER 92 ( to 106 )				      		  return False					    		return False					  
14 STORE_FAST 2 ( i )					      	  return True						    	return True						  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
4 20 SETUP_LOOP 38 ( to 60 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 24 ( to 58 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( sum )				      								    								  
38 LOAD_GLOBAL 1 ( abs )				      								    								  
40 LOAD_FAST 0 ( m )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 3 ( sum )					      								    								  
56 JUMP_ABSOLUTE 32					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
6 >> 60 LOAD_FAST 3 ( sum )				      								    								  
62 LOAD_GLOBAL 1 ( abs )				      								    								  
64 LOAD_FAST 0 ( m )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
7 80 LOAD_GLOBAL 1 ( abs )				      								    								  
82 LOAD_FAST 0 ( m )					      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_FAST 3 ( sum )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
8 100 LOAD_CONST 2 ( False )				      								    								  
102 RETURN_VALUE					      								    								  
104 JUMP_ABSOLUTE 12					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
9 >> 108 LOAD_CONST 3 ( True )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT		      FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			    FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			  FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT
--							      --							    --								  --
Disassembly of <code object findDuplicateparenthesis at 0x7f3 def findDuplicateparenthesis ( string ) :			    def findDuplicateparenthesis ( string ) :			  error : Traceback (most recent call last):   File
2 0 BUILD_LIST 0					      	  Stack = [ ]						    	Stack = [ ]						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 1 ( Stack )				      	  for ch in string :					    	for ch in string :					  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/FIND_
							      	      if ch == ')' :					    	    if ch == ')' :					  EXPRESSION_DUPLICATE_PARENTHESIS_NOT.py", line 64,
3 4 SETUP_LOOP 86 ( to 92 )				      		  top = Stack.pop ( )				    		top = Stack.pop ( )				   in <module>	   if f_filled(*parameters_set) == f
6 LOAD_FAST 0 ( string )				      		  elementsInside = 0				    		elementsInside = 0				  _gold(*parameters_set):   File "/home/ubuntu/Trans
8 GET_ITER						      		  while top != '(' :				    		while top != '(' :				  Coder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scrip
>> 10 FOR_ITER 78 ( to 90 )				      		      elementsInside += 1			    		    elementsInside += 1				  ts/dis_sa-python_sa.valid/FIND_EXPRESSION_DUPLICAT
12 STORE_FAST 2 ( ch )					      		      top = Stack.pop ( )			    		    top = Stack.pop ( )				  E_PARENTHESIS_NOT.py", line 42, in f_filled	  if
							      		  if elementsInside < 1 :			    	    if elementsInside < 1 :				   elementsInside < 1 : UnboundLocalError: local var
4 14 LOAD_FAST 2 ( ch )					      		      return True				    		return True					  iable 'elementsInside' referenced before assignmen
16 LOAD_CONST 1 ( ')' )					      	      else :						    	    else :						  t
18 COMPARE_OP 2 ( == )					      		  Stack.append ( ch )				    		Stack.append ( ch )				  
20 POP_JUMP_IF_FALSE 78					      	  return False						    	return False						  
							      								    								  
5 22 LOAD_FAST 1 ( Stack )				      								    								  
24 LOAD_METHOD 0 ( pop )				      								    								  
26 CALL_METHOD 0					      								    								  
28 STORE_FAST 3 ( top )					      								    								  
							      								    								  
6 30 LOAD_CONST 2 ( 0 )					      								    								  
32 STORE_FAST 4 ( elementsInside )			      								    								  
							      								    								  
7 34 SETUP_LOOP 28 ( to 64 )				      								    								  
>> 36 LOAD_FAST 3 ( top )				      								    								  
38 LOAD_CONST 3 ( '(' )					      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 44 LOAD_FAST 4 ( elementsInside )			      								    								  
46 LOAD_CONST 4 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 4 ( elementsInside )			      								    								  
							      								    								  
9 52 LOAD_FAST 1 ( Stack )				      								    								  
54 LOAD_METHOD 0 ( pop )				      								    								  
56 CALL_METHOD 0					      								    								  
58 STORE_FAST 3 ( top )					      								    								  
60 JUMP_ABSOLUTE 36					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
10 >> 64 LOAD_FAST 4 ( elementsInside )			      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
11 72 LOAD_CONST 5 ( True )				      								    								  
74 RETURN_VALUE						      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
13 >> 78 LOAD_FAST 1 ( Stack )				      								    								  
80 LOAD_METHOD 1 ( append )				      								    								  
82 LOAD_FAST 2 ( ch )					      								    								  
84 CALL_METHOD 1					      								    								  
86 POP_TOP						      								    								  
>> 88 JUMP_ABSOLUTE 10					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
14 >> 92 LOAD_CONST 6 ( False )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		      FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		    FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N			  FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N
--							      --							    --								  --
Disassembly of <code object findRepeatingElement at 0x7f33e26 def findRepeatingElement ( arr , low , high ) :		    def findRepeatingElement ( arr , low , high ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if low > high :					    	if low > high :						  
2 LOAD_FAST 2 ( high )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 4 ( > )					      	  mid = ( low + high ) / 2				    	mid = ( low + high ) / 2				  
6 POP_JUMP_IF_FALSE 12					      	  if ( arr [ mid ] != mid + 1 ) :			    	if arr [ mid ] != mid + 1 :				  
							      	      if ( mid > 0 and arr [ mid ] == arr [ mid - 1 ] ) :   	    if mid > 0 and arr [ mid ] == arr [ mid - 1 ] :	  
3 8 LOAD_CONST 1 ( - 1 )				      		  return mid					    		return mid					  
10 RETURN_VALUE						      	      return findRepeatingElement ( arr , low , mid - 1 )   	    return findRepeatingElement ( arr , low , mid - 1 )	  
							      	  return findRepeatingElement ( arr , mid + 1 , high )	    return findRepeatingElement ( arr , mid + 1 , high )	  
4 >> 12 LOAD_FAST 1 ( low )				      								    								  
14 LOAD_FAST 2 ( high )					      								    								  
16 BINARY_ADD						      								    								  
18 LOAD_CONST 2 ( 2 )					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 3 ( mid )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 3 ( mid )					      								    								  
32 LOAD_CONST 3 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( mid )				      								    								  
42 LOAD_CONST 4 ( 0 )					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 72					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 3 ( mid )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 3 ( mid )					      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 68 LOAD_FAST 3 ( mid )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
8 >> 72 LOAD_GLOBAL 0 ( findRepeatingElement )		      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 1 ( low )					      								    								  
78 LOAD_FAST 3 ( mid )					      								    								  
80 LOAD_CONST 3 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 3					      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
9 >> 88 LOAD_GLOBAL 0 ( findRepeatingElement )		      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 3 ( mid )					      								    								  
94 LOAD_CONST 3 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 2 ( high )					      								    								  
100 CALL_FUNCTION 3					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			      MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			    MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			  MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK
--							      --							    --								  --
Disassembly of <code object minRotation at 0x7f33e2644f60, fi def minRotation ( input , unlock_code ) :			    def minRotation ( input , unlock_code ) :			  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  rotation = 0 ;					    	rotation = 0						  
2 STORE_FAST 2 ( rotation )				      	  while ( input > 0 or unlock_code > 0 ) :		    	while input > 0 or unlock_code > 0 :			  
							      	      input_digit = input % 10 ;			    	    input_digit = input % 10				  
3 4 SETUP_LOOP 94 ( to 100 )				      	      code_digit = unlock_code % 10 ;			    	    code_digit = unlock_code % 10			  
>> 6 LOAD_FAST 0 ( input )				      	      rotation += min ( abs ( input_digit - code_digit ) ,  	    rotation += min ( abs ( input_digit - code_digit ) -  
8 LOAD_CONST 1 ( 0 )					      	      input = int ( input / 10 ) ;			    	    input = int ( input / 10 )				  
10 COMPARE_OP 4 ( > )					      	      unlock_code = int ( unlock_code / 10 ) ;		    	    unlock_code = int ( unlock_code / 10 )		  
12 POP_JUMP_IF_TRUE 22					      	  return rotation ;					    	return rotation						  
14 LOAD_FAST 1 ( unlock_code )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
4 >> 22 LOAD_FAST 0 ( input )				      								    								  
24 LOAD_CONST 2 ( 10 )					      								    								  
26 BINARY_MODULO					      								    								  
28 STORE_FAST 3 ( input_digit )				      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( unlock_code )			      								    								  
32 LOAD_CONST 2 ( 10 )					      								    								  
34 BINARY_MODULO					      								    								  
36 STORE_FAST 4 ( code_digit )				      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( rotation )				      								    								  
40 LOAD_GLOBAL 0 ( min )				      								    								  
42 LOAD_GLOBAL 1 ( abs )				      								    								  
44 LOAD_FAST 3 ( input_digit )				      								    								  
46 LOAD_FAST 4 ( code_digit )				      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 LOAD_CONST 2 ( 10 )					      								    								  
54 LOAD_GLOBAL 1 ( abs )				      								    								  
56 LOAD_FAST 3 ( input_digit )				      								    								  
58 LOAD_FAST 4 ( code_digit )				      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 2 ( rotation )				      								    								  
							      								    								  
7 72 LOAD_GLOBAL 2 ( int )				      								    								  
74 LOAD_FAST 0 ( input )				      								    								  
76 LOAD_CONST 2 ( 10 )					      								    								  
78 BINARY_TRUE_DIVIDE					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_FAST 0 ( input )				      								    								  
							      								    								  
8 84 LOAD_GLOBAL 2 ( int )				      								    								  
86 LOAD_FAST 1 ( unlock_code )				      								    								  
88 LOAD_CONST 2 ( 10 )					      								    								  
90 BINARY_TRUE_DIVIDE					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 STORE_FAST 1 ( unlock_code )				      								    								  
96 JUMP_ABSOLUTE 6					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
9 >> 100 LOAD_FAST 2 ( rotation )			      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW
--							      --							    --								  --
Disassembly of <code object checkForSorting at 0x7f33e26494b0 def checkForSorting ( arr , n ) :				    def checkForSorting ( arr , n ) :				  failure : #Results: 9, 10
2 0 SETUP_LOOP 106 ( to 108 )				      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] > arr [ i + 1 ] ) :		    	    if arr [ i ] > arr [ i + 1 ] :			  
4 LOAD_CONST 1 ( 0 )					      		  if ( arr [ i ] - arr [ i + 1 ] == 1 ) :	    		if arr [ i ] == arr [ i + 1 ] == 1 :		  
6 LOAD_FAST 1 ( n )					      		      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 		    arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 
8 LOAD_CONST 2 ( 1 )					      		  else :					    		else :						  
10 BINARY_SUBTRACT					      		      return False				    		    return False				  
12 CALL_FUNCTION 2					      	  return True						    	return True						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 88 ( to 106 )				      								    								  
18 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 2 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 4 ( > )					      								    								  
38 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
5 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 ROT_TWO						      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 STORE_SUBSCR						      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_SUBSCR						      								    								  
98 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 100 LOAD_CONST 3 ( False )				      								    								  
102 RETURN_VALUE					      								    								  
104 JUMP_ABSOLUTE 16					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
8 >> 108 LOAD_CONST 4 ( True )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
Disassembly of <code object insertionSortRecursive at 0x7f33e def insertionSortRecursive ( arr , n ) :			    def insertionSortRecursive ( arr , n ) :			  success : None
2 0 LOAD_FAST 1 ( n )					      	  if n <= 1 :						    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return						    	    return						  
4 COMPARE_OP 1 ( <= )					      	  insertionSortRecursive ( arr , n - 1 )		    	insertionSortRecursive ( arr , n - 1 )			  
6 POP_JUMP_IF_FALSE 12					      	  last = arr [ n - 1 ]					    	last = arr [ n - 1 ]					  
							      	  j = n - 2						    	j = n - 2						  
3 8 LOAD_CONST 0 ( None )				      	  while ( j >= 0 and arr [ j ] > last ) :		    	while j >= 0 and arr [ j ] > last :			  
10 RETURN_VALUE						      	      arr [ j + 1 ] = arr [ j ]				    	    arr [ j + 1 ] = arr [ j ]				  
							      	      j = j - 1						    	    j = j - 1						  
4 >> 12 LOAD_GLOBAL 0 ( insertionSortRecursive )	      	  arr [ j + 1 ] = last					    	arr [ j + 1 ] = last					  
14 LOAD_FAST 0 ( arr )					      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 POP_TOP						      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( arr )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 BINARY_SUBSCR					      								    								  
36 STORE_FAST 2 ( last )				      								    								  
							      								    								  
6 38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 STORE_FAST 3 ( j )					      								    								  
							      								    								  
7 46 SETUP_LOOP 48 ( to 96 )				      								    								  
>> 48 LOAD_FAST 3 ( j )					      								    								  
50 LOAD_CONST 3 ( 0 )					      								    								  
52 COMPARE_OP 5 ( >= )					      								    								  
54 POP_JUMP_IF_FALSE 94					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( last )					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( j )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
9 84 LOAD_FAST 3 ( j )					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 STORE_FAST 3 ( j )					      								    								  
92 JUMP_ABSOLUTE 48					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 2 ( last )				      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 3 ( j )					      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_SUBSCR					      								    								  
108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSTRING_1				      LONGEST_COMMON_SUBSTRING_1				    LONGEST_COMMON_SUBSTRING_1					  LONGEST_COMMON_SUBSTRING_1
--							      --							    --								  --
Disassembly of <code object lcs at 0x7f33e2649a50, file "<dis def lcs ( i , j , count ) :				    def lcs ( i , j , count ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( i )					      	  if ( i == 0 or j == 0 ) :				    	if ( i == 0 or j == 0 ) :				  
2 LOAD_CONST 1 ( 0 )					      	      return count					    	    return count					  
4 COMPARE_OP 2 ( == )					      	  if ( X [ i - 1 ] == Y [ j - 1 ] ) :			    	if ( X [ i - 1 ] == Y [ j - 1 ] ) :			  
6 POP_JUMP_IF_TRUE 16					      	      count = lcs ( i - 1 , j - 1 , count + 1 )		    	    count = lcs ( i - 1 , j - 1 , count + 1 )		  
8 LOAD_FAST 1 ( j )					      	  count = max ( count , max ( lcs ( i , j - 1 , 0 ) , lcs ( 	count = max ( count , max ( lcs ( i , j - 1 , 0 ) , lcs ( 
10 LOAD_CONST 1 ( 0 )					      	  return count						    	return count						  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_FAST 2 ( count )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( X )				      								    								  
22 LOAD_FAST 0 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_GLOBAL 1 ( Y )					      								    								  
32 LOAD_FAST 1 ( j )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 2 ( lcs )				      								    								  
46 LOAD_FAST 0 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 LOAD_FAST 1 ( j )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 2 ( count )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 CALL_FUNCTION 3					      								    								  
66 STORE_FAST 2 ( count )				      								    								  
							      								    								  
6 >> 68 LOAD_GLOBAL 3 ( max )				      								    								  
70 LOAD_FAST 2 ( count )				      								    								  
72 LOAD_GLOBAL 3 ( max )				      								    								  
74 LOAD_GLOBAL 2 ( lcs )				      								    								  
76 LOAD_FAST 0 ( i )					      								    								  
78 LOAD_FAST 1 ( j )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_CONST 1 ( 0 )					      								    								  
86 CALL_FUNCTION 3					      								    								  
88 LOAD_GLOBAL 2 ( lcs )				      								    								  
90 LOAD_FAST 0 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_FAST 1 ( j )					      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 CALL_FUNCTION 3					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 STORE_FAST 2 ( count )				      								    								  
							      								    								  
7 108 LOAD_FAST 2 ( count )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			      CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			    CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX				  CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX
--							      --							    --								  --
Disassembly of <code object areSumSame at 0x7f33e2644930, fil def areSumSame ( a , n , m ) :				    def areSumSame ( a , n , m ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum1 = 0						    	sum1 = 0						  
2 STORE_FAST 3 ( sum1 )					      	  sum2 = 0						    	sum2 = 0						  
							      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      sum1 = 0						    	    sum1 = 0						  
6 STORE_FAST 4 ( sum2 )					      	      sum2 = 0						    	    sum2 = 0						  
							      	      for j in range ( 0 , m ) :			    	    for j in range ( 0 , m ) :				  
4 8 SETUP_LOOP 90 ( to 100 )				      		  sum1 += a [ i ] [ j ]				    		sum1 += a [ i ] [ j ]				  
10 LOAD_GLOBAL 0 ( range )				      		  sum2 += a [ j ] [ i ]				    		sum2 += a [ j ] [ i ]				  
12 LOAD_CONST 1 ( 0 )					      	      if ( sum1 == sum2 ) :				    	    if sum1 == sum2 :					  
14 LOAD_FAST 1 ( n )					      		  return 1					    		return 1					  
16 CALL_FUNCTION 2					      	  return 0						    	return 0						  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 76 ( to 98 )				      								    								  
22 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 3 ( sum1 )				      								    								  
							      								    								  
6 28 LOAD_CONST 1 ( 0 )					      								    								  
30 STORE_FAST 4 ( sum2 )				      								    								  
							      								    								  
7 32 SETUP_LOOP 50 ( to 84 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 2 ( m )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 36 ( to 82 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 48 LOAD_FAST 3 ( sum1 )				      								    								  
50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( sum1 )				      								    								  
							      								    								  
9 64 LOAD_FAST 4 ( sum2 )				      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 6 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 5 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 4 ( sum2 )				      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 3 ( sum1 )				      								    								  
86 LOAD_FAST 4 ( sum2 )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
11 92 LOAD_CONST 2 ( 1 )				      								    								  
94 RETURN_VALUE						      								    								  
96 JUMP_ABSOLUTE 20					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
12 >> 100 LOAD_CONST 1 ( 0 )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			  LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1
--							      --							    --								  --
Disassembly of <code object maxLength at 0x7f33e2644f60, file def maxLength ( s , n ) :					    def maxLength ( s , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  invalidOpenBraces = 0 ;				    	invalidOpenBraces = 0					  
2 STORE_FAST 2 ( invalidOpenBraces )			      	  invalidCloseBraces = 0 ;				    	invalidClosees = 0					  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      if ( s [ i ] == '(' ) :				    	    if s [ i ] == '(' :					  
6 STORE_FAST 3 ( invalidCloseBraces )			      		  invalidOpenBraces += 1			    		invalidOpenBraces += 1				  
							      	      else :						    	    elif invalidOpenBraces == 0 :			  
4 8 SETUP_LOOP 64 ( to 74 )				      		  if ( invalidOpenBraces == 0 ) :		    		invalidCloseBraces += 1				  
10 LOAD_GLOBAL 0 ( range )				      		      invalidCloseBraces += 1			    	    else :						  
12 LOAD_FAST 1 ( n )					      		  else :					    		invalidOpenBraces -= 1				  
14 CALL_FUNCTION 1					      		      invalidOpenBraces -= 1			    	return n - invalidOpenBraces + invalidClosees + invalidCl 
16 GET_ITER						      	  return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) 								  
>> 18 FOR_ITER 52 ( to 72 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 2 ( '(' )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( invalidOpenBraces )			      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( invalidOpenBraces )			      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 44 LOAD_FAST 2 ( invalidOpenBraces )		      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
9 52 LOAD_FAST 3 ( invalidCloseBraces )			      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( invalidCloseBraces )			      								    								  
60 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
11 >> 62 LOAD_FAST 2 ( invalidOpenBraces )		      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 INPLACE_SUBTRACT					      								    								  
68 STORE_FAST 2 ( invalidOpenBraces )			      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
12 >> 74 LOAD_FAST 1 ( n )				      								    								  
76 LOAD_FAST 2 ( invalidOpenBraces )			      								    								  
78 LOAD_FAST 3 ( invalidCloseBraces )			      								    								  
80 BINARY_ADD						      								    								  
82 BINARY_SUBTRACT					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	      GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	    GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	  GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT
--							      --							    --								  --
Disassembly of <code object findSymPairs at 0x7f33e2644f60, f def findSymPairs ( arr , row ) :				    def findSymPairs ( arr , row ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  hM = dict ( )						    	hM = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( row ) :				    	for i in range ( row ) :				  
4 STORE_FAST 2 ( hM )					      	      first = arr [ i ] [ 0 ]				    	    first = arr [ i ] [ 0 ]				  
							      	      sec = arr [ i ] [ 1 ]				    	    sec = arr [ i ] [ 1 ]				  
3 6 SETUP_LOOP 90 ( to 98 )				      	      if ( sec in hM.keys ( ) and hM [ sec ] == first ) :   	    if sec in hM.keys ( ) and hM [ sec ] == first :	  
8 LOAD_GLOBAL 1 ( range )				      		  print ( "(" , sec , "," , first , ")" )	    		print ( "(" , sec , "," , first , ")" )		  
10 LOAD_FAST 1 ( row )					      	      else :						    	    else :						  
12 CALL_FUNCTION 1					      		  hM [ first ] = sec				    		hM [ first ] = sec				  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 78 ( to 96 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 STORE_FAST 4 ( first )				      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 STORE_FAST 5 ( sec )					      								    								  
							      								    								  
6 44 LOAD_FAST 5 ( sec )				      								    								  
46 LOAD_FAST 2 ( hM )					      								    								  
48 LOAD_METHOD 2 ( keys )				      								    								  
50 CALL_METHOD 0					      								    								  
52 COMPARE_OP 6 ( in )					      								    								  
54 POP_JUMP_IF_FALSE 86					      								    								  
56 LOAD_FAST 2 ( hM )					      								    								  
58 LOAD_FAST 5 ( sec )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 4 ( first )				      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 3 ( print )				      								    								  
70 LOAD_CONST 3 ( '(' )					      								    								  
72 LOAD_FAST 5 ( sec )					      								    								  
74 LOAD_CONST 4 ( ',' )					      								    								  
76 LOAD_FAST 4 ( first )				      								    								  
78 LOAD_CONST 5 ( ')' )					      								    								  
80 CALL_FUNCTION 5					      								    								  
82 POP_TOP						      								    								  
84 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
9 >> 86 LOAD_FAST 5 ( sec )				      								    								  
88 LOAD_FAST 2 ( hM )					      								    								  
90 LOAD_FAST 4 ( first )				      								    								  
92 STORE_SUBSCR						      								    								  
94 JUMP_ABSOLUTE 16					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 LOAD_CONST 0 ( None )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PAIRS_ARRAY_XOR_0				      FIND_NUMBER_PAIRS_ARRAY_XOR_0				    FIND_NUMBER_PAIRS_ARRAY_XOR_0				  FIND_NUMBER_PAIRS_ARRAY_XOR_0
--							      --							    --								  --
Disassembly of <code object calculate at 0x7f33e26499c0, file def calculate ( a ) :					    def calculate ( a ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( )						    	a.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  count = 1						    	count = 1						  
4 CALL_METHOD 0						      	  answer = 0						    	answer = 0						  
6 POP_TOP						      	  for i in range ( 1 , len ( a ) ) :			    	for i in range ( 1 , len ( a ) ) :			  
							      	      if a [ i ] == a [ i - 1 ] :			    	    if a [ i ] == a [ i - 1 ] :				  
3 8 LOAD_CONST 1 ( 1 )					      		  count += 1					    		count += 1					  
10 STORE_FAST 1 ( count )				      	      else :						    	    else :						  
							      		  answer = answer + count * ( count - 1 ) // 2	    		answer = answer + count * ( count - 1 ) // 2	  
4 12 LOAD_CONST 2 ( 0 )					      		  count = 1					    		count = 1					  
14 STORE_FAST 2 ( answer )				      	  answer = answer + count * ( count - 1 ) // 2		    	answer = answer + count * ( count - 1 ) // 2		  
							      	  return answer						    	return answer						  
5 16 SETUP_LOOP 76 ( to 94 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_GLOBAL 2 ( len )				      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 58 ( to 92 )				      								    								  
34 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
7 56 LOAD_FAST 1 ( count )				      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( count )				      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
9 >> 66 LOAD_FAST 2 ( answer )				      								    								  
68 LOAD_FAST 1 ( count )				      								    								  
70 LOAD_FAST 1 ( count )				      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_CONST 3 ( 2 )					      								    								  
80 BINARY_FLOOR_DIVIDE					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
10 86 LOAD_CONST 1 ( 1 )				      								    								  
88 STORE_FAST 1 ( count )				      								    								  
90 JUMP_ABSOLUTE 32					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 LOAD_FAST 2 ( answer )				      								    								  
96 LOAD_FAST 1 ( count )				      								    								  
98 LOAD_FAST 1 ( count )				      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_CONST 3 ( 2 )					      								    								  
108 BINARY_FLOOR_DIVIDE					      								    								  
110 BINARY_ADD						      								    								  
112 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
12 114 LOAD_FAST 2 ( answer )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1
--							      --							    --								  --
Disassembly of <code object breakSum at 0x7f33e2644930, file  def breakSum ( n ) :					    def breakSum ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( n + 1 )				    	dp = [ 0 ] * n						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 BUILD_LIST 1						      	  dp [ 0 ] = 0						    	dp [ 0 ] = 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/RECUR
4 LOAD_FAST 0 ( n )					      	  dp [ 1 ] = 1						    	dp [ 1 ] = 1						  SIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1.py",
6 LOAD_CONST 2 ( 1 )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				   line 50, in <module>	    if f_filled(*parameters_
8 BINARY_ADD						      	      dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i  	    dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i  set) == f_gold(*parameters_set):   File "/home/ubu
10 BINARY_MULTIPLY					      	  return dp [ n ]					    	return dp [ n ]						  ntu/TransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/e
12 STORE_FAST 1 ( dp )					      								    								  val_scripts/dis_sa-python_sa.valid/RECURSIVELY_BRE
							      								    								  AK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1.py", line 31,
3 14 LOAD_CONST 1 ( 0 )					      								    								  in f_filled	  dp [ i ] = max ( dp [ int ( i / 2
16 LOAD_FAST 1 ( dp )					      								    								  ) ] + dp [ int ( i / 3 ) ] , dp [ int ( i / 4 ) ]
18 LOAD_CONST 1 ( 0 )					      								    								  , i ) IndexError: list assignment index out of ran
20 STORE_SUBSCR						      								    								  ge
							      								    								  
4 22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 1 ( dp )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 SETUP_LOOP 80 ( to 112 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 62 ( to 110 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 50 LOAD_GLOBAL 1 ( max )				      								    								  
52 LOAD_FAST 1 ( dp )					      								    								  
54 LOAD_GLOBAL 2 ( int )				      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( dp )					      								    								  
68 LOAD_GLOBAL 2 ( int )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 4 ( 3 )					      								    								  
74 BINARY_TRUE_DIVIDE					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 1 ( dp )					      								    								  
84 LOAD_GLOBAL 2 ( int )				      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 5 ( 4 )					      								    								  
90 BINARY_TRUE_DIVIDE					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 CALL_FUNCTION 2					      								    								  
102 LOAD_FAST 1 ( dp )					      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 STORE_SUBSCR					      								    								  
108 JUMP_ABSOLUTE 46					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
7 >> 112 LOAD_FAST 1 ( dp )				      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM
--							      --							    --								  --
Disassembly of <code object isSubsetSum at 0x7f33e26494b0, fi def isSubsetSum ( set , n , sum ) :			    def isSubsetSum ( set , n , sum ) :				  script_not_found : None
2 0 LOAD_FAST 2 ( sum )					      	  if ( sum == 0 ) :					    	if sum == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return True					    	    return True						  
4 COMPARE_OP 2 ( == )					      	  if ( n == 0 and sum != 0 ) :				    	if n == 0 and sum != 0 :				  
6 POP_JUMP_IF_FALSE 12					      	      return False					    	    return False					  
							      	  if ( set [ n - 1 ] > sum ) :				    	if set [ n - 1 ] > sum :				  
3 8 LOAD_CONST 2 ( True )				      	      return isSubsetSum ( set , n - 1 , sum ) ;	    	    return isSubsetSum ( set , n - 1 , sum )		  
10 RETURN_VALUE						      	  return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( 	return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( 
							      								    								  
4 >> 12 LOAD_FAST 1 ( n )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 32					      								    								  
20 LOAD_FAST 2 ( sum )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 3 ( != )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 3 ( False )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 0 ( set )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_CONST 4 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 2 ( sum )					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_GLOBAL 0 ( isSubsetSum )			      								    								  
50 LOAD_FAST 0 ( set )					      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 4 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 2 ( sum )					      								    								  
60 CALL_FUNCTION 3					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
8 >> 64 LOAD_GLOBAL 0 ( isSubsetSum )			      								    								  
66 LOAD_FAST 0 ( set )					      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 LOAD_CONST 4 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 2 ( sum )					      								    								  
76 CALL_FUNCTION 3					      								    								  
78 JUMP_IF_TRUE_OR_POP 106				      								    								  
80 LOAD_GLOBAL 0 ( isSubsetSum )			      								    								  
82 LOAD_FAST 0 ( set )					      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 LOAD_CONST 4 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 2 ( sum )					      								    								  
92 LOAD_FAST 0 ( set )					      								    								  
94 LOAD_FAST 1 ( n )					      								    								  
96 LOAD_CONST 4 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 3					      								    								  
>> 106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1
--							      --							    --								  --
Disassembly of <code object maxSumPairWithDifferenceLessThanK def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :	    def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :	  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxSum = 0 ;						    	maxSum = 0						  
2 STORE_FAST 3 ( maxSum )				      	  arr.sort ( ) ;					    	arr.sort ( )						  
							      	  i = N - 1 ;						    	i = N - 1						  
3 4 LOAD_FAST 0 ( arr )					      	  while ( i >= 0 ) :					    	while i >= 0 :						  
6 LOAD_METHOD 0 ( sort )				      	      if ( arr [ i ] - arr [ i - 1 ] < k ) :		    	    if arr [ i ] - arr [ i - 1 ] < k :			  
8 CALL_METHOD 0						      		  maxSum += arr [ i ] ;				    		maxSum += arr [ i ]				  
10 POP_TOP						      		  maxSum += arr [ i - 1 ] ;			    		maxSum += arr [ i - 1 ]				  
							      		  i -= 1 ;					    		i -= 1						  
4 12 LOAD_FAST 1 ( N )					      	      i -= 1 ;						    	    i -= 1						  
14 LOAD_CONST 2 ( 1 )					      	  return maxSum ;					    	return maxSum						  
16 BINARY_SUBTRACT					      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 20 SETUP_LOOP 80 ( to 102 )				      								    								  
>> 22 LOAD_FAST 4 ( i )					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 5 ( >= )					      								    								  
28 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
7 54 LOAD_FAST 3 ( maxSum )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 3 ( maxSum )				      								    								  
							      								    								  
8 66 LOAD_FAST 3 ( maxSum )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 3 ( maxSum )				      								    								  
							      								    								  
9 82 LOAD_FAST 4 ( i )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 INPLACE_SUBTRACT					      								    								  
88 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 >> 90 LOAD_FAST 4 ( i )				      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_SUBTRACT					      								    								  
96 STORE_FAST 4 ( i )					      								    								  
98 JUMP_ABSOLUTE 22					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_FAST 3 ( maxSum )			      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			      REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			    REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			  REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S
--							      --							    --								  --
Disassembly of <code object replace at 0x7f33e2649a50, file " def replace ( s , c1 , c2 ) :				    def replace ( s , c1 , c2 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s )						    	l = len ( s )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( s )					      	  for i in range ( l ) :				    	for i in range ( l ) :					  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/REPLA
4 CALL_FUNCTION 1					      	      if ( s [ i ] == c1 ) :				    	    if s [ i ] == c1 :					  CE_CHARACTER_C1_C2_C2_C1_STRING_S.py", line 52, in
6 STORE_FAST 3 ( l )					      		  s = s [ 0 : i ] + c2 + s [ i + 1 : ]		    		s = s [ 0 : i ] + c2 + s [ i + 1 : ]		   <module>	if f_filled(*parameters_set) == f_go
							      	      elif ( s [ i ] == c2 ) :				    	    elif s [ i ] == c2 :				  ld(*parameters_set):	 File "/home/ubuntu/TransCod
3 8 SETUP_LOOP 106 ( to 116 )				      		  s = s [ 0 : i ] + c1 + s [ i + 1 : ]		    		s = s [ 0 : i ] + c1 [ s + i + 1 : ]		  er/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/
10 LOAD_GLOBAL 1 ( range )				      	  return s						    	return s						  dis_sa-python_sa.valid/REPLACE_CHARACTER_C1_C2_C2_
12 LOAD_FAST 3 ( l )					      								    								  C1_STRING_S.py", line 33, in f_filled	    s = s [
14 CALL_FUNCTION 1					      								    								  0 : i ] + c1 [ s + i + 1 : ] TypeError: must be st
16 GET_ITER						      								    								  r, not int
>> 18 FOR_ITER 94 ( to 114 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 1 ( c1 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( s )					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BUILD_SLICE 2					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( c2 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 0 ( s )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 BUILD_SLICE 2					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 0 ( s )					      								    								  
66 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
6 >> 68 LOAD_FAST 0 ( s )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 2 ( c2 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
7 80 LOAD_FAST 0 ( s )					      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BUILD_SLICE 2					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 1 ( c1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 0 ( s )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_CONST 0 ( None )				      								    								  
104 BUILD_SLICE 2					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 0 ( s )					      								    								  
112 JUMP_ABSOLUTE 18					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
8 >> 116 LOAD_FAST 0 ( s )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER_1				      SQUARE_ROOT_OF_AN_INTEGER_1				    SQUARE_ROOT_OF_AN_INTEGER_1					  SQUARE_ROOT_OF_AN_INTEGER_1
--							      --							    --								  --
Disassembly of <code object floorSqrt at 0x7f33e2649a50, file def floorSqrt ( x ) :					    def floorSqrt ( x ) :					  success : None
2 0 LOAD_FAST 0 ( x )					      	  if ( x == 0 or x == 1 ) :				    	if x == 0 or x == 1 :					  
2 LOAD_CONST 1 ( 0 )					      	      return x						    	    return x						  
4 COMPARE_OP 2 ( == )					      	  start = 1						    	start = 1						  
6 POP_JUMP_IF_TRUE 16					      	  end = x						    	end = x							  
8 LOAD_FAST 0 ( x )					      	  while ( start <= end ) :				    	while start <= end :					  
10 LOAD_CONST 2 ( 1 )					      	      mid = ( start + end ) // 2			    	    mid = ( start + end ) // 2				  
12 COMPARE_OP 2 ( == )					      	      if ( mid * mid == x ) :				    	    if mid * mid == x :					  
14 POP_JUMP_IF_FALSE 20					      		  return mid					    		return mid					  
							      	      if ( mid * mid < x ) :				    	    if mid * mid < x :					  
3 >> 16 LOAD_FAST 0 ( x )				      		  start = mid + 1				    		start = mid + 1					  
18 RETURN_VALUE						      		  ans = mid					    		ans = mid					  
							      	      else :						    	    else :						  
4 >> 20 LOAD_CONST 2 ( 1 )				      		  end = mid - 1					    		end = mid - 1					  
22 STORE_FAST 1 ( start )				      	  return ans						    	return ans						  
							      								    								  
5 24 LOAD_FAST 0 ( x )					      								    								  
26 STORE_FAST 2 ( end )					      								    								  
							      								    								  
6 28 SETUP_LOOP 74 ( to 104 )				      								    								  
>> 30 LOAD_FAST 1 ( start )				      								    								  
32 LOAD_FAST 2 ( end )					      								    								  
34 COMPARE_OP 1 ( <= )					      								    								  
36 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( start )				      								    								  
40 LOAD_FAST 2 ( end )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_CONST 3 ( 2 )					      								    								  
46 BINARY_FLOOR_DIVIDE					      								    								  
48 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( mid )				      								    								  
52 LOAD_FAST 3 ( mid )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_FAST 0 ( x )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
9 62 LOAD_FAST 3 ( mid )				      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
10 >> 66 LOAD_FAST 3 ( mid )				      								    								  
68 LOAD_FAST 3 ( mid )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 LOAD_FAST 0 ( x )					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
11 78 LOAD_FAST 3 ( mid )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 1 ( start )				      								    								  
							      								    								  
12 86 LOAD_FAST 3 ( mid )				      								    								  
88 STORE_FAST 4 ( ans )					      								    								  
90 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
14 >> 92 LOAD_FAST 3 ( mid )				      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 2 ( end )					      								    								  
100 JUMP_ABSOLUTE 30					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
15 >> 104 LOAD_FAST 4 ( ans )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	      CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	    CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	  CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING
--							      --							    --								  --
Disassembly of <code object calcMaxValue at 0x7f33e2644930, f def calcMaxValue ( str ) :				    def calcMaxValue ( str ) :					  success : None
2 0 LOAD_GLOBAL 0 ( ord )				      	  res = ord ( str [ 0 ] ) - 48				    	res = ord ( str [ 0 ] ) - 48				  
2 LOAD_FAST 0 ( str )					      	  for i in range ( 1 , len ( str ) ) :			    	for i in range ( 1 , len ( str ) ) :			  
4 LOAD_CONST 1 ( 0 )					      	      if ( str [ i ] == '0' or str [ i ] == '1' or res < 2  	    if str [ i ] == '0' or str [ i ] == '1' or res < 2 :  
6 BINARY_SUBSCR						      		  res += ord ( str [ i ] ) - 48			    		res += ord ( str [ i ] ) - 48			  
8 CALL_FUNCTION 1					      	      else :						    	    else :						  
10 LOAD_CONST 2 ( 48 )					      		  res *= ord ( str [ i ] ) - 48			    		res *= ord ( str [ i ] ) - 48			  
12 BINARY_SUBTRACT					      	  return res						    	return res						  
14 STORE_FAST 1 ( res )					      								    								  
							      								    								  
3 16 SETUP_LOOP 96 ( to 114 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 LOAD_GLOBAL 2 ( len )				      								    								  
24 LOAD_FAST 0 ( str )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 78 ( to 112 )				      								    								  
34 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 36 LOAD_FAST 0 ( str )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 4 ( '0' )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_TRUE 68					      								    								  
48 LOAD_FAST 0 ( str )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 5 ( '1' )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_TRUE 68					      								    								  
60 LOAD_FAST 1 ( res )					      								    								  
62 LOAD_CONST 6 ( 2 )					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
5 >> 68 LOAD_FAST 1 ( res )				      								    								  
70 LOAD_GLOBAL 0 ( ord )				      								    								  
72 LOAD_FAST 0 ( str )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 LOAD_CONST 2 ( 48 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 1 ( res )					      								    								  
88 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
7 >> 90 LOAD_FAST 1 ( res )				      								    								  
92 LOAD_GLOBAL 0 ( ord )				      								    								  
94 LOAD_FAST 0 ( str )					      								    								  
96 LOAD_FAST 2 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 LOAD_CONST 2 ( 48 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 INPLACE_MULTIPLY					      								    								  
108 STORE_FAST 1 ( res )				      								    								  
110 JUMP_ABSOLUTE 32					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
8 >> 114 LOAD_FAST 1 ( res )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP
--							      --							    --								  --
Disassembly of <code object isHeap at 0x7f33e26494b0, file "< def isHeap ( arr , i , n ) :				    def isHeap ( arr , i , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( i )					      	  if i > int ( ( n - 2 ) / 2 ) :			    	if i > int ( n - 2 / 2 ) :				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_GLOBAL 0 ( int )					      	      return True					    	    return True						  _sa.valid/HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS
4 LOAD_FAST 2 ( n )					      	  if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr  	if arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr [  _A_BINARY_HEAP.py", line 28	  if arr [ i ] >= ar
6 LOAD_CONST 1 ( 2 )					      	      return True					    	    return True						  r [ 2 * i + 1 ] and arr [ i ] >= arr [ 2 * i + 2 ]
8 BINARY_SUBTRACT					      	  return False						    	return False						   and f_filled ( arr [ 2 * i + 1 , n ) and f_filled
10 LOAD_CONST 1 ( 2 )					      								    								   ( arr [ 2 * i + 2 , n ) :
12 BINARY_TRUE_DIVIDE					      								    								  
14 CALL_FUNCTION 1					      								    								  				     ^ SyntaxError:
16 COMPARE_OP 4 ( > )					      								    								  invalid syntax
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
3 20 LOAD_CONST 2 ( True )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_CONST 1 ( 2 )					      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 5 ( >= )					      								    								  
46 POP_JUMP_IF_FALSE 116				      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 1 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_CONST 1 ( 2 )					      								    								  
58 LOAD_FAST 1 ( i )					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 LOAD_CONST 1 ( 2 )					      								    								  
64 BINARY_ADD						      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 5 ( >= )					      								    								  
70 POP_JUMP_IF_FALSE 116				      								    								  
72 LOAD_GLOBAL 1 ( isHeap )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_CONST 1 ( 2 )					      								    								  
78 LOAD_FAST 1 ( i )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( n )					      								    								  
88 CALL_FUNCTION 3					      								    								  
90 POP_JUMP_IF_FALSE 116				      								    								  
92 LOAD_GLOBAL 1 ( isHeap )				      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_CONST 1 ( 2 )					      								    								  
98 LOAD_FAST 1 ( i )					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_CONST 1 ( 2 )					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 2 ( n )					      								    								  
108 CALL_FUNCTION 3					      								    								  
110 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
5 112 LOAD_CONST 2 ( True )				      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
6 >> 116 LOAD_CONST 4 ( False )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE
--							      --							    --								  --
Disassembly of <code object minCoins at 0x7f33e2644930, file  def minCoins ( coins , m , V ) :				    def minCoins ( coins , m , V ) :				  script_not_found : None
2 0 LOAD_FAST 2 ( V )					      	  if ( V == 0 ) :					    	if V == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  res = sys.maxsize					    	res = sys.maxsize					  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 0 , m ) :				    	for i in range ( 0 , m ) :				  
							      	      if ( coins [ i ] <= V ) :				    	    if coins [ i ] <= V :				  
3 8 LOAD_CONST 1 ( 0 )					      		  sub_res = minCoins ( coins , m , V - coins [ i ]  		sub_res = minCoins ( coins , m , V - coins [ i ]  
10 RETURN_VALUE						      		  if ( sub_res != sys.maxsize and sub_res + 1 < res 		if sub_res != sys.maxsize and sub_res + 1 < res : 
							      		      res = sub_res + 1				    		    res = sub_res + 1				  
4 >> 12 LOAD_GLOBAL 0 ( sys )				      	  return res						    	return res						  
14 LOAD_ATTR 1 ( maxsize )				      								    								  
16 STORE_FAST 3 ( res )					      								    								  
							      								    								  
5 18 SETUP_LOOP 80 ( to 100 )				      								    								  
20 LOAD_GLOBAL 2 ( range )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 1 ( m )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 66 ( to 98 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( coins )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( V )					      								    								  
42 COMPARE_OP 1 ( <= )					      								    								  
44 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
7 46 LOAD_GLOBAL 3 ( minCoins )				      								    								  
48 LOAD_FAST 0 ( coins )				      								    								  
50 LOAD_FAST 1 ( m )					      								    								  
52 LOAD_FAST 2 ( V )					      								    								  
54 LOAD_FAST 0 ( coins )				      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 STORE_FAST 5 ( sub_res )				      								    								  
							      								    								  
8 66 LOAD_FAST 5 ( sub_res )				      								    								  
68 LOAD_GLOBAL 0 ( sys )				      								    								  
70 LOAD_ATTR 1 ( maxsize )				      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 30					      								    								  
76 LOAD_FAST 5 ( sub_res )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 3 ( res )					      								    								  
84 COMPARE_OP 0 ( < )					      								    								  
86 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
9 88 LOAD_FAST 5 ( sub_res )				      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 STORE_FAST 3 ( res )					      								    								  
96 JUMP_ABSOLUTE 30					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
10 >> 100 LOAD_FAST 3 ( res )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		      UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		    UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		  UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1
--							      --							    --								  --
Disassembly of <code object printIntersection at 0x7f33e2649a def printIntersection ( arr1 , arr2 , m , n ) :		    def printIntersection ( arr1 , arr2 , m , n ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				      	  i , j = 0 , 0						    	i , j = 0 , 0						  
2 UNPACK_SEQUENCE 2					      	  while i < m and j < n :				    	while i < m and j < n :					  
4 STORE_FAST 4 ( i )					      	      if arr1 [ i ] < arr2 [ j ] :			    	    if arr1 [ i ] < arr2 [ j ] :			  
6 STORE_FAST 5 ( j )					      		  i += 1					    		i += 1						  
							      	      elif arr2 [ j ] < arr1 [ i ] :			    	    elif arr2 [ j ] < arr1 [ i ] :			  
3 8 SETUP_LOOP 100 ( to 110 )				      		  j += 1					    		j += 1						  
>> 10 LOAD_FAST 4 ( i )					      	      else :						    	    else :						  
12 LOAD_FAST 2 ( m )					      		  print ( arr2 [ j ] )				    		print ( arr2 [ j ] )				  
14 COMPARE_OP 0 ( < )					      		  j += 1					    		j += 1						  
16 POP_JUMP_IF_FALSE 108				      		  i += 1					    		i += 1						  
18 LOAD_FAST 5 ( j )					      								    								  
20 LOAD_FAST 3 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( arr1 )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( arr2 )					      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( i )					      								    								  
50 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
6 >> 52 LOAD_FAST 1 ( arr2 )				      								    								  
54 LOAD_FAST 5 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr1 )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
7 68 LOAD_FAST 5 ( j )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 5 ( j )					      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
9 >> 78 LOAD_GLOBAL 0 ( print )				      								    								  
80 LOAD_FAST 1 ( arr2 )					      								    								  
82 LOAD_FAST 5 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 POP_TOP						      								    								  
							      								    								  
10 90 LOAD_FAST 5 ( j )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 98 LOAD_FAST 4 ( i )					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 4 ( i )					      								    								  
106 JUMP_ABSOLUTE 10					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> CATIVE_INVERSE_UNDER_MODULO_M_1			      <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			    <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			  <unk> CATIVE_INVERSE_UNDER_MODULO_M_1
--							      --							    --								  --
Disassembly of <code object modInverse at 0x7f33e26494b0, fil def modInverse ( a , m ) :				    def modInverse ( a , m ) :					  script_not_found : None
2 0 LOAD_FAST 1 ( m )					      	  m0 = m						    	m0 = m							  
2 STORE_FAST 2 ( m0 )					      	  y = 0							    	y = 0							  
							      	  x = 1							    	x = 1							  
3 4 LOAD_CONST 1 ( 0 )					      	  if ( m == 1 ) :					    	if m == 1 :						  
6 STORE_FAST 3 ( y )					      	      return 0						    	    return 0						  
							      	  while ( a > 1 ) :					    	while a > 1 :						  
4 8 LOAD_CONST 2 ( 1 )					      	      q = a // m					    	    q = a // m						  
10 STORE_FAST 4 ( x )					      	      t = m						    	    t = m						  
							      	      m = a % m						    	    m = a % m						  
5 12 LOAD_FAST 1 ( m )					      	      a = t						    	    a = t						  
14 LOAD_CONST 2 ( 1 )					      	      t = y						    	    y = x						  
16 COMPARE_OP 2 ( == )					      	      y = x - q * y					    	    x = y						  
18 POP_JUMP_IF_FALSE 24					      	      x = t						    	    y = x - q * y					  
							      	  if ( x < 0 ) :					    	    x = t						  
6 20 LOAD_CONST 1 ( 0 )					      	      x = x + m0					    	if x < 0 :						  
22 RETURN_VALUE						      	  return x						    	    x = x + m0						  
							      								    	return x						  
7 >> 24 SETUP_LOOP 56 ( to 82 )				      								    								  
>> 26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 COMPARE_OP 4 ( > )					      								    								  
32 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 34 LOAD_FAST 0 ( a )					      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 BINARY_FLOOR_DIVIDE					      								    								  
40 STORE_FAST 5 ( q )					      								    								  
							      								    								  
9 42 LOAD_FAST 1 ( m )					      								    								  
44 STORE_FAST 6 ( t )					      								    								  
							      								    								  
10 46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 1 ( m )					      								    								  
50 BINARY_MODULO					      								    								  
52 STORE_FAST 1 ( m )					      								    								  
							      								    								  
11 54 LOAD_FAST 6 ( t )					      								    								  
56 STORE_FAST 0 ( a )					      								    								  
							      								    								  
12 58 LOAD_FAST 3 ( y )					      								    								  
60 STORE_FAST 6 ( t )					      								    								  
							      								    								  
13 62 LOAD_FAST 4 ( x )					      								    								  
64 LOAD_FAST 5 ( q )					      								    								  
66 LOAD_FAST 3 ( y )					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 STORE_FAST 3 ( y )					      								    								  
							      								    								  
14 74 LOAD_FAST 6 ( t )					      								    								  
76 STORE_FAST 4 ( x )					      								    								  
78 JUMP_ABSOLUTE 26					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
15 >> 82 LOAD_FAST 4 ( x )				      								    								  
84 LOAD_CONST 1 ( 0 )					      								    								  
86 COMPARE_OP 0 ( < )					      								    								  
88 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
16 90 LOAD_FAST 4 ( x )					      								    								  
92 LOAD_FAST 2 ( m0 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 4 ( x )					      								    								  
							      								    								  
17 >> 98 LOAD_FAST 4 ( x )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES			  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES
--							      --							    --								  --
Disassembly of <code object fib at 0x7f33e2653f60, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = 0							    	a = 0							  
2 STORE_FAST 1 ( a )					      	  b = 1							    	b = 1							  
							      	  if ( n >= 0 ) :					    	if n >= 0 :						  
3 4 LOAD_CONST 2 ( 1 )					      	      print ( a , end = ' ' )				    	    print ( a , end = " " )				  
6 STORE_FAST 2 ( b )					      	  if ( n >= 1 ) :					    	if n >= 1 :						  
							      	      print ( b , end = ' ' )				    	    print ( b , end = " " )				  
4 8 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
10 LOAD_CONST 1 ( 0 )					      	      c = a + b						    	    c = a + b						  
12 COMPARE_OP 5 ( >= )					      	      print ( c , end = ' ' )				    	    print ( c , end = " " )				  
14 POP_JUMP_IF_FALSE 28					      	      a = b						    	    a = b						  
							      	      b = c						    	    b = c						  
5 16 LOAD_GLOBAL 0 ( print )				      								    								  
18 LOAD_FAST 1 ( a )					      								    								  
20 LOAD_CONST 3 ( ' ' )					      								    								  
22 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
24 CALL_FUNCTION_KW 2					      								    								  
26 POP_TOP						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( n )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 5 ( >= )					      								    								  
34 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 2 ( b )					      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 >> 48 SETUP_LOOP 50 ( to 100 )			      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 5 ( 2 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 32 ( to 98 )				      								    								  
66 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 68 LOAD_FAST 1 ( a )					      								    								  
70 LOAD_FAST 2 ( b )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 4 ( c )					      								    								  
							      								    								  
10 76 LOAD_GLOBAL 0 ( print )				      								    								  
78 LOAD_FAST 4 ( c )					      								    								  
80 LOAD_CONST 3 ( ' ' )					      								    								  
82 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( b )					      								    								  
90 STORE_FAST 1 ( a )					      								    								  
							      								    								  
12 92 LOAD_FAST 4 ( c )					      								    								  
94 STORE_FAST 2 ( b )					      								    								  
96 JUMP_ABSOLUTE 64					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		      FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		    FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY			  FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object find3largest at 0x7f33e2649a50, f def find3largest ( arr , n ) :				    def find3largest ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sorted )				      	  arr = sorted ( arr )					    	arr = sorted ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  check = 0						    	check = 0						  
4 CALL_FUNCTION 1					      	  count = 1						    	count = 1						  
6 STORE_FAST 0 ( arr )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
							      	      if ( count < 4 ) :				    	    if count < 4 :					  
3 8 LOAD_CONST 1 ( 0 )					      		  if ( check != arr [ n - i ] ) :		    		if check != arr [ n - i ] :			  
10 STORE_FAST 2 ( check )				      		      print ( arr [ n - i ] , end = " " )	    		    print ( arr [ n - i ] , end = ' ' )		  
							      		      check = arr [ n - i ]			    		    check = arr [ n - i ]			  
4 12 LOAD_CONST 2 ( 1 )					      		      count += 1				    		    count += 1					  
14 STORE_FAST 3 ( count )				      	      else :						    								  
							      		  break						    								  
5 16 SETUP_LOOP 90 ( to 108 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 72 ( to 106 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( count )				      								    								  
38 LOAD_CONST 3 ( 4 )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( check )				      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 3 ( != )					      								    								  
58 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
8 60 LOAD_GLOBAL 2 ( print )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 1 ( n )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 4 ( ' ' )					      								    								  
74 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
76 CALL_FUNCTION_KW 2					      								    								  
78 POP_TOP						      								    								  
							      								    								  
9 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 STORE_FAST 2 ( check )				      								    								  
							      								    								  
10 92 LOAD_FAST 3 ( count )				      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 3 ( count )				      								    								  
100 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
12 >> 102 BREAK_LOOP					      								    								  
>> 104 JUMP_ABSOLUTE 32					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPOSITE_NUMBER					      COMPOSITE_NUMBER						    COMPOSITE_NUMBER						  COMPOSITE_NUMBER
--							      --							    --								  --
Disassembly of <code object isComposite at 0x7f33e26494b0, fi def isComposite ( n ) :					    def isComposite ( n ) :					  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return False					    	    return False					  
4 COMPARE_OP 1 ( <= )					      	  if ( n <= 3 ) :					    	if n <= 3 :						  
6 POP_JUMP_IF_FALSE 12					      	      return False					    	    return False					  
							      	  if ( n % 2 == 0 or n % 3 == 0 ) :			    	if n % 2 == 0 or n % 3 == 0 :				  
3 8 LOAD_CONST 2 ( False )				      	      return True					    	    return True						  
10 RETURN_VALUE						      	  i = 5							    	i = 5							  
							      	  while ( i * i <= n ) :				    	while i * i <= n :					  
4 >> 12 LOAD_FAST 0 ( n )				      	      if ( n % i == 0 or n % ( i + 2 ) == 0 ) :		    	    if n % i == 0 or n % ( i + 2 ) == 0 :		  
14 LOAD_CONST 3 ( 3 )					      		  return True					    		return True					  
16 COMPARE_OP 1 ( <= )					      	      i = i + 6						    	    i = i + 6						  
18 POP_JUMP_IF_FALSE 24					      	  return False						    	return False						  
							      								    								  
5 20 LOAD_CONST 2 ( False )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_CONST 4 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 5 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_TRUE 48					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 3 ( 3 )					      								    								  
40 BINARY_MODULO					      								    								  
42 LOAD_CONST 5 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 >> 48 LOAD_CONST 6 ( True )				      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_CONST 7 ( 5 )				      								    								  
54 STORE_FAST 1 ( i )					      								    								  
							      								    								  
9 56 SETUP_LOOP 56 ( to 114 )				      								    								  
>> 58 LOAD_FAST 1 ( i )					      								    								  
60 LOAD_FAST 1 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 COMPARE_OP 1 ( <= )					      								    								  
68 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 70 LOAD_FAST 0 ( n )					      								    								  
72 LOAD_FAST 1 ( i )					      								    								  
74 BINARY_MODULO					      								    								  
76 LOAD_CONST 5 ( 0 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_TRUE 98					      								    								  
82 LOAD_FAST 0 ( n )					      								    								  
84 LOAD_FAST 1 ( i )					      								    								  
86 LOAD_CONST 4 ( 2 )					      								    								  
88 BINARY_ADD						      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 5 ( 0 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
11 >> 98 LOAD_CONST 6 ( True )				      								    								  
100 RETURN_VALUE					      								    								  
							      								    								  
12 >> 102 LOAD_FAST 1 ( i )				      								    								  
104 LOAD_CONST 8 ( 6 )					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 1 ( i )					      								    								  
110 JUMP_ABSOLUTE 58					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
13 >> 114 LOAD_CONST 2 ( False )			      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SUM_COSX_SERIES					      PROGRAM_SUM_COSX_SERIES					    PROGRAM_SUM_COSX_SERIES					  PROGRAM_SUM_COSX_SERIES
--							      --							    --								  --
Disassembly of <code object cosXSertiesSum at 0x7f33e2653ed0, def cosXSertiesSum ( x , n ) :				    def cosXSertiesSum ( x = ( 20 * 20 ) ** 2 ) :		  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  x = x * ( PI / 180.0 ) ;				    	x = x * PI / 180.0					  
2 LOAD_GLOBAL 0 ( PI )					      	  res = 1 ;						    	res = 1							  
4 LOAD_CONST 1 ( 180.0 )				      	  sign = 1 ;						    	sign = 1						  
6 BINARY_TRUE_DIVIDE					      	  fact = 1 ;						    	fact = 1						  
8 BINARY_MULTIPLY					      	  pow = 1 ;						    	pow = 1							  
10 STORE_FAST 0 ( x )					      	  for i in range ( 1 , 5 ) :				    	for i in range ( 1 , 5 ) :				  
							      	      sign = sign * - 1 ;				    	    sign = sign * - 1					  
3 12 LOAD_CONST 2 ( 1 )					      	      fact = fact * ( 2 * i - 1 ) * ( 2 * i ) ;		    	    fact = fact * ( 2 * i - 1 ) * ( 2 * i )		  
14 STORE_FAST 2 ( res )					      	      pow = pow * x * x ;				    	    pow = pow * x * x					  
							      	      res = res + sign * pow / fact ;			    	    res = res + sign * pow / fact			  
4 16 LOAD_CONST 2 ( 1 )					      	  return res ;						    	return res						  
18 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 STORE_FAST 4 ( fact )				      								    								  
							      								    								  
6 24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 5 ( pow )					      								    								  
							      								    								  
7 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 LOAD_CONST 3 ( 5 )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 64 ( to 106 )				      								    								  
42 STORE_FAST 6 ( i )					      								    								  
							      								    								  
8 44 LOAD_FAST 3 ( sign )				      								    								  
46 LOAD_CONST 4 ( - 1 )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
9 52 LOAD_FAST 4 ( fact )				      								    								  
54 LOAD_CONST 5 ( 2 )					      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_CONST 5 ( 2 )					      								    								  
68 LOAD_FAST 6 ( i )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 STORE_FAST 4 ( fact )				      								    								  
							      								    								  
10 76 LOAD_FAST 5 ( pow )				      								    								  
78 LOAD_FAST 0 ( x )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_FAST 0 ( x )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 STORE_FAST 5 ( pow )					      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( res )				      								    								  
90 LOAD_FAST 3 ( sign )					      								    								  
92 LOAD_FAST 5 ( pow )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 LOAD_FAST 4 ( fact )					      								    								  
98 BINARY_TRUE_DIVIDE					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_FAST 2 ( res )				      								    								  
104 JUMP_ABSOLUTE 40					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
12 >> 108 LOAD_FAST 2 ( res )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	      DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	    DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION		  DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION
--							      --							    --								  --
Disassembly of <code object MatrixChainOrder at 0x7f33e26494b def MatrixChainOrder ( p , i , j ) :			    def MatrixChainOrder ( p , i , j ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( i )					      	  if i == j :						    	if i == j :						  
2 LOAD_FAST 2 ( j )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  _min = sys.maxsize					    	_min = sys.maxsize					  
6 POP_JUMP_IF_FALSE 12					      	  for k in range ( i , j ) :				    	for k in range ( i , j ) :				  
							      	      count = ( MatrixChainOrder ( p , i , k ) + MatrixChai 	    count = MatrixChainOrder ( p , i , k ) + MatrixChainO 
3 8 LOAD_CONST 1 ( 0 )					      	      if count < _min :					    	    if count < _min :					  
10 RETURN_VALUE						      		  _min = count ;				    		_min = count					  
							      	  return _min ;						    	return _min						  
4 >> 12 LOAD_GLOBAL 0 ( sys )				      								    								  
14 LOAD_ATTR 1 ( maxsize )				      								    								  
16 STORE_FAST 3 ( _min )				      								    								  
							      								    								  
5 18 SETUP_LOOP 86 ( to 106 )				      								    								  
20 LOAD_GLOBAL 2 ( range )				      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 LOAD_FAST 2 ( j )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 72 ( to 104 )				      								    								  
32 STORE_FAST 4 ( k )					      								    								  
							      								    								  
6 34 LOAD_GLOBAL 3 ( MatrixChainOrder )			      								    								  
36 LOAD_FAST 0 ( p )					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 LOAD_FAST 4 ( k )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 LOAD_GLOBAL 3 ( MatrixChainOrder )			      								    								  
46 LOAD_FAST 0 ( p )					      								    								  
48 LOAD_FAST 4 ( k )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( j )					      								    								  
56 CALL_FUNCTION 3					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_FAST 0 ( p )					      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( p )					      								    								  
72 LOAD_FAST 4 ( k )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_FAST 0 ( p )					      								    								  
80 LOAD_FAST 2 ( j )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 BINARY_ADD						      								    								  
88 STORE_FAST 5 ( count )				      								    								  
							      								    								  
7 90 LOAD_FAST 5 ( count )				      								    								  
92 LOAD_FAST 3 ( _min )					      								    								  
94 COMPARE_OP 0 ( < )					      								    								  
96 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
8 98 LOAD_FAST 5 ( count )				      								    								  
100 STORE_FAST 3 ( _min )				      								    								  
102 JUMP_ABSOLUTE 30					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
9 >> 106 LOAD_FAST 3 ( _min )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			      FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			    FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			  FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX
--							      --							    --								  --
Disassembly of <code object freq at 0x7f33e2649a50, file "<di def freq ( ar , m , n ) :					    def freq ( ar , m , n ) :					  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  even = 0						    	even = 0						  
2 STORE_FAST 3 ( even )					      	  odd = 0						    	odd = 0							  
							      	  for i in range ( m ) :				    	for i in range ( m ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
6 STORE_FAST 4 ( odd )					      		  if ( ( ar [ i ] [ j ] % 2 ) == 0 ) :		    		if ar [ i ] [ j ] % 2 == 0 :			  
							      		      even += 1					    		    even += 1					  
4 8 SETUP_LOOP 72 ( to 82 )				      		  else :					    		else :						  
10 LOAD_GLOBAL 0 ( range )				      		      odd += 1					    		    odd += 1					  
12 LOAD_FAST 1 ( m )					      	  print ( " Frequency of odd number =" , odd )		    	print ( ' Frequency of odd number =' , odd )		  
14 CALL_FUNCTION 1					      	  print ( " Frequency of even number =" , even )	    	print ( ' Frequency of even number =' , even )		  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 60 ( to 80 )				      								    								  
20 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 22 SETUP_LOOP 54 ( to 78 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 42 ( to 76 )				      								    								  
34 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 36 LOAD_FAST 0 ( ar )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 6 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 2 ( 2 )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
7 56 LOAD_FAST 3 ( even )				      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( even )				      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
9 >> 66 LOAD_FAST 4 ( odd )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 4 ( odd )					      								    								  
74 JUMP_ABSOLUTE 32					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 JUMP_ABSOLUTE 18					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 LOAD_GLOBAL 1 ( print )			      								    								  
84 LOAD_CONST 4 ( ' Frequency of odd number =' )	      								    								  
86 LOAD_FAST 4 ( odd )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 POP_TOP						      								    								  
							      								    								  
11 92 LOAD_GLOBAL 1 ( print )				      								    								  
94 LOAD_CONST 5 ( ' Frequency of even number =' )	      								    								  
96 LOAD_FAST 3 ( even )					      								    								  
98 CALL_FUNCTION 2					      								    								  
100 POP_TOP						      								    								  
102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR
--							      --							    --								  --
Disassembly of <code object findDiff at 0x7f33e26494b0, file  def findDiff ( arr , n ) :				    def findDiff ( arr , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  count = 0 ; max_count = 0 ; min_count = n		    	count = 0						  
4 CALL_METHOD 0						      	  for i in range ( 0 , ( n - 1 ) ) :			    	min_count = 0						  
6 POP_TOP						      	      if arr [ i ] == arr [ i + 1 ] :			    	for i in range ( 0 , n - 1 ) :				  
							      		  count += 1					    	    if arr [ i ] == arr [ i + 1 ] :			  
3 8 LOAD_CONST 1 ( 0 )					      		  continue					    		count += 1					  
10 STORE_FAST 2 ( count )				      	      else :						    		continue					  
12 LOAD_CONST 1 ( 0 )					      		  max_count = max ( max_count , count )		    	else :							  
14 STORE_FAST 3 ( max_count )				      		  min_count = min ( min_count , count )		    	    max_count = max ( max_count , count )		  
16 LOAD_FAST 1 ( n )					      		  count = 0					    	    min_count = min ( min_count , count )		  
18 STORE_FAST 4 ( min_count )				      	  return max_count - min_count				    	    count = 0						  
							      								    return ( max_count - min_count )				  
4 20 SETUP_LOOP 78 ( to 100 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 60 ( to 98 )				      								    								  
38 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 60 LOAD_FAST 2 ( count )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 2 ( count )				      								    								  
							      								    								  
7 68 JUMP_ABSOLUTE 36					      								    								  
70 JUMP_ABSOLUTE 36					      								    								  
							      								    								  
9 >> 72 LOAD_GLOBAL 2 ( max )				      								    								  
74 LOAD_FAST 3 ( max_count )				      								    								  
76 LOAD_FAST 2 ( count )				      								    								  
78 CALL_FUNCTION 2					      								    								  
80 STORE_FAST 3 ( max_count )				      								    								  
							      								    								  
10 82 LOAD_GLOBAL 3 ( min )				      								    								  
84 LOAD_FAST 4 ( min_count )				      								    								  
86 LOAD_FAST 2 ( count )				      								    								  
88 CALL_FUNCTION 2					      								    								  
90 STORE_FAST 4 ( min_count )				      								    								  
							      								    								  
11 92 LOAD_CONST 1 ( 0 )				      								    								  
94 STORE_FAST 2 ( count )				      								    								  
96 JUMP_ABSOLUTE 36					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
12 >> 100 LOAD_FAST 3 ( max_count )			      								    								  
102 LOAD_FAST 4 ( min_count )				      								    								  
104 BINARY_SUBTRACT					      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			      FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			    FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			  FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE
--							      --							    --								  --
Disassembly of <code object findDimen at 0x7f33e2653f60, file def findDimen ( H , A ) :					    def findDimen ( H , A ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( H )					      	  if H * H < 4 * A :					    	if H < H * H < 4 * A :					  
2 LOAD_FAST 0 ( H )					      	      print ( "Not Possible" )				    	    print ( "Not Possible" )				  
4 BINARY_MULTIPLY					      	      return						    	    return						  
6 LOAD_CONST 1 ( 4 )					      	  apb = sqrt ( H * H + 4 * A )				    	super ( H * H + 4 * A )					  
8 LOAD_FAST 1 ( A )					      	  asb = sqrt ( H * H - 4 * A )				    	asb = sqrt ( H * H - 4 * A )				  
10 BINARY_MULTIPLY					      	  print ( "P = " , "%.2f" % ( ( apb - asb ) / 2.0 ) )	    	print ( "P = " + "%.2f" % ( get ( a - asb ) / 2.0 ) )	  
12 COMPARE_OP 0 ( < )					      	  print ( "B = " , "%.2f" % ( ( apb + asb ) / 2.0 ) )	    	print ( "B = " + "%.2f" % ( LOAD_METHOD 0 ( H ) / 2.0 ) ) 
14 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 16 LOAD_GLOBAL 0 ( print )				      								    								  
18 LOAD_CONST 2 ( 'Not Possible' )			      								    								  
20 CALL_FUNCTION 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
4 24 LOAD_CONST 0 ( None )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
5 >> 28 LOAD_GLOBAL 1 ( sqrt )				      								    								  
30 LOAD_FAST 0 ( H )					      								    								  
32 LOAD_FAST 0 ( H )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_CONST 1 ( 4 )					      								    								  
38 LOAD_FAST 1 ( A )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 2 ( apb )					      								    								  
							      								    								  
6 48 LOAD_GLOBAL 1 ( sqrt )				      								    								  
50 LOAD_FAST 0 ( H )					      								    								  
52 LOAD_FAST 0 ( H )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_CONST 1 ( 4 )					      								    								  
58 LOAD_FAST 1 ( A )					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 STORE_FAST 3 ( asb )					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 0 ( print )				      								    								  
70 LOAD_CONST 3 ( 'P = ' )				      								    								  
72 LOAD_CONST 4 ( '%.2f' )				      								    								  
74 LOAD_FAST 2 ( apb )					      								    								  
76 LOAD_FAST 3 ( asb )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 5 ( 2.0 )					      								    								  
82 BINARY_TRUE_DIVIDE					      								    								  
84 BINARY_MODULO					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 POP_TOP						      								    								  
							      								    								  
8 90 LOAD_GLOBAL 0 ( print )				      								    								  
92 LOAD_CONST 6 ( 'B = ' )				      								    								  
94 LOAD_CONST 4 ( '%.2f' )				      								    								  
96 LOAD_FAST 2 ( apb )					      								    								  
98 LOAD_FAST 3 ( asb )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_CONST 5 ( 2.0 )				      								    								  
104 BINARY_TRUE_DIVIDE					      								    								  
106 BINARY_MODULO					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 POP_TOP						      								    								  
112 LOAD_CONST 0 ( None )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			      KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			    KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			  KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT
--							      --							    --								  --
Disassembly of <code object printkthnode at 0x7f33e2644f60, f def printkthnode ( adj , wt , n , k ) :			    def printkthnode ( adj , n , n , k ) :			  script_not_found : None
2 0 SETUP_LOOP 28 ( to 30 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      adj [ i ].sort ( )				    	    adj [ i ].sort ( )					  
4 LOAD_FAST 2 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 CALL_FUNCTION 1					      	      if ( len ( adj [ i ] ) >= k ) :			    	    if len ( adj [ i ] ) >= k :				  
8 GET_ITER						      		  print ( adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] 		print ( adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] 
>> 10 FOR_ITER 16 ( to 28 )				      	      else :						    	    else :						  
12 STORE_FAST 4 ( i )					      		  print ( "-1" , end = " " )			    		print ( "-1" , end = " " )			  
							      								    								  
3 14 LOAD_FAST 0 ( adj )				      								    								  
16 LOAD_FAST 4 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_METHOD 1 ( sort )				      								    								  
22 CALL_METHOD 0					      								    								  
24 POP_TOP						      								    								  
26 JUMP_ABSOLUTE 10					      								    								  
>> 28 POP_BLOCK						      								    								  
							      								    								  
4 >> 30 SETUP_LOOP 82 ( to 114 )			      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 70 ( to 112 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 2 ( len )				      								    								  
46 LOAD_FAST 0 ( adj )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 LOAD_FAST 3 ( k )					      								    								  
56 COMPARE_OP 5 ( >= )					      								    								  
58 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 3 ( print )				      								    								  
62 LOAD_FAST 0 ( adj )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_GLOBAL 2 ( len )				      								    								  
70 LOAD_FAST 0 ( adj )					      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_FAST 3 ( k )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 1 ( 1 )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( ' ' )					      								    								  
90 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
92 CALL_FUNCTION_KW 2					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 40					      								    								  
							      								    								  
8 >> 98 LOAD_GLOBAL 3 ( print )				      								    								  
100 LOAD_CONST 4 ( '-1' )				      								    								  
102 LOAD_CONST 2 ( ' ' )				      								    								  
104 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 40					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SERIES_REVERSE_ORDER			      PRINT_FIBONACCI_SERIES_REVERSE_ORDER			    PRINT_FIBONACCI_SERIES_REVERSE_ORDER			  PRINT_FIBONACCI_SERIES_REVERSE_ORDER
--							      --							    --								  --
Disassembly of <code object reverseFibonacci at 0x7f33e2653ed def reverseFibonacci ( n ) :				    def reverseFibonacci ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * n						    	a = [ 0 ] * n						  
2 BUILD_LIST 1						      	  a [ 0 ] = 0						    	a [ 0 ] = 0						  
4 LOAD_FAST 0 ( n )					      	  a [ 1 ] = 1						    	a [ 1 ] = 1						  
6 BINARY_MULTIPLY					      	  for i in range ( 2 , n ) :				    	for i in range ( 2 , n ) :				  
8 STORE_FAST 1 ( a )					      	      a [ i ] = a [ i - 2 ] + a [ i - 1 ]		    	    a [ i ] = a [ i - 2 ] + a [ i - 1 ]			  
							      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
3 10 LOAD_CONST 1 ( 0 )					      	      print ( a [ i ] , end = " " )			    	    print ( a [ i ] , end = " " )			  
12 LOAD_FAST 1 ( a )					      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 STORE_SUBSCR						      								    								  
							      								    								  
4 18 LOAD_CONST 2 ( 1 )					      								    								  
20 LOAD_FAST 1 ( a )					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 STORE_SUBSCR						      								    								  
							      								    								  
5 26 SETUP_LOOP 46 ( to 74 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_CONST 3 ( 2 )					      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 32 ( to 72 )				      								    								  
40 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 1 ( a )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 LOAD_CONST 3 ( 2 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 1 ( a )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_ADD						      								    								  
64 LOAD_FAST 1 ( a )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 38					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
7 >> 74 SETUP_LOOP 40 ( to 116 )			      								    								  
76 LOAD_GLOBAL 0 ( range )				      								    								  
78 LOAD_FAST 0 ( n )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_CONST 4 ( - 1 )					      								    								  
86 LOAD_CONST 4 ( - 1 )					      								    								  
88 CALL_FUNCTION 3					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 20 ( to 114 )				      								    								  
94 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 96 LOAD_GLOBAL 1 ( print )				      								    								  
98 LOAD_FAST 1 ( a )					      								    								  
100 LOAD_FAST 2 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_CONST 5 ( ' ' )				      								    								  
106 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
108 CALL_FUNCTION_KW 2					      								    								  
110 POP_TOP						      								    								  
112 JUMP_ABSOLUTE 92					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM					      KNAPSACK_PROBLEM						    KNAPSACK_PROBLEM						  KNAPSACK_PROBLEM
--							      --							    --								  --
Disassembly of <code object knapSack at 0x7f33e2649a50, file  def knapSack ( W , wt , val , n ) :			    def knapSack ( W , wt , val , n ) :				  script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if n == 0 or W == 0 :					    	if n == 0 or W == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( wt [ n - 1 ] > W ) :				    	if wt [ n - 1 ] > W :					  
6 POP_JUMP_IF_TRUE 16					      	      return knapSack ( W , wt , val , n - 1 )		    	    return knapSack ( W , wt , val , n - 1 )		  
8 LOAD_FAST 0 ( W )					      	  else :						    	else :							  
10 LOAD_CONST 1 ( 0 )					      	      return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  	    return max ( val [ n - 1 ] , knapSack ( W , wt [ n -  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( wt )				      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( W )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
5 36 LOAD_GLOBAL 0 ( knapSack )				      								    								  
38 LOAD_FAST 0 ( W )					      								    								  
40 LOAD_FAST 1 ( wt )					      								    								  
42 LOAD_FAST 2 ( val )					      								    								  
44 LOAD_FAST 3 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 4					      								    								  
52 RETURN_VALUE						      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( max )				      								    								  
56 LOAD_FAST 2 ( val )					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_GLOBAL 0 ( knapSack )				      								    								  
68 LOAD_FAST 0 ( W )					      								    								  
70 LOAD_FAST 1 ( wt )					      								    								  
72 LOAD_FAST 3 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 1 ( wt )					      								    								  
84 LOAD_FAST 2 ( val )					      								    								  
86 LOAD_FAST 3 ( n )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 CALL_FUNCTION 4					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_GLOBAL 0 ( knapSack )				      								    								  
98 LOAD_FAST 0 ( W )					      								    								  
100 LOAD_FAST 1 ( wt )					      								    								  
102 LOAD_FAST 2 ( val )					      								    								  
104 LOAD_FAST 3 ( n )					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 4					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 RETURN_VALUE					      								    								  
116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1	      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findArea at 0x7f33e2653f60, file  def findArea ( arr , n ) :				    def findArea ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_LIST 0					      	  s = [ ]						    	s = [ ]							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( s )					      	  first = 0						    	first = 0						  _sa.valid/MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDE
							      	  second = 0						    	second = 0						  S_ARRAY_1.py", line 46     return first * second
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					     ^ SyntaxError: 'return' outside function
6 STORE_FAST 3 ( first )				      	      if arr [ i ] not in s :				    	    if arr [ i ] not in s :				  
							      		  s.append ( arr [ i ] )			    		s.append ( arr [ i ] )				  
4 8 LOAD_CONST 1 ( 0 )					      		  continue					    		continue					  
10 STORE_FAST 4 ( second )				      	      if ( arr [ i ] > first ) :			    	    if arr [ i ] > first :				  
							      		  second = first				    		second = first					  
5 12 SETUP_LOOP 90 ( to 104 )				      		  first = arr [ i ]				    		first = arr [ i ]				  
14 LOAD_GLOBAL 0 ( range )				      	      elif ( arr [ i ] > second ) :			    	    elif arr [ i ] > second :				  
16 LOAD_FAST 1 ( n )					      		  second = arr [ i ]				    		second = arr [ i ]				  
18 CALL_FUNCTION 1					      	  return ( first * second )				    return first * second					  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 78 ( to 102 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( arr )				      								    								  
28 LOAD_FAST 5 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 2 ( s )					      								    								  
34 COMPARE_OP 7 ( not in )				      								    								  
36 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 38 LOAD_FAST 2 ( s )					      								    								  
40 LOAD_METHOD 1 ( append )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 5 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 CALL_METHOD 1					      								    								  
50 POP_TOP						      								    								  
							      								    								  
8 52 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
9 >> 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 3 ( first )				      								    								  
62 COMPARE_OP 4 ( > )					      								    								  
64 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 66 LOAD_FAST 3 ( first )				      								    								  
68 STORE_FAST 4 ( second )				      								    								  
							      								    								  
11 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 5 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 3 ( first )				      								    								  
78 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
12 >> 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 5 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 4 ( second )				      								    								  
88 COMPARE_OP 4 ( > )					      								    								  
90 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
13 92 LOAD_FAST 0 ( arr )				      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 STORE_FAST 4 ( second )				      								    								  
100 JUMP_ABSOLUTE 22					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
14 >> 104 LOAD_FAST 3 ( first )				      								    								  
106 LOAD_FAST 4 ( second )				      								    								  
108 BINARY_MULTIPLY					      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		      ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		    ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		  ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE
--							      --							    --								  --
Disassembly of <code object solveQuery at 0x7f33e2644f60, fil def solveQuery ( start , end , arr ) :			    def solveQuery ( start , end , arr ) :			  success : identical to gold
2 0 LOAD_GLOBAL 0 ( dict )				      	  frequency = dict ( )					    	frequency = dict ( )					  
2 CALL_FUNCTION 0					      	  for i in range ( start , end + 1 ) :			    	for i in range ( start , end + 1 ) :			  
4 STORE_FAST 3 ( frequency )				      	      if arr [ i ] in frequency.keys ( ) :		    	    if arr [ i ] in frequency.keys ( ) :		  
							      		  frequency [ arr [ i ] ] += 1			    		frequency [ arr [ i ] ] += 1			  
3 6 SETUP_LOOP 72 ( to 80 )				      	      else :						    	    else :						  
8 LOAD_GLOBAL 1 ( range )				      		  frequency [ arr [ i ] ] = 1			    		frequency [ arr [ i ] ] = 1			  
10 LOAD_FAST 0 ( start )				      	  count = 0						    	count = 0						  
12 LOAD_FAST 1 ( end )					      	  for x in frequency :					    	for x in frequency :					  
14 LOAD_CONST 1 ( 1 )					      	      if x == frequency [ x ] :				    	    if x == frequency [ x ] :				  
16 BINARY_ADD						      		  count += 1					    		count += 1					  
18 CALL_FUNCTION 2					      	  return count						    	return count						  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 54 ( to 78 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( arr )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 3 ( frequency )				      								    								  
34 LOAD_METHOD 2 ( keys )				      								    								  
36 CALL_METHOD 0					      								    								  
38 COMPARE_OP 6 ( in )					      								    								  
40 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 42 LOAD_FAST 3 ( frequency )				      								    								  
44 LOAD_FAST 2 ( arr )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 DUP_TOP_TWO						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 ROT_THREE						      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
7 >> 64 LOAD_CONST 1 ( 1 )				      								    								  
66 LOAD_FAST 3 ( frequency )				      								    								  
68 LOAD_FAST 2 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 22					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
8 >> 80 LOAD_CONST 2 ( 0 )				      								    								  
82 STORE_FAST 5 ( count )				      								    								  
							      								    								  
9 84 SETUP_LOOP 32 ( to 118 )				      								    								  
86 LOAD_FAST 3 ( frequency )				      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 24 ( to 116 )				      								    								  
92 STORE_FAST 6 ( x )					      								    								  
							      								    								  
10 94 LOAD_FAST 6 ( x )					      								    								  
96 LOAD_FAST 3 ( frequency )				      								    								  
98 LOAD_FAST 6 ( x )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
11 106 LOAD_FAST 5 ( count )				      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 5 ( count )				      								    								  
114 JUMP_ABSOLUTE 90					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 5 ( count )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_BONACCI_NUMBERS					      N_BONACCI_NUMBERS						    N_BONACCI_NUMBERS						  N_BONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object bonacciseries at 0x7f33e2644f60,  def bonacciseries ( n , m ) :				    def bonacciseries ( n , m ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * m						    	a = [ 0 ] * m						  
2 BUILD_LIST 1						      	  a [ n - 1 ] = 1					    	a [ n - 1 ] = 1						  
4 LOAD_FAST 1 ( m )					      	  for i in range ( n , m ) :				    	for i in range ( n , m ) :				  
6 BINARY_MULTIPLY					      	      for j in range ( i - n , i ) :			    	    for j in range ( i - n , i ) :			  
8 STORE_FAST 2 ( a )					      		  a [ i ] = a [ i ] + a [ j ]			    		a [ i ] = a [ i ] + a [ j ]			  
							      	  for i in range ( 0 , m ) :				    	for i in range ( 0 , m ) :				  
3 10 LOAD_CONST 2 ( 1 )					      	      print ( a [ i ] , end = " " )			    	    print ( a [ i ] , end = " " )			  
12 LOAD_FAST 2 ( a )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 SETUP_LOOP 62 ( to 86 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_FAST 1 ( m )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 48 ( to 84 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 38 SETUP_LOOP 42 ( to 82 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 24 ( to 80 )				      								    								  
56 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( a )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 2 ( a )					      								    								  
66 LOAD_FAST 4 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_ADD						      								    								  
72 LOAD_FAST 2 ( a )					      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 54					      								    								  
>> 80 POP_BLOCK						      								    								  
>> 82 JUMP_ABSOLUTE 34					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
7 >> 86 SETUP_LOOP 34 ( to 122 )			      								    								  
88 LOAD_GLOBAL 0 ( range )				      								    								  
90 LOAD_CONST 1 ( 0 )					      								    								  
92 LOAD_FAST 1 ( m )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 20 ( to 120 )				      								    								  
100 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 102 LOAD_GLOBAL 1 ( print )				      								    								  
104 LOAD_FAST 2 ( a )					      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 3 ( ' ' )				      								    								  
112 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
114 CALL_FUNCTION_KW 2					      								    								  
116 POP_TOP						      								    								  
118 JUMP_ABSOLUTE 98					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
Disassembly of <code object nobleInteger at 0x7f33e2644f60, f def nobleInteger ( arr ) :				    def nobleInteger ( arr ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  n = len ( arr )					    	n = len ( arr )						  
4 CALL_METHOD 0						      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  
6 POP_TOP						      	      if arr [ i ] == arr [ i + 1 ] :			    	    if arr [ i ] == arr [ i + 1 ] :			  
							      		  continue					    		continue					  
3 8 LOAD_GLOBAL 1 ( len )				      	      if arr [ i ] == n - i - 1 :			    	    if arr [ i ] == n - 1 :				  
10 LOAD_FAST 0 ( arr )					      		  return arr [ i ]				    		return arr [ i ]				  
12 CALL_FUNCTION 1					      	  if arr [ n - 1 ] == 0 :				    	if arr [ n - 1 ] == 0 :					  
14 STORE_FAST 1 ( n )					      	      return arr [ n - 1 ]				    	    return arr [ n - 1 ]				  
							      	  return - 1						    return - 1							  
4 16 SETUP_LOOP 70 ( to 88 )				      								    								  
18 LOAD_GLOBAL 2 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 54 ( to 86 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 54 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
7 >> 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 30					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 2 ( 0 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
10 104 LOAD_FAST 0 ( arr )				      								    								  
106 LOAD_FAST 1 ( n )					      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 BINARY_SUBSCR					      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
11 >> 116 LOAD_CONST 3 ( - 1 )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PATTERNS_101_GIVEN_STRING				      FIND_PATTERNS_101_GIVEN_STRING				    FIND_PATTERNS_101_GIVEN_STRING				  FIND_PATTERNS_101_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object patternCount at 0x7f33e2644f60, f def patternCount ( str ) :				    def patternCount ( str ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( str )					      	  last = str [ 0 ]					    	last = str [ 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  i = 1 ; counter = 0					    	i = 1							  
4 BINARY_SUBSCR						      	  while ( i < len ( str ) ) :				    	while i < len ( str ) :					  
6 STORE_FAST 1 ( last )					      	      if ( str [ i ] == '0' and last == '1' ) :		    	    if str [ i ] == '0' and last == '1' :		  
							      		  while ( str [ i ] == '0' ) :			    		while str [ i ] == '0' :			  
3 8 LOAD_CONST 2 ( 1 )					      		      i += 1					    		    i += 1					  
10 STORE_FAST 2 ( i )					      		      if ( str [ i ] == '1' ) :			    		    if str [ i ] == '1' :			  
12 LOAD_CONST 1 ( 0 )					      			  counter += 1				    			counter += 1				  
14 STORE_FAST 3 ( counter )				      	      last = str [ i ]					    	    last = str [ i ]					  
							      	      i += 1						    	    i += 1						  
4 16 SETUP_LOOP 98 ( to 116 )				      	  return counter					    	return counter						  
>> 18 LOAD_FAST 2 ( i )					      								    								  
20 LOAD_GLOBAL 0 ( len )				      								    								  
22 LOAD_FAST 0 ( str )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( str )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( '0' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 96					      								    								  
42 LOAD_FAST 1 ( last )					      								    								  
44 LOAD_CONST 4 ( '1' )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
6 50 SETUP_LOOP 44 ( to 96 )				      								    								  
>> 52 LOAD_FAST 0 ( str )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 3 ( '0' )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 72 LOAD_FAST 0 ( str )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( '1' )					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
9 84 LOAD_FAST 3 ( counter )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 3 ( counter )				      								    								  
92 JUMP_ABSOLUTE 52					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 0 ( str )				      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 STORE_FAST 1 ( last )				      								    								  
							      								    								  
11 104 LOAD_FAST 2 ( i )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 2 ( i )					      								    								  
112 JUMP_ABSOLUTE 18					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
12 >> 116 LOAD_FAST 3 ( counter )			      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YS_DISTINCT_ELEMENTS				      SUB<unk> YS_DISTINCT_ELEMENTS				    SUB<unk> YS_DISTINCT_ELEMENTS				  SUB<unk> YS_DISTINCT_ELEMENTS
--							      --							    --								  --
Disassembly of <code object sumoflength at 0x7f33e2644930, fi def sumoflength ( arr , n ) :				    def sumoflength ( arr , n ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  s = [ ]						    	s = [ ]							  
2 STORE_FAST 2 ( s )					      	  j = 0							    	j = 0							  
							      	  ans = 0						    	ans = 0							  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 3 ( j )					      	      while ( j < n and ( arr [ j ] not in s ) ) :	    	    while j < n and arr [ j ] not in s :		  
							      		  s.append ( arr [ j ] )			    		s.append ( arr [ j ] )				  
4 8 LOAD_CONST 1 ( 0 )					      		  j += 1					    		j += 1						  
10 STORE_FAST 4 ( ans )					      	      ans += ( ( j - i ) * ( j - i + 1 ) ) // 2		    	    ans += ( j - i ) * ( j - i + 1 ) // 2		  
							      	      s.remove ( arr [ i ] )				    	    s.remove ( arr [ i ] )				  
5 12 SETUP_LOOP 106 ( to 120 )				      	  return ans						    	return ans						  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 94 ( to 118 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 26 SETUP_LOOP 46 ( to 74 )				      								    								  
>> 28 LOAD_FAST 3 ( j )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 72					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 3 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 2 ( s )					      								    								  
44 COMPARE_OP 7 ( not in )				      								    								  
46 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( s )					      								    								  
50 LOAD_METHOD 1 ( append )				      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_METHOD 1					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( j )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( j )					      								    								  
70 JUMP_ABSOLUTE 28					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 4 ( ans )				      								    								  
76 LOAD_FAST 3 ( j )					      								    								  
78 LOAD_FAST 5 ( i )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 3 ( j )					      								    								  
84 LOAD_FAST 5 ( i )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_MULTIPLY					      								    								  
94 LOAD_CONST 3 ( 2 )					      								    								  
96 BINARY_FLOOR_DIVIDE					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 4 ( ans )				      								    								  
							      								    								  
10 102 LOAD_FAST 2 ( s )				      								    								  
104 LOAD_METHOD 2 ( remove )				      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 5 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_METHOD 1					      								    								  
114 POP_TOP						      								    								  
116 JUMP_ABSOLUTE 22					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
11 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_<unk> CATIVE_INVERSE_1_N			      MODULAR_<unk> CATIVE_INVERSE_1_N				    MODULAR_<unk> CATIVE_INVERSE_1_N				  MODULAR_<unk> CATIVE_INVERSE_1_N
--							      --							    --								  --
Disassembly of <code object modularInverse at 0x7f33e26494b0, def modularInverse ( n , prime ) :			    def modularInverse ( n , prime ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( n + 1 )				    	dp = [ 0 ] * n + 1					  
2 BUILD_LIST 1						      	  dp [ 0 ] = dp [ 1 ] = 1				    	dp [ 0 ] = dp						  
4 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
6 LOAD_CONST 2 ( 1 )					      	      dp [ i ] = dp [ prime % i ] * ( prime - prime // i )  	    dp [ i ] = dp [ prime % i ] * ( prime - prime // i )  
8 BINARY_ADD						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
10 BINARY_MULTIPLY					      	      print ( dp [ i ] , end = " " )			    	    print ( dp [ i ] , end = " " )			  
12 STORE_FAST 2 ( dp )					      								    								  
							      								    								  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 DUP_TOP						      								    								  
18 LOAD_FAST 2 ( dp )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_SUBSCR						      								    								  
24 LOAD_FAST 2 ( dp )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
4 30 SETUP_LOOP 54 ( to 86 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 36 ( to 84 )				      								    								  
48 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 50 LOAD_FAST 2 ( dp )					      								    								  
52 LOAD_FAST 1 ( prime )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_MODULO					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( prime )				      								    								  
62 LOAD_FAST 1 ( prime )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_FLOOR_DIVIDE					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 LOAD_FAST 1 ( prime )				      								    								  
74 BINARY_MODULO					      								    								  
76 LOAD_FAST 2 ( dp )					      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 46					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
6 >> 86 SETUP_LOOP 38 ( to 126 )			      								    								  
88 LOAD_GLOBAL 0 ( range )				      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 LOAD_FAST 0 ( n )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 CALL_FUNCTION 2					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 20 ( to 124 )				      								    								  
104 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 106 LOAD_GLOBAL 1 ( print )				      								    								  
108 LOAD_FAST 2 ( dp )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 4 ( ' ' )				      								    								  
116 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
118 CALL_FUNCTION_KW 2					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 102					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1	      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1
--							      --							    --								  --
Disassembly of <code object maxRepeating at 0x7f33e2644930, f def maxRepeating ( str ) :				    def maxRepeating ( str ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( str )					      	  count = 0						    	count = 0						  _sa.valid/MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_
4 CALL_FUNCTION 1					      	  res = str [ 0 ]					    	res = str [ 0 ]						  STRING_1.py", line 45	    return res	   ^ SyntaxE
6 STORE_FAST 1 ( n )					      	  cur_count = 1						    	cur_count = 1						  rror: 'return' outside function
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) :	    	    if i < n - 1 and str [ i ] == str [ i + 1 ] :	  
10 STORE_FAST 2 ( count )				      		  cur_count += 1				    		cur_count += 1					  
							      	      else :						    	    elif cur_count > count :				  
4 12 LOAD_FAST 0 ( str )				      		  if cur_count > count :			    		count = cur_count				  
14 LOAD_CONST 1 ( 0 )					      		      count = cur_count				    		res = str [ i ]					  
16 BINARY_SUBSCR					      		      res = str [ i ]				    	    cur_count = 1					  
18 STORE_FAST 3 ( res )					      		  cur_count = 1					    return res							  
							      	  return res						    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 STORE_FAST 4 ( cur_count )				      								    								  
							      								    								  
6 24 SETUP_LOOP 82 ( to 108 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 70 ( to 106 )				      								    								  
36 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 38 LOAD_FAST 5 ( i )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 80					      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( str )					      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 70 LOAD_FAST 4 ( cur_count )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 4 ( cur_count )				      								    								  
78 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
10 >> 80 LOAD_FAST 4 ( cur_count )			      								    								  
82 LOAD_FAST 2 ( count )				      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
11 88 LOAD_FAST 4 ( cur_count )				      								    								  
90 STORE_FAST 2 ( count )				      								    								  
							      								    								  
12 92 LOAD_FAST 0 ( str )				      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 STORE_FAST 3 ( res )					      								    								  
							      								    								  
13 >> 100 LOAD_CONST 2 ( 1 )				      								    								  
102 STORE_FAST 4 ( cur_count )				      								    								  
104 JUMP_ABSOLUTE 34					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
14 >> 108 LOAD_FAST 3 ( res )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1
--							      --							    --								  --
Disassembly of <code object countSubstringWithEqualEnds at 0x def countSubstringWithEqualEnds ( s ) :			    def countSubstringWithEqualEnds ( s ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  n = len ( s ) ;					    	n = len ( s )						  
							      	  count = [ 0 ] * MAX_CHAR ;				    	count = [ 0 ] * MAX_CHAR				  
3 4 LOAD_GLOBAL 0 ( len )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 LOAD_FAST 0 ( s )					      	      count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1 ;	    	    count += ord ( s [ i ] ) - ord ( 'a' ) ] += 1	  
8 CALL_FUNCTION 1					      	  for i in range ( MAX_CHAR ) :				    	for i in range ( MAX_CHAR ) :				  
10 STORE_FAST 2 ( n )					      	      result += ( count [ i ] * ( count [ i ] + 1 ) / 2 ) ; 	    result += count [ i ] * ( count [ i ] + 1 ) / 2	  
							      	  return result ;					    	return result						  
4 12 LOAD_CONST 1 ( 0 )					      								    								  
14 BUILD_LIST 1						      								    								  
16 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
18 BINARY_MULTIPLY					      								    								  
20 STORE_FAST 3 ( count )				      								    								  
							      								    								  
5 22 SETUP_LOOP 48 ( to 72 )				      								    								  
24 LOAD_GLOBAL 2 ( range )				      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 36 ( to 70 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( count )				      								    								  
38 LOAD_GLOBAL 3 ( ord )				      								    								  
40 LOAD_FAST 0 ( s )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_GLOBAL 3 ( ord )				      								    								  
50 LOAD_CONST 2 ( 'a' )					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 DUP_TOP_TWO						      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 ROT_THREE						      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 32					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 SETUP_LOOP 44 ( to 118 )			      								    								  
74 LOAD_GLOBAL 2 ( range )				      								    								  
76 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
78 CALL_FUNCTION 1					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 32 ( to 116 )				      								    								  
84 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 86 LOAD_FAST 1 ( result )				      								    								  
88 LOAD_FAST 3 ( count )				      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 3 ( count )				      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 3 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_CONST 4 ( 2 )					      								    								  
108 BINARY_TRUE_DIVIDE					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 1 ( result )				      								    								  
114 JUMP_ABSOLUTE 82					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
9 >> 118 LOAD_FAST 1 ( result )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_BRACKET_NUMBER					      PRINT_BRACKET_NUMBER					    PRINT_BRACKET_NUMBER					  PRINT_BRACKET_NUMBER
--							      --							    --								  --
Disassembly of <code object printBracketNumber at 0x7f33e2649 def printBracketNumber ( exp , n ) :			    def printBracketNumber ( exp , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  left_bnum = 1						    	left_bnum = 1						  
2 STORE_FAST 2 ( left_bnum )				      	  right_bnum = list ( )					    	right_bnum = list ( )					  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_GLOBAL 0 ( list )				      	      if exp [ i ] == '(' :				    	    if exp [ i ] == '(' :				  
6 CALL_FUNCTION 0					      		  print ( left_bnum , end = " " )		    		print ( left_bnum , end = ' ' )			  
8 STORE_FAST 3 ( right_bnum )				      		  right_bnum.append ( left_bnum )		    		right_bnum.append ( left_bnum )			  
							      		  left_bnum += 1				    		left_bnum += 1					  
4 10 SETUP_LOOP 96 ( to 108 )				      	      elif exp [ i ] == ')' :				    	    elif exp [ i ] == ')' :				  
12 LOAD_GLOBAL 1 ( range )				      		  print ( right_bnum [ - 1 ] , end = " " )	    		print ( right_bnum [ - 1 ] , end = ' ' )	  
14 LOAD_FAST 1 ( n )					      		  right_bnum.pop ( )				    		right_bnum.pop ( )				  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 84 ( to 106 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( exp )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( '(' )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 36 LOAD_GLOBAL 2 ( print )				      								    								  
38 LOAD_FAST 2 ( left_bnum )				      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( right_bnum )				      								    								  
50 LOAD_METHOD 3 ( append )				      								    								  
52 LOAD_FAST 2 ( left_bnum )				      								    								  
54 CALL_METHOD 1					      								    								  
56 POP_TOP						      								    								  
							      								    								  
8 58 LOAD_FAST 2 ( left_bnum )				      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 2 ( left_bnum )				      								    								  
66 JUMP_ABSOLUTE 20					      								    								  
							      								    								  
9 >> 68 LOAD_FAST 0 ( exp )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 5 ( ')' )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
10 80 LOAD_GLOBAL 2 ( print )				      								    								  
82 LOAD_FAST 3 ( right_bnum )				      								    								  
84 LOAD_CONST 6 ( - 1 )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 3 ( ' ' )					      								    								  
90 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
92 CALL_FUNCTION_KW 2					      								    								  
94 POP_TOP						      								    								  
							      								    								  
11 96 LOAD_FAST 3 ( right_bnum )			      								    								  
98 LOAD_METHOD 4 ( pop )				      								    								  
100 CALL_METHOD 0					      								    								  
102 POP_TOP						      								    								  
104 JUMP_ABSOLUTE 20					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_CONSECUTIVE_SUBSEQUENCE				      LONGEST_CONSECUTIVE_SUBSEQUENCE				    LONGEST_CONSECUTIVE_SUBSEQUENCE				  LONGEST_CONSECUTIVE_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object findLongestConseqSubseq at 0x7f33 def findLongestConseqSubseq ( arr , n ) :			    def findLongestConseqSubseq ( arr , n ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( Set )				      	  s = Set ( )						    	s = Set ( )						  
2 CALL_FUNCTION 0					      	  ans = 0						    	ans = 0							  
4 STORE_FAST 2 ( s )					      	  for ele in arr :					    	for ele in arr :					  
							      	      s.add ( ele )					    	    s.add ( ele )					  
3 6 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
8 STORE_FAST 3 ( ans )					      	      if ( arr [ i ] - 1 ) not in s :			    	    if arr [ i ] - 1 not in s :				  
							      		  j = arr [ i ]					    		j = arr [ i ]					  
4 10 SETUP_LOOP 22 ( to 34 )				      		  while ( j in s ) :				    		while j in s :					  
12 LOAD_FAST 0 ( arr )					      		      j += 1					    		    j += 1					  
14 GET_ITER						      		  ans = max ( ans , j - arr [ i ] )		    	    ans = max ( ans , j - arr [ i ] )			  
>> 16 FOR_ITER 14 ( to 32 )				      	  return ans						    	return ans						  
18 STORE_FAST 4 ( ele )					      								    								  
							      								    								  
5 20 LOAD_FAST 2 ( s )					      								    								  
22 LOAD_METHOD 1 ( add )				      								    								  
24 LOAD_FAST 4 ( ele )					      								    								  
26 CALL_METHOD 1					      								    								  
28 POP_TOP						      								    								  
30 JUMP_ABSOLUTE 16					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 SETUP_LOOP 80 ( to 116 )			      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 68 ( to 114 )				      								    								  
46 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 2 ( s )					      								    								  
60 COMPARE_OP 7 ( not in )				      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_FAST 6 ( j )					      								    								  
							      								    								  
9 72 SETUP_LOOP 20 ( to 94 )				      								    								  
>> 74 LOAD_FAST 6 ( j )					      								    								  
76 LOAD_FAST 2 ( s )					      								    								  
78 COMPARE_OP 6 ( in )					      								    								  
80 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
10 82 LOAD_FAST 6 ( j )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 6 ( j )					      								    								  
90 JUMP_ABSOLUTE 74					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 LOAD_GLOBAL 3 ( max )				      								    								  
96 LOAD_FAST 3 ( ans )					      								    								  
98 LOAD_FAST 6 ( j )					      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 5 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 STORE_FAST 3 ( ans )				      								    								  
112 JUMP_ABSOLUTE 44					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
12 >> 116 LOAD_FAST 3 ( ans )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1      PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	    PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	  PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7f33e2653ed0, file " def isPrime ( n ) :					    def isPrime ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return False					    	    return False					  
4 COMPARE_OP 1 ( <= )					      	  if ( n <= 3 ) :					    	if n <= 3 :						  
6 POP_JUMP_IF_FALSE 12					      	      return True					    	    return True						  
							      	  if ( n % 2 == 0 or n % 3 == 0 ) :			    	if n % 2 == 0 or n % 3 == 0 :				  
3 8 LOAD_CONST 2 ( False )				      	      return False					    	    return False					  
10 RETURN_VALUE						      	  i = 5							    	i = 5							  
							      	  while ( i * i <= n ) :				    	while i * i <= n :					  
4 >> 12 LOAD_FAST 0 ( n )				      	      if ( n % i == 0 or n % ( i + 2 ) == 0 ) :		    	    if n % i == 0 or n % ( i + 2 ) == 0 :		  
14 LOAD_CONST 3 ( 3 )					      		  return False					    		return False					  
16 COMPARE_OP 1 ( <= )					      	      i = i + 6						    	    i = i + 6						  
18 POP_JUMP_IF_FALSE 24					      	  return True						    	return True						  
							      								    								  
5 20 LOAD_CONST 4 ( True )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_CONST 5 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 6 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_TRUE 48					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 3 ( 3 )					      								    								  
40 BINARY_MODULO					      								    								  
42 LOAD_CONST 6 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 >> 48 LOAD_CONST 2 ( False )				      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_CONST 7 ( 5 )				      								    								  
54 STORE_FAST 1 ( i )					      								    								  
							      								    								  
9 56 SETUP_LOOP 56 ( to 114 )				      								    								  
>> 58 LOAD_FAST 1 ( i )					      								    								  
60 LOAD_FAST 1 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 COMPARE_OP 1 ( <= )					      								    								  
68 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 70 LOAD_FAST 0 ( n )					      								    								  
72 LOAD_FAST 1 ( i )					      								    								  
74 BINARY_MODULO					      								    								  
76 LOAD_CONST 6 ( 0 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_TRUE 98					      								    								  
82 LOAD_FAST 0 ( n )					      								    								  
84 LOAD_FAST 1 ( i )					      								    								  
86 LOAD_CONST 5 ( 2 )					      								    								  
88 BINARY_ADD						      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 6 ( 0 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
11 >> 98 LOAD_CONST 2 ( False )				      								    								  
100 RETURN_VALUE					      								    								  
							      								    								  
12 >> 102 LOAD_FAST 1 ( i )				      								    								  
104 LOAD_CONST 8 ( 6 )					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 1 ( i )					      								    								  
110 JUMP_ABSOLUTE 58					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
13 >> 114 LOAD_CONST 4 ( True )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7f33e26494b0,  def printDistinct ( arr , n ) :				    def printDistinct ( arr , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( ) ;					    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 CALL_METHOD 0						      	      if ( i < n - 1 and arr [ i ] == arr [ i + 1 ] ) :	    	    if i < n - 1 and arr [ i + 1 ] :			  
6 POP_TOP						      		  while ( i < n - 1 and ( arr [ i ] == arr [ i + 1  		while i < n - 1 and arr [ i ] == arr [ i + 1 ] :  
							      		      i += 1 ;					    		    i += 1					  
3 8 SETUP_LOOP 112 ( to 122 )				      	      else :						    	else :							  
10 LOAD_GLOBAL 1 ( range )				      		  print ( arr [ i ] , end = " " ) ;		    	    print ( arr [ i ] , end = " " )			  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 100 ( to 120 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 102				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
5 54 SETUP_LOOP 62 ( to 118 )				      								    								  
>> 56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 98					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 BINARY_SUBSCR					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
6 88 LOAD_FAST 2 ( i )					      								    								  
90 LOAD_CONST 1 ( 1 )					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 2 ( i )					      								    								  
96 JUMP_ABSOLUTE 56					      								    								  
>> 98 POP_BLOCK						      								    								  
100 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 102 LOAD_GLOBAL 2 ( print )			      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 2 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 2 ( ' ' )				      								    								  
112 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
114 CALL_FUNCTION_KW 2					      								    								  
116 POP_TOP						      								    								  
>> 118 JUMP_ABSOLUTE 18					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY		      FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			    FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			  FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object findSubarraySum at 0x7f33e2644f60 def findSubarraySum ( arr , n ) :				    def findSubarraySum ( arr , n ) :				  success : identical to gold
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  m = dict ( )						    	m = dict ( )						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_GLOBAL 0 ( dict )				      	      Sum = 0						    	    Sum = 0						  
6 CALL_FUNCTION 0					      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
8 STORE_FAST 3 ( m )					      		  Sum += arr [ j ]				    		Sum += arr [ j ]				  
							      		  m [ Sum ] = m.get ( Sum , 0 ) + 1		    		m [ Sum ] = m.get ( Sum , 0 ) + 1		  
4 10 SETUP_LOOP 72 ( to 84 )				      	  for x in m :						    	for x in m :						  
12 LOAD_GLOBAL 1 ( range )				      	      if m [ x ] == 1 :					    	    if m [ x ] == 1 :					  
14 LOAD_FAST 1 ( n )					      		  res += x					    		res += x					  
16 CALL_FUNCTION 1					      	  return res						    	return res						  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 60 ( to 82 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 5 ( Sum )					      								    								  
							      								    								  
6 28 SETUP_LOOP 50 ( to 80 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 36 ( to 78 )				      								    								  
42 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 44 LOAD_FAST 5 ( Sum )				      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 5 ( Sum )					      								    								  
							      								    								  
8 56 LOAD_FAST 3 ( m )					      								    								  
58 LOAD_METHOD 2 ( get )				      								    								  
60 LOAD_FAST 5 ( Sum )					      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 CALL_METHOD 2					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 3 ( m )					      								    								  
72 LOAD_FAST 5 ( Sum )					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 40					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 JUMP_ABSOLUTE 20					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
9 >> 84 SETUP_LOOP 32 ( to 118 )			      								    								  
86 LOAD_FAST 3 ( m )					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 24 ( to 116 )				      								    								  
92 STORE_FAST 7 ( x )					      								    								  
							      								    								  
10 94 LOAD_FAST 3 ( m )					      								    								  
96 LOAD_FAST 7 ( x )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
11 106 LOAD_FAST 2 ( res )				      								    								  
108 LOAD_FAST 7 ( x )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 2 ( res )				      								    								  
114 JUMP_ABSOLUTE 90					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 2 ( res )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_PRIME_FACTOR_NUMBER			      FIND_LARGEST_PRIME_FACTOR_NUMBER				    FIND_LARGEST_PRIME_FACTOR_NUMBER				  FIND_LARGEST_PRIME_FACTOR_NUMBER
--							      --							    --								  --
Disassembly of <code object maxPrimeFactors at 0x7f33e26494b0 def maxPrimeFactors ( n ) :				    def maxPrimeFactors ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1 )				      	  maxPrime = - 1					    	maxPrime = - 1						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 1 ( maxPrime )				      	  while n % 2 == 0 :					    	while n % 2 == 0 :					  _sa.valid/FIND_LARGEST_PRIME_FACTOR_NUMBER.py", li
							      	      maxPrime = 2					    	    maxPrime = 2					  ne 45	    return int ( maxPrime )	^ SyntaxErro
3 4 SETUP_LOOP 28 ( to 34 )				      	      n >>= 1						    	    n >>= 1						  r: 'return' outside function
>> 6 LOAD_FAST 0 ( n )					      	  for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :  	for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :  
8 LOAD_CONST 2 ( 2 )					      	      while n % i == 0 :				    	    while n % i == 0 :					  
10 BINARY_MODULO					      		  maxPrime = i					    		maxPrime = i					  
12 LOAD_CONST 3 ( 0 )					      		  n = n / i					    		n = n / i					  
14 COMPARE_OP 2 ( == )					      	  if n > 2 :						    	if n > 2 :						  
16 POP_JUMP_IF_FALSE 32					      	      maxPrime = n					    	    maxPrime = n					  
							      	  return int ( maxPrime )				    	    maxPrime = n					  
4 18 LOAD_CONST 2 ( 2 )					      								    return int ( maxPrime )					  
20 STORE_FAST 1 ( maxPrime )				      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 4 ( 1 )					      								    								  
26 INPLACE_RSHIFT					      								    								  
28 STORE_FAST 0 ( n )					      								    								  
30 JUMP_ABSOLUTE 6					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 SETUP_LOOP 64 ( to 100 )			      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_CONST 5 ( 3 )					      								    								  
40 LOAD_GLOBAL 1 ( int )				      								    								  
42 LOAD_GLOBAL 2 ( math )				      								    								  
44 LOAD_METHOD 3 ( sqrt )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 CALL_METHOD 1					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 LOAD_CONST 4 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_CONST 2 ( 2 )					      								    								  
58 CALL_FUNCTION 3					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 34 ( to 98 )				      								    								  
64 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 66 SETUP_LOOP 28 ( to 96 )				      								    								  
>> 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 3 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
8 80 LOAD_FAST 2 ( i )					      								    								  
82 STORE_FAST 1 ( maxPrime )				      								    								  
							      								    								  
9 84 LOAD_FAST 0 ( n )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_TRUE_DIVIDE					      								    								  
90 STORE_FAST 0 ( n )					      								    								  
92 JUMP_ABSOLUTE 68					      								    								  
>> 94 POP_BLOCK						      								    								  
>> 96 JUMP_ABSOLUTE 62					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
10 >> 100 LOAD_FAST 0 ( n )				      								    								  
102 LOAD_CONST 2 ( 2 )					      								    								  
104 COMPARE_OP 4 ( > )					      								    								  
106 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
11 108 LOAD_FAST 0 ( n )				      								    								  
110 STORE_FAST 1 ( maxPrime )				      								    								  
							      								    								  
12 >> 112 LOAD_GLOBAL 1 ( int )				      								    								  
114 LOAD_FAST 1 ( maxPrime )				      								    								  
116 CALL_FUNCTION 1					      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		    SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		  SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
Disassembly of <code object search at 0x7f33e2653ed0, file "< def search ( mat , n , x ) :				    def search ( mat , n , x ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( i )					      	  j = n - 1						    	j = n - 1						  _sa.valid/SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTE
							      	  while ( i < n and j >= 0 ) :				    	while i < n and j >= 0 :				  D_MATRIX.py", line 44	    return 0	 ^ SyntaxErr
3 4 LOAD_FAST 1 ( n )					      	      if ( mat [ i ] [ j ] == x ) :			    	    if mat [ i ] [ j ] == x :				  or: 'return' outside function
6 LOAD_CONST 2 ( 1 )					      		  print ( "n Found at " , i , ", " , j )	    		print ( "n Found at " , i , ", " , j )		  
8 BINARY_SUBTRACT					      		  return 1					    		return 1					  
10 STORE_FAST 4 ( j )					      	      if ( mat [ i ] [ j ] > x ) :			    	    if mat [ i ] [ j ] > x :				  
							      		  j -= 1					    		j -= 1						  
4 12 SETUP_LOOP 88 ( to 102 )				      	      else :						    	    else :						  
>> 14 LOAD_FAST 3 ( i )					      		  i += 1					    		i += 1						  
16 LOAD_FAST 1 ( n )					      	  print ( "Element not found" )				    print ( "Element not found" )				  
18 COMPARE_OP 0 ( < )					      	  return 0						    return 0							  
20 POP_JUMP_IF_FALSE 100				      								    								  
22 LOAD_FAST 4 ( j )					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 5 ( >= )					      								    								  
28 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( mat )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 4 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( x )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
6 46 LOAD_GLOBAL 0 ( print )				      								    								  
48 LOAD_CONST 3 ( 'n Found at ' )			      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 LOAD_CONST 4 ( ', ' )				      								    								  
54 LOAD_FAST 4 ( j )					      								    								  
56 CALL_FUNCTION 4					      								    								  
58 POP_TOP						      								    								  
							      								    								  
7 60 LOAD_CONST 2 ( 1 )					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
8 >> 64 LOAD_FAST 0 ( mat )				      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 4 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 2 ( x )					      								    								  
76 COMPARE_OP 4 ( > )					      								    								  
78 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
9 80 LOAD_FAST 4 ( j )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_SUBTRACT					      								    								  
86 STORE_FAST 4 ( j )					      								    								  
88 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
11 >> 90 LOAD_FAST 3 ( i )				      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 3 ( i )					      								    								  
98 JUMP_ABSOLUTE 14					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
12 >> 102 LOAD_GLOBAL 0 ( print )			      								    								  
104 LOAD_CONST 5 ( 'Element not found' )		      								    								  
106 CALL_FUNCTION 1					      								    								  
108 POP_TOP						      								    								  
							      								    								  
13 110 LOAD_CONST 1 ( 0 )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	      SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	    SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M		  SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M
--							      --							    --								  --
Disassembly of <code object coutSubSeq at 0x7f33e2649a50, fil def coutSubSeq ( A , N , M ) :				    def coutSubSeq ( A , N , M ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 3 ( sum )					      	  ans = 0						    	ans = 0							  
							      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( i + 1 , N ) :			    	    for j in range ( i + 1 , N ) :			  
6 STORE_FAST 4 ( ans )					      		  for k in range ( j + 1 , N ) :		    		for k in range ( j + 1 , N ) :			  
							      		      sum = A [ i ] + A [ j ] + A [ k ]		    		    sum = A [ i ] + A [ j ] + A [ k ]		  
4 8 SETUP_LOOP 110 ( to 120 )				      		      if ( sum % M == 0 ) :			    		    if sum % M == 0 :				  
10 LOAD_GLOBAL 0 ( range )				      			  ans = ans + 1				    			ans = ans + 1				  
12 LOAD_CONST 1 ( 0 )					      	  return ans						    return ans							  
14 LOAD_FAST 1 ( N )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 96 ( to 118 )				      								    								  
22 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 90 ( to 116 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 5 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 1 ( N )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 72 ( to 114 )				      								    								  
42 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 44 SETUP_LOOP 66 ( to 112 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( N )					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 48 ( to 110 )				      								    								  
62 STORE_FAST 7 ( k )					      								    								  
							      								    								  
7 64 LOAD_FAST 0 ( A )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( A )					      								    								  
72 LOAD_FAST 6 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 0 ( A )					      								    								  
80 LOAD_FAST 7 ( k )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
8 88 LOAD_FAST 3 ( sum )				      								    								  
90 LOAD_FAST 2 ( M )					      								    								  
92 BINARY_MODULO					      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
9 100 LOAD_FAST 4 ( ans )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_FAST 4 ( ans )				      								    								  
108 JUMP_ABSOLUTE 60					      								    								  
>> 110 POP_BLOCK					      								    								  
>> 112 JUMP_ABSOLUTE 40					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 20					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
10 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		      CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		    CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		  CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE
--							      --							    --								  --
Disassembly of <code object convertOpposite at 0x7f33e2644930 def convertOpposite ( str ) :				    def convertOpposite ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  ln = len ( str )					    	ln = len ( str )					  
2 LOAD_FAST 0 ( str )					      	  for i in range ( ln ) :				    	for i in range ( ln ) :					  
4 CALL_FUNCTION 1					      	      if str [ i ] >= 'a' and str [ i ] <= 'z' :	    	    if str [ i ] >= 'a' and str [ i ] <= 'z' :		  
6 STORE_FAST 1 ( ln )					      		  str [ i ] = chr ( ord ( str [ i ] ) - 32 )	    		str [ i ] = chr ( ord ( str [ i ] ) - 32 )	  
							      	      elif str [ i ] >= 'A' and str [ i ] <= 'Z' :	    	    elif str [ i ] >= 'A' and str [ i ] <= 'Z' :	  
3 8 SETUP_LOOP 114 ( to 124 )				      		  str [ i ] = chr ( ord ( str [ i ] ) + 32 )	    		str [ i ] = chr ( ord ( str [ i ] ) + 32 )	  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_FAST 1 ( ln )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 102 ( to 122 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( str )				      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 1 ( 'a' )					      								    								  
30 COMPARE_OP 5 ( >= )					      								    								  
32 POP_JUMP_IF_FALSE 72					      								    								  
34 LOAD_FAST 0 ( str )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 2 ( 'z' )					      								    								  
42 COMPARE_OP 1 ( <= )					      								    								  
44 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 2 ( chr )				      								    								  
48 LOAD_GLOBAL 3 ( ord )				      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 3 ( 32 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_FAST 0 ( str )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
6 >> 72 LOAD_FAST 0 ( str )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( 'A' )					      								    								  
80 COMPARE_OP 5 ( >= )					      								    								  
82 POP_JUMP_IF_FALSE 18					      								    								  
84 LOAD_FAST 0 ( str )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 5 ( 'Z' )					      								    								  
92 COMPARE_OP 1 ( <= )					      								    								  
94 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
7 96 LOAD_GLOBAL 2 ( chr )				      								    								  
98 LOAD_GLOBAL 3 ( ord )				      								    								  
100 LOAD_FAST 0 ( str )					      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 LOAD_CONST 3 ( 32 )					      								    								  
110 BINARY_ADD						      								    								  
112 CALL_FUNCTION 1					      								    								  
114 LOAD_FAST 0 ( str )					      								    								  
116 LOAD_FAST 2 ( i )					      								    								  
118 STORE_SUBSCR					      								    								  
120 JUMP_ABSOLUTE 18					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			      SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			    SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			  SMALLEST_SUBSET_SUM_GREATER_ELEMENTS
--							      --							    --								  --
Disassembly of <code object minElements at 0x7f33e2644930, fi def minElements ( arr , n ) :				    def minElements ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  halfSum = 0						    	halfSum = 0						  
2 STORE_FAST 2 ( halfSum )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      halfSum = halfSum + arr [ i ]			    	    halfSum = halfSum + arr [ i ]			  
3 4 SETUP_LOOP 28 ( to 34 )				      	  halfSum = int ( halfSum / 2 )				    	halfSum = int ( halfSum / 2 )				  
6 LOAD_GLOBAL 0 ( range )				      	  arr.sort ( reverse = True )				    	arr.sort ( reverse = True )				  
8 LOAD_FAST 1 ( n )					      	  res = 0						    	res = 0							  
10 CALL_FUNCTION 1					      	  curr_sum = 0						    	curr_sum = 0						  
12 GET_ITER						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
>> 14 FOR_ITER 16 ( to 32 )				      	      curr_sum += arr [ i ]				    	    curr_sum += arr [ i ]				  
16 STORE_FAST 3 ( i )					      	      res += 1						    	    res += 1						  
							      	      if curr_sum > halfSum :				    	    if curr_sum > halfSum :				  
4 18 LOAD_FAST 2 ( halfSum )				      		  return res					    		return res					  
20 LOAD_FAST 0 ( arr )					      	  return res						    return res							  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 2 ( halfSum )				      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_GLOBAL 1 ( int )				      								    								  
36 LOAD_FAST 2 ( halfSum )				      								    								  
38 LOAD_CONST 2 ( 2 )					      								    								  
40 BINARY_TRUE_DIVIDE					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 STORE_FAST 2 ( halfSum )				      								    								  
							      								    								  
6 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_ATTR 2 ( sort )					      								    								  
50 LOAD_CONST 3 ( True )				      								    								  
52 LOAD_CONST 4 ( ( 'reverse' , ) )			      								    								  
54 CALL_FUNCTION_KW 1					      								    								  
56 POP_TOP						      								    								  
							      								    								  
7 58 LOAD_CONST 1 ( 0 )					      								    								  
60 STORE_FAST 4 ( res )					      								    								  
							      								    								  
8 62 LOAD_CONST 1 ( 0 )					      								    								  
64 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
9 66 SETUP_LOOP 48 ( to 116 )				      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 36 ( to 114 )				      								    								  
78 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 80 LOAD_FAST 5 ( curr_sum )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
11 92 LOAD_FAST 4 ( res )				      								    								  
94 LOAD_CONST 5 ( 1 )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 4 ( res )					      								    								  
							      								    								  
12 100 LOAD_FAST 5 ( curr_sum )				      								    								  
102 LOAD_FAST 2 ( halfSum )				      								    								  
104 COMPARE_OP 4 ( > )					      								    								  
106 POP_JUMP_IF_FALSE 76				      								    								  
							      								    								  
13 108 LOAD_FAST 4 ( res )				      								    								  
110 RETURN_VALUE					      								    								  
112 JUMP_ABSOLUTE 76					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
14 >> 116 LOAD_FAST 4 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			      PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			    PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			  PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
Disassembly of <code object sequence at 0x7f33e2653f60, file  def sequence ( n ) :					    def sequence ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  f = [ 0 , 1 , 1 ]					    	f = [ 0 , 1 , 1 ]					  
2 LOAD_CONST 2 ( 1 )					      	  print ( f [ 1 ] , end = " " ) ,			    	print ( f [ 1 ] , end = " " )				  
4 LOAD_CONST 2 ( 1 )					      	  print ( f [ 2 ] , end = " " ) ,			    	print ( f [ 2 ] , end = " " )				  
6 BUILD_LIST 3						      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 , n + 1 ) :				  
8 STORE_FAST 1 ( f )					      	      f.append ( f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  	    f.append ( f [ f [ i - 1 ] ] + f [ i - 1 ] )	  
							      	      print ( f [ i ] , end = " " ) ,			    	    print ( f [ i ] , end = " " )			  
3 10 LOAD_GLOBAL 0 ( print )				      								    								  
12 LOAD_FAST 1 ( f )					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBSCR					      								    								  
18 LOAD_CONST 3 ( ' ' )					      								    								  
20 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
22 CALL_FUNCTION_KW 2					      								    								  
24 BUILD_TUPLE 1					      								    								  
26 POP_TOP						      								    								  
							      								    								  
4 28 LOAD_GLOBAL 0 ( print )				      								    								  
30 LOAD_FAST 1 ( f )					      								    								  
32 LOAD_CONST 5 ( 2 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( ' ' )					      								    								  
38 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
40 CALL_FUNCTION_KW 2					      								    								  
42 BUILD_TUPLE 1					      								    								  
44 POP_TOP						      								    								  
							      								    								  
5 46 SETUP_LOOP 82 ( to 130 )				      								    								  
48 LOAD_GLOBAL 1 ( range )				      								    								  
50 LOAD_CONST 6 ( 3 )					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 64 ( to 128 )				      								    								  
64 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 66 LOAD_FAST 1 ( f )					      								    								  
68 LOAD_METHOD 2 ( append )				      								    								  
70 LOAD_FAST 1 ( f )					      								    								  
72 LOAD_FAST 1 ( f )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 1 ( f )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_FAST 1 ( f )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_ADD						      								    								  
104 CALL_METHOD 1					      								    								  
106 POP_TOP						      								    								  
							      								    								  
7 108 LOAD_GLOBAL 0 ( print )				      								    								  
110 LOAD_FAST 1 ( f )					      								    								  
112 LOAD_FAST 2 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 3 ( ' ' )				      								    								  
118 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 BUILD_TUPLE 1					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 62					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE
--							      --							    --								  --
Disassembly of <code object eggDrop at 0x7f33e2653f60, file " def eggDrop ( n , k ) :					    def eggDrop ( n , k ) :					  script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k == 1 or k == 0 ) :				    	if k == 1 or k == 0 :					  
2 LOAD_CONST 1 ( 1 )					      	      return k						    	    return k						  
4 COMPARE_OP 2 ( == )					      	  if ( n == 1 ) :					    	if n == 1 :						  
6 POP_JUMP_IF_TRUE 16					      	      return k						    	    return k						  
8 LOAD_FAST 1 ( k )					      	  min = sys.maxsize					    	min = sys.maxsize					  
10 LOAD_CONST 2 ( 0 )					      	  for x in range ( 1 , k + 1 ) :			    	for x in range ( 1 , k + 1 ) :				  
12 COMPARE_OP 2 ( == )					      	      res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , 	    res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , 
14 POP_JUMP_IF_FALSE 20					      	      if ( res < min ) :				    	    if res < min :					  
							      		  min = res					    		min = res					  
3 >> 16 LOAD_FAST 1 ( k )				      	  return min + 1					    	return min + 1						  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( k )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( sys )				      								    								  
34 LOAD_ATTR 1 ( maxsize )				      								    								  
36 STORE_FAST 2 ( min )					      								    								  
							      								    								  
7 38 SETUP_LOOP 68 ( to 108 )				      								    								  
40 LOAD_GLOBAL 2 ( range )				      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 50 ( to 106 )				      								    								  
56 STORE_FAST 3 ( x )					      								    								  
							      								    								  
8 58 LOAD_GLOBAL 3 ( max )				      								    								  
60 LOAD_GLOBAL 4 ( eggDrop )				      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_FAST 3 ( x )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 LOAD_GLOBAL 4 ( eggDrop )				      								    								  
78 LOAD_FAST 0 ( n )					      								    								  
80 LOAD_FAST 1 ( k )					      								    								  
82 LOAD_FAST 3 ( x )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 STORE_FAST 4 ( res )					      								    								  
							      								    								  
9 92 LOAD_FAST 4 ( res )				      								    								  
94 LOAD_FAST 2 ( min )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
10 100 LOAD_FAST 4 ( res )				      								    								  
102 STORE_FAST 2 ( min )				      								    								  
104 JUMP_ABSOLUTE 54					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 2 ( min )				      								    								  
110 LOAD_CONST 1 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS     RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	    RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	  RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS
--							      --							    --								  --
Disassembly of <code object countSubstrs at 0x7f33e2644f60, f def countSubstrs ( str , i , j , n ) :			    def countSubstrs ( str , i , j , n ) :			  script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 0						    	    return 0						  
							      	  res = ( countSubstrs ( str , i + 1 , j , n - 1 ) + countS 	res = countSubstrs ( str ( i + 1 , j , n - 1 ) , countSub 
3 8 LOAD_CONST 1 ( 1 )					      	  if ( str [ i ] == str [ j ] ) :			    	if str [ i ] == str [ j ] :				  
10 RETURN_VALUE						      	      res += 1						    	    res += 1						  
							      	  return res						    	return res						  
4 >> 12 LOAD_FAST 3 ( n )				      								    								  
14 LOAD_CONST 2 ( 0 )					      								    								  
16 COMPARE_OP 1 ( <= )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 0 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_GLOBAL 0 ( countSubstrs )			      								    								  
26 LOAD_FAST 0 ( str )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 LOAD_FAST 3 ( n )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 4					      								    								  
44 LOAD_GLOBAL 0 ( countSubstrs )			      								    								  
46 LOAD_FAST 0 ( str )					      								    								  
48 LOAD_FAST 1 ( i )					      								    								  
50 LOAD_FAST 2 ( j )					      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_FAST 3 ( n )					      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 4					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_GLOBAL 0 ( countSubstrs )			      								    								  
68 LOAD_FAST 0 ( str )					      								    								  
70 LOAD_FAST 1 ( i )					      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 2 ( j )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 3 ( n )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 CALL_FUNCTION 4					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 STORE_FAST 4 ( res )					      								    								  
							      								    								  
7 94 LOAD_FAST 0 ( str )				      								    								  
96 LOAD_FAST 1 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 0 ( str )					      								    								  
102 LOAD_FAST 2 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 COMPARE_OP 2 ( == )					      								    								  
108 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
8 110 LOAD_FAST 4 ( res )				      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 INPLACE_ADD						      								    								  
116 STORE_FAST 4 ( res )				      								    								  
							      								    								  
9 >> 118 LOAD_FAST 4 ( res )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	      COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	    COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		  COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES
--							      --							    --								  --
Disassembly of <code object countarray at 0x7f33e2653f60, fil def countarray ( n , k , x ) :				    def countarray ( n , k , dp ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  dp = list ( )						    	dp = list ( )						  
2 CALL_FUNCTION 0					      	  dp.append ( 0 )					    	dp.append ( 0 )						  
4 STORE_FAST 3 ( dp )					      	  dp.append ( 1 )					    	dp.append ( 1 )						  
							      	  i = 2							    	i = 2							  
3 6 LOAD_FAST 3 ( dp )					      	  while i < n :						    	while i < n :						  
8 LOAD_METHOD 1 ( append )				      	      dp.append ( ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp 	    dp.append ( ( k - 2 ) * dp [ i - 1 ] * ( k - 1 ) * dp 
10 LOAD_CONST 1 ( 0 )					      	      i = i + 1						    	    i = i + 1						  
12 CALL_METHOD 1					      	  return ( ( k - 1 ) * dp [ n - 2 ] if x == 1 else dp [ n - 	return dp == 1 if x == 1 else dp [ n - 2 ]		  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_FAST 3 ( dp )					      								    								  
18 LOAD_METHOD 1 ( append )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 CALL_METHOD 1					      								    								  
24 POP_TOP						      								    								  
							      								    								  
5 26 LOAD_CONST 3 ( 2 )					      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 SETUP_LOOP 66 ( to 98 )				      								    								  
>> 32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 COMPARE_OP 0 ( < )					      								    								  
38 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
7 40 LOAD_FAST 3 ( dp )					      								    								  
42 LOAD_METHOD 1 ( append )				      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 LOAD_CONST 3 ( 2 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 3 ( dp )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 LOAD_FAST 1 ( k )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_FAST 3 ( dp )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 BINARY_ADD						      								    								  
82 CALL_METHOD 1					      								    								  
84 POP_TOP						      								    								  
							      								    								  
8 86 LOAD_FAST 4 ( i )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 4 ( i )					      								    								  
94 JUMP_ABSOLUTE 32					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
9 >> 98 LOAD_FAST 2 ( x )				      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 126				      								    								  
106 LOAD_FAST 1 ( k )					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_FAST 3 ( dp )					      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 LOAD_CONST 3 ( 2 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_SUBSCR					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 RETURN_VALUE					      								    								  
>> 126 LOAD_FAST 3 ( dp )				      								    								  
128 LOAD_FAST 0 ( n )					      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 BINARY_SUBSCR					      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1
--							      --							    --								  --
Disassembly of <code object isScalarMatrix at 0x7f33e2644f60, def isScalarMatrix ( mat ) :				    def isScalarMatrix ( mat ) :				  script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , N ) :			    	    for j in range ( 0 , N ) :				  
4 LOAD_CONST 1 ( 0 )					      		  if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  		if i != j and mat [ i ] [ j ] != 0 :		  
6 LOAD_GLOBAL 1 ( N )					      		      return False				    		    return False				  
8 CALL_FUNCTION 2					      	  for i in range ( 0 , N - 1 ) :			    	for i in range ( 0 , N - 1 ) :				  
10 GET_ITER						      	      if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) :   	    if mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] :	  
>> 12 FOR_ITER 52 ( to 66 )				      		  return False					    		return False					  
14 STORE_FAST 1 ( i )					      	  return True						    return True							  
							      								    								  
3 16 SETUP_LOOP 46 ( to 64 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_GLOBAL 1 ( N )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( i )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 28					      								    								  
40 LOAD_FAST 0 ( mat )					      								    								  
42 LOAD_FAST 1 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 56 LOAD_CONST 2 ( False )				      								    								  
58 RETURN_VALUE						      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 12					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 SETUP_LOOP 58 ( to 128 )			      								    								  
70 LOAD_GLOBAL 0 ( range )				      								    								  
72 LOAD_CONST 1 ( 0 )					      								    								  
74 LOAD_GLOBAL 1 ( N )					      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 40 ( to 126 )				      								    								  
86 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 88 LOAD_FAST 0 ( mat )				      								    								  
90 LOAD_FAST 1 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 1 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( mat )					      								    								  
100 LOAD_FAST 1 ( i )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 1 ( i )					      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 BINARY_SUBSCR					      								    								  
116 COMPARE_OP 3 ( != )					      								    								  
118 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
8 120 LOAD_CONST 2 ( False )				      								    								  
122 RETURN_VALUE					      								    								  
124 JUMP_ABSOLUTE 84					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
9 >> 128 LOAD_CONST 4 ( True )				      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE     REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	    REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	  REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE
--							      --							    --								  --
Disassembly of <code object translate at 0x7f33e2653ed0, file def translate ( st ) :					    def translate ( st ) :					  failure : #Results: 1, 10
2 0 SETUP_LOOP 122 ( to 124 )				      	  for i in range ( 1 , len ( st ) ) :			    	for i in range ( 1 , len ( st ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :	    	    if st [ i - 1 ] == 'A' and st [ i ] == 'B' :	  
4 LOAD_CONST 1 ( 1 )					      		  st [ i - 1 ] = 'C'				    		st [ i - 1 ] = 'C'				  
6 LOAD_GLOBAL 1 ( len )					      		  for j in range ( i , len ( st ) - 1 ) :	    		for j in range ( i , len ( st ) - 1 ) :		  
8 LOAD_FAST 0 ( st )					      		      st [ j ] = st [ j + 1 ]			    		    st [ j ] = st [ j + 1 ]			  
10 CALL_FUNCTION 1					      		  st [ len ( st ) - 1 ] = ' '			    	    st [ len ( st ) - 1 ] = ' '				  
12 CALL_FUNCTION 2					      	  return						    	return							  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 104 ( to 122 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( st )					      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( 'A' )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 16					      								    								  
36 LOAD_FAST 0 ( st )					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 3 ( 'B' )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 48 LOAD_CONST 4 ( 'C' )				      								    								  
50 LOAD_FAST 0 ( st )					      								    								  
52 LOAD_FAST 1 ( i )					      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
5 60 SETUP_LOOP 42 ( to 104 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_FAST 1 ( i )					      								    								  
66 LOAD_GLOBAL 1 ( len )				      								    								  
68 LOAD_FAST 0 ( st )					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 CALL_FUNCTION 2					      								    								  
78 GET_ITER						      								    								  
>> 80 FOR_ITER 20 ( to 102 )				      								    								  
82 STORE_FAST 2 ( j )					      								    								  
							      								    								  
6 84 LOAD_FAST 0 ( st )					      								    								  
86 LOAD_FAST 2 ( j )					      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( st )					      								    								  
96 LOAD_FAST 2 ( j )					      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 80					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
7 >> 104 LOAD_CONST 5 ( ' ' )				      								    								  
106 LOAD_FAST 0 ( st )					      								    								  
108 LOAD_GLOBAL 1 ( len )				      								    								  
110 LOAD_FAST 0 ( st )					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 STORE_SUBSCR					      								    								  
120 JUMP_ABSOLUTE 16					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
8 >> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			      NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			    NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			  NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS
--							      --							    --								  --
Disassembly of <code object numberOfPermWithKInversion at 0x7 def numberOfPermWithKInversion ( N , K ) :		    def numberOfPermWithKInversion ( N , K ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( N )					      	  if ( N == 0 ) : return 0				    	if N == 0 : return 0					  
2 LOAD_CONST 1 ( 0 )					      	  if ( K == 0 ) : return 1				    	if K == 0 : return 1					  
4 COMPARE_OP 2 ( == )					      	  if ( memo [ N ] [ K ] != 0 ) :			    	if not K [ N ] [ K ] != 0 :				  
6 POP_JUMP_IF_FALSE 12					      	      return memo [ N ] [ K ]				    	    return memo [ N ] [ K ]				  
8 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
10 RETURN_VALUE						      	  for i in range ( K + 1 ) :				    	for i in range ( K + 1 ) :				  
							      	      if ( i <= N - 1 ) :				    	    if i <= N - 1 :					  
3 >> 12 LOAD_FAST 1 ( K )				      		  sum += numberOfPermWithKInversion ( N - 1 , K - i 		sum += numberOfPermWithKInversion ( N - 1 , K - i 
14 LOAD_CONST 1 ( 0 )					      	  memo [ N ] [ K ] = sum				    	memo [ N ] [ K ] = sum					  
16 COMPARE_OP 2 ( == )					      	  return sum						    	return sum						  
18 POP_JUMP_IF_FALSE 24					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_GLOBAL 0 ( memo )				      								    								  
26 LOAD_FAST 0 ( N )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( K )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 40 LOAD_GLOBAL 0 ( memo )				      								    								  
42 LOAD_FAST 0 ( N )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 1 ( K )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
6 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
7 56 SETUP_LOOP 54 ( to 112 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 1 ( K )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 1					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 38 ( to 110 )				      								    								  
72 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 74 LOAD_FAST 3 ( i )					      								    								  
76 LOAD_FAST 0 ( N )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 COMPARE_OP 1 ( <= )					      								    								  
84 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
9 86 LOAD_FAST 2 ( sum )				      								    								  
88 LOAD_GLOBAL 2 ( numberOfPermWithKInversion )		      								    								  
90 LOAD_FAST 0 ( N )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_FAST 1 ( K )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( sum )				      								    								  
108 JUMP_ABSOLUTE 70					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
10 >> 112 LOAD_FAST 2 ( sum )				      								    								  
114 LOAD_GLOBAL 0 ( memo )				      								    								  
116 LOAD_FAST 0 ( N )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 1 ( K )					      								    								  
122 STORE_SUBSCR					      								    								  
							      								    								  
11 124 LOAD_FAST 2 ( sum )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7f33e2649a50,  def printDistinct ( str ) :				    def printDistinct ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * NO_OF_CHARS				    	count = [ 0 ] * NO_OF_CHARS				  
2 BUILD_LIST 1						      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				      	      if ( str [ i ] != ' ' ) :				    	    if str [ i ] != " " :				  
6 BINARY_MULTIPLY					      		  count [ ord ( str [ i ] ) ] += 1		    		count [ ord ( str [ i ] ) ] += 1		  
8 STORE_FAST 1 ( count )				      	  n = i							    	n = i							  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 10 SETUP_LOOP 56 ( to 68 )				      	      if ( count [ ord ( str [ i ] ) ] == 1 ) :		    	    if count [ ord ( str [ i ] ) == 1 :			  
12 LOAD_GLOBAL 1 ( range )				      		  print ( str [ i ] , end = "" )		    		print ( str [ i ] , end = " " )			  
14 LOAD_GLOBAL 2 ( len )				      								    								  
16 LOAD_FAST 0 ( str )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 40 ( to 66 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 2 ( ' ' )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 40 LOAD_FAST 1 ( count )				      								    								  
42 LOAD_GLOBAL 3 ( ord )				      								    								  
44 LOAD_FAST 0 ( str )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 DUP_TOP_TWO						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 ROT_THREE						      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 24					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 2 ( i )				      								    								  
70 STORE_FAST 3 ( n )					      								    								  
							      								    								  
7 72 SETUP_LOOP 52 ( to 126 )				      								    								  
74 LOAD_GLOBAL 1 ( range )				      								    								  
76 LOAD_FAST 3 ( n )					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 40 ( to 124 )				      								    								  
84 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 86 LOAD_FAST 1 ( count )				      								    								  
88 LOAD_GLOBAL 3 ( ord )				      								    								  
90 LOAD_FAST 0 ( str )					      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 3 ( 1 )					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 82				      								    								  
							      								    								  
9 106 LOAD_GLOBAL 4 ( print )				      								    								  
108 LOAD_FAST 0 ( str )					      								    								  
110 LOAD_FAST 2 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 4 ( '' )					      								    								  
116 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
118 CALL_FUNCTION_KW 2					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 82					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BRESENHAMS_LINE_GENERATION_ALGORITHM			      BRESENHAMS_LINE_GENERATION_ALGORITHM			    BRESENHAMS_LINE_GENERATION_ALGORITHM			  BRESENHAMS_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
Disassembly of <code object bresenham at 0x7f33e26494b0, file def bresenham ( x1 , y1 , x2 , y2 ) :			    def bresenham ( x1 , y1 , x2 , y2 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  m_new = 2 * ( y2 - y1 )				    	m_new = 2 * ( y2 - y1 )					  
2 LOAD_FAST 3 ( y2 )					      	  slope_error_new = m_new - ( x2 - x1 )			    	slope_error_new = m_new - x2 - x1			  
4 LOAD_FAST 1 ( y1 )					      	  y = y1						    	y = y1							  
6 BINARY_SUBTRACT					      	  for x in range ( x1 , x2 + 1 ) :			    	for x in range ( x1 , x2 + 1 ) :			  
8 BINARY_MULTIPLY					      	      print ( "(" , x , "," , y , ")\n" )		    	    print ( "(" , x , "," , y , ")\n" )			  
10 STORE_FAST 4 ( m_new )				      	      slope_error_new = slope_error_new + m_new		    	    slope_error_new = slope_error_new + m_new		  
							      	      if ( slope_error_new >= 0 ) :			    	    if slope_error_new >= 0 :				  
3 12 LOAD_FAST 4 ( m_new )				      		  y = y + 1					    		y = y + 1					  
14 LOAD_FAST 2 ( x2 )					      		  slope_error_new = slope_error_new - 2 * ( x2 - x1 		slope_error_new = slope_error_new - 2 * x2 - x1	  
16 LOAD_FAST 0 ( x1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 5 ( slope_error_new )			      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( y1 )					      								    								  
26 STORE_FAST 6 ( y )					      								    								  
							      								    								  
5 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 0 ( x1 )					      								    								  
34 LOAD_FAST 2 ( x2 )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 60 ( to 106 )				      								    								  
46 STORE_FAST 7 ( x )					      								    								  
							      								    								  
6 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 3 ( '(' )					      								    								  
52 LOAD_FAST 7 ( x )					      								    								  
54 LOAD_CONST 4 ( ',' )					      								    								  
56 LOAD_FAST 6 ( y )					      								    								  
58 LOAD_CONST 5 ( ')\n' )				      								    								  
60 CALL_FUNCTION 5					      								    								  
62 POP_TOP						      								    								  
							      								    								  
7 64 LOAD_FAST 5 ( slope_error_new )			      								    								  
66 LOAD_FAST 4 ( m_new )				      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 5 ( slope_error_new )			      								    								  
							      								    								  
8 72 LOAD_FAST 5 ( slope_error_new )			      								    								  
74 LOAD_CONST 6 ( 0 )					      								    								  
76 COMPARE_OP 5 ( >= )					      								    								  
78 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
9 80 LOAD_FAST 6 ( y )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 6 ( y )					      								    								  
							      								    								  
10 88 LOAD_FAST 5 ( slope_error_new )			      								    								  
90 LOAD_CONST 1 ( 2 )					      								    								  
92 LOAD_FAST 2 ( x2 )					      								    								  
94 LOAD_FAST 0 ( x1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 STORE_FAST 5 ( slope_error_new )			      								    								  
104 JUMP_ABSOLUTE 44					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		      FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		    FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		  FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object maxProduct at 0x7f33e2649a50, fil def maxProduct ( arr , n ) :				    def maxProduct ( arr , n = 3 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if n < 3 :						    	if n < 3 :						  
2 LOAD_CONST 1 ( 3 )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 0 ( < )					      	  max_product = - ( sys.maxsize - 1 )			    	max_product = - sys.maxsize - 1				  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 0 , n - 2 ) :			    	for i in range ( 0 , n - 2 ) :				  
							      	      for j in range ( i + 1 , n - 1 ) :		    	    for j in range ( i + 1 , n - 1 ) :			  
3 8 LOAD_CONST 2 ( - 1 )				      		  for k in range ( j + 1 , n ) :		    		for k in range ( j + 1 , n ) :			  
10 RETURN_VALUE						      		      max_product = max ( max_product , arr [ i ] * 		    max_product = max ( max_product * arr [ i ] * 
							      	  return max_product					    	return max_product					  
4 >> 12 LOAD_GLOBAL 0 ( sys )				      								    								  
14 LOAD_ATTR 1 ( maxsize )				      								    								  
16 LOAD_CONST 3 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 UNARY_NEGATIVE					      								    								  
22 STORE_FAST 2 ( max_product )				      								    								  
							      								    								  
5 24 SETUP_LOOP 104 ( to 130 )				      								    								  
26 LOAD_GLOBAL 2 ( range )				      								    								  
28 LOAD_CONST 4 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 LOAD_CONST 5 ( 2 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 86 ( to 128 )				      								    								  
42 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 44 SETUP_LOOP 80 ( to 126 )				      								    								  
46 LOAD_GLOBAL 2 ( range )				      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( n )					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 58 ( to 124 )				      								    								  
66 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 68 SETUP_LOOP 52 ( to 122 )				      								    								  
70 LOAD_GLOBAL 2 ( range )				      								    								  
72 LOAD_FAST 4 ( j )					      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 34 ( to 120 )				      								    								  
86 STORE_FAST 5 ( k )					      								    								  
							      								    								  
8 88 LOAD_GLOBAL 3 ( max )				      								    								  
90 LOAD_FAST 2 ( max_product )				      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 4 ( j )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 5 ( k )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 BINARY_MULTIPLY					      								    								  
114 CALL_FUNCTION 2					      								    								  
116 STORE_FAST 2 ( max_product )			      								    								  
118 JUMP_ABSOLUTE 84					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 64					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 JUMP_ABSOLUTE 40					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
9 >> 130 LOAD_FAST 2 ( max_product )			      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GOOGLE_CASE_GIVEN_SENTENCE				      GOOGLE_CASE_GIVEN_SENTENCE				    GOOGLE_CASE_GIVEN_SENTENCE					  GOOGLE_CASE_GIVEN_SENTENCE
--							      --							    --								  --
Disassembly of <code object convert at 0x7f33e2649a50, file " def convert ( s ) :					    def convert ( s ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( s )					      	  s1 = ""						    	s1 = ''							  _sa.valid/GOOGLE_CASE_GIVEN_SENTENCE.py", line 44
4 CALL_FUNCTION 1					      	  s1 = s1 + s [ 0 ].lower ( )				    	s1 = s1 + s [ 0 ].lower ( )				      return s1	    ^ SyntaxError: 'return' outside
6 STORE_FAST 1 ( n )					      	  i = 1							    	i = 1							  function
							      	  while i < n :						    	while i < n :						  
3 8 LOAD_CONST 1 ( '' )					      	      if ( s [ i ] == ' ' and i <= n ) :		    	    if s [ i ] == ' ' and i <= n :			  
10 STORE_FAST 2 ( s1 )					      		  s1 = s1 + " " + ( s [ i + 1 ] ).lower ( )	    		s1 = s1 + ' ' + s [ i + 1 ].lower ( )		  
							      		  i = i + 1					    		i = i + 1					  
4 12 LOAD_FAST 2 ( s1 )					      	      else :						    	    else :						  
14 LOAD_FAST 0 ( s )					      		  s1 = s1 + ( s [ i ] ).upper ( )		    		s1 = s1 + s [ i ].upper ( )			  
16 LOAD_CONST 2 ( 0 )					      	      i = i + 1						    	    i = i + 1						  
18 BINARY_SUBSCR					      	  return s1						    return s1							  
20 LOAD_METHOD 1 ( lower )				      								    								  
22 CALL_METHOD 0					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
5 28 LOAD_CONST 3 ( 1 )					      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 32 SETUP_LOOP 90 ( to 124 )				      								    								  
>> 34 LOAD_FAST 3 ( i )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( s )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 4 ( ' ' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 96					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 LOAD_FAST 1 ( n )					      								    								  
58 COMPARE_OP 1 ( <= )					      								    								  
60 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
8 62 LOAD_FAST 2 ( s1 )					      								    								  
64 LOAD_CONST 4 ( ' ' )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 0 ( s )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 LOAD_CONST 3 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_METHOD 1 ( lower )				      								    								  
80 CALL_METHOD 0					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
9 86 LOAD_FAST 3 ( i )					      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 3 ( i )					      								    								  
94 JUMP_FORWARD 16 ( to 112 )				      								    								  
							      								    								  
11 >> 96 LOAD_FAST 2 ( s1 )				      								    								  
98 LOAD_FAST 0 ( s )					      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_METHOD 2 ( upper )				      								    								  
106 CALL_METHOD 0					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
12 >> 112 LOAD_FAST 3 ( i )				      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 BINARY_ADD						      								    								  
118 STORE_FAST 3 ( i )					      								    								  
120 JUMP_ABSOLUTE 34					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_FAST 2 ( s1 )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY				      EQUILIBRIUM_INDEX_OF_AN_ARRAY				    EQUILIBRIUM_INDEX_OF_AN_ARRAY				  EQUILIBRIUM_INDEX_OF_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object equilibrium at 0x7f33e2653ed0, fi def equilibrium ( arr ) :					    def equilibrium ( arr ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  leftsum = 0						    	leftsum = 0						  
2 STORE_FAST 1 ( leftsum )				      	  rightsum = 0						    	rightsum = 0						  
							      	  n = len ( arr )					    	n = len ( arr )						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 2 ( rightsum )				      	      leftsum = 0					    	    leftsum = 0						  
							      	      rightsum = 0					    	    rightsum = 0					  
4 8 LOAD_GLOBAL 0 ( len )				      	      for j in range ( i ) :				    	    for j in range ( i ) :				  
10 LOAD_FAST 0 ( arr )					      		  leftsum += arr [ j ]				    		leftsum += arr [ j ]				  
12 CALL_FUNCTION 1					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
14 STORE_FAST 3 ( n )					      		  rightsum += arr [ j ]				    		rightsum += arr [ j ]				  
							      	      if leftsum == rightsum :				    	    if leftsum == rightsum :				  
5 16 SETUP_LOOP 102 ( to 120 )				      		  return i					    		return i					  
18 LOAD_GLOBAL 1 ( range )				      	  return - 1						    	return - 1						  
20 LOAD_FAST 3 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 90 ( to 118 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_CONST 1 ( 0 )					      								    								  
32 STORE_FAST 1 ( leftsum )				      								    								  
							      								    								  
7 34 LOAD_CONST 1 ( 0 )					      								    								  
36 STORE_FAST 2 ( rightsum )				      								    								  
							      								    								  
8 38 SETUP_LOOP 28 ( to 68 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 16 ( to 66 )				      								    								  
50 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 52 LOAD_FAST 1 ( leftsum )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( leftsum )				      								    								  
64 JUMP_ABSOLUTE 48					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
10 >> 68 SETUP_LOOP 34 ( to 104 )			      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 3 ( n )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 16 ( to 102 )				      								    								  
86 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( rightsum )				      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 2 ( rightsum )				      								    								  
100 JUMP_ABSOLUTE 84					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
12 >> 104 LOAD_FAST 1 ( leftsum )			      								    								  
106 LOAD_FAST 2 ( rightsum )				      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 26				      								    								  
							      								    								  
13 112 LOAD_FAST 4 ( i )				      								    								  
114 RETURN_VALUE					      								    								  
116 JUMP_ABSOLUTE 26					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_CONST 3 ( - 1 )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PALINDROME_K_DIGITS					      NTH_PALINDROME_K_DIGITS					    NTH_PALINDROME_K_DIGITS					  NTH_PALINDROME_K_DIGITS
--							      --							    --								  --
Disassembly of <code object nthPalindrome at 0x7f33e2653f60,  def nthPalindrome ( n , k ) :				    def nthPalindrome ( n , k = 0 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k & 1 ) :					    	if k & 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      temp = k // 2					    	    temp = ( k // 2 )					  
4 BINARY_AND						      	  else :						    	else :							  
6 POP_JUMP_IF_FALSE 18					      	      temp = k // 2 - 1					    	    temp = ( k // 2 ) - 1				  
							      	  palindrome = 10 ** temp				    	palindrome = 10 ** temp					  
3 8 LOAD_FAST 1 ( k )					      	  palindrome = palindrome + n - 1			    	palindrome = palindrome + n - 1				  
10 LOAD_CONST 2 ( 2 )					      	  print ( palindrome , end = "" )			    	print ( palindrome , end = "" )				  
12 BINARY_FLOOR_DIVIDE					      	  if ( k & 1 ) :					    	if k & 1 :						  
14 STORE_FAST 2 ( temp )				      	      palindrome = palindrome // 10			    	    palindrome = palindrome // 10			  
16 JUMP_FORWARD 12 ( to 30 )				      	  while ( palindrome ) :				    	while palindrome :					  
							      	      print ( palindrome % 10 , end = "" )		    	    print ( palindrome % 10 , end = "" )		  
5 >> 18 LOAD_FAST 1 ( k )				      	      palindrome = palindrome // 10			    	    palindrome = palindrome // 10			  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_FLOOR_DIVIDE					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
6 >> 30 LOAD_CONST 3 ( 10 )				      								    								  
32 LOAD_FAST 2 ( temp )					      								    								  
34 BINARY_POWER						      								    								  
36 STORE_FAST 3 ( palindrome )				      								    								  
							      								    								  
7 38 LOAD_FAST 3 ( palindrome )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 3 ( palindrome )				      								    								  
							      								    								  
8 50 LOAD_GLOBAL 0 ( print )				      								    								  
52 LOAD_FAST 3 ( palindrome )				      								    								  
54 LOAD_CONST 4 ( '' )					      								    								  
56 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
58 CALL_FUNCTION_KW 2					      								    								  
60 POP_TOP						      								    								  
							      								    								  
9 62 LOAD_FAST 1 ( k )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_AND						      								    								  
68 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
10 70 LOAD_FAST 3 ( palindrome )			      								    								  
72 LOAD_CONST 3 ( 10 )					      								    								  
74 BINARY_FLOOR_DIVIDE					      								    								  
76 STORE_FAST 3 ( palindrome )				      								    								  
							      								    								  
11 >> 78 SETUP_LOOP 32 ( to 112 )			      								    								  
>> 80 LOAD_FAST 3 ( palindrome )			      								    								  
82 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
12 84 LOAD_GLOBAL 0 ( print )				      								    								  
86 LOAD_FAST 3 ( palindrome )				      								    								  
88 LOAD_CONST 3 ( 10 )					      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 4 ( '' )					      								    								  
94 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
96 CALL_FUNCTION_KW 2					      								    								  
98 POP_TOP						      								    								  
							      								    								  
13 100 LOAD_FAST 3 ( palindrome )			      								    								  
102 LOAD_CONST 3 ( 10 )					      								    								  
104 BINARY_FLOOR_DIVIDE					      								    								  
106 STORE_FAST 3 ( palindrome )				      								    								  
108 JUMP_ABSOLUTE 80					      								    								  
>> 110 POP_BLOCK					      								    								  
>> 112 LOAD_CONST 0 ( None )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			      CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			    CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			  CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND
--							      --							    --								  --
Disassembly of <code object calcAngle at 0x7f33e2644930, file def calcAngle ( h , m ) :					    def calcAngle ( h , m ) :					  success : None
2 0 LOAD_FAST 0 ( h )					      	  if ( h < 0 or m < 0 or h > 12 or m > 60 ) :		    	if h < 0 or m < 0 or h > 12 or m > 60 :			  
2 LOAD_CONST 1 ( 0 )					      	      print ( 'Wrong input' )				    	    print ( "Wrong input" )				  
4 COMPARE_OP 0 ( < )					      	  if ( h == 12 ) :					    	if h == 12 :						  
6 POP_JUMP_IF_TRUE 32					      	      h = 0						    	    h = 0						  
8 LOAD_FAST 1 ( m )					      	  if ( m == 60 ) :					    	if m == 60 :						  
10 LOAD_CONST 1 ( 0 )					      	      m = 0						    	    m = 0						  
12 COMPARE_OP 0 ( < )					      	  hour_angle = 0.5 * ( h * 60 + m )			    	hour_angle = 0.5 * ( h * 60 + m )			  
14 POP_JUMP_IF_TRUE 32					      	  minute_angle = 6 * m					    	minute_angle = 6 * m					  
16 LOAD_FAST 0 ( h )					      	  angle = abs ( hour_angle - minute_angle )		    	angle = abs ( hour_angle - minute_angle )		  
18 LOAD_CONST 2 ( 12 )					      	  angle = min ( 360 - angle , angle )			    	angle = min ( 360 - angle , angle )			  
20 COMPARE_OP 4 ( > )					      	  return angle						    	angle = min ( 360 - angle , angle )			  
22 POP_JUMP_IF_TRUE 32					      								    	return angle						  
24 LOAD_FAST 1 ( m )					      								    								  
26 LOAD_CONST 3 ( 60 )					      								    								  
28 COMPARE_OP 4 ( > )					      								    								  
30 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
3 >> 32 LOAD_GLOBAL 0 ( print )				      								    								  
34 LOAD_CONST 4 ( 'Wrong input' )			      								    								  
36 CALL_FUNCTION 1					      								    								  
38 POP_TOP						      								    								  
							      								    								  
4 >> 40 LOAD_FAST 0 ( h )				      								    								  
42 LOAD_CONST 2 ( 12 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 48 LOAD_CONST 1 ( 0 )					      								    								  
50 STORE_FAST 0 ( h )					      								    								  
							      								    								  
6 >> 52 LOAD_FAST 1 ( m )				      								    								  
54 LOAD_CONST 3 ( 60 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 60 LOAD_CONST 1 ( 0 )					      								    								  
62 STORE_FAST 1 ( m )					      								    								  
							      								    								  
8 >> 64 LOAD_CONST 5 ( 0.5 )				      								    								  
66 LOAD_FAST 0 ( h )					      								    								  
68 LOAD_CONST 3 ( 60 )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 LOAD_FAST 1 ( m )					      								    								  
74 BINARY_ADD						      								    								  
76 BINARY_MULTIPLY					      								    								  
78 STORE_FAST 2 ( hour_angle )				      								    								  
							      								    								  
9 80 LOAD_CONST 6 ( 6 )					      								    								  
82 LOAD_FAST 1 ( m )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 STORE_FAST 3 ( minute_angle )			      								    								  
							      								    								  
10 88 LOAD_GLOBAL 1 ( abs )				      								    								  
90 LOAD_FAST 2 ( hour_angle )				      								    								  
92 LOAD_FAST 3 ( minute_angle )				      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 STORE_FAST 4 ( angle )				      								    								  
							      								    								  
11 100 LOAD_GLOBAL 2 ( min )				      								    								  
102 LOAD_CONST 7 ( 360 )				      								    								  
104 LOAD_FAST 4 ( angle )				      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_FAST 4 ( angle )				      								    								  
110 CALL_FUNCTION 2					      								    								  
112 STORE_FAST 4 ( angle )				      								    								  
							      								    								  
12 114 LOAD_FAST 4 ( angle )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION			      SORTING_USING_TRIVIAL_HASH_FUNCTION			    SORTING_USING_TRIVIAL_HASH_FUNCTION				  SORTING_USING_TRIVIAL_HASH_FUNCTION
--							      --							    --								  --
Disassembly of <code object sortUsingHash at 0x7f33e2653f60,  def sortUsingHash ( a , n ) :				    def sortUsingHash ( a , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  Max = max ( a )					    	Max = max ( a )						  
2 LOAD_FAST 0 ( a )					      	  Hash = [ 0 ] * ( Max + 1 )				    	Hash = [ 0 ] * ( Max + 1 )				  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 2 ( Max )					      	      Hash [ a [ i ] ] += 1				    	    Hash [ a [ i ] ] += 1				  
							      	  for i in range ( 0 , Max + 1 ) :			    	for i in range ( 0 , Max + 1 ) :			  
3 8 LOAD_CONST 1 ( 0 )					      	      if Hash [ i ] != 0 :				    	    if Hash [ i ] != 0 :				  
10 BUILD_LIST 1						      		  for j in range ( 0 , Hash [ i ] ) :		    		for j in range ( 0 , Hash [ i ] ) :		  
12 LOAD_FAST 2 ( Max )					      		      print ( i , end = " " )			    		    print ( i , end = ' ' )			  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 STORE_FAST 3 ( Hash )				      								    								  
							      								    								  
4 22 SETUP_LOOP 38 ( to 62 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 24 ( to 60 )				      								    								  
36 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 3 ( Hash )				      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 DUP_TOP_TWO						      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 ROT_THREE						      								    								  
56 STORE_SUBSCR						      								    								  
58 JUMP_ABSOLUTE 34					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 SETUP_LOOP 70 ( to 134 )			      								    								  
64 LOAD_GLOBAL 1 ( range )				      								    								  
66 LOAD_CONST 1 ( 0 )					      								    								  
68 LOAD_FAST 2 ( Max )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_FUNCTION 2					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 52 ( to 132 )				      								    								  
80 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 82 LOAD_FAST 3 ( Hash )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 1 ( 0 )					      								    								  
90 COMPARE_OP 3 ( != )					      								    								  
92 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
8 94 SETUP_LOOP 34 ( to 130 )				      								    								  
96 LOAD_GLOBAL 1 ( range )				      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 LOAD_FAST 3 ( Hash )				      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 2					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 16 ( to 128 )				      								    								  
112 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 114 LOAD_GLOBAL 2 ( print )				      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 LOAD_CONST 3 ( ' ' )				      								    								  
120 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
122 CALL_FUNCTION_KW 2					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 110					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 JUMP_ABSOLUTE 78					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			      FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			    FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT				  FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT
--							      --							    --								  --
Disassembly of <code object possibleOrNot at 0x7f33e2644f60,  def possibleOrNot ( a1 , a2 , b1 , b2 , c1 , c2 ) :	    def possibleOrNot ( a1 , a2 , b1 , b2 , b1 ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( pow )				      	  dis1 = ( pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 ) )	    	dis1 = pow ( ( b1 - a1 ) , 2 ) + pow ( b2 - a2 , 2 )	  
2 LOAD_FAST 2 ( b1 )					      	  dis2 = ( pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 ) )	    	dis2 = pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 )	  
4 LOAD_FAST 0 ( a1 )					      	  if ( dis1 != dis2 ) :					    	if dis1 != dis2 :					  
6 BINARY_SUBTRACT					      	      print ( "No" )					    	    print ( "No" )					  
8 LOAD_CONST 1 ( 2 )					      	  elif ( b1 == ( ( a1 + c1 ) // 2.0 ) and b2 == ( ( a2 + c2 	elif b1 == a1 + c1 // 2.0 and b2 == a2 + c2 // 2.0 :	  
10 CALL_FUNCTION 2					      	      print ( "No" )					    	    print ( "No" )					  
12 LOAD_GLOBAL 0 ( pow )				      	  else :						    	else :							  
14 LOAD_FAST 3 ( b2 )					      	      print ( "Yes" )					    	    print ( "Yes" )					  
16 LOAD_FAST 1 ( a2 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_CONST 1 ( 2 )					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 6 ( dis1 )				      								    								  
							      								    								  
3 28 LOAD_GLOBAL 0 ( pow )				      								    								  
30 LOAD_FAST 4 ( c1 )					      								    								  
32 LOAD_FAST 2 ( b1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 LOAD_GLOBAL 0 ( pow )				      								    								  
42 LOAD_FAST 5 ( c2 )					      								    								  
44 LOAD_FAST 3 ( b2 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_CONST 1 ( 2 )					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 7 ( dis2 )				      								    								  
							      								    								  
4 56 LOAD_FAST 6 ( dis1 )				      								    								  
58 LOAD_FAST 7 ( dis2 )					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
5 64 LOAD_GLOBAL 1 ( print )				      								    								  
66 LOAD_CONST 2 ( 'No' )				      								    								  
68 CALL_FUNCTION 1					      								    								  
70 POP_TOP						      								    								  
72 JUMP_FORWARD 50 ( to 124 )				      								    								  
							      								    								  
6 >> 74 LOAD_FAST 2 ( b1 )				      								    								  
76 LOAD_FAST 0 ( a1 )					      								    								  
78 LOAD_FAST 4 ( c1 )					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_CONST 3 ( 2.0 )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 116				      								    								  
90 LOAD_FAST 3 ( b2 )					      								    								  
92 LOAD_FAST 1 ( a2 )					      								    								  
94 LOAD_FAST 5 ( c2 )					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_CONST 3 ( 2.0 )					      								    								  
100 BINARY_FLOOR_DIVIDE					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
7 106 LOAD_GLOBAL 1 ( print )				      								    								  
108 LOAD_CONST 2 ( 'No' )				      								    								  
110 CALL_FUNCTION 1					      								    								  
112 POP_TOP						      								    								  
114 JUMP_FORWARD 8 ( to 124 )				      								    								  
							      								    								  
9 >> 116 LOAD_GLOBAL 1 ( print )			      								    								  
118 LOAD_CONST 4 ( 'Yes' )				      								    								  
120 CALL_FUNCTION 1					      								    								  
122 POP_TOP						      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	      MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	    MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	  MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION
--							      --							    --								  --
Disassembly of <code object findPlatform at 0x7f33e26494b0, f def findPlatform ( arr , dep , n ) :			    def findPlatform ( arr , dep , n ) :			  timeout : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  dep.sort ( )						    	dep.sort ( )						  
4 CALL_METHOD 0						      	  plat_needed = 1					    	plat_needed = 1						  
6 POP_TOP						      	  result = 1						    	result = 1						  
							      	  i = 1							    	i = 0							  
3 8 LOAD_FAST 1 ( dep )					      	  j = 0							    	j = 0							  
10 LOAD_METHOD 0 ( sort )				      	  while ( i < n and j < n ) :				    	while i < n and j < n :					  
12 CALL_METHOD 0					      	      if ( arr [ i ] < dep [ j ] ) :			    	    if arr [ i ] < dep [ j ] :				  
14 POP_TOP						      		  plat_needed += 1				    		plat_needed += 1				  
							      		  i += 1					    		i += 1						  
4 16 LOAD_CONST 1 ( 1 )					      		  if ( plat_needed > result ) :			    		if plat_needed > result :			  
18 STORE_FAST 3 ( plat_needed )				      		      result = plat_needed			    		    result = plat_needed			  
							      	      else :						    		else :						  
5 20 LOAD_CONST 1 ( 1 )					      		  plat_needed -= 1				    		    plat_needed -= 1				  
22 STORE_FAST 4 ( result )				      		  j += 1					    		    j += 1					  
							      	  return result						    	return result						  
6 24 LOAD_CONST 1 ( 1 )					      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 28 LOAD_CONST 2 ( 0 )					      								    								  
30 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 32 SETUP_LOOP 82 ( to 116 )				      								    								  
>> 34 LOAD_FAST 5 ( i )					      								    								  
36 LOAD_FAST 2 ( n )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 114				      								    								  
42 LOAD_FAST 6 ( j )					      								    								  
44 LOAD_FAST 2 ( n )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
9 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 1 ( dep )					      								    								  
58 LOAD_FAST 6 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
10 66 LOAD_FAST 3 ( plat_needed )			      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 3 ( plat_needed )				      								    								  
							      								    								  
11 74 LOAD_FAST 5 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( i )					      								    								  
							      								    								  
12 82 LOAD_FAST 3 ( plat_needed )			      								    								  
84 LOAD_FAST 4 ( result )				      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
13 90 LOAD_FAST 3 ( plat_needed )			      								    								  
92 STORE_FAST 4 ( result )				      								    								  
94 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
15 >> 96 LOAD_FAST 3 ( plat_needed )			      								    								  
98 LOAD_CONST 1 ( 1 )					      								    								  
100 INPLACE_SUBTRACT					      								    								  
102 STORE_FAST 3 ( plat_needed )			      								    								  
							      								    								  
16 104 LOAD_FAST 6 ( j )				      								    								  
106 LOAD_CONST 1 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 6 ( j )					      								    								  
>> 112 JUMP_ABSOLUTE 34					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
17 >> 116 LOAD_FAST 4 ( result )			      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY     FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	    FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object printPrevSmaller at 0x7f33e264493 def printPrevSmaller ( arr , n ) :			    def printPrevSmaller ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "_, " , end = "" )				    	print ( "_, " , end = "" )				  
2 LOAD_CONST 1 ( '_, ' )				      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
4 LOAD_CONST 2 ( '' )					      	      for j in range ( i - 1 , - 2 , - 1 ) :		    	    for j in range ( i - 1 , - 2 , - 1 ) :		  
6 LOAD_CONST 3 ( ( 'end' , ) )				      		  if ( arr [ j ] < arr [ i ] ) :		    		if arr [ j ] < arr [ i ] :			  
8 CALL_FUNCTION_KW 2					      		      print ( arr [ j ] , ", " , end = "" )	    		    print ( arr [ j ] , end = "" )		  
10 POP_TOP						      		      break					    		    break					  
							      	      if ( j == - 1 ) :					    	    if j == - 1 :					  
3 12 SETUP_LOOP 100 ( to 114 )				      		  print ( "_, " , end = "" )			    		print ( "_, " , end = "" )			  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 1 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 86 ( to 112 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 SETUP_LOOP 60 ( to 90 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 4 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 5 ( - 2 )					      								    								  
40 LOAD_CONST 6 ( - 1 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 40 ( to 88 )				      								    								  
48 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 3 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 66 LOAD_GLOBAL 0 ( print )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 7 ( ', ' )				      								    								  
76 LOAD_CONST 2 ( '' )					      								    								  
78 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 3					      								    								  
82 POP_TOP						      								    								  
							      								    								  
7 84 BREAK_LOOP						      								    								  
86 JUMP_ABSOLUTE 46					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
8 >> 90 LOAD_FAST 3 ( j )				      								    								  
92 LOAD_CONST 6 ( - 1 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
9 98 LOAD_GLOBAL 0 ( print )				      								    								  
100 LOAD_CONST 1 ( '_, ' )				      								    								  
102 LOAD_CONST 2 ( '' )					      								    								  
104 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 24					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ARRI					      REARRANGE_ARRAY_ARRI					    REARRANGE_ARRAY_ARRI					  REARRANGE_ARRAY_ARRI
--							      --							    --								  --
Disassembly of <code object fix at 0x7f33e2653f60, file "<dis def fix ( A , len ) :					    def fix ( A , len ) :					  script_not_found : None
2 0 SETUP_LOOP 128 ( to 130 )				      	  for i in range ( 0 , len ) :				    	for i in range ( 0 , len ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if ( A [ i ] != - 1 and A [ i ] != i ) :		    	    if A [ i ] != - 1 and A [ i ] != i :		  
4 LOAD_CONST 1 ( 0 )					      		  x = A [ i ] ;					    		x = A [ i ]					  
6 LOAD_FAST 1 ( len )					      		  while ( A [ x ] != - 1 and A [ x ] != x ) :	    		while A [ x ] != - 1 and A [ x ] != x :		  
8 CALL_FUNCTION 2					      		      y = A [ x ]				    		    y = A [ x ]					  
10 GET_ITER						      		      A [ x ] = x				    		    A [ x ] = y					  
>> 12 FOR_ITER 114 ( to 128 )				      		      x = y					    		    x = y					  
14 STORE_FAST 2 ( i )					      		  A [ x ] = x ;					    	    A [ x ] = x						  
							      		  if ( A [ i ] != i ) :				    	    if A [ i ] != i :					  
3 16 LOAD_FAST 0 ( A )					      		      A [ i ] = - 1 ;				    		A [ i ] = - 1					  
18 LOAD_FAST 2 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_CONST 2 ( - 1 )					      								    								  
24 COMPARE_OP 3 ( != )					      								    								  
26 POP_JUMP_IF_FALSE 12					      								    								  
28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( A )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_FAST 3 ( x )					      								    								  
							      								    								  
5 48 SETUP_LOOP 48 ( to 98 )				      								    								  
>> 50 LOAD_FAST 0 ( A )					      								    								  
52 LOAD_FAST 3 ( x )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 2 ( - 1 )					      								    								  
58 COMPARE_OP 3 ( != )					      								    								  
60 POP_JUMP_IF_FALSE 96					      								    								  
62 LOAD_FAST 0 ( A )					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 3 ( x )					      								    								  
70 COMPARE_OP 3 ( != )					      								    								  
72 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
6 74 LOAD_FAST 0 ( A )					      								    								  
76 LOAD_FAST 3 ( x )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 4 ( y )					      								    								  
							      								    								  
7 82 LOAD_FAST 3 ( x )					      								    								  
84 LOAD_FAST 0 ( A )					      								    								  
86 LOAD_FAST 3 ( x )					      								    								  
88 STORE_SUBSCR						      								    								  
							      								    								  
8 90 LOAD_FAST 4 ( y )					      								    								  
92 STORE_FAST 3 ( x )					      								    								  
94 JUMP_ABSOLUTE 50					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
9 >> 98 LOAD_FAST 3 ( x )				      								    								  
100 LOAD_FAST 0 ( A )					      								    								  
102 LOAD_FAST 3 ( x )					      								    								  
104 STORE_SUBSCR					      								    								  
							      								    								  
10 106 LOAD_FAST 0 ( A )				      								    								  
108 LOAD_FAST 2 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 2 ( i )					      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 12				      								    								  
							      								    								  
11 118 LOAD_CONST 2 ( - 1 )				      								    								  
120 LOAD_FAST 0 ( A )					      								    								  
122 LOAD_FAST 2 ( i )					      								    								  
124 STORE_SUBSCR					      								    								  
126 JUMP_ABSOLUTE 12					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT	      REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		    REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		  REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT
--							      --							    --								  --
Disassembly of <code object solve at 0x7f33e2644f60, file "<d def solve ( dp , a , low , high , turn ) :		    def solve ( dp , a , low , high , turn = 0 ) :		  script_not_found : None
2 0 LOAD_FAST 2 ( low )					      	  if ( low == high ) :					    	if low == high :					  
2 LOAD_FAST 3 ( high )					      	      return a [ low ] * turn				    	    return a [ low ] * turn				  
4 COMPARE_OP 2 ( == )					      	  if ( dp [ low ] [ high ] != 0 ) :			    	if dp [ low ] [ high ] != 0 :				  
6 POP_JUMP_IF_FALSE 20					      	      return dp [ low ] [ high ]			    	    return dp [ low ] [ high ]				  
							      	  dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp 	dp = max ( a [ low ] * turn , solve ( dp , a , low + 1 ,  
3 8 LOAD_FAST 1 ( a )					      	  return dp [ low ] [ high ]				    	return dp [ low ] [ high ]				  
10 LOAD_FAST 2 ( low )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 LOAD_FAST 4 ( turn )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( dp )				      								    								  
22 LOAD_FAST 2 ( low )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 3 ( high )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 3 ( != )					      								    								  
34 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( dp )					      								    								  
38 LOAD_FAST 2 ( low )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( high )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
6 >> 48 LOAD_GLOBAL 0 ( max )				      								    								  
50 LOAD_FAST 1 ( a )					      								    								  
52 LOAD_FAST 2 ( low )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( turn )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_GLOBAL 1 ( solve )				      								    								  
62 LOAD_FAST 0 ( dp )					      								    								  
64 LOAD_FAST 1 ( a )					      								    								  
66 LOAD_FAST 2 ( low )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 LOAD_FAST 3 ( high )					      								    								  
74 LOAD_FAST 4 ( turn )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 5					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_FAST 1 ( a )					      								    								  
86 LOAD_FAST 3 ( high )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 4 ( turn )					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 LOAD_GLOBAL 1 ( solve )				      								    								  
96 LOAD_FAST 0 ( dp )					      								    								  
98 LOAD_FAST 1 ( a )					      								    								  
100 LOAD_FAST 2 ( low )					      								    								  
102 LOAD_FAST 3 ( high )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_FAST 4 ( turn )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 CALL_FUNCTION 5					      								    								  
116 BINARY_ADD						      								    								  
118 CALL_FUNCTION 2					      								    								  
120 LOAD_FAST 0 ( dp )					      								    								  
122 LOAD_FAST 2 ( low )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 3 ( high )				      								    								  
128 STORE_SUBSCR					      								    								  
							      								    								  
7 130 LOAD_FAST 0 ( dp )				      								    								  
132 LOAD_FAST 2 ( low )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_FAST 3 ( high )				      								    								  
138 BINARY_SUBSCR					      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object findPair at 0x7f33e2644930, file  def findPair ( arr , n ) :				    def findPair ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( False )				      	  found = False						    	found = False						  
2 STORE_FAST 2 ( found )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 108 ( to 114 )				      		  for k in range ( 0 , n ) :			    		for k in range ( 0 , n ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      if ( arr [ i ] + arr [ j ] == arr [ k ] ) :   		    if arr [ i ] == arr [ j ] == arr [ k ] :	  
8 LOAD_CONST 2 ( 0 )					      			  print ( arr [ i ] , arr [ j ] )	    			print ( arr [ i ] , arr [ j ] )		  
10 LOAD_FAST 1 ( n )					      			  found = True				    			found = True				  
12 CALL_FUNCTION 2					      	  if ( found == False ) :				    	if found == False :					  
14 GET_ITER						      	      print ( "Not exist" )				    	    print ( "Not exist" )				  
>> 16 FOR_ITER 94 ( to 112 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 88 ( to 110 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 70 ( to 108 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 SETUP_LOOP 64 ( to 106 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_CONST 2 ( 0 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 50 ( to 104 )				      								    								  
54 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 5 ( k )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 80 LOAD_GLOBAL 1 ( print )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 POP_TOP						      								    								  
							      								    								  
8 98 LOAD_CONST 4 ( True )				      								    								  
100 STORE_FAST 2 ( found )				      								    								  
102 JUMP_ABSOLUTE 52					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 36					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 JUMP_ABSOLUTE 16					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
9 >> 114 LOAD_FAST 2 ( found )				      								    								  
116 LOAD_CONST 1 ( False )				      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
10 122 LOAD_GLOBAL 1 ( print )				      								    								  
124 LOAD_CONST 5 ( 'Not exist' )			      								    								  
126 CALL_FUNCTION 1					      								    								  
128 POP_TOP						      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT					      MAJORITY_ELEMENT						    MAJORITY_ELEMENT						  MAJORITY_ELEMENT
--							      --							    --								  --
Disassembly of <code object findMajority at 0x7f33e26494b0, f def findMajority ( arr , n ) :				    def findMajority ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxCount = 0 ;					    	maxCount = 0						  
2 STORE_FAST 2 ( maxCount )				      	  index = - 1						    	index = - 1						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 4 LOAD_CONST 2 ( - 1 )				      	      count = 0						    	    count = 0						  
6 STORE_FAST 3 ( index )				      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
							      		  if ( arr [ i ] == arr [ j ] ) :		    		if arr [ i ] == arr [ j ] :			  
4 8 SETUP_LOOP 78 ( to 88 )				      		      count += 1				    		    count += 1					  
10 LOAD_GLOBAL 0 ( range )				      	      if ( count > maxCount ) :				    	    if count > maxCount :				  
12 LOAD_FAST 1 ( n )					      		  maxCount = count				    		maxCount = count				  
14 CALL_FUNCTION 1					      		  index = i					    		index = i					  
16 GET_ITER						      	  if ( maxCount > n // 2 ) :				    	if maxCount > n // 2 :					  
>> 18 FOR_ITER 66 ( to 86 )				      	      print ( arr [ index ] )				    	    print ( arr [ index ] )				  
20 STORE_FAST 4 ( i )					      	  else :						    	else :							  
							      	      print ( "No Majority Element" )			    	    print ( "No Majority Element" )			  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 26 SETUP_LOOP 40 ( to 68 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 28 ( to 66 )				      								    								  
38 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
8 56 LOAD_FAST 5 ( count )				      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 5 ( count )				      								    								  
64 JUMP_ABSOLUTE 36					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 5 ( count )				      								    								  
70 LOAD_FAST 2 ( maxCount )				      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
10 76 LOAD_FAST 5 ( count )				      								    								  
78 STORE_FAST 2 ( maxCount )				      								    								  
							      								    								  
11 80 LOAD_FAST 4 ( i )					      								    								  
82 STORE_FAST 3 ( index )				      								    								  
84 JUMP_ABSOLUTE 18					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
12 >> 88 LOAD_FAST 2 ( maxCount )			      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 LOAD_CONST 4 ( 2 )					      								    								  
94 BINARY_FLOOR_DIVIDE					      								    								  
96 COMPARE_OP 4 ( > )					      								    								  
98 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
13 100 LOAD_GLOBAL 1 ( print )				      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 3 ( index )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 POP_TOP						      								    								  
112 JUMP_FORWARD 8 ( to 122 )				      								    								  
							      								    								  
15 >> 114 LOAD_GLOBAL 1 ( print )			      								    								  
116 LOAD_CONST 5 ( 'No Majority Element' )		      								    								  
118 CALL_FUNCTION 1					      								    								  
120 POP_TOP						      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS	  COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS
--							      --							    --								  --
Disassembly of <code object chordCnt at 0x7f33e2653ed0, file  def chordCnt ( A ) :					    def chordCnt ( A ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  n = 2 * A						    	n = 2 * A						  
2 LOAD_FAST 0 ( A )					      	  dpArray = [ 0 ] * ( n + 1 )				    	dpArray = [ 0 ] * n + 1					  
4 BINARY_MULTIPLY					      	  dpArray [ 0 ] = 1					    	dpArray [ 0 ] = 1					  
6 STORE_FAST 1 ( n )					      	  dpArray [ 2 ] = 1					    	dpArray [ 2 ] = 1					  
							      	  for i in range ( 4 , n + 1 , 2 ) :			    	for i in range ( 4 , n + 1 , 2 ) :			  
3 8 LOAD_CONST 2 ( 0 )					      	      for j in range ( 0 , i - 1 , 2 ) :		    	    for j in range ( 0 , i - 1 , 2 ) :			  
10 BUILD_LIST 1						      		  dpArray [ i ] += ( dpArray [ j ] * dpArray [ i -  		dpArray [ i ] += ( dpArray [ j ] - dpArray [ i -  
12 LOAD_FAST 1 ( n )					      	  return int ( dpArray [ n ] )				    return int ( dpArray [ n ] )				  
14 LOAD_CONST 3 ( 1 )					      								    								  
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 STORE_FAST 2 ( dpArray )				      								    								  
							      								    								  
4 22 LOAD_CONST 3 ( 1 )					      								    								  
24 LOAD_FAST 2 ( dpArray )				      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 LOAD_CONST 3 ( 1 )					      								    								  
32 LOAD_FAST 2 ( dpArray )				      								    								  
34 LOAD_CONST 1 ( 2 )					      								    								  
36 STORE_SUBSCR						      								    								  
							      								    								  
6 38 SETUP_LOOP 86 ( to 126 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_CONST 4 ( 4 )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_CONST 1 ( 2 )					      								    								  
52 CALL_FUNCTION 3					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 66 ( to 124 )				      								    								  
58 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 60 SETUP_LOOP 60 ( to 122 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_CONST 2 ( 0 )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_CONST 1 ( 2 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 40 ( to 120 )				      								    								  
80 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 82 LOAD_FAST 2 ( dpArray )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 DUP_TOP_TWO						      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 2 ( dpArray )				      								    								  
92 LOAD_FAST 4 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 2 ( dpArray )				      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 LOAD_CONST 1 ( 2 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 LOAD_FAST 4 ( j )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 BINARY_SUBSCR					      								    								  
110 BINARY_MULTIPLY					      								    								  
112 INPLACE_ADD						      								    								  
114 ROT_THREE						      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 78					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 56					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
9 >> 126 LOAD_GLOBAL 1 ( int )				      								    								  
128 LOAD_FAST 2 ( dpArray )				      								    								  
130 LOAD_FAST 1 ( n )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED	  CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED
--							      --							    --								  --
Disassembly of <code object areElementsContiguous at 0x7f33e2 def areElementsContiguous ( arr , n ) :			    def areElementsContiguous ( arr , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( max )				      	  max1 = max ( arr )					    	max1 = max ( arr )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( arr )					      	  min1 = min ( arr )					    	min1 = min ( arr )					  _sa.valid/CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS
4 CALL_FUNCTION 1					      	  m = max1 - min1 + 1					    	m = max1 - min1 + 1					  _DUPLICATES_ALLOWED.py", line 44     return True
6 STORE_FAST 2 ( max1 )					      	  if ( m > n ) :					    	if m > n :						     ^ SyntaxError: 'return' outside function
							      	      return False					    	    return False					  
3 8 LOAD_GLOBAL 1 ( min )				      	  visited = [ 0 ] * m					    	visited = [ 0 ] * m					  
10 LOAD_FAST 0 ( arr )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
12 CALL_FUNCTION 1					      	      visited [ arr [ i ] - min1 ] = True		    	    visited [ arr [ i ] - min1 ] = True			  
14 STORE_FAST 3 ( min1 )				      	  for i in range ( 0 , m ) :				    	for i in range ( 0 , m ) :				  
							      	      if ( visited [ i ] == False ) :			    	    if visited [ i ] == False :				  
4 16 LOAD_FAST 2 ( max1 )				      		  return False					    		return False					  
18 LOAD_FAST 3 ( min1 )					      	  return True						    return True							  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 4 ( m )					      								    								  
							      								    								  
5 28 LOAD_FAST 4 ( m )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 36 LOAD_CONST 2 ( False )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
7 >> 40 LOAD_CONST 3 ( 0 )				      								    								  
42 BUILD_LIST 1						      								    								  
44 LOAD_FAST 4 ( m )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 STORE_FAST 5 ( visited )				      								    								  
							      								    								  
8 50 SETUP_LOOP 34 ( to 86 )				      								    								  
52 LOAD_GLOBAL 2 ( range )				      								    								  
54 LOAD_CONST 3 ( 0 )					      								    								  
56 LOAD_FAST 1 ( n )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 20 ( to 84 )				      								    								  
64 STORE_FAST 6 ( i )					      								    								  
							      								    								  
9 66 LOAD_CONST 4 ( True )				      								    								  
68 LOAD_FAST 5 ( visited )				      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 6 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 3 ( min1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 62					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 SETUP_LOOP 34 ( to 122 )			      								    								  
88 LOAD_GLOBAL 2 ( range )				      								    								  
90 LOAD_CONST 3 ( 0 )					      								    								  
92 LOAD_FAST 4 ( m )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 20 ( to 120 )				      								    								  
100 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 102 LOAD_FAST 5 ( visited )				      								    								  
104 LOAD_FAST 6 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 2 ( False )				      								    								  
110 COMPARE_OP 2 ( == )					      								    								  
112 POP_JUMP_IF_FALSE 98				      								    								  
							      								    								  
12 114 LOAD_CONST 2 ( False )				      								    								  
116 RETURN_VALUE					      								    								  
118 JUMP_ABSOLUTE 98					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
13 >> 122 LOAD_CONST 4 ( True )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1
--							      --							    --								  --
Disassembly of <code object maxLen at 0x7f33e2653ed0, file "< def maxLen ( arr ) :					    def maxLen ( arr ) :					  script_not_found : None
2 0 BUILD_MAP 0						      	  hash_map = { }					    	hash_map = { }						  
2 STORE_FAST 1 ( hash_map )				      	  max_len = 0						    	max_len = 0						  
							      	  curr_sum = 0						    	curr_sum = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( len ( arr ) ) :			    	for i in range ( len ( arr ) ) :			  
6 STORE_FAST 2 ( max_len )				      	      curr_sum += arr [ i ]				    	    curr_sum += arr [ i ]				  
							      	      if arr [ i ] is 0 and max_len is 0 :		    	    if arr [ i ] is 0 and max_len is 0 :		  
4 8 LOAD_CONST 1 ( 0 )					      		  max_len = 1					    		max_len = 1					  
10 STORE_FAST 3 ( curr_sum )				      	      if curr_sum is 0 :				    	    if curr_sum is 0 :					  
							      		  max_len = i + 1				    		max_len = i + 1					  
5 12 SETUP_LOOP 108 ( to 122 )				      	      if curr_sum in hash_map :				    	    if curr_sum in hash_map :				  
14 LOAD_GLOBAL 0 ( range )				      		  max_len = max ( max_len , i - hash_map [ curr_sum 		max_len = max ( max_len , i - hash_map [ curr_sum 
16 LOAD_GLOBAL 1 ( len )				      	      else :						    	    else :						  
18 LOAD_FAST 0 ( arr )					      		  hash_map [ curr_sum ] = i			    		hash_map [ curr_sum ] = i			  
20 CALL_FUNCTION 1					      	  return max_len					    	return max_len						  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 92 ( to 120 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 3 ( curr_sum )				      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 8 ( is )					      								    								  
52 POP_JUMP_IF_FALSE 66					      								    								  
54 LOAD_FAST 2 ( max_len )				      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 COMPARE_OP 8 ( is )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 62 LOAD_CONST 2 ( 1 )					      								    								  
64 STORE_FAST 2 ( max_len )				      								    								  
							      								    								  
9 >> 66 LOAD_FAST 3 ( curr_sum )			      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 8 ( is )					      								    								  
72 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 74 LOAD_FAST 4 ( i )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 2 ( max_len )				      								    								  
							      								    								  
11 >> 82 LOAD_FAST 3 ( curr_sum )			      								    								  
84 LOAD_FAST 1 ( hash_map )				      								    								  
86 COMPARE_OP 6 ( in )					      								    								  
88 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
12 90 LOAD_GLOBAL 2 ( max )				      								    								  
92 LOAD_FAST 2 ( max_len )				      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 LOAD_FAST 1 ( hash_map )				      								    								  
98 LOAD_FAST 3 ( curr_sum )				      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 STORE_FAST 2 ( max_len )				      								    								  
108 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
14 >> 110 LOAD_FAST 4 ( i )				      								    								  
112 LOAD_FAST 1 ( hash_map )				      								    								  
114 LOAD_FAST 3 ( curr_sum )				      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 26					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
15 >> 122 LOAD_FAST 2 ( max_len )			      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printPrevSmaller at 0x7f33e264493 def printPrevSmaller ( arr , n ) :			    def printPrevSmaller ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  S = list ( )						    	S = list ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( S )					      	      while ( len ( S ) > 0 and S [ - 1 ] >= arr [ i ] ) :  	    while len ( S ) > 0 and S [ - 1 ] >= arr [ i ] :	  
							      		  S.pop ( )					    		S.pop ( )					  
3 6 SETUP_LOOP 114 ( to 122 )				      	      if ( len ( S ) == 0 ) :				    	    if len ( S ) == 0 :					  
8 LOAD_GLOBAL 1 ( range )				      		  print ( "_, " , end = "" )			    		print ( "_, " , end = "" )			  
10 LOAD_FAST 1 ( n )					      	      else :						    	    else :						  
12 CALL_FUNCTION 1					      		  print ( S [ - 1 ] , end = ", " )		    		print ( S [ - 1 ] , end = ", " )		  
14 GET_ITER						      	      S.append ( arr [ i ] )				    	    S.append ( arr [ i ] )				  
>> 16 FOR_ITER 102 ( to 120 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 40 ( to 62 )				      								    								  
>> 22 LOAD_GLOBAL 2 ( len )				      								    								  
24 LOAD_FAST 2 ( S )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 4 ( > )					      								    								  
32 POP_JUMP_IF_FALSE 60					      								    								  
34 LOAD_FAST 2 ( S )					      								    								  
36 LOAD_CONST 2 ( - 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 5 ( >= )					      								    								  
48 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 50 LOAD_FAST 2 ( S )					      								    								  
52 LOAD_METHOD 3 ( pop )				      								    								  
54 CALL_METHOD 0					      								    								  
56 POP_TOP						      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_GLOBAL 2 ( len )				      								    								  
64 LOAD_FAST 2 ( S )					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
7 74 LOAD_GLOBAL 4 ( print )				      								    								  
76 LOAD_CONST 3 ( '_, ' )				      								    								  
78 LOAD_CONST 4 ( '' )					      								    								  
80 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
82 CALL_FUNCTION_KW 2					      								    								  
84 POP_TOP						      								    								  
86 JUMP_FORWARD 16 ( to 104 )				      								    								  
							      								    								  
9 >> 88 LOAD_GLOBAL 4 ( print )				      								    								  
90 LOAD_FAST 2 ( S )					      								    								  
92 LOAD_CONST 2 ( - 1 )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 6 ( ', ' )				      								    								  
98 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
100 CALL_FUNCTION_KW 2					      								    								  
102 POP_TOP						      								    								  
							      								    								  
10 >> 104 LOAD_FAST 2 ( S )				      								    								  
106 LOAD_METHOD 5 ( append )				      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 CALL_METHOD 1					      								    								  
116 POP_TOP						      								    								  
118 JUMP_ABSOLUTE 16					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1
--							      --							    --								  --
Disassembly of <code object areElementsContiguous at 0x7f33e2 def areElementsContiguous ( arr ) :			    def areElementsContiguous ( arr ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  us = set ( )						    	us = set ( )						  
2 CALL_FUNCTION 0					      	  for i in arr : us.add ( i )				    	for i in arr :						  
4 STORE_FAST 1 ( us )					      	  count = 1						    	    count = 1						  
							      	  curr_ele = arr [ 0 ] - 1				    	    curr_ele = arr [ 0 ] - 1				  
3 6 SETUP_LOOP 22 ( to 30 )				      	  while curr_ele in us :				    	    while curr_ele in us :				  
8 LOAD_FAST 0 ( arr )					      	      count += 1					    		count += 1					  
10 GET_ITER						      	      curr_ele -= 1					    		curr_ele -= 1					  
>> 12 FOR_ITER 14 ( to 28 )				      	  curr_ele = arr [ 0 ] + 1				    	    curr_ele = arr [ 0 ] + 1				  
14 STORE_FAST 2 ( i )					      	  while curr_ele in us :				    	    while curr_ele in us :				  
16 LOAD_FAST 1 ( us )					      	      count += 1					    		count += 1					  
18 LOAD_METHOD 1 ( add )				      	      curr_ele += 1					    		curr_ele += 1					  
20 LOAD_FAST 2 ( i )					      	  return ( count == len ( us ) )			    	    return count == len ( us )				  
22 CALL_METHOD 1					      								    								  
24 POP_TOP						      								    								  
26 JUMP_ABSOLUTE 12					      								    								  
>> 28 POP_BLOCK						      								    								  
							      								    								  
4 >> 30 LOAD_CONST 1 ( 1 )				      								    								  
32 STORE_FAST 3 ( count )				      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_CONST 2 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 STORE_FAST 4 ( curr_ele )				      								    								  
							      								    								  
6 46 SETUP_LOOP 28 ( to 76 )				      								    								  
>> 48 LOAD_FAST 4 ( curr_ele )				      								    								  
50 LOAD_FAST 1 ( us )					      								    								  
52 COMPARE_OP 6 ( in )					      								    								  
54 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
7 56 LOAD_FAST 3 ( count )				      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( count )				      								    								  
							      								    								  
8 64 LOAD_FAST 4 ( curr_ele )				      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 INPLACE_SUBTRACT					      								    								  
70 STORE_FAST 4 ( curr_ele )				      								    								  
72 JUMP_ABSOLUTE 48					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_CONST 2 ( 0 )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 1 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 4 ( curr_ele )				      								    								  
							      								    								  
10 88 SETUP_LOOP 28 ( to 118 )				      								    								  
>> 90 LOAD_FAST 4 ( curr_ele )				      								    								  
92 LOAD_FAST 1 ( us )					      								    								  
94 COMPARE_OP 6 ( in )					      								    								  
96 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
11 98 LOAD_FAST 3 ( count )				      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 3 ( count )				      								    								  
							      								    								  
12 106 LOAD_FAST 4 ( curr_ele )				      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 4 ( curr_ele )				      								    								  
114 JUMP_ABSOLUTE 90					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
13 >> 118 LOAD_FAST 3 ( count )				      								    								  
120 LOAD_GLOBAL 2 ( len )				      								    								  
122 LOAD_FAST 1 ( us )					      								    								  
124 CALL_FUNCTION 1					      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS			      SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				    SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				  SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS
--							      --							    --								  --
Disassembly of <code object count at 0x7f33e2644f60, file "<d def count ( n ) :						    def count ( n ) :						  success : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 4 ) :					    	if n < 4 :						  
2 LOAD_CONST 1 ( 4 )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 0 ( < )					      	  rem = n % 4						    	rem = n % 4						  
6 POP_JUMP_IF_FALSE 12					      	  if ( rem == 0 ) :					    	if rem == 0 :						  
							      	      return n // 4					    	    return n // 4					  
3 8 LOAD_CONST 2 ( - 1 )				      	  if ( rem == 1 ) :					    	if rem == 1 :						  
10 RETURN_VALUE						      	      if ( n < 9 ) :					    	    if n < 9 :						  
							      		  return - 1					    		return - 1					  
4 >> 12 LOAD_FAST 0 ( n )				      	      return ( n - 9 ) // 4 + 1				    	    return ( n - 9 ) // 4 + 1				  
14 LOAD_CONST 1 ( 4 )					      	  if ( rem == 2 ) :					    	if rem == 2 :						  
16 BINARY_MODULO					      	      return ( n - 6 ) // 4 + 1				    	    return ( n - 6 ) // 4 + 1				  
18 STORE_FAST 1 ( rem )					      	  if ( rem == 3 ) :					    	if rem == 3 :						  
							      	      if ( n < 15 ) :					    	    if n < 15 :						  
5 20 LOAD_FAST 1 ( rem )				      		  return - 1					    		return - 1					  
22 LOAD_CONST 3 ( 0 )					      	      return ( n - 15 ) // 4 + 2			    	    return ( n - 15 ) // 4 + 2				  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 1 ( 4 )					      								    								  
32 BINARY_FLOOR_DIVIDE					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
7 >> 36 LOAD_FAST 1 ( rem )				      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 5 ( 9 )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
9 52 LOAD_CONST 2 ( - 1 )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
10 >> 56 LOAD_FAST 0 ( n )				      								    								  
58 LOAD_CONST 5 ( 9 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 LOAD_CONST 1 ( 4 )					      								    								  
64 BINARY_FLOOR_DIVIDE					      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
11 >> 72 LOAD_FAST 1 ( rem )				      								    								  
74 LOAD_CONST 6 ( 2 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
12 80 LOAD_FAST 0 ( n )					      								    								  
82 LOAD_CONST 7 ( 6 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_CONST 1 ( 4 )					      								    								  
88 BINARY_FLOOR_DIVIDE					      								    								  
90 LOAD_CONST 4 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
13 >> 96 LOAD_FAST 1 ( rem )				      								    								  
98 LOAD_CONST 8 ( 3 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
14 104 LOAD_FAST 0 ( n )				      								    								  
106 LOAD_CONST 9 ( 15 )					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
15 112 LOAD_CONST 2 ( - 1 )				      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
16 >> 116 LOAD_FAST 0 ( n )				      								    								  
118 LOAD_CONST 9 ( 15 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 LOAD_CONST 1 ( 4 )					      								    								  
124 BINARY_FLOOR_DIVIDE					      								    								  
126 LOAD_CONST 6 ( 2 )					      								    								  
128 BINARY_ADD						      								    								  
130 RETURN_VALUE					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE_1					      RECAMANS_SEQUENCE_1					    RECAMANS_SEQUENCE_1						  RECAMANS_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object recaman at 0x7f33e26494b0, file " def recaman ( n ) :					    def recaman ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return						    	    return						  
4 COMPARE_OP 1 ( <= )					      	  print ( 0 , "," , end = '' )				    	print ( 0 , ',' , end = '' )				  
6 POP_JUMP_IF_FALSE 12					      	  s = set ( [ ] )					    	s = set ( [ ] )						  
							      	  s.add ( 0 )						    	s.add ( 0 )						  
3 8 LOAD_CONST 0 ( None )				      	  prev = 0						    	prev = 0						  
10 RETURN_VALUE						      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
							      	      curr = prev - i					    	    curr = prev - i					  
4 >> 12 LOAD_GLOBAL 0 ( print )				      	      if ( curr < 0 or curr in s ) :			    	    if curr < 0 or curr in s :				  
14 LOAD_CONST 1 ( 0 )					      		  curr = prev + i				    		curr = prev + i					  
16 LOAD_CONST 2 ( ',' )					      	      s.add ( curr )					    	    s.add ( curr )					  
18 LOAD_CONST 3 ( '' )					      	      print ( curr , "," , end = '' )			    	    print ( curr , ',' , end = '' )			  
20 LOAD_CONST 4 ( ( 'end' , ) )				      	      prev = curr					    	    prev = curr						  
22 CALL_FUNCTION_KW 3					      								    								  
24 POP_TOP						      								    								  
							      								    								  
5 26 LOAD_GLOBAL 1 ( set )				      								    								  
28 BUILD_LIST 0						      								    								  
30 CALL_FUNCTION 1					      								    								  
32 STORE_FAST 1 ( s )					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( s )					      								    								  
36 LOAD_METHOD 2 ( add )				      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 CALL_METHOD 1					      								    								  
42 POP_TOP						      								    								  
							      								    								  
7 44 LOAD_CONST 1 ( 0 )					      								    								  
46 STORE_FAST 2 ( prev )				      								    								  
							      								    								  
8 48 SETUP_LOOP 78 ( to 128 )				      								    								  
50 LOAD_GLOBAL 3 ( range )				      								    								  
52 LOAD_CONST 5 ( 1 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 64 ( to 126 )				      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 64 LOAD_FAST 2 ( prev )				      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_FAST 4 ( curr )				      								    								  
							      								    								  
10 72 LOAD_FAST 4 ( curr )				      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_TRUE 88					      								    								  
80 LOAD_FAST 4 ( curr )					      								    								  
82 LOAD_FAST 1 ( s )					      								    								  
84 COMPARE_OP 6 ( in )					      								    								  
86 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
11 >> 88 LOAD_FAST 2 ( prev )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_ADD						      								    								  
94 STORE_FAST 4 ( curr )				      								    								  
							      								    								  
12 >> 96 LOAD_FAST 1 ( s )				      								    								  
98 LOAD_METHOD 2 ( add )				      								    								  
100 LOAD_FAST 4 ( curr )				      								    								  
102 CALL_METHOD 1					      								    								  
104 POP_TOP						      								    								  
							      								    								  
13 106 LOAD_GLOBAL 0 ( print )				      								    								  
108 LOAD_FAST 4 ( curr )				      								    								  
110 LOAD_CONST 2 ( ',' )				      								    								  
112 LOAD_CONST 3 ( '' )					      								    								  
114 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
116 CALL_FUNCTION_KW 3					      								    								  
118 POP_TOP						      								    								  
							      								    								  
14 120 LOAD_FAST 4 ( curr )				      								    								  
122 STORE_FAST 2 ( prev )				      								    								  
124 JUMP_ABSOLUTE 60					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 LOAD_CONST 0 ( None )				      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUPER_PRIME						      SUPER_PRIME						    SUPER_PRIME							  SUPER_PRIME
--							      --							    --								  --
Disassembly of <code object SieveOfEratosthenes at 0x7f33e264 def SieveOfEratosthenes ( n , isPrime ) :			    def SieveOfEratosthenes ( n , isPrime = False ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( False )				      	  isPrime [ 0 ] = isPrime [ 1 ] = False			    	isPrime [ 0 ] = False					  
2 DUP_TOP						      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
4 LOAD_FAST 1 ( isPrime )				      	      isPrime [ i ] = True				    	    isPrime [ i ] = True				  
6 LOAD_CONST 2 ( 0 )					      	  for p in range ( 2 , n + 1 ) :			    	for p in range ( 2 , n + 1 ) :				  
8 STORE_SUBSCR						      	      if ( p * p <= n and isPrime [ p ] == True ) :	    	    if p * p <= n and isPrime [ p ] == True :		  
10 LOAD_FAST 1 ( isPrime )				      		  for i in range ( p * 2 , n + 1 , p ) :	    		for i in range ( p * 2 , n + 1 , p ) :		  
12 LOAD_CONST 3 ( 1 )					      		      isPrime [ i ] = False			    		    p += 1					  
14 STORE_SUBSCR						      		      p += 1					    		    p += 1					  
							      								    								  
3 16 SETUP_LOOP 30 ( to 48 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 4 ( 2 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 12 ( to 46 )				      								    								  
34 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 36 LOAD_CONST 5 ( True )				      								    								  
38 LOAD_FAST 1 ( isPrime )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 STORE_SUBSCR						      								    								  
44 JUMP_ABSOLUTE 32					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 SETUP_LOOP 92 ( to 142 )			      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_CONST 4 ( 2 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 74 ( to 140 )				      								    								  
66 STORE_FAST 3 ( p )					      								    								  
							      								    								  
6 68 LOAD_FAST 3 ( p )					      								    								  
70 LOAD_FAST 3 ( p )					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 COMPARE_OP 1 ( <= )					      								    								  
78 POP_JUMP_IF_FALSE 64					      								    								  
80 LOAD_FAST 1 ( isPrime )				      								    								  
82 LOAD_FAST 3 ( p )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 5 ( True )				      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 92 SETUP_LOOP 44 ( to 138 )				      								    								  
94 LOAD_GLOBAL 0 ( range )				      								    								  
96 LOAD_FAST 3 ( p )					      								    								  
98 LOAD_CONST 4 ( 2 )					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_FAST 0 ( n )					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_FAST 3 ( p )					      								    								  
110 CALL_FUNCTION 3					      								    								  
112 GET_ITER						      								    								  
>> 114 FOR_ITER 20 ( to 136 )				      								    								  
116 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 118 LOAD_CONST 1 ( False )				      								    								  
120 LOAD_FAST 1 ( isPrime )				      								    								  
122 LOAD_FAST 2 ( i )					      								    								  
124 STORE_SUBSCR					      								    								  
							      								    								  
9 126 LOAD_FAST 3 ( p )					      								    								  
128 LOAD_CONST 3 ( 1 )					      								    								  
130 INPLACE_ADD						      								    								  
132 STORE_FAST 3 ( p )					      								    								  
134 JUMP_ABSOLUTE 114					      								    								  
>> 136 POP_BLOCK					      								    								  
>> 138 JUMP_ABSOLUTE 64					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 LOAD_CONST 0 ( None )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			      PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			    PROGRAM_BINOMIAL_COEFFICIENTS_TABLE				  PROGRAM_BINOMIAL_COEFFICIENTS_TABLE
--							      --							    --								  --
Disassembly of <code object printbinomial at 0x7f33e2649a50,  def printbinomial ( max ) :				    def printbinomial ( max ) :					  script_not_found : None
2 0 SETUP_LOOP 126 ( to 128 )				      	  for m in range ( max + 1 ) :				    	for m in range ( max + 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      print ( '% 2d' % m , end = '' )			    	    print ( "% 2d" % m , end = "" )			  
4 LOAD_FAST 0 ( max )					      	      binom = 1						    	    binom = 1						  
6 LOAD_CONST 1 ( 1 )					      	      for x in range ( m + 1 ) :			    	    for x in range ( m + 1 ) :				  
8 BINARY_ADD						      		  if m != 0 and x != 0 :			    		if m != 0 and x != 0 :				  
10 CALL_FUNCTION 1					      		      binom = binom * ( m - x + 1 ) / x		    		    binom = binom * ( m - x + 1 ) / x		  
12 GET_ITER						      		  print ( '% 4d' % binom , end = '' )		    		print ( "% 4d" % binom , end = "" )		  
>> 14 FOR_ITER 110 ( to 126 )				      	      print ( "\n" , end = '' )				    	    print ( "\n" , end = "" )				  
16 STORE_FAST 1 ( m )					      								    								  
							      								    								  
3 18 LOAD_GLOBAL 1 ( print )				      								    								  
20 LOAD_CONST 2 ( '% 2d' )				      								    								  
22 LOAD_FAST 1 ( m )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 3 ( '' )					      								    								  
28 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
30 CALL_FUNCTION_KW 2					      								    								  
32 POP_TOP						      								    								  
							      								    								  
4 34 LOAD_CONST 1 ( 1 )					      								    								  
36 STORE_FAST 2 ( binom )				      								    								  
							      								    								  
5 38 SETUP_LOOP 72 ( to 112 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_FAST 1 ( m )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 56 ( to 110 )				      								    								  
54 STORE_FAST 3 ( x )					      								    								  
							      								    								  
6 56 LOAD_FAST 1 ( m )					      								    								  
58 LOAD_CONST 5 ( 0 )					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 92					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 LOAD_CONST 5 ( 0 )					      								    								  
68 COMPARE_OP 3 ( != )					      								    								  
70 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
7 72 LOAD_FAST 2 ( binom )				      								    								  
74 LOAD_FAST 1 ( m )					      								    								  
76 LOAD_FAST 3 ( x )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 BINARY_MULTIPLY					      								    								  
86 LOAD_FAST 3 ( x )					      								    								  
88 BINARY_TRUE_DIVIDE					      								    								  
90 STORE_FAST 2 ( binom )				      								    								  
							      								    								  
8 >> 92 LOAD_GLOBAL 1 ( print )				      								    								  
94 LOAD_CONST 6 ( '% 4d' )				      								    								  
96 LOAD_FAST 2 ( binom )				      								    								  
98 BINARY_MODULO					      								    								  
100 LOAD_CONST 3 ( '' )					      								    								  
102 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
104 CALL_FUNCTION_KW 2					      								    								  
106 POP_TOP						      								    								  
108 JUMP_ABSOLUTE 52					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
9 >> 112 LOAD_GLOBAL 1 ( print )			      								    								  
114 LOAD_CONST 7 ( '\n' )				      								    								  
116 LOAD_CONST 3 ( '' )					      								    								  
118 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 POP_TOP						      								    								  
124 JUMP_ABSOLUTE 14					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 LOAD_CONST 0 ( None )				      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			      COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			    COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			  COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1
--							      --							    --								  --
Disassembly of <code object countSubarrWithEqualZeroAndOne at def countSubarrWithEqualZeroAndOne ( arr , n ) :		    def countSubarrWithEqualZeroAndOne ( arr , n ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  mp = dict ( )						    	mp = dict ( )						  
2 CALL_FUNCTION 0					      	  Sum = 0						    	Sum = 0							  
4 STORE_FAST 2 ( mp )					      	  count = 0						    	count = 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 6 LOAD_CONST 1 ( 0 )					      	      if ( arr [ i ] == 0 ) :				    	    if arr [ i ] == 0 :					  
8 STORE_FAST 3 ( Sum )					      		  arr [ i ] = - 1				    		arr [ i ] = - 1					  
							      	      Sum += arr [ i ]					    	    Sum += arr [ i ]					  
4 10 LOAD_CONST 1 ( 0 )					      	      if ( Sum == 0 ) :					    	    if Sum == 0 :					  
12 STORE_FAST 4 ( count )				      		  count += 1					    		count += 1					  
							      	      if ( Sum in mp.keys ( ) ) :			    	    if Sum in mp.keys ( ) :				  
5 14 SETUP_LOOP 108 ( to 124 )				      		  count += mp [ Sum ]				    		count += mp [ Sum ]				  
16 LOAD_GLOBAL 1 ( range )				      	      mp [ Sum ] = mp.get ( Sum , 0 ) + 1		    	    mp [ Sum ] = mp.get ( Sum , 0 ) + 1			  
18 LOAD_FAST 1 ( n )					      	  return count						    return count						  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 96 ( to 122 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 40 LOAD_CONST 2 ( - 1 )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 5 ( i )					      								    								  
46 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 48 LOAD_FAST 3 ( Sum )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( Sum )					      								    								  
							      								    								  
9 60 LOAD_FAST 3 ( Sum )				      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
10 68 LOAD_FAST 4 ( count )				      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 4 ( count )				      								    								  
							      								    								  
11 >> 76 LOAD_FAST 3 ( Sum )				      								    								  
78 LOAD_FAST 2 ( mp )					      								    								  
80 LOAD_METHOD 2 ( keys )				      								    								  
82 CALL_METHOD 0					      								    								  
84 COMPARE_OP 6 ( in )					      								    								  
86 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
12 88 LOAD_FAST 4 ( count )				      								    								  
90 LOAD_FAST 2 ( mp )					      								    								  
92 LOAD_FAST 3 ( Sum )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 4 ( count )				      								    								  
							      								    								  
13 >> 100 LOAD_FAST 2 ( mp )				      								    								  
102 LOAD_METHOD 3 ( get )				      								    								  
104 LOAD_FAST 3 ( Sum )					      								    								  
106 LOAD_CONST 1 ( 0 )					      								    								  
108 CALL_METHOD 2					      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 2 ( mp )					      								    								  
116 LOAD_FAST 3 ( Sum )					      								    								  
118 STORE_SUBSCR					      								    								  
120 JUMP_ABSOLUTE 24					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
14 >> 124 LOAD_FAST 4 ( count )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	      WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	    WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	  WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER
--							      --							    --								  --
Disassembly of <code object countWays at 0x7f33e2649a50, file def countWays ( s ) :					    def countWays ( s ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * 26 ;					    	count = [ 0 ] * 26					  
2 BUILD_LIST 1						      	  for x in s :						    	for x in s :						  
4 LOAD_CONST 2 ( 26 )					      	      count [ ord ( x ) - ord ( 'a' ) ] = ( count [ ord ( x 	    count [ ord ( x ) - ord ( 'a' ) ] + 1		  
6 BINARY_MULTIPLY					      	  count [ ord ( s [ 0 ] ) - ord ( 'a' ) ] = 1 ;		    	count [ ord ( x ) - ord ( 'a' ) ] = 1			  
8 STORE_FAST 1 ( count )				      	  ans = 1 ;						    count [ ord ( s [ 0 ] ) - ord ( 'a' ) ] = 1			  
							      	  for i in range ( 26 ) :				    ans = 1							  
3 10 SETUP_LOOP 52 ( to 64 )				      	      if ( count [ i ] != 0 ) :				    for i in range ( 26 ) :					  
12 LOAD_FAST 0 ( s )					      		  ans *= count [ i ] ;				    	if count [ i ] != 0 :					  
14 GET_ITER						      	  return ans ;						    	    ans += count [ i ]					  
>> 16 FOR_ITER 44 ( to 62 )				      								    return ans							  
18 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 20 LOAD_FAST 1 ( count )				      								    								  
22 LOAD_GLOBAL 0 ( ord )				      								    								  
24 LOAD_FAST 2 ( x )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_GLOBAL 0 ( ord )				      								    								  
30 LOAD_CONST 3 ( 'a' )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( count )				      								    								  
44 LOAD_GLOBAL 0 ( ord )				      								    								  
46 LOAD_FAST 2 ( x )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_GLOBAL 0 ( ord )				      								    								  
52 LOAD_CONST 3 ( 'a' )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 16					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
5 >> 64 LOAD_CONST 4 ( 1 )				      								    								  
66 LOAD_FAST 1 ( count )				      								    								  
68 LOAD_GLOBAL 0 ( ord )				      								    								  
70 LOAD_FAST 0 ( s )					      								    								  
72 LOAD_CONST 1 ( 0 )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_GLOBAL 0 ( ord )				      								    								  
80 LOAD_CONST 3 ( 'a' )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 STORE_SUBSCR						      								    								  
							      								    								  
6 88 LOAD_CONST 4 ( 1 )					      								    								  
90 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
7 92 SETUP_LOOP 40 ( to 134 )				      								    								  
94 LOAD_GLOBAL 1 ( range )				      								    								  
96 LOAD_CONST 2 ( 26 )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 28 ( to 132 )				      								    								  
104 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 106 LOAD_FAST 1 ( count )				      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 1 ( 0 )					      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
9 118 LOAD_FAST 3 ( ans )				      								    								  
120 LOAD_FAST 1 ( count )				      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 INPLACE_MULTIPLY					      								    								  
128 STORE_FAST 3 ( ans )				      								    								  
130 JUMP_ABSOLUTE 102					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
10 >> 134 LOAD_FAST 3 ( ans )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT<
--							      --							    --								  --
Disassembly of <code object MinOperation at 0x7f33e2644930, f def MinOperation ( a , b , n ) :				    def MinOperation ( a , b , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( reverse = False )				    	a.sort ( reverse = False )				  
2 LOAD_ATTR 0 ( sort )					      	  b.sort ( reverse = False )				    	b.sort ( reverse = False )				  
4 LOAD_CONST 1 ( False )				      	  result = 0						    	result = 0						  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	  for i in range ( 0 , n , 1 ) :			    	for i in range ( 0 , n , 1 ) :				  
8 CALL_FUNCTION_KW 1					      	      if ( a [ i ] > b [ i ] ) :			    	    if a [ i ] > b [ i ] :				  
10 POP_TOP						      		  result = result + abs ( a [ i ] - b [ i ] )	    		result = result + abs ( a [ i ] - b [ i ] )	  
							      	      elif ( a [ i ] < b [ i ] ) :			    	    elif a [ i ] < b [ i ] :				  
3 12 LOAD_FAST 1 ( b )					      		  result = result + abs ( a [ i ] - b [ i ] )	    		result = result + abs ( a [ i ] - b [ i ] )	  
14 LOAD_ATTR 0 ( sort )					      	  return result						    return result						  
16 LOAD_CONST 1 ( False )				      								    								  
18 LOAD_CONST 2 ( ( 'reverse' , ) )			      								    								  
20 CALL_FUNCTION_KW 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
4 24 LOAD_CONST 3 ( 0 )					      								    								  
26 STORE_FAST 3 ( result )				      								    								  
							      								    								  
5 28 SETUP_LOOP 102 ( to 132 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 3 ( 0 )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 4 ( 1 )					      								    								  
38 CALL_FUNCTION 3					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 86 ( to 130 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 1 ( b )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 COMPARE_OP 4 ( > )					      								    								  
60 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
7 62 LOAD_FAST 3 ( result )				      								    								  
64 LOAD_GLOBAL 2 ( abs )				      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 1 ( b )					      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 3 ( result )				      								    								  
86 JUMP_ABSOLUTE 42					      								    								  
							      								    								  
8 >> 88 LOAD_FAST 0 ( a )				      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 1 ( b )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 42				      								    								  
							      								    								  
9 104 LOAD_FAST 3 ( result )				      								    								  
106 LOAD_GLOBAL 2 ( abs )				      								    								  
108 LOAD_FAST 0 ( a )					      								    								  
110 LOAD_FAST 4 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 1 ( b )					      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 CALL_FUNCTION 1					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 3 ( result )				      								    								  
128 JUMP_ABSOLUTE 42					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
10 >> 132 LOAD_FAST 3 ( result )			      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
Disassembly of <code object solve at 0x7f33e2644f60, file "<d def solve ( i , par , a , n , k , current_ans ) :		    def solve ( i , par , a , n , k , n ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( par )					      	  if ( par > k ) :					    	if par > k :						  
2 LOAD_FAST 4 ( k )					      	      return 0						    	    return 0						  
4 COMPARE_OP 4 ( > )					      	  global ans						    	if par == k and i == n - 1 :				  
6 POP_JUMP_IF_FALSE 12					      	  if ( par == k and i == n - 1 ) :			    	    ans = min ( ans , current_ans )			  
							      	      ans = min ( ans , current_ans )			    	    return 0						  
3 8 LOAD_CONST 1 ( 0 )					      	      return 0						    	else :							  
10 RETURN_VALUE						      	  for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
							      	      solve ( j , par + 1 , a , n , k , current_ans + ( a [ 		solve ( j , par + 1 , a [ n : j ] - a [ i + 1 ] , 
5 >> 12 LOAD_FAST 1 ( par )				      								    								  
14 LOAD_FAST 4 ( k )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 46					      								    								  
20 LOAD_FAST 0 ( i )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 32 LOAD_GLOBAL 0 ( min )				      								    								  
34 LOAD_GLOBAL 1 ( ans )				      								    								  
36 LOAD_FAST 5 ( current_ans )				      								    								  
38 CALL_FUNCTION 2					      								    								  
40 STORE_GLOBAL 1 ( ans )				      								    								  
							      								    								  
7 42 LOAD_CONST 1 ( 0 )					      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
8 >> 46 SETUP_LOOP 84 ( to 132 )			      								    								  
48 LOAD_GLOBAL 2 ( range )				      								    								  
50 LOAD_FAST 0 ( i )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 3 ( n )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 66 ( to 130 )				      								    								  
64 STORE_FAST 6 ( j )					      								    								  
							      								    								  
9 66 LOAD_GLOBAL 3 ( solve )				      								    								  
68 LOAD_FAST 6 ( j )					      								    								  
70 LOAD_FAST 1 ( par )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 2 ( a )					      								    								  
78 LOAD_FAST 3 ( n )					      								    								  
80 LOAD_FAST 4 ( k )					      								    								  
82 LOAD_FAST 5 ( current_ans )				      								    								  
84 LOAD_FAST 2 ( a )					      								    								  
86 LOAD_FAST 6 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 2 ( a )					      								    								  
92 LOAD_FAST 0 ( i )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_FAST 2 ( a )					      								    								  
104 LOAD_FAST 6 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 2 ( a )					      								    								  
110 LOAD_FAST 0 ( i )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 BINARY_SUBSCR					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_MULTIPLY					      								    								  
122 BINARY_ADD						      								    								  
124 CALL_FUNCTION 6					      								    								  
126 POP_TOP						      								    								  
128 JUMP_ABSOLUTE 62					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2
--							      --							    --								  --
Disassembly of <code object findElements at 0x7f33e2644f60, f def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sys )				      	  first = - sys.maxsize					    	first = - sys.maxsize					  
2 LOAD_ATTR 1 ( maxsize )				      	  second = - sys.maxsize				    	second = - sys.maxsize					  
4 UNARY_NEGATIVE					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 2 ( first )				      	      if ( arr [ i ] > first ) :			    	    if arr [ i ] > first :				  
							      		  second = first				    		second = first					  
3 8 LOAD_GLOBAL 0 ( sys )				      		  first = arr [ i ]				    		first = arr [ i ]				  
10 LOAD_ATTR 1 ( maxsize )				      	      elif ( arr [ i ] > second ) :			    	    elif arr [ i ] > second :				  
12 UNARY_NEGATIVE					      		  second = arr [ i ]				    		second = arr [ i ]				  
14 STORE_FAST 3 ( second )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if ( arr [ i ] < second ) :			    	    if arr [ i ] < second :				  
4 16 SETUP_LOOP 64 ( to 82 )				      		  print ( arr [ i ] , end = " " )		    		print ( arr [ i ] , end = " " )			  
18 LOAD_GLOBAL 2 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 50 ( to 80 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 2 ( first )				      								    								  
40 COMPARE_OP 4 ( > )					      								    								  
42 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 44 LOAD_FAST 2 ( first )				      								    								  
46 STORE_FAST 3 ( second )				      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 2 ( first )				      								    								  
56 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 3 ( second )				      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
9 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 3 ( second )				      								    								  
78 JUMP_ABSOLUTE 28					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 SETUP_LOOP 46 ( to 130 )			      								    								  
84 LOAD_GLOBAL 2 ( range )				      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 LOAD_FAST 1 ( n )					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 32 ( to 128 )				      								    								  
96 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 4 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 3 ( second )				      								    								  
106 COMPARE_OP 0 ( < )					      								    								  
108 POP_JUMP_IF_FALSE 94				      								    								  
							      								    								  
12 110 LOAD_GLOBAL 3 ( print )				      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 4 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 2 ( ' ' )				      								    								  
120 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
122 CALL_FUNCTION_KW 2					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 94					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	      SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	    SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS		  SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS
--							      --							    --								  --
Disassembly of <code object findSmallestDifference at 0x7f33e def findSmallestDifference ( A , B , m , n ) :		    def findSmallestDifference ( A , B , m , n ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( A )					      	  A.sort ( )						    	A.sort ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_METHOD 0 ( sort )				      	  B.sort ( )						    	B.sort ( )						  _sa.valid/SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSO
4 CALL_METHOD 0						      	  a = 0							    	a = 0							  RTED_ARRAYS.py", line 48     return result	 ^ S
6 POP_TOP						      	  b = 0							    	b = 0							  yntaxError: 'return' outside function
							      	  result = sys.maxsize					    	result = sys.maxsize					  
3 8 LOAD_FAST 1 ( B )					      	  while ( a < m and b < n ) :				    	while a < m and b < n :					  
10 LOAD_METHOD 0 ( sort )				      	      if ( abs ( A [ a ] - B [ b ] ) < result ) :	    	    if abs ( A [ a ] - B [ b ] ) < result :		  
12 CALL_METHOD 0					      		  result = abs ( A [ a ] - B [ b ] )		    		result = abs ( A [ a ] - B [ b ] )		  
14 POP_TOP						      	      if ( A [ a ] < B [ b ] ) :			    	    if A [ a ] < B [ b ] :				  
							      		  a += 1					    		a += 1						  
4 16 LOAD_CONST 1 ( 0 )					      	      else :						    	    else :						  
18 STORE_FAST 4 ( a )					      		  b += 1					    		b += 1						  
							      	  return result						    return result						  
5 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 5 ( b )					      								    								  
							      								    								  
6 24 LOAD_GLOBAL 1 ( sys )				      								    								  
26 LOAD_ATTR 2 ( maxsize )				      								    								  
28 STORE_FAST 6 ( result )				      								    								  
							      								    								  
7 30 SETUP_LOOP 98 ( to 130 )				      								    								  
>> 32 LOAD_FAST 4 ( a )					      								    								  
34 LOAD_FAST 2 ( m )					      								    								  
36 COMPARE_OP 0 ( < )					      								    								  
38 POP_JUMP_IF_FALSE 128				      								    								  
40 LOAD_FAST 5 ( b )					      								    								  
42 LOAD_FAST 3 ( n )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
8 48 LOAD_GLOBAL 3 ( abs )				      								    								  
50 LOAD_FAST 0 ( A )					      								    								  
52 LOAD_FAST 4 ( a )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 1 ( B )					      								    								  
58 LOAD_FAST 5 ( b )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 LOAD_FAST 6 ( result )				      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
9 72 LOAD_GLOBAL 3 ( abs )				      								    								  
74 LOAD_FAST 0 ( A )					      								    								  
76 LOAD_FAST 4 ( a )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( B )					      								    								  
82 LOAD_FAST 5 ( b )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 STORE_FAST 6 ( result )				      								    								  
							      								    								  
10 >> 92 LOAD_FAST 0 ( A )				      								    								  
94 LOAD_FAST 4 ( a )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 1 ( B )					      								    								  
100 LOAD_FAST 5 ( b )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 COMPARE_OP 0 ( < )					      								    								  
106 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
11 108 LOAD_FAST 4 ( a )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( a )					      								    								  
116 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
13 >> 118 LOAD_FAST 5 ( b )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 5 ( b )					      								    								  
126 JUMP_ABSOLUTE 32					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
14 >> 130 LOAD_FAST 6 ( result )			      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		      CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		    CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		  CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT
--							      --							    --								  --
Disassembly of <code object checkPoint at 0x7f33e2644f60, fil def checkPoint ( radius , x , y , percent , startAngle ) :    def checkPoint ( radius , x , y , z , startAngle = False , st script_not_found : None
2 0 LOAD_CONST 1 ( 360 )				      	  endAngle = 360 / percent + startAngle			    	endAngle = 360 / percent + startAngle			  
2 LOAD_FAST 3 ( percent )				      	  polarradius = math.sqrt ( x * x + y * y )		    	polarradius = math.sqrt ( x * x + y * y )		  
4 BINARY_TRUE_DIVIDE					      	  Angle = math.atan ( y / x )				    	Angle = math.atan ( y / x )				  
6 LOAD_FAST 4 ( startAngle )				      	  if ( Angle >= startAngle and Angle <= endAngle and polarr 	if Angle >= startAngle and Angle <= endAngle and polarrad 
8 BINARY_ADD						      	      print ( "Point (" , x , "," , y , ") " "exist in the  	    print ( "Point (" , x , ",y," ) SPACETOKEN exist SPAC 
10 STORE_FAST 5 ( endAngle )				      	  else :						    	else :							  
							      	      print ( "Point (" , x , "," , y , ") " "does not exis 	    print ( "Point (" , x , ",",y,") does not exist in th 
3 12 LOAD_GLOBAL 0 ( math )				      								    								  
14 LOAD_METHOD 1 ( sqrt )				      								    								  
16 LOAD_FAST 1 ( x )					      								    								  
18 LOAD_FAST 1 ( x )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_FAST 2 ( y )					      								    								  
24 LOAD_FAST 2 ( y )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_METHOD 1					      								    								  
32 STORE_FAST 6 ( polarradius )				      								    								  
							      								    								  
4 34 LOAD_GLOBAL 0 ( math )				      								    								  
36 LOAD_METHOD 2 ( atan )				      								    								  
38 LOAD_FAST 2 ( y )					      								    								  
40 LOAD_FAST 1 ( x )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_METHOD 1					      								    								  
46 STORE_FAST 7 ( Angle )				      								    								  
							      								    								  
5 48 LOAD_FAST 7 ( Angle )				      								    								  
50 LOAD_FAST 4 ( startAngle )				      								    								  
52 COMPARE_OP 5 ( >= )					      								    								  
54 POP_JUMP_IF_FALSE 90					      								    								  
56 LOAD_FAST 7 ( Angle )				      								    								  
58 LOAD_FAST 5 ( endAngle )				      								    								  
60 COMPARE_OP 1 ( <= )					      								    								  
62 POP_JUMP_IF_FALSE 90					      								    								  
64 LOAD_FAST 6 ( polarradius )				      								    								  
66 LOAD_FAST 0 ( radius )				      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
6 72 LOAD_GLOBAL 3 ( print )				      								    								  
74 LOAD_CONST 2 ( 'Point (' )				      								    								  
76 LOAD_FAST 1 ( x )					      								    								  
78 LOAD_CONST 3 ( ',' )					      								    								  
80 LOAD_FAST 2 ( y )					      								    								  
82 LOAD_CONST 4 ( ') exist in the circle sector' )	      								    								  
84 CALL_FUNCTION 5					      								    								  
86 POP_TOP						      								    								  
88 JUMP_FORWARD 16 ( to 106 )				      								    								  
							      								    								  
8 >> 90 LOAD_GLOBAL 3 ( print )				      								    								  
92 LOAD_CONST 2 ( 'Point (' )				      								    								  
94 LOAD_FAST 1 ( x )					      								    								  
96 LOAD_CONST 3 ( ',' )					      								    								  
98 LOAD_FAST 2 ( y )					      								    								  
100 LOAD_CONST 5 ( ') does not exist in the circle sector' )  								    								  
102 CALL_FUNCTION 5					      								    								  
104 POP_TOP						      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT_1					      MAJORITY_ELEMENT_1					    MAJORITY_ELEMENT_1						  MAJORITY_ELEMENT_1
--							      --							    --								  --
Disassembly of <code object findMajority at 0x7f33e2653ed0, f def findMajority ( arr , size ) :				    def findMajority ( arr , size = 2 ) :			  script_not_found : None
2 0 BUILD_MAP 0						      	  m = { }						    	m = { }							  
2 STORE_FAST 2 ( m )					      	  for i in range ( size ) :				    	for i in range ( size ) :				  
							      	      if arr [ i ] in m :				    	    if arr [ i ] in m :					  
3 4 SETUP_LOOP 62 ( to 68 )				      		  m [ arr [ i ] ] += 1				    		m [ arr [ i ] ] += 1				  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    else :						  
8 LOAD_FAST 1 ( size )					      		  m [ arr [ i ] ] = 1				    		m [ arr [ i ] ] = 1				  
10 CALL_FUNCTION 1					      	  count = 0						    	count = 0						  
12 GET_ITER						      	  for key in m :					    	for key in m :						  
>> 14 FOR_ITER 50 ( to 66 )				      	      if m [ key ] > size / 2 :				    	    if m [ key ] > size / 2 :				  
16 STORE_FAST 3 ( i )					      		  count = 1					    		count = 1					  
							      		  print ( "Majority found :-" , key )		    		print ( "Majority found :-" , key )		  
4 18 LOAD_FAST 0 ( arr )				      		  break						    		break						  
20 LOAD_FAST 3 ( i )					      	  if ( count == 0 ) :					    	if count == 0 :						  
22 BINARY_SUBSCR					      	      print ( "No Majority element" )			    	    print ( "No Majority element" )			  
24 LOAD_FAST 2 ( m )					      								    								  
26 COMPARE_OP 6 ( in )					      								    								  
28 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( m )					      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 DUP_TOP_TWO						      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 INPLACE_ADD						      								    								  
46 ROT_THREE						      								    								  
48 STORE_SUBSCR						      								    								  
50 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
7 >> 52 LOAD_CONST 1 ( 1 )				      								    								  
54 LOAD_FAST 2 ( m )					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
8 >> 68 LOAD_CONST 2 ( 0 )				      								    								  
70 STORE_FAST 4 ( count )				      								    								  
							      								    								  
9 72 SETUP_LOOP 44 ( to 118 )				      								    								  
74 LOAD_FAST 2 ( m )					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 36 ( to 116 )				      								    								  
80 STORE_FAST 5 ( key )					      								    								  
							      								    								  
10 82 LOAD_FAST 2 ( m )					      								    								  
84 LOAD_FAST 5 ( key )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 1 ( size )					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 BINARY_TRUE_DIVIDE					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
11 98 LOAD_CONST 1 ( 1 )				      								    								  
100 STORE_FAST 4 ( count )				      								    								  
							      								    								  
12 102 LOAD_GLOBAL 1 ( print )				      								    								  
104 LOAD_CONST 4 ( 'Majority found :-' )		      								    								  
106 LOAD_FAST 5 ( key )					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 POP_TOP						      								    								  
							      								    								  
13 112 BREAK_LOOP					      								    								  
114 JUMP_ABSOLUTE 78					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
14 >> 118 LOAD_FAST 4 ( count )				      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
15 126 LOAD_GLOBAL 1 ( print )				      								    								  
128 LOAD_CONST 5 ( 'No Majority element' )		      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS		      PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			    PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			  PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS
--							      --							    --								  --
Disassembly of <code object amendSentence at 0x7f33e26494b0,  def amendSentence ( string ) :				    def amendSentence ( string ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  string = list ( string )				    	string = list ( string )				  
2 LOAD_FAST 0 ( string )				      	  for i in range ( len ( string ) ) :			    	for i in range ( len ( string ) ) :			  
4 CALL_FUNCTION 1					      	      if string [ i ] >= 'A' and string [ i ] <= 'Z' :	    	    if string [ i ] >= 'A' and string [ i ] <= 'Z' :	  
6 STORE_FAST 0 ( string )				      		  string [ i ] = chr ( ord ( string [ i ] ) + 32 )  		string [ i ] = chr ( ord ( string [ i ] ) + 32 )  
							      		  if i != 0 :					    		if i != 0 :					  
3 8 SETUP_LOOP 122 ( to 132 )				      		      print ( "" , end = "" )			    		    print ( "" , end = '' )			  
10 LOAD_GLOBAL 1 ( range )				      		  print ( string [ i ] , end = "" )		    	    else :						  
12 LOAD_GLOBAL 2 ( len )				      	      else :						    		print ( string [ i ] , end = '' )		  
14 LOAD_FAST 0 ( string )				      		  print ( string [ i ] , end = "" )		    	else :							  
16 CALL_FUNCTION 1					      								    	    print ( string [ i ] , end = '' )			  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 106 ( to 130 )				      								    								  
24 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( string )				      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 1 ( 'A' )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 112				      								    								  
38 LOAD_FAST 0 ( string )				      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 2 ( 'Z' )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
48 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
5 50 LOAD_GLOBAL 3 ( chr )				      								    								  
52 LOAD_GLOBAL 4 ( ord )				      								    								  
54 LOAD_FAST 0 ( string )				      								    								  
56 LOAD_FAST 1 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 LOAD_CONST 3 ( 32 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_FAST 0 ( string )				      								    								  
70 LOAD_FAST 1 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
6 74 LOAD_FAST 1 ( i )					      								    								  
76 LOAD_CONST 4 ( 0 )					      								    								  
78 COMPARE_OP 3 ( != )					      								    								  
80 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
7 82 LOAD_GLOBAL 5 ( print )				      								    								  
84 LOAD_CONST 5 ( '' )					      								    								  
86 LOAD_CONST 5 ( '' )					      								    								  
88 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
90 CALL_FUNCTION_KW 2					      								    								  
92 POP_TOP						      								    								  
							      								    								  
8 >> 94 LOAD_GLOBAL 5 ( print )				      								    								  
96 LOAD_FAST 0 ( string )				      								    								  
98 LOAD_FAST 1 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 5 ( '' )					      								    								  
104 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
10 >> 112 LOAD_GLOBAL 5 ( print )			      								    								  
114 LOAD_FAST 0 ( string )				      								    								  
116 LOAD_FAST 1 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_CONST 5 ( '' )					      								    								  
122 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
124 CALL_FUNCTION_KW 2					      								    								  
126 POP_TOP						      								    								  
128 JUMP_ABSOLUTE 22					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		      MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		    MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE			  MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lis at 0x7f33e2644f60, file "<dis def lis ( arr , n ) :					    def lis ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  mpis = [ 0 ] * ( n )					    	mpis = [ 0 ] * n					  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_FAST 1 ( n )					      	      mpis [ i ] = arr [ i ]				    	    mpis [ i ] = arr [ i ]				  
6 BINARY_MULTIPLY					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 STORE_FAST 2 ( mpis )					      	      for j in range ( i ) :				    	    for j in range ( i ) :				  
							      		  if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpi 		if arr [ i ] > arr [ j ] and mpis [ i ] < mpis [  
3 10 SETUP_LOOP 28 ( to 40 )				      		      mpis [ i ] = mpis [ j ] * arr [ i ]	    		    mpis [ i ] = mpis [ j ] * arr [ i ]		  
12 LOAD_GLOBAL 0 ( range )				      	  return max ( mpis )					    return max ( mpis )						  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 16 ( to 38 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 2 ( mpis )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 96 ( to 138 )			      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 82 ( to 136 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 56 SETUP_LOOP 76 ( to 134 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 64 ( to 132 )				      								    								  
68 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 4 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 COMPARE_OP 4 ( > )					      								    								  
84 POP_JUMP_IF_FALSE 66					      								    								  
86 LOAD_FAST 2 ( mpis )					      								    								  
88 LOAD_FAST 3 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 2 ( mpis )					      								    								  
94 LOAD_FAST 4 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 COMPARE_OP 0 ( < )					      								    								  
108 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
8 110 LOAD_FAST 2 ( mpis )				      								    								  
112 LOAD_FAST 4 ( j )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 0 ( arr )					      								    								  
118 LOAD_FAST 3 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 LOAD_FAST 2 ( mpis )				      								    								  
126 LOAD_FAST 3 ( i )					      								    								  
128 STORE_SUBSCR					      								    								  
130 JUMP_ABSOLUTE 66					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 JUMP_ABSOLUTE 52					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
9 >> 138 LOAD_GLOBAL 1 ( max )				      								    								  
140 LOAD_FAST 2 ( mpis )				      								    								  
142 CALL_FUNCTION 1					      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_LINE_PASSING_2_POINTS			      PROGRAM_FIND_LINE_PASSING_2_POINTS			    PROGRAM_FIND_LINE_PASSING_2_POINTS				  PROGRAM_FIND_LINE_PASSING_2_POINTS
--							      --							    --								  --
Disassembly of <code object lineFromPoints at 0x7f33e2653ed0, def lineFromPoints ( P , Q ) :				    def lineFromPoints ( P , Q ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( Q )					      	  a = Q [ 1 ] - P [ 1 ]					    	a = Q [ 1 ] - P [ 1 ]					  
2 LOAD_CONST 1 ( 1 )					      	  b = P [ 0 ] - Q [ 0 ]					    	b = P [ 0 ] - Q [ 0 ]					  
4 BINARY_SUBSCR						      	  c = a * ( P [ 0 ] ) + b * ( P [ 1 ] )			    	c = a * P [ 0 ] + b * P [ 1 ]				  
6 LOAD_FAST 0 ( P )					      	  if ( b < 0 ) :					    	if b < 0 :						  
8 LOAD_CONST 1 ( 1 )					      	      print ( "The line passing through points P and Q is:" 	    print ( "The line passing through points P and Q is:" 
10 BINARY_SUBSCR					      	  else :						    	else :							  
12 BINARY_SUBTRACT					      	      print ( "The line passing through points P and Q is:  	    print ( "The line passing through points P and Q is:  
14 STORE_FAST 2 ( a )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( P )					      								    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_FAST 1 ( Q )					      								    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 STORE_FAST 3 ( b )					      								    								  
							      								    								  
4 32 LOAD_FAST 2 ( a )					      								    								  
34 LOAD_FAST 0 ( P )					      								    								  
36 LOAD_CONST 2 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 3 ( b )					      								    								  
44 LOAD_FAST 0 ( P )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 4 ( c )					      								    								  
							      								    								  
5 56 LOAD_FAST 3 ( b )					      								    								  
58 LOAD_CONST 2 ( 0 )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 0 ( print )				      								    								  
66 LOAD_CONST 3 ( 'The line passing through points P and Q is 								    								  
68 LOAD_FAST 2 ( a )					      								    								  
70 LOAD_CONST 4 ( 'x ' )				      								    								  
72 LOAD_FAST 3 ( b )					      								    								  
74 LOAD_CONST 5 ( 'y = ' )				      								    								  
76 LOAD_FAST 4 ( c )					      								    								  
78 LOAD_CONST 6 ( '\n' )				      								    								  
80 CALL_FUNCTION 7					      								    								  
82 POP_TOP						      								    								  
84 JUMP_FORWARD 20 ( to 106 )				      								    								  
							      								    								  
8 >> 86 LOAD_GLOBAL 0 ( print )				      								    								  
88 LOAD_CONST 7 ( 'The line passing through points P and Q is 								    								  
90 LOAD_FAST 2 ( a )					      								    								  
92 LOAD_CONST 8 ( 'x + ' )				      								    								  
94 LOAD_FAST 3 ( b )					      								    								  
96 LOAD_CONST 5 ( 'y = ' )				      								    								  
98 LOAD_FAST 4 ( c )					      								    								  
100 LOAD_CONST 6 ( '\n' )				      								    								  
102 CALL_FUNCTION 7					      								    								  
104 POP_TOP						      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MID_POINT_LINE_GENERATION_ALGORITHM			      MID_POINT_LINE_GENERATION_ALGORITHM			    MID_POINT_LINE_GENERATION_ALGORITHM				  MID_POINT_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
Disassembly of <code object midPoint at 0x7f33e2653ed0, file  def midPoint ( X1 , Y1 , X2 , Y2 ) :			    def midPoint ( X1 , Y1 , X2 , Y2 , ) :			  script_not_found : None
2 0 LOAD_FAST 2 ( X2 )					      	  dx = X2 - X1						    	dx = X2 - X1						  
2 LOAD_FAST 0 ( X1 )					      	  dy = Y2 - Y1						    	dy = Y2 - Y1						  
4 BINARY_SUBTRACT					      	  d = dy - ( dx / 2 )					    	d = dy - dx / 2						  
6 STORE_FAST 4 ( dx )					      	  x = X1						    	x = X1							  
							      	  y = Y1						    	y = Y1							  
3 8 LOAD_FAST 3 ( Y2 )					      	  print ( x , "," , y , "\n" )				    	print ( x , "," , y , "\n" )				  
10 LOAD_FAST 1 ( Y1 )					      	  while ( x < X2 ) :					    	while x < X2 :						  
12 BINARY_SUBTRACT					      	      x = x + 1						    	    x = x + 1						  
14 STORE_FAST 5 ( dy )					      	      if ( d < 0 ) :					    	    if d < 0 :						  
							      		  d = d + dy					    		d = d + dy					  
4 16 LOAD_FAST 5 ( dy )					      	      else :						    	    else :						  
18 LOAD_FAST 4 ( dx )					      		  d = d + ( dy - dx )				    		d = d + dy - dx					  
20 LOAD_CONST 1 ( 2 )					      		  y = y + 1					    		y = y + 1					  
22 BINARY_TRUE_DIVIDE					      	      print ( x , "," , y , "\n" )			    	    print ( x , "," , y , "\n" )			  
24 BINARY_SUBTRACT					      								    								  
26 STORE_FAST 6 ( d )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( X1 )					      								    								  
30 STORE_FAST 7 ( x )					      								    								  
							      								    								  
6 32 LOAD_FAST 1 ( Y1 )					      								    								  
34 STORE_FAST 8 ( y )					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 7 ( x )					      								    								  
40 LOAD_CONST 2 ( ',' )					      								    								  
42 LOAD_FAST 8 ( y )					      								    								  
44 LOAD_CONST 3 ( '\n' )				      								    								  
46 CALL_FUNCTION 4					      								    								  
48 POP_TOP						      								    								  
							      								    								  
8 50 SETUP_LOOP 72 ( to 124 )				      								    								  
>> 52 LOAD_FAST 7 ( x )					      								    								  
54 LOAD_FAST 2 ( X2 )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
9 60 LOAD_FAST 7 ( x )					      								    								  
62 LOAD_CONST 4 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 7 ( x )					      								    								  
							      								    								  
10 68 LOAD_FAST 6 ( d )					      								    								  
70 LOAD_CONST 5 ( 0 )					      								    								  
72 COMPARE_OP 0 ( < )					      								    								  
74 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
11 76 LOAD_FAST 6 ( d )					      								    								  
78 LOAD_FAST 5 ( dy )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 6 ( d )					      								    								  
84 JUMP_FORWARD 20 ( to 106 )				      								    								  
							      								    								  
13 >> 86 LOAD_FAST 6 ( d )				      								    								  
88 LOAD_FAST 5 ( dy )					      								    								  
90 LOAD_FAST 4 ( dx )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 6 ( d )					      								    								  
							      								    								  
14 98 LOAD_FAST 8 ( y )					      								    								  
100 LOAD_CONST 4 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 8 ( y )					      								    								  
							      								    								  
15 >> 106 LOAD_GLOBAL 0 ( print )			      								    								  
108 LOAD_FAST 7 ( x )					      								    								  
110 LOAD_CONST 2 ( ',' )				      								    								  
112 LOAD_FAST 8 ( y )					      								    								  
114 LOAD_CONST 3 ( '\n' )				      								    								  
116 CALL_FUNCTION 4					      								    								  
118 POP_TOP						      								    								  
120 JUMP_ABSOLUTE 52					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING	      COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		    COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		  COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING
--							      --							    --								  --
Disassembly of <code object countPattern at 0x7f33e2649a50, f def countPattern ( s ) :					    def countPattern ( s ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  length = len ( s )					    	length = len ( s )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( s )					      	  oneSeen = False					    	oneSeen = False						  _sa.valid/COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN
4 CALL_FUNCTION 1					      	  count = 0						    	count = 0						  _A_STRING.py", line 44     return count     ^ Synt
6 STORE_FAST 1 ( length )				      	  for i in range ( length ) :				    	for i in range ( length ) :				  axError: 'return' outside function
							      	      if ( s [ i ] == '1' and oneSeen ) :		    	    if s [ i ] == '1' and oneSeen :			  
3 8 LOAD_CONST 1 ( False )				      		  if ( s [ i - 1 ] == '0' ) :			    		if s [ i - 1 ] == '0' :				  
10 STORE_FAST 2 ( oneSeen )				      		      count += 1				    		    count += 1					  
							      	      if ( s [ i ] == '1' and oneSeen == 0 ) :		    		if s [ i ] == '1' and oneSeen == 0 :		  
4 12 LOAD_CONST 2 ( 0 )					      		  oneSeen = True				    		    oneSeen = True				  
14 STORE_FAST 3 ( count )				      	      if ( s [ i ] != '0' and s [ i ] != '1' ) :	    		if s [ i ] != '0' and s [ i ] != '1' :		  
							      		  oneSeen = False				    		    oneSeen = False				  
5 16 SETUP_LOOP 108 ( to 126 )				      	  return count						    return count						  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( length )				      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 96 ( to 124 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( '1' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 70					      								    								  
42 LOAD_FAST 2 ( oneSeen )				      								    								  
44 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 46 LOAD_FAST 0 ( s )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 LOAD_CONST 4 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 5 ( '0' )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( count )				      								    								  
64 LOAD_CONST 4 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( count )				      								    								  
							      								    								  
9 >> 70 LOAD_FAST 0 ( s )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 3 ( '1' )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 94					      								    								  
82 LOAD_FAST 2 ( oneSeen )				      								    								  
84 LOAD_CONST 2 ( 0 )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
10 90 LOAD_CONST 6 ( True )				      								    								  
92 STORE_FAST 2 ( oneSeen )				      								    								  
							      								    								  
11 >> 94 LOAD_FAST 0 ( s )				      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 5 ( '0' )				      								    								  
102 COMPARE_OP 3 ( != )					      								    								  
104 POP_JUMP_IF_FALSE 26				      								    								  
106 LOAD_FAST 0 ( s )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 3 ( '1' )				      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 26				      								    								  
							      								    								  
12 118 LOAD_CONST 1 ( False )				      								    								  
120 STORE_FAST 2 ( oneSeen )				      								    								  
122 JUMP_ABSOLUTE 26					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 3 ( count )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		      SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		    SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N			  SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N
--							      --							    --								  --
Disassembly of <code object digitsNum at 0x7f33e2653ed0, file def digitsNum ( N ) :					    def digitsNum ( N ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( N )					      	  if ( N == 0 ) :					    	if N == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      print ( "0" , end = "" )				    	    print ( "0" , end = "" )				  
4 COMPARE_OP 2 ( == )					      	  if ( N % 9 != 0 ) :					    	if N % 9 != 0 :						  
6 POP_JUMP_IF_FALSE 20					      	      print ( N % 9 , end = "" )			    	    print ( N % 9 , end = "" )				  
							      	  for i in range ( 1 , int ( N / 9 ) + 1 ) :		    	for i in range ( 1 , int ( N / 9 ) + 1 ) :		  
3 8 LOAD_GLOBAL 0 ( print )				      	      print ( "9" , end = "" )				    	    print ( '9' , end = "" )				  
10 LOAD_CONST 2 ( '0' )					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  
12 LOAD_CONST 3 ( '' )					      	      print ( "0" , end = "" )				    	    print ( "0" , end = "" )				  
14 LOAD_CONST 4 ( ( 'end' , ) )				      	  print ( )						    print ( )							  
16 CALL_FUNCTION_KW 2					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( N )				      								    								  
22 LOAD_CONST 5 ( 9 )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 3 ( != )					      								    								  
30 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 32 LOAD_GLOBAL 0 ( print )				      								    								  
34 LOAD_FAST 0 ( N )					      								    								  
36 LOAD_CONST 5 ( 9 )					      								    								  
38 BINARY_MODULO					      								    								  
40 LOAD_CONST 3 ( '' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 >> 48 SETUP_LOOP 42 ( to 92 )				      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 6 ( 1 )					      								    								  
54 LOAD_GLOBAL 2 ( int )				      								    								  
56 LOAD_FAST 0 ( N )					      								    								  
58 LOAD_CONST 5 ( 9 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_CONST 6 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 16 ( to 90 )				      								    								  
74 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 76 LOAD_GLOBAL 0 ( print )				      								    								  
78 LOAD_CONST 7 ( '9' )					      								    								  
80 LOAD_CONST 3 ( '' )					      								    								  
82 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
88 JUMP_ABSOLUTE 72					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
8 >> 92 SETUP_LOOP 34 ( to 128 )			      								    								  
94 LOAD_GLOBAL 1 ( range )				      								    								  
96 LOAD_CONST 6 ( 1 )					      								    								  
98 LOAD_FAST 0 ( N )					      								    								  
100 LOAD_CONST 6 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 CALL_FUNCTION 2					      								    								  
106 GET_ITER						      								    								  
>> 108 FOR_ITER 16 ( to 126 )				      								    								  
110 STORE_FAST 1 ( i )					      								    								  
							      								    								  
9 112 LOAD_GLOBAL 0 ( print )				      								    								  
114 LOAD_CONST 2 ( '0' )				      								    								  
116 LOAD_CONST 3 ( '' )					      								    								  
118 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 POP_TOP						      								    								  
124 JUMP_ABSOLUTE 108					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
10 >> 128 LOAD_GLOBAL 0 ( print )			      								    								  
130 CALL_FUNCTION 0					      								    								  
132 POP_TOP						      								    								  
134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE				    FIND_NUMBER_OF_TRIANGLES_POSSIBLE				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE
--							      --							    --								  --
Disassembly of <code object findnumberofTriangles at 0x7f33e2 def findnumberofTriangles ( arr ) :			    def findnumberofTriangles ( arr ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
4 CALL_FUNCTION 1					      	  count = 0						    	count = 0						  
6 STORE_FAST 1 ( n )					      	  for i in range ( 0 , n - 2 ) :			    	for i in range ( 0 , n - 2 ) :				  
							      	      k = i + 2						    	    k = i + 2						  
3 8 LOAD_FAST 0 ( arr )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
10 LOAD_METHOD 1 ( sort )				      		  while ( k < n and arr [ i ] + arr [ j ] > arr [ k 		while k < n and arr [ i ] + arr [ j ] > arr [ k ] 
12 CALL_METHOD 0					      		      k += 1					    		    k += 1					  
14 POP_TOP						      		  if ( k > j ) :				    		if k > j :					  
							      		      count += k - j - 1			    		    count += ( k - j ) - 1 )			  
4 16 LOAD_CONST 1 ( 0 )					      	  return count						    return count						  
18 STORE_FAST 2 ( count )				      								    								  
							      								    								  
5 20 SETUP_LOOP 124 ( to 146 )				      								    								  
22 LOAD_GLOBAL 2 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 106 ( to 144 )				      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( i )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_ADD						      								    								  
46 STORE_FAST 4 ( k )					      								    								  
							      								    								  
7 48 SETUP_LOOP 92 ( to 142 )				      								    								  
50 LOAD_GLOBAL 2 ( range )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 74 ( to 140 )				      								    								  
66 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 68 SETUP_LOOP 44 ( to 114 )				      								    								  
>> 70 LOAD_FAST 4 ( k )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 112				      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 4 ( k )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
9 102 LOAD_FAST 4 ( k )					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 INPLACE_ADD						      								    								  
108 STORE_FAST 4 ( k )					      								    								  
110 JUMP_ABSOLUTE 70					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
10 >> 114 LOAD_FAST 4 ( k )				      								    								  
116 LOAD_FAST 5 ( j )					      								    								  
118 COMPARE_OP 4 ( > )					      								    								  
120 POP_JUMP_IF_FALSE 64				      								    								  
							      								    								  
11 122 LOAD_FAST 2 ( count )				      								    								  
124 LOAD_FAST 4 ( k )					      								    								  
126 LOAD_FAST 5 ( j )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 INPLACE_ADD						      								    								  
136 STORE_FAST 2 ( count )				      								    								  
138 JUMP_ABSOLUTE 64					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 JUMP_ABSOLUTE 36					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
12 >> 146 LOAD_FAST 2 ( count )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL		      MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			    MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			  MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL
--							      --							    --								  --
Disassembly of <code object moveSpaceInFront at 0x7f33e2653ed def moveSpaceInFront ( s ) :				    def moveSpaceInFront ( s ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  i = len ( s ) - 1 ;					    	i = len ( s ) - 1					  
2 LOAD_FAST 0 ( s )					      	  for j in range ( i , - 1 , - 1 ) :			    	for j in range ( i , - 1 , - 1 ) :			  
4 CALL_FUNCTION 1					      	      if ( s [ j ] != ' ' ) :				    	    if s [ j ] != ' ' :					  
6 LOAD_CONST 1 ( 1 )					      		  s = s [ : i ] + s [ j ] + s [ i + 1 : ]	    		s = s [ : i ] + s [ j ] + s [ i + 1 : ]		  
8 BINARY_SUBTRACT					      		  i -= 1 ;					    		i -= 1						  
10 STORE_FAST 1 ( i )					      	  while ( i >= 0 ) :					    	while i >= 0 :						  
							      	      s = s [ : i ] + ' ' + s [ i + 1 : ]		    	    s = s [ : i ] + ' ' + s [ i + 1 : ]			  
3 12 SETUP_LOOP 76 ( to 90 )				      	      i -= 1						    	    i -= 1						  
14 LOAD_GLOBAL 1 ( range )				      	  return s ;						    return s							  
16 LOAD_FAST 1 ( i )					      								    								  
18 LOAD_CONST 2 ( - 1 )					      								    								  
20 LOAD_CONST 2 ( - 1 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 60 ( to 88 )				      								    								  
28 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( ' ' )					      								    								  
38 COMPARE_OP 3 ( != )					      								    								  
40 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
5 42 LOAD_FAST 0 ( s )					      								    								  
44 LOAD_CONST 0 ( None )				      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 BUILD_SLICE 2					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( s )					      								    								  
54 LOAD_FAST 2 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_FAST 0 ( s )					      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_CONST 0 ( None )				      								    								  
70 BUILD_SLICE 2					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_FAST 0 ( s )					      								    								  
							      								    								  
6 78 LOAD_FAST 1 ( i )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 INPLACE_SUBTRACT					      								    								  
84 STORE_FAST 1 ( i )					      								    								  
86 JUMP_ABSOLUTE 26					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
7 >> 90 SETUP_LOOP 52 ( to 144 )			      								    								  
>> 92 LOAD_FAST 1 ( i )					      								    								  
94 LOAD_CONST 4 ( 0 )					      								    								  
96 COMPARE_OP 5 ( >= )					      								    								  
98 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
8 100 LOAD_FAST 0 ( s )					      								    								  
102 LOAD_CONST 0 ( None )				      								    								  
104 LOAD_FAST 1 ( i )					      								    								  
106 BUILD_SLICE 2					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 3 ( ' ' )				      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 0 ( s )					      								    								  
116 LOAD_FAST 1 ( i )					      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_CONST 0 ( None )				      								    								  
124 BUILD_SLICE 2					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_ADD						      								    								  
130 STORE_FAST 0 ( s )					      								    								  
							      								    								  
9 132 LOAD_FAST 1 ( i )					      								    								  
134 LOAD_CONST 1 ( 1 )					      								    								  
136 INPLACE_SUBTRACT					      								    								  
138 STORE_FAST 1 ( i )					      								    								  
140 JUMP_ABSOLUTE 92					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
10 >> 144 LOAD_FAST 0 ( s )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE
--							      --							    --								  --
Disassembly of <code object find3Numbers at 0x7f33e2649a50, f def find3Numbers ( A , arr_size , sum ) :			    def find3Numbers ( A , arr_size , sum ) :			  success : identical to gold
2 0 SETUP_LOOP 136 ( to 138 )				      	  for i in range ( 0 , arr_size - 2 ) :			    	for i in range ( 0 , arr_size - 2 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i + 1 , arr_size - 1 ) :		    	    for j in range ( i + 1 , arr_size - 1 ) :		  
4 LOAD_CONST 1 ( 0 )					      		  for k in range ( j + 1 , arr_size ) :		    		for k in range ( j + 1 , arr_size ) :		  
6 LOAD_FAST 1 ( arr_size )				      		      if A [ i ] + A [ j ] + A [ k ] == sum :	    		    if A [ i ] + A [ j ] + A [ k ] == sum :	  
8 LOAD_CONST 2 ( 2 )					      			  print ( "Triplet is" , A [ i ] , ", " , A 			print ( "Triplet is" , A [ i ] , ", " , A 
10 BINARY_SUBTRACT					      			  return True				    			return True				  
12 CALL_FUNCTION 2					      	  return False						    	return False						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 118 ( to 136 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 20 SETUP_LOOP 112 ( to 134 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( arr_size )				      								    								  
32 LOAD_CONST 3 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 90 ( to 132 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 44 SETUP_LOOP 84 ( to 130 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( arr_size )				      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 66 ( to 128 )				      								    								  
62 STORE_FAST 5 ( k )					      								    								  
							      								    								  
5 64 LOAD_FAST 0 ( A )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( A )					      								    								  
72 LOAD_FAST 4 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 0 ( A )					      								    								  
80 LOAD_FAST 5 ( k )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( sum )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 92 LOAD_GLOBAL 1 ( print )				      								    								  
94 LOAD_CONST 4 ( 'Triplet is' )			      								    								  
96 LOAD_FAST 0 ( A )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 5 ( ', ' )				      								    								  
104 LOAD_FAST 0 ( A )					      								    								  
106 LOAD_FAST 4 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 5 ( ', ' )				      								    								  
112 LOAD_FAST 0 ( A )					      								    								  
114 LOAD_FAST 5 ( k )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 6					      								    								  
120 POP_TOP						      								    								  
							      								    								  
7 122 LOAD_CONST 6 ( True )				      								    								  
124 RETURN_VALUE					      								    								  
126 JUMP_ABSOLUTE 60					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 JUMP_ABSOLUTE 40					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 JUMP_ABSOLUTE 16					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
8 >> 138 LOAD_CONST 7 ( False )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STOOGE_SORT						      STOOGE_SORT						    STOOGE_SORT							  STOOGE_SORT
--							      --							    --								  --
Disassembly of <code object stoogesort at 0x7f33e2653f60, fil def stoogesort ( arr , l , h ) :				    def stoogesort ( arr , l , h ) :				  failure : #Results: 9, 10
2 0 LOAD_FAST 1 ( l )					      	  if l >= h :						    	if l >= h :						  
2 LOAD_FAST 2 ( h )					      	      return						    	    return						  
4 COMPARE_OP 5 ( >= )					      	  if arr [ l ] > arr [ h ] :				    	if arr [ l ] > arr [ h ] :				  
6 POP_JUMP_IF_FALSE 12					      	      t = arr [ l ]					    	    t = arr [ l ]					  
							      	      arr [ l ] = arr [ h ]				    	    arr [ l ] = arr [ h ]				  
3 8 LOAD_CONST 0 ( None )				      	      arr [ h ] = t					    	    arr [ h ] = t					  
10 RETURN_VALUE						      	  if h - l + 1 > 2 :					    	if h - l + 1 > 2 :					  
							      	      t = ( int ) ( ( h - l + 1 ) / 3 )			    	    t = int ( ( h - l ) + 1 / 3 )			  
4 >> 12 LOAD_FAST 0 ( arr )				      	      stoogesort ( arr , l , ( h - t ) )		    	    stoogesort ( arr , l , h - t )			  
14 LOAD_FAST 1 ( l )					      	      stoogesort ( arr , l + t , ( h ) )		    	    stoogesort ( arr , l + t , h )			  
16 BINARY_SUBSCR					      	      stoogesort ( arr , l , ( h - t ) )		    	    stoogesort ( arr , l , h - t )			  
18 LOAD_FAST 0 ( arr )					      								    								  
20 LOAD_FAST 2 ( h )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 COMPARE_OP 4 ( > )					      								    								  
26 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 1 ( l )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 3 ( t )					      								    								  
							      								    								  
6 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( h )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 1 ( l )					      								    								  
46 STORE_SUBSCR						      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( t )					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 2 ( h )					      								    								  
54 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( h )				      								    								  
58 LOAD_FAST 1 ( l )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_CONST 2 ( 2 )					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
9 72 LOAD_GLOBAL 0 ( int )				      								    								  
74 LOAD_FAST 2 ( h )					      								    								  
76 LOAD_FAST 1 ( l )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_CONST 3 ( 3 )					      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 STORE_FAST 3 ( t )					      								    								  
							      								    								  
10 92 LOAD_GLOBAL 1 ( stoogesort )			      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 1 ( l )					      								    								  
98 LOAD_FAST 2 ( h )					      								    								  
100 LOAD_FAST 3 ( t )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 3					      								    								  
106 POP_TOP						      								    								  
							      								    								  
11 108 LOAD_GLOBAL 1 ( stoogesort )			      								    								  
110 LOAD_FAST 0 ( arr )					      								    								  
112 LOAD_FAST 1 ( l )					      								    								  
114 LOAD_FAST 3 ( t )					      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_FAST 2 ( h )					      								    								  
120 CALL_FUNCTION 3					      								    								  
122 POP_TOP						      								    								  
							      								    								  
12 124 LOAD_GLOBAL 1 ( stoogesort )			      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 1 ( l )					      								    								  
130 LOAD_FAST 2 ( h )					      								    								  
132 LOAD_FAST 3 ( t )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 CALL_FUNCTION 3					      								    								  
138 POP_TOP						      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			    FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1
--							      --							    --								  --
Disassembly of <code object CountTriangles at 0x7f33e2653ed0, def CountTriangles ( A ) :				    def CountTriangles ( A ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( A ) ;					    	n = len ( A )						  
2 LOAD_FAST 0 ( A )					      	  A.sort ( ) ;						    	A.sort ( )						  
4 CALL_FUNCTION 1					      	  count = 0 ;						    	count = 0						  
6 STORE_FAST 1 ( n )					      	  for i in range ( n - 1 , 0 , - 1 ) :			    	for i in range ( n - 1 , 0 , - 1 ) :			  
							      	      l = 0 ;						    	    l = 0						  
3 8 LOAD_FAST 0 ( A )					      	      r = i - 1 ;					    	    r = i - 1						  
10 LOAD_METHOD 1 ( sort )				      	      while ( l < r ) :					    	    while l < r :					  
12 CALL_METHOD 0					      		  if ( A [ l ] + A [ r ] > A [ i ] ) :		    		if A [ l ] + A [ r ] > A [ i ] :		  
14 POP_TOP						      		      count += r - l ;				    		    count += r - l				  
							      		      r -= 1 ;					    		    r -= 1					  
4 16 LOAD_CONST 1 ( 0 )					      		  else :					    		else :						  
18 STORE_FAST 2 ( count )				      		      l += 1 ;					    		    l += 1					  
							      	  print ( "No of possible solutions: " , count ) ;	    	print ( "No of possible solutions: " , count )		  
5 20 SETUP_LOOP 104 ( to 126 )				      								    								  
22 LOAD_GLOBAL 2 ( range )				      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 LOAD_CONST 3 ( - 1 )					      								    								  
34 CALL_FUNCTION 3					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 84 ( to 124 )				      								    								  
40 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 42 LOAD_CONST 1 ( 0 )					      								    								  
44 STORE_FAST 4 ( l )					      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 STORE_FAST 5 ( r )					      								    								  
							      								    								  
8 54 SETUP_LOOP 66 ( to 122 )				      								    								  
>> 56 LOAD_FAST 4 ( l )					      								    								  
58 LOAD_FAST 5 ( r )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
9 64 LOAD_FAST 0 ( A )					      								    								  
66 LOAD_FAST 4 ( l )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( A )					      								    								  
72 LOAD_FAST 5 ( r )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 0 ( A )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
10 88 LOAD_FAST 2 ( count )				      								    								  
90 LOAD_FAST 5 ( r )					      								    								  
92 LOAD_FAST 4 ( l )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 2 ( count )				      								    								  
							      								    								  
11 100 LOAD_FAST 5 ( r )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 INPLACE_SUBTRACT					      								    								  
106 STORE_FAST 5 ( r )					      								    								  
108 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
13 >> 110 LOAD_FAST 4 ( l )				      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 INPLACE_ADD						      								    								  
116 STORE_FAST 4 ( l )					      								    								  
118 JUMP_ABSOLUTE 56					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 38					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
14 >> 126 LOAD_GLOBAL 3 ( print )			      								    								  
128 LOAD_CONST 4 ( 'No of possible solutions: ' )	      								    								  
130 LOAD_FAST 2 ( count )				      								    								  
132 CALL_FUNCTION 2					      								    								  
134 POP_TOP						      								    								  
136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_REPEATING_AND_A_MISSING_NUMBER			      FIND_A_REPEATING_AND_A_MISSING_NUMBER			    FIND_A_REPEATING_AND_A_MISSING_NUMBER			  FIND_A_REPEATING_AND_A_MISSING_NUMBER
--							      --							    --								  --
Disassembly of <code object printTwoElements at 0x7f33e26494b def printTwoElements ( arr , size ) :			    def printTwoElements ( arr , size ) :			  script_not_found : None
2 0 SETUP_LOOP 98 ( to 100 )				      	  for i in range ( size ) :				    	for i in range ( size ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if arr [ abs ( arr [ i ] ) - 1 ] > 0 :		    	    if arr [ abs ( arr [ i ] ) - 1 ] > 0 :		  
4 LOAD_FAST 1 ( size )					      		  arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr 		arr [ abs ( arr [ i ] ) - 1 ] = - arr [ - abs ( a 
6 CALL_FUNCTION 1					      	      else :						    	    else :						  
8 GET_ITER						      		  print ( "The repeating element is" , abs ( arr [  		print ( "The kw is" , abs ( arr [ i ] ) )	  
>> 10 FOR_ITER 86 ( to 98 )				      	  for i in range ( size ) :				    	for i in range ( size ) :				  
12 STORE_FAST 2 ( i )					      	      if arr [ i ] > 0 :				    	    if arr [ i ] > 0 :					  
							      		  print ( "and the missing element is" , i + 1 )    		print ( "and the missing element is" , i + 1 )	  
3 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_GLOBAL 1 ( abs )				      								    								  
18 LOAD_FAST 0 ( arr )					      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_GLOBAL 1 ( abs )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 UNARY_NEGATIVE					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_GLOBAL 1 ( abs )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
6 >> 78 LOAD_GLOBAL 2 ( print )				      								    								  
80 LOAD_CONST 3 ( 'The repeating element is' )		      								    								  
82 LOAD_GLOBAL 1 ( abs )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_FUNCTION 1					      								    								  
92 CALL_FUNCTION 2					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 10					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
7 >> 100 SETUP_LOOP 42 ( to 144 )			      								    								  
102 LOAD_GLOBAL 0 ( range )				      								    								  
104 LOAD_FAST 1 ( size )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 30 ( to 142 )				      								    								  
112 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 114 LOAD_FAST 0 ( arr )				      								    								  
116 LOAD_FAST 2 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 COMPARE_OP 4 ( > )					      								    								  
124 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
9 126 LOAD_GLOBAL 2 ( print )				      								    								  
128 LOAD_CONST 4 ( 'and the missing element is' )	      								    								  
130 LOAD_FAST 2 ( i )					      								    								  
132 LOAD_CONST 1 ( 1 )					      								    								  
134 BINARY_ADD						      								    								  
136 CALL_FUNCTION 2					      								    								  
138 POP_TOP						      								    								  
140 JUMP_ABSOLUTE 110					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 LOAD_CONST 0 ( None )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
JUMP_SEARCH						      JUMP_SEARCH						    JUMP_SEARCH							  JUMP_SEARCH
--							      --							    --								  --
Disassembly of <code object jumpSearch at 0x7f33e2644930, fil def jumpSearch ( arr , x , n ) :				    def jumpSearch ( arr , x , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  step = math.sqrt ( n )				    	step = math.sqrt ( n )					  
2 LOAD_METHOD 1 ( sqrt )				      	  prev = 0						    	prev = 0						  
4 LOAD_FAST 2 ( n )					      	  while arr [ int ( min ( step , n ) - 1 ) ] < x :	    	while arr [ int ( min ( step , n ) - 1 ) ] < x :	  
6 CALL_METHOD 1						      	      prev = step					    	    prev = step						  
8 STORE_FAST 3 ( step )					      	      step += math.sqrt ( n )				    	    step += math.sqrt ( n )				  
							      	      if prev >= n :					    	    if prev >= n :					  
3 10 LOAD_CONST 1 ( 0 )					      		  return - 1					    		return - 1					  
12 STORE_FAST 4 ( prev )				      	  while arr [ int ( prev ) ] < x :			    	while arr [ int ( prev ) ] < x :			  
							      	      prev += 1						    	    prev += 1						  
4 14 SETUP_LOOP 60 ( to 76 )				      	      if prev == min ( step , n ) :			    	    if prev == min ( step , n ) :			  
>> 16 LOAD_FAST 0 ( arr )				      		  return - 1					    		return - 1					  
18 LOAD_GLOBAL 2 ( int )				      	  if arr [ int ( prev ) ] == x :			    if arr [ int ( prev ) ] == x :				  
20 LOAD_GLOBAL 3 ( min )				      	      return prev					    	return prev						  
22 LOAD_FAST 3 ( step )					      	  return - 1						    return - 1							  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 1 ( x )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
5 42 LOAD_FAST 3 ( step )				      								    								  
44 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
6 46 LOAD_FAST 3 ( step )				      								    								  
48 LOAD_GLOBAL 0 ( math )				      								    								  
50 LOAD_METHOD 1 ( sqrt )				      								    								  
52 LOAD_FAST 2 ( n )					      								    								  
54 CALL_METHOD 1					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( step )				      								    								  
							      								    								  
7 60 LOAD_FAST 4 ( prev )				      								    								  
62 LOAD_FAST 2 ( n )					      								    								  
64 COMPARE_OP 5 ( >= )					      								    								  
66 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
8 68 LOAD_CONST 3 ( - 1 )				      								    								  
70 RETURN_VALUE						      								    								  
72 JUMP_ABSOLUTE 16					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 SETUP_LOOP 46 ( to 124 )			      								    								  
>> 78 LOAD_FAST 0 ( arr )				      								    								  
80 LOAD_GLOBAL 2 ( int )				      								    								  
82 LOAD_FAST 4 ( prev )					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 1 ( x )					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
10 94 LOAD_FAST 4 ( prev )				      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
11 102 LOAD_FAST 4 ( prev )				      								    								  
104 LOAD_GLOBAL 3 ( min )				      								    								  
106 LOAD_FAST 3 ( step )				      								    								  
108 LOAD_FAST 2 ( n )					      								    								  
110 CALL_FUNCTION 2					      								    								  
112 COMPARE_OP 2 ( == )					      								    								  
114 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
12 116 LOAD_CONST 3 ( - 1 )				      								    								  
118 RETURN_VALUE					      								    								  
120 JUMP_ABSOLUTE 78					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_FAST 0 ( arr )				      								    								  
126 LOAD_GLOBAL 2 ( int )				      								    								  
128 LOAD_FAST 4 ( prev )				      								    								  
130 CALL_FUNCTION 1					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 1 ( x )					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
14 140 LOAD_FAST 4 ( prev )				      								    								  
142 RETURN_VALUE					      								    								  
							      								    								  
15 >> 144 LOAD_CONST 3 ( - 1 )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			      CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			    CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			  CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS
--							      --							    --								  --
Disassembly of <code object isPermutedMatrix at 0x7f33e2644f6 def isPermutedMatrix ( mat , n ) :			    def isPermutedMatrix ( mat , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  str_cat = ""						    	str_cat = ""						  
2 STORE_FAST 2 ( str_cat )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      str_cat = str_cat + "-" + str ( mat [ 0 ] [ i ] )	    	    str_cat = str_cat + "-" + str ( mat [ 0 ] [ i ] )	  
3 4 SETUP_LOOP 40 ( to 46 )				      	  str_cat = str_cat + str_cat				    	str_cat = str_cat + str_cat				  
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
8 LOAD_FAST 1 ( n )					      	      curr_str = ""					    	    curr_str = ""					  
10 CALL_FUNCTION 1					      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
12 GET_ITER						      		  curr_str = curr_str + "-" + str ( mat [ i ] [ j ] 		curr_str = curr_str + "-" + str ( mat [ i ] [ j ] 
>> 14 FOR_ITER 28 ( to 44 )				      	      if ( str_cat.find ( curr_str ) ) :		    	    if str_cat.find ( curr_str ) :			  
16 STORE_FAST 3 ( i )					      		  return True					    		return True					  
							      	  return False						    return False						  
4 18 LOAD_FAST 2 ( str_cat )				      								    								  
20 LOAD_CONST 2 ( '-' )					      								    								  
22 BINARY_ADD						      								    								  
24 LOAD_GLOBAL 1 ( str )				      								    								  
26 LOAD_FAST 0 ( mat )					      								    								  
28 LOAD_CONST 3 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 2 ( str_cat )				      								    								  
42 JUMP_ABSOLUTE 14					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_FAST 2 ( str_cat )				      								    								  
48 LOAD_FAST 2 ( str_cat )				      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 2 ( str_cat )				      								    								  
							      								    								  
6 54 SETUP_LOOP 78 ( to 134 )				      								    								  
56 LOAD_GLOBAL 0 ( range )				      								    								  
58 LOAD_CONST 4 ( 1 )					      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 64 ( to 132 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_CONST 1 ( '' )				      								    								  
72 STORE_FAST 4 ( curr_str )				      								    								  
							      								    								  
8 74 SETUP_LOOP 40 ( to 116 )				      								    								  
76 LOAD_GLOBAL 0 ( range )				      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 28 ( to 114 )				      								    								  
86 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 88 LOAD_FAST 4 ( curr_str )				      								    								  
90 LOAD_CONST 2 ( '-' )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_GLOBAL 1 ( str )				      								    								  
96 LOAD_FAST 0 ( mat )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 5 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 4 ( curr_str )				      								    								  
112 JUMP_ABSOLUTE 84					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
10 >> 116 LOAD_FAST 2 ( str_cat )			      								    								  
118 LOAD_METHOD 2 ( find )				      								    								  
120 LOAD_FAST 4 ( curr_str )				      								    								  
122 CALL_METHOD 1					      								    								  
124 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
11 126 LOAD_CONST 5 ( True )				      								    								  
128 RETURN_VALUE					      								    								  
130 JUMP_ABSOLUTE 66					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
12 >> 134 LOAD_CONST 6 ( False )			      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FITTING_SHELVES_PROBLEM					      FITTING_SHELVES_PROBLEM					    FITTING_SHELVES_PROBLEM					  FITTING_SHELVES_PROBLEM
--							      --							    --								  --
Disassembly of <code object minSpacePreferLarge at 0x7f33e264 def minSpacePreferLarge ( w , m , n ) :			    def minSpacePreferLarge ( w , m , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  num_m = 0						    	num_m = 0						  
2 STORE_FAST 3 ( num_m )				      	  num_n = 0						    	num_n = 0						  
							      	  rem = w						    	rem = w							  
3 4 LOAD_CONST 1 ( 0 )					      	  p = 0							    	p = 0							  
6 STORE_FAST 4 ( num_n )				      	  q = 0							    	q = 0							  
							      	  r = 0							    	r = 0							  
4 8 LOAD_FAST 0 ( w )					      	  while ( w >= n ) :					    	while w >= n :						  
10 STORE_FAST 5 ( rem )					      	      p = w / m						    	    p = w / m						  
							      	      r = w % m						    	    r = w % m						  
5 12 LOAD_CONST 1 ( 0 )					      	      if ( r <= rem ) :					    	    if r <= rem :					  
14 STORE_FAST 6 ( p )					      		  num_m = p					    		num_m = p					  
							      		  num_n = q					    		rem = q						  
6 16 LOAD_CONST 1 ( 0 )					      		  rem = r					    	    q += 1						  
18 STORE_FAST 7 ( q )					      	      q += 1						    	    w -= n						  
							      	      w -= n						    	print ( str ( int ( num_m ) ) + " " + str ( num_n ) + " " 
7 20 LOAD_CONST 1 ( 0 )					      	  print ( str ( int ( num_m ) ) + " " + str ( num_n ) + " " 								  
22 STORE_FAST 8 ( r )					      								    								  
							      								    								  
8 24 SETUP_LOOP 64 ( to 90 )				      								    								  
>> 26 LOAD_FAST 0 ( w )					      								    								  
28 LOAD_FAST 2 ( n )					      								    								  
30 COMPARE_OP 5 ( >= )					      								    								  
32 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
9 34 LOAD_FAST 0 ( w )					      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 STORE_FAST 6 ( p )					      								    								  
							      								    								  
10 42 LOAD_FAST 0 ( w )					      								    								  
44 LOAD_FAST 1 ( m )					      								    								  
46 BINARY_MODULO					      								    								  
48 STORE_FAST 8 ( r )					      								    								  
							      								    								  
11 50 LOAD_FAST 8 ( r )					      								    								  
52 LOAD_FAST 5 ( rem )					      								    								  
54 COMPARE_OP 1 ( <= )					      								    								  
56 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
12 58 LOAD_FAST 6 ( p )					      								    								  
60 STORE_FAST 3 ( num_m )				      								    								  
							      								    								  
13 62 LOAD_FAST 7 ( q )					      								    								  
64 STORE_FAST 4 ( num_n )				      								    								  
							      								    								  
14 66 LOAD_FAST 8 ( r )					      								    								  
68 STORE_FAST 5 ( rem )					      								    								  
							      								    								  
15 >> 70 LOAD_FAST 7 ( q )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 7 ( q )					      								    								  
							      								    								  
16 78 LOAD_FAST 0 ( w )					      								    								  
80 LOAD_FAST 2 ( n )					      								    								  
82 INPLACE_SUBTRACT					      								    								  
84 STORE_FAST 0 ( w )					      								    								  
86 JUMP_ABSOLUTE 26					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
17 >> 90 LOAD_GLOBAL 0 ( print )			      								    								  
92 LOAD_GLOBAL 1 ( str )				      								    								  
94 LOAD_GLOBAL 2 ( int )				      								    								  
96 LOAD_FAST 3 ( num_m )				      								    								  
98 CALL_FUNCTION 1					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 LOAD_CONST 3 ( ' ' )				      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_GLOBAL 1 ( str )				      								    								  
108 LOAD_FAST 4 ( num_n )				      								    								  
110 CALL_FUNCTION 1					      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_CONST 3 ( ' ' )				      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_GLOBAL 1 ( str )				      								    								  
120 LOAD_FAST 5 ( rem )					      								    								  
122 CALL_FUNCTION 1					      								    								  
124 BINARY_ADD						      								    								  
126 CALL_FUNCTION 1					      								    								  
128 POP_TOP						      								    								  
130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN
--							      --							    --								  --
Disassembly of <code object printMaxOfMin at 0x7f33e2653ed0,  def printMaxOfMin ( arr , n ) :				    def printMaxOfMin ( arr , n ) :				  script_not_found : None
2 0 SETUP_LOOP 130 ( to 132 )				      	  for k in range ( 1 , n + 1 ) :			    	for k in range ( 1 , n + 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      maxOfMin = INT_MIN ;				    	    maxOfMin = INT_MIN					  
4 LOAD_CONST 1 ( 1 )					      	      for i in range ( n - k + 1 ) :			    	    for i in range ( n - k + 1 ) :			  
6 LOAD_FAST 1 ( n )					      		  min = arr [ i ]				    		min = arr [ i ]					  
8 LOAD_CONST 1 ( 1 )					      		  for j in range ( k ) :			    		for j in range ( k ) :				  
10 BINARY_ADD						      		      if ( arr [ i + j ] < min ) :		    		    if arr [ i + j ] < min :			  
12 CALL_FUNCTION 2					      			  min = arr [ i + j ]			    			min = arr [ i + j ]			  
14 GET_ITER						      		  if ( min > maxOfMin ) :			    	    if min > maxOfMin :					  
>> 16 FOR_ITER 112 ( to 130 )				      		      maxOfMin = min				    		maxOfMin = min					  
18 STORE_FAST 2 ( k )					      	      print ( maxOfMin , end = " " )			    	print ( maxOfMin , end = " " )				  
							      								    								  
3 20 LOAD_GLOBAL 1 ( INT_MIN )				      								    								  
22 STORE_FAST 3 ( maxOfMin )				      								    								  
							      								    								  
4 24 SETUP_LOOP 90 ( to 116 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 LOAD_FAST 2 ( k )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 CALL_FUNCTION 1					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 70 ( to 114 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 STORE_FAST 5 ( min )					      								    								  
							      								    								  
6 54 SETUP_LOOP 44 ( to 100 )				      								    								  
56 LOAD_GLOBAL 0 ( range )				      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 32 ( to 98 )				      								    								  
66 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_FAST 6 ( j )					      								    								  
74 BINARY_ADD						      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 5 ( min )					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
8 84 LOAD_FAST 0 ( arr )				      								    								  
86 LOAD_FAST 4 ( i )					      								    								  
88 LOAD_FAST 6 ( j )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 STORE_FAST 5 ( min )					      								    								  
96 JUMP_ABSOLUTE 64					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
9 >> 100 LOAD_FAST 5 ( min )				      								    								  
102 LOAD_FAST 3 ( maxOfMin )				      								    								  
104 COMPARE_OP 4 ( > )					      								    								  
106 POP_JUMP_IF_FALSE 42				      								    								  
							      								    								  
10 108 LOAD_FAST 5 ( min )				      								    								  
110 STORE_FAST 3 ( maxOfMin )				      								    								  
112 JUMP_ABSOLUTE 42					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
11 >> 116 LOAD_GLOBAL 2 ( print )			      								    								  
118 LOAD_FAST 3 ( maxOfMin )				      								    								  
120 LOAD_CONST 2 ( ' ' )				      								    								  
122 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
124 CALL_FUNCTION_KW 2					      								    								  
126 POP_TOP						      								    								  
128 JUMP_ABSOLUTE 16					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object minJumps at 0x7f33e2653ed0, file  def minJumps ( arr , l , h ) :				    def minJumps ( arr , l , h ) :				  script_not_found : None
2 0 LOAD_FAST 2 ( h )					      	  if ( h == l ) :					    	if h == l :						  
2 LOAD_FAST 1 ( l )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( arr [ l ] == 0 ) :				    	if arr [ l ] == 0 :					  
6 POP_JUMP_IF_FALSE 12					      	      return float ( 'inf' )				    	    return float ( 'inf' )				  
							      	  min = float ( 'inf' )					    	min = float ( 'inf' )					  
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( l + 1 , h + 1 ) :			    	for i in range ( l + 1 , h + 1 ) :			  
10 RETURN_VALUE						      	      if ( i < l + arr [ l ] + 1 ) :			    	    if i < l [ l ] + 1 :				  
							      		  jumps = minJumps ( arr , i , h )		    		jumps = minJumps ( arr , i , h )		  
4 >> 12 LOAD_FAST 0 ( arr )				      		  if ( jumps != float ( 'inf' ) and jumps + 1 < min 		if jumps != float ( 'inf' ) and jumps + 1 < min : 
14 LOAD_FAST 1 ( l )					      		      min = jumps + 1				    		    min = jumps + 1				  
16 BINARY_SUBSCR					      	  return min						    	return min						  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 24 LOAD_GLOBAL 0 ( float )				      								    								  
26 LOAD_CONST 2 ( 'inf' )				      								    								  
28 CALL_FUNCTION 1					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( float )				      								    								  
34 LOAD_CONST 2 ( 'inf' )				      								    								  
36 CALL_FUNCTION 1					      								    								  
38 STORE_FAST 3 ( min )					      								    								  
							      								    								  
7 40 SETUP_LOOP 90 ( to 132 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_FAST 1 ( l )					      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 2 ( h )					      								    								  
52 LOAD_CONST 3 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 68 ( to 130 )				      								    								  
62 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 64 LOAD_FAST 4 ( i )					      								    								  
66 LOAD_FAST 1 ( l )					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 1 ( l )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
9 84 LOAD_GLOBAL 2 ( minJumps )				      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 LOAD_FAST 2 ( h )					      								    								  
92 CALL_FUNCTION 3					      								    								  
94 STORE_FAST 5 ( jumps )				      								    								  
							      								    								  
10 96 LOAD_FAST 5 ( jumps )				      								    								  
98 LOAD_GLOBAL 0 ( float )				      								    								  
100 LOAD_CONST 2 ( 'inf' )				      								    								  
102 CALL_FUNCTION 1					      								    								  
104 COMPARE_OP 3 ( != )					      								    								  
106 POP_JUMP_IF_FALSE 60				      								    								  
108 LOAD_FAST 5 ( jumps )				      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 3 ( min )					      								    								  
116 COMPARE_OP 0 ( < )					      								    								  
118 POP_JUMP_IF_FALSE 60				      								    								  
							      								    								  
11 120 LOAD_FAST 5 ( jumps )				      								    								  
122 LOAD_CONST 3 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 3 ( min )				      								    								  
128 JUMP_ABSOLUTE 60					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
12 >> 132 LOAD_FAST 3 ( min )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		      PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		    PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		  PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N
--							      --							    --								  --
Disassembly of <code object findConsecutive at 0x7f33e2649a50 def findConsecutive ( N ) :				    def findConsecutive ( N ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  start = 1						    	start = 1						  
2 STORE_FAST 1 ( start )				      	  end = ( N + 1 ) // 2					    	end = N + 1 // 2					  
							      	  while ( start < end ) :				    	while start < end :					  
3 4 LOAD_FAST 0 ( N )					      	      Sum = 0						    	    Sum = 0						  
6 LOAD_CONST 1 ( 1 )					      	      for i in range ( start , end + 1 ) :		    	    for i in range ( start , end + 1 ) :		  
8 BINARY_ADD						      		  Sum = Sum + i					    		Sum = Sum + i					  
10 LOAD_CONST 2 ( 2 )					      		  if ( Sum == N ) :				    		if Sum == N :					  
12 BINARY_FLOOR_DIVIDE					      		      for j in range ( start , i + 1 ) :	    		    for j in range ( start , i + 1 ) :		  
14 STORE_FAST 2 ( end )					      			  print ( j , end = " " )		    			print ( j , end = " " )			  
							      		      print ( )					    		print ( )					  
4 16 SETUP_LOOP 122 ( to 140 )				      		      break					    		break						  
>> 18 LOAD_FAST 1 ( start )				      		  if ( Sum > N ) :				    	    if Sum > N :					  
20 LOAD_FAST 2 ( end )					      		      break					    		break						  
22 COMPARE_OP 0 ( < )					      	      Sum = 0						    	Sum = 0							  
24 POP_JUMP_IF_FALSE 138				      	      start += 1					    	start += 1						  
							      								    								  
5 26 LOAD_CONST 3 ( 0 )					      								    								  
28 STORE_FAST 3 ( Sum )					      								    								  
							      								    								  
6 30 SETUP_LOOP 92 ( to 124 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 1 ( start )				      								    								  
36 LOAD_FAST 2 ( end )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 74 ( to 122 )				      								    								  
48 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( Sum )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( Sum )					      								    								  
							      								    								  
8 58 LOAD_FAST 3 ( Sum )				      								    								  
60 LOAD_FAST 0 ( N )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
9 66 SETUP_LOOP 34 ( to 102 )				      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_FAST 1 ( start )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 2					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 16 ( to 100 )				      								    								  
84 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 86 LOAD_GLOBAL 1 ( print )				      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 LOAD_CONST 4 ( ' ' )					      								    								  
92 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
94 CALL_FUNCTION_KW 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 82					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_GLOBAL 1 ( print )			      								    								  
104 CALL_FUNCTION 0					      								    								  
106 POP_TOP						      								    								  
							      								    								  
12 108 BREAK_LOOP					      								    								  
							      								    								  
13 >> 110 LOAD_FAST 3 ( Sum )				      								    								  
112 LOAD_FAST 0 ( N )					      								    								  
114 COMPARE_OP 4 ( > )					      								    								  
116 POP_JUMP_IF_FALSE 46				      								    								  
							      								    								  
14 118 BREAK_LOOP					      								    								  
120 JUMP_ABSOLUTE 46					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
15 >> 124 LOAD_CONST 3 ( 0 )				      								    								  
126 STORE_FAST 3 ( Sum )				      								    								  
							      								    								  
16 128 LOAD_FAST 1 ( start )				      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 1 ( start )				      								    								  
136 JUMP_ABSOLUTE 18					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1
--							      --							    --								  --
Disassembly of <code object lis at 0x7f33e2644f60, file "<dis def lis ( arr ) :						    def lis ( arr ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  lis = [ 1 ] * n					    	lis = [ 1 ] * n						  
4 CALL_FUNCTION 1					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
6 STORE_FAST 1 ( n )					      	      for j in range ( 0 , i ) :			    	    for j in range ( 0 , i ) :				  
							      		  if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  		if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  
3 8 LOAD_CONST 1 ( 1 )					      		      lis [ i ] = lis [ j ] + 1			    		    lis [ i ] = lis [ j ] + 1			  
10 BUILD_LIST 1						      	  maximum = 0						    	maximum = 0						  
12 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
14 BINARY_MULTIPLY					      	      maximum = max ( maximum , lis [ i ] )		    	    maximum = max ( maximum , lis [ i ] )		  
16 STORE_FAST 2 ( lis )					      	  return maximum					    	return maximum						  
							      								    								  
4 18 SETUP_LOOP 90 ( to 110 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 76 ( to 108 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 34 SETUP_LOOP 70 ( to 106 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 56 ( to 104 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 4 ( > )					      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
66 LOAD_FAST 2 ( lis )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 2 ( lis )					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 86 LOAD_FAST 2 ( lis )				      								    								  
88 LOAD_FAST 4 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 2 ( lis )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 STORE_SUBSCR					      								    								  
102 JUMP_ABSOLUTE 46					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 30					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
8 >> 110 LOAD_CONST 2 ( 0 )				      								    								  
112 STORE_FAST 5 ( maximum )				      								    								  
							      								    								  
9 114 SETUP_LOOP 30 ( to 146 )				      								    								  
116 LOAD_GLOBAL 1 ( range )				      								    								  
118 LOAD_FAST 1 ( n )					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 18 ( to 144 )				      								    								  
126 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 128 LOAD_GLOBAL 2 ( max )				      								    								  
130 LOAD_FAST 5 ( maximum )				      								    								  
132 LOAD_FAST 2 ( lis )					      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 STORE_FAST 5 ( maximum )				      								    								  
142 JUMP_ABSOLUTE 124					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
11 >> 146 LOAD_FAST 5 ( maximum )			      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A
--							      --							    --								  --
Disassembly of <code object findmin at 0x7f33e2644f60, file " def findmin ( p , n ) :					    def findmin ( p , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 , 0 ) )			      	  a , b , c , d = 0 , 0 , 0 , 0				    	a , b , c , d = 0 , 0 , 0				  
2 UNPACK_SEQUENCE 4					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( a )					      	      if ( p [ i ] [ 0 ] <= 0 ) :			    	    if p [ i ] [ 0 ] <= 0 :				  
6 STORE_FAST 3 ( b )					      		  a += 1					    		a += 1						  
8 STORE_FAST 4 ( c )					      	      elif ( p [ i ] [ 0 ] >= 0 ) :			    	    elif p [ i ] [ 0 ] >= 0 :				  
10 STORE_FAST 5 ( d )					      		  b += 1					    		b += 1						  
							      	      if ( p [ i ] [ 1 ] >= 0 ) :			    	    if p [ i ] [ 1 ] >= 0 :				  
3 12 SETUP_LOOP 116 ( to 130 )				      		  c += 1					    		c += 1						  
14 LOAD_GLOBAL 0 ( range )				      	      elif ( p [ i ] [ 1 ] <= 0 ) :			    	    elif p [ i ] [ 1 ] <= 0 :				  
16 LOAD_FAST 1 ( n )					      		  d += 1					    		d += 1						  
18 CALL_FUNCTION 1					      	  return min ( [ a , b , c , d ] )			    return min ( a , b , c , d )				  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 104 ( to 128 )				      								    								  
24 STORE_FAST 6 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( p )					      								    								  
28 LOAD_FAST 6 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 2 ( 0 )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 42 LOAD_FAST 2 ( a )					      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 2 ( a )					      								    								  
50 JUMP_FORWARD 24 ( to 76 )				      								    								  
							      								    								  
6 >> 52 LOAD_FAST 0 ( p )				      								    								  
54 LOAD_FAST 6 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 2 ( 0 )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 2 ( 0 )					      								    								  
64 COMPARE_OP 5 ( >= )					      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
7 68 LOAD_FAST 3 ( b )					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 3 ( b )					      								    								  
							      								    								  
8 >> 76 LOAD_FAST 0 ( p )				      								    								  
78 LOAD_FAST 6 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 2 ( 0 )					      								    								  
88 COMPARE_OP 5 ( >= )					      								    								  
90 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
9 92 LOAD_FAST 4 ( c )					      								    								  
94 LOAD_CONST 3 ( 1 )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 4 ( c )					      								    								  
100 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
10 >> 102 LOAD_FAST 0 ( p )				      								    								  
104 LOAD_FAST 6 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 3 ( 1 )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 2 ( 0 )					      								    								  
114 COMPARE_OP 1 ( <= )					      								    								  
116 POP_JUMP_IF_FALSE 22				      								    								  
							      								    								  
11 118 LOAD_FAST 5 ( d )				      								    								  
120 LOAD_CONST 3 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 5 ( d )					      								    								  
126 JUMP_ABSOLUTE 22					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
12 >> 130 LOAD_GLOBAL 1 ( min )				      								    								  
132 LOAD_FAST 2 ( a )					      								    								  
134 LOAD_FAST 3 ( b )					      								    								  
136 LOAD_FAST 4 ( c )					      								    								  
138 LOAD_FAST 5 ( d )					      								    								  
140 BUILD_LIST 4					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
Disassembly of <code object countNum at 0x7f33e26494b0, file  def countNum ( arr , n ) :				    def countNum ( arr , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  s = dict ( )						    	s = dict ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9		    	count , maxm , minm = ( 0 , - 1000000000 , 1000000000 )	  _sa.valid/ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENT
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  S_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1.py", line 44
							      	      s [ arr [ i ] ] = 1				    	    s [ arr [ i ] ] = 1					     return count     ^ SyntaxError: 'return' outsid
3 6 LOAD_CONST 1 ( ( 0 , - 1000000000 , 1000000000 ) )	      	      if ( arr [ i ] < minm ) :				    	    if arr [ i ] < minm :				  e function
8 UNPACK_SEQUENCE 3					      		  minm = arr [ i ]				    		minm = arr [ i ]				  
10 STORE_FAST 3 ( count )				      	      if ( arr [ i ] > maxm ) :				    	    if arr [ i ] > maxm :				  
12 STORE_FAST 4 ( maxm )				      		  maxm = arr [ i ]				    		maxm = arr [ i ]				  
14 STORE_FAST 5 ( minm )				      	  for i in range ( minm , maxm + 1 ) :			    	for i in range ( minm , maxm + 1 ) :			  
							      	      if i not in s.keys ( ) :				    	    if i not in s.keys ( ) :				  
4 16 SETUP_LOOP 68 ( to 86 )				      		  count += 1					    		count += 1					  
18 LOAD_GLOBAL 1 ( range )				      	  return count						    return count						  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 56 ( to 84 )				      								    								  
28 STORE_FAST 6 ( i )					      								    								  
							      								    								  
5 30 LOAD_CONST 2 ( 1 )					      								    								  
32 LOAD_FAST 2 ( s )					      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 6 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 STORE_SUBSCR						      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 6 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 5 ( minm )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 STORE_FAST 5 ( minm )				      								    								  
							      								    								  
8 >> 62 LOAD_FAST 0 ( arr )				      								    								  
64 LOAD_FAST 6 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 4 ( maxm )					      								    								  
70 COMPARE_OP 4 ( > )					      								    								  
72 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
9 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 6 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 4 ( maxm )				      								    								  
82 JUMP_ABSOLUTE 26					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 SETUP_LOOP 42 ( to 130 )			      								    								  
88 LOAD_GLOBAL 1 ( range )				      								    								  
90 LOAD_FAST 5 ( minm )					      								    								  
92 LOAD_FAST 4 ( maxm )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 CALL_FUNCTION 2					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 24 ( to 128 )				      								    								  
104 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 106 LOAD_FAST 6 ( i )				      								    								  
108 LOAD_FAST 2 ( s )					      								    								  
110 LOAD_METHOD 2 ( keys )				      								    								  
112 CALL_METHOD 0					      								    								  
114 COMPARE_OP 7 ( not in )				      								    								  
116 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
12 118 LOAD_FAST 3 ( count )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 3 ( count )				      								    								  
126 JUMP_ABSOLUTE 102					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
13 >> 130 LOAD_FAST 3 ( count )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS	      GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		    GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		  GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS
--							      --							    --								  --
Disassembly of <code object findMin at 0x7f33e2644f60, file " def findMin ( V ) :					    def findMin ( V ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  deno = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ]    	deno = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ]	  
2 LOAD_CONST 2 ( 2 )					      	  n = len ( deno )					    	n = len ( deno )					  
4 LOAD_CONST 3 ( 5 )					      	  ans = [ ]						    	ans = [ ]						  
6 LOAD_CONST 4 ( 10 )					      	  i = n - 1						    	i = n - 1						  
8 LOAD_CONST 5 ( 20 )					      	  while ( i >= 0 ) :					    	while i >= 0 :						  
10 LOAD_CONST 6 ( 50 )					      	      while ( V >= deno [ i ] ) :			    	    while V >= deno [ i ] :				  
12 LOAD_CONST 7 ( 100 )					      		  V -= deno [ i ]				    		V -= deno [ i ]					  
14 LOAD_CONST 8 ( 500 )					      		  ans.append ( deno [ i ] )			    		ans.append ( deno [ i ] )			  
16 LOAD_CONST 9 ( 1000 )				      	      i -= 1						    	    i -= 1						  
18 BUILD_LIST 9						      	  for i in range ( len ( ans ) ) :			    	for i in range ( len ( ans ) ) :			  
20 STORE_FAST 1 ( deno )				      	      print ( ans [ i ] , end = " " )			    	    print ( ans [ i ] , end = ' ' )			  
							      								    								  
3 22 LOAD_GLOBAL 0 ( len )				      								    								  
24 LOAD_FAST 1 ( deno )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 STORE_FAST 2 ( n )					      								    								  
							      								    								  
4 30 BUILD_LIST 0					      								    								  
32 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
5 34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 42 SETUP_LOOP 64 ( to 108 )				      								    								  
>> 44 LOAD_FAST 4 ( i )					      								    								  
46 LOAD_CONST 10 ( 0 )					      								    								  
48 COMPARE_OP 5 ( >= )					      								    								  
50 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
7 52 SETUP_LOOP 42 ( to 96 )				      								    								  
>> 54 LOAD_FAST 0 ( V )					      								    								  
56 LOAD_FAST 1 ( deno )					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 5 ( >= )					      								    								  
64 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( V )					      								    								  
68 LOAD_FAST 1 ( deno )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 INPLACE_SUBTRACT					      								    								  
76 STORE_FAST 0 ( V )					      								    								  
							      								    								  
9 78 LOAD_FAST 3 ( ans )				      								    								  
80 LOAD_METHOD 1 ( append )				      								    								  
82 LOAD_FAST 1 ( deno )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_METHOD 1					      								    								  
90 POP_TOP						      								    								  
92 JUMP_ABSOLUTE 54					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 4 ( i )				      								    								  
98 LOAD_CONST 1 ( 1 )					      								    								  
100 INPLACE_SUBTRACT					      								    								  
102 STORE_FAST 4 ( i )					      								    								  
104 JUMP_ABSOLUTE 44					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
11 >> 108 SETUP_LOOP 36 ( to 146 )			      								    								  
110 LOAD_GLOBAL 2 ( range )				      								    								  
112 LOAD_GLOBAL 0 ( len )				      								    								  
114 LOAD_FAST 3 ( ans )					      								    								  
116 CALL_FUNCTION 1					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 GET_ITER						      								    								  
>> 122 FOR_ITER 20 ( to 144 )				      								    								  
124 STORE_FAST 4 ( i )					      								    								  
							      								    								  
12 126 LOAD_GLOBAL 3 ( print )				      								    								  
128 LOAD_FAST 3 ( ans )					      								    								  
130 LOAD_FAST 4 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 11 ( ' ' )				      								    								  
136 LOAD_CONST 12 ( ( 'end' , ) )			      								    								  
138 CALL_FUNCTION_KW 2					      								    								  
140 POP_TOP						      								    								  
142 JUMP_ABSOLUTE 122					      								    								  
>> 144 POP_BLOCK					      								    								  
>> 146 LOAD_CONST 0 ( None )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECODE_MEDIAN_STRING_ORIGINAL_STRING			      DECODE_MEDIAN_STRING_ORIGINAL_STRING			    DECODE_MEDIAN_STRING_ORIGINAL_STRING			  DECODE_MEDIAN_STRING_ORIGINAL_STRING
--							      --							    --								  --
Disassembly of <code object decodeMedianString at 0x7f33e2649 def decodeMedianString ( s ) :				    def decodeMedianString ( s ) :				  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s )						    	l = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  s1 = ""						    	s1 = ''							  
4 CALL_FUNCTION 1					      	  if ( l % 2 == 0 ) :					    	if l % 2 == 0 :						  
6 STORE_FAST 1 ( l )					      	      isEven = True					    	    isEven = True					  
							      	  else :						    	else :							  
3 8 LOAD_CONST 1 ( '' )					      	      isEven = False					    	    isEven = False					  
10 STORE_FAST 2 ( s1 )					      	  for i in range ( 0 , l , 2 ) :			    	for i in range ( 0 , l , 2 ) :				  
							      	      if ( isEven ) :					    	    if isEven :						  
4 12 LOAD_FAST 1 ( l )					      		  s1 = s [ i ] + s1				    		s1 = s [ i ] + s1				  
14 LOAD_CONST 2 ( 2 )					      		  s1 += s [ i + 1 ]				    		s1 += s [ i + 1 ]				  
16 BINARY_MODULO					      	      else :						    	    elif l - i > 1 :					  
18 LOAD_CONST 3 ( 0 )					      		  if ( l - i > 1 ) :				    		s1 += s [ i ]					  
20 COMPARE_OP 2 ( == )					      		      s1 += s [ i ]				    		s1 = s [ i + 1 ] + s1				  
22 POP_JUMP_IF_FALSE 30					      		      s1 = s [ i + 1 ] + s1			    	    else :						  
							      		  else :					    		s1 += s [ i ]					  
5 24 LOAD_CONST 4 ( True )				      		      s1 += s [ i ]				    	return s1						  
26 STORE_FAST 3 ( isEven )				      	  return s1						    								  
28 JUMP_FORWARD 4 ( to 34 )				      								    								  
							      								    								  
7 >> 30 LOAD_CONST 5 ( False )				      								    								  
32 STORE_FAST 3 ( isEven )				      								    								  
							      								    								  
8 >> 34 SETUP_LOOP 108 ( to 144 )			      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_CONST 3 ( 0 )					      								    								  
40 LOAD_FAST 1 ( l )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 CALL_FUNCTION 3					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 92 ( to 142 )				      								    								  
50 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 52 LOAD_FAST 3 ( isEven )				      								    								  
54 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
10 56 LOAD_FAST 0 ( s )					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( s1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
11 68 LOAD_FAST 2 ( s1 )				      								    								  
70 LOAD_FAST 0 ( s )					      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 LOAD_CONST 6 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 BINARY_SUBSCR					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 2 ( s1 )					      								    								  
84 JUMP_ABSOLUTE 48					      								    								  
							      								    								  
13 >> 86 LOAD_FAST 1 ( l )				      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_CONST 6 ( 1 )					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
14 98 LOAD_FAST 2 ( s1 )				      								    								  
100 LOAD_FAST 0 ( s )					      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 INPLACE_ADD						      								    								  
108 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
15 110 LOAD_FAST 0 ( s )				      								    								  
112 LOAD_FAST 4 ( i )					      								    								  
114 LOAD_CONST 6 ( 1 )					      								    								  
116 BINARY_ADD						      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 2 ( s1 )					      								    								  
122 BINARY_ADD						      								    								  
124 STORE_FAST 2 ( s1 )					      								    								  
126 JUMP_ABSOLUTE 48					      								    								  
							      								    								  
17 >> 128 LOAD_FAST 2 ( s1 )				      								    								  
130 LOAD_FAST 0 ( s )					      								    								  
132 LOAD_FAST 4 ( i )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 INPLACE_ADD						      								    								  
138 STORE_FAST 2 ( s1 )					      								    								  
140 JUMP_ABSOLUTE 48					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
18 >> 144 LOAD_FAST 2 ( s1 )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			      MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			    MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			  MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE
--							      --							    --								  --
Disassembly of <code object merge at 0x7f33e2653ed0, file "<d def merge ( ar1 , ar2 , m , n ) :				    def merge ( ar1 , ar2 , m , n ) :				  script_not_found : None
2 0 SETUP_LOOP 146 ( to 148 )				      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      last = ar1 [ m - 1 ]				    	    last = ar1 [ m - 1 ]				  
4 LOAD_FAST 3 ( n )					      	      j = m - 2						    	    j = m - 2						  
6 LOAD_CONST 1 ( 1 )					      	      while ( j >= 0 and ar1 [ j ] > ar2 [ i ] ) :	    	    while j >= 0 and ar1 [ j ] > ar2 [ i ] :		  
8 BINARY_SUBTRACT					      		  ar1 [ j + 1 ] = ar1 [ j ]			    		ar1 [ j + 1 ] = ar1 [ j ]			  
10 LOAD_CONST 2 ( - 1 )					      		  j -= 1					    		j -= 1						  
12 LOAD_CONST 2 ( - 1 )					      	      if ( j != m - 2 or last > ar2 [ i ] ) :		    	    if j != m - 2 or last > ar2 [ i ] :			  
14 CALL_FUNCTION 3					      		  ar1 [ j + 1 ] = ar2 [ i ]			    		ar1 [ j + 1 ] = ar2 [ i ]			  
16 GET_ITER						      		  ar2 [ i ] = last				    		ar2 [ i ] = last				  
>> 18 FOR_ITER 126 ( to 146 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
3 22 LOAD_FAST 0 ( ar1 )				      								    								  
24 LOAD_FAST 2 ( m )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 BINARY_SUBSCR					      								    								  
32 STORE_FAST 5 ( last )				      								    								  
							      								    								  
4 34 LOAD_FAST 2 ( m )					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 42 SETUP_LOOP 52 ( to 96 )				      								    								  
>> 44 LOAD_FAST 6 ( j )					      								    								  
46 LOAD_CONST 4 ( 0 )					      								    								  
48 COMPARE_OP 5 ( >= )					      								    								  
50 POP_JUMP_IF_FALSE 94					      								    								  
52 LOAD_FAST 0 ( ar1 )					      								    								  
54 LOAD_FAST 6 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 1 ( ar2 )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
6 68 LOAD_FAST 0 ( ar1 )				      								    								  
70 LOAD_FAST 6 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( ar1 )					      								    								  
76 LOAD_FAST 6 ( j )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
7 84 LOAD_FAST 6 ( j )					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 INPLACE_SUBTRACT					      								    								  
90 STORE_FAST 6 ( j )					      								    								  
92 JUMP_ABSOLUTE 44					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
8 >> 96 LOAD_FAST 6 ( j )				      								    								  
98 LOAD_FAST 2 ( m )					      								    								  
100 LOAD_CONST 3 ( 2 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 COMPARE_OP 3 ( != )					      								    								  
106 POP_JUMP_IF_TRUE 120				      								    								  
108 LOAD_FAST 5 ( last )				      								    								  
110 LOAD_FAST 1 ( ar2 )					      								    								  
112 LOAD_FAST 4 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 18				      								    								  
							      								    								  
9 >> 120 LOAD_FAST 1 ( ar2 )				      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( ar1 )					      								    								  
128 LOAD_FAST 6 ( j )					      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 STORE_SUBSCR					      								    								  
							      								    								  
10 136 LOAD_FAST 5 ( last )				      								    								  
138 LOAD_FAST 1 ( ar2 )					      								    								  
140 LOAD_FAST 4 ( i )					      								    								  
142 STORE_SUBSCR					      								    								  
144 JUMP_ABSOLUTE 18					      								    								  
>> 146 POP_BLOCK					      								    								  
>> 148 LOAD_CONST 0 ( None )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY_1				      FLOOR_IN_A_SORTED_ARRAY_1					    FLOOR_IN_A_SORTED_ARRAY_1					  FLOOR_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object floorSearch at 0x7f33e2644f60, fi def floorSearch ( arr , low , high , x ) :		    def floorSearch ( arr , low , high , x = None ) :		  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( low )					      	  if ( low > high ) :					    	if low > high :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 2 ( high )					      	      return - 1					    	    return - 1						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/FLOOR
4 COMPARE_OP 4 ( > )					      	  if ( x >= arr [ high ] ) :				    	if x >= arr [ high ] :					  _IN_A_SORTED_ARRAY_1.py", line 62, in <module>
6 POP_JUMP_IF_FALSE 12					      	      return high					    	    return high						   if f_filled(*parameters_set) == f_gold(*parameter
							      	  mid = int ( ( low + high ) / 2 )			    	mid = int ( low + high / 2 )				  s_set):   File "/home/ubuntu/TransCoder/models/eva
3 8 LOAD_CONST 1 ( - 1 )				      	  if ( arr [ mid ] == x ) :				    	if arr [ mid ] == x :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
10 RETURN_VALUE						      	      return mid					    	    return mid						  _sa.valid/FLOOR_IN_A_SORTED_ARRAY_1.py", line 43,
							      	  if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 	if mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] : in f_filled	  return f_filled ( arr , low , mid
4 >> 12 LOAD_FAST 3 ( x )				      	      return mid - 1					    	    return mid - 1					  - 1 , x )   File "/home/ubuntu/TransCoder/models/e
14 LOAD_FAST 0 ( arr )					      	  if ( x < arr [ mid ] ) :				    	if x < arr [ mid ] :					  val/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-pyth
16 LOAD_FAST 2 ( high )					      	      return floorSearch ( arr , low , mid - 1 , x )	    	    return floorSearch ( arr , low , mid - 1 , x )	  on_sa.valid/FLOOR_IN_A_SORTED_ARRAY_1.py", line 43
18 BINARY_SUBSCR					      	  return floorSearch ( arr , mid + 1 , high , x )	    	return floorSearch ( arr , mid + 1 , high , x )		  , in f_filled	    return f_filled ( arr , low , mi
20 COMPARE_OP 5 ( >= )					      								    								  d - 1 , x )	File "/home/ubuntu/TransCoder/models
22 POP_JUMP_IF_FALSE 28					      								    								  /eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-py
							      								    								  thon_sa.valid/FLOOR_IN_A_SORTED_ARRAY_1.py", line
5 24 LOAD_FAST 2 ( high )				      								    								  43, in f_filled     return f_filled ( arr , low ,
26 RETURN_VALUE						      								    								  mid - 1 , x )	  [Previous line repeated 994 more t
							      								    								  imes]	  File "/home/ubuntu/TransCoder/models/eval/
6 >> 28 LOAD_GLOBAL 0 ( int )				      								    								  mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python_s
30 LOAD_FAST 1 ( low )					      								    								  a.valid/FLOOR_IN_A_SORTED_ARRAY_1.py", line 33, in
32 LOAD_FAST 2 ( high )					      								    								   f_filled	if low > high : RecursionError: maxi
34 BINARY_ADD						      								    								  mum recursion depth exceeded in comparison
36 LOAD_CONST 2 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( mid )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( x )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_FAST 4 ( mid )				      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 4 ( mid )				      								    								  
62 LOAD_CONST 3 ( 0 )					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 104				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( mid )					      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 3 ( x )					      								    								  
80 COMPARE_OP 1 ( <= )					      								    								  
82 POP_JUMP_IF_FALSE 104				      								    								  
84 LOAD_FAST 3 ( x )					      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( mid )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 0 ( < )					      								    								  
94 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
10 96 LOAD_FAST 4 ( mid )				      								    								  
98 LOAD_CONST 4 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 RETURN_VALUE					      								    								  
							      								    								  
11 >> 104 LOAD_FAST 3 ( x )				      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 4 ( mid )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
12 116 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 1 ( low )					      								    								  
122 LOAD_FAST 4 ( mid )					      								    								  
124 LOAD_CONST 4 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_FAST 3 ( x )					      								    								  
130 CALL_FUNCTION 4					      								    								  
132 RETURN_VALUE					      								    								  
							      								    								  
13 >> 134 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 4 ( mid )					      								    								  
140 LOAD_CONST 4 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 LOAD_FAST 2 ( high )				      								    								  
146 LOAD_FAST 3 ( x )					      								    								  
148 CALL_FUNCTION 4					      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL			  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL
--							      --							    --								  --
Disassembly of <code object substringConversions at 0x7f33e26 def substringConversions ( s , k , b ) :			    def substringConversions ( s , k , b ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s ) ;					    	l = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  for i in range ( l ) :				    	for i in range ( l ) :					  
4 CALL_FUNCTION 1					      	      if ( ( i + k ) < l + 1 ) :			    	    if i + k < l + 1 :					  
6 STORE_FAST 3 ( l )					      		  sub = s [ i : i + k ] ;			    		sub = s [ i : i + k ]				  
							      		  sum , counter = 0 , 0 ;			    		sum , counter = 0 , 0				  
3 8 SETUP_LOOP 140 ( to 150 )				      		  for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :  		for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :  
10 LOAD_GLOBAL 1 ( range )				      		      sum = sum + ( ( ord ( sub [ i ] ) - ord ( '0' 		    sum = sum ( ord ( sub [ i ] ) - ord ( b , cou 
12 LOAD_FAST 3 ( l )					      		      counter += 1 ;				    		    counter += 1				  
14 CALL_FUNCTION 1					      		  print ( sum , end = " " ) ;			    	    print ( sum , end = " " )				  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 128 ( to 148 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 4 ( i )					      								    								  
24 LOAD_FAST 1 ( k )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 3 ( l )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( s )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 BINARY_ADD						      								    								  
48 BUILD_SLICE 2					      								    								  
50 BINARY_SUBSCR					      								    								  
52 STORE_FAST 5 ( sub )					      								    								  
							      								    								  
6 54 LOAD_CONST 2 ( ( 0 , 0 ) )				      								    								  
56 UNPACK_SEQUENCE 2					      								    								  
58 STORE_FAST 6 ( sum )					      								    								  
60 STORE_FAST 7 ( counter )				      								    								  
							      								    								  
7 62 SETUP_LOOP 70 ( to 134 )				      								    								  
64 LOAD_GLOBAL 1 ( range )				      								    								  
66 LOAD_GLOBAL 0 ( len )				      								    								  
68 LOAD_FAST 5 ( sub )					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_CONST 3 ( - 1 )					      								    								  
78 LOAD_CONST 3 ( - 1 )					      								    								  
80 CALL_FUNCTION 3					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 46 ( to 132 )				      								    								  
86 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 88 LOAD_FAST 6 ( sum )				      								    								  
90 LOAD_GLOBAL 2 ( ord )				      								    								  
92 LOAD_FAST 5 ( sub )					      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 LOAD_GLOBAL 2 ( ord )				      								    								  
102 LOAD_CONST 4 ( '0' )				      								    								  
104 CALL_FUNCTION 1					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_GLOBAL 3 ( pow )				      								    								  
110 LOAD_FAST 2 ( b )					      								    								  
112 LOAD_FAST 7 ( counter )				      								    								  
114 CALL_FUNCTION 2					      								    								  
116 BINARY_MULTIPLY					      								    								  
118 BINARY_ADD						      								    								  
120 STORE_FAST 6 ( sum )				      								    								  
							      								    								  
9 122 LOAD_FAST 7 ( counter )				      								    								  
124 LOAD_CONST 1 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 7 ( counter )				      								    								  
130 JUMP_ABSOLUTE 84					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
10 >> 134 LOAD_GLOBAL 4 ( print )			      								    								  
136 LOAD_FAST 6 ( sum )					      								    								  
138 LOAD_CONST 5 ( ' ' )				      								    								  
140 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
142 CALL_FUNCTION_KW 2					      								    								  
144 POP_TOP						      								    								  
146 JUMP_ABSOLUTE 18					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS	  RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS
--							      --							    --								  --
Disassembly of <code object maxProduct at 0x7f33e2649a50, fil def maxProduct ( arr , n ) :				    def maxProduct ( arr , n = 2 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n < 2 ) :					    	if n < 2 :						  
2 LOAD_CONST 1 ( 2 )					      	      print ( "No pairs exists" )			    	    print ( "No pairs exists" )				  
4 COMPARE_OP 0 ( < )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  a = arr [ 0 ] ; b = arr [ 1 ]				    	a = arr [ 0 ]						  
							      	  for i in range ( 0 , n ) :				    	b = arr [ 1 ]						  
3 8 LOAD_GLOBAL 0 ( print )				      	      for j in range ( i + 1 , n ) :			    	for i in range ( 0 , n ) :				  
10 LOAD_CONST 2 ( 'No pairs exists' )			      		  if ( arr [ i ] * arr [ j ] > a * b ) :	    	    for j in range ( i + 1 , n ) :			  
12 CALL_FUNCTION 1					      		      a = arr [ i ] ; b = arr [ j ]		    		if arr [ i ] * arr [ j ] > a * b :		  
14 POP_TOP						      	  print ( "Max product pair is {" , a , "," , b , "}" , sep 		    a [ arr [ j ] = arr [ i ]			  
							      								    	print ( "Max product pair is {" , a , "," , b , "}" , sep 
4 16 LOAD_CONST 0 ( None )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_CONST 3 ( 0 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 STORE_FAST 2 ( a )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_CONST 4 ( 1 )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 3 ( b )					      								    								  
							      								    								  
6 36 SETUP_LOOP 82 ( to 120 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_CONST 3 ( 0 )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 68 ( to 118 )				      								    								  
50 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 52 SETUP_LOOP 62 ( to 116 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 LOAD_CONST 4 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 44 ( to 114 )				      								    								  
70 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 5 ( j )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 LOAD_FAST 2 ( a )					      								    								  
88 LOAD_FAST 3 ( b )					      								    								  
90 BINARY_MULTIPLY					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
9 96 LOAD_FAST 0 ( arr )				      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 STORE_FAST 2 ( a )					      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 STORE_FAST 3 ( b )					      								    								  
112 JUMP_ABSOLUTE 68					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 48					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
10 >> 120 LOAD_GLOBAL 0 ( print )			      								    								  
122 LOAD_CONST 5 ( 'Max product pair is {' )		      								    								  
124 LOAD_FAST 2 ( a )					      								    								  
126 LOAD_CONST 6 ( ',' )				      								    								  
128 LOAD_FAST 3 ( b )					      								    								  
130 LOAD_CONST 7 ( '}' )				      								    								  
132 LOAD_CONST 8 ( '' )					      								    								  
134 LOAD_CONST 9 ( ( 'sep' , ) )			      								    								  
136 CALL_FUNCTION_KW 6					      								    								  
138 POP_TOP						      								    								  
140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING				      GENERATE_ROTATIONS_GIVEN_STRING				    GENERATE_ROTATIONS_GIVEN_STRING				  GENERATE_ROTATIONS_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object printRotatedString at 0x7f33e2653 def printRotatedString ( str ) :				    def printRotatedString ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  lenn = len ( str )					    	lenn = len ( str )					  
2 LOAD_FAST 0 ( str )					      	  temp = [ 0 ] * ( lenn )				    	temp = [ 0 ] * lenn					  
4 CALL_FUNCTION 1					      	  for i in range ( lenn ) :				    	for i in range ( lenn ) :				  
6 STORE_FAST 1 ( lenn )					      	      j = i						    	    j = i						  
							      	      k = 0						    	    k = 0						  
3 8 LOAD_CONST 1 ( 0 )					      	      while ( j < len ( str ) ) :			    	    while j < len ( str ) :				  
10 BUILD_LIST 1						      		  temp [ k ] = str [ j ]			    		temp [ k ] = str [ j ]				  
12 LOAD_FAST 1 ( lenn )					      		  k += 1					    		k += 1						  
14 BINARY_MULTIPLY					      		  j += 1					    		j += 1						  
16 STORE_FAST 2 ( temp )				      	      j = 0						    	    j = 0						  
							      	      while ( j < i ) :					    	    while j < i :					  
4 18 SETUP_LOOP 130 ( to 150 )				      		  temp [ k ] = str [ j ]			    		temp [ k ] = str [ j ]				  
20 LOAD_GLOBAL 1 ( range )				      		  j += 1					    		j += 1						  
22 LOAD_FAST 1 ( lenn )					      		  k += 1					    		k += 1						  
24 CALL_FUNCTION 1					      	      print ( * temp , sep = "" )			    	    print ( temp * "sep{" } )				  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 118 ( to 148 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 3 ( i )					      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 36 LOAD_CONST 1 ( 0 )					      								    								  
38 STORE_FAST 5 ( k )					      								    								  
							      								    								  
7 40 SETUP_LOOP 44 ( to 86 )				      								    								  
>> 42 LOAD_FAST 4 ( j )					      								    								  
44 LOAD_GLOBAL 0 ( len )				      								    								  
46 LOAD_FAST 0 ( str )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
8 54 LOAD_FAST 0 ( str )				      								    								  
56 LOAD_FAST 4 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 2 ( temp )					      								    								  
62 LOAD_FAST 5 ( k )					      								    								  
64 STORE_SUBSCR						      								    								  
							      								    								  
9 66 LOAD_FAST 5 ( k )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 5 ( k )					      								    								  
							      								    								  
10 74 LOAD_FAST 4 ( j )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 4 ( j )					      								    								  
82 JUMP_ABSOLUTE 42					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_CONST 1 ( 0 )				      								    								  
88 STORE_FAST 4 ( j )					      								    								  
							      								    								  
12 90 SETUP_LOOP 40 ( to 132 )				      								    								  
>> 92 LOAD_FAST 4 ( j )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
13 100 LOAD_FAST 0 ( str )				      								    								  
102 LOAD_FAST 4 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 2 ( temp )				      								    								  
108 LOAD_FAST 5 ( k )					      								    								  
110 STORE_SUBSCR					      								    								  
							      								    								  
14 112 LOAD_FAST 4 ( j )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 4 ( j )					      								    								  
							      								    								  
15 120 LOAD_FAST 5 ( k )				      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 INPLACE_ADD						      								    								  
126 STORE_FAST 5 ( k )					      								    								  
128 JUMP_ABSOLUTE 92					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
16 >> 132 LOAD_GLOBAL 2 ( print )			      								    								  
134 LOAD_FAST 2 ( temp )				      								    								  
136 LOAD_CONST 3 ( 'sep' )				      								    								  
138 LOAD_CONST 4 ( '' )					      								    								  
140 BUILD_MAP 1						      								    								  
142 CALL_FUNCTION_EX 1					      								    								  
144 POP_TOP						      								    								  
146 JUMP_ABSOLUTE 28					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE
--							      --							    --								  --
Disassembly of <code object longestAlternating at 0x7f33e2644 def longestAlternating ( arr , n ) :			    def longestAlternating ( arr , n ) :			  script_not_found : None
2 0 LOAD_CONST 0 ( None )				      	  count = [ None ] * n					    	count = [ None ] * n					  
2 BUILD_LIST 1						      	  count [ n - 1 ] = 1					    	count [ n - 1 ] = 1					  
4 LOAD_FAST 1 ( n )					      	  i = n - 2						    	i = n - 2						  
6 BINARY_MULTIPLY					      	  while i >= 0 :					    	while i >= 0 :						  
8 STORE_FAST 2 ( count )				      	      if ( arr [ i ] * arr [ i + 1 ] < 0 ) :		    	    if arr [ i ] * arr [ i + 1 ] < 0 :			  
							      		  count [ i ] = count [ i + 1 ] + 1		    		count [ i ] = count [ i + 1 ] + 1		  
3 10 LOAD_CONST 1 ( 1 )					      	      else :						    	    else :						  
12 LOAD_FAST 2 ( count )				      		  count [ i ] = 1 ;				    		count [ i ] = 1					  
14 LOAD_FAST 1 ( n )					      	      i = i - 1						    	    i = i - 1						  
16 LOAD_CONST 1 ( 1 )					      	  i = 0							    i = 0							  
18 BINARY_SUBTRACT					      	  while i < n :						    while i < n :						  
20 STORE_SUBSCR						      	      print ( count [ i ] , end = " " )			    	print ( count [ i ] , end = " " )			  
							      	      i = i + 1						    	i = i + 1						  
4 22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 SETUP_LOOP 74 ( to 106 )				      								    								  
>> 32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 3 ( 0 )					      								    								  
36 COMPARE_OP 5 ( >= )					      								    								  
38 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
6 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 LOAD_CONST 3 ( 0 )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( count )				      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 2 ( count )				      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 STORE_SUBSCR						      								    								  
84 JUMP_FORWARD 8 ( to 94 )				      								    								  
							      								    								  
9 >> 86 LOAD_CONST 1 ( 1 )				      								    								  
88 LOAD_FAST 2 ( count )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
10 >> 94 LOAD_FAST 3 ( i )				      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 STORE_FAST 3 ( i )					      								    								  
102 JUMP_ABSOLUTE 32					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
11 >> 106 LOAD_CONST 3 ( 0 )				      								    								  
108 STORE_FAST 3 ( i )					      								    								  
							      								    								  
12 110 SETUP_LOOP 36 ( to 148 )				      								    								  
>> 112 LOAD_FAST 3 ( i )				      								    								  
114 LOAD_FAST 1 ( n )					      								    								  
116 COMPARE_OP 0 ( < )					      								    								  
118 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
13 120 LOAD_GLOBAL 0 ( print )				      								    								  
122 LOAD_FAST 2 ( count )				      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_CONST 4 ( ' ' )				      								    								  
130 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
							      								    								  
14 136 LOAD_FAST 3 ( i )				      								    								  
138 LOAD_CONST 1 ( 1 )					      								    								  
140 BINARY_ADD						      								    								  
142 STORE_FAST 3 ( i )					      								    								  
144 JUMP_ABSOLUTE 112					      								    								  
>> 146 POP_BLOCK					      								    								  
>> 148 LOAD_CONST 0 ( None )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WORDS_STRING_REVERSE_ORDER			      PRINT_WORDS_STRING_REVERSE_ORDER				    PRINT_WORDS_STRING_REVERSE_ORDER				  PRINT_WORDS_STRING_REVERSE_ORDER
--							      --							    --								  --
Disassembly of <code object wordReverse at 0x7f33e2644f60, fi def wordReverse ( str ) :					    def wordReverse ( str ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  i = len ( str ) - 1					    	i = len ( str ) - 1					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( str )					      	  start = end = i + 1					    	start = end = i + 1					  _sa.valid/PRINT_WORDS_STRING_REVERSE_ORDER.py", li
4 CALL_FUNCTION 1					      	  result = ''						    	result = ''						  ne 53	    return result     ^ SyntaxError: 'return
6 LOAD_CONST 1 ( 1 )					      	  while i >= 0 :					    	while i >= 0 :						  ' outside function
8 BINARY_SUBTRACT					      	      if str [ i ] == ' ' :				    	    if str [ i ] == ' ' :				  
10 STORE_FAST 1 ( i )					      		  start = i + 1					    		start = i + 1					  
							      		  while start != end :				    		while start != end :				  
3 12 LOAD_FAST 1 ( i )					      		      result += str [ start ]			    		    result += str [ start ]			  
14 LOAD_CONST 1 ( 1 )					      		      start += 1				    		    start += 1					  
16 BINARY_ADD						      		  result += ' '					    	    result += ' '					  
18 DUP_TOP						      		  end = i					    	    i -= 1						  
20 STORE_FAST 2 ( start )				      	      i -= 1						    	start -= 1						  
22 STORE_FAST 3 ( end )					      	  start = 0						    	while start != end :					  
							      	  while start != end :					    	    result += str [ start ]				  
4 24 LOAD_CONST 2 ( '' )				      	      result += str [ start ]				    	    start += 1						  
26 STORE_FAST 4 ( result )				      	      start += 1					    return result						  
							      	  return result						    								  
5 28 SETUP_LOOP 86 ( to 116 )				      								    								  
>> 30 LOAD_FAST 1 ( i )					      								    								  
32 LOAD_CONST 3 ( 0 )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( str )				      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 4 ( ' ' )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
7 50 LOAD_FAST 1 ( i )					      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( start )				      								    								  
							      								    								  
8 58 SETUP_LOOP 32 ( to 92 )				      								    								  
>> 60 LOAD_FAST 2 ( start )				      								    								  
62 LOAD_FAST 3 ( end )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
9 68 LOAD_FAST 4 ( result )				      								    								  
70 LOAD_FAST 0 ( str )					      								    								  
72 LOAD_FAST 2 ( start )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 4 ( result )				      								    								  
							      								    								  
10 80 LOAD_FAST 2 ( start )				      								    								  
82 LOAD_CONST 1 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 2 ( start )				      								    								  
88 JUMP_ABSOLUTE 60					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
11 >> 92 LOAD_FAST 4 ( result )				      								    								  
94 LOAD_CONST 4 ( ' ' )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 4 ( result )				      								    								  
							      								    								  
12 100 LOAD_FAST 1 ( i )				      								    								  
102 STORE_FAST 3 ( end )				      								    								  
							      								    								  
13 >> 104 LOAD_FAST 1 ( i )				      								    								  
106 LOAD_CONST 1 ( 1 )					      								    								  
108 INPLACE_SUBTRACT					      								    								  
110 STORE_FAST 1 ( i )					      								    								  
112 JUMP_ABSOLUTE 30					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
14 >> 116 LOAD_CONST 3 ( 0 )				      								    								  
118 STORE_FAST 2 ( start )				      								    								  
							      								    								  
15 120 SETUP_LOOP 32 ( to 154 )				      								    								  
>> 122 LOAD_FAST 2 ( start )				      								    								  
124 LOAD_FAST 3 ( end )					      								    								  
126 COMPARE_OP 3 ( != )					      								    								  
128 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
16 130 LOAD_FAST 4 ( result )				      								    								  
132 LOAD_FAST 0 ( str )					      								    								  
134 LOAD_FAST 2 ( start )				      								    								  
136 BINARY_SUBSCR					      								    								  
138 INPLACE_ADD						      								    								  
140 STORE_FAST 4 ( result )				      								    								  
							      								    								  
17 142 LOAD_FAST 2 ( start )				      								    								  
144 LOAD_CONST 1 ( 1 )					      								    								  
146 INPLACE_ADD						      								    								  
148 STORE_FAST 2 ( start )				      								    								  
150 JUMP_ABSOLUTE 122					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
18 >> 154 LOAD_FAST 4 ( result )			      								    								  
156 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			      FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			    FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			  FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA
--							      --							    --								  --
Disassembly of <code object parabola at 0x7f33e2653f60, file  def parabola ( a , b , c ) :				    def parabola ( a , b , c ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Vertex: (" , ( - b / ( 2 * a ) ) , ", " , ( ( (  	print ( "Vertex: (" / b ) / ( 2 * a ) , ", " , 4 * a * c  
2 LOAD_CONST 1 ( 'Vertex: (' )				      	  print ( "Focus: (" , ( - b / ( 2 * a ) ) , ", " , ( ( ( 4 	print ( "Focus: (" - b ) / ( 2 * a ) , ", " , 4 * a * c - 
4 LOAD_FAST 1 ( b )					      	  print ( "Directrix: y=" , c - ( ( b * b ) + 1 ) * 4 * a , 	print ( "Directrix: y=" , c * ( b * b + 1 ) * 4 * a , sep 
6 UNARY_NEGATIVE					      								    								  
8 LOAD_CONST 2 ( 2 )					      								    								  
10 LOAD_FAST 0 ( a )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 LOAD_CONST 3 ( ', ' )				      								    								  
18 LOAD_CONST 4 ( 4 )					      								    								  
20 LOAD_FAST 0 ( a )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_FAST 2 ( c )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_FAST 1 ( b )					      								    								  
30 LOAD_FAST 1 ( b )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 4 ( 4 )					      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 LOAD_CONST 5 ( ')' )					      								    								  
46 LOAD_CONST 6 ( '' )					      								    								  
48 LOAD_CONST 7 ( ( 'sep' , ) )				      								    								  
50 CALL_FUNCTION_KW 6					      								    								  
52 POP_TOP						      								    								  
							      								    								  
3 54 LOAD_GLOBAL 0 ( print )				      								    								  
56 LOAD_CONST 8 ( 'Focus: (' )				      								    								  
58 LOAD_FAST 1 ( b )					      								    								  
60 UNARY_NEGATIVE					      								    								  
62 LOAD_CONST 2 ( 2 )					      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 BINARY_TRUE_DIVIDE					      								    								  
70 LOAD_CONST 3 ( ', ' )				      								    								  
72 LOAD_CONST 4 ( 4 )					      								    								  
74 LOAD_FAST 0 ( a )					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_FAST 2 ( c )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_FAST 1 ( b )					      								    								  
84 LOAD_FAST 1 ( b )					      								    								  
86 BINARY_MULTIPLY					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 9 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_CONST 4 ( 4 )					      								    								  
96 LOAD_FAST 0 ( a )					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 BINARY_TRUE_DIVIDE					      								    								  
102 LOAD_CONST 5 ( ')' )				      								    								  
104 LOAD_CONST 6 ( '' )					      								    								  
106 LOAD_CONST 7 ( ( 'sep' , ) )			      								    								  
108 CALL_FUNCTION_KW 6					      								    								  
110 POP_TOP						      								    								  
							      								    								  
4 112 LOAD_GLOBAL 0 ( print )				      								    								  
114 LOAD_CONST 10 ( 'Directrix: y=' )			      								    								  
116 LOAD_FAST 2 ( c )					      								    								  
118 LOAD_FAST 1 ( b )					      								    								  
120 LOAD_FAST 1 ( b )					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 LOAD_CONST 9 ( 1 )					      								    								  
126 BINARY_ADD						      								    								  
128 LOAD_CONST 4 ( 4 )					      								    								  
130 BINARY_MULTIPLY					      								    								  
132 LOAD_FAST 0 ( a )					      								    								  
134 BINARY_MULTIPLY					      								    								  
136 BINARY_SUBTRACT					      								    								  
138 LOAD_CONST 6 ( '' )					      								    								  
140 LOAD_CONST 7 ( ( 'sep' , ) )			      								    								  
142 CALL_FUNCTION_KW 3					      								    								  
144 POP_TOP						      								    								  
146 LOAD_CONST 0 ( None )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY		      PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY		    PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY		  PAIRS_OF_POSITIVE_<unk> TIVE_VALUES_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object printPairs at 0x7f33e26494b0, fil def printPairs ( arr , n ) :				    def printPairs ( arr , n ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  v = [ ]						    	v = [ ]							  
2 STORE_FAST 2 ( v )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
3 4 SETUP_LOOP 82 ( to 88 )				      		  if ( abs ( arr [ i ] ) == abs ( arr [ j ] ) ) :   		if abs ( arr [ i ] ) == abs ( arr [ j ] ) :	  
6 LOAD_GLOBAL 0 ( range )				      		      v.append ( abs ( arr [ i ] ) )		    		    v.append ( abs ( arr [ i ] ) )		  
8 LOAD_FAST 1 ( n )					      	  if ( len ( v ) == 0 ) :				    	if len ( v ) == 0 :					  
10 CALL_FUNCTION 1					      	      return ;						    	    return						  
12 GET_ITER						      	  v.sort ( )						    	v.sort ( )						  
>> 14 FOR_ITER 70 ( to 86 )				      	  for i in range ( len ( v ) ) :			    	for i in range ( len ( v ) ) :				  
16 STORE_FAST 3 ( i )					      	      print ( - v [ i ] , "" , v [ i ] , end = " " )	    	    print ( - v [ i ] , end = " " , )			  
							      								    								  
4 18 SETUP_LOOP 64 ( to 84 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 46 ( to 82 )				      								    								  
36 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 38 LOAD_GLOBAL 1 ( abs )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_GLOBAL 1 ( abs )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 62 LOAD_FAST 2 ( v )					      								    								  
64 LOAD_METHOD 2 ( append )				      								    								  
66 LOAD_GLOBAL 1 ( abs )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 CALL_METHOD 1					      								    								  
78 POP_TOP						      								    								  
80 JUMP_ABSOLUTE 34					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 JUMP_ABSOLUTE 14					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
7 >> 88 LOAD_GLOBAL 3 ( len )				      								    								  
90 LOAD_FAST 2 ( v )					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_CONST 2 ( 0 )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
8 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE					      								    								  
							      								    								  
9 >> 104 LOAD_FAST 2 ( v )				      								    								  
106 LOAD_METHOD 4 ( sort )				      								    								  
108 CALL_METHOD 0					      								    								  
110 POP_TOP						      								    								  
							      								    								  
10 112 SETUP_LOOP 46 ( to 160 )				      								    								  
114 LOAD_GLOBAL 0 ( range )				      								    								  
116 LOAD_GLOBAL 3 ( len )				      								    								  
118 LOAD_FAST 2 ( v )					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 CALL_FUNCTION 1					      								    								  
124 GET_ITER						      								    								  
>> 126 FOR_ITER 30 ( to 158 )				      								    								  
128 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 130 LOAD_GLOBAL 5 ( print )				      								    								  
132 LOAD_FAST 2 ( v )					      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 UNARY_NEGATIVE					      								    								  
140 LOAD_CONST 3 ( '' )					      								    								  
142 LOAD_FAST 2 ( v )					      								    								  
144 LOAD_FAST 3 ( i )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_CONST 4 ( ' ' )				      								    								  
150 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
152 CALL_FUNCTION_KW 4					      								    								  
154 POP_TOP						      								    								  
156 JUMP_ABSOLUTE 126					      								    								  
>> 158 POP_BLOCK					      								    								  
>> 160 LOAD_CONST 0 ( None )				      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHOCOLATE_DISTRIBUTION_PROBLEM				      CHOCOLATE_DISTRIBUTION_PROBLEM				    CHOCOLATE_DISTRIBUTION_PROBLEM				  CHOCOLATE_DISTRIBUTION_PROBLEM
--							      --							    --								  --
Disassembly of <code object findMinDiff at 0x7f33e26494b0, fi def findMinDiff ( arr , n , m ) :				    def findMinDiff ( arr , n , m ) :				  timeout : None
2 0 LOAD_FAST 2 ( m )					      	  if ( m == 0 or n == 0 ) :				    	if m == 0 or n == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  arr.sort ( )						    	arr.sort ( )						  
6 POP_JUMP_IF_TRUE 16					      	  if ( n < m ) :					    	if n < m :						  
8 LOAD_FAST 1 ( n )					      	      return - 1					    	    return - 1						  
10 LOAD_CONST 1 ( 0 )					      	  min_diff = sys.maxsize				    	min_diff = sys.maxsize					  
12 COMPARE_OP 2 ( == )					      	  first = 0						    	min_diff = 0						  
14 POP_JUMP_IF_FALSE 20					      	  last = 0						    	first = 0						  
							      	  i = 0							    	i = 0							  
3 >> 16 LOAD_CONST 1 ( 0 )				      	  while ( i + m - 1 < n ) :				    	while i + m - 1 < n :					  
18 RETURN_VALUE						      	      diff = arr [ i + m - 1 ] - arr [ i ]		    	    diff = arr [ i + m - 1 ] - arr [ i ]		  
							      	      if ( diff < min_diff ) :				    	    if diff < min_diff :				  
4 >> 20 LOAD_FAST 0 ( arr )				      		  min_diff = diff				    		min_diff = diff					  
22 LOAD_METHOD 0 ( sort )				      		  first = i					    		last = i					  
24 CALL_METHOD 0					      		  last = i + m - 1				    		last = i					  
26 POP_TOP						      	      i += 1						    		i += m - 1					  
							      	  return ( arr [ last ] - arr [ first ] )		    	return arr [ last ] - arr [ first ]			  
5 28 LOAD_FAST 1 ( n )					      								    								  
30 LOAD_FAST 2 ( m )					      								    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 36 LOAD_CONST 2 ( - 1 )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
7 >> 40 LOAD_GLOBAL 1 ( sys )				      								    								  
42 LOAD_ATTR 2 ( maxsize )				      								    								  
44 STORE_FAST 3 ( min_diff )				      								    								  
							      								    								  
8 46 LOAD_CONST 1 ( 0 )					      								    								  
48 STORE_FAST 4 ( first )				      								    								  
							      								    								  
9 50 LOAD_CONST 1 ( 0 )					      								    								  
52 STORE_FAST 5 ( last )				      								    								  
							      								    								  
10 54 LOAD_CONST 1 ( 0 )				      								    								  
56 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 58 SETUP_LOOP 80 ( to 140 )				      								    								  
>> 60 LOAD_FAST 6 ( i )					      								    								  
62 LOAD_FAST 2 ( m )					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 COMPARE_OP 0 ( < )					      								    								  
74 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
12 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 6 ( i )					      								    								  
80 LOAD_FAST 2 ( m )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_CONST 3 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 6 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 7 ( diff )				      								    								  
							      								    								  
13 100 LOAD_FAST 7 ( diff )				      								    								  
102 LOAD_FAST 3 ( min_diff )				      								    								  
104 COMPARE_OP 0 ( < )					      								    								  
106 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
14 108 LOAD_FAST 7 ( diff )				      								    								  
110 STORE_FAST 3 ( min_diff )				      								    								  
							      								    								  
15 112 LOAD_FAST 6 ( i )				      								    								  
114 STORE_FAST 4 ( first )				      								    								  
							      								    								  
16 116 LOAD_FAST 6 ( i )				      								    								  
118 LOAD_FAST 2 ( m )					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_CONST 3 ( 1 )					      								    								  
124 BINARY_SUBTRACT					      								    								  
126 STORE_FAST 5 ( last )				      								    								  
							      								    								  
17 >> 128 LOAD_FAST 6 ( i )				      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 6 ( i )					      								    								  
136 JUMP_ABSOLUTE 60					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
18 >> 140 LOAD_FAST 0 ( arr )				      								    								  
142 LOAD_FAST 5 ( last )				      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 4 ( first )				      								    								  
150 BINARY_SUBSCR					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_ODD_FACTORS_NUMBER				      FIND_SUM_ODD_FACTORS_NUMBER				    FIND_SUM_ODD_FACTORS_NUMBER					  FIND_SUM_ODD_FACTORS_NUMBER
--							      --							    --								  --
Disassembly of <code object sumofoddFactors at 0x7f33e2649a50 def sumofoddFactors ( n ) :				    def sumofoddFactors ( n ) :					  failure : #Results: 6, 10
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = 1							  
2 STORE_FAST 1 ( res )					      	  while n % 2 == 0 :					    	while n % 2 == 0 :					  
							      	      n = n // 2					    	    n = n // 2						  
3 4 SETUP_LOOP 24 ( to 30 )				      	  for i in range ( 3 , int ( math.sqrt ( n ) + 1 ) ) :	    	for i in range ( 3 , int ( math.sqrt ( n ) + 1 ) ) :	  
>> 6 LOAD_FAST 0 ( n )					      	      count = 0						    	    count = 0						  
8 LOAD_CONST 2 ( 2 )					      	      curr_sum = 1					    	    curr_sum = 1					  
10 BINARY_MODULO					      	      curr_term = 1					    	    curr_term = 1					  
12 LOAD_CONST 3 ( 0 )					      	      while n % i == 0 :				    	    while n % i == 0 :					  
14 COMPARE_OP 2 ( == )					      		  count += 1					    		count += 1					  
16 POP_JUMP_IF_FALSE 28					      		  n = n // i					    		n = n // i					  
							      		  curr_term *= i				    		curr_term = curr_term + i			  
4 18 LOAD_FAST 0 ( n )					      		  curr_sum += curr_term				    		curr_sum += curr_term				  
20 LOAD_CONST 2 ( 2 )					      	      res *= curr_sum					    	    res += curr_sum					  
22 BINARY_FLOOR_DIVIDE					      	  if n >= 2 :						    	if n >= 2 :						  
24 STORE_FAST 0 ( n )					      	      res *= ( 1 + n )					    	    res *= 1 + n					  
26 JUMP_ABSOLUTE 6					      	  return res						    	return res						  
>> 28 POP_BLOCK						      								    								  
							      								    								  
5 >> 30 SETUP_LOOP 102 ( to 134 )			      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 4 ( 3 )					      								    								  
36 LOAD_GLOBAL 1 ( int )				      								    								  
38 LOAD_GLOBAL 2 ( math )				      								    								  
40 LOAD_METHOD 3 ( sqrt )				      								    								  
42 LOAD_FAST 0 ( n )					      								    								  
44 CALL_METHOD 1					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 1					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 74 ( to 132 )				      								    								  
58 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 60 LOAD_CONST 3 ( 0 )					      								    								  
62 STORE_FAST 3 ( count )				      								    								  
							      								    								  
7 64 LOAD_CONST 1 ( 1 )					      								    								  
66 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
8 68 LOAD_CONST 1 ( 1 )					      								    								  
70 STORE_FAST 5 ( curr_term )				      								    								  
							      								    								  
9 72 SETUP_LOOP 48 ( to 122 )				      								    								  
>> 74 LOAD_FAST 0 ( n )					      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_MODULO					      								    								  
80 LOAD_CONST 3 ( 0 )					      								    								  
82 COMPARE_OP 2 ( == )					      								    								  
84 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
10 86 LOAD_FAST 3 ( count )				      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 3 ( count )				      								    								  
							      								    								  
11 94 LOAD_FAST 0 ( n )					      								    								  
96 LOAD_FAST 2 ( i )					      								    								  
98 BINARY_FLOOR_DIVIDE					      								    								  
100 STORE_FAST 0 ( n )					      								    								  
							      								    								  
12 102 LOAD_FAST 5 ( curr_term )			      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 INPLACE_MULTIPLY					      								    								  
108 STORE_FAST 5 ( curr_term )				      								    								  
							      								    								  
13 110 LOAD_FAST 4 ( curr_sum )				      								    								  
112 LOAD_FAST 5 ( curr_term )				      								    								  
114 INPLACE_ADD						      								    								  
116 STORE_FAST 4 ( curr_sum )				      								    								  
118 JUMP_ABSOLUTE 74					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
14 >> 122 LOAD_FAST 1 ( res )				      								    								  
124 LOAD_FAST 4 ( curr_sum )				      								    								  
126 INPLACE_MULTIPLY					      								    								  
128 STORE_FAST 1 ( res )				      								    								  
130 JUMP_ABSOLUTE 56					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
15 >> 134 LOAD_FAST 0 ( n )				      								    								  
136 LOAD_CONST 2 ( 2 )					      								    								  
138 COMPARE_OP 5 ( >= )					      								    								  
140 POP_JUMP_IF_FALSE 154				      								    								  
							      								    								  
16 142 LOAD_FAST 1 ( res )				      								    								  
144 LOAD_CONST 1 ( 1 )					      								    								  
146 LOAD_FAST 0 ( n )					      								    								  
148 BINARY_ADD						      								    								  
150 INPLACE_MULTIPLY					      								    								  
152 STORE_FAST 1 ( res )				      								    								  
							      								    								  
17 >> 154 LOAD_FAST 1 ( res )				      								    								  
156 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	      DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	    DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M		  DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M
--							      --							    --								  --
Disassembly of <code object numberofways at 0x7f33e2644930, f def numberofways ( n , m ) :				    def numberofways ( n , m ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( np )				      	  dp = np.zeros ( ( n + 2 , n + 2 ) )			    	dp = np.zeros ( ( n + 2 , n + 2 ) )			  
2 LOAD_METHOD 1 ( zeros )				      	  dp [ 0 ] [ n + 1 ] = 1				    	dp [ 0 ] [ n + 1 ] = 1					  
4 LOAD_FAST 0 ( n )					      	  for k in range ( n , m - 1 , - 1 ) :			    	for k in range ( n , m - 1 , - 1 ) :			  
6 LOAD_CONST 1 ( 2 )					      	      for i in range ( n + 1 ) :			    	    for i in range ( n + 1 ) :				  
8 BINARY_ADD						      		  dp [ i ] [ k ] = dp [ i ] [ k + 1 ]		    		dp [ i ] [ k ] = dp [ i ] [ k + 1 ]		  
10 LOAD_FAST 0 ( n )					      		  if ( i - k >= 0 ) :				    		if i - k >= 0 :					  
12 LOAD_CONST 1 ( 2 )					      		      dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i -  		    dp [ i ] [ k ] = dp [ i ] [ dp [ i - k ] [ k  
14 BINARY_ADD						      	  return dp [ n ] [ m ]					    return dp [ n ] [ m ]					  
16 BUILD_TUPLE 2					      								    								  
18 CALL_METHOD 1					      								    								  
20 STORE_FAST 2 ( dp )					      								    								  
							      								    								  
3 22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 2 ( dp )					      								    								  
26 LOAD_CONST 3 ( 0 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_SUBSCR						      								    								  
							      								    								  
4 38 SETUP_LOOP 118 ( to 158 )				      								    								  
40 LOAD_GLOBAL 2 ( range )				      								    								  
42 LOAD_FAST 0 ( n )					      								    								  
44 LOAD_FAST 1 ( m )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_CONST 4 ( - 1 )					      								    								  
52 CALL_FUNCTION 3					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 98 ( to 156 )				      								    								  
58 STORE_FAST 3 ( k )					      								    								  
							      								    								  
5 60 SETUP_LOOP 92 ( to 154 )				      								    								  
62 LOAD_GLOBAL 2 ( range )				      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 CALL_FUNCTION 1					      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 76 ( to 152 )				      								    								  
76 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 78 LOAD_FAST 2 ( dp )					      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 3 ( k )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_ADD						      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 2 ( dp )					      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 3 ( k )					      								    								  
100 STORE_SUBSCR					      								    								  
							      								    								  
7 102 LOAD_FAST 4 ( i )					      								    								  
104 LOAD_FAST 3 ( k )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_CONST 3 ( 0 )					      								    								  
110 COMPARE_OP 5 ( >= )					      								    								  
112 POP_JUMP_IF_FALSE 74				      								    								  
							      								    								  
8 114 LOAD_FAST 2 ( dp )				      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 3 ( k )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 2 ( dp )					      								    								  
126 LOAD_FAST 4 ( i )					      								    								  
128 LOAD_FAST 3 ( k )					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 3 ( k )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 BINARY_ADD						      								    								  
140 LOAD_FAST 2 ( dp )					      								    								  
142 LOAD_FAST 4 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 3 ( k )					      								    								  
148 STORE_SUBSCR					      								    								  
150 JUMP_ABSOLUTE 74					      								    								  
>> 152 POP_BLOCK					      								    								  
>> 154 JUMP_ABSOLUTE 56					      								    								  
>> 156 POP_BLOCK					      								    								  
							      								    								  
9 >> 158 LOAD_FAST 2 ( dp )				      								    								  
160 LOAD_FAST 0 ( n )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_FAST 1 ( m )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY  REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY  REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY  REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY
--							      --							    --								  --
Disassembly of <code object minRemove at 0x7f33e2649a50, file def minRemove ( a , b , n , m ) :				    def minRemove ( a , b , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  countA = dict ( )					    	countA = dict ( )					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  countB = dict ( )					    	countB = dict ( )					  _sa.valid/REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON
4 STORE_FAST 4 ( countA )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  _ELEMENT_EXIST_ARRAY.py", line 31	def f_filled
							      	      countA [ a [ i ] ] = countA.get ( a [ i ] , 0 ) + 1   	    countA [ a [ i ] ] = countA.get ( a [ i ] , 0 ) + 1	   ( a , b , n , n ) :	   ^ SyntaxError: duplicate
3 6 LOAD_GLOBAL 0 ( dict )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  argument 'n' in function definition
8 CALL_FUNCTION 0					      	      countB [ b [ i ] ] = countB.get ( b [ i ] , 0 ) + 1   	    countB [ b [ i ] ] = countB.get ( b [ i ] , 0 ) + 1	  
10 STORE_FAST 5 ( countB )				      	  res = 0						    	res = 0							  
							      	  for x in countA :					    	for x in countA :					  
4 12 SETUP_LOOP 44 ( to 58 )				      	      if x in countB.keys ( ) :				    	    if x in countB.keys ( ) :				  
14 LOAD_GLOBAL 1 ( range )				      		  res += min ( countA [ x ] , countB [ x ] )	    		res += min ( countA [ x ] , countB [ x ] )	  
16 LOAD_FAST 2 ( n )					      	  return res						    return res							  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 32 ( to 56 )				      								    								  
24 STORE_FAST 6 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 4 ( countA )				      								    								  
28 LOAD_METHOD 2 ( get )				      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 LOAD_FAST 6 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 CALL_METHOD 2					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 4 ( countA )				      								    								  
46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 6 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 STORE_SUBSCR						      								    								  
54 JUMP_ABSOLUTE 22					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
6 >> 58 SETUP_LOOP 44 ( to 104 )			      								    								  
60 LOAD_GLOBAL 1 ( range )				      								    								  
62 LOAD_FAST 2 ( n )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 32 ( to 102 )				      								    								  
70 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 72 LOAD_FAST 5 ( countB )				      								    								  
74 LOAD_METHOD 2 ( get )				      								    								  
76 LOAD_FAST 1 ( b )					      								    								  
78 LOAD_FAST 6 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 CALL_METHOD 2					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 5 ( countB )				      								    								  
92 LOAD_FAST 1 ( b )					      								    								  
94 LOAD_FAST 6 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 68					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
8 >> 104 LOAD_CONST 1 ( 0 )				      								    								  
106 STORE_FAST 7 ( res )				      								    								  
							      								    								  
9 108 SETUP_LOOP 46 ( to 156 )				      								    								  
110 LOAD_FAST 4 ( countA )				      								    								  
112 GET_ITER						      								    								  
>> 114 FOR_ITER 38 ( to 154 )				      								    								  
116 STORE_FAST 8 ( x )					      								    								  
							      								    								  
10 118 LOAD_FAST 8 ( x )				      								    								  
120 LOAD_FAST 5 ( countB )				      								    								  
122 LOAD_METHOD 3 ( keys )				      								    								  
124 CALL_METHOD 0					      								    								  
126 COMPARE_OP 6 ( in )					      								    								  
128 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
11 130 LOAD_FAST 7 ( res )				      								    								  
132 LOAD_GLOBAL 4 ( min )				      								    								  
134 LOAD_FAST 4 ( countA )				      								    								  
136 LOAD_FAST 8 ( x )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 5 ( countB )				      								    								  
142 LOAD_FAST 8 ( x )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 CALL_FUNCTION 2					      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 7 ( res )				      								    								  
152 JUMP_ABSOLUTE 114					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
12 >> 156 LOAD_FAST 7 ( res )				      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY			      SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY			    SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY			  SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY
--							      --							    --								  --
Disassembly of <code object manipulated_seive at 0x7f33e26449 def manipulated_seive ( N ) :				    def manipulated_seive ( N ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( False )				      	  isprime [ 0 ] = isprime [ 1 ] = False			    	isprime [ 0 ] = False					  
2 DUP_TOP						      	  for i in range ( 2 , N ) :				    	for i in range ( 2 , N ) :				  
4 LOAD_GLOBAL 0 ( isprime )				      	      if isprime [ i ] == True :			    	    if isprime [ i ] == True :				  
6 LOAD_CONST 2 ( 0 )					      		  prime.append ( i )				    		prime.append ( i )				  
8 STORE_SUBSCR						      		  SPF [ i ] = i					    		SPF [ i ] = i					  
10 LOAD_GLOBAL 0 ( isprime )				      	      j = 0						    	    j = 0						  
12 LOAD_CONST 3 ( 1 )					      	      while ( j < len ( prime ) and i * prime [ j ] < N and 	    while j < len ( prime ) and ( i * prime [ j ] <= N )  
14 STORE_SUBSCR						      		  isprime [ i * prime [ j ] ] = False		    		isprime [ i * prime [ j ] ] = False		  
							      		  SPF [ i * prime [ j ] ] = prime [ j ]		    		prime [ j ] = prime [ j ]			  
3 16 SETUP_LOOP 146 ( to 164 )				      		  j += 1					    		j += 1						  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 4 ( 2 )					      								    								  
22 LOAD_FAST 0 ( N )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 132 ( to 162 )				      								    								  
30 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 32 LOAD_GLOBAL 0 ( isprime )				      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 5 ( True )				      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 2 ( prime )				      								    								  
46 LOAD_METHOD 3 ( append )				      								    								  
48 LOAD_FAST 1 ( i )					      								    								  
50 CALL_METHOD 1					      								    								  
52 POP_TOP						      								    								  
							      								    								  
6 54 LOAD_FAST 1 ( i )					      								    								  
56 LOAD_GLOBAL 4 ( SPF )				      								    								  
58 LOAD_FAST 1 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
							      								    								  
7 >> 62 LOAD_CONST 2 ( 0 )				      								    								  
64 STORE_FAST 2 ( j )					      								    								  
							      								    								  
8 66 SETUP_LOOP 92 ( to 160 )				      								    								  
>> 68 LOAD_FAST 2 ( j )					      								    								  
70 LOAD_GLOBAL 5 ( len )				      								    								  
72 LOAD_GLOBAL 2 ( prime )				      								    								  
74 CALL_FUNCTION 1					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_FALSE 158				      								    								  
80 LOAD_FAST 1 ( i )					      								    								  
82 LOAD_GLOBAL 2 ( prime )				      								    								  
84 LOAD_FAST 2 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 LOAD_FAST 0 ( N )					      								    								  
92 COMPARE_OP 0 ( < )					      								    								  
94 POP_JUMP_IF_FALSE 158				      								    								  
96 LOAD_GLOBAL 2 ( prime )				      								    								  
98 LOAD_FAST 2 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_GLOBAL 4 ( SPF )				      								    								  
104 LOAD_FAST 1 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 COMPARE_OP 1 ( <= )					      								    								  
110 POP_JUMP_IF_FALSE 158				      								    								  
							      								    								  
9 112 LOAD_CONST 1 ( False )				      								    								  
114 LOAD_GLOBAL 0 ( isprime )				      								    								  
116 LOAD_FAST 1 ( i )					      								    								  
118 LOAD_GLOBAL 2 ( prime )				      								    								  
120 LOAD_FAST 2 ( j )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 BINARY_MULTIPLY					      								    								  
126 STORE_SUBSCR					      								    								  
							      								    								  
10 128 LOAD_GLOBAL 2 ( prime )				      								    								  
130 LOAD_FAST 2 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_GLOBAL 4 ( SPF )				      								    								  
136 LOAD_FAST 1 ( i )					      								    								  
138 LOAD_GLOBAL 2 ( prime )				      								    								  
140 LOAD_FAST 2 ( j )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 BINARY_MULTIPLY					      								    								  
146 STORE_SUBSCR					      								    								  
							      								    								  
11 148 LOAD_FAST 2 ( j )				      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 INPLACE_ADD						      								    								  
154 STORE_FAST 2 ( j )					      								    								  
156 JUMP_ABSOLUTE 68					      								    								  
>> 158 POP_BLOCK					      								    								  
>> 160 JUMP_ABSOLUTE 28					      								    								  
>> 162 POP_BLOCK					      								    								  
>> 164 LOAD_CONST 0 ( None )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F
--							      --							    --								  --
Disassembly of <code object CountSubString at 0x7f33e2653ed0, def CountSubString ( Str , n ) :				    def CountSubString ( Str , n ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  ans = ( n * ( n + 1 ) ) // 2				    	ans = ( n * ( n + 1 ) ) // 2				  
2 LOAD_FAST 1 ( n )					      	  a_index = 0						    	a_index = 0						  
4 LOAD_CONST 1 ( 1 )					      	  b_index = 0						    	b_index = 0						  
6 BINARY_ADD						      	  c_index = 0						    	c_index = 0						  
8 BINARY_MULTIPLY					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
10 LOAD_CONST 2 ( 2 )					      	      if ( Str [ i ] == 'a' ) :				    	    if Str [ i ] == 'a' :				  
12 BINARY_FLOOR_DIVIDE					      		  a_index = i + 1				    		a_index = i + 1					  
14 STORE_FAST 2 ( ans )					      		  ans -= min ( b_index , c_index )		    		ans -= min ( b_index , c_index )		  
							      	      elif ( Str [ i ] == 'b' ) :			    	    elif Str [ i ] == 'b' :				  
3 16 LOAD_CONST 3 ( 0 )					      		  b_index = i + 1				    		b_index = i + 1					  
18 STORE_FAST 3 ( a_index )				      		  ans -= min ( a_index , c_index )		    		ans -= min ( a_index , c_index )		  
							      	      else :						    	    else :						  
4 20 LOAD_CONST 3 ( 0 )					      		  c_index = i + 1				    		c_index = i + 1					  
22 STORE_FAST 4 ( b_index )				      		  ans -= min ( a_index , b_index )		    		ans -= min ( a_index , b_index )		  
							      	  return ans						    return ans							  
5 24 LOAD_CONST 3 ( 0 )					      								    								  
26 STORE_FAST 5 ( c_index )				      								    								  
							      								    								  
6 28 SETUP_LOOP 110 ( to 140 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 98 ( to 138 )				      								    								  
40 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( Str )				      								    								  
44 LOAD_FAST 6 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 4 ( 'a' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
8 54 LOAD_FAST 6 ( i )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 3 ( a_index )				      								    								  
							      								    								  
9 62 LOAD_FAST 2 ( ans )				      								    								  
64 LOAD_GLOBAL 1 ( min )				      								    								  
66 LOAD_FAST 4 ( b_index )				      								    								  
68 LOAD_FAST 5 ( c_index )				      								    								  
70 CALL_FUNCTION 2					      								    								  
72 INPLACE_SUBTRACT					      								    								  
74 STORE_FAST 2 ( ans )					      								    								  
76 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
10 >> 78 LOAD_FAST 0 ( Str )				      								    								  
80 LOAD_FAST 6 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 5 ( 'b' )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
11 90 LOAD_FAST 6 ( i )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 4 ( b_index )				      								    								  
							      								    								  
12 98 LOAD_FAST 2 ( ans )				      								    								  
100 LOAD_GLOBAL 1 ( min )				      								    								  
102 LOAD_FAST 3 ( a_index )				      								    								  
104 LOAD_FAST 5 ( c_index )				      								    								  
106 CALL_FUNCTION 2					      								    								  
108 INPLACE_SUBTRACT					      								    								  
110 STORE_FAST 2 ( ans )				      								    								  
112 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
14 >> 114 LOAD_FAST 6 ( i )				      								    								  
116 LOAD_CONST 1 ( 1 )					      								    								  
118 BINARY_ADD						      								    								  
120 STORE_FAST 5 ( c_index )				      								    								  
							      								    								  
15 122 LOAD_FAST 2 ( ans )				      								    								  
124 LOAD_GLOBAL 1 ( min )				      								    								  
126 LOAD_FAST 3 ( a_index )				      								    								  
128 LOAD_FAST 4 ( b_index )				      								    								  
130 CALL_FUNCTION 2					      								    								  
132 INPLACE_SUBTRACT					      								    								  
134 STORE_FAST 2 ( ans )				      								    								  
136 JUMP_ABSOLUTE 38					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
16 >> 140 LOAD_FAST 2 ( ans )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> E_OFFERINGS					      <unk> E_OFFERINGS						    <unk> E_OFFERINGS						  <unk> E_OFFERINGS
--							      --							    --								  --
Disassembly of <code object offeringNumber at 0x7f33e2649a50, def offeringNumber ( n , templeHeight ) :			    def offeringNumber ( n , templeHeight ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 2 ( sum )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      left = 0						    	    left = 0						  
3 4 SETUP_LOOP 156 ( to 162 )				      	      right = 0						    	    right = 0						  
6 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i - 1 , - 1 , - 1 ) :		    	    for j in range ( i - 1 , - 1 , - 1 ) :		  
8 LOAD_FAST 0 ( n )					      		  if ( templeHeight [ j ] < templeHeight [ j + 1 ]  		if templeHeight [ j ] < templeHeight [ j + 1 ] :  
10 CALL_FUNCTION 1					      		      left += 1					    		    left += 1					  
12 GET_ITER						      		  else :					    		else :						  
>> 14 FOR_ITER 144 ( to 160 )				      		      break					    		    break					  
16 STORE_FAST 3 ( i )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
							      		  if ( templeHeight [ j ] < templeHeight [ j - 1 ]  		if templeHeight [ j ] < templeHeight [ j - 1 ] :  
4 18 LOAD_CONST 1 ( 0 )					      		      right += 1				    		    right += 1					  
20 STORE_FAST 4 ( left )				      		  else :					    		break						  
							      		      break					    	sum += max ( right , left ) + 1				  
5 22 LOAD_CONST 1 ( 0 )					      	      sum += max ( right , left ) + 1			    return sum							  
24 STORE_FAST 5 ( right )				      	  return sum						    								  
							      								    								  
6 26 SETUP_LOOP 56 ( to 84 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 3 ( - 1 )					      								    								  
38 LOAD_CONST 3 ( - 1 )					      								    								  
40 CALL_FUNCTION 3					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 36 ( to 82 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( templeHeight )			      								    								  
50 LOAD_FAST 6 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 1 ( templeHeight )				      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
8 68 LOAD_FAST 4 ( left )				      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 4 ( left )				      								    								  
76 JUMP_ABSOLUTE 44					      								    								  
							      								    								  
10 >> 78 BREAK_LOOP					      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
11 >> 84 SETUP_LOOP 54 ( to 140 )			      								    								  
86 LOAD_GLOBAL 0 ( range )				      								    								  
88 LOAD_FAST 3 ( i )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 0 ( n )					      								    								  
96 CALL_FUNCTION 2					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 36 ( to 138 )				      								    								  
102 STORE_FAST 6 ( j )					      								    								  
							      								    								  
12 104 LOAD_FAST 1 ( templeHeight )			      								    								  
106 LOAD_FAST 6 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 1 ( templeHeight )			      								    								  
112 LOAD_FAST 6 ( j )					      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 BINARY_SUBSCR					      								    								  
120 COMPARE_OP 0 ( < )					      								    								  
122 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
13 124 LOAD_FAST 5 ( right )				      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 INPLACE_ADD						      								    								  
130 STORE_FAST 5 ( right )				      								    								  
132 JUMP_ABSOLUTE 100					      								    								  
							      								    								  
15 >> 134 BREAK_LOOP					      								    								  
136 JUMP_ABSOLUTE 100					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
16 >> 140 LOAD_FAST 2 ( sum )				      								    								  
142 LOAD_GLOBAL 1 ( max )				      								    								  
144 LOAD_FAST 5 ( right )				      								    								  
146 LOAD_FAST 4 ( left )				      								    								  
148 CALL_FUNCTION 2					      								    								  
150 LOAD_CONST 2 ( 1 )					      								    								  
152 BINARY_ADD						      								    								  
154 INPLACE_ADD						      								    								  
156 STORE_FAST 2 ( sum )				      								    								  
158 JUMP_ABSOLUTE 14					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
17 >> 162 LOAD_FAST 2 ( sum )				      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			      DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			    DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			  DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER
--							      --							    --								  --
Disassembly of <code object isDvisibleBy12 at 0x7f33e2653f60, def isDvisibleBy12 ( num ) :				    def isDvisibleBy12 ( num ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  if ( len ( num ) >= 3 ) :				    	if len ( num ) >= 3 :					  
2 LOAD_FAST 0 ( num )					      	      d1 = int ( num [ len ( num ) - 1 ] ) ;		    	    d1 = int ( num [ len ( num ) - 1 ] )		  
4 CALL_FUNCTION 1					      	      if ( d1 % 2 != 0 ) :				    	    if d1 % 2 != 0 :					  
6 LOAD_CONST 1 ( 3 )					      		  return False					    		return False					  
8 COMPARE_OP 5 ( >= )					      	      d2 = int ( num [ len ( num ) - 2 ] )		    	    d2 = int ( num [ len ( num ) - 2 ] )		  
10 POP_JUMP_IF_FALSE 144				      	      sum = 0						    	    sum = 0						  
							      	      for i in range ( 0 , len ( num ) ) :		    	    for i in range ( 0 , len ( num ) ) :		  
3 12 LOAD_GLOBAL 1 ( int )				      		  sum += int ( num [ i ] )			    		sum += int ( num [ i ] )			  
14 LOAD_FAST 0 ( num )					      	      return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 ) 	    return ( sum % 3 ) == 0 and d2 * 10 + d1 % 4 == 0 )	  
16 LOAD_GLOBAL 0 ( len )				      	  else :						    	else :							  
18 LOAD_FAST 0 ( num )					      	      number = int ( num )				    	    number = int ( num )				  
20 CALL_FUNCTION 1					      	      return ( number % 12 == 0 )			    	    return ( number % 12 ) == 0 )			  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 BINARY_SUBSCR					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 STORE_FAST 1 ( d1 )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( d1 )					      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 BINARY_MODULO					      								    								  
38 LOAD_CONST 4 ( 0 )					      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 44 LOAD_CONST 5 ( False )				      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
6 >> 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_FAST 0 ( num )					      								    								  
52 LOAD_GLOBAL 0 ( len )				      								    								  
54 LOAD_FAST 0 ( num )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 BINARY_SUBSCR					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 STORE_FAST 2 ( d2 )					      								    								  
							      								    								  
7 68 LOAD_CONST 4 ( 0 )					      								    								  
70 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
8 72 SETUP_LOOP 38 ( to 112 )				      								    								  
74 LOAD_GLOBAL 2 ( range )				      								    								  
76 LOAD_CONST 4 ( 0 )					      								    								  
78 LOAD_GLOBAL 0 ( len )				      								    								  
80 LOAD_FAST 0 ( num )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 CALL_FUNCTION 2					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 20 ( to 110 )				      								    								  
90 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 92 LOAD_FAST 3 ( sum )				      								    								  
94 LOAD_GLOBAL 1 ( int )				      								    								  
96 LOAD_FAST 0 ( num )					      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 3 ( sum )				      								    								  
108 JUMP_ABSOLUTE 88					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
10 >> 112 LOAD_FAST 3 ( sum )				      								    								  
114 LOAD_CONST 1 ( 3 )					      								    								  
116 BINARY_MODULO					      								    								  
118 LOAD_CONST 4 ( 0 )					      								    								  
120 COMPARE_OP 2 ( == )					      								    								  
122 JUMP_IF_FALSE_OR_POP 142				      								    								  
124 LOAD_FAST 2 ( d2 )					      								    								  
126 LOAD_CONST 6 ( 10 )					      								    								  
128 BINARY_MULTIPLY					      								    								  
130 LOAD_FAST 1 ( d1 )					      								    								  
132 BINARY_ADD						      								    								  
134 LOAD_CONST 7 ( 4 )					      								    								  
136 BINARY_MODULO					      								    								  
138 LOAD_CONST 4 ( 0 )					      								    								  
140 COMPARE_OP 2 ( == )					      								    								  
>> 142 RETURN_VALUE					      								    								  
							      								    								  
12 >> 144 LOAD_GLOBAL 1 ( int )				      								    								  
146 LOAD_FAST 0 ( num )					      								    								  
148 CALL_FUNCTION 1					      								    								  
150 STORE_FAST 5 ( number )				      								    								  
							      								    								  
13 152 LOAD_FAST 5 ( number )				      								    								  
154 LOAD_CONST 8 ( 12 )					      								    								  
156 BINARY_MODULO					      								    								  
158 LOAD_CONST 4 ( 0 )					      								    								  
160 COMPARE_OP 2 ( == )					      								    								  
162 RETURN_VALUE					      								    								  
164 LOAD_CONST 0 ( None )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1	      CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		    CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		  CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1
--							      --							    --								  --
Disassembly of <code object checkCorrectOrNot at 0x7f33e26494 def checkCorrectOrNot ( s ) :				    def checkCorrectOrNot ( s ) :				  script_not_found : None
3 0 LOAD_CONST 1 ( 0 )					      	  global MAX_CHAR					    	global MAX_CHAR						  
2 BUILD_LIST 1						      	  count = [ 0 ] * MAX_CHAR				    	count = [ 0 ] * MAX_CHAR				  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	  n = len ( s )						    	n = len ( s )						  
6 BINARY_MULTIPLY					      	  if n == 1 :						    	if n == 1 :						  
8 STORE_FAST 1 ( count )				      	      return true					    	    return true						  
							      	  i = 0 ; j = n - 1					    	i = 0							  
4 10 LOAD_GLOBAL 1 ( len )				      	  while i < j :						    	j = n - ( n - 1 )					  
12 LOAD_FAST 0 ( s )					      	      count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	    	while i < j :						  
14 CALL_FUNCTION 1					      	      count [ ord ( s [ j ] ) - ord ( 'a' ) ] -= 1	    	    count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	  
16 STORE_FAST 2 ( n )					      	      i += 1 ; j -= 1					    	    count [ ord ( s [ j ] ) - ord ( 'a' ) ] -= 1	  
							      	  for i in range ( MAX_CHAR ) :				    	    i += 1						  
5 18 LOAD_FAST 2 ( n )					      	      if count [ i ] != 0 :				    	for i in range ( MAX_CHAR ) :				  
20 LOAD_CONST 2 ( 1 )					      		  return False					    	    if count [ i ] != 0 :				  
22 COMPARE_OP 2 ( == )					      	  return True						    		return False					  
24 POP_JUMP_IF_FALSE 30					      								    return True							  
							      								    								  
6 26 LOAD_GLOBAL 2 ( true )				      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
7 >> 30 LOAD_CONST 1 ( 0 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 42 SETUP_LOOP 92 ( to 136 )				      								    								  
>> 44 LOAD_FAST 3 ( i )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
9 52 LOAD_FAST 1 ( count )				      								    								  
54 LOAD_GLOBAL 3 ( ord )				      								    								  
56 LOAD_FAST 0 ( s )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_GLOBAL 3 ( ord )				      								    								  
66 LOAD_CONST 3 ( 'a' )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 DUP_TOP_TWO						      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 ROT_THREE						      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
10 84 LOAD_FAST 1 ( count )				      								    								  
86 LOAD_GLOBAL 3 ( ord )				      								    								  
88 LOAD_FAST 0 ( s )					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 LOAD_GLOBAL 3 ( ord )				      								    								  
98 LOAD_CONST 3 ( 'a' )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 DUP_TOP_TWO						      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 INPLACE_SUBTRACT					      								    								  
112 ROT_THREE						      								    								  
114 STORE_SUBSCR					      								    								  
							      								    								  
11 116 LOAD_FAST 3 ( i )				      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 INPLACE_ADD						      								    								  
122 STORE_FAST 3 ( i )					      								    								  
124 LOAD_FAST 4 ( j )					      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 INPLACE_SUBTRACT					      								    								  
130 STORE_FAST 4 ( j )					      								    								  
132 JUMP_ABSOLUTE 44					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
12 >> 136 SETUP_LOOP 32 ( to 170 )			      								    								  
138 LOAD_GLOBAL 4 ( range )				      								    								  
140 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
142 CALL_FUNCTION 1					      								    								  
144 GET_ITER						      								    								  
>> 146 FOR_ITER 20 ( to 168 )				      								    								  
148 STORE_FAST 3 ( i )					      								    								  
							      								    								  
13 150 LOAD_FAST 1 ( count )				      								    								  
152 LOAD_FAST 3 ( i )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_CONST 1 ( 0 )					      								    								  
158 COMPARE_OP 3 ( != )					      								    								  
160 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
14 162 LOAD_CONST 4 ( False )				      								    								  
164 RETURN_VALUE					      								    								  
166 JUMP_ABSOLUTE 146					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
15 >> 170 LOAD_CONST 5 ( True )				      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE     REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7f33e2649a50, file def rearrange ( arr , n ) :				    def rearrange ( arr , n ) :					  failure : #Results: 2, 10
2 0 LOAD_FAST 1 ( n )					      	  max_idx = n - 1					    	max_idx = n - 1						  
2 LOAD_CONST 1 ( 1 )					      	  min_idx = 0						    	min_idx = 0						  
4 BINARY_SUBTRACT					      	  max_elem = arr [ n - 1 ] + 1				    	max_elem = arr [ n - 1 ] + 1				  
6 STORE_FAST 2 ( max_idx )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if i % 2 == 0 :					    	    if i % 2 == 0 :					  
3 8 LOAD_CONST 2 ( 0 )					      		  arr [ i ] += ( arr [ max_idx ] % max_elem ) * max 		arr [ i ] += arr [ max_idx ] % max_elem		  
10 STORE_FAST 3 ( min_idx )				      		  max_idx -= 1					    		max_idx -= 1					  
							      	      else :						    	    else :						  
4 12 LOAD_FAST 0 ( arr )				      		  arr [ i ] += ( arr [ min_idx ] % max_elem ) * max 		arr [ i ] += arr [ min_idx ] % max_elem * max_ele 
14 LOAD_FAST 1 ( n )					      		  min_idx += 1					    		min_idx += 1					  
16 LOAD_CONST 1 ( 1 )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
18 BINARY_SUBTRACT					      	      arr [ i ] = arr [ i ] / max_elem			    	    arr [ i ] = arr [ i ] / max_elem			  
20 BINARY_SUBSCR					      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 4 ( max_elem )				      								    								  
							      								    								  
5 28 SETUP_LOOP 104 ( to 134 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 90 ( to 132 )				      								    								  
42 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 44 LOAD_FAST 5 ( i )					      								    								  
46 LOAD_CONST 3 ( 2 )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 2 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 DUP_TOP_TWO						      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 2 ( max_idx )				      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 4 ( max_elem )				      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_FAST 4 ( max_elem )				      								    								  
76 BINARY_MULTIPLY					      								    								  
78 INPLACE_ADD						      								    								  
80 ROT_THREE						      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
8 84 LOAD_FAST 2 ( max_idx )				      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 INPLACE_SUBTRACT					      								    								  
90 STORE_FAST 2 ( max_idx )				      								    								  
92 JUMP_ABSOLUTE 40					      								    								  
							      								    								  
10 >> 94 LOAD_FAST 0 ( arr )				      								    								  
96 LOAD_FAST 5 ( i )					      								    								  
98 DUP_TOP_TWO						      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 3 ( min_idx )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 4 ( max_elem )				      								    								  
110 BINARY_MODULO					      								    								  
112 LOAD_FAST 4 ( max_elem )				      								    								  
114 BINARY_MULTIPLY					      								    								  
116 INPLACE_ADD						      								    								  
118 ROT_THREE						      								    								  
120 STORE_SUBSCR					      								    								  
							      								    								  
11 122 LOAD_FAST 3 ( min_idx )				      								    								  
124 LOAD_CONST 1 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 3 ( min_idx )				      								    								  
130 JUMP_ABSOLUTE 40					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
12 >> 134 SETUP_LOOP 34 ( to 170 )			      								    								  
136 LOAD_GLOBAL 0 ( range )				      								    								  
138 LOAD_CONST 2 ( 0 )					      								    								  
140 LOAD_FAST 1 ( n )					      								    								  
142 CALL_FUNCTION 2					      								    								  
144 GET_ITER						      								    								  
>> 146 FOR_ITER 20 ( to 168 )				      								    								  
148 STORE_FAST 5 ( i )					      								    								  
							      								    								  
13 150 LOAD_FAST 0 ( arr )				      								    								  
152 LOAD_FAST 5 ( i )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_FAST 4 ( max_elem )				      								    								  
158 BINARY_TRUE_DIVIDE					      								    								  
160 LOAD_FAST 0 ( arr )					      								    								  
162 LOAD_FAST 5 ( i )					      								    								  
164 STORE_SUBSCR					      								    								  
166 JUMP_ABSOLUTE 146					      								    								  
>> 168 POP_BLOCK					      								    								  
>> 170 LOAD_CONST 0 ( None )				      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>      COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>	    COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>	  COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_<unk>
--							      --							    --								  --
Disassembly of <code object countkDist at 0x7f33e2644f60, fil def countkDist ( str1 , k ) :				    def countkDist ( str1 , k ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str1 )					    	n = len ( str1 )					  
2 LOAD_FAST 0 ( str1 )					      	  res = 0						    	res = 0							  
4 CALL_FUNCTION 1					      	  cnt = [ 0 ] * 27					    	cnt = [ 0 ] * 27					  
6 STORE_FAST 2 ( n )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      dist_count = 0					    	    dist_count = 0					  
3 8 LOAD_CONST 1 ( 0 )					      	      cnt = [ 0 ] * 27					    	    dist_count = [ 0 ] * 27				  
10 STORE_FAST 3 ( res )					      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
							      		  if ( cnt [ ord ( str1 [ j ] ) - 97 ] == 0 ) :	    		if cnt [ ord ( str1 [ j ] ) - 97 ] == 0 :	  
4 12 LOAD_CONST 1 ( 0 )					      		      dist_count += 1				    		    dist_count += 1				  
14 BUILD_LIST 1						      		  cnt [ ord ( str1 [ j ] ) - 97 ] += 1		    		cnt [ ord ( str1 [ j ] ) - 97 ] += 1		  
16 LOAD_CONST 2 ( 27 )					      		  if ( dist_count == k ) :			    		if dist_count == k :				  
18 BINARY_MULTIPLY					      		      res += 1					    		    res += 1					  
20 STORE_FAST 4 ( cnt )					      		  if ( dist_count > k ) :			    		if dist_count > k :				  
							      		      break					    		    break					  
5 22 SETUP_LOOP 138 ( to 162 )				      	  return res						    return res							  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 2 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 124 ( to 160 )				      								    								  
36 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 38 LOAD_CONST 1 ( 0 )					      								    								  
40 STORE_FAST 6 ( dist_count )				      								    								  
							      								    								  
7 42 LOAD_CONST 1 ( 0 )					      								    								  
44 BUILD_LIST 1						      								    								  
46 LOAD_CONST 2 ( 27 )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 STORE_FAST 4 ( cnt )					      								    								  
							      								    								  
8 52 SETUP_LOOP 104 ( to 158 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 LOAD_FAST 2 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 90 ( to 156 )				      								    								  
66 STORE_FAST 7 ( j )					      								    								  
							      								    								  
9 68 LOAD_FAST 4 ( cnt )				      								    								  
70 LOAD_GLOBAL 2 ( ord )				      								    								  
72 LOAD_FAST 0 ( str1 )					      								    								  
74 LOAD_FAST 7 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 LOAD_CONST 3 ( 97 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
10 92 LOAD_FAST 6 ( dist_count )			      								    								  
94 LOAD_CONST 4 ( 1 )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 6 ( dist_count )				      								    								  
							      								    								  
11 >> 100 LOAD_FAST 4 ( cnt )				      								    								  
102 LOAD_GLOBAL 2 ( ord )				      								    								  
104 LOAD_FAST 0 ( str1 )				      								    								  
106 LOAD_FAST 7 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 LOAD_CONST 3 ( 97 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 DUP_TOP_TWO						      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_CONST 4 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 ROT_THREE						      								    								  
126 STORE_SUBSCR					      								    								  
							      								    								  
12 128 LOAD_FAST 6 ( dist_count )			      								    								  
130 LOAD_FAST 1 ( k )					      								    								  
132 COMPARE_OP 2 ( == )					      								    								  
134 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
13 136 LOAD_FAST 3 ( res )				      								    								  
138 LOAD_CONST 4 ( 1 )					      								    								  
140 INPLACE_ADD						      								    								  
142 STORE_FAST 3 ( res )				      								    								  
							      								    								  
14 >> 144 LOAD_FAST 6 ( dist_count )			      								    								  
146 LOAD_FAST 1 ( k )					      								    								  
148 COMPARE_OP 4 ( > )					      								    								  
150 POP_JUMP_IF_FALSE 64				      								    								  
							      								    								  
15 152 BREAK_LOOP					      								    								  
154 JUMP_ABSOLUTE 64					      								    								  
>> 156 POP_BLOCK					      								    								  
>> 158 JUMP_ABSOLUTE 34					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
16 >> 162 LOAD_FAST 3 ( res )				      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			      CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			    CHECK_VALID_SEQUENCE_DIVISIBLE_M_1				  CHECK_VALID_SEQUENCE_DIVISIBLE_M_1
--							      --							    --								  --
Disassembly of <code object isPossible at 0x7f33e2653ed0, fil def isPossible ( n , index , modulo , M , arr , dp ) :	    def isPossible ( n , index , modulo ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 2 ( modulo )				      	  modulo = ( ( modulo % M ) + M ) % M			    	modulo = modulo % M + M % M				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 3 ( M )					      	  if ( index == n ) :					    	if index == n :						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/CHECK
4 BINARY_MODULO						      	      if ( modulo == 0 ) :				    	    if modulo == 0 :					  _VALID_SEQUENCE_DIVISIBLE_M_1.py", line 62, in <mo
6 LOAD_FAST 3 ( M )					      		  return 1					    		return 1					  dule>	    if f_filled(*parameters_set) == f_gold(*
8 BINARY_ADD						      	      return 0						    	    return 0						  parameters_set): TypeError: f_filled() takes 3 pos
10 LOAD_FAST 3 ( M )					      	  if ( dp [ index ] [ modulo ] != - 1 ) :		    	if dp [ index ] [ modulo ] != - 1 :			  itional arguments but 6 were given
12 BINARY_MODULO					      	      return dp [ index ] [ modulo ]			    	    return dp [ index ] [ modulo ]			  
14 STORE_FAST 2 ( modulo )				      	  placeAdd = isPossible ( n , index + 1 , modulo + arr [ in 	placeAdd = isPossible ( n + index + 1 , modulo + arr [ in 
							      	  placeMinus = isPossible ( n , index + 1 , modulo - arr [  	placeMinus = isPossible ( n , index + 1 , modulo - arr [  
3 16 LOAD_FAST 1 ( index )				      	  res = bool ( placeAdd or placeMinus )			    	res = bool ( placeAdd or placeMinus )			  
18 LOAD_FAST 0 ( n )					      	  dp [ index ] [ modulo ] = res				    	modulo [ index ] [ modulo ] = res			  
20 COMPARE_OP 2 ( == )					      	  return res						    	return res						  
22 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( modulo )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 32 LOAD_CONST 2 ( 1 )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_CONST 1 ( 0 )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
7 >> 40 LOAD_FAST 5 ( dp )				      								    								  
42 LOAD_FAST 1 ( index )				      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( modulo )				      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( - 1 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 56 LOAD_FAST 5 ( dp )					      								    								  
58 LOAD_FAST 1 ( index )				      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( modulo )				      								    								  
64 BINARY_SUBSCR					      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
9 >> 68 LOAD_GLOBAL 0 ( isPossible )			      								    								  
70 LOAD_FAST 0 ( n )					      								    								  
72 LOAD_FAST 1 ( index )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 2 ( modulo )				      								    								  
80 LOAD_FAST 4 ( arr )					      								    								  
82 LOAD_FAST 1 ( index )				      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_FAST 3 ( M )					      								    								  
90 LOAD_FAST 4 ( arr )					      								    								  
92 LOAD_FAST 5 ( dp )					      								    								  
94 CALL_FUNCTION 6					      								    								  
96 STORE_FAST 6 ( placeAdd )				      								    								  
							      								    								  
10 98 LOAD_GLOBAL 0 ( isPossible )			      								    								  
100 LOAD_FAST 0 ( n )					      								    								  
102 LOAD_FAST 1 ( index )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_FAST 2 ( modulo )				      								    								  
110 LOAD_FAST 4 ( arr )					      								    								  
112 LOAD_FAST 1 ( index )				      								    								  
114 BINARY_SUBSCR					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 LOAD_FAST 3 ( M )					      								    								  
120 LOAD_FAST 4 ( arr )					      								    								  
122 LOAD_FAST 5 ( dp )					      								    								  
124 CALL_FUNCTION 6					      								    								  
126 STORE_FAST 7 ( placeMinus )				      								    								  
							      								    								  
11 128 LOAD_GLOBAL 1 ( bool )				      								    								  
130 LOAD_FAST 6 ( placeAdd )				      								    								  
132 JUMP_IF_TRUE_OR_POP 136				      								    								  
134 LOAD_FAST 7 ( placeMinus )				      								    								  
>> 136 CALL_FUNCTION 1					      								    								  
138 STORE_FAST 8 ( res )				      								    								  
							      								    								  
12 140 LOAD_FAST 8 ( res )				      								    								  
142 LOAD_FAST 5 ( dp )					      								    								  
144 LOAD_FAST 1 ( index )				      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_FAST 2 ( modulo )				      								    								  
150 STORE_SUBSCR					      								    								  
							      								    								  
13 152 LOAD_FAST 8 ( res )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEAF_NODES_PREORDER_BINARY_SEARCH_TREE			      LEAF_NODES_PREORDER_BINARY_SEARCH_TREE			    LEAF_NODES_PREORDER_BINARY_SEARCH_TREE			  LEAF_NODES_PREORDER_BINARY_SEARCH_TREE
--							      --							    --								  --
Disassembly of <code object leafNode at 0x7f33e2644f60, file  def leafNode ( preorder , n ) :				    def leafNode ( preorder , n ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  s = [ ]						    	s = [ ]							  
2 STORE_FAST 2 ( s )					      	  i = 0							    	i = 0							  
							      	  for j in range ( 1 , n ) :				    	for j in range ( 1 , n ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      found = False					    	    found = False					  
6 STORE_FAST 3 ( i )					      	      if preorder [ i ] > preorder [ j ] :		    	    if preorder [ i ] > preorder [ j ] :		  
							      		  s.append ( preorder [ i ] )			    		s.append ( preorder [ i ] )			  
4 8 SETUP_LOOP 134 ( to 144 )				      	      else :						    	else :							  
10 LOAD_GLOBAL 0 ( range )				      		  while len ( s ) != 0 :			    	    while len ( s ) != 0 :				  
12 LOAD_CONST 2 ( 1 )					      		      if preorder [ j ] > s [ - 1 ] :		    		if preorder [ j ] > s [ - 1 ] :			  
14 LOAD_FAST 1 ( n )					      			  s.pop ( - 1 )				    		    s.pop ( - 1 )				  
16 CALL_FUNCTION 2					      			  found = True				    		    found = True				  
18 GET_ITER						      		      else :					    		else :						  
>> 20 FOR_ITER 120 ( to 142 )				      			  break					    		    break					  
22 STORE_FAST 4 ( j )					      	      if found :					    	if found :						  
							      		  print ( preorder [ i ] , end = " " )		    	    print ( preorder [ i ] , end = " " )		  
5 24 LOAD_CONST 3 ( False )				      	      i += 1						    	i += 1							  
26 STORE_FAST 5 ( found )				      	  print ( preorder [ n - 1 ] )				    print ( preorder [ n - 1 ] )				  
							      								    								  
6 28 LOAD_FAST 0 ( preorder )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 0 ( preorder )				      								    								  
36 LOAD_FAST 4 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 4 ( > )					      								    								  
42 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( s )					      								    								  
46 LOAD_METHOD 1 ( append )				      								    								  
48 LOAD_FAST 0 ( preorder )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 CALL_METHOD 1					      								    								  
56 POP_TOP						      								    								  
58 JUMP_FORWARD 52 ( to 112 )				      								    								  
							      								    								  
9 >> 60 SETUP_LOOP 50 ( to 112 )			      								    								  
>> 62 LOAD_GLOBAL 2 ( len )				      								    								  
64 LOAD_FAST 2 ( s )					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 3 ( != )					      								    								  
72 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
10 74 LOAD_FAST 0 ( preorder )				      								    								  
76 LOAD_FAST 4 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 2 ( s )					      								    								  
82 LOAD_CONST 4 ( - 1 )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
11 90 LOAD_FAST 2 ( s )					      								    								  
92 LOAD_METHOD 3 ( pop )				      								    								  
94 LOAD_CONST 4 ( - 1 )					      								    								  
96 CALL_METHOD 1					      								    								  
98 POP_TOP						      								    								  
							      								    								  
12 100 LOAD_CONST 5 ( True )				      								    								  
102 STORE_FAST 5 ( found )				      								    								  
104 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
14 >> 106 BREAK_LOOP					      								    								  
108 JUMP_ABSOLUTE 62					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
15 >> 112 LOAD_FAST 5 ( found )				      								    								  
114 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
16 116 LOAD_GLOBAL 4 ( print )				      								    								  
118 LOAD_FAST 0 ( preorder )				      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 6 ( ' ' )				      								    								  
126 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
128 CALL_FUNCTION_KW 2					      								    								  
130 POP_TOP						      								    								  
							      								    								  
17 >> 132 LOAD_FAST 3 ( i )				      								    								  
134 LOAD_CONST 2 ( 1 )					      								    								  
136 INPLACE_ADD						      								    								  
138 STORE_FAST 3 ( i )					      								    								  
140 JUMP_ABSOLUTE 20					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
18 >> 144 LOAD_GLOBAL 4 ( print )			      								    								  
146 LOAD_FAST 0 ( preorder )				      								    								  
148 LOAD_FAST 1 ( n )					      								    								  
150 LOAD_CONST 2 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 BINARY_SUBSCR					      								    								  
156 CALL_FUNCTION 1					      								    								  
158 POP_TOP						      								    								  
160 LOAD_CONST 0 ( None )				      								    								  
162 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT
--							      --							    --								  --
Disassembly of <code object minTimeForWritingChars at 0x7f33e def minTimeForWritingChars ( N , insrt , remov , cpy ) :	    def minTimeForWritingChars ( N , insrt , remo) :		  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( N )					      	  if N == 0 :						    	if N == 0 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/MINIM
4 COMPARE_OP 2 ( == )					      	  if N == 1 :						    	if N == 1 :						  UM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_
6 POP_JUMP_IF_FALSE 12					      	      return insrt					    	    return insrt					  OPERATION.py", line 60, in <module>	  if f_fille
							      	  dp = [ 0 ] * ( N + 1 )				    	dp = [ 0 ] * N + 1					  d(*parameters_set) == f_gold(*parameters_set): Typ
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  eError: f_filled() takes 3 positional arguments bu
10 RETURN_VALUE						      	      if i % 2 == 0 :					    	    if i % 2 == 0 :					  t 4 were given
							      		  dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i // 		dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i // 
4 >> 12 LOAD_FAST 0 ( N )				      	      else :						    	    else :						  
14 LOAD_CONST 2 ( 1 )					      		  dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ ( i  		dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i +  
16 COMPARE_OP 2 ( == )					      	  return dp [ N ]					    	return dp [ N ]						  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_FAST 1 ( insrt )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_CONST 1 ( 0 )				      								    								  
26 BUILD_LIST 1						      								    								  
28 LOAD_FAST 0 ( N )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 4 ( dp )					      								    								  
							      								    								  
7 38 SETUP_LOOP 120 ( to 160 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 LOAD_FAST 0 ( N )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 102 ( to 158 )				      								    								  
56 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 58 LOAD_FAST 5 ( i )					      								    								  
60 LOAD_CONST 3 ( 2 )					      								    								  
62 BINARY_MODULO					      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
9 70 LOAD_GLOBAL 1 ( min )				      								    								  
72 LOAD_FAST 4 ( dp )					      								    								  
74 LOAD_FAST 5 ( i )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 1 ( insrt )				      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 4 ( dp )					      								    								  
88 LOAD_FAST 5 ( i )					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 BINARY_FLOOR_DIVIDE					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 3 ( cpy )					      								    								  
98 BINARY_ADD						      								    								  
100 CALL_FUNCTION 2					      								    								  
102 LOAD_FAST 4 ( dp )					      								    								  
104 LOAD_FAST 5 ( i )					      								    								  
106 STORE_SUBSCR					      								    								  
108 JUMP_ABSOLUTE 54					      								    								  
							      								    								  
11 >> 110 LOAD_GLOBAL 1 ( min )				      								    								  
112 LOAD_FAST 4 ( dp )					      								    								  
114 LOAD_FAST 5 ( i )					      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 1 ( insrt )				      								    								  
124 BINARY_ADD						      								    								  
126 LOAD_FAST 4 ( dp )					      								    								  
128 LOAD_FAST 5 ( i )					      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 LOAD_CONST 3 ( 2 )					      								    								  
136 BINARY_FLOOR_DIVIDE					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 3 ( cpy )					      								    								  
142 BINARY_ADD						      								    								  
144 LOAD_FAST 2 ( remov )				      								    								  
146 BINARY_ADD						      								    								  
148 CALL_FUNCTION 2					      								    								  
150 LOAD_FAST 4 ( dp )					      								    								  
152 LOAD_FAST 5 ( i )					      								    								  
154 STORE_SUBSCR					      								    								  
156 JUMP_ABSOLUTE 54					      								    								  
>> 158 POP_BLOCK					      								    								  
							      								    								  
12 >> 160 LOAD_FAST 4 ( dp )				      								    								  
162 LOAD_FAST 0 ( N )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PREFIX_ALSO_SUFFIX_1				      LONGEST_PREFIX_ALSO_SUFFIX_1				    LONGEST_PREFIX_ALSO_SUFFIX_1				  LONGEST_PREFIX_ALSO_SUFFIX_1
--							      --							    --								  --
Disassembly of <code object longestPrefixSuffix at 0x7f33e265 def longestPrefixSuffix ( s ) :				    def longestPrefixSuf( s ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( s )					      	  lps = [ 0 ] * n					    	lps = [ 0 ] * n						  _sa.valid/LONGEST_PREFIX_ALSO_SUFFIX_1.py", line 4
4 CALL_FUNCTION 1					      	  l = 0							    	l = 0							  0	def f_filled s ) :		    ^ Syntax
6 STORE_FAST 1 ( n )					      	  i = 1							    	i = 1							  Error: invalid syntax
							      	  while ( i < n ) :					    	while i < n :						  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( s [ i ] == s [ l ] ) :			    	    if s [ i ] == s [ l ] :				  
10 BUILD_LIST 1						      		  l = l + 1					    		l = l + 1					  
12 LOAD_FAST 1 ( n )					      		  lps [ i ] = l					    		lps [ i ] = l					  
14 BINARY_MULTIPLY					      		  i = i + 1					    		i = i + 1					  
16 STORE_FAST 2 ( lps )					      	      else :						    	    elif l != 0 :					  
							      		  if ( l != 0 ) :				    		l = lps [ l - 1 ]				  
4 18 LOAD_CONST 1 ( 0 )					      		      l = lps [ l - 1 ]				    	    else :						  
20 STORE_FAST 3 ( l )					      		  else :					    		lps [ i ] = 0					  
							      		      lps [ i ] = 0				    		i = i + 1					  
5 22 LOAD_CONST 2 ( 1 )					      		      i = i + 1					    	res = lps [ n - 1 ]					  
24 STORE_FAST 4 ( i )					      	  res = lps [ n - 1 ]					    	if res > n / 2 :					  
							      	  if ( res > n / 2 ) :					    	    return n // 2					  
6 26 SETUP_LOOP 92 ( to 120 )				      	      return n // 2					    	else :							  
>> 28 LOAD_FAST 4 ( i )					      	  else :						    	    return res						  
30 LOAD_FAST 1 ( n )					      	      return res					    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
7 36 LOAD_FAST 0 ( s )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( s )					      								    								  
44 LOAD_FAST 3 ( l )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
8 52 LOAD_FAST 3 ( l )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 3 ( l )					      								    								  
							      								    								  
9 60 LOAD_FAST 3 ( l )					      								    								  
62 LOAD_FAST 2 ( lps )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 STORE_SUBSCR						      								    								  
							      								    								  
10 68 LOAD_FAST 4 ( i )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 4 ( i )					      								    								  
76 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
12 >> 78 LOAD_FAST 3 ( l )				      								    								  
80 LOAD_CONST 1 ( 0 )					      								    								  
82 COMPARE_OP 3 ( != )					      								    								  
84 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
13 86 LOAD_FAST 2 ( lps )				      								    								  
88 LOAD_FAST 3 ( l )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_SUBSCR					      								    								  
96 STORE_FAST 3 ( l )					      								    								  
98 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
15 >> 100 LOAD_CONST 1 ( 0 )				      								    								  
102 LOAD_FAST 2 ( lps )					      								    								  
104 LOAD_FAST 4 ( i )					      								    								  
106 STORE_SUBSCR					      								    								  
							      								    								  
16 108 LOAD_FAST 4 ( i )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 4 ( i )					      								    								  
116 JUMP_ABSOLUTE 28					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
17 >> 120 LOAD_FAST 2 ( lps )				      								    								  
122 LOAD_FAST 1 ( n )					      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 BINARY_SUBSCR					      								    								  
130 STORE_FAST 5 ( res )				      								    								  
							      								    								  
18 132 LOAD_FAST 5 ( res )				      								    								  
134 LOAD_FAST 1 ( n )					      								    								  
136 LOAD_CONST 3 ( 2 )					      								    								  
138 BINARY_TRUE_DIVIDE					      								    								  
140 COMPARE_OP 4 ( > )					      								    								  
142 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
19 144 LOAD_FAST 1 ( n )				      								    								  
146 LOAD_CONST 3 ( 2 )					      								    								  
148 BINARY_FLOOR_DIVIDE					      								    								  
150 RETURN_VALUE					      								    								  
							      								    								  
21 >> 152 LOAD_FAST 5 ( res )				      								    								  
154 RETURN_VALUE					      								    								  
156 LOAD_CONST 0 ( None )				      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH
--							      --							    --								  --
Disassembly of <code object findElement at 0x7f33e2649150, fi def findElement ( arr , n ) :				    def findElement ( arr , n ) :				  success : None
2 0 LOAD_CONST 0 ( None )				      	  leftMax = [ None ] * n				    	leftMax = [ None ] * n					  
2 BUILD_LIST 1						      	  leftMax [ 0 ] = float ( '-inf' )			    	leftMax [ 0 ] = float ( '-inf' )			  
4 LOAD_FAST 1 ( n )					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
6 BINARY_MULTIPLY					      	      leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 	    leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 
8 STORE_FAST 2 ( leftMax )				      	  rightMin = float ( 'inf' )				    	rightMin = float ( "inf" )				  
							      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
3 10 LOAD_GLOBAL 0 ( float )				      	      if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] 	    if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] 
12 LOAD_CONST 1 ( '-inf' )				      		  return i					    		return i					  
14 CALL_FUNCTION 1					      	      rightMin = min ( rightMin , arr [ i ] )		    	    rightMin = min ( rightMin , arr [ i ] )		  
16 LOAD_FAST 2 ( leftMax )				      	  return - 1						    	return - 1						  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 SETUP_LOOP 48 ( to 72 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 34 ( to 70 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 38 LOAD_GLOBAL 2 ( max )				      								    								  
40 LOAD_FAST 2 ( leftMax )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 LOAD_FAST 2 ( leftMax )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 34					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_GLOBAL 0 ( float )				      								    								  
74 LOAD_CONST 4 ( 'inf' )				      								    								  
76 CALL_FUNCTION 1					      								    								  
78 STORE_FAST 4 ( rightMin )				      								    								  
							      								    								  
7 80 SETUP_LOOP 70 ( to 152 )				      								    								  
82 LOAD_GLOBAL 1 ( range )				      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 LOAD_CONST 3 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 5 ( - 1 )					      								    								  
92 LOAD_CONST 5 ( - 1 )					      								    								  
94 CALL_FUNCTION 3					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 50 ( to 150 )				      								    								  
100 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 102 LOAD_FAST 2 ( leftMax )				      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 COMPARE_OP 0 ( < )					      								    								  
116 POP_JUMP_IF_FALSE 134				      								    								  
118 LOAD_FAST 4 ( rightMin )				      								    								  
120 LOAD_FAST 0 ( arr )					      								    								  
122 LOAD_FAST 3 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 COMPARE_OP 4 ( > )					      								    								  
128 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
9 130 LOAD_FAST 3 ( i )					      								    								  
132 RETURN_VALUE					      								    								  
							      								    								  
10 >> 134 LOAD_GLOBAL 3 ( min )				      								    								  
136 LOAD_FAST 4 ( rightMin )				      								    								  
138 LOAD_FAST 0 ( arr )					      								    								  
140 LOAD_FAST 3 ( i )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 CALL_FUNCTION 2					      								    								  
146 STORE_FAST 4 ( rightMin )				      								    								  
148 JUMP_ABSOLUTE 98					      								    								  
>> 150 POP_BLOCK					      								    								  
							      								    								  
11 >> 152 LOAD_CONST 5 ( - 1 )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING
--							      --							    --								  --
Disassembly of <code object shufleArray at 0x7f33e2644930, fi def shufleArray ( a , f , l ) :				    def shufleArray ( a , f , l ) :				  script_not_found : None
2 0 LOAD_FAST 2 ( l )					      	  if ( l > f ) :					    	if l > f :						  
2 LOAD_FAST 1 ( f )					      	      return						    	    return						  
4 COMPARE_OP 4 ( > )					      	  if ( l - f == 1 ) :					    	if l - f == 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return						    	    return						  
							      	  mid = int ( ( f + l ) / 2 )				    	mid = int ( f + l ) / 2					  
3 8 LOAD_CONST 0 ( None )				      	  temp = mid + 1					    	temp = mid + 1						  
10 RETURN_VALUE						      	  mmid = int ( ( f + mid ) / 2 )			    	mmid = int ( f + mid / 2 )				  
							      	  for i in range ( mmid + 1 , mid + 1 ) :		    	for i in range ( mmid + 1 , mid + 1 ) :			  
4 >> 12 LOAD_FAST 2 ( l )				      	      ( a [ i ] , a [ temp ] ) = ( a [ temp ] , a [ i ] )   	    a [ i ] , a [ temp ] = a [ temp ] , a [ i ]		  
14 LOAD_FAST 1 ( f )					      	      temp += 1						    	    temp += 1						  
16 BINARY_SUBTRACT					      	  shufleArray ( a , f , mid )				    	shufleArray ( a , f , mid )				  
18 LOAD_CONST 1 ( 1 )					      	  shufleArray ( a , mid + 1 , l )			    	shufleArray ( a , mid + 1 , l )				  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 24 LOAD_CONST 0 ( None )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_GLOBAL 0 ( int )				      								    								  
30 LOAD_FAST 1 ( f )					      								    								  
32 LOAD_FAST 2 ( l )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_CONST 2 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 44 LOAD_FAST 3 ( mid )				      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
8 52 LOAD_GLOBAL 0 ( int )				      								    								  
54 LOAD_FAST 1 ( f )					      								    								  
56 LOAD_FAST 3 ( mid )					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_CONST 2 ( 2 )					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 STORE_FAST 5 ( mmid )				      								    								  
							      								    								  
9 68 SETUP_LOOP 60 ( to 130 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 5 ( mmid )					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 3 ( mid )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 CALL_FUNCTION 2					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 38 ( to 128 )				      								    								  
90 STORE_FAST 6 ( i )					      								    								  
							      								    								  
10 92 LOAD_FAST 0 ( a )					      								    								  
94 LOAD_FAST 4 ( temp )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( a )					      								    								  
100 LOAD_FAST 6 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 ROT_TWO						      								    								  
106 LOAD_FAST 0 ( a )					      								    								  
108 LOAD_FAST 6 ( i )					      								    								  
110 STORE_SUBSCR					      								    								  
112 LOAD_FAST 0 ( a )					      								    								  
114 LOAD_FAST 4 ( temp )				      								    								  
116 STORE_SUBSCR					      								    								  
							      								    								  
11 118 LOAD_FAST 4 ( temp )				      								    								  
120 LOAD_CONST 1 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 4 ( temp )				      								    								  
126 JUMP_ABSOLUTE 88					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
12 >> 130 LOAD_GLOBAL 2 ( shufleArray )			      								    								  
132 LOAD_FAST 0 ( a )					      								    								  
134 LOAD_FAST 1 ( f )					      								    								  
136 LOAD_FAST 3 ( mid )					      								    								  
138 CALL_FUNCTION 3					      								    								  
140 POP_TOP						      								    								  
							      								    								  
13 142 LOAD_GLOBAL 2 ( shufleArray )			      								    								  
144 LOAD_FAST 0 ( a )					      								    								  
146 LOAD_FAST 3 ( mid )					      								    								  
148 LOAD_CONST 1 ( 1 )					      								    								  
150 BINARY_ADD						      								    								  
152 LOAD_FAST 2 ( l )					      								    								  
154 CALL_FUNCTION 3					      								    								  
156 POP_TOP						      								    								  
158 LOAD_CONST 0 ( None )				      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NU
--							      --							    --								  --
Disassembly of <code object printRoman at 0x7f33e2653ed0, fil def printRoman ( number ) :				    def printRoman ( number ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  num = [ 1 , 4 , 5 , 9 , 10 , 40 , 50 , 90 , 100 , 400 , 5 	num = [ 1 , 4 , 5 , 9 , 10 , 40 , 50 , 100 , 100 , 100 ,  
2 LOAD_CONST 2 ( 4 )					      	  sym = [ "I" , "IV" , "V" , "IX" , "X" , "XL" , "L" , "XC" 	sym = [ "I" , "IV" , "V" , "IX" , "X" , "XL" , "L" , "C"  
4 LOAD_CONST 3 ( 5 )					      	  i = 12						    	i = 12							  
6 LOAD_CONST 4 ( 9 )					      	  while number :					    	while number :						  
8 LOAD_CONST 5 ( 10 )					      	      div = number // num [ i ]				    	    div = number // num [ i ]				  
10 LOAD_CONST 6 ( 40 )					      	      number %= num [ i ]				    	    number = number [ num : i ]				  
12 LOAD_CONST 7 ( 50 )					      	      while div :					    	    while div :						  
14 LOAD_CONST 8 ( 90 )					      		  print ( sym [ i ] , end = "" )		    		print ( sym [ i ] , end = "" )			  
16 LOAD_CONST 9 ( 100 )					      		  div -= 1					    		div -= 1					  
18 LOAD_CONST 10 ( 400 )				      	      i -= 1						    	    i -= 1						  
20 LOAD_CONST 11 ( 500 )				      								    								  
22 LOAD_CONST 12 ( 900 )				      								    								  
24 LOAD_CONST 13 ( 1000 )				      								    								  
26 BUILD_LIST 13					      								    								  
28 STORE_FAST 1 ( num )					      								    								  
							      								    								  
3 30 LOAD_CONST 14 ( 'I' )				      								    								  
32 LOAD_CONST 15 ( 'IV' )				      								    								  
34 LOAD_CONST 16 ( 'V' )				      								    								  
36 LOAD_CONST 17 ( 'IX' )				      								    								  
38 LOAD_CONST 18 ( 'X' )				      								    								  
40 LOAD_CONST 19 ( 'XL' )				      								    								  
42 LOAD_CONST 20 ( 'L' )				      								    								  
44 LOAD_CONST 21 ( 'XC' )				      								    								  
46 LOAD_CONST 22 ( 'C' )				      								    								  
48 LOAD_CONST 23 ( 'CD' )				      								    								  
50 LOAD_CONST 24 ( 'D' )				      								    								  
52 LOAD_CONST 25 ( 'CM' )				      								    								  
54 LOAD_CONST 26 ( 'M' )				      								    								  
56 BUILD_LIST 13					      								    								  
58 STORE_FAST 2 ( sym )					      								    								  
							      								    								  
4 60 LOAD_CONST 27 ( 12 )				      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 64 SETUP_LOOP 74 ( to 140 )				      								    								  
>> 66 LOAD_FAST 0 ( number )				      								    								  
68 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
6 70 LOAD_FAST 0 ( number )				      								    								  
72 LOAD_FAST 1 ( num )					      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_FLOOR_DIVIDE					      								    								  
80 STORE_FAST 4 ( div )					      								    								  
							      								    								  
7 82 LOAD_FAST 0 ( number )				      								    								  
84 LOAD_FAST 1 ( num )					      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 INPLACE_MODULO					      								    								  
92 STORE_FAST 0 ( number )				      								    								  
							      								    								  
8 94 SETUP_LOOP 32 ( to 128 )				      								    								  
>> 96 LOAD_FAST 4 ( div )				      								    								  
98 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
9 100 LOAD_GLOBAL 0 ( print )				      								    								  
102 LOAD_FAST 2 ( sym )					      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 28 ( '' )				      								    								  
110 LOAD_CONST 29 ( ( 'end' , ) )			      								    								  
112 CALL_FUNCTION_KW 2					      								    								  
114 POP_TOP						      								    								  
							      								    								  
10 116 LOAD_FAST 4 ( div )				      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 INPLACE_SUBTRACT					      								    								  
122 STORE_FAST 4 ( div )				      								    								  
124 JUMP_ABSOLUTE 96					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
11 >> 128 LOAD_FAST 3 ( i )				      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 INPLACE_SUBTRACT					      								    								  
134 STORE_FAST 3 ( i )					      								    								  
136 JUMP_ABSOLUTE 66					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		      FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		    FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS			  FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
Disassembly of <code object relativeComplement at 0x7f33e2653 def relativeComplement ( arr1 , arr2 , n , m ) :		    def relativeComplement ( arr1 , arr2 , n , m ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 4 ( i )					      	  j = 0							    	j = 0							  
							      	  while ( i < n and j < m ) :				    	while i < n and j < m :					  
3 4 LOAD_CONST 1 ( 0 )					      	      if ( arr1 [ i ] < arr2 [ j ] ) :			    	    if arr1 [ i ] < arr2 [ j ] :			  
6 STORE_FAST 5 ( j )					      		  print ( arr1 [ i ] , "" , end = "" )		    		print ( arr1 [ i ] , arr2 [ j ] )		  
							      		  i += 1					    		i += 1						  
4 8 SETUP_LOOP 122 ( to 132 )				      	      elif ( arr1 [ i ] > arr2 [ j ] ) :		    	    else :						  
>> 10 LOAD_FAST 4 ( i )					      		  j += 1					    		if arr1 [ i ] > arr2 [ j ] :			  
12 LOAD_FAST 2 ( n )					      	      elif ( arr1 [ i ] == arr2 [ j ] ) :		    		    j += 1					  
14 COMPARE_OP 0 ( < )					      		  i += 1					    	    elif arr1 [ i ] == arr2 [ j ] :			  
16 POP_JUMP_IF_FALSE 130				      		  j += 1					    		i += 1						  
18 LOAD_FAST 5 ( j )					      	  while ( i < n ) :					    		j += 1						  
20 LOAD_FAST 3 ( m )					      	      print ( arr1 [ i ] , "" , end = "" )		    	while i < n :						  
22 COMPARE_OP 0 ( < )					      								    	    print ( arr1 [ i ] , end = "" )			  
24 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( arr1 )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( arr2 )					      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
6 42 LOAD_GLOBAL 0 ( print )				      								    								  
44 LOAD_FAST 0 ( arr1 )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 2 ( '' )					      								    								  
52 LOAD_CONST 2 ( '' )					      								    								  
54 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
56 CALL_FUNCTION_KW 3					      								    								  
58 POP_TOP						      								    								  
							      								    								  
7 60 LOAD_FAST 4 ( i )					      								    								  
62 LOAD_CONST 4 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 4 ( i )					      								    								  
68 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
8 >> 70 LOAD_FAST 0 ( arr1 )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 1 ( arr2 )					      								    								  
78 LOAD_FAST 5 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 COMPARE_OP 4 ( > )					      								    								  
84 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
9 86 LOAD_FAST 5 ( j )					      								    								  
88 LOAD_CONST 4 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 5 ( j )					      								    								  
94 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
10 >> 96 LOAD_FAST 0 ( arr1 )				      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 1 ( arr2 )				      								    								  
104 LOAD_FAST 5 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 10				      								    								  
							      								    								  
11 112 LOAD_FAST 4 ( i )				      								    								  
114 LOAD_CONST 4 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 4 ( i )					      								    								  
							      								    								  
12 120 LOAD_FAST 5 ( j )				      								    								  
122 LOAD_CONST 4 ( 1 )					      								    								  
124 INPLACE_ADD						      								    								  
126 STORE_FAST 5 ( j )					      								    								  
128 JUMP_ABSOLUTE 10					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
13 >> 132 SETUP_LOOP 30 ( to 164 )			      								    								  
>> 134 LOAD_FAST 4 ( i )				      								    								  
136 LOAD_FAST 2 ( n )					      								    								  
138 COMPARE_OP 0 ( < )					      								    								  
140 POP_JUMP_IF_FALSE 162				      								    								  
							      								    								  
14 142 LOAD_GLOBAL 0 ( print )				      								    								  
144 LOAD_FAST 0 ( arr1 )				      								    								  
146 LOAD_FAST 4 ( i )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_CONST 2 ( '' )					      								    								  
152 LOAD_CONST 2 ( '' )					      								    								  
154 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
156 CALL_FUNCTION_KW 3					      								    								  
158 POP_TOP						      								    								  
160 JUMP_ABSOLUTE 134					      								    								  
>> 162 POP_BLOCK					      								    								  
>> 164 LOAD_CONST 0 ( None )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	      CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	    CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE
--							      --							    --								  --
Disassembly of <code object isChangeable at 0x7f33e26494b0, f def isChangeable ( notes , n ) :				    def isChangeable ( notes , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  fiveCount = 0						    	fiveCount = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( fiveCount )				      	  tenCount = 0						    	tenCount = 0						  _sa.valid/CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERS
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  ON_IN_THE_QUEUE.py", line 59	   return 0	^ Sy
3 4 LOAD_CONST 1 ( 0 )					      	      if ( notes [ i ] == 5 ) :				    	    if notes [ i ] == 5 :				  ntaxError: 'return' outside function
6 STORE_FAST 3 ( tenCount )				      		  fiveCount += 1				    		fiveCount += 1					  
							      	      elif ( notes [ i ] == 10 ) :			    	    elif notes [ i ] == 10 :				  
4 8 SETUP_LOOP 138 ( to 148 )				      		  if ( fiveCount > 0 ) :			    		if fiveCount > 0 :				  
10 LOAD_GLOBAL 0 ( range )				      		      fiveCount -= 1				    		    fiveCount -= 1				  
12 LOAD_FAST 1 ( n )					      		      tenCount += 1				    		    tenCount += 1				  
14 CALL_FUNCTION 1					      		  else :					    		else :						  
16 GET_ITER						      		      return 0					    		    return 0					  
>> 18 FOR_ITER 126 ( to 146 )				      	      else :						    	    elif fiveCount > 0 and tenCount > 0 :		  
20 STORE_FAST 4 ( i )					      		  if ( fiveCount > 0 and tenCount > 0 ) :	    		fiveCount -= 1					  
							      		      fiveCount -= 1				    		tenCount -= 1					  
5 22 LOAD_FAST 0 ( notes )				      		      tenCount -= 1				    	    elif fiveCount >= 3 :				  
24 LOAD_FAST 4 ( i )					      		  elif ( fiveCount >= 3 ) :			    		fiveCount -= 3					  
26 BINARY_SUBSCR					      		      fiveCount -= 3				    	    else :						  
28 LOAD_CONST 2 ( 5 )					      		  else :					    		return 0					  
30 COMPARE_OP 2 ( == )					      		      return 0					    return 0							  
32 POP_JUMP_IF_FALSE 44					      	  return 1						    								  
							      								    								  
6 34 LOAD_FAST 2 ( fiveCount )				      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( fiveCount )				      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
7 >> 44 LOAD_FAST 0 ( notes )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 4 ( 10 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
8 56 LOAD_FAST 2 ( fiveCount )				      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 COMPARE_OP 4 ( > )					      								    								  
62 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
9 64 LOAD_FAST 2 ( fiveCount )				      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 INPLACE_SUBTRACT					      								    								  
70 STORE_FAST 2 ( fiveCount )				      								    								  
							      								    								  
10 72 LOAD_FAST 3 ( tenCount )				      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 3 ( tenCount )				      								    								  
80 JUMP_ABSOLUTE 144					      								    								  
							      								    								  
12 >> 82 LOAD_CONST 1 ( 0 )				      								    								  
84 RETURN_VALUE						      								    								  
86 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
14 >> 88 LOAD_FAST 2 ( fiveCount )			      								    								  
90 LOAD_CONST 1 ( 0 )					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 122				      								    								  
96 LOAD_FAST 3 ( tenCount )				      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
15 104 LOAD_FAST 2 ( fiveCount )			      								    								  
106 LOAD_CONST 3 ( 1 )					      								    								  
108 INPLACE_SUBTRACT					      								    								  
110 STORE_FAST 2 ( fiveCount )				      								    								  
							      								    								  
16 112 LOAD_FAST 3 ( tenCount )				      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 INPLACE_SUBTRACT					      								    								  
118 STORE_FAST 3 ( tenCount )				      								    								  
120 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
17 >> 122 LOAD_FAST 2 ( fiveCount )			      								    								  
124 LOAD_CONST 5 ( 3 )					      								    								  
126 COMPARE_OP 5 ( >= )					      								    								  
128 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
18 130 LOAD_FAST 2 ( fiveCount )			      								    								  
132 LOAD_CONST 5 ( 3 )					      								    								  
134 INPLACE_SUBTRACT					      								    								  
136 STORE_FAST 2 ( fiveCount )				      								    								  
138 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
20 >> 140 LOAD_CONST 1 ( 0 )				      								    								  
142 RETURN_VALUE					      								    								  
>> 144 JUMP_ABSOLUTE 18					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
21 >> 148 LOAD_CONST 3 ( 1 )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_
--							      --							    --								  --
Disassembly of <code object subsequence at 0x7f33e2653f60, fi def subsequence ( s , t , n , k ) :			    def subsequence ( s , 0x7f33e2653f60 , string , k = 0 ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  last = 0						    	last = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 4 ( last )					      	  cnt = 0						    	cnt = 0							  _sa.valid/LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EV
							      	  new_last = 0						    	new_last = 0						  ERY_CHARACTER_OCCURS_LEAST_K_TIMES.py", line 37
3 4 LOAD_CONST 1 ( 0 )					      	  size = 0						    	size = 0						    def f_filled ( s , 0x7f33e2653f60 , string , k =
6 STORE_FAST 5 ( cnt )					      	  string = 'zyxwvutsrqponmlkjihgfedcba'			    	size = 0						   0 ) :				     ^ Synta
							      	  for ch in string :					    	string = "zyxwvvvvponmlkjihgfedcba"			  xError: invalid syntax
4 8 LOAD_CONST 1 ( 0 )					      	      cnt = 0						    	for ch in string :					  
10 STORE_FAST 6 ( new_last )				      	      for i in range ( last , n ) :			    	    cnt = 0						  
							      		  if s [ i ] == ch :				    	    for i in range ( last , n ) :			  
5 12 LOAD_CONST 1 ( 0 )					      		      cnt += 1					    		if s [ i ] == ch :				  
14 STORE_FAST 7 ( size )				      	      if cnt >= k :					    		    cnt += 1					  
							      		  for i in range ( last , n ) :			    	    if cnt >= k :					  
6 16 LOAD_CONST 2 ( 'zyxwvutsrqponmlkjihgfedcba' )	      		      if s [ i ] == ch :			    		for i in range ( last , n ) :			  
18 STORE_FAST 8 ( string )				      			  t [ size ] = ch			    		    if s [ i ] == ch :				  
							      			  new_last = i				    			t [ size ] = ch				  
7 20 SETUP_LOOP 120 ( to 142 )				      			  size += 1				    			new_last = i				  
22 LOAD_FAST 8 ( string )				      		  last = new_last				    			size += 1				  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 112 ( to 140 )				      								    								  
28 STORE_FAST 9 ( ch )					      								    								  
							      								    								  
8 30 LOAD_CONST 1 ( 0 )					      								    								  
32 STORE_FAST 5 ( cnt )					      								    								  
							      								    								  
9 34 SETUP_LOOP 38 ( to 74 )				      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_FAST 4 ( last )					      								    								  
40 LOAD_FAST 2 ( n )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 24 ( to 72 )				      								    								  
48 STORE_FAST 10 ( i )					      								    								  
							      								    								  
10 50 LOAD_FAST 0 ( s )					      								    								  
52 LOAD_FAST 10 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 9 ( ch )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
11 62 LOAD_FAST 5 ( cnt )				      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 5 ( cnt )					      								    								  
70 JUMP_ABSOLUTE 46					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
12 >> 74 LOAD_FAST 5 ( cnt )				      								    								  
76 LOAD_FAST 3 ( k )					      								    								  
78 COMPARE_OP 5 ( >= )					      								    								  
80 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
13 82 SETUP_LOOP 50 ( to 134 )				      								    								  
84 LOAD_GLOBAL 0 ( range )				      								    								  
86 LOAD_FAST 4 ( last )					      								    								  
88 LOAD_FAST 2 ( n )					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 36 ( to 132 )				      								    								  
96 STORE_FAST 10 ( i )					      								    								  
							      								    								  
14 98 LOAD_FAST 0 ( s )					      								    								  
100 LOAD_FAST 10 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 9 ( ch )					      								    								  
106 COMPARE_OP 2 ( == )					      								    								  
108 POP_JUMP_IF_FALSE 94				      								    								  
							      								    								  
15 110 LOAD_FAST 9 ( ch )				      								    								  
112 LOAD_FAST 1 ( t )					      								    								  
114 LOAD_FAST 7 ( size )				      								    								  
116 STORE_SUBSCR					      								    								  
							      								    								  
16 118 LOAD_FAST 10 ( i )				      								    								  
120 STORE_FAST 6 ( new_last )				      								    								  
							      								    								  
17 122 LOAD_FAST 7 ( size )				      								    								  
124 LOAD_CONST 3 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 7 ( size )				      								    								  
130 JUMP_ABSOLUTE 94					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
18 >> 134 LOAD_FAST 6 ( new_last )			      								    								  
136 STORE_FAST 4 ( last )				      								    								  
138 JUMP_ABSOLUTE 26					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 LOAD_CONST 0 ( None )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS		      NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS		    NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS		  NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS
--							      --							    --								  --
Disassembly of <code object countDivisbleby4 at 0x7f33e264493 def countDivisbleby4 ( s ) :				    def countDivisbleby4 ( s ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( s )					      	  count = 0 ;						    	count = 0						  _sa.valid/NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INT
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n , 1 ) :			    	for i in range ( 0 , n , 1 ) :				  EGERS.py", line 40	 return count	  ^ SyntaxEr
6 STORE_FAST 1 ( n )					      	      if ( s [ i ] == '4' or s [ i ] == '8' or s [ i ] == ' 	    if s [ i ] == '4' or s [ i ] == '8' or s [ i ] == '0' ror: 'return' outside function
							      		  count += 1					    		count += 1					  
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n - 1 , 1 ) :			    	for i in range ( 0 , n - 1 , 1 ) :			  
10 STORE_FAST 2 ( count )				      	      h = ( ord ( s [ i ] ) - ord ( '0' ) ) * 10 + ( ord (  	    h = ord ( s [ i ] ) - ord ( '0' ) * 10 + ord ( s [ i  
							      	      if ( h % 4 == 0 ) :				    	    if h % 4 == 0 :					  
4 12 SETUP_LOOP 64 ( to 78 )				      		  count = count + i + 1				    		count = count + i + 1				  
14 LOAD_GLOBAL 1 ( range )				      	  return count						    return count						  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 48 ( to 76 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( '4' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_TRUE 66					      								    								  
42 LOAD_FAST 0 ( s )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 4 ( '8' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_TRUE 66					      								    								  
54 LOAD_FAST 0 ( s )					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 5 ( '0' )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 >> 66 LOAD_FAST 2 ( count )				      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( count )				      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
7 >> 78 SETUP_LOOP 96 ( to 176 )			      								    								  
80 LOAD_GLOBAL 1 ( range )				      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 CALL_FUNCTION 3					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 76 ( to 174 )				      								    								  
98 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 100 LOAD_GLOBAL 2 ( ord )				      								    								  
102 LOAD_FAST 0 ( s )					      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 LOAD_GLOBAL 2 ( ord )				      								    								  
112 LOAD_CONST 5 ( '0' )				      								    								  
114 CALL_FUNCTION 1					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 LOAD_CONST 6 ( 10 )					      								    								  
120 BINARY_MULTIPLY					      								    								  
122 LOAD_GLOBAL 2 ( ord )				      								    								  
124 LOAD_FAST 0 ( s )					      								    								  
126 LOAD_FAST 3 ( i )					      								    								  
128 LOAD_CONST 2 ( 1 )					      								    								  
130 BINARY_ADD						      								    								  
132 BINARY_SUBSCR					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 LOAD_GLOBAL 2 ( ord )				      								    								  
138 LOAD_CONST 5 ( '0' )				      								    								  
140 CALL_FUNCTION 1					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 BINARY_ADD						      								    								  
146 STORE_FAST 4 ( h )					      								    								  
							      								    								  
9 148 LOAD_FAST 4 ( h )					      								    								  
150 LOAD_CONST 7 ( 4 )					      								    								  
152 BINARY_MODULO					      								    								  
154 LOAD_CONST 1 ( 0 )					      								    								  
156 COMPARE_OP 2 ( == )					      								    								  
158 POP_JUMP_IF_FALSE 96				      								    								  
							      								    								  
10 160 LOAD_FAST 2 ( count )				      								    								  
162 LOAD_FAST 3 ( i )					      								    								  
164 BINARY_ADD						      								    								  
166 LOAD_CONST 2 ( 1 )					      								    								  
168 BINARY_ADD						      								    								  
170 STORE_FAST 2 ( count )				      								    								  
172 JUMP_ABSOLUTE 96					      								    								  
>> 174 POP_BLOCK					      								    								  
							      								    								  
11 >> 176 LOAD_FAST 2 ( count )				      								    								  
178 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGE
--							      --							    --								  --
Disassembly of <code object rearrangeArray at 0x7f33e26494b0, def rearrangeArray ( arr , n ) :				    def rearrangeArray ( arr , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  tempArr = [ 0 ] * ( n + 1 )				    	tempArr = [ 0 ] * ( n + 1 )				  
4 CALL_METHOD 0						      	  ArrIndex = 0						    	ArrIndex = 0						  
6 POP_TOP						      	  i = 0							    	i = n - 1						  
							      	  j = n - 1						    	while i <= n // 2 or j > n // 2 :			  
3 8 LOAD_CONST 1 ( 0 )					      	  while ( i <= n // 2 or j > n // 2 ) :			    	    tempArr [ ArrIndex ] = arr [ i ]			  
10 BUILD_LIST 1						      	      tempArr [ ArrIndex ] = arr [ i ]			    	    ArrIndex = ArrIndex + 1				  
12 LOAD_FAST 1 ( n )					      	      ArrIndex = ArrIndex + 1				    	    ArrIndex [ ArrIndex ] = arr [ j ]			  
14 LOAD_CONST 2 ( 1 )					      	      tempArr [ ArrIndex ] = arr [ j ]			    	    ArrIndex = ArrIndex + 1				  
16 BINARY_ADD						      	      ArrIndex = ArrIndex + 1				    	    i = i + 1						  
18 BINARY_MULTIPLY					      	      i = i + 1						    	    j = j - 1						  
20 STORE_FAST 2 ( tempArr )				      	      j = j - 1						    	for i in range ( 0 , n ) :				  
							      	  for i in range ( 0 , n ) :				    	    arr [ i ] = tempArr [ i ]				  
4 22 LOAD_CONST 1 ( 0 )					      	      arr [ i ] = tempArr [ i ]				    								  
24 STORE_FAST 3 ( ArrIndex )				      								    								  
							      								    								  
5 26 LOAD_CONST 1 ( 0 )					      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 38 SETUP_LOOP 84 ( to 124 )				      								    								  
>> 40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 LOAD_CONST 3 ( 2 )					      								    								  
46 BINARY_FLOOR_DIVIDE					      								    								  
48 COMPARE_OP 1 ( <= )					      								    								  
50 POP_JUMP_IF_TRUE 64					      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 LOAD_FAST 1 ( n )					      								    								  
56 LOAD_CONST 3 ( 2 )					      								    								  
58 BINARY_FLOOR_DIVIDE					      								    								  
60 COMPARE_OP 4 ( > )					      								    								  
62 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
8 >> 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 2 ( tempArr )				      								    								  
72 LOAD_FAST 3 ( ArrIndex )				      								    								  
74 STORE_SUBSCR						      								    								  
							      								    								  
9 76 LOAD_FAST 3 ( ArrIndex )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 3 ( ArrIndex )				      								    								  
							      								    								  
10 84 LOAD_FAST 0 ( arr )				      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 2 ( tempArr )				      								    								  
92 LOAD_FAST 3 ( ArrIndex )				      								    								  
94 STORE_SUBSCR						      								    								  
							      								    								  
11 96 LOAD_FAST 3 ( ArrIndex )				      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_FAST 3 ( ArrIndex )				      								    								  
							      								    								  
12 104 LOAD_FAST 4 ( i )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 112 LOAD_FAST 5 ( j )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 STORE_FAST 5 ( j )					      								    								  
120 JUMP_ABSOLUTE 40					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
14 >> 124 SETUP_LOOP 30 ( to 156 )			      								    								  
126 LOAD_GLOBAL 1 ( range )				      								    								  
128 LOAD_CONST 1 ( 0 )					      								    								  
130 LOAD_FAST 1 ( n )					      								    								  
132 CALL_FUNCTION 2					      								    								  
134 GET_ITER						      								    								  
>> 136 FOR_ITER 16 ( to 154 )				      								    								  
138 STORE_FAST 4 ( i )					      								    								  
							      								    								  
15 140 LOAD_FAST 2 ( tempArr )				      								    								  
142 LOAD_FAST 4 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 4 ( i )					      								    								  
150 STORE_SUBSCR					      								    								  
152 JUMP_ABSOLUTE 136					      								    								  
>> 154 POP_BLOCK					      								    								  
>> 156 LOAD_CONST 0 ( None )				      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS		      NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS			    NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS			  NUMBER_N_DIGITS_NON_<unk> ASING_INTEGERS
--							      --							    --								  --
Disassembly of <code object nonDecNums at 0x7f33e26494b0, fil def nonDecNums ( n ) :					    def nonDecNums ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( np )				      	  a = np.zeros ( ( n + 1 , 10 ) )			    	a = np.zeros ( ( n + 1 , 10 ) )				  
2 LOAD_METHOD 1 ( zeros )				      	  for i in range ( 10 ) :				    	for i in range ( 10 ) :					  
4 LOAD_FAST 0 ( n )					      	      a [ 0 ] [ i ] = 1					    	    a [ i ] [ i ] = 1					  
6 LOAD_CONST 1 ( 1 )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
8 BINARY_ADD						      	      a [ i ] [ 9 ] = 1					    	    a [ i ] [ 9 ] = 1					  
10 LOAD_CONST 2 ( 10 )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
12 BUILD_TUPLE 2					      	      for j in range ( 8 , - 1 , - 1 ) :		    	    for j in range ( 8 , - 1 , - 1 ) :			  
14 CALL_METHOD 1					      		  a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 		a [ i ] [ j ] = a [ i - 1 ] [ j + 1 ]		  
16 STORE_FAST 1 ( a )					      	  return int ( a [ n ] [ 0 ] )				    return int ( a [ 0 ] [ j ] [ j + 1 ] )			  
							      								    								  
3 18 SETUP_LOOP 28 ( to 48 )				      								    								  
20 LOAD_GLOBAL 2 ( range )				      								    								  
22 LOAD_CONST 2 ( 10 )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 16 ( to 46 )				      								    								  
30 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 32 LOAD_CONST 1 ( 1 )					      								    								  
34 LOAD_FAST 1 ( a )					      								    								  
36 LOAD_CONST 3 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 STORE_SUBSCR						      								    								  
44 JUMP_ABSOLUTE 28					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 SETUP_LOOP 34 ( to 84 )				      								    								  
50 LOAD_GLOBAL 2 ( range )				      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 16 ( to 82 )				      								    								  
66 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 68 LOAD_CONST 1 ( 1 )					      								    								  
70 LOAD_FAST 1 ( a )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 4 ( 9 )					      								    								  
78 STORE_SUBSCR						      								    								  
80 JUMP_ABSOLUTE 64					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
7 >> 84 SETUP_LOOP 84 ( to 170 )			      								    								  
86 LOAD_GLOBAL 2 ( range )				      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 LOAD_FAST 0 ( n )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 CALL_FUNCTION 2					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 66 ( to 168 )				      								    								  
102 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 104 SETUP_LOOP 60 ( to 166 )				      								    								  
106 LOAD_GLOBAL 2 ( range )				      								    								  
108 LOAD_CONST 5 ( 8 )					      								    								  
110 LOAD_CONST 6 ( - 1 )				      								    								  
112 LOAD_CONST 6 ( - 1 )				      								    								  
114 CALL_FUNCTION 3					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 44 ( to 164 )				      								    								  
120 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 122 LOAD_FAST 1 ( a )					      								    								  
124 LOAD_FAST 2 ( i )					      								    								  
126 LOAD_CONST 1 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 3 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_FAST 1 ( a )					      								    								  
138 LOAD_FAST 2 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 3 ( j )					      								    								  
144 LOAD_CONST 1 ( 1 )					      								    								  
146 BINARY_ADD						      								    								  
148 BINARY_SUBSCR					      								    								  
150 BINARY_ADD						      								    								  
152 LOAD_FAST 1 ( a )					      								    								  
154 LOAD_FAST 2 ( i )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 3 ( j )					      								    								  
160 STORE_SUBSCR					      								    								  
162 JUMP_ABSOLUTE 118					      								    								  
>> 164 POP_BLOCK					      								    								  
>> 166 JUMP_ABSOLUTE 100				      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
10 >> 170 LOAD_GLOBAL 3 ( int )				      								    								  
172 LOAD_FAST 1 ( a )					      								    								  
174 LOAD_FAST 0 ( n )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 LOAD_CONST 3 ( 0 )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 CALL_FUNCTION 1					      								    								  
184 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS			      SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS				    SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS				  SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS
--							      --							    --								  --
Disassembly of <code object sum at 0x7f33e2644f60, file "<dis def sum ( a , n ) :					    def sum ( a , n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( dict )				      	  cnt = dict ( )					    	cnt = dict ( )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 CALL_FUNCTION 0					      	  ans = 0						    	ans = 0							  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/SUM_F
4 STORE_FAST 2 ( cnt )					      	  pre_sum = 0						    	pre_sum = 0						  AI_AJ_PAIRS_ARRAY_N_INTEGERS.py", line 66, in <mod
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  ule>	   if f_filled(*parameters_set) == f_gold(*p
3 6 LOAD_CONST 1 ( 0 )					      	      ans += ( i * a [ i ] ) - pre_sum			    	    ans += i * a [ i ] - pre_sum			  arameters_set):   File "/home/ubuntu/TransCoder/mo
8 STORE_FAST 3 ( ans )					      	      pre_sum += a [ i ]				    	    pre_sum += a [ i ]					  dels/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_s
							      	      if ( a [ i ] - 1 ) in cnt :			    	    if a [ i ] - 1 in cnt :				  a-python_sa.valid/SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGER
4 10 LOAD_CONST 1 ( 0 )					      		  ans -= cnt [ a [ i ] - 1 ]			    		ans -= cnt [ a [ i ] - 1 ]			  S.py", line 46, in f_filled	  cnt [ a [ i ] ] +=
12 STORE_FAST 4 ( pre_sum )				      	      if ( a [ i ] + 1 ) in cnt :			    	    if a [ i ] + 1 in cnt :				   1 KeyError: 2
							      		  ans += cnt [ a [ i ] + 1 ]			    		ans += cnt [ a [ i ] + 1 ]			  
5 14 SETUP_LOOP 164 ( to 180 )				      	      if a [ i ] not in cnt :				    	    if a [ i ] not in cnt :				  
16 LOAD_GLOBAL 1 ( range )				      		  cnt [ a [ i ] ] = 0				    		cnt [ a [ i ] ] += 1				  
18 LOAD_FAST 1 ( n )					      	      cnt [ a [ i ] ] += 1				    	    cnt [ a [ i ] ] += 1				  
20 CALL_FUNCTION 1					      	  return ans						    	return ans						  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 152 ( to 178 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 3 ( ans )				      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 LOAD_FAST 0 ( a )					      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 LOAD_FAST 4 ( pre_sum )				      								    								  
42 BINARY_SUBTRACT					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( pre_sum )				      								    								  
50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 4 ( pre_sum )				      								    								  
							      								    								  
8 60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 5 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 2 ( cnt )					      								    								  
72 COMPARE_OP 6 ( in )					      								    								  
74 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
9 76 LOAD_FAST 3 ( ans )				      								    								  
78 LOAD_FAST 2 ( cnt )					      								    								  
80 LOAD_FAST 0 ( a )					      								    								  
82 LOAD_FAST 5 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 INPLACE_SUBTRACT					      								    								  
94 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
10 >> 96 LOAD_FAST 0 ( a )				      								    								  
98 LOAD_FAST 5 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 2 ( cnt )					      								    								  
108 COMPARE_OP 6 ( in )					      								    								  
110 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
11 112 LOAD_FAST 3 ( ans )				      								    								  
114 LOAD_FAST 2 ( cnt )					      								    								  
116 LOAD_FAST 0 ( a )					      								    								  
118 LOAD_FAST 5 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 BINARY_SUBSCR					      								    								  
128 INPLACE_ADD						      								    								  
130 STORE_FAST 3 ( ans )				      								    								  
							      								    								  
12 >> 132 LOAD_FAST 0 ( a )				      								    								  
134 LOAD_FAST 5 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 LOAD_FAST 2 ( cnt )					      								    								  
140 COMPARE_OP 7 ( not in )				      								    								  
142 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
13 144 LOAD_CONST 1 ( 0 )				      								    								  
146 LOAD_FAST 2 ( cnt )					      								    								  
148 LOAD_FAST 0 ( a )					      								    								  
150 LOAD_FAST 5 ( i )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 STORE_SUBSCR					      								    								  
							      								    								  
14 >> 156 LOAD_FAST 2 ( cnt )				      								    								  
158 LOAD_FAST 0 ( a )					      								    								  
160 LOAD_FAST 5 ( i )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 DUP_TOP_TWO						      								    								  
166 BINARY_SUBSCR					      								    								  
168 LOAD_CONST 2 ( 1 )					      								    								  
170 INPLACE_ADD						      								    								  
172 ROT_THREE						      								    								  
174 STORE_SUBSCR					      								    								  
176 JUMP_ABSOLUTE 24					      								    								  
>> 178 POP_BLOCK					      								    								  
							      								    								  
15 >> 180 LOAD_FAST 3 ( ans )				      								    								  
182 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1	      <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1	    <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		  <unk> RD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object thirdLargest at 0x7f33e2644930, f def thirdLargest ( arr , arr_size ) :			    def thirdLargest ( arr , arr_size = - 1 ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( arr_size )				      	  if ( arr_size < 3 ) :					    	if arr_size < 3 :					  
2 LOAD_CONST 1 ( 3 )					      	      print ( " Invalid Input " )			    	    print ( " Invalid Input " )				  
4 COMPARE_OP 0 ( < )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  first = arr [ 0 ]					    	first = arr [ 0 ]					  
							      	  second = - sys.maxsize				    	second = - sys.maxsize					  
3 8 LOAD_GLOBAL 0 ( print )				      	  third = - sys.maxsize					    	third = - sys.maxsize					  
10 LOAD_CONST 2 ( ' Invalid Input ' )			      	  for i in range ( 1 , arr_size ) :			    	for i in range ( 1 , arr_size ) :			  
12 CALL_FUNCTION 1					      	      if ( arr [ i ] > first ) :			    	    if arr [ i ] > first :				  
14 POP_TOP						      		  third = second				    		third = second					  
							      		  second = first				    		second = first					  
4 16 LOAD_CONST 0 ( None )				      		  first = arr [ i ]				    		first = arr [ i ]				  
18 RETURN_VALUE						      	      elif ( arr [ i ] > second ) :			    		first = arr [ i ]				  
							      		  third = second				    	    elif arr [ i ] > second :				  
5 >> 20 LOAD_FAST 0 ( arr )				      		  second = arr [ i ]				    		third = second					  
22 LOAD_CONST 3 ( 0 )					      	      elif ( arr [ i ] > third ) :			    		second = arr [ i ]				  
24 BINARY_SUBSCR					      		  third = arr [ i ]				    	    elif arr [ i ] > third :				  
26 STORE_FAST 2 ( first )				      	  print ( "The third Largest" , "element is" , third )	    		third = arr [ i ]				  
							      								    	print ( "The third Largest" , "element is" , third )	  
6 28 LOAD_GLOBAL 1 ( sys )				      								    								  
30 LOAD_ATTR 2 ( maxsize )				      								    								  
32 UNARY_NEGATIVE					      								    								  
34 STORE_FAST 3 ( second )				      								    								  
							      								    								  
7 36 LOAD_GLOBAL 1 ( sys )				      								    								  
38 LOAD_ATTR 2 ( maxsize )				      								    								  
40 UNARY_NEGATIVE					      								    								  
42 STORE_FAST 4 ( third )				      								    								  
							      								    								  
8 44 SETUP_LOOP 94 ( to 140 )				      								    								  
46 LOAD_GLOBAL 3 ( range )				      								    								  
48 LOAD_CONST 4 ( 1 )					      								    								  
50 LOAD_FAST 1 ( arr_size )				      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 80 ( to 138 )				      								    								  
58 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 5 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 2 ( first )				      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
10 72 LOAD_FAST 3 ( second )				      								    								  
74 STORE_FAST 4 ( third )				      								    								  
							      								    								  
11 76 LOAD_FAST 2 ( first )				      								    								  
78 STORE_FAST 3 ( second )				      								    								  
							      								    								  
12 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 5 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 STORE_FAST 2 ( first )				      								    								  
88 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
13 >> 90 LOAD_FAST 0 ( arr )				      								    								  
92 LOAD_FAST 5 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 3 ( second )				      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
14 102 LOAD_FAST 3 ( second )				      								    								  
104 STORE_FAST 4 ( third )				      								    								  
							      								    								  
15 106 LOAD_FAST 0 ( arr )				      								    								  
108 LOAD_FAST 5 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 STORE_FAST 3 ( second )				      								    								  
114 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
16 >> 116 LOAD_FAST 0 ( arr )				      								    								  
118 LOAD_FAST 5 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 4 ( third )				      								    								  
124 COMPARE_OP 4 ( > )					      								    								  
126 POP_JUMP_IF_FALSE 56				      								    								  
							      								    								  
17 128 LOAD_FAST 0 ( arr )				      								    								  
130 LOAD_FAST 5 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 STORE_FAST 4 ( third )				      								    								  
136 JUMP_ABSOLUTE 56					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
18 >> 140 LOAD_GLOBAL 0 ( print )			      								    								  
142 LOAD_CONST 5 ( 'The third Largest' )		      								    								  
144 LOAD_CONST 6 ( 'element is' )			      								    								  
146 LOAD_FAST 4 ( third )				      								    								  
148 CALL_FUNCTION 3					      								    								  
150 POP_TOP						      								    								  
152 LOAD_CONST 0 ( None )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS	      COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		    COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		  COUNT_SUB<unk> YS_WITH_SAME_EVEN_AND_ODD_ELEMENTS
--							      --							    --								  --
Disassembly of <code object countSubarrays at 0x7f33e2649a50, def countSubarrays ( arr , n ) :				    def countSubarrays ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  difference = 0					    	difference = 0						  
2 STORE_FAST 2 ( difference )				      	  ans = 0						    	ans = 0							  
							      	  hash_positive = [ 0 ] * ( n + 1 )			    	hash_positive = [ 0 ] * ( n + 1 )			  
3 4 LOAD_CONST 1 ( 0 )					      	  hash_negative = [ 0 ] * ( n + 1 )			    	hash_negative = [ 0 ] * ( n + 1 )			  
6 STORE_FAST 3 ( ans )					      	  hash_positive [ 0 ] = 1				    	hash_positive [ 0 ] = 1					  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 8 LOAD_CONST 1 ( 0 )					      	      if ( arr [ i ] & 1 == 1 ) :			    	    if arr [ i ] & 1 == 1 :				  
10 BUILD_LIST 1						      		  difference = difference + 1			    		difference = difference + 1			  
12 LOAD_FAST 1 ( n )					      	      else :						    	    else :						  
14 LOAD_CONST 2 ( 1 )					      		  difference = difference - 1			    		difference = difference - 1			  
16 BINARY_ADD						      	      if ( difference < 0 ) :				    	    if difference < 0 :					  
18 BINARY_MULTIPLY					      		  ans += hash_negative [ - difference ]		    		ans += hash_negative [ - difference ]		  
20 STORE_FAST 4 ( hash_positive )			      		  hash_negative [ - difference ] = hash_negative [  		hash_negative [ - difference ] = hash_negative [  
							      	      else :						    	    else :						  
5 22 LOAD_CONST 1 ( 0 )					      		  ans += hash_positive [ difference ]		    		ans += hash_positive [ difference ]		  
24 BUILD_LIST 1						      		  hash_positive [ difference ] = hash_positive [ di 	return ans						  
26 LOAD_FAST 1 ( n )					      	  return ans						    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 BINARY_MULTIPLY					      								    								  
34 STORE_FAST 5 ( hash_negative )			      								    								  
							      								    								  
6 36 LOAD_CONST 2 ( 1 )					      								    								  
38 LOAD_FAST 4 ( hash_positive )			      								    								  
40 LOAD_CONST 1 ( 0 )					      								    								  
42 STORE_SUBSCR						      								    								  
							      								    								  
7 44 SETUP_LOOP 122 ( to 168 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 110 ( to 166 )				      								    								  
56 STORE_FAST 6 ( i )					      								    								  
							      								    								  
8 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 6 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_AND						      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
9 74 LOAD_FAST 2 ( difference )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 2 ( difference )				      								    								  
82 JUMP_FORWARD 8 ( to 92 )				      								    								  
							      								    								  
11 >> 84 LOAD_FAST 2 ( difference )			      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 STORE_FAST 2 ( difference )				      								    								  
							      								    								  
12 >> 92 LOAD_FAST 2 ( difference )			      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
13 100 LOAD_FAST 3 ( ans )				      								    								  
102 LOAD_FAST 5 ( hash_negative )			      								    								  
104 LOAD_FAST 2 ( difference )				      								    								  
106 UNARY_NEGATIVE					      								    								  
108 BINARY_SUBSCR					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 3 ( ans )				      								    								  
							      								    								  
14 114 LOAD_FAST 5 ( hash_negative )			      								    								  
116 LOAD_FAST 2 ( difference )				      								    								  
118 UNARY_NEGATIVE					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 LOAD_FAST 5 ( hash_negative )			      								    								  
128 LOAD_FAST 2 ( difference )				      								    								  
130 UNARY_NEGATIVE					      								    								  
132 STORE_SUBSCR					      								    								  
134 JUMP_ABSOLUTE 54					      								    								  
							      								    								  
16 >> 136 LOAD_FAST 3 ( ans )				      								    								  
138 LOAD_FAST 4 ( hash_positive )			      								    								  
140 LOAD_FAST 2 ( difference )				      								    								  
142 BINARY_SUBSCR					      								    								  
144 INPLACE_ADD						      								    								  
146 STORE_FAST 3 ( ans )				      								    								  
							      								    								  
17 148 LOAD_FAST 4 ( hash_positive )			      								    								  
150 LOAD_FAST 2 ( difference )				      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_CONST 2 ( 1 )					      								    								  
156 BINARY_ADD						      								    								  
158 LOAD_FAST 4 ( hash_positive )			      								    								  
160 LOAD_FAST 2 ( difference )				      								    								  
162 STORE_SUBSCR					      								    								  
164 JUMP_ABSOLUTE 54					      								    								  
>> 166 POP_BLOCK					      								    								  
							      								    								  
18 >> 168 LOAD_FAST 3 ( ans )				      								    								  
170 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSEQUENCE_SPACE			      LONGEST_PALINDROME_SUBSEQUENCE_SPACE			    LONGEST_PALINDROME_SUBSEQUENCE_SPACE			  LONGEST_PALINDROME_SUBSEQUENCE_SPACE
--							      --							    --								  --
Disassembly of <code object lps at 0x7f33e2653ed0, file "<dis def lps ( s ) :						    def lps ( s ) :						  success : identical to gold
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  a = [ 0 ] * n						    	a = [ 0 ] * n						  
4 CALL_FUNCTION 1					      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
6 STORE_FAST 1 ( n )					      	      back_up = 0					    	    back_up = 0						  
							      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
3 8 LOAD_CONST 1 ( 0 )					      		  if j == i :					    		if j == i :					  
10 BUILD_LIST 1						      		      a [ j ] = 1				    		    a [ j ] = 1					  
12 LOAD_FAST 1 ( n )					      		  elif s [ i ] == s [ j ] :			    		elif s [ i ] == s [ j ] :			  
14 BINARY_MULTIPLY					      		      temp = a [ j ]				    		    temp = a [ j ]				  
16 STORE_FAST 2 ( a )					      		      a [ j ] = back_up + 2			    		    a [ j ] = back_up + 2			  
							      		      back_up = temp				    		    back_up = temp				  
4 18 SETUP_LOOP 142 ( to 162 )				      		  else :					    		else :						  
20 LOAD_GLOBAL 1 ( range )				      		      back_up = a [ j ]				    		    back_up = a [ j ]				  
22 LOAD_FAST 1 ( n )					      		      a [ j ] = max ( a [ j - 1 ] , a [ j ] )	    		    a [ j ] = max ( a [ j - 1 ] , a [ j ] )	  
24 LOAD_CONST 2 ( 1 )					      	  return a [ n - 1 ]					    	return a [ n - 1 ]					  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_CONST 3 ( - 1 )					      								    								  
30 LOAD_CONST 3 ( - 1 )					      								    								  
32 CALL_FUNCTION 3					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 122 ( to 160 )				      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 40 LOAD_CONST 1 ( 0 )					      								    								  
42 STORE_FAST 4 ( back_up )				      								    								  
							      								    								  
6 44 SETUP_LOOP 112 ( to 158 )				      								    								  
46 LOAD_GLOBAL 1 ( range )				      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 98 ( to 156 )				      								    								  
58 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 60 LOAD_FAST 5 ( j )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
8 68 LOAD_CONST 2 ( 1 )					      								    								  
70 LOAD_FAST 2 ( a )					      								    								  
72 LOAD_FAST 5 ( j )					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
9 >> 78 LOAD_FAST 0 ( s )				      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 0 ( s )					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
10 94 LOAD_FAST 2 ( a )					      								    								  
96 LOAD_FAST 5 ( j )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 STORE_FAST 6 ( temp )				      								    								  
							      								    								  
11 102 LOAD_FAST 4 ( back_up )				      								    								  
104 LOAD_CONST 4 ( 2 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_FAST 2 ( a )					      								    								  
110 LOAD_FAST 5 ( j )					      								    								  
112 STORE_SUBSCR					      								    								  
							      								    								  
12 114 LOAD_FAST 6 ( temp )				      								    								  
116 STORE_FAST 4 ( back_up )				      								    								  
118 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
14 >> 120 LOAD_FAST 2 ( a )				      								    								  
122 LOAD_FAST 5 ( j )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 STORE_FAST 4 ( back_up )				      								    								  
							      								    								  
15 128 LOAD_GLOBAL 2 ( max )				      								    								  
130 LOAD_FAST 2 ( a )					      								    								  
132 LOAD_FAST 5 ( j )					      								    								  
134 LOAD_CONST 2 ( 1 )					      								    								  
136 BINARY_SUBTRACT					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 2 ( a )					      								    								  
142 LOAD_FAST 5 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 CALL_FUNCTION 2					      								    								  
148 LOAD_FAST 2 ( a )					      								    								  
150 LOAD_FAST 5 ( j )					      								    								  
152 STORE_SUBSCR					      								    								  
154 JUMP_ABSOLUTE 56					      								    								  
>> 156 POP_BLOCK					      								    								  
>> 158 JUMP_ABSOLUTE 36					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
16 >> 162 LOAD_FAST 2 ( a )				      								    								  
164 LOAD_FAST 1 ( n )					      								    								  
166 LOAD_CONST 2 ( 1 )					      								    								  
168 BINARY_SUBTRACT					      								    								  
170 BINARY_SUBSCR					      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_CHECK					      DIVISIBILITY_CHECK					    DIVISIBILITY_CHECK						  DIVISIBILITY_CHECK
--							      --							    --								  --
Disassembly of <code object divisibilityCheck at 0x7f33e2644f def divisibilityCheck ( arr , n ) :			    def divisibilityCheck ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  s = dict ( )						    	s = dict ( )						  
2 CALL_FUNCTION 0					      	  max_ele = - 10 ** 9					    	max_ele = - 1000000000					  
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      s [ arr [ i ] ] = 1				    	    s [ arr [ i ] ] = 1					  
3 6 LOAD_CONST 1 ( - 1000000000 )			      	      max_ele = max ( max_ele , arr [ i ] )		    	    max_ele = max ( max_ele , arr [ i ] )		  
8 STORE_FAST 3 ( max_ele )				      	  res = dict ( )					    	res = dict ( )						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 10 SETUP_LOOP 42 ( to 54 )				      	      if ( arr [ i ] != 0 ) :				    	    if arr [ i ] != 0 :					  
12 LOAD_GLOBAL 1 ( range )				      		  for j in range ( arr [ i ] * 2 , max_ele + 1 , ar 		for j in range ( arr [ i ] * 2 , max_ele + 1 , ar 
14 LOAD_FAST 1 ( n )					      		      if ( j in s.keys ( ) ) :			    		    if j in s.keys ( ) :			  
16 CALL_FUNCTION 1					      			  res [ j ] = 1				    			res [ j ] = 1				  
18 GET_ITER						      	  for x in res :					    	for x in res :						  
>> 20 FOR_ITER 30 ( to 52 )				      	      print ( x , end = " " )				    	    print ( x , end = end )				  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 2 ( s )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 LOAD_GLOBAL 2 ( max )				      								    								  
38 LOAD_FAST 3 ( max_ele )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 STORE_FAST 3 ( max_ele )				      								    								  
50 JUMP_ABSOLUTE 20					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 0 ( dict )				      								    								  
56 CALL_FUNCTION 0					      								    								  
58 STORE_FAST 5 ( res )					      								    								  
							      								    								  
8 60 SETUP_LOOP 86 ( to 148 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 1 ( n )					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 74 ( to 146 )				      								    								  
72 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_CONST 3 ( 0 )					      								    								  
82 COMPARE_OP 3 ( != )					      								    								  
84 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
10 86 SETUP_LOOP 56 ( to 144 )				      								    								  
88 LOAD_GLOBAL 1 ( range )				      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 4 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 4 ( 2 )					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 LOAD_FAST 3 ( max_ele )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_FUNCTION 3					      								    								  
114 GET_ITER						      								    								  
>> 116 FOR_ITER 24 ( to 142 )				      								    								  
118 STORE_FAST 6 ( j )					      								    								  
							      								    								  
11 120 LOAD_FAST 6 ( j )				      								    								  
122 LOAD_FAST 2 ( s )					      								    								  
124 LOAD_METHOD 3 ( keys )				      								    								  
126 CALL_METHOD 0					      								    								  
128 COMPARE_OP 6 ( in )					      								    								  
130 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
12 132 LOAD_CONST 2 ( 1 )				      								    								  
134 LOAD_FAST 5 ( res )					      								    								  
136 LOAD_FAST 6 ( j )					      								    								  
138 STORE_SUBSCR					      								    								  
140 JUMP_ABSOLUTE 116					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 JUMP_ABSOLUTE 70					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
13 >> 148 SETUP_LOOP 24 ( to 174 )			      								    								  
150 LOAD_FAST 5 ( res )					      								    								  
152 GET_ITER						      								    								  
>> 154 FOR_ITER 16 ( to 172 )				      								    								  
156 STORE_FAST 7 ( x )					      								    								  
							      								    								  
14 158 LOAD_GLOBAL 4 ( print )				      								    								  
160 LOAD_FAST 7 ( x )					      								    								  
162 LOAD_CONST 5 ( ' ' )				      								    								  
164 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
166 CALL_FUNCTION_KW 2					      								    								  
168 POP_TOP						      								    								  
170 JUMP_ABSOLUTE 154					      								    								  
>> 172 POP_BLOCK					      								    								  
>> 174 LOAD_CONST 0 ( None )				      								    								  
176 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING		      EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING		    EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING		  EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING
--							      --							    --								  --
Disassembly of <code object find<<unk>> oscomplement at 0x7f3 def find<<unk>> oscomplement ( str ) :			    def findtex oscomplement ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  i = n - 1						    	i = n - 1						  
4 CALL_FUNCTION 1					      	  while ( i >= 0 ) :					    	while i >= 0 :						  
6 STORE_FAST 1 ( n )					      	      if ( str [ i ] == '1' ) :				    	    if str [ i ] == "1" :				  
							      		  break						    		break						  
3 8 LOAD_FAST 1 ( n )					      	      i -= 1						    	    i -= 1						  
10 LOAD_CONST 1 ( 1 )					      	  if ( i == - 1 ) :					    	if i == - 1 :						  
12 BINARY_SUBTRACT					      	      return '1' + str					    	    return '1' + str					  
14 STORE_FAST 2 ( i )					      	  k = i - 1						    	k = i - 1						  
							      	  while ( k >= 0 ) :					    	while k >= 0 :						  
4 16 SETUP_LOOP 34 ( to 52 )				      	      if ( str [ k ] == '1' ) :				    	    if str [ k ] == "1" :				  
>> 18 LOAD_FAST 2 ( i )					      		  str = list ( str )				    		str = list ( str )				  
20 LOAD_CONST 2 ( 0 )					      		  str [ k ] = '0'				    		k [ str ] = '0'					  
22 COMPARE_OP 5 ( >= )					      		  str = ''.join ( str )				    		str = ''.join ( str )				  
24 POP_JUMP_IF_FALSE 50					      	      else :						    	    else :						  
							      		  str = list ( str )				    		str = list ( str )				  
5 26 LOAD_FAST 0 ( str )				      		  str [ k ] = '1'				    		k [ str [ k ] = '1'				  
28 LOAD_FAST 2 ( i )					      		  str = ''.join ( str )				    		str = ''.join ( str )				  
30 BINARY_SUBSCR					      	      k -= 1						    		k = ''.join ( str )				  
32 LOAD_CONST 3 ( '1' )					      	  return str						    		k = k						  
34 COMPARE_OP 2 ( == )					      								    	return str						  
36 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 38 BREAK_LOOP						      								    								  
							      								    								  
7 >> 40 LOAD_FAST 2 ( i )				      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 INPLACE_SUBTRACT					      								    								  
46 STORE_FAST 2 ( i )					      								    								  
48 JUMP_ABSOLUTE 18					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
8 >> 52 LOAD_FAST 2 ( i )				      								    								  
54 LOAD_CONST 4 ( - 1 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
9 60 LOAD_CONST 3 ( '1' )				      								    								  
62 LOAD_FAST 0 ( str )					      								    								  
64 BINARY_ADD						      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
10 >> 68 LOAD_FAST 2 ( i )				      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 STORE_FAST 3 ( k )					      								    								  
							      								    								  
11 76 SETUP_LOOP 86 ( to 164 )				      								    								  
>> 78 LOAD_FAST 3 ( k )					      								    								  
80 LOAD_CONST 2 ( 0 )					      								    								  
82 COMPARE_OP 5 ( >= )					      								    								  
84 POP_JUMP_IF_FALSE 162				      								    								  
							      								    								  
12 86 LOAD_FAST 0 ( str )				      								    								  
88 LOAD_FAST 3 ( k )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 3 ( '1' )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
13 98 LOAD_GLOBAL 1 ( list )				      								    								  
100 LOAD_FAST 0 ( str )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 STORE_FAST 0 ( str )				      								    								  
							      								    								  
14 106 LOAD_CONST 5 ( '0' )				      								    								  
108 LOAD_FAST 0 ( str )					      								    								  
110 LOAD_FAST 3 ( k )					      								    								  
112 STORE_SUBSCR					      								    								  
							      								    								  
15 114 LOAD_CONST 6 ( '' )				      								    								  
116 LOAD_METHOD 2 ( join )				      								    								  
118 LOAD_FAST 0 ( str )					      								    								  
120 CALL_METHOD 1					      								    								  
122 STORE_FAST 0 ( str )				      								    								  
124 JUMP_FORWARD 26 ( to 152 )				      								    								  
							      								    								  
17 >> 126 LOAD_GLOBAL 1 ( list )			      								    								  
128 LOAD_FAST 0 ( str )					      								    								  
130 CALL_FUNCTION 1					      								    								  
132 STORE_FAST 0 ( str )				      								    								  
							      								    								  
18 134 LOAD_CONST 3 ( '1' )				      								    								  
136 LOAD_FAST 0 ( str )					      								    								  
138 LOAD_FAST 3 ( k )					      								    								  
140 STORE_SUBSCR					      								    								  
							      								    								  
19 142 LOAD_CONST 6 ( '' )				      								    								  
144 LOAD_METHOD 2 ( join )				      								    								  
146 LOAD_FAST 0 ( str )					      								    								  
148 CALL_METHOD 1					      								    								  
150 STORE_FAST 0 ( str )				      								    								  
							      								    								  
20 >> 152 LOAD_FAST 3 ( k )				      								    								  
154 LOAD_CONST 1 ( 1 )					      								    								  
156 INPLACE_SUBTRACT					      								    								  
158 STORE_FAST 3 ( k )					      								    								  
160 JUMP_ABSOLUTE 78					      								    								  
>> 162 POP_BLOCK					      								    								  
							      								    								  
21 >> 164 LOAD_FAST 0 ( str )				      								    								  
166 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		      MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		    MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS			  MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS
--							      --							    --								  --
Disassembly of <code object find at 0x7f33e26494b0, file "<di def find ( list1 , list2 ) :				    def find ( list1 , list2 ) :				  script_not_found : None
2 0 BUILD_LIST 0					      	  res = [ ]						    	res = [ ]						  
2 STORE_FAST 2 ( res )					      	  max_possible_sum = len ( list1 ) + len ( list2 ) - 2	    	max_possible_sum = len ( list1 ) + len ( list2 ) - 2	  
							      	  for sum in range ( max_possible_sum + 1 ) :		    	for sum in range ( max_possible_sum + 1 ) :		  
3 4 LOAD_GLOBAL 0 ( len )				      	      for i in range ( sum + 1 ) :			    	    for i in range ( max_possible_sum + 1 ) :		  
6 LOAD_FAST 0 ( list1 )					      		  if ( i < len ( list1 ) and ( sum - i ) < len ( li 		if i < len ( list1 ) and ( sum - i ) < len ( list 
8 CALL_FUNCTION 1					      		      res.append ( list1 [ i ] )		    		    res.append ( list1 [ i ] )			  
10 LOAD_GLOBAL 0 ( len )				      	      if ( len ( res ) > 0 ) :				    	    if len ( res ) > 0 :				  
12 LOAD_FAST 1 ( list2 )				      		  break						    		break						  
14 CALL_FUNCTION 1					      	  for i in range ( len ( res ) ) :			    	for i in range ( len ( res ) ) :			  
16 BINARY_ADD						      	      print ( res [ i ] , end = " " )			    	    print ( res [ i ] , end = '	    end' )		  
18 LOAD_CONST 1 ( 2 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 3 ( max_possible_sum )			      								    								  
							      								    								  
4 24 SETUP_LOOP 118 ( to 144 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_FAST 3 ( max_possible_sum )			      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 102 ( to 142 )				      								    								  
40 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
5 42 SETUP_LOOP 82 ( to 126 )				      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 4 ( sum )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 CALL_FUNCTION 1					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 66 ( to 124 )				      								    								  
58 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 60 LOAD_FAST 5 ( i )					      								    								  
62 LOAD_GLOBAL 0 ( len )				      								    								  
64 LOAD_FAST 0 ( list1 )				      								    								  
66 CALL_FUNCTION 1					      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 56					      								    								  
72 LOAD_FAST 4 ( sum )					      								    								  
74 LOAD_FAST 5 ( i )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 LOAD_GLOBAL 0 ( len )				      								    								  
80 LOAD_FAST 1 ( list2 )				      								    								  
82 CALL_FUNCTION 1					      								    								  
84 COMPARE_OP 0 ( < )					      								    								  
86 POP_JUMP_IF_FALSE 56					      								    								  
88 LOAD_FAST 0 ( list1 )				      								    								  
90 LOAD_FAST 5 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 1 ( list2 )				      								    								  
96 LOAD_FAST 4 ( sum )					      								    								  
98 LOAD_FAST 5 ( i )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 BINARY_SUBSCR					      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 56				      								    								  
							      								    								  
7 108 LOAD_FAST 2 ( res )				      								    								  
110 LOAD_METHOD 2 ( append )				      								    								  
112 LOAD_FAST 0 ( list1 )				      								    								  
114 LOAD_FAST 5 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_METHOD 1					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 56					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
8 >> 126 LOAD_GLOBAL 0 ( len )				      								    								  
128 LOAD_FAST 2 ( res )					      								    								  
130 CALL_FUNCTION 1					      								    								  
132 LOAD_CONST 3 ( 0 )					      								    								  
134 COMPARE_OP 4 ( > )					      								    								  
136 POP_JUMP_IF_FALSE 38				      								    								  
							      								    								  
9 138 BREAK_LOOP					      								    								  
140 JUMP_ABSOLUTE 38					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
10 >> 144 SETUP_LOOP 36 ( to 182 )			      								    								  
146 LOAD_GLOBAL 1 ( range )				      								    								  
148 LOAD_GLOBAL 0 ( len )				      								    								  
150 LOAD_FAST 2 ( res )					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 GET_ITER						      								    								  
>> 158 FOR_ITER 20 ( to 180 )				      								    								  
160 STORE_FAST 5 ( i )					      								    								  
							      								    								  
11 162 LOAD_GLOBAL 3 ( print )				      								    								  
164 LOAD_FAST 2 ( res )					      								    								  
166 LOAD_FAST 5 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_CONST 4 ( ' ' )				      								    								  
172 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
174 CALL_FUNCTION_KW 2					      								    								  
176 POP_TOP						      								    								  
178 JUMP_ABSOLUTE 158					      								    								  
>> 180 POP_BLOCK					      								    								  
>> 182 LOAD_CONST 0 ( None )				      								    								  
184 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	      GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	    GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	  GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE
--							      --							    --								  --
Disassembly of <code object printGrouped at 0x7f33e2653f60, f def printGrouped ( string ) :				    def printGrouped ( string ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( string )					    	n = len ( string )					  
2 LOAD_FAST 0 ( string )				      	  count = [ 0 ] * MAX_CHAR				    	count = [ 0 ] * MAX_CHAR				  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 1 ( n )					      	      count [ ord ( string [ i ] ) - ord ( "a" ) ] += 1	    	    count [ ord ( string [ i ] ) - ord ( 'a' ) ] += 1	  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_CONST 1 ( 0 )					      	      while count [ ord ( string [ i ] ) - ord ( "a" ) ] :  	    while count [ ord ( string [ i ] ) - ord ( 'a' ) ] :  
10 BUILD_LIST 1						      		  print ( string [ i ] , end = "" )		    		print ( string [ i ] , end = '' )		  
12 LOAD_GLOBAL 1 ( MAX_CHAR )				      		  count [ ord ( string [ i ] ) - ord ( "a" ) ] -= 1 		count += ord ( string [ i ] ) - ord ( 'a' ) ] -=  
14 BINARY_MULTIPLY					      	      count [ ord ( string [ i ] ) - ord ( "a" ) ] = 0	    	count += ord ( string [ i ] ) - ord ( 'a' )		  
16 STORE_FAST 2 ( count )				      								    								  
							      								    								  
4 18 SETUP_LOOP 48 ( to 68 )				      								    								  
20 LOAD_GLOBAL 2 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( count )				      								    								  
34 LOAD_GLOBAL 3 ( ord )				      								    								  
36 LOAD_FAST 0 ( string )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_GLOBAL 3 ( ord )				      								    								  
46 LOAD_CONST 2 ( 'a' )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 DUP_TOP_TWO						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 ROT_THREE						      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 SETUP_LOOP 118 ( to 188 )			      								    								  
70 LOAD_GLOBAL 2 ( range )				      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 106 ( to 186 )				      								    								  
80 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 82 SETUP_LOOP 76 ( to 160 )				      								    								  
>> 84 LOAD_FAST 2 ( count )				      								    								  
86 LOAD_GLOBAL 3 ( ord )				      								    								  
88 LOAD_FAST 0 ( string )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 LOAD_GLOBAL 3 ( ord )				      								    								  
98 LOAD_CONST 2 ( 'a' )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 BINARY_SUBSCR					      								    								  
106 POP_JUMP_IF_FALSE 158				      								    								  
							      								    								  
8 108 LOAD_GLOBAL 4 ( print )				      								    								  
110 LOAD_FAST 0 ( string )				      								    								  
112 LOAD_FAST 3 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 4 ( '' )					      								    								  
118 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 POP_TOP						      								    								  
							      								    								  
9 124 LOAD_FAST 2 ( count )				      								    								  
126 LOAD_GLOBAL 3 ( ord )				      								    								  
128 LOAD_FAST 0 ( string )				      								    								  
130 LOAD_FAST 3 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 LOAD_GLOBAL 3 ( ord )				      								    								  
138 LOAD_CONST 2 ( 'a' )				      								    								  
140 CALL_FUNCTION 1					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 DUP_TOP_TWO						      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_CONST 3 ( 1 )					      								    								  
150 INPLACE_SUBTRACT					      								    								  
152 ROT_THREE						      								    								  
154 STORE_SUBSCR					      								    								  
156 JUMP_ABSOLUTE 84					      								    								  
>> 158 POP_BLOCK					      								    								  
							      								    								  
10 >> 160 LOAD_CONST 1 ( 0 )				      								    								  
162 LOAD_FAST 2 ( count )				      								    								  
164 LOAD_GLOBAL 3 ( ord )				      								    								  
166 LOAD_FAST 0 ( string )				      								    								  
168 LOAD_FAST 3 ( i )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 CALL_FUNCTION 1					      								    								  
174 LOAD_GLOBAL 3 ( ord )				      								    								  
176 LOAD_CONST 2 ( 'a' )				      								    								  
178 CALL_FUNCTION 1					      								    								  
180 BINARY_SUBTRACT					      								    								  
182 STORE_SUBSCR					      								    								  
184 JUMP_ABSOLUTE 78					      								    								  
>> 186 POP_BLOCK					      								    								  
>> 188 LOAD_CONST 0 ( None )				      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1	      MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		    MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		  MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1
--							      --							    --								  --
Disassembly of <code object <<unk>> stSubWithSum at 0x7f33e26 def <<unk>> stSubWithSum ( arr , n , x ) :		    def <unk> stSubWithSum ( arr , n , x ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  curr_sum = 0 ;					    	curr_sum = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( curr_sum )				      	  min_len = n + 1 ;					    	min_len = n + 1						  _sa.valid/MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVE
							      	  start = 0 ;						    	start = 0						  N_VALUE_1.py", line 37     def f_filled stSubWithS
3 4 LOAD_FAST 1 ( n )					      	  end = 0 ;						    	end = 0							  um ( arr , n , x ) :				   ^
6 LOAD_CONST 2 ( 1 )					      	  while ( end < n ) :					    	while end < n :						   SyntaxError: invalid syntax
8 BINARY_ADD						      	      while ( curr_sum <= x and end < n ) :		    	    while curr_sum <= x and end < n :			  
10 STORE_FAST 4 ( min_len )				      		  if ( curr_sum <= 0 and x > 0 ) :		    		if curr_sum <= 0 and x > 0 :			  
							      		      start = end ;				    		    start = end					  
4 12 LOAD_CONST 1 ( 0 )					      		      curr_sum = 0 ;				    		    curr_sum = 0				  
14 STORE_FAST 5 ( start )				      		  curr_sum += arr [ end ] ;			    		curr_sum += arr [ end ]				  
							      		  end += 1 ;					    		end += 1					  
5 16 LOAD_CONST 1 ( 0 )					      	      while ( curr_sum > x and start < n ) :		    	while curr_sum > x and start < n :			  
18 STORE_FAST 6 ( end )					      		  if ( end - start < min_len ) :		    	    if end - start < min_len :				  
							      		      min_len = end - start ;			    		min_len = end - start				  
6 20 SETUP_LOOP 140 ( to 162 )				      		  curr_sum -= arr [ start ] ;			    	    curr_sum += arr [ start ]				  
>> 22 LOAD_FAST 6 ( end )				      		  start += 1 ;					    	    start += 1						  
24 LOAD_FAST 1 ( n )					      	  return min_len ;					    return start						  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
7 30 SETUP_LOOP 64 ( to 96 )				      								    								  
>> 32 LOAD_FAST 3 ( curr_sum )				      								    								  
34 LOAD_FAST 2 ( x )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 94					      								    								  
40 LOAD_FAST 6 ( end )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
8 48 LOAD_FAST 3 ( curr_sum )				      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 1 ( <= )					      								    								  
54 POP_JUMP_IF_FALSE 72					      								    								  
56 LOAD_FAST 2 ( x )					      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 COMPARE_OP 4 ( > )					      								    								  
62 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
9 64 LOAD_FAST 6 ( end )				      								    								  
66 STORE_FAST 5 ( start )				      								    								  
							      								    								  
10 68 LOAD_CONST 1 ( 0 )				      								    								  
70 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
11 >> 72 LOAD_FAST 3 ( curr_sum )			      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 6 ( end )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
12 84 LOAD_FAST 6 ( end )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 6 ( end )					      								    								  
92 JUMP_ABSOLUTE 32					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
13 >> 96 SETUP_LOOP 60 ( to 158 )			      								    								  
>> 98 LOAD_FAST 3 ( curr_sum )				      								    								  
100 LOAD_FAST 2 ( x )					      								    								  
102 COMPARE_OP 4 ( > )					      								    								  
104 POP_JUMP_IF_FALSE 156				      								    								  
106 LOAD_FAST 5 ( start )				      								    								  
108 LOAD_FAST 1 ( n )					      								    								  
110 COMPARE_OP 0 ( < )					      								    								  
112 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
14 114 LOAD_FAST 6 ( end )				      								    								  
116 LOAD_FAST 5 ( start )				      								    								  
118 BINARY_SUBTRACT					      								    								  
120 LOAD_FAST 4 ( min_len )				      								    								  
122 COMPARE_OP 0 ( < )					      								    								  
124 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
15 126 LOAD_FAST 6 ( end )				      								    								  
128 LOAD_FAST 5 ( start )				      								    								  
130 BINARY_SUBTRACT					      								    								  
132 STORE_FAST 4 ( min_len )				      								    								  
							      								    								  
16 >> 134 LOAD_FAST 3 ( curr_sum )			      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 5 ( start )				      								    								  
140 BINARY_SUBSCR					      								    								  
142 INPLACE_SUBTRACT					      								    								  
144 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
17 146 LOAD_FAST 5 ( start )				      								    								  
148 LOAD_CONST 2 ( 1 )					      								    								  
150 INPLACE_ADD						      								    								  
152 STORE_FAST 5 ( start )				      								    								  
154 JUMP_ABSOLUTE 98					      								    								  
>> 156 POP_BLOCK					      								    								  
>> 158 JUMP_ABSOLUTE 22					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
18 >> 162 LOAD_FAST 4 ( min_len )			      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO		      PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO		    PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO		  PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO
--							      --							    --								  --
Disassembly of <code object pageFaults at 0x7f33e2649a50, fil def pageFaults ( pages , n , capacity ) :			    def pageFaults ( pages , n , capacity = ( ) ) :		  success : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  indexes = Queue ( )					    	indexes = Queue ( )					  
4 STORE_FAST 3 ( s )					      	  page_faults = 0					    	page_faults = 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 6 LOAD_GLOBAL 1 ( Queue )				      	      if ( len ( s ) < capacity ) :			    	    if len ( s ) < capacity :				  
8 CALL_FUNCTION 0					      		  if ( pages [ i ] not in s ) :			    		if pages [ i ] not in s :			  
10 STORE_FAST 4 ( indexes )				      		      s.add ( pages [ i ] )			    		    s.add ( pages [ i ] )			  
							      		      page_faults += 1				    		    page_faults += 1				  
4 12 LOAD_CONST 1 ( 0 )					      		      indexes.put ( pages [ i ] )		    		    indexes.put ( pages [ i ] )			  
14 STORE_FAST 5 ( page_faults )				      	      else :						    	    else :						  
							      		  if ( pages [ i ] not in s ) :			    		if pages [ i ] not in s :			  
5 16 SETUP_LOOP 154 ( to 172 )				      		      val = indexes.queue [ 0 ]			    		    val = indexes.queue [ 0 ]			  
18 LOAD_GLOBAL 2 ( range )				      		      indexes.get ( )				    		    indexes.get ( val )				  
20 LOAD_FAST 1 ( n )					      		      s.remove ( val )				    		    s.add ( pages [ i ] )			  
22 CALL_FUNCTION 1					      		      s.add ( pages [ i ] )			    		    page_faults += 1				  
24 GET_ITER						      		      indexes.put ( pages [ i ] )		    	return page_faults					  
>> 26 FOR_ITER 142 ( to 170 )				      		      page_faults += 1				    								  
28 STORE_FAST 6 ( i )					      	  return page_faults					    								  
							      								    								  
6 30 LOAD_GLOBAL 3 ( len )				      								    								  
32 LOAD_FAST 3 ( s )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 LOAD_FAST 2 ( capacity )				      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( pages )				      								    								  
44 LOAD_FAST 6 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 3 ( s )					      								    								  
50 COMPARE_OP 7 ( not in )				      								    								  
52 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
8 54 LOAD_FAST 3 ( s )					      								    								  
56 LOAD_METHOD 4 ( add )				      								    								  
58 LOAD_FAST 0 ( pages )				      								    								  
60 LOAD_FAST 6 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 CALL_METHOD 1					      								    								  
66 POP_TOP						      								    								  
							      								    								  
9 68 LOAD_FAST 5 ( page_faults )			      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 5 ( page_faults )				      								    								  
							      								    								  
10 76 LOAD_FAST 4 ( indexes )				      								    								  
78 LOAD_METHOD 5 ( put )				      								    								  
80 LOAD_FAST 0 ( pages )				      								    								  
82 LOAD_FAST 6 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 CALL_METHOD 1					      								    								  
88 POP_TOP						      								    								  
90 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
12 >> 92 LOAD_FAST 0 ( pages )				      								    								  
94 LOAD_FAST 6 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 3 ( s )					      								    								  
100 COMPARE_OP 7 ( not in )				      								    								  
102 POP_JUMP_IF_FALSE 26				      								    								  
							      								    								  
13 104 LOAD_FAST 4 ( indexes )				      								    								  
106 LOAD_ATTR 6 ( queue )				      								    								  
108 LOAD_CONST 1 ( 0 )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 STORE_FAST 7 ( val )				      								    								  
							      								    								  
14 114 LOAD_FAST 4 ( indexes )				      								    								  
116 LOAD_METHOD 7 ( get )				      								    								  
118 CALL_METHOD 0					      								    								  
120 POP_TOP						      								    								  
							      								    								  
15 122 LOAD_FAST 3 ( s )				      								    								  
124 LOAD_METHOD 8 ( remove )				      								    								  
126 LOAD_FAST 7 ( val )					      								    								  
128 CALL_METHOD 1					      								    								  
130 POP_TOP						      								    								  
							      								    								  
16 132 LOAD_FAST 3 ( s )				      								    								  
134 LOAD_METHOD 4 ( add )				      								    								  
136 LOAD_FAST 0 ( pages )				      								    								  
138 LOAD_FAST 6 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 CALL_METHOD 1					      								    								  
144 POP_TOP						      								    								  
							      								    								  
17 146 LOAD_FAST 4 ( indexes )				      								    								  
148 LOAD_METHOD 5 ( put )				      								    								  
150 LOAD_FAST 0 ( pages )				      								    								  
152 LOAD_FAST 6 ( i )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 CALL_METHOD 1					      								    								  
158 POP_TOP						      								    								  
							      								    								  
18 160 LOAD_FAST 5 ( page_faults )			      								    								  
162 LOAD_CONST 2 ( 1 )					      								    								  
164 INPLACE_ADD						      								    								  
166 STORE_FAST 5 ( page_faults )			      								    								  
>> 168 JUMP_ABSOLUTE 26					      								    								  
>> 170 POP_BLOCK					      								    								  
							      								    								  
19 >> 172 LOAD_FAST 5 ( page_faults )			      								    								  
174 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ISBN					      PROGRAM_CHECK_ISBN					    PROGRAM_CHECK_ISBN						  PROGRAM_CHECK_ISBN
--							      --							    --								  --
Disassembly of <code object isValidISBN at 0x7f33e2644930, fi def isValidISBN ( isbn ) :				    def isValidISBN ( isbn ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  if len ( isbn ) != 10 :				    	if len ( isbn ) != 10 :					  
2 LOAD_FAST 0 ( isbn )					      	      return False					    	    return False					  
4 CALL_FUNCTION 1					      	  _sum = 0						    	_sum = 0						  
6 LOAD_CONST 1 ( 10 )					      	  for i in range ( 9 ) :				    	for i in range ( 9 ) :					  
8 COMPARE_OP 3 ( != )					      	      if 0 <= int ( isbn [ i ] ) <= 9 :			    	    if 0 <= int ( isbn [ i ] ) <= 9 :			  
10 POP_JUMP_IF_FALSE 16					      		  _sum += int ( isbn [ i ] ) * ( 10 - i )	    		_sum += int ( isbn [ i ] ) * 10 - i		  
							      	      else :						    	    else :						  
3 12 LOAD_CONST 2 ( False )				      		  return False					    		return False					  
14 RETURN_VALUE						      	  if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) 	if isbn [ 9 ] != "X" and 0 <= int ( isbn [ 9 ] ) <= 9 :	  
							      	      return False					    	    return False					  
4 >> 16 LOAD_CONST 3 ( 0 )				      	  _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )   	if _sum [ isbn [ 9 ] == "X" : isbn [ 10 ] += _sum ( isbn  
18 STORE_FAST 1 ( _sum )				      	  return ( _sum % 11 == 0 )				    	    return False					  
							      								    	_sum += _sum [ isbn [ 10 ] ]				  
5 20 SETUP_LOOP 78 ( to 100 )				      								    	return False						  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_CONST 4 ( 9 )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 66 ( to 98 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 34 LOAD_CONST 3 ( 0 )					      								    								  
36 LOAD_GLOBAL 2 ( int )				      								    								  
38 LOAD_FAST 0 ( isbn )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 DUP_TOP						      								    								  
48 ROT_THREE						      								    								  
50 COMPARE_OP 1 ( <= )					      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
54 LOAD_CONST 4 ( 9 )					      								    								  
56 COMPARE_OP 1 ( <= )					      								    								  
58 POP_JUMP_IF_FALSE 92					      								    								  
60 JUMP_FORWARD 4 ( to 66 )				      								    								  
>> 62 POP_TOP						      								    								  
64 JUMP_FORWARD 26 ( to 92 )				      								    								  
							      								    								  
7 >> 66 LOAD_FAST 1 ( _sum )				      								    								  
68 LOAD_GLOBAL 2 ( int )				      								    								  
70 LOAD_FAST 0 ( isbn )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_CONST 1 ( 10 )					      								    								  
80 LOAD_FAST 2 ( i )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 1 ( _sum )				      								    								  
90 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
9 >> 92 LOAD_CONST 2 ( False )				      								    								  
94 RETURN_VALUE						      								    								  
96 JUMP_ABSOLUTE 30					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
10 >> 100 LOAD_FAST 0 ( isbn )				      								    								  
102 LOAD_CONST 4 ( 9 )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_CONST 5 ( 'X' )				      								    								  
108 COMPARE_OP 3 ( != )					      								    								  
110 POP_JUMP_IF_FALSE 148				      								    								  
112 LOAD_CONST 3 ( 0 )					      								    								  
114 LOAD_GLOBAL 2 ( int )				      								    								  
116 LOAD_FAST 0 ( isbn )				      								    								  
118 LOAD_CONST 4 ( 9 )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 CALL_FUNCTION 1					      								    								  
124 DUP_TOP						      								    								  
126 ROT_THREE						      								    								  
128 COMPARE_OP 1 ( <= )					      								    								  
130 POP_JUMP_IF_FALSE 140				      								    								  
132 LOAD_CONST 4 ( 9 )					      								    								  
134 COMPARE_OP 1 ( <= )					      								    								  
136 POP_JUMP_IF_FALSE 148				      								    								  
138 JUMP_FORWARD 4 ( to 144 )				      								    								  
>> 140 POP_TOP						      								    								  
142 JUMP_FORWARD 4 ( to 148 )				      								    								  
							      								    								  
11 >> 144 LOAD_CONST 2 ( False )			      								    								  
146 RETURN_VALUE					      								    								  
							      								    								  
12 >> 148 LOAD_FAST 1 ( _sum )				      								    								  
150 LOAD_FAST 0 ( isbn )				      								    								  
152 LOAD_CONST 4 ( 9 )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_CONST 5 ( 'X' )				      								    								  
158 COMPARE_OP 2 ( == )					      								    								  
160 POP_JUMP_IF_FALSE 166				      								    								  
162 LOAD_CONST 1 ( 10 )					      								    								  
164 JUMP_FORWARD 10 ( to 176 )				      								    								  
>> 166 LOAD_GLOBAL 2 ( int )				      								    								  
168 LOAD_FAST 0 ( isbn )				      								    								  
170 LOAD_CONST 4 ( 9 )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 CALL_FUNCTION 1					      								    								  
>> 176 INPLACE_ADD					      								    								  
178 STORE_FAST 1 ( _sum )				      								    								  
							      								    								  
13 180 LOAD_FAST 1 ( _sum )				      								    								  
182 LOAD_CONST 6 ( 11 )					      								    								  
184 BINARY_MODULO					      								    								  
186 LOAD_CONST 3 ( 0 )					      								    								  
188 COMPARE_OP 2 ( == )					      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS		      LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS		    LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS		  LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS
--							      --							    --								  --
Disassembly of <code object subsetGraph at 0x7f33e2644930, fi def subsetGraph ( C ) :					    def subsetGraph ( C ) :					  script_not_found : None
3 0 LOAD_GLOBAL 0 ( set )				      	  global N						    	global vertices						  
2 CALL_FUNCTION 0					      	  vertices = set ( )					    	vertices = set ( )					  
4 STORE_FAST 1 ( vertices )				      	  for i in range ( N ) :				    	for i in range ( N ) :					  
							      	      vertices.add ( i )				    	    vertices.add ( i )					  
4 6 SETUP_LOOP 26 ( to 34 )				      	  while ( len ( vertices ) != 0 ) :			    	while len ( vertices ) != 0 :				  
8 LOAD_GLOBAL 1 ( range )				      	      if ( len ( vertices ) == 1 ) :			    	    if len ( vertices ) == 1 :				  
10 LOAD_GLOBAL 2 ( N )					      		  return 1					    		return 1					  
12 CALL_FUNCTION 1					      	      someone_removed = False				    	    someone_removed = False				  
14 GET_ITER						      	      for x in vertices :				    	    for x in vertices :					  
>> 16 FOR_ITER 14 ( to 32 )				      		  values = set ( )				    		values = set ( )				  
18 STORE_FAST 2 ( i )					      		  for y in vertices :				    		for y in vertices :				  
							      		      if ( y != x ) :				    		    if y != x :					  
5 20 LOAD_FAST 1 ( vertices )				      			  values.add ( C [ x ] [ y ] )		    			values.add ( C [ x ] [ y ] )		  
22 LOAD_METHOD 3 ( add )				      		  if ( len ( values ) == 1 ) :			    	    if len ( values ) == 1 :				  
24 LOAD_FAST 2 ( i )					      		      vertices.remove ( x )			    		vertices.remove ( x )				  
26 CALL_METHOD 1					      		      someone_removed = True			    		someone_removed = True				  
28 POP_TOP						      		      break					    		break						  
30 JUMP_ABSOLUTE 16					      	      if ( not someone_removed ) :			    	if not someone_removed :				  
>> 32 POP_BLOCK						      		  break						    	    break						  
							      	  return len ( vertices )				    return len ( vertices )					  
6 >> 34 SETUP_LOOP 130 ( to 166 )			      								    								  
>> 36 LOAD_GLOBAL 4 ( len )				      								    								  
38 LOAD_FAST 1 ( vertices )				      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 3 ( != )					      								    								  
46 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
7 48 LOAD_GLOBAL 4 ( len )				      								    								  
50 LOAD_FAST 1 ( vertices )				      								    								  
52 CALL_FUNCTION 1					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
8 60 LOAD_CONST 2 ( 1 )					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
9 >> 64 LOAD_CONST 3 ( False )				      								    								  
66 STORE_FAST 3 ( someone_removed )			      								    								  
							      								    								  
10 68 SETUP_LOOP 86 ( to 156 )				      								    								  
70 LOAD_FAST 1 ( vertices )				      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 78 ( to 154 )				      								    								  
76 STORE_FAST 4 ( x )					      								    								  
							      								    								  
11 78 LOAD_GLOBAL 0 ( set )				      								    								  
80 CALL_FUNCTION 0					      								    								  
82 STORE_FAST 5 ( values )				      								    								  
							      								    								  
12 84 SETUP_LOOP 38 ( to 124 )				      								    								  
86 LOAD_FAST 1 ( vertices )				      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 30 ( to 122 )				      								    								  
92 STORE_FAST 6 ( y )					      								    								  
							      								    								  
13 94 LOAD_FAST 6 ( y )					      								    								  
96 LOAD_FAST 4 ( x )					      								    								  
98 COMPARE_OP 3 ( != )					      								    								  
100 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
14 102 LOAD_FAST 5 ( values )				      								    								  
104 LOAD_METHOD 3 ( add )				      								    								  
106 LOAD_FAST 0 ( C )					      								    								  
108 LOAD_FAST 4 ( x )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 6 ( y )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 CALL_METHOD 1					      								    								  
118 POP_TOP						      								    								  
120 JUMP_ABSOLUTE 90					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
15 >> 124 LOAD_GLOBAL 4 ( len )				      								    								  
126 LOAD_FAST 5 ( values )				      								    								  
128 CALL_FUNCTION 1					      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 COMPARE_OP 2 ( == )					      								    								  
134 POP_JUMP_IF_FALSE 74				      								    								  
							      								    								  
16 136 LOAD_FAST 1 ( vertices )				      								    								  
138 LOAD_METHOD 5 ( remove )				      								    								  
140 LOAD_FAST 4 ( x )					      								    								  
142 CALL_METHOD 1					      								    								  
144 POP_TOP						      								    								  
							      								    								  
17 146 LOAD_CONST 4 ( True )				      								    								  
148 STORE_FAST 3 ( someone_removed )			      								    								  
							      								    								  
18 150 BREAK_LOOP					      								    								  
152 JUMP_ABSOLUTE 74					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
19 >> 156 LOAD_FAST 3 ( someone_removed )		      								    								  
158 POP_JUMP_IF_TRUE 36					      								    								  
							      								    								  
20 160 BREAK_LOOP					      								    								  
162 JUMP_ABSOLUTE 36					      								    								  
>> 164 POP_BLOCK					      								    								  
							      								    								  
21 >> 166 LOAD_GLOBAL 4 ( len )				      								    								  
168 LOAD_FAST 1 ( vertices )				      								    								  
170 CALL_FUNCTION 1					      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		      MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		    MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		  MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX
--							      --							    --								  --
Disassembly of <code object maxRowDiff at 0x7f33e2644f60, fil def maxRowDiff ( mat , m , n ) :				    def maxRowDiff ( mat , m , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  rowSum = [ 0 ] * m					    	rowSum = [ 0 ] * m					  
2 BUILD_LIST 1						      	  for i in range ( 0 , m ) :				    	for i in range ( 0 , m ) :				  
4 LOAD_FAST 1 ( m )					      	      sum = 0						    	    sum = 0						  
6 BINARY_MULTIPLY					      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
8 STORE_FAST 3 ( rowSum )				      		  sum += mat [ i ] [ j ]			    		sum += mat [ i ] [ j ]				  
							      	      rowSum [ i ] = sum				    	    rowSum [ i ] = sum					  
3 10 SETUP_LOOP 66 ( to 78 )				      	  max_diff = rowSum [ 1 ] - rowSum [ 0 ]		    	max_diff = rowSum [ 1 ] - rowSum [ 0 ]			  
12 LOAD_GLOBAL 0 ( range )				      	  min_element = rowSum [ 0 ]				    	min_element = rowSum [ 0 ]				  
14 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , m ) :				    	for i in range ( 1 , m ) :				  
16 LOAD_FAST 1 ( m )					      	      if ( rowSum [ i ] - min_element > max_diff ) :	    	    if rowSum [ i ] - min_element > max_diff :		  
18 CALL_FUNCTION 2					      		  max_diff = rowSum [ i ] - min_element		    		max_diff = rowSum [ i ] - min_element		  
20 GET_ITER						      	      if ( rowSum [ i ] < min_element ) :		    	    if rowSum [ i ] < min_element :			  
>> 22 FOR_ITER 52 ( to 76 )				      		  min_element = rowSum [ i ]			    		min_element = rowSum [ i ]			  
24 STORE_FAST 4 ( i )					      	  return max_diff					    	return max_diff						  
							      								    								  
4 26 LOAD_CONST 1 ( 0 )					      								    								  
28 STORE_FAST 5 ( sum )					      								    								  
							      								    								  
5 30 SETUP_LOOP 34 ( to 66 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 LOAD_FAST 2 ( n )					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 20 ( to 64 )				      								    								  
44 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 46 LOAD_FAST 5 ( sum )				      								    								  
48 LOAD_FAST 0 ( mat )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 6 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 5 ( sum )					      								    								  
62 JUMP_ABSOLUTE 42					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
7 >> 66 LOAD_FAST 5 ( sum )				      								    								  
68 LOAD_FAST 3 ( rowSum )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 22					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 3 ( rowSum )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 3 ( rowSum )				      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 STORE_FAST 7 ( max_diff )				      								    								  
							      								    								  
9 94 LOAD_FAST 3 ( rowSum )				      								    								  
96 LOAD_CONST 1 ( 0 )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 STORE_FAST 8 ( min_element )			      								    								  
							      								    								  
10 102 SETUP_LOOP 66 ( to 170 )				      								    								  
104 LOAD_GLOBAL 0 ( range )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 LOAD_FAST 1 ( m )					      								    								  
110 CALL_FUNCTION 2					      								    								  
112 GET_ITER						      								    								  
>> 114 FOR_ITER 52 ( to 168 )				      								    								  
116 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 118 LOAD_FAST 3 ( rowSum )				      								    								  
120 LOAD_FAST 4 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 8 ( min_element )				      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_FAST 7 ( max_diff )				      								    								  
130 COMPARE_OP 4 ( > )					      								    								  
132 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
12 134 LOAD_FAST 3 ( rowSum )				      								    								  
136 LOAD_FAST 4 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_FAST 8 ( min_element )				      								    								  
142 BINARY_SUBTRACT					      								    								  
144 STORE_FAST 7 ( max_diff )				      								    								  
							      								    								  
13 >> 146 LOAD_FAST 3 ( rowSum )			      								    								  
148 LOAD_FAST 4 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_FAST 8 ( min_element )				      								    								  
154 COMPARE_OP 0 ( < )					      								    								  
156 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
14 158 LOAD_FAST 3 ( rowSum )				      								    								  
160 LOAD_FAST 4 ( i )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 STORE_FAST 8 ( min_element )			      								    								  
166 JUMP_ABSOLUTE 114					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
15 >> 170 LOAD_FAST 7 ( max_diff )			      								    								  
172 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_FACTORS_BIG_NUMBER				      PRIME_FACTORS_BIG_NUMBER					    PRIME_FACTORS_BIG_NUMBER					  PRIME_FACTORS_BIG_NUMBER
--							      --							    --								  --
Disassembly of <code object factorize at 0x7f33e2653f60, file def factorize ( n ) :					    def factorize ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  while ( ( n % 2 > 0 ) == False ) :			    	while n % 2 == 0 :					  
							      	      n >>= 1 ;						    	    n += 1						  
3 4 SETUP_LOOP 36 ( to 42 )				      	      count += 1 ;					    	    count += 1						  
>> 6 LOAD_FAST 0 ( n )					      	  if ( count > 0 ) :					    	if count > 0 :						  
8 LOAD_CONST 2 ( 2 )					      	      print ( 2 , count ) ;				    	    print ( 2 , count )					  
10 BINARY_MODULO					      	  for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 ) :	    	for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 ) :	  
12 LOAD_CONST 1 ( 0 )					      	      count = 0 ;					    	    count = 0						  
14 COMPARE_OP 4 ( > )					      	      while ( n % i == 0 ) :				    	    while n % i == 0 :					  
16 LOAD_CONST 3 ( False )				      		  count += 1 ;					    		count += 1					  
18 COMPARE_OP 2 ( == )					      		  n = int ( n / i ) ;				    		n = int ( n / i )				  
20 POP_JUMP_IF_FALSE 40					      	      if ( count > 0 ) :				    	    if count > 0 :					  
							      		  print ( i , count ) ;				    		print ( i , count )				  
4 22 LOAD_FAST 0 ( n )					      	      i += 2 ;						    		i = 2						  
24 LOAD_CONST 4 ( 1 )					      	  if ( n > 2 ) :					    	    i += 2						  
26 INPLACE_RSHIFT					      	      print ( n , 1 ) ;					    	if n > 0 :						  
28 STORE_FAST 0 ( n )					      								    	    print ( n )						  
							      								    	print ( n )						  
5 30 LOAD_FAST 1 ( count )				      								    								  
32 LOAD_CONST 4 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 1 ( count )				      								    								  
38 JUMP_ABSOLUTE 6					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
6 >> 42 LOAD_FAST 1 ( count )				      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 50 LOAD_GLOBAL 0 ( print )				      								    								  
52 LOAD_CONST 2 ( 2 )					      								    								  
54 LOAD_FAST 1 ( count )				      								    								  
56 CALL_FUNCTION 2					      								    								  
58 POP_TOP						      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 100 ( to 162 )			      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_CONST 5 ( 3 )					      								    								  
66 LOAD_GLOBAL 2 ( int )				      								    								  
68 LOAD_GLOBAL 3 ( math )				      								    								  
70 LOAD_METHOD 4 ( sqrt )				      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 CALL_METHOD 1					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_CONST 4 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 CALL_FUNCTION 2					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 72 ( to 160 )				      								    								  
88 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 90 LOAD_CONST 1 ( 0 )					      								    								  
92 STORE_FAST 1 ( count )				      								    								  
							      								    								  
10 94 SETUP_LOOP 36 ( to 132 )				      								    								  
>> 96 LOAD_FAST 0 ( n )					      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 BINARY_MODULO					      								    								  
102 LOAD_CONST 1 ( 0 )					      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
11 108 LOAD_FAST 1 ( count )				      								    								  
110 LOAD_CONST 4 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 1 ( count )				      								    								  
							      								    								  
12 116 LOAD_GLOBAL 2 ( int )				      								    								  
118 LOAD_FAST 0 ( n )					      								    								  
120 LOAD_FAST 2 ( i )					      								    								  
122 BINARY_TRUE_DIVIDE					      								    								  
124 CALL_FUNCTION 1					      								    								  
126 STORE_FAST 0 ( n )					      								    								  
128 JUMP_ABSOLUTE 96					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
13 >> 132 LOAD_FAST 1 ( count )				      								    								  
134 LOAD_CONST 1 ( 0 )					      								    								  
136 COMPARE_OP 4 ( > )					      								    								  
138 POP_JUMP_IF_FALSE 150				      								    								  
							      								    								  
14 140 LOAD_GLOBAL 0 ( print )				      								    								  
142 LOAD_FAST 2 ( i )					      								    								  
144 LOAD_FAST 1 ( count )				      								    								  
146 CALL_FUNCTION 2					      								    								  
148 POP_TOP						      								    								  
							      								    								  
15 >> 150 LOAD_FAST 2 ( i )				      								    								  
152 LOAD_CONST 2 ( 2 )					      								    								  
154 INPLACE_ADD						      								    								  
156 STORE_FAST 2 ( i )					      								    								  
158 JUMP_ABSOLUTE 86					      								    								  
>> 160 POP_BLOCK					      								    								  
							      								    								  
16 >> 162 LOAD_FAST 0 ( n )				      								    								  
164 LOAD_CONST 2 ( 2 )					      								    								  
166 COMPARE_OP 4 ( > )					      								    								  
168 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
17 170 LOAD_GLOBAL 0 ( print )				      								    								  
172 LOAD_FAST 0 ( n )					      								    								  
174 LOAD_CONST 4 ( 1 )					      								    								  
176 CALL_FUNCTION 2					      								    								  
178 POP_TOP						      								    								  
>> 180 LOAD_CONST 0 ( None )				      								    								  
182 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY_1				      CEILING_IN_A_SORTED_ARRAY_1				    CEILING_IN_A_SORTED_ARRAY_1					  CEILING_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object ceilSearch at 0x7f33e2653ed0, fil def ceilSearch ( arr , low , high , x ) :			    def ceilSearch ( arr , low , high , x , y ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 3 ( x )					      	  if x <= arr [ low ] :					    	if x <= arr [ low ] :					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( arr )					      	      return low					    	    return low						  _sa.valid/CEILING_IN_A_SORTED_ARRAY_1.py", line 53
4 LOAD_FAST 1 ( low )					      	  if x > arr [ high ] :					    	if x > arr [ high ] :					       else :	     ^ SyntaxError: invalid syntax
6 BINARY_SUBSCR						      	      return - 1					    	    return - 1						  
8 COMPARE_OP 1 ( <= )					      	  mid = ( low + high ) / 2 ;				    	mid = ( low + high ) / 2				  
10 POP_JUMP_IF_FALSE 16					      	  if arr [ mid ] == x :					    	if arr [ mid ] == x :					  
							      	      return mid					    	    return mid						  
3 12 LOAD_FAST 1 ( low )				      	  elif arr [ mid ] < x :				    	elif arr [ mid ] < x :					  
14 RETURN_VALUE						      	      if mid + 1 <= high and x <= arr [ mid + 1 ] :	    	    if mid + 1 <= high and x <= arr [ mid + 1 ] :	  
							      		  return mid + 1				    		return mid + 1					  
4 >> 16 LOAD_FAST 3 ( x )				      	      else :						    	    else :						  
18 LOAD_FAST 0 ( arr )					      		  return ceilSearch ( arr , mid + 1 , high , x )    		return ceilSearch ( arr , mid + 1 , high , x )	  
20 LOAD_FAST 2 ( high )					      	  else :						    	else :							  
22 BINARY_SUBSCR					      	      if mid - 1 >= low and x > arr [ mid - 1 ] :	    	    if mid - 1 >= low and x > arr [ mid - 1 ] :		  
24 COMPARE_OP 4 ( > )					      		  return mid					    		return mid					  
26 POP_JUMP_IF_FALSE 32					      	      else :						    	else :							  
							      		  return ceilSearch ( arr , low , mid - 1 , x )	    	    return ceilSearch ( arr , mid - 1 , high , x )	  
5 28 LOAD_CONST 1 ( - 1 )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 1 ( low )				      								    								  
34 LOAD_FAST 2 ( high )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_CONST 2 ( 2 )					      								    								  
40 BINARY_TRUE_DIVIDE					      								    								  
42 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( mid )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( x )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_FAST 4 ( mid )				      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 4 ( mid )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 3 ( x )					      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
10 72 LOAD_FAST 4 ( mid )				      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 2 ( high )					      								    								  
80 COMPARE_OP 1 ( <= )					      								    								  
82 POP_JUMP_IF_FALSE 108				      								    								  
84 LOAD_FAST 3 ( x )					      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( mid )					      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 BINARY_SUBSCR					      								    								  
96 COMPARE_OP 1 ( <= )					      								    								  
98 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
11 100 LOAD_FAST 4 ( mid )				      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 RETURN_VALUE					      								    								  
							      								    								  
13 >> 108 LOAD_GLOBAL 0 ( ceilSearch )			      								    								  
110 LOAD_FAST 0 ( arr )					      								    								  
112 LOAD_FAST 4 ( mid )					      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_FAST 2 ( high )				      								    								  
120 LOAD_FAST 3 ( x )					      								    								  
122 CALL_FUNCTION 4					      								    								  
124 RETURN_VALUE					      								    								  
126 JUMP_FORWARD 50 ( to 178 )				      								    								  
							      								    								  
15 >> 128 LOAD_FAST 4 ( mid )				      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 LOAD_FAST 1 ( low )					      								    								  
136 COMPARE_OP 5 ( >= )					      								    								  
138 POP_JUMP_IF_FALSE 160				      								    								  
140 LOAD_FAST 3 ( x )					      								    								  
142 LOAD_FAST 0 ( arr )					      								    								  
144 LOAD_FAST 4 ( mid )					      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 BINARY_SUBSCR					      								    								  
152 COMPARE_OP 4 ( > )					      								    								  
154 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
16 156 LOAD_FAST 4 ( mid )				      								    								  
158 RETURN_VALUE					      								    								  
							      								    								  
18 >> 160 LOAD_GLOBAL 0 ( ceilSearch )			      								    								  
162 LOAD_FAST 0 ( arr )					      								    								  
164 LOAD_FAST 1 ( low )					      								    								  
166 LOAD_FAST 4 ( mid )					      								    								  
168 LOAD_CONST 3 ( 1 )					      								    								  
170 BINARY_SUBTRACT					      								    								  
172 LOAD_FAST 3 ( x )					      								    								  
174 CALL_FUNCTION 4					      								    								  
176 RETURN_VALUE					      								    								  
>> 178 LOAD_CONST 0 ( None )				      								    								  
180 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GRAPHS_CY<unk> ODD_LENGTH				      CHECK_GRAPHS_CY<unk> ODD_LENGTH				    CHECK_GRAPHS_CY<unk> ODD_LENGTH				  CHECK_GRAPHS_CY<unk> ODD_LENGTH
--							      --							    --								  --
Disassembly of <code object containsOdd at 0x7f33e2649a50, fi def containsOdd ( G , src ) :				    def containsOdd ( G , src ) :				  script_not_found : None
3 0 LOAD_CONST 1 ( - 1 )				      	  global V						    	global colorArr						  
2 BUILD_LIST 1						      	  colorArr = [ - 1 ] * V				    	colorArr = [ - 1 ] * V					  
4 LOAD_GLOBAL 0 ( V )					      	  colorArr [ src ] = 1					    	colorArr [ src ] = 1					  
6 BINARY_MULTIPLY					      	  q = queue.Queue ( )					    	q = queue.Queue ( )					  
8 STORE_FAST 2 ( colorArr )				      	  q.put ( src )						    	q.put ( src )						  
							      	  while ( not q.empty ( ) ) :				    	while not q.empty ( ) :					  
4 10 LOAD_CONST 2 ( 1 )					      	      u = q.get ( )					    	    u = q.get ( )					  
12 LOAD_FAST 2 ( colorArr )				      	      if ( G [ u ] [ u ] == 1 ) :			    	    if G [ u ] [ u ] == 1 :				  
14 LOAD_FAST 1 ( src )					      		  return True					    		return True					  
16 STORE_SUBSCR						      	      for v in range ( V ) :				    	    for v in range ( V ) :				  
							      		  if ( G [ u ] [ v ] and colorArr [ v ] == - 1 ) :  		if G [ u ] [ v ] and colorArr [ v ] == - 1 :	  
5 18 LOAD_GLOBAL 1 ( queue )				      		      colorArr [ v ] = 1 - colorArr [ u ]	    		    colorArr [ v ] = ( 1 - colorArr [ u ] )	  
20 LOAD_METHOD 2 ( Queue )				      		      q.put ( v )				    		    q.put ( v )					  
22 CALL_METHOD 0					      		  elif ( G [ u ] [ v ] and colorArr [ v ] == colorA 		elif G [ u ] [ v ] and colorArr [ v ] == colorArr 
24 STORE_FAST 3 ( q )					      		      return True				    		    return True					  
							      	  return False						    	    return False					  
6 26 LOAD_FAST 3 ( q )					      								    								  
28 LOAD_METHOD 3 ( put )				      								    								  
30 LOAD_FAST 1 ( src )					      								    								  
32 CALL_METHOD 1					      								    								  
34 POP_TOP						      								    								  
							      								    								  
7 36 SETUP_LOOP 142 ( to 180 )				      								    								  
>> 38 LOAD_FAST 3 ( q )					      								    								  
40 LOAD_METHOD 4 ( empty )				      								    								  
42 CALL_METHOD 0					      								    								  
44 POP_JUMP_IF_TRUE 178					      								    								  
							      								    								  
8 46 LOAD_FAST 3 ( q )					      								    								  
48 LOAD_METHOD 5 ( get )				      								    								  
50 CALL_METHOD 0					      								    								  
52 STORE_FAST 4 ( u )					      								    								  
							      								    								  
9 54 LOAD_FAST 0 ( G )					      								    								  
56 LOAD_FAST 4 ( u )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 4 ( u )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
10 70 LOAD_CONST 3 ( True )				      								    								  
72 RETURN_VALUE						      								    								  
							      								    								  
11 >> 74 SETUP_LOOP 100 ( to 176 )			      								    								  
76 LOAD_GLOBAL 6 ( range )				      								    								  
78 LOAD_GLOBAL 0 ( V )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 88 ( to 174 )				      								    								  
86 STORE_FAST 5 ( v )					      								    								  
							      								    								  
12 88 LOAD_FAST 0 ( G )					      								    								  
90 LOAD_FAST 4 ( u )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 5 ( v )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 POP_JUMP_IF_FALSE 140				      								    								  
100 LOAD_FAST 2 ( colorArr )				      								    								  
102 LOAD_FAST 5 ( v )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_CONST 1 ( - 1 )				      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
13 112 LOAD_CONST 2 ( 1 )				      								    								  
114 LOAD_FAST 2 ( colorArr )				      								    								  
116 LOAD_FAST 4 ( u )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 LOAD_FAST 2 ( colorArr )				      								    								  
124 LOAD_FAST 5 ( v )					      								    								  
126 STORE_SUBSCR					      								    								  
							      								    								  
14 128 LOAD_FAST 3 ( q )				      								    								  
130 LOAD_METHOD 3 ( put )				      								    								  
132 LOAD_FAST 5 ( v )					      								    								  
134 CALL_METHOD 1					      								    								  
136 POP_TOP						      								    								  
138 JUMP_ABSOLUTE 84					      								    								  
							      								    								  
15 >> 140 LOAD_FAST 0 ( G )				      								    								  
142 LOAD_FAST 4 ( u )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 5 ( v )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 POP_JUMP_IF_FALSE 84				      								    								  
152 LOAD_FAST 2 ( colorArr )				      								    								  
154 LOAD_FAST 5 ( v )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_FAST 2 ( colorArr )				      								    								  
160 LOAD_FAST 4 ( u )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 COMPARE_OP 2 ( == )					      								    								  
166 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
16 168 LOAD_CONST 3 ( True )				      								    								  
170 RETURN_VALUE					      								    								  
172 JUMP_ABSOLUTE 84					      								    								  
>> 174 POP_BLOCK					      								    								  
>> 176 JUMP_ABSOLUTE 38					      								    								  
>> 178 POP_BLOCK					      								    								  
							      								    								  
17 >> 180 LOAD_CONST 4 ( False )			      								    								  
182 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			      PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			    PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2				  PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2
--							      --							    --								  --
Disassembly of <code object fib at 0x7f33e26494b0, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( n == 1 or n == 2 ) :				    	if n == 1 or n == 2 :					  
6 POP_JUMP_IF_FALSE 12					      	      f [ n ] = 1					    	    f [ n ] = 1						  
							      	      return ( f [ n ] )				    	    return f [ n ]					  
3 8 LOAD_CONST 1 ( 0 )					      	  if ( f [ n ] ) :					    	if f [ n ] :						  
10 RETURN_VALUE						      	      return f [ n ]					    	    return f [ n ]					  
							      	  if ( n & 1 ) :					    	if n & 1 :						  
4 >> 12 LOAD_FAST 0 ( n )				      	      k = ( n + 1 ) // 2				    	    k = n + 1 // 2					  
14 LOAD_CONST 2 ( 1 )					      	  else :						    	else :							  
16 COMPARE_OP 2 ( == )					      	      k = n // 2					    	    k = n // 2						  
18 POP_JUMP_IF_TRUE 28					      	  if ( ( n & 1 ) ) :					    	if n & 1 :						  
20 LOAD_FAST 0 ( n )					      	      f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * f 	    f [ n ] = fib ( k ) * fib ( k - 1 ) * fib ( k - 1 ) * 
22 LOAD_CONST 3 ( 2 )					      	  else :						    	else :							  
24 COMPARE_OP 2 ( == )					      	      f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k 	    f [ n ] = 2 * fib ( k - 1 ) * fib ( k )		  
26 POP_JUMP_IF_FALSE 44					      	  return f [ n ]					    return f [ n ]						  
							      								    								  
5 >> 28 LOAD_CONST 2 ( 1 )				      								    								  
30 LOAD_GLOBAL 0 ( f )					      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( f )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
7 >> 44 LOAD_GLOBAL 0 ( f )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 52 LOAD_GLOBAL 0 ( f )				      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 0 ( n )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_AND						      								    								  
66 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_CONST 3 ( 2 )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 STORE_FAST 1 ( k )					      								    								  
80 JUMP_FORWARD 8 ( to 90 )				      								    								  
							      								    								  
12 >> 82 LOAD_FAST 0 ( n )				      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_FLOOR_DIVIDE					      								    								  
88 STORE_FAST 1 ( k )					      								    								  
							      								    								  
13 >> 90 LOAD_FAST 0 ( n )				      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_AND						      								    								  
96 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
14 98 LOAD_GLOBAL 1 ( fib )				      								    								  
100 LOAD_FAST 1 ( k )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_GLOBAL 1 ( fib )				      								    								  
106 LOAD_FAST 1 ( k )					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 BINARY_MULTIPLY					      								    								  
112 LOAD_GLOBAL 1 ( fib )				      								    								  
114 LOAD_FAST 1 ( k )					      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 LOAD_GLOBAL 1 ( fib )				      								    								  
124 LOAD_FAST 1 ( k )					      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 CALL_FUNCTION 1					      								    								  
132 BINARY_MULTIPLY					      								    								  
134 BINARY_ADD						      								    								  
136 LOAD_GLOBAL 0 ( f )					      								    								  
138 LOAD_FAST 0 ( n )					      								    								  
140 STORE_SUBSCR					      								    								  
142 JUMP_FORWARD 36 ( to 180 )				      								    								  
							      								    								  
16 >> 144 LOAD_CONST 3 ( 2 )				      								    								  
146 LOAD_GLOBAL 1 ( fib )				      								    								  
148 LOAD_FAST 1 ( k )					      								    								  
150 LOAD_CONST 2 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 BINARY_MULTIPLY					      								    								  
158 LOAD_GLOBAL 1 ( fib )				      								    								  
160 LOAD_FAST 1 ( k )					      								    								  
162 CALL_FUNCTION 1					      								    								  
164 BINARY_ADD						      								    								  
166 LOAD_GLOBAL 1 ( fib )				      								    								  
168 LOAD_FAST 1 ( k )					      								    								  
170 CALL_FUNCTION 1					      								    								  
172 BINARY_MULTIPLY					      								    								  
174 LOAD_GLOBAL 0 ( f )					      								    								  
176 LOAD_FAST 0 ( n )					      								    								  
178 STORE_SUBSCR					      								    								  
							      								    								  
17 >> 180 LOAD_GLOBAL 0 ( f )				      								    								  
182 LOAD_FAST 0 ( n )					      								    								  
184 BINARY_SUBSCR					      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_MAXIMUM_GCD_ARRAY_1				      FIND_PAIR_MAXIMUM_GCD_ARRAY_1				    FIND_PAIR_MAXIMUM_GCD_ARRAY_1				  FIND_PAIR_MAXIMUM_GCD_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findMaxGCD at 0x7f33e26494b0, fil def findMaxGCD ( arr , n ) :				    def findMaxGCD ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  high = 0						    	high = 0						  
2 STORE_FAST 2 ( high )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      high = max ( high , arr [ i ] )			    	    high = max ( high , arr [ i ] )			  
3 4 SETUP_LOOP 32 ( to 38 )				      	  count = [ 0 ] * ( high + 1 )				    	count = [ 0 ] * ( high + 1 )				  
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
8 LOAD_CONST 1 ( 0 )					      	      count [ arr [ i ] ] += 1				    	    count [ arr [ i ] ] += 1				  
10 LOAD_FAST 1 ( n )					      	  counter = 0						    	counter = 0						  
12 CALL_FUNCTION 2					      	  for i in range ( high , 0 , - 1 ) :			    	for i in range ( high , 0 , - 1 ) :			  
14 GET_ITER						      	      j = i						    	    if i <= high :					  
>> 16 FOR_ITER 18 ( to 36 )				      	      while ( j <= high ) :				    		if count [ j ] > 0 :				  
18 STORE_FAST 3 ( i )					      		  if ( count [ j ] > 0 ) :			    		    counter += count [ j ]			  
							      		      counter += count [ j ]			    		j += 1						  
4 20 LOAD_GLOBAL 1 ( max )				      		  j += i					    	counter = 0						  
22 LOAD_FAST 2 ( high )					      		  if ( counter == 2 ) :				    	if counter == 2 :					  
24 LOAD_FAST 0 ( arr )					      		      return i					    	    return counter					  
26 LOAD_FAST 3 ( i )					      	      counter = 0					    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 STORE_FAST 2 ( high )				      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_CONST 1 ( 0 )				      								    								  
40 BUILD_LIST 1						      								    								  
42 LOAD_FAST 2 ( high )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_MULTIPLY					      								    								  
50 STORE_FAST 4 ( count )				      								    								  
							      								    								  
6 52 SETUP_LOOP 38 ( to 92 )				      								    								  
54 LOAD_GLOBAL 0 ( range )				      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 24 ( to 90 )				      								    								  
66 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 68 LOAD_FAST 4 ( count )				      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 DUP_TOP_TWO						      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 ROT_THREE						      								    								  
86 STORE_SUBSCR						      								    								  
88 JUMP_ABSOLUTE 64					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
8 >> 92 LOAD_CONST 1 ( 0 )				      								    								  
94 STORE_FAST 5 ( counter )				      								    								  
							      								    								  
9 96 SETUP_LOOP 86 ( to 184 )				      								    								  
98 LOAD_GLOBAL 0 ( range )				      								    								  
100 LOAD_FAST 2 ( high )				      								    								  
102 LOAD_CONST 1 ( 0 )					      								    								  
104 LOAD_CONST 3 ( - 1 )				      								    								  
106 CALL_FUNCTION 3					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 70 ( to 182 )				      								    								  
112 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 114 LOAD_FAST 3 ( i )				      								    								  
116 STORE_FAST 6 ( j )					      								    								  
							      								    								  
11 118 SETUP_LOOP 56 ( to 176 )				      								    								  
>> 120 LOAD_FAST 6 ( j )				      								    								  
122 LOAD_FAST 2 ( high )				      								    								  
124 COMPARE_OP 1 ( <= )					      								    								  
126 POP_JUMP_IF_FALSE 174				      								    								  
							      								    								  
12 128 LOAD_FAST 4 ( count )				      								    								  
130 LOAD_FAST 6 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 1 ( 0 )					      								    								  
136 COMPARE_OP 4 ( > )					      								    								  
138 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
13 140 LOAD_FAST 5 ( counter )				      								    								  
142 LOAD_FAST 4 ( count )				      								    								  
144 LOAD_FAST 6 ( j )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 5 ( counter )				      								    								  
							      								    								  
14 >> 152 LOAD_FAST 6 ( j )				      								    								  
154 LOAD_FAST 3 ( i )					      								    								  
156 INPLACE_ADD						      								    								  
158 STORE_FAST 6 ( j )					      								    								  
							      								    								  
15 160 LOAD_FAST 5 ( counter )				      								    								  
162 LOAD_CONST 4 ( 2 )					      								    								  
164 COMPARE_OP 2 ( == )					      								    								  
166 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
16 168 LOAD_FAST 3 ( i )				      								    								  
170 RETURN_VALUE					      								    								  
172 JUMP_ABSOLUTE 120					      								    								  
>> 174 POP_BLOCK					      								    								  
							      								    								  
17 >> 176 LOAD_CONST 1 ( 0 )				      								    								  
178 STORE_FAST 5 ( counter )				      								    								  
180 JUMP_ABSOLUTE 110					      								    								  
>> 182 POP_BLOCK					      								    								  
>> 184 LOAD_CONST 0 ( None )				      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED		      CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED		    CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED			  CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED
--							      --							    --								  --
Disassembly of <code object checkReverse at 0x7f33e2653f60, f def checkReverse ( arr , n ) :				    def checkReverse ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  temp = [ 0 ] * n					    	temp = [ 0 ] * n					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.valid/CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SOR
4 LOAD_FAST 1 ( n )					      	      temp [ i ] = arr [ i ]				    	    temp [ i ] = arr [ i ]				  TED.py", line 54     return True     ^ SyntaxError
6 BINARY_MULTIPLY					      	  temp.sort ( )						    	temp.sort ( )						  : 'return' outside function
8 STORE_FAST 2 ( temp )					      	  for front in range ( n ) :				    	for front in range ( n ) :				  
							      	      if temp [ front ] != arr [ front ] :		    	    if temp [ front ] != arr [ front ] :		  
3 10 SETUP_LOOP 28 ( to 40 )				      		  break						    		break						  
12 LOAD_GLOBAL 0 ( range )				      	  for back in range ( n - 1 , - 1 , - 1 ) :		    	for back in range ( n - 1 , - 1 , - 1 ) :		  
14 LOAD_FAST 1 ( n )					      	      if temp [ back ] != arr [ back ] :		    	    if temp [ back ] != arr [ back ] :			  
16 CALL_FUNCTION 1					      		  break						    		break						  
18 GET_ITER						      	  if front >= back :					    	if front >= back :					  
>> 20 FOR_ITER 16 ( to 38 )				      	      return True					    	    return True						  
22 STORE_FAST 3 ( i )					      	  while front != back :					    	while front != back :					  
							      	      front += 1					    	    front += 1						  
4 24 LOAD_FAST 0 ( arr )				      	      if arr [ front - 1 ] < arr [ front ] :		    	    if arr [ front - 1 ] < front [ front ] :		  
26 LOAD_FAST 3 ( i )					      		  return False					    		return False					  
28 BINARY_SUBSCR					      	  return True						    return True							  
30 LOAD_FAST 2 ( temp )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_FAST 2 ( temp )				      								    								  
42 LOAD_METHOD 1 ( sort )				      								    								  
44 CALL_METHOD 0					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 48 SETUP_LOOP 34 ( to 84 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 22 ( to 82 )				      								    								  
60 STORE_FAST 4 ( front )				      								    								  
							      								    								  
7 62 LOAD_FAST 2 ( temp )				      								    								  
64 LOAD_FAST 4 ( front )				      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( front )				      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 3 ( != )					      								    								  
76 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
8 78 BREAK_LOOP						      								    								  
80 JUMP_ABSOLUTE 58					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
9 >> 84 SETUP_LOOP 42 ( to 128 )			      								    								  
86 LOAD_GLOBAL 0 ( range )				      								    								  
88 LOAD_FAST 1 ( n )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 LOAD_CONST 3 ( - 1 )					      								    								  
96 LOAD_CONST 3 ( - 1 )					      								    								  
98 CALL_FUNCTION 3					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 22 ( to 126 )				      								    								  
104 STORE_FAST 5 ( back )				      								    								  
							      								    								  
10 106 LOAD_FAST 2 ( temp )				      								    								  
108 LOAD_FAST 5 ( back )				      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 5 ( back )				      								    								  
116 BINARY_SUBSCR					      								    								  
118 COMPARE_OP 3 ( != )					      								    								  
120 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
11 122 BREAK_LOOP					      								    								  
124 JUMP_ABSOLUTE 102					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
12 >> 128 LOAD_FAST 4 ( front )				      								    								  
130 LOAD_FAST 5 ( back )				      								    								  
132 COMPARE_OP 5 ( >= )					      								    								  
134 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
13 136 LOAD_CONST 4 ( True )				      								    								  
138 RETURN_VALUE					      								    								  
							      								    								  
14 >> 140 SETUP_LOOP 44 ( to 186 )			      								    								  
>> 142 LOAD_FAST 4 ( front )				      								    								  
144 LOAD_FAST 5 ( back )				      								    								  
146 COMPARE_OP 3 ( != )					      								    								  
148 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
15 150 LOAD_FAST 4 ( front )				      								    								  
152 LOAD_CONST 2 ( 1 )					      								    								  
154 INPLACE_ADD						      								    								  
156 STORE_FAST 4 ( front )				      								    								  
							      								    								  
16 158 LOAD_FAST 0 ( arr )				      								    								  
160 LOAD_FAST 4 ( front )				      								    								  
162 LOAD_CONST 2 ( 1 )					      								    								  
164 BINARY_SUBTRACT					      								    								  
166 BINARY_SUBSCR					      								    								  
168 LOAD_FAST 0 ( arr )					      								    								  
170 LOAD_FAST 4 ( front )				      								    								  
172 BINARY_SUBSCR					      								    								  
174 COMPARE_OP 0 ( < )					      								    								  
176 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
17 178 LOAD_CONST 5 ( False )				      								    								  
180 RETURN_VALUE					      								    								  
182 JUMP_ABSOLUTE 142					      								    								  
>> 184 POP_BLOCK					      								    								  
							      								    								  
18 >> 186 LOAD_CONST 4 ( True )				      								    								  
188 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STEINS_ALGORITHM_FOR_FINDING_GCD			      STEINS_ALGORITHM_FOR_FINDING_GCD				    STEINS_ALGORITHM_FOR_FINDING_GCD				  STEINS_ALGORITHM_FOR_FINDING_GCD
--							      --							    --								  --
Disassembly of <code object gcd at 0x7f33e2653ed0, file "<dis def gcd ( a , b ) :					    def gcd ( a , b ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  if ( a == 0 ) :					    	if a == 0 :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0 )					      	      return b						    	    return b						  _sa.valid/STEINS_ALGORITHM_FOR_FINDING_GCD.py", li
4 COMPARE_OP 2 ( == )					      	  if ( b == 0 ) :					    	if b == 0 :						  ne 61	    return a	 ^ SyntaxError: 'return' out
6 POP_JUMP_IF_FALSE 12					      	      return a						    	    return a						  side function
							      	  k = 0							    	k = 0							  
3 8 LOAD_FAST 1 ( b )					      	  while ( ( ( a | b ) & 1 ) == 0 ) :			    	while a | b | 1 == 0 :					  
10 RETURN_VALUE						      	      a = a >> 1					    	    a = a >> 1						  
							      	      b = b >> 1					    	    b = b >> 1						  
4 >> 12 LOAD_FAST 1 ( b )				      	      k = k + 1						    	    k = k + 1						  
14 LOAD_CONST 1 ( 0 )					      	  while ( ( a & 1 ) == 0 ) :				    	while a & 1 == 0 :					  
16 COMPARE_OP 2 ( == )					      	      a = a >> 1					    	    a = a >> 1						  
18 POP_JUMP_IF_FALSE 24					      	  while ( b != 0 ) :					    	while b != 0 :						  
							      	      while ( ( b & 1 ) == 0 ) :			    	    while b & 1 == 0 :					  
5 20 LOAD_FAST 0 ( a )					      		  b = b >> 1					    		while b & 1 :					  
22 RETURN_VALUE						      	      if ( a > b ) :					    		    b = ( b >> 1 )				  
							      		  temp = a					    	    if a > b :						  
6 >> 24 LOAD_CONST 1 ( 0 )				      		  a = b						    		a = a						  
26 STORE_FAST 2 ( k )					      		  b = temp					    		b = b						  
							      	      b = ( b - a )					    	    a = b						  
7 28 SETUP_LOOP 44 ( to 74 )				      	  return ( a << k )					    	    b = ( b )						  
>> 30 LOAD_FAST 0 ( a )					      								    return a							  
32 LOAD_FAST 1 ( b )					      								    								  
34 BINARY_OR						      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_AND						      								    								  
40 LOAD_CONST 1 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_RSHIFT					      								    								  
52 STORE_FAST 0 ( a )					      								    								  
							      								    								  
9 54 LOAD_FAST 1 ( b )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_RSHIFT					      								    								  
60 STORE_FAST 1 ( b )					      								    								  
							      								    								  
10 62 LOAD_FAST 2 ( k )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 STORE_FAST 2 ( k )					      								    								  
70 JUMP_ABSOLUTE 30					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
11 >> 74 SETUP_LOOP 24 ( to 100 )			      								    								  
>> 76 LOAD_FAST 0 ( a )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_AND						      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
12 88 LOAD_FAST 0 ( a )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_RSHIFT					      								    								  
94 STORE_FAST 0 ( a )					      								    								  
96 JUMP_ABSOLUTE 76					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
13 >> 100 SETUP_LOOP 66 ( to 168 )			      								    								  
>> 102 LOAD_FAST 1 ( b )				      								    								  
104 LOAD_CONST 1 ( 0 )					      								    								  
106 COMPARE_OP 3 ( != )					      								    								  
108 POP_JUMP_IF_FALSE 166				      								    								  
							      								    								  
14 110 SETUP_LOOP 24 ( to 136 )				      								    								  
>> 112 LOAD_FAST 1 ( b )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 BINARY_AND						      								    								  
118 LOAD_CONST 1 ( 0 )					      								    								  
120 COMPARE_OP 2 ( == )					      								    								  
122 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
15 124 LOAD_FAST 1 ( b )				      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 BINARY_RSHIFT					      								    								  
130 STORE_FAST 1 ( b )					      								    								  
132 JUMP_ABSOLUTE 112					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
16 >> 136 LOAD_FAST 0 ( a )				      								    								  
138 LOAD_FAST 1 ( b )					      								    								  
140 COMPARE_OP 4 ( > )					      								    								  
142 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
17 144 LOAD_FAST 0 ( a )				      								    								  
146 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
18 148 LOAD_FAST 1 ( b )				      								    								  
150 STORE_FAST 0 ( a )					      								    								  
							      								    								  
19 152 LOAD_FAST 3 ( temp )				      								    								  
154 STORE_FAST 1 ( b )					      								    								  
							      								    								  
20 >> 156 LOAD_FAST 1 ( b )				      								    								  
158 LOAD_FAST 0 ( a )					      								    								  
160 BINARY_SUBTRACT					      								    								  
162 STORE_FAST 1 ( b )					      								    								  
164 JUMP_ABSOLUTE 102					      								    								  
>> 166 POP_BLOCK					      								    								  
							      								    								  
21 >> 168 LOAD_FAST 0 ( a )				      								    								  
170 LOAD_FAST 2 ( k )					      								    								  
172 BINARY_LSHIFT					      								    								  
174 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM	  REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM
--							      --							    --								  --
Disassembly of <code object remAnagram at 0x7f33e2653ed0, fil def remAnagram ( str1 , str2 ) :				    def remAnagram ( str1 , str2 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count1 = [ 0 ] * CHARS				    	count1 = [ 0 ] * CHARS					  
2 BUILD_LIST 1						      	  count2 = [ 0 ] * CHARS				    	count2 = [ 0 ] * CHARS					  
4 LOAD_GLOBAL 0 ( CHARS )				      	  i = 0							    	i = 0							  
6 BINARY_MULTIPLY					      	  while i < len ( str1 ) :				    	while i < len ( str1 ) :				  
8 STORE_FAST 2 ( count1 )				      	      count1 [ ord ( str1 [ i ] ) - ord ( 'a' ) ] += 1	    	    count1 [ ord ( str1 [ i ] ) - ord ( "a" ) ] += 1	  
							      	      i += 1						    	    i += 1						  
3 10 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
12 BUILD_LIST 1						      	  while i < len ( str2 ) :				    	while i < len ( str2 ) :				  
14 LOAD_GLOBAL 0 ( CHARS )				      	      count2 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] += 1	    	    count2 [ ord ( str2 [ i ] ) - ord ( "a" ) ] += 1	  
16 BINARY_MULTIPLY					      	      i += 1						    	    i += 1						  
18 STORE_FAST 3 ( count2 )				      	  result = 0						    	result = 0						  
							      	  for i in range ( 26 ) :				    	for i in range ( 26 ) :					  
4 20 LOAD_CONST 1 ( 0 )					      	      result += abs ( count1 [ i ] - count2 [ i ] )	    	    result += abs ( count1 [ i ] ) - count2		  
22 STORE_FAST 4 ( i )					      	  return result						    	    i += 1						  
							      								    return result						  
5 24 SETUP_LOOP 56 ( to 82 )				      								    								  
>> 26 LOAD_FAST 4 ( i )					      								    								  
28 LOAD_GLOBAL 1 ( len )				      								    								  
30 LOAD_FAST 0 ( str1 )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( count1 )				      								    								  
40 LOAD_GLOBAL 2 ( ord )				      								    								  
42 LOAD_FAST 0 ( str1 )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_GLOBAL 2 ( ord )				      								    								  
52 LOAD_CONST 2 ( 'a' )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 DUP_TOP_TWO						      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 ROT_THREE						      								    								  
68 STORE_SUBSCR						      								    								  
							      								    								  
7 70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_CONST 3 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 4 ( i )					      								    								  
78 JUMP_ABSOLUTE 26					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
8 >> 82 LOAD_CONST 1 ( 0 )				      								    								  
84 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 86 SETUP_LOOP 56 ( to 144 )				      								    								  
>> 88 LOAD_FAST 4 ( i )					      								    								  
90 LOAD_GLOBAL 1 ( len )				      								    								  
92 LOAD_FAST 1 ( str2 )					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
10 100 LOAD_FAST 3 ( count2 )				      								    								  
102 LOAD_GLOBAL 2 ( ord )				      								    								  
104 LOAD_FAST 1 ( str2 )				      								    								  
106 LOAD_FAST 4 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 LOAD_GLOBAL 2 ( ord )				      								    								  
114 LOAD_CONST 2 ( 'a' )				      								    								  
116 CALL_FUNCTION 1					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 DUP_TOP_TWO						      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 3 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 ROT_THREE						      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
11 132 LOAD_FAST 4 ( i )				      								    								  
134 LOAD_CONST 3 ( 1 )					      								    								  
136 INPLACE_ADD						      								    								  
138 STORE_FAST 4 ( i )					      								    								  
140 JUMP_ABSOLUTE 88					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
12 >> 144 LOAD_CONST 1 ( 0 )				      								    								  
146 STORE_FAST 5 ( result )				      								    								  
							      								    								  
13 148 SETUP_LOOP 40 ( to 190 )				      								    								  
150 LOAD_GLOBAL 3 ( range )				      								    								  
152 LOAD_CONST 4 ( 26 )					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 GET_ITER						      								    								  
>> 158 FOR_ITER 28 ( to 188 )				      								    								  
160 STORE_FAST 4 ( i )					      								    								  
							      								    								  
14 162 LOAD_FAST 5 ( result )				      								    								  
164 LOAD_GLOBAL 4 ( abs )				      								    								  
166 LOAD_FAST 2 ( count1 )				      								    								  
168 LOAD_FAST 4 ( i )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 LOAD_FAST 3 ( count2 )				      								    								  
174 LOAD_FAST 4 ( i )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 BINARY_SUBTRACT					      								    								  
180 CALL_FUNCTION 1					      								    								  
182 INPLACE_ADD						      								    								  
184 STORE_FAST 5 ( result )				      								    								  
186 JUMP_ABSOLUTE 158					      								    								  
>> 188 POP_BLOCK					      								    								  
							      								    								  
15 >> 190 LOAD_FAST 5 ( result )			      								    								  
192 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_
--							      --							    --								  --
Disassembly of <code object countManipulations at 0x7f33e2649 def countManipulations ( s1 , s2 ) :			    def countManipulations ( s1 , s2 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  char_count = [ 0 ] * 26				    	char_count = [ 0 ] * 26					  
							      	  for i in range ( 26 ) :				    	for i in range ( 26 ) :					  
3 4 LOAD_CONST 1 ( 0 )					      	      char_count [ i ] = 0				    	    char_count [ i ] = 0				  
6 BUILD_LIST 1						      	  for i in range ( len ( s1 ) ) :			    	for i in range ( len ( s1 ) ) :				  
8 LOAD_CONST 2 ( 26 )					      	      char_count [ ord ( s1 [ i ] ) - ord ( 'a' ) ] += 1    	    char_count [ ord ( s1 [ i ] ) - ord ( 'a' ) ] += 1	  
10 BINARY_MULTIPLY					      	  for i in range ( len ( s2 ) ) :			    	for i in range ( len ( s2 ) ) :				  
12 STORE_FAST 3 ( char_count )				      	      char_count [ ord ( s2 [ i ] ) - ord ( 'a' ) ] -= 1    	    char_count [ ord ( s2 [ i ] ) -= ord ( 'a' ) ] -= 1	  
							      	      if ( char_count [ ord ( s2 [ i ] ) - ord ( 'a' ) ] <  	    char_count [ ord ( s2 [ i ] ) - ord ( 'a' ) ] < 0 :	  
4 14 SETUP_LOOP 24 ( to 40 )				      		  count += 1					    		count += 1					  
16 LOAD_GLOBAL 0 ( range )				      	  return count						    	return count						  
18 LOAD_CONST 2 ( 26 )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 12 ( to 38 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 3 ( char_count )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 24					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
6 >> 40 SETUP_LOOP 52 ( to 94 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_GLOBAL 1 ( len )				      								    								  
46 LOAD_FAST 0 ( s1 )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 36 ( to 92 )				      								    								  
56 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 58 LOAD_FAST 3 ( char_count )				      								    								  
60 LOAD_GLOBAL 2 ( ord )				      								    								  
62 LOAD_FAST 0 ( s1 )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 LOAD_GLOBAL 2 ( ord )				      								    								  
72 LOAD_CONST 3 ( 'a' )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 DUP_TOP_TWO						      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 4 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 ROT_THREE						      								    								  
88 STORE_SUBSCR						      								    								  
90 JUMP_ABSOLUTE 54					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
8 >> 94 SETUP_LOOP 88 ( to 184 )			      								    								  
96 LOAD_GLOBAL 0 ( range )				      								    								  
98 LOAD_GLOBAL 1 ( len )				      								    								  
100 LOAD_FAST 1 ( s2 )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 GET_ITER						      								    								  
>> 108 FOR_ITER 72 ( to 182 )				      								    								  
110 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 112 LOAD_FAST 3 ( char_count )			      								    								  
114 LOAD_GLOBAL 2 ( ord )				      								    								  
116 LOAD_FAST 1 ( s2 )					      								    								  
118 LOAD_FAST 4 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 CALL_FUNCTION 1					      								    								  
124 LOAD_GLOBAL 2 ( ord )				      								    								  
126 LOAD_CONST 3 ( 'a' )				      								    								  
128 CALL_FUNCTION 1					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 DUP_TOP_TWO						      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_CONST 4 ( 1 )					      								    								  
138 INPLACE_SUBTRACT					      								    								  
140 ROT_THREE						      								    								  
142 STORE_SUBSCR					      								    								  
							      								    								  
10 144 LOAD_FAST 3 ( char_count )			      								    								  
146 LOAD_GLOBAL 2 ( ord )				      								    								  
148 LOAD_FAST 1 ( s2 )					      								    								  
150 LOAD_FAST 4 ( i )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 LOAD_GLOBAL 2 ( ord )				      								    								  
158 LOAD_CONST 3 ( 'a' )				      								    								  
160 CALL_FUNCTION 1					      								    								  
162 BINARY_SUBTRACT					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_CONST 1 ( 0 )					      								    								  
168 COMPARE_OP 0 ( < )					      								    								  
170 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
11 172 LOAD_FAST 2 ( count )				      								    								  
174 LOAD_CONST 4 ( 1 )					      								    								  
176 INPLACE_ADD						      								    								  
178 STORE_FAST 2 ( count )				      								    								  
180 JUMP_ABSOLUTE 108					      								    								  
>> 182 POP_BLOCK					      								    								  
							      								    								  
12 >> 184 LOAD_FAST 2 ( count )				      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S			      COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S			    COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S			  COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S
--							      --							    --								  --
Disassembly of <code object countSubarrWithEqualZeroAndOne at def countSubarrWithEqualZeroAndOne ( arr , n ) :		    def countSubarrWithEqualZeroAndOne ( arr , n ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  um = dict ( )						    	um = dict ( )						  
2 CALL_FUNCTION 0					      	  curr_sum = 0						    	curr_sum = 0						  
4 STORE_FAST 2 ( um )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      curr_sum += ( - 1 if ( arr [ i ] == 0 ) else arr [ i  	    curr_sum += ( arr [ i ] == 0 ) * ( - 1 if curr_sum == 
3 6 LOAD_CONST 1 ( 0 )					      	      if um.get ( curr_sum ) :				    	    if um.get ( curr_sum ) :				  
8 STORE_FAST 3 ( curr_sum )				      		  um [ curr_sum ] += 1				    		um [ curr_sum ] += 1				  
							      	      else :						    	    else :						  
4 10 SETUP_LOOP 80 ( to 92 )				      		  um [ curr_sum ] = 1				    		um [ curr_sum ] = 1				  
12 LOAD_GLOBAL 1 ( range )				      	  count = 0						    	count = 0						  
14 LOAD_FAST 1 ( n )					      	  for itr in um :					    	for itr in um :						  
16 CALL_FUNCTION 1					      	      if um [ itr ] > 1 :				    	    if um [ itr ] > 1 :					  
18 GET_ITER						      		  count += ( ( um [ itr ] * int ( um [ itr ] - 1 )  		count += um [ itr ] * int ( um [ itr ] - 1 ) / 2  
>> 20 FOR_ITER 68 ( to 90 )				      	  if um.get ( 0 ) :					    	if um.get ( 0 ) :					  
22 STORE_FAST 4 ( i )					      	      count += um [ 0 ]					    	    count += um [ : um ]				  
							      	  return int ( count )					    	return int ( count )					  
5 24 LOAD_FAST 3 ( curr_sum )				      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 42					      								    								  
38 LOAD_CONST 2 ( - 1 )					      								    								  
40 JUMP_FORWARD 6 ( to 48 )				      								    								  
>> 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
>> 48 INPLACE_ADD					      								    								  
50 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
6 52 LOAD_FAST 2 ( um )					      								    								  
54 LOAD_METHOD 2 ( get )				      								    								  
56 LOAD_FAST 3 ( curr_sum )				      								    								  
58 CALL_METHOD 1					      								    								  
60 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
7 62 LOAD_FAST 2 ( um )					      								    								  
64 LOAD_FAST 3 ( curr_sum )				      								    								  
66 DUP_TOP_TWO						      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 ROT_THREE						      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 20					      								    								  
							      								    								  
9 >> 80 LOAD_CONST 3 ( 1 )				      								    								  
82 LOAD_FAST 2 ( um )					      								    								  
84 LOAD_FAST 3 ( curr_sum )				      								    								  
86 STORE_SUBSCR						      								    								  
88 JUMP_ABSOLUTE 20					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_CONST 1 ( 0 )				      								    								  
94 STORE_FAST 5 ( count )				      								    								  
							      								    								  
11 96 SETUP_LOOP 56 ( to 154 )				      								    								  
98 LOAD_FAST 2 ( um )					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 48 ( to 152 )				      								    								  
104 STORE_FAST 6 ( itr )				      								    								  
							      								    								  
12 106 LOAD_FAST 2 ( um )				      								    								  
108 LOAD_FAST 6 ( itr )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 COMPARE_OP 4 ( > )					      								    								  
116 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
13 118 LOAD_FAST 5 ( count )				      								    								  
120 LOAD_FAST 2 ( um )					      								    								  
122 LOAD_FAST 6 ( itr )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_GLOBAL 3 ( int )				      								    								  
128 LOAD_FAST 2 ( um )					      								    								  
130 LOAD_FAST 6 ( itr )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 3 ( 1 )					      								    								  
136 BINARY_SUBTRACT					      								    								  
138 CALL_FUNCTION 1					      								    								  
140 BINARY_MULTIPLY					      								    								  
142 LOAD_CONST 4 ( 2 )					      								    								  
144 BINARY_TRUE_DIVIDE					      								    								  
146 INPLACE_ADD						      								    								  
148 STORE_FAST 5 ( count )				      								    								  
150 JUMP_ABSOLUTE 102					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
14 >> 154 LOAD_FAST 2 ( um )				      								    								  
156 LOAD_METHOD 2 ( get )				      								    								  
158 LOAD_CONST 1 ( 0 )					      								    								  
160 CALL_METHOD 1					      								    								  
162 POP_JUMP_IF_FALSE 176				      								    								  
							      								    								  
15 164 LOAD_FAST 5 ( count )				      								    								  
166 LOAD_FAST 2 ( um )					      								    								  
168 LOAD_CONST 1 ( 0 )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 INPLACE_ADD						      								    								  
174 STORE_FAST 5 ( count )				      								    								  
							      								    								  
16 >> 176 LOAD_GLOBAL 3 ( int )				      								    								  
178 LOAD_FAST 5 ( count )				      								    								  
180 CALL_FUNCTION 1					      								    								  
182 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNIQUE_CELLS_BINARY_MATRIX				      UNIQUE_CELLS_BINARY_MATRIX				    UNIQUE_CELLS_BINARY_MATRIX					  UNIQUE_CELLS_BINARY_MATRIX
--							      --							    --								  --
Disassembly of <code object countUnique at 0x7f33e2653f60, fi def countUnique ( mat , n , m ) :				    def countUnique ( mat , n , m ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  rowsum = [ 0 ] * n ;					    	rowsum = [ 0 ] * n					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  colsum = [ 0 ] * m ;					    	colsum = [ 0 ] * m					  _sa.valid/UNIQUE_CELLS_BINARY_MATRIX.py", line 45
4 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					      return uniquecount     ^ SyntaxError: 'return'
6 BINARY_MULTIPLY					      	      for j in range ( m ) :				    	    for j in range ( m ) :				   outside function
8 STORE_FAST 3 ( rowsum )				      		  if ( mat [ i ] [ j ] != 0 ) :			    		if mat [ i ] [ j ] != 0 :			  
							      		      rowsum [ i ] += 1 ;			    		    rowsum [ i ] += 1				  
3 10 LOAD_CONST 1 ( 0 )					      		      colsum [ j ] += 1 ;			    		    colsum [ j ] += 1				  
12 BUILD_LIST 1						      	  uniquecount = 0 ;					    	uniquecount = 0						  
14 LOAD_FAST 2 ( m )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
16 BINARY_MULTIPLY					      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
18 STORE_FAST 4 ( colsum )				      		  if ( mat [ i ] [ j ] != 0 and rowsum [ i ] == 1 a 		if mat [ i ] [ j ] != 0 and colsum [ j ] == 1 and 
							      		      uniquecount += 1 ;			    return uniquecount						  
4 20 SETUP_LOOP 82 ( to 104 )				      	  return uniquecount ;					    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 70 ( to 102 )				      								    								  
32 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 34 SETUP_LOOP 64 ( to 100 )				      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_FAST 2 ( m )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 52 ( to 98 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 0 ( mat )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 6 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 64 LOAD_FAST 3 ( rowsum )				      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 DUP_TOP_TWO						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 ROT_THREE						      								    								  
78 STORE_SUBSCR						      								    								  
							      								    								  
8 80 LOAD_FAST 4 ( colsum )				      								    								  
82 LOAD_FAST 6 ( j )					      								    								  
84 DUP_TOP_TWO						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 ROT_THREE						      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 44					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 30					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
9 >> 104 LOAD_CONST 1 ( 0 )				      								    								  
106 STORE_FAST 7 ( uniquecount )			      								    								  
							      								    								  
10 108 SETUP_LOOP 82 ( to 192 )				      								    								  
110 LOAD_GLOBAL 0 ( range )				      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 CALL_FUNCTION 1					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 70 ( to 190 )				      								    								  
120 STORE_FAST 5 ( i )					      								    								  
							      								    								  
11 122 SETUP_LOOP 64 ( to 188 )				      								    								  
124 LOAD_GLOBAL 0 ( range )				      								    								  
126 LOAD_FAST 2 ( m )					      								    								  
128 CALL_FUNCTION 1					      								    								  
130 GET_ITER						      								    								  
>> 132 FOR_ITER 52 ( to 186 )				      								    								  
134 STORE_FAST 6 ( j )					      								    								  
							      								    								  
12 136 LOAD_FAST 0 ( mat )				      								    								  
138 LOAD_FAST 5 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 6 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_CONST 1 ( 0 )					      								    								  
148 COMPARE_OP 3 ( != )					      								    								  
150 POP_JUMP_IF_FALSE 132				      								    								  
152 LOAD_FAST 3 ( rowsum )				      								    								  
154 LOAD_FAST 5 ( i )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_CONST 2 ( 1 )					      								    								  
160 COMPARE_OP 2 ( == )					      								    								  
162 POP_JUMP_IF_FALSE 132				      								    								  
164 LOAD_FAST 4 ( colsum )				      								    								  
166 LOAD_FAST 6 ( j )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_CONST 2 ( 1 )					      								    								  
172 COMPARE_OP 2 ( == )					      								    								  
174 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
13 176 LOAD_FAST 7 ( uniquecount )			      								    								  
178 LOAD_CONST 2 ( 1 )					      								    								  
180 INPLACE_ADD						      								    								  
182 STORE_FAST 7 ( uniquecount )			      								    								  
184 JUMP_ABSOLUTE 132					      								    								  
>> 186 POP_BLOCK					      								    								  
>> 188 JUMP_ABSOLUTE 118				      								    								  
>> 190 POP_BLOCK					      								    								  
							      								    								  
14 >> 192 LOAD_FAST 7 ( uniquecount )			      								    								  
194 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ROTATIONS_DIVISIBLE_4				      COUNT_ROTATIONS_DIVISIBLE_4				    COUNT_ROTATIONS_DIVISIBLE_4					  COUNT_ROTATIONS_DIVISIBLE_4
--							      --							    --								  --
Disassembly of <code object countRotations at 0x7f33e26494b0, def countRotations ( n ) :				    def countRotations ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( n )						    	l = len ( n )						  
2 LOAD_FAST 0 ( n )					      	  if ( l == 1 ) :					    	if l == 1 :						  
4 CALL_FUNCTION 1					      	      oneDigit = ( int ) ( n [ 0 ] )			    	    oneDigit = int ( n [ 0 ] )				  
6 STORE_FAST 1 ( l )					      	      if ( oneDigit % 4 == 0 ) :			    	    if oneDigit % 4 == 0 :				  
							      		  return 1					    		return 1					  
3 8 LOAD_FAST 1 ( l )					      	      return 0						    	    return 0						  
10 LOAD_CONST 1 ( 1 )					      	  count = 0						    	count = 0						  
12 COMPARE_OP 2 ( == )					      	  for i in range ( 0 , l - 1 ) :			    	for i in range ( 0 , l - 1 ) :				  
14 POP_JUMP_IF_FALSE 48					      	      twoDigit = ( int ) ( n [ i ] ) * 10 + ( int ) ( n [ i 	    twoDigit = int ( n [ i ] ) * 10 + int ( n [ i + 1 ] ) 
							      	      if ( twoDigit % 4 == 0 ) :			    	    if twoDigit % 4 == 0 :				  
4 16 LOAD_GLOBAL 1 ( int )				      		  count = count + 1				    		count = count + 1				  
18 LOAD_FAST 0 ( n )					      	  twoDigit = ( int ) ( n [ l - 1 ] ) * 10 + ( int ) ( n [ 0 	twoDigit = int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] )	  
20 LOAD_CONST 2 ( 0 )					      	  if ( twoDigit % 4 == 0 ) :				    	if two% 4 == 0 :					  
22 BINARY_SUBSCR					      	      count = count + 1					    	    count = count + 1					  
24 CALL_FUNCTION 1					      	  return count						    	return count						  
26 STORE_FAST 2 ( oneDigit )				      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( oneDigit )				      								    								  
30 LOAD_CONST 3 ( 4 )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 2 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 40 LOAD_CONST 1 ( 1 )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
7 >> 44 LOAD_CONST 2 ( 0 )				      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
8 >> 48 LOAD_CONST 2 ( 0 )				      								    								  
50 STORE_FAST 3 ( count )				      								    								  
							      								    								  
9 52 SETUP_LOOP 74 ( to 128 )				      								    								  
54 LOAD_GLOBAL 2 ( range )				      								    								  
56 LOAD_CONST 2 ( 0 )					      								    								  
58 LOAD_FAST 1 ( l )					      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 56 ( to 126 )				      								    								  
70 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 72 LOAD_GLOBAL 1 ( int )				      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 LOAD_CONST 4 ( 10 )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 LOAD_GLOBAL 1 ( int )				      								    								  
88 LOAD_FAST 0 ( n )					      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 BINARY_SUBSCR					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_FAST 5 ( twoDigit )				      								    								  
							      								    								  
11 104 LOAD_FAST 5 ( twoDigit )				      								    								  
106 LOAD_CONST 3 ( 4 )					      								    								  
108 BINARY_MODULO					      								    								  
110 LOAD_CONST 2 ( 0 )					      								    								  
112 COMPARE_OP 2 ( == )					      								    								  
114 POP_JUMP_IF_FALSE 68				      								    								  
							      								    								  
12 116 LOAD_FAST 3 ( count )				      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 STORE_FAST 3 ( count )				      								    								  
124 JUMP_ABSOLUTE 68					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
13 >> 128 LOAD_GLOBAL 1 ( int )				      								    								  
130 LOAD_FAST 0 ( n )					      								    								  
132 LOAD_FAST 1 ( l )					      								    								  
134 LOAD_CONST 1 ( 1 )					      								    								  
136 BINARY_SUBTRACT					      								    								  
138 BINARY_SUBSCR					      								    								  
140 CALL_FUNCTION 1					      								    								  
142 LOAD_CONST 4 ( 10 )					      								    								  
144 BINARY_MULTIPLY					      								    								  
146 LOAD_GLOBAL 1 ( int )				      								    								  
148 LOAD_FAST 0 ( n )					      								    								  
150 LOAD_CONST 2 ( 0 )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 CALL_FUNCTION 1					      								    								  
156 BINARY_ADD						      								    								  
158 STORE_FAST 5 ( twoDigit )				      								    								  
							      								    								  
14 160 LOAD_FAST 5 ( twoDigit )				      								    								  
162 LOAD_CONST 3 ( 4 )					      								    								  
164 BINARY_MODULO					      								    								  
166 LOAD_CONST 2 ( 0 )					      								    								  
168 COMPARE_OP 2 ( == )					      								    								  
170 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
15 172 LOAD_FAST 3 ( count )				      								    								  
174 LOAD_CONST 1 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 STORE_FAST 3 ( count )				      								    								  
							      								    								  
16 >> 180 LOAD_FAST 3 ( count )				      								    								  
182 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1		  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1
--							      --							    --								  --
Disassembly of <code object minMaxProduct at 0x7f33e2644f60,  def minMaxProduct ( arr1 , arr2 , n1 , n2 ) :		    def minMaxProduct ( arr1 , arr2 , n1 , n2 ) :		  script_not_found : None
2 0 LOAD_FAST 0 ( arr1 )				      	  max = arr1 [ 0 ]					    	max = arr1 [ 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  min = arr2 [ 0 ]					    	min = arr2 [ 0 ]					  
4 BINARY_SUBSCR						      	  i = 1							    	i = 1							  
6 STORE_FAST 4 ( max )					      	  while ( i < n1 and i < n2 ) :				    	while i < n1 and i < n2 :				  
							      	      if ( arr1 [ i ] > max ) :				    	    if arr1 [ i ] > max :				  
3 8 LOAD_FAST 1 ( arr2 )				      		  max = arr1 [ i ]				    		max = arr1 [ i ]				  
10 LOAD_CONST 1 ( 0 )					      	      if ( arr2 [ i ] < min ) :				    	    if arr2 [ i ] < min :				  
12 BINARY_SUBSCR					      		  min = arr2 [ i ]				    		min = arr2 [ i ]				  
14 STORE_FAST 5 ( min )					      	      i += 1						    	    i += 1						  
							      	  while ( i < n1 ) :					    while i < n1 :						  
4 16 LOAD_CONST 2 ( 1 )					      	      if ( arr1 [ i ] > max ) :				    	if arr1 [ i ] > max :					  
18 STORE_FAST 6 ( i )					      		  max = arr1 [ i ]				    	    max = arr1 [ i ]					  
							      		  i += 1					    	    i += 1						  
5 20 SETUP_LOOP 68 ( to 90 )				      	  while ( i < n2 ) :					    while i < n2 :						  
>> 22 LOAD_FAST 6 ( i )					      	      if ( arr2 [ i ] < min ) :				    	if arr2 [ i ] < min :					  
24 LOAD_FAST 2 ( n1 )					      		  min = arr2 [ i ]				    	    min = arr2 [ i ]					  
26 COMPARE_OP 0 ( < )					      		  i += 1					    	    min += 1						  
28 POP_JUMP_IF_FALSE 88					      	  return max * min					    return max * min * max					  
30 LOAD_FAST 6 ( i )					      								    								  
32 LOAD_FAST 3 ( n2 )					      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( arr1 )				      								    								  
40 LOAD_FAST 6 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 4 ( max )					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( arr1 )				      								    								  
52 LOAD_FAST 6 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 4 ( max )					      								    								  
							      								    								  
8 >> 58 LOAD_FAST 1 ( arr2 )				      								    								  
60 LOAD_FAST 6 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 5 ( min )					      								    								  
66 COMPARE_OP 0 ( < )					      								    								  
68 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( arr2 )				      								    								  
72 LOAD_FAST 6 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 5 ( min )					      								    								  
							      								    								  
10 >> 78 LOAD_FAST 6 ( i )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 6 ( i )					      								    								  
86 JUMP_ABSOLUTE 22					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
11 >> 90 SETUP_LOOP 40 ( to 132 )			      								    								  
>> 92 LOAD_FAST 6 ( i )					      								    								  
94 LOAD_FAST 2 ( n1 )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
12 100 LOAD_FAST 0 ( arr1 )				      								    								  
102 LOAD_FAST 6 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 4 ( max )					      								    								  
108 COMPARE_OP 4 ( > )					      								    								  
110 POP_JUMP_IF_FALSE 92				      								    								  
							      								    								  
13 112 LOAD_FAST 0 ( arr1 )				      								    								  
114 LOAD_FAST 6 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 STORE_FAST 4 ( max )				      								    								  
							      								    								  
14 120 LOAD_FAST 6 ( i )				      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 INPLACE_ADD						      								    								  
126 STORE_FAST 6 ( i )					      								    								  
128 JUMP_ABSOLUTE 92					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
15 >> 132 SETUP_LOOP 40 ( to 174 )			      								    								  
>> 134 LOAD_FAST 6 ( i )				      								    								  
136 LOAD_FAST 3 ( n2 )					      								    								  
138 COMPARE_OP 0 ( < )					      								    								  
140 POP_JUMP_IF_FALSE 172				      								    								  
							      								    								  
16 142 LOAD_FAST 1 ( arr2 )				      								    								  
144 LOAD_FAST 6 ( i )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_FAST 5 ( min )					      								    								  
150 COMPARE_OP 0 ( < )					      								    								  
152 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
17 154 LOAD_FAST 1 ( arr2 )				      								    								  
156 LOAD_FAST 6 ( i )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 STORE_FAST 5 ( min )				      								    								  
							      								    								  
18 162 LOAD_FAST 6 ( i )				      								    								  
164 LOAD_CONST 2 ( 1 )					      								    								  
166 INPLACE_ADD						      								    								  
168 STORE_FAST 6 ( i )					      								    								  
170 JUMP_ABSOLUTE 134					      								    								  
>> 172 POP_BLOCK					      								    								  
							      								    								  
19 >> 174 LOAD_FAST 4 ( max )				      								    								  
176 LOAD_FAST 5 ( min )					      								    								  
178 BINARY_MULTIPLY					      								    								  
180 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_S
--							      --							    --								  --
Disassembly of <code object firstnonrepeating at 0x7f33e2644f def firstnonrepeating ( Str ) :				    def firstnonrepeating ( Str ) :				  script_not_found : None
3 0 LOAD_GLOBAL 0 ( Queue )				      	  global MAX_CHAR					    	global charCount					  
2 CALL_FUNCTION 0					      	  q = Queue ( )						    	q = Queue ( )						  
4 STORE_FAST 1 ( q )					      	  charCount = [ 0 ] * MAX_CHAR				    	charCount = [ 0 ] * MAX_CHAR				  
							      	  for i in range ( len ( Str ) ) :			    	for i in range ( len ( Str ) ) :			  
4 6 LOAD_CONST 1 ( 0 )					      	      q.put ( Str [ i ] )				    	    q.put ( Str [ i ] )					  
8 BUILD_LIST 1						      	      charCount [ ord ( Str [ i ] ) - ord ( 'a' ) ] += 1    	    charCount [ ord ( Str [ i ] ) - ord ( 'a' ) ] += 1	  
10 LOAD_GLOBAL 1 ( MAX_CHAR )				      	      while ( not q.empty ( ) ) :			    	    while not q.empty ( ) :				  
12 BINARY_MULTIPLY					      		  if ( charCount [ ord ( q.queue [ 0 ] ) - ord ( 'a 		if charCount [ ord ( q.queue [ 0 ] ) - ord ( 'a'  
14 STORE_FAST 2 ( charCount )				      		      q.get ( )					    		    q.get ( )					  
							      		  else :					    		else :						  
5 16 SETUP_LOOP 160 ( to 178 )				      		      print ( q.queue [ 0 ] , end = " " )	    		    print ( q.queue [ 0 ] , end = " " )		  
18 LOAD_GLOBAL 2 ( range )				      		      break					    		    break					  
20 LOAD_GLOBAL 3 ( len )				      	      if ( q.empty ( ) ) :				    	if q.empty ( ) :					  
22 LOAD_FAST 0 ( Str )					      		  print ( - 1 , end = " " )			    	    print ( "-" , end = " " )				  
24 CALL_FUNCTION 1					      	  print ( )						    	else :							  
26 CALL_FUNCTION 1					      								    	    print ( "-" )					  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 144 ( to 176 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( q )					      								    								  
36 LOAD_METHOD 4 ( put )				      								    								  
38 LOAD_FAST 0 ( Str )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( charCount )				      								    								  
50 LOAD_GLOBAL 5 ( ord )				      								    								  
52 LOAD_FAST 0 ( Str )					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_GLOBAL 5 ( ord )				      								    								  
62 LOAD_CONST 2 ( 'a' )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 DUP_TOP_TWO						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 3 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 ROT_THREE						      								    								  
78 STORE_SUBSCR						      								    								  
							      								    								  
8 80 SETUP_LOOP 72 ( to 154 )				      								    								  
>> 82 LOAD_FAST 1 ( q )					      								    								  
84 LOAD_METHOD 6 ( empty )				      								    								  
86 CALL_METHOD 0					      								    								  
88 POP_JUMP_IF_TRUE 152					      								    								  
							      								    								  
9 90 LOAD_FAST 2 ( charCount )				      								    								  
92 LOAD_GLOBAL 5 ( ord )				      								    								  
94 LOAD_FAST 1 ( q )					      								    								  
96 LOAD_ATTR 7 ( queue )				      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_GLOBAL 5 ( ord )				      								    								  
106 LOAD_CONST 2 ( 'a' )				      								    								  
108 CALL_FUNCTION 1					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
10 120 LOAD_FAST 1 ( q )				      								    								  
122 LOAD_METHOD 8 ( get )				      								    								  
124 CALL_METHOD 0					      								    								  
126 POP_TOP						      								    								  
128 JUMP_ABSOLUTE 82					      								    								  
							      								    								  
12 >> 130 LOAD_GLOBAL 9 ( print )			      								    								  
132 LOAD_FAST 1 ( q )					      								    								  
134 LOAD_ATTR 7 ( queue )				      								    								  
136 LOAD_CONST 1 ( 0 )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_CONST 4 ( ' ' )				      								    								  
142 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
144 CALL_FUNCTION_KW 2					      								    								  
146 POP_TOP						      								    								  
							      								    								  
13 148 BREAK_LOOP					      								    								  
150 JUMP_ABSOLUTE 82					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
14 >> 154 LOAD_FAST 1 ( q )				      								    								  
156 LOAD_METHOD 6 ( empty )				      								    								  
158 CALL_METHOD 0					      								    								  
160 POP_JUMP_IF_FALSE 30				      								    								  
							      								    								  
15 162 LOAD_GLOBAL 9 ( print )				      								    								  
164 LOAD_CONST 6 ( - 1 )				      								    								  
166 LOAD_CONST 4 ( ' ' )				      								    								  
168 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
170 CALL_FUNCTION_KW 2					      								    								  
172 POP_TOP						      								    								  
174 JUMP_ABSOLUTE 30					      								    								  
>> 176 POP_BLOCK					      								    								  
							      								    								  
16 >> 178 LOAD_GLOBAL 9 ( print )			      								    								  
180 CALL_FUNCTION 0					      								    								  
182 POP_TOP						      								    								  
184 LOAD_CONST 0 ( None )				      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1			      CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1			    CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1				  CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1
--							      --							    --								  --
Disassembly of <code object areKAnagrams at 0x7f33e2644f60, f def areKAnagrams ( str1 , str2 , k ) :			    def areKAnagrams ( str1 , str2 , n ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str1 ) ;					    	n = len ( str1 )					  
2 LOAD_FAST 0 ( str1 )					      	  if ( len ( str2 ) != n ) :				    	if len ( str2 ) != n :					  
4 CALL_FUNCTION 1					      	      return False ;					    	    return False					  
6 STORE_FAST 3 ( n )					      	  hash_str1 = [ 0 ] * ( MAX_CHAR ) ;			    	hash_str1 = [ 0 ] * MAX_CHAR				  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_GLOBAL 0 ( len )				      	      hash_str1 [ ord ( str1 [ i ] ) - ord ( 'a' ) ] += 1 ; 	    hash_str1 [ ord ( str1 [ i ] ) - ord ( "a" ) ] += 1	  
10 LOAD_FAST 1 ( str2 )					      	  count = 0 ;						    	count = 0						  
12 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
14 LOAD_FAST 3 ( n )					      	      if ( hash_str1 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] > 	    if hash_str1 [ ord ( str2 [ i ] ) - ord ( "a" ) ] > 0 
16 COMPARE_OP 3 ( != )					      		  hash_str1 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] -= 		hash_str1 [ ord ( str2 [ i ] ) - 1 ] += 1	  
18 POP_JUMP_IF_FALSE 24					      	      else :						    	    else :						  
							      		  count += 1 ;					    		count += 1					  
4 20 LOAD_CONST 1 ( False )				      	      if ( count > k ) :				    	    if count > 1 :					  
22 RETURN_VALUE						      		  return False ;				    		return False					  
							      	  return True ;						    	return True						  
5 >> 24 LOAD_CONST 2 ( 0 )				      								    								  
26 BUILD_LIST 1						      								    								  
28 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
30 BINARY_MULTIPLY					      								    								  
32 STORE_FAST 4 ( hash_str1 )				      								    								  
							      								    								  
6 34 SETUP_LOOP 48 ( to 84 )				      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_FAST 3 ( n )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 36 ( to 82 )				      								    								  
46 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( hash_str1 )				      								    								  
50 LOAD_GLOBAL 3 ( ord )				      								    								  
52 LOAD_FAST 0 ( str1 )					      								    								  
54 LOAD_FAST 5 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_GLOBAL 3 ( ord )				      								    								  
62 LOAD_CONST 3 ( 'a' )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 DUP_TOP_TWO						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 ROT_THREE						      								    								  
78 STORE_SUBSCR						      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
8 >> 84 LOAD_CONST 2 ( 0 )				      								    								  
86 STORE_FAST 6 ( count )				      								    								  
							      								    								  
9 88 SETUP_LOOP 98 ( to 188 )				      								    								  
90 LOAD_GLOBAL 2 ( range )				      								    								  
92 LOAD_FAST 3 ( n )					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 86 ( to 186 )				      								    								  
100 STORE_FAST 5 ( i )					      								    								  
							      								    								  
10 102 LOAD_FAST 4 ( hash_str1 )			      								    								  
104 LOAD_GLOBAL 3 ( ord )				      								    								  
106 LOAD_FAST 1 ( str2 )				      								    								  
108 LOAD_FAST 5 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 LOAD_GLOBAL 3 ( ord )				      								    								  
116 LOAD_CONST 3 ( 'a' )				      								    								  
118 CALL_FUNCTION 1					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 2 ( 0 )					      								    								  
126 COMPARE_OP 4 ( > )					      								    								  
128 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
11 130 LOAD_FAST 4 ( hash_str1 )			      								    								  
132 LOAD_GLOBAL 3 ( ord )				      								    								  
134 LOAD_FAST 1 ( str2 )				      								    								  
136 LOAD_FAST 5 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 CALL_FUNCTION 1					      								    								  
142 LOAD_GLOBAL 3 ( ord )				      								    								  
144 LOAD_CONST 3 ( 'a' )				      								    								  
146 CALL_FUNCTION 1					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 DUP_TOP_TWO						      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_CONST 4 ( 1 )					      								    								  
156 INPLACE_SUBTRACT					      								    								  
158 ROT_THREE						      								    								  
160 STORE_SUBSCR					      								    								  
162 JUMP_FORWARD 8 ( to 172 )				      								    								  
							      								    								  
13 >> 164 LOAD_FAST 6 ( count )				      								    								  
166 LOAD_CONST 4 ( 1 )					      								    								  
168 INPLACE_ADD						      								    								  
170 STORE_FAST 6 ( count )				      								    								  
							      								    								  
14 >> 172 LOAD_FAST 6 ( count )				      								    								  
174 LOAD_FAST 2 ( k )					      								    								  
176 COMPARE_OP 4 ( > )					      								    								  
178 POP_JUMP_IF_FALSE 98				      								    								  
							      								    								  
15 180 LOAD_CONST 1 ( False )				      								    								  
182 RETURN_VALUE					      								    								  
184 JUMP_ABSOLUTE 98					      								    								  
>> 186 POP_BLOCK					      								    								  
							      								    								  
16 >> 188 LOAD_CONST 5 ( True )				      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS	      ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS		    ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS		  ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS
--							      --							    --								  --
Disassembly of <code object Round_off at 0x7f33e26494b0, file def Round_off ( N , n ) :					    def Round_off ( N , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( N )					      	  b = N							    	b = N							  
2 STORE_FAST 2 ( b )					      	  c = floor ( N )					    	c = floor ( N )						  
							      	  i = 0 ;						    	i = 0							  
3 4 LOAD_GLOBAL 0 ( floor )				      	  while ( b >= 1 ) :					    	while b >= 1 :						  
6 LOAD_FAST 0 ( N )					      	      b = b / 10					    	    b = ( b / 10 )					  
8 CALL_FUNCTION 1					      	      i = i + 1						    	    i = i + 1						  
10 STORE_FAST 3 ( c )					      	  d = n - i						    	d = n - i						  
							      	  b = N							    	b = N							  
4 12 LOAD_CONST 1 ( 0 )					      	  b = b * pow ( 10 , d )				    	b = N							  
14 STORE_FAST 4 ( i )					      	  e = b + 0.5						    	b = b * pow ( 10 , d )					  
							      	  if ( float ( e ) == float ( ceil ( b ) ) ) :		    	e = b + 0.5						  
5 16 SETUP_LOOP 28 ( to 46 )				      	      f = ( ceil ( b ) )				    	if float ( e ) == float ( ceil ( b ) ) :		  
>> 18 LOAD_FAST 2 ( b )					      	      h = f - 2						    	    f = ceil ( b )					  
20 LOAD_CONST 2 ( 1 )					      	      if ( h % 2 != 0 ) :				    	    h = f - 2						  
22 COMPARE_OP 5 ( >= )					      		  e = e - 1					    	    if h % 2 != 0 :					  
24 POP_JUMP_IF_FALSE 44					      	  j = floor ( e )					    		e = e - 1					  
							      	  m = pow ( 10 , d )					    	    j = floor ( e )					  
6 26 LOAD_FAST 2 ( b )					      	  j = j / m						    	    m = pow ( e , m )					  
28 LOAD_CONST 3 ( 10 )					      	  print ( "The number after rounding-off is" , j )	    	    j = m / ( j * 10 )					  
30 BINARY_TRUE_DIVIDE					      								    	    print ( "The off number is not an error before after  
32 STORE_FAST 2 ( b )					      								    								  
							      								    								  
7 34 LOAD_FAST 4 ( i )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 4 ( i )					      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
8 >> 46 LOAD_FAST 1 ( n )				      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 STORE_FAST 5 ( d )					      								    								  
							      								    								  
9 54 LOAD_FAST 0 ( N )					      								    								  
56 STORE_FAST 2 ( b )					      								    								  
							      								    								  
10 58 LOAD_FAST 2 ( b )					      								    								  
60 LOAD_GLOBAL 1 ( pow )				      								    								  
62 LOAD_CONST 3 ( 10 )					      								    								  
64 LOAD_FAST 5 ( d )					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 STORE_FAST 2 ( b )					      								    								  
							      								    								  
11 72 LOAD_FAST 2 ( b )					      								    								  
74 LOAD_CONST 4 ( 0.5 )					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 6 ( e )					      								    								  
							      								    								  
12 80 LOAD_GLOBAL 2 ( float )				      								    								  
82 LOAD_FAST 6 ( e )					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 LOAD_GLOBAL 2 ( float )				      								    								  
88 LOAD_GLOBAL 3 ( ceil )				      								    								  
90 LOAD_FAST 2 ( b )					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
13 100 LOAD_GLOBAL 3 ( ceil )				      								    								  
102 LOAD_FAST 2 ( b )					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 STORE_FAST 7 ( f )					      								    								  
							      								    								  
14 108 LOAD_FAST 7 ( f )				      								    								  
110 LOAD_CONST 5 ( 2 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 STORE_FAST 8 ( h )					      								    								  
							      								    								  
15 116 LOAD_FAST 8 ( h )				      								    								  
118 LOAD_CONST 5 ( 2 )					      								    								  
120 BINARY_MODULO					      								    								  
122 LOAD_CONST 1 ( 0 )					      								    								  
124 COMPARE_OP 3 ( != )					      								    								  
126 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
16 128 LOAD_FAST 6 ( e )				      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 STORE_FAST 6 ( e )					      								    								  
							      								    								  
17 >> 136 LOAD_GLOBAL 0 ( floor )			      								    								  
138 LOAD_FAST 6 ( e )					      								    								  
140 CALL_FUNCTION 1					      								    								  
142 STORE_FAST 9 ( j )					      								    								  
							      								    								  
18 144 LOAD_GLOBAL 1 ( pow )				      								    								  
146 LOAD_CONST 3 ( 10 )					      								    								  
148 LOAD_FAST 5 ( d )					      								    								  
150 CALL_FUNCTION 2					      								    								  
152 STORE_FAST 10 ( m )					      								    								  
							      								    								  
19 154 LOAD_FAST 9 ( j )				      								    								  
156 LOAD_FAST 10 ( m )					      								    								  
158 BINARY_TRUE_DIVIDE					      								    								  
160 STORE_FAST 9 ( j )					      								    								  
							      								    								  
20 162 LOAD_GLOBAL 4 ( print )				      								    								  
164 LOAD_CONST 6 ( 'The number after rounding-off is' )	      								    								  
166 LOAD_FAST 9 ( j )					      								    								  
168 CALL_FUNCTION 2					      								    								  
170 POP_TOP						      								    								  
172 LOAD_CONST 0 ( None )				      								    								  
174 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DERANGEMENT_SEQUENCE				      SMALLEST_DERANGEMENT_SEQUENCE				    SMALLEST_DERANGEMENT_SEQUENCE				  SMALLEST_DERANGEMENT_SEQUENCE
--							      --							    --								  --
Disassembly of <code object generate_derangement at 0x7f33e26 def generate_derangement ( N ) :				    def generate_derangement ( N = 100 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  S = [ 0 ] * ( N + 1 )					    	S = [ 0 ] * N						  
2 BUILD_LIST 1						      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  
4 LOAD_FAST 0 ( N )					      	      S [ i ] = i					    	    S [ i ] = i						  
6 LOAD_CONST 2 ( 1 )					      	  D = [ 0 ] * ( N + 1 )					    	D = [ 0 ] * N + 1					  
8 BINARY_ADD						      	  for i in range ( 1 , N + 1 , 2 ) :			    	for i in range ( 1 , N + 1 , 2 ) :			  
10 BINARY_MULTIPLY					      	      if i == N :					    	    if i == N :						  
12 STORE_FAST 1 ( S )					      		  D [ N ] = S [ N - 1 ]				    		D [ N ] = S [ N - 1 ]				  
							      		  D [ N - 1 ] = S [ N ]				    		D [ i ] = S [ N ]				  
3 14 SETUP_LOOP 30 ( to 46 )				      	      else :						    		D [ i ] = S [ N ]				  
16 LOAD_GLOBAL 0 ( range )				      		  D [ i ] = i + 1				    	    else :						  
18 LOAD_CONST 2 ( 1 )					      		  D [ i + 1 ] = i				    		D [ i ] = i + 1					  
20 LOAD_FAST 0 ( N )					      	  for i in range ( 1 , N + 1 ) :			    		D [ i + 1 ] = i					  
22 LOAD_CONST 2 ( 1 )					      	      print ( D [ i ] , end = " " )			    	for i in range ( 1 , N + 1 ) :				  
24 BINARY_ADD						      	  print ( )						    	    print ( D [ i ] )					  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 12 ( to 44 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_FAST 1 ( S )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 STORE_SUBSCR						      								    								  
42 JUMP_ABSOLUTE 30					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_CONST 1 ( 0 )				      								    								  
48 BUILD_LIST 1						      								    								  
50 LOAD_FAST 0 ( N )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 BINARY_MULTIPLY					      								    								  
58 STORE_FAST 3 ( D )					      								    								  
							      								    								  
6 60 SETUP_LOOP 90 ( to 152 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 LOAD_FAST 0 ( N )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 70 ( to 150 )				      								    								  
80 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 82 LOAD_FAST 2 ( i )					      								    								  
84 LOAD_FAST 0 ( N )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
8 90 LOAD_FAST 1 ( S )					      								    								  
92 LOAD_FAST 0 ( N )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 3 ( D )					      								    								  
102 LOAD_FAST 0 ( N )					      								    								  
104 STORE_SUBSCR					      								    								  
							      								    								  
9 106 LOAD_FAST 1 ( S )					      								    								  
108 LOAD_FAST 0 ( N )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 3 ( D )					      								    								  
114 LOAD_FAST 0 ( N )					      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 STORE_SUBSCR					      								    								  
122 JUMP_ABSOLUTE 78					      								    								  
							      								    								  
11 >> 124 LOAD_FAST 2 ( i )				      								    								  
126 LOAD_CONST 2 ( 1 )					      								    								  
128 BINARY_ADD						      								    								  
130 LOAD_FAST 3 ( D )					      								    								  
132 LOAD_FAST 2 ( i )					      								    								  
134 STORE_SUBSCR					      								    								  
							      								    								  
12 136 LOAD_FAST 2 ( i )				      								    								  
138 LOAD_FAST 3 ( D )					      								    								  
140 LOAD_FAST 2 ( i )					      								    								  
142 LOAD_CONST 2 ( 1 )					      								    								  
144 BINARY_ADD						      								    								  
146 STORE_SUBSCR					      								    								  
148 JUMP_ABSOLUTE 78					      								    								  
>> 150 POP_BLOCK					      								    								  
							      								    								  
13 >> 152 SETUP_LOOP 38 ( to 192 )			      								    								  
154 LOAD_GLOBAL 0 ( range )				      								    								  
156 LOAD_CONST 2 ( 1 )					      								    								  
158 LOAD_FAST 0 ( N )					      								    								  
160 LOAD_CONST 2 ( 1 )					      								    								  
162 BINARY_ADD						      								    								  
164 CALL_FUNCTION 2					      								    								  
166 GET_ITER						      								    								  
>> 168 FOR_ITER 20 ( to 190 )				      								    								  
170 STORE_FAST 2 ( i )					      								    								  
							      								    								  
14 172 LOAD_GLOBAL 1 ( print )				      								    								  
174 LOAD_FAST 3 ( D )					      								    								  
176 LOAD_FAST 2 ( i )					      								    								  
178 BINARY_SUBSCR					      								    								  
180 LOAD_CONST 4 ( ' ' )				      								    								  
182 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
184 CALL_FUNCTION_KW 2					      								    								  
186 POP_TOP						      								    								  
188 JUMP_ABSOLUTE 168					      								    								  
>> 190 POP_BLOCK					      								    								  
							      								    								  
15 >> 192 LOAD_GLOBAL 1 ( print )			      								    								  
194 CALL_FUNCTION 0					      								    								  
196 POP_TOP						      								    								  
198 LOAD_CONST 0 ( None )				      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		      REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		    REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		  REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX
--							      --							    --								  --
Disassembly of <code object minRemovalsDP at 0x7f33e2653f60,  def minRemovalsDP ( arr , n ) :				    def minRemovalsDP ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1 )				      	  longest_start = - 1 ;					    	longest_start = - 1					  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( longest_start )			      	  longest_end = 0 ;					    	longest_end = 0						  _sa.valid/REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN
							      	  for start in range ( n ) :				    	for start in range ( n ) :				  _MAX.py", line 55	if ( end - start ) > longest
3 4 LOAD_CONST 2 ( 0 )					      	      min = sys.maxsize ;				    	    min = sys.maxsize					  _end - longest_start == - 1 ) :
6 STORE_FAST 3 ( longest_end )				      	      max = - sys.maxsize ;				    	    max = - sys.maxsize					  					    ^ Syntax
							      	      for end in range ( start , n ) :			    	    for end in range ( start , n ) :			  Error: invalid syntax
4 8 SETUP_LOOP 128 ( to 138 )				      		  val = arr [ end ] ;				    		val = arr [ end ]				  
10 LOAD_GLOBAL 0 ( range )				      		  if ( val < min ) :				    		if val < min :					  
12 LOAD_FAST 1 ( n )					      		      min = val ;				    		    min = val					  
14 CALL_FUNCTION 1					      		  if ( val > max ) :				    		if val > max :					  
16 GET_ITER						      		      max = val ;				    		    max = val					  
>> 18 FOR_ITER 116 ( to 136 )				      		  if ( 2 * min <= max ) :			    		if 2 * min <= max :				  
20 STORE_FAST 4 ( start )				      		      break ;					    		    break					  
							      		  if ( end - start > longest_end - longest_start or 		if ( end - start ) > longest_end - longest_start  
5 22 LOAD_GLOBAL 1 ( sys )				      		      longest_start = start ;			    		    longest_start = start			  
24 LOAD_ATTR 2 ( maxsize )				      		      longest_end = end ;			    		    longest_end					  
26 STORE_FAST 5 ( min )					      	  if ( longest_start == - 1 ) :				    	if longest_start == - 1 :				  
							      	      return n ;					    	    return longest_- n + longest_- 1			  
6 28 LOAD_GLOBAL 1 ( sys )				      	  return ( n - ( longest_end - longest_start + 1 ) ) ;	    	return longest_end + longest_- 1			  
30 LOAD_ATTR 2 ( maxsize )				      								    								  
32 UNARY_NEGATIVE					      								    								  
34 STORE_FAST 6 ( max )					      								    								  
							      								    								  
7 36 SETUP_LOOP 96 ( to 134 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 4 ( start )				      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 82 ( to 132 )				      								    								  
50 STORE_FAST 7 ( end )					      								    								  
							      								    								  
8 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 7 ( end )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 STORE_FAST 8 ( val )					      								    								  
							      								    								  
9 60 LOAD_FAST 8 ( val )				      								    								  
62 LOAD_FAST 5 ( min )					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
10 68 LOAD_FAST 8 ( val )				      								    								  
70 STORE_FAST 5 ( min )					      								    								  
							      								    								  
11 >> 72 LOAD_FAST 8 ( val )				      								    								  
74 LOAD_FAST 6 ( max )					      								    								  
76 COMPARE_OP 4 ( > )					      								    								  
78 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
12 80 LOAD_FAST 8 ( val )				      								    								  
82 STORE_FAST 6 ( max )					      								    								  
							      								    								  
13 >> 84 LOAD_CONST 3 ( 2 )				      								    								  
86 LOAD_FAST 5 ( min )					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 LOAD_FAST 6 ( max )					      								    								  
92 COMPARE_OP 1 ( <= )					      								    								  
94 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
14 96 BREAK_LOOP					      								    								  
							      								    								  
15 >> 98 LOAD_FAST 7 ( end )				      								    								  
100 LOAD_FAST 4 ( start )				      								    								  
102 BINARY_SUBTRACT					      								    								  
104 LOAD_FAST 3 ( longest_end )				      								    								  
106 LOAD_FAST 2 ( longest_start )			      								    								  
108 BINARY_SUBTRACT					      								    								  
110 COMPARE_OP 4 ( > )					      								    								  
112 POP_JUMP_IF_TRUE 122				      								    								  
114 LOAD_FAST 2 ( longest_start )			      								    								  
116 LOAD_CONST 1 ( - 1 )				      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 48				      								    								  
							      								    								  
16 >> 122 LOAD_FAST 4 ( start )				      								    								  
124 STORE_FAST 2 ( longest_start )			      								    								  
							      								    								  
17 126 LOAD_FAST 7 ( end )				      								    								  
128 STORE_FAST 3 ( longest_end )			      								    								  
130 JUMP_ABSOLUTE 48					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 JUMP_ABSOLUTE 18					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
18 >> 138 LOAD_FAST 2 ( longest_start )			      								    								  
140 LOAD_CONST 1 ( - 1 )				      								    								  
142 COMPARE_OP 2 ( == )					      								    								  
144 POP_JUMP_IF_FALSE 150				      								    								  
							      								    								  
19 146 LOAD_FAST 1 ( n )				      								    								  
148 RETURN_VALUE					      								    								  
							      								    								  
20 >> 150 LOAD_FAST 1 ( n )				      								    								  
152 LOAD_FAST 3 ( longest_end )				      								    								  
154 LOAD_FAST 2 ( longest_start )			      								    								  
156 BINARY_SUBTRACT					      								    								  
158 LOAD_CONST 4 ( 1 )					      								    								  
160 BINARY_ADD						      								    								  
162 BINARY_SUBTRACT					      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_<unk> F
--							      --							    --								  --
Disassembly of <code object findLength at 0x7f33e2649a50, fil def findLength ( str ) :					    def findLength ( str ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  maxlen = 0						    	maxlen = 0						  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 1 ( n )					      	      for j in range ( i + 1 , n , 2 ) :		    	    for j in range ( i + 1 , n , 2 ) :			  
							      		  length = j - i + 1				    		length = j - i + 1				  
3 8 LOAD_CONST 1 ( 0 )					      		  leftsum = 0					    		leftsum = 0					  
10 STORE_FAST 2 ( maxlen )				      		  rightsum = 0					    		rightsum = 0					  
							      		  for k in range ( 0 , int ( length / 2 ) ) :	    		for k in range ( 0 , int ( length / 2 ) ) :	  
4 12 SETUP_LOOP 180 ( to 194 )				      		      leftsum += ( int ( str [ i + k ] ) - int ( '0 		    leftsum += int ( str [ i + k ] ) - int ( '0'  
14 LOAD_GLOBAL 1 ( range )				      		      rightsum += ( int ( str [ i + k + int ( lengt 		    rightsum += int ( str [ i + k + int ( length  
16 LOAD_CONST 1 ( 0 )					      		  if ( leftsum == rightsum and maxlen < length ) :  	    if ( rightsum == maxlen ) and ( maxlen [ length ] < l 
18 LOAD_FAST 1 ( n )					      		      maxlen = length				    		maxlen = 0					  
20 CALL_FUNCTION 2					      	  return maxlen						    	return ( maxlen , maxlen )				  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 166 ( to 192 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 SETUP_LOOP 160 ( to 190 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 140 ( to 188 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 LOAD_FAST 4 ( j )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 5 ( length )				      								    								  
							      								    								  
7 62 LOAD_CONST 1 ( 0 )					      								    								  
64 STORE_FAST 6 ( leftsum )				      								    								  
							      								    								  
8 66 LOAD_CONST 1 ( 0 )					      								    								  
68 STORE_FAST 7 ( rightsum )				      								    								  
							      								    								  
9 70 SETUP_LOOP 94 ( to 166 )				      								    								  
72 LOAD_GLOBAL 1 ( range )				      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 LOAD_GLOBAL 2 ( int )				      								    								  
78 LOAD_FAST 5 ( length )				      								    								  
80 LOAD_CONST 3 ( 2 )					      								    								  
82 BINARY_TRUE_DIVIDE					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 72 ( to 164 )				      								    								  
92 STORE_FAST 8 ( k )					      								    								  
							      								    								  
10 94 LOAD_FAST 6 ( leftsum )				      								    								  
96 LOAD_GLOBAL 2 ( int )				      								    								  
98 LOAD_FAST 0 ( str )					      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 LOAD_FAST 8 ( k )					      								    								  
104 BINARY_ADD						      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 LOAD_GLOBAL 2 ( int )				      								    								  
112 LOAD_CONST 4 ( '0' )				      								    								  
114 CALL_FUNCTION 1					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 INPLACE_ADD						      								    								  
120 STORE_FAST 6 ( leftsum )				      								    								  
							      								    								  
11 122 LOAD_FAST 7 ( rightsum )				      								    								  
124 LOAD_GLOBAL 2 ( int )				      								    								  
126 LOAD_FAST 0 ( str )					      								    								  
128 LOAD_FAST 3 ( i )					      								    								  
130 LOAD_FAST 8 ( k )					      								    								  
132 BINARY_ADD						      								    								  
134 LOAD_GLOBAL 2 ( int )				      								    								  
136 LOAD_FAST 5 ( length )				      								    								  
138 LOAD_CONST 3 ( 2 )					      								    								  
140 BINARY_TRUE_DIVIDE					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 BINARY_ADD						      								    								  
146 BINARY_SUBSCR					      								    								  
148 CALL_FUNCTION 1					      								    								  
150 LOAD_GLOBAL 2 ( int )				      								    								  
152 LOAD_CONST 4 ( '0' )				      								    								  
154 CALL_FUNCTION 1					      								    								  
156 BINARY_SUBTRACT					      								    								  
158 INPLACE_ADD						      								    								  
160 STORE_FAST 7 ( rightsum )				      								    								  
162 JUMP_ABSOLUTE 90					      								    								  
>> 164 POP_BLOCK					      								    								  
							      								    								  
12 >> 166 LOAD_FAST 6 ( leftsum )			      								    								  
168 LOAD_FAST 7 ( rightsum )				      								    								  
170 COMPARE_OP 2 ( == )					      								    								  
172 POP_JUMP_IF_FALSE 46				      								    								  
174 LOAD_FAST 2 ( maxlen )				      								    								  
176 LOAD_FAST 5 ( length )				      								    								  
178 COMPARE_OP 0 ( < )					      								    								  
180 POP_JUMP_IF_FALSE 46				      								    								  
							      								    								  
13 182 LOAD_FAST 5 ( length )				      								    								  
184 STORE_FAST 2 ( maxlen )				      								    								  
186 JUMP_ABSOLUTE 46					      								    								  
>> 188 POP_BLOCK					      								    								  
>> 190 JUMP_ABSOLUTE 24					      								    								  
>> 192 POP_BLOCK					      								    								  
							      								    								  
14 >> 194 LOAD_FAST 2 ( maxlen )			      								    								  
196 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE		      LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE			    LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE			  LONGEST_<unk> ASING_ODD_EVEN_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object longOddEvenIncSeq at 0x7f33e2649a def longOddEvenIncSeq ( arr , n ) :			    def longOddEvenIncSeq ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  lioes = list ( )					    	lioes = list ( )					  
2 CALL_FUNCTION 0					      	  maxLen = 0						    	global 14						  
4 STORE_FAST 2 ( lioes )				      	  for i in range ( n ) :				    	if ( 0 ) < 18 ) :					  
							      	      lioes.append ( 1 )				    	    lioes.append ( 1 )					  
3 6 LOAD_CONST 1 ( 0 )					      	  i = 1							    	i = 1							  
8 STORE_FAST 3 ( maxLen )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( i ) :				    	    for j in range ( n ) :				  
4 10 SETUP_LOOP 26 ( to 38 )				      		  if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr  		for j in range ( i ) :				  
12 LOAD_GLOBAL 1 ( range )				      		      lioes [ i ] = lioes [ j ] + 1		    		    if arr [ i ] > arr [ j ] and ( arr [ i ] + ar 
14 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    			2 = ( lioes [ j ] + 1 )			  
16 CALL_FUNCTION 1					      	      if maxLen < lioes [ i ] :				    	for i in range ( n ) :					  
18 GET_ITER						      		  maxLen = lioes [ i ]				    	    if ( ( i < 18 ) ) :					  
>> 20 FOR_ITER 14 ( to 36 )				      	  return maxLen						    		return ( 14 , "" )				  
22 STORE_FAST 4 ( i )					      								    	return ( add ( 154 ) )					  
							      								    								  
5 24 LOAD_FAST 2 ( lioes )				      								    								  
26 LOAD_METHOD 2 ( append )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 20					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
6 >> 38 LOAD_CONST 2 ( 1 )				      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 42 SETUP_LOOP 110 ( to 154 )				      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 98 ( to 152 )				      								    								  
54 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 56 SETUP_LOOP 92 ( to 150 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 80 ( to 148 )				      								    								  
68 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 COMPARE_OP 4 ( > )					      								    								  
84 POP_JUMP_IF_FALSE 66					      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 5 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 BINARY_ADD						      								    								  
100 LOAD_CONST 3 ( 2 )					      								    								  
102 BINARY_MODULO					      								    								  
104 LOAD_CONST 1 ( 0 )					      								    								  
106 COMPARE_OP 3 ( != )					      								    								  
108 POP_JUMP_IF_FALSE 66				      								    								  
110 LOAD_FAST 2 ( lioes )				      								    								  
112 LOAD_FAST 4 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 2 ( lioes )				      								    								  
118 LOAD_FAST 5 ( j )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 COMPARE_OP 0 ( < )					      								    								  
128 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
10 130 LOAD_FAST 2 ( lioes )				      								    								  
132 LOAD_FAST 5 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 BINARY_ADD						      								    								  
140 LOAD_FAST 2 ( lioes )				      								    								  
142 LOAD_FAST 4 ( i )					      								    								  
144 STORE_SUBSCR					      								    								  
146 JUMP_ABSOLUTE 66					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 JUMP_ABSOLUTE 52					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
11 >> 154 SETUP_LOOP 36 ( to 192 )			      								    								  
156 LOAD_GLOBAL 1 ( range )				      								    								  
158 LOAD_FAST 1 ( n )					      								    								  
160 CALL_FUNCTION 1					      								    								  
162 GET_ITER						      								    								  
>> 164 FOR_ITER 24 ( to 190 )				      								    								  
166 STORE_FAST 4 ( i )					      								    								  
							      								    								  
12 168 LOAD_FAST 3 ( maxLen )				      								    								  
170 LOAD_FAST 2 ( lioes )				      								    								  
172 LOAD_FAST 4 ( i )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 COMPARE_OP 0 ( < )					      								    								  
178 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
13 180 LOAD_FAST 2 ( lioes )				      								    								  
182 LOAD_FAST 4 ( i )					      								    								  
184 BINARY_SUBSCR					      								    								  
186 STORE_FAST 3 ( maxLen )				      								    								  
188 JUMP_ABSOLUTE 164					      								    								  
>> 190 POP_BLOCK					      								    								  
							      								    								  
14 >> 192 LOAD_FAST 3 ( maxLen )			      								    								  
194 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_SUBSET_ARRAY				      MAXIMUM_PR<unk> CT_SUBSET_ARRAY				    MAXIMUM_PR<unk> CT_SUBSET_ARRAY				  MAXIMUM_PR<unk> CT_SUBSET_ARRAY
--							      --							    --								  --
Disassembly of <code object maxProductSubset at 0x7f33e2653f6 def maxProductSubset ( a , n ) :				    def maxProductSubset ( a , n ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if n == 1 :						    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return a [ 0 ]					    	    return a [ 0 ]					  
4 COMPARE_OP 2 ( == )					      	  max_neg = - 999999999999				    	max_neg = - 999999999999				  
6 POP_JUMP_IF_FALSE 16					      	  count_neg = 0						    	count_zero = 0						  
							      	  count_zero = 0					    	count_zero = 0						  
3 8 LOAD_FAST 0 ( a )					      	  prod = 1						    	prod = 1						  
10 LOAD_CONST 2 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
12 BINARY_SUBSCR					      	      if a [ i ] == 0 :					    	    if a [ i ] == 0 :					  
14 RETURN_VALUE						      		  count_zero += 1				    		count_zero += 1					  
							      		  continue					    		continue					  
4 >> 16 LOAD_CONST 3 ( - 999999999999 )			      	      if a [ i ] < 0 :					    	    if a [ i ] < 0 :					  
18 STORE_FAST 2 ( max_neg )				      		  count_neg += 1				    		count_neg += 1					  
							      		  max_neg = max ( max_neg , a [ i ] )		    		max_neg = max ( max_neg , a [ i ] )		  
5 20 LOAD_CONST 2 ( 0 )					      	      prod = prod * a [ i ]				    	    prod = prod * a [ i ]				  
22 STORE_FAST 3 ( count_neg )				      	  if count_zero == n :					    	if count_zero == n :					  
							      	      return 0						    	    return 0						  
6 24 LOAD_CONST 2 ( 0 )					      	  if count_neg & 1 :					    	if count_neg == 1 :					  
26 STORE_FAST 4 ( count_zero )				      	      if ( count_neg == 1 and count_zero > 0 and count_zero 	    if count_neg == 0 and count_zero == 0 :		  
							      		  return 0					    		return 0					  
7 28 LOAD_CONST 1 ( 1 )					      	      prod = int ( prod / max_neg )			    	    if count_zero == n :				  
30 STORE_FAST 5 ( prod )				      	  return prod						    		return 0					  
							      								    	    if count_neg == 1 :					  
8 32 SETUP_LOOP 84 ( to 118 )				      								    		return 0					  
34 LOAD_GLOBAL 0 ( range )				      								    	    if count_neg == 1 :					  
36 LOAD_FAST 1 ( n )					      								    		return 0					  
38 CALL_FUNCTION 1					      								    	    if count_zero == 1 :				  
40 GET_ITER						      								    		return 0					  
>> 42 FOR_ITER 72 ( to 116 )				      								    	    return 0						  
44 STORE_FAST 6 ( i )					      								    	prod = prod / ( max_neg / 1 )				  
							      								    	return 0						  
9 46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 6 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_CONST 2 ( 0 )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
10 58 LOAD_FAST 4 ( count_zero )			      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( count_zero )				      								    								  
							      								    								  
11 66 JUMP_ABSOLUTE 42					      								    								  
							      								    								  
12 >> 68 LOAD_FAST 0 ( a )				      								    								  
70 LOAD_FAST 6 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 2 ( 0 )					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
13 80 LOAD_FAST 3 ( count_neg )				      								    								  
82 LOAD_CONST 1 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 3 ( count_neg )				      								    								  
							      								    								  
14 88 LOAD_GLOBAL 1 ( max )				      								    								  
90 LOAD_FAST 2 ( max_neg )				      								    								  
92 LOAD_FAST 0 ( a )					      								    								  
94 LOAD_FAST 6 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 CALL_FUNCTION 2					      								    								  
100 STORE_FAST 2 ( max_neg )				      								    								  
							      								    								  
15 >> 102 LOAD_FAST 5 ( prod )				      								    								  
104 LOAD_FAST 0 ( a )					      								    								  
106 LOAD_FAST 6 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 BINARY_MULTIPLY					      								    								  
112 STORE_FAST 5 ( prod )				      								    								  
114 JUMP_ABSOLUTE 42					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
16 >> 118 LOAD_FAST 4 ( count_zero )			      								    								  
120 LOAD_FAST 1 ( n )					      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
17 126 LOAD_CONST 2 ( 0 )				      								    								  
128 RETURN_VALUE					      								    								  
							      								    								  
18 >> 130 LOAD_FAST 3 ( count_neg )			      								    								  
132 LOAD_CONST 1 ( 1 )					      								    								  
134 BINARY_AND						      								    								  
136 POP_JUMP_IF_FALSE 182				      								    								  
							      								    								  
19 138 LOAD_FAST 3 ( count_neg )			      								    								  
140 LOAD_CONST 1 ( 1 )					      								    								  
142 COMPARE_OP 2 ( == )					      								    								  
144 POP_JUMP_IF_FALSE 170				      								    								  
146 LOAD_FAST 4 ( count_zero )				      								    								  
148 LOAD_CONST 2 ( 0 )					      								    								  
150 COMPARE_OP 4 ( > )					      								    								  
152 POP_JUMP_IF_FALSE 170				      								    								  
154 LOAD_FAST 4 ( count_zero )				      								    								  
156 LOAD_FAST 3 ( count_neg )				      								    								  
158 BINARY_ADD						      								    								  
160 LOAD_FAST 1 ( n )					      								    								  
162 COMPARE_OP 2 ( == )					      								    								  
164 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
20 166 LOAD_CONST 2 ( 0 )				      								    								  
168 RETURN_VALUE					      								    								  
							      								    								  
21 >> 170 LOAD_GLOBAL 2 ( int )				      								    								  
172 LOAD_FAST 5 ( prod )				      								    								  
174 LOAD_FAST 2 ( max_neg )				      								    								  
176 BINARY_TRUE_DIVIDE					      								    								  
178 CALL_FUNCTION 1					      								    								  
180 STORE_FAST 5 ( prod )				      								    								  
							      								    								  
22 >> 182 LOAD_FAST 5 ( prod )				      								    								  
184 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SORTED_ROWS_MATRIX				      COUNT_SORTED_ROWS_MATRIX					    COUNT_SORTED_ROWS_MATRIX					  COUNT_SORTED_ROWS_MATRIX
--							      --							    --								  --
Disassembly of <code object sortedCount at 0x7f33e2653f60, fi def sortedCount ( mat , r , c ) :				    def sortedCount ( mat , r , c ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( result )				      	  for i in range ( r ) :				    	for i in range ( r ) :					  _sa.valid/COUNT_SORTED_ROWS_MATRIX.py", line 52
							      	      j = 0						    	    j = 0						    return result     ^ SyntaxError: 'return' outsid
3 4 SETUP_LOOP 92 ( to 98 )				      	      for j in range ( c - 1 ) :			    	    for j in range ( c - 1 ) :				  e function
6 LOAD_GLOBAL 0 ( range )				      		  if mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] :	    		if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) :	  
8 LOAD_FAST 1 ( r )					      		      break					    		    break					  
10 CALL_FUNCTION 1					      	      if j == c - 2 :					    	if j == c - 2 :						  
12 GET_ITER						      		  result += 1					    	    result += 1						  
>> 14 FOR_ITER 80 ( to 96 )				      	  for i in range ( 0 , r ) :				    for i in range ( 0 , r ) :					  
16 STORE_FAST 4 ( i )					      	      j = 0						    	j = 0							  
							      	      for j in range ( c - 1 , 0 , - 1 ) :		    	for j in range ( c - 1 , 0 , - 1 ) :			  
4 18 LOAD_CONST 1 ( 0 )					      		  if mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] :	    	    if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) :	  
20 STORE_FAST 5 ( j )					      		      break					    		break						  
							      	      if c > 1 and j == 1 :				    	if c > j and j == 0 :					  
5 22 SETUP_LOOP 50 ( to 74 )				      		  result += 1					    	    result += 1						  
24 LOAD_GLOBAL 0 ( range )				      	  return result						    return result						  
26 LOAD_FAST 2 ( c )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 34 ( to 72 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 40 LOAD_FAST 0 ( mat )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( mat )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 5 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 1 ( <= )					      								    								  
66 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
7 68 BREAK_LOOP						      								    								  
70 JUMP_ABSOLUTE 36					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_FAST 5 ( j )				      								    								  
76 LOAD_FAST 2 ( c )					      								    								  
78 LOAD_CONST 3 ( 2 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 COMPARE_OP 2 ( == )					      								    								  
84 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
9 86 LOAD_FAST 3 ( result )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 3 ( result )				      								    								  
94 JUMP_ABSOLUTE 14					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
10 >> 98 SETUP_LOOP 102 ( to 202 )			      								    								  
100 LOAD_GLOBAL 0 ( range )				      								    								  
102 LOAD_CONST 1 ( 0 )					      								    								  
104 LOAD_FAST 1 ( r )					      								    								  
106 CALL_FUNCTION 2					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 88 ( to 200 )				      								    								  
112 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 114 LOAD_CONST 1 ( 0 )				      								    								  
116 STORE_FAST 5 ( j )					      								    								  
							      								    								  
12 118 SETUP_LOOP 54 ( to 174 )				      								    								  
120 LOAD_GLOBAL 0 ( range )				      								    								  
122 LOAD_FAST 2 ( c )					      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_CONST 1 ( 0 )					      								    								  
130 LOAD_CONST 4 ( - 1 )				      								    								  
132 CALL_FUNCTION 3					      								    								  
134 GET_ITER						      								    								  
>> 136 FOR_ITER 34 ( to 172 )				      								    								  
138 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 140 LOAD_FAST 0 ( mat )				      								    								  
142 LOAD_FAST 4 ( i )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 5 ( j )					      								    								  
148 LOAD_CONST 2 ( 1 )					      								    								  
150 BINARY_SUBTRACT					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 0 ( mat )					      								    								  
156 LOAD_FAST 4 ( i )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_FAST 5 ( j )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 COMPARE_OP 1 ( <= )					      								    								  
166 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
14 168 BREAK_LOOP					      								    								  
170 JUMP_ABSOLUTE 136					      								    								  
>> 172 POP_BLOCK					      								    								  
							      								    								  
15 >> 174 LOAD_FAST 2 ( c )				      								    								  
176 LOAD_CONST 2 ( 1 )					      								    								  
178 COMPARE_OP 4 ( > )					      								    								  
180 POP_JUMP_IF_FALSE 110				      								    								  
182 LOAD_FAST 5 ( j )					      								    								  
184 LOAD_CONST 2 ( 1 )					      								    								  
186 COMPARE_OP 2 ( == )					      								    								  
188 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
16 190 LOAD_FAST 3 ( result )				      								    								  
192 LOAD_CONST 2 ( 1 )					      								    								  
194 INPLACE_ADD						      								    								  
196 STORE_FAST 3 ( result )				      								    								  
198 JUMP_ABSOLUTE 110					      								    								  
>> 200 POP_BLOCK					      								    								  
							      								    								  
17 >> 202 LOAD_FAST 3 ( result )			      								    								  
204 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>	      REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>		    REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>		  REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURR<unk>
--							      --							    --								  --
Disassembly of <code object arrangeString at 0x7f33e2649a50,  def arrangeString ( str1 , x , y ) :			    def arrangeString ( str1 , x , y ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count_0 = 0						    	count_0 = 0						  
2 STORE_FAST 3 ( count_0 )				      	  count_1 = 0						    	count_1 = 0						  
							      	  n = len ( str1 )					    	n = len ( str1 )					  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 4 ( count_1 )				      	      if str1 [ i ] == '0' :				    	    if str1 [ i ] == '0' :				  
							      		  count_0 += 1					    		count_0 += 1					  
4 8 LOAD_GLOBAL 0 ( len )				      	      else :						    	    else :						  
10 LOAD_FAST 0 ( str1 )					      		  count_1 += 1					    		count_1 += 1					  
12 CALL_FUNCTION 1					      	  while count_0 > 0 or count_1 > 0 :			    	while count_0 > 0 or count_1 > 0 :			  
14 STORE_FAST 5 ( n )					      	      for i in range ( 0 , x ) :			    	    for i in range ( 0 , x ) :				  
							      		  if count_0 > 0 :				    		if count_0 > 0 :				  
5 16 SETUP_LOOP 46 ( to 64 )				      		      print ( "0" , end = "" )			    		    print ( '0' , end = '' )			  
18 LOAD_GLOBAL 1 ( range )				      		      count_0 -= 1				    		    count_0 -= 1				  
20 LOAD_FAST 5 ( n )					      	      for j in range ( 0 , y ) :			    	for j in range ( 0 , y ) :				  
22 CALL_FUNCTION 1					      		  if count_1 > 0 :				    	    if count_1 > 0 :					  
24 GET_ITER						      		      print ( "1" , end = "" )			    		print ( '1' , end = '1' )			  
>> 26 FOR_ITER 34 ( to 62 )				      		      count_1 -= 1				    		count_0 -= 1					  
28 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( str1 )				      								    								  
32 LOAD_FAST 6 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 2 ( '0' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 42 LOAD_FAST 3 ( count_0 )				      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( count_0 )				      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
9 >> 52 LOAD_FAST 4 ( count_1 )				      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 4 ( count_1 )				      								    								  
60 JUMP_ABSOLUTE 26					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
10 >> 64 SETUP_LOOP 116 ( to 182 )			      								    								  
>> 66 LOAD_FAST 3 ( count_0 )				      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 4 ( > )					      								    								  
72 POP_JUMP_IF_TRUE 82					      								    								  
74 LOAD_FAST 4 ( count_1 )				      								    								  
76 LOAD_CONST 1 ( 0 )					      								    								  
78 COMPARE_OP 4 ( > )					      								    								  
80 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
11 >> 82 SETUP_LOOP 46 ( to 130 )			      								    								  
84 LOAD_GLOBAL 1 ( range )				      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 LOAD_FAST 1 ( x )					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 32 ( to 128 )				      								    								  
96 STORE_FAST 6 ( i )					      								    								  
							      								    								  
12 98 LOAD_FAST 3 ( count_0 )				      								    								  
100 LOAD_CONST 1 ( 0 )					      								    								  
102 COMPARE_OP 4 ( > )					      								    								  
104 POP_JUMP_IF_FALSE 94				      								    								  
							      								    								  
13 106 LOAD_GLOBAL 2 ( print )				      								    								  
108 LOAD_CONST 2 ( '0' )				      								    								  
110 LOAD_CONST 4 ( '' )					      								    								  
112 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
114 CALL_FUNCTION_KW 2					      								    								  
116 POP_TOP						      								    								  
							      								    								  
14 118 LOAD_FAST 3 ( count_0 )				      								    								  
120 LOAD_CONST 3 ( 1 )					      								    								  
122 INPLACE_SUBTRACT					      								    								  
124 STORE_FAST 3 ( count_0 )				      								    								  
126 JUMP_ABSOLUTE 94					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
15 >> 130 SETUP_LOOP 46 ( to 178 )			      								    								  
132 LOAD_GLOBAL 1 ( range )				      								    								  
134 LOAD_CONST 1 ( 0 )					      								    								  
136 LOAD_FAST 2 ( y )					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 GET_ITER						      								    								  
>> 142 FOR_ITER 32 ( to 176 )				      								    								  
144 STORE_FAST 7 ( j )					      								    								  
							      								    								  
16 146 LOAD_FAST 4 ( count_1 )				      								    								  
148 LOAD_CONST 1 ( 0 )					      								    								  
150 COMPARE_OP 4 ( > )					      								    								  
152 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
17 154 LOAD_GLOBAL 2 ( print )				      								    								  
156 LOAD_CONST 6 ( '1' )				      								    								  
158 LOAD_CONST 4 ( '' )					      								    								  
160 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
162 CALL_FUNCTION_KW 2					      								    								  
164 POP_TOP						      								    								  
							      								    								  
18 166 LOAD_FAST 4 ( count_1 )				      								    								  
168 LOAD_CONST 3 ( 1 )					      								    								  
170 INPLACE_SUBTRACT					      								    								  
172 STORE_FAST 4 ( count_1 )				      								    								  
174 JUMP_ABSOLUTE 142					      								    								  
>> 176 POP_BLOCK					      								    								  
>> 178 JUMP_ABSOLUTE 66					      								    								  
>> 180 POP_BLOCK					      								    								  
>> 182 LOAD_CONST 0 ( None )				      								    								  
184 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2			      PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2			    PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2			  PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2
--							      --							    --								  --
Disassembly of <code object minimumSquare at 0x7f33e2653ed0,  def minimumSquare ( m , n ) :				    def minimumSquare ( m , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 10000000000 )			      	  vertical_min = 10000000000				    	vertical_min = 10000000000				  
2 STORE_FAST 2 ( vertical_min )				      	  horizontal_min = 10000000000				    	horizontal_min = 10000000000				  
							      	  if m == n :						    	if m == n :						  
3 4 LOAD_CONST 1 ( 10000000000 )			      	      return 1						    	    return 1						  
6 STORE_FAST 3 ( horizontal_min )			      	  if dp [ m ] [ n ] != 0 :				    	if dp [ m ] [ n ] != 0 :				  
							      	      return dp [ m ] [ n ]				    	    return dp [ m ] [ n ]				  
4 8 LOAD_FAST 0 ( m )					      	  for i in range ( 1 , m // 2 + 1 ) :			    	for i in range ( 1 , ( m // 2 ) + 1 ) :			  
10 LOAD_FAST 1 ( n )					      	      horizontal_min = min ( minimumSquare ( i , n ) + mini 	    horizontal_min = min ( minimumSquare , i , n ) , mini 
12 COMPARE_OP 2 ( == )					      	  for j in range ( 1 , n // 2 + 1 ) :			    	for j in range ( 1 , n // 2 + 1 ) :			  
14 POP_JUMP_IF_FALSE 20					      	      vertical_min = min ( minimumSquare ( m , j ) + minimu 	    vertical_= min ( minimumSquare ( m , j ) + minimumSqu 
							      	  dp [ m ] [ n ] = min ( vertical_min , horizontal_min )    return min ( vertical_, dp [ m ] [ n ] )			  
5 16 LOAD_CONST 2 ( 1 )					      	  return dp [ m ] [ n ]					    								  
18 RETURN_VALUE						      								    								  
							      								    								  
6 >> 20 LOAD_GLOBAL 0 ( dp )				      								    								  
22 LOAD_FAST 0 ( m )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 3 ( 0 )					      								    								  
32 COMPARE_OP 3 ( != )					      								    								  
34 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( dp )				      								    								  
38 LOAD_FAST 0 ( m )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
8 >> 48 SETUP_LOOP 56 ( to 106 )			      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 LOAD_FAST 0 ( m )					      								    								  
56 LOAD_CONST 4 ( 2 )					      								    								  
58 BINARY_FLOOR_DIVIDE					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 34 ( to 104 )				      								    								  
70 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 72 LOAD_GLOBAL 2 ( min )				      								    								  
74 LOAD_GLOBAL 3 ( minimumSquare )			      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 LOAD_GLOBAL 3 ( minimumSquare )			      								    								  
84 LOAD_FAST 0 ( m )					      								    								  
86 LOAD_FAST 4 ( i )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 CALL_FUNCTION 2					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 3 ( horizontal_min )			      								    								  
98 CALL_FUNCTION 2					      								    								  
100 STORE_FAST 3 ( horizontal_min )			      								    								  
102 JUMP_ABSOLUTE 68					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 SETUP_LOOP 56 ( to 164 )			      								    								  
108 LOAD_GLOBAL 1 ( range )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 LOAD_CONST 4 ( 2 )					      								    								  
116 BINARY_FLOOR_DIVIDE					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 CALL_FUNCTION 2					      								    								  
124 GET_ITER						      								    								  
>> 126 FOR_ITER 34 ( to 162 )				      								    								  
128 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 130 LOAD_GLOBAL 2 ( min )				      								    								  
132 LOAD_GLOBAL 3 ( minimumSquare )			      								    								  
134 LOAD_FAST 0 ( m )					      								    								  
136 LOAD_FAST 5 ( j )					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 LOAD_GLOBAL 3 ( minimumSquare )			      								    								  
142 LOAD_FAST 0 ( m )					      								    								  
144 LOAD_FAST 1 ( n )					      								    								  
146 LOAD_FAST 5 ( j )					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 CALL_FUNCTION 2					      								    								  
152 BINARY_ADD						      								    								  
154 LOAD_FAST 2 ( vertical_min )			      								    								  
156 CALL_FUNCTION 2					      								    								  
158 STORE_FAST 2 ( vertical_min )			      								    								  
160 JUMP_ABSOLUTE 126					      								    								  
>> 162 POP_BLOCK					      								    								  
							      								    								  
12 >> 164 LOAD_GLOBAL 2 ( min )				      								    								  
166 LOAD_FAST 2 ( vertical_min )			      								    								  
168 LOAD_FAST 3 ( horizontal_min )			      								    								  
170 CALL_FUNCTION 2					      								    								  
172 LOAD_GLOBAL 0 ( dp )				      								    								  
174 LOAD_FAST 0 ( m )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 LOAD_FAST 1 ( n )					      								    								  
180 STORE_SUBSCR					      								    								  
							      								    								  
13 182 LOAD_GLOBAL 0 ( dp )				      								    								  
184 LOAD_FAST 0 ( m )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_FAST 1 ( n )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_NON_REPEATING_CHARACTER				      KTH_NON_REPEATING_CHARACTER				    KTH_NON_REPEATING_CHARACTER					  KTH_NON_REPEATING_CHARACTER
--							      --							    --								  --
Disassembly of <code object kthNonRepeating at 0x7f33e26494b0 def kthNonRepeating ( str , k ) :				    def kthNonRepeating ( str , k ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  count = [ 0 ] * MAX_CHAR				    	count = [ 0 ] * MAX_CHAR				  
4 CALL_FUNCTION 1					      	  index = [ 0 ] * MAX_CHAR				    	index = [ 0 ] * MAX_CHAR				  
6 STORE_FAST 2 ( n )					      	  for i in range ( MAX_CHAR ) :				    	for i in range ( MAX_CHAR ) :				  
							      	      count [ i ] = 0					    	    count [ i ] = 0					  
3 8 LOAD_CONST 1 ( 0 )					      	      index [ i ] = n					    	    index [ i ] = n					  
10 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
12 LOAD_GLOBAL 1 ( MAX_CHAR )				      	      x = str [ i ]					    	    x = str [ i ]					  
14 BINARY_MULTIPLY					      	      count [ ord ( x ) ] += 1				    	    count [ ord ( x ) ] += 1				  
16 STORE_FAST 3 ( count )				      	      if ( count [ ord ( x ) ] == 1 ) :			    	    if count [ ord ( x ) ] == 1 :			  
							      		  index [ ord ( x ) ] = i			    		index [ ord ( x ) ] = i				  
4 18 LOAD_CONST 1 ( 0 )					      	      if ( count [ ord ( x ) ] == 2 ) :			    	    if count [ ord ( x ) ] == 2 :			  
20 BUILD_LIST 1						      		  index [ ord ( x ) ] = n			    		index [ ord ( x ) ] = n				  
22 LOAD_GLOBAL 1 ( MAX_CHAR )				      	  index.sort ( )					    	index.sort ( )						  
24 BINARY_MULTIPLY					      	  return index [ k - 1 ] if ( index [ k - 1 ] != n ) else - 	if index [ - k ] != k :					  
26 STORE_FAST 4 ( index )				      								    	    if k != k :						  
							      								    		return n [ ord ( x ) ] = k [ : - k ]		  
5 28 SETUP_LOOP 32 ( to 62 )				      								    	return n						  
30 LOAD_GLOBAL 2 ( range )				      								    								  
32 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 20 ( to 60 )				      								    								  
40 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 42 LOAD_CONST 1 ( 0 )					      								    								  
44 LOAD_FAST 3 ( count )				      								    								  
46 LOAD_FAST 5 ( i )					      								    								  
48 STORE_SUBSCR						      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( n )					      								    								  
52 LOAD_FAST 4 ( index )				      								    								  
54 LOAD_FAST 5 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
58 JUMP_ABSOLUTE 38					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
8 >> 62 SETUP_LOOP 100 ( to 164 )			      								    								  
64 LOAD_GLOBAL 2 ( range )				      								    								  
66 LOAD_FAST 2 ( n )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 88 ( to 162 )				      								    								  
74 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 76 LOAD_FAST 0 ( str )				      								    								  
78 LOAD_FAST 5 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 STORE_FAST 6 ( x )					      								    								  
							      								    								  
10 84 LOAD_FAST 3 ( count )				      								    								  
86 LOAD_GLOBAL 3 ( ord )				      								    								  
88 LOAD_FAST 6 ( x )					      								    								  
90 CALL_FUNCTION 1					      								    								  
92 DUP_TOP_TWO						      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 INPLACE_ADD						      								    								  
100 ROT_THREE						      								    								  
102 STORE_SUBSCR					      								    								  
							      								    								  
11 104 LOAD_FAST 3 ( count )				      								    								  
106 LOAD_GLOBAL 3 ( ord )				      								    								  
108 LOAD_FAST 6 ( x )					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
12 120 LOAD_FAST 5 ( i )				      								    								  
122 LOAD_FAST 4 ( index )				      								    								  
124 LOAD_GLOBAL 3 ( ord )				      								    								  
126 LOAD_FAST 6 ( x )					      								    								  
128 CALL_FUNCTION 1					      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
13 >> 132 LOAD_FAST 3 ( count )				      								    								  
134 LOAD_GLOBAL 3 ( ord )				      								    								  
136 LOAD_FAST 6 ( x )					      								    								  
138 CALL_FUNCTION 1					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_CONST 3 ( 2 )					      								    								  
144 COMPARE_OP 2 ( == )					      								    								  
146 POP_JUMP_IF_FALSE 72				      								    								  
							      								    								  
14 148 LOAD_FAST 2 ( n )				      								    								  
150 LOAD_FAST 4 ( index )				      								    								  
152 LOAD_GLOBAL 3 ( ord )				      								    								  
154 LOAD_FAST 6 ( x )					      								    								  
156 CALL_FUNCTION 1					      								    								  
158 STORE_SUBSCR					      								    								  
160 JUMP_ABSOLUTE 72					      								    								  
>> 162 POP_BLOCK					      								    								  
							      								    								  
15 >> 164 LOAD_FAST 4 ( index )				      								    								  
166 LOAD_METHOD 4 ( sort )				      								    								  
168 CALL_METHOD 0					      								    								  
170 POP_TOP						      								    								  
							      								    								  
16 172 LOAD_FAST 4 ( index )				      								    								  
174 LOAD_FAST 1 ( k )					      								    								  
176 LOAD_CONST 2 ( 1 )					      								    								  
178 BINARY_SUBTRACT					      								    								  
180 BINARY_SUBSCR					      								    								  
182 LOAD_FAST 2 ( n )					      								    								  
184 COMPARE_OP 3 ( != )					      								    								  
186 POP_JUMP_IF_FALSE 200				      								    								  
188 LOAD_FAST 4 ( index )				      								    								  
190 LOAD_FAST 1 ( k )					      								    								  
192 LOAD_CONST 2 ( 1 )					      								    								  
194 BINARY_SUBTRACT					      								    								  
196 BINARY_SUBSCR					      								    								  
198 RETURN_VALUE					      								    								  
>> 200 LOAD_CONST 4 ( - 1 )				      								    								  
202 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMMON_CHARACTERS_N_STRINGS				      COMMON_CHARACTERS_N_STRINGS				    COMMON_CHARACTERS_N_STRINGS					  COMMON_CHARACTERS_N_STRINGS
--							      --							    --								  --
Disassembly of <code object commonCharacters at 0x7f33e2653ed def commonCharacters ( strings , n ) :			    def commonCharacters ( strings , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( True )				      	  prim = [ True ] * MAX_CHAR				    	prim = [ True ] * MAX_CHAR				  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      sec = [ False ] * MAX_CHAR			    	    sec = [ False ] * MAX_CHAR				  
6 BINARY_MULTIPLY					      	      for j in range ( len ( strings [ i ] ) ) :	    	    for j in range ( len ( strings [ i ] ) ) :		  
8 STORE_FAST 2 ( prim )					      		  if ( prim [ ord ( strings [ i ] [ j ] ) - ord ( ' 		if prim [ ord ( strings [ i ] [ j ] ) - ord ( "a" 
							      		      sec [ ord ( strings [ i ] [ j ] ) - ord ( 'a' 		    sec [ ord ( strings [ i ] [ j ] ) - ord ( "a" 
3 10 SETUP_LOOP 138 ( to 150 )				      	      for i in range ( MAX_CHAR ) :			    	for i in range ( MAX_CHAR ) :				  
12 LOAD_GLOBAL 1 ( range )				      		  prim [ i ] = sec [ i ]			    	    prim [ i ] = sec [ i ]				  
14 LOAD_FAST 1 ( n )					      	  for i in range ( 26 ) :				    for i in range ( 26 ) :					  
16 CALL_FUNCTION 1					      	      if ( prim [ i ] ) :				    	if prim [ i ] :						  
18 GET_ITER						      		  print ( "%c " % ( i + ord ( 'a' ) ) , end = "" )  	    print ( "%s %s" % ( i + 1 ) )			  
>> 20 FOR_ITER 126 ( to 148 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 2 ( False )				      								    								  
26 BUILD_LIST 1						      								    								  
28 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
30 BINARY_MULTIPLY					      								    								  
32 STORE_FAST 4 ( sec )					      								    								  
							      								    								  
5 34 SETUP_LOOP 80 ( to 116 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_GLOBAL 2 ( len )				      								    								  
40 LOAD_FAST 0 ( strings )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 60 ( to 114 )				      								    								  
54 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( prim )				      								    								  
58 LOAD_GLOBAL 3 ( ord )				      								    								  
60 LOAD_FAST 0 ( strings )				      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 5 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 LOAD_GLOBAL 3 ( ord )				      								    								  
74 LOAD_CONST 3 ( 'a' )					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 84 LOAD_CONST 1 ( True )				      								    								  
86 LOAD_FAST 4 ( sec )					      								    								  
88 LOAD_GLOBAL 3 ( ord )				      								    								  
90 LOAD_FAST 0 ( strings )				      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 5 ( j )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 LOAD_GLOBAL 3 ( ord )				      								    								  
104 LOAD_CONST 3 ( 'a' )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 STORE_SUBSCR					      								    								  
112 JUMP_ABSOLUTE 52					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
8 >> 116 SETUP_LOOP 28 ( to 146 )			      								    								  
118 LOAD_GLOBAL 1 ( range )				      								    								  
120 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
122 CALL_FUNCTION 1					      								    								  
124 GET_ITER						      								    								  
>> 126 FOR_ITER 16 ( to 144 )				      								    								  
128 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 130 LOAD_FAST 4 ( sec )				      								    								  
132 LOAD_FAST 3 ( i )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_FAST 2 ( prim )				      								    								  
138 LOAD_FAST 3 ( i )					      								    								  
140 STORE_SUBSCR					      								    								  
142 JUMP_ABSOLUTE 126					      								    								  
>> 144 POP_BLOCK					      								    								  
>> 146 JUMP_ABSOLUTE 20					      								    								  
>> 148 POP_BLOCK					      								    								  
							      								    								  
10 >> 150 SETUP_LOOP 48 ( to 200 )			      								    								  
152 LOAD_GLOBAL 1 ( range )				      								    								  
154 LOAD_CONST 4 ( 26 )					      								    								  
156 CALL_FUNCTION 1					      								    								  
158 GET_ITER						      								    								  
>> 160 FOR_ITER 36 ( to 198 )				      								    								  
162 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 164 LOAD_FAST 2 ( prim )				      								    								  
166 LOAD_FAST 3 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
12 172 LOAD_GLOBAL 4 ( print )				      								    								  
174 LOAD_CONST 5 ( '%c ' )				      								    								  
176 LOAD_FAST 3 ( i )					      								    								  
178 LOAD_GLOBAL 3 ( ord )				      								    								  
180 LOAD_CONST 3 ( 'a' )				      								    								  
182 CALL_FUNCTION 1					      								    								  
184 BINARY_ADD						      								    								  
186 BINARY_MODULO					      								    								  
188 LOAD_CONST 6 ( '' )					      								    								  
190 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
192 CALL_FUNCTION_KW 2					      								    								  
194 POP_TOP						      								    								  
196 JUMP_ABSOLUTE 160					      								    								  
>> 198 POP_BLOCK					      								    								  
>> 200 LOAD_CONST 0 ( None )				      								    								  
202 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESS
--							      --							    --								  --
Disassembly of <code object countMinReversals at 0x7f33e2644f def countMinReversals ( expr ) :				    def countMinReversals ( expr ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  lenn = len ( expr )					    	lenn = len ( expr )					  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( expr )					      	  if ( lenn % 2 ) :					    	if lenn % 2 :						  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/MINIM
4 CALL_FUNCTION 1					      	      return - 1					    	    return - 1						  UM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_E
6 STORE_FAST 1 ( lenn )					      	  s = [ ]						    	s = [ ]							  XPRESSION_BALANCED.py", line 74, in <module>	   i
							      	  for i in range ( lenn ) :				    	for i in range ( lenn ) :				  f f_filled(*parameters_set) == f_gold(*parameters_
3 8 LOAD_FAST 1 ( lenn )				      	      if ( expr [ i ] == '' and len ( s ) ) :		    	    if expr [ i ] == "" and len ( s ) :			  set):	  File "/home/ubuntu/TransCoder/models/eval/
10 LOAD_CONST 1 ( 2 )					      		  if ( s [ 0 ] == '' ) :			    		if s [ 0 ] == "" :				  mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python_s
12 BINARY_MODULO					      		      s.pop ( 0 )				    		    s.pop ( 0 )					  a.valid/MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED
14 POP_JUMP_IF_FALSE 20					      		  else :					    		else :						  _TO_MAKE_AN_EXPRESSION_BALANCED.py", line 56, in f
							      		      s.insert ( 0 , expr [ i ] )		    		    s.insert ( 0 , expr [ i ] )			  _filled     return ( n + len ( n ) ) TypeError: ob
4 16 LOAD_CONST 2 ( - 1 )				      	      else :						    	    else :						  ject of type 'int' has no len()
18 RETURN_VALUE						      		  s.insert ( 0 , expr [ i ] )			    		s.insert ( 0 , expr [ i ] )			  
							      	  red_len = len ( s )					    	red_len = len ( s )					  
5 >> 20 BUILD_LIST 0					      	  n = 0							    	n = 0							  
22 STORE_FAST 2 ( s )					      	  while ( len ( s ) and s [ 0 ] == '' ) :		    	while len ( s ) and s [ 0 ] == "" :			  
							      	      s.pop ( 0 )					    	    s.pop ( 0 )						  
6 24 SETUP_LOOP 94 ( to 120 )				      	      n += 1						    	    n += 1						  
26 LOAD_GLOBAL 1 ( range )				      	  return ( red_len // 2 + n % 2 )			    	return ( n + len ( n ) )				  
28 LOAD_FAST 1 ( lenn )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 82 ( to 118 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( expr )				      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 3 ( '' )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 100				      								    								  
50 LOAD_GLOBAL 0 ( len )				      								    								  
52 LOAD_FAST 2 ( s )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
8 58 LOAD_FAST 2 ( s )					      								    								  
60 LOAD_CONST 4 ( 0 )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_CONST 3 ( '' )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
9 70 LOAD_FAST 2 ( s )					      								    								  
72 LOAD_METHOD 2 ( pop )				      								    								  
74 LOAD_CONST 4 ( 0 )					      								    								  
76 CALL_METHOD 1					      								    								  
78 POP_TOP						      								    								  
80 JUMP_ABSOLUTE 116					      								    								  
							      								    								  
11 >> 82 LOAD_FAST 2 ( s )				      								    								  
84 LOAD_METHOD 3 ( insert )				      								    								  
86 LOAD_CONST 4 ( 0 )					      								    								  
88 LOAD_FAST 0 ( expr )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_METHOD 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
13 >> 100 LOAD_FAST 2 ( s )				      								    								  
102 LOAD_METHOD 3 ( insert )				      								    								  
104 LOAD_CONST 4 ( 0 )					      								    								  
106 LOAD_FAST 0 ( expr )				      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_METHOD 2					      								    								  
114 POP_TOP						      								    								  
>> 116 JUMP_ABSOLUTE 34					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_GLOBAL 0 ( len )				      								    								  
122 LOAD_FAST 2 ( s )					      								    								  
124 CALL_FUNCTION 1					      								    								  
126 STORE_FAST 4 ( red_len )				      								    								  
							      								    								  
15 128 LOAD_CONST 4 ( 0 )				      								    								  
130 STORE_FAST 5 ( n )					      								    								  
							      								    								  
16 132 SETUP_LOOP 42 ( to 176 )				      								    								  
>> 134 LOAD_GLOBAL 0 ( len )				      								    								  
136 LOAD_FAST 2 ( s )					      								    								  
138 CALL_FUNCTION 1					      								    								  
140 POP_JUMP_IF_FALSE 174				      								    								  
142 LOAD_FAST 2 ( s )					      								    								  
144 LOAD_CONST 4 ( 0 )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_CONST 3 ( '' )					      								    								  
150 COMPARE_OP 2 ( == )					      								    								  
152 POP_JUMP_IF_FALSE 174				      								    								  
							      								    								  
17 154 LOAD_FAST 2 ( s )				      								    								  
156 LOAD_METHOD 2 ( pop )				      								    								  
158 LOAD_CONST 4 ( 0 )					      								    								  
160 CALL_METHOD 1					      								    								  
162 POP_TOP						      								    								  
							      								    								  
18 164 LOAD_FAST 5 ( n )				      								    								  
166 LOAD_CONST 5 ( 1 )					      								    								  
168 INPLACE_ADD						      								    								  
170 STORE_FAST 5 ( n )					      								    								  
172 JUMP_ABSOLUTE 134					      								    								  
>> 174 POP_BLOCK					      								    								  
							      								    								  
19 >> 176 LOAD_FAST 4 ( red_len )			      								    								  
178 LOAD_CONST 1 ( 2 )					      								    								  
180 BINARY_FLOOR_DIVIDE					      								    								  
182 LOAD_FAST 5 ( n )					      								    								  
184 LOAD_CONST 1 ( 2 )					      								    								  
186 BINARY_MODULO					      								    								  
188 BINARY_ADD						      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD
--							      --							    --								  --
Disassembly of <code object totalNodes at 0x7f33e2649150, fil def totalNodes ( adjac , n , x , y ) :			    def totalNodes ( adjac , n , x , y ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  visited = [ 0 ] * ( n + 1 )				    	visited = [ 0 ] * ( n + 1 )				  
2 BUILD_LIST 1						      	  p = [ None ] * n					    	p = [ None ] * n					  
4 LOAD_FAST 1 ( n )					      	  q = queue.Queue ( )					    	q = queue.Queue ( )					  
6 LOAD_CONST 2 ( 1 )					      	  q.put ( x )						    	q.put ( x )						  
8 BINARY_ADD						      	  visited [ x ] = True					    	visited [ x ] = True					  
10 BINARY_MULTIPLY					      	  m = None						    	m = None						  
12 STORE_FAST 4 ( visited )				      	  while ( not q.empty ( ) ) :				    	while not q.empty ( ) :					  
							      	      m = q.get ( )					    	    m = q.get ( )					  
3 14 LOAD_CONST 0 ( None )				      	      for i in range ( len ( adjac [ m ] ) ) :		    	    for i in range ( len ( adjac [ m ] ) ) :		  
16 BUILD_LIST 1						      		  h = adjac [ m ] [ i ]				    		h = adjac [ m ] [ i ]				  
18 LOAD_FAST 1 ( n )					      		  if ( not visited [ h ] ) :			    		if not visited [ h ] :				  
20 BINARY_MULTIPLY					      		      visited [ h ] = True			    		    visited [ h ] = True			  
22 STORE_FAST 5 ( p )					      		      p [ h ] = m				    		    m [ p ] = m					  
							      		      q.put ( h )				    		    q.put ( h )					  
4 24 LOAD_GLOBAL 0 ( queue )				      	  count = 0						    	count = 0						  
26 LOAD_METHOD 1 ( Queue )				      	  i = p [ y ]						    	i = p [ y ]						  
28 CALL_METHOD 0					      	  while ( i != x ) :					    	while i != x :						  
30 STORE_FAST 6 ( q )					      	      count += 1					    	    if count != count :					  
							      	      i = p [ i ]					    		count += 1					  
5 32 LOAD_FAST 6 ( q )					      	  return count						    	    count += 1						  
34 LOAD_METHOD 2 ( put )				      								    return count						  
36 LOAD_FAST 2 ( x )					      								    								  
38 CALL_METHOD 1					      								    								  
40 POP_TOP						      								    								  
							      								    								  
6 42 LOAD_CONST 3 ( True )				      								    								  
44 LOAD_FAST 4 ( visited )				      								    								  
46 LOAD_FAST 2 ( x )					      								    								  
48 STORE_SUBSCR						      								    								  
							      								    								  
7 50 LOAD_CONST 0 ( None )				      								    								  
52 STORE_FAST 7 ( m )					      								    								  
							      								    								  
8 54 SETUP_LOOP 92 ( to 148 )				      								    								  
>> 56 LOAD_FAST 6 ( q )					      								    								  
58 LOAD_METHOD 3 ( empty )				      								    								  
60 CALL_METHOD 0					      								    								  
62 POP_JUMP_IF_TRUE 146					      								    								  
							      								    								  
9 64 LOAD_FAST 6 ( q )					      								    								  
66 LOAD_METHOD 4 ( get )				      								    								  
68 CALL_METHOD 0					      								    								  
70 STORE_FAST 7 ( m )					      								    								  
							      								    								  
10 72 SETUP_LOOP 70 ( to 144 )				      								    								  
74 LOAD_GLOBAL 5 ( range )				      								    								  
76 LOAD_GLOBAL 6 ( len )				      								    								  
78 LOAD_FAST 0 ( adjac )				      								    								  
80 LOAD_FAST 7 ( m )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 50 ( to 142 )				      								    								  
92 STORE_FAST 8 ( i )					      								    								  
							      								    								  
11 94 LOAD_FAST 0 ( adjac )				      								    								  
96 LOAD_FAST 7 ( m )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 8 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 STORE_FAST 9 ( h )					      								    								  
							      								    								  
12 106 LOAD_FAST 4 ( visited )				      								    								  
108 LOAD_FAST 9 ( h )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 POP_JUMP_IF_TRUE 90					      								    								  
							      								    								  
13 114 LOAD_CONST 3 ( True )				      								    								  
116 LOAD_FAST 4 ( visited )				      								    								  
118 LOAD_FAST 9 ( h )					      								    								  
120 STORE_SUBSCR					      								    								  
							      								    								  
14 122 LOAD_FAST 7 ( m )				      								    								  
124 LOAD_FAST 5 ( p )					      								    								  
126 LOAD_FAST 9 ( h )					      								    								  
128 STORE_SUBSCR					      								    								  
							      								    								  
15 130 LOAD_FAST 6 ( q )				      								    								  
132 LOAD_METHOD 2 ( put )				      								    								  
134 LOAD_FAST 9 ( h )					      								    								  
136 CALL_METHOD 1					      								    								  
138 POP_TOP						      								    								  
140 JUMP_ABSOLUTE 90					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 JUMP_ABSOLUTE 56					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
16 >> 148 LOAD_CONST 1 ( 0 )				      								    								  
150 STORE_FAST 10 ( count )				      								    								  
							      								    								  
17 152 LOAD_FAST 5 ( p )				      								    								  
154 LOAD_FAST 3 ( y )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 STORE_FAST 8 ( i )					      								    								  
							      								    								  
18 160 SETUP_LOOP 28 ( to 190 )				      								    								  
>> 162 LOAD_FAST 8 ( i )				      								    								  
164 LOAD_FAST 2 ( x )					      								    								  
166 COMPARE_OP 3 ( != )					      								    								  
168 POP_JUMP_IF_FALSE 188				      								    								  
							      								    								  
19 170 LOAD_FAST 10 ( count )				      								    								  
172 LOAD_CONST 2 ( 1 )					      								    								  
174 INPLACE_ADD						      								    								  
176 STORE_FAST 10 ( count )				      								    								  
							      								    								  
20 178 LOAD_FAST 5 ( p )				      								    								  
180 LOAD_FAST 8 ( i )					      								    								  
182 BINARY_SUBSCR					      								    								  
184 STORE_FAST 8 ( i )					      								    								  
186 JUMP_ABSOLUTE 162					      								    								  
>> 188 POP_BLOCK					      								    								  
							      								    								  
21 >> 190 LOAD_FAST 10 ( count )			      								    								  
192 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N			      SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N			    SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N			  SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N
--							      --							    --								  --
Disassembly of <code object SieveOfSundaram at 0x7f33e2644930 def SieveOfSundaram ( n ) :				    def SieveOfSundaram ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  nNew = int ( ( n - 2 ) / 2 ) ;			    	nNew = int ( ( n - 2 ) / 2 )				  
2 LOAD_FAST 0 ( n )					      	  marked = [ 0 ] * ( nNew + 1 ) ;			    	marked = [ 0 ] * nNew + 1				  
4 LOAD_CONST 1 ( 2 )					      	  for i in range ( 1 , nNew + 1 ) :			    	for i in range ( 1 , nNew + 1 ) :			  
6 BINARY_SUBTRACT					      	      j = i ;						    	    j = i						  
8 LOAD_CONST 1 ( 2 )					      	      while ( ( i + j + 2 * i * j ) <= nNew ) :		    	    while i + j <= 2 * i * j <= nNew :			  
10 BINARY_TRUE_DIVIDE					      		  marked [ i + j + 2 * i * j ] = 1 ;		    		marked [ i + j + 2 * i * j ] = 1		  
12 CALL_FUNCTION 1					      		  j += 1 ;					    		j += 1						  
14 STORE_FAST 1 ( nNew )				      	  if ( n > 2 ) :					    	if n > 2 :						  
							      	      print ( 2 , end = " " ) ;				    	    print ( 2 , end = " " )				  
3 16 LOAD_CONST 2 ( 0 )					      	  for i in range ( 1 , nNew + 1 ) :			    	for i in range ( 1 , nNew + 1 ) :			  
18 BUILD_LIST 1						      	      if ( marked [ i ] == 0 ) :			    	    if marked [ i ] == 0 :				  
20 LOAD_FAST 1 ( nNew )					      		  print ( ( 2 * i + 1 ) , end = " " ) ;		    		print ( end = " " )				  
22 LOAD_CONST 3 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 BINARY_MULTIPLY					      								    								  
28 STORE_FAST 2 ( marked )				      								    								  
							      								    								  
4 30 SETUP_LOOP 88 ( to 120 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 LOAD_FAST 1 ( nNew )					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 70 ( to 118 )				      								    								  
48 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 50 LOAD_FAST 3 ( i )					      								    								  
52 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 54 SETUP_LOOP 60 ( to 116 )				      								    								  
>> 56 LOAD_FAST 3 ( i )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_CONST 1 ( 2 )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_FAST 4 ( j )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_FAST 1 ( nNew )					      								    								  
76 COMPARE_OP 1 ( <= )					      								    								  
78 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
7 80 LOAD_CONST 3 ( 1 )					      								    								  
82 LOAD_FAST 2 ( marked )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 LOAD_FAST 4 ( j )					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_CONST 1 ( 2 )					      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 LOAD_FAST 4 ( j )					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_SUBSCR					      								    								  
							      								    								  
8 104 LOAD_FAST 4 ( j )					      								    								  
106 LOAD_CONST 3 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 4 ( j )					      								    								  
112 JUMP_ABSOLUTE 56					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 46					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
9 >> 120 LOAD_FAST 0 ( n )				      								    								  
122 LOAD_CONST 1 ( 2 )					      								    								  
124 COMPARE_OP 4 ( > )					      								    								  
126 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
10 128 LOAD_GLOBAL 2 ( print )				      								    								  
130 LOAD_CONST 1 ( 2 )					      								    								  
132 LOAD_CONST 4 ( ' ' )				      								    								  
134 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
136 CALL_FUNCTION_KW 2					      								    								  
138 POP_TOP						      								    								  
							      								    								  
11 >> 140 SETUP_LOOP 54 ( to 196 )			      								    								  
142 LOAD_GLOBAL 1 ( range )				      								    								  
144 LOAD_CONST 3 ( 1 )					      								    								  
146 LOAD_FAST 1 ( nNew )				      								    								  
148 LOAD_CONST 3 ( 1 )					      								    								  
150 BINARY_ADD						      								    								  
152 CALL_FUNCTION 2					      								    								  
154 GET_ITER						      								    								  
>> 156 FOR_ITER 36 ( to 194 )				      								    								  
158 STORE_FAST 3 ( i )					      								    								  
							      								    								  
12 160 LOAD_FAST 2 ( marked )				      								    								  
162 LOAD_FAST 3 ( i )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_CONST 2 ( 0 )					      								    								  
168 COMPARE_OP 2 ( == )					      								    								  
170 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
13 172 LOAD_GLOBAL 2 ( print )				      								    								  
174 LOAD_CONST 1 ( 2 )					      								    								  
176 LOAD_FAST 3 ( i )					      								    								  
178 BINARY_MULTIPLY					      								    								  
180 LOAD_CONST 3 ( 1 )					      								    								  
182 BINARY_ADD						      								    								  
184 LOAD_CONST 4 ( ' ' )				      								    								  
186 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
188 CALL_FUNCTION_KW 2					      								    								  
190 POP_TOP						      								    								  
192 JUMP_ABSOLUTE 156					      								    								  
>> 194 POP_BLOCK					      								    								  
>> 196 LOAD_CONST 0 ( None )				      								    								  
198 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PETERSON_GRAPH						      PETERSON_GRAPH						    PETERSON_GRAPH						  PETERSON_GRAPH
--							      --							    --								  --
Disassembly of <code object findthepath at 0x7f33e2653ed0, fi def findthepath ( S , v ) :				    def findthepath ( S , v ) :					  script_not_found : None
2 0 LOAD_FAST 1 ( v )					      	  result [ 0 ] = v					    	result [ 0 ] = v					  
2 LOAD_GLOBAL 0 ( result )				      	  for i in range ( 1 , len ( S ) ) :			    	for i in range ( 1 , len ( S ) ) :			  
4 LOAD_CONST 1 ( 0 )					      	      if ( adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) ] or a 	    if adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) ] or adj 
6 STORE_SUBSCR						      		  v = ord ( S [ i ] ) - ord ( 'A' )		    		v = ord ( S [ i ] ) - ord ( 'A' )		  
							      	      elif ( adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) + 5  	    else :						  
3 8 SETUP_LOOP 204 ( to 214 )				      		  v = ord ( S [ i ] ) - ord ( 'A' ) + 5		    		v = adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) + 5 
10 LOAD_GLOBAL 1 ( range )				      	      else :						    		    v = ord ( S [ i ] ) - ord ( 'A' ) + 'A' )	  
12 LOAD_CONST 2 ( 1 )					      		  return False					    		else :						  
14 LOAD_GLOBAL 2 ( len )				      	      result.append ( v )				    		    v.append ( v )				  
16 LOAD_FAST 0 ( S )					      	  return True						    	    return True						  
18 CALL_FUNCTION 1					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 186 ( to 212 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 3 ( adj )				      								    								  
30 LOAD_FAST 1 ( v )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_GLOBAL 4 ( ord )				      								    								  
36 LOAD_FAST 0 ( S )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_GLOBAL 4 ( ord )				      								    								  
46 LOAD_CONST 3 ( 'A' )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_SUBSCR					      								    								  
54 POP_JUMP_IF_TRUE 84					      								    								  
56 LOAD_GLOBAL 3 ( adj )				      								    								  
58 LOAD_GLOBAL 4 ( ord )				      								    								  
60 LOAD_FAST 0 ( S )					      								    								  
62 LOAD_FAST 2 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_GLOBAL 4 ( ord )				      								    								  
70 LOAD_CONST 3 ( 'A' )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 1 ( v )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
5 >> 84 LOAD_GLOBAL 4 ( ord )				      								    								  
86 LOAD_FAST 0 ( S )					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_GLOBAL 4 ( ord )				      								    								  
96 LOAD_CONST 3 ( 'A' )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 STORE_FAST 1 ( v )					      								    								  
104 JUMP_FORWARD 94 ( to 200 )				      								    								  
							      								    								  
6 >> 106 LOAD_GLOBAL 3 ( adj )				      								    								  
108 LOAD_FAST 1 ( v )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_GLOBAL 4 ( ord )				      								    								  
114 LOAD_FAST 0 ( S )					      								    								  
116 LOAD_FAST 2 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 LOAD_GLOBAL 4 ( ord )				      								    								  
124 LOAD_CONST 3 ( 'A' )				      								    								  
126 CALL_FUNCTION 1					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_CONST 4 ( 5 )					      								    								  
132 BINARY_ADD						      								    								  
134 BINARY_SUBSCR					      								    								  
136 POP_JUMP_IF_TRUE 170				      								    								  
138 LOAD_GLOBAL 3 ( adj )				      								    								  
140 LOAD_GLOBAL 4 ( ord )				      								    								  
142 LOAD_FAST 0 ( S )					      								    								  
144 LOAD_FAST 2 ( i )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 CALL_FUNCTION 1					      								    								  
150 LOAD_GLOBAL 4 ( ord )				      								    								  
152 LOAD_CONST 3 ( 'A' )				      								    								  
154 CALL_FUNCTION 1					      								    								  
156 BINARY_SUBTRACT					      								    								  
158 LOAD_CONST 4 ( 5 )					      								    								  
160 BINARY_ADD						      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_FAST 1 ( v )					      								    								  
166 BINARY_SUBSCR					      								    								  
168 POP_JUMP_IF_FALSE 196				      								    								  
							      								    								  
7 >> 170 LOAD_GLOBAL 4 ( ord )				      								    								  
172 LOAD_FAST 0 ( S )					      								    								  
174 LOAD_FAST 2 ( i )					      								    								  
176 BINARY_SUBSCR					      								    								  
178 CALL_FUNCTION 1					      								    								  
180 LOAD_GLOBAL 4 ( ord )				      								    								  
182 LOAD_CONST 3 ( 'A' )				      								    								  
184 CALL_FUNCTION 1					      								    								  
186 BINARY_SUBTRACT					      								    								  
188 LOAD_CONST 4 ( 5 )					      								    								  
190 BINARY_ADD						      								    								  
192 STORE_FAST 1 ( v )					      								    								  
194 JUMP_FORWARD 4 ( to 200 )				      								    								  
							      								    								  
9 >> 196 LOAD_CONST 5 ( False )				      								    								  
198 RETURN_VALUE					      								    								  
							      								    								  
10 >> 200 LOAD_GLOBAL 0 ( result )			      								    								  
202 LOAD_METHOD 5 ( append )				      								    								  
204 LOAD_FAST 1 ( v )					      								    								  
206 CALL_METHOD 1					      								    								  
208 POP_TOP						      								    								  
210 JUMP_ABSOLUTE 24					      								    								  
>> 212 POP_BLOCK					      								    								  
							      								    								  
11 >> 214 LOAD_CONST 6 ( True )				      								    								  
216 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2
--							      --							    --								  --
Disassembly of <code object findTriplets at 0x7f33e2644f60, f def findTriplets ( arr , n ) :				    def findTriplets ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( False )				      	  found = False						    	found = False						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( found )				      	  arr.sort ( )						    	arr.sort ( )						  _sa.valid/FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO
							      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , n - 1 ) :				  _2.py", line 47     print ( x [ arr [ l ] , arr [
3 4 LOAD_FAST 0 ( arr )					      	      l = i + 1						    	    l = i + 1						  r ] )					      ^ Synt
6 LOAD_METHOD 0 ( sort )				      	      r = n - 1						    	    r = n - 1						  axError: invalid syntax
8 CALL_METHOD 0						      	      x = arr [ i ]					    	    x = arr [ i ]					  
10 POP_TOP						      	      while ( l < r ) :					    	    while l < r :					  
							      		  if ( x + arr [ l ] + arr [ r ] == 0 ) :	    		if x + arr [ l ] + arr [ r ] == 0 :		  
4 12 SETUP_LOOP 168 ( to 182 )				      		      print ( x , arr [ l ] , arr [ r ] )	    		    print ( x [ arr [ l ] , arr [ r ] )		  
14 LOAD_GLOBAL 1 ( range )				      		      l += 1					    		    l += 1					  
16 LOAD_CONST 2 ( 0 )					      		      r -= 1					    		    r -= 1					  
18 LOAD_FAST 1 ( n )					      		      found = True				    		else :						  
20 LOAD_CONST 3 ( 1 )					      		  elif ( x + arr [ l ] + arr [ r ] < 0 ) :	    		    if x < arr [ l ] + arr [ r ] < 0 :		  
22 BINARY_SUBTRACT					      		      l += 1					    			l += 1					  
24 CALL_FUNCTION 2					      		  else :					    	if r == 0 :						  
26 GET_ITER						      		      r -= 1					    	    print ( "No found found with ?1 : " + r )		  
>> 28 FOR_ITER 150 ( to 180 )				      	  if ( found == False ) :				    								  
30 STORE_FAST 3 ( i )					      	      print ( " No Triplet Found" )			    								  
							      								    								  
5 32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 4 ( l )					      								    								  
							      								    								  
6 40 LOAD_FAST 1 ( n )					      								    								  
42 LOAD_CONST 3 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_FAST 5 ( r )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 6 ( x )					      								    								  
							      								    								  
8 56 SETUP_LOOP 120 ( to 178 )				      								    								  
>> 58 LOAD_FAST 4 ( l )					      								    								  
60 LOAD_FAST 5 ( r )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 176				      								    								  
							      								    								  
9 66 LOAD_FAST 6 ( x )					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( l )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( r )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_CONST 2 ( 0 )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
10 90 LOAD_GLOBAL 2 ( print )				      								    								  
92 LOAD_FAST 6 ( x )					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 4 ( l )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 5 ( r )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 3					      								    								  
108 POP_TOP						      								    								  
							      								    								  
11 110 LOAD_FAST 4 ( l )				      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 INPLACE_ADD						      								    								  
116 STORE_FAST 4 ( l )					      								    								  
							      								    								  
12 118 LOAD_FAST 5 ( r )				      								    								  
120 LOAD_CONST 3 ( 1 )					      								    								  
122 INPLACE_SUBTRACT					      								    								  
124 STORE_FAST 5 ( r )					      								    								  
							      								    								  
13 126 LOAD_CONST 4 ( True )				      								    								  
128 STORE_FAST 2 ( found )				      								    								  
130 JUMP_ABSOLUTE 58					      								    								  
							      								    								  
14 >> 132 LOAD_FAST 6 ( x )				      								    								  
134 LOAD_FAST 0 ( arr )					      								    								  
136 LOAD_FAST 4 ( l )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 BINARY_ADD						      								    								  
142 LOAD_FAST 0 ( arr )					      								    								  
144 LOAD_FAST 5 ( r )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 BINARY_ADD						      								    								  
150 LOAD_CONST 2 ( 0 )					      								    								  
152 COMPARE_OP 0 ( < )					      								    								  
154 POP_JUMP_IF_FALSE 166				      								    								  
							      								    								  
15 156 LOAD_FAST 4 ( l )				      								    								  
158 LOAD_CONST 3 ( 1 )					      								    								  
160 INPLACE_ADD						      								    								  
162 STORE_FAST 4 ( l )					      								    								  
164 JUMP_ABSOLUTE 58					      								    								  
							      								    								  
17 >> 166 LOAD_FAST 5 ( r )				      								    								  
168 LOAD_CONST 3 ( 1 )					      								    								  
170 INPLACE_SUBTRACT					      								    								  
172 STORE_FAST 5 ( r )					      								    								  
174 JUMP_ABSOLUTE 58					      								    								  
>> 176 POP_BLOCK					      								    								  
>> 178 JUMP_ABSOLUTE 28					      								    								  
>> 180 POP_BLOCK					      								    								  
							      								    								  
18 >> 182 LOAD_FAST 2 ( found )				      								    								  
184 LOAD_CONST 1 ( False )				      								    								  
186 COMPARE_OP 2 ( == )					      								    								  
188 POP_JUMP_IF_FALSE 198				      								    								  
							      								    								  
19 190 LOAD_GLOBAL 2 ( print )				      								    								  
192 LOAD_CONST 5 ( ' No Triplet Found' )		      								    								  
194 CALL_FUNCTION 1					      								    								  
196 POP_TOP						      								    								  
>> 198 LOAD_CONST 0 ( None )				      								    								  
200 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	      GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	    GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	  GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8
--							      --							    --								  --
Disassembly of <code object isSubSeqDivisible at 0x7f33e2653f def isSubSeqDivisible ( st ) :				    def isSubSeqDivisible ( st ) :				  success : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( st )					    	l = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  arr = [ 0 ] * l					    	arr = [ 0 ] * l						  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , l ) :				    	for i in range ( 0 , l ) :				  
6 STORE_FAST 1 ( l )					      	      for j in range ( i , l ) :			    	    for j in range ( i , l ) :				  
							      		  for k in range ( j , l ) :			    		for k in range ( j , l ) :			  
3 8 LOAD_CONST 1 ( 0 )					      		      if ( arr [ i ] % 8 == 0 ) :		    		    if arr [ i ] % 8 == 0 :			  
10 BUILD_LIST 1						      			  return True				    			return True				  
12 LOAD_FAST 1 ( l )					      		      elif ( ( arr [ i ] * 10 + arr [ j ] ) % 8 ==  		if arr [ i ] * 10 + arr [ j ] % 8 == 0 and i != j 
14 BINARY_MULTIPLY					      			  return True				    		    return True					  
16 STORE_FAST 2 ( arr )					      		      elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + a 		arr [ i ] = ( arr [ i ] * 100 + arr [ j ] * 10 +  
							      			  return True				    		if i != j and i != j :				  
4 18 SETUP_LOOP 186 ( to 206 )				      	  return False						    		    return True					  
20 LOAD_GLOBAL 1 ( range )				      								    	return False						  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 1 ( l )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 172 ( to 204 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 34 SETUP_LOOP 166 ( to 202 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 LOAD_FAST 1 ( l )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 152 ( to 200 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 SETUP_LOOP 146 ( to 198 )				      								    								  
52 LOAD_GLOBAL 1 ( range )				      								    								  
54 LOAD_FAST 4 ( j )					      								    								  
56 LOAD_FAST 1 ( l )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 132 ( to 196 )				      								    								  
64 STORE_FAST 5 ( k )					      								    								  
							      								    								  
7 66 LOAD_FAST 2 ( arr )				      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 2 ( 8 )					      								    								  
74 BINARY_MODULO					      								    								  
76 LOAD_CONST 1 ( 0 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
8 82 LOAD_CONST 3 ( True )				      								    								  
84 RETURN_VALUE						      								    								  
							      								    								  
9 >> 86 LOAD_FAST 2 ( arr )				      								    								  
88 LOAD_FAST 3 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 4 ( 10 )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 LOAD_FAST 2 ( arr )					      								    								  
98 LOAD_FAST 4 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_ADD						      								    								  
104 LOAD_CONST 2 ( 8 )					      								    								  
106 BINARY_MODULO					      								    								  
108 LOAD_CONST 1 ( 0 )					      								    								  
110 COMPARE_OP 2 ( == )					      								    								  
112 POP_JUMP_IF_FALSE 126				      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 LOAD_FAST 4 ( j )					      								    								  
118 COMPARE_OP 3 ( != )					      								    								  
120 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
10 122 LOAD_CONST 3 ( True )				      								    								  
124 RETURN_VALUE					      								    								  
							      								    								  
11 >> 126 LOAD_FAST 2 ( arr )				      								    								  
128 LOAD_FAST 3 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 5 ( 100 )				      								    								  
134 BINARY_MULTIPLY					      								    								  
136 LOAD_FAST 2 ( arr )					      								    								  
138 LOAD_FAST 4 ( j )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_CONST 4 ( 10 )					      								    								  
144 BINARY_MULTIPLY					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_FAST 2 ( arr )					      								    								  
150 LOAD_FAST 5 ( k )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 BINARY_ADD						      								    								  
156 LOAD_CONST 2 ( 8 )					      								    								  
158 BINARY_MODULO					      								    								  
160 LOAD_CONST 1 ( 0 )					      								    								  
162 COMPARE_OP 2 ( == )					      								    								  
164 POP_JUMP_IF_FALSE 62				      								    								  
166 LOAD_FAST 3 ( i )					      								    								  
168 LOAD_FAST 4 ( j )					      								    								  
170 COMPARE_OP 3 ( != )					      								    								  
172 POP_JUMP_IF_FALSE 62				      								    								  
174 LOAD_FAST 4 ( j )					      								    								  
176 LOAD_FAST 5 ( k )					      								    								  
178 COMPARE_OP 3 ( != )					      								    								  
180 POP_JUMP_IF_FALSE 62				      								    								  
182 LOAD_FAST 3 ( i )					      								    								  
184 LOAD_FAST 5 ( k )					      								    								  
186 COMPARE_OP 3 ( != )					      								    								  
188 POP_JUMP_IF_FALSE 62				      								    								  
							      								    								  
12 190 LOAD_CONST 3 ( True )				      								    								  
192 RETURN_VALUE					      								    								  
194 JUMP_ABSOLUTE 62					      								    								  
>> 196 POP_BLOCK					      								    								  
>> 198 JUMP_ABSOLUTE 46					      								    								  
>> 200 POP_BLOCK					      								    								  
>> 202 JUMP_ABSOLUTE 30					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
13 >> 206 LOAD_CONST 6 ( False )			      								    								  
208 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER   MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER   MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER	  MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER
--							      --							    --								  --
Disassembly of <code object minSwap at 0x7f33e2644f60, file " def minSwap ( arr , n , k ) :				    def minSwap ( arr , n , k = 0 ) :				  failure : #Results: 3, 10
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 3 ( count )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if ( arr [ i ] <= k ) :				    	    if arr [ i ] <= k :					  
3 4 SETUP_LOOP 38 ( to 44 )				      		  count = count + 1				    		count = count + 1				  
6 LOAD_GLOBAL 0 ( range )				      	  bad = 0						    	bad = 0							  
8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , count ) :			    	for i in range ( 0 , count ) :				  
10 LOAD_FAST 1 ( n )					      	      if ( arr [ i ] > k ) :				    	    if arr [ i ] > k :					  
12 CALL_FUNCTION 2					      		  bad = bad + 1					    		bad = bad + 1					  
14 GET_ITER						      	  ans = bad						    	ans = bad						  
>> 16 FOR_ITER 24 ( to 42 )				      	  j = count						    	j = count						  
18 STORE_FAST 4 ( i )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if ( j == n ) :					    	    if j == n :						  
4 20 LOAD_FAST 0 ( arr )				      		  break						    		break						  
22 LOAD_FAST 4 ( i )					      	      if ( arr [ i ] > k ) :				    	    if arr [ i ] > k :					  
24 BINARY_SUBSCR					      		  bad = bad - 1					    		bad = bad - 1					  
26 LOAD_FAST 2 ( k )					      	      if ( arr [ j ] > k ) :				    	    if arr [ j ] > k :					  
28 COMPARE_OP 1 ( <= )					      		  bad = bad + 1					    		bad = bad + 1					  
30 POP_JUMP_IF_FALSE 16					      	      ans = min ( ans , bad )				    	    ans = min ( bad , j )				  
							      	      j = j + 1						    	    ans = ans						  
5 32 LOAD_FAST 3 ( count )				      	  return ans						    	return ans						  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 3 ( count )				      								    								  
40 JUMP_ABSOLUTE 16					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_CONST 1 ( 0 )				      								    								  
46 STORE_FAST 5 ( bad )					      								    								  
							      								    								  
7 48 SETUP_LOOP 38 ( to 88 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 LOAD_FAST 3 ( count )				      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 24 ( to 86 )				      								    								  
62 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 2 ( k )					      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
9 76 LOAD_FAST 5 ( bad )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 5 ( bad )					      								    								  
84 JUMP_ABSOLUTE 60					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
10 >> 88 LOAD_FAST 5 ( bad )				      								    								  
90 STORE_FAST 6 ( ans )					      								    								  
							      								    								  
11 92 LOAD_FAST 3 ( count )				      								    								  
94 STORE_FAST 7 ( j )					      								    								  
							      								    								  
12 96 SETUP_LOOP 86 ( to 184 )				      								    								  
98 LOAD_GLOBAL 0 ( range )				      								    								  
100 LOAD_CONST 1 ( 0 )					      								    								  
102 LOAD_FAST 1 ( n )					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 GET_ITER						      								    								  
>> 108 FOR_ITER 72 ( to 182 )				      								    								  
110 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 112 LOAD_FAST 7 ( j )				      								    								  
114 LOAD_FAST 1 ( n )					      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
14 120 BREAK_LOOP					      								    								  
							      								    								  
15 >> 122 LOAD_FAST 0 ( arr )				      								    								  
124 LOAD_FAST 4 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 2 ( k )					      								    								  
130 COMPARE_OP 4 ( > )					      								    								  
132 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
16 134 LOAD_FAST 5 ( bad )				      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 STORE_FAST 5 ( bad )				      								    								  
							      								    								  
17 >> 142 LOAD_FAST 0 ( arr )				      								    								  
144 LOAD_FAST 7 ( j )					      								    								  
146 BINARY_SUBSCR					      								    								  
148 LOAD_FAST 2 ( k )					      								    								  
150 COMPARE_OP 4 ( > )					      								    								  
152 POP_JUMP_IF_FALSE 162				      								    								  
							      								    								  
18 154 LOAD_FAST 5 ( bad )				      								    								  
156 LOAD_CONST 2 ( 1 )					      								    								  
158 BINARY_ADD						      								    								  
160 STORE_FAST 5 ( bad )				      								    								  
							      								    								  
19 >> 162 LOAD_GLOBAL 1 ( min )				      								    								  
164 LOAD_FAST 6 ( ans )					      								    								  
166 LOAD_FAST 5 ( bad )					      								    								  
168 CALL_FUNCTION 2					      								    								  
170 STORE_FAST 6 ( ans )				      								    								  
							      								    								  
20 172 LOAD_FAST 7 ( j )				      								    								  
174 LOAD_CONST 2 ( 1 )					      								    								  
176 BINARY_ADD						      								    								  
178 STORE_FAST 7 ( j )					      								    								  
180 JUMP_ABSOLUTE 108					      								    								  
>> 182 POP_BLOCK					      								    								  
							      								    								  
21 >> 184 LOAD_FAST 6 ( ans )				      								    								  
186 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		      FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		    FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		  FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE
--							      --							    --								  --
Disassembly of <code object maxHamming at 0x7f33e2644930, fil def maxHamming ( arr , n ) :				    def maxHamming ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  brr = [ 0 ] * ( 2 * n + 1 )				    	brr = [ 0 ] * ( 2 * n + 1 )				  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/FIND_
4 LOAD_CONST 2 ( 2 )					      	      brr [ i ] = arr [ i ]				    	    brr [ i ] = arr [ i ]				  A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE.py", line
6 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					   73, in <module>     if f_filled(*parameters_set)
8 BINARY_MULTIPLY					      	      brr [ n + i ] = arr [ i ]				    	    brr [ n + i ] = arr [ i ]				  == f_gold(*parameters_set):	File "/home/ubuntu/T
10 LOAD_CONST 3 ( 1 )					      	  maxHam = 0						    	maxHam = 0						  ransCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_s
12 BINARY_ADD						      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  cripts/dis_sa-python_sa.valid/FIND_A_ROTATION_WITH
14 BINARY_MULTIPLY					      	      currHam = 0					    	    currHam = 0						  _MAXIMUM_HAMMING_DISTANCE.py", line 51, in f_fille
16 STORE_FAST 2 ( brr )					      	      k = 0						    	    k = 0						  d	if Ham == Ham : NameError: name 'Ham' is not
							      	      for j in range ( i , i + n ) :			    	    for j in range ( i + n ) :				   defined
3 18 SETUP_LOOP 28 ( to 48 )				      		  if brr [ j ] != arr [ k ] :			    		if brr [ j ] != arr [ k ] :			  
20 LOAD_GLOBAL 0 ( range )				      		      currHam += 1				    		    currHam += 1				  
22 LOAD_FAST 1 ( n )					      		      k = k + 1					    		    k = k + 1					  
24 CALL_FUNCTION 1					      	      if currHam == n :					    	    if Ham == Ham :					  
26 GET_ITER						      		  return n					    		currHam = Ham					  
>> 28 FOR_ITER 16 ( to 46 )				      	      maxHam = max ( maxHam , currHam )			    	    if maxam == k :					  
30 STORE_FAST 3 ( i )					      	  return maxHam						    		currHam = Ham					  
							      								    	return maxam , currHam					  
4 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 2 ( brr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 STORE_SUBSCR						      								    								  
44 JUMP_ABSOLUTE 28					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 SETUP_LOOP 32 ( to 82 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 20 ( to 80 )				      								    								  
60 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 62 LOAD_FAST 0 ( arr )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 2 ( brr )					      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 58					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
7 >> 82 LOAD_CONST 1 ( 0 )				      								    								  
84 STORE_FAST 4 ( maxHam )				      								    								  
							      								    								  
8 86 SETUP_LOOP 104 ( to 192 )				      								    								  
88 LOAD_GLOBAL 0 ( range )				      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 LOAD_FAST 1 ( n )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 90 ( to 190 )				      								    								  
100 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 102 LOAD_CONST 1 ( 0 )				      								    								  
104 STORE_FAST 5 ( currHam )				      								    								  
							      								    								  
10 106 LOAD_CONST 1 ( 0 )				      								    								  
108 STORE_FAST 6 ( k )					      								    								  
							      								    								  
11 110 SETUP_LOOP 54 ( to 166 )				      								    								  
112 LOAD_GLOBAL 0 ( range )				      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 LOAD_FAST 3 ( i )					      								    								  
118 LOAD_FAST 1 ( n )					      								    								  
120 BINARY_ADD						      								    								  
122 CALL_FUNCTION 2					      								    								  
124 GET_ITER						      								    								  
>> 126 FOR_ITER 36 ( to 164 )				      								    								  
128 STORE_FAST 7 ( j )					      								    								  
							      								    								  
12 130 LOAD_FAST 2 ( brr )				      								    								  
132 LOAD_FAST 7 ( j )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 6 ( k )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 COMPARE_OP 3 ( != )					      								    								  
144 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
13 146 LOAD_FAST 5 ( currHam )				      								    								  
148 LOAD_CONST 3 ( 1 )					      								    								  
150 INPLACE_ADD						      								    								  
152 STORE_FAST 5 ( currHam )				      								    								  
							      								    								  
14 154 LOAD_FAST 6 ( k )				      								    								  
156 LOAD_CONST 3 ( 1 )					      								    								  
158 BINARY_ADD						      								    								  
160 STORE_FAST 6 ( k )					      								    								  
162 JUMP_ABSOLUTE 126					      								    								  
>> 164 POP_BLOCK					      								    								  
							      								    								  
15 >> 166 LOAD_FAST 5 ( currHam )			      								    								  
168 LOAD_FAST 1 ( n )					      								    								  
170 COMPARE_OP 2 ( == )					      								    								  
172 POP_JUMP_IF_FALSE 178				      								    								  
							      								    								  
16 174 LOAD_FAST 1 ( n )				      								    								  
176 RETURN_VALUE					      								    								  
							      								    								  
17 >> 178 LOAD_GLOBAL 1 ( max )				      								    								  
180 LOAD_FAST 4 ( maxHam )				      								    								  
182 LOAD_FAST 5 ( currHam )				      								    								  
184 CALL_FUNCTION 2					      								    								  
186 STORE_FAST 4 ( maxHam )				      								    								  
188 JUMP_ABSOLUTE 98					      								    								  
>> 190 POP_BLOCK					      								    								  
							      								    								  
18 >> 192 LOAD_FAST 4 ( maxHam )			      								    								  
194 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		      GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		    GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER			  GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER
--							      --							    --								  --
Disassembly of <code object evaluate at 0x7f33e2649a50, file  def evaluate ( n ) :					    def evaluate ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 1 or n == 2 ) :				    	if n == 1 or n == 2 :					  
2 LOAD_CONST 1 ( 1 )					      	      print ( "No Pythagoras" + " Triplet exists" ) ;	    	    print ( 'No Pythagoras Triplet exists' )		  
4 COMPARE_OP 2 ( == )					      	  elif ( n % 2 == 0 ) :					    	elif n % 2 == 0 :					  
6 POP_JUMP_IF_TRUE 16					      	      var = n * n / 4 ;					    	    var = ( n * n / 4 )					  
8 LOAD_FAST 0 ( n )					      	      print ( "Pythagoras Triplets" + " exist i.e." , end = 	    print ( 'Pythagoras Triplets exist i.e.' , end = '' ) 
10 LOAD_CONST 2 ( 2 )					      	      print ( int ( n ) , "" , int ( var - 1 ) , "" , int ( 	    print ( int ( n ) , '' , int ( var - 1 ) , '' , int ( 
12 COMPARE_OP 2 ( == )					      	  elif ( n % 2 != 0 ) :					    elif n % 2 != 0 :						  
14 POP_JUMP_IF_FALSE 26					      	      var = n * n + 1 ;					    	var = n * n + 1						  
							      	      print ( "Pythagoras Triplets " + "exist i.e." , end = 	print ( 'Pythagoras Triplets exist i.e.' , end = '' )	  
3 >> 16 LOAD_GLOBAL 0 ( print )				      	      print ( int ( n ) , "" , int ( var / 2 - 1 ) , "" , i 	print ( int ( n ) , end = '' , int ( var - 1 ) / 2 )	  
18 LOAD_CONST 3 ( 'No Pythagoras Triplet exists' )	      								    								  
20 CALL_FUNCTION 1					      								    								  
22 POP_TOP						      								    								  
24 JUMP_FORWARD 150 ( to 176 )				      								    								  
							      								    								  
4 >> 26 LOAD_FAST 0 ( n )				      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 BINARY_MODULO					      								    								  
32 LOAD_CONST 4 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_CONST 5 ( 4 )					      								    								  
46 BINARY_TRUE_DIVIDE					      								    								  
48 STORE_FAST 1 ( var )					      								    								  
							      								    								  
6 50 LOAD_GLOBAL 0 ( print )				      								    								  
52 LOAD_CONST 6 ( 'Pythagoras Triplets exist i.e.' )	      								    								  
54 LOAD_CONST 7 ( '' )					      								    								  
56 LOAD_CONST 8 ( ( 'end' , ) )				      								    								  
58 CALL_FUNCTION_KW 2					      								    								  
60 POP_TOP						      								    								  
							      								    								  
7 62 LOAD_GLOBAL 0 ( print )				      								    								  
64 LOAD_GLOBAL 1 ( int )				      								    								  
66 LOAD_FAST 0 ( n )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 LOAD_CONST 7 ( '' )					      								    								  
72 LOAD_GLOBAL 1 ( int )				      								    								  
74 LOAD_FAST 1 ( var )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 LOAD_CONST 7 ( '' )					      								    								  
84 LOAD_GLOBAL 1 ( int )				      								    								  
86 LOAD_FAST 1 ( var )					      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 CALL_FUNCTION 1					      								    								  
94 CALL_FUNCTION 5					      								    								  
96 POP_TOP						      								    								  
98 JUMP_FORWARD 76 ( to 176 )				      								    								  
							      								    								  
8 >> 100 LOAD_FAST 0 ( n )				      								    								  
102 LOAD_CONST 2 ( 2 )					      								    								  
104 BINARY_MODULO					      								    								  
106 LOAD_CONST 4 ( 0 )					      								    								  
108 COMPARE_OP 3 ( != )					      								    								  
110 POP_JUMP_IF_FALSE 176				      								    								  
							      								    								  
9 112 LOAD_FAST 0 ( n )					      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 BINARY_MULTIPLY					      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 STORE_FAST 1 ( var )				      								    								  
							      								    								  
10 124 LOAD_GLOBAL 0 ( print )				      								    								  
126 LOAD_CONST 6 ( 'Pythagoras Triplets exist i.e.' )	      								    								  
128 LOAD_CONST 7 ( '' )					      								    								  
130 LOAD_CONST 8 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
							      								    								  
11 136 LOAD_GLOBAL 0 ( print )				      								    								  
138 LOAD_GLOBAL 1 ( int )				      								    								  
140 LOAD_FAST 0 ( n )					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 LOAD_CONST 7 ( '' )					      								    								  
146 LOAD_GLOBAL 1 ( int )				      								    								  
148 LOAD_FAST 1 ( var )					      								    								  
150 LOAD_CONST 2 ( 2 )					      								    								  
152 BINARY_TRUE_DIVIDE					      								    								  
154 LOAD_CONST 1 ( 1 )					      								    								  
156 BINARY_SUBTRACT					      								    								  
158 CALL_FUNCTION 1					      								    								  
160 LOAD_CONST 7 ( '' )					      								    								  
162 LOAD_GLOBAL 1 ( int )				      								    								  
164 LOAD_FAST 1 ( var )					      								    								  
166 LOAD_CONST 2 ( 2 )					      								    								  
168 BINARY_TRUE_DIVIDE					      								    								  
170 CALL_FUNCTION 1					      								    								  
172 CALL_FUNCTION 5					      								    								  
174 POP_TOP						      								    								  
>> 176 LOAD_CONST 0 ( None )				      								    								  
178 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING		      PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING			    PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING			  PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING
--							      --							    --								  --
Disassembly of <code object minMaxLengthWords at 0x7f33e2649a def minMaxLengthWords ( inp ) :				    def minMaxLengthWords ( inp ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  length = len ( inp )					    	length = len ( inp )					  
2 LOAD_FAST 0 ( inp )					      	  si = ei = 0						    	si = ei = 0						  
4 CALL_FUNCTION 1					      	  min_length = length					    	min_length = length					  
6 STORE_FAST 1 ( length )				      	  min_start_index = max_length = max_start_index = 0	    	max_length = 0						  
							      	  while ei <= length :					    	while ei <= length :					  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( ei < length ) and ( inp [ ei ] != " " ) :	    	    if ei < length and inp [ ei ] != " " :		  
10 DUP_TOP						      		  ei += 1					    		ei += 1						  
12 STORE_FAST 2 ( si )					      	      else :						    	    else :						  
14 STORE_FAST 3 ( ei )					      		  curr_length = ei - si				    		curr_length = ei - si				  
							      		  if curr_length < min_length :			    		if curr_length < min_length :			  
4 16 LOAD_FAST 1 ( length )				      		      min_length = curr_length			    		    min_length = curr_length			  
18 STORE_FAST 4 ( min_length )				      		      min_start_index = si			    		    min_start_index = si			  
							      		  if curr_length > max_length :			    	    if curr_length > max_length :			  
5 20 LOAD_CONST 1 ( 0 )					      		      max_length = curr_length			    		max_length = curr_length			  
22 DUP_TOP						      		      max_start_index = si			    		max_start_index = si				  
24 STORE_FAST 5 ( min_start_index )			      		  ei += 1					    	    ei += 1						  
26 DUP_TOP						      		  si = ei					    	    si = ei						  
28 STORE_FAST 6 ( max_length )				      	  minWord = inp [ min_start_index : min_start_index + min_l 	minWord = inp [ min_start_index : min_length ]		  
30 STORE_FAST 7 ( max_start_index )			      	  maxWord = inp [ max_start_index : max_length ]	    	maxWord = inp [ max_start_index : min_length ]		  
							      	  print ( "Minimum length word: " , minWord )		    	Word ( length , " " , Word ( length ) ) )		  
6 32 SETUP_LOOP 94 ( to 128 )				      	  print ( "Maximum length word: " , maxWord )		    	print ( " " , length )					  
>> 34 LOAD_FAST 3 ( ei )				      								    								  
36 LOAD_FAST 1 ( length )				      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
7 42 LOAD_FAST 3 ( ei )					      								    								  
44 LOAD_FAST 1 ( length )				      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
50 LOAD_FAST 0 ( inp )					      								    								  
52 LOAD_FAST 3 ( ei )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 2 ( ' ' )					      								    								  
58 COMPARE_OP 3 ( != )					      								    								  
60 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( ei )					      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( ei )					      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
10 >> 72 LOAD_FAST 3 ( ei )				      								    								  
74 LOAD_FAST 2 ( si )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 8 ( curr_length )				      								    								  
							      								    								  
11 80 LOAD_FAST 8 ( curr_length )			      								    								  
82 LOAD_FAST 4 ( min_length )				      								    								  
84 COMPARE_OP 0 ( < )					      								    								  
86 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
12 88 LOAD_FAST 8 ( curr_length )			      								    								  
90 STORE_FAST 4 ( min_length )				      								    								  
							      								    								  
13 92 LOAD_FAST 2 ( si )				      								    								  
94 STORE_FAST 5 ( min_start_index )			      								    								  
							      								    								  
14 >> 96 LOAD_FAST 8 ( curr_length )			      								    								  
98 LOAD_FAST 6 ( max_length )				      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
15 104 LOAD_FAST 8 ( curr_length )			      								    								  
106 STORE_FAST 6 ( max_length )				      								    								  
							      								    								  
16 108 LOAD_FAST 2 ( si )				      								    								  
110 STORE_FAST 7 ( max_start_index )			      								    								  
							      								    								  
17 >> 112 LOAD_FAST 3 ( ei )				      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 3 ( ei )					      								    								  
							      								    								  
18 120 LOAD_FAST 3 ( ei )				      								    								  
122 STORE_FAST 2 ( si )					      								    								  
124 JUMP_ABSOLUTE 34					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
19 >> 128 LOAD_FAST 0 ( inp )				      								    								  
130 LOAD_FAST 5 ( min_start_index )			      								    								  
132 LOAD_FAST 5 ( min_start_index )			      								    								  
134 LOAD_FAST 4 ( min_length )				      								    								  
136 BINARY_ADD						      								    								  
138 BUILD_SLICE 2					      								    								  
140 BINARY_SUBSCR					      								    								  
142 STORE_FAST 9 ( minWord )				      								    								  
							      								    								  
20 144 LOAD_FAST 0 ( inp )				      								    								  
146 LOAD_FAST 7 ( max_start_index )			      								    								  
148 LOAD_FAST 6 ( max_length )				      								    								  
150 BUILD_SLICE 2					      								    								  
152 BINARY_SUBSCR					      								    								  
154 STORE_FAST 10 ( maxWord )				      								    								  
							      								    								  
21 156 LOAD_GLOBAL 1 ( print )				      								    								  
158 LOAD_CONST 4 ( 'Minimum length word: ' )		      								    								  
160 LOAD_FAST 9 ( minWord )				      								    								  
162 CALL_FUNCTION 2					      								    								  
164 POP_TOP						      								    								  
							      								    								  
22 166 LOAD_GLOBAL 1 ( print )				      								    								  
168 LOAD_CONST 5 ( 'Maximum length word: ' )		      								    								  
170 LOAD_FAST 10 ( maxWord )				      								    								  
172 CALL_FUNCTION 2					      								    								  
174 POP_TOP						      								    								  
176 LOAD_CONST 0 ( None )				      								    								  
178 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1		      FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1		    FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1		  FIRST_<unk> TIVE_INTEGER_EVERY_WINDOW_SIZE_K_1
--							      --							    --								  --
Disassembly of <code object printFirstNegativeInteger at 0x7f def printFirstNegativeInteger ( arr , n , k ) :		    def printFirstNegativeInteger ( arr , n , k = 0 ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( deque )				      	  Di = deque ( )					    	Di = deque ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( k ) :				    	for i in range ( k ) :					  
4 STORE_FAST 3 ( Di )					      	      if ( arr [ i ] < 0 ) :				    	    if arr [ i ] < 0 :					  
							      		  Di.append ( i ) ;				    		Di.append ( i )					  
3 6 SETUP_LOOP 38 ( to 46 )				      	  for i in range ( k , n ) :				    	for i in range ( k , n ) :				  
8 LOAD_GLOBAL 1 ( range )				      	      if ( not Di ) :					    	    if not Di :						  
10 LOAD_FAST 2 ( k )					      		  print ( 0 , end = ' ' )			    		print ( 0 , end = ' ' )				  
12 CALL_FUNCTION 1					      	      else :						    	    else :						  
14 GET_ITER						      		  print ( arr [ Di [ 0 ] ] , end = ' ' ) ;	    		print ( arr [ Di [ 0 ] ] , end = ' ' )		  
>> 16 FOR_ITER 26 ( to 44 )				      	      while Di and Di [ 0 ] <= ( i - k ) :		    	    while Di and Di [ 0 ] <= i - k :			  
18 STORE_FAST 4 ( i )					      		  Di.popleft ( )				    		Di.popleft ( )					  
							      	      if ( arr [ i ] < 0 ) :				    	if arr [ i ] < 0 :					  
4 20 LOAD_FAST 0 ( arr )				      		  Di.append ( i ) ;				    	    Di.append ( i )					  
22 LOAD_FAST 4 ( i )					      	  if not Di :						    if not Di : print ( " DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD 
24 BINARY_SUBSCR					      	      print ( 0 )					    								  
26 LOAD_CONST 1 ( 0 )					      	  else :						    								  
28 COMPARE_OP 0 ( < )					      	      print ( arr [ Di [ 0 ] ] , end = " " )		    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 LOAD_FAST 3 ( Di )					      								    								  
34 LOAD_METHOD 2 ( append )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 CALL_METHOD 1					      								    								  
40 POP_TOP						      								    								  
42 JUMP_ABSOLUTE 16					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 SETUP_LOOP 112 ( to 160 )			      								    								  
48 LOAD_GLOBAL 1 ( range )				      								    								  
50 LOAD_FAST 2 ( k )					      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 CALL_FUNCTION 2					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 98 ( to 158 )				      								    								  
60 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 62 LOAD_FAST 3 ( Di )					      								    								  
64 POP_JUMP_IF_TRUE 80					      								    								  
							      								    								  
8 66 LOAD_GLOBAL 3 ( print )				      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 LOAD_CONST 2 ( ' ' )					      								    								  
72 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
74 CALL_FUNCTION_KW 2					      								    								  
76 POP_TOP						      								    								  
78 JUMP_FORWARD 20 ( to 100 )				      								    								  
							      								    								  
10 >> 80 LOAD_GLOBAL 3 ( print )			      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( Di )					      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 2 ( ' ' )					      								    								  
94 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
96 CALL_FUNCTION_KW 2					      								    								  
98 POP_TOP						      								    								  
							      								    								  
11 >> 100 SETUP_LOOP 32 ( to 134 )			      								    								  
>> 102 LOAD_FAST 3 ( Di )				      								    								  
104 POP_JUMP_IF_FALSE 132				      								    								  
106 LOAD_FAST 3 ( Di )					      								    								  
108 LOAD_CONST 1 ( 0 )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 4 ( i )					      								    								  
114 LOAD_FAST 2 ( k )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 COMPARE_OP 1 ( <= )					      								    								  
120 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
12 122 LOAD_FAST 3 ( Di )				      								    								  
124 LOAD_METHOD 4 ( popleft )				      								    								  
126 CALL_METHOD 0					      								    								  
128 POP_TOP						      								    								  
130 JUMP_ABSOLUTE 102					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
13 >> 134 LOAD_FAST 0 ( arr )				      								    								  
136 LOAD_FAST 4 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_CONST 1 ( 0 )					      								    								  
142 COMPARE_OP 0 ( < )					      								    								  
144 POP_JUMP_IF_FALSE 58				      								    								  
							      								    								  
14 146 LOAD_FAST 3 ( Di )				      								    								  
148 LOAD_METHOD 2 ( append )				      								    								  
150 LOAD_FAST 4 ( i )					      								    								  
152 CALL_METHOD 1					      								    								  
154 POP_TOP						      								    								  
156 JUMP_ABSOLUTE 58					      								    								  
>> 158 POP_BLOCK					      								    								  
							      								    								  
15 >> 160 LOAD_FAST 3 ( Di )				      								    								  
162 POP_JUMP_IF_TRUE 174				      								    								  
							      								    								  
16 164 LOAD_GLOBAL 3 ( print )				      								    								  
166 LOAD_CONST 1 ( 0 )					      								    								  
168 CALL_FUNCTION 1					      								    								  
170 POP_TOP						      								    								  
172 JUMP_FORWARD 20 ( to 194 )				      								    								  
							      								    								  
18 >> 174 LOAD_GLOBAL 3 ( print )			      								    								  
176 LOAD_FAST 0 ( arr )					      								    								  
178 LOAD_FAST 3 ( Di )					      								    								  
180 LOAD_CONST 1 ( 0 )					      								    								  
182 BINARY_SUBSCR					      								    								  
184 BINARY_SUBSCR					      								    								  
186 LOAD_CONST 2 ( ' ' )				      								    								  
188 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
190 CALL_FUNCTION_KW 2					      								    								  
192 POP_TOP						      								    								  
>> 194 LOAD_CONST 0 ( None )				      								    								  
196 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS			      LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS			    LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS			  LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS
--							      --							    --								  --
Disassembly of <code object printLevels at 0x7f33e2644f60, fi def printLevels ( graph , V , x ) :			    def printLevels ( graph , V , x ) :				  script_not_found : None
2 0 LOAD_CONST 0 ( None )				      	  level = [ None ] * V					    	level = [ None ] * V					  
2 BUILD_LIST 1						      	  marked = [ False ] * V				    	marked = [ False ] * V					  
4 LOAD_FAST 1 ( V )					      	  que = queue.Queue ( )					    	que = queue.Queue ( )					  
6 BINARY_MULTIPLY					      	  que.put ( x )						    	que.put ( x )						  
8 STORE_FAST 3 ( level )				      	  level [ x ] = 0					    	level [ x ] = 0						  
							      	  marked [ x ] = True					    	marked [ x ] = True					  
3 10 LOAD_CONST 1 ( False )				      	  while ( not que.empty ( ) ) :				    	while not que.empty ( ) :				  
12 BUILD_LIST 1						      	      x = que.get ( )					    	    x = que.get ( )					  
14 LOAD_FAST 1 ( V )					      	      for i in range ( len ( graph [ x ] ) ) :		    	    for i in range ( len ( graph [ x ] ) ) :		  
16 BINARY_MULTIPLY					      		  b = graph [ x ] [ i ]				    		b = graph [ x ] [ i ]				  
18 STORE_FAST 4 ( marked )				      		  if ( not marked [ b ] ) :			    		if not marked [ b ] :				  
							      		      que.put ( b )				    		    que.put ( b )				  
4 20 LOAD_GLOBAL 0 ( queue )				      		      level [ b ] = level [ x ] + 1		    		    level [ b ] = level [ x ] + 1		  
22 LOAD_METHOD 1 ( Queue )				      		      marked [ b ] = True			    		    marked [ b ] = True				  
24 CALL_METHOD 0					      	  print ( "Nodes" , " " , "Level" )			    print ( 'Nodes' , ' ' )					  
26 STORE_FAST 5 ( que )					      	  for i in range ( V ) :				    for i in range ( 3 , ' ' ) :				  
							      	      print ( " " , i , " --> " , level [ i ] )		    	print ( '-i  - ' , i )					  
5 28 LOAD_FAST 5 ( que )				      								    								  
30 LOAD_METHOD 2 ( put )				      								    								  
32 LOAD_FAST 2 ( x )					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
							      								    								  
6 38 LOAD_CONST 2 ( 0 )					      								    								  
40 LOAD_FAST 3 ( level )				      								    								  
42 LOAD_FAST 2 ( x )					      								    								  
44 STORE_SUBSCR						      								    								  
							      								    								  
7 46 LOAD_CONST 3 ( True )				      								    								  
48 LOAD_FAST 4 ( marked )				      								    								  
50 LOAD_FAST 2 ( x )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
8 54 SETUP_LOOP 100 ( to 156 )				      								    								  
>> 56 LOAD_FAST 5 ( que )				      								    								  
58 LOAD_METHOD 3 ( empty )				      								    								  
60 CALL_METHOD 0					      								    								  
62 POP_JUMP_IF_TRUE 154					      								    								  
							      								    								  
9 64 LOAD_FAST 5 ( que )				      								    								  
66 LOAD_METHOD 4 ( get )				      								    								  
68 CALL_METHOD 0					      								    								  
70 STORE_FAST 2 ( x )					      								    								  
							      								    								  
10 72 SETUP_LOOP 78 ( to 152 )				      								    								  
74 LOAD_GLOBAL 5 ( range )				      								    								  
76 LOAD_GLOBAL 6 ( len )				      								    								  
78 LOAD_FAST 0 ( graph )				      								    								  
80 LOAD_FAST 2 ( x )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 58 ( to 150 )				      								    								  
92 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 94 LOAD_FAST 0 ( graph )				      								    								  
96 LOAD_FAST 2 ( x )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 6 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 STORE_FAST 7 ( b )					      								    								  
							      								    								  
12 106 LOAD_FAST 4 ( marked )				      								    								  
108 LOAD_FAST 7 ( b )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 POP_JUMP_IF_TRUE 90					      								    								  
							      								    								  
13 114 LOAD_FAST 5 ( que )				      								    								  
116 LOAD_METHOD 2 ( put )				      								    								  
118 LOAD_FAST 7 ( b )					      								    								  
120 CALL_METHOD 1					      								    								  
122 POP_TOP						      								    								  
							      								    								  
14 124 LOAD_FAST 3 ( level )				      								    								  
126 LOAD_FAST 2 ( x )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_CONST 4 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 LOAD_FAST 3 ( level )				      								    								  
136 LOAD_FAST 7 ( b )					      								    								  
138 STORE_SUBSCR					      								    								  
							      								    								  
15 140 LOAD_CONST 3 ( True )				      								    								  
142 LOAD_FAST 4 ( marked )				      								    								  
144 LOAD_FAST 7 ( b )					      								    								  
146 STORE_SUBSCR					      								    								  
148 JUMP_ABSOLUTE 90					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 JUMP_ABSOLUTE 56					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
16 >> 156 LOAD_GLOBAL 7 ( print )			      								    								  
158 LOAD_CONST 5 ( 'Nodes' )				      								    								  
160 LOAD_CONST 6 ( ' ' )				      								    								  
162 LOAD_CONST 7 ( 'Level' )				      								    								  
164 CALL_FUNCTION 3					      								    								  
166 POP_TOP						      								    								  
							      								    								  
17 168 SETUP_LOOP 34 ( to 204 )				      								    								  
170 LOAD_GLOBAL 5 ( range )				      								    								  
172 LOAD_FAST 1 ( V )					      								    								  
174 CALL_FUNCTION 1					      								    								  
176 GET_ITER						      								    								  
>> 178 FOR_ITER 22 ( to 202 )				      								    								  
180 STORE_FAST 6 ( i )					      								    								  
							      								    								  
18 182 LOAD_GLOBAL 7 ( print )				      								    								  
184 LOAD_CONST 6 ( ' ' )				      								    								  
186 LOAD_FAST 6 ( i )					      								    								  
188 LOAD_CONST 8 ( ' --> ' )				      								    								  
190 LOAD_FAST 3 ( level )				      								    								  
192 LOAD_FAST 6 ( i )					      								    								  
194 BINARY_SUBSCR					      								    								  
196 CALL_FUNCTION 4					      								    								  
198 POP_TOP						      								    								  
200 JUMP_ABSOLUTE 178					      								    								  
>> 202 POP_BLOCK					      								    								  
>> 204 LOAD_CONST 0 ( None )				      								    								  
206 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVE
--							      --							    --								  --
Disassembly of <code object findString at 0x7f33e2644f60, fil def findString ( str , n , k ) :				    def findString ( str , n , k ) :				  script_not_found : None
2 0 LOAD_FAST 2 ( k )					      	  if ( k == 0 ) :					    	if k == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      print ( str )					    	    print ( str )					  
4 COMPARE_OP 2 ( == )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  str2 = str						    	str2 = str						  
							      	  p = 0							    	p = 0							  
3 8 LOAD_GLOBAL 0 ( print )				      	  for i in range ( 0 , n , 1 ) :			    	for i in range ( 0 , n , 1 ) :				  
10 LOAD_FAST 0 ( str )					      	      if ( str2 [ i ] != 'a' ) :			    	    if str2 [ i ] != "a" :				  
12 CALL_FUNCTION 1					      		  str2 = str2.replace ( str2 [ i ] , 'a' )	    		str2 = str2.replace ( str2 [ i ] , "a" )	  
14 POP_TOP						      		  p += 1					    		p += 1						  
							      		  if ( p == k ) :				    		if p == k :					  
4 16 LOAD_CONST 0 ( None )				      		      break					    		    break					  
18 RETURN_VALUE						      	  if ( p < k ) :					    	if p < k :						  
							      	      i = n - 1						    	    i = n - 1						  
5 >> 20 LOAD_FAST 0 ( str )				      	      while ( i >= 0 ) :				    	    while i >= 0 :					  
22 STORE_FAST 3 ( str2 )				      		  if ( str [ i ] == 'a' ) :			    		if str [ i ] == "a" :				  
							      		      str2 = str2.replace ( str2 [ i ] , 'b' )	    		    str2 = str2.replace ( str2 [ i ] , "b" )	  
6 24 LOAD_CONST 1 ( 0 )					      		      p += 1					    		    p += 1					  
26 STORE_FAST 4 ( p )					      		  if ( p == k ) :				    		if p == k :					  
							      		      break					    		    break					  
7 28 SETUP_LOOP 66 ( to 96 )				      		  i -= 1					    	    print ( str2 )					  
30 LOAD_GLOBAL 1 ( range )				      	  print ( str2 )					    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 CALL_FUNCTION 3					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 50 ( to 94 )				      								    								  
44 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 46 LOAD_FAST 3 ( str2 )				      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_CONST 3 ( 'a' )					      								    								  
54 COMPARE_OP 3 ( != )					      								    								  
56 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
9 58 LOAD_FAST 3 ( str2 )				      								    								  
60 LOAD_METHOD 2 ( replace )				      								    								  
62 LOAD_FAST 3 ( str2 )					      								    								  
64 LOAD_FAST 5 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 3 ( 'a' )					      								    								  
70 CALL_METHOD 2					      								    								  
72 STORE_FAST 3 ( str2 )				      								    								  
							      								    								  
10 74 LOAD_FAST 4 ( p )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 4 ( p )					      								    								  
							      								    								  
11 82 LOAD_FAST 4 ( p )					      								    								  
84 LOAD_FAST 2 ( k )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
12 90 BREAK_LOOP					      								    								  
92 JUMP_ABSOLUTE 42					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
13 >> 96 LOAD_FAST 4 ( p )				      								    								  
98 LOAD_FAST 2 ( k )					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
14 104 LOAD_FAST 1 ( n )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 STORE_FAST 5 ( i )					      								    								  
							      								    								  
15 112 SETUP_LOOP 66 ( to 180 )				      								    								  
>> 114 LOAD_FAST 5 ( i )				      								    								  
116 LOAD_CONST 1 ( 0 )					      								    								  
118 COMPARE_OP 5 ( >= )					      								    								  
120 POP_JUMP_IF_FALSE 178				      								    								  
							      								    								  
16 122 LOAD_FAST 0 ( str )				      								    								  
124 LOAD_FAST 5 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_CONST 3 ( 'a' )				      								    								  
130 COMPARE_OP 2 ( == )					      								    								  
132 POP_JUMP_IF_FALSE 158				      								    								  
							      								    								  
17 134 LOAD_FAST 3 ( str2 )				      								    								  
136 LOAD_METHOD 2 ( replace )				      								    								  
138 LOAD_FAST 3 ( str2 )				      								    								  
140 LOAD_FAST 5 ( i )					      								    								  
142 BINARY_SUBSCR					      								    								  
144 LOAD_CONST 4 ( 'b' )				      								    								  
146 CALL_METHOD 2					      								    								  
148 STORE_FAST 3 ( str2 )				      								    								  
							      								    								  
18 150 LOAD_FAST 4 ( p )				      								    								  
152 LOAD_CONST 2 ( 1 )					      								    								  
154 INPLACE_ADD						      								    								  
156 STORE_FAST 4 ( p )					      								    								  
							      								    								  
19 >> 158 LOAD_FAST 4 ( p )				      								    								  
160 LOAD_FAST 2 ( k )					      								    								  
162 COMPARE_OP 2 ( == )					      								    								  
164 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
20 166 BREAK_LOOP					      								    								  
							      								    								  
21 >> 168 LOAD_FAST 5 ( i )				      								    								  
170 LOAD_CONST 2 ( 1 )					      								    								  
172 INPLACE_SUBTRACT					      								    								  
174 STORE_FAST 5 ( i )					      								    								  
176 JUMP_ABSOLUTE 114					      								    								  
>> 178 POP_BLOCK					      								    								  
							      								    								  
22 >> 180 LOAD_GLOBAL 0 ( print )			      								    								  
182 LOAD_FAST 3 ( str2 )				      								    								  
184 CALL_FUNCTION 1					      								    								  
186 POP_TOP						      								    								  
188 LOAD_CONST 0 ( None )				      								    								  
190 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_ELEMENT_TWO_SORTED_ARRAYS				      K_TH_ELEMENT_TWO_SORTED_ARRAYS				    K_TH_ELEMENT_TWO_SORTED_ARRAYS				  K_TH_ELEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
Disassembly of <code object kth at 0x7f33e2644f60, file "<dis def kth ( arr1 , arr2 , m , n , k ) :			    def kth ( arr1 , arr2 , m , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  sorted1 = [ 0 ] * ( m + n )				    	sorted1 = [ 0 ] * ( m + n )				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  i = 0							    	i = 0							  _sa.valid/K_TH_ELEMENT_TWO_SORTED_ARRAYS.py", line
4 LOAD_FAST 2 ( m )					      	  j = 0							    	j = 0							   41	  def f_filled ( arr1 , arr2 , m , n , n ) :
6 LOAD_FAST 3 ( n )					      	  d = 0							    	d = 0							       ^ SyntaxError: duplicate argument 'n' in func
8 BINARY_ADD						      	  while ( i < m and j < n ) :				    	while i < m and j < n :					  tion definition
10 BINARY_MULTIPLY					      	      if ( arr1 [ i ] < arr2 [ j ] ) :			    	    if arr1 [ i ] < arr2 [ j ] :			  
12 STORE_FAST 5 ( sorted1 )				      		  sorted1 [ d ] = arr1 [ i ]			    		sorted1 [ d ] = arr1 [ i ]			  
							      		  i += 1					    		i += 1						  
3 14 LOAD_CONST 1 ( 0 )					      	      else :						    	    else :						  
16 STORE_FAST 6 ( i )					      		  sorted1 [ d ] = arr2 [ j ]			    		sorted1 [ d ] = arr2 [ j ]			  
							      		  j += 1					    		j += 1						  
4 18 LOAD_CONST 1 ( 0 )					      	      d += 1						    	    d += 1						  
20 STORE_FAST 7 ( j )					      	  while ( i < m ) :					    	while i < m :						  
							      	      sorted1 [ d ] = arr1 [ i ]			    	    sorted1 [ d ] = arr1 [ i ]				  
5 22 LOAD_CONST 1 ( 0 )					      	      d += 1						    	    d += 1						  
24 STORE_FAST 8 ( d )					      	      i += 1						    	    i += 1						  
							      	  while ( j < n ) :					    	while n < j and d [ j ] < arr2 [ j ] :			  
6 26 SETUP_LOOP 86 ( to 114 )				      	      sorted1 [ d ] = arr2 [ j ]			    	    d += 1						  
>> 28 LOAD_FAST 6 ( i )					      	      d += 1						    	    j += 1						  
30 LOAD_FAST 2 ( m )					      	      j += 1						    	return d						  
32 COMPARE_OP 0 ( < )					      	  return sorted1 [ k - 1 ]				    								  
34 POP_JUMP_IF_FALSE 112				      								    								  
36 LOAD_FAST 7 ( j )					      								    								  
38 LOAD_FAST 3 ( n )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( arr1 )				      								    								  
46 LOAD_FAST 6 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( arr2 )					      								    								  
52 LOAD_FAST 7 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
8 60 LOAD_FAST 0 ( arr1 )				      								    								  
62 LOAD_FAST 6 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 5 ( sorted1 )				      								    								  
68 LOAD_FAST 8 ( d )					      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
9 72 LOAD_FAST 6 ( i )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 6 ( i )					      								    								  
80 JUMP_FORWARD 20 ( to 102 )				      								    								  
							      								    								  
11 >> 82 LOAD_FAST 1 ( arr2 )				      								    								  
84 LOAD_FAST 7 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 5 ( sorted1 )				      								    								  
90 LOAD_FAST 8 ( d )					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
12 94 LOAD_FAST 7 ( j )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 7 ( j )					      								    								  
							      								    								  
13 >> 102 LOAD_FAST 8 ( d )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 INPLACE_ADD						      								    								  
108 STORE_FAST 8 ( d )					      								    								  
110 JUMP_ABSOLUTE 28					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
14 >> 114 SETUP_LOOP 40 ( to 156 )			      								    								  
>> 116 LOAD_FAST 6 ( i )				      								    								  
118 LOAD_FAST 2 ( m )					      								    								  
120 COMPARE_OP 0 ( < )					      								    								  
122 POP_JUMP_IF_FALSE 154				      								    								  
							      								    								  
15 124 LOAD_FAST 0 ( arr1 )				      								    								  
126 LOAD_FAST 6 ( i )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 5 ( sorted1 )				      								    								  
132 LOAD_FAST 8 ( d )					      								    								  
134 STORE_SUBSCR					      								    								  
							      								    								  
16 136 LOAD_FAST 8 ( d )				      								    								  
138 LOAD_CONST 2 ( 1 )					      								    								  
140 INPLACE_ADD						      								    								  
142 STORE_FAST 8 ( d )					      								    								  
							      								    								  
17 144 LOAD_FAST 6 ( i )				      								    								  
146 LOAD_CONST 2 ( 1 )					      								    								  
148 INPLACE_ADD						      								    								  
150 STORE_FAST 6 ( i )					      								    								  
152 JUMP_ABSOLUTE 116					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
18 >> 156 SETUP_LOOP 40 ( to 198 )			      								    								  
>> 158 LOAD_FAST 7 ( j )				      								    								  
160 LOAD_FAST 3 ( n )					      								    								  
162 COMPARE_OP 0 ( < )					      								    								  
164 POP_JUMP_IF_FALSE 196				      								    								  
							      								    								  
19 166 LOAD_FAST 1 ( arr2 )				      								    								  
168 LOAD_FAST 7 ( j )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 LOAD_FAST 5 ( sorted1 )				      								    								  
174 LOAD_FAST 8 ( d )					      								    								  
176 STORE_SUBSCR					      								    								  
							      								    								  
20 178 LOAD_FAST 8 ( d )				      								    								  
180 LOAD_CONST 2 ( 1 )					      								    								  
182 INPLACE_ADD						      								    								  
184 STORE_FAST 8 ( d )					      								    								  
							      								    								  
21 186 LOAD_FAST 7 ( j )				      								    								  
188 LOAD_CONST 2 ( 1 )					      								    								  
190 INPLACE_ADD						      								    								  
192 STORE_FAST 7 ( j )					      								    								  
194 JUMP_ABSOLUTE 158					      								    								  
>> 196 POP_BLOCK					      								    								  
							      								    								  
22 >> 198 LOAD_FAST 5 ( sorted1 )			      								    								  
200 LOAD_FAST 4 ( k )					      								    								  
202 LOAD_CONST 2 ( 1 )					      								    								  
204 BINARY_SUBTRACT					      								    								  
206 BINARY_SUBSCR					      								    								  
208 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	      DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	    DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	  DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B
--							      --							    --								  --
Disassembly of <code object <<unk>> teLogarithm at 0x7f33e264 def <<unk>> teLogarithm ( a , b , m ) :			    def verification teLogfromm ( a , b , m ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  n = int ( math.sqrt ( m ) + 1 ) ;			    	n = int ( math.sqrt ( m ) + 1 )				  
2 LOAD_GLOBAL 1 ( math )				      	  an = 1 ;						    	an = 1							  
4 LOAD_METHOD 2 ( sqrt )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 LOAD_FAST 2 ( m )					      	      an = ( an * a ) % m ;				    	    an = an * a % m					  
8 CALL_METHOD 1						      	  value = [ 0 ] * m ;					    	value = [ 0 ] * m					  
10 LOAD_CONST 1 ( 1 )					      	  cur = an ;						    	cur = an						  
12 BINARY_ADD						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
14 CALL_FUNCTION 1					      	      if ( value [ cur ] == 0 ) :			    	    if value [ cur ] == 0 :				  
16 STORE_FAST 3 ( n )					      		  value [ cur ] = i ;				    		value [ cur ] = i				  
							      	      cur = ( cur * an ) % m ;				    	    cur = cur * an + m					  
3 18 LOAD_CONST 1 ( 1 )					      	  cur = b ;						    	cur = b							  
20 STORE_FAST 4 ( an )					      	  for i in range ( n + 1 ) :				    	for i in range ( n + 1 ) :				  
							      	      if ( value [ cur ] > 0 ) :			    	    if value [ cur ] > 0 :				  
4 22 SETUP_LOOP 28 ( to 52 )				      		  ans = value [ cur ] * n - i ;			    		ans = ( value [ cur ] * n - i )			  
24 LOAD_GLOBAL 3 ( range )				      		  if ( ans < m ) :				    	    ans = ans * m					  
26 LOAD_FAST 3 ( n )					      		      return ans ;				    	    if ans < 0 :					  
28 CALL_FUNCTION 1					      	      cur = ( cur * a ) % m ;				    		return ( cur * a ) % ans			  
30 GET_ITER						      	  return - 1 ;						    	return - 1						  
>> 32 FOR_ITER 16 ( to 50 )				      								    								  
34 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( an )					      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 2 ( m )					      								    								  
44 BINARY_MODULO					      								    								  
46 STORE_FAST 4 ( an )					      								    								  
48 JUMP_ABSOLUTE 32					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 LOAD_CONST 2 ( 0 )				      								    								  
54 BUILD_LIST 1						      								    								  
56 LOAD_FAST 2 ( m )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 STORE_FAST 6 ( value )				      								    								  
							      								    								  
7 62 LOAD_FAST 4 ( an )					      								    								  
64 STORE_FAST 7 ( cur )					      								    								  
							      								    								  
8 66 SETUP_LOOP 54 ( to 122 )				      								    								  
68 LOAD_GLOBAL 3 ( range )				      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 LOAD_FAST 3 ( n )					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 2					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 36 ( to 120 )				      								    								  
84 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 86 LOAD_FAST 6 ( value )				      								    								  
88 LOAD_FAST 7 ( cur )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 2 ( 0 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
10 98 LOAD_FAST 5 ( i )					      								    								  
100 LOAD_FAST 6 ( value )				      								    								  
102 LOAD_FAST 7 ( cur )					      								    								  
104 STORE_SUBSCR					      								    								  
							      								    								  
11 >> 106 LOAD_FAST 7 ( cur )				      								    								  
108 LOAD_FAST 4 ( an )					      								    								  
110 BINARY_MULTIPLY					      								    								  
112 LOAD_FAST 2 ( m )					      								    								  
114 BINARY_MODULO					      								    								  
116 STORE_FAST 7 ( cur )				      								    								  
118 JUMP_ABSOLUTE 82					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
12 >> 122 LOAD_FAST 1 ( b )				      								    								  
124 STORE_FAST 7 ( cur )				      								    								  
							      								    								  
13 126 SETUP_LOOP 72 ( to 200 )				      								    								  
128 LOAD_GLOBAL 3 ( range )				      								    								  
130 LOAD_FAST 3 ( n )					      								    								  
132 LOAD_CONST 1 ( 1 )					      								    								  
134 BINARY_ADD						      								    								  
136 CALL_FUNCTION 1					      								    								  
138 GET_ITER						      								    								  
>> 140 FOR_ITER 56 ( to 198 )				      								    								  
142 STORE_FAST 5 ( i )					      								    								  
							      								    								  
14 144 LOAD_FAST 6 ( value )				      								    								  
146 LOAD_FAST 7 ( cur )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 LOAD_CONST 2 ( 0 )					      								    								  
152 COMPARE_OP 4 ( > )					      								    								  
154 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
15 156 LOAD_FAST 6 ( value )				      								    								  
158 LOAD_FAST 7 ( cur )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_FAST 3 ( n )					      								    								  
164 BINARY_MULTIPLY					      								    								  
166 LOAD_FAST 5 ( i )					      								    								  
168 BINARY_SUBTRACT					      								    								  
170 STORE_FAST 8 ( ans )				      								    								  
							      								    								  
16 172 LOAD_FAST 8 ( ans )				      								    								  
174 LOAD_FAST 2 ( m )					      								    								  
176 COMPARE_OP 0 ( < )					      								    								  
178 POP_JUMP_IF_FALSE 184				      								    								  
							      								    								  
17 180 LOAD_FAST 8 ( ans )				      								    								  
182 RETURN_VALUE					      								    								  
							      								    								  
18 >> 184 LOAD_FAST 7 ( cur )				      								    								  
186 LOAD_FAST 0 ( a )					      								    								  
188 BINARY_MULTIPLY					      								    								  
190 LOAD_FAST 2 ( m )					      								    								  
192 BINARY_MODULO					      								    								  
194 STORE_FAST 7 ( cur )				      								    								  
196 JUMP_ABSOLUTE 140					      								    								  
>> 198 POP_BLOCK					      								    								  
							      								    								  
19 >> 200 LOAD_CONST 3 ( - 1 )				      								    								  
202 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT
--							      --							    --								  --
Disassembly of <code object maxNumOfChocolates at 0x7f33e2653 def maxNumOfChocolates ( arr , n , k ) :			    def maxNumOfChocolates ( arr , n , k = 5 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_MAP 0						      	  um , curr_rem , maxSum = { } , 0 , 0			    	um , curr_rem = { } , 0 , 0				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 0 )					      	  sm = [ 0 ] * n					    	sm = [ 0 ] * n						  _sa.valid/MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQ
4 LOAD_CONST 1 ( 0 )					      	  sm [ 0 ] = arr [ 0 ]					    	sm [ 0 ] = arr [ 0 ]					  UALLY_AMONG_K_STUDENTS.py", line 48	  return sm
6 ROT_THREE						      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  	   ^ SyntaxError: invalid syntax
8 ROT_TWO						      	      sm [ i ] = sm [ i - 1 ] + arr [ i ]		    	    sm [ i ] = sm [ i - 1 ] + arr [ i ]			  
10 STORE_FAST 3 ( um )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
12 STORE_FAST 4 ( curr_rem )				      	      curr_rem = sm [ i ] % k				    	    curr_rem = sm [ i ] % k				  
14 STORE_FAST 5 ( maxSum )				      	      if ( not curr_rem and maxSum < sm [ i ] ) :	    	    if not curr_rem and maxSum < sm [ i ] :		  
							      		  maxSum = sm [ i ]				    		maxSum = sm [ i ]				  
3 16 LOAD_CONST 1 ( 0 )					      	      elif ( not curr_rem in um ) :			    	    elif curr_rem not in um :				  
18 BUILD_LIST 1						      		  um [ curr_rem ] = i				    		um [ curr_rem ] = i				  
20 LOAD_FAST 1 ( n )					      	      elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) 	else :							  
22 BINARY_MULTIPLY					      		  maxSum = sm [ i ] - sm [ um [ curr_rem ] ]	    	    sm [ i ] = maxSum [ sm [ i ] - sm [ curr_rem ] [ curr 
24 STORE_FAST 6 ( sm )					      	  return maxSum // k					    	return sm						  
							      								    								  
4 26 LOAD_FAST 0 ( arr )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 6 ( sm )					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 STORE_SUBSCR						      								    								  
							      								    								  
5 38 SETUP_LOOP 42 ( to 82 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 28 ( to 80 )				      								    								  
52 STORE_FAST 7 ( i )					      								    								  
							      								    								  
6 54 LOAD_FAST 6 ( sm )					      								    								  
56 LOAD_FAST 7 ( i )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 7 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_ADD						      								    								  
72 LOAD_FAST 6 ( sm )					      								    								  
74 LOAD_FAST 7 ( i )					      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 50					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
7 >> 82 SETUP_LOOP 116 ( to 200 )			      								    								  
84 LOAD_GLOBAL 0 ( range )				      								    								  
86 LOAD_FAST 1 ( n )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 104 ( to 198 )				      								    								  
94 STORE_FAST 7 ( i )					      								    								  
							      								    								  
8 96 LOAD_FAST 6 ( sm )					      								    								  
98 LOAD_FAST 7 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 2 ( k )					      								    								  
104 BINARY_MODULO					      								    								  
106 STORE_FAST 4 ( curr_rem )				      								    								  
							      								    								  
9 108 LOAD_FAST 4 ( curr_rem )				      								    								  
110 POP_JUMP_IF_TRUE 134				      								    								  
112 LOAD_FAST 5 ( maxSum )				      								    								  
114 LOAD_FAST 6 ( sm )					      								    								  
116 LOAD_FAST 7 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 COMPARE_OP 0 ( < )					      								    								  
122 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
10 124 LOAD_FAST 6 ( sm )				      								    								  
126 LOAD_FAST 7 ( i )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 STORE_FAST 5 ( maxSum )				      								    								  
132 JUMP_ABSOLUTE 92					      								    								  
							      								    								  
11 >> 134 LOAD_FAST 4 ( curr_rem )			      								    								  
136 LOAD_FAST 3 ( um )					      								    								  
138 COMPARE_OP 7 ( not in )				      								    								  
140 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
12 142 LOAD_FAST 7 ( i )				      								    								  
144 LOAD_FAST 3 ( um )					      								    								  
146 LOAD_FAST 4 ( curr_rem )				      								    								  
148 STORE_SUBSCR					      								    								  
150 JUMP_ABSOLUTE 92					      								    								  
							      								    								  
13 >> 152 LOAD_FAST 5 ( maxSum )			      								    								  
154 LOAD_FAST 6 ( sm )					      								    								  
156 LOAD_FAST 7 ( i )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_FAST 6 ( sm )					      								    								  
162 LOAD_FAST 3 ( um )					      								    								  
164 LOAD_FAST 4 ( curr_rem )				      								    								  
166 BINARY_SUBSCR					      								    								  
168 BINARY_SUBSCR					      								    								  
170 BINARY_SUBTRACT					      								    								  
172 COMPARE_OP 0 ( < )					      								    								  
174 POP_JUMP_IF_FALSE 92				      								    								  
							      								    								  
14 176 LOAD_FAST 6 ( sm )				      								    								  
178 LOAD_FAST 7 ( i )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 LOAD_FAST 6 ( sm )					      								    								  
184 LOAD_FAST 3 ( um )					      								    								  
186 LOAD_FAST 4 ( curr_rem )				      								    								  
188 BINARY_SUBSCR					      								    								  
190 BINARY_SUBSCR					      								    								  
192 BINARY_SUBTRACT					      								    								  
194 STORE_FAST 5 ( maxSum )				      								    								  
196 JUMP_ABSOLUTE 92					      								    								  
>> 198 POP_BLOCK					      								    								  
							      								    								  
15 >> 200 LOAD_FAST 5 ( maxSum )			      								    								  
202 LOAD_FAST 2 ( k )					      								    								  
204 BINARY_FLOOR_DIVIDE					      								    								  
206 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	      CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	    CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	  CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS
--							      --							    --								  --
Disassembly of <code object HalfDiagonalSums at 0x7f33e2653ed def HalfDiagonalSums ( mat , n ) :			    def HalfDiagonalSums ( mat , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  diag1_left = 0					    	diag1_left = 0						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 2 ( diag1_left )				      	  diag1_right = 0					    	diag1_right = 0						  _sa.valid/CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_
							      	  diag2_left = 0					    	diag2_left = 0						  HALF_DIAGONALS.py", line 47	  elif i > n // 2 :
3 4 LOAD_CONST 1 ( 0 )					      	  diag2_right = 0					    	diag2_right = 0						  	 ^ SyntaxError: invalid syntax
6 STORE_FAST 3 ( diag1_right )				      	  i = 0							    	i = n - 1						  
							      	  j = n - 1						    	j = n - 1						  
4 8 LOAD_CONST 1 ( 0 )					      	  while i < n :						    	while i < n :						  
10 STORE_FAST 4 ( diag2_left )				      	      if ( i < n // 2 ) :				    	    if i < n // 2 :					  
							      		  diag1_left += mat [ i ] [ i ]			    		diag1_left += mat [ i ] [ i ]			  
5 12 LOAD_CONST 1 ( 0 )					      		  diag2_left += mat [ j ] [ i ]			    		diag2_left += mat [ j ] [ i ]			  
14 STORE_FAST 5 ( diag2_right )				      	      elif ( i > n // 2 ) :				    	elif i > n // 2 :					  
							      		  diag1_right += mat [ i ] [ i ]		    	    diag1_right += mat [ i ] [ i ]			  
6 16 LOAD_CONST 1 ( 0 )					      		  diag2_right += mat [ j ] [ i ]		    	    diag2_right += mat [ j ] [ i ]			  
18 STORE_FAST 6 ( i )					      	      i += 1						    	i += 1							  
							      	      j -= 1						    	j -= 1							  
7 20 LOAD_FAST 1 ( n )					      	  return ( diag1_left == diag2_right and diag2_right == dia if ( diag2_right == diag2_2_right and diag2_left == diag2_2_2 
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 STORE_FAST 7 ( j )					      								    								  
							      								    								  
8 28 SETUP_LOOP 118 ( to 148 )				      								    								  
>> 30 LOAD_FAST 6 ( i )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
9 38 LOAD_FAST 6 ( i )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 LOAD_CONST 3 ( 2 )					      								    								  
44 BINARY_FLOOR_DIVIDE					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
10 50 LOAD_FAST 2 ( diag1_left )			      								    								  
52 LOAD_FAST 0 ( mat )					      								    								  
54 LOAD_FAST 6 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 6 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 2 ( diag1_left )				      								    								  
							      								    								  
11 66 LOAD_FAST 4 ( diag2_left )			      								    								  
68 LOAD_FAST 0 ( mat )					      								    								  
70 LOAD_FAST 7 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 6 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 4 ( diag2_left )				      								    								  
82 JUMP_FORWARD 44 ( to 128 )				      								    								  
							      								    								  
12 >> 84 LOAD_FAST 6 ( i )				      								    								  
86 LOAD_FAST 1 ( n )					      								    								  
88 LOAD_CONST 3 ( 2 )					      								    								  
90 BINARY_FLOOR_DIVIDE					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
13 96 LOAD_FAST 3 ( diag1_right )			      								    								  
98 LOAD_FAST 0 ( mat )					      								    								  
100 LOAD_FAST 6 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 6 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 3 ( diag1_right )			      								    								  
							      								    								  
14 112 LOAD_FAST 5 ( diag2_right )			      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 7 ( j )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 6 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 INPLACE_ADD						      								    								  
126 STORE_FAST 5 ( diag2_right )			      								    								  
							      								    								  
15 >> 128 LOAD_FAST 6 ( i )				      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 6 ( i )					      								    								  
							      								    								  
16 136 LOAD_FAST 7 ( j )				      								    								  
138 LOAD_CONST 2 ( 1 )					      								    								  
140 INPLACE_SUBTRACT					      								    								  
142 STORE_FAST 7 ( j )					      								    								  
144 JUMP_ABSOLUTE 30					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
17 >> 148 LOAD_FAST 2 ( diag1_left )			      								    								  
150 LOAD_FAST 5 ( diag2_right )				      								    								  
152 COMPARE_OP 2 ( == )					      								    								  
154 JUMP_IF_FALSE_OR_POP 194				      								    								  
156 LOAD_FAST 5 ( diag2_right )				      								    								  
158 LOAD_FAST 4 ( diag2_left )				      								    								  
160 COMPARE_OP 2 ( == )					      								    								  
162 JUMP_IF_FALSE_OR_POP 194				      								    								  
164 LOAD_FAST 3 ( diag1_right )				      								    								  
166 LOAD_FAST 4 ( diag2_left )				      								    								  
168 COMPARE_OP 2 ( == )					      								    								  
170 JUMP_IF_FALSE_OR_POP 194				      								    								  
172 LOAD_FAST 5 ( diag2_right )				      								    								  
174 LOAD_FAST 0 ( mat )					      								    								  
176 LOAD_FAST 1 ( n )					      								    								  
178 LOAD_CONST 3 ( 2 )					      								    								  
180 BINARY_FLOOR_DIVIDE					      								    								  
182 BINARY_SUBSCR					      								    								  
184 LOAD_FAST 1 ( n )					      								    								  
186 LOAD_CONST 3 ( 2 )					      								    								  
188 BINARY_FLOOR_DIVIDE					      								    								  
190 BINARY_SUBSCR					      								    								  
192 COMPARE_OP 2 ( == )					      								    								  
>> 194 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		      RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		    RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		  RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX
--							      --							    --								  --
Disassembly of <code object findLeft at 0x7f33e2644930, file  def findLeft ( str ) :					    def findLeft ( str ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str ) - 1 ;					    	n = len ( str ) - 1					  
2 LOAD_FAST 0 ( str )					      	  while ( n > 0 ) :					    	while n > 0 :						  
4 CALL_FUNCTION 1					      	      if ( str [ n ] == 'd' ) :				    	    if str [ n ] == "d" :				  
6 LOAD_CONST 1 ( 1 )					      		  str = str [ 0 : n ] + 'c' + str [ n + 1 : ] ;	    		str = str [ 0 : n ] + "c" + str [ n + 1 : ]	  
8 BINARY_SUBTRACT					      		  break ;					    		break						  
10 STORE_FAST 1 ( n )					      	      if ( str [ n ] == 'b' ) :				    	    if str [ n ] == "b" :				  
							      		  str = str [ 0 : n ] + 'a' + str [ n + 1 : ] ;	    		str = str [ 0 : n ] + "a" + str [ n + 1 : ]	  
3 12 SETUP_LOOP 202 ( to 216 )				      		  break ;					    		break						  
>> 14 LOAD_FAST 1 ( n )					      	      if ( str [ n ] == 'a' ) :				    	    if str [ n ] == "a" :				  
16 LOAD_CONST 2 ( 0 )					      		  str = str [ 0 : n ] + 'b' + str [ n + 1 : ] ;	    		str = str [ 0 : n ] + "b" + str [ n + 1 : ]	  
18 COMPARE_OP 4 ( > )					      	      elif ( str [ n ] == 'c' ) :			    	    elif str [ n ] == "c" : str = str + "[d]" + str [ n + 
20 POP_JUMP_IF_FALSE 214				      		  str = str [ 0 : n ] + 'd' + str [ n + 1 : ] ;	    	    n -= 1						  
							      	      n -= 1 ;						    return n							  
4 22 LOAD_FAST 0 ( str )				      	  return str ;						    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 3 ( 'd' )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( str )				      								    								  
36 LOAD_CONST 2 ( 0 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 BUILD_SLICE 2					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 4 ( 'c' )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 0 ( str )					      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 BUILD_SLICE 2					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 0 ( str )					      								    								  
							      								    								  
6 66 BREAK_LOOP						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 0 ( str )				      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 5 ( 'b' )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
8 80 LOAD_FAST 0 ( str )				      								    								  
82 LOAD_CONST 2 ( 0 )					      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 BUILD_SLICE 2					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 6 ( 'a' )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 0 ( str )					      								    								  
96 LOAD_FAST 1 ( n )					      								    								  
98 LOAD_CONST 1 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_CONST 0 ( None )				      								    								  
104 BUILD_SLICE 2					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 0 ( str )				      								    								  
							      								    								  
9 112 BREAK_LOOP					      								    								  
							      								    								  
10 >> 114 LOAD_FAST 0 ( str )				      								    								  
116 LOAD_FAST 1 ( n )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_CONST 6 ( 'a' )				      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
11 126 LOAD_FAST 0 ( str )				      								    								  
128 LOAD_CONST 2 ( 0 )					      								    								  
130 LOAD_FAST 1 ( n )					      								    								  
132 BUILD_SLICE 2					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_CONST 5 ( 'b' )				      								    								  
138 BINARY_ADD						      								    								  
140 LOAD_FAST 0 ( str )					      								    								  
142 LOAD_FAST 1 ( n )					      								    								  
144 LOAD_CONST 1 ( 1 )					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_CONST 0 ( None )				      								    								  
150 BUILD_SLICE 2					      								    								  
152 BINARY_SUBSCR					      								    								  
154 BINARY_ADD						      								    								  
156 STORE_FAST 0 ( str )				      								    								  
158 JUMP_FORWARD 44 ( to 204 )				      								    								  
							      								    								  
12 >> 160 LOAD_FAST 0 ( str )				      								    								  
162 LOAD_FAST 1 ( n )					      								    								  
164 BINARY_SUBSCR					      								    								  
166 LOAD_CONST 4 ( 'c' )				      								    								  
168 COMPARE_OP 2 ( == )					      								    								  
170 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
13 172 LOAD_FAST 0 ( str )				      								    								  
174 LOAD_CONST 2 ( 0 )					      								    								  
176 LOAD_FAST 1 ( n )					      								    								  
178 BUILD_SLICE 2					      								    								  
180 BINARY_SUBSCR					      								    								  
182 LOAD_CONST 3 ( 'd' )				      								    								  
184 BINARY_ADD						      								    								  
186 LOAD_FAST 0 ( str )					      								    								  
188 LOAD_FAST 1 ( n )					      								    								  
190 LOAD_CONST 1 ( 1 )					      								    								  
192 BINARY_ADD						      								    								  
194 LOAD_CONST 0 ( None )				      								    								  
196 BUILD_SLICE 2					      								    								  
198 BINARY_SUBSCR					      								    								  
200 BINARY_ADD						      								    								  
202 STORE_FAST 0 ( str )				      								    								  
							      								    								  
14 >> 204 LOAD_FAST 1 ( n )				      								    								  
206 LOAD_CONST 1 ( 1 )					      								    								  
208 INPLACE_SUBTRACT					      								    								  
210 STORE_FAST 1 ( n )					      								    								  
212 JUMP_ABSOLUTE 14					      								    								  
>> 214 POP_BLOCK					      								    								  
							      								    								  
15 >> 216 LOAD_FAST 0 ( str )				      								    								  
218 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAGICAL_INDICES_ARRAY					      MAGICAL_INDICES_ARRAY					    MAGICAL_INDICES_ARRAY					  MAGICAL_INDICES_ARRAY
--							      --							    --								  --
Disassembly of <code object solve at 0x7f33e2653ed0, file "<d def solve ( A , n ) :					    def solve ( vis , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  cnt = 0						    	cnt = 0							  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 2 ( cnt )					      	  parent = [ None ] * ( n + 1 )				    	parent = [ None ] * n + 1				  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/MAGIC
							      	  vis = [ None ] * ( n + 1 )				    	vis = [ None ] * ( n + 1 )				  AL_INDICES_ARRAY.py", line 72, in <module>	 if
3 4 LOAD_CONST 0 ( None )				      	  for i in range ( 0 , n + 1 ) :			    	for i in range ( 0 , n + 1 ) :				  f_filled(*parameters_set) == f_gold(*parameters_se
6 BUILD_LIST 1						      	      parent [ i ] = - 1				    	    parent [ i ] = - 1					  t):	File "/home/ubuntu/TransCoder/models/eval/mt
8 LOAD_FAST 1 ( n )					      	      vis [ i ] = 0					    	    vis [ i ] = 0					  _sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python_sa.
10 LOAD_CONST 2 ( 1 )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  valid/MAGICAL_INDICES_ARRAY.py", line 40, in f_fil
12 BINARY_ADD						      	      j = i						    	    j = i						  led	  parent = [ None ] * n + 1 TypeError: can o
14 BINARY_MULTIPLY					      	      if ( parent [ j ] == - 1 ) :			    	    if parent [ j ] == - 1 :				  nly concatenate list (not "int") to list
16 STORE_FAST 3 ( parent )				      		  while ( parent [ j ] == - 1 ) :		    		while parent [ j ] == - 1 :			  
							      		      parent [ j ] = i				    		    parent [ j ] = i				  
4 18 LOAD_CONST 0 ( None )				      		      j = ( j + A [ j ] + 1 ) % n		    		    j = j + A [ j ] + 1 % n			  
20 BUILD_LIST 1						      		  if ( parent [ j ] == i ) :			    	    if parent [ j ] == i :				  
22 LOAD_FAST 1 ( n )					      		      while ( vis [ j ] == 0 ) :		    		while vis [ j ] == - 1 :			  
24 LOAD_CONST 2 ( 1 )					      			  vis [ j ] = 1				    		    cnt [ j ] = j + A [ j ] + 1			  
26 BINARY_ADD						      			  cnt = cnt + 1				    	return cnt						  
28 BINARY_MULTIPLY					      			  j = ( j + A [ j ] + 1 ) % n		    								  
30 STORE_FAST 4 ( vis )					      	  return cnt						    								  
							      								    								  
5 32 SETUP_LOOP 38 ( to 72 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 20 ( to 70 )				      								    								  
50 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 52 LOAD_CONST 3 ( - 1 )				      								    								  
54 LOAD_FAST 3 ( parent )				      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
7 60 LOAD_CONST 1 ( 0 )					      								    								  
62 LOAD_FAST 4 ( vis )					      								    								  
64 LOAD_FAST 5 ( i )					      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 48					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
8 >> 72 SETUP_LOOP 146 ( to 220 )			      								    								  
74 LOAD_GLOBAL 0 ( range )				      								    								  
76 LOAD_CONST 1 ( 0 )					      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 132 ( to 218 )				      								    								  
86 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 88 LOAD_FAST 5 ( i )					      								    								  
90 STORE_FAST 6 ( j )					      								    								  
							      								    								  
10 92 LOAD_FAST 3 ( parent )				      								    								  
94 LOAD_FAST 6 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 3 ( - 1 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
11 104 SETUP_LOOP 44 ( to 150 )				      								    								  
>> 106 LOAD_FAST 3 ( parent )				      								    								  
108 LOAD_FAST 6 ( j )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 3 ( - 1 )				      								    								  
114 COMPARE_OP 2 ( == )					      								    								  
116 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
12 118 LOAD_FAST 5 ( i )				      								    								  
120 LOAD_FAST 3 ( parent )				      								    								  
122 LOAD_FAST 6 ( j )					      								    								  
124 STORE_SUBSCR					      								    								  
							      								    								  
13 126 LOAD_FAST 6 ( j )				      								    								  
128 LOAD_FAST 0 ( A )					      								    								  
130 LOAD_FAST 6 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 BINARY_ADD						      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 BINARY_ADD						      								    								  
140 LOAD_FAST 1 ( n )					      								    								  
142 BINARY_MODULO					      								    								  
144 STORE_FAST 6 ( j )					      								    								  
146 JUMP_ABSOLUTE 106					      								    								  
>> 148 POP_BLOCK					      								    								  
							      								    								  
14 >> 150 LOAD_FAST 3 ( parent )			      								    								  
152 LOAD_FAST 6 ( j )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_FAST 5 ( i )					      								    								  
158 COMPARE_OP 2 ( == )					      								    								  
160 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
15 162 SETUP_LOOP 52 ( to 216 )				      								    								  
>> 164 LOAD_FAST 4 ( vis )				      								    								  
166 LOAD_FAST 6 ( j )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_CONST 1 ( 0 )					      								    								  
172 COMPARE_OP 2 ( == )					      								    								  
174 POP_JUMP_IF_FALSE 214				      								    								  
							      								    								  
16 176 LOAD_CONST 2 ( 1 )				      								    								  
178 LOAD_FAST 4 ( vis )					      								    								  
180 LOAD_FAST 6 ( j )					      								    								  
182 STORE_SUBSCR					      								    								  
							      								    								  
17 184 LOAD_FAST 2 ( cnt )				      								    								  
186 LOAD_CONST 2 ( 1 )					      								    								  
188 BINARY_ADD						      								    								  
190 STORE_FAST 2 ( cnt )				      								    								  
							      								    								  
18 192 LOAD_FAST 6 ( j )				      								    								  
194 LOAD_FAST 0 ( A )					      								    								  
196 LOAD_FAST 6 ( j )					      								    								  
198 BINARY_SUBSCR					      								    								  
200 BINARY_ADD						      								    								  
202 LOAD_CONST 2 ( 1 )					      								    								  
204 BINARY_ADD						      								    								  
206 LOAD_FAST 1 ( n )					      								    								  
208 BINARY_MODULO					      								    								  
210 STORE_FAST 6 ( j )					      								    								  
212 JUMP_ABSOLUTE 164					      								    								  
>> 214 POP_BLOCK					      								    								  
>> 216 JUMP_ABSOLUTE 84					      								    								  
>> 218 POP_BLOCK					      								    								  
							      								    								  
19 >> 220 LOAD_FAST 2 ( cnt )				      								    								  
222 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI			      REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI			    REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI				  REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI
--							      --							    --								  --
Disassembly of <code object rearrangeArr at 0x7f33e2644930, f def rearrangeArr ( arr , n ) :				    def rearrangeArr ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  evenPos = int ( n / 2 )				    	evenPos = int ( n / 2 )					  
2 LOAD_FAST 1 ( n )					      	  oddPos = n - evenPos					    	oddPos = n - evenPos					  
4 LOAD_CONST 1 ( 2 )					      	  tempArr = np.empty ( n , dtype = object )		    	tempArr = np.empty ( n , dtype = object )		  
6 BINARY_TRUE_DIVIDE					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
8 CALL_FUNCTION 1					      	      tempArr [ i ] = arr [ i ]				    	    tempArr [ i ] = arr [ i ]				  
10 STORE_FAST 2 ( evenPos )				      	  tempArr.sort ( )					    	tempArr.sort ( )					  
							      	  j = oddPos - 1					    	j = oddPos - 1						  
3 12 LOAD_FAST 1 ( n )					      	  for i in range ( 0 , n , 2 ) :			    	for i in range ( 0 , n , 2 ) :				  
14 LOAD_FAST 2 ( evenPos )				      	      arr [ i ] = tempArr [ j ]				    	    arr [ i ] = tempArr [ j ]				  
16 BINARY_SUBTRACT					      	      j = j - 1						    	    j = j - 1						  
18 STORE_FAST 3 ( oddPos )				      	  j = oddPos						    	j = oddPos						  
							      	  for i in range ( 1 , n , 2 ) :			    	for i in range ( 1 , n , 2 ) :				  
4 20 LOAD_GLOBAL 1 ( np )				      	      arr [ i ] = tempArr [ j ]				    	    arr [ i ] = tempArr [ j ]				  
22 LOAD_ATTR 2 ( empty )				      	      j = j + 1						    	    j = j + 1						  
24 LOAD_FAST 1 ( n )					      	  for i in range ( 0 , n ) :				    	for n in range ( 0 , n , 2 ) :				  
26 LOAD_GLOBAL 3 ( object )				      	      print ( arr [ i ] , end = ' ' )			    	    arr [ i ] = tempArr [ j ]				  
28 LOAD_CONST 2 ( ( 'dtype' , ) )			      								    	    j = j + 1						  
30 CALL_FUNCTION_KW 2					      								    	for i in range ( 1 , n ) :				  
32 STORE_FAST 4 ( tempArr )				      								    	    print ( "	 " )					  
							      								    								  
5 34 SETUP_LOOP 30 ( to 66 )				      								    								  
36 LOAD_GLOBAL 4 ( range )				      								    								  
38 LOAD_CONST 3 ( 0 )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 16 ( to 64 )				      								    								  
48 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( tempArr )				      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 46					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
7 >> 66 LOAD_FAST 4 ( tempArr )				      								    								  
68 LOAD_METHOD 5 ( sort )				      								    								  
70 CALL_METHOD 0					      								    								  
72 POP_TOP						      								    								  
							      								    								  
8 74 LOAD_FAST 3 ( oddPos )				      								    								  
76 LOAD_CONST 4 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 STORE_FAST 6 ( j )					      								    								  
							      								    								  
9 82 SETUP_LOOP 40 ( to 124 )				      								    								  
84 LOAD_GLOBAL 4 ( range )				      								    								  
86 LOAD_CONST 3 ( 0 )					      								    								  
88 LOAD_FAST 1 ( n )					      								    								  
90 LOAD_CONST 1 ( 2 )					      								    								  
92 CALL_FUNCTION 3					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 24 ( to 122 )				      								    								  
98 STORE_FAST 5 ( i )					      								    								  
							      								    								  
10 100 LOAD_FAST 4 ( tempArr )				      								    								  
102 LOAD_FAST 6 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 5 ( i )					      								    								  
110 STORE_SUBSCR					      								    								  
							      								    								  
11 112 LOAD_FAST 6 ( j )				      								    								  
114 LOAD_CONST 4 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 STORE_FAST 6 ( j )					      								    								  
120 JUMP_ABSOLUTE 96					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
12 >> 124 LOAD_FAST 3 ( oddPos )			      								    								  
126 STORE_FAST 6 ( j )					      								    								  
							      								    								  
13 128 SETUP_LOOP 40 ( to 170 )				      								    								  
130 LOAD_GLOBAL 4 ( range )				      								    								  
132 LOAD_CONST 4 ( 1 )					      								    								  
134 LOAD_FAST 1 ( n )					      								    								  
136 LOAD_CONST 1 ( 2 )					      								    								  
138 CALL_FUNCTION 3					      								    								  
140 GET_ITER						      								    								  
>> 142 FOR_ITER 24 ( to 168 )				      								    								  
144 STORE_FAST 5 ( i )					      								    								  
							      								    								  
14 146 LOAD_FAST 4 ( tempArr )				      								    								  
148 LOAD_FAST 6 ( j )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 LOAD_FAST 0 ( arr )					      								    								  
154 LOAD_FAST 5 ( i )					      								    								  
156 STORE_SUBSCR					      								    								  
							      								    								  
15 158 LOAD_FAST 6 ( j )				      								    								  
160 LOAD_CONST 4 ( 1 )					      								    								  
162 BINARY_ADD						      								    								  
164 STORE_FAST 6 ( j )					      								    								  
166 JUMP_ABSOLUTE 142					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
16 >> 170 SETUP_LOOP 34 ( to 206 )			      								    								  
172 LOAD_GLOBAL 4 ( range )				      								    								  
174 LOAD_CONST 3 ( 0 )					      								    								  
176 LOAD_FAST 1 ( n )					      								    								  
178 CALL_FUNCTION 2					      								    								  
180 GET_ITER						      								    								  
>> 182 FOR_ITER 20 ( to 204 )				      								    								  
184 STORE_FAST 5 ( i )					      								    								  
							      								    								  
17 186 LOAD_GLOBAL 6 ( print )				      								    								  
188 LOAD_FAST 0 ( arr )					      								    								  
190 LOAD_FAST 5 ( i )					      								    								  
192 BINARY_SUBSCR					      								    								  
194 LOAD_CONST 5 ( ' ' )				      								    								  
196 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
198 CALL_FUNCTION_KW 2					      								    								  
200 POP_TOP						      								    								  
202 JUMP_ABSOLUTE 182					      								    								  
>> 204 POP_BLOCK					      								    								  
>> 206 LOAD_CONST 0 ( None )				      								    								  
208 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K
--							      --							    --								  --
Disassembly of <code object minStringValue at 0x7f33e2644f60, def minStringValue ( str , k ) :				    def minStringValue ( str , k ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( str )					    	l = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  if ( k >= l ) :					    	if k >= l :						  
4 CALL_FUNCTION 1					      	      return 0						    	    return 0						  
6 STORE_FAST 2 ( l )					      	  frequency = [ 0 ] * MAX_CHAR				    	frequency = [ 0 ] * MAX_CHAR				  
							      	  for i in range ( 0 , l ) :				    	for i in range ( 0 , l ) :				  
3 8 LOAD_FAST 1 ( k )					      	      frequency [ ord ( str [ i ] ) - 97 ] += 1		    	    frequency [ ord ( str [ i ] ) - 97 ] += 1		  
10 LOAD_FAST 2 ( l )					      	  q = PriorityQueue ( )					    	q = PriorityQueue ( )					  
12 COMPARE_OP 5 ( >= )					      	  for i in range ( 0 , MAX_CHAR ) :			    	for i in range ( 0 , MAX_CHAR ) :			  
14 POP_JUMP_IF_FALSE 20					      	      q.put ( - frequency [ i ] )			    	    q.put ( frequency [ i ] )				  
							      	  while ( k > 0 ) :					    	while k > 0 :						  
4 16 LOAD_CONST 1 ( 0 )					      	      temp = q.get ( )					    	    temp = q.get ( )					  
18 RETURN_VALUE						      	      temp = temp + 1					    	    temp = temp + 1					  
							      	      q.put ( temp , temp )				    	    q.put ( temp , temp )				  
5 >> 20 LOAD_CONST 1 ( 0 )				      	      k = k - 1						    	    k = k - 1						  
22 BUILD_LIST 1						      	  result = 0 ;						    	result = 0						  
24 LOAD_GLOBAL 1 ( MAX_CHAR )				      	  while not q.empty ( ) :				    	while not q :						  
26 BINARY_MULTIPLY					      	      temp = q.get ( )					    	    result = q.get ( q , 0 )				  
28 STORE_FAST 3 ( frequency )				      	      temp = temp * ( - 1 )				    	    temp += 1						  
							      	      result += temp * temp				    	if not q :						  
6 30 SETUP_LOOP 46 ( to 78 )				      	  return result						    	    result += 1						  
32 LOAD_GLOBAL 2 ( range )				      								    return result						  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 LOAD_FAST 2 ( l )					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 32 ( to 76 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( frequency )				      								    								  
48 LOAD_GLOBAL 3 ( ord )				      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 2 ( 97 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 DUP_TOP_TWO						      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 ROT_THREE						      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 42					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_GLOBAL 4 ( PriorityQueue )			      								    								  
80 CALL_FUNCTION 0					      								    								  
82 STORE_FAST 5 ( q )					      								    								  
							      								    								  
9 84 SETUP_LOOP 34 ( to 120 )				      								    								  
86 LOAD_GLOBAL 2 ( range )				      								    								  
88 LOAD_CONST 1 ( 0 )					      								    								  
90 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
92 CALL_FUNCTION 2					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 20 ( to 118 )				      								    								  
98 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 100 LOAD_FAST 5 ( q )				      								    								  
102 LOAD_METHOD 5 ( put )				      								    								  
104 LOAD_FAST 3 ( frequency )				      								    								  
106 LOAD_FAST 4 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 UNARY_NEGATIVE					      								    								  
112 CALL_METHOD 1					      								    								  
114 POP_TOP						      								    								  
116 JUMP_ABSOLUTE 96					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
11 >> 120 SETUP_LOOP 48 ( to 170 )			      								    								  
>> 122 LOAD_FAST 1 ( k )				      								    								  
124 LOAD_CONST 1 ( 0 )					      								    								  
126 COMPARE_OP 4 ( > )					      								    								  
128 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
12 130 LOAD_FAST 5 ( q )				      								    								  
132 LOAD_METHOD 6 ( get )				      								    								  
134 CALL_METHOD 0					      								    								  
136 STORE_FAST 6 ( temp )				      								    								  
							      								    								  
13 138 LOAD_FAST 6 ( temp )				      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 STORE_FAST 6 ( temp )				      								    								  
							      								    								  
14 146 LOAD_FAST 5 ( q )				      								    								  
148 LOAD_METHOD 5 ( put )				      								    								  
150 LOAD_FAST 6 ( temp )				      								    								  
152 LOAD_FAST 6 ( temp )				      								    								  
154 CALL_METHOD 2					      								    								  
156 POP_TOP						      								    								  
							      								    								  
15 158 LOAD_FAST 1 ( k )				      								    								  
160 LOAD_CONST 3 ( 1 )					      								    								  
162 BINARY_SUBTRACT					      								    								  
164 STORE_FAST 1 ( k )					      								    								  
166 JUMP_ABSOLUTE 122					      								    								  
>> 168 POP_BLOCK					      								    								  
							      								    								  
16 >> 170 LOAD_CONST 1 ( 0 )				      								    								  
172 STORE_FAST 7 ( result )				      								    								  
							      								    								  
17 174 SETUP_LOOP 40 ( to 216 )				      								    								  
>> 176 LOAD_FAST 5 ( q )				      								    								  
178 LOAD_METHOD 7 ( empty )				      								    								  
180 CALL_METHOD 0					      								    								  
182 POP_JUMP_IF_TRUE 214				      								    								  
							      								    								  
18 184 LOAD_FAST 5 ( q )				      								    								  
186 LOAD_METHOD 6 ( get )				      								    								  
188 CALL_METHOD 0					      								    								  
190 STORE_FAST 6 ( temp )				      								    								  
							      								    								  
19 192 LOAD_FAST 6 ( temp )				      								    								  
194 LOAD_CONST 4 ( - 1 )				      								    								  
196 BINARY_MULTIPLY					      								    								  
198 STORE_FAST 6 ( temp )				      								    								  
							      								    								  
20 200 LOAD_FAST 7 ( result )				      								    								  
202 LOAD_FAST 6 ( temp )				      								    								  
204 LOAD_FAST 6 ( temp )				      								    								  
206 BINARY_MULTIPLY					      								    								  
208 INPLACE_ADD						      								    								  
210 STORE_FAST 7 ( result )				      								    								  
212 JUMP_ABSOLUTE 176					      								    								  
>> 214 POP_BLOCK					      								    								  
							      								    								  
21 >> 216 LOAD_FAST 7 ( result )			      								    								  
218 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			      SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			    SUM_AREA_RECTANGLES_POSSIBLE_ARRAY				  SUM_AREA_RECTANGLES_POSSIBLE_ARRAY
--							      --							    --								  --
Disassembly of <code object MaxTotalRectangleArea at 0x7f33e2 def MaxTotalRectangleArea ( a , n ) :			    def MaxTotalRectangleArea ( a , n ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( reverse = True )				    	a.sort ( reverse = True )				  
2 LOAD_ATTR 0 ( sort )					      	  sum = 0						    	sum = 0							  
4 LOAD_CONST 1 ( True )					      	  flag = False						    	flag = False						  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	  len = 0						    	len = 0							  
8 CALL_FUNCTION_KW 1					      	  i = 0							    	i = 0							  
10 POP_TOP						      	  while ( i < n - 1 ) :					    	while i < n - 1 :					  
							      	      if ( i != 0 ) :					    	    if i != 0 :						  
3 12 LOAD_CONST 3 ( 0 )					      		  i = i + 1					    		i = i + 1					  
14 STORE_FAST 2 ( sum )					      	      if ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i + 1  	    if a [ i ] == a [ i + 1 ] or a [ i ] == a [ i + 1 ] = 
							      		  flag = True					    		flag = True					  
4 16 LOAD_CONST 4 ( False )				      		  len = a [ i + 1 ]				    		flag = a [ i + 1 ]				  
18 STORE_FAST 3 ( flag )				      		  i = i + 1					    		i = i + 1					  
							      	      elif ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i +  	if a [ i ] == a [ i + 1 ] or a [ i + 1 ] == b [ i + 1 ] : 
5 20 LOAD_CONST 3 ( 0 )					      		  sum = sum + a [ i + 1 ] * len			    	    if flag == True :					  
22 STORE_FAST 4 ( len )					      		  flag = False					    		flag = True					  
							      		  i = i + 1					    sum = False							  
6 24 LOAD_CONST 3 ( 0 )					      	  return sum						    return sum ( sum ( a ) ) + sum ( sum ( i ) )		  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 28 SETUP_LOOP 194 ( to 224 )				      								    								  
>> 30 LOAD_FAST 5 ( i )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_CONST 5 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 222				      								    								  
							      								    								  
8 42 LOAD_FAST 5 ( i )					      								    								  
44 LOAD_CONST 3 ( 0 )					      								    								  
46 COMPARE_OP 3 ( != )					      								    								  
48 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
9 50 LOAD_FAST 5 ( i )					      								    								  
52 LOAD_CONST 5 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 5 ( i )					      								    								  
							      								    								  
10 >> 58 LOAD_FAST 0 ( a )				      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 LOAD_CONST 5 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_TRUE 102					      								    								  
78 LOAD_FAST 0 ( a )					      								    								  
80 LOAD_FAST 5 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 0 ( a )					      								    								  
86 LOAD_FAST 5 ( i )					      								    								  
88 LOAD_CONST 5 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_CONST 5 ( 1 )					      								    								  
98 COMPARE_OP 2 ( == )					      								    								  
100 POP_JUMP_IF_FALSE 136				      								    								  
>> 102 LOAD_FAST 3 ( flag )				      								    								  
104 LOAD_CONST 4 ( False )				      								    								  
106 COMPARE_OP 2 ( == )					      								    								  
108 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
11 110 LOAD_CONST 1 ( True )				      								    								  
112 STORE_FAST 3 ( flag )				      								    								  
							      								    								  
12 114 LOAD_FAST 0 ( a )				      								    								  
116 LOAD_FAST 5 ( i )					      								    								  
118 LOAD_CONST 5 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 BINARY_SUBSCR					      								    								  
124 STORE_FAST 4 ( len )				      								    								  
							      								    								  
13 126 LOAD_FAST 5 ( i )				      								    								  
128 LOAD_CONST 5 ( 1 )					      								    								  
130 BINARY_ADD						      								    								  
132 STORE_FAST 5 ( i )					      								    								  
134 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
14 >> 136 LOAD_FAST 0 ( a )				      								    								  
138 LOAD_FAST 5 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 0 ( a )					      								    								  
144 LOAD_FAST 5 ( i )					      								    								  
146 LOAD_CONST 5 ( 1 )					      								    								  
148 BINARY_ADD						      								    								  
150 BINARY_SUBSCR					      								    								  
152 COMPARE_OP 2 ( == )					      								    								  
154 POP_JUMP_IF_TRUE 180				      								    								  
156 LOAD_FAST 0 ( a )					      								    								  
158 LOAD_FAST 5 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 LOAD_FAST 0 ( a )					      								    								  
164 LOAD_FAST 5 ( i )					      								    								  
166 LOAD_CONST 5 ( 1 )					      								    								  
168 BINARY_ADD						      								    								  
170 BINARY_SUBSCR					      								    								  
172 BINARY_SUBTRACT					      								    								  
174 LOAD_CONST 5 ( 1 )					      								    								  
176 COMPARE_OP 2 ( == )					      								    								  
178 POP_JUMP_IF_FALSE 30				      								    								  
>> 180 LOAD_FAST 3 ( flag )				      								    								  
182 LOAD_CONST 1 ( True )				      								    								  
184 COMPARE_OP 2 ( == )					      								    								  
186 POP_JUMP_IF_FALSE 30				      								    								  
							      								    								  
15 188 LOAD_FAST 2 ( sum )				      								    								  
190 LOAD_FAST 0 ( a )					      								    								  
192 LOAD_FAST 5 ( i )					      								    								  
194 LOAD_CONST 5 ( 1 )					      								    								  
196 BINARY_ADD						      								    								  
198 BINARY_SUBSCR					      								    								  
200 LOAD_FAST 4 ( len )					      								    								  
202 BINARY_MULTIPLY					      								    								  
204 BINARY_ADD						      								    								  
206 STORE_FAST 2 ( sum )				      								    								  
							      								    								  
16 208 LOAD_CONST 4 ( False )				      								    								  
210 STORE_FAST 3 ( flag )				      								    								  
							      								    								  
17 212 LOAD_FAST 5 ( i )				      								    								  
214 LOAD_CONST 5 ( 1 )					      								    								  
216 BINARY_ADD						      								    								  
218 STORE_FAST 5 ( i )					      								    								  
220 JUMP_ABSOLUTE 30					      								    								  
>> 222 POP_BLOCK					      								    								  
							      								    								  
18 >> 224 LOAD_FAST 2 ( sum )				      								    								  
226 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			      K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			    K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			  K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
Disassembly of <code object kthLargestSum at 0x7f33e2653f60,  def kthLargestSum ( arr , n , k ) :			    def kthLargestSum ( arr , n , k ) :				  error : Traceback (most recent call last):   File
2 0 BUILD_LIST 0					      	  sum = [ ]						    	sum = [ ]						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 STORE_FAST 3 ( sum )					      	  sum.append ( 0 )					    	sum.append ( 0 )					  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/K_TH_
							      	  sum.append ( arr [ 0 ] )				    	sum.append ( arr [ 0 ] )				  LARGEST_SUM_CONTIGUOUS_SUBARRAY.py", line 74, in <
3 4 LOAD_FAST 3 ( sum )					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  module>     if f_filled(*parameters_set) == f_gold
6 LOAD_METHOD 0 ( append )				      	      sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )	    	    sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )	  (*parameters_set):   File "/home/ubuntu/TransCoder
8 LOAD_CONST 1 ( 0 )					      	  Q = [ ]						    	Q = [ ]							  /models/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts/di
10 CALL_METHOD 1					      	  heapq.heapify ( Q )					    	heapq.heapify ( Q )					  s_sa-python_sa.valid/K_TH_LARGEST_SUM_CONTIGUOUS_S
12 POP_TOP						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  UBARRAY.py", line 51, in f_filled	heap.ush ( x
							      	      for j in range ( i , n + 1 ) :			    	    for j in range ( i , n + 1 ) :			   [ j ] ) NameError: name 'heap' is not defined
4 14 LOAD_FAST 3 ( sum )				      		  x = sum [ j ] - sum [ i - 1 ]			    		x = sum [ j ] - sum [ i - 1 ]			  
16 LOAD_METHOD 0 ( append )				      		  if len ( Q ) < k :				    		if len ( Q ) < k :				  
18 LOAD_FAST 0 ( arr )					      		      heapq.heappush ( Q , x )			    		    heap.ush ( x [ j ] )			  
20 LOAD_CONST 1 ( 0 )					      		  else :					    		if x < k :					  
22 BINARY_SUBSCR					      		      if Q [ 0 ] < x :				    		    Q.heappop ( x [ j ] )			  
24 CALL_METHOD 1					      			  heapq.heappop ( Q )			    		if x < k :					  
26 POP_TOP						      			  heapq.heappush ( Q , x )		    		    Q.heappop ( x [ j ] )			  
							      	  return Q [ 0 ]					    	    return sum						  
5 28 SETUP_LOOP 52 ( to 82 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 34 ( to 80 )				      								    								  
46 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( sum )				      								    								  
50 LOAD_METHOD 0 ( append )				      								    								  
52 LOAD_FAST 3 ( sum )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_METHOD 1					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 44					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
7 >> 82 BUILD_LIST 0					      								    								  
84 STORE_FAST 5 ( Q )					      								    								  
							      								    								  
8 86 LOAD_GLOBAL 2 ( heapq )				      								    								  
88 LOAD_METHOD 3 ( heapify )				      								    								  
90 LOAD_FAST 5 ( Q )					      								    								  
92 CALL_METHOD 1					      								    								  
94 POP_TOP						      								    								  
							      								    								  
9 96 SETUP_LOOP 126 ( to 224 )				      								    								  
98 LOAD_GLOBAL 1 ( range )				      								    								  
100 LOAD_CONST 3 ( 1 )					      								    								  
102 LOAD_FAST 1 ( n )					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 CALL_FUNCTION 2					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 108 ( to 222 )				      								    								  
114 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 116 SETUP_LOOP 102 ( to 220 )			      								    								  
118 LOAD_GLOBAL 1 ( range )				      								    								  
120 LOAD_FAST 4 ( i )					      								    								  
122 LOAD_FAST 1 ( n )					      								    								  
124 LOAD_CONST 3 ( 1 )					      								    								  
126 BINARY_ADD						      								    								  
128 CALL_FUNCTION 2					      								    								  
130 GET_ITER						      								    								  
>> 132 FOR_ITER 84 ( to 218 )				      								    								  
134 STORE_FAST 6 ( j )					      								    								  
							      								    								  
11 136 LOAD_FAST 3 ( sum )				      								    								  
138 LOAD_FAST 6 ( j )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 3 ( sum )					      								    								  
144 LOAD_FAST 4 ( i )					      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 BINARY_SUBSCR					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 STORE_FAST 7 ( x )					      								    								  
							      								    								  
12 156 LOAD_GLOBAL 4 ( len )				      								    								  
158 LOAD_FAST 5 ( Q )					      								    								  
160 CALL_FUNCTION 1					      								    								  
162 LOAD_FAST 2 ( k )					      								    								  
164 COMPARE_OP 0 ( < )					      								    								  
166 POP_JUMP_IF_FALSE 182				      								    								  
							      								    								  
13 168 LOAD_GLOBAL 2 ( heapq )				      								    								  
170 LOAD_METHOD 5 ( heappush )				      								    								  
172 LOAD_FAST 5 ( Q )					      								    								  
174 LOAD_FAST 7 ( x )					      								    								  
176 CALL_METHOD 2					      								    								  
178 POP_TOP						      								    								  
180 JUMP_ABSOLUTE 132					      								    								  
							      								    								  
15 >> 182 LOAD_FAST 5 ( Q )				      								    								  
184 LOAD_CONST 1 ( 0 )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_FAST 7 ( x )					      								    								  
190 COMPARE_OP 0 ( < )					      								    								  
192 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
16 194 LOAD_GLOBAL 2 ( heapq )				      								    								  
196 LOAD_METHOD 6 ( heappop )				      								    								  
198 LOAD_FAST 5 ( Q )					      								    								  
200 CALL_METHOD 1					      								    								  
202 POP_TOP						      								    								  
							      								    								  
17 204 LOAD_GLOBAL 2 ( heapq )				      								    								  
206 LOAD_METHOD 5 ( heappush )				      								    								  
208 LOAD_FAST 5 ( Q )					      								    								  
210 LOAD_FAST 7 ( x )					      								    								  
212 CALL_METHOD 2					      								    								  
214 POP_TOP						      								    								  
216 JUMP_ABSOLUTE 132					      								    								  
>> 218 POP_BLOCK					      								    								  
>> 220 JUMP_ABSOLUTE 112				      								    								  
>> 222 POP_BLOCK					      								    								  
							      								    								  
18 >> 224 LOAD_FAST 5 ( Q )				      								    								  
226 LOAD_CONST 1 ( 0 )					      								    								  
228 BINARY_SUBSCR					      								    								  
230 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS		      MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS		    MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS		  MINIMIZE_<unk> UTE_DIFFERENCE_SUM_TWO_SUBSETS
--							      --							    --								  --
Disassembly of <code object subsetDifference at 0x7f33e2653ed def subsetDifference ( n ) :				    def subsetDifference ( n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  s = int ( n * ( n + 1 ) / 2 )				    	s = int ( ( n * ( n + 1 ) ) / 2 )			  
2 LOAD_FAST 0 ( n )					      	  if n % 4 == 0 :					    	if n % 4 == 0 :						  
4 LOAD_FAST 0 ( n )					      	      print ( "First subset sum = " , int ( s / 2 ) )	    	    print ( "First subset sum = " , int ( s / 2 ) )	  
6 LOAD_CONST 1 ( 1 )					      	      print ( "Second subset sum = " , int ( s / 2 ) )	    	    print ( "Second subset sum = " , int ( s / 2 ) )	  
8 BINARY_ADD						      	      print ( "Difference = " , 0 )			    	    print ( "Difference = " , 0 )			  
10 BINARY_MULTIPLY					      	  else :						    	elif n % 4 == 1 or n % 4 == 2 :				  
12 LOAD_CONST 2 ( 2 )					      	      if n % 4 == 1 or n % 4 == 2 :			    	    print ( "First subset sum = " , int ( s / 2 ) )	  
14 BINARY_TRUE_DIVIDE					      		  print ( "First subset sum = " , int ( s / 2 ) )   	    print ( "Second subset sum = " , int ( s / 2 ) + 1 )  
16 CALL_FUNCTION 1					      		  print ( "Second subset sum = " , int ( s / 2 ) +  	    print ( "Difference = " , 1 )			  
18 STORE_FAST 1 ( s )					      		  print ( "Difference = " , 1 )			    	else :							  
							      	      else :						    	    print ( "First subset sum = " , int ( s / 2 ) / 2 ) ) 
3 20 LOAD_FAST 0 ( n )					      		  print ( "First subset sum = " , int ( s / 2 ) )   	    print ( "Difference = " , 1 )			  
22 LOAD_CONST 3 ( 4 )					      		  print ( "Second subset sum = " , int ( s / 2 ) )  								  
24 BINARY_MODULO					      		  print ( "Difference = " , 0 )			    								  
26 LOAD_CONST 4 ( 0 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
4 32 LOAD_GLOBAL 1 ( print )				      								    								  
34 LOAD_CONST 5 ( 'First subset sum = ' )		      								    								  
36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 1 ( s )					      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 POP_TOP						      								    								  
							      								    								  
5 50 LOAD_GLOBAL 1 ( print )				      								    								  
52 LOAD_CONST 6 ( 'Second subset sum = ' )		      								    								  
54 LOAD_GLOBAL 0 ( int )				      								    								  
56 LOAD_FAST 1 ( s )					      								    								  
58 LOAD_CONST 2 ( 2 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 POP_TOP						      								    								  
							      								    								  
6 68 LOAD_GLOBAL 1 ( print )				      								    								  
70 LOAD_CONST 7 ( 'Difference = ' )			      								    								  
72 LOAD_CONST 4 ( 0 )					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 POP_TOP						      								    								  
78 JUMP_FORWARD 122 ( to 202 )				      								    								  
							      								    								  
8 >> 80 LOAD_FAST 0 ( n )				      								    								  
82 LOAD_CONST 3 ( 4 )					      								    								  
84 BINARY_MODULO					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_TRUE 104					      								    								  
92 LOAD_FAST 0 ( n )					      								    								  
94 LOAD_CONST 3 ( 4 )					      								    								  
96 BINARY_MODULO					      								    								  
98 LOAD_CONST 2 ( 2 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 156				      								    								  
							      								    								  
9 >> 104 LOAD_GLOBAL 1 ( print )			      								    								  
106 LOAD_CONST 5 ( 'First subset sum = ' )		      								    								  
108 LOAD_GLOBAL 0 ( int )				      								    								  
110 LOAD_FAST 1 ( s )					      								    								  
112 LOAD_CONST 2 ( 2 )					      								    								  
114 BINARY_TRUE_DIVIDE					      								    								  
116 CALL_FUNCTION 1					      								    								  
118 CALL_FUNCTION 2					      								    								  
120 POP_TOP						      								    								  
							      								    								  
10 122 LOAD_GLOBAL 1 ( print )				      								    								  
124 LOAD_CONST 6 ( 'Second subset sum = ' )		      								    								  
126 LOAD_GLOBAL 0 ( int )				      								    								  
128 LOAD_FAST 1 ( s )					      								    								  
130 LOAD_CONST 2 ( 2 )					      								    								  
132 BINARY_TRUE_DIVIDE					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 LOAD_CONST 1 ( 1 )					      								    								  
138 BINARY_ADD						      								    								  
140 CALL_FUNCTION 2					      								    								  
142 POP_TOP						      								    								  
							      								    								  
11 144 LOAD_GLOBAL 1 ( print )				      								    								  
146 LOAD_CONST 7 ( 'Difference = ' )			      								    								  
148 LOAD_CONST 1 ( 1 )					      								    								  
150 CALL_FUNCTION 2					      								    								  
152 POP_TOP						      								    								  
154 JUMP_FORWARD 46 ( to 202 )				      								    								  
							      								    								  
13 >> 156 LOAD_GLOBAL 1 ( print )			      								    								  
158 LOAD_CONST 5 ( 'First subset sum = ' )		      								    								  
160 LOAD_GLOBAL 0 ( int )				      								    								  
162 LOAD_FAST 1 ( s )					      								    								  
164 LOAD_CONST 2 ( 2 )					      								    								  
166 BINARY_TRUE_DIVIDE					      								    								  
168 CALL_FUNCTION 1					      								    								  
170 CALL_FUNCTION 2					      								    								  
172 POP_TOP						      								    								  
							      								    								  
14 174 LOAD_GLOBAL 1 ( print )				      								    								  
176 LOAD_CONST 6 ( 'Second subset sum = ' )		      								    								  
178 LOAD_GLOBAL 0 ( int )				      								    								  
180 LOAD_FAST 1 ( s )					      								    								  
182 LOAD_CONST 2 ( 2 )					      								    								  
184 BINARY_TRUE_DIVIDE					      								    								  
186 CALL_FUNCTION 1					      								    								  
188 CALL_FUNCTION 2					      								    								  
190 POP_TOP						      								    								  
							      								    								  
15 192 LOAD_GLOBAL 1 ( print )				      								    								  
194 LOAD_CONST 7 ( 'Difference = ' )			      								    								  
196 LOAD_CONST 4 ( 0 )					      								    								  
198 CALL_FUNCTION 2					      								    								  
200 POP_TOP						      								    								  
>> 202 LOAD_CONST 0 ( None )				      								    								  
204 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT
--							      --							    --								  --
Disassembly of <code object generateGrayarr at 0x7f33e26494b0 def generateGrayarr ( n ) :				    def generateGrayarr ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return						    	    return						  
4 COMPARE_OP 1 ( <= )					      	  arr = list ( )					    	arr = list ( )						  
6 POP_JUMP_IF_FALSE 12					      	  arr.append ( "0" )					    	arr.append ( "0" )					  
							      	  arr.append ( "1" )					    	arr.append ( "1" )					  
3 8 LOAD_CONST 0 ( None )				      	  i = 2							    	i = 2							  
10 RETURN_VALUE						      	  j = 0							    	j = 0							  
							      	  while ( True ) :					    	while 1 :						  
4 >> 12 LOAD_GLOBAL 0 ( list )				      	      if i >= 1 << n :					    	    if i >= 1 << n :					  
14 CALL_FUNCTION 0					      		  break						    		break						  
16 STORE_FAST 1 ( arr )					      	      for j in range ( i - 1 , - 1 , - 1 ) :		    	    for j in range ( i - 1 , - 1 , - 1 ) :		  
							      		  arr.append ( arr [ j ] )			    		arr.append ( arr [ j ] )			  
5 18 LOAD_FAST 1 ( arr )				      	      for j in range ( i ) :				    	for j in range ( i ) :					  
20 LOAD_METHOD 1 ( append )				      		  arr [ j ] = "0" + arr [ j ]			    	    arr [ j ] = "0" + arr [ j ]				  
22 LOAD_CONST 2 ( '0' )					      	      for j in range ( i , 2 * i ) :			    	for j in range ( i , 2 * i ) :				  
24 CALL_METHOD 1					      		  arr [ j ] = "1" + arr [ j ]			    	    arr [ j ] = "1" + arr [ j ]				  
26 POP_TOP						      	      i = i << 1					    print ( " ".join ( arr [ i ] ) )				  
							      	  for i in range ( len ( arr ) ) :			    								  
6 28 LOAD_FAST 1 ( arr )				      	      print ( arr [ i ] )				    								  
30 LOAD_METHOD 1 ( append )				      								    								  
32 LOAD_CONST 3 ( '1' )					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
							      								    								  
7 38 LOAD_CONST 4 ( 2 )					      								    								  
40 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 42 LOAD_CONST 1 ( 0 )					      								    								  
44 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 46 SETUP_LOOP 140 ( to 188 )				      								    								  
							      								    								  
10 >> 48 LOAD_FAST 2 ( i )				      								    								  
50 LOAD_CONST 5 ( 1 )					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 BINARY_LSHIFT					      								    								  
56 COMPARE_OP 5 ( >= )					      								    								  
58 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
11 60 BREAK_LOOP					      								    								  
							      								    								  
12 >> 62 SETUP_LOOP 38 ( to 102 )			      								    								  
64 LOAD_GLOBAL 2 ( range )				      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 LOAD_CONST 5 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_CONST 6 ( - 1 )					      								    								  
74 LOAD_CONST 6 ( - 1 )					      								    								  
76 CALL_FUNCTION 3					      								    								  
78 GET_ITER						      								    								  
>> 80 FOR_ITER 18 ( to 100 )				      								    								  
82 STORE_FAST 3 ( j )					      								    								  
							      								    								  
13 84 LOAD_FAST 1 ( arr )				      								    								  
86 LOAD_METHOD 1 ( append )				      								    								  
88 LOAD_FAST 1 ( arr )					      								    								  
90 LOAD_FAST 3 ( j )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_METHOD 1					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 80					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
14 >> 102 SETUP_LOOP 32 ( to 136 )			      								    								  
104 LOAD_GLOBAL 2 ( range )				      								    								  
106 LOAD_FAST 2 ( i )					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 20 ( to 134 )				      								    								  
114 STORE_FAST 3 ( j )					      								    								  
							      								    								  
15 116 LOAD_CONST 2 ( '0' )				      								    								  
118 LOAD_FAST 1 ( arr )					      								    								  
120 LOAD_FAST 3 ( j )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 BINARY_ADD						      								    								  
126 LOAD_FAST 1 ( arr )					      								    								  
128 LOAD_FAST 3 ( j )					      								    								  
130 STORE_SUBSCR					      								    								  
132 JUMP_ABSOLUTE 112					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
16 >> 136 SETUP_LOOP 38 ( to 176 )			      								    								  
138 LOAD_GLOBAL 2 ( range )				      								    								  
140 LOAD_FAST 2 ( i )					      								    								  
142 LOAD_CONST 4 ( 2 )					      								    								  
144 LOAD_FAST 2 ( i )					      								    								  
146 BINARY_MULTIPLY					      								    								  
148 CALL_FUNCTION 2					      								    								  
150 GET_ITER						      								    								  
>> 152 FOR_ITER 20 ( to 174 )				      								    								  
154 STORE_FAST 3 ( j )					      								    								  
							      								    								  
17 156 LOAD_CONST 3 ( '1' )				      								    								  
158 LOAD_FAST 1 ( arr )					      								    								  
160 LOAD_FAST 3 ( j )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 BINARY_ADD						      								    								  
166 LOAD_FAST 1 ( arr )					      								    								  
168 LOAD_FAST 3 ( j )					      								    								  
170 STORE_SUBSCR					      								    								  
172 JUMP_ABSOLUTE 152					      								    								  
>> 174 POP_BLOCK					      								    								  
							      								    								  
18 >> 176 LOAD_FAST 2 ( i )				      								    								  
178 LOAD_CONST 5 ( 1 )					      								    								  
180 BINARY_LSHIFT					      								    								  
182 STORE_FAST 2 ( i )					      								    								  
184 JUMP_ABSOLUTE 48					      								    								  
186 POP_BLOCK						      								    								  
							      								    								  
19 >> 188 SETUP_LOOP 32 ( to 222 )			      								    								  
190 LOAD_GLOBAL 2 ( range )				      								    								  
192 LOAD_GLOBAL 3 ( len )				      								    								  
194 LOAD_FAST 1 ( arr )					      								    								  
196 CALL_FUNCTION 1					      								    								  
198 CALL_FUNCTION 1					      								    								  
200 GET_ITER						      								    								  
>> 202 FOR_ITER 16 ( to 220 )				      								    								  
204 STORE_FAST 2 ( i )					      								    								  
							      								    								  
20 206 LOAD_GLOBAL 4 ( print )				      								    								  
208 LOAD_FAST 1 ( arr )					      								    								  
210 LOAD_FAST 2 ( i )					      								    								  
212 BINARY_SUBSCR					      								    								  
214 CALL_FUNCTION 1					      								    								  
216 POP_TOP						      								    								  
218 JUMP_ABSOLUTE 202					      								    								  
>> 220 POP_BLOCK					      								    								  
>> 222 LOAD_CONST 0 ( None )				      								    								  
224 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	      LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	    LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	  LARGEST_<unk> ASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS
--							      --							    --								  --
Disassembly of <code object findLIS at 0x7f33e2653f60, file " def findLIS ( A , n ) :					    def findLIS ( A , n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  hash = dict ( )					    	hash = dict ( )						  
2 CALL_FUNCTION 0					      	  LIS_size , LIS_index = 1 , 0				    	LIS_size , LIS_index = ( 1 , 0 )			  
4 STORE_FAST 2 ( hash )					      	  hash [ A [ 0 ] ] = 1					    	hash [ A [ 0 ] ] = 1					  
							      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
3 6 LOAD_CONST 1 ( ( 1 , 0 ) )				      	      if A [ i ] - 1 not in hash :			    	    if A [ i ] - 1 not in hash :			  
8 UNPACK_SEQUENCE 2					      		  hash [ A [ i ] - 1 ] = 0			    		hash [ A [ i ] - 1 ] = 0			  
10 STORE_FAST 3 ( LIS_size )				      	      hash [ A [ i ] ] = hash [ A [ i ] - 1 ] + 1	    	    hash [ A [ i ] ] = hash [ A [ i ] - 1 ] + 1		  
12 STORE_FAST 4 ( LIS_index )				      	      if LIS_size < hash [ A [ i ] ] :			    	    if LIS_size [ hash [ A [ i ] ] :			  
							      		  LIS_size = hash [ A [ i ] ]			    		LIS_size = hash [ A [ i ] ]			  
4 14 LOAD_CONST 2 ( 1 )					      		  LIS_index = A [ i ]				    		LIS_index = A [ i ]				  
16 LOAD_FAST 2 ( hash )					      	  print ( "LIS_size =" , LIS_size )			    	print ( "LIS :" , LIS_size )				  
18 LOAD_FAST 0 ( A )					      	  print ( "LIS : " , end = "" )				    	print ( "LIS : " , LIS_size )				  
20 LOAD_CONST 3 ( 0 )					      	  start = LIS_index - LIS_size + 1			    while LIS_size <= IS_IS_size :				  
22 BINARY_SUBSCR					      	  while start <= LIS_index :				    	start += 1						  
24 STORE_SUBSCR						      	      print ( start , end = " " )			    	end = start + 1						  
							      	      start += 1					    while start <= IS_IS_size :					  
5 26 SETUP_LOOP 114 ( to 142 )				      								    	start += 1						  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 100 ( to 140 )				      								    								  
40 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( A )					      								    								  
44 LOAD_FAST 5 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 LOAD_FAST 2 ( hash )					      								    								  
54 COMPARE_OP 7 ( not in )				      								    								  
56 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
7 58 LOAD_CONST 3 ( 0 )					      								    								  
60 LOAD_FAST 2 ( hash )					      								    								  
62 LOAD_FAST 0 ( A )					      								    								  
64 LOAD_FAST 5 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 74 LOAD_FAST 2 ( hash )				      								    								  
76 LOAD_FAST 0 ( A )					      								    								  
78 LOAD_FAST 5 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 2 ( hash )					      								    								  
94 LOAD_FAST 0 ( A )					      								    								  
96 LOAD_FAST 5 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 STORE_SUBSCR					      								    								  
							      								    								  
9 102 LOAD_FAST 3 ( LIS_size )				      								    								  
104 LOAD_FAST 2 ( hash )				      								    								  
106 LOAD_FAST 0 ( A )					      								    								  
108 LOAD_FAST 5 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 BINARY_SUBSCR					      								    								  
114 COMPARE_OP 0 ( < )					      								    								  
116 POP_JUMP_IF_FALSE 38				      								    								  
							      								    								  
10 118 LOAD_FAST 2 ( hash )				      								    								  
120 LOAD_FAST 0 ( A )					      								    								  
122 LOAD_FAST 5 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 BINARY_SUBSCR					      								    								  
128 STORE_FAST 3 ( LIS_size )				      								    								  
							      								    								  
11 130 LOAD_FAST 0 ( A )				      								    								  
132 LOAD_FAST 5 ( i )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 STORE_FAST 4 ( LIS_index )				      								    								  
138 JUMP_ABSOLUTE 38					      								    								  
>> 140 POP_BLOCK					      								    								  
							      								    								  
12 >> 142 LOAD_GLOBAL 2 ( print )			      								    								  
144 LOAD_CONST 4 ( 'LIS_size =' )			      								    								  
146 LOAD_FAST 3 ( LIS_size )				      								    								  
148 CALL_FUNCTION 2					      								    								  
150 POP_TOP						      								    								  
							      								    								  
13 152 LOAD_GLOBAL 2 ( print )				      								    								  
154 LOAD_CONST 5 ( 'LIS : ' )				      								    								  
156 LOAD_CONST 6 ( '' )					      								    								  
158 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
160 CALL_FUNCTION_KW 2					      								    								  
162 POP_TOP						      								    								  
							      								    								  
14 164 LOAD_FAST 4 ( LIS_index )			      								    								  
166 LOAD_FAST 3 ( LIS_size )				      								    								  
168 BINARY_SUBTRACT					      								    								  
170 LOAD_CONST 2 ( 1 )					      								    								  
172 BINARY_ADD						      								    								  
174 STORE_FAST 6 ( start )				      								    								  
							      								    								  
15 176 SETUP_LOOP 32 ( to 210 )				      								    								  
>> 178 LOAD_FAST 6 ( start )				      								    								  
180 LOAD_FAST 4 ( LIS_index )				      								    								  
182 COMPARE_OP 1 ( <= )					      								    								  
184 POP_JUMP_IF_FALSE 208				      								    								  
							      								    								  
16 186 LOAD_GLOBAL 2 ( print )				      								    								  
188 LOAD_FAST 6 ( start )				      								    								  
190 LOAD_CONST 8 ( ' ' )				      								    								  
192 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
194 CALL_FUNCTION_KW 2					      								    								  
196 POP_TOP						      								    								  
							      								    								  
17 198 LOAD_FAST 6 ( start )				      								    								  
200 LOAD_CONST 2 ( 1 )					      								    								  
202 INPLACE_ADD						      								    								  
204 STORE_FAST 6 ( start )				      								    								  
206 JUMP_ABSOLUTE 178					      								    								  
>> 208 POP_BLOCK					      								    								  
>> 210 LOAD_CONST 0 ( None )				      								    								  
212 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N		      COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N		    COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N			  COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N
--							      --							    --								  --
Disassembly of <code object sumOfDigitsFrom1ToN at 0x7f33e265 def sumOfDigitsFrom1ToN ( n ) :				    def sumOfDigitsFrom1ToN ( n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 10 ) :					    	if n < 10 :						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_CONST 1 ( 10 )					      	      return ( n * ( n + 1 ) / 2 )			    	    return n * ( n + 1 ) / 2				  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/COUNT
4 COMPARE_OP 0 ( < )					      	  d = ( int ) ( math.log10 ( n ) )			    	d = int ( math.log10 ( n ) )				  _SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N.py", line 61
6 POP_JUMP_IF_FALSE 24					      	  a = [ 0 ] * ( d + 1 )					    	a = [ 0 ] * d + 1					  , in <module>	    if f_filled(*parameters_set) ==
							      	  a [ 0 ] = 0						    	a [ 0 ] = 0						  f_gold(*parameters_set):   File "/home/ubuntu/Tran
3 8 LOAD_FAST 0 ( n )					      	  a [ 1 ] = 45						    	a [ 1 ] = 45						  sCoder/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scri
10 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , d + 1 ) :			    	for i in range ( 2 , d + 1 ) :				  pts/dis_sa-python_sa.valid/COUNT_SUM_OF_DIGITS_IN_
12 LOAD_CONST 2 ( 1 )					      	      a [ i ] = a [ i - 1 ] * 10 + 45 * ( int ) ( math.ceil 	    a [ i ] = a [ i - 1 ] * 10 + 45 * int ( math.ceil ( m NUMBERS_FROM_1_TO_N.py", line 37, in f_filled
14 BINARY_ADD						      	  p = ( int ) ( math.ceil ( math.pow ( 10 , d ) ) )	    	p = int ( math.ceil ( math.pow ( 10 , d ) ) )		  a = [ 0 ] * d + 1 TypeError: can only concatenate
16 BINARY_MULTIPLY					      	  msd = n // p						    	msd = n // p						  list (not "int") to list
18 LOAD_CONST 3 ( 2 )					      	  return ( int ) ( msd * a [ d ] + ( msd * ( msd - 1 ) // 2 	d = int ( math.log ( msd * d ) ) + msd * d + msd * p + ms 
20 BINARY_TRUE_DIVIDE					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_GLOBAL 0 ( int )				      								    								  
26 LOAD_GLOBAL 1 ( math )				      								    								  
28 LOAD_METHOD 2 ( log10 )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 CALL_METHOD 1					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 STORE_FAST 1 ( d )					      								    								  
							      								    								  
5 38 LOAD_CONST 4 ( 0 )					      								    								  
40 BUILD_LIST 1						      								    								  
42 LOAD_FAST 1 ( d )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_MULTIPLY					      								    								  
50 STORE_FAST 2 ( a )					      								    								  
							      								    								  
6 52 LOAD_CONST 4 ( 0 )					      								    								  
54 LOAD_FAST 2 ( a )					      								    								  
56 LOAD_CONST 4 ( 0 )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
7 60 LOAD_CONST 5 ( 45 )				      								    								  
62 LOAD_FAST 2 ( a )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 STORE_SUBSCR						      								    								  
							      								    								  
8 68 SETUP_LOOP 72 ( to 142 )				      								    								  
70 LOAD_GLOBAL 3 ( range )				      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 LOAD_FAST 1 ( d )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 54 ( to 140 )				      								    								  
86 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 88 LOAD_FAST 2 ( a )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 1 ( 10 )					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_CONST 5 ( 45 )					      								    								  
104 LOAD_GLOBAL 0 ( int )				      								    								  
106 LOAD_GLOBAL 1 ( math )				      								    								  
108 LOAD_METHOD 4 ( ceil )				      								    								  
110 LOAD_GLOBAL 1 ( math )				      								    								  
112 LOAD_METHOD 5 ( pow )				      								    								  
114 LOAD_CONST 1 ( 10 )					      								    								  
116 LOAD_FAST 3 ( i )					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 CALL_METHOD 2					      								    								  
124 CALL_METHOD 1					      								    								  
126 CALL_FUNCTION 1					      								    								  
128 BINARY_MULTIPLY					      								    								  
130 BINARY_ADD						      								    								  
132 LOAD_FAST 2 ( a )					      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 STORE_SUBSCR					      								    								  
138 JUMP_ABSOLUTE 84					      								    								  
>> 140 POP_BLOCK					      								    								  
							      								    								  
10 >> 142 LOAD_GLOBAL 0 ( int )				      								    								  
144 LOAD_GLOBAL 1 ( math )				      								    								  
146 LOAD_METHOD 4 ( ceil )				      								    								  
148 LOAD_GLOBAL 1 ( math )				      								    								  
150 LOAD_METHOD 5 ( pow )				      								    								  
152 LOAD_CONST 1 ( 10 )					      								    								  
154 LOAD_FAST 1 ( d )					      								    								  
156 CALL_METHOD 2					      								    								  
158 CALL_METHOD 1					      								    								  
160 CALL_FUNCTION 1					      								    								  
162 STORE_FAST 4 ( p )					      								    								  
							      								    								  
11 164 LOAD_FAST 0 ( n )				      								    								  
166 LOAD_FAST 4 ( p )					      								    								  
168 BINARY_FLOOR_DIVIDE					      								    								  
170 STORE_FAST 5 ( msd )				      								    								  
							      								    								  
12 172 LOAD_GLOBAL 0 ( int )				      								    								  
174 LOAD_FAST 5 ( msd )					      								    								  
176 LOAD_FAST 2 ( a )					      								    								  
178 LOAD_FAST 1 ( d )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 BINARY_MULTIPLY					      								    								  
184 LOAD_FAST 5 ( msd )					      								    								  
186 LOAD_FAST 5 ( msd )					      								    								  
188 LOAD_CONST 2 ( 1 )					      								    								  
190 BINARY_SUBTRACT					      								    								  
192 BINARY_MULTIPLY					      								    								  
194 LOAD_CONST 3 ( 2 )					      								    								  
196 BINARY_FLOOR_DIVIDE					      								    								  
198 LOAD_FAST 4 ( p )					      								    								  
200 BINARY_MULTIPLY					      								    								  
202 BINARY_ADD						      								    								  
204 LOAD_FAST 5 ( msd )					      								    								  
206 LOAD_CONST 2 ( 1 )					      								    								  
208 LOAD_FAST 0 ( n )					      								    								  
210 LOAD_FAST 4 ( p )					      								    								  
212 BINARY_MODULO					      								    								  
214 BINARY_ADD						      								    								  
216 BINARY_MULTIPLY					      								    								  
218 BINARY_ADD						      								    								  
220 LOAD_GLOBAL 6 ( sumOfDigitsFrom1ToN )		      								    								  
222 LOAD_FAST 0 ( n )					      								    								  
224 LOAD_FAST 4 ( p )					      								    								  
226 BINARY_MODULO					      								    								  
228 CALL_FUNCTION 1					      								    								  
230 BINARY_ADD						      								    								  
232 CALL_FUNCTION 1					      								    								  
234 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS	      K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS	    K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS	  K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_<unk> YS
--							      --							    --								  --
Disassembly of <code object kmax at 0x7f33e2644930, file "<di def kmax ( arr , k , n ) :				    def kmax ( arr , k , n ) :					  script_not_found : None
2 0 SETUP_LOOP 182 ( to 184 )				      	  for c in range ( k ) :				    	for c in range ( k ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      max_so_far = - float ( "inf" )			    	    max_so_far = - float ( "inf" )			  
4 LOAD_FAST 1 ( k )					      	      max_here = 0					    	    max_here = 0					  
6 CALL_FUNCTION 1					      	      start = 0						    	    start = 0						  
8 GET_ITER						      	      end = 0						    	    end = 0						  
>> 10 FOR_ITER 170 ( to 182 )				      	      s = 0						    	    s = 0						  
12 STORE_FAST 3 ( c )					      	      for i in range ( n ) :				    	    for i in range ( n ) :				  
							      		  max_here += arr [ i ]				    		max_here += arr [ i ]				  
3 14 LOAD_GLOBAL 1 ( float )				      		  if ( max_so_far < max_here ) :		    		if max_so_far < max_here :			  
16 LOAD_CONST 1 ( 'inf' )				      		      max_so_far = max_here			    		    max_so_far = max_here			  
18 CALL_FUNCTION 1					      		      start = s					    		    start = s					  
20 UNARY_NEGATIVE					      		      end = i					    		    end = i					  
22 STORE_FAST 4 ( max_so_far )				      		  if ( max_here < 0 ) :				    		if max_here < 0 :				  
							      		      max_here = 0				    		    max_here = 0				  
4 24 LOAD_CONST 2 ( 0 )					      		      s = i + 1					    		    s = i + 1					  
26 STORE_FAST 5 ( max_here )				      	      print ( "Maximum non-overlapping sub-array sum" , c + 	    print ( "Maximum non-overlapping sub-array sum" , c + 
							      	      for l in range ( start , end + 1 ) :		    	    for l in range ( - 1 , n ) :			  
5 28 LOAD_CONST 2 ( 0 )					      		  arr [ l ] = - float ( "inf" )			    		print ( "inf" )					  
30 STORE_FAST 6 ( start )				      	  print ( )						    								  
							      								    								  
6 32 LOAD_CONST 2 ( 0 )					      								    								  
34 STORE_FAST 7 ( end )					      								    								  
							      								    								  
7 36 LOAD_CONST 2 ( 0 )					      								    								  
38 STORE_FAST 8 ( s )					      								    								  
							      								    								  
8 40 SETUP_LOOP 68 ( to 110 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 2 ( n )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 56 ( to 108 )				      								    								  
52 STORE_FAST 9 ( i )					      								    								  
							      								    								  
9 54 LOAD_FAST 5 ( max_here )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 9 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 5 ( max_here )				      								    								  
							      								    								  
10 66 LOAD_FAST 4 ( max_so_far )			      								    								  
68 LOAD_FAST 5 ( max_here )				      								    								  
70 COMPARE_OP 0 ( < )					      								    								  
72 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
11 74 LOAD_FAST 5 ( max_here )				      								    								  
76 STORE_FAST 4 ( max_so_far )				      								    								  
							      								    								  
12 78 LOAD_FAST 8 ( s )					      								    								  
80 STORE_FAST 6 ( start )				      								    								  
							      								    								  
13 82 LOAD_FAST 9 ( i )					      								    								  
84 STORE_FAST 7 ( end )					      								    								  
							      								    								  
14 >> 86 LOAD_FAST 5 ( max_here )			      								    								  
88 LOAD_CONST 2 ( 0 )					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
15 94 LOAD_CONST 2 ( 0 )				      								    								  
96 STORE_FAST 5 ( max_here )				      								    								  
							      								    								  
16 98 LOAD_FAST 9 ( i )					      								    								  
100 LOAD_CONST 3 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 8 ( s )					      								    								  
106 JUMP_ABSOLUTE 50					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
17 >> 110 LOAD_GLOBAL 2 ( print )			      								    								  
112 LOAD_CONST 4 ( 'Maximum non-overlapping sub-array sum' )  								    								  
114 LOAD_FAST 3 ( c )					      								    								  
116 LOAD_CONST 3 ( 1 )					      								    								  
118 BINARY_ADD						      								    								  
120 LOAD_CONST 5 ( ': ' )				      								    								  
122 LOAD_FAST 4 ( max_so_far )				      								    								  
124 LOAD_CONST 6 ( ', starting index: ' )		      								    								  
126 LOAD_FAST 6 ( start )				      								    								  
128 LOAD_CONST 7 ( ', ending index: ' )			      								    								  
130 LOAD_FAST 7 ( end )					      								    								  
132 LOAD_CONST 8 ( '.' )				      								    								  
134 LOAD_CONST 9 ( '' )					      								    								  
136 LOAD_CONST 10 ( ( 'sep' , ) )			      								    								  
138 CALL_FUNCTION_KW 10					      								    								  
140 POP_TOP						      								    								  
							      								    								  
18 142 SETUP_LOOP 36 ( to 180 )				      								    								  
144 LOAD_GLOBAL 0 ( range )				      								    								  
146 LOAD_FAST 6 ( start )				      								    								  
148 LOAD_FAST 7 ( end )					      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_ADD						      								    								  
154 CALL_FUNCTION 2					      								    								  
156 GET_ITER						      								    								  
>> 158 FOR_ITER 18 ( to 178 )				      								    								  
160 STORE_FAST 10 ( l )					      								    								  
							      								    								  
19 162 LOAD_GLOBAL 1 ( float )				      								    								  
164 LOAD_CONST 1 ( 'inf' )				      								    								  
166 CALL_FUNCTION 1					      								    								  
168 UNARY_NEGATIVE					      								    								  
170 LOAD_FAST 0 ( arr )					      								    								  
172 LOAD_FAST 10 ( l )					      								    								  
174 STORE_SUBSCR					      								    								  
176 JUMP_ABSOLUTE 158					      								    								  
>> 178 POP_BLOCK					      								    								  
>> 180 JUMP_ABSOLUTE 10					      								    								  
>> 182 POP_BLOCK					      								    								  
							      								    								  
20 >> 184 LOAD_GLOBAL 2 ( print )			      								    								  
186 CALL_FUNCTION 0					      								    								  
188 POP_TOP						      								    								  
190 LOAD_CONST 0 ( None )				      								    								  
192 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS
--							      --							    --								  --
Disassembly of <code object maximumNumberDistinctPrimeRange a def maximumNumberDistinctPrimeRange ( m , n ) :		    def maximumNumberDistinctPrimeRange ( m , n ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  factorCount = [ 0 ] * ( n + 1 )			    	factorCount = [ 0 ] * n + 1				  
2 BUILD_LIST 1						      	  prime = [ False ] * ( n + 1 )				    	prime = [ False ] * ( n + 1 )				  
4 LOAD_FAST 1 ( n )					      	  for i in range ( n + 1 ) :				    	for i in range ( n + 1 ) :				  
6 LOAD_CONST 2 ( 1 )					      	      factorCount [ i ] = 0				    	    factorCount [ i ] = 0				  
8 BINARY_ADD						      	      prime [ i ] = True				    	    prime [ i ] = True					  
10 BINARY_MULTIPLY					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
12 STORE_FAST 2 ( factorCount )				      	      if ( prime [ i ] == True ) :			    	    if prime [ i ] == True :				  
							      		  factorCount [ i ] = 1				    		factorCount [ i ] = 1				  
3 14 LOAD_CONST 3 ( False )				      		  for j in range ( i * 2 , n + 1 , i ) :	    		for j in range ( i * 2 , n + 1 , i ) :		  
16 BUILD_LIST 1						      		      factorCount [ j ] += 1			    		    factorCount [ j ] += 1			  
18 LOAD_FAST 1 ( n )					      		      prime [ j ] = False			    		    prime [ j ] = False				  
20 LOAD_CONST 2 ( 1 )					      	  max = factorCount [ m ]				    num = factorCount [ m ]					  
22 BINARY_ADD						      	  num = m						    for i in range ( 2 , n + 1 , i ) :				  
24 BINARY_MULTIPLY					      	  for i in range ( m , n + 1 ) :			    	num = max ( num , num )					  
26 STORE_FAST 3 ( prime )				      	      if ( factorCount [ i ] > max ) :			    	if num > 0 :						  
							      		  max = factorCount [ i ]			    	    factorCount [ i ] = 1				  
4 28 SETUP_LOOP 36 ( to 66 )				      		  num = i					    return factorCount						  
30 LOAD_GLOBAL 0 ( range )				      	  return num						    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 CALL_FUNCTION 1					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 20 ( to 64 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 46 LOAD_CONST 1 ( 0 )					      								    								  
48 LOAD_FAST 2 ( factorCount )				      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
6 54 LOAD_CONST 4 ( True )				      								    								  
56 LOAD_FAST 3 ( prime )				      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 42					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
7 >> 66 SETUP_LOOP 96 ( to 164 )			      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_CONST 5 ( 2 )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 2					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 78 ( to 162 )				      								    								  
84 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 86 LOAD_FAST 3 ( prime )				      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 4 ( True )				      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
9 98 LOAD_CONST 2 ( 1 )					      								    								  
100 LOAD_FAST 2 ( factorCount )				      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 STORE_SUBSCR					      								    								  
							      								    								  
10 106 SETUP_LOOP 52 ( to 160 )				      								    								  
108 LOAD_GLOBAL 0 ( range )				      								    								  
110 LOAD_FAST 4 ( i )					      								    								  
112 LOAD_CONST 5 ( 2 )					      								    								  
114 BINARY_MULTIPLY					      								    								  
116 LOAD_FAST 1 ( n )					      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 CALL_FUNCTION 3					      								    								  
126 GET_ITER						      								    								  
>> 128 FOR_ITER 28 ( to 158 )				      								    								  
130 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 132 LOAD_FAST 2 ( factorCount )			      								    								  
134 LOAD_FAST 5 ( j )					      								    								  
136 DUP_TOP_TWO						      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_CONST 2 ( 1 )					      								    								  
142 INPLACE_ADD						      								    								  
144 ROT_THREE						      								    								  
146 STORE_SUBSCR					      								    								  
							      								    								  
12 148 LOAD_CONST 3 ( False )				      								    								  
150 LOAD_FAST 3 ( prime )				      								    								  
152 LOAD_FAST 5 ( j )					      								    								  
154 STORE_SUBSCR					      								    								  
156 JUMP_ABSOLUTE 128					      								    								  
>> 158 POP_BLOCK					      								    								  
>> 160 JUMP_ABSOLUTE 82					      								    								  
>> 162 POP_BLOCK					      								    								  
							      								    								  
13 >> 164 LOAD_FAST 2 ( factorCount )			      								    								  
166 LOAD_FAST 0 ( m )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 STORE_FAST 6 ( max )				      								    								  
							      								    								  
14 172 LOAD_FAST 0 ( m )				      								    								  
174 STORE_FAST 7 ( num )				      								    								  
							      								    								  
15 176 SETUP_LOOP 46 ( to 224 )				      								    								  
178 LOAD_GLOBAL 0 ( range )				      								    								  
180 LOAD_FAST 0 ( m )					      								    								  
182 LOAD_FAST 1 ( n )					      								    								  
184 LOAD_CONST 2 ( 1 )					      								    								  
186 BINARY_ADD						      								    								  
188 CALL_FUNCTION 2					      								    								  
190 GET_ITER						      								    								  
>> 192 FOR_ITER 28 ( to 222 )				      								    								  
194 STORE_FAST 4 ( i )					      								    								  
							      								    								  
16 196 LOAD_FAST 2 ( factorCount )			      								    								  
198 LOAD_FAST 4 ( i )					      								    								  
200 BINARY_SUBSCR					      								    								  
202 LOAD_FAST 6 ( max )					      								    								  
204 COMPARE_OP 4 ( > )					      								    								  
206 POP_JUMP_IF_FALSE 192				      								    								  
							      								    								  
17 208 LOAD_FAST 2 ( factorCount )			      								    								  
210 LOAD_FAST 4 ( i )					      								    								  
212 BINARY_SUBSCR					      								    								  
214 STORE_FAST 6 ( max )				      								    								  
							      								    								  
18 216 LOAD_FAST 4 ( i )				      								    								  
218 STORE_FAST 7 ( num )				      								    								  
220 JUMP_ABSOLUTE 192					      								    								  
>> 222 POP_BLOCK					      								    								  
							      								    								  
19 >> 224 LOAD_FAST 7 ( num )				      								    								  
226 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		      CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		    CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		  CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1
--							      --							    --								  --
Disassembly of <code object checkReverse at 0x7f33e2649150, f def checkReverse ( arr , n ) :				    def checkReverse ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 1 )					      	      return True					    	    return True						  _sa.valid/CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SOR
4 COMPARE_OP 2 ( == )					      	  i = 1							    	i = 1							  TED_1.py", line 56	 return True	 ^ SyntaxErr
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  or: 'return' outside function
							      	      if arr [ i - 1 ] < arr [ i ] :			    	    if arr [ i - 1 ] < arr [ i ] :			  
3 8 LOAD_CONST 2 ( True )				      		  if ( i == n ) :				    		if i == n :					  
10 RETURN_VALUE						      		      return True				    		    return True					  
							      	  j = i							    	j = i							  
4 >> 12 LOAD_CONST 1 ( 1 )				      	  while ( arr [ j ] < arr [ j - 1 ] ) :			    	while arr [ j ] < arr [ j - 1 ] :			  
14 STORE_FAST 2 ( i )					      	      if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) :	    	    if i > 1 and arr [ j ] < arr [ i - 2 ] :		  
							      		  return False					    		return False					  
5 16 SETUP_LOOP 50 ( to 68 )				      	      j += 1						    	    j += 1						  
18 LOAD_GLOBAL 0 ( range )				      	  if ( j == n ) :					    if j == n :							  
20 LOAD_CONST 1 ( 1 )					      	      return True					    	return True						  
22 LOAD_FAST 1 ( n )					      	  k = j							    k = j							  
24 CALL_FUNCTION 2					      	  if ( arr [ k ] < arr [ i - 1 ] ) :			    if arr [ k ] < arr [ i - 1 ] :				  
26 GET_ITER						      	      return False					    	return False						  
>> 28 FOR_ITER 36 ( to 66 )				      	  while ( k > 1 and k < n ) :				    for k in k :						  
30 STORE_FAST 2 ( i )					      	      if ( arr [ k ] < arr [ k - 1 ] ) :		    	if k < k :						  
							      		  return False					    	    if k < k :						  
6 32 LOAD_FAST 0 ( arr )				      	      k += 1						    		return False					  
34 LOAD_FAST 2 ( i )					      	  return True						    return True							  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
7 52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_FAST 1 ( n )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
8 60 LOAD_CONST 2 ( True )				      								    								  
62 RETURN_VALUE						      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 2 ( i )				      								    								  
70 STORE_FAST 3 ( j )					      								    								  
							      								    								  
10 72 SETUP_LOOP 64 ( to 138 )				      								    								  
>> 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 3 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( arr )					      								    								  
82 LOAD_FAST 3 ( j )					      								    								  
84 LOAD_CONST 1 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
11 94 LOAD_FAST 2 ( i )					      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 126				      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 3 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 2 ( i )					      								    								  
112 LOAD_CONST 3 ( 2 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 COMPARE_OP 0 ( < )					      								    								  
120 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
12 122 LOAD_CONST 4 ( False )				      								    								  
124 RETURN_VALUE					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 3 ( j )				      								    								  
128 LOAD_CONST 1 ( 1 )					      								    								  
130 INPLACE_ADD						      								    								  
132 STORE_FAST 3 ( j )					      								    								  
134 JUMP_ABSOLUTE 74					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
14 >> 138 LOAD_FAST 3 ( j )				      								    								  
140 LOAD_FAST 1 ( n )					      								    								  
142 COMPARE_OP 2 ( == )					      								    								  
144 POP_JUMP_IF_FALSE 150				      								    								  
							      								    								  
15 146 LOAD_CONST 2 ( True )				      								    								  
148 RETURN_VALUE					      								    								  
							      								    								  
16 >> 150 LOAD_FAST 3 ( j )				      								    								  
152 STORE_FAST 4 ( k )					      								    								  
							      								    								  
17 154 LOAD_FAST 0 ( arr )				      								    								  
156 LOAD_FAST 4 ( k )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_FAST 0 ( arr )					      								    								  
162 LOAD_FAST 2 ( i )					      								    								  
164 LOAD_CONST 1 ( 1 )					      								    								  
166 BINARY_SUBTRACT					      								    								  
168 BINARY_SUBSCR					      								    								  
170 COMPARE_OP 0 ( < )					      								    								  
172 POP_JUMP_IF_FALSE 178				      								    								  
							      								    								  
18 174 LOAD_CONST 4 ( False )				      								    								  
176 RETURN_VALUE					      								    								  
							      								    								  
19 >> 178 SETUP_LOOP 52 ( to 232 )			      								    								  
>> 180 LOAD_FAST 4 ( k )				      								    								  
182 LOAD_CONST 1 ( 1 )					      								    								  
184 COMPARE_OP 4 ( > )					      								    								  
186 POP_JUMP_IF_FALSE 230				      								    								  
188 LOAD_FAST 4 ( k )					      								    								  
190 LOAD_FAST 1 ( n )					      								    								  
192 COMPARE_OP 0 ( < )					      								    								  
194 POP_JUMP_IF_FALSE 230				      								    								  
							      								    								  
20 196 LOAD_FAST 0 ( arr )				      								    								  
198 LOAD_FAST 4 ( k )					      								    								  
200 BINARY_SUBSCR					      								    								  
202 LOAD_FAST 0 ( arr )					      								    								  
204 LOAD_FAST 4 ( k )					      								    								  
206 LOAD_CONST 1 ( 1 )					      								    								  
208 BINARY_SUBTRACT					      								    								  
210 BINARY_SUBSCR					      								    								  
212 COMPARE_OP 0 ( < )					      								    								  
214 POP_JUMP_IF_FALSE 220				      								    								  
							      								    								  
21 216 LOAD_CONST 4 ( False )				      								    								  
218 RETURN_VALUE					      								    								  
							      								    								  
22 >> 220 LOAD_FAST 4 ( k )				      								    								  
222 LOAD_CONST 1 ( 1 )					      								    								  
224 INPLACE_ADD						      								    								  
226 STORE_FAST 4 ( k )					      								    								  
228 JUMP_ABSOLUTE 180					      								    								  
>> 230 POP_BLOCK					      								    								  
							      								    								  
23 >> 232 LOAD_CONST 2 ( True )				      								    								  
234 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			      PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			    PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			  PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN
--							      --							    --								  --
Disassembly of <code object printPath at 0x7f33e2644f60, file def printPath ( str ) :					    def printPath ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  
2 STORE_FAST 1 ( i )					      	  curX = 0						    	curX = 0						  
							      	  curY = 0						    	curY = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  while ( i < len ( str ) ) :				    	while i < len ( str ) :					  
6 STORE_FAST 2 ( curX )					      	      nextX = int ( ( ord ( str [ i ] ) - ord ( 'A' ) ) / 5 	    nextX = int ( ord ( str [ i ] ) - ord ( 'A' ) / 5 )	  
							      	      nextY = ( ord ( str [ i ] ) - ord ( 'B' ) + 1 ) % 5   	    nextY = ord ( str [ i ] ) - ord ( 'B' ) + 1		  
4 8 LOAD_CONST 1 ( 0 )					      	      while ( curX > nextX ) :				    	    while curX > nextX :				  
10 STORE_FAST 3 ( curY )				      		  print ( "Move Up" )				    		print ( 'Move Up' )				  
							      		  curX -= 1					    		curX -= 1					  
5 12 SETUP_LOOP 208 ( to 222 )				      	      while ( curY > nextY ) :				    	    while curY > nextY :				  
>> 14 LOAD_FAST 1 ( i )					      		  print ( "Move Left" )				    		print ( 'Move Left' )				  
16 LOAD_GLOBAL 0 ( len )				      		  curY -= 1					    		curY -= 1					  
18 LOAD_FAST 0 ( str )					      	      while ( curX < nextX ) :				    	    while curX < nextX :				  
20 CALL_FUNCTION 1					      		  print ( "Move Down" )				    		print ( 'Move Move' )				  
22 COMPARE_OP 0 ( < )					      		  curX += 1					    		curY += 1					  
24 POP_JUMP_IF_FALSE 220				      	      while ( curY < nextY ) :				    	    while curX < nextX :				  
							      		  print ( "Move Right" )			    		print ( 'Move Move' )				  
6 26 LOAD_GLOBAL 1 ( int )				      		  curY += 1					    		curY += 1					  
28 LOAD_GLOBAL 2 ( ord )				      	      print ( "Press OK" )				    	    while curY < curX :					  
30 LOAD_FAST 0 ( str )					      	      i += 1						    		print ( 'Move Move' )				  
32 LOAD_FAST 1 ( i )					      								    		curY += 1					  
34 BINARY_SUBSCR					      								    	while curY < curX :					  
36 CALL_FUNCTION 1					      								    	    print ( 'Press right' )				  
38 LOAD_GLOBAL 2 ( ord )				      								    								  
40 LOAD_CONST 2 ( 'A' )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 3 ( 5 )					      								    								  
48 BINARY_TRUE_DIVIDE					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 STORE_FAST 4 ( nextX )				      								    								  
							      								    								  
7 54 LOAD_GLOBAL 2 ( ord )				      								    								  
56 LOAD_FAST 0 ( str )					      								    								  
58 LOAD_FAST 1 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_GLOBAL 2 ( ord )				      								    								  
66 LOAD_CONST 4 ( 'B' )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_CONST 5 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_CONST 3 ( 5 )					      								    								  
78 BINARY_MODULO					      								    								  
80 STORE_FAST 5 ( nextY )				      								    								  
							      								    								  
8 82 SETUP_LOOP 28 ( to 112 )				      								    								  
>> 84 LOAD_FAST 2 ( curX )				      								    								  
86 LOAD_FAST 4 ( nextX )				      								    								  
88 COMPARE_OP 4 ( > )					      								    								  
90 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
9 92 LOAD_GLOBAL 3 ( print )				      								    								  
94 LOAD_CONST 6 ( 'Move Up' )				      								    								  
96 CALL_FUNCTION 1					      								    								  
98 POP_TOP						      								    								  
							      								    								  
10 100 LOAD_FAST 2 ( curX )				      								    								  
102 LOAD_CONST 5 ( 1 )					      								    								  
104 INPLACE_SUBTRACT					      								    								  
106 STORE_FAST 2 ( curX )				      								    								  
108 JUMP_ABSOLUTE 84					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
11 >> 112 SETUP_LOOP 28 ( to 142 )			      								    								  
>> 114 LOAD_FAST 3 ( curY )				      								    								  
116 LOAD_FAST 5 ( nextY )				      								    								  
118 COMPARE_OP 4 ( > )					      								    								  
120 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
12 122 LOAD_GLOBAL 3 ( print )				      								    								  
124 LOAD_CONST 7 ( 'Move Left' )			      								    								  
126 CALL_FUNCTION 1					      								    								  
128 POP_TOP						      								    								  
							      								    								  
13 130 LOAD_FAST 3 ( curY )				      								    								  
132 LOAD_CONST 5 ( 1 )					      								    								  
134 INPLACE_SUBTRACT					      								    								  
136 STORE_FAST 3 ( curY )				      								    								  
138 JUMP_ABSOLUTE 114					      								    								  
>> 140 POP_BLOCK					      								    								  
							      								    								  
14 >> 142 SETUP_LOOP 28 ( to 172 )			      								    								  
>> 144 LOAD_FAST 2 ( curX )				      								    								  
146 LOAD_FAST 4 ( nextX )				      								    								  
148 COMPARE_OP 0 ( < )					      								    								  
150 POP_JUMP_IF_FALSE 170				      								    								  
							      								    								  
15 152 LOAD_GLOBAL 3 ( print )				      								    								  
154 LOAD_CONST 8 ( 'Move Down' )			      								    								  
156 CALL_FUNCTION 1					      								    								  
158 POP_TOP						      								    								  
							      								    								  
16 160 LOAD_FAST 2 ( curX )				      								    								  
162 LOAD_CONST 5 ( 1 )					      								    								  
164 INPLACE_ADD						      								    								  
166 STORE_FAST 2 ( curX )				      								    								  
168 JUMP_ABSOLUTE 144					      								    								  
>> 170 POP_BLOCK					      								    								  
							      								    								  
17 >> 172 SETUP_LOOP 28 ( to 202 )			      								    								  
>> 174 LOAD_FAST 3 ( curY )				      								    								  
176 LOAD_FAST 5 ( nextY )				      								    								  
178 COMPARE_OP 0 ( < )					      								    								  
180 POP_JUMP_IF_FALSE 200				      								    								  
							      								    								  
18 182 LOAD_GLOBAL 3 ( print )				      								    								  
184 LOAD_CONST 9 ( 'Move Right' )			      								    								  
186 CALL_FUNCTION 1					      								    								  
188 POP_TOP						      								    								  
							      								    								  
19 190 LOAD_FAST 3 ( curY )				      								    								  
192 LOAD_CONST 5 ( 1 )					      								    								  
194 INPLACE_ADD						      								    								  
196 STORE_FAST 3 ( curY )				      								    								  
198 JUMP_ABSOLUTE 174					      								    								  
>> 200 POP_BLOCK					      								    								  
							      								    								  
20 >> 202 LOAD_GLOBAL 3 ( print )			      								    								  
204 LOAD_CONST 10 ( 'Press OK' )			      								    								  
206 CALL_FUNCTION 1					      								    								  
208 POP_TOP						      								    								  
							      								    								  
21 210 LOAD_FAST 1 ( i )				      								    								  
212 LOAD_CONST 5 ( 1 )					      								    								  
214 INPLACE_ADD						      								    								  
216 STORE_FAST 1 ( i )					      								    								  
218 JUMP_ABSOLUTE 14					      								    								  
>> 220 POP_BLOCK					      								    								  
>> 222 LOAD_CONST 0 ( None )				      								    								  
224 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		      FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		    FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1			  FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1
--							      --							    --								  --
Disassembly of <code object findFourElements at 0x7f33e2653ed def findFourElements ( arr , n ) :			    def findFourElements ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  mp = dict ( )						    	mp = dict ( )						  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 CALL_FUNCTION 0					      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  _sa.valid/FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_
4 STORE_FAST 2 ( mp )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  D_1.py", line 48     return d	    ^ SyntaxError: '
							      		  mp [ arr [ i ] + arr [ j ] ] = ( i , j )	    		mp [ arr [ i ] + arr [ j ] ] = ( i , j )	  return' outside function
3 6 SETUP_LOOP 68 ( to 76 )				      	  d = - 10 ** 9						    	d = - 1000000000					  
8 LOAD_GLOBAL 1 ( range )				      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  
10 LOAD_FAST 1 ( n )					      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
12 LOAD_CONST 1 ( 1 )					      		  abs_diff = abs ( arr [ i ] - arr [ j ] )	    		abs_diff = abs ( arr [ i ] - arr [ j ] )	  
14 BINARY_SUBTRACT					      		  if abs_diff in mp.keys ( ) :			    		if abs_diff in mp.keys ( ) :			  
16 CALL_FUNCTION 1					      		      p = mp [ abs_diff ]			    		    p = mp [ abs_]				  
18 GET_ITER						      		      if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1  		    if p [ 0 ] != i and p [ - 1 ] != p [ - 1 ] :  
>> 20 FOR_ITER 52 ( to 74 )				      			  d = max ( d , max ( arr [ i ] , arr [ j ] 			d = mp [ abs_]				  
22 STORE_FAST 3 ( i )					      	  return d						    if d != max ( ) :						  
							      								    	d = max ( arr [ i ] )					  
4 24 SETUP_LOOP 46 ( to 72 )				      								    return d							  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 28 ( to 70 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 3 ( i )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BUILD_TUPLE 2					      								    								  
50 LOAD_FAST 2 ( mp )					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 40					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 JUMP_ABSOLUTE 20					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
6 >> 76 LOAD_CONST 2 ( - 1000000000 )			      								    								  
78 STORE_FAST 5 ( d )					      								    								  
							      								    								  
7 80 SETUP_LOOP 156 ( to 238 )				      								    								  
82 LOAD_GLOBAL 1 ( range )				      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 CALL_FUNCTION 1					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 140 ( to 236 )				      								    								  
96 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 98 SETUP_LOOP 134 ( to 234 )				      								    								  
100 LOAD_GLOBAL 1 ( range )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_FAST 1 ( n )					      								    								  
110 CALL_FUNCTION 2					      								    								  
112 GET_ITER						      								    								  
>> 114 FOR_ITER 116 ( to 232 )				      								    								  
116 STORE_FAST 4 ( j )					      								    								  
							      								    								  
9 118 LOAD_GLOBAL 2 ( abs )				      								    								  
120 LOAD_FAST 0 ( arr )					      								    								  
122 LOAD_FAST 3 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 4 ( j )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 STORE_FAST 6 ( abs_diff )				      								    								  
							      								    								  
10 138 LOAD_FAST 6 ( abs_diff )				      								    								  
140 LOAD_FAST 2 ( mp )					      								    								  
142 LOAD_METHOD 3 ( keys )				      								    								  
144 CALL_METHOD 0					      								    								  
146 COMPARE_OP 6 ( in )					      								    								  
148 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
11 150 LOAD_FAST 2 ( mp )				      								    								  
152 LOAD_FAST 6 ( abs_diff )				      								    								  
154 BINARY_SUBSCR					      								    								  
156 STORE_FAST 7 ( p )					      								    								  
							      								    								  
12 158 LOAD_FAST 7 ( p )				      								    								  
160 LOAD_CONST 3 ( 0 )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_FAST 3 ( i )					      								    								  
166 COMPARE_OP 3 ( != )					      								    								  
168 POP_JUMP_IF_FALSE 114				      								    								  
170 LOAD_FAST 7 ( p )					      								    								  
172 LOAD_CONST 3 ( 0 )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 LOAD_FAST 4 ( j )					      								    								  
178 COMPARE_OP 3 ( != )					      								    								  
180 POP_JUMP_IF_FALSE 114				      								    								  
182 LOAD_FAST 7 ( p )					      								    								  
184 LOAD_CONST 1 ( 1 )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_FAST 3 ( i )					      								    								  
190 COMPARE_OP 3 ( != )					      								    								  
192 POP_JUMP_IF_FALSE 114				      								    								  
194 LOAD_FAST 7 ( p )					      								    								  
196 LOAD_CONST 1 ( 1 )					      								    								  
198 BINARY_SUBSCR					      								    								  
200 LOAD_FAST 4 ( j )					      								    								  
202 COMPARE_OP 3 ( != )					      								    								  
204 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
13 206 LOAD_GLOBAL 4 ( max )				      								    								  
208 LOAD_FAST 5 ( d )					      								    								  
210 LOAD_GLOBAL 4 ( max )				      								    								  
212 LOAD_FAST 0 ( arr )					      								    								  
214 LOAD_FAST 3 ( i )					      								    								  
216 BINARY_SUBSCR					      								    								  
218 LOAD_FAST 0 ( arr )					      								    								  
220 LOAD_FAST 4 ( j )					      								    								  
222 BINARY_SUBSCR					      								    								  
224 CALL_FUNCTION 2					      								    								  
226 CALL_FUNCTION 2					      								    								  
228 STORE_FAST 5 ( d )					      								    								  
230 JUMP_ABSOLUTE 114					      								    								  
>> 232 POP_BLOCK					      								    								  
>> 234 JUMP_ABSOLUTE 94					      								    								  
>> 236 POP_BLOCK					      								    								  
							      								    								  
14 >> 238 LOAD_FAST 5 ( d )				      								    								  
240 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_PATH_2D_MATRIX				      CHECK_POSSIBLE_PATH_2D_MATRIX				    CHECK_POSSIBLE_PATH_2D_MATRIX				  CHECK_POSSIBLE_PATH_2D_MATRIX
--							      --							    --								  --
Disassembly of <code object isPath at 0x7f33e2644930, file "< def isPath ( arr ) :					    def isPath ( arr ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  arr [ 0 ] [ 0 ] = 1					    	arr [ 0 ] [ 0 ] = 1					  
2 LOAD_FAST 0 ( arr )					      	  for i in range ( 1 , row ) :				    	for i in range ( 1 , row ) :				  
4 LOAD_CONST 2 ( 0 )					      	      if ( arr [ i ] [ 0 ] != - 1 ) :			    	    if arr [ i ] [ 0 ] != - 1 :				  
6 BINARY_SUBSCR						      		  arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ]		    		arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ]		  
8 LOAD_CONST 2 ( 0 )					      	  for j in range ( 1 , col ) :				    	for j in range ( 1 , col ) :				  
10 STORE_SUBSCR						      	      if ( arr [ 0 ] [ j ] != - 1 ) :			    	    if arr [ 0 ] [ j - 1 ] != - 1 :			  
							      		  arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ]		    		arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ]		  
3 12 SETUP_LOOP 58 ( to 72 )				      	  for i in range ( 1 , row ) :				    	for i in range ( 1 , row ) :				  
14 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 1 , col ) :			    	    for j in arr [ i ] [ j ] :				  
16 LOAD_CONST 1 ( 1 )					      		  if ( arr [ i ] [ j ] != - 1 ) :		    		if arr [ i ] [ j ] != - 1 :			  
18 LOAD_GLOBAL 1 ( row )				      		      arr [ i ] [ j ] = max ( arr [ i ] [ j - 1 ] , 		    arr [ i ] [ j ] = arr [ i ] [ j ] [ j ]	  
20 CALL_FUNCTION 2					      	  return ( arr [ row - 1 ] [ col - 1 ] == 1 )		    return arr							  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 44 ( to 70 )				      								    								  
26 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 2 ( 0 )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 3 ( - 1 )					      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 2 ( 0 )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 1 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_CONST 2 ( 0 )					      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 24					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 SETUP_LOOP 58 ( to 132 )			      								    								  
74 LOAD_GLOBAL 0 ( range )				      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 LOAD_GLOBAL 2 ( col )				      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 44 ( to 130 )				      								    								  
86 STORE_FAST 2 ( j )					      								    								  
							      								    								  
7 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_CONST 2 ( 0 )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 2 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 3 ( - 1 )					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
8 104 LOAD_FAST 0 ( arr )				      								    								  
106 LOAD_CONST 2 ( 0 )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 2 ( j )					      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 2 ( j )					      								    								  
126 STORE_SUBSCR					      								    								  
128 JUMP_ABSOLUTE 84					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
9 >> 132 SETUP_LOOP 96 ( to 230 )			      								    								  
134 LOAD_GLOBAL 0 ( range )				      								    								  
136 LOAD_CONST 1 ( 1 )					      								    								  
138 LOAD_GLOBAL 1 ( row )				      								    								  
140 CALL_FUNCTION 2					      								    								  
142 GET_ITER						      								    								  
>> 144 FOR_ITER 82 ( to 228 )				      								    								  
146 STORE_FAST 1 ( i )					      								    								  
							      								    								  
10 148 SETUP_LOOP 76 ( to 226 )				      								    								  
150 LOAD_GLOBAL 0 ( range )				      								    								  
152 LOAD_CONST 1 ( 1 )					      								    								  
154 LOAD_GLOBAL 2 ( col )				      								    								  
156 CALL_FUNCTION 2					      								    								  
158 GET_ITER						      								    								  
>> 160 FOR_ITER 62 ( to 224 )				      								    								  
162 STORE_FAST 2 ( j )					      								    								  
							      								    								  
11 164 LOAD_FAST 0 ( arr )				      								    								  
166 LOAD_FAST 1 ( i )					      								    								  
168 BINARY_SUBSCR					      								    								  
170 LOAD_FAST 2 ( j )					      								    								  
172 BINARY_SUBSCR					      								    								  
174 LOAD_CONST 3 ( - 1 )				      								    								  
176 COMPARE_OP 3 ( != )					      								    								  
178 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
12 180 LOAD_GLOBAL 3 ( max )				      								    								  
182 LOAD_FAST 0 ( arr )					      								    								  
184 LOAD_FAST 1 ( i )					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_FAST 2 ( j )					      								    								  
190 LOAD_CONST 1 ( 1 )					      								    								  
192 BINARY_SUBTRACT					      								    								  
194 BINARY_SUBSCR					      								    								  
196 LOAD_FAST 0 ( arr )					      								    								  
198 LOAD_FAST 1 ( i )					      								    								  
200 LOAD_CONST 1 ( 1 )					      								    								  
202 BINARY_SUBTRACT					      								    								  
204 BINARY_SUBSCR					      								    								  
206 LOAD_FAST 2 ( j )					      								    								  
208 BINARY_SUBSCR					      								    								  
210 CALL_FUNCTION 2					      								    								  
212 LOAD_FAST 0 ( arr )					      								    								  
214 LOAD_FAST 1 ( i )					      								    								  
216 BINARY_SUBSCR					      								    								  
218 LOAD_FAST 2 ( j )					      								    								  
220 STORE_SUBSCR					      								    								  
222 JUMP_ABSOLUTE 160					      								    								  
>> 224 POP_BLOCK					      								    								  
>> 226 JUMP_ABSOLUTE 144				      								    								  
>> 228 POP_BLOCK					      								    								  
							      								    								  
13 >> 230 LOAD_FAST 0 ( arr )				      								    								  
232 LOAD_GLOBAL 1 ( row )				      								    								  
234 LOAD_CONST 1 ( 1 )					      								    								  
236 BINARY_SUBTRACT					      								    								  
238 BINARY_SUBSCR					      								    								  
240 LOAD_GLOBAL 2 ( col )				      								    								  
242 LOAD_CONST 1 ( 1 )					      								    								  
244 BINARY_SUBTRACT					      								    								  
246 BINARY_SUBSCR					      								    								  
248 LOAD_CONST 1 ( 1 )					      								    								  
250 COMPARE_OP 2 ( == )					      								    								  
252 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS     NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	    NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	  NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS
--							      --							    --								  --
Disassembly of <code object waysToArrange at 0x7f33e2644f60,  def waysToArrange ( N , K , k ) :				    def waysToArrange ( N , K , K ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( np )				      	  C = np.zeros ( ( N + 1 , N + 1 ) )			    	C = np.zeros ( ( N + 1 , N + 1 ) )			  
2 LOAD_METHOD 1 ( zeros )				      	  for i in range ( N + 1 ) :				    	for i in range ( N + 1 ) :				  
4 LOAD_FAST 0 ( N )					      	      for j in range ( i + 1 ) :			    	    for j in range ( i + 1 ) :				  
6 LOAD_CONST 1 ( 1 )					      		  if ( j == 0 or j == i ) :			    		if j == 0 or j == i :				  
8 BINARY_ADD						      		      C [ i ] [ j ] = 1				    		    C [ i ] [ j ] = 1				  
10 LOAD_FAST 0 ( N )					      		  else :					    		else :						  
12 LOAD_CONST 1 ( 1 )					      		      C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ 		    C [ i ] [ j ] = C [ i - 1 ] + C [ i - 1 ] [ j 
14 BINARY_ADD						      	  dp = np.zeros ( ( K + 1 ) )				    	dp = np.zeros ( K + 1 )					  
16 BUILD_TUPLE 2					      	  count = 0						    	count = 0						  
18 CALL_METHOD 1					      	  dp [ 0 ] = 1						    	dp [ 0 ] = 1						  
20 STORE_FAST 3 ( C )					      	  for i in range ( K ) :				    	for i in range ( K ) :					  
							      	      dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] 	    dp [ i ] [ j ] = i					  
3 22 SETUP_LOOP 116 ( to 140 )				      	      count += k [ i ]					    	    count += 1						  
24 LOAD_GLOBAL 2 ( range )				      	  return dp [ K ]					    return dp ( dp , k , K )					  
26 LOAD_FAST 0 ( N )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 100 ( to 138 )				      								    								  
38 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 40 SETUP_LOOP 94 ( to 136 )				      								    								  
42 LOAD_GLOBAL 2 ( range )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 78 ( to 134 )				      								    								  
56 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 58 LOAD_FAST 5 ( j )					      								    								  
60 LOAD_CONST 2 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_TRUE 74					      								    								  
66 LOAD_FAST 5 ( j )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
6 >> 74 LOAD_CONST 1 ( 1 )				      								    								  
76 LOAD_FAST 3 ( C )					      								    								  
78 LOAD_FAST 4 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 5 ( j )					      								    								  
84 STORE_SUBSCR						      								    								  
86 JUMP_ABSOLUTE 54					      								    								  
							      								    								  
8 >> 88 LOAD_FAST 3 ( C )				      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 5 ( j )					      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 3 ( C )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 LOAD_CONST 1 ( 1 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 5 ( j )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_FAST 3 ( C )					      								    								  
124 LOAD_FAST 4 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 5 ( j )					      								    								  
130 STORE_SUBSCR					      								    								  
132 JUMP_ABSOLUTE 54					      								    								  
>> 134 POP_BLOCK					      								    								  
>> 136 JUMP_ABSOLUTE 36					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
9 >> 140 LOAD_GLOBAL 0 ( np )				      								    								  
142 LOAD_METHOD 1 ( zeros )				      								    								  
144 LOAD_FAST 1 ( K )					      								    								  
146 LOAD_CONST 1 ( 1 )					      								    								  
148 BINARY_ADD						      								    								  
150 CALL_METHOD 1					      								    								  
152 STORE_FAST 6 ( dp )					      								    								  
							      								    								  
10 154 LOAD_CONST 2 ( 0 )				      								    								  
156 STORE_FAST 7 ( count )				      								    								  
							      								    								  
11 158 LOAD_CONST 1 ( 1 )				      								    								  
160 LOAD_FAST 6 ( dp )					      								    								  
162 LOAD_CONST 2 ( 0 )					      								    								  
164 STORE_SUBSCR					      								    								  
							      								    								  
12 166 SETUP_LOOP 76 ( to 244 )				      								    								  
168 LOAD_GLOBAL 2 ( range )				      								    								  
170 LOAD_FAST 1 ( K )					      								    								  
172 CALL_FUNCTION 1					      								    								  
174 GET_ITER						      								    								  
>> 176 FOR_ITER 64 ( to 242 )				      								    								  
178 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 180 LOAD_FAST 6 ( dp )				      								    								  
182 LOAD_FAST 4 ( i )					      								    								  
184 BINARY_SUBSCR					      								    								  
186 LOAD_FAST 3 ( C )					      								    								  
188 LOAD_FAST 7 ( count )				      								    								  
190 LOAD_FAST 2 ( k )					      								    								  
192 LOAD_FAST 4 ( i )					      								    								  
194 BINARY_SUBSCR					      								    								  
196 BINARY_ADD						      								    								  
198 LOAD_CONST 1 ( 1 )					      								    								  
200 BINARY_SUBTRACT					      								    								  
202 BINARY_SUBSCR					      								    								  
204 LOAD_FAST 2 ( k )					      								    								  
206 LOAD_FAST 4 ( i )					      								    								  
208 BINARY_SUBSCR					      								    								  
210 LOAD_CONST 1 ( 1 )					      								    								  
212 BINARY_SUBTRACT					      								    								  
214 BINARY_SUBSCR					      								    								  
216 BINARY_MULTIPLY					      								    								  
218 LOAD_FAST 6 ( dp )					      								    								  
220 LOAD_FAST 4 ( i )					      								    								  
222 LOAD_CONST 1 ( 1 )					      								    								  
224 BINARY_ADD						      								    								  
226 STORE_SUBSCR					      								    								  
							      								    								  
14 228 LOAD_FAST 7 ( count )				      								    								  
230 LOAD_FAST 2 ( k )					      								    								  
232 LOAD_FAST 4 ( i )					      								    								  
234 BINARY_SUBSCR					      								    								  
236 INPLACE_ADD						      								    								  
238 STORE_FAST 7 ( count )				      								    								  
240 JUMP_ABSOLUTE 176					      								    								  
>> 242 POP_BLOCK					      								    								  
							      								    								  
15 >> 244 LOAD_FAST 6 ( dp )				      								    								  
246 LOAD_FAST 1 ( K )					      								    								  
248 BINARY_SUBSCR					      								    								  
250 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES      PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	    PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	  PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES
--							      --							    --								  --
Disassembly of <code object constructTree at 0x7f33e26494b0,  def constructTree ( n , d , h ) :				    def constructTree ( n , d , h ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( d )					      	  if d == 1 :						    	if d == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      if n == 2 and h == 1 :				    	    if n == 2 and h == 1 :				  
4 COMPARE_OP 2 ( == )					      		  print ( "1 2" )				    		print ( '1 2' )					  
6 POP_JUMP_IF_FALSE 48					      		  return 0					    		return 0					  
							      	      print ( "-1" )					    	    print ( '-1' )					  
3 8 LOAD_FAST 0 ( n )					      	      return 0						    	    return 0						  
10 LOAD_CONST 2 ( 2 )					      	  if d > 2 * h :					    	if d > 2 * h :						  
12 COMPARE_OP 2 ( == )					      	      print ( "-1" )					    	    print ( '-1' )					  
14 POP_JUMP_IF_FALSE 36					      	      return 0						    	    return 0						  
16 LOAD_FAST 2 ( h )					      	  for i in range ( 1 , h + 1 ) :			    	for i in range ( 1 , h + 1 ) :				  
18 LOAD_CONST 1 ( 1 )					      	      print ( i , " " , i + 1 )				    	    print ( i , ' ' , i + 1 )				  
20 COMPARE_OP 2 ( == )					      	  if d > h :						    if d > h :							  
22 POP_JUMP_IF_FALSE 36					      	      print ( 1 , "  " , h + 2 )			    	print ( 1 , '  ' , h + 2 )				  
							      	      for i in range ( h + 2 , d + 1 ) :		    	for i in range ( h + 2 , d + 1 ) :			  
4 24 LOAD_GLOBAL 0 ( print )				      		  print ( i , " " , i + 1 )			    	    print ( i + 2 , d + 1 )				  
26 LOAD_CONST 3 ( '1 2' )				      	  for i in range ( d + 1 , n ) :			    	for i in range ( k + 2 , d + 1 ) :			  
28 CALL_FUNCTION 1					      	      k = 1						    	    print ( k + 2 )					  
30 POP_TOP						      	      if d == h :					    								  
							      		  k = 2						    								  
5 32 LOAD_CONST 4 ( 0 )					      	      print ( k , " " , i + 1 )				    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_CONST 5 ( '-1' )				      								    								  
40 CALL_FUNCTION 1					      								    								  
42 POP_TOP						      								    								  
							      								    								  
7 44 LOAD_CONST 4 ( 0 )					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
8 >> 48 LOAD_FAST 1 ( d )				      								    								  
50 LOAD_CONST 2 ( 2 )					      								    								  
52 LOAD_FAST 2 ( h )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 COMPARE_OP 4 ( > )					      								    								  
58 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
9 60 LOAD_GLOBAL 0 ( print )				      								    								  
62 LOAD_CONST 5 ( '-1' )				      								    								  
64 CALL_FUNCTION 1					      								    								  
66 POP_TOP						      								    								  
							      								    								  
10 68 LOAD_CONST 4 ( 0 )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
11 >> 72 SETUP_LOOP 38 ( to 112 )			      								    								  
74 LOAD_GLOBAL 1 ( range )				      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 LOAD_FAST 2 ( h )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 CALL_FUNCTION 2					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 20 ( to 110 )				      								    								  
90 STORE_FAST 3 ( i )					      								    								  
							      								    								  
12 92 LOAD_GLOBAL 0 ( print )				      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 LOAD_CONST 6 ( ' ' )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 CALL_FUNCTION 3					      								    								  
106 POP_TOP						      								    								  
108 JUMP_ABSOLUTE 88					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
13 >> 112 LOAD_FAST 1 ( d )				      								    								  
114 LOAD_FAST 2 ( h )					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 180				      								    								  
							      								    								  
14 120 LOAD_GLOBAL 0 ( print )				      								    								  
122 LOAD_CONST 1 ( 1 )					      								    								  
124 LOAD_CONST 7 ( '  ' )				      								    								  
126 LOAD_FAST 2 ( h )					      								    								  
128 LOAD_CONST 2 ( 2 )					      								    								  
130 BINARY_ADD						      								    								  
132 CALL_FUNCTION 3					      								    								  
134 POP_TOP						      								    								  
							      								    								  
15 136 SETUP_LOOP 42 ( to 180 )				      								    								  
138 LOAD_GLOBAL 1 ( range )				      								    								  
140 LOAD_FAST 2 ( h )					      								    								  
142 LOAD_CONST 2 ( 2 )					      								    								  
144 BINARY_ADD						      								    								  
146 LOAD_FAST 1 ( d )					      								    								  
148 LOAD_CONST 1 ( 1 )					      								    								  
150 BINARY_ADD						      								    								  
152 CALL_FUNCTION 2					      								    								  
154 GET_ITER						      								    								  
>> 156 FOR_ITER 20 ( to 178 )				      								    								  
158 STORE_FAST 3 ( i )					      								    								  
							      								    								  
16 160 LOAD_GLOBAL 0 ( print )				      								    								  
162 LOAD_FAST 3 ( i )					      								    								  
164 LOAD_CONST 6 ( ' ' )				      								    								  
166 LOAD_FAST 3 ( i )					      								    								  
168 LOAD_CONST 1 ( 1 )					      								    								  
170 BINARY_ADD						      								    								  
172 CALL_FUNCTION 3					      								    								  
174 POP_TOP						      								    								  
176 JUMP_ABSOLUTE 156					      								    								  
>> 178 POP_BLOCK					      								    								  
							      								    								  
17 >> 180 SETUP_LOOP 54 ( to 236 )			      								    								  
182 LOAD_GLOBAL 1 ( range )				      								    								  
184 LOAD_FAST 1 ( d )					      								    								  
186 LOAD_CONST 1 ( 1 )					      								    								  
188 BINARY_ADD						      								    								  
190 LOAD_FAST 0 ( n )					      								    								  
192 CALL_FUNCTION 2					      								    								  
194 GET_ITER						      								    								  
>> 196 FOR_ITER 36 ( to 234 )				      								    								  
198 STORE_FAST 3 ( i )					      								    								  
							      								    								  
18 200 LOAD_CONST 1 ( 1 )				      								    								  
202 STORE_FAST 4 ( k )					      								    								  
							      								    								  
19 204 LOAD_FAST 1 ( d )				      								    								  
206 LOAD_FAST 2 ( h )					      								    								  
208 COMPARE_OP 2 ( == )					      								    								  
210 POP_JUMP_IF_FALSE 216				      								    								  
							      								    								  
20 212 LOAD_CONST 2 ( 2 )				      								    								  
214 STORE_FAST 4 ( k )					      								    								  
							      								    								  
21 >> 216 LOAD_GLOBAL 0 ( print )			      								    								  
218 LOAD_FAST 4 ( k )					      								    								  
220 LOAD_CONST 6 ( ' ' )				      								    								  
222 LOAD_FAST 3 ( i )					      								    								  
224 LOAD_CONST 1 ( 1 )					      								    								  
226 BINARY_ADD						      								    								  
228 CALL_FUNCTION 3					      								    								  
230 POP_TOP						      								    								  
232 JUMP_ABSOLUTE 196					      								    								  
>> 234 POP_BLOCK					      								    								  
>> 236 LOAD_CONST 0 ( None )				      								    								  
238 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	      EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	    EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING		  EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING
--							      --							    --								  --
Disassembly of <code object evaluateBoolExpr at 0x7f33e2653f6 def evaluateBoolExpr ( s ) :				    def evaluateBoolExpr ( s ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  for i in range ( 0 , n - 2 , 2 ) :			    	for i in range ( 0 , n - 2 , 2 ) :			  
4 CALL_FUNCTION 1					      	      if ( s [ i + 1 ] == "A" ) :			    	    if s [ i + 1 ] == 'A' :				  
6 STORE_FAST 1 ( n )					      		  if ( s [ i + 2 ] == "0" or s [ i ] == "0" ) :	    		if s [ i + 2 ] == '0' or s [ i ] == '0' :	  
							      		      s [ i + 2 ] = "0"				    		    s [ i + 2 ] = '0'				  
3 8 SETUP_LOOP 214 ( to 224 )				      		  else :					    		else :						  
10 LOAD_GLOBAL 1 ( range )				      		      s [ i + 2 ] = "1"				    		    s [ i + 2 ] = '1'				  
12 LOAD_CONST 1 ( 0 )					      	      elif ( s [ i + 1 ] == "B" ) :			    	    else :						  
14 LOAD_FAST 1 ( n )					      		  if ( s [ i + 2 ] == "1" or s [ i ] == "1" ) :	    		if s [ i + 1 ] == 'B' :				  
16 LOAD_CONST 2 ( 2 )					      		      s [ i + 2 ] = "1"				    		    if s [ i + 2 ] == '1' or s [ i ] == '1' :	  
18 BINARY_SUBTRACT					      		  else :					    			s [ i + 2 ] = '1'			  
20 LOAD_CONST 2 ( 2 )					      		      s [ i + 2 ] = "0"				    		    else :					  
22 CALL_FUNCTION 3					      	      else :						    			s [ i + 2 ] = '0'			  
24 GET_ITER						      		  if ( s [ i + 2 ] == s [ i ] ) :		    	    if s [ i ] == '0' or s [ i + 2 ] == '0' :		  
>> 26 FOR_ITER 194 ( to 222 )				      		      s [ i + 2 ] = "0"				    		s [ i + 2 ] = '0'				  
28 STORE_FAST 2 ( i )					      		  else :					    return s							  
							      		      s [ i + 2 ] = "1"				    								  
4 30 LOAD_FAST 0 ( s )					      	  return ord ( s [ n - 1 ] ) - ord ( "0" )		    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 4 ( 'A' )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( s )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 2 ( 2 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 5 ( '0' )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_TRUE 74					      								    								  
62 LOAD_FAST 0 ( s )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 5 ( '0' )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
6 >> 74 LOAD_CONST 5 ( '0' )				      								    								  
76 LOAD_FAST 0 ( s )					      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 LOAD_CONST 2 ( 2 )					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_SUBSCR						      								    								  
86 JUMP_ABSOLUTE 220					      								    								  
							      								    								  
8 >> 88 LOAD_CONST 6 ( '1' )				      								    								  
90 LOAD_FAST 0 ( s )					      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 LOAD_CONST 2 ( 2 )					      								    								  
96 BINARY_ADD						      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
9 >> 102 LOAD_FAST 0 ( s )				      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 LOAD_CONST 3 ( 1 )					      								    								  
108 BINARY_ADD						      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 7 ( 'B' )				      								    								  
114 COMPARE_OP 2 ( == )					      								    								  
116 POP_JUMP_IF_FALSE 174				      								    								  
							      								    								  
10 118 LOAD_FAST 0 ( s )				      								    								  
120 LOAD_FAST 2 ( i )					      								    								  
122 LOAD_CONST 2 ( 2 )					      								    								  
124 BINARY_ADD						      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_CONST 6 ( '1' )				      								    								  
130 COMPARE_OP 2 ( == )					      								    								  
132 POP_JUMP_IF_TRUE 146				      								    								  
134 LOAD_FAST 0 ( s )					      								    								  
136 LOAD_FAST 2 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_CONST 6 ( '1' )				      								    								  
142 COMPARE_OP 2 ( == )					      								    								  
144 POP_JUMP_IF_FALSE 160				      								    								  
							      								    								  
11 >> 146 LOAD_CONST 6 ( '1' )				      								    								  
148 LOAD_FAST 0 ( s )					      								    								  
150 LOAD_FAST 2 ( i )					      								    								  
152 LOAD_CONST 2 ( 2 )					      								    								  
154 BINARY_ADD						      								    								  
156 STORE_SUBSCR					      								    								  
158 JUMP_ABSOLUTE 220					      								    								  
							      								    								  
13 >> 160 LOAD_CONST 5 ( '0' )				      								    								  
162 LOAD_FAST 0 ( s )					      								    								  
164 LOAD_FAST 2 ( i )					      								    								  
166 LOAD_CONST 2 ( 2 )					      								    								  
168 BINARY_ADD						      								    								  
170 STORE_SUBSCR					      								    								  
172 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
15 >> 174 LOAD_FAST 0 ( s )				      								    								  
176 LOAD_FAST 2 ( i )					      								    								  
178 LOAD_CONST 2 ( 2 )					      								    								  
180 BINARY_ADD						      								    								  
182 BINARY_SUBSCR					      								    								  
184 LOAD_FAST 0 ( s )					      								    								  
186 LOAD_FAST 2 ( i )					      								    								  
188 BINARY_SUBSCR					      								    								  
190 COMPARE_OP 2 ( == )					      								    								  
192 POP_JUMP_IF_FALSE 208				      								    								  
							      								    								  
16 194 LOAD_CONST 5 ( '0' )				      								    								  
196 LOAD_FAST 0 ( s )					      								    								  
198 LOAD_FAST 2 ( i )					      								    								  
200 LOAD_CONST 2 ( 2 )					      								    								  
202 BINARY_ADD						      								    								  
204 STORE_SUBSCR					      								    								  
206 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
18 >> 208 LOAD_CONST 6 ( '1' )				      								    								  
210 LOAD_FAST 0 ( s )					      								    								  
212 LOAD_FAST 2 ( i )					      								    								  
214 LOAD_CONST 2 ( 2 )					      								    								  
216 BINARY_ADD						      								    								  
218 STORE_SUBSCR					      								    								  
>> 220 JUMP_ABSOLUTE 26					      								    								  
>> 222 POP_BLOCK					      								    								  
							      								    								  
19 >> 224 LOAD_GLOBAL 2 ( ord )				      								    								  
226 LOAD_FAST 0 ( s )					      								    								  
228 LOAD_FAST 1 ( n )					      								    								  
230 LOAD_CONST 3 ( 1 )					      								    								  
232 BINARY_SUBTRACT					      								    								  
234 BINARY_SUBSCR					      								    								  
236 CALL_FUNCTION 1					      								    								  
238 LOAD_GLOBAL 2 ( ord )				      								    								  
240 LOAD_CONST 5 ( '0' )				      								    								  
242 CALL_FUNCTION 1					      								    								  
244 BINARY_SUBTRACT					      								    								  
246 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			      MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			    MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY				  MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY
--							      --							    --								  --
Disassembly of <code object largestSumOfAverages at 0x7f33e26 def largestSumOfAverages ( A , K ) :			    def largestSumOfAverages ( A , K ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( A ) ;					    	n = len ( A )						  "/home/ubuntu/TransCoder/models/eval/mt_sa_1000/tx
2 LOAD_FAST 0 ( A )					      	  pre_sum = [ 0 ] * ( n + 1 ) ;				    	pre_sum = [ 0 ] * ( n + 1 )				  8nnsvsdt/eval_scripts/dis_sa-python_sa.valid/MAXIM
4 CALL_FUNCTION 1					      	  pre_sum [ 0 ] = 0 ;					    	pre_sum [ 0 ] = 0					  UM_AVERAGE_SUM_PARTITION_ARRAY.py", line 66, in <m
6 STORE_FAST 2 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  odule>     if abs(1 - (0.0000001 + abs(f_gold(*par
							      	      pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;	    	    pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ]		  ameters_set))) / (abs(f_filled(*parameters_set)) +
3 8 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * n ;					    	dp = [ 0 ] * n						   0.0000001)) < 0.001:	  File "/home/ubuntu/TransCo
10 BUILD_LIST 1						      	  sum = 0 ;						    	sum = 0							  der/models/eval/mt_sa_1000/tx8nnsvsdt/eval_scripts
12 LOAD_FAST 2 ( n )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  /dis_sa-python_sa.valid/MAXIMUM_AVERAGE_SUM_PARTIT
14 LOAD_CONST 2 ( 1 )					      	      dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n -  	    dp [ i ] = pre_sum [ n ] - pre_sum [ i ] / ( n - i )  ION_ARRAY.py", line 47, in f_filled	  dp [ i ] =
16 BINARY_ADD						      	  for k in range ( K - 1 ) :				    	for k in range ( K - 1 ) :				   sum [ i ] + A [ j ] / ( j - 1 ) TypeError: 'int'
18 BINARY_MULTIPLY					      	      for i in range ( n ) :				    	    for i in range ( n ) :				  object is not subscriptable
20 STORE_FAST 3 ( pre_sum )				      		  for j in range ( i + 1 , n ) :		    		for j in range ( n + 1 ) :			  
							      		      dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - 		    dp [ i ] = sum [ i ] + A [ j ] / ( j - 1 )	  
4 22 LOAD_CONST 1 ( 0 )					      	  return int ( dp [ 0 ] ) ;				    	return dp ( int ( dp ) )				  
24 LOAD_FAST 3 ( pre_sum )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 SETUP_LOOP 40 ( to 72 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 28 ( to 70 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 44 LOAD_FAST 3 ( pre_sum )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( A )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 3 ( pre_sum )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 40					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_CONST 1 ( 0 )				      								    								  
74 BUILD_LIST 1						      								    								  
76 LOAD_FAST 2 ( n )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 STORE_FAST 5 ( dp )					      								    								  
							      								    								  
8 82 LOAD_CONST 1 ( 0 )					      								    								  
84 STORE_FAST 6 ( sum )					      								    								  
							      								    								  
9 86 SETUP_LOOP 44 ( to 132 )				      								    								  
88 LOAD_GLOBAL 1 ( range )				      								    								  
90 LOAD_FAST 2 ( n )					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 32 ( to 130 )				      								    								  
98 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 100 LOAD_FAST 3 ( pre_sum )				      								    								  
102 LOAD_FAST 2 ( n )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 3 ( pre_sum )				      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 LOAD_FAST 2 ( n )					      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_TRUE_DIVIDE					      								    								  
122 LOAD_FAST 5 ( dp )					      								    								  
124 LOAD_FAST 4 ( i )					      								    								  
126 STORE_SUBSCR					      								    								  
128 JUMP_ABSOLUTE 96					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
11 >> 132 SETUP_LOOP 108 ( to 242 )			      								    								  
134 LOAD_GLOBAL 1 ( range )				      								    								  
136 LOAD_FAST 1 ( K )					      								    								  
138 LOAD_CONST 2 ( 1 )					      								    								  
140 BINARY_SUBTRACT					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 GET_ITER						      								    								  
>> 146 FOR_ITER 92 ( to 240 )				      								    								  
148 STORE_FAST 7 ( k )					      								    								  
							      								    								  
12 150 SETUP_LOOP 86 ( to 238 )				      								    								  
152 LOAD_GLOBAL 1 ( range )				      								    								  
154 LOAD_FAST 2 ( n )					      								    								  
156 CALL_FUNCTION 1					      								    								  
158 GET_ITER						      								    								  
>> 160 FOR_ITER 74 ( to 236 )				      								    								  
162 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 164 SETUP_LOOP 68 ( to 234 )				      								    								  
166 LOAD_GLOBAL 1 ( range )				      								    								  
168 LOAD_FAST 4 ( i )					      								    								  
170 LOAD_CONST 2 ( 1 )					      								    								  
172 BINARY_ADD						      								    								  
174 LOAD_FAST 2 ( n )					      								    								  
176 CALL_FUNCTION 2					      								    								  
178 GET_ITER						      								    								  
>> 180 FOR_ITER 50 ( to 232 )				      								    								  
182 STORE_FAST 8 ( j )					      								    								  
							      								    								  
14 184 LOAD_GLOBAL 2 ( max )				      								    								  
186 LOAD_FAST 5 ( dp )					      								    								  
188 LOAD_FAST 4 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_FAST 3 ( pre_sum )				      								    								  
194 LOAD_FAST 8 ( j )					      								    								  
196 BINARY_SUBSCR					      								    								  
198 LOAD_FAST 3 ( pre_sum )				      								    								  
200 LOAD_FAST 4 ( i )					      								    								  
202 BINARY_SUBSCR					      								    								  
204 BINARY_SUBTRACT					      								    								  
206 LOAD_FAST 8 ( j )					      								    								  
208 LOAD_FAST 4 ( i )					      								    								  
210 BINARY_SUBTRACT					      								    								  
212 BINARY_TRUE_DIVIDE					      								    								  
214 LOAD_FAST 5 ( dp )					      								    								  
216 LOAD_FAST 8 ( j )					      								    								  
218 BINARY_SUBSCR					      								    								  
220 BINARY_ADD						      								    								  
222 CALL_FUNCTION 2					      								    								  
224 LOAD_FAST 5 ( dp )					      								    								  
226 LOAD_FAST 4 ( i )					      								    								  
228 STORE_SUBSCR					      								    								  
230 JUMP_ABSOLUTE 180					      								    								  
>> 232 POP_BLOCK					      								    								  
>> 234 JUMP_ABSOLUTE 160				      								    								  
>> 236 POP_BLOCK					      								    								  
>> 238 JUMP_ABSOLUTE 146				      								    								  
>> 240 POP_BLOCK					      								    								  
							      								    								  
15 >> 242 LOAD_GLOBAL 3 ( int )				      								    								  
244 LOAD_FAST 5 ( dp )					      								    								  
246 LOAD_CONST 1 ( 0 )					      								    								  
248 BINARY_SUBSCR					      								    								  
250 CALL_FUNCTION 1					      								    								  
252 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY      COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY	    COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY	  COUNT_SUB<unk> YS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY
--							      --							    --								  --
Disassembly of <code object countDistictSubarray at 0x7f33e26 def countDistictSubarray ( arr , n ) :			    def countDistictSubarray ( arr , n ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  vis = dict ( )					    	vis = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( vis )					      	      vis [ arr [ i ] ] = 1				    	    vis [ arr [ i ] ] = 1				  
							      	  k = len ( vis )					    	k = len ( vis )						  
3 6 SETUP_LOOP 28 ( to 36 )				      	  vid = dict ( )					    	vid = dict ( )						  
8 LOAD_GLOBAL 1 ( range )				      	  ans = 0						    	ans = 0							  
10 LOAD_FAST 1 ( n )					      	  right = 0						    	ans = 0							  
12 CALL_FUNCTION 1					      	  window = 0						    	right = 0						  
14 GET_ITER						      	  for left in range ( n ) :				    	window = 0						  
>> 16 FOR_ITER 16 ( to 34 )				      	      while ( right < n and window < k ) :		    	for left in range ( n ) :				  
18 STORE_FAST 3 ( i )					      		  if arr [ right ] in vid.keys ( ) :		    	    while right < n and window < k :			  
							      		      vid [ arr [ right ] ] += 1		    		if arr [ right ] in vid.keys ( ) :		  
4 20 LOAD_CONST 1 ( 1 )					      		  else :					    		    vid [ arr [ right ] ] += 1			  
22 LOAD_FAST 2 ( vis )					      		      vid [ arr [ right ] ] = 1			    		else :						  
24 LOAD_FAST 0 ( arr )					      		  if ( vid [ arr [ right ] ] == 1 ) :		    		    vid [ arr [ right ] ] = 1			  
26 LOAD_FAST 3 ( i )					      		      window += 1				    		if vid [ arr [ right ] ] == 1 :			  
28 BINARY_SUBSCR					      		  right += 1					    		    window += 1					  
30 STORE_SUBSCR						      	      if ( window == k ) :				    	    if window == 0 :					  
32 JUMP_ABSOLUTE 16					      		  ans += ( n - right + 1 )			    		ans += 1					  
>> 34 POP_BLOCK						      	      vid [ arr [ left ] ] -= 1				    	if ans == 0 :						  
							      	      if ( vid [ arr [ left ] ] == 0 ) :		    	    ans += 1						  
5 >> 36 LOAD_GLOBAL 2 ( len )				      		  window -= 1					    	return ans						  
38 LOAD_FAST 2 ( vis )					      	  return ans						    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 4 ( k )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 0 ( dict )				      								    								  
46 CALL_FUNCTION 0					      								    								  
48 STORE_FAST 5 ( vid )					      								    								  
							      								    								  
7 50 LOAD_CONST 2 ( 0 )					      								    								  
52 STORE_FAST 6 ( ans )					      								    								  
							      								    								  
8 54 LOAD_CONST 2 ( 0 )					      								    								  
56 STORE_FAST 7 ( right )				      								    								  
							      								    								  
9 58 LOAD_CONST 2 ( 0 )					      								    								  
60 STORE_FAST 8 ( window )				      								    								  
							      								    								  
10 62 SETUP_LOOP 188 ( to 252 )				      								    								  
64 LOAD_GLOBAL 1 ( range )				      								    								  
66 LOAD_FAST 1 ( n )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 176 ( to 250 )				      								    								  
74 STORE_FAST 9 ( left )				      								    								  
							      								    								  
11 76 SETUP_LOOP 102 ( to 180 )				      								    								  
>> 78 LOAD_FAST 7 ( right )				      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 178				      								    								  
86 LOAD_FAST 8 ( window )				      								    								  
88 LOAD_FAST 4 ( k )					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 178				      								    								  
							      								    								  
12 94 LOAD_FAST 0 ( arr )				      								    								  
96 LOAD_FAST 7 ( right )				      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 5 ( vid )					      								    								  
102 LOAD_METHOD 3 ( keys )				      								    								  
104 CALL_METHOD 0					      								    								  
106 COMPARE_OP 6 ( in )					      								    								  
108 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
13 110 LOAD_FAST 5 ( vid )				      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 7 ( right )				      								    								  
116 BINARY_SUBSCR					      								    								  
118 DUP_TOP_TWO						      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_CONST 1 ( 1 )					      								    								  
124 INPLACE_ADD						      								    								  
126 ROT_THREE						      								    								  
128 STORE_SUBSCR					      								    								  
130 JUMP_FORWARD 12 ( to 144 )				      								    								  
							      								    								  
15 >> 132 LOAD_CONST 1 ( 1 )				      								    								  
134 LOAD_FAST 5 ( vid )					      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 7 ( right )				      								    								  
140 BINARY_SUBSCR					      								    								  
142 STORE_SUBSCR					      								    								  
							      								    								  
16 >> 144 LOAD_FAST 5 ( vid )				      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 7 ( right )				      								    								  
150 BINARY_SUBSCR					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_CONST 1 ( 1 )					      								    								  
156 COMPARE_OP 2 ( == )					      								    								  
158 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
17 160 LOAD_FAST 8 ( window )				      								    								  
162 LOAD_CONST 1 ( 1 )					      								    								  
164 INPLACE_ADD						      								    								  
166 STORE_FAST 8 ( window )				      								    								  
							      								    								  
18 >> 168 LOAD_FAST 7 ( right )				      								    								  
170 LOAD_CONST 1 ( 1 )					      								    								  
172 INPLACE_ADD						      								    								  
174 STORE_FAST 7 ( right )				      								    								  
176 JUMP_ABSOLUTE 78					      								    								  
>> 178 POP_BLOCK					      								    								  
							      								    								  
19 >> 180 LOAD_FAST 8 ( window )			      								    								  
182 LOAD_FAST 4 ( k )					      								    								  
184 COMPARE_OP 2 ( == )					      								    								  
186 POP_JUMP_IF_FALSE 204				      								    								  
							      								    								  
20 188 LOAD_FAST 6 ( ans )				      								    								  
190 LOAD_FAST 1 ( n )					      								    								  
192 LOAD_FAST 7 ( right )				      								    								  
194 BINARY_SUBTRACT					      								    								  
196 LOAD_CONST 1 ( 1 )					      								    								  
198 BINARY_ADD						      								    								  
200 INPLACE_ADD						      								    								  
202 STORE_FAST 6 ( ans )				      								    								  
							      								    								  
21 >> 204 LOAD_FAST 5 ( vid )				      								    								  
206 LOAD_FAST 0 ( arr )					      								    								  
208 LOAD_FAST 9 ( left )				      								    								  
210 BINARY_SUBSCR					      								    								  
212 DUP_TOP_TWO						      								    								  
214 BINARY_SUBSCR					      								    								  
216 LOAD_CONST 1 ( 1 )					      								    								  
218 INPLACE_SUBTRACT					      								    								  
220 ROT_THREE						      								    								  
222 STORE_SUBSCR					      								    								  
							      								    								  
22 224 LOAD_FAST 5 ( vid )				      								    								  
226 LOAD_FAST 0 ( arr )					      								    								  
228 LOAD_FAST 9 ( left )				      								    								  
230 BINARY_SUBSCR					      								    								  
232 BINARY_SUBSCR					      								    								  
234 LOAD_CONST 2 ( 0 )					      								    								  
236 COMPARE_OP 2 ( == )					      								    								  
238 POP_JUMP_IF_FALSE 72				      								    								  
							      								    								  
23 240 LOAD_FAST 8 ( window )				      								    								  
242 LOAD_CONST 1 ( 1 )					      								    								  
244 INPLACE_SUBTRACT					      								    								  
246 STORE_FAST 8 ( window )				      								    								  
248 JUMP_ABSOLUTE 72					      								    								  
>> 250 POP_BLOCK					      								    								  
							      								    								  
24 >> 252 LOAD_FAST 6 ( ans )				      								    								  
254 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PR<unk> CT_SUBSET_ARRAY				      MINIMUM_PR<unk> CT_SUBSET_ARRAY				    MINIMUM_PR<unk> CT_SUBSET_ARRAY				  MINIMUM_PR<unk> CT_SUBSET_ARRAY
--							      --							    --								  --
Disassembly of <code object minProductSubset at 0x7f33e2644f6 def minProductSubset ( a , n ) :				    def minProductSubset ( a , n ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return a [ 0 ]					    	    return a [ 0 ]					  
4 COMPARE_OP 2 ( == )					      	  max_neg = float ( '-inf' )				    	max_neg = float ( "-inf" )				  
6 POP_JUMP_IF_FALSE 16					      	  min_pos = float ( 'inf' )				    	min_pos = float ( "inf" )				  
							      	  count_neg = 0						    	count_neg = 0						  
3 8 LOAD_FAST 0 ( a )					      	  count_zero = 0					    	count_zero = 0						  
10 LOAD_CONST 2 ( 0 )					      	  prod = 1						    	prod = 1						  
12 BINARY_SUBSCR					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
14 RETURN_VALUE						      	      if ( a [ i ] == 0 ) :				    	    if a [ i ] == 0 :					  
							      		  count_zero = count_zero + 1			    		count_zero = count_zero + 1			  
4 >> 16 LOAD_GLOBAL 0 ( float )				      		  continue					    		continue					  
18 LOAD_CONST 3 ( '-inf' )				      	      if ( a [ i ] < 0 ) :				    	    if a [ i ] < 0 :					  
20 CALL_FUNCTION 1					      		  count_neg = count_neg + 1			    		count_neg = count_neg + 1			  
22 STORE_FAST 2 ( max_neg )				      		  max_neg = max ( max_neg , a [ i ] )		    		max_neg = max ( max_neg , a [ i ] )		  
							      	      if ( a [ i ] > 0 ) :				    	    if a [ i ] > 0 :					  
5 24 LOAD_GLOBAL 0 ( float )				      		  min_pos = min ( min_pos , a [ i ] )		    		min_pos = min ( min_pos , a [ i ] )		  
26 LOAD_CONST 4 ( 'inf' )				      	      prod = prod * a [ i ]				    	    prod = prod [ a [ i ] ]				  
28 CALL_FUNCTION 1					      	  if ( count_zero == n or ( count_neg == 0 and count_zero > 	if count_neg == count_zero or count_neg == 0 :		  
30 STORE_FAST 3 ( min_pos )				      	      return 0 ;					    	    if neg == 0 :					  
							      	  if ( count_neg == 0 ) :				    		return max ( neg )				  
6 32 LOAD_CONST 2 ( 0 )					      	      return min_pos					    	    if neg == 1 :					  
34 STORE_FAST 4 ( count_neg )				      	  if ( ( count_neg & 1 ) == 0 and count_neg != 0 ) :	    		return max ( neg )				  
							      	      prod = int ( prod / max_neg )			    	    if neg == 1 :					  
7 36 LOAD_CONST 2 ( 0 )					      	  return prod ;						    		return max ( neg )				  
38 STORE_FAST 5 ( count_zero )				      								    	    if neg != 0 :					  
							      								    		return max ( neg )				  
8 40 LOAD_CONST 1 ( 1 )					      								    	    if neg == 0 :					  
42 STORE_FAST 6 ( prod )				      								    		return None					  
							      								    	    return None						  
9 44 SETUP_LOOP 112 ( to 158 )				      								    								  
46 LOAD_GLOBAL 1 ( range )				      								    								  
48 LOAD_CONST 2 ( 0 )					      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 98 ( to 156 )				      								    								  
58 STORE_FAST 7 ( i )					      								    								  
							      								    								  
10 60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 7 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_CONST 2 ( 0 )					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
11 72 LOAD_FAST 5 ( count_zero )			      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 5 ( count_zero )				      								    								  
							      								    								  
12 80 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
13 >> 82 LOAD_FAST 0 ( a )				      								    								  
84 LOAD_FAST 7 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( 0 )					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
14 94 LOAD_FAST 4 ( count_neg )				      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 STORE_FAST 4 ( count_neg )				      								    								  
							      								    								  
15 102 LOAD_GLOBAL 2 ( max )				      								    								  
104 LOAD_FAST 2 ( max_neg )				      								    								  
106 LOAD_FAST 0 ( a )					      								    								  
108 LOAD_FAST 7 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 STORE_FAST 2 ( max_neg )				      								    								  
							      								    								  
16 >> 116 LOAD_FAST 0 ( a )				      								    								  
118 LOAD_FAST 7 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_CONST 2 ( 0 )					      								    								  
124 COMPARE_OP 4 ( > )					      								    								  
126 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
17 128 LOAD_GLOBAL 3 ( min )				      								    								  
130 LOAD_FAST 3 ( min_pos )				      								    								  
132 LOAD_FAST 0 ( a )					      								    								  
134 LOAD_FAST 7 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 STORE_FAST 3 ( min_pos )				      								    								  
							      								    								  
18 >> 142 LOAD_FAST 6 ( prod )				      								    								  
144 LOAD_FAST 0 ( a )					      								    								  
146 LOAD_FAST 7 ( i )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 BINARY_MULTIPLY					      								    								  
152 STORE_FAST 6 ( prod )				      								    								  
154 JUMP_ABSOLUTE 56					      								    								  
>> 156 POP_BLOCK					      								    								  
							      								    								  
19 >> 158 LOAD_FAST 5 ( count_zero )			      								    								  
160 LOAD_FAST 1 ( n )					      								    								  
162 COMPARE_OP 2 ( == )					      								    								  
164 POP_JUMP_IF_TRUE 182				      								    								  
166 LOAD_FAST 4 ( count_neg )				      								    								  
168 LOAD_CONST 2 ( 0 )					      								    								  
170 COMPARE_OP 2 ( == )					      								    								  
172 POP_JUMP_IF_FALSE 186				      								    								  
174 LOAD_FAST 5 ( count_zero )				      								    								  
176 LOAD_CONST 2 ( 0 )					      								    								  
178 COMPARE_OP 4 ( > )					      								    								  
180 POP_JUMP_IF_FALSE 186				      								    								  
							      								    								  
20 >> 182 LOAD_CONST 2 ( 0 )				      								    								  
184 RETURN_VALUE					      								    								  
							      								    								  
21 >> 186 LOAD_FAST 4 ( count_neg )			      								    								  
188 LOAD_CONST 2 ( 0 )					      								    								  
190 COMPARE_OP 2 ( == )					      								    								  
192 POP_JUMP_IF_FALSE 198				      								    								  
							      								    								  
22 194 LOAD_FAST 3 ( min_pos )				      								    								  
196 RETURN_VALUE					      								    								  
							      								    								  
23 >> 198 LOAD_FAST 4 ( count_neg )			      								    								  
200 LOAD_CONST 1 ( 1 )					      								    								  
202 BINARY_AND						      								    								  
204 LOAD_CONST 2 ( 0 )					      								    								  
206 COMPARE_OP 2 ( == )					      								    								  
208 POP_JUMP_IF_FALSE 230				      								    								  
210 LOAD_FAST 4 ( count_neg )				      								    								  
212 LOAD_CONST 2 ( 0 )					      								    								  
214 COMPARE_OP 3 ( != )					      								    								  
216 POP_JUMP_IF_FALSE 230				      								    								  
							      								    								  
24 218 LOAD_GLOBAL 4 ( int )				      								    								  
220 LOAD_FAST 6 ( prod )				      								    								  
222 LOAD_FAST 2 ( max_neg )				      								    								  
224 BINARY_TRUE_DIVIDE					      								    								  
226 CALL_FUNCTION 1					      								    								  
228 STORE_FAST 6 ( prod )				      								    								  
							      								    								  
25 >> 230 LOAD_FAST 6 ( prod )				      								    								  
232 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
Disassembly of <code object worstFit at 0x7f33e2649150, file  def worstFit ( blockSize , m , processSize , n ) :	    def worstFit ( blockSize , m , processSize , n ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1 )				      	  allocation = [ - 1 ] * n				    	allocation = [ - 1 ] * n				  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.valid/PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAG
4 LOAD_FAST 3 ( n )					      	      wstIdx = - 1					    	    wstIdx = - 1					  EMENT.py", line 55	 print ( " SPACETOKEN SPACET
6 BINARY_MULTIPLY					      	      for j in range ( m ) :				    	    for j in range ( m ) :				  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
8 STORE_FAST 4 ( allocation )				      		  if blockSize [ j ] >= processSize [ i ] :	    		if blockSize [ j ] >= processSize [ i ] :	  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      		      if wstIdx == - 1 :			    		    if wstIdx == - 1 :				  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
3 10 SETUP_LOOP 124 ( to 136 )				      			  wstIdx = j				    			wstIdx = j				  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
12 LOAD_GLOBAL 0 ( range )				      		      elif blockSize [ wstIdx ] < blockSize [ j ] : 		else :						  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
14 LOAD_FAST 3 ( n )					      			  wstIdx = j				    		    if blockSize [ wstIdx ] < blockSize [ j ] :	  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
16 CALL_FUNCTION 1					      	      if wstIdx != - 1 :				    			wstIdx = j				  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
18 GET_ITER						      		  allocation [ i ] = wstIdx			    	    if wstIdx != - 1 :					  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
>> 20 FOR_ITER 112 ( to 134 )				      		  blockSize [ wstIdx ] -= processSize [ i ]	    		alstIdx [ alstIdx ] = wstIdx			   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
22 STORE_FAST 5 ( i )					      	  print ( "Process No.Process Size Block no." )		    		blockSize [ wstIdx ] -= processSize [ i ]	  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      	  for i in range ( n ) :				    	print ( "Process No.Process Size Block no." )		  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
4 24 LOAD_CONST 1 ( - 1 )				      	      print ( i + 1 , "		" , processSize [ i ] , end 	for i in range ( n ) :					  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
26 STORE_FAST 6 ( wstIdx )				      	      if allocation [ i ] != - 1 :			    	    print ( " SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      		  print ( allocation [ i ] + 1 )		    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
5 28 SETUP_LOOP 66 ( to 96 )				      	      else :						    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
30 LOAD_GLOBAL 0 ( range )				      		  print ( "Not Allocated" )			    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
32 LOAD_FAST 1 ( m )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
34 CALL_FUNCTION 1					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
36 GET_ITER						      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
>> 38 FOR_ITER 54 ( to 94 )				      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
40 STORE_FAST 7 ( j )					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
6 42 LOAD_FAST 0 ( blockSize )				      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
44 LOAD_FAST 7 ( j )					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
46 BINARY_SUBSCR					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
48 LOAD_FAST 2 ( processSize )				      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
50 LOAD_FAST 5 ( i )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
52 BINARY_SUBSCR					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
54 COMPARE_OP 5 ( >= )					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
56 POP_JUMP_IF_FALSE 38					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
7 58 LOAD_FAST 6 ( wstIdx )				      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
60 LOAD_CONST 1 ( - 1 )					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
62 COMPARE_OP 2 ( == )					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
64 POP_JUMP_IF_FALSE 72					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
8 66 LOAD_FAST 7 ( j )					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
68 STORE_FAST 6 ( wstIdx )				      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
70 JUMP_ABSOLUTE 38					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
9 >> 72 LOAD_FAST 0 ( blockSize )			      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
74 LOAD_FAST 6 ( wstIdx )				      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
76 BINARY_SUBSCR					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
78 LOAD_FAST 0 ( blockSize )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
80 LOAD_FAST 7 ( j )					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
82 BINARY_SUBSCR					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
84 COMPARE_OP 0 ( < )					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
86 POP_JUMP_IF_FALSE 38					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
							      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
10 88 LOAD_FAST 7 ( j )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
90 STORE_FAST 6 ( wstIdx )				      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
92 JUMP_ABSOLUTE 38					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
>> 94 POP_BLOCK						      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
							      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
11 >> 96 LOAD_FAST 6 ( wstIdx )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
98 LOAD_CONST 1 ( - 1 )					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
100 COMPARE_OP 3 ( != )					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
102 POP_JUMP_IF_FALSE 20				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
12 104 LOAD_FAST 6 ( wstIdx )				      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
106 LOAD_FAST 4 ( allocation )				      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
108 LOAD_FAST 5 ( i )					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
110 STORE_SUBSCR					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
13 112 LOAD_FAST 0 ( blockSize )			      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
114 LOAD_FAST 6 ( wstIdx )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
116 DUP_TOP_TWO						      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
118 BINARY_SUBSCR					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
120 LOAD_FAST 2 ( processSize )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
122 LOAD_FAST 5 ( i )					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
124 BINARY_SUBSCR					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
126 INPLACE_SUBTRACT					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
128 ROT_THREE						      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
130 STORE_SUBSCR					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
132 JUMP_ABSOLUTE 20					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
>> 134 POP_BLOCK					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
14 >> 136 LOAD_GLOBAL 1 ( print )			      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
138 LOAD_CONST 2 ( 'Process No.Process Size Block no.' )      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
140 CALL_FUNCTION 1					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
142 POP_TOP						      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
							      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
15 144 SETUP_LOOP 78 ( to 224 )				      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
146 LOAD_GLOBAL 0 ( range )				      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
148 LOAD_FAST 3 ( n )					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
150 CALL_FUNCTION 1					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
152 GET_ITER						      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
>> 154 FOR_ITER 66 ( to 222 )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
156 STORE_FAST 5 ( i )					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
16 158 LOAD_GLOBAL 1 ( print )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
160 LOAD_FAST 5 ( i )					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
162 LOAD_CONST 3 ( 1 )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
164 BINARY_ADD						      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
166 LOAD_CONST 4 ( '	     ' )			      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
168 LOAD_FAST 2 ( processSize )				      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
170 LOAD_FAST 5 ( i )					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
172 BINARY_SUBSCR					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
174 LOAD_CONST 5 ( '	 ' )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
176 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
178 CALL_FUNCTION_KW 4					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
180 POP_TOP						      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
17 182 LOAD_FAST 4 ( allocation )			      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
184 LOAD_FAST 5 ( i )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
186 BINARY_SUBSCR					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
188 LOAD_CONST 1 ( - 1 )				      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
190 COMPARE_OP 3 ( != )					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
192 POP_JUMP_IF_FALSE 212				      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
18 194 LOAD_GLOBAL 1 ( print )				      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
196 LOAD_FAST 4 ( allocation )				      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
198 LOAD_FAST 5 ( i )					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
200 BINARY_SUBSCR					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
202 LOAD_CONST 3 ( 1 )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
204 BINARY_ADD						      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
206 CALL_FUNCTION 1					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
208 POP_TOP						      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
210 JUMP_ABSOLUTE 154					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
							      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
20 >> 212 LOAD_GLOBAL 1 ( print )			      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
214 LOAD_CONST 7 ( 'Not Allocated' )			      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
216 CALL_FUNCTION 1					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
218 POP_TOP						      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
220 JUMP_ABSOLUTE 154					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
>> 222 POP_BLOCK					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
>> 224 LOAD_CONST 0 ( None )				      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
226 RETURN_VALUE NEW_LINE				      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
							      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
							      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
							      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
							      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
							      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
							      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
							      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
							      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
							      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
							      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
							      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
							      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
							      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
							      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
							      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
							      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
							      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
							      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  					     ^ Synta
							      								    								  xError: EOL while scanning string literal
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE     REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE	    REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE	  REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE
--							      --							    --								  --
Disassembly of <code object perfectSquare at 0x7f33e26499c0,  def perfectSquare ( s ) :					    def perfectSquare ( s ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  ans = - 1						    	ans = - 1						  
4 CALL_FUNCTION 1					      	  num = ""						    	num = ''						  
6 STORE_FAST 1 ( n )					      	  for i in range ( 1 , ( 1 << n ) ) :			    	for i in range ( 1 , ( 1 << n ) ) :			  
							      	      str = ""						    	    str = ''						  
3 8 LOAD_CONST 1 ( - 1 )				      	      for j in range ( 0 , n ) :			    	    for j in range ( 0 , n ) :				  
10 STORE_FAST 2 ( ans )					      		  if ( ( i >> j ) & 1 ) :			    		if i & j - 1 :					  
							      		      str = str + s [ j ]			    		    str = str + s [ j ]				  
4 12 LOAD_CONST 2 ( '' )				      	      if ( str [ 0 ] != '0' ) :				    	    if str [ 0 ] != '0' :				  
14 STORE_FAST 3 ( num )					      		  temp = 0 ;					    		temp = 0					  
							      		  for j in range ( 0 , len ( str ) ) :		    		for j in range ( 0 , len ( str ) ) :		  
5 16 SETUP_LOOP 188 ( to 206 )				      		      temp = ( temp * 10 + ( ord ( str [ j ] ) - or 		    temp = temp * 10 + ord ( str [ j ] ) - ord (  
18 LOAD_GLOBAL 1 ( range )				      		  k = int ( math.sqrt ( temp ) )		    	    k = int + math.sqrt ( temp )			  
20 LOAD_CONST 3 ( 1 )					      		  if ( k * k == temp ) :			    	    if k == 0 and ans < 0 :				  
22 LOAD_CONST 3 ( 1 )					      		      if ( ans < len ( str ) ) :		    		ans = str + s [ 0 ]				  
24 LOAD_FAST 1 ( n )					      			  ans = len ( str )			    	if num == 1 :						  
26 BINARY_LSHIFT					      			  num = str				    	    ans = 0						  
28 CALL_FUNCTION 2					      	  if ( ans == - 1 ) :					    	return ans						  
30 GET_ITER						      	      return ans					    								  
>> 32 FOR_ITER 170 ( to 204 )				      	  else :						    								  
34 STORE_FAST 4 ( i )					      	      print ( "{} ".format ( num ) , end = "" )		    								  
							      	      return n - ans					    								  
6 36 LOAD_CONST 2 ( '' )				      								    								  
38 STORE_FAST 5 ( str )					      								    								  
							      								    								  
7 40 SETUP_LOOP 42 ( to 84 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_CONST 4 ( 0 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 28 ( to 82 )				      								    								  
54 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 56 LOAD_FAST 4 ( i )					      								    								  
58 LOAD_FAST 6 ( j )					      								    								  
60 BINARY_RSHIFT					      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 BINARY_AND						      								    								  
66 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
9 68 LOAD_FAST 5 ( str )				      								    								  
70 LOAD_FAST 0 ( s )					      								    								  
72 LOAD_FAST 6 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 5 ( str )					      								    								  
80 JUMP_ABSOLUTE 52					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 5 ( str )				      								    								  
86 LOAD_CONST 4 ( 0 )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 5 ( '0' )					      								    								  
92 COMPARE_OP 3 ( != )					      								    								  
94 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
11 96 LOAD_CONST 4 ( 0 )				      								    								  
98 STORE_FAST 7 ( temp )				      								    								  
							      								    								  
12 100 SETUP_LOOP 50 ( to 152 )				      								    								  
102 LOAD_GLOBAL 1 ( range )				      								    								  
104 LOAD_CONST 4 ( 0 )					      								    								  
106 LOAD_GLOBAL 0 ( len )				      								    								  
108 LOAD_FAST 5 ( str )					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 GET_ITER						      								    								  
>> 116 FOR_ITER 32 ( to 150 )				      								    								  
118 STORE_FAST 6 ( j )					      								    								  
							      								    								  
13 120 LOAD_FAST 7 ( temp )				      								    								  
122 LOAD_CONST 6 ( 10 )					      								    								  
124 BINARY_MULTIPLY					      								    								  
126 LOAD_GLOBAL 2 ( ord )				      								    								  
128 LOAD_FAST 5 ( str )					      								    								  
130 LOAD_FAST 6 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 LOAD_GLOBAL 2 ( ord )				      								    								  
138 LOAD_CONST 5 ( '0' )				      								    								  
140 CALL_FUNCTION 1					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 BINARY_ADD						      								    								  
146 STORE_FAST 7 ( temp )				      								    								  
148 JUMP_ABSOLUTE 116					      								    								  
>> 150 POP_BLOCK					      								    								  
							      								    								  
14 >> 152 LOAD_GLOBAL 3 ( int )				      								    								  
154 LOAD_GLOBAL 4 ( math )				      								    								  
156 LOAD_METHOD 5 ( sqrt )				      								    								  
158 LOAD_FAST 7 ( temp )				      								    								  
160 CALL_METHOD 1					      								    								  
162 CALL_FUNCTION 1					      								    								  
164 STORE_FAST 8 ( k )					      								    								  
							      								    								  
15 166 LOAD_FAST 8 ( k )				      								    								  
168 LOAD_FAST 8 ( k )					      								    								  
170 BINARY_MULTIPLY					      								    								  
172 LOAD_FAST 7 ( temp )				      								    								  
174 COMPARE_OP 2 ( == )					      								    								  
176 POP_JUMP_IF_FALSE 32				      								    								  
							      								    								  
16 178 LOAD_FAST 2 ( ans )				      								    								  
180 LOAD_GLOBAL 0 ( len )				      								    								  
182 LOAD_FAST 5 ( str )					      								    								  
184 CALL_FUNCTION 1					      								    								  
186 COMPARE_OP 0 ( < )					      								    								  
188 POP_JUMP_IF_FALSE 32				      								    								  
							      								    								  
17 190 LOAD_GLOBAL 0 ( len )				      								    								  
192 LOAD_FAST 5 ( str )					      								    								  
194 CALL_FUNCTION 1					      								    								  
196 STORE_FAST 2 ( ans )				      								    								  
							      								    								  
18 198 LOAD_FAST 5 ( str )				      								    								  
200 STORE_FAST 3 ( num )				      								    								  
202 JUMP_ABSOLUTE 32					      								    								  
>> 204 POP_BLOCK					      								    								  
							      								    								  
19 >> 206 LOAD_FAST 2 ( ans )				      								    								  
208 LOAD_CONST 1 ( - 1 )				      								    								  
210 COMPARE_OP 2 ( == )					      								    								  
212 POP_JUMP_IF_FALSE 218				      								    								  
							      								    								  
20 214 LOAD_FAST 2 ( ans )				      								    								  
216 RETURN_VALUE					      								    								  
							      								    								  
22 >> 218 LOAD_GLOBAL 6 ( print )			      								    								  
220 LOAD_CONST 7 ( '{} ' )				      								    								  
222 LOAD_METHOD 7 ( format )				      								    								  
224 LOAD_FAST 3 ( num )					      								    								  
226 CALL_METHOD 1					      								    								  
228 LOAD_CONST 2 ( '' )					      								    								  
230 LOAD_CONST 8 ( ( 'end' , ) )			      								    								  
232 CALL_FUNCTION_KW 2					      								    								  
234 POP_TOP						      								    								  
							      								    								  
23 236 LOAD_FAST 1 ( n )				      								    								  
238 LOAD_FAST 2 ( ans )					      								    								  
240 BINARY_SUBTRACT					      								    								  
242 RETURN_VALUE					      								    								  
244 LOAD_CONST 0 ( None )				      								    								  
246 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_ENDLESS_POINTS				      FIND_NUMBER_ENDLESS_POINTS				    FIND_NUMBER_ENDLESS_POINTS					  FIND_NUMBER_ENDLESS_POINTS
--							      --							    --								  --
Disassembly of <code object countEndless at 0x7f33e2649150, f def countEndless ( input_mat , n ) :			    def countEndless ( input_mat , n ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( np )				      	  row = np.zeros ( ( n , n ) )				    	row = np.zeros ( ( n , n ) )				  
2 LOAD_METHOD 1 ( zeros )				      	  col = np.zeros ( ( n , n ) )				    	col = np.zeros ( ( n , n ) )				  
4 LOAD_FAST 1 ( n )					      	  for j in range ( n ) :				    	for j in range ( n ) :					  
6 LOAD_FAST 1 ( n )					      	      isEndless = 1					    	    isEndless = 1					  
8 BUILD_TUPLE 2						      	      for i in range ( n - 1 , - 1 , - 1 ) :		    	    for i in range ( n - 1 , - 1 , - 1 ) :		  
10 CALL_METHOD 1					      		  if ( input_mat [ i ] [ j ] == 0 ) :		    		if input_mat [ i ] [ j ] == 0 :			  
12 STORE_FAST 2 ( row )					      		      isEndless = 0				    		    isEndless = 0				  
							      		  col [ i ] [ j ] = isEndless			    		col [ i ] [ j ] = isEndless			  
3 14 LOAD_GLOBAL 0 ( np )				      	  for i in range ( n ) :				    for i in range ( n ) :					  
16 LOAD_METHOD 1 ( zeros )				      	      isEndless = 1					    	isEndless = 1						  
18 LOAD_FAST 1 ( n )					      	      for j in range ( n - 1 , - 1 , - 1 ) :		    	for j in range ( n - 1 , - 1 , - 1 ) :			  
20 LOAD_FAST 1 ( n )					      		  if ( input_mat [ i ] [ j ] == 0 ) :		    	    if input_mat [ i ] [ j ] == 0 :			  
22 BUILD_TUPLE 2					      		      isEndless = 0				    		isEndless = 0					  
24 CALL_METHOD 1					      		  row [ i ] [ j ] = isEndless			    	    if isEndless :					  
26 STORE_FAST 3 ( col )					      	  ans = 0						    		ans [ i ] [ j ] = 1				  
							      	  for i in range ( n ) :				    for j in range ( n ) :					  
4 28 SETUP_LOOP 78 ( to 108 )				      	      for j in range ( 1 , n ) :			    	if isEndless :						  
30 LOAD_GLOBAL 2 ( range )				      		  if ( row [ i ] [ j ] and col [ i ] [ j ] ) :	    	    ans [ i ] [ j ] += 1				  
32 LOAD_FAST 1 ( n )					      		      ans += 1					    for i in range ( n ) :					  
34 CALL_FUNCTION 1					      	  return ans						    	if isEndless :						  
36 GET_ITER						      								    	    ans [ i ] [ j ] = 1					  
>> 38 FOR_ITER 66 ( to 106 )				      								    return ans							  
40 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 42 LOAD_CONST 1 ( 1 )					      								    								  
44 STORE_FAST 5 ( isEndless )				      								    								  
							      								    								  
6 46 SETUP_LOOP 56 ( to 104 )				      								    								  
48 LOAD_GLOBAL 2 ( range )				      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_CONST 2 ( - 1 )					      								    								  
58 LOAD_CONST 2 ( - 1 )					      								    								  
60 CALL_FUNCTION 3					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 36 ( to 102 )				      								    								  
66 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 68 LOAD_FAST 0 ( input_mat )				      								    								  
70 LOAD_FAST 6 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 3 ( 0 )					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
8 84 LOAD_CONST 3 ( 0 )					      								    								  
86 STORE_FAST 5 ( isEndless )				      								    								  
							      								    								  
9 >> 88 LOAD_FAST 5 ( isEndless )			      								    								  
90 LOAD_FAST 3 ( col )					      								    								  
92 LOAD_FAST 6 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 4 ( j )					      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 64					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 38					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
10 >> 108 SETUP_LOOP 78 ( to 188 )			      								    								  
110 LOAD_GLOBAL 2 ( range )				      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 CALL_FUNCTION 1					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 66 ( to 186 )				      								    								  
120 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 122 LOAD_CONST 1 ( 1 )				      								    								  
124 STORE_FAST 5 ( isEndless )				      								    								  
							      								    								  
12 126 SETUP_LOOP 56 ( to 184 )				      								    								  
128 LOAD_GLOBAL 2 ( range )				      								    								  
130 LOAD_FAST 1 ( n )					      								    								  
132 LOAD_CONST 1 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 LOAD_CONST 2 ( - 1 )				      								    								  
138 LOAD_CONST 2 ( - 1 )				      								    								  
140 CALL_FUNCTION 3					      								    								  
142 GET_ITER						      								    								  
>> 144 FOR_ITER 36 ( to 182 )				      								    								  
146 STORE_FAST 4 ( j )					      								    								  
							      								    								  
13 148 LOAD_FAST 0 ( input_mat )			      								    								  
150 LOAD_FAST 6 ( i )					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 4 ( j )					      								    								  
156 BINARY_SUBSCR					      								    								  
158 LOAD_CONST 3 ( 0 )					      								    								  
160 COMPARE_OP 2 ( == )					      								    								  
162 POP_JUMP_IF_FALSE 168				      								    								  
							      								    								  
14 164 LOAD_CONST 3 ( 0 )				      								    								  
166 STORE_FAST 5 ( isEndless )				      								    								  
							      								    								  
15 >> 168 LOAD_FAST 5 ( isEndless )			      								    								  
170 LOAD_FAST 2 ( row )					      								    								  
172 LOAD_FAST 6 ( i )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 LOAD_FAST 4 ( j )					      								    								  
178 STORE_SUBSCR					      								    								  
180 JUMP_ABSOLUTE 144					      								    								  
>> 182 POP_BLOCK					      								    								  
>> 184 JUMP_ABSOLUTE 118				      								    								  
>> 186 POP_BLOCK					      								    								  
							      								    								  
16 >> 188 LOAD_CONST 3 ( 0 )				      								    								  
190 STORE_FAST 7 ( ans )				      								    								  
							      								    								  
17 192 SETUP_LOOP 68 ( to 262 )				      								    								  
194 LOAD_GLOBAL 2 ( range )				      								    								  
196 LOAD_FAST 1 ( n )					      								    								  
198 CALL_FUNCTION 1					      								    								  
200 GET_ITER						      								    								  
>> 202 FOR_ITER 56 ( to 260 )				      								    								  
204 STORE_FAST 6 ( i )					      								    								  
							      								    								  
18 206 SETUP_LOOP 50 ( to 258 )				      								    								  
208 LOAD_GLOBAL 2 ( range )				      								    								  
210 LOAD_CONST 1 ( 1 )					      								    								  
212 LOAD_FAST 1 ( n )					      								    								  
214 CALL_FUNCTION 2					      								    								  
216 GET_ITER						      								    								  
>> 218 FOR_ITER 36 ( to 256 )				      								    								  
220 STORE_FAST 4 ( j )					      								    								  
							      								    								  
19 222 LOAD_FAST 2 ( row )				      								    								  
224 LOAD_FAST 6 ( i )					      								    								  
226 BINARY_SUBSCR					      								    								  
228 LOAD_FAST 4 ( j )					      								    								  
230 BINARY_SUBSCR					      								    								  
232 POP_JUMP_IF_FALSE 218				      								    								  
234 LOAD_FAST 3 ( col )					      								    								  
236 LOAD_FAST 6 ( i )					      								    								  
238 BINARY_SUBSCR					      								    								  
240 LOAD_FAST 4 ( j )					      								    								  
242 BINARY_SUBSCR					      								    								  
244 POP_JUMP_IF_FALSE 218				      								    								  
							      								    								  
20 246 LOAD_FAST 7 ( ans )				      								    								  
248 LOAD_CONST 1 ( 1 )					      								    								  
250 INPLACE_ADD						      								    								  
252 STORE_FAST 7 ( ans )				      								    								  
254 JUMP_ABSOLUTE 218					      								    								  
>> 256 POP_BLOCK					      								    								  
>> 258 JUMP_ABSOLUTE 202				      								    								  
>> 260 POP_BLOCK					      								    								  
							      								    								  
21 >> 262 LOAD_FAST 7 ( ans )				      								    								  
264 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_TWO_LARGE_NUMBERS					      SUM_TWO_LARGE_NUMBERS					    SUM_TWO_LARGE_NUMBERS					  SUM_TWO_LARGE_NUMBERS
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2644930, file " def findSum ( str1 , str2 ) :				    def findSum ( str1 , str2 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  if ( len ( str1 ) > len ( str2 ) ) :			    	if len ( str1 ) > len ( str2 ) :			  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_FAST 0 ( str1 )					      	      t = str1 ;					    	    t = str1						  _sa.valid/SUM_TWO_LARGE_NUMBERS.py", line 61	   r
4 CALL_FUNCTION 1					      	      str1 = str2 ;					    	    str2 = str2						  eturn str + len ( str1 )     ^ SyntaxError: 'retur
6 LOAD_GLOBAL 0 ( len )					      	      str2 = t ;					    	str = ""						  n' outside function
8 LOAD_FAST 1 ( str2 )					      	  str = "" ;						    	n1 = len ( str1 )					  
10 CALL_FUNCTION 1					      	  n1 = len ( str1 ) ;					    	n2 = len ( str2 )					  
12 COMPARE_OP 4 ( > )					      	  n2 = len ( str2 ) ;					    	n2 = str1 [ : : - 1 ]					  
14 POP_JUMP_IF_FALSE 28					      	  str1 = str1 [ : : - 1 ] ;				    	str1 = str1 [ : : - 1 ]					  
							      	  str2 = str2 [ : : - 1 ] ;				    	carry = 0						  
3 16 LOAD_FAST 0 ( str1 )				      	  carry = 0 ;						    	for i in range ( n1 ) :					  
18 STORE_FAST 2 ( t )					      	  for i in range ( n1 ) :				    	    sum = ord ( str1 [ i ] ) - 48 + ord ( str2 [ i ] ) -  
							      	      sum = ( ( ord ( str1 [ i ] ) - 48 ) + ( ( ord ( str2  	    str += chr ( sum % 10 )				  
4 20 LOAD_FAST 1 ( str2 )				      	      str += chr ( sum % 10 + 48 ) ;			    	    carry = int ( sum / 10 )				  
22 STORE_FAST 0 ( str1 )				      	      carry = int ( sum / 10 ) ;			    	    carry = int ( sum / 10 )				  
							      	  for i in range ( n1 , n2 ) :				    	    carry = int ( sum ( ) )				  
5 24 LOAD_FAST 2 ( t )					      	      sum = ( ( ord ( str2 [ i ] ) - 48 ) + carry ) ;	    	    for i in range ( len ( str1 ) + 1 ) :		  
26 STORE_FAST 1 ( str2 )				      	      str += chr ( sum % 10 + 48 ) ;			    		if len ( str1 [ i ] ) - len ( str1 ) :		  
							      	      carry = ( int ) ( sum / 10 ) ;			    		    str += chr ( i )				  
6 >> 28 LOAD_CONST 1 ( '' )				      	  if ( carry ) :					    return str + len ( str1 )					  
30 STORE_FAST 3 ( str )					      	      str += chr ( carry + 48 ) ;			    								  
							      	  str = str [ : : - 1 ] ;				    								  
7 32 LOAD_GLOBAL 0 ( len )				      	  return str ;						    								  
34 LOAD_FAST 0 ( str1 )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 STORE_FAST 4 ( n1 )					      								    								  
							      								    								  
8 40 LOAD_GLOBAL 0 ( len )				      								    								  
42 LOAD_FAST 1 ( str2 )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 5 ( n2 )					      								    								  
							      								    								  
9 48 LOAD_FAST 0 ( str1 )				      								    								  
50 LOAD_CONST 0 ( None )				      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 LOAD_CONST 2 ( - 1 )					      								    								  
56 BUILD_SLICE 3					      								    								  
58 BINARY_SUBSCR					      								    								  
60 STORE_FAST 0 ( str1 )				      								    								  
							      								    								  
10 62 LOAD_FAST 1 ( str2 )				      								    								  
64 LOAD_CONST 0 ( None )				      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 LOAD_CONST 2 ( - 1 )					      								    								  
70 BUILD_SLICE 3					      								    								  
72 BINARY_SUBSCR					      								    								  
74 STORE_FAST 1 ( str2 )				      								    								  
							      								    								  
11 76 LOAD_CONST 3 ( 0 )				      								    								  
78 STORE_FAST 6 ( carry )				      								    								  
							      								    								  
12 80 SETUP_LOOP 84 ( to 166 )				      								    								  
82 LOAD_GLOBAL 1 ( range )				      								    								  
84 LOAD_FAST 4 ( n1 )					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 72 ( to 164 )				      								    								  
92 STORE_FAST 7 ( i )					      								    								  
							      								    								  
13 94 LOAD_GLOBAL 2 ( ord )				      								    								  
96 LOAD_FAST 0 ( str1 )					      								    								  
98 LOAD_FAST 7 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_CONST 4 ( 48 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_GLOBAL 2 ( ord )				      								    								  
110 LOAD_FAST 1 ( str2 )				      								    								  
112 LOAD_FAST 7 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 CALL_FUNCTION 1					      								    								  
118 LOAD_CONST 4 ( 48 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 LOAD_FAST 6 ( carry )				      								    								  
124 BINARY_ADD						      								    								  
126 BINARY_ADD						      								    								  
128 STORE_FAST 8 ( sum )				      								    								  
							      								    								  
14 130 LOAD_FAST 3 ( str )				      								    								  
132 LOAD_GLOBAL 3 ( chr )				      								    								  
134 LOAD_FAST 8 ( sum )					      								    								  
136 LOAD_CONST 5 ( 10 )					      								    								  
138 BINARY_MODULO					      								    								  
140 LOAD_CONST 4 ( 48 )					      								    								  
142 BINARY_ADD						      								    								  
144 CALL_FUNCTION 1					      								    								  
146 INPLACE_ADD						      								    								  
148 STORE_FAST 3 ( str )				      								    								  
							      								    								  
15 150 LOAD_GLOBAL 4 ( int )				      								    								  
152 LOAD_FAST 8 ( sum )					      								    								  
154 LOAD_CONST 5 ( 10 )					      								    								  
156 BINARY_TRUE_DIVIDE					      								    								  
158 CALL_FUNCTION 1					      								    								  
160 STORE_FAST 6 ( carry )				      								    								  
162 JUMP_ABSOLUTE 90					      								    								  
>> 164 POP_BLOCK					      								    								  
							      								    								  
16 >> 166 SETUP_LOOP 70 ( to 238 )			      								    								  
168 LOAD_GLOBAL 1 ( range )				      								    								  
170 LOAD_FAST 4 ( n1 )					      								    								  
172 LOAD_FAST 5 ( n2 )					      								    								  
174 CALL_FUNCTION 2					      								    								  
176 GET_ITER						      								    								  
>> 178 FOR_ITER 56 ( to 236 )				      								    								  
180 STORE_FAST 7 ( i )					      								    								  
							      								    								  
17 182 LOAD_GLOBAL 2 ( ord )				      								    								  
184 LOAD_FAST 1 ( str2 )				      								    								  
186 LOAD_FAST 7 ( i )					      								    								  
188 BINARY_SUBSCR					      								    								  
190 CALL_FUNCTION 1					      								    								  
192 LOAD_CONST 4 ( 48 )					      								    								  
194 BINARY_SUBTRACT					      								    								  
196 LOAD_FAST 6 ( carry )				      								    								  
198 BINARY_ADD						      								    								  
200 STORE_FAST 8 ( sum )				      								    								  
							      								    								  
18 202 LOAD_FAST 3 ( str )				      								    								  
204 LOAD_GLOBAL 3 ( chr )				      								    								  
206 LOAD_FAST 8 ( sum )					      								    								  
208 LOAD_CONST 5 ( 10 )					      								    								  
210 BINARY_MODULO					      								    								  
212 LOAD_CONST 4 ( 48 )					      								    								  
214 BINARY_ADD						      								    								  
216 CALL_FUNCTION 1					      								    								  
218 INPLACE_ADD						      								    								  
220 STORE_FAST 3 ( str )				      								    								  
							      								    								  
19 222 LOAD_GLOBAL 4 ( int )				      								    								  
224 LOAD_FAST 8 ( sum )					      								    								  
226 LOAD_CONST 5 ( 10 )					      								    								  
228 BINARY_TRUE_DIVIDE					      								    								  
230 CALL_FUNCTION 1					      								    								  
232 STORE_FAST 6 ( carry )				      								    								  
234 JUMP_ABSOLUTE 178					      								    								  
>> 236 POP_BLOCK					      								    								  
							      								    								  
20 >> 238 LOAD_FAST 6 ( carry )				      								    								  
240 EXTENDED_ARG 1					      								    								  
242 POP_JUMP_IF_FALSE 260				      								    								  
							      								    								  
21 244 LOAD_FAST 3 ( str )				      								    								  
246 LOAD_GLOBAL 3 ( chr )				      								    								  
248 LOAD_FAST 6 ( carry )				      								    								  
250 LOAD_CONST 4 ( 48 )					      								    								  
252 BINARY_ADD						      								    								  
254 CALL_FUNCTION 1					      								    								  
256 INPLACE_ADD						      								    								  
258 STORE_FAST 3 ( str )				      								    								  
							      								    								  
22 >> 260 LOAD_FAST 3 ( str )				      								    								  
262 LOAD_CONST 0 ( None )				      								    								  
264 LOAD_CONST 0 ( None )				      								    								  
266 LOAD_CONST 2 ( - 1 )				      								    								  
268 BUILD_SLICE 3					      								    								  
270 BINARY_SUBSCR					      								    								  
272 STORE_FAST 3 ( str )				      								    								  
							      								    								  
23 274 LOAD_FAST 3 ( str )				      								    								  
276 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	      MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	    MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE		  MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE
--							      --							    --								  --
Disassembly of <code object maxLower at 0x7f33e2649a50, file  def maxLower ( str ) :					    def maxhigh_( str ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  i = 0							    	i = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 STORE_FAST 1 ( n )					      	      if str [ i ] >= 'A' and str [ i ] <= 'Z' :	    	    if str [ i ] >= 'A' and str [ i ] <= 'Z' :		  
							      		  i += 1					    		i += 1						  
3 8 LOAD_CONST 1 ( 0 )					      		  break						    		break						  
10 STORE_FAST 2 ( i )					      	  maxCount = 0						    	maxCount = 0						  
							      	  count = [ ]						    	count = [ ]						  
4 12 SETUP_LOOP 50 ( to 64 )				      	  for j in range ( MAX_CHAR ) :				    	for j in range ( MAX_CHAR ) :				  
14 LOAD_GLOBAL 1 ( range )				      	      count.append ( 0 )				    	    count.append ( 0 )					  
16 LOAD_FAST 1 ( n )					      	  for j in range ( i , n ) :				    	for j in range ( i , n ) :				  
18 CALL_FUNCTION 1					      	      if str [ j ] >= 'A' and str [ j ] <= 'Z' :	    	    if str [ j ] >= 'A' and str [ j ] <= 'Z' :		  
20 GET_ITER						      		  currCount = 0					    		currCount = 0					  
>> 22 FOR_ITER 38 ( to 62 )				      		  for k in range ( MAX_CHAR ) :			    		for k in range ( MAX_CHAR ) :			  
24 STORE_FAST 2 ( i )					      		      if count [ k ] > 0 :			    		    if count [ k ] >= 'A' :			  
							      			  currCount += 1			    			currCount += 1				  
5 26 LOAD_FAST 0 ( str )				      		  maxCount = max ( maxCount , currCount )	    	    for y in range ( MAXCount ) :			  
28 LOAD_FAST 2 ( i )					      		  for y in count :				    		if count <= maxCount :				  
30 BINARY_SUBSCR					      		      y = 0					    		    currCount += 1				  
32 LOAD_CONST 2 ( 'A' )					      	      if str [ j ] >= 'a' and str [ j ] <= 'z' :	    for count in range ( currCount ) :				  
34 COMPARE_OP 5 ( >= )					      		  count [ ord ( str [ j ] ) - ord ( 'a' ) ] += 1    	if count >= 3 and count <= maxCount :			  
36 POP_JUMP_IF_FALSE 22					      	  return maxCount					    	    currCount += 1					  
38 LOAD_FAST 0 ( str )					      								    return curr							  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 3 ( 'Z' )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
48 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
6 50 LOAD_FAST 2 ( i )					      								    								  
52 LOAD_CONST 4 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 58 BREAK_LOOP						      								    								  
60 JUMP_ABSOLUTE 22					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
8 >> 64 LOAD_CONST 1 ( 0 )				      								    								  
66 STORE_FAST 3 ( maxCount )				      								    								  
							      								    								  
9 68 BUILD_LIST 0					      								    								  
70 STORE_FAST 4 ( count )				      								    								  
							      								    								  
10 72 SETUP_LOOP 26 ( to 100 )				      								    								  
74 LOAD_GLOBAL 1 ( range )				      								    								  
76 LOAD_GLOBAL 2 ( MAX_CHAR )				      								    								  
78 CALL_FUNCTION 1					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 14 ( to 98 )				      								    								  
84 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 86 LOAD_FAST 4 ( count )				      								    								  
88 LOAD_METHOD 3 ( append )				      								    								  
90 LOAD_CONST 1 ( 0 )					      								    								  
92 CALL_METHOD 1					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 82					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
12 >> 100 SETUP_LOOP 168 ( to 270 )			      								    								  
102 LOAD_GLOBAL 1 ( range )				      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 LOAD_FAST 1 ( n )					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 154 ( to 268 )				      								    								  
114 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 116 LOAD_FAST 0 ( str )				      								    								  
118 LOAD_FAST 5 ( j )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_CONST 2 ( 'A' )				      								    								  
124 COMPARE_OP 5 ( >= )					      								    								  
126 POP_JUMP_IF_FALSE 210				      								    								  
128 LOAD_FAST 0 ( str )					      								    								  
130 LOAD_FAST 5 ( j )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 3 ( 'Z' )				      								    								  
136 COMPARE_OP 1 ( <= )					      								    								  
138 POP_JUMP_IF_FALSE 210				      								    								  
							      								    								  
14 140 LOAD_CONST 1 ( 0 )				      								    								  
142 STORE_FAST 6 ( currCount )				      								    								  
							      								    								  
15 144 SETUP_LOOP 36 ( to 182 )				      								    								  
146 LOAD_GLOBAL 1 ( range )				      								    								  
148 LOAD_GLOBAL 2 ( MAX_CHAR )				      								    								  
150 CALL_FUNCTION 1					      								    								  
152 GET_ITER						      								    								  
>> 154 FOR_ITER 24 ( to 180 )				      								    								  
156 STORE_FAST 7 ( k )					      								    								  
							      								    								  
16 158 LOAD_FAST 4 ( count )				      								    								  
160 LOAD_FAST 7 ( k )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_CONST 1 ( 0 )					      								    								  
166 COMPARE_OP 4 ( > )					      								    								  
168 POP_JUMP_IF_FALSE 154				      								    								  
							      								    								  
17 170 LOAD_FAST 6 ( currCount )			      								    								  
172 LOAD_CONST 4 ( 1 )					      								    								  
174 INPLACE_ADD						      								    								  
176 STORE_FAST 6 ( currCount )				      								    								  
178 JUMP_ABSOLUTE 154					      								    								  
>> 180 POP_BLOCK					      								    								  
							      								    								  
18 >> 182 LOAD_GLOBAL 4 ( max )				      								    								  
184 LOAD_FAST 3 ( maxCount )				      								    								  
186 LOAD_FAST 6 ( currCount )				      								    								  
188 CALL_FUNCTION 2					      								    								  
190 STORE_FAST 3 ( maxCount )				      								    								  
							      								    								  
19 192 SETUP_LOOP 16 ( to 210 )				      								    								  
194 LOAD_FAST 4 ( count )				      								    								  
196 GET_ITER						      								    								  
>> 198 FOR_ITER 8 ( to 208 )				      								    								  
200 STORE_FAST 8 ( y )					      								    								  
							      								    								  
20 202 LOAD_CONST 1 ( 0 )				      								    								  
204 STORE_FAST 8 ( y )					      								    								  
206 JUMP_ABSOLUTE 198					      								    								  
>> 208 POP_BLOCK					      								    								  
							      								    								  
21 >> 210 LOAD_FAST 0 ( str )				      								    								  
212 LOAD_FAST 5 ( j )					      								    								  
214 BINARY_SUBSCR					      								    								  
216 LOAD_CONST 5 ( 'a' )				      								    								  
218 COMPARE_OP 5 ( >= )					      								    								  
220 POP_JUMP_IF_FALSE 112				      								    								  
222 LOAD_FAST 0 ( str )					      								    								  
224 LOAD_FAST 5 ( j )					      								    								  
226 BINARY_SUBSCR					      								    								  
228 LOAD_CONST 6 ( 'z' )				      								    								  
230 COMPARE_OP 1 ( <= )					      								    								  
232 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
22 234 LOAD_FAST 4 ( count )				      								    								  
236 LOAD_GLOBAL 5 ( ord )				      								    								  
238 LOAD_FAST 0 ( str )					      								    								  
240 LOAD_FAST 5 ( j )					      								    								  
242 BINARY_SUBSCR					      								    								  
244 CALL_FUNCTION 1					      								    								  
246 LOAD_GLOBAL 5 ( ord )				      								    								  
248 LOAD_CONST 5 ( 'a' )				      								    								  
250 CALL_FUNCTION 1					      								    								  
252 BINARY_SUBTRACT					      								    								  
254 DUP_TOP_TWO						      								    								  
256 BINARY_SUBSCR					      								    								  
258 LOAD_CONST 4 ( 1 )					      								    								  
260 INPLACE_ADD						      								    								  
262 ROT_THREE						      								    								  
264 STORE_SUBSCR					      								    								  
266 JUMP_ABSOLUTE 112					      								    								  
>> 268 POP_BLOCK					      								    								  
							      								    								  
23 >> 270 LOAD_FAST 3 ( maxCount )			      								    								  
272 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNCOMMON_CHARACTERS_TWO_STRINGS			      FIND_UNCOMMON_CHARACTERS_TWO_STRINGS			    FIND_UNCOMMON_CHARACTERS_TWO_STRINGS			  FIND_UNCOMMON_CHARACTERS_TWO_STRINGS
--							      --							    --								  --
Disassembly of <code object findAndPrintUncommonChars at 0x7f def findAndPrintUncommonChars ( str1 , str2 ) :		    def findAndPrintUncommonChars ( str1 , str2 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  present = [ 0 ] * MAX_CHAR				    	present = [ 0 ] * MAX_CHAR				  
2 BUILD_LIST 1						      	  for i in range ( 0 , MAX_CHAR ) :			    	for i in range ( 0 , MAX_CHAR ) :			  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      present [ i ] = 0					    	    present [ i ] = 0					  
6 BINARY_MULTIPLY					      	  l1 = len ( str1 )					    	l1 = len ( str1 )					  
8 STORE_FAST 2 ( present )				      	  l2 = len ( str2 )					    	l2 = len ( str2 )					  
							      	  for i in range ( 0 , l1 ) :				    	for i in range ( 0 , l1 ) :				  
3 10 SETUP_LOOP 26 ( to 38 )				      	      present [ ord ( str1 [ i ] ) - ord ( 'a' ) ] = 1	    	    present [ ord ( str1 [ i ] ) - ord ( "a" ) ] = 1	  
12 LOAD_GLOBAL 1 ( range )				      	  for i in range ( 0 , l2 ) :				    	for i in range ( 0 , l2 ) :				  
14 LOAD_CONST 1 ( 0 )					      	      if ( present [ ord ( str2 [ i ] ) - ord ( 'a' ) ] ==  	    present [ ord ( str2 [ i ] ) - ord ( "a" ) ] == 1 or  
16 LOAD_GLOBAL 0 ( MAX_CHAR )				      		  present [ ord ( str2 [ i ] ) - ord ( 'a' ) ] = -  		present [ i ] = ord ( str2 )			  
18 CALL_FUNCTION 2					      	      else :						    	if not ( ord ( str2 [ i ] ) - ord ( "a" ) == - 1 ) :	  
20 GET_ITER						      		  present [ ord ( str2 [ i ] ) - ord ( 'a' ) ] = 2  	    present [ i ] = ord ( str2 [ i ] )			  
>> 22 FOR_ITER 12 ( to 36 )				      	  for i in range ( 0 , MAX_CHAR ) :			    if not ( ord ( str1 [ i ] ) == "a" ) :			  
24 STORE_FAST 3 ( i )					      	      if ( present [ i ] == 1 or present [ i ] == 2 ) :	    	return							  
							      		  print ( chr ( i + ord ( 'a' ) ) , end = " " )	    for i in range ( 0 , 15 ) :					  
4 26 LOAD_CONST 1 ( 0 )					      								    	if i == 2 :						  
28 LOAD_FAST 2 ( present )				      								    	    return present [ i ]				  
30 LOAD_FAST 3 ( i )					      								    	else :							  
32 STORE_SUBSCR						      								    	    return present [ i ]				  
34 JUMP_ABSOLUTE 22					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_GLOBAL 2 ( len )				      								    								  
40 LOAD_FAST 0 ( str1 )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 STORE_FAST 4 ( l1 )					      								    								  
							      								    								  
6 46 LOAD_GLOBAL 2 ( len )				      								    								  
48 LOAD_FAST 1 ( str2 )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 STORE_FAST 5 ( l2 )					      								    								  
							      								    								  
7 54 SETUP_LOOP 42 ( to 98 )				      								    								  
56 LOAD_GLOBAL 1 ( range )				      								    								  
58 LOAD_CONST 1 ( 0 )					      								    								  
60 LOAD_FAST 4 ( l1 )					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 28 ( to 96 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 70 LOAD_CONST 2 ( 1 )					      								    								  
72 LOAD_FAST 2 ( present )				      								    								  
74 LOAD_GLOBAL 3 ( ord )				      								    								  
76 LOAD_FAST 0 ( str1 )					      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 LOAD_GLOBAL 3 ( ord )				      								    								  
86 LOAD_CONST 3 ( 'a' )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 STORE_SUBSCR						      								    								  
94 JUMP_ABSOLUTE 66					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
9 >> 98 SETUP_LOOP 124 ( to 224 )			      								    								  
100 LOAD_GLOBAL 1 ( range )				      								    								  
102 LOAD_CONST 1 ( 0 )					      								    								  
104 LOAD_FAST 5 ( l2 )					      								    								  
106 CALL_FUNCTION 2					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 110 ( to 222 )				      								    								  
112 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 114 LOAD_FAST 2 ( present )				      								    								  
116 LOAD_GLOBAL 3 ( ord )				      								    								  
118 LOAD_FAST 1 ( str2 )				      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 CALL_FUNCTION 1					      								    								  
126 LOAD_GLOBAL 3 ( ord )				      								    								  
128 LOAD_CONST 3 ( 'a' )				      								    								  
130 CALL_FUNCTION 1					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 COMPARE_OP 2 ( == )					      								    								  
140 POP_JUMP_IF_TRUE 170				      								    								  
142 LOAD_FAST 2 ( present )				      								    								  
144 LOAD_GLOBAL 3 ( ord )				      								    								  
146 LOAD_FAST 1 ( str2 )				      								    								  
148 LOAD_FAST 3 ( i )					      								    								  
150 BINARY_SUBSCR					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 LOAD_GLOBAL 3 ( ord )				      								    								  
156 LOAD_CONST 3 ( 'a' )				      								    								  
158 CALL_FUNCTION 1					      								    								  
160 BINARY_SUBTRACT					      								    								  
162 BINARY_SUBSCR					      								    								  
164 LOAD_CONST 4 ( - 1 )				      								    								  
166 COMPARE_OP 2 ( == )					      								    								  
168 POP_JUMP_IF_FALSE 196				      								    								  
							      								    								  
11 >> 170 LOAD_CONST 4 ( - 1 )				      								    								  
172 LOAD_FAST 2 ( present )				      								    								  
174 LOAD_GLOBAL 3 ( ord )				      								    								  
176 LOAD_FAST 1 ( str2 )				      								    								  
178 LOAD_FAST 3 ( i )					      								    								  
180 BINARY_SUBSCR					      								    								  
182 CALL_FUNCTION 1					      								    								  
184 LOAD_GLOBAL 3 ( ord )				      								    								  
186 LOAD_CONST 3 ( 'a' )				      								    								  
188 CALL_FUNCTION 1					      								    								  
190 BINARY_SUBTRACT					      								    								  
192 STORE_SUBSCR					      								    								  
194 JUMP_ABSOLUTE 110					      								    								  
							      								    								  
13 >> 196 LOAD_CONST 5 ( 2 )				      								    								  
198 LOAD_FAST 2 ( present )				      								    								  
200 LOAD_GLOBAL 3 ( ord )				      								    								  
202 LOAD_FAST 1 ( str2 )				      								    								  
204 LOAD_FAST 3 ( i )					      								    								  
206 BINARY_SUBSCR					      								    								  
208 CALL_FUNCTION 1					      								    								  
210 LOAD_GLOBAL 3 ( ord )				      								    								  
212 LOAD_CONST 3 ( 'a' )				      								    								  
214 CALL_FUNCTION 1					      								    								  
216 BINARY_SUBTRACT					      								    								  
218 STORE_SUBSCR					      								    								  
220 JUMP_ABSOLUTE 110					      								    								  
>> 222 POP_BLOCK					      								    								  
							      								    								  
14 >> 224 SETUP_LOOP 68 ( to 294 )			      								    								  
226 LOAD_GLOBAL 1 ( range )				      								    								  
228 LOAD_CONST 1 ( 0 )					      								    								  
230 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
232 CALL_FUNCTION 2					      								    								  
234 GET_ITER						      								    								  
>> 236 FOR_ITER 54 ( to 292 )				      								    								  
238 STORE_FAST 3 ( i )					      								    								  
							      								    								  
15 240 LOAD_FAST 2 ( present )				      								    								  
242 LOAD_FAST 3 ( i )					      								    								  
244 BINARY_SUBSCR					      								    								  
246 LOAD_CONST 2 ( 1 )					      								    								  
248 COMPARE_OP 2 ( == )					      								    								  
250 EXTENDED_ARG 1					      								    								  
252 POP_JUMP_IF_TRUE 266				      								    								  
254 LOAD_FAST 2 ( present )				      								    								  
256 LOAD_FAST 3 ( i )					      								    								  
258 BINARY_SUBSCR					      								    								  
260 LOAD_CONST 5 ( 2 )					      								    								  
262 COMPARE_OP 2 ( == )					      								    								  
264 POP_JUMP_IF_FALSE 236				      								    								  
							      								    								  
16 >> 266 LOAD_GLOBAL 4 ( print )			      								    								  
268 LOAD_GLOBAL 5 ( chr )				      								    								  
270 LOAD_FAST 3 ( i )					      								    								  
272 LOAD_GLOBAL 3 ( ord )				      								    								  
274 LOAD_CONST 3 ( 'a' )				      								    								  
276 CALL_FUNCTION 1					      								    								  
278 BINARY_ADD						      								    								  
280 CALL_FUNCTION 1					      								    								  
282 LOAD_CONST 6 ( ' ' )				      								    								  
284 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
286 CALL_FUNCTION_KW 2					      								    								  
288 POP_TOP						      								    								  
290 JUMP_ABSOLUTE 236					      								    								  
>> 292 POP_BLOCK					      								    								  
>> 294 LOAD_CONST 0 ( None )				      								    								  
296 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MATRIX_ANTISPIRAL_FORM				      PRINT_MATRIX_ANTISPIRAL_FORM				    PRINT_MATRIX_ANTISPIRAL_FORM				  PRINT_MATRIX_ANTISPIRAL_FORM
--							      --							    --								  --
Disassembly of <code object antiSpiralTraversal at 0x7f33e264 def antiSpiralTraversal ( m , n , a ) :			    def antiSpiralTraversal ( m , n , a ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  k = 0							    	k = 0							  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 STORE_FAST 3 ( k )					      	  l = 0							    	l = 0							  _sa.valid/PRINT_MATRIX_ANTISPIRAL_FORM.py", line 6
							      	  stk = [ ]						    	stk = [ ]						  2	print ( " SPACETOKEN SPACETOKEN SPACETOKEN S
3 4 LOAD_CONST 1 ( 0 )					      	  while ( k <= m and l <= n ) :				    	while k <= m and l <= n :				  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
6 STORE_FAST 4 ( l )					      	      for i in range ( l , n + 1 ) :			    	    for i in range ( l , n + 1 ) :			  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      		  stk.append ( a [ k ] [ i ] )			    		stk.append ( a [ k ] [ i ] )			  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
4 8 BUILD_LIST 0					      	      k += 1						    	    k += 1						  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
10 STORE_FAST 5 ( stk )					      	      for i in range ( k , m + 1 ) :			    	    for i in range ( k , m + 1 ) :			  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      		  stk.append ( a [ i ] [ n ] )			    		stk.append ( a [ i ] [ n ] )			  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
5 12 SETUP_LOOP 240 ( to 254 )				      	      n -= 1						    	    n -= 1						  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
>> 14 LOAD_FAST 3 ( k )					      	      if ( k <= m ) :					    	    if k <= m :						   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
16 LOAD_FAST 0 ( m )					      		  for i in range ( n , l - 1 , - 1 ) :		    		for i in range ( n , l - 1 , - 1 ) :		  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
18 COMPARE_OP 1 ( <= )					      		      stk.append ( a [ m ] [ i ] )		    		    stk.append ( a [ i ] [ i ] )		  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
20 POP_JUMP_IF_FALSE 252				      		  m -= 1					    		k += 1						  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
22 LOAD_FAST 4 ( l )					      	      if ( l <= n ) :					    	    for l in range ( 3 , len ( stk ) - 1 ) :		  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
24 LOAD_FAST 1 ( n )					      		  for i in range ( m , k - 1 , - 1 ) :		    		k += 1						  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
26 COMPARE_OP 1 ( <= )					      		      stk.append ( a [ i ] [ l ] )		    	    for k in range ( 3 , len ( stk ) - 1 ) :		  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
28 POP_JUMP_IF_FALSE 252				      		  l += 1					    		k += 1						  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
							      	  while len ( stk ) != 0 :				    	for k in range ( 3 , len ( stk ) - 1 ) :		  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
6 30 SETUP_LOOP 40 ( to 72 )				      	      print ( str ( stk [ - 1 ] ) , end = " " )		    	    k += 1						  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
32 LOAD_GLOBAL 0 ( range )				      	      stk.pop ( )					    	print ( " SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
34 LOAD_FAST 4 ( l )					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
36 LOAD_FAST 1 ( n )					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
38 LOAD_CONST 2 ( 1 )					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
40 BINARY_ADD						      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
42 CALL_FUNCTION 2					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
44 GET_ITER						      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
>> 46 FOR_ITER 22 ( to 70 )				      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
48 STORE_FAST 6 ( i )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
							      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
7 50 LOAD_FAST 5 ( stk )				      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
52 LOAD_METHOD 1 ( append )				      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
54 LOAD_FAST 2 ( a )					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
56 LOAD_FAST 3 ( k )					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
58 BINARY_SUBSCR					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
60 LOAD_FAST 6 ( i )					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
62 BINARY_SUBSCR					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
64 CALL_METHOD 1					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
66 POP_TOP						      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
68 JUMP_ABSOLUTE 46					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
>> 70 POP_BLOCK						      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
8 >> 72 LOAD_FAST 3 ( k )				      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
74 LOAD_CONST 2 ( 1 )					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
76 INPLACE_ADD						      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
78 STORE_FAST 3 ( k )					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
9 80 SETUP_LOOP 40 ( to 122 )				      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
82 LOAD_GLOBAL 0 ( range )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
84 LOAD_FAST 3 ( k )					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
86 LOAD_FAST 0 ( m )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
88 LOAD_CONST 2 ( 1 )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
90 BINARY_ADD						      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
92 CALL_FUNCTION 2					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
94 GET_ITER						      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
>> 96 FOR_ITER 22 ( to 120 )				      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
98 STORE_FAST 6 ( i )					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
10 100 LOAD_FAST 5 ( stk )				      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
102 LOAD_METHOD 1 ( append )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
104 LOAD_FAST 2 ( a )					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
106 LOAD_FAST 6 ( i )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
108 BINARY_SUBSCR					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
110 LOAD_FAST 1 ( n )					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
112 BINARY_SUBSCR					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
114 CALL_METHOD 1					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
116 POP_TOP						      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
118 JUMP_ABSOLUTE 96					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
>> 120 POP_BLOCK					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
11 >> 122 LOAD_FAST 1 ( n )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
124 LOAD_CONST 2 ( 1 )					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
126 INPLACE_SUBTRACT					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
128 STORE_FAST 1 ( n )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
							      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
12 130 LOAD_FAST 3 ( k )				      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
132 LOAD_FAST 0 ( m )					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
134 COMPARE_OP 1 ( <= )					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
136 POP_JUMP_IF_FALSE 190				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
							      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
13 138 SETUP_LOOP 42 ( to 182 )				      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
140 LOAD_GLOBAL 0 ( range )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
142 LOAD_FAST 1 ( n )					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
144 LOAD_FAST 4 ( l )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
146 LOAD_CONST 2 ( 1 )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
148 BINARY_SUBTRACT					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
150 LOAD_CONST 3 ( - 1 )				      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
152 CALL_FUNCTION 3					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
154 GET_ITER						      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
>> 156 FOR_ITER 22 ( to 180 )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
158 STORE_FAST 6 ( i )					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
14 160 LOAD_FAST 5 ( stk )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
162 LOAD_METHOD 1 ( append )				      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
164 LOAD_FAST 2 ( a )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
166 LOAD_FAST 0 ( m )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
168 BINARY_SUBSCR					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
170 LOAD_FAST 6 ( i )					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
172 BINARY_SUBSCR					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
174 CALL_METHOD 1					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
176 POP_TOP						      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
178 JUMP_ABSOLUTE 156					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
>> 180 POP_BLOCK					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
15 >> 182 LOAD_FAST 0 ( m )				      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
184 LOAD_CONST 2 ( 1 )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
186 INPLACE_SUBTRACT					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
188 STORE_FAST 0 ( m )					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
							      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
16 >> 190 LOAD_FAST 4 ( l )				      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
192 LOAD_FAST 1 ( n )					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
194 COMPARE_OP 1 ( <= )					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
196 POP_JUMP_IF_FALSE 14				      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
							      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
17 198 SETUP_LOOP 42 ( to 242 )				      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
200 LOAD_GLOBAL 0 ( range )				      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
202 LOAD_FAST 0 ( m )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
204 LOAD_FAST 3 ( k )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
206 LOAD_CONST 2 ( 1 )					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
208 BINARY_SUBTRACT					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
210 LOAD_CONST 3 ( - 1 )				      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
212 CALL_FUNCTION 3					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
214 GET_ITER						      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
>> 216 FOR_ITER 22 ( to 240 )				      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
218 STORE_FAST 6 ( i )					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
							      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
18 220 LOAD_FAST 5 ( stk )				      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
222 LOAD_METHOD 1 ( append )				      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
224 LOAD_FAST 2 ( a )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
226 LOAD_FAST 6 ( i )					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
228 BINARY_SUBSCR					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
230 LOAD_FAST 4 ( l )					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
232 BINARY_SUBSCR					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
234 CALL_METHOD 1					      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
236 POP_TOP						      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
238 JUMP_ABSOLUTE 216					      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
>> 240 POP_BLOCK					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
							      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
19 >> 242 LOAD_FAST 4 ( l )				      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
244 LOAD_CONST 2 ( 1 )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
246 INPLACE_ADD						      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
248 STORE_FAST 4 ( l )					      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
250 JUMP_ABSOLUTE 14					      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
>> 252 POP_BLOCK					      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
20 >> 254 SETUP_LOOP 48 ( to 304 )			      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
>> 256 LOAD_GLOBAL 2 ( len )				      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
258 LOAD_FAST 5 ( stk )					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
260 CALL_FUNCTION 1					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
262 LOAD_CONST 1 ( 0 )					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
264 COMPARE_OP 3 ( != )					      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
266 EXTENDED_ARG 1					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
268 POP_JUMP_IF_FALSE 302				      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
21 270 LOAD_GLOBAL 3 ( print )				      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
272 LOAD_GLOBAL 4 ( str )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
274 LOAD_FAST 5 ( stk )					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
276 LOAD_CONST 3 ( - 1 )				      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
278 BINARY_SUBSCR					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
280 CALL_FUNCTION 1					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
282 LOAD_CONST 4 ( ' ' )				      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
284 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  CETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKE
286 CALL_FUNCTION_KW 2					      								    								  N SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPAC
288 POP_TOP						      								    								  ETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
							      								    								   SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACE
22 290 LOAD_FAST 5 ( stk )				      								    								  TOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN
292 LOAD_METHOD 5 ( pop )				      								    								  SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACET
294 CALL_METHOD 0					      								    								  OKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN S
296 POP_TOP						      								    								  PACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETO
298 EXTENDED_ARG 1					      								    								  KEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SP
300 JUMP_ABSOLUTE 256					      								    								  ACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOK
>> 302 POP_BLOCK					      								    								  EN SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN SPA
>> 304 LOAD_CONST 0 ( None )				      								    								  CETOKEN
306 RETURN_VALUE NEW_LINE				      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  	      ^ SyntaxError: EOL while scanning stri
							      								    								  ng literal
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_FREQUENCY_ELEMENT				      NEXT_GREATER_FREQUENCY_ELEMENT				    NEXT_GREATER_FREQUENCY_ELEMENT				  NEXT_GREATER_FREQUENCY_ELEMENT
--							      --							    --								  --
Disassembly of <code object NFG at 0x7f33e2649a50, file "<dis def NFG ( a , n ) :					    def NFG ( a , n ) :						  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      print ( "List empty" )				    	    print ( "List empty" )				  
4 COMPARE_OP 1 ( <= )					      	      return [ ]					    	    return [ ]						  
6 POP_JUMP_IF_FALSE 20					      	  stack = [ 0 ] * n					    	stack = [ 0 ] * n					  
							      	  freq = { }						    	freq = { }						  
3 8 LOAD_GLOBAL 0 ( print )				      	  for i in a :						    	for i in a :						  
10 LOAD_CONST 2 ( 'List empty' )			      	      freq [ a [ i ] ] = 0				    	    freq [ a [ i ] ] = 0				  
12 CALL_FUNCTION 1					      	  for i in a :						    	for i in a :						  
14 POP_TOP						      	      freq [ a [ i ] ] += 1				    	    freq [ a [ i ] ] += 1				  
							      	  res = [ 0 ] * n					    	res = [ 0 ] * n						  
4 16 BUILD_LIST 0					      	  top = - 1						    	top = - 1						  
18 RETURN_VALUE						      	  top += 1						    	top += 1						  
							      	  stack [ top ] = 0					    	stack [ top ] = 0					  
5 >> 20 LOAD_CONST 1 ( 0 )				      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
22 BUILD_LIST 1						      	      if ( freq [ a [ stack [ top ] ] ] > freq [ a [ i ] ]  	    if freq > a [ stack [ top ] ] > freq [ a [ i ] ] :	  
24 LOAD_FAST 1 ( n )					      		  top += 1					    		top += 1					  
26 BINARY_MULTIPLY					      		  stack [ top ] = i				    	    top -= 1						  
28 STORE_FAST 2 ( stack )				      	      else :						    	    top -= 1						  
							      		  while ( top > - 1 and freq [ a [ stack [ top ] ]  	while top [ top ] < top [ top ] :			  
6 30 BUILD_MAP 0					      		      res [ stack [ top ] ] = a [ i ]		    	    top [ top ] = top					  
32 STORE_FAST 3 ( freq )				      		      top -= 1					    	while top [ top ] :					  
							      		  top += 1					    	    top [ top ] += 1					  
7 34 SETUP_LOOP 24 ( to 60 )				      		  stack [ top ] = i				    	top += 1						  
36 LOAD_FAST 0 ( a )					      	  while ( top > - 1 ) :					    while top [ top ] :						  
38 GET_ITER						      	      res [ stack [ top ] ] = - 1			    	top [ top ] = top [ top ]				  
>> 40 FOR_ITER 16 ( to 58 )				      	      top -= 1						    top += 1							  
42 STORE_FAST 4 ( i )					      	  return res						    top [ top ] = top						  
							      								    return top							  
8 44 LOAD_CONST 1 ( 0 )					      								    								  
46 LOAD_FAST 3 ( freq )					      								    								  
48 LOAD_FAST 0 ( a )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 40					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
9 >> 60 SETUP_LOOP 32 ( to 94 )				      								    								  
62 LOAD_FAST 0 ( a )					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 24 ( to 92 )				      								    								  
68 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 70 LOAD_FAST 3 ( freq )				      								    								  
72 LOAD_FAST 0 ( a )					      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 DUP_TOP_TWO						      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 ROT_THREE						      								    								  
88 STORE_SUBSCR						      								    								  
90 JUMP_ABSOLUTE 66					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 LOAD_CONST 1 ( 0 )				      								    								  
96 BUILD_LIST 1						      								    								  
98 LOAD_FAST 1 ( n )					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 STORE_FAST 5 ( res )				      								    								  
							      								    								  
12 104 LOAD_CONST 4 ( - 1 )				      								    								  
106 STORE_FAST 6 ( top )				      								    								  
							      								    								  
13 108 LOAD_FAST 6 ( top )				      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 6 ( top )				      								    								  
							      								    								  
14 116 LOAD_CONST 1 ( 0 )				      								    								  
118 LOAD_FAST 2 ( stack )				      								    								  
120 LOAD_FAST 6 ( top )					      								    								  
122 STORE_SUBSCR					      								    								  
							      								    								  
15 124 SETUP_LOOP 146 ( to 272 )			      								    								  
126 LOAD_GLOBAL 1 ( range )				      								    								  
128 LOAD_CONST 3 ( 1 )					      								    								  
130 LOAD_FAST 1 ( n )					      								    								  
132 CALL_FUNCTION 2					      								    								  
134 GET_ITER						      								    								  
>> 136 FOR_ITER 132 ( to 270 )				      								    								  
138 STORE_FAST 4 ( i )					      								    								  
							      								    								  
16 140 LOAD_FAST 3 ( freq )				      								    								  
142 LOAD_FAST 0 ( a )					      								    								  
144 LOAD_FAST 2 ( stack )				      								    								  
146 LOAD_FAST 6 ( top )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 BINARY_SUBSCR					      								    								  
152 BINARY_SUBSCR					      								    								  
154 LOAD_FAST 3 ( freq )				      								    								  
156 LOAD_FAST 0 ( a )					      								    								  
158 LOAD_FAST 4 ( i )					      								    								  
160 BINARY_SUBSCR					      								    								  
162 BINARY_SUBSCR					      								    								  
164 COMPARE_OP 4 ( > )					      								    								  
166 POP_JUMP_IF_FALSE 186				      								    								  
							      								    								  
17 168 LOAD_FAST 6 ( top )				      								    								  
170 LOAD_CONST 3 ( 1 )					      								    								  
172 INPLACE_ADD						      								    								  
174 STORE_FAST 6 ( top )				      								    								  
							      								    								  
18 176 LOAD_FAST 4 ( i )				      								    								  
178 LOAD_FAST 2 ( stack )				      								    								  
180 LOAD_FAST 6 ( top )					      								    								  
182 STORE_SUBSCR					      								    								  
184 JUMP_ABSOLUTE 136					      								    								  
							      								    								  
20 >> 186 SETUP_LOOP 64 ( to 252 )			      								    								  
>> 188 LOAD_FAST 6 ( top )				      								    								  
190 LOAD_CONST 4 ( - 1 )				      								    								  
192 COMPARE_OP 4 ( > )					      								    								  
194 POP_JUMP_IF_FALSE 250				      								    								  
196 LOAD_FAST 3 ( freq )				      								    								  
198 LOAD_FAST 0 ( a )					      								    								  
200 LOAD_FAST 2 ( stack )				      								    								  
202 LOAD_FAST 6 ( top )					      								    								  
204 BINARY_SUBSCR					      								    								  
206 BINARY_SUBSCR					      								    								  
208 BINARY_SUBSCR					      								    								  
210 LOAD_FAST 3 ( freq )				      								    								  
212 LOAD_FAST 0 ( a )					      								    								  
214 LOAD_FAST 4 ( i )					      								    								  
216 BINARY_SUBSCR					      								    								  
218 BINARY_SUBSCR					      								    								  
220 COMPARE_OP 0 ( < )					      								    								  
222 POP_JUMP_IF_FALSE 250				      								    								  
							      								    								  
21 224 LOAD_FAST 0 ( a )				      								    								  
226 LOAD_FAST 4 ( i )					      								    								  
228 BINARY_SUBSCR					      								    								  
230 LOAD_FAST 5 ( res )					      								    								  
232 LOAD_FAST 2 ( stack )				      								    								  
234 LOAD_FAST 6 ( top )					      								    								  
236 BINARY_SUBSCR					      								    								  
238 STORE_SUBSCR					      								    								  
							      								    								  
22 240 LOAD_FAST 6 ( top )				      								    								  
242 LOAD_CONST 3 ( 1 )					      								    								  
244 INPLACE_SUBTRACT					      								    								  
246 STORE_FAST 6 ( top )				      								    								  
248 JUMP_ABSOLUTE 188					      								    								  
>> 250 POP_BLOCK					      								    								  
							      								    								  
23 >> 252 LOAD_FAST 6 ( top )				      								    								  
254 LOAD_CONST 3 ( 1 )					      								    								  
256 INPLACE_ADD						      								    								  
258 STORE_FAST 6 ( top )				      								    								  
							      								    								  
24 260 LOAD_FAST 4 ( i )				      								    								  
262 LOAD_FAST 2 ( stack )				      								    								  
264 LOAD_FAST 6 ( top )					      								    								  
266 STORE_SUBSCR					      								    								  
268 JUMP_ABSOLUTE 136					      								    								  
>> 270 POP_BLOCK					      								    								  
							      								    								  
25 >> 272 SETUP_LOOP 36 ( to 310 )			      								    								  
>> 274 LOAD_FAST 6 ( top )				      								    								  
276 LOAD_CONST 4 ( - 1 )				      								    								  
278 COMPARE_OP 4 ( > )					      								    								  
280 EXTENDED_ARG 1					      								    								  
282 POP_JUMP_IF_FALSE 308				      								    								  
							      								    								  
26 284 LOAD_CONST 4 ( - 1 )				      								    								  
286 LOAD_FAST 5 ( res )					      								    								  
288 LOAD_FAST 2 ( stack )				      								    								  
290 LOAD_FAST 6 ( top )					      								    								  
292 BINARY_SUBSCR					      								    								  
294 STORE_SUBSCR					      								    								  
							      								    								  
27 296 LOAD_FAST 6 ( top )				      								    								  
298 LOAD_CONST 3 ( 1 )					      								    								  
300 INPLACE_SUBTRACT					      								    								  
302 STORE_FAST 6 ( top )				      								    								  
304 EXTENDED_ARG 1					      								    								  
306 JUMP_ABSOLUTE 274					      								    								  
>> 308 POP_BLOCK					      								    								  
							      								    								  
28 >> 310 LOAD_FAST 5 ( res )				      								    								  
312 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX	      MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX	    MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX		  MAXIMUM_PR<unk> CT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX
--							      --							    --								  --
Disassembly of <code object FindMaxProduct at 0x7f33e26494b0, def FindMaxProduct ( arr , n ) :				    def FindMaxProduct ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  max = 0						    	max = 0							  
2 STORE_FAST 2 ( max )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
3 4 EXTENDED_ARG 1					      		  if ( ( j - 3 ) >= 0 ) :			    		if j - 3 >= 0 :					  
6 SETUP_LOOP 316 ( to 324 )				      		      result = ( arr [ i ] [ j ] * arr [ i ] [ j -  		    result = arr [ i ] [ j ] * arr [ i ] [ j - 1  
8 LOAD_GLOBAL 0 ( range )				      		      if ( max < result ) :			    		    if max < max :				  
10 LOAD_FAST 1 ( n )					      			  max = result				    			result = arr [ i ] [ j ] * ( i - 1 ) * ar 
12 CALL_FUNCTION 1					      		  if ( ( i - 3 ) >= 0 ) :			    	    return result					  
14 GET_ITER						      		      result = ( arr [ i ] [ j ] * arr [ i - 1 ] [  								  
>> 16 EXTENDED_ARG 1					      		      if ( max < result ) :			    								  
18 FOR_ITER 302 ( to 322 )				      			  max = result				    								  
20 STORE_FAST 3 ( i )					      		  if ( ( i - 3 ) >= 0 and ( j - 3 ) >= 0 ) :	    								  
							      		      result = ( arr [ i ] [ j ] * arr [ i - 1 ] [  								  
4 22 EXTENDED_ARG 1					      		      if ( max < result ) :			    								  
24 SETUP_LOOP 294 ( to 320 )				      			  max = result				    								  
26 LOAD_GLOBAL 0 ( range )				      	  return max						    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 EXTENDED_ARG 1					      								    								  
36 FOR_ITER 280 ( to 318 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 4 ( j )					      								    								  
42 LOAD_CONST 2 ( 3 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 5 ( >= )					      								    								  
50 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 4 ( j )					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 4 ( j )					      								    								  
86 LOAD_CONST 4 ( 2 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 4 ( j )					      								    								  
102 LOAD_CONST 2 ( 3 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_MULTIPLY					      								    								  
110 STORE_FAST 5 ( result )				      								    								  
							      								    								  
7 112 LOAD_FAST 2 ( max )				      								    								  
114 LOAD_FAST 5 ( result )				      								    								  
116 COMPARE_OP 0 ( < )					      								    								  
118 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
8 120 LOAD_FAST 5 ( result )				      								    								  
122 STORE_FAST 2 ( max )				      								    								  
							      								    								  
9 >> 124 LOAD_FAST 3 ( i )				      								    								  
126 LOAD_CONST 2 ( 3 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_CONST 1 ( 0 )					      								    								  
132 COMPARE_OP 5 ( >= )					      								    								  
134 POP_JUMP_IF_FALSE 208				      								    								  
							      								    								  
10 136 LOAD_FAST 0 ( arr )				      								    								  
138 LOAD_FAST 3 ( i )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 LOAD_FAST 4 ( j )					      								    								  
144 BINARY_SUBSCR					      								    								  
146 LOAD_FAST 0 ( arr )					      								    								  
148 LOAD_FAST 3 ( i )					      								    								  
150 LOAD_CONST 3 ( 1 )					      								    								  
152 BINARY_SUBTRACT					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_FAST 4 ( j )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 BINARY_MULTIPLY					      								    								  
162 LOAD_FAST 0 ( arr )					      								    								  
164 LOAD_FAST 3 ( i )					      								    								  
166 LOAD_CONST 4 ( 2 )					      								    								  
168 BINARY_SUBTRACT					      								    								  
170 BINARY_SUBSCR					      								    								  
172 LOAD_FAST 4 ( j )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 BINARY_MULTIPLY					      								    								  
178 LOAD_FAST 0 ( arr )					      								    								  
180 LOAD_FAST 3 ( i )					      								    								  
182 LOAD_CONST 2 ( 3 )					      								    								  
184 BINARY_SUBTRACT					      								    								  
186 BINARY_SUBSCR					      								    								  
188 LOAD_FAST 4 ( j )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 BINARY_MULTIPLY					      								    								  
194 STORE_FAST 5 ( result )				      								    								  
							      								    								  
11 196 LOAD_FAST 2 ( max )				      								    								  
198 LOAD_FAST 5 ( result )				      								    								  
200 COMPARE_OP 0 ( < )					      								    								  
202 POP_JUMP_IF_FALSE 208				      								    								  
							      								    								  
12 204 LOAD_FAST 5 ( result )				      								    								  
206 STORE_FAST 2 ( max )				      								    								  
							      								    								  
13 >> 208 LOAD_FAST 3 ( i )				      								    								  
210 LOAD_CONST 2 ( 3 )					      								    								  
212 BINARY_SUBTRACT					      								    								  
214 LOAD_CONST 1 ( 0 )					      								    								  
216 COMPARE_OP 5 ( >= )					      								    								  
218 POP_JUMP_IF_FALSE 34				      								    								  
220 LOAD_FAST 4 ( j )					      								    								  
222 LOAD_CONST 2 ( 3 )					      								    								  
224 BINARY_SUBTRACT					      								    								  
226 LOAD_CONST 1 ( 0 )					      								    								  
228 COMPARE_OP 5 ( >= )					      								    								  
230 POP_JUMP_IF_FALSE 34				      								    								  
							      								    								  
14 232 LOAD_FAST 0 ( arr )				      								    								  
234 LOAD_FAST 3 ( i )					      								    								  
236 BINARY_SUBSCR					      								    								  
238 LOAD_FAST 4 ( j )					      								    								  
240 BINARY_SUBSCR					      								    								  
242 LOAD_FAST 0 ( arr )					      								    								  
244 LOAD_FAST 3 ( i )					      								    								  
246 LOAD_CONST 3 ( 1 )					      								    								  
248 BINARY_SUBTRACT					      								    								  
250 BINARY_SUBSCR					      								    								  
252 LOAD_FAST 4 ( j )					      								    								  
254 LOAD_CONST 3 ( 1 )					      								    								  
256 BINARY_SUBTRACT					      								    								  
258 BINARY_SUBSCR					      								    								  
260 BINARY_MULTIPLY					      								    								  
262 LOAD_FAST 0 ( arr )					      								    								  
264 LOAD_FAST 3 ( i )					      								    								  
266 LOAD_CONST 4 ( 2 )					      								    								  
268 BINARY_SUBTRACT					      								    								  
270 BINARY_SUBSCR					      								    								  
272 LOAD_FAST 4 ( j )					      								    								  
274 LOAD_CONST 4 ( 2 )					      								    								  
276 BINARY_SUBTRACT					      								    								  
278 BINARY_SUBSCR					      								    								  
280 BINARY_MULTIPLY					      								    								  
282 LOAD_FAST 0 ( arr )					      								    								  
284 LOAD_FAST 3 ( i )					      								    								  
286 LOAD_CONST 2 ( 3 )					      								    								  
288 BINARY_SUBTRACT					      								    								  
290 BINARY_SUBSCR					      								    								  
292 LOAD_FAST 4 ( j )					      								    								  
294 LOAD_CONST 2 ( 3 )					      								    								  
296 BINARY_SUBTRACT					      								    								  
298 BINARY_SUBSCR					      								    								  
300 BINARY_MULTIPLY					      								    								  
302 STORE_FAST 5 ( result )				      								    								  
							      								    								  
15 304 LOAD_FAST 2 ( max )				      								    								  
306 LOAD_FAST 5 ( result )				      								    								  
308 COMPARE_OP 0 ( < )					      								    								  
310 POP_JUMP_IF_FALSE 34				      								    								  
							      								    								  
16 312 LOAD_FAST 5 ( result )				      								    								  
314 STORE_FAST 2 ( max )				      								    								  
316 JUMP_ABSOLUTE 34					      								    								  
>> 318 POP_BLOCK					      								    								  
>> 320 JUMP_ABSOLUTE 16					      								    								  
>> 322 POP_BLOCK					      								    								  
							      								    								  
17 >> 324 LOAD_FAST 2 ( max )				      								    								  
326 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS	      FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS		    FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS		  FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_<unk> STACKS
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7f33e2649a50, file "< def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :	    def maxSum ( stack, stack, stack, n1 , n2 , n3 , n3 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 ) )			      	  sum1 , sum2 , sum3 = 0 , 0 , 0			    	sum1 , sum2 , sum3 = 0 , 0 , 0				  
2 UNPACK_SEQUENCE 3					      	  for i in range ( n1 ) :				    	for i in range ( n1 ) :					  
4 STORE_FAST 6 ( sum1 )					      	      sum1 += stack1 [ i ]				    	    sum1 += stack1 if stack== i else 1			  
6 STORE_FAST 7 ( sum2 )					      	  for i in range ( n2 ) :				    	for i in range ( n2 ) :					  
8 STORE_FAST 8 ( sum3 )					      	      sum2 += stack2 [ i ]				    	    sum2 += stack2 [ i ]				  
							      	  for i in range ( n3 ) :				    	for i in range ( n3 ) :					  
3 10 SETUP_LOOP 28 ( to 40 )				      	      sum3 += stack3 [ i ]				    	    sum3 += stack3 [ i ]				  
12 LOAD_GLOBAL 0 ( range )				      	  top1 , top2 , top3 = 0 , 0 , 0			    	top1 , top2 , top3 = 0 , 0 , 0				  
14 LOAD_FAST 3 ( n1 )					      	  ans = 0						    	ans = 0							  
16 CALL_FUNCTION 1					      	  while ( 1 ) :						    	while ( not top1 == n1 ) or ( top2 == n2 or top3 == n3 )  
18 GET_ITER						      	      if ( top1 == n1 or top2 == n2 or top3 == n3 ) :	    	    return 0						  
>> 20 FOR_ITER 16 ( to 38 )				      		  return 0					    	if ( sum1 == sum3 and sum2 >= sum3 ) :			  
22 STORE_FAST 9 ( i )					      	      if ( sum1 == sum2 and sum2 == sum3 ) :		    	    if sum4 >= sum3 and sum4 >= sum3 :			  
							      		  return sum1					    		return 0					  
4 24 LOAD_FAST 6 ( sum1 )				      	      if ( sum1 >= sum2 and sum1 >= sum3 ) :		    	    if sum5 >= sum3 and sum5 >= sum3 :			  
26 LOAD_FAST 0 ( stack1 )				      		  sum1 -= stack1 [ top1 ]			    		return 0					  
28 LOAD_FAST 9 ( i )					      		  top1 = top1 + 1				    	    if sum5 >= sum3 and sum4 >= sum3 :			  
30 BINARY_SUBSCR					      	      elif ( sum2 >= sum3 and sum2 >= sum3 ) :		    		return 0					  
32 INPLACE_ADD						      		  sum2 -= stack2 [ top2 ]			    	if sum5 >= sum3 and sum5 >= sum3 :			  
34 STORE_FAST 6 ( sum1 )				      		  top2 = top2 + 1				    	    return 0						  
36 JUMP_ABSOLUTE 20					      	      elif ( sum3 >= sum2 and sum3 >= sum1 ) :		    return sum1							  
>> 38 POP_BLOCK						      		  sum3 -= stack3 [ top3 ]			    								  
							      		  top3 = top3 + 1				    								  
5 >> 40 SETUP_LOOP 28 ( to 70 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 4 ( n2 )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 16 ( to 68 )				      								    								  
52 STORE_FAST 9 ( i )					      								    								  
							      								    								  
6 54 LOAD_FAST 7 ( sum2 )				      								    								  
56 LOAD_FAST 1 ( stack2 )				      								    								  
58 LOAD_FAST 9 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 7 ( sum2 )				      								    								  
66 JUMP_ABSOLUTE 50					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
7 >> 70 SETUP_LOOP 28 ( to 100 )			      								    								  
72 LOAD_GLOBAL 0 ( range )				      								    								  
74 LOAD_FAST 5 ( n3 )					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 GET_ITER						      								    								  
>> 80 FOR_ITER 16 ( to 98 )				      								    								  
82 STORE_FAST 9 ( i )					      								    								  
							      								    								  
8 84 LOAD_FAST 8 ( sum3 )				      								    								  
86 LOAD_FAST 2 ( stack3 )				      								    								  
88 LOAD_FAST 9 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 8 ( sum3 )				      								    								  
96 JUMP_ABSOLUTE 80					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
9 >> 100 LOAD_CONST 1 ( ( 0 , 0 , 0 ) )			      								    								  
102 UNPACK_SEQUENCE 3					      								    								  
104 STORE_FAST 10 ( top1 )				      								    								  
106 STORE_FAST 11 ( top2 )				      								    								  
108 STORE_FAST 12 ( top3 )				      								    								  
							      								    								  
10 110 LOAD_CONST 2 ( 0 )				      								    								  
112 STORE_FAST 13 ( ans )				      								    								  
							      								    								  
11 114 SETUP_LOOP 164 ( to 280 )			      								    								  
							      								    								  
12 >> 116 LOAD_FAST 10 ( top1 )				      								    								  
118 LOAD_FAST 3 ( n1 )					      								    								  
120 COMPARE_OP 2 ( == )					      								    								  
122 POP_JUMP_IF_TRUE 140				      								    								  
124 LOAD_FAST 11 ( top2 )				      								    								  
126 LOAD_FAST 4 ( n2 )					      								    								  
128 COMPARE_OP 2 ( == )					      								    								  
130 POP_JUMP_IF_TRUE 140				      								    								  
132 LOAD_FAST 12 ( top3 )				      								    								  
134 LOAD_FAST 5 ( n3 )					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
13 >> 140 LOAD_CONST 2 ( 0 )				      								    								  
142 RETURN_VALUE					      								    								  
							      								    								  
14 >> 144 LOAD_FAST 6 ( sum1 )				      								    								  
146 LOAD_FAST 7 ( sum2 )				      								    								  
148 COMPARE_OP 2 ( == )					      								    								  
150 POP_JUMP_IF_FALSE 164				      								    								  
152 LOAD_FAST 7 ( sum2 )				      								    								  
154 LOAD_FAST 8 ( sum3 )				      								    								  
156 COMPARE_OP 2 ( == )					      								    								  
158 POP_JUMP_IF_FALSE 164				      								    								  
							      								    								  
15 160 LOAD_FAST 6 ( sum1 )				      								    								  
162 RETURN_VALUE					      								    								  
							      								    								  
16 >> 164 LOAD_FAST 6 ( sum1 )				      								    								  
166 LOAD_FAST 7 ( sum2 )				      								    								  
168 COMPARE_OP 5 ( >= )					      								    								  
170 POP_JUMP_IF_FALSE 202				      								    								  
172 LOAD_FAST 6 ( sum1 )				      								    								  
174 LOAD_FAST 8 ( sum3 )				      								    								  
176 COMPARE_OP 5 ( >= )					      								    								  
178 POP_JUMP_IF_FALSE 202				      								    								  
							      								    								  
17 180 LOAD_FAST 6 ( sum1 )				      								    								  
182 LOAD_FAST 0 ( stack1 )				      								    								  
184 LOAD_FAST 10 ( top1 )				      								    								  
186 BINARY_SUBSCR					      								    								  
188 INPLACE_SUBTRACT					      								    								  
190 STORE_FAST 6 ( sum1 )				      								    								  
							      								    								  
18 192 LOAD_FAST 10 ( top1 )				      								    								  
194 LOAD_CONST 3 ( 1 )					      								    								  
196 BINARY_ADD						      								    								  
198 STORE_FAST 10 ( top1 )				      								    								  
200 JUMP_ABSOLUTE 116					      								    								  
							      								    								  
19 >> 202 LOAD_FAST 7 ( sum2 )				      								    								  
204 LOAD_FAST 8 ( sum3 )				      								    								  
206 COMPARE_OP 5 ( >= )					      								    								  
208 POP_JUMP_IF_FALSE 240				      								    								  
210 LOAD_FAST 7 ( sum2 )				      								    								  
212 LOAD_FAST 8 ( sum3 )				      								    								  
214 COMPARE_OP 5 ( >= )					      								    								  
216 POP_JUMP_IF_FALSE 240				      								    								  
							      								    								  
20 218 LOAD_FAST 7 ( sum2 )				      								    								  
220 LOAD_FAST 1 ( stack2 )				      								    								  
222 LOAD_FAST 11 ( top2 )				      								    								  
224 BINARY_SUBSCR					      								    								  
226 INPLACE_SUBTRACT					      								    								  
228 STORE_FAST 7 ( sum2 )				      								    								  
							      								    								  
21 230 LOAD_FAST 11 ( top2 )				      								    								  
232 LOAD_CONST 3 ( 1 )					      								    								  
234 BINARY_ADD						      								    								  
236 STORE_FAST 11 ( top2 )				      								    								  
238 JUMP_ABSOLUTE 116					      								    								  
							      								    								  
22 >> 240 LOAD_FAST 8 ( sum3 )				      								    								  
242 LOAD_FAST 7 ( sum2 )				      								    								  
244 COMPARE_OP 5 ( >= )					      								    								  
246 POP_JUMP_IF_FALSE 116				      								    								  
248 LOAD_FAST 8 ( sum3 )				      								    								  
250 LOAD_FAST 6 ( sum1 )				      								    								  
252 COMPARE_OP 5 ( >= )					      								    								  
254 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
23 256 LOAD_FAST 8 ( sum3 )				      								    								  
258 LOAD_FAST 2 ( stack3 )				      								    								  
260 LOAD_FAST 12 ( top3 )				      								    								  
262 BINARY_SUBSCR					      								    								  
264 INPLACE_SUBTRACT					      								    								  
266 STORE_FAST 8 ( sum3 )				      								    								  
							      								    								  
24 268 LOAD_FAST 12 ( top3 )				      								    								  
270 LOAD_CONST 3 ( 1 )					      								    								  
272 BINARY_ADD						      								    								  
274 STORE_FAST 12 ( top3 )				      								    								  
276 JUMP_ABSOLUTE 116					      								    								  
278 POP_BLOCK						      								    								  
>> 280 LOAD_CONST 0 ( None )				      								    								  
282 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		      POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		    POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS			  POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS
--							      --							    --								  --
Disassembly of <code object pointClip at 0x7f33e2653f60, file def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :	    def pointClip ( XY , n , Xmin , Ymin , Xmax , Xmax ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Point inside the viewing pane:" )		    	print ( "Point inside the viewing pane:" )		  l/mt_sa_1000/tx8nnsvsdt/eval_scripts/dis_sa-python
2 LOAD_CONST 1 ( 'Point inside the viewing pane:' )	      	  for i in range ( n ) :				    	for i in range ( n ) :					  _sa.valid/POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHI
4 CALL_FUNCTION 1					      	      if ( ( XY [ i ] [ 0 ] >= Xmin ) and ( XY [ i ] [ 0 ]  	    if ( XY [ i ] [ 0 ] >= Xmin and XY [ i ] [ 0 ] <= Xma CS.py", line 41     if not ( print ( "\n" ) )
6 POP_TOP						      		  if ( ( XY [ i ] [ 1 ] >= Ymin ) and ( XY [ i ] [  		if XY [ i ] [ 1 ] <= Ymin and XY [ i ] [ 1 ] <= Y 			  ^ SyntaxError: invalid syn
							      		      print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i  		    print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i  tax
3 8 SETUP_LOOP 118 ( to 128 )				      	  print ( "\n\nPoint outside the viewing pane:" )	    	    print ( "\nPoint outside the viewing pane:" )	  
10 LOAD_GLOBAL 1 ( range )				      	  for i in range ( n ) :				    	    for i in range ( n ) :				  
12 LOAD_FAST 1 ( n )					      	      if ( ( XY [ i ] [ 0 ] < Xmin ) or ( XY [ i ] [ 0 ] >  		if ( XY [ i ] [ 0 ] >= Xmin and XY [ i ] [ 0 ] <  
14 CALL_FUNCTION 1					      		  print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i ] [  		    print ( "[" , XY [ i ] [ 1 ] , sep = ", " , e 
16 GET_ITER						      	      if ( ( XY [ i ] [ 1 ] < Ymin ) or ( XY [ i ] [ 1 ] >  	if not ( print ( "\n" ) )				  
>> 18 FOR_ITER 106 ( to 126 )				      		  print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i ] [  	if ( not ( XY [ i ] [ 0 ] < Xmin ) ) :			  
20 STORE_FAST 6 ( i )					      								    	    print ( "[" ] , end = ", " , XY [ i ] [ 0 ] , sep = " 
							      								    								  
4 22 LOAD_FAST 0 ( XY )					      								    								  
24 LOAD_FAST 6 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 2 ( Xmin )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 18					      								    								  
38 LOAD_FAST 0 ( XY )					      								    								  
40 LOAD_FAST 6 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 2 ( 0 )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 4 ( Xmax )					      								    								  
50 COMPARE_OP 1 ( <= )					      								    								  
52 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 54 LOAD_FAST 0 ( XY )					      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 3 ( Ymin )					      								    								  
66 COMPARE_OP 5 ( >= )					      								    								  
68 POP_JUMP_IF_FALSE 18					      								    								  
70 LOAD_FAST 0 ( XY )					      								    								  
72 LOAD_FAST 6 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 5 ( Ymax )					      								    								  
82 COMPARE_OP 1 ( <= )					      								    								  
84 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
6 86 LOAD_GLOBAL 0 ( print )				      								    								  
88 LOAD_CONST 4 ( '[' )					      								    								  
90 LOAD_FAST 0 ( XY )					      								    								  
92 LOAD_FAST 6 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 2 ( 0 )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 5 ( ', ' )				      								    								  
102 LOAD_FAST 0 ( XY )					      								    								  
104 LOAD_FAST 6 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 3 ( 1 )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 6 ( ']' )				      								    								  
114 LOAD_CONST 7 ( '' )					      								    								  
116 LOAD_CONST 7 ( '' )					      								    								  
118 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			      								    								  
120 CALL_FUNCTION_KW 7					      								    								  
122 POP_TOP						      								    								  
124 JUMP_ABSOLUTE 18					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
7 >> 128 LOAD_GLOBAL 0 ( print )			      								    								  
130 LOAD_CONST 9 ( '\n\nPoint outside the viewing pane:' )    								    								  
132 CALL_FUNCTION 1					      								    								  
134 POP_TOP						      								    								  
							      								    								  
8 136 SETUP_LOOP 156 ( to 294 )				      								    								  
138 LOAD_GLOBAL 1 ( range )				      								    								  
140 LOAD_FAST 1 ( n )					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 GET_ITER						      								    								  
>> 146 FOR_ITER 144 ( to 292 )				      								    								  
148 STORE_FAST 6 ( i )					      								    								  
							      								    								  
9 150 LOAD_FAST 0 ( XY )				      								    								  
152 LOAD_FAST 6 ( i )					      								    								  
154 BINARY_SUBSCR					      								    								  
156 LOAD_CONST 2 ( 0 )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_FAST 2 ( Xmin )				      								    								  
162 COMPARE_OP 0 ( < )					      								    								  
164 POP_JUMP_IF_TRUE 182				      								    								  
166 LOAD_FAST 0 ( XY )					      								    								  
168 LOAD_FAST 6 ( i )					      								    								  
170 BINARY_SUBSCR					      								    								  
172 LOAD_CONST 2 ( 0 )					      								    								  
174 BINARY_SUBSCR					      								    								  
176 LOAD_FAST 4 ( Xmax )				      								    								  
178 COMPARE_OP 4 ( > )					      								    								  
180 POP_JUMP_IF_FALSE 220				      								    								  
							      								    								  
10 >> 182 LOAD_GLOBAL 0 ( print )			      								    								  
184 LOAD_CONST 4 ( '[' )				      								    								  
186 LOAD_FAST 0 ( XY )					      								    								  
188 LOAD_FAST 6 ( i )					      								    								  
190 BINARY_SUBSCR					      								    								  
192 LOAD_CONST 2 ( 0 )					      								    								  
194 BINARY_SUBSCR					      								    								  
196 LOAD_CONST 5 ( ', ' )				      								    								  
198 LOAD_FAST 0 ( XY )					      								    								  
200 LOAD_FAST 6 ( i )					      								    								  
202 BINARY_SUBSCR					      								    								  
204 LOAD_CONST 3 ( 1 )					      								    								  
206 BINARY_SUBSCR					      								    								  
208 LOAD_CONST 6 ( ']' )				      								    								  
210 LOAD_CONST 7 ( '' )					      								    								  
212 LOAD_CONST 7 ( '' )					      								    								  
214 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			      								    								  
216 CALL_FUNCTION_KW 7					      								    								  
218 POP_TOP						      								    								  
							      								    								  
11 >> 220 LOAD_FAST 0 ( XY )				      								    								  
222 LOAD_FAST 6 ( i )					      								    								  
224 BINARY_SUBSCR					      								    								  
226 LOAD_CONST 3 ( 1 )					      								    								  
228 BINARY_SUBSCR					      								    								  
230 LOAD_FAST 3 ( Ymin )				      								    								  
232 COMPARE_OP 0 ( < )					      								    								  
234 POP_JUMP_IF_TRUE 252				      								    								  
236 LOAD_FAST 0 ( XY )					      								    								  
238 LOAD_FAST 6 ( i )					      								    								  
240 BINARY_SUBSCR					      								    								  
242 LOAD_CONST 3 ( 1 )					      								    								  
244 BINARY_SUBSCR					      								    								  
246 LOAD_FAST 5 ( Ymax )				      								    								  
248 COMPARE_OP 4 ( > )					      								    								  
250 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
12 >> 252 LOAD_GLOBAL 0 ( print )			      								    								  
254 LOAD_CONST 4 ( '[' )				      								    								  
256 LOAD_FAST 0 ( XY )					      								    								  
258 LOAD_FAST 6 ( i )					      								    								  
260 BINARY_SUBSCR					      								    								  
262 LOAD_CONST 2 ( 0 )					      								    								  
264 BINARY_SUBSCR					      								    								  
266 LOAD_CONST 5 ( ', ' )				      								    								  
268 LOAD_FAST 0 ( XY )					      								    								  
270 LOAD_FAST 6 ( i )					      								    								  
272 BINARY_SUBSCR					      								    								  
274 LOAD_CONST 3 ( 1 )					      								    								  
276 BINARY_SUBSCR					      								    								  
278 LOAD_CONST 6 ( ']' )				      								    								  
280 LOAD_CONST 7 ( '' )					      								    								  
282 LOAD_CONST 7 ( '' )					      								    								  
284 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			      								    								  
286 CALL_FUNCTION_KW 7					      								    								  
288 POP_TOP						      								    								  
290 JUMP_ABSOLUTE 146					      								    								  
>> 292 POP_BLOCK					      								    								  
>> 294 LOAD_CONST 0 ( None )				      								    								  
296 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
